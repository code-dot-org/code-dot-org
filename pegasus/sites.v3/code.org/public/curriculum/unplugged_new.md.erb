---
title: CS Fundamentals Unplugged
video_player: true
theme: responsive
---

# CS Fundamentals Unplugged

We've compiled a list of all of our unplugged lessons for you to use in your classroom. Now you can teach the fundamentals of computer science, whether you have computers in your classroom or not! 
<br>
<div class="col-50">
We refer to lessons in which students are not working on a computer as “unplugged.” Students will often work with pencil and paper or physical manipulatives.  These are intentionally placed kinesthetic opportunities that help students digest complicated concepts in ways that relate to their own lives. <br><br>
Unplugged lessons are particularly useful for building and maintaining a collaborative classroom environment, and they are useful touchstone experiences you can refer to when introducing more abstract concepts. Each of these activities can either be used alone or with other computer science lessons on related concepts.
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Ages 4+, English only
</div>

<div style="clear: both;"></div>

***
## Unplugged lessons in CS Fundamentals 2020-21
The following lessons can be found in <a href="https://docs.google.com/document/d/1hstUHTGIdvtPP0TDdEfQeXG3zQ0q6ys237n2BY9CQmg/preview" target="_blank">CS Fundamentals 2020-21</a>.
<br><br>
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>

<table style="width:100%">
  <tr>
    <th><center><big>Course</th>
    <th><center><big>Lesson Plan</th> 
    <th width=10%><center><big>Concept</th>
    <th width=20%><center><big>Video</th>
     <tr>
    <th rowspan="3" id="t01">Course A</th>
    <td width=40%><a href="https://curriculum.code.org/csf-20/coursea/3/"target="_blank">A.3 - Happy Maps</a><br><small>This unplugged lesson brings together teams with a simple task: get the "flurb" to the fruit. Students will practice writing precise instructions as they work to translate instructions into the symbols provided. If problems arise in the code, students should also work together to recognize bugs and build solutions.</td><td>Sequencing</td> <td><%=view :display_video_thumbnail, id: "coursea_one", video_code: "hrnhiKAQ1_k", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td width=40%><a href="https://curriculum.code.org/csf-20/coursea/7/"target="_blank">A.7 - Happy Loops</a><br><small>This activity revisits Happy Maps. This time, student will be solving bigger, longer puzzles with their code, leading them to see utility in structures that let them write longer code in an easier way.</td><td>Loops</td> <td><img src="/images/a7.png" width="90%"></td>
  <tr>
    <td width=40%><a href="https://curriculum.code.org/csf-20/coursea/11/"target="_blank">A.11 - The Big Event Jr.</a><br><small>Events are a great way to add variety to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. That is what events are for.</td><td>Events</td> <td><%=view :display_video_thumbnail, id: "coursea_three", video_code: "u0WV9shCoak", play_button: 'center', letterbox: "false" %></td>
  </tr>
       <tr>
    <th rowspan="3" id="t02">Course B</th>
    <td><a href="https://curriculum.code.org/csf-20/courseb/2/"target="_blank">B.2 - Move It, Move It</a><br><small>This lesson will work to prepare students mentally for the coding exercises that they will encounter over the length of this course. In small teams, students will use physical activity to program their classmates to step carefully from place to place until a goal is achieved.</td><td>Sequencing</td> <td><%=view :display_video_thumbnail, id: "courseb_one", video_code: "VGi2bnRFqzM", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/courseb/6/"target="_blank">B.6 - Getting Loopy</a><br><small>As we start to write longer and more interesting programs, our code often contains a lot of repetition. In this lesson, students will learn about how loops can be used to more easily communicate instructions that have a lot of repetition by looking at the repeated patterns of movement in a dance.</td><td>Loops</td> <td><%=view :display_video_thumbnail, id: "courseb_two", video_code: "JoKTqHCni0M", play_button: 'center', letterbox: "false" %></td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/courseb/10/"target="_blank">B.10 - The Right App</a><br><small>This lesson has students recognize that computer science can help people in real life. First, students empathize with several fictional smartphone users in order to help them find the “right app” that addresses their needs. Then, students exercise empathy and creativity to sketch their own smartphone app that addresses the needs of one additional user.</td><td>Impacts of Computing</td> <td><img src="/images/b10.png" width="90%"></td>
  </tr>
       <tr>
    <th rowspan="4" id="t03">Course C</th>
    <td><a href="https://curriculum.code.org/csf-20/coursec/3/"target="_blank">C.3 - My Robotic Friends Jr.</a><br><i>*Supplies: Plastic cups (10/group of 2-3)</i><br><small>Using a set of symbols in place of code, students will design algorithms to instruct a "robot" to stack cups in different patterns. Students will take turns participating as the robot, responding only to the algorithm defined by their peers. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td><td>Sequencing</td><td><%=view :display_video_thumbnail, id: "coursec_one", video_code: "xaW3PAzHxCU", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
   <td><a href="https://curriculum.code.org/csf-20/coursec/8/"target="_blank">C.8 - Binary Bracelets</a><br><i>*Supplies: Markers. Optional – 18 black/18 white beads, 1 pipe cleaner per student</i><br><small>Binary is extremely important in the world of computers. The majority of computers today store all sorts of information in binary form. This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs.</td><td>Binary</td><td><%=view :display_video_thumbnail, id: "coursec_two", video_code: "fDLkBqZpxWQ", play_button: 'center', letterbox: "false" %></td>
  <tr>
   <td><a href="https://curriculum.code.org/csf-20/coursec/9/"target="_blank">C.9 - My Loopy Robotic Friend Jr</a><br><i>*Supplies: Paper cups (20/group of 4)</i><br><small>Overview
Building on the initial "My Robotic Friends" activity, students tackle larger and more complicated designs. In order to program their "robots" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.</td><td>Loops</td><td><%=view :display_video_thumbnail, id: "coursec_three", video_code: "xaW3PAzHxCU", play_button: 'center', letterbox: "false" %></td>
  </tr>  <tr>
   <td><a href="https://curriculum.code.org/csf-20/coursec/14/"target="_blank">C.14 - The Big Event</a><br><small>Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. Events can make your program more interesting and interactive.</td><td>Events</td><td><%=view :display_video_thumbnail, id: "coursec_four", video_code: "u0WV9shCoak", play_button: 'center', letterbox: "false" %></td>
  </tr>
         <tr>
    <th rowspan="4" id="t04">Course D</th>
    <td><a href="https://curriculum.code.org/csf-20/coursed/1/"target="_blank">D.1 - Graph Paper Programming<br></a><small>By "programming" one another to draw pictures, students get an opportunity to experience some of the core concepts of programming in a fun and accessible way. The class will start by having students use symbols to instruct each other to color squares on graph paper in an effort to reproduce an existing picture. If there’s time, the lesson can conclude with images that the students create themselves.</td><td>Sequencing</td><td><%=view :display_video_thumbnail, id: "coursed_one", video_code: "vBUtejDNvrs", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursed/3/"target="_blank">D.3 - Relay Programming<br></a><small>This activity will begin with a short lesson on debugging and persistence, then will quickly move to a race against the clock as students break into teams and work together to write a program one instruction at a time.</td><td>Sequencing</td><td><%=view :display_video_thumbnail, id: "coursed_two", video_code: "l5MKkXbzOsk", play_button: 'center', letterbox: "false" %></td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursed/11/"target="_blank">D.11 - Conditionals with Cards</a><br><small>This lesson demonstrates how conditionals can be used to tailor a program to specific information. We don’t always have all of the information we need when writing a program. Sometimes you will want to do something different in one situation than in another, even if you don't know what situation will be true when your code runs. That is where conditionals come in. Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.+</td><td>Conditionals</td><td><%=view :display_video_thumbnail, id: "coursed_three", video_code: "2m2Rn9VxHfU", play_button: 'center', letterbox: "false" %></td>
  </tr>  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursed/16/"target="_blank">D.16 - Binary Images</a><br><i>*Supplies: Optional - Groupings of opposite items to display to students</i><br><small>Though many people think of binary as strictly zeros and ones, students will be introduced to the idea that information can be represented in a variety of binary options. This lesson takes that concept one step further as it illustrates how a computer can store even more complex information (such as images and colors) in binary, as well.</td><td>Binary</td><td><%=view :display_video_thumbnail, id: "coursed_four", video_code: "dzHlZV53VfY", play_button: 'center', letterbox: "false" %></td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t05">Course E</th>
    <td><a href="https://curriculum.code.org/csf-20/coursee/10/"target="_blank">E.10 - Digital Sharing</a><br><i>*Supplies: Smartphone or tablet</i><br><small>Loaned to Computer Science Fundamentals by the team over at Copyright and Creativity, this lesson exists to help students understand the challenges and beneﬁts of respecting ownership and copyright, particularly in digital environments. Students should be encouraged to respect artists’ rights as an important part of being an ethical digital citizen.</td><td>Digital Citizenship</td><td><%=view :display_video_thumbnail, id: "coursee_one", video_code: "6RFY5YnA8iY", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursee/14/"target="_blank">E.14 - Songwriting</a><br><small>One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions can be such a helpful practice.</td><td>Functions</td><td><%=view :display_video_thumbnail, id: "coursee_two", video_code: "QuIMLel1mmw", play_button: 'center', letterbox: "false" %></td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursee/18/"target="_blank">E.18 - Designing for Accessibility</a><br><small>In this lesson, students will learn about accessibility and the value of empathy through brainstorming and designing accessible solutions for hypothetical apps.</td><td>Impacts of Computing</td><td><img src="/images/e18.png" width="90%"></td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t06">Course F</th>
    <td><a href="https://curriculum.code.org/csf-20/coursef/7/"target="_blank">F.7 - Envelope Variables</a><br><i>*Supplies: Envelopes (1-4/group of 2-4)</i><br><small>Variables are used as placeholders for values such as numbers or words. Variables allow for a lot of freedom in programming. Instead of having to type out a phrase many times or remember an obscure number, computer scientists can use variables to reference them. This lesson helps to explain what variables are and how we can use them in many different ways. The idea of variables isn't an easy concept to grasp, so we recommend allowing plenty of time for discussion at the end of the lesson.</td><td>Variables</td><td><%=view :display_video_thumbnail, id: "coursef_one", video_code: "DI7DprN4FtE", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursef/13/"target="_blank">F.13 - The Internet</a><br><small>Even though many people use the internet daily, not very many know how it works. In this lesson, students will pretend to flow through the internet, all the while learning about connections, URLs, IP Addresses, and the DNS.</td><td>Data</td><td><%=view :display_video_thumbnail, id: "coursef_two", video_code: "mFOUbqYv1Sc", play_button: 'center', letterbox: "false" %></td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursef/14/"target="_blank">F.14 - For Loop Fun</a><br><i>*Supplies: Dice (3 dice/group of 2-4)</i><br><small>We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic.</td><td>For Loops</td><td><%=view :display_video_thumbnail, id: "coursef_three", video_code: "mX857v5B4gE", play_button: 'center', letterbox: "false" %></td>
  </tr>
</table>
<p style="clear:both"></p>


***
## Additional Unplugged lessons

The following lessons are organized by concept and can be found in earlier versions of our CS Fundamentals courses. Additional resources you may want to consult as you plan to use these lessons include:
* [2019 Course A-F Curriculum Guide](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 Course A-F Supply List](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 Course Amazon Lists](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 Course A-F Curriculum Guide](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 Course A-F Curriculum Guide (v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [Course 1-4 Curriculum Guide](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF Flashcards](https://code.org/curriculum/docs/k-5/flashCards.pdf)
<br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>

<table style="width:100%">
  <tr>
    <th><center><big>Concept</th>
    <th width=65%><center><big>Lesson Plan <br>
<small> Lesson Plan includes additional resources (slides, videos, answer keys, etc).
</th> 
    <th><center><big>Resources</th>
     <tr>
    <th rowspan="2" id=t07 width=5%>Digital Citizenship</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18"target="_blank">Crowdsourcing</a></td> <td><%=view :display_video_thumbnail, id: "archive_one", video_code: "IqZMnfxqEfY", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
      <td colspan="2">*Common Sense Education has a <a href="https://www.commonsense.org/education/digital-citizenship/curriculum"target="_blank">full Digital Citizenship Curriculum</a> that includes many unplugged activities.</td>
    <tr>
    <th  id=t07>Sequencing</th>
        <td><a href="https://curriculum.code.org/csf-20/coursec/3/"target="_blank">My Robotic Friends Jr.</a><br><small>This teaches students the connection between algorithms and programming, as well as the valuable skill of debugging.
</td> <td><%=view :display_video_thumbnail, id: "archive_two", video_code: "xaW3PAzHxCU", play_button: 'center', letterbox: "false" %></td>
  </tr>
    <tr>
    <th id=t07>Loops</th>
        <td><a href="https://curriculum.code.org/csf-18/coursee/6/"target="_blank">My Loopy Robotic Friends</a><br><small>Here, students learn the simplicity and utility of loops by “programming” their friends using the language from "My Robotic Friends." Once loops are introduced, students will find that they can build bigger structures faster.

</td> <td><%=view :display_video_thumbnail, id: "archive_two", video_code: "xaW3PAzHxCU", play_button: 'center', letterbox: "false" %></td>
  </tr>
     <th rowspan="2" id=t07>Functions</th>
    <td><a href="https://code.org/curriculum/course3/4/Teacher"target="_blank">Functional Suncatchers</a><br><small>In this lesson, students will make a suncatcher out of string, beads, and a special charm. The students will follow a series of repetitive steps, then be asked to identify certain sets of “skills” that are duplicated several times. Once those skills are defined, they will be called from a main program and the whole beautiful process of creation will be recorded on a single sheet of paper. The final program will be geared toward the entire class, whatever their type of string, beads, and charms. To effectively allow for this, students will need to “abstract out” the details of their specific materials and create vague terms for an individual’s supplies. This use of generic placeholders is a wonderful introduction to variables.</td> <td><a href="https://youtu.be/d1MdyeXy0v0"target="_blank">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I"target="_blank">See Lesson in Action</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf"target="_blank">Activity Answer Key <a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf"target="_blank">Assessment Answer Key</a></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/"target="_blank">Songwriting with Parameters</a><br><small>One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions is such a helpful practice, and how they can use those structures even when chunks of code are slightly different.
</td> <td><%=view :display_video_thumbnail, id: "archive_three", video_code: "28ujn3adHBA", play_button: 'center', letterbox: "false" %></td>
  </tr>
     <th rowspan="6" id=t07>Algorithms</th>
    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/"target="_blank">Dice Race</a><br><small>In this lesson, students will relate the concept of algorithms back to real-life activities by playing the Dice Race game. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.
</td> <td><%=view :display_video_thumbnail, id: "archive_four", video_code: "wQpgBCKivAs", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursee/1"target="_blank">My Robotic Friends</a><br><small>Using a predefined symbol key, your students will figure out how to guide one another to accomplish specific tasks without using any verbal commands. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td> <td><%=view :display_video_thumbnail, id: "archive_five", video_code: "xaW3PAzHxCU", play_button: 'center', letterbox: "false" %></td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursec/4/"target="_blank">Real-Life Algorithms: Paper Planes</a><br><small>In this lesson, students will relate the concept of algorithms back to everyday activities. After discussing algorithms, students will make paper airplanes using an algorithm. The goal here is to start building the skills to translate real world situations to online scenarios and vice versa.</td> <td><%=view :display_video_thumbnail, id: "archive_six", video_code: "AWqo8Gxtrjs", play_button: 'center', letterbox: "false" %></td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/3/"target="_blank">Real Life Algorithms: Plant a Seed</a><br><small>In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.</td> <td><%=view :display_video_thumbnail, id: "archive_seven", video_code: "FHsuEh1kJ18", play_button: 'center', letterbox: "false" %></td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/"target="_blank">Tangrams</a><br><small>This lesson shows us something important about algorithms. As long as you keep an algorithm simple, there are lots of ways to use it. However, if you want to make sure everyone produces the same outcome, then your algorithm needs more detail. Students will learn the difference between a detailed and general algorithm while playing with tangrams.</td> <td><%=view :display_video_thumbnail, id: "archive_eight", video_code: "xZlKyTwQZv8", play_button: 'center', letterbox: "false" %></td>
  </tr>
  </tr>
    <tr>
    <td><a href="https://code.org/curriculum/course3/1/Teacher"target="_blank">Computational Thinking</a><br><small>For this activity, no instructions are provided. Instead, students will use examples of what imaginary players have done to figure out how to play the game. This lesson gives students the opportunity to practice the four arts of computational thinking (decomposition, pattern matching, abstraction, and algorithms) in one cohesive activity.</td> <td><a href="https://youtu.be/TlAaklrolA0"target="_blank">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU"target="_blank">See Lesson in Action</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf"target="_blank">Activity Answer Key </a></td>
  </tr>
    </tr>
     <th id=t07 rowspan="2">Computational Thinking</th>
    <td><a href="https://studio.code.org/unplugged/unplug2.pdf"target="_blank">Computational Thinking with Monsters</a><br><small>With nothing but paper and markers, students will learn the four steps of computational thinking. After a brief introduction, students should be split into groups where they will have to create directions for other students to draw a specific monster (from a catalog of pre-selected monsters). The entire task must be decomposed, then teams will analyze all monsters in the catalog for patterns, abstract similar details from the monsters, then use that information to create an algorithm (directions) for another team to draw a certain monster. Teams will then switch algorithms with another group and draw the monster based on what that algorithm indicates. Is the drawing what the original team intended?</td> <td><%=view :display_video_thumbnail, id: "archive_nine", video_code: "injJWiSA0pw", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/1/"target="_blank">Unspotted Bugs</a><br><small>This lesson will guide students through the steps of debugging. Students will learn the mantra: "What happened? What was supposed to happen? What does that tell you?" </td> <td><%=view :display_video_thumbnail, id: "archive_ten", video_code: "S8qub6aPysM", play_button: 'center', letterbox: "false" %></td>
  </tr>
    </tr>
     <th rowspan="2" id=t07>Persistence</th>
  <td><a href="https://code.org/curriculum/course4/5/Teacher"target="_blank">Building a Foundation</a><br><small>New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.</td> <td><%=view :display_video_thumbnail, id: "archive_eleven", video_code: "eZqKqI8AvnA", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
 <td><a href="https://curriculum.code.org/csf-18/coursea/2/"target="_blank">Stevie and the Big Project</a><br><small>When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up. This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure. This lesson can be done over one or two class sessions. If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.</td> <td><%=view :display_video_thumbnail, id: "archive_twelve", video_code: "cybBscJ3G8c", play_button: 'center', letterbox: "false" %></td>
  </tr>
     <th id=t07>Abstraction</th>
    <td><a href="https://code.org/curriculum/course4/5/Teacher"target="_blank">Mad Glibs</a><br><small>Abstraction is one of the most important skills for a computer scientist to understand. It simplifies problems and prevents unnecessary repetition. A good coder uses abstraction just about every time she creates a program. This activity will have your students analyze stories for differences so that they can abstract them away. Those abstracted stories become templates for fun and crazy new ones.</td> <td><a href="https://youtu.be/TctGRrUdkcc"target="_blank">Lesson Video</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf"target="_blank">Activity Answer Key</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf"target="_blank">Assessment Answer Key </a></td>
  </tr>
</table>

<p style="clear:both"></p>
