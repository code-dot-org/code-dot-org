# CS Fundamentals Unplugged

We've compiled a list of all of our unplugged lessons for you to use in your classroom. Now you can teach the fundamentals of computer science, whether you have computers in your classroom or not! 

Ages 4+, English only

<br>
<div class="col-50">
We refer to lessons in which students are not working on a computer as “unplugged.” Students will often work with pencil and paper or physical manipulatives.  These are intentionally placed kinesthetic opportunities that help students digest complicated concepts in ways that relate to their own lives. <br>
Unplugged lessons are particularly useful for building and maintaining a collaborative classroom environment, and they are useful touchstone experiences you can refer to when introducing more abstract concepts. Each of these activities can either be used alone or with other computer science lessons on related concepts.
</div>

<div class="col-50" style="text-align:center">
<img src="/images/main.png" width="90%">
</div>

<div style="clear: both;"></div>

***
## Unplugged lessons in CS Fundamentals 2020-21
The following lessons can be found in CS Fundamentals 2020-21. We recommend consulting the following resources as you plan to use these lessons:


<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t01 {
  width: 30%;
  background-color: #ffa400;
}
#t02 {
  width: 30%;
  background-color: #ffb81d;
}
#t03 {
  width: 30%;
  background-color: #b9bf15;
}
#t04 {
  width: 30%;
  background-color: #00adbc;
}
#t05 {
  width: 30%;
  background-color: #0094ca;
}
#t06 {
  width: 30%;
  background-color: #7765a0;
}
</style>
</head>
<body>

<table style="width:100%">
  <tr>
    <th><center><big>Concept</th>
    <th><center><big>Lesson Plan</th> 
    <th><center><big>Concept</th>
    <th><center><big>Video</th>
     <tr>
    <th rowspan="3" id="t01">Course A</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
       <tr>
    <th rowspan="3" id="t02">Course B</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
       <tr>
    <th rowspan="4" id="t03">Course C</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
         <tr>
    <th rowspan="4" id="t04">Course D</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t05">Course E</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t06">Course F</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">A.3 - Happy Maps</a></td><td>Sequencing</td> <td>https://www.youtube.com/watch?v=hrnhiKAQ1_k&feature=youtu.be</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/7/">A.7 - Happy Loops</a></td><td>Loops</td> <td>insert image</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-20/coursea/11/">A.11 - The Big Event Jr.</a></td><td>Events</td> <td>https://www.youtube.com/watch?v=u0WV9shCoak&feature=youtu.be</td>
  </tr>
</table>

</body>
</html>

<p style="clear:both"></p>


***
## Additional Unplugged lessons

The following lessons are organized by concept and can be found in earlier versions of our CS Fundamentals courses. Additional resources you may want to consult as you plan to use these lessons include:
* [2019 Course A-F Curriculum Guide](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 Course A-F Supply List](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 Course Amazon Lists](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 Course A-F Curriculum Guide](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 Course A-F Curriculum Guide (v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [Course 1-4 Curriculum Guide](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF Flashcards](https://code.org/curriculum/docs/k-5/flashCards.pdf)
<br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t07 {
  width: 30%;
  background-color: #c6cacd;
  color: #000000
}
</style>
</head>
<body>

<table style="width:70%">
  <tr>
    <th><center><big>Concept</th>
    <th><center><big>Lesson Plan <br>
<small> Lesson Plan includes additional resources (slides, videos, answer keys, etc).
</th> 
    <th><center><big>Resources</th>
     <tr>
    <th rowspan="3" id=t07>Digital Citizenship</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Crowdsourcing</a></td> <td><iframe width="300" height="180"
src="https://www.youtube.com/embed/IqZMnfxqEfY">
</iframe></td>
  </tr>
  <tr>
      <td colspan="2">*Common Sense Education has a <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">full Digital Citizenship Curriculum</a> that includes many unplugged activities.</td>
  <tr>
    <td>example for amy</td> <td><%=view :display_video_thumbnail, id: "intro_csd", video_code: "uQim0hBHco0", play_button: 'center', letterbox: "false" %></td>
  </tr>
    <tr>
    <th>Sequencing</th>
        <td><a href="https://curriculum.code.org/csf-20/coursec/3/">My Robotic Friends Jr.</a><br><small>This teaches students the connection between algorithms and programming, as well as the valuable skill of debugging.
</td> <td>https://youtu.be/xaW3PAzHxCU</td>
  </tr>
    <tr>
    <th>Loops</th>
        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">My Loopy Robotic Friends</a><br><small>Here, students learn the simplicity and utility of loops by “programming” their friends using the language from "My Robotic Friends." Once loops are introduced, students will find that they can build bigger structures faster.

</td> <td>https://youtu.be/xaW3PAzHxCU</td>
  </tr>
     <th rowspan="2">Functions</th>
    <td><a href="https://code.org/curriculum/course3/4/Teacher">Functional Suncatchers</a><br><small>In this lesson, students will make a suncatcher out of string, beads, and a special charm. The students will follow a series of repetitive steps, then be asked to identify certain sets of “skills” that are duplicated several times. Once those skills are defined, they will be called from a main program and the whole beautiful process of creation will be recorded on a single sheet of paper. The final program will be geared toward the entire class, whatever their type of string, beads, and charms. To effectively allow for this, students will need to “abstract out” the details of their specific materials and create vague terms for an individual’s supplies. This use of generic placeholders is a wonderful introduction to variables.</td> <td><a href="https://youtu.be/d1MdyeXy0v0">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">See Lesson in Action</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">Activity Answer Key <a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">Assessment Answer Key</a></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">Songwriting with Parameters</a><br><small>One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions is such a helpful practice, and how they can use those structures even when chunks of code are slightly different.
</td> <td>https://youtu.be/28ujn3adHBA></td>
  </tr>
     <th rowspan="6">Algorithms</th>
    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">Dice Race</a><br><small>In this lesson, students will relate the concept of algorithms back to real-life activities by playing the Dice Race game. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.
</td> <td>https://youtu.be/wQpgBCKivAs</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursee/1">My Robotic Friends</a><br><small>Using a predefined symbol key, your students will figure out how to guide one another to accomplish specific tasks without using any verbal commands. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td> <td>https://youtu.be/xaW3PAzHxCU</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">Real-Life Algorithms: Paper Planes</a><br><small>In this lesson, students will relate the concept of algorithms back to everyday activities. After discussing algorithms, students will make paper airplanes using an algorithm. The goal here is to start building the skills to translate real world situations to online scenarios and vice versa.</td> <td>https://youtu.be/AWqo8Gxtrjs</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">Real Life Algorithms: Plant a Seed</a><br><small>In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.</td> <td>https://youtu.be/FHsuEh1kJ18</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">Tangrams</a><br><small>This lesson shows us something important about algorithms. As long as you keep an algorithm simple, there are lots of ways to use it. However, if you want to make sure everyone produces the same outcome, then your algorithm needs more detail. Students will learn the difference between a detailed and general algorithm while playing with tangrams.</td> <td>https://youtu.be/xZlKyTwQZv8</td>
  </tr>
  </tr>
    <tr>
    <td><a href="https://code.org/curriculum/course3/1/Teacher">Computational Thinking</a><br><small>For this activity, no instructions are provided. Instead, students will use examples of what imaginary players have done to figure out how to play the game. This lesson gives students the opportunity to practice the four arts of computational thinking (decomposition, pattern matching, abstraction, and algorithms) in one cohesive activity.</td> <td><a href="https://youtu.be/TlAaklrolA0">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">See Lesson in Action</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">Activity Answer Key </a></td>
  </tr>
    </tr>
     <th rowspan="2">Computational Thinking</th>
    <td><a href="https://studio.code.org/unplugged/unplug2.pdf">Computational Thinking with Monsters</a><br><small>With nothing but paper and markers, students will learn the four steps of computational thinking. After a brief introduction, students should be split into groups where they will have to create directions for other students to draw a specific monster (from a catalog of pre-selected monsters). The entire task must be decomposed, then teams will analyze all monsters in the catalog for patterns, abstract similar details from the monsters, then use that information to create an algorithm (directions) for another team to draw a certain monster. Teams will then switch algorithms with another group and draw the monster based on what that algorithm indicates. Is the drawing what the original team intended?</td> <td>https://youtu.be/injJWiSA0pw</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">Unspotted Bugs</a><br><small>This lesson will guide students through the steps of debugging. Students will learn the mantra: "What happened? What was supposed to happen? What does that tell you?" </td> <td>https://youtu.be/S8qub6aPysM</td>
  </tr>
    </tr>
     <th rowspan="2">Persistence</th>
  <td><a href="https://code.org/curriculum/course4/5/Teacher">Building a Foundation</a><br><small>New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.</td> <td><%=view :display_video_thumbnail, id: "intro_csd", video_code: "eZqKqI8AvnA", play_button: 'center', letterbox: "false" %></td>
  </tr>
  <tr>
 <td><a href="https://curriculum.code.org/csf-18/coursea/2/">Stevie and the Big Project</a><br><small>When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up. This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure. This lesson can be done over one or two class sessions. If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.</td> <td>https://youtu.be/cybBscJ3G8c</td>
  </tr>
     <th>Abstraction</th>
    <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>Abstraction is one of the most important skills for a computer scientist to understand. It simplifies problems and prevents unnecessary repetition. A good coder uses abstraction just about every time she creates a program. This activity will have your students analyze stories for differences so that they can abstract them away. Those abstracted stories become templates for fun and crazy new ones.</td> <td><a href="https://youtu.be/TctGRrUdkcc">Lesson Video</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">Activity Answer Key</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">Assessment Answer Key </a></td>
  </tr>
</table>

</body>
</html>

<p style="clear:both"></p>
