---
title: Affiliate workshops
theme: angular
angular: professionalDevelopmentWorkshop
---
- authentication_required!
- forbidden! unless dashboard_user[:user_type] == 'teacher'
- forbidden! unless have_permission?('create_professional_development_workshop') || dashboard_user[:admin]

%link(rel="stylesheet" type="text/css" href="/css/learn_tabs.css")
%link(rel="stylesheet" type="text/css" href="/style.css")

%script{type: "text/javascript", src: "/js/sifter.min.js"}
%script{type: "text/javascript", src: "/js/microplugin.min.js"}
%script{type: "text/javascript", src: "/js/selectize.min.js"}
%script{type: "text/javascript", src: "/js/selectize-fast-click.js"}
%script{type: "text/javascript", src: "/js/bootstrap.min.js"}
%script{type: "text/javascript", src: "/js/bootstrap-datepicker.js"}
%script{type: "text/javascript", src: "https://maps.googleapis.com/maps/api/js?client=#{CDO.google_maps_client_id}&sensor=false&libraries=places,geometry&v=3.7"}

%link{rel: "stylesheet", type: "text/css", href: "/css/selectize.bootstrap3.css"}/
%link{rel: "stylesheet", type: "text/css", href: "/css/datepicker3.css"}/

/[if lt IE 9]
  %script{src: "/js/es5-shim.min.js"}

%div{'ng-view' => ''}

:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('professionalDevelopmentWorkshop', [
    'ngRoute',
    'ngResource',
    'professionalDevelopmentWorkshop.controllers',
    'professionalDevelopmentWorkshop.services',
    'professionalDevelopmentWorkshop.directives',
  ]).

  // ROUTES
  config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/', {templateUrl: '/manage-professional-development-workshops/workshops'});
    $routeProvider.when('/new',       {templateUrl: '/manage-professional-development-workshops/workshop-edit',
                                       controller:  'WorkshopController'});
    $routeProvider.when('/:secret/view', {templateUrl: '/manage-professional-development-workshops/workshop-view',
                                       controller:  'WorkshopController'});
    $routeProvider.when('/:secret/:action', {templateUrl: '/manage-professional-development-workshops/workshop-edit',
                                       controller:  'WorkshopController'});
  }]);

  // SERVICES
  var services = angular.module('professionalDevelopmentWorkshop.services', []).
    value('version', '0.1');

  services.factory('workshopsService', ['$resource',
    function($resource){
      var Workshop = $resource('/v2/forms/ProfessionalDevelopmentWorkshop/:secret', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'} 
         update: {method:'POST', url: '/v2/forms/ProfessionalDevelopmentWorkshop/:secret/update'},
      });

      Workshop.prototype.name = function() {
        if (this.dates && this.dates[0] && this.dates[0].date_s && this.location_name_s) {
          return 'Workshop on ' + this.dates[0].date_s +  ' at ' + this.location_name_s;
        } else {
          return 'Workshop'; 
        }
      };

      Workshop.prototype.firstDate = function() {
        if (this.dates && this.dates[0] && this.dates[0].date_s) {
          return new Date(this.dates[0].date_s);
        }
      };

      Workshop.prototype.state = function() {
        if (this.$resolved === false || !this.secret) {
          // not yet loaded or is a brand new workshop
          return "";
        }

        if (this.section_id_s) {
          if (this.stopped_dt) {
            return 'stopped';
          } else {
            return 'started';
          }
        } else {
          return 'not_started';
        }
      };

      return Workshop;
    }]);

  services.factory('workshopSignupsService', ['$resource',
    function($resource){
      return $resource('/v2/forms/ProfessionalDevelopmentWorkshop/:parent_secret/children/ProfessionalDevelopmentWorkshopSignup/:secret', {}, {
        get: {isArray: true},
        remove: {method:'DELETE', url:'/v2/forms/ProfessionalDevelopmentWorkshopSignup/:secret'},
        cancel: {method: 'GET', url:'/v2/forms/ProfessionalDevelopmentWorkshopSignup/:secret/status/cancelled'}
      });
    }]);

    // TODO: duplicate of same thing in teacher-dashboard/index.haml
  services.factory('sectionsService', ['$resource',
    function($resource){
      return $resource('/v2/sections/:id', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'} 
         update: {method:'POST', url: 'v2/sections/:id/update'},
         addStudents: {method:'POST', url:'/v2/sections/:id/students', isArray: true},
         removeStudent: {method:'DELETE', url:'/v2/sections/:id/students/:studentId'},
      });
    }]);

  services.factory('workshopStartStop', ['$q', 'sectionsService', 'workshopsService',
    function($q, sectionsService, workshopsService) {
      return {
        start:
          function(workshop) {
            // create a workshop section
            var section = {
              name: workshop.name(),
              login_type: 'none'
            };
            var result_section = sectionsService.save(section);
 
            var result_workshop = result_section.$promise.then(
              function(result_section) {
                // update the workshop with the section id
                workshop.section_id_s = result_section.id;
                workshop.section = result_section;
                return workshopsService.update({secret: workshop.secret}, workshop);
              }
            );

            return $q.all({section: result_section.$promise, workshop: result_workshop});
          },
        stop:
          function(workshop) {
            workshop.stopped = true;

            return workshopsService.update({secret: workshop.secret}, workshop);
          }
       };
    }]);

  // CONTROLLERS
  var app = angular.module('professionalDevelopmentWorkshop.controllers', []);

  app.controller('WorkshopsController', ['$scope', '$location', 'workshopsService', 'workshopSignupsService', 'workshopStartStop',
                                       function($scope, $location, workshopsService, workshopSignupsService, workshopStartStop){

    $scope.hasWorkshops = false;
    $scope.workshops = workshopsService.query();

    $scope.workshops.$promise.then(function(workshops){
      for (var i = 0; i < workshops.length; i++) {
        var workshop_signups = workshopSignupsService.get({parent_secret: workshops[i].secret});
        workshop_signups.workshop_object = workshops[i];
        workshop_signups.$promise.then(function(workshop_signups){
          var active_signups_count = 0;
          for (var j = 0; j < workshop_signups.length; j++) {
            if (workshop_signups[j].status != 'cancelled') {
              active_signups_count ++;
            }
          }
          workshop_signups.workshop_object.active_signups_count = active_signups_count;
        });
      }

      $scope.hasWorkshops = true;
    });

    $scope.confirm_delete = function(workshop)
    {
      workshop.confirmDelete = true;
    }

    $scope.del = function(workshop) {
      $scope.workshops.splice($scope.workshops.indexOf(workshop), 1); // remove from array
      workshopsService.remove({secret: workshop.secret}); // service call
      workshop.confirmDelete = false;
    };

      $scope.start_workshop = function(workshop) {
        workshopStartStop.start(workshop).then(
          function(results) {
            $scope.workshops[$scope.workshops.indexOf(workshop)] = results.workshop;
            $location.path("/" + results.workshop.secret + "/view");
          }
        );
      };

      $scope.stop_workshop = function(workshop) {
        workshopStartStop.stop(workshop).$promise.then(
          function(result_workshop) {
            $scope.workshops[$scope.workshops.indexOf(workshop)] = result_workshop;
          }
        );
      };

  }]);

  app.controller('WorkshopController', ['$scope', '$location', '$routeParams', 'workshopsService', 'workshopSignupsService', 'sectionsService', 'workshopStartStop',
    function($scope, $location, $routeParams, workshopsService, workshopSignupsService, sectionsService, workshopStartStop) {
      $scope.addNewDate = function($event) {
        $scope.newDate();
        $event.preventDefault();
      };

      $scope.newDate = function() {
        $scope.workshop.dates.push({
          date_s: '',
          start_time_s: '',
          end_time_s: ''
        });
      };

      if ($routeParams.secret) {
        $scope.workshop = workshopsService.get({secret: $routeParams.secret});
        var active_signups = [];
        var cancelled_signups = [];

        var workshop_signups = workshopSignupsService.get({parent_secret: $routeParams.secret});
        workshop_signups.$promise.then(function(workshop_signups){
          for (var i = 0; i < workshop_signups.length; i++) {
            if (workshop_signups[i].status == 'cancelled') {
              cancelled_signups.push(workshop_signups[i]);
            }
            else {
              active_signups.push(workshop_signups[i]);
            }
          }
          $scope.active_signups = active_signups;
          $scope.cancelled_signups = cancelled_signups;
        });

        $scope.workshop.$promise.then(function(workshop){
          if (workshop.section_id_s) {
            $scope.section = sectionsService.get({id: workshop.section_id_s});
          }
        });
      } else {
        $scope.workshop = {};
        $scope.workshop.dates = [];
        $scope.newDate();
      }

      $scope.action = $routeParams.action;

      $scope.cancel_workshop = function() {
        $location.path("/");
      };

      $scope.load = function() {
        $('#workshop-dates').on('focus click', '.date', function() {
          $(this).datepicker({
            autoclose: true,
            todayHighlight: true,
            pickTime: false
          });
        });

        // Disabled for now.
        //var location_input = document.getElementById('workshop-location-address');
        //var autocomplete = new google.maps.places.Autocomplete(location_input);
        //google.maps.event.addListener(autocomplete, 'place_changed', function() {
        //  var place = autocomplete.getPlace();
        //  location_input.value = place.formatted_address;
        //  console.log(place.formatted_address);
        //});

      }

      $scope.confirm_signup_cancel = function(signup) {
        signup.confirmSignupCancel = true;
      }

      $scope.cancel_signup = function(signup) {
        var cancelled_signup = $scope.active_signups.splice($scope.active_signups.indexOf(signup), 1); // remove from active array
        $scope.cancelled_signups.push(cancelled_signup[0]); // add to cancelled array
        workshopSignupsService.cancel({secret: signup.secret}); // service call
        signup.confirmSignupCancel = false;
      };

      $scope.save = function() {
        if ($scope.action == 'clone') {
          $scope.workshop.secret = null;
          // don't clone the start/stop state
          $scope.workshop.section_id_s = null;
          $scope.workshop.stopped_dt = null;
        }

        if ($scope.workshop.secret) { // existing
          $scope.workshop =
            workshopsService.update({secret: $scope.workshop.secret}, $scope.workshop, function() {
              $location.path("/");
            });
        } else { // new
          $scope.workshop =
            workshopsService.save($scope.workshop, function() {
              $location.path("/");
            });
        }
      };

      $scope.start_workshop = function() {
        workshopStartStop.start($scope.workshop).then(
          function(results) {
            $scope.section =  results.section;
            $scope.workshop = results.workshop;
          }
        );
      };

      $scope.stop_workshop = function() {
        workshopStartStop.stop($scope.workshop).$promise.then(
          function(result_workshop) {
            $scope.workshop = result_workshop;
          }
        );
      };

      $scope.load();
    }
  ]);

  // DIRECTIVES
  var directives = angular.module('professionalDevelopmentWorkshop.directives', []).
    value('version', '0.1');

  directives.directive('ngConfirmClick', [
    function(){
      return {
        priority: -1,
        restrict: 'A',
        link: function(scope, element, attrs){
          element.bind('click', function(e){
            var message = attrs.ngConfirmClick;
            if(message && !confirm(message)){
               e.stopImmediatePropagation();
              e.preventDefault();
            }
          });
        }
      }
    }
  ]);
