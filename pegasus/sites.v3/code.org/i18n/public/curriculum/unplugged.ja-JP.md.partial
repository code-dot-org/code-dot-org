---
title: コンピュータサイエンス 基礎アンプラグド
video_player: true
theme: responsive
---

# コンピュータサイエンス 基礎アンプラグド

私たちは本校の全ての、あなたが教室で使用するためのアンプラグドレッスンのリストを編集しました。 あなたは 教室の中にコンピューターがあってもなくても、コンピューターサイエンスの基本を教えることができるようになりました。
<br>
<div class="col-50">
私たちは 学生が「アンプラグド」のコンピューターで作業を行っていないレッスンを参照します。 学生たちはしばしば鉛筆と紙または物理的操作で作業を行います。  これらは意図的に学生が彼ら自身の生活に関係する方法で複雑なコンセプトを消化するのを助ける運動感覚の機会を設置しています。 
<br><br>アンプラグドレッスンは協力的な教室環境を構築して維持するために特に便利で、それらはさらに抽象的なコンセプトを導入する時にあなたが参照できる便利な基準となる体験です。 これらのアクティビティのそれぞれは 単独で、または関係するコンセプトについて他のコンピューターサイエンスのレッスンと一緒に使用することができます。
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Ages 4+, English only
</div>

<div style="clear: both;"></div>

***
## CSファンダメンタルズ2021～22年のアンプラグドレッスン
次のレッスンは <a href="https://docs.google.com/document/d/19BIaGVliOZCciSDmuezFFUhhCjhrB2oXpVLn0cJAibc/preview" target="_blank">CS の基礎2021～22</a>にございます。 <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>





コース</th>    <th><center><big>レッスンプラン</th>     <th width=10%><center><big>コンセプト</th>    <th width=20%><center><big>動画</th>     <tr>    <th rowspan="3" id="t01">コース A</th>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/3">A.3 - ハッピーマップ</a><br><small>このアンプラグドレッスンはチームをシンプルなタスクと合わせます：「フラーブ」を成果に換えましょう。 学生は指示を提供される記号に変換する作業を行いながら正確な指示を書く練習をします。 


コードに問題が起こる場合、学生は共に作業を行ってバグを認識しソリューションを構築してください。</td><td>シークエンシング</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>  </tr>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/7">A.7 - Happy Loops</a><br><small>このアクティビティはハッピーマップに再び移動します。 

今回学生はコードを使用してより大きくより長いパズルを解き、より簡単な方法でより長いコードを書く構造 内のユーティリティを 見ることに導きます。</td><td>ループ</td> <td><img src="/images/a7.png" width="90%"></td>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/11">A.11 - ビッグイベント Jr.</a><br><small>イベントは 事前に書かれたアルゴリズムに 多様性を加える素晴らしい方法です。 時々ユーザーが望む際は、自分のプログラムが ユーザーに正確に応答することができることを望みます。 



これがイベントの目的です。</td><td>イベント</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>  </tr>       <tr>    <th rowspan="3" id="t02">コース B</th>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/2">B.2 - それを動かす、それを動かす</a><br><small>このレッスンは学生が本コースの課程の中で遭遇するコーディングのために精神的に準備をする作業を行います。 


小さなチームで 学生は物理的なアクティビティを使用してクラスメイトが ゴールにたどり着くまで、ある場所から他の場所へ 注意深く歩くことをプログラムします。</td><td>シークエンシング</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/6">B.6 - 繰り返しになる</a><br><small>私たちがより長くさらに面白いプログラムを書き始めるにつれ、私たちの行動はしばしば多くの繰り返しを含みます。 

このレッスンで学生はダンスの中の動きの繰り返されるパターンを見ることにより、ループがどのように使用されるかを学びます。</td><td>Loops</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/10">B.10 - 適切なアプリ</a><br><small>このレッスンは学生にコンピューターサイエンスは世界の人々を助けることができると認識させます。 まず、学生はいくつかの架空のスマートフォンユーザーにより彼らのニーズに対処する「適切なアプリ」を見つける手助けをすることを強調します。 



その後学生は共感と創造性を行使して一つの追加のユーザーのニーズに対処する自身のスマートフォンアプリをスケッチします。</td><td>コンピューティングの影響</td> <td><img src="/images/b10.png" width="90%"></td>  </tr>       <tr>    <th rowspan="4" id="t03">コース C</th>    <td><a href="https://studio.code.org/s/coursec-2021/lessons/2">C.2 - 私のロボットの友達Jr.</a><br><i>*供給物: プラスチックカップ (10/2～3人のグループ)</i><br><small>コード内に一組の記号を使用して学生はアルゴリズムをデザインし、ロボットが 異なるパターンでカップを積み重ねるように指示します。 学生は 順番にロボットとして参加し、同級生により定義されたアルゴリズムのみに応答をします。 



このセグメントは学生に 記号およびアクションの間のつながり、アルゴリズムとプログラムの間の違い、およびデバギングの価値のあるスキルを教えます。</td><td>シークエンシング</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>  </tr>   <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/7">C.7 - 私の繰り返すロボットの友達Jr</a><br><i>*供給品: 紙コップ (20/4人グループ)</i><br><small>概要最初の 「私のロボットの友達」アクティビティを構築して学生はより大きくさらに複雑なデザインに取り組みます。  


ロボットが これらのより大きなデザインを完了するプログラムを書くために、学生は ループと代替することができる指示で繰り返しのパターンを識別する必要があります。 </td><td>ループ</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>  </tr>       <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/11">C.11 - 大きなイベント</a><br><small>学生はイベントが 事前に書かれたアルゴリズムに柔軟性を追加するための素晴らしい方法であることをすぐに学びます。 時々ユーザーが望む際は、自分のプログラムが ユーザーに正確に応答することができることを望みます。 


イベントはあなたのプログラムをさらに面白くインターアクティブにできます。 </td><td>Events</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>   </tr>        </tr>      <td><a href="https://studio.code.org/s/coursec-2021/lessons/15">C.15 - バイナリーブレスレット</a><br><i>*供給物: マーカー。 オプション – 18黒/18白のビーズ、パイプクリーナー 1人の学生につき1本</i><br><small>バイナリーはコンピューターの世界では極めて重要です。 バイナリーはコンピューターの世界では極めて重要です。 



このレッスンはそれが実生活からどのように取り込み、一連のオンおよび オフに変換するかを 実証するのに役立ちます。 </td><td>Binary</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>  </tr>         <tr>    <th rowspan="3" id="t04">Course D</th>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/2">D.2 - グラフペーパープログラミング <br></a><small>もう一つを「プログラミング」して絵を書くため、学生は 楽しくアクセス可能な方法でプログラミングの中枢コンセプトの一部を体験する機会を得ます。 このクラスは既存の絵を複写するために学生に記号を使用させて、それぞれにグラフペーパーの四角形に色を塗るよう指示することにより始めます。 





時間がある場合はこのレッスンは学生が自身で作成した 画像で締めくくります。</td><td>シークエンシング</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/4">D.4 - リレープログラミング<br></a><small>このアクティビティは デバギングおよび 持続性に関する短いレッスンで始め、その後素早く 学生をチーム分けし一度に一つの 指示 を出すプログラムを 書くために共同作業します。</td><td>シークエンシング</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>      </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/12">D.12 - カードによる IF 文</a><br><small>このレッスンは IF 文がプログラムが具体的な情報を仕立てるためにどのように使用されるかを実践します。 私たちはいつもプログラムを書くときに必要な 全ての情報を持っているわけではありません。 あなたがコードを実行する際、どのような状況が 正しいかどうかを知らなくても、もうひとつの異なることをやりたくなる場合があります。 これが IF 文が使われるところです。 




IF 文によりコンピューターは あなたのコードが実行されている時にいつでも正しい情報に基づいて 意思決定をできるようになります。+</td><td>IF 文</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>    </tr>         <tr>    <th rowspan="3" id="t05">Course E</th>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/7">E.7 - デジタルシェアリング</a><br><i>*供給物: スマートフォンまたはタブレット</i><br><small>著作権および創造性によりチームによりコンピューターサイエンスファンダメンタルズに貸し出され、このレッスンは学生が 特にデジタルの環境で所有権および著作権を尊重することの課題および恩恵を理解する手助けをするために存在します。 


学生はアーティストの権利を倫理的なデジタルシチズンであることの重要な部分として尊重することが奨励されます。</td><td>デジタルシチズン</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/11">E.11 - ソングライティング</a><br><small>この機能においてコンピューターサイエンスの最も重大な構造の一つ。 関数（時々 手順とも呼ばれる）はあなたのより大きなプログラムの中で何度も繰り返し使用できるミニプログラムです。 






このレッスンは学生が一塊のコードを関数と組み合わせることが なぜそのように役立つのかを直感的に理解する手助けをします。</td><td>関数</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/17">E.17 - アクセシビリティのためのデザイン</a><br><small>このレッスンで学生はブレインストーミングおよび仮設のアプリ向けのアクセス可能なソリューションをデザインすることによりアクセシビリティおよび共感の価値を学びます。</td><td>コンピューティングの影響</td><td><img src="/images/e18.png" width="90%"></td>  </tr>    </tr>         <tr>    <th rowspan="3" id="t06">Course F</th>           <td><a href= "https://studio.code.org/s/coursef-2021/lessons/6">F.6 -ブラックスペースストーリー</a><br><i>*共有物 : 封筒6枚 （または適切： 二つ折りにされた紙または 索引カード ） 学生はコンピューターがどのように ユーザーから入力を取り込んで 保存し、プログラムを実行するにつれ後で使用するかを理解するための脈絡として 穴埋めのストーリー （ Mad Libs® に似ている） を使用します。
   


</td><td>変数</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>    </tr>        <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - For Loop Fun</a><br><i>*供給物: サイコロ (3 個/2～4人のグループ)</i><br><small>私たちはループにより物事を繰り返し行えることを知っていますが、 私たちは内蔵された追加の構造を持つループをどのように使用するかを学びます。 


これらの新しい構造により学生はさらに力強くダイナミックなコードを作成できます。</td><td>For ループ</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/19">F.19 - The Internet</a><br><small>多くの人々はインターネットを毎日使用しますがそれがどのように機能するかを知っている人は多くありません。 
このレッスンで、学生はインターネットを通して流れるふりをし、その間接続、URL、IP アドレスおよび DNS について学びます。</td><td>Data</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td>  </tr>
</table>

<p style="clear:both"></p>

***
## 追加のアンプラグドレッスン

次のレッスンがコンセプトにより組織され、本校の CS 基礎コースの以前のバージョンに含まれています。  これらのレッスンを使用する計画を立てるにつれ 調べたくなるかもしれない追加のリソース には以下が含まれます:
* [2019 コース A-F カリキュラムガイド](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 Course A-F Supply List](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 コース Amazon リスト](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 コース A-F カリキュラムガイド](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 コース A-F カリキュラムガイド (v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [コース 1-4 カリキュラムガイド](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF Flashcards](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>

コンセプト</th>    <th width=65%><center><big>Lesson Plan <br><small> レッスンプランには追加のリソースが含まれます (スライド、動画、アンサーキーなど)。










</th>     <th><center><big>リソース</th>     <tr>    <th rowspan="2" id=t07 width=5%>デジタルシチズンシップ</th>    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Crowdsourcing</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>  </tr>  <tr>      <td colspan="2">*常識教育には多くのアンプラグドアクティビティを含む <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">完全なデジタルプログラム</a> を含んでいます。</td>    <tr>    <th id=t07>バイナリー</th>        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">バイナリー画像 </a><br><small>*供給品:オプション - 学生に表示する逆の項目のグループ分け。 多くの人々はバイナリーは厳密にお0と1であると思っていますが、学生はアイデアを情報が様々なバイナリーオプションで表示できることが導入されます。 



このレッスンはコンピューターがどのようにバイナリーでもさらに多くの複雑な情報 （画像および色など） を保存できるのかを描写しながら、そのコンセプトを一歩先に持って行きます。 </td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td> </tr>    <tr>    <th id=t07>Loops</th>        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">私の繰り返すロボットの友達</a><br><small>こちらで学生は 「私のロボットの友達」からの言語を使用することにより、友達をプログラミングしてループの単純さと有用性を学びます。 ループが導入されると、学生はより大きな構造を高速で構築することができることがわかります。



</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td>  </tr>     <th rowspan="2" id=t07>Functions</th>    <td><a href="https://code.org/curriculum/course3/4/Teacher">Functional Suncatchers</a><br><small>関数このレッスンで学生はストリング、ビーズおよび特別なチャームさらサンキャッチャーを作ります。 学生は一連の繰り返し手順に従い、特定セットの複数回繰り返される「スキル」を識別するよう求められます。 これらのスキルが定義されたら学生は 主な プログラム から呼び出され、創造物の全体的な美しいプロセスは一枚の紙に記録されます。 最終プログラムはどのようなタイプのストリング、 ビーズおよびチャームでも全体のクラスに向かって 連動します。 これを効果的に行うため、学生は 特定材料の詳細を抽象化する必要があり、個人の共有物について「漠然とした意味を作成する」必要があります。 


一般的なプレースホルダーの使用は変数への素晴らしい入門です。 </td> <td><a href="https://youtu.be/d1MdyeXy0v0">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">アクションにおけるレッスンを見る</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">Activity Answer Key <a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">Assessment Answer Key</a></td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">パラメーターによるソングライティング</a><br><small>コンピューターの世界における最も偉大な構造の一つは関数です。 関数（時々 手順とも呼ばれる）はあなたのより大きなプログラムの中で何度も繰り返し使用できるミニプログラムです。 このレッスンは学生がなぜコードの塊を関数に組み合わせることがそんなに便利な慣例なのか、およびどのようにそれらがコードの塊が わずかに違っていてもそれらの構造を使用することができるのかを直感的に理解する手助けをします。



</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td>  </tr>     <th rowspan="6" id=t07>Algorithms</th>    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">Dice Race</a><br><small>このレッスンで学生はサイコロレースゲームすることによる実生活のアクティビティに戻ってアルゴリズムのコンセプトに関わります。  この目的は実世界の状況をオンラインシナリオに変換し、その逆を行うスキルを構築し始めることです。



</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursee/1">私のロボットの友達</a><br><small>事前定義されたシンボルキーを使用して、あなたの学生は言葉の命令を使用せずに特定のタスクを成し遂げるためにもう一人をガイドする方法を理解します。  


このセグメントは学生にシンボルとアクションの間の繋がり、アルゴリズムとプログラムの間の違いおよびデバイキングの価値のあるスキルを教えます。</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">実世界のアルゴリズム: 紙飛行機</a><br><small>このレッスンで学生は日々の活動に戻ってアルゴリズムのコンセプトに関わります。 アルゴリズムを論じた後、学生はアルゴリズムを使用して紙飛行機を作ります。 


ここでの目的はスキルを構築して実世界の状況をオンラインのシナリオに変換し、またその逆を行い始めることです。</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">実生活のアルゴリズム: 種を撒く</a><br><small>このレッスンで学生は実際に種を撒くことにより毎日の実生活の活動に戻りアルゴリズムのコンセプトに関わります。  


ここでの目的は世界の状況をオンラインシナリオに変換し、その逆を行うためのスキルを構築し始めることです。</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">タングラム</a><br><small>このレッスンはアルゴリズムについて重要なことを示します。 アルゴリズムをシンプルに保っている限り、それを使用する多くの方法があります。 ただしみんなが同じ結果を出すことを確認したい場合は、あなたのアルゴリズムはさらに詳細である必要があります。 







学生はタングラムをプレイしながら詳細および一般的なアルゴリズムの間の違いを学びます。</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td>  </tr>  </tr>    <tr>  </tr>    </tr>     <th id=t07 rowspan="4">計算的思考</th>        <tr>        <td><a href="https://code.org/curriculum/course3/1/Teacher">計算的思考</a><br><small>このアクティビティについては、説明は提供されません。 その代わり学生は架空のプレイヤーがゲームをどのようにプレイするかを理解するために何をしたのかの例を使用します。 

このレッスンはひとつの密着したアクティビティにより、学生に計算的思考の四つの芸術 （ 分解、パターンマッチング、抽象化およびアルゴリズム） を練習する機会を提供します。</td> <td><a href="https://youtu.be/TlAaklrolA0">Lesson Video</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">進行中のレッスンを見る</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">Activity Answer Key </a></td>        </tr>        <td><a href="https://studio.code.org/unplugged/unplug2.pdf">モンスターにより計算的思考</a><br><small>紙とマーカーだけあれば学生は計算的思考の四つの手順を学びます。 簡単な紹介の後、学生は他の学生が特定のモンスターを描く指示を作成しなければならないグループにわかれます （予め選択されたモンスターのカタログから）。 全体的なタスクは分解されなければならず、その後チームはカタログ内のすべてのモンスターのパターンをを分析し、モンスターからの似通った詳細を抽象化して、その後その情報を使用して他のチームが特定のモンスターを描くためのアルゴリズム（指示）を作成します。 チームはその後アルゴリズムを他のグループに切り替え、そのアルゴリズムが示すことに基づいてモンスターを描きます。 

その絵は元のチームが意図しているものですか？</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">気づかれていないバグ</a><br><small>このレッスンは学生をデバギングの手順を通して案内します。  学生はマントラを学びます: 何が起こりましたか？ 何が起こるはずでしたか？ それはあなたに何を伝えますか？ 



</td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td>  </tr>    </tr>     <th rowspan="2" id=t07>Persistence</th>  <td><a href="https://curriculum.code.org/csf-18/coursec/1/">基礎の構築</a><br><small>新しく未解決の問題はしばしば相当難しいことがあります。 何かクリエイティブ、便利および賢いなものを作り出す機会が欲しい場合は、私たちはたとえそれが成功する前に何度か失敗することを意味しても、困難な問題に立ち向かう意思を持つ必要があります。 このレッスンで、学生は一般的な材料を使用して構造を構築します。 その構造は教科書を10秒以上保ち続けることができる機能をテストされます。 


ほとんどの学生は1回目はこれをうまく行うことができませんが、押し通して挑戦し続けることが重要です。</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td>  </tr>  <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/2/">Stevie and the Big Project</a><br><small>学生が 問題に答えるまたはプロジェクトに取り組んでいる間にバリアに入り込むと挫折して諦めるのが非常に簡単になってしまいます。 このレッスンは学生に挫折は学習の重要な部分となり得るというアイデアを持ち込みます。 こちらでは、挫折はクリエイティブなプロセスにおいて失敗の兆候ではなくステップとして表されます。  このレッスンは1回か2回のクラスセッションで完了できます。 


さらに時間がある場合はお気軽に時間を延長してマーブルランアクティビティのフェーズを繰り返してください。</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td>  </tr>     <th id=t07>Abstraction</th>    <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>抽象化はコンピューターサイエンティストが理解する最も重要なスキルの一つです。 それは問題を単純化して不要な重複を回避します。 良いコーダーはプログラムを作成するときはほぼ毎回抽象化を使用します。 このアクティビティはあなたの学生に違いのストーリーを分析させるため、彼らはそれらを抽象化できます。 



 これらの抽象化された ストーリーは 楽しみとクレイジーな新しいもののテンプレートになります。</td> <td><a href="https://youtu.be/TctGRrUdkcc">レッスン動画</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">Activity Answer Key</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">割り当てアンサーキー </a></td>  </tr>
<tr>   <th id=t07>変数</th>​     <td><a href="https://curriculum.code.org/csf-20/coursef/7/">Envelope Variables</a><br><i>*供給品: 封筒 (1～4/2～4人のグループ)</i><br><small>変数は数字または単語などの値のプレースホルダーとして使用されます。 変数によりプログラミングにおいて多くの自由が生まれます。 フレーズを何回もタイピングしたり不明瞭な数字を覚えていなければならない代わりにコンピューターサイエンティストは変数を使用してそれらと照合します。 このレッスンは変数とは何であり私たちが多くの異なる方法でそれらをどのように使用できるかを説明 するのに役立ちます。 
変数のアイデアは簡単に把握できるコンセプトではないため、私たちはこのレッスンの最後で多くの時間をかけて話合うことをお勧めします。</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td></tr>
</table>


<p style="clear:both"></p>

