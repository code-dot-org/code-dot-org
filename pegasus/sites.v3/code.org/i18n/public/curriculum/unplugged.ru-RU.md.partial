---
title: Основы информатики – урок без компьютера
video_player: true
theme: responsive
---

# Основы информатики – урок без компьютера

Мы составили список всех наших уроков без компьютера, чтобы вы могли использовать их в своем классе. Теперь вы можете преподавать основы информатики независимо от того, есть у вас в классе компьютеры или нет!
<br>
<div class="col-50">
Мы называем уроки, на которых учащиеся не работают на компьютере, «уроками без компьютера» Учащиеся часто используют карандаши и бумагу или физические развивающие материалы.  Это намеренно созданные кинестетические возможности, которые помогают учащимся усвоить сложные понятия так, чтобы они соотносились с их собственной жизнью. <br><br>Урок без компьютера особенно полезны для создания и поддержания атмосферы сотрудничества в классе, а также они являются полезным примером, к которому можно обратиться при введении более абстрактных понятий. Каждое из этих занятий можно использовать как отдельно, так и совместно с другими уроками информатики, посвященными смежным понятиям.
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Возраст: 4+, только английский язык
</div>

<div style="clear: both;"></div>

***
## Уроки без компьютера по основам информатики, 2021-22 гг
Следующие уроки можно найти в <a href="https://docs.google.com/document/d/19BIaGVliOZCciSDmuezFFUhhCjhrB2oXpVLn0cJAibc/preview" target="_blank">Основы информатики 2021-22 гг.</a>. <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Курс</th>    <th><center><big>План урока</th>     <th width=10%><center><big>Понятие</th>    <th width=20%><center><big>Видео</th>     <tr>    <th rowspan="3" id="t01">Курс A</th>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/3">A.3 - Весёлые карты</a><br><small>Этот урок без компьютера объединяет команды вокруг одной простой задачи: помочь «флурбу» добраться до своего фрукта. Учащиеся будут практиковаться в написании точных инструкций, работая над переводом инструкций в предусмотренные символы. При возникновении проблем с кодом ученики должны совместно работать над распознаванием ошибок и находить решения.</td><td>Выстраивание последовательности</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>  </tr>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/7">A.7 - Весёлые циклы</a><br><small>На этом занятии выполняется повторное обращение к материалу «Веселые карты». На этот раз учащиеся будут решать большие и длинные головоломки с помощью своего кода, благодаря чему они поймут полезность структур, которые позволят им писать более длинный код более простым способом.</td><td>Циклы</td> <td><img src="/images/a7.png" width="90%"></td>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/11">A.11 - Большое событие мл.</a><br><small>События предоставляют замечательную возможность внести разнообразие в написанный ранее алгоритм. Иногда хочется, чтобы твоя программа могла отвечать пользователю именно тогда, когда пользователь хочет этого. События предназначены как раз для этого.</td><td>События</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>  </tr>       <tr>    <th rowspan="3" id="t02">Курс B</th>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/2">B.2 - Вперед, вперед!</a><br><small>Этот урок поможет учащимся психологически подготовиться к упражнениям по программированию, которые им придется решать в ходе всего курса. В небольших командах учащиеся будут использовать физическую деятельность, чтобы запрограммировать своих одноклассников аккуратно переступать с места на место, пока не будет достигнута цель.</td><td>Выстраивание последовательности</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/6">B.6 - Зацикливание</a><br><small>По мере того, как мы начинаем писать более длинные и интересные программы, наш код зачастую включает большое количество повторов. В ходе этого урока учащиеся узнают о том, как можно использовать циклы, чтобы упростить передачу много раз повторяющихся команд, рассмотрев повторяющиеся схемы танцевальных движений.</td><td>Циклы</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/10">B.10 - Правильное приложение</a><br><small>На этом уроке учащиеся осознают, что информатика может помогать людям в их реальной жизни. Сначала учащиеся сопереживают нескольким вымышленным пользователям смартфонов, порядке, чтобы помочь им найти «правильное приложение», отвечающее их потребностям. Затем учащиеся, проявляя сопереживание и свои творческие способности, создают эскиз собственного приложения для смартфона, которое удовлетворяет потребности еще одного пользователя.</td><td>Влияние компьютерных технологий</td> <td><img src="/images/b10.png" width="90%"></td>  </tr>       <tr>    <th rowspan="4" id="t03">Курс C</th>    <td><a href="https://studio.code.org/s/coursec-2021/lessons/2">C.2 - Мои друзья-роботы, мл.</a><br><i>*Школьные принадлежности: пластиковые чашки (10/группа из 2-3 учеников)</i><br><small>Используя вместо кода набор символов, учащиеся разрабатывают алгоритмы, предоставляющие «роботу» команды по составлению чашек различным образом. Учащиеся будут по очереди исполнять роль «робота», отвечая только на алгоритм, заданный их одноклассниками. В этом сегменте занятия ученики усваивают взаимосвязь между символами и действиями, а также различие между алгоритмом и программой, приобретая также ценный навык отладки.</td><td>Выстраивание последовательности</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>  </tr>   <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/7">C.7 - Мои циклические друзья-роботы, мл.</a><br><i>*Школьные принадлежности: бумажные чашки (20/группа из 4 учеников)</i><br><small>ОбзорОсновываясь на начальном занятии «Мои друзья-роботы», учащиеся работают с более масштабными и сложными заданиями. Для программирования своих «роботов» на выполнение этих более масштабных заданий ученики должны будут выявлять среди своих инструкций повторяющиеся шаблоны, которые могут заменяться циклами.</td><td>Циклы</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>  </tr>       <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/11">C.11 - Большое событие</a><br><small>Ученики скоро узнают, что использование событий – отличный способ сделать написанный ранее алгоритм более гибким. Иногда хочется, чтобы твоя программа могла отвечать пользователю именно тогда, когда пользователь хочет этого. События могут сделать программу более интересной и интерактивной.</td><td>События</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>   </tr>        </tr>      <td><a href="https://studio.code.org/s/coursec-2021/lessons/15">C.15 - Двоичные браслеты</a><br><i>*Школьные принадлежности: маркеры. Необязательно – 18 черных/18 белых бусин, по 1 ёршику на ученика</i><br><small>Двоичный код чрезвычайно важен в мире компьютеров. Большинство компьютеров сегодня хранят информацию всех видов в двоичной форме. Этот урок помогает продемонстрировать, каким образом возможно взять что-либо из реальной жизни и преобразовать это что-то в серию сигналов «вкл»/«выкл».</td><td>Двоичный код</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>  </tr>         <tr>    <th rowspan="3" id="t04">Курс D</th>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/2">D.2 - Программирование на бумаге в клеточку<br></a><small>«Программируя» друг друга для рисования картинок, учащиеся получают возможность познакомиться с некоторыми из основных понятий программирования в веселой и доступной форме. Занятие начнется с того, что ученики будут с помощью символов давать друг другу команды по раскрашиванию квадратов на разлинованной бумаге, стараясь воспроизвести имеющееся изображение. При наличии времени урок может закончиться демонстрацией самостоятельно созданных учениками изображений.</td><td>Выстраивание последовательности</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/4">D.4 - Эстафетное программирование<br></a><small>Это занятие начнется с небольшого урока по отладке и настойчивости, а затем у нас быстро начнется гонка со временем, когда учащиеся разделятся на команды и будут вместе писать программу каждый по одной инструкции.</td><td>Выстраивание последовательности</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>      </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/12">D.12 - Условные операторы с картами</a><br><small>Этот урок демонстрирует, как можно использовать условные операторы для адаптации программы к конкретной информации. Мы не всегда располагаем всей необходимой информацией при написании программы. Иногда вы захотите сделать что-то иное в одной ситуации, а не в другой, даже если вы не знаете, какая ситуация будет истинной при выполнении вашего кода. Именно здесь на помощь приходят условные операторы. Условные операторы позволяют компьютеру принимать решение, основываясь на информации, которая является истинной в любой момент выполнения вашего кода.+</td><td>Условные операторы</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>    </tr>         <tr>    <th rowspan="3" id="t05">Курс E</th>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/7">E.7 - Digital Sharing</a><br><i>*Школьные принадлежности: Смартфон или планшет</i><br><small>Предоставленный для курса «Основы компьютерных наук» сотрудниками сайта Copyright and Creativity («Авторские права и творчество»), этот урок призван объяснить учащимся проблемы и преимущества уважения права собственности и авторского права, особенно в цифровой среде. Учащимся следует объяснить, что, не уважая прав создателей, невозможно быть этичным цифровым гражданином.</td><td>Цифровое гражданство</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/11">E.11 - Написание песен</a><br><small>Одним из самых великолепных творений мира информатики является функция. Функции (иногда называемые процедурами) — это мини-программы, которые можно использовать снова и снова внутри большой программы. Этот урок поможет ученикам интуитивно понять, почему объединение частей кода в функцию является такой полезной практикой.</td><td>Функции</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/17">E.17 - Разработка для обеспечения доступности</a><br><small>В рамках этого урока учащиеся узнают о ценности доступности и сопереживания путем коллективного обсуждения и разработки доступных решений для гипотетических приложений.</td><td>Влияние компьютерных технологий</td><td><img src="/images/e18.png" width="90%"></td>  </tr>    </tr>         <tr>    <th rowspan="3" id="t06">Курс F</th>           <td><a href= "https://studio.code.org/s/coursef-2021/lessons/6">F.6 - Рассказы, в которых нужно заполнить пропуски</a><br><i>*Школьные принадлежности: 6 конвертов (также подойдет бумага или каталожные карточки, сложенные пополам)</i><br><small>Учащиеся будут использовать рассказы, в которых нужно заполнить пропуски (похожие на Mad Libs®) в качестве контекста для понимания того, как компьютеры принимают и хранят данные, вводимые пользователями, а затем используют их в процессе работы программы.
   </td><td>Переменные</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>    </tr>        <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - Игры с циклами «for»</a><br><i>*Школьные принадлежности: игральные кубики (3 кубика/группа из 2-4 учеников)</i><br><small>Мы знаем, что циклы позволяют нам выполнять действия много раз, но теперь мы узнаем, как использовать циклы с дополнительными структурами внутри них. Эти новые структуры позволят ученикам писать более эффективный и динамичный код.</td><td>Циклы «for»</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/19">F.19 - Интернет</a><br><small>Несмотря на то, что многие люди ежедневно используют Интернет, немногие из них знают, как он работает. В ходе этого урока ученики представят себя плывущими по волнам интернета и познакомятся с соединениями, URL и IP-адресами, а также с DNS.</td><td>Данные</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td>  </tr>
</table>

<p style="clear:both"></p>

***
## Дополнительные уроки без компьютера

Следующие уроки организованы по концепциям и их можно найти в более ранних версиях наших курсов по основам информатики. Дополнительные ресурсы, с которыми вы, возможно, захотите ознакомиться при планировании использования этих уроков, включают в себя:
* [2019 Курс A-F Руководстве по учебному плану](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 Курс A-F Список школьных принадлежностей](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 Курс Списки Amazon](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 Курс A-F Руководстве по учебному плану](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 Курс A-F Руководстве по учебному плану (v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [Курс 1-4 Руководстве по учебному плану](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [Дидактические карточки по Основам информатики](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Понятие</th>    <th width=65%><center><big>План урока <br><small> План урока включает дополнительные ресурсы (слайды, видео, ответы и т. д.).
</th>     <th><center><big>Ресурсы</th>     <tr>    <th rowspan="2" id=t07 width=5%>Цифровое гражданство</th>    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Краудсорсинг</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>  </tr>  <tr>      <td colspan="2">*Common Sense Education разработала <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">полную учебную программу «Цифровое гражданство»,</a> которая включает множество занятий без компьютера.</td>    <tr>    <th id=t07>Binary</th>        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">Двоичные изображения </a><br><small>*Школьные принадлежности: необязательно - Группы противоположных предметов для демонстрации учащимся. Хотя многие думают о двоичных числах лишь как о нулях и единицах, ученики узнают, что информация может отображаться с помощью нескольких вариантов двоичной записи. На этом уроке будет сделан еще один шаг в углублении понимания данной концепции, и будет показано как компьютер может хранить еще более сложную информацию (такую как изображения и цвета) также с помощью двоичных чисел.</td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td> </tr>    <tr>    <th id=t07>Циклы</th>        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">Мои циклические друзья-роботы</a><br><small>Здесь учащиеся узнают о простоте и полезности циклов, «программируя» своих друзей, используя язык из «Мои друзья-роботы» После введения циклов учащиеся обнаружат, что они могут быстрее создавать большие структуры.
</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td>  </tr>     <th rowspan="2" id=t07>Функции</th>    <td><a href="https://code.org/curriculum/course3/4/Teacher">Функциональные витражи</a><br><small>На этом уроке ученики будут создавать витражи из проволоки, бус и особой подвески. Ученики будут выполнять ряд повторяющихся шагов, и затем им будет предложено назвать определенные наборы «навыков», которые повторяются несколько раз. Как только эти навыки будут определены, они будут запускаться из основной программы, и весь интересный процесс создания будет записан на одном листе бумаги. Окончательная программа будет применима для всего класса независимо от типов проволоки, бус и подвесок. Чтобы продуктивно выполнить данное задание, ученикам потребуется «обобщить» свойства своих материалов и создать абстрактные обозначения предметов, используемых отдельными учениками. Использование обобщенных обозначений предметов представляет собой прекрасное введение в переменные.</td> <td><a href="https://youtu.be/d1MdyeXy0v0">Видео урока</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">Посмотреть урок в действии</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">Ключ к ответам для занятия <a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">Ключ к ответам для задания на проверку знаний</a></td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">Написание песен с помощью параметров</a><br><small>Одним из самых великолепных творений мира информатики является функция. Функции (иногда называемые процедурами) — это мини-программы, которые можно использовать снова и снова внутри большой программы. Этот урок поможет ученикам интуитивно понять, почему так полезно объединение фрагментов кода в функции, и каким образом можно использовать эти структуры, даже если такие фрагменты несколько различаются между собой.
</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td>  </tr>     <th rowspan="6" id=t07>Алгоритмы</th>    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">Игра в кости</a><br><small>На этом уроке учащиеся поймут связь концепции алгоритмов с повседневными действиями, играя с игральными кубиками. Целью при этом является формирование начальных навыков преобразования ситуаций из реальной жизни в онлайн-сценарии и наоборот.
</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursee/1">Мои друзья-роботы</a><br><small>Используя предопределенные символьные ключи, ваши ученики поймут, как направлять друг друга для выполнения конкретных задач без использования словесных команд. В этом сегменте занятия ученики усваивают взаимосвязь между символами и действиями, а также различие между алгоритмом и программой, приобретая также ценный навык отладки.</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">Алгоритмы из реальной жизни: Бумажные самолетики</a><br><small>На этом уроке учащиеся поймут связь концепции алгоритмов с повседневными действиями. После обсуждения алгоритмов учащиеся сделают бумажные самолетики, используя алгоритм. Целью при этом является формирование начальных навыков преобразования ситуаций из реальной жизни в онлайн-сценарии и наоборот.</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">Алгоритмы из реальной жизни: Посади семечко</a><br><small>На этом уроке учащиеся свяжут понятие алгоритмов с повседневной, реальной жизнью, посадив семя. Целью при этом является формирование начальных навыков преобразования ситуаций из реальной жизни в онлайн-сценарии и наоборот.</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">Танграмы</a><br><small>В ходе этого урока мы узнаем важную информацию об алгоритмах. Пока вы обеспечиваете простоту алгоритма, есть множество способов использовать его. Однако, если вы хотите, чтобы все получали один и тот же результат, ваш алгоритм должен быть более подробным. Играя с танграмами, ученики узнают о различии между подробным и общим алгоритмами.</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td>  </tr>  </tr>    <tr>  </tr>    </tr>     <th id=t07 rowspan="4">Вычислительное мышление</th>        <tr>        <td><a href="https://code.org/curriculum/course3/1/Teacher">Вычислительное мышление</a><br><small>Для занятия инструкции не предусмотрены. Вместо этого учащиеся будут использовать примеры действий воображаемых игроков, чтобы понять, как играть в игру. Этот урок предоставляет учащимся возможность попрактиковать четыре искусства вычислительного мышления (разбиение на части, построение шаблонов, абстрактное представление и алгоритмы) в рамках одного целостного занятия.</td> <td><a href="https://youtu.be/TlAaklrolA0">Видео урока</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">Посмотреть урок в действии</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">Ключи к ответам для занятия </a></td>        </tr>        <td><a href="https://studio.code.org/unplugged/unplug2.pdf">>Вычислительное мышление с Монстрами</a><br><small>Используя только бумагу и маркер, ученики изучат четыре ступени вычислительного мышления. После краткого введения ученики делятся на группы, в которых они должны подготовить для других учеников инструкции по рисованию определенного монстра (из каталога заранее отобранных монстров). Задание делится на части, и команды анализируют всех монстров в каталоге для составления шаблонов, выделяют различные части монстров, а затем используют данную информацию для создания алгоритмов (инструкций) для другой команды, которая должна нарисовать определенного монстра. Затем команды обмениваются алгоритмами с другой группой и рисуют монстра по заданному алгоритму. Похож ли рисунок на то, что имела в виду первая команда?</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">Незамеченные «баги»</a><br><small>На этом уроке учащиеся изучат шаги отладки. Они выучат мантру: «Что произошло? Что должно было произойти? О чем это говорит?» </td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td>  </tr>    </tr>     <th rowspan="2" id=t07>Настойчивость</th>  <td><a href="https://curriculum.code.org/csf-18/coursec/1/">Создание основы</a><br><small>Новые и нерешенные проблемы часто бывают довольно сложными. Если мы хотим иметь хоть какой-то шанс создать что-то творческое, полезное и умное, то мы должны быть готовы решать сложные проблемы, даже если это означает, что мы несколько раз потерпим неудачу, прежде чем добьемся успеха. На этом уроке учащиеся будут создавать конструкцию из обычных материалов. Конструкция будет проверяться на способность удерживать учебник в течение более десяти секунд. Большинство учащихся не смогут сделать это правильно с первого раза, но важно, чтобы они двигались вперед и продолжали пробовать.</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td>  </tr>  <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/2/">Стиви и Большой Проект</a><br><small>Когда учащиеся сталкиваются с препятствиями при поиске ответа на вопрос или во время работы над проектом, они могут легко расстроиться и сдаться. Этот урок познакомит учащихся с идеей о том, что разочарование может быть важной частью обучения. Здесь разочарование представляется как этап творческого процесса, а не как признак неудачи. Этот урок можно провести за одно или два занятия. Если у вас есть больше времени, нарисуйте этап построения и пересмотра задания «Marble Run».</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td>  </tr>     <th id=t07>Абстракция</th>    <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>Абстрактное представление является одним из наиболее важных навыков, которыми должен владеть программист. Это упрощает трудности и предотвращает ненужные повторения. Хороший программист использует абстракцию практически каждый раз, когда создает программу. Это упражнение поможет ученикам проанализировать рассказы и найти в них отличия, которые можно отбросить. Таким образом, истории превратятся в универсальные шаблоны для создания новых интересных произведений.</td> <td><a href="https://youtu.be/TctGRrUdkcc">Видео урока</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">Ключ к ответам для занятия</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">Ключ к ответам для задания на проверку знаний </a></td>  </tr>
<tr>   <th id=t07>Переменные</th>     <td><a href="https://curriculum.code.org/csf-20/coursef/7/">Конвертные переменные</a><br><i>*Школьные принадлежности: конверты (1-4/группа из 2-4 учеников)</i><br><small>Переменные используются в качестве полей для заполнения значениями, такими как числа или слова. Они позволяют обеспечить значительную степень свободы при программировании. Вместо того, чтобы много раз печатать фразу или запоминать неизвестное число, в информатике используются ссылающиеся на них переменные. Этот урок помогает объяснить сущность переменных и множество различных способов их использования. Идея переменной не проста для понимания, поэтому мы рекомендуем в конце урока выделить значительное время на обсуждение.</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td></tr>
</table>


<p style="clear:both"></p>

