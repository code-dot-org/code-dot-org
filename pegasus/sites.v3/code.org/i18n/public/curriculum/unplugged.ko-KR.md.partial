---
title: CS 기초 언플러그드
video_player: true
theme: responsive
---

# CS 기초 언플러그드

학급에서 사용하실 수 있도록 언플러그드 수업 일체를 목록으로 모아놓았습니다. 앞으로는 학급에 컴퓨터가 구비되어 있지 않아도 컴퓨터 과학의 기초를 가르치 수 있습니다!
<br>
<div class="col-50">
저희는 학생들이 컴퓨터상으로 진행 중이지 않은 수업을 “언플러그드”라고 합니다. 학생들은 대개 종이와 연필을 사용하거나 실제적인 것을 조작하며 학습하게 됩니다.  학생들이 운동 감각을 이용하는 기회를 통해 실생활과 연관된 다양한 방식으로 복잡한 개념을 소화할 수 있게끔 의도적으로 배치된 과정입니다. <br><br>
언플러그드 수업은 협동적인 학급 환경을 조성하고 유지하는 데 특히 유용하므로 보다 추상적인 개념을 소개할 때 유용하게 적용할 만한 시금석이 되는 환경입니다. 이 각각의 활동은 단독으로 쓰일 수도 있고 연관 개념에 관한 타 컴퓨터 과학 수업과 함께 쓰일 수도 있습니다.
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;연령 4세 이상, 영어 전용
</div>

<div style="clear: both;"></div>

***
## Unplugged lessons in CS Fundamentals 2022-23
The following lessons can be found in <a href="https://docs.google.com/document/d/12j5IkeGEWeAmWnZY9krbNSo8oKOKT5nIQGUH5J7Si80/preview" target="_blank" rel="noopener noreferrer">CS Fundamentals 2022-23</a>. <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Course</th>
    <th><center><big>Lesson Plan</th>
    <th width=10%><center><big>Concept</th>
    <th width=20%><center><big>Video</th>
     <tr>
    <th rowspan="3" id="t01">Course A</th>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/3">A.3 - Happy Maps</a><br><small>This unplugged lesson brings together teams with a simple task: get the "flurb" to the fruit. 학생들은 명령을 정확하게 작성하는 연습을 하면서 명령을 제공된 기호로 변환해봅니다. If problems arise in the code, students should also work together to recognize bugs and build solutions.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/7">A.7 - Happy Loops</a><br><small>This activity revisits Happy Maps. This time, student will be solving bigger, longer puzzles with their code, leading them to see utility in structures that let them write longer code in an easier way.</td><td>Loops</td> <td><img src="/images/a7.png" width="90%"></td>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/11">A.11 - The Big Event Jr.</a><br><small>Events are a great way to add variety to a pre-written algorithm. 사용자가 원할 때 곧바로 프로그램이 사용자에게 반응하도록 하고 싶을 때가 있습니다. That is what events are for.</td><td>Events</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>
  </tr>
       <tr>
    <th rowspan="3" id="t02">Course B</th>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/2">B.2 - Move It, Move It</a><br><small>This lesson will work to prepare students mentally for the coding exercises that they will encounter over the length of this course. In small teams, students will use physical activity to program their classmates to step carefully from place to place until a goal is achieved.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/6">B.6 - Getting Loopy</a><br><small>As we start to write longer and more interesting programs, our code often contains a lot of repetition. In this lesson, students will learn about how loops can be used to more easily communicate instructions that have a lot of repetition by looking at the repeated patterns of movement in a dance.</td><td>Loops</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/10">B.10 - The Right App</a><br><small>This lesson has students recognize that computer science can help people in real life. 가상의 스마트폰 사용자들의 요구 사항을 다뤄주는 “꼭 맞는 앱”을 찾아줄 수 있도록 그들에게 감정을 이입하는 것부터 시작합니다. Then, students exercise empathy and creativity to sketch their own smartphone app that addresses the needs of one additional user.</td><td>Impacts of Computing</td> <td><img src="/images/b10.png" width="90%"></td>
  </tr>
       <tr>
    <th rowspan="4" id="t03">Course C</th>
    <td><a href="https://studio.code.org/s/coursec-2022/lessons/2">C.2 - My Robotic Friends Jr.</a><br><i>*Supplies: Plastic cups (10/group of 2-3)</i><br><small>Using a set of symbols in place of code, students will design algorithms to instruct a "robot" to stack cups in different patterns. 차례차례 돌아가며 로봇으로 참여해 친구들이 정의한 알고리즘에 따라서만 응답해봅니다. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>
  </tr>
  <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/7">C.7 - My Loopy Robotic Friend Jr</a><br><i>*Supplies: Paper cups (20/group of 4)</i><br><small>Overview
Building on the initial "My Robotic Friends" activity, students tackle larger and more complicated designs. In order to program their "robots" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.</td><td>Loops</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>
  </tr>
      <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/11">C.11 - The Big Event</a><br><small>Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. 사용자가 원할 때 곧바로 프로그램이 사용자에게 반응하도록 하고 싶을 때가 있습니다. Events can make your program more interesting and interactive.</td><td>Events</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>
   </tr>
       </tr>
     <td><a href="https://studio.code.org/s/coursec-2022/lessons/15">C.15 - Binary Bracelets</a><br><i>*Supplies: Markers. 선택 사항 –학생당 파이프 블리너 1개, 검은색 비즈 18개/흰색 비즈 18개</i><br><small>컴퓨터의 세계에서 이진법은 정말 중요합니다. 오늘날 대부분의 컴퓨터는 정보의 유형에 관계없이 모두 이진법 형태로 저장하기 때문입니다. This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs.</td><td>Binary</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>
  </tr>
         <tr>
    <th rowspan="3" id="t04">Course D</th>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/2">D.2 - Graph Paper Programming<br></a><small>By "programming" one another to draw pictures, students get an opportunity to experience some of the core concepts of programming in a fun and accessible way. 수업은 학생들이 기호를 사용해 서로서로 명령을 내려 그래프용지 위 네모를 색칠해 기존의 그림을 재현하게 하는 것으로 시작합니다. If there’s time, the lesson can conclude with images that the students create themselves.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/4">D.4 - Relay Programming<br></a><small>This activity will begin with a short lesson on debugging and persistence, then will quickly move to a race against the clock as students break into teams and work together to write a program one instruction at a time.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>
      </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/12">D.12 - Conditionals with Cards</a><br><small>This lesson demonstrates how conditionals can be used to tailor a program to specific information. 우리가 프로그램을 작성할 때 필요한 모든 정보를 항상 가지고 있는 것이 아닙니다. 코드가 실행 중인 때에 어떤 상황이 참이 될지는 모르나 상황에 따라 무언가가 달라지기를 원할 때가 있습니다. 바로 그때 조건문이 필요합니다. Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.+</td><td>Conditionals</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>

  </tr>
  <tr>
    <th rowspan="3" id="t05">Course E</th>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/9">E.9 - Songwriting</a><br><small>One of the most magnificent structures in the computer science world is the function. 함수(프로시저라고도 합니다) 는 더 큰 프로그램 안에서 몇 번이고 사용할 수 있는 미니 프로그램입니다. This lesson will help students intuitively understand why combining chunks of code into functions can be such a helpful practice.</td><td>Functions</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/15">E.15 - Designing for Accessibility</a><br><small>In this lesson, students will learn about accessibility and the value of empathy through brainstorming and designing accessible solutions for hypothetical apps.</td><td>Impacts of Computing</td><td><img src="/images/e18.png" width="90%"></td>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/16">E.16 - Digital Sharing</a><br><i>*Supplies: Smartphone or tablet</i><br><small>Loaned to Computer Science Fundamentals by the team over at Copyright and Creativity, this lesson exists to help students understand the challenges and beneﬁts of respecting ownership and copyright, particularly in digital environments. Students should be encouraged to respect artists’ rights as an important part of being an ethical digital citizen.</td><td>Digital Citizenship</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t06">Course F</th>
           <td><a href= "https://studio.code.org/s/coursef-2022/lessons/6">F.6 -Blank Space Stories</a><br><i>*Supplies: 6 envelopes(also suitable:paper or index cards,folded in half)</i><br><small>Students will use fill-in-the-blank stories (similar to Mad Libs®) as a context for understanding how computers take and store input from a user, then use it later as a program runs.
   </td><td>Variables</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>
  </tr>
        <tr>
    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - For Loop Fun</a><br><i>*Supplies: Dice (3 dice/group of 2-4)</i><br><small>We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic.</td><td>For Loops</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursef-2022/lessons/15">F.15 - The Internet</a><br><small>Even though many people use the internet daily, not very many know how it works. 이 수업에서 학생들은 인터넷을 돌고 돌는 상황을 가정하고 연결과 URL, IP 주소, DNS에 대해 배워봅니다.</td><td>데이터</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td>
  </tr>
</table>

<p style="clear:both"></p>

***
## 부가 언플러그드 수업

다음 수업들은 개념별로 정리되었으며 이전 CS 기초 코스 버전에서 이용할 수 있습니다. 이 수업들을 활용하고자 계획 중에 참고하면 좋을 부가 자료의 내용:
* [2019 코스 A-F 커리큘럼 가이드](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 코스 A-F 준비물 목록](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 코스 Amazon 목록](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 코스 A-F 커리큘럼 가이드](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 코스 A-F 커리큘럼 가이드(v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [코스 1-4 커리큘럼 가이드](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF 플래시카드](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>개념</th>
    <th width=65%><center><big>수업 계획 <br>
<small> 수업 계획에는 부가 자료(슬라이드, 동영상, 해답지 등) 가 포함되어 있습니다.
</th>
    <th><center><big>Resources</th>
     <tr>
    <th rowspan="2" id=t07 width=5%>Digital Citizenship</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Crowdsourcing</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>
  </tr>
  <tr>
      <td colspan="2">*Common Sense Education has a <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">full Digital Citizenship Curriculum</a> that includes many unplugged activities.</td>
    <tr>
    <th id=t07>Binary</th>
        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">Binary Images </a><br><small>*Supplies:Optional - Groupings of opposite items to display to students. 대부분 사람들은 이진법을 무조건 0과 1로 생각합니다. 정보가 여러 가지 이진법으로 나타날 수 있다는 사고방식을 학생들에게 소개할 것입니다. 이 수업에서는 이진법 개념을 한 수준 끌어올려 컴퓨터가 어떻게 훨씬 더 복잡한 정보(이미지나 색상 등)까지도 이진법으로 보관할 수 있는지를 설명합니다.</td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td>
 </tr>
    <tr>
    <th id=t07>루프</th>
        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">내 루프 로봇 친구들</a><br><small>여기서 학생들은 “내 로봇 친구들”의 언어를 활용해 친구들을 “프로그래밍”하며 루프의 다용도성과 단순성을 배워봅니다. 루프의 소개가 끝나면 학생들이 더 큰 구조를 더 빠르게 만들게 됩니다.
</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td>
  </tr>
     <th rowspan="2" id=t07>함수</th>
    <td><a href="https://code.org/curriculum/course3/4/Teacher">함수 선캐처</a><br><small>이 수업에서 학생들은 끈과 비즈, 특별한 장식물을 가지고 선캐처를 만들어봅니다. 반복되는 일련의 단계를 수행한 다음 여러 차례 중복되는 “능력” 세트를 식별해야 합니다. 이러한 능력들은 정의가 끝나면 메인 프로그램에서 호출되며 창조라는 아름다운 과정 전체가 종이 한 장에 기록됩니다. 최종 프로그램은 어떤 종류의 끈, 비즈, 장식물을 사용하든 학급 전체를 대상으로 합니다. 이를 효과적으로 하려면 학생들이 특정 재료의 세세한 부분을 “추출”해 각 준비물에 모호한 용어를 붙여야 합니다. 일반 자리 표시자를 이렇게 사용하면 변수를 훌륭하게 소개할 수 있습니다.</td> <td><a href="https://youtu.be/d1MdyeXy0v0">수업 동영상</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">활동 수업 보기</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">Activity Answer Key <a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">평가 해답지</a></td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">매개변수를 이용한 작사·작곡</a><br><small>컴퓨터 과학의 세계에서 가장 숭고한 구조 중 하나는 바로 함수입니다. 함수(프로시저라고도 합니다) 는 더 큰 프로그램 안에서 몇 번이고 사용할 수 있는 미니 프로그램입니다. 이 수업에서 학생들은 코드 덩어리들을 함수로 결합하는 일이 어째서 그토록 유용한 연습이 될 수 있는지, 코드 덩어리들이 약간 달라져도 어떻게 하면 그 구조를 사용할 수 있는지를 직관적으로 이해하게 됩니다.
</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td>
  </tr>
     <th rowspan="6" id=t07>알고리즘</th>
    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">주사위 레이스</a><br><small>이 수업에서 학생들은 주사위 레이스 게임을 하며 알고리즘의 개념을 다시금 현실과 결부시켜봅니다. 여기서 목표는 현실 세계의 상황을 온라인 시나리오로, 또는 그 반대의 경우로 변환하는 능력을 기르는 것입니다.
</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursee/1">내 로봇 친구</a><br><small>학생들이 미리 정의된 기호 키를 활용하여 구두 명령을 사용하지 않고도 특정 과제를 완수하도록 서로를 이끄는 방법을 배우게 됩니다. 이 세그먼트에서 학생들은 기호와 동작 간의 관계, 알고리즘과 프로그램 간의 차이, 그리고 디버깅이라는 아주 유익한 능력을 배웁니다.</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">현실 속 알고리즘: 종이비행기</a><br><small>이 수업에서 학생들은 다시금 알고리즘의 개념을 일상 활동과 결부시켜봅니다. 먼저 알고리즘에 대해 의견을 나눈 후 알고리즘을 사용해 종이비행기를 만들어봅니다. 여기서 목표는 현실 세계의 상황을 온라인 시나리오로, 또는 그 반대의 경우로 변환하는 능력을 기르는 것입니다.</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">현실 속 알고리즘: 씨앗 심기</a><br><small>이 수업에서 학생들은 실제로 씨앗을 심어보면서 알고리즘의 개념을 다시금 일상 속 현실 활동과 결부시켜봅니다. 여기서 목표는 현실 세계의 상황을 온라인 시나리오로, 또는 그 반대의 경우로 변환하는 능력을 기르는 것입니다.</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td>
  </tr>
    <tr>
    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">탱그램</a><br><small>이 수업에서는 알고리즘에 대한 중요한 사실을 찾아볼 수 있습니다. 알고리즘은 너무 복잡해지지만 않는다면 여러 가지 방법으로 활용할 수 있습니다. 하지만 누구나 똑같은 결과를 얻게 하려면 더 세세한 알고리즘이 필요합니다. 학생들은 탱그램을 하면서 세세한 알고리즘과 대강적인 알고리즘의 차이를 배워봅니다.</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td>  </tr>
  </tr>
    <tr>
  </tr>
    </tr>
     <th id=t07 rowspan="4">컴퓨팅 사고</th>
        <tr>
        <td><a href="https://code.org/curriculum/course3/1/Teacher">컴퓨팅 사고</a><br><small>이 활동의 경우, 설명이 제공되지 않습니다. 그 대신 학생들은 상상 속 플레이어들이 게임을 하는 방법을 알아내고자 한 일의 예시들을 활용하게 됩니다. 이 수업은 하나의 응집성 활동을 통해 컴퓨팅 사고의 네 가지 분야(분해, 패턴 일치, 추출, 알고리즘)를 연습할 기회입니다.</td> <td><a href="https://youtu.be/TlAaklrolA0">수업 동영상</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">활동 수업 보기</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">활동 해답지 </a></td>
        </tr>
        <td><a href="https://studio.code.org/unplugged/unplug2.pdf">몬스터와 함께하는 컴퓨팅 사고</a><br><small>학생들은 종이와 마커만 가지고 컴퓨터 사고의 네 가지 단계를 배워봅니다. 짧게 소개가 끝나면 학생들끼리 그룹을 나누고 서로서로 특정 몬스터(미리 선정된 몬스터 카탈로그에서) 를 그리기 위한 지시문을 제작하게 합니다. 과제는 전부 분해되어야 합니다. 이후, 팀들은 카탈로그의 모든 몬스터를 분석해 패턴을 찾고 몬스터의 유사한 부분을 추출한 다음 그 정보를 사용해 다른 팀이 특정 몬스터를 그리도록 알고리즘(지시문) 을 만듭니다. 그런 다음 그룹끼리 알고리즘을 교환해 해당 알고리즘이 가리키는 대로 몬스터를 그려봅니다. 그림이 원래 팀이 의도한 대로 되었나요?</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td>
  <tr>
    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">결백한 버그</a><br><small>이 수업에서는 학생들과 디버깅을 하나하나 짚어봅니다. 학생들은 “무슨 일이 벌어진 거지?”라는 만트라를 배우게 됩니다. 원래는 어땠어야 했지? 무엇을 알 수 있니? </td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td>
  </tr>
    </tr>
     <th rowspan="2" id=t07>지속성</th>
  <td><a href="https://curriculum.code.org/csf-18/coursec/1/">기초 세우기</a><br><small>새로 등장한 해결되지 않은 문제는 꽤 어려운 경우가 다반사입니다. 우리가 무언가 창의적이고 유용하고 재치 있는 것을 만들어보고자 한다면 성공하기까지 몇 차례 실패를 하리라 할지라도 어려운 문제를 그냥 넘기지 않겠다는 의지가 필요합니다. 이 수업에서 학생들은 평범한 재료로 구조물을 지어봅니다. 그리고 그 구조물이 교과서를 10초 이상 지탱할 수 있는지 시험합니다. 대부분은 첫 시도에 실패하겠지만 포기하지 않고 계속 시도하는 것이 중요합니다.</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td>
  </tr>
  <tr>
 <td><a href="https://curriculum.code.org/csf-18/coursea/2/">스티비와 큰 프로젝트</a><br><small>학생들은 질문에 답을 하거나 프로젝트 작업을 하는 중에 장애물을 맞닥뜨리면 좌절하고 포기하는 경우가 많습니다. 이 수업에서는 학생들에게 좌절감이 배움의 중요한 일부라는 사고방식을 소개합니다. 여기서 좌절감은 실패의 징후보다는 창의적 과정의 한 단계로 제시됩니다. 이 수업은 몇 차례에 걸쳐서 해도 좋습니다. 시간이 더 있다면 마블런 활동에서 짓기 단계와 고치기 단계를 길게 끌어봅니다.</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td>
  </tr>
     <th id=t07>추출</th>
    <td><a href="https://code.org/curriculum/course4/5/Teacher">매드 글립스</a><br><small>추출은 컴퓨터 과학자가 이해해야 할 아주 중요한 기능입니다. 문제를 단순화하고 불필요한 반복을 방지합니다. 훌륭한 프로그래머는 거의 매번 프로그램을 제작할 때마다 추출을 사용합니다. 이 활동에서 학생들은 이야기별로 다른 점을 찾고 분석해 추출합니다. 추출된 이야기는 재미있고 색다른 새 이야기의 템플릿이 됩니다.</td> <td><a href="https://youtu.be/TctGRrUdkcc">수업 동영상</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">활동 해답지</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">평가 해답지</a></td>
  </tr>
<tr>
   <th id=t07>변수</th>
     <td><a href="https://curriculum.code.org/csf-20/coursef/7/">봉투 변수</a><br><i>*준비물: 봉투(2~4명 그룹당 1~4장)</i><br><small>변수는 숫자나 단어 같은 값에 대한 자리 표시자로 사용됩니다. 변수를 사용하면 프로그래밍에서 상당한 자유를 누릴 수 있습니다. 컴퓨터 과학자들은 구문을 여러 번 입력하거나 모호한 수를 기억해야 할 필요가 없이 변수를 사용해 참조합니다. 이 수업에서는 변수가 무엇인지, 어떻게 하면 다양한 방식으로 사용할 수 있는지를 설명합니다. 변수라는 개념은 이해하기가 쉽지 않으므로 수업이 끝난 후에 충분한 시간을 두고 의견을 나눠보기를 권장합니다.</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>
</tr>
</table>


<p style="clear:both"></p>

