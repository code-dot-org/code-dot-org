---
title: Informatik Grundlagen - ohne Computer
video_player: true
theme: responsive
---

# Informatik Grundlagen - ohne Computer

Wir haben eine Liste aller unserer Lektionen ohne Geräte zusammengestellt, die Sie in Ihrem Unterricht verwenden können. Jetzt können Sie die Grundlagen der Informatik unterrichten, egal, ob Sie in Ihrem Klassenzimmer über Computer verfügen oder nicht!
<br>
<div class="col-50">
Wir bezeichnen Unterrichtsstunden, in denen die Schüler nicht am Computer arbeiten, als Lektionen „ohne Geräte“ bzw. „ohne Computer“ Die SchülerInnen arbeiten häufig mit Bleistift und Papier oder mit physikalischen Hilfsmitteln.  Dabei handelt es sich um bewusst platzierte kinästhetische Gelegenheiten, anhand derer die SchülerInnen komplizierte Konzepte auf eine Weise verstehen können, die etwas mit ihrem eigenen Leben zu tun haben. <br><br> Lektionen ohne Computer sind besonders nützlich für den Aufbau und die Aufrechterhaltung eines kollaborativen Unterrichtsumfeldes und sie sind nützliche Erfahrungen, auf die Sie bei der Einführung abstrakterer Konzepte zurückgreifen können. Jede dieser Aktivitäten kann entweder allein oder zusammen mit anderen Informatikstunden zu verwandten Konzepten verwendet werden.
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Ab 4 Jahren, nur Englisch
</div>

<div style="clear: both;"></div>

***
## Unterricht ohne Computer in Grundlagen der Informatik 2021-22
Die folgenden Lektionen finden Sie in <a href="https://docs.google.com/document/d/19BIaGVliOZCciSDmuezFFUhhCjhrB2oXpVLn0cJAibc/preview" target="_blank">CS Grundlagen 2021-22</a>. <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Course</th>
    <th><center><big>Lesson Plan</th>
    <th width=10%><center><big>Concept</th>
    <th width=20%><center><big>Video</th>
     <tr>
    <th rowspan="3" id="t01">Course A</th>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/3">A.3 - Happy Maps</a><br><small>This unplugged lesson brings together teams with a simple task: get the "flurb" to the fruit. Die Schüler üben das Schreiben präziser Anweisungen, indem sie die Anweisungen in die vorgegebenen Symbole übersetzen. If problems arise in the code, students should also work together to recognize bugs and build solutions.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/7">A.7 - Happy Loops</a><br><small>This activity revisits Happy Maps. This time, student will be solving bigger, longer puzzles with their code, leading them to see utility in structures that let them write longer code in an easier way.</td><td>Loops</td> <td><img src="/images/a7.png" width="90%"></td>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/11">A.11 - The Big Event Jr.</a><br><small>Events are a great way to add variety to a pre-written algorithm. Manchmal möchten Sie, dass Ihr Programm genau dann auf den Benutzer reagiert, wenn dieser es wünscht. That is what events are for.</td><td>Events</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>
  </tr>
       <tr>
    <th rowspan="3" id="t02">Course B</th>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/2">B.2 - Move It, Move It</a><br><small>This lesson will work to prepare students mentally for the coding exercises that they will encounter over the length of this course. In small teams, students will use physical activity to program their classmates to step carefully from place to place until a goal is achieved.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/6">B.6 - Getting Loopy</a><br><small>As we start to write longer and more interesting programs, our code often contains a lot of repetition. In this lesson, students will learn about how loops can be used to more easily communicate instructions that have a lot of repetition by looking at the repeated patterns of movement in a dance.</td><td>Loops</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/10">B.10 - The Right App</a><br><small>This lesson has students recognize that computer science can help people in real life. Zunächst versetzen sich die Schüler in die Rollen von fiktiven Smartphone-Nutzern, um ihnen zu helfen, die „richtige App“ für ihre Bedürfnisse zu finden. Then, students exercise empathy and creativity to sketch their own smartphone app that addresses the needs of one additional user.</td><td>Impacts of Computing</td> <td><img src="/images/b10.png" width="90%"></td>
  </tr>
       <tr>
    <th rowspan="4" id="t03">Course C</th>
    <td><a href="https://studio.code.org/s/coursec-2022/lessons/2">C.2 - My Robotic Friends Jr.</a><br><i>*Supplies: Plastic cups (10/group of 2-3)</i><br><small>Using a set of symbols in place of code, students will design algorithms to instruct a "robot" to stack cups in different patterns. Die SchülerInnen übernehmen abwechselnd die Rolle des Roboters und reagieren nur auf den von ihren MitschülerInnen bestimmten Algorithmus. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>
  </tr>
  <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/7">C.7 - My Loopy Robotic Friend Jr</a><br><i>*Supplies: Paper cups (20/group of 4)</i><br><small>Overview
Building on the initial "My Robotic Friends" activity, students tackle larger and more complicated designs. In order to program their "robots" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.</td><td>Loops</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>
  </tr>
      <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/11">C.11 - The Big Event</a><br><small>Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. Manchmal möchten Sie, dass Ihr Programm genau dann auf den Benutzer reagiert, wenn dieser es wünscht. Events can make your program more interesting and interactive.</td><td>Events</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>
   </tr>
       </tr>
     <td><a href="https://studio.code.org/s/coursec-2022/lessons/15">C.15 - Binary Bracelets</a><br><i>*Supplies: Markers. Optional - 18 schwarze/18 weiße Perlen, 1 Pfeifenreiniger pro SchülerIn</i><br><small>Das binäre System ist in der Welt der Computer extrem wichtig. Die meisten Computer speichern heute alle Arten von Informationen in binärer Form. This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs.</td><td>Binary</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>
  </tr>
         <tr>
    <th rowspan="3" id="t04">Course D</th>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/2">D.2 - Graph Paper Programming<br></a><small>By "programming" one another to draw pictures, students get an opportunity to experience some of the core concepts of programming in a fun and accessible way. Die Klasse beginnt damit, dass sich die SchülerInnen gegenseitig mit Hilfe von Symbolen anweisen, Quadrate auf Millimeterpapier auszumalen, um ein bestehendes Bild zu reproduzieren. If there’s time, the lesson can conclude with images that the students create themselves.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/4">D.4 - Relay Programming<br></a><small>This activity will begin with a short lesson on debugging and persistence, then will quickly move to a race against the clock as students break into teams and work together to write a program one instruction at a time.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>
      </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/12">D.12 - Conditionals with Cards</a><br><small>This lesson demonstrates how conditionals can be used to tailor a program to specific information. Wir haben nicht immer alle Informationen, die wir brauchen, wenn wir ein Programm schreiben. Manchmal möchte man in einer bestimmten Situation etwas anders machen als in einer anderen, auch wenn man nicht weiß, welche Situation beim Ausführen des Codes eintritt. Hier kommen die Bedingungen ins Spiel. Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.+</td><td>Conditionals</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>

    </tr>
         <tr>
    <th rowspan="3" id="t05">Course E</th>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/16">E.7 - Digital Sharing</a><br><i>*Supplies: Smartphone or tablet</i><br><small>Loaned to Computer Science Fundamentals by the team over at Copyright and Creativity, this lesson exists to help students understand the challenges and beneﬁts of respecting ownership and copyright, particularly in digital environments. Students should be encouraged to respect artists’ rights as an important part of being an ethical digital citizen.</td><td>Digital Citizenship</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/9">E.11 - Songwriting</a><br><small>One of the most magnificent structures in the computer science world is the function. Funktionen sind Miniprogramme, die man innerhalb eines größeren Programms immer wieder verwenden kann. This lesson will help students intuitively understand why combining chunks of code into functions can be such a helpful practice.</td><td>Functions</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/15">E.17 - Designing for Accessibility</a><br><small>In this lesson, students will learn about accessibility and the value of empathy through brainstorming and designing accessible solutions for hypothetical apps.</td><td>Impacts of Computing</td><td><img src="/images/e18.png" width="90%"></td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t06">Course F</th>
           <td><a href= "https://studio.code.org/s/coursef-2022/lessons/6">F.6 -Blank Space Stories</a><br><i>*Supplies: 6 envelopes(also suitable:paper or index cards,folded in half)</i><br><small>Students will use fill-in-the-blank stories (similar to Mad Libs®) as a context for understanding how computers take and store input from a user, then use it later as a program runs.
   </td><td>Variables</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>
  </tr>
        <tr>
    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - For Loop Fun</a><br><i>*Supplies: Dice (3 dice/group of 2-4)</i><br><small>We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic.</td><td>For Loops</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursef-2022/lessons/15">F.19 - The Internet</a><br><small>Even though many people use the internet daily, not very many know how it works. In dieser Lektion tun die SchülerInnen so, als würden sie durch das Internet fließen und lernen dabei etwas über Verbindungen, URLs, IP-Adressen und das DNS.</td><td>Daten</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td> </tr>
</table>

<p style="clear:both"></p>

***
## Zusätzliche Lektionen ohne Computer

Die folgenden Lektionen sind nach Konzepten geordnet und sind in früheren Versionen unserer Informatik-Grundlagenkurse verfügbar. Weitere Ressourcen, die Sie bei der Planung dieser Lektionen verwenden können, sind u. a:
* [Musterlehrplan für die Kurse A-F 2019](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [Liste der erforderlichen Materialien für die Kurse A-F 2019](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [Amazon-Listen für den Kurs 2019](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [Musterlehrplan für die Kurse A-F 2018](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [Musterlehrplan für die Kurse A-F 2017 (v2)](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [Musterlehrplan Kurs 1-4](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF Flashcards](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Konzept</th> Lehrplan <th width=65%><center><big>Lehrplan <br> <small> Der Lesson Plan enthält zusätzliche Ressourcen (Folien, Videos, Lösungsschlüssel usw.).
</th>
    <th><center><big>Resources</th>
     <tr>
    <th rowspan="2" id=t07 width=5%>Digital Citizenship</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Crowdsourcing</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>
  </tr>
  <tr>
      <td colspan="2">*Common Sense Education has a <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">full Digital Citizenship Curriculum</a> that includes many unplugged activities.</td>
    <tr>
    <th id=t07>Binary</th>
        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">Binary Images </a><br><small>*Supplies:Optional - Groupings of opposite items to display to students. Obwohl viele Menschen bei binären Zahlen nur an Nullen und Einsen denken, lernen die SchülerInnen, dass Informationen durch vielfältige binäre Optionen dargestellt werden können. Diese Lektion geht noch einen Schritt weiter und veranschaulicht, wie ein Computer noch komplexere Informationen (wie Bilder und Farben) auch binär speichern kann.</td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td> </tr> <tr> <th id=t07>Schleifen</th> <td><a href="https://curriculum.code.org/csf-18/coursee/6/">Meine fröhlichen Roboterfreunde</a><br><small>Hier lernen die SchülerInnen die Einfachheit und Nützlichkeit von Schleifen kennen, während sie ihre Freunde mit der Sprache aus "Meine Roboterfreunde" "programmieren" Nach der Einführung von Schleifen werden die SchülerInnen feststellen, dass sie damit größere Strukturen schneller bauen können.
</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td> </tr> <th rowspan="2" id=t07>Funktionen</th> <td><a href="https://code.org/curriculum/course3/4/Teacher">Funktionale Sonnenfänger</a><br><small>In dieser Lektion werden die SchülerInnen einen Sonnenfänger aus Schnur, Perlen und einem besonderen Anhänger herstellen. Die Schüler folgen einer Reihe von sich wiederholenden Schritten und werden dann aufgefordert, bestimmte „Fähigkeiten“ zu identifizieren, die mehrmals wiederholt werden. Wenn sie diese Fähigkeiten definiert haben, werden sie von einem Hauptprogramm aus aufgerufen, und der ganze schöne Prozess der Erstellung wird auf einem einzigen Blatt Papier festgehalten. Das endgültige Programm richtet sich an die gesamte Klasse, unabhängig von der Art der Schnüre, Perlen und Anhänger. Um dies zu ermöglichen, müssen die SchülerInnen die Eigenschaften ihrer spezifischen Materialien "abstrahieren" und vage Begriffe für die einzelnen Materialien erfinden. Diese Verwendung von generischen Platzhaltern ist eine besonders geeignete Einführung in Variablen.</td> <td><a href="https://youtu.be/d1MdyeXy0v0">Video zur Lektion</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">Lektion in Aktion sehen</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">Lösungsschlüssel zur Aktivität<a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">Lösungsschlüssel zur Prüfung</a></td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">Songschreiben mit Parametern</a><br><small>Eine der großartigsten Strukturen in der Welt der Informatik ist die Funktion. Funktionen sind Miniprogramme, die man innerhalb eines größeren Programms immer wieder verwenden kann. Diese Lektion wird den SchülerInnen helfen, intuitiv zu verstehen, warum das Kombinieren von Codeabschnitten zu Funktionen so nützlich ist, und wie sie diese Strukturen auch dann verwenden können, wenn sich die Codeabschnitte leicht unterscheiden.
</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td> </tr> <th rowspan="6" id=t07>Algorithmen</th> <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">Würfelrennen</a><br><small>In dieser Lektion werden die Schülerinnen das Konzept der Algorithmen mit Aktivitäten aus dem normalen Leben in Verbindung bringen, indem sie das Spiel Würfelrennen spielen. Dabei soll die Fähigkeit entwickelt werden, Situationen aus dem normalen Leben auf Online-Szenarien zu übertragen und umgekehrt.
</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-18/coursee/1">Meine Roboterfreunde</a><br><small>Mit Hilfe eines vordefinierten Symbolschlüssels werden Ihre SchülerInnen herausfinden, wie sie sich gegenseitig anleiten können, bestimmte Aufgaben zu erfüllen, ohne dabei Sprachbefehle zu verwenden. In diesem Abschnitt lernen die SchülerInnen den Zusammenhang zwischen Symbolen und Aktionen, den Unterschied zwischen einem Algorithmus und einem Programm und die wichtige Fähigkeit der Fehlersuche kennen.</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-18/coursec/4/">Algorithmen im täglichen Leben: Papierflugzeuge</a><br><small>In dieser Lektion werden die Schüler das Konzept der Algorithmen auf alltägliche Aktivitäten anwenden. Nach der Besprechung von Algorithmen werden die Schüler Papierflugzeuge nach den Anleitungen in einem Algorithmus basteln. Ziel ist es, die Fähigkeit zu entwickeln, Situationen aus der realen Welt auf Online-Szenarien zu übertragen und umgekehrt.</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/3/">Algorithmen im täglichen Lebens: Samen einpflanzen</a><br><small>In dieser Lektion werden die SchülerInnen das Konzept der Algorithmen mit alltäglichen, realen Aktivitäten in Verbindung bringen, indem sie einen echten Samen pflanzen. Ziel ist es, die Fähigkeit zu entwickeln, reale Situationen auf Online-Szenarien zu übertragen und umgekehrt.</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">Tangrams</a><br><small>Diese Lektion demonstriert uns etwas Wichtiges zum Thema Algorithmen. Solange ein Algorithmus einfach gehalten ist, gibt es viele Möglichkeiten, ihn zu verwenden. Wenn Sie jedoch sichergehen wollen, dass alle das gleiche Ergebnis erzielen, muss der Algorithmus ausführlicher sein. Die Schüler lernen den Unterschied zwischen einem detaillierten und einem allgemeinen Algorithmus kennen, während sie mit Tangrams spielen.</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td> </tr> </tr> <tr> </tr> </tr> <th id=t07 rowspan="4">Rechnergestütztes Denken</th> <tr> <td><a href="https://code.org/curriculum/course3/1/Teacher">Rechnergestütztes Denken</a><br><small>Für diese Aktivität gibt es keine Anleitung. Stattdessen sollen die SchülerInnen anhand von Beispielen herausfinden, was imaginäre Spieler getan haben, um zu verstehen, wie das Spiel geht. Diese Lektion gibt den SchülerInnen die Möglichkeit, die vier Methoden des rechnerischen Denkens (Zerlegung, Mustervergleich, Abstraktion und Algorithmen) in einer zusammenhängenden Aktivität zu üben.</td> <td><a href="https://youtu.be/TlAaklrolA0"> Video zur Lektion</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">Siehe Lektion in Action</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">Aktivität Lösungsschlüssel </a></td> </tr> <td><a href="https://studio.code.org/unplugged/unplug2.pdf">Rechnergestütztes Denken mit Monstern</a><br><small>Mit nichts als Papier und Stiften lernen die Schüler die vier Schritte des rechnerischen Denkens. Nach einer kurzen Einführung sollten die SchülerInnen in Gruppen aufgeteilt werden, in denen sie Anweisungen für andere Schüler für das Zeichnen eines bestimmten Monsters (aus einem Katalog von zuvor ausgewählten Monstern) erstellen. Die gesamte Aufgabe wird aufgeteilt, dann analysieren die Teams alle Monster im Katalog nach Mustern, abstrahieren ähnliche Einzelheiten der Monster und verwenden diese Informationen dann, um einen Algorithmus (Anweisungen) für ein anderes Team zu erstellen, das ein bestimmtes Monster zeichnen soll. Die Teams tauschen dann ihre Algorithmen mit denen einer anderen Gruppe und zeichnen das Monster nach den Vorgaben des Algorithmus. Entspricht die Zeichnung den Vorstellungen des ursprünglichen Teams?</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td> <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/1/">Nicht entdeckte Fehler</a><br><small>In dieser Lektion werden die SchülerInnen durch die einzelnen Schritte der Fehlersuche geführt. Die SchülerInnen lernen das Mantra: „Was ist passiert? Was sollte eigentlich passieren? Was sagt dir das?“ </td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td> </tr> </tr> <th rowspan="2" id=t07>Beharrlichkeit</th> <td><a href="https://curriculum.code.org/csf-18/coursec/1/">Aufbau von Grundlagen</a><br><small>Neue und ungelöste Probleme sind oft ziemlich anstrengend. Wenn wir wirklich etwas Kreatives, Nützliches und Intelligentes schaffen wollen, müssen wir bereit sein, uns mit anspruchsvollen Probleme auseinandersetzen, auch wenn das bedeutet, dass wir ein paar Mal scheitern, bevor sich der Erfolg einstellt. In dieser Lektion werden die SchülerInnen eine Struktur aus alltäglichen Materialien bauen. Die Struktur wird darauf geprüft, ob sie ein Lehrbuch länger als zehn Sekunden halten kann. Die meisten SchülerInnen werden sie nicht beim ersten Mal ausräumen, aber es ist wichtig, dass sie durchhalten und es weiter versuchen.</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td> </tr> <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/2/">Stevie und das große Projekt</a><br><small>Wenn SchülerInnen bei der Beantwortung einer Frage oder bei der Arbeit an einem Projekt auf ein Hindernis stoßen, sind sie möglicherweise schnell frustriert und geben auf. In dieser Lektion lernen die SchülerInnen vermittelt, dass Frustration ein wichtiger Bestandteil des Lernens sein kann. Hier wird die Frustration als ein Schritt im kreativen Prozess dargestellt und nicht als Zeichen von Scheitern. Diese Lektion kann in einer oder zwei Unterrichtseinheiten durchgeführt werden. Wenn Ihnen mehr Zeit zur Verfügung steht, können Sie auch die Bau- und Überarbeitungsphase der Murmelbahnaktivität ausführlicher bearbeiten.</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td> </tr> <th id=t07>Abstraktion</th> <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>Abstraktion ist eine der wichtigsten Fähigkeiten, die ein Informatiker beherrschen muss.ganz. Sie vereinfacht Probleme und verhindert unnötige Wiederholungen. Gute Programmierer verwenden die Abstraktion fast jedes Mal, wenn sie ein Programm erstellen. Bei dieser Aktivität sollen die Schüler Geschichten auf Unterschiede hin analysieren, um diese dann zu abstrahieren. Diese abstrahierten Geschichten werden zu Vorlagen für lustige und verrückte neue Geschichten.</td> <td><a href="https://youtu.be/TctGRrUdkcc">Video zur Lektion</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">Lösungsschlüssel zur Aktivität</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">Lösungsschlüssel zur Prüfung </a></td> </tr>
<tr> <th id=t07>Variablen</th> <td><a href="https://curriculum.code.org/csf-20/coursef/7/">Umschlag-Variablen</a><br><i>*Unterrichtsmaterial: Briefumschläge (1-4/Gruppe von 2-4)</i><br><small>Variablen werden als Platzhalter für Werte wie Zahlen oder Wörter verwendet. Variablen ermöglichen beim Programmieren viele Freiheiten. Anstatt einen Satz viele Male eintippen oder sich eine obskure Zahl merken zu müssen, können Informatiker mit Hilfe von Variablen auf sie verweisen. In dieser Lektion wird erklärt, was Variablen sind und wie wir sie auf viele unterschiedliche Arten verwenden können. Das Konzept der Variablen ist nicht leicht zu verstehen, daher empfehlen wir, am Ende der Lektion viel Zeit für eine Diskussion einzuplanen.</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td> </tr>
</table>


<p style="clear:both"></p>

