---
title: 不插电版计算机科学基础知识
video_player: true
theme: responsive
---

# 不插电版计算机科学基础知识

我们汇总了一份所有不插电课程的清单，以备课堂使用。 现在你可以教授计算机科学的基础知识，无论教室中是否配有电脑！
<br>
<div class="col-50">
我们将这类不需要学生们在电脑上操作的课程称为“不插电版”。 学生们通常借助纸笔或实体操作工具动手练习。  课程中有特意布置的触感传觉设定，便于学生们通过与自身生活相关的方式理解复杂的概念。 <br><br>不插电课程对于构建和维持协作型课堂环境尤为实用，这种形式是非常有益的试金石经验，供你在介绍较为抽象的概念时参考借鉴。 其中的每一个活动都可以单独使用或与其他相关概念的计算机科学课程搭配使用。
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;             4岁以上，仅提供英语版
</div>

<div style="clear: both;"></div>

***
## 2021-22学年计算机科学基础知识不插电版课程

<a href="https://docs.google.com/document/d/19BIaGVliOZCciSDmuezFFUhhCjhrB2oXpVLn0cJAibc/preview" target="_blank">2021-22学年计算机科学基础知识</a>课程如下所列。 <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>课程</th>    <th><center><big>教案</th>     <th width=10%><center><big>概念</th>    <th width=20%><center><big>视频</th>     <tr>    <th rowspan="3" id="t01">课程 A</th>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/3">A.3 - 快乐地图</a><br><small>本节不插电课程要求团队一起完成一项简单的任务：引导“flurb”吃到水果。 学生们将练习书写精确指令，并将指令转为所提供的符号。 如果代码中出现问题，学生们也应该一起来查找错误并构建解决方案。</td><td>排序</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>  </tr>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/7">A.7 - 快乐循环</a><br><small>该活动将重温《快乐地图》。 这一次，学生们将用他们的代码解决更大、更长的难题，引导他们意识到结构的实用性，以更简单的方式编写更长的代码。</td><td>循环</td> <td><img src="/images/a7.png" width="90%"></td>  <tr>    <td width=40%><a href="https://studio.code.org/s/coursea-2021/lessons/11">A.11 - 大事件初级版</a><br><small>事件是在预先编写的算法中添加多样性的绝佳方法。 有时，你希望程序能够在用户恰好需要时，向用户发出响应。 这便是事件的作用。</td><td>事件</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>  </tr>       <tr>    <th rowspan="3" id="t02">课程 B</th>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/2">B.2 - 动起来， 动起来</a><br><small>本节课帮助学生们做好心理准备，迎接整个课程中将要遇到的编程练习。 学生们将分成小组，相互设计路线，通过移动身体从一个地方走到另一个地方，直至完成任务。</td><td>排序</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/6">B.6 - 练习循环</a><br><small>当我们开始编写更长、更有趣的程序时，我们的代码通常会有大量重复。 在本节课中，学生们将通过观察舞蹈中重复的动作模式，了解如何使用循环来更容易地传达具有大量重复的指令。</td><td>循环</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/courseb-2021/lessons/10">B.10 - 适宜的应用</a><br><small>本节课让学生们认识到计算机科学能够在现实生活中帮助人们。 首先，学生们需要设身处地了解几位虚拟的智能手机用户，帮助他们找到满足自身需求的“适宜的应用”。 然后，学生们发挥共情能力和创造力，创作自己的智能手机应用，来满足另一位用户的需求。</td><td>计算的影响</td> <td><img src="/images/b10.png" width="90%"></td>  </tr>       <tr>    <th rowspan="4" id="t03">课程 C</th>    <td><a href="https://studio.code.org/s/coursec-2021/lessons/2">C.2 - 我的机器人朋友初级版</a><br><i>*所需物品：塑料杯（2-3人为一组，每组10个杯子）</i><br><small>学生们会使用一组符号代替代码，设计算法来指导“机器人”按照不同的模式堆叠杯子。 学生们将轮流扮演机器人参与活动，只对同伴定义的算法做出响应。 这一部分教会学生们符号与动作之间的联系，算法与程序之间的区别，以及调试的宝贵技能。</td><td>排序</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>  </tr>   <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/7">C.7 - 我的循环机器人朋友初级版</a><br><i>*所需物品：纸杯（4人一组，每组20个杯子）</i><br><small>概述学生们在开始的《我的机器人朋友》活动的基础上，处理更大更复杂的设计。 为了对“机器人”进行编程以完成这些更大的设计，学生们需要在他们的指令中识别出可以用循环代替的重复模式。</td><td>循环</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>  </tr>       <tr>   <td><a href="https://studio.code.org/s/coursec-2021/lessons/11">C.11 - 大事件</a><br><small>学生们很快便会了解到，事件是一个提高预先编写的算法灵活性的极佳方式。 有时，你希望程序能够在用户恰好需要时，向用户发出响应。 事件可以让程序更加有趣，互动性更强。</td><td>事件</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>   </tr>        </tr>      <td><a href="https://studio.code.org/s/coursec-2021/lessons/15">C.15 - 二进制手链</a><br><i>*所需物品：记号笔。 备选物品 – 每个学生18颗黑色珠子/18颗白色珠子，1条尼龙刷</i><br><small>在计算机领域内，二进制极为重要。 今天大多数计算机以二进制形式存储各种信息。 该课程有助于展示计算机如何从现实生活中获取信息，并将其转化为一系列的“开”和“关”。</td><td>二进制</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>  </tr>         <tr>    <th rowspan="3" id="t04">课程 D</th>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/2">D.2 - 方格纸编程<br></a><small>通过相互“编程”画图，学生们有机会以有趣且容易理解的方式体验编程的一些核心概念。 本节课首先让学生们用符号来指导彼此在方格纸上涂上颜色，努力重现已有的图画。 如果时间允许，在课程结束时，汇总学生们独立创作的图画。</td><td>排序</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/4">D.4 - 接力式编程<br></a><small>本活动将首先简短学习调试和耐性，然后迅速进入争分夺秒阶段，学生们分成小组，合作编写程序，一次一条指令。</td><td>排序</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>      </tr>  <tr>    <td><a href="https://studio.code.org/s/coursed-2021/lessons/12">D.12 - 扑克牌条件语句</a><br><small>本节课将演示如何使用条件语句来根据特定信息定制程序。 在编写程序时，我们并不总是万事俱备。 在不同的情况下，需要执行不同的操作，即使不清楚代码运行时哪种情况为“真”。 这就是条件语句用到的场合。 条件语句允许计算机根据代码运行时的“真”信息作出决定。+</td><td>条件语句</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>    </tr>         <tr>    <th rowspan="3" id="t05">课程 E</th>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/7">E.7 - 数字共享</a><br><i>*所需物品：智能手机或平板电脑</i><br><small>本课程源自版权和创意团队，借鉴给计算机科学基础知识课程，旨在帮助学生们了解尊重所有权和版权的挑战和好处，尤其是数字领域内。 鼓励学生们尊重创作人员的权利，这是有道德的数字公民应该具备的重要品质。 </td><td>数字公民</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/11">E.11 - 歌曲创作</a><br><small>在计算机科学中，其中一个最宏大的结构就是函数。 函数（有时称为过程）是可以在大型程序中反复使用的小型程序。 这节课将帮助学生直观地理解为什么将代码模块组合成函数非常实用。</td><td>函数</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>  <tr>    <td><a href="https://studio.code.org/s/coursee-2021/lessons/17">E.17 - 普及性设计</a><br><small>在本节课中，学生们将针对假设的应用，通过头脑风暴和设计可访问的解决方案，来了解普及性和同理心的意义。 </td><td>计算的影响</td><td><img src="/images/e18.png" width="90%"></td>  </tr>    </tr>         <tr>    <th rowspan="3" id="t06">课程 F</th>           <td><a href= "https://studio.code.org/s/coursef-2021/lessons/6">F.6 -空白空间的故事</a><br><i>*所需物品：6个信封（或者：白纸或索引卡，将其对折）</i><br><small>学生们将使用填空故事（类似于Mad Libs®）作为背景，了解计算机如何接收和存储用户的输入信息，及如何在程序运行中使用这些信息。
   </td><td>变量</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>    </tr>        <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - for循环的乐趣</a><br><i>*所需物品：骰子（2-4人为一组，每组3粒骰子）</i><br><small>我们知道，循环可以一遍又一遍地重复操作，但是现在我们要学习如何使用内置了其它结构的循环。 这些新的结构将会便于学生们创建更强大而动态的代码。</td><td>For循环</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://studio.code.org/s/coursef-2021/lessons/19">F.19 - 互联网</a><br><small>尽管很多人每天都在使用互联网，但知道它工作原理的人并不多。 在本节课中，学生们将假装在互联网上穿流，同时学习网络连接、URL、IP地址和DNS。</td><td>数据</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td>  </tr>
</table>

<p style="clear:both"></p>

***
## 其他的不插电课程

以下课程按概念显示，可以在计算机科学基础知识的早期课程版本中找到。 借鉴这些课程时，你可以考虑查看其他资源，包括：
* [2019 课程 A-F 大纲指南](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 课程 A-F 所需物品清单](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 课程亚马逊清单](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 课程 A-F 大纲指南](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 课程 A-F 大纲指南（第2版）](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [课程 1-4 大纲指南](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF 闪卡](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;    
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>概念</th>    <th width=65%><center><big>教案<br><small>教案中包括其他资源（幻灯片、视频、参考答案等等）。
</th>     <th><center><big>资源</th>     <tr>    <th rowspan="2" id=t07 width=5%>数字公民</th>    <td><a href="https://curriculum.code.org/csf-19/coursef/18">众包</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>  </tr>  <tr>      <td colspan="2">*Common Sense Education开设<a href="https://www.commonsense.org/education/digital-citizenship/curriculum">全面的数字公民课程</a>，其中包括诸多不插电活动。</td>    <tr>    <th id=t07>二进制</th>        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">二进制图像</a><br><small>*所需物品：备选 - 向学生们展示对立项的分组。 尽管许多人认为二进制严格地说是0和1，但学生们将认识到信息可以用各种二进制方式来表示。 这节课将更进一步深化这个概念，因为它阐述了计算机如何以二进制形式存储更复杂的信息（如图像和颜色）。</td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td> </tr>    <tr>    <th id=t07>循环</th>        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">我的循环机器人朋友</a><br><small>在本节课中，学生们通过使用《我的机器人朋友》中的语言“编程”他们的朋友，学习循环的简洁性和实用性。 一旦引入循环，学生们就会发现他们可以更快地构造更大的结构。
</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td>  </tr>     <th rowspan="2" id=t07>函数</th>    <td><a href="https://code.org/curriculum/course3/4/Teacher">函数捕光挂件</a><br><small>在本节课中，学生们将使用绳子、珠子和特殊的吊坠制作一个捕光挂件。 学生们将完成一系列的重复步骤，然后按要求确定某些重复多次的“技能”集。 技能集一旦确定后，便从主程序中被调用，将整个精心创作的流程记录在一张白纸上。 向全班学生展示最终的程序，无论使用哪种类型的绳子、珠子和吊坠。 为了有效地达到目标，学生们将需要对特定物品的细节做出“抽象化”的处理，对特定物品创作模糊的术语。 通用占位符的使用是介绍变量的绝佳方式。</td> <td><a href="https://youtu.be/d1MdyeXy0v0">课程视频</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">参考实战课程</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">活动参考答案<a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">评估参考答案</a></td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">使用参数进行歌曲创作</a><br><small>在计算机科学中，其中一个最宏大的结构就是函数。 函数（有时称为过程）是可以在大型程序中反复使用的小型程序。 这节课将帮助学生们直观地理解为什么将代码模块组合成函数非常实用，以及在代码模块变动时他们如何使用这些结构。
</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td>  </tr>     <th rowspan="6" id=t07>算法</th>    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">玩骰子</a><br><small>在本节课中，学生们将通过玩骰子游戏，将算法的概念与现实生活中的活动联系起来。 本节课的目标是开始培养将现实生活中的情形转换为在线场景的技能，或反向转化。
</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursee/1">我的机器人朋友</a><br><small>学生们将使用预定义的符号键，弄清楚如何在不使用任何口头指令的情况下，指导彼此完成特定任务。 这一部分教会学生们符号与动作之间的联系，算法与程序之间的区别，以及调试的宝贵技能。</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">现实生活中的算法：纸飞机</a><br><small>在本节课中，学生们将会把算法的概念与日常活动联系起来。 在讨论算法之后，学生们将使用一种算法制作纸飞机。 本节课的目标是开始培养将现实生活中的情形转换为在线场景的技能，或反向转化。</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">现实生活中的算法：播种</a><br><small>在本节课中，学生们将播种一粒真实的种子，将算法的概念与现实生活中的日常活动联系起来。 本节课的目标是开始培养将现实生活中的情形转换为在线场景的技能，或反向转化。</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">七巧板</a><br><small>这节课向我们展示一些算法相关的重要知识。 只要保持算法简洁，那么它的用途将会多种多样。 但是，如果想确保每个人都得到相同的结果，那么算法需要注意更多的细节。 学生们将在玩七巧板的同时学习详细算法和一般算法的区别。</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td>  </tr>  </tr>    <tr>  </tr>    </tr>     <th id=t07 rowspan="4">计算思维</th>        <tr>        <td><a href="https://code.org/curriculum/course3/1/Teacher">计算思维</a><br><small>本活动无任何说明。 相反，学生们将借鉴想象中的玩家的操作示例，来弄清楚如何玩游戏。 本节课将为学生们提供机会，供大家在团结协作的活动中练习计算思维的四大核心（分解、模式匹配、抽象化和算法）。</td> <td><a href="https://youtu.be/TlAaklrolA0">课程视频</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">参考实战课程</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">活动参考答案</a></td>        </tr>        <td><a href="https://studio.code.org/unplugged/unplug2.pdf">使用怪兽练习计算思维</a><br><small>只需要白纸和记号笔，学生们即可练习计算思维的四个步骤。 简短介绍后，学生们将分成小组，相互设计路线，画出特定的怪兽（从预先选定的怪兽目录中选一个）。 须对整个任务进行分解，然后小组将分析目录中所有怪兽的模式，从中提取相似的细节，然后使用该信息为另一个小组创建算法（路线），供他们绘制某个怪兽。 然后小组之间互换算法，根据给出的算法绘制怪兽。 绘制图案是否符合设计小组的预期？</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">未发现的漏洞</a><br><small>本节课将指导学生们遵循调试步骤。 学生们将学会调试箴言“发生了什么？ 本该发生什么？ 这说明了什么？” </td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td>  </tr>    </tr>     <th rowspan="2" id=t07>坚持</th>  <td><a href="https://curriculum.code.org/csf-18/coursec/1/">打好基础</a><br><small>新问题和未解决的问题通常非常棘手。 如果我们寻求机会来设计出有创意、实用且巧妙的东西，那么我们就需要有攻克棘手问题的意愿，即使多次失败也不会放弃。 在本节课中，学生们将利用常用材料搭建一个结构。 该结构将接受测试，查看是否能够支撑课本达10秒以上。 大多数学生第一次都不会成功，但是重要的是，坚持不懈，持续尝试。</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td>  </tr>  <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/2/">史蒂夫和大项目</a><br><small>当学生们在回答问题或做项目时遇到了障碍，他们很容易感到沮丧，甚至放弃。 本节课将向学生们介绍挫折感是学习的重要部分。 挫折感是创新过程中的一个步骤，并不预示着失败。 本课程可以为一节课或分成两节课完成。 如果时间允许，可随意绘制《滚珠轨道》活动中的路线结构和修改部分。</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td>  </tr>     <th id=t07>抽象</th>    <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>抽象化是计算机科学家需要理解的一项重要技能。 该技能可以简化问题并避免不必要的重复。 优秀的程序员几乎在每次编程时都会使用抽象化的方法。 本活动将使学生们分析故事中的差异，以便进行抽象化处理。 抽象化的故事将成为有趣且疯狂的新故事的模板。</td> <td><a href="https://youtu.be/TctGRrUdkcc">课程视频</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">活动参考答案</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">评估参考答案</a></td>  </tr>
<tr>   <th id=t07>变量</th>     <td><a href="https://curriculum.code.org/csf-20/coursef/7/">包络变量</a><br><i>*所需物品：信封（2-4人为一组，每组1-4个信封）</i><br><small>变量是用作数值（如数字或单词）占位符的符号。 变量为编程提供了很大的自由度。 计算机科学家可以使用变量来引用它们，而不必多次输入一个短语或记住一个模糊的数字。 本节课有助于解释什么是变量，以及我们如何以多种不同的方式来使用。 变量不是一个很容易掌握的概念，因此我们建议在课程结束前留出足够的时间进行讨论。</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td></tr>
</table>


<p style="clear:both"></p>

