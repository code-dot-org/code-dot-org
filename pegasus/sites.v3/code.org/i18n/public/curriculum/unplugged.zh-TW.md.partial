---
title: 不插電版電腦科學基礎知識
video_player: true
theme: responsive
---

# 不插電版電腦科學基礎知識

我們匯總了一份所有不插電課程的清單，以備課堂使用。 現在你可以教授電腦科學的基礎知識，無論教室中是否配有電腦！
<br>
<div class="col-50">
我們將這類不需要學生們在電腦上操作的課程稱為「不插電版」。 學生們通常借助紙筆或實體操作工具動手練習。  課程中有特意佈置的觸感傳覺設定，便於學生們透過與自身生活相關的方式理解複雜的概念。 <br><br>
不插電課程對於構建和維持協作型課堂環境尤為實用，這種形式是非常有益的試金石經驗，供你在介紹較為抽象的概念時參考借鑒。 其中的每一個活動都可以單獨使用或與其他相關概念的電腦科學課程搭配使用。
</div>

<div class="col-50" style="text-align:center">
<img src="/images/new-main.jpg" width="90%">
<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;4歲以上，僅提供英語版
</div>

<div style="clear: both;"></div>

***
## Unplugged lessons in CS Fundamentals 2022-23
The following lessons can be found in <a href="https://docs.google.com/document/d/12j5IkeGEWeAmWnZY9krbNSo8oKOKT5nIQGUH5J7Si80/preview" target="_blank" rel="noopener noreferrer">CS Fundamentals 2022-23</a>. <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t01 {
  width: 10%;
  background-color: #ffa400;
}
#t02 {
  width: 10%;
  background-color: #ffb81d;
}
#t03 {
  width: 10%;
  background-color: #b9bf15;
}
#t04 {
  width: 10%;
  background-color: #00adbc;
}
#t05 {
  width: 10%;
  background-color: #0094ca;
}
#t06 {
  width: 10%;
  background-color: #7765a0;
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>Course</th>
    <th><center><big>Lesson Plan</th>
    <th width=10%><center><big>Concept</th>
    <th width=20%><center><big>Video</th>
     <tr>
    <th rowspan="3" id="t01">Course A</th>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/3">A.3 - Happy Maps</a><br><small>This unplugged lesson brings together teams with a simple task: get the "flurb" to the fruit. 學生們將練習書寫精確指令，並將指令轉為所提供的符號。 If problems arise in the code, students should also work together to recognize bugs and build solutions.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/coursea_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/7">A.7 - Happy Loops</a><br><small>This activity revisits Happy Maps. This time, student will be solving bigger, longer puzzles with their code, leading them to see utility in structures that let them write longer code in an easier way.</td><td>Loops</td> <td><img src="/images/a7.png" width="90%"></td>
  <tr>
    <td width=40%><a href="https://studio.code.org/s/coursea-2022/lessons/11">A.11 - The Big Event Jr.</a><br><small>Events are a great way to add variety to a pre-written algorithm. 有時，你希望程式能夠在使用者恰好需要時，向使用者發出回應。 That is what events are for.</td><td>Events</td> <td>{{ curriculum/unplugged/coursea_three_video_thumbnail }}</td>
  </tr>
       <tr>
    <th rowspan="3" id="t02">Course B</th>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/2">B.2 - Move It, Move It</a><br><small>This lesson will work to prepare students mentally for the coding exercises that they will encounter over the length of this course. In small teams, students will use physical activity to program their classmates to step carefully from place to place until a goal is achieved.</td><td>Sequencing</td> <td>{{ curriculum/unplugged/courseb_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/6">B.6 - Getting Loopy</a><br><small>As we start to write longer and more interesting programs, our code often contains a lot of repetition. In this lesson, students will learn about how loops can be used to more easily communicate instructions that have a lot of repetition by looking at the repeated patterns of movement in a dance.</td><td>Loops</td> <td>{{ curriculum/unplugged/courseb_two_video_thumbnail }}</td>
  <tr>
    <td><a href="https://studio.code.org/s/courseb-2022/lessons/10">B.10 - The Right App</a><br><small>This lesson has students recognize that computer science can help people in real life. 首先，學生們需要設身處地了解幾位元虛擬的智慧手機用戶，幫助他們找到滿足自身需求的「適宜的應用」。 Then, students exercise empathy and creativity to sketch their own smartphone app that addresses the needs of one additional user.</td><td>Impacts of Computing</td> <td><img src="/images/b10.png" width="90%"></td>
  </tr>
       <tr>
    <th rowspan="4" id="t03">Course C</th>
    <td><a href="https://studio.code.org/s/coursec-2022/lessons/2">C.2 - My Robotic Friends Jr.</a><br><i>*Supplies: Plastic cups (10/group of 2-3)</i><br><small>Using a set of symbols in place of code, students will design algorithms to instruct a "robot" to stack cups in different patterns. 學生們將輪流扮演機器人參與活動，只對同伴定義的演算法做出響應。 This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursec_one_video_thumbnail }}</td>
  </tr>
  <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/7">C.7 - My Loopy Robotic Friend Jr</a><br><i>*Supplies: Paper cups (20/group of 4)</i><br><small>Overview
Building on the initial "My Robotic Friends" activity, students tackle larger and more complicated designs. In order to program their "robots" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.</td><td>Loops</td><td>{{ curriculum/unplugged/coursec_three_video_thumbnail }}</td>
  </tr>
      <tr>
   <td><a href="https://studio.code.org/s/coursec-2022/lessons/11">C.11 - The Big Event</a><br><small>Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. 有時，你希望程式能夠在使用者恰好需要時，向使用者發出回應。 Events can make your program more interesting and interactive.</td><td>Events</td><td>{{ curriculum/unplugged/coursec_four_video_thumbnail }}</td>
   </tr>
       </tr>
     <td><a href="https://studio.code.org/s/coursec-2022/lessons/15">C.15 - Binary Bracelets</a><br><i>*Supplies: Markers. 備選物品 – 每個學生18顆黑色珠子/18顆白色珠子，1條尼龍刷</i><br><small>在電腦領域內，二進位極為重要。 今天大多數電腦以二進位形式存儲各種資訊。 This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs.</td><td>Binary</td><td>{{ curriculum/unplugged/coursec_two_video_thumbnail }}</td>
  </tr>
         <tr>
    <th rowspan="3" id="t04">Course D</th>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/2">D.2 - Graph Paper Programming<br></a><small>By "programming" one another to draw pictures, students get an opportunity to experience some of the core concepts of programming in a fun and accessible way. 本節課首先讓學生們用符號來指導彼此在方格紙上塗上顏色，努力重現已有的圖畫。 If there’s time, the lesson can conclude with images that the students create themselves.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_one_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/4">D.4 - Relay Programming<br></a><small>This activity will begin with a short lesson on debugging and persistence, then will quickly move to a race against the clock as students break into teams and work together to write a program one instruction at a time.</td><td>Sequencing</td><td>{{ curriculum/unplugged/coursed_two_video_thumbnail }}</td>
      </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursed-2022/lessons/12">D.12 - Conditionals with Cards</a><br><small>This lesson demonstrates how conditionals can be used to tailor a program to specific information. 在編寫程式時，我們並不總是萬事俱備。 在不同的情況下，需要執行不同的操作，即使不清楚代碼運行時哪種情況為「真」。 這就是條件陳述式用到的場合。 Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.+</td><td>Conditionals</td><td>{{ curriculum/unplugged/coursed_three_video_thumbnail }}</td>

  </tr>
  <tr>
    <th rowspan="3" id="t05">Course E</th>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/9">E.9 - Songwriting</a><br><small>One of the most magnificent structures in the computer science world is the function. 函數（有時稱為過程）是可以在大型程式中反復使用的小型程式。 This lesson will help students intuitively understand why combining chunks of code into functions can be such a helpful practice.</td><td>Functions</td><td>{{ curriculum/unplugged/coursee_two_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/15">E.15 - Designing for Accessibility</a><br><small>In this lesson, students will learn about accessibility and the value of empathy through brainstorming and designing accessible solutions for hypothetical apps.</td><td>Impacts of Computing</td><td><img src="/images/e18.png" width="90%"></td>
  <tr>
    <td><a href="https://studio.code.org/s/coursee-2022/lessons/16">E.16 - Digital Sharing</a><br><i>*Supplies: Smartphone or tablet</i><br><small>Loaned to Computer Science Fundamentals by the team over at Copyright and Creativity, this lesson exists to help students understand the challenges and beneﬁts of respecting ownership and copyright, particularly in digital environments. Students should be encouraged to respect artists’ rights as an important part of being an ethical digital citizen.</td><td>Digital Citizenship</td><td>{{ curriculum/unplugged/coursee_one_video_thumbnail }}</td>
  </tr>
    </tr>
         <tr>
    <th rowspan="3" id="t06">Course F</th>
           <td><a href= "https://studio.code.org/s/coursef-2022/lessons/6">F.6 -Blank Space Stories</a><br><i>*Supplies: 6 envelopes(also suitable:paper or index cards,folded in half)</i><br><small>Students will use fill-in-the-blank stories (similar to Mad Libs®) as a context for understanding how computers take and store input from a user, then use it later as a program runs.
   </td><td>Variables</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td>
  </tr>
        <tr>
    <td><a href="https://studio.code.org/s/coursef-2021/lessons/13">F.13 - For Loop Fun</a><br><i>*Supplies: Dice (3 dice/group of 2-4)</i><br><small>We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic.</td><td>For Loops</td><td>{{ curriculum/unplugged/coursef_three_video_thumbnail }}</td>
  </tr>
  <tr>
    <td><a href="https://studio.code.org/s/coursef-2022/lessons/15">F.15 - The Internet</a><br><small>Even though many people use the internet daily, not very many know how it works. 在本節課中，學生們將假裝在互聯網上穿流，同時學習網路連接、URL、IP位址和DNS。</td><td>數據</td><td>{{ curriculum/unplugged/coursef_two_video_thumbnail }}</td>  </tr>
</table>

<p style="clear:both"></p>

***
## 其他的不插電課程

以下課程按概念顯示，可以在電腦科學基礎知識的早期課程版本中找到。 借鑒這些課程時，你可以考慮查看其他資源，包括：
* [2019 課程 A-F 大綱指南](https://docs.google.com/document/d/1UqCgO06NzB1L6y83fnwnUcYdKr3MooJAaUZajj48DnI/preview) | [2019 課程 A-F 所需物品清單](https://docs.google.com/document/d/e/2PACX-1vRLQiHVgq1oIXytilpBZDoeEn2_JcIN__r600AbUKTSGkQDaydXAGKpmUu1J7mTVBEkh9ZOnGcBDQQt/pub) | [2019 課程亞馬遜清單](https://www.amazon.com/ideas/amzn1.account.AFRP6N2PQKQ73HHEN6SJNS5ONHEA)
* [2018 課程 A-F 大綱指南](https://code.org/curriculum/docs/csf/CSF_Curriculum_Guide_2018_smaller.pdf)
* [2017 課程 A-F 大綱指南（第2版）](https://code.org/curriculum/docs/csf/CSF_TeacherGuide_CoursesA-F_v2a_small.pdf)
* [課程 1-4 大綱指南](http://code.org/curriculum/docs/k-5/complete_compressed.pdf)
* [CSF 閃卡](https://code.org/curriculum/docs/k-5/flashCards.pdf) <br><br>

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
#t07 {
  width: 10%;
  background-color: #c6cacd;
  color: #000000
}
</style>
<table style="width:100%">
  <tr>
    <th><center><big>概念</th>    <th width=65%><center><big>教案<br><small>教案中包括其他資源（幻燈片、視頻、參考答案等等）。
</th>
    <th><center><big>Resources</th>
     <tr>
    <th rowspan="2" id=t07 width=5%>Digital Citizenship</th>
    <td><a href="https://curriculum.code.org/csf-19/coursef/18">Crowdsourcing</a></td> <td>{{ curriculum/unplugged/archive_one_video_thumbnail }}</td>
  </tr>
  <tr>
      <td colspan="2">*Common Sense Education has a <a href="https://www.commonsense.org/education/digital-citizenship/curriculum">full Digital Citizenship Curriculum</a> that includes many unplugged activities.</td>
    <tr>
    <th id=t07>Binary</th>
        <td><a href="https://curriculum.code.org/csf-20/coursed/16/">Binary Images </a><br><small>*Supplies:Optional - Groupings of opposite items to display to students. 儘管許多人認為二進位嚴格地說是0和1，但學生們將認識到資訊可以用各種二進位方式來表示。 這節課將更進一步深化這個概念，因為它闡述了電腦如何以二進位形式存儲更複雜的資訊（如圖像和顏色）。</td><td>{{ curriculum/unplugged/coursed_four_video_thumbnail }}</td>
 </tr>
    <tr>
    <th id=t07>迴圈</th>
        <td><a href="https://curriculum.code.org/csf-18/coursee/6/">我的迴圈機器人朋友</a><br><small>在本節課中，學生們透過使用《我的機器人朋友》中的語言「程式設計」他們的朋友，學習迴圈的簡潔性和實用性。 一旦引入迴圈，學生們就會發現他們可以更快地構造更大的結構。
</td> <td>{{ curriculum/unplugged/archive_two_video_thumbnail }}</td>  </tr>     <th rowspan="2" id=t07>函數</th>    <td><a href="https://code.org/curriculum/course3/4/Teacher">函數捕光掛件</a><br><small>在本節課中，學生們將使用繩子、珠子和特殊的吊墜製作一個捕光掛件。 學生們將完成一系列的重複步驟，然後按要求確定某些重複多次的「技能」集。  技能集一旦確定後，便從主程序中被調用，將整個精心創作的流程記錄在一張白紙上。 向全班學生展示最終的程式，無論使用哪種類型的繩子、珠子和吊墜。 為了有效地達到目標，學生們將需要對特定物品的細節做出「抽象化」的處理，對特定物品創作模糊的術語。 通用預留位置的使用是介紹變數的絕佳方式。</td> <td><a href="https://youtu.be/d1MdyeXy0v0">課程視頻</a><br><a href="https://www.youtube.com/watch?v=Rb5DNYhLb7I">參考實戰課程</a><br><a href="https://www.code.org/curriculum/course3/4/Key-Activity4-FunctionalSuncatchers.pdf">活動參考答案<a href="https://www.code.org/curriculum/course3/4/Key-Assessment4-FunctionalSkills.pdf">評估參考答案</a></td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/21/">使用參數進行歌曲創作</a><br><small>在電腦科學中，其中一個最宏大的結構就是函數。 函數（有時稱為過程）是可以在大型程式中反復使用的小型程式。 這節課將幫助學生們直觀地理解為什麼將代碼模組組合成函數非常實用，以及在代碼模組變動時他們如何使用這些結構。
</td> <td>{{ curriculum/unplugged/archive_three_video_thumbnail }}</td>
  </tr>
     <th rowspan="6" id=t07>演算法</th>
    <td><a href="https://curriculum.code.org/csf-1718/coursee/10/">玩骰子</a><br><small>在本節課中，學生們將透過玩骰子遊戲，將演算法的概念與現實生活中的活動聯繫起來。 本節課的目標是開始培養將現實生活中的情形轉換為線上場景的技能，或反向轉化。
</td> <td>{{ curriculum/unplugged/archive_four_video_thumbnail }}</td>  </tr>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursee/1">我的機器人朋友</a><br><small>學生們將使用預定義的符號鍵，弄清楚如何在不使用任何口頭指令的情況下，指導彼此完成特定任務。 這一部分教會學生們符號與動作之間的聯繫，演算法與程式之間的區別，以及調試的寶貴技能。</td> <td>{{ curriculum/unplugged/archive_five_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursec/4/">現實生活中的演算法：紙飛機</a><br><small>在本節課中，學生們將會把演算法的概念與日常活動聯繫起來。 在討論演算法之後，學生們將使用一種演算法製作紙飛機。 本節課的目標是開始培養將現實生活中的情形轉換為線上場景的技能，或反向轉化。</td> <td>{{ curriculum/unplugged/archive_six_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/3/">現實生活中的演算法：播種</a><br><small>在本節課中，學生們將播種一粒真實的種子，將演算法的概念與現實生活中的日常活動聯繫起來。 本節課的目標是開始培養將現實生活中的情形轉換為線上場景的技能，或反向轉化。</td> <td>{{ curriculum/unplugged/archive_seven_video_thumbnail }}</td>  </tr>    <tr>    <td><a href="https://curriculum.code.org/csf-1718/coursef/10/">七巧板</a><br><small>這節課向我們展示一些演算法相關的重要知識。 只要保持演算法簡潔，那麼它的用途將會多種多樣。 但是，如果想確保每個人都得到相同的結果，那麼演算法需要注意更多的細節。 學生們將在玩七巧板的同時學習詳細演算法和一般演算法的區別。</td> <td>{{ curriculum/unplugged/archive_eight_video_thumbnail }}</td>  </tr>  </tr>    <tr>  </tr>    </tr>     <th id=t07 rowspan="4">計算思維</th>        <tr>        <td><a href="https://code.org/curriculum/course3/1/Teacher">計算思維</a><br><small>本活動無任何說明。 相反，學生們將借鑒想像中的玩家的操作示例，來弄清楚如何玩遊戲。 本節課將為學生們提供機會，供大家在團結協作的活動中練習計算思維的四大核心（分解、模式匹配、抽象化和演算法）。</td> <td><a href="https://youtu.be/TlAaklrolA0">課程視頻</a><br><a href="https://www.youtube.com/watch?v=b4a7Ty1TpKU">參考實戰課程</a><br><a href="https://www.code.org/curriculum/course3/1/Key-Activity1-ComputationalThinking.pdf">活動參考答案</a></td>        </tr>        <td><a href="https://studio.code.org/unplugged/unplug2.pdf">使用怪獸練習計算思維</a><br><small>只需要白紙和記號筆，學生們即可練習計算思維的四個步驟。 簡短介紹後，學生們將分成小組，相互設計路線，畫出特定的怪獸（從預先選定的怪獸目錄中選一個）。 須對整個任務進行分解，然後小組將分析目錄中所有怪獸的模式，從中提取相似的細節，然後使用該資訊為另一個小組創建演算法（路線），供他們繪製某個怪獸。 然後小組之間互換演算法，根據給出的演算法繪製怪獸。 繪製圖案是否符合設計小組的預期？</td> <td>{{ curriculum/unplugged/archive_nine_video_thumbnail }}</td>  <tr>    <td><a href="https://curriculum.code.org/csf-18/coursea/1/">未發現的漏洞</a><br><small>本節課將指導學生們遵循調試步驟。 學生們將學會調試箴言「發生了什麼？ 本該發生什麼？ 這說明了什麼？」 </td> <td>{{ curriculum/unplugged/archive_ten_video_thumbnail }}</td>  </tr>    </tr>     <th rowspan="2" id=t07>堅持</th>  <td><a href="https://curriculum.code.org/csf-18/coursec/1/">打好基礎</a><br><small>新問題和未解決的問題通常非常棘手。 如果我們尋求機會來設計出有創意、實用且巧妙的東西，那麼我們就需要有攻克棘手問題的意願，即使多次失敗也不會放棄。 在本節課中，學生們將利用常用材料搭建一個結構。 該結構將接受測試，查看是否能夠支撐課本達10秒以上。 大多數學生第一次都不會成功，但是重要的是，堅持不懈，持續嘗試。</td> <td>{{ curriculum/unplugged/archive_eleven_video_thumbnail }}</td>  </tr>  <tr> <td><a href="https://curriculum.code.org/csf-18/coursea/2/">史蒂夫和大項目</a><br><small>當學生們在回答問題或做專案時遇到了障礙，他們很容易感到沮喪，甚至放棄。 本節課將向學生們介紹挫折感是學習的重要部分。 挫折感是創新過程中的一個步驟，並不預示著失敗。 本課程可以為一節課或分成兩節課完成。 如果時間允許，可隨意繪製《滾珠軌道》活動中的路線結構和修改部分。</td> <td>{{ curriculum/unplugged/archive_twelve_video_thumbnail }}</td>  </tr>     <th id=t07>抽象</th>    <td><a href="https://code.org/curriculum/course4/5/Teacher">Mad Glibs</a><br><small>抽象化是電腦科學家需要理解的一項重要技能。 該技能可以簡化問題並避免不必要的重複。 優秀的程式師幾乎在每次程式設計時都會使用抽象化的方法。 本活動將使學生們分析故事中的差異，以便進行抽象化處理。 抽象化的故事將成為有趣且瘋狂的新故事的範本。</td> <td><a href="https://youtu.be/TctGRrUdkcc">課程視頻</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Activity5-MadGlibs.pdf">活動參考答案</a><br><a href="https://www.code.org/curriculum/course4/5/Key-Assessment5-MadGlibs.pdf">評估參考答案</a></td>  </tr>
<tr>   <th id=t07>變數</th>     <td><a href="https://curriculum.code.org/csf-20/coursef/7/">包絡變數</a><br><i>*所需物品：信封（2-4人為一組，每組1-4個信封）</i><br><small>變數是用作數值（如數字或單詞）預留位置的符號。 變數為程式設計提供了很大的自由度。 電腦科學家可以使用變數來引用它們，而不必多次輸入一個短語或記住一個模糊的數字。 本節課有助於解釋什麼是變數，以及我們如何以多種不同的方式來使用。 變數不是一個很容易掌握的概念，因此我們建議在課程結束前留出足夠的時間進行討論。</td><td>{{ curriculum/unplugged/coursef_one_video_thumbnail }}</td></tr>
</table>


<p style="clear:both"></p>

