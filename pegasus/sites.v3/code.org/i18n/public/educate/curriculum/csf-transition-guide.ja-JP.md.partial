---
title: コンピューターサイエンス基礎コース・トランジションガイド
theme: responsive
style_min: true
---

# 教育コース A - F

## 目次

* [概要](#overview)
* [新しいコースを教える](#newcourses)
* [サークル タイム ストーリー (コース A と B)](#circletime)
* [レッスンの足場組み（scaffolding） & チャレンジ パズル (全年齢対象)](#scaffolding)
* [アンプラグド レッスンのためのブリッジング活動 (全年齢対象)](#unplugged)
* [コース修了プロジェクト (コース E & F)](#endofcourse)
* [まとめ](#conclusion)
* [よくある質問](#faq)

<a id="overview"></a>

## 概要
当初のコンピューターサイエンス基礎コース創設以降、コンピューターサイエンスの教育の状況は大きく変わりました。 コース 1-4 は、当初学びに来られた生徒の年齢に関係なく、基礎を習得するためのスターティングポイントとして考案されました。  今では多くの地区、都市、州で、幼稚園から始まるコンピューターサイエンスコースが施行され、中学校・高校に至るまで、教師は生徒のために、より多くの教育内容を求めています。

その問題に対する私たちの答えは、コンピューターサイエンス基礎コース A - F にあります。  学年毎のカリキュラム作成は、資料の提示のしかたを立ち返り考え直すきっかけとなりました。  それにより、心をこめて私たちをサポートする熱心な先生達が集まるコミュニティからのフィードバックを組み込むこともできました。 コース A-F は、全国の最高の小学校 CS 教育専門家のサポートを受け、余計な専門能力開発を取り入れることなく親しみやすいように考案されており、また、以前私たちのレッスンを受けた生徒に提示しても十分に新鮮に感じられるようになっています。

* コース A: 幼稚園
* コース B: 1年生
* コース C: 2 年生
* コース D: 3 年生
* コース E: 4 年生
* コース F: 5 年生
* プレ リーダー特急コース: 幼稚園 - 1 年生
* 特急コース: 2 年生 - 5 年生

CS 基礎の最大のアップデートは、4 つのコース (コース 1-4) から 6つの コースから K-5 グレード に合わせたレベル (コース A ~ F) にコンテンツが移動することです。  そのためレッスンは、読書、数学、および全体的な認知発達の適切なレベルに合わせたものになります。  2 つの異なる「エクスプレス」コースがあることに注意してください。ひとつはプレリーダーのためで、もうひとつは他の学年のためのものです。  これらは以前のスイートの「加速」バージョンに似ています。

<a id="newcourses"></a>

## 新しいコースを教える
先に述べた通り、当コースは馴染みやすく感じますが、異なる点があります。  Code.orgの専門的能力開発ワークショップに参加したことがあれば、新しいコースを教える準備が整っているのです。 わずかに変更部分はありますが、プラットフォーム、カリキュラム、教育理念は全体的に変更はありません。 まだ参加していない方は、Code.org では、1日間無料のワークショップが体験でき、カリキュラムの理解方法、Code.orgプラットフォームのナビゲート方法、アンプラグド レッスンの指導法が習得できるようサポートします。

コースの主な更新は次のとおりです：

* 幼い学習者用のサークルタイムのストーリー
* 足場組み（scaffolding）と実践/適用のコンセプトへの新たなアプローチ
* アンプラグド・レッスンからプラグド・レッスンへの移行を強化するためのブリッジングング活動
* 年長の生徒のためのコース修了プロジェクト

このガイドの残り内容については、それぞれのアイデアをより詳細に提示し、教室の改革を実行に移すヒントやコツについて掲載しています。

<a id="circletime"></a>

## サークル タイム ストーリー (コース A と B)
コンセプトの中には、幼い生徒にとって、活動やパズルだけでは教えるのが難しいものもあります。  これが、幼稚園や小学校の1年生のカリキュラムでわずかなサークルタイムのストーリーを導入した理由です。 これらのストーリーは、デバッグ、パーシステンス、フラストレーションなどの重要なアイディアについて話し合う過程の中で、教師がクラスで読み上げることを目的としています。  私たちが願うことは、生徒がストーリーのキャラクターを通してこれらの難しいコンセプトを体験できることで、これからのレッスンでは同じコンセプトを認識できるようになることです。

サークルタイムストーリーの使用方法は次のとおりです。

### あなたのクラスに適したストーリーを読んであげてください
  - 活動中、有用な時に質問やコメントして理解しているか確認してください。
  - その後、ストーリーについて話し合います。 生徒が何を聞いていましたか？ 生徒の気を引くアイディアはありますか？
  - 生徒にキャラクターと自分を重ね合わせてもらってください。  ストーリーの登場人物の1人を思い出させるような彼らの人生の中で生きてくる何かがありますか？

### 次の活動を始める前に、生徒にストーリーについて思い出させてください。
  - 私たちが話し合った主なアイディアをあなたは覚えていますか？
  - 今日そのアイディアを理解しているかどうかをどうすれば把握することができますか？
  - そのアイディアを操っているキャラクターはどのようなことをしましたか？ あなたならどうしますか？

### 活動中に交わる時、ストーリーと生徒との間のシチュエーションの類似点を挙げてください。
  - 生徒の立場が、本の中のシチュエーションといかに類似しているかを生徒に説明してください。
  - 生徒にキャラクターについて考えるように指示し、そのキャラクターがどう行動するかを考えさせてください。  それは生徒が次のステップを理解するのに役立ちますか？

クラス全体をまとめることができない場合、Code.orgは該当するレッスンの始めに、ビデオのオプションを使って、少しアニメーションを取り入れたストーリーを展開させてきました。 これらのビデオではまったく同じ体験を流すわけではありません。コースの残りの時間に進む前に、コンセプトとキャラクターに触れることができます。

<a id="scaffolding"></a>

## レッスンの足場組み（scaffolding） & チャレンジ パズル (全年齢対象)
コース A～Fは、以前のコースより全体的に足場組み（scaffolding）が少なくなっています。  つまり、特にデバッグすることを学んでいない場合、生徒が最初からできるだけ頻繁にコードを作成するように努めます。  この考案の一貫として、ほとんどのオンラインレッスンでは、レッスンの開始時は簡単なパズルを提示し、生徒がアイディアを把握し、定着するまで徐々に新しいコンセプトを導入して演習を行います。  次に、チャレンジパズルを提示します。これは生徒たちにコンセプトを新しい複雑な方法で考えさせることを目的としています。

チャレンジパズルはコースA〜Fで新しくなりました。  チャレンジパズルの目的は、生徒が粘り強さと自立した思考へと鍛錬することができるよう、超難易度の問題にチャレンジさせることです。  チャレンジパズルは意図的に難易度が高くしており、コンセプトを本当に理解している生徒のみが程よい時期に合格できるように考案されています。  つまり、最初はかなりの数の生徒が成功できません。 これには、生徒と教師の双方が距離を取る特別な態度が必要です。

1. 生徒はこれらのチャレンジパズルに取り組んでみて、それから一旦置いて、そしてまた続きをやります。  その演習によって、非常に重要なことが２つ起こります：
2. 生徒は、勉強しているコンセプトをいつどのように用いるかについて理解を深めます。 次のパズルはそれ自体は難しいパズルですが、チャレンジ後には簡単に感じられます。

生徒はいつでもレッスンを受けることができ、未完成のままのパズルに再チャレンジできます。  難問に再チャレンジする前に、十分な睡眠を釣ることが非常に有用な場合があります。

生徒はチャレンジを終えると、ステージの前半で体験したものと類似した演習を何問かすることになります。 これらのパズルは、学習しているテーマに関して生徒の明確さをテストするために意図的に導入しています。  前に体験したパズルを考えると、これらは簡単すぎるように思えるかもしれませんが、同じステージで望まれる正確な能力レベルを実証するために作成されました。

場合によっては、自由活動スタイルのレベルでレッスンを終了します。  これらのレベルでは、答えに「間違い」がないかもしれないし、あるいは中核となる問題を解決するためにいくつかの異なる方法をやっても構わないことになっているかもしれません。  たとえ生徒ができるとしても、ただ単に[続行] をクリックするだけでなく、ベストを尽くすように促してださい。

このエリアに関するいくつかの最終メモ：

* 難しいと感じる問題に対しては、生徒に粘り強く取り組ませ、デバッグ（誤りを見つけ手直しをする）スキルを使用するように指導してください。
* ビデオを使うと役に立つことが多いです。  生徒が行き詰まった時には、2回目、3回目、さらには4回目でも動画を視聴してもらってください。
* 生徒に説明書を読ませるようにしてください。  生徒が苦戦しているときには、説明書を読んであげてください。
* ヒントを使っても大丈夫です！  生徒は必要なだけのヒントを使用しなければなりませんが、新しいパズルを提供されるまでに必ず少なくとも1問はパズルを解決してください。

<a id="unplugged"></a>

## アンプラグド レッスンのためのブリッジング活動 (全年齢対象)
アンプラグド活動は、生徒がすでに日常生活で重要なCSのコンセプトをいかに使用しているかについて注目している点で生徒に合っています。  生徒はループ文や条件文などの基本的なアイデアを特定できれば、プログラミングオンラインで初めてそれらを使用しようとしたときに起こり得る思考の停止（mental block) を克服できます。

アンプラグド体験は非常に重要ですので、私たちはさらに一歩踏み込んで、アンプラグド・レッスンをオンラインレッスンに橋渡しするブリッジング活動を取り入れることを決意しました。  コースA〜Fでは、レッスンプランの中に、オフライン演習の実施方法や、レッスンを次のオンラインパズル一式に移行させる方法例が含まれています。  これらについては、「ブリッジングング活動」といいます。

大抵の場合、アンプラグド演習の課題に取り組み、それを紙のブロックリー・ブロックで実行することで、あるいはオンラインパズルに取り組み、アンプラグド演習で言語を使用して解決することで、ブリッジング活動を実践しています。  場合によっては、違う関連のものを導入しますが、例題の全てが、オフライン体験が過度に抽象的または関連の全くないものにならないように考案されています。

<a id="endofcourse"></a>

## コース修了プロジェクト (コース E & F)
年長の生徒用に、私たちはコースE & Fで、充実したコース終了プロジェクトを導入しました。Code.orgでは「プロジェクト」を構築する能力をかなり前から提供してきましたが、生徒が正式な内容でプロジェクトを計画および実行できるようにするには、本当に必要な視点を取り入れなければならないと思いました。

もちろん、プロジェクトの終わりは比較的簡単です。  4〜5週間にわたって、生徒はプロジェクトのアイデアをレビューし、その応用を計画し、プログラムをコード化し、フィードバックに基づいて修正し（5年生）、完成した作業を提示します。  これらの各ステップでは、役立つ資料や全体像を強調する教師のレッスン計画が手引きとなっています。

**復習：</ strong>生徒は、これまでに学んだスキルを使って実行できる驚くべきことを紹介するために作成された、いくつかの意欲的なプロジェクトを見ていきます。  これらのプロジェクトはPlay LabまたはArtistのいずれかで作成されていますが、生徒がTynker、Scratch、または教師が適切と判断した場合はテキストベースの言語のプロジェクトも自由にレビューできます。</p>

**計画：**ここでの目的は、生徒が実際に何ができるかをじっくりと腰を据えて考えることです。  生徒は彼らが見たゲームと、それらを編集するときに直面した制限について考える必要があります。  その後、彼らは唯一無二なものを作成するためにあらましの計画を立てます。  生徒は、ビジョンを実現するための時間とリソースが限られているため、現実に留まるように注意する必要がある場合があります。  ここの資料は、ArtistまたはPlay Labの使用を前提としていますが、プロジェクトは、特定の教室ごとに機能するプラットフォームに移動できます。

**作成：**紙に描いた計画を実行するのに1日では足りません。  生徒は、次から次への壁にぶつかりながら物事をうまくやっていこうとするとき、難しい選択に直面します。  彼らはバグを編集、適応し、プログラムの制限によって、限られた時間の中で快適に達成できるという彼らの認識を変えていきます。

**修正：**年長の生徒の場合、クラスメートのフィードバックに基づいてプログラムを修正する1日は、最終的なものに修正するのに役立ち、彼らが達成したことで、他の人に刺激を与えることができます。  生徒は発展的な評論方法や、グループの中でのブレーンストーミング（集団の中で意見を出し合うこと）を練習し、粘り強さを身に付けます。

**現在：**制作中1か月近く、これは生徒たちが立ち上がって自分の進歩を誇りに思う機会です。  私たちの授業計画は口頭発表を前提としていますが、教師は代わりに書面またはマルチメディアプレゼンテーションを提案することもできます。

生徒が自分のプロジェクトに打ち込めばそれだけコンピュータサイエンスの創造性と問題解決のプロセスについて役立つことを学ぶことができます。

<a id="conclusion"></a>

## まとめ
ご覧のとおり、コンピュータサイエンスの基礎コースA~Fには、コンピュータサイエンスの基礎を教える教師と世話人コミュニティの意見を参考にしたエキサイティングなenhancementsが含まれています。

この概要が参考になれば幸いです。  この変更について質問やコメントがある場合は、http：//forum.code.org/c/csfにアクセスしてフォーラムに投稿してください。  弊社は、皆さんのご質問にできるだけ早く答えられるように努めております。  それまでは、コースAFに関するよくある質問をいくつか紹介します。

<a id="faq"></a>

## よくある質問

| 質問                                                                      | 回答                                                                                                                                                                                                                  |
| ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **新しい一連のコースを開始します。つまり、コース1〜4が廃止されるということですか。**                           | 番号。 コース1〜4を生徒/子供が必要とする体験をよりよく表現していると感じる人のために、弊社オリジナルの20時間コースが弊社のウェブサイトで引き続き利用できますし、弊社ではこれを保持していく予定です。                                                                                                               |
| **いつコースA～Fを利用できるようになりますか？**                                             | コースA～Fは今すぐご利用になれます！                                                                                                                                                                                                 |
| **私のお気に入りのレッスン/パズルのいくつかがコースA～Fにはありません！**                                | 何も怖くない！ コース1〜4または加速20時間コースでそれらを残した場所にまだ存在します。                                                                                                                                                                       |
| **そのパズルは、非常に難しいように思えます。  私の子供たちには難しすぎるのではないかと心配しています。**                 | 学生が自ら考え、問題を解決し、粘り強さを鍛えてもらいたいという願望がこの新コースの骨格となっています。  パズルがあまりにも簡単に完成していまう場合、やる必要はありません。  というわけで、パズルの難易度を高めることにしました。  これらのスキルを高めるためにクラスをリードする方法については、教師用ガイドを参照してください。  オンラインパズルに夢中になる前に、アンプラグド・レッスンの重要性を決して侮らないでください。 |
| **パズルの中には、指定のブロック数しか使用できないものもあります。  生徒がループを理解するはるか前にコード化したい場合はどうしますか？** | 指定ブロックを制限するパズルがいくつかあります。 これは、足場の新しい足場組み（scaffolding）の1つです。  それは、作業場内でピースに足場を組みすぎることなく、方向性を与える方法です。  困惑する前にパズルをコーディングするのが好きな学生（そして実際、すべての学生が常に）は、キーボードの横にジャーナルやメモ用紙を置いて、アルゴリズムをなんらかの方法で理解できると便利です。最も自然に来る。           |

