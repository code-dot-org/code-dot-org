- hoc_launch = DCDO.get('hoc_launch', nil)
- census_announcement = DCDO.get('census_announcement', nil)
- hoc_mode = DCDO.get('hoc_mode', nil)

-# Whether we show a HOC launch background
- show_hoc_launch_layout = hoc_launch && hoc_launch["homepage"]

-# Non-en users get mc instead of applab/celebs
- if show_hoc_launch_layout
  - hoc_launch_hero_variation = hoc_launch["homepage"]
  - if ["applab", "celebs"].include?(hoc_launch_hero_variation) && request.language != "en"
    - hoc_launch_hero_variation = "mc"

-# Whether we show non-rotating background image and center options on desktop.
- show_census_layout = request.language == "en"

-# Whether we have a special announcement to also show.
- show_census_announcement = census_announcement && census_announcement['homepage_text'] && census_announcement['homepage_subtext'] && request.language == "en"

- census_announcement_hero = [{"id":99,"id_s":"hero_census_announcement","type_s":"widehero","text1_s":"homepage_hero_text_stat_students","param1_s":"50% 30%","param2_s":"stat","param3_s":"bottom","param4_s":nil,"param5_s":nil,"watermark_s":nil,"image_t":"/images/homepage/announcement.jpg","site_s":"both","active_s":"show","language_supported_s":"all"}]

- hoc_launch_hero = {}

-# Temporary for mc 2017 hoc tutorial launch page
- hoc_launch_hero["mc"] = [{"id":99,"id_s":"mchoc2017","type_s":"widehero","text1_s":"homepage_hero_text_stat_students","param1_s":"50% 30%","param2_s":"stat","param3_s":"bottom","param4_s":nil,"param5_s":nil,"watermark_s":nil,"image_t":"/images/homepage/mchoc2017.jpg","site_s":"both","active_s":"show","language_supported_s":"all"}]

-# Temporary for applab 2017 hoc tutorial launch page
- hoc_launch_hero["applab"] = [{"id":99,"id_s":"applab2017","type_s":"widehero","text1_s":"homepage_hero_text_stat_students","param1_s":"50% 30%","param2_s":"stat","param3_s":"bottom","param4_s":nil,"param5_s":nil,"watermark_s":nil,"image_t":"/images/homepage/applab_hoc2017.jpg","site_s":"both","active_s":"show","language_supported_s":"all"}]

-# Temporary for celebs 2017 launch page: mostly unused but needs an entry.
- hoc_launch_hero["celebs"] = [{"param1_s":"50% 30%"}]

-# hoc_launch_hero["celebs"] = [{"id":99,"id_s":"mchoc2017","type_s":"widehero","text1_s":"homepage_hero_text_stat_students","param1_s":"50% 30%","param2_s":"stat","param3_s":"bottom","param4_s":nil,"param5_s":nil,"watermark_s":nil,"image_t":"/images/homepage/celebs_hoc2017_3.jpg","site_s":"both","active_s":"show","language_supported_s":"all"}]

- actions = DB[:cdo_homepage].where(type_s: "action", active_s: ["show","hide"], site_s: [request.site,"both"], language_supported_s: ["all", languageFilter]).all

-# Temporary for mc 2017 hoc tutorial launch page
- if show_hoc_launch_layout && hoc_launch_hero_variation == "mc"
  .desktop-feature
    %img{src: "/images/fit-300/mc/MC_Logo_Large.png", style: "position: absolute; width: 300px; left: 20px; top: 237px;"}
  .mobile-feature{style: "width: 100%; text-align: center; "}
    %img{src: "/images/fit-300/mc/MC_Logo_Large.png", style: "position: absolute; width: 300px; top: 237px; margin-left: auto; margin-right: auto; left: 0; right: 0;"}

  -# Since we're up to real Hour of Code, non-en users should see actual-hoc actions
  - if request.language != "en"
    - actions = [{param1_s: "cta_button", text1_s: "get_started", param2_s: "/learn"}]

-# Temporary for applab 2017 hoc tutorial launch page
- if show_hoc_launch_layout && hoc_launch_hero_variation == "applab"
  .desktop-feature
    %img{src: "/images/homepage/fit-300/applab_hoc2017_logo.png", style: "position: absolute; width: 300px; right: 60px; top: 237px;"}
  .mobile-feature{style: "width: 100%; text-align: center; "}
    %img{src: "/images/homepage/fit-300/applab_hoc2017_logo.png", style: "position: absolute; width: 300px; top: 237px; margin-left: auto; margin-right: auto; left: 0; right: 0;"}

  - actions = [{param1_s: "cta_button", text1_s: "homepage_action_text_join_us", param2_s: "https://hourofcode.com/#join"}, {param1_s: "cta_button_secondary", text1_s: "homepage_action_text_try_it", param2_s: "/hourofcode/overview"}]

-# Temporary for celebs 2017 launch page
- if show_hoc_launch_layout && hoc_launch_hero_variation == "celebs"
  .mobile-feature{style: "width: 100%; text-align: center; "}
    %img{src: "/images/homepage/fit-300/celebs_hoc2017_logo.png", style: "position: absolute; width: 250px; top: 137px; margin-left: auto; margin-right: auto; left: 0; right: 0;"}

  - actions = [{param1_s: "cta_button", text1_s: "get_started", param2_s: "/learn"}, {param1_s: "cta_button_secondary", text1_s: "homepage_action_text_wincelebritychat", param2_s: "/challenge"}]

- main_actions = capture_haml do
  -# Temporary heading text for the Hour of Code
  - if request.language == "en"
    - if show_hoc_launch_layout && hoc_launch_hero_variation == "celebs" && hoc_mode == 'actual-hoc'
      = I18n.t(:homepage_hero_hoc_is_here)
    - else
      = I18n.t(:homepage_hero_hoc_is_coming)
  - elsif show_hoc_launch_layout && hoc_launch_hero_variation == "mc"
    -# Now that Hour of Code is here, we want to show non-en users a heading
    = I18n.t(:homepage_action_text_hoc)
    %br/
    %br/

  - actions.each_with_index do |entry, index|
    - display = entry[:active_s] == "hide" ? "none" : "block"
    .action
      - if entry[:param1_s] == "hoc_title"
        #title= I18n.t(entry[:text1_s])
      - elsif entry[:param1_s] == "num_served"
        #subtitle.students-served= I18n.t(entry[:text1_s]).gsub("#", format_integer_with_commas(fetch_hoc_metrics['started']).to_s)
      - elsif entry[:param1_s] == "hoc_buttons"
        .buttongroup
          %a{href: "/learn"}
            %button.herohocbutton= I18n.t(entry[:param2_s])
        %div{style: "clear: both;"}
      - elsif entry[:param1_s] == "cta_button"
        .buttongroup{style: "margin-bottom: 15px"}
          %a{href: entry[:param2_s]}
            %button.herohocbutton{style: "min-width: 230px; margin-right: 0px"}= I18n.t(entry[:text1_s])
        %div{style: "clear: both;"}
      - elsif entry[:param1_s] == "cta_button_secondary"
        .buttongroup{style: "margin-bottom: 15px"}
          %a{href: entry[:param2_s]}
            %button.herohocbutton{style: "min-width: 230px; margin-right: 0px; background-color: transparent; border-color: white; border-width: 2px; margin-top: 0px"}= I18n.t(entry[:text1_s])
        %div{style: "clear: both;"}
      - elsif entry[:param1_s] == "video"
        %button{style: "min-width: 230px; margin-top: 0px; background-color: transparent; border-color: white; border-width: 2px"}
          %span#playtext{onclick: "return showVideo_mainvideo();", style: "font-size: 18px;"}= I18n.t(entry[:text1_s])

  - if show_census_announcement
    %br/
    %br/
    - unless census_announcement['homepage_text'].nil_or_empty?
      .bigheading{style: "font-size: 20px; line-height: 1.2em; font-family: 'Gotham 7r', sans-serif;"}
        = census_announcement['homepage_text']
    .subheading{style: "padding-top: 0px; font-size: 18px;"}
      -# Temporary for celebs 2017 launch page: narrow text
      - if show_hoc_launch_layout && hoc_launch_hero_variation == "celebs"
        .subheadingtext{style: "width: 230px; display: inline-block"}
          = census_announcement['homepage_subtext']
      - else
        = census_announcement['homepage_subtext']

    %a{href: "/yourschool"}
      %button{style: "min-width: 230px; font-size: 18px; margin-top: 15px; background-color: transparent; border-color: white; border-width: 2px"}
        See how

#hero
  -# Generate a random set of hero images alternating between non-celeb and celeb.
  - heroes = DB[:cdo_homepage].where(type_s: "widehero", active_s: ["show","hide"], site_s: [request.site,"both"], language_supported_s: ["all", languageFilter]).all
  - hero_display_time = 13 * 1000

  - if rack_env != :production && request.params["preview"]
    -# on non-production, special "?preview=true" flag shows all heroes, and more quickly, for easier previewing
    - heroes_arranged = heroes
    - hero_display_time = 6 * 1000
  - elsif rack_env != :production && request.params["lock-hero"]
    -# for UI tests just lock to the first hero image
    - heroes_arranged = heroes[0, 1]
  - elsif show_hoc_launch_layout
    - heroes_arranged = hoc_launch_hero[hoc_launch_hero_variation]
  - elsif show_census_layout
    - heroes_arranged = census_announcement_hero
  - else
    -#
      The order alternates person & stat.  Person alternates non-celeb and
      celeb.  Non-celeb is student or teacher. We open with a celeb, i.e.,
      celeb, stat, non-celeb, stat, celeb, stat, non-celeb, stat, celeb, stat,
      etc.
    - heroes.shuffle!
    - heroes_nonceleb = heroes.select {|hero| ["student", "teacher"].include? hero[:param2_s]}
    - heroes_celeb = heroes.select {|hero| hero[:param2_s] == "celeb"}
    - heroes_stat = heroes.select {|hero| hero[:param2_s] == "stat"}
    - if heroes_stat.length > 0
      - heroes_arranged = heroes_stat.zip(heroes_nonceleb.zip(heroes_celeb).flatten).flatten.compact.first(6)
    - else
      - heroes_arranged = heroes_nonceleb.zip(heroes_celeb).flatten.compact.first(6)
    - heroes_celeba = heroes.select {|hero| hero[:param2_s] == "celeba"}
    - if heroes_celeba.length > 0
      - heroes_celeba.shuffle!
      - heroes_arranged.unshift(heroes_celeba.first)

  - newsbanner = DB[:cdo_homepage].where(type_s: "banner", active_s: ["show","hide"], site_s: [request.site,"both"], language_supported_s: ["all", languageFilter]).first
  - if newsbanner
    #newsbanner
      .container_responsive
        != I18n.t(newsbanner[:text1_s])
        %a{href: newsbanner[:param2_s], target: "_blank"}
          = I18n.t(newsbanner[:param1_s])

  - heroes_arranged.each_with_index do |entry, index|
    -# note: this gsheet display parameter unused due to IE8 fix.
    - display = entry[:active_s] == "hide" ? "none" : "block"
    -# Preload the first hero image to render immediately, lazy-load the rest to conserve bandwidth.
    - if index == 0
      - if show_hoc_launch_layout && hoc_launch_hero_variation == "celebs"
        - response.add_header 'Link', "</images/homepage/celebs_hoc2017_mobile_1x.jpg>; rel=preload; as=image; media=\"#{css_retina?(false)}\";"
        - response.add_header 'Link', "</images/homepage/celebs_hoc2017_desktop_1x.jpg>; rel=preload; as=image; media=\"#{css_retina?}\";"
        .widehero_do_not_hide.mobile-feature{style: "background-image: url(\"/images/homepage/celebs_hoc2017_mobile_1x.jpg\"); background-position: #{entry[:param1_s]}; z-index: -5"}
        .widehero_do_not_hide.desktop-feature{style: "background-image: url(\"/images/homepage/celebs_hoc2017_desktop_1x.jpg\"); background-position: #{entry[:param1_s]}; z-index: -5"}

      - else
        -#
          Use Link rel=preload HTTP headers to preload as early as possible.
          Two headers with inverse media queries conditionally load the correctly-sized image.
        - response.add_header 'Link', "<#{entry[:image_t]}>; rel=preload; as=image; media=\"#{css_retina?(false)}\";"
        - response.add_header 'Link', "<#{entry[:image_t].gsub('.jpg', '_2x.jpg')}>; rel=preload; as=image; media=\"#{css_retina?}\";"
        .widehero#fullwidth0{style: "background-position: #{entry[:param1_s]}; background-image: url(#{entry[:image_t]});"}
    - else
      .widehero.lazyload{id: "fullwidth#{index}", "data-bg"=> "#{entry[:image_t]}", style: "background-position: #{entry[:param1_s]}"}

  #fullwidth
    - if request.site == 'code.org'
      = view :header2
    - else
      #desktop-header.desktop-feature
        = view :header
      #mobile-header.mobile-headers.mobile-feature
        = view :mobile_header_responsive

  #caption_container.container_responsive
    - if show_census_layout || show_hoc_launch_layout
      .bigannounce{style: "padding: 20px; text-align: center"}
        #actions
          = main_actions
    - else
      .col-66.desktop-feature{style: "position:relative;"}
        - heroes_arranged.each_with_index do |entry, index|
          -# note: this gsheet display parameter unused due to IE8 fix.
          - display = entry[:active_s] == "hide" ? "none" : "block"
          - unless entry[:text1_s].nil_or_empty? || show_census_layout
            - text = I18n.t(entry[:text1_s])

            -# Replace special tags
            - text.gsub!("#student_count", format_integer_with_commas(fetch_user_metrics['number_students']))
            - text.gsub!("#served", format_integer_with_commas(fetch_hoc_metrics['started']))
            - text.gsub!("#loc", format_integer_with_commas(fetch_metrics['lines_of_code']))

            - unless text.nil_or_empty?
              - lines = text.lines
              - if entry[:param3_s] == "bottom"
                - position_class = "homepage-caption-bottom"
              .captionarea{id: "captionarea#{index}", class: position_class}
                -# Nokogiri::HTML is use to strip any HTML tags.
                -# Some translated quotes we were using had <b> tags and some broken <b/> tags.
                .caption.caption1{style: "left: 50px; top: 50px"}
                  = Nokogiri::HTML(lines[0])
                .caption.caption2{style: "left: 30px; top: 95px"}
                  = Nokogiri::HTML(lines[1])
                .caption.caption3.smallcaption{style: "left: 40px; top: 140px"}
                  = Nokogiri::HTML(lines[2])

        &nbsp;

        -# Maintains a large empty chunk so that the hero image remains large and visible at all browser sizes.
        #blankspaceleftdesktop.desktop-feature

      #actions.col-33
        = main_actions

      #blankspaceleftmobile.mobile-feature

  .clear{style: "clear: both"}

:javascript
  // Swap in 2x versions of the hero image URLs for retina displays.
  if (window.matchMedia('#{css_retina?}').matches) {
    Array.prototype.forEach.call(document.querySelectorAll('#hero .widehero'), function(item) {
      if (item.dataset.bg) {
        item.dataset.bg = item.dataset.bg.replace(".jpg", "_2x.jpg");
      }
      if (item.style['background-image']) {
        item.style['background-image'] = item.style['background-image'].replace(".jpg", "_2x.jpg");
      }
    });
  }

  var petition;

  $(document).ready(function() {
    // For IE8, can't start with opacity in the HTML, so we made things display: none.  Now we show them but
    // set opacity to 0, ready for code to start showing them by fading them in.
    $(".caption").css({display: "block", opacity: 0});

    showQuote(null, 0);
  });

  function showQuote(lastImage, nextImage)
  {
    if (lastImage !== null)
    {
      var lastImageId = "#captionarea" + lastImage;
      //console.log("hiding", lastImageId);
      $(lastImageId + " .captionspecial").animate({left: "50px", opacity:0}, { duration: 2000 });
      $(lastImageId + " .caption1").animate({left: "50px", opacity:0}, { duration: 2000 });
      $(lastImageId + " .caption2").animate({left: "30px", opacity:0}, { duration: 2000 });
      $(lastImageId + " .caption3").animate({opacity:0}, { duration: 2000 });
    }

    if (nextImageId !== null)
    {
      var nextImageId = "#captionarea" + nextImage;
      //console.log("showing", nextImageId);
      $(nextImageId + " .captionspecial").delay(1500).animate({ left: "0px", opacity: 0.8 }, { duration: 2000 });
      $(nextImageId + " .caption1").delay(1500).animate({ left: "0px", opacity: 0.8 }, { duration: 2000 });
      $(nextImageId + " .caption2").delay(2000).animate({ left: "60px", opacity: 0.8 }, { duration: 2000 });
      $(nextImageId + " .caption3").delay(4500).animate({ opacity: 0.6 }, { duration: 2000 });
    }
  }

  function adjustScroll(destination)
  {
    $('html, body').animate({
      scrollTop: $("#" + destination).offset().top
    }, 1000);
  }

  var currentImage = 0;
  var timerId;
  var videoStarted = false;

  function cycleImage()
  {
    var numWideHeroes = $(".widehero").length;

    var lastImage = currentImage;
    var nextImage = (currentImage + 1) % numWideHeroes;
    $("#fullwidth" + currentImage).fadeTo(4000, 0);
    $("#fullwidth" + nextImage).fadeTo(4000, videoStarted ? 0.3 : 1);
    currentImage = nextImage;

    showQuote(lastImage, currentImage);
  }

  $(document).ready(function() {
    var numWideHeroes = $(".widehero").length;

    if (numWideHeroes > 1) {
      timerId = setInterval(cycleImage, #{hero_display_time});
    }
  });
