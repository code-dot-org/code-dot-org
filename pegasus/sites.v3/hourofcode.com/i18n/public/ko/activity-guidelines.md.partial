---
title: 튜토리얼 가이드라인
layout: wide
---

<style>
  ul {
    margin: 0px 20px 20px 20px;
  }
</style>

# Guidelines for creating and submitting tutorials and lessons for Hour of Code™ and Computer Science Education Week

Code.org hosts a variety of Hour of Code™ activities, lessons, and videos on the Code.org, Hour of Code, and CSEdWeek website(s). The current list is at [hourofcode.com/learn]({{ urls/learn }}).

Want to submit your own self-guided tutorial, teacher-led lesson, or robotics/maker activity that explains a computer science principle? Join this global movement and help participants around the world get started with an hour of code or go further with multi-lesson, day-long, or week-long activities.

**After reading the guidelines, you can submit your activity through our [Hour of Code™ Activity Submission page](https://forms.gle/L1hjArNnGSMJPzyE8). You can submit an activity at any time, but the deadline for inclusion in any given calendar year is October 1. (For example, any activities received after October 1, {{ campaign_date/year }} will not be listed for {{ campaign_date/year }}'s Hour of Code.) The deadline to submit for an early qualitative review [(details below)](#earlyreview) is August 16.** If you have any questions about your activitiy submission, please reach out to us at support@code.org.

A few tips:

1. **Submit more than one activity**: If you’ve built activities for different levels, different ages, or other categories, we list your activities separately so each teacher can find the right thing for their classroom. Submit each tutorial or activity individually. Given the number of submissions we have seen in recent years, we will have time to review **up to 5 activities** per partner. After that, we will make a best effort to review as many as possible before Hour of Code begins.

2. **Beyond beginner lessons**: In addition to lessons for teachers and students who are learning computer science for the first time, we list learning experiences for computer science-savvy classrooms that want to go a little bit further! Help us by submitting lessons for classes that are already comfortable with the basics.

3. **Subject areas**: Have a great lesson idea that integrates Computer Science into Math? 역사? 언어? 과학? 아트? 또는 다른 과목은? We’ve had numerous requests from teachers who want to connect the Hour of Code to their subject area. Teachers can filter for their classroom type (grade band or subject area) so we need your help filling in gaps to offer classroom activities or lesson plans that relate CS to every major subject area for different grade bands. We also continue to have a “Computer Science” category for teachers who are looking for generic CS activities.

<a id="top"></a>

## 인덱스:

- [제출 사항](#whatsubmit)
- [Hour of Code™ 활동을 만들기 위한 일반 가이드라인](#guidelines)
- [제출 방법](#submit)
- [활동 평가 방식](#inclusion)
- [Guidelines for submitting for an early qualitative review NEW](#earlyreview)
- [Suggestions for designing your activity](#design)
- [상표 가이드라인](#tm)
- [트랙킹 픽셀](#pixel)
- [활동과 CSEdWeek, 아워오브코드 홍보](#promote)

<a id="whatsubmit"></a>

## 제출 사항

**자기 주도 퍼즐 또는 게임 ([example](https://code.org/dance))**

이러한 활동은 튜토리얼을 통해 스스로 학습하도록 설계되었습니다. 교사의 지도 또는 교사의 준비 작업이 많이 요구되지 않습니다.

**교사 주도 레슨 ([예](https://studio.code.org/s/course1/stage/2/puzzle/1), [템플릿](https://docs.google.com/document/d/1DhaLNd6uim9rRPkHrglnOvVcgzGc8axKIzv8YI56JGA))**

Now that tens of thousands of educators have tried the Hour of Code, many classrooms are ready for more creative activities that teach the basics of computer science. To help more advanced teachers find inspiration, we collect and curate "teacher-led" lessons and activity plans for Hour of Code veterans.

One type of activity that we will feature for experienced teachers are “open sandbox” creation projects. Activities that encourage students to build their own app, game, website or other project. If facilitated properly, more open-ended activities can better showcase the creative nature of computer science.

Some educators may also prefer to host Hour of Code activities that follow a traditional lesson format rather than a guided-puzzle/game experience.

You can start with this [template](https://docs.google.com/document/d/1DhaLNd6uim9rRPkHrglnOvVcgzGc8axKIzv8YI56JGA) for your lesson plan.

**Activities for teachers in other subjects/fields**

We also feature lesson plans designed for different subject areas. For example, a one-hour lesson plan for teaching code in a geometry class. Or a mad-lib exercise for English class. Or a creative quiz-creation activity for history class. These can help recruit teachers in other subject areas to guide an Hour of Code activity that is unique to their field, while demonstrating how CS can influence and enhance many different subject areas.

Examples:

- Mirror Images (an activity for an art teacher)
- An arduino activity for a physics teacher
- A history of technology activity for a history teacher
- And see [this list](https://docs.google.com/document/d/19jQ2VhBUyIn30VFbfdHOVpmlymhNiB0AkEqRxHz3dr0/edit) for more ideas from educators (or add your own to the list to inspire others)

**For students with special needs**

If you create an activity or tutorial that is designed for special needs students, please call that out in the description. In particular, there are very few options for the vision-impaired. If your activity is designed for this audience, please let us know.

[**맨 위로**](#top)

<a id="guidelines"></a>

## General guidelines for creating an Hour of Code activity

The goal of an Hour of Code is to give beginners an accessible first taste of computer science or programming. The tone should be that:

- Anybody can learn computer science - regardless of age, gender, race, or ability/disability. 
- Computer science is connected to a wide variety of fields and interests. Everybody should learn it!
- Encourage students to create something unique that can be shared with parents/friends or online. 

The activities should teach a computer science concept such as loops, conditionals, encryption, or how the Internet works. An activity can also teach about how computer science connects to real world occupations, events, or history. For example, teaching UX design to make apps that are meaningful for an audience or cause. 개념 보다 프로그래밍의 구문에 초점을 두는 활동은 지양합니다. For example, we will list, but not highlight, activities that teach HTML. Similarly, we discourage block programming lessons that focus on setting/changing configuration options rather than learning how to model an algorithm or process.

*Technical requirements:* Because of the wide variety of school and classroom technology setups, the best activities are Web-based or smartphone-friendly, or otherwise unplugged-style activities that teach computer science concepts without the use of a computer (see <http://csunplugged.com/>). Activities that require an app-install, desktop app, or game-console experiences are okay but not ideal. We will not list activities that require sign up or payment. (Robotics activities can require robotics purchase.)

*Student-led (Self-Guided) Format:* The original Hour of Code was built mostly on the success of self-guided tutorials or lessons, optionally facilitated by the teacher. There are plenty of existing options, but if you want to create a new one, these activities should be designed so they can be fun for a student working alone, or in a classroom whose teacher has minimal prep or CS background. They should provide directions for students as opposed to an open-ended hour-long challenge. Ideally, the instructions and tutorials are integrated directly into the programming platform, to avoid switching tabs or windows between the tutorial and the programming platform.

To get a sense of the wide variety of types of tutorials and lesson plans you can create, visit the [Hour of Code Activities page](https://hourofcode.com/us/learn).

[**맨 위로**](#top)

<a id="submit"></a>

## 제출 방법

[Hour of Code™ 활동 제출 페이지](https://forms.gle/L1hjArNnGSMJPzyE8)를 방문하여 질문 문항을 모두 작성하고 활동을 제출하세요.

필요한 사항:

* 제출된 활동을 대표하는 일차 연락 담당자의 이름과 이메일
* 활동명 (명칭에 “아워오브코드”를 넣을 수 없음)
* 활동에 링크되는 URL
* 활동 설명(최대 400자) 
    * 학생 자기주도적인지 또는 교사 지도형인지에 설명에 포함시켜 주세요. Additionally, some schools are interested in knowing if Hour of Code activities address Common Core or Next Generation Science Standards. If the activity addresses specific standards, consider including this information.
* Recommended grade level(s) for intended users. You may refer to the \[Computer Science Teachers’ Association’s K-12 Standards\] (https://k12cs.org/framework-statements-by-grade-band/) for grade-appropriate computer science concepts. Example grade levels include: 
    * 유치원생 -1학년 (4-6세)
    * 2-5학년 (7-10세)
    * 6-8학년 (11-13세)
    * 9학년 이상 (14세 이상)
* A list of subject areas your activity covers (in addition to Computer Science). For example, if a math teacher can use your activity to teach about angles or parabolas, list as math. If you have a mad libs activity that teaches verbs/nouns/etc. 언어 선택
* A list of programming languages your activity teaches. 예. C/C++, 자바, 자바스크립트 등 or language independent (for lesson plans that can be taught in multiple languages)
* A list of supported natural languages. Note: Language-detection is the responsibility of the activity provider; we will redirect all users to the single URL provided.
* What level of experience should an educator have to use your activity? (e.g. Beginner or Comfortable.) And, what level of experience should the students have? If you’d like to prepare more advanced Hour of Code™ Activities, please include the prior knowledge needed in the description of your activity.
* 활동 길이 
    * 1 시간 만
    * 1 시간과 후속 과정
    * 2-6 시간 (여러 개의 레슨이 될 수 있음)
* A list of accessibility accommodations, if your activity has them. These include screen reader compatibility, text-to-speech capabilities, use of high-contrast colors, or any other accommodations made for learners with disabilities.

#### Additional things you’ll need when submitting Lesson Plans

* 레슨 플랜에 링크. This can be a web page, dropbox link, google drive or similar service. 
* 레슨 플랜을 하기 위해 교사는 어떤 소프트웨어 및/또는 하드웨어가 필요합니까 (스크래치? 로봇? 아무 것도 필요 없음?)

#### 온라인으로 활동 제출 시 필요한 추가적인 일

* 조직의 이름 및 로고
* COPPA 준수 여부
* 교사 노트로 연결되는 URL 링크(선택사항)
* 테스트된/호환되는 플랫폼 목록: 
    * 웹 기반: 직접 테스트한 플랫폼은? 
        * OS - Mac, Win, 기타 버전
        * 브라우져 - IE11, 에지, 파이어폭스, 크롬, 사파리
        * iOS 모바일 사파리 (모바일 최적화)
        * 안드로이드 크롬 (모바일 최적화)
    * 비 웹기반: 네이티브 코드를 위한 플랫폼을 지정해 주세요.(Mac, Win, iOS, 안드로이드, xBox, 등)
    * 언플러그드
* 스크린 샷 또는 아워오브코드 활동의 마케팅 이미지. Please send at least one image with 4:3 dimensions. It should be at least 520px by 390px. This image should have NO text on it (other than your logo), in order to make it more accessible for non-English speakers. If an appropriate image is not provided, we may take our own screenshot of your tutorial OR we may choose not to list it. All images must be submitted as a URL link to a .jpg, .jpeg, or .png.
* In order to more accurately track participation, third party tutorial partners need to include 1-pixel tracking images on the first page of their Hour of Code tutorials. 더 자세한 내용은 아래 [트래킹 픽셀](#pixel) 섹션을 참고하세요.
* 활동이 끝나면, 사용자는[code.org/api/hour/finish](https://code.org/api/hour/finish) 으로 가며 거기서 다음을 할 수 있습니다. 
    * 아워오브코드를 이수했음을 소셜 미디어 상에서 공유
    * 아워오브코드 이수 인증서를 받음
    * 아워오브코드 활동에서 가장 높은 참여율을 나타낸 국가와 시를 리더 보드에서 보기
    * 한 시간 동안 활동을 했지만 완료하지 못한 사용자는 “아워오브코드를 마쳤습니다”라고 말하는 버튼을 활동에 넣고 그 버튼은 [code.org/api/hour/finish](https://code.org/api/hour/finish)로 다시 연결되어 있습니다.
* (선택 사항)다음과 같은 활동 메트릭스로 된 보고서를 요청하는 온라인 설문조사/양식 링크로 팔로우 업할 수 있습니다. 
    * 온라인 활동(특히 스마트폰/태블릿 앱): 
        * 사용자 수
        * 완료한 과제 수
        * 과제 수행 평균 시간
        * 모든 사용자가 작성한 총 코드 라인 수
        * 계속 학습을 이어간 사용자 수(사이트에서 한 과제를 끝낸 후 추가 과제로 넘어간 사람의 수)
    * 오프라인 활동 
        * 종이 버전 활동 다운로드 횟수 (해당되는 경우)

#### 로봇 공학 제출 시 필요한 추가적인 일

* 여러분이 로봇공학 활동을 제출하면, 우리는 로봇공학을 위한 학생 당 비용을 알아야 합니다. 
* 로봇공학 활동을 웹사이트에 포함할지 평가하기 위해, 샘플 키트를 검토자에게 보내야 합니다.

[**맨 위로**](#top)

<a id="inclusion"></a>

## 활동 평가 방식

컴퓨터 과학 교사 위원회는 정성적/정량적 기준에 기초하여 제출된 내용에 순위를 메길 것입니다. 기본 기준에 적합한 모든 활동이 나열될 것입니다. 교사는 학급에 가장 적절한 활동을 찾기 위해 필터링 및 정렬을 할 수 있습니다.

The rubric for evaluating activities and lesson plans will look for the following criteria on all activities and rank them accordingly:

- 높은 생산 품질
- Promote learning by all demographic groups (esp. students underrepresented in CS, like young women, students from marginalized racial and ethnic groups, and students with disabilities)
- Educational (teaches computer science concepts well)
- Fun and engaging
- Encourages students to create something unique they can share (For younger students: with parents and classmates. For olders students: on the Internet)

If the review committee rates the activity a zero in production quality (due to bad bugs or instructions that make it very hard to use), in promoting learning in underrepresented groups (due to racist/sexist material), in educational value (does not teach CS concepts), or fun/engaging (due to being difficult/discouraging for students to work through), the activity will not be listed.

In addition, in order to be listed, all activities must:

- Be appropriate for a public school classroom (no guns, no explicit/mature content, no religious content, etc.)
- Require no sign up 
- Require no payment (exception for robotics activities these can require robot/kit purchase) For self-directed activities for new teachers and students the review committee will be looking for whether:
- Teachers can use the tutorial or activity with no background in computer science
- Students can be successful with no background in computer science
- Students can direct themselves through the tutorial without parental or teacher guidance

Teachers and students will be able to search through and filter our list of activities based on filters such as grade, experience level, subject, hardware, etc. By default, we will show lesson plans and activities first that:

- Receive the highest ratings from the review committee
- Are one hour self-directed activities designed for beginners (students and teachers)
- Appeal to a wide range of users (across platforms, languages, and ages)
- Require no installation
- Are new this year

[**맨 위로**](#top)

<a id="earlyreview"></a>

## Guidelines for submitting for an early qualitative review (NEW)

Any activity submitted between April 30 and August 16 will receive a qualitative review from at least three members of the [Hour of Code Activity Review committee](/review-committee).

Reviewers will focus on providing the following:

* Positive feedback - What's working well?
* Critical feedback - What could be improved?
* 버그 또는 오류 -버그 또는 구문 오류, 문법 오류가 있습니까? If so, where in the activity?
* Does this activity encourage students to create something unique?

Please note: These are the general guidelines for providing feedback. The early review of your activity may include feedback across all of these categories, or it may only include feedback in one or two. There is also **no guarantee that we will catch all bugs or issues in an activity**.

**The early review is not an opportunity to collect feedback on an unfinished activity. Any activity a reviewer deems too incomplete to assess will not be reviewed.**

All activities submitted for early review will receive feedback by September 1st. We will also provide a link to a form you can use to explain specific changes made to an activity in response to feedback.

Every activity submitted before October 1st will receive a standard review, whether it receives an early review or not. During the standard review period (September-October), reviewers will focus on rating the activities according to the criteria described in the "How activities will be evaluated" section above. Unless you note specific changes to an activity, reviewers can and likely will rely on early review feedback to rate activities.

[**맨 위로**](#top)

<a id="design"></a>

## Suggestions for designing one hour self guided tutorials

You can include the [Hour of Code logo](https://hourofcode.com/us/promote/resources#logo) in your tutorial, but this is not required. If you use the Hour of Code logo, see the trademark guidelines below. <u>Under no circumstances can the Code.org logo and name be used.</u> Both are trademarked, and can’t be co-mingled with a 3rd party brand name without express written permission.

**Make sure that the average student can finish comfortably in an hour.** Consider adding an open-ended activity at the end for students who move more quickly through the lesson. Remember that most kids will be absolute beginners to computer science and coding.

**Include teacher notes.** Most activities should be student-directed, but if an activity is facilitated or managed by a teacher, please include clear and simple directions for the teacher in the form of teacher-notes at a separate URL submitted with your activity. Not only are the students novices, some of the teachers are as well. Include info such as:

- What platforms and browsers does the tutorial work best on?
- Does it work on smartphones? Tablets?
- Do you recommend pair programming? 
- Considerations for use in a classroom? E.g. if there are videos, advise teachers to show the videos on a projected screen for the entire classroom to view together

**Incorporate feedback at the end of the activity.** (E.g. “You finished 10 levels and learned about loops! Great job!”)

**Encourage students to post to social media (where appropriate) when they've finished.** For example “I’ve done an Hour of Code with ________ Have you? #HourOfCode” or “I’ve done an #HourOfCode as a part of #CSEdWeek. Have you? @Scratch.” Use the hashtag **#HourOfCode** (with capital letters H, O, C)

**Create your activity in Spanish or in other languages besides English.**

**Explain or connect the activity to a socially significant context.** Computer programming becomes a superpower when students see how it can change the world for the better!

**Make sure your tutorial can be used in a [Pair Programming](http://www.ncwit.org/resources/pair-programming-box-power-collaborative-learning) paradigm.** This is particularly useful for the Hour of Code because many classrooms do not have 1:1 hardware for all students.

[**맨 위로**](#top)

<a id="tm"></a>

## 상표 가이드라인

Many of our tutorial partners have used our trademark "Hour of Code" on their web sites. We don't want to prevent this usage, but we want to make sure usage falls within a few limits:

1. Any reference to "Hour of Code" should be used in a fashion that doesn't suggest that it's your own brand name, but that it rather references the Hour of Code as a grassroots movement. Good example: "Participate in the Hour of Code™ at ACMECorp.com". Bad example: "Try Hour of Code by ACME Corp".
2. Use a "TM" superscript in the most prominent places you mention "Hour of Code", both on your web site and in app descriptions.
3. Include language on the page (or in the the footer), including links to the Hour of Code, CSEdWeek and Code.org web sites, that says the following: a. “The '[Hour of Code](http://hourofcode.com)™' is a nationwide initiative by [Computer Science Education Week](http://csedweek.org) and [Code.org](http://code.org) to introduce millions of students to one hour of computer science and computer programming.”
4. "Hour of Code"를 앱/프로그램 이름으로 사용하지 말아주세요.

[**맨 위로**](#top)

<a id="pixel"></a>

## 트랙킹 픽셀

In order to more accurately track participation we ask every tutorial partner to include a 1-pixel tracking image on the first page of their Hour of Code tutorials. The pixel-image must be on the start page only. Do not include on any interim pages of your tutorial.

This will allow us to count users who do your Hour of Code tutorial. It will lead to more accurate participation counts for your tutorial.

If your tutorial is approved and included on the final tutorial page, Code.org will provide you with a unique tracking pixel for you to integrate into your tutorial. 아래 예 참조.

참고: 설치 가능형 앱 (iOS/안드로이드 앱 또는 데스크톱 설치 앱)에는 별로 중요하지 않습니다.

예 댄스 파티를 위한 트랙킹 픽셀:

IMG SRC = <http://code.org/api/hour/begin_dance.png>   


[**맨 위로**](#top)

<a id="promote"></a>

## Promoting your activities, CSEdWeek, and Hour of Code

Please promote your activity to your network! Direct them to your Hour of Code page. Your users are much more likely to react to a mailing from you about your activity. Use the international Hour of Code campaign during Computer Science Education Week as an excuse to encourage users to invite others to join in, and help us reach more students!

- Feature Hour of Code and CSEdWeek on your website. 예: <http://www.tynker.com/hour-of-code>
- Promote Hour of Code using social media, traditional media, mailing lists, etc, using hashtag #HourOfCode (with capital letters H, O, C)
- Host a local event or ask your employees to host an event at local schools or community groups.
- 더 자세한 정보는[자료 키트](https://hourofcode.com/us/promote)참조.

[**맨 위로**](#top)

{{ signup_button }}