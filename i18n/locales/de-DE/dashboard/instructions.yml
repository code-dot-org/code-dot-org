de:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hallo, ich bin ein Künstler. Wenn du den richtigen Code programmierst, kann ich fast alles zeichnen. Verwende ein paar Bausteine, und lasse mich über die grauen Linien im Bild zeichnen. (Jede Linie ist 100 Pixel lang.)
      2-3 Artist 11_instruction: 'Gib dem Stoppschild einen Rahmen, indem du ein Oktagon mit 8 Seiten, jede 100 Pixel lang, zeichnest. Um wie viel Grad muss gedreht werden? (Hinweis: Was ist 360 geteilt durch 8?) '
      2-3 Artist 12_instruction: Stelle den „Wiederholen“-Baustein so ein, dass es einen „Kreis“ malt, um den Augapfel abzuschließen. Wenn jede Bewegung ein Grad rechts dreht, wie oft musst du wiederholen, um den Kreis zu vervollständigen? 180? 360? 500?
      2-3 Artist 2 new_instruction: 'Dieses Haus hat eine halbfertige Wand. Jede Seite hat 100 Pixel, aber die halbfertige nur 50. Vervollständige die Wand. '
      2-3 Artist 2_instruction: 'Dieses Haus hat eine halb fertige Wand. Jede Seite ist 100 pixel lang, aber die halbfertigen Wand ist nur 50 pixel lang. Beende die Wand. '
      2-3 Artist 3.4_instruction: 'Der Sprung-Block bewegt den Künstler ohne zu zeichnen. Zeichne die gestrichelte Linie mithilfe sowohl des Sprung- als auch des Zeichnen-Blocks.'
      2-3 Artist 3_instruction: Dieser Hut ist 100 Pixel hoch. Zeichne einen Hut, der 70 Pixel kleiner ist.
      2-3 Artist 3new_instruction: Der rote Hut ist 100 Pixel hoch. Zeichne den schwarzen Hut, der 70 Pixel kleiner ist, zu Ende. Die Breite des schwarzen Hutes beträgt 50 Pixel.
      2-3 Artist 4_instruction: Hilf mir, das Haus für diese Katze zu vervollständigen.
      2-3 Artist 5_instruction: Ersetze diesen Code mit einem „Wiederholen“-Block, um das gleiche Haus mit nur 3 Blöcken zu zeichnen.
      2-3 Artist 6_instruction: 'Dieses Haus braucht ein Dach! Zeichne das Dreieck.  Hinweis: alle drei Seiten sind gleich lang.'
      2-3 Artist 7_instruction: Zeichne die rechte Hälfte des letzten Fensters zu Ende. Jedes Quadrat der Fensterscheibe beträgt 25 Pixel.
      2-3 Artist 8_instruction: Beende die Räume für jedes Tier, indem du das Rechteck in 2 gleich große Quadrate aufteilst. Das Rechteck ist 200 Pixel breit und 100 Pixel hoch.
      2-3 Artist 9_instruction: Vervollständige diesen Drachen
      2-3 Artist Assessment 1_instruction: 'Prüfung: Vervollständige den letzten Zahn: 25 Pixel breit und 25 Pixel hoch.'
      2-3 Artist Debugging 1_instruction: Kannst du diesen Hut 100 Pixel hoch zeichnen?
      2-3 Artist Debugging 10_instruction: 'Das Steuerkreuz auf meinem Spiele-Controller ist zu klein. Hinweis:  Mache es 10 Pixel breiter.'
      2-3 Artist Debugging 11_instruction: Hilf mir, meine schöne Schneeflocke zu beenden. Wie oft muss ich es „wiederholen“, um es zu beenden?
      2-3 Artist Debugging 12_instruction: 'Ich soll zu dieser Szene eine Ozeanwelle hinzufügen.  Kannst du mir helfen?'
      2-3 Artist Debugging 2_instruction: 'Der Code für die drei Schnurrhaare, die du siehst, ist falsch. Hinweis: Jedes Schnurrhaar ist 75 Pixel lang. Verbessere diesen Code, um die Schnurrhaare zu zeichnen.'
      2-3 Artist Debugging 3_instruction: 'Mein Boot hat ein Loch! Kannst du es stopfen, indem du den Winkel der Linie änderst? Hinweis: Der letzte Winkel weicht um 15 Grad ab.'
      2-3 Artist Debugging 4_instruction: Was ist das für ein Bild, das wir versuchen zu zeichnen? Beende es, indem du die Punkte mit den richtigen Linien und Winkeln verbindest.
      2-3 Artist Debugging 5_instruction: 'Der Code für das Bein und den Fuß, den du siehst, ist falsch. Hinweis:  Der Fuß ist zu lang, wir müssen möglicherweise einen Schritt (Wortspiel beabsichtigt) löschen.'
      2-3 Artist Debugging 6_instruction: Es sieht so aus, als ob ich auf einem Stuhl sitze, dem ein Bein fehlt. Bearbeite die Blöcke, um das Bein zu zeichnen.
      2-3 Artist Debugging 7_instruction: Es sieht aus als ob C in Code spiegelverkehrt ist. Kannst du es wie ein C aussehen lassen?
      2-3 Artist Debugging 8_instruction: Mein Windrad ist noch nicht fertig. Wie oft muss ich es „wiederholen“, um es zu beenden?
      2-3 Artist Debugging 9_instruction: 'Der Code für diesen Stiel ist falsch. Hinweis:  Der Winkel weicht um 60 Grad ab.'
      2-3 Artist Debugging Assessment 1_instruction: 'Diese Form ist zu klein. Kannst du sie größer machen? Hinweis: Sie sollte auf jeder Seite 75 Pixel länger sein.'
      2-3 Artist Free Play_instruction: Freies Spiel! Zeichne was du willst.
      2-3 Artist Functions 1_instruction: 'Hallo. Ich Zombie-Künstler. Ich zeichnen liebe! Hilf mir, die quadratischen Gläser zu zeichnen.  Hinweis: Die Brücke zwischen den Gläsern ist 25 Pixel kürzer als die Länge der Quadrate.'
      2-3 Artist Functions 10_instruction: Hier sind zwei Funktionen, um ein großes und ein kleines Zahnrad zu zeichnen. Verwende sie, um das Innere einer Maschine zu zeichnen!
      2-3 Artist Functions 11.5_instruction: Hier ist die gleiche „Zeichne ein Sechseck“-Funktion. Was passiert, wenn du bei jeder Wiederholung nur um 60 Grad drehst?
      2-3 Artist Functions 11_instruction: Wir haben die Funktion „zeichne ein Quadrat“ in „zeichne ein Sechseck“ umbenannt, aber sie zeichnet immer noch nur Quadrate! Kannst du die Funktion „zeichne ein Sechseck“ so ändern, dass sie ein Sechseck mit 50 Pixel Seiten zeichnet, und das Bild mithilfe dieser Funktion zeichnen?
      2-3 Artist Functions 12_instruction: 'Funktionen sind für das mehrfache Zeichnen von komplexen Dingen wirklich toll. Kannst du die Funktion „zeichne eine Blume“ benutzen, um das restliche Feld mit Pflanzen zu füllen? (Hinweis: Die Pflanzen haben alle 100 Pixel Abstand zueinander.)  '
      2-3 Artist Functions 13_instruction: Wir haben dir vier Funktionen zur Verfügung gestellt. Verwende sie beliebig innerhalb von einer oder mehreren Schleifen, um Bilder zu zeichnen, die du mit deinen Freunden teilen kannst. Klicke ausführen, um ein Beispiel zu sehen.
      2-3 Artist Functions 2_instruction: Funktionen erlauben dir, neue Blöcke zu definieren! Wir haben die Blöcke in eine Funktion namens „zeichne ein Quadrat“ verschoben, um ein Quadrat zu zeichnen. Kannst du die Funktion „zeichne ein Quadrat“ benutzen, um die Gläser zu erstellen? Die Quadrate haben einen Abstand von 75 Pixel.
      2-3 Artist Functions 3_instruction: Bearbeite die Funktion, um ein Quadrat mit einer Seitenlänge von 115 und zeichne die größeren Gläser. Die Quadrate sind jetzt 45 Pixel auseinander.
      2-3 Artist Functions 4_instruction: 'Verwende den „Wiederholen"-Block, um diese 3 Quadrate zu zeichnen.'
      2-3 Artist Functions 7_instruction: 'Benutze die „Zeichne ein Haus“- Funktion, um zwei Häuser mit zwei verschiedenen Parametern zu zeichnen. (Hinweis: Das erste Haus hat 100 Pixel.)'
      2-3 Artist Functions 9_instruction: Hier ist eine Schneeflocken-Funktion. Experimentiere, um damit eine Winterszene zu erstellen! Dies ist ein freies Spiel-Level, es gibt keine Aufgaben zu lösen. Viel Spaß!
      2-3 Artist Loops 1_instruction: Kannst du ein Sechseck mit Seiten, die 100 Pixel lang sind, zeichnen, um die Zelle zu beenden? Bedenke, das du nur 60 Grad drehen musst!
      2-3 Artist Loops 10_instruction: Was passiert mit dem Design, wenn wir unseren letzten Schritt vorwärts halb so lang machen?
      2-3 Artist Loops 11_instruction: 'Jetzt lass uns *noch eine* Schleife um unsere ganze Schöpfung legen!  Vergiss nicht, einen Winkel am Ende der äußeren Schleife hinzuzufügen.'
      2-3 Artist Loops 2_instruction: Jetzt verwende einen Wiederholen-Block, um die Zelle zur Muschel zu machen.
      2-3 Artist Loops 4_instruction: Möchtest du sehen, was passiert, wenn wir diese Form immer und immer wieder mit einer Schleife wiederholen?
      2-3 Artist Loops 5_instruction: Jetzt nehmen wir an der Schleife eine kleine Änderung vor und sehen, wie unterschiedlich unser Bild wird.
      2-3 Artist Loops 6_instruction: Füge eine weitere Bewegung und eine weitere Drehung in der Schleife hinzu und sieh, wie sich dein Design ändert.
      2-3 Artist Loops 7_instruction: 'Wir können Schleifen verwenden, um alle Arten von Vielecken zu zeichnen.  Kannst du eine Raute innerhalb dieses Sechsecks erstellen?'
      2-3 Artist Loops 8_instruction: Lass uns beide Elemente in einer Schleife verwenden.
      2-3 Artist Loops 9_instruction: |
        Wir werden die gleichen Elemente in einer Schleife benutzen, aber jetzt werden wir etwas Abstand dazwischen hinzufügen.
        Verwende den gleichen Code wie zuvor, aber füge einen Schritt nach vorn am Ende der äußeren Schleife ein.
      2-3 Artist Loops New 1_instruction: Wir zeichnen diesen Roboterkopf! Schaffst du ein Quadrat mit Seiten, die 100 Pixel lang sind?
      2-3 Artist Loops New 10_instruction: "Jetzt lass uns einen Haufen V's miteinander verbinden, sie in einer Schleife zeichnen."
      2-3 Artist Loops New 11_instruction: Diesmal zeichnen wir es 24 Mal. Füge eine Linkskurve von 30 Grad diesem Code zu und lege sie alle in einen Wiederholen-Baustein.
      2-3 Artist Loops New 12_instruction: Zeichne einen Diamanten mit einer Seitenlänge von 100 Pixel.
      2-3 Artist Loops New 13_instruction: Zeichne nun den Diamanten 3 Mal in einer Schleife.
      2-3 Artist Loops New 14_instruction: 'Jetzt lass uns den Diamant 10 Mal zeichnen, aber mit einer 90- Grad-Drehung zwischen jedem Diamant.'
      2-3 Artist Loops New 15_instruction: Zeichne etwas Lustiges.
      2-3 Artist Loops New 2_instruction: Hier ist Teil des Codes, den du verwendet hast, um das Quadrat zu zeichnen. Was passiert, wenn du den Wiederholen-Baustein verwendest, um diesen Code 4 Mal auszuführen?
      2-3 Artist Loops New 9_instruction: Zeichne ein einfaches V, bei dem beide Seiten 50 Pixel lang sind, um den Pfeil zu vervollständigen.
      2-3 Artist Match Hex Pic_instruction: 'Zuordnen:  Hilf, das Sechseck zu beenden.'
      2-3 Artist Match Rho Pic_instruction: 'Zuordnen:  Ergänze den fehlenden Code.'
      2-3 Artist Match Sq Pic_instruction: 'Zuordnen: Ergänze den fehlenden Code.'
      2-3 Artist Match Tri pic_instruction: 'Zuordnung:  Füge den fehlenden Code ein.'
      2-3 Artist Nested Loops 1_instruction: |
        Du hast bereits Schleifen genutzt um Formen zu zeichnen. Aber wusstest du, dass du auch eine Schleife in eine andere Schleife bauen kannst?
        Wiederhole diesen Code-Baustein 3 Mal um das Muster zu zeichnen.
      2-3 Artist Nested Loops 10_instruction: Wiederhole diesen Code 12 Mal, um das Muster zu zeichnen.
      2-3 Artist Nested Loops 11_instruction: Wiederhole diesen Code 4 Mal, um das Muster zu vervollständigen und drehe es um 90 Grad nach jedem Kreis.
      2-3 Artist Nested Loops 12_instruction: Wiederhole diesen Code 12 Mal, um die Wirbel zu vervollständigen.
      2-3 Artist Nested Loops 2_instruction: Jetzt soll das Dreieck 6 Mal wiederholt werden. Nach jedem Dreiecksdurchlauf musst du eine 60-Grad-Drehung ausführen, bevor du das nächste zeichnest.
      2-3 Artist Nested Loops 3_instruction: Du musst das Dreieck 12 Mal wiederholen, um dieses Muster zu zeichnen. Teile die Gradzahl eines Kreises (360) durch die Zahl der Figuren, die du zeichnest (12), um herauszufinden, um wie viel Grad du drehen musst, nachdem eine Figur gezeichnet wurde.
      2-3 Artist Nested Loops 4_instruction: 'Wiederhole diesen Diamanten 12 Mal, um eine Blume zu zeichnen. Hinweis:  12 Diamanten sind vergleichbar mit den 12 Dreiecken, die du gemacht hast - wie viel Grad musste die Drehung betragen, die Du nach jeder Figur ausführen musstest?'
      2-3 Artist Nested Loops 5_instruction: Setze mithilfe einer verschachtelten Schleife Fenster in das Gebäude. Die Fenster sind 20 Pixel lang und liegen 20 Pixel auseinander.
      2-3 Artist Nested Loops 6_instruction: Dieser Dinosaurier hat 8 Spitzen am Schwanz; jede Spitze ist 30 Pixel lang. Das Dreieck muss 8 mal durchlaufen werden, aber sorge dafür, dass es sich nach jedem Durchlauf vorwärts bewegt.
      2-3 Artist Nested Loops 7_instruction: Wiederhole dieses Dreieck 10 mal, um die Sonne zu zeichnen. Nach jeder Wiederholung muss eine Verschiebung und eine Drehung erfolgen. Du kannst herausfinden, wie groß die Drehung sein muss, indem du die Gradzahl eines Kreises durch die Anzahl der Figuren teilst, aus denen die Sonne besteht.
      2-3 Artist Nested Loops 8_instruction: Wir wollen nun etwas Gras zu unserem Bild hinzufügen. Die Grasbüschel liegen 50 Pixel auseinander.
      2-3 Artist Nested Loops 9_instruction: Wir vollenden das Bild, indem wir eine Blume hinzufügen. Wiederhole diesen Diamanten 12 Mal, um deine Blume zu zeichnen.
      2-3 Artist Nested Loops Free Play_instruction: Freies Spiel, zeichne irgendetwas Cooles mit verschachtelten Schleifen.
      2-3 Bee Conditionals 1_instruction: Hallo! Ich bin eine Biene. Hilf mir, Nektar aus der Blüte zu holen.
      2-3 Bee Conditionals 10_instruction: Lila Blüten haben entweder 1 oder 0 Nektar. Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat.
      2-3 Bee Conditionals 11_instruction: Sammle den Nektar dort, wo die Blüten Nektar haben.
      2-3 Bee Conditionals 12_instruction: Benutze eine Schleife, um dies zu prüfen und sammle den Nektar aller dieser Blüten.
      2-3 Bee Conditionals 13_instruction: 'Sammle Nektar und stelle Honig her. Hinweis: Was passiert, wenn du die „Wenn Nektar"- Bedingung auf eine rote Blüte anwendest? Kannst du dies mit einer Schleife vervollständigen?'
      2-3 Bee Conditionals 14_instruction: Sammle Nektar und stelle Honig her. Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat.
      2-3 Bee Conditionals 15_instruction: Sammle Nektar von allen vier Blumen.
      2-3 Bee Conditionals 2_instruction: Hallo, ich bin eine Biene! Hilf mir, den ganzen Nektar aus den Blüten zu sammeln. Benutze eine Schleife.
      2-3 Bee Conditionals 3_instruction: Hilf mir, den ganzen Nektar aus den Blüten zu sammeln und Honig zu erzeugen. Benutze eine Schleife.
      2-3 Bee Conditionals 4_instruction: Hilf mir, den ganzen Nektar aus den Blüten zu sammeln und den ganzen Honig zu erzeugen.
      2-3 Bee Conditionals 5_instruction: Eine lila Blume kann entweder 1 oder 0 Portion Nektar haben, aber du weißt nicht genau, welche. Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat. Überprüfe, ob die Nektarmenge gleich 1 ist, indem du einen „Wenn“-Baustein benutzt.
      2-3 Bee Conditionals 6_instruction: 'Überprüfe diese Blüte mit einem „Wenn"- Baustein, um zu erkennen, ob Nektar zur Verfügung steht.'
      2-3 Bee Conditionals 7_instruction: Sammle Nektar von jeder Blüte, wenn sie welchen hat.
      2-3 Bee Conditionals 8_instruction: Auf diesem Feld gibt es rote und lila Blüten. Rote Blüten haben eine bekannte Nektarmenge, während die der lila Blüten unbekannt ist. Sammle den ganzen Nektar.
      2-3 Bee Conditionals 9_instruction: Sammle den ganzen Nektar von allen Blumen.
      2-3 Bee Conditionals Assessment 1_instruction: 'Prüfung: Sammle den ganzen Nektar. Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat.'
      2-3 Bee Debugging 1_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 10_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 2_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 3_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 4_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 5_instruction: 'Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.  Du kannst jetzt „Ausführen“ und „Schritt“ benutzen.'
      2-3 Bee Debugging 6_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, um den gesamten Nektar zu sammeln.
      2-3 Bee Debugging 7_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 8_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging 9_instruction: Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.
      2-3 Bee Debugging Assessment 1_instruction: 'Prüfung:  Diese Bausteine nerven mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Nektar und erzeuge den ganzen Honig.'
      2-3 Bee Functions 1_instruction: 'Funktionen sind Programm-Bausteine, die eine Aufgabe ausführen. Benutze die „Hole 2 Nektar“- Funktion, um Nektar von jeder Blüte zu sammeln.'
      2-3 Bee Functions 10_instruction: 'Lila Blüten haben entweder 1 oder 0 Nektar.  Erstelle eine Funktion, die Nektar nur aus den lila Blüten sammelt, die Nektar haben.'
      2-3 Bee Functions 2_instruction: 'Funktionen sind Programm-Bausteine, die eine Aufgabe ausführen. Verwende die „hohle 5“- Funktion, um gleichzeitig 5 mal Nektar zu holen. Stelle sicher, dass eine Schleife verwendet wird, die eine optimale Blockzählung ermöglicht.'
      2-3 Bee Functions 3_instruction: Sammle den ganzen Nektar von allen Blumen.
      2-3 Bee Functions 4_instruction: 'Die „bewege und hole Nektar“- Funktion dreht die Biene, sammelt Nektar und bringt die Biene an den Ausgangsort zurück. Benutze die Funktion, um den ganzen Nektar zu sammeln.'
      2-3 Bee Functions 5_instruction: Die Blüten haben jetzt mehr Nektar. Bearbeite die gegebene Funktion so, dass sie 4 Portionen Nektar sammelt und benutze sie, um den ganzen Nektar von den Blüten zu sammeln.
      2-3 Bee Functions 6_instruction: Jetzt benutze dieselbe Funktion, um Nektar von den drei Blüten zu sammeln.
      2-3 Bee Functions 7_instruction: "Die Blüten sind jetzt weiter weg. Bearbeite die gegebene Funktion und benutze sie, um den ganzen Nektar aus den Blüten zu sammeln.\\t"
      2-3 Bee Functions 8_instruction: Erzeuge deine eigene Funktion, die 7 Portionen Nektar holt, vorwärts bewegt und 7 mal Honig macht. Benutze die Funktion, um bei jeder Blüte Nektar zu sammeln und bei jeder Wabe Honig zu erzeugen.
      2-3 Bee Functions 9_instruction: Erzeuge deine eigene Funktion, die einen Weg entlanggeht, Nektar holt, Honig erzeugt und dann die Biene zum Anfang des Weges zurückbringt.
      2-3 Bee Functions Assessment 1_instruction: 'Prüfung: Benutze die gegebene Funktion, um von jeder Blüte Nektar zu sammeln.'
      2-3 Bee Functions Assessment 2_instruction: 'Prüfung: Erzeuge eine Funktion, mit der man gleichzeitig 3 mal Honig erzeugen kann.'
      2-3 Bee Loops 1_instruction: Jede Blüte enthält eine Einheit Nektar. Sammle Nektar von jeder Blüte.
      2-3 Bee Loops 10_instruction: Kannst Du eine Solange-Schleife innerhalb von zwei anderen Schleifen benutzen, um den ganzen Nektar zu sammeln?
      2-3 Bee Loops 11_instruction: Benutze Solange-Schleifen, um den ganzen Nektar aller Blumen auf diesem Feld zu sammeln.
      2-3 Bee Loops 12_instruction: Benutze Solange-Schleifen, um den ganzen Nektar aller Blumen auf diesem Feld zu sammeln.
      2-3 Bee Loops 13_instruction: 'Prüfung: Benutze den Wiederholen-Baustein, um den gesamten Nektar einzusammeln.'
      2-3 Bee Loops 1A_instruction: 'Hallo, ich bin eine Biene. Kannst du mir helfen, den Nektar von diesen Blüten zu sammeln? '
      2-3 Bee Loops 2_instruction: Benutze eine Schleife, um den Nektar zu sammeln und Honig zu erzeugen.
      2-3 Bee Loops 2A_instruction: Kannst du diese Aufgabe mit einer Schleife vereinfachen?
      2-3 Bee Loops 3_instruction: Sammle Nektar aus jeder Blüte und erzeuge Honig bei jeder Wabe.
      2-3 Bee Loops 3A_instruction: Kannst du eine Schleife verwenden um den ganzen Nektar einzusammeln?
      2-3 Bee Loops 3B_instruction: Verwende nun den Wiederholen-Baustein um den ganzen Nektar aufzusammeln und den ganzen Honig zu erzeugen.
      2-3 Bee Loops 4_instruction: Benutze eine ähnliche Schleife wie in der letzten Aufgabe, aber arbeite eine Drehung ein.
      2-3 Bee Loops 4A_instruction: Versuche nun diese Sequenz mit Hilfe einer Schleife dreimal zu wiederholen. Vergiss nicht am Schluss Honig zu erzeugen!
      2-3 Bee Loops 5_instruction: Benutze eine Schleife, um die Stufen herabzusteigen und den Nektar zu sammeln.
      2-3 Bee Loops 6_instruction: Benutze eine Schleife, um Nektar von jeder Blüte zu sammeln und Honig bei jeder Wabe zu erzeugen.
      2-3 Bee Loops 7_instruction: Füge diese Bausteine in eine Schleife ein, um Nektar von jeder Blüte zu sammeln.
      2-3 Bee Loops 8_instruction: 'Diese lila Blüten haben eine unbekannte Menge Nektar. Benutze die „Solange Nektar“- Schleife, um den ganzen Nektar zu sammeln. Diese Schleife wird solange durchlaufen, wie die Bedingung wahr ist - in diesem Fall: Nektar > 0.'
      2-3 Bee Loops 9_instruction: Die Solange-Schleife kann dasselbe bewirken wie eine Falls-Anweisung in einer Schleife. Füge eine Solange-Schleife zu dem Programm hinzu, so dass dieselbe Aufgabe erledigt wird.
      2-3 Bee Loops Assessment 1_instruction: 'Prüfung - Benutze eine Solange-Schleife, um den ganzen Nektar dieser Blüte zu sammeln.'
      2-3 Maze 1_instruction: 'Hilfst du mir, das freche Schwein zu fangen? Stecke ein paar „vorwärts bewegen“-Bausteine zusammen und drücke „Ausführen“. '
      2-3 Maze 10_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 11_instruction: Hol mir die Blüte, ich bin hungrig! Wie oft musst du einen Baustein wiederholen?
      2-3 Maze 12 (copy 1)_instruction: 'Kannst du die vorige Bearbeitung durch eine Lösung ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle eine Schleife, die einen „wiederhole ...-mal“ - Baustein enthält.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kannst du die vorige Bearbeitung durch eine Lösung ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle eine Schleife, die einen „wiederhole ...-mal“ - Baustein enthält.)'
      2-3 Maze 12 (old)_instruction: 'Hole mir das Schwein, jetzt mit dem "wiederhole ... -mal"- Baustein!'
      2-3 Maze 12_instruction: 'Kannst du diese fünf Bausteine durch nur zwei Bausteine ersetzen? (Hinweis: Du musst eine Schleife mit einem „Wiederholen“-Baustein erstellen, um dieses Level zu bestehen.) '
      2-3 Maze 13 (old)_instruction: 'Hole mir das Schwein, jetzt mit dem "Wiederholen bis"- Baustein!'
      2-3 Maze 13_instruction: |
        Hole mir das Schwein mit nur zwei Blöcken.
        (Hinweis: Du musst den „Wiederholen“-Baustein verwenden, um dieses Level zu bestehen.)
      2-3 Maze 14 (old)_instruction: 'Hole mir das Schwein mit dem "Wiederholen bis"- Baustein!'
      2-3 Maze 14_instruction: 'Bring mich zu der Sonnenblume! (Wo ist dieser "wiederhole ...-mal"- Baustein, wenn ich ihn brauche?)'
      2-3 Maze 15 (old)_instruction: 'Hole mir das Schwein mit dem "Wiederholen bis"- Baustein!'
      2-3 Maze 15_instruction: Verwende zwei „Wiederholen“-Schleifen, um das Schwein mit der geringsten Anzahl von Bausteinen zu schaffen.
      2-3 Maze 16 (old)_instruction: 'Hole mir das Schwein mit dem "Wiederholen bis"- Baustein!'
      2-3 Maze 16 before_instruction: Bring mich zum Schwein.
      2-3 Maze 16_instruction: Bring mich zu der Sonnenblume. Lass die Anweisungsfolge in einer Schleife laufen!
      2-3 Maze 2_instruction: Dieses Schwein zerrauft meine Federn. Hilf mir, zu ihm zu kommen!
      2-3 Maze 3_instruction: Verfolge den Pfad und führe mich zu dem dummen Schwein. Vermeide das TNT, sonst fliegen die Federn!
      2-3 Maze 4_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 5_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 6_instruction: Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst könnte ich wütend werden!
      2-3 Maze 7_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 8_instruction: Bring mich zum Schwein!
      2-3 Maze 9_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze Loops 1_instruction: Kannst du mich zu dem Schwein bringen, indem du 5 Bausteine benutzt?
      2-3 Maze Loops 17_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 18_instruction: |
        Bring mich zu der Sonnenblume!
        (Hinweis: Du musst eine „Wiederholen“-Schleife innerhalb einer anderen benutzen, um dieses Level zu bestehen.
      2-3 Maze Loops 19_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 20_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 21_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops Assessment 1_instruction: 'Prüfung:  Hole mir die Sonnenblume und benutze dabei nur 5 Bausteine! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 Maze sq10v2_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 maze sq11_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 maze sq12_instruction: 'Kannst du die vorige Lösung durch eine Schleife ersetzen, indem du einen "wiederhole ...-mal"- Baustein verwendest?'
      2-3 maze sq13_instruction: Guter Mensch. Ich Zombie. Muss ... zur ... Sonnenblume. Erzeuge eine Schleife mit dem „Wiederhole Einheit“-Baustein.
      2-3 maze sq14_instruction: Kannst du die Sonnenblume holen und dabei nur vier Bausteine benutzen?
      2-3 maze sq15_instruction: Kannst du die Sonnenblume holen und dabei nur fünf Bausteine benutzen?
      2-3 maze sq16_instruction: Okay, das ist ähnlich, aber etwas anders. Kannst du es mit nur fünf Bausteinen?
      2-3 Maze sq2_instruction: 'Verfolge den Pfad und führe mich zu dem dummen Schwein.  Vermeide das TNT, sonst muss ich Federn lassen!'
      2-3 Maze sq3_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze sq4_instruction: Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst könnte ich wütend werden!
      2-3 Maze sq5_instruction: Bring mich zum Schwein! Wie oft musst du einen Baustein wiederholen?
      2-3 Maze sq6_instruction: 'Kannst du die vorige Bearbeitung durch eine Lösung ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle eine Schleife, die einen „wiederhole ...-mal“ - Baustein enthält.)'
      2-3 Maze sq7_instruction: Bringe mir den grünen Eindringling. Benutze nur drei Bausteine.
      2-3 Maze sq8_instruction: 'Bring mich zum Schwein! (Wo ist dieser "wiederhole ...-mal"- Baustein, wenn ich ihn brauche?)'
      2-3 Maze sq9_instruction: Erstelle Schleifen, um das Schwein zu fangen und benutze dabei weniger Bausteine.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Hilf dem Vogel, das freche Schwein zu fangen, in dem du es vorwärts bewegst.
      4-5 Artist 1_instruction: 'Hilf mir, meine Box fertig zu zeichnen. (Jede Linie ist 300 Pixel lang) '
      4-5 Artist 10_instruction: Drücke auf „Ausführen“, um den Code zu testen. Wiederhole den Vorgang, bis die Zeichnung vollständig ist. Die Farben sind jedes Mal anders.
      4-5 Artist 11_instruction: Vervollständige die grünen Linien. Die Linien sind 300 Pixel lang und liegen 15 Pixel auseinander.
      4-5 Artist 2_instruction: Kannst du diesen Code in eine Schleife bauen und so das Quadrat vervollständigen?
      4-5 Artist 3.5_instruction: Finde heraus, was passiert, wenn du diesen Code ausführst (oder drücke auf „Ausführen“ und probiere es aus). Wiederhole den Vorgang, bis die Zeichnung vollständig ist. Die Farben sind (höchstwahrscheinlich) jedes Mal anders.
      4-5 Artist 3_instruction: Dieses rechteckige Blumenbeet hat einen Umfang von 600. Die lange Seite hat eine Länge von 200. Zeichne das Rechteck.
      4-5 Artist 4_instruction: 'Wie viel Grad hat ein Kreis?  Schließe die Bausteine in eine Schleife ein, um einen Farbenkreis zu erstellen.'
      4-5 Artist 5_instruction: Welchen Winkel verwendest du?
      4-5 Artist 6_instruction: Dieses gleichseitige Dreieck hat die Winkel 60, 60, 60 Grad. Jede Seite ist 200 Pixel. Vervollständige die Zeichnung.
      4-5 Artist 7_instruction: Dieses rechtwinklige Dreieck hat Winkeln von 30, 60 und 90 Grad. Die Länge der schrägen Seite beträgt das doppelte der Höhe (100 Pixel). Vervollständige die Zeichnung.
      4-5 Artist 8_instruction: Die Mittellinie eines Fußballfeldes steht senkrecht auf den Seitenlinien. Dieses Feld hat einen Umfang von 800 Pixeln und es ist 240 Pixel lang. Wie breit ist es? Zeichne die Begrenzungslinien und die Mittellinie.
      4-5 Artist 9_instruction: Zeichne die andere Hälfte, so dass der Entwurf symmetrisch ist. Die Dreiecke sind gleichseitig und 50 Pixel lang.
      4-5 Artist Assessment 1_instruction: 'Prüfung: Benutze eine Schleife, um das gleichseitige Dreieck zu zeichnen. Jede Seite hat eine Länge von 300 Pixeln.'
      4-5 Artist For Loops 1_instruction: 'Setze die Zahlen 1 bis 10 in die „Breite"- Bausteine ein und führe den Code aus.'
      4-5 Artist For Loops 11_instruction: 'Vervollständige den „Für"-Baustein, sodass er wie folgt zählt: 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Was passiert, wenn du die „Für"- und „Bis"-Zahlen miteinander tauscht? Vervollständige den „Für"-Baustein, sodass er wie folgt zählt: 200, 180, 160, 140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Dieser Lösungsansatz beginnt ohne „Für“- Schleife und es werden zu viele Bausteine benötigt!  Benutze einen „Für“-Baustein, um die Spirale zu vervollständigen.  Hinweis: Die Länge des letzten Strichs beträgt 250 Pixel.'
      4-5 Artist For Loops 14_instruction: 'Jemand hat bereits mit dem Code begonnen und dann festgestellt, dass es einen schnelleren Weg geben muss. Nutze den „Für“-Baustein, um die Bausteine auszutauschen und zeichne die Sechseckspirale zu Ende. (Hinweis: Die letzte Linie ist 300 Pixel lang.)'
      4-5 Artist For Loops 15_instruction: 'Jemand hat bereits mit dem Code begonnen und dann festgestellt, dass es einen schnelleren Weg geben muss. Nutze den „Für“-Baustein, um die Bausteine auszutauschen und zeichne die Sechseckspirale zu Ende. (Hinweis: Die Länge des letzten Strichs beträgt 200 Pixel.)'
      4-5 Artist For Loops 2_instruction: |
        Das ist ein "for"-Baustein.
        Anstatt 1, 2, 3 ... 10 zu schreiben, kann der Baustein die Bausteine innerhalb ausführen und für dich zählen. Platziere die Nummer 10 in das "to"-Feld des "for"-Bausteins.
      4-5 Artist For Loops 3_instruction: Wie können wir von 1 bis 50 zählen? Ändere den „Für“-Baustein.
      4-5 Artist For Loops 4_instruction: 'Vervollständige den „Für"-Baustein, so dass er in 1er- Schritten von 1 bis 10 zählt.'
      4-5 Artist For Loops 6_instruction: Zeichne Quadrate mit Seitenlängen von 50, 60, 70, 80 und 90 Pixel. Du musst die Funktion „Zeichne ein Viereck“ fünfmal verwenden.
      4-5 Artist For Loops 7_instruction: 'Zeichne dieselben Quadrate, aber benutze einen „Zähle mit“- Baustein um die Größe zu ändern. Positioniere den „Zähler“- Baustein in der „Zeichne ein Quadrat“- Funktion. Hinweis: Er befindet sich in der Kategorie „Variablen“.'
      4-5 Artist For Loops 8_instruction: 'Kannst du das Programm vervollständigen, indem du die Bausteine in eine "Für"-Schleife einschließt, die in 10er Schritten von 200 bis 10 zählt? Du findest den „Für“-Baustein in der „Schleifen“-Kategorie.'
      4-5 Artist For Loops 9_instruction: 'Diese Kreise haben die Größe 5, 10, 15, 20, 25, 30, und 35. Zeichne die Kreise. Benutze einen „Für"-Baustein.'
      4-5 Artist Free Draw 1_instruction: 'Freies Zeichnen!  Zeichne, was deine Inspiration dir eingibt.'
      4-5 Artist Functions 1_instruction: 'Benutze eine „Wiederholen"-Schleife, um dieses Dreieck zu zeichnen.'
      4-5 Artist Functions 10a_instruction: 'Füge diesen Code in die „Zeichne eine Schneeflocke"-Funktion ein und ersetze die 50 durch den Parameter „Größe". Die Funktion ist schon einmal aufgerufen worden, um eine 100-Pixel-Schneeflocke zu machen.'
      4-5 Artist Functions 10b_instruction: 'Benutze die „Zeichne eine Schneeflocke“-Funktion, um Schneeflocken in verschiedenen Größen zu erstellen.  Hinweis: Die erste Schneeflocke hat eine Länge von 25 und jede Schneeflocke ist doppelt so groß wie die vorige.'
      4-5 Artist Functions 11_instruction: 'Diese „Zeichne ein Sechseck“-Funktion benutzt die „Zeichne ein Dreieck“-Funktion. Vervollständige die Sechseck-Funktion. (Hinweis: Ein Sechseck hat sechs Seiten, jede ist 100 Pixel lang.)'
      4-5 Artist Functions 12_instruction: 'Vervollständige die „Zeichne Wellen“-Funktion.  Jede Welle besteht aus einer oberen und einer unteren Welle.   Hinweis: Zeichne 5 blaue Wellen.'
      4-5 Artist Functions 13 Free play_instruction: Hier sind einige Funktionen, mit denen man Planeten, Sterne, Raketen und Roboter zeichnen kann. Benutze sie wie du es magst für Bilder, die du mit deinen Freunden teilen kannst.
      4-5 Artist Functions 14 Free play_instruction: 'Wir haben dir hier einige Funktionen zur Verfügung gestellt.  Verwende sie beliebig innerhalb von einer oder mehreren Schleifen, um Bilder zu zeichnen, die du mit deinen Freunden teilen kannst. Klicke „Ausführen“, um ein Beispiel zu sehen.'
      4-5 Artist Functions 15 Assessment_instruction: 'Prüfung:  Benutze die „Zeichne ein Quadrat"-Funktion, um die Quadrate zu erzeugen.  Die Quadrate haben 50, 100, und 150 Pixel.'
      4-5 Artist Functions 2a_instruction: 'Füge diese Bausteine jetzt in eine neue Funktion mit dem Namen „Zeichne ein kleines Dreieck" ein und rufe sie auf.'
      4-5 Artist Functions 2b_instruction: 'Jetzt erzeuge eine Funktion mit dem Namen „Zeichne ein kleines Dreieck". Benutze dabei die vorbereiteten Bausteine.'
      4-5 Artist Functions 3_instruction: 'Jetzt erzeuge die Funktionen „Zeichne ein mittelgroßes Dreieck“ und „Zeichne ein großes Dreieck“. Die „Zeichne ein kleines Dreieck“-Funktion ist für dich erledigt. Die Dreiecke haben Seitenlängen von 50 (klein), 100 (mittelgroß), und 150 (groß). '
      4-5 Artist Functions 4_instruction: 'Diese neue „Zeichne ein Dreieck"-Funktion hat einen Parameter und kann die Arbeit von allen drei vorigen Funktionen übernehmen. Benutze diese neue Funktion, um die gleichen Dreiecke zu zeichnen.'
      4-5 Artist Functions 5_instruction: 'Kannst du die „Zeichne ein Dreieck"-Funktion in eine „Zeichne ein Quadrat"-Funktion verwandeln und so die Zeichnung ändern?'
      4-5 Artist Functions 6_instruction: 'Verwende die Funktionen „ein Dreieck zeichnen" und „ein Quadrat zeichnen" zusammen, um ein Haus zu zeichnen. (Hinweis: Die Quadrate haben eine Seitenlänge von 200 Pixel)'
      4-5 Artist Functions 6b_instruction: 'Benutze die „Zeichne ein Quadrat"- und die Dreieck-Funktionen zugleich mit anderen Blöcken, um ein Haus zu zeichnen, indem du sie zur „Zeichne ein Haus"-Funktion hinzufügst und aufrufst.'
      4-5 Artist Functions 7_instruction: 'Benutze die „Zeichne ein Haus"-Funktion, um Häuser der Größe 100 Pixel und 50 Pixel zu zeichnen. Beide Häuser trennen 50 Pixel.'
      4-5 Artist Functions 8_instruction: 'Die „Zeichne eine Blume"-Funktion hat einen Parameter, der es gestattet, die Länge des Stiels festzulegen.  Setze sie auf 200 und sieh dir an, was passiert.'
      4-5 Artist Functions 9_instruction: Zeichne diese 3 Blumen. Die Höhe der ersten beträgt 100, und die der folgenden Blume beträgt immer 50 Pixel mehr als die der vorigen. Außerdem liegen die Blumen 100 Pixel auseinander.
      4-5 Artist Patterns 1_instruction: Kannst du dieses Quadrat mit Hilfe einer Schleife zeichnen? Jede Seite hat eine Länge von 20 Pixeln.
      4-5 Artist Patterns 10_instruction: |
        Dieser Code zeichnet zwei Spalten Sechsecke - wiederhole das ganze 4 Mal per Schleife und zeichne das ganze Wabenwerk.
        Hinweis: Du musst in deiner äußeren Schleife 120 Pixel zurückspringen um sicherzustellen, dass der Künstler nicht außerhalb des Bildschirms zeichnet
        
      4-5 Artist Patterns 11_instruction: 'Wie oft muss die Schleife durchlaufen werden, damit ein Halbkreis gezeichnet wird? Hinweis: Wenn ein Kreis 360 Grad hat und jeder Schleifendurchlauf eine Verschiebung um 3 Grad bewirkt, wie oft muss die Schleife dann durchlaufen werden, damit ein Vollkreis gezeichnet wird?'
      4-5 Artist Patterns 12_instruction: Wenn du die Schleife kopierst und eine Linksdrehung anstelle einer Rechtsdrehung ausführst, was passiert dann? Kannst du das wiederholen, um diese Welle zu zeichnen?
      4-5 Artist Patterns 13_instruction: 'Jetzt wollen wir das ganze vier mal durchlaufen lassen und so den Bilderrahmen machen. Pass auf die Ecken auf - du kannst nicht einfach eine 90- Grad- Drehung machen! Wenn eine Verschiebung um 3 Grad, 60 mal ausgeführt, einen Halbkreis erzeugt, welcher dieser Code-Bausteine erzeugt dann einen Viertelkreis für die Ecken?'
      4-5 Artist Patterns 2_instruction: Wenn du deine Quadratschleife in eine andere Schleife einschließt, nennen wir das eine verschachtelte Schleife. Was musst du zu deiner äußeren Schleife hinzufügen, um sicherzustellen, dass sich alle 15 Quadrate aneinanderreihen?
      4-5 Artist Patterns 3_instruction: 'Wir gehen jetzt eine Ebene nach unten. Wir haben den ganzen Code- Baustein in eine andere Schleife geschachtelt, aber du musst den Künstler wieder zurückholen, damit er die nächste Zeile zeichnet. Welchen dieser Code- Bausteine kannst du am Schluss der äußeren Schleife einfügen, damit das ganze Gitternetz gezeichnet wird?'
      4-5 Artist Patterns 4_instruction: Dieser Diamant hat 50 Pixel lange Seiten und Winkel von 120 und 60 Grad. Benutze eine Schleife, um ihn zu zeichnen.
      4-5 Artist Patterns 5.5_instruction: Wie oft musst du diesen Baustein wiederholen, damit das ganze Diamantenraster gezeichnet wird?
      4-5 Artist Patterns 5_instruction: 'Wir wollen das wiederholen und so eine Reihe von 6 Diamanten machen. Beachte, dass wir unseren Diamantencode so verändert haben, dass 3 statt 2 Wiederholungen stattfinden - was glaubst du, warum?'
      4-5 Artist Patterns 6_instruction: Wie oft musst du diesen Baustein wiederholen, damit das ganze Diamantenraster gezeichnet wird?
      4-5 Artist Patterns 7_instruction: 'Wir wollen den Code der letzten Aufgabe etwas verändern und so ein komplizierteres Muster erzeugen. Achte darauf, wie die Diamanten sich jetzt überdecken. Versuche es mit einer Änderung des ersten „springe rückwärts"-Bausteins von 100 auf 50 (halb so weit). Wie weit sollte der Künstler beim zweiten „springe rückwärts"-Baustein gehen?'
      4-5 Artist Patterns 8_instruction: Benutze eine Schleife, um dieses Sechseck mit 40 Pixeln Seitenlänge und 60-Grad-Winkeln zu zeichnen.
      4-5 Artist Patterns 9.5_instruction: Wir wollen diesen Code in einer Schleife laufen lassen, um zwei Reihen Sechsecke zu zeichnen. Beachte, wie unsere zweite Reihe nach rechts verschoben wird.
      4-5 Artist Patterns 9_instruction: 'Wiederhole nun den Code dreimal, um die ganze Zeile zu zeichnen. Hinweis: Jedes Sechseck ist von den weitesten Punkten von rechts nach links 80 Pixel breit.'
      4-5 Artist Patterns Free Play_instruction: 'Freies Spielen - versuche dein Glück beim Entwerfen deines eigenen Musters!'
      4-5 Bee Conditionals - FC Test_instruction: Die Biene will jetzt nur Nektar. Nicht alle Objekte sind Blumen, also sieh unter jeder Wolke nach, ob dort eine Blume versteckt ist. Falls ja, dann kannst du Nektar sammeln.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Die Biene kann nicht unterscheiden, ob dies eine Blume oder eine Wabe ist. Sammle den Nektar nur aus Blüten, aber prüfe erst, ob es sich um eine Wabe oder um eine Blüte handelt.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Die Biene will jetzt nur Nektar. Nicht alle Objekte sind Blumen, also sieh unter jeder Wolke nach, ob dort eine Blume versteckt ist. Falls ja, dann kannst du Nektar sammeln.
      4-5 Bee Conditionals 3_instruction: Jetzt will die Biene nur Honig erzeugen. Prüfe, damit nur bei Waben Honig erzeugt wird.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 'Das unbekannte Objekt ist entweder eine Blume oder eine Bienenwabe. Benutze den „wenn/ansonsten"- Baustein um Nektar zu machen, wenn es eine Blüte ist, „ansonsten", um Honig zu erzeugen (weil es eine Wabe ist).'
      4-5 Bee Conditionals 5_instruction: 'Vielleicht ist eine Blume oder eine Wabe unter diesen Wolken. Benutze den „wenn/ansonsten"- Baustein um Nektar zu machen, wenn dort eine Blüte ist, „ansonsten", um Honig zu erzeugen (weil dort eine Wabe ist).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Diese lila Blüte kann entweder 3, 2 oder 1 Nektar haben. Hier ist ein „wenn/ansonsten“-Baustein mit einem weiteren „wenn/ansonsten“- Baustein kombiniert, damit ein „wenn, ansonsten-wenn, ansonsten“-Block erzeugt wird. Vervollständige die Lösung, um eine unbekannte Menge Nektar zu sammeln.'
      4-5 Bee Conditionals 7_instruction: 'Bedenke, dass lila Blüten 3, 2, oder 1 Nektar tragen können. Vervollständige die „Prüfe lila Blüte"- Funktion und benutze sie, um den ganzen Nektar bei den Blüten zu sammeln.'
      4-5 Bee Conditionals 8_instruction: Schreibe innerhalb des Bausteins eine Funktion mit dem Namen „Prüfe Blüte, erzeuge Honig“. Deine Funktion soll prüfen, ob die Blüte 3, 2 oder 1 Nektar hat und den ganzen Nektar sammeln. Gehe dann weiter und erzeuge Honig.
      4-5 Bee Conditionals Assessment 1_instruction: 'Prüfung: Dieser Code ist fehlerhaft. Vervollständige die „sammle Nektar oder erzeuge Honig"- Funktion, dann rufe sie auf um den ganzen Nektar einzusammeln und den Honig zu erzeugen. Bedenke, dass lila Blüten 3, 2, oder 1 Nektar tragen können.'
      4-5 Bee Debugging 1_instruction: Diese Bausteine nerven mich wirklich. Kannst du sie in Ordnung bringen?
      4-5 Bee Debugging 10_instruction: Finde die Fehler und behebe sie.
      4-5 Bee Debugging 11_instruction: Zählt dies richtig?
      4-5 Bee Debugging 2_instruction: Hilf der Biene, Nektar zu holen und Honig zu erzeugen.
      4-5 Bee Debugging 3_instruction: Finde die Fehler und behebe sie.
      4-5 Bee Debugging 4_instruction: Diese Bausteine funktionieren nicht. Wie sieht das Muster aus?
      4-5 Bee Debugging 5_instruction: Etwas stimmt hier nicht ...
      4-5 Bee Debugging 6_instruction: Die lila Blüte hat eine unbekannte Menge Nektar. Bringe die Bausteine in Ordnung, so dass der ganze Nektar aus der Blüte herausgeholt wird.
      4-5 Bee Debugging 7_instruction: Der Funktion fehlt etwas ...
      4-5 Bee Debugging 8_instruction: Die Funktion ist gut, aber sie wird nicht richtig benutzt.
      4-5 Bee Debugging 9_instruction: Warum macht die Biene nicht genug Honig?
      4-5 Bee Debugging Assessment 1_instruction: 'Prüfung: Repariere den Code.'
      4-5 Bee Nested Loops 1_instruction: Benutze eine Schleife, um den gesamten Nektar zu sammeln.
      4-5 Bee Nested Loops 2_instruction: Sammle den ganzen Nektar von allen Blumen. Benutze eine verschachtelte Schleife.
      4-5 Bee Nested Loops 3_instruction: Sammle den gesamten Nektar, indem du den anfangs vorhandenen Code in eine geschachtelte Schleife einschließt.
      4-5 Bee Nested Loops 4_instruction: Sammle den gesamten Nektar jeder Blüte und erzeuge Honig bei jeder Honigwabe. Benutze eine verschachtelte Schleife.
      4-5 Bee Nested Loops 5_instruction: Sammle den gesamten Nektar, indem du eine geschachtelte Schleife erzeugst.
      4-5 Bee Nested Loops 6_instruction: Sammle den ganzen Nektar.
      4-5 Bee Nested Loops 7_instruction: Schließe diese Schleife in eine andere Schleife ein, so dass eine geschachtelte Schleife entsteht, und sammle so den gesamten Nektar der Blüten.
      4-5 Bee Nested Loops 8_instruction: 'Sammle den gesamten Nektar aus diesen Blüten, indem du eine Solange-Schleife verschachtelst. Ersetze den inneren Wiederholen-Baustein durch einen Solange-Baustein. '
      4-5 Bee Nested Loops 9_instruction: Sammle den gesamten Nektar aus diesen Blüten, indem du eine Solange-Schleife in eine Wiederholen-Schleife verschachtelst.
      4-5 Bee Nested Loops Assessment 1_instruction: 'Prüfung - Sammle den gesamten Nektar und erzeuge den gesamten Honig, indem du Schleifen benutzt.'
      4-5 Bee Nested Loops Rows_instruction: Sammle Nektar aus den Blütenreihe! Benutze eine verschachtelte Schleife.
      4-5 Maze 1 (copy 1)_instruction: Guter Mensch. Ich Zombie. Muss ... zur ... Sonnenblume.
      4-5 Maze 1_instruction: Guter Mensch. Ich Zombie. Muss ... zur ... Sonnenblume.
      4-5 Maze 10_instruction: Kannst du die Sonnenblume holen und dabei nur vier Bausteine benutzen?
      4-5 Maze 11_instruction: Kommst du zur Sonnenblume, indem du nur sechs Bausteine verwendest?
      4-5 Maze 12_instruction: Okay, das ist etwas anders. Kannst du es mit nur sechs Bausteinen?
      4-5 Maze 13_instruction: Bring mich zum Schwein!
      4-5 Maze 14_instruction: Bring mich zum Schwein! Benutze den Wiederholen-bis-Baustein.
      4-5 Maze 2 (copy 1)_instruction: Bringe den Zombie zur Sonnenblume, aber weiche der fleischfressenden Pflanze aus!
      4-5 Maze 2_instruction: Bringe den Zombie zur Sonnenblume, aber weiche der fleischfressenden Pflanze aus!
      4-5 Maze 3 (copy 1)_instruction: Muss ... zur ... Sonnenblume.
      4-5 Maze 3_instruction: Muss ... zur ... Sonnenblume.
      4-5 Maze 4 (copy 1)_instruction: 'Versuche es mit dem „Wiederholen"-Baustein, damit du weniger Bausteine benötigst ...'
      4-5 Maze 4_instruction: 'Versuche es mit dem „Wiederholen"-Baustein, damit du weniger Bausteine benötigst ...'
      4-5 Maze 5 (copy 1)_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 5_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 6 (copy 1)_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 6_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 7_instruction: Guter Mensch. Ich Zombie. Muss ... zur ... Sonnenblume.
      4-5 Maze 8_instruction: 'Benutze den „Wiederholen"-Baustein um den Zombie zur Sonnenblume zu bringen. (Meide die fleischfressenden Pflanzen!)'
      4-5 Maze 9_instruction: 'Erzeuge eine Schleife mit dem „Wiederholen bis"-Baustein.'
      4-5 Maze Assessment 1_instruction: 'Prüfung: Gehe zur Sonnenblume.'
      4-5 Maze Conditionals 1_instruction: 'Benutze den „Wiederholen"-Baustein, um den Zombie zur Sonnenblume zu bringen.'
      4-5 Maze Conditionals 2_instruction: 'Benutze den „Wiederholen"-Baustein, um den Zombie zur Sonnenblume zu bringen.'
      4-5 Maze Conditionals 3_instruction: 'Benutze den „Wenn"-Baustein, damit ich entscheiden kann, wann ich mich drehe. Hinweis: Du brauchst nur einen weiteren Baustein, aber sieh dir an, wie wir das machen, damit du es beim nächsten Mal alleine hinbekommst.'
      4-5 Maze Conditionals 4_instruction: 'Ok, das ist wie die letzte Aufgabe, aber erinnere dich daran, wie du den „Wenn"-Baustein und den „Wiederholen"-Baustein zusammen verwendet hast.'
      4-5 Maze Conditionals 5_instruction: 'Ich will Sonnenblume! Verwende einen „Wenn"-Baustein, um mich mit der geringsten Anzahl an Bausteinen zum Ziel zu bringen.'
      4-5 Maze Conditionals 6_instruction: 'Ich will Sonnenblume! Verwende einen „Wenn"-Baustein, um mich mit der geringsten Anzahl an Bausteinen zum Ziel zu bringen.'
      4-5 Maze Conditionals 7_instruction: Ok, lass uns das nochmal üben. Das ist wieder beinahe dasselbe, aber hüte dich vor den fleischfressenden Pflanzen!
      4-5 Maze Conditionals 8_instruction: Die „Wenn-Ansonsten“-Bausteine überprüfen eine Bedingung und führen dann entweder eine ODER eine andere Anweisung aus. Verwende diesen neuen Baustein, um mich zur Sonnenblume zu bringen.
      4-5 Maze Conditionals 9_instruction: 'Noch eine Übung mit dem „Wenn-Ansonsten" Baustein, schaffst du es mit dem ersten Versuch?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Benutze einen „Wiederholen bis"- und einen „Wenn-Ansonsten"- Baustein und bringe mich so mit der geringstmöglichen Anzahl an Bausteinen zur Sonnenblume.'
      4-5 Nested Loops 1_instruction: 'Vervollständige den Code, um diese Dreiecke zu zeichnen.  Das erste ist für dich erledigt.  Hinweis:  3 Dreiecke in einer 360- Grad- Drehung.'
      4-5 Nested Loops 10_instruction: Zeichne die letzte Sternenreihe dieser Flagge, indem du die verfügbaren Bausteine in Schleifen einschließt. Die Sterne sind 50 Pixel auseinander, aber vergiss nicht, dass die Sterne selbst 30 Pixel breit sind.
      4-5 Nested Loops 11_instruction: Kannst du diese 10 Quadrate dieses Gehsteigs mit einer verschachtelten Schleife zeichnen? Jedes Quadrat hat eine Seitenlänge von 30 Pixeln.
      4-5 Nested Loops 12_instruction: Kannst du diese 36 Dreiecke mit einer verschachtelten Schleife zeichnen?
      4-5 Nested Loops 2_instruction: 'Erstelle nun eine Schleife in einer weiteren Schleife um 10 Dreiecke zu zeichnen.  Dies nennt man eine verschachtelte Schleife.  Hinweis: Alle 10 Dreiecke ergeben eine 360-Grad-Drehung.  '
      4-5 Nested Loops 3_instruction: Male eine Sonne indem Du den Startbefehl in einer anderen Schleife benutzt. Dies nennt man eine verschachtelte Schleife.
      4-5 Nested Loops 5_instruction: Benutze den angegebenen Code in einer Schleife, um eine Windmühle zu erstellen.
      4-5 Nested Loops 6_instruction: Kannst Du ein Sechseck zeichnen, indem Du den Dreieck-Code in einer Schleife verwendest?
      4-5 Nested Loops 7_instruction: 'Führe dieses Design 10 Mal aus. Um wie viel Grad musst Du Dich bei jeder Wiederholung weiterdrehen? (Hinweis: Was ist 360 geteilt durch 10?)'
      4-5 Nested Loops 8_instruction: 'Führe dieses Design 6 Mal aus. Um wie viel Grad musst Du Dich bei jeder Wiederholung weiterdrehen? (Hinweis: Was ist 360 geteilt durch 6?)'
      4-5 Nested Loops 9_instruction: Zeichne die Zähne im Mund des Alligators!
      4-5 Nested Loops Assessment 1_instruction: Verwende eine verschachtelte Schleife um das Design fertigzustellen.
      4-5 While Loops 1_instruction: 'Bewege mich zu dem Loch und fülle es mit zwei Schaufeln voll Erde, indem du den „Füllen"-Baustein benutzt.'
      4-5 While Loops 2_instruction: 'Bewege mich zu dem Erdhaufen und entferne ihn mit fünf Schöpfern mit der Schaufel. Benutze dazu den „Entfernen"-Baustein.'
      4-5 While Loops 3_instruction: 'Bewege mich zum Haufen und entferne ihn vollständig, dann bewege mich zum Loch und fülle es komplett auf.  Hinweis:  Verwende so wenig Bausteine wie möglich.'
      4-5 While Loops 4_instruction: 'Wow, ich habe ein richtig tiefes Loch gefunden! Ich weiß nicht, wie viele Schaufeln Erde ich brauche.  Kannst du ein Programm schreiben, mit dem das Loch gefüllt wird, bis der Boden eben ist?  Hinweis:  Versuche es diesmal mit der Solange-Schleife.'
      4-5 While Loops 5_instruction: Wow, jetzt sind da zwei tiefe Löcher! Kannst du ein Programm schreiben, das beide voll füllt bis der Boden eben ist?
      4-5 While Loops 6_instruction: Wow, jetzt ist da ein großer Haufen Erde! Kannst du ein Programm schreiben, das alles entfernt, damit der Boden eben ist?
      4-5 While Loops 7_instruction: Wow, da sind jetzt drei Haufen Erde! Kannst du ein Programm schreiben, das jeden entfernt bis der Boden eben ist?
      4-5 While Loops 8_instruction: ' Hier ist ein wirklich tiefes Loch und ein wirklich großer Haufen Erde.  Wie viele Schaufeln voller Erde müssen bewegt werden, damit der Boden wieder eben ist?  Hinweis: Verwende die Solange-Schleife für beides.'
      4-5 While Loops Assessment 1_instruction: 'Hier sind viele Löcher und Erdhaufen.  Hilf mir, die Löcher zu füllen und die Haufen zu entfernen und den Boden wieder zu ebnen.'
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |
        Do
        This
      App Lab test_instruction: prüfe
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: 'Vervollständige den Code, damit diese Dreiecke gezeichnet werden. Das erste hast du erledigt. Hinweis: 3 Dreiecke in einer 360- Grad- Drehung.'
      Artist - Nested Loops 10_instruction: Zeichne die letzte Sternenzeile dieser Flagge, indem du die verfügbaren Bausteine in Schleifen einschließt. Die Sterne liegen 50 Pixel auseinander, aber vergiss nicht, dass die Sterne selbst 30 Pixel breit sind.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Verwende eine verschachtelte Schleife um das Design fertigzustellen.
      Auto Open Function Editor_instruction: 'Du kannst Funktionen innerhalb anderer Funktionen aufrufen! Ausgehend von der „Form" -Funktion, erstelle 3 Haus-Formen, von denen jede 20 Pixel größer als die vorherige sein soll. Beginne mit einer Länge von 50 Pixeln. Eine Zähl-Schleife könnte hier hilfreich sein. '
      Bee Recommended Blocks test_instruction: Eine lila Blume kann entweder 1 oder 0 Portion Nektar haben, aber du weißt nicht genau, welche. Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat. Überprüfe, ob die Nektarmenge gleich 1 ist, indem du einen „Wenn“-Baustein benutzt.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Diese Biene hat eine Menge Arbeit! Bemerkst du irgendwelche Muster, die du verwenden kannst, um deinen Code zu vereinfachen?
      Busy Bee_instruction: Diese Biene hat eine Menge Arbeit! Bemerkst du irgendwelche Muster, die du verwenden kannst, um deinen Code zu vereinfachen?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kannst du mich zu dem Schwein bringen, indem du 5 Bausteine benutzt?
      Course 4 2_instruction: 'Die Biene will jetzt nur Nektar. Erinnere dich: Nicht alle Objekte sind Blüten, also prüfe, damit nur aus Blüten Nektar gesammelt wird.'
      Course 4 Artist 1_instruction: 'Hilf mir, eine Box zu zeichnen. (Jede Linie ist 200 Pixel lang) '
      Course 4 Artist 10_instruction: |
        Klicke hier, um die Hinweise noch mal zu sehen!
        
        Hier ist der Code für eine interessante Form.  Was passiert, wenn du sie mehrmals wiederholst und zwischen jeder Wiederholung drehst?   Beachte, dass die Drehungen in dieser Form bis zu 420 Grad betragen, was bedeutet, dass sie zu dem Zeitpunkt, zu dem dein Künstler mit Zeichnen fertig ist, eine andere Richtung hat als zu dem Zeitpunkt, als du angefangen hast.  Diese neue Richtung ist genau 60 Grad rechts von dem Punkt, wo du angefangen hast.
      Course 4 Artist 11_instruction: 'Jetzt kommt eine Herausforderung!  Hier ist ein Design, das nur Blöcke benutzt, die dir bereits gezeigt wurden!  Schaffst du es, es ohne weitere Informationen wieder zu erstellen?  Habe keine Angst zu versuchen und dabei Fehler zu machen. Es wird nicht erwartet, dass es beim ersten Mal perfekt wird.  Möchtest du mehr Hinweise sehen?  Klicke hier!'
      Course 4 Artist 12_instruction: |
        Möchtest Du noch einmal das Ausgangsdesign oder die Hinweise ansehen?  Klicke hier!
        
        Ansonsten leg mit Deinem eigenen Design los!
      Course 4 Artist 13_instruction: 'Soll es noch weiter gehen?  Hier ist eine leere Fläche, die Du frei gestalten kannst!'
      Course 4 Artist 2_instruction: Kannst du diesen Code in einer Schleife erstellen, um das grau ausgeblendete Quadrat zu zeichnen?
      Course 4 Artist 20_instruction: 'Soll es noch weiter gehen?  Hier ist eine leere Fläche, die du frei gestalten kannst!'
      Course 4 Artist 3_instruction: Finde heraus, was passiert, wenn du diesen Code ausführst (oder drücke auf „Ausführen“ und probiere es aus). Wiederhole den Vorgang, bis die Zeichnung vollständig ist.
      Course 4 Artist 4_instruction: 'Wie viel Grad hat ein Kreis?  Trag in den Wiederholungsbaustein die Zahl ein, um einen Farbenkreis zu erstellen.'
      Course 4 Artist 5_instruction: 'Zeichne die andere Hälfte dieses Designs, sodass es symmetrisch ist. Die Dreiecke sind gleichseitig und 50 Pixel lang. Hinweis: Eventuell musst du den Code mehrmals ausführen, um alle Bausteine zu finden, die du ergänzen musst.'
      Course 4 Artist 6_instruction: 'Vervollständige den Code, um diese Dreiecke zu zeichnen. Hinweis: Es gibt 3 Dreiecke innerhalb der 360-Grad-Drehung ... wie oft passt 3 in 360?'
      Course 4 Artist 7_instruction: 'Erstelle nun eine Schleife in einer weiteren Schleife um 10 Dreiecke zu zeichnen. Dies nennt man eine verschachtelte Schleife. Hinweis: Alle 10 Dreiecke ergeben eine 360-Grad-Drehung.  '
      Course 4 Artist 8_instruction: Zeichne diese Sonne, indem du diesen ganzen Code-Baustein mehrmals durchlaufen lässt.
      Course 4 Artist 8a_instruction: |
        Erinnerst du dich an diese Form?  Jetzt kannst du sie bauen, bekommst zum Anfang jedoch keine Bausteine von uns!
        Hinweis: Es gibt 3 Dreiecke innerhalb der 360-Grad-Drehung ... wie oft passt 3 in 360?
      Course 4 Artist 9_instruction: 'Durchlaufe dieses Design 10 Mal und gehe dabei sicher, dass nach jeder gezeichneten Figur gedreht wird. Ein kleiner Tipp, damit du weißt, wie weit gedreht werden muss: Was ist 360 geteilt durch 10?'
      Course 4 Artist Binary 1_instruction: |
        Mit dieser Funktion hier kannst den Bauer auf Feldern mit einer ‚0‘ drehen, während er sich von links nach rechts und von oben nach unten bewegt.  Der Künstler wird die Quadrate ausfüllen, wenn er eine 1 sieht und die Quadrate ignorieren, wenn er eine 0 sieht.
        
        Führe diesen Code aus, um zu sehen, wie der Künstler die Binärmethode anwendet um dieses Muster auszumalen.
      Course 4 Artist Binary 1a_instruction: |
        Mit dieser Funktion hier kannst den Bauer auf Feldern mit einer ‚0‘ drehen, während er sich von links nach rechts und von oben nach unten bewegt.  Der Künstler wird die Quadrate ausfüllen, wenn er eine 1 sieht und die Quadrate ignorieren, wenn er eine 0 sieht.
        
        Führe diesen Code aus, um zu sehen, wie der Künstler die Binärmethode anwendet um dieses Muster auszumalen.
      Course 4 Artist Binary 2_instruction: Welche dieser Binärfolgen könntest du 8 Mal durchlaufen lassen, um dieses Bild zu malen?
      Course 4 Artist Binary 3_instruction: Kannst du dieses Muster zeichnen, indem du eine dreistellige Binärzeichenfolge durchlaufen lässt?
      Course 4 Artist Binary 4_instruction: Jede dieser Binärzeichenfolgen steht für eine Reihe dieses Bildes. Kannst du sie so neu anordnen, dass ein Smiley-Gesicht, anstatt eines traurigen Gesichts, gezeichnet wird?
      Course 4 Artist Binary 5_instruction: Welche sechsstellige Binärzeichenfolge wird dieses Bild zeichnen, wenn sie 11 Mal wiederholt wird?
      Course 4 Artist Binary 6_instruction: Was ist die kürzeste binäre Zeichenfolge, die du wiederholen kannst, um dieses Bild zu zeichnen?
      Course 4 Artist Binary 7_instruction: Stelle diese Zeichnung fertig.
      Course 4 Artist Binary Free Play 2_instruction: 'Freies Spiel: Hier ist eine leere Leinwand für dich zum Zeichnen.  Viel Spaß!'
      Course 4 Artist Binary Free Play 2a_instruction: |
        Hier ist eine Leinwand mit einer höheren Auflösung um darauf zu zeichnen - 16 Pixel mal 16 Pixel!
        
        Siehst du, was passiert, wenn wir anfangen mit den Bits kreativ zu werden?
      Course 4 Artist Binary Free Play 2b_instruction: Klicke hier um die Hinweise zu sehen.
      Course 4 Artist Binary Free Play_instruction: 'Freies Spiel: Zeichne mit binären Zeichenfolgen, was auch immer du möchtest!'
      Course 4 Artist Binary pre1_instruction: |
        Bei der binären Schreibweise werden Informationen mit nur zwei Optionen repräsentiert.  Hier nutzen wir die Option „aus“ (dargestellt durch die Nummer 0) und „an“ (dargestellt durch die Nummer 1).
        
        Wir haben dir ein Gitter aus „Pixeln“ zur Verfügung gestellt, durch das du laufen kannst und in dem du Designs erstellen kannst, indem du nur bestimmte Quadrate anschaltest.  Kannst du den Künstler „01010101“ in Binärcode in der ersten Reihe zeichnen lassen?
      Course 4 Artist Binary ryan_instruction: |
        Bei der binären Schreibweise werden Informationen mit nur zwei Optionen repräsentiert.  Hier nutzen wir die Option „aus“ (dargestellt durch die Nummer 0) und „an“ (dargestellt durch die Nummer 1).
        
        Wir haben dir ein Gitter aus „Pixeln“ zur Verfügung gestellt, durch das du laufen kannst und in dem du Designs erstellen kannst, indem du nur bestimmte Quadrate anschaltest.  Kannst du den Künstler „01010101“ in Binärcode in der ersten Reihe zeichnen lassen?
      Course 4 Artist For  Functions 10_instruction: 'Gehen wir mal einen Schritt weiter: Kannst du mit Hilfe der Funktion „Zeichne ein Quadrat" einen Stern zeichnen? Viel Erfolg!'
      Course 4 Artist For  Functions 11_instruction: 'Gehen wir mal einen Schritt weiter: Kannst du mit Hilfe der Funktion „Zeichne ein Quadrat" einen Stern zeichnen? Viel Erfolg!'
      Course 4 Artist For Loops 1_instruction: 'Zeichne dieses Dreieck, das 50 Pixel groß ist. Hinweis: Benutze einen Wiederholen-Baustein.'
      Course 4 Artist For Loops 10_instruction: Zeit für freies Spiel! Zeichne, was auch immer du möchtest mit den Bausteinen, die du soeben gelernt hast, zu benutzen.
      Course 4 Artist For Loops 11_instruction: 'Erinnerst du dich an eine frühere Phase, als wir eine Variable genutzt haben, um die Zahl von Seiten in einer Form zu kontrollieren? Wir machen nun dasselbe mit der „Zähler“-Variablen. Dieses Muster beginnt mit einem Dreieck und ergänzt jeweils eine Seite, bis es ein Zehneck zeichnet (10 Seiten). Jede Seite sollte 100 Pixel lang sein. Hinweis: 360 geteilt durch die Zahl von Seiten, die eine Form hat, ist die Gradzahl, um die du drehen musst.'
      Course 4 Artist For Loops 11a_instruction: |
        Zähle alles zusammen!  Nutze dein Wissen über „Zähle mit“-Schleifen und den „Zähler“, schaffe diese Zeichnung, bei der jede Form zwei Seiten mehr als die vorige hat.  Stelle sicher, dass jede Seite zehnmal so lang ist wie die Anzahl der Seiten im Vieleck.
        
        Dir wurde nur sehr wenig Code bereitgestellt.
      Course 4 Artist For Loops 12_instruction: 'Das sah ziemlich cool aus, aber jetzt möchte ich jede Form neben der letzten zeichnen. Jede Seite hat eine Länge von 20 Pixeln. Benutze einen Sprungblock, um nach jeder Figur 40 Pixel weiter zu springen. '
      Course 4 Artist For Loops 13_instruction: Hmm, die Figuren werden jedes Mal größer! Haben wir dieses Problem nicht schon mal mit Variablen gelöst? Wie können wir die Zähler-Variable dazu einsetzen, die Seiten kürzer zu machen, je mehr Seiten es gibt? Versuche (100 / Zähler) Pixel weiter zu springen, anstatt einen festen Abstand einzuhalten.
      Course 4 Artist For Loops 14_instruction: Es gibt einen hübschen Effekt, wenn du vom notwendigen Winkel ein wenig abweichst. Versuche mal, einen Teil des Codes vom letzten Level zu verwenden, aber drehe um 89 Grad, um diese verdrehte Quadratspirale zu erzeugen.
      Course 4 Artist For Loops 15_instruction: 'Freies Spiel: Versuche, selbst ein paar Zeichnungen mithilfe von „Zähle mit“-Schleifen zu machen. Wir haben auch ein paar nützliche Variablen für dich hinzugefügt.'
      Course 4 Artist For Loops 2_instruction: 'Ich habe den Code zum Zeichnen eines Dreiecks in eine „Zähle mit“-Schleife eingefügt, die in Zehnerschritten von 50 bis 100 zählt.  HINWEIS: Überprüfe den Code noch einmal, bevor du auf „Ausführen“ gehst.'
      Course 4 Artist For Loops 3_instruction: 'Nutze das vorherige Puzzle als Vorlage, um dieses hier zu ergänzen.  Das kleinste Dreieck hat eine Seitenlänge von 20 Pixeln, das größte hat Seiten mit 200 Pixeln und jedes Dreieck ist 20 Pixel größer als das vorherige. '
      Course 4 Artist For Loops 4_instruction: 'Wie würdest du das Erlernte anwenden, um diese Rechtecke zu zeichnen? Das kleinste Rechteck ist 15 Pixel lang, das größte ist 300 Pixel lang, und jedes Rechteck ist 15 Pixel länger als sein Vorgänger. '
      Course 4 Artist For Loops 5_instruction: 'Gute Arbeit beim letzten Puzzle! Verwende den Variablen-Block „Zähler“ nochmals, um dieses tolle Bild zu zeichnen. '
      Course 4 Artist For Loops 6_instruction: Freies Spiel! Benutze eine „Zähle mit“-Schleife, um eine Form deiner Wahl immer größer werden zu lassen.
      Course 4 Artist For Loops 6a_instruction: Nimm drei kleine Änderungen an dem Code aus dem vorherigem Level vor, um dies zu erreichen!
      Course 4 Artist For Loops 7_instruction: 'Was geschieht wenn du „Wiederholen 3" aus diesem Algorithmus entfernst, aber die „Bewegen"- und „Drehen"- Blöcke in der Zähle-mit-Schleife beibehältst? In diesem spiralförmigen Dreieck ist jede Seite 20 Pixel länger als die vorhergehende.'
      Course 4 Artist For Loops 8_instruction: |
        Eine kleine Änderung am Code des letzten Bildes kann dieses Bild erzeugen. Kannst du herausfinden, was für eine Änderung es ist?
        
        Hinweis:  Du musst etwas entfernen!
      Course 4 Artist For Loops 8a_instruction: Eine kleine Änderung am Code des letzten Bildes kann dieses Bild erzeugen. Kannst du herausfinden, was für eine Änderung es ist?
      Course 4 Artist For Loops 9_instruction: Kannst du eine Spirale erstellen? Bewege dich vorwärts von 1 bis 75 Pixeln und erhöhe dabei jedes mal um 1 Pixel.
      Course 4 Artist For Loops Challenge_instruction: |
        Weißt du noch wie du alles verwenden musst, was du über das Erstellen von diesem Bild gelernt hast?
        
        Brauchst du ein Hinweis? Klicke hier!
      Course 4 Artist For Loops inspire_instruction: |
        Freies Spiel Inspiration: Du hast jetzt alles gelernt, um so ein Muster zu machen! Wenn dich das Bild inspiriert, versuche etwas Ähnliches zu machen. Wenn nicht, mach etwas ganz alleine.
        
        Brauchst du ein Hinweis? Klicke hier!
      Course 4 Artist Functions 1_instruction: Kannst du ein Quadrat mit der Seitenlänge 100 zeichnen, indem du eine Schleife verwendest?
      Course 4 Artist Functions 10_instruction: Welchen Block musst du hinzufügen, um das Dreieck auf das Quadrat zu setzen?
      Course 4 Artist Functions 11_instruction: 'Schau dir diesen Code an, der einen Würfel malt - kannst ihn in eine Funktion namens „Zeichne einen Würfel" verschieben?'
      Course 4 Artist Functions 12.1_instruction: Erstelle eine Funktion namens „Zeichne ein Achteck 20“, die ein Achteck mit einer Seitenlänge von 20 Pixeln zeichnet.
      Course 4 Artist Functions 12_instruction: Wiederhole die Quadratfunktion, um eine Linie zu zeichnen.
      Course 4 Artist Functions 13.1_instruction: |
        Nun lass uns eine Funktion namens „Sprung nach oben rechts" machen, die die Figur nach oben rechts auf das Achteck verschiebt, sodass du das Muster, das du eben gezeichnet hast, beenden kannst.
        
        Hinweis:  Um dich in die obere rechte Ecke zu bekommen, versuche in einem Muster zu springen, das nur 3/8 des Achtecks ausmacht.
      Course 4 Artist Functions 13_instruction: Probiere unsere neue Funktion „Zeichne eine Linie der Quadrate“ aus. Schau dir den Funktionsblock an und sieh wie er aufgebaut ist. Klicke auf „Ausführen“, wenn du bereit für das nächste Puzzle bist.
      Course 4 Artist Functions 14.1_instruction: 'Nun lass uns eine Funktion namens „Sprung nach oben rechts" machen, die die Figur nach oben rechts auf das Achteck verschiebt, sodass du das Muster, das du eben gezeichnet hast, beenden kannst.'
      Course 4 Artist Functions 14_instruction: 'Du machst es großartig! Lass uns deine neue Funktion „Zeichne eine Linie der Quadrate" benutzen, um eine Form eines Quadrates zu zeichnen. Denke daran, dass jedes Quadrat 40 Pixel lang ist.'
      Course 4 Artist Functions 15_instruction: 'Gehen wir mal einen Schritt weiter: Kannst du mit Hilfe der Funktion „Zeichne ein Quadrat" einen Stern zeichnen? Viel Erfolg! Hinweis: Du musst um 144 Grad drehen.'
      Course 4 Artist Functions 2_instruction: 'Kannst du 3 Quadrate im Abstand von 20 Pixeln zeichnen? Hinweis: Jedes Quadrat ist 100 Pixel lang.'
      Course 4 Artist Functions 3_instruction: 'Benutze die „Zeichne ein Quadrat“-Funktion. Kannst du dieses Bild zeichnen? Hinweis: Die Quadrate sind jeweils 120 Pixel voneinander entfernt.'
      Course 4 Artist Functions 4_instruction: 'Bist du bereit, deinen eigenen „Funktionen“-Baustein zu erstellen? Klicke auf den „Funktionen“-Baustein in der Toolbox, nenne ihn „Zeichne ein Dreieck“. Dann baue aus den Aktion- und Schleifenböcken ein Dreieck wie zuvor. Dann klicke auf Speichern und Schließen in der oberen rechten Ecke. Hinweis: Zeichne ein Dreieck, das 100 Pixel lang ist. Viel Erfolg!'
      Course 4 Artist Functions 5 OLD_instruction: 'Nun versuche, diese zwei Funktionen zu nutzen, um ein Haus zu zeichnen - was muss in diesem Code korrigiert werden, um das Haus richtig zu zeichnen?'
      Course 4 Artist Functions 5_instruction: 'Benutze die „Zeichne ein Quadrat“-Funktion. Kannst du dieses Bild zeichnen? Hinweis: Die Quadrate sind jeweils 120 Pixel voneinander entfernt.'
      Course 4 Artist Functions 6_instruction: Welchen Block musst du hinzufügen, um das Dreieck auf das Quadrat zu setzen?
      Course 4 Artist Functions 7_instruction: Kannst Du eine Linie der Quadrate zeichnen, wenn du die Quadrat-Funktion benutzt? Jedes Quadrat ist 40 Pixel lang.
      Course 4 Artist Functions 8_instruction: 'Kriegst du langsam heraus, wie du die Funktionsbausteine benutzt? Lass uns dieses Viereck so verändern, dass es 200 Pixel groß ist. Hinweis: Klicke auf „bearbeiten“ („edit“) um die Größe von „zeichne ein Viereck“ („draw a square“) im Editor zu ändern. Vergiss nicht auf „speichern und schließen“ („save and close“) zu klicken, um wieder aus dem Editor heraus zu kommen. '
      Course 4 Artist Functions 9_instruction: "Wir haben dir den meisten Code gegeben, um eine Funktion zu bauen. Jedoch sieht es so aus als ob etwas fehlt. Kannst du den Funktionsbaustein vervollständigen?\\t"
      Course 4 Artist Functions challenge_instruction: Klicke hier, um die Hinweise noch mal zu sehen!
      Course 4 Artist Functions Inspiration_instruction: Klicke hier, um die Hinweise noch mal zu sehen!
      Course 4 Artist Functions inspire_instruction: Klicke hier, und lasse dich noch einmal von dem Bild inspirieren.
      Course 4 Artist Inspire_instruction: |
        Möchtest Du noch einmal das Ausgangsdesign oder die Hinweise ansehen?  Klicke hier!
        
        Ansonsten leg mit Deinem eigenen Design los!
      Course 4 Artist Params 1_instruction: Lass uns eine Funktion hinzufügen, die ein Quadrat mit 50 Pixel langen Seiten zeichnet.
      Course 4 Artist Params 10_instruction: 'Du kannst Funktionen innerhalb anderer Funktionen aufrufen! Ausgehend von der „Form" -Funktion, erstelle 3 Haus-Formen, von denen jede 20 Pixel größer als die vorherige sein soll. Beginne mit einer Länge von 50 Pixeln. Eine Zähl-Schleife könnte hier hilfreich sein. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Benutze deine „Windrad“-Funktion, um alle Formen zu zeichnen. Die Seitenlänge jedes Bildes ist 50.
      Course 4 Artist Params 13_instruction: 'Freies Spiel: Hier sind die Funktionen, die du geschrieben hast, und ein paar mehr für dich zum Spielen. Zeichne etwas Tolles!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Toll! Kannst Du jedes dieser Dreiecke mit dieser neuen Funktion zeichnen? Das erste ist 25 Pixel lang, das zweite ist 50, das dritte ist 75. '
      Course 4 Artist Params 4_instruction: Kannst du eine neue Funktion namens Quadrat hinzufügen? Sie sollte auch von einem Längenparameter ausgehen, genau wie das Dreieck. Zeichne dieses Mal 3 Quadrate mit einer Länge von 25, 50 und 75 Pixeln, die jeweils 100 Pixel voneinander entfernt sind.
      Course 4 Artist Params 5_instruction: 'Benutze deine beiden neuen Funktionen, um das Bild zu zeichnen. Leichter geht es, wenn du eine Schleife mit dem Parameter „Zähler“ („counter“) nutzt. '
      Course 4 Artist Params 6_instruction: 'Lass uns diese „Zeichne eine Figur“-Funktion ändern. Sie hat bereits einen Parameter „Länge“. Wir wollen jetzt einen neuen Parameter für die Zahl der Seiten hinzufügen. Dazu muss sich der Künstler jeweils um 360 Grad geteilt durch die Anzahl der Seiten drehen. Hinweis: Die Seitenlänge eines Dreiecks ist 100 Pixel, eines Sechsecks ist 25 Pixel und eines Quadrats ist 50 Pixel. '
      Course 4 Artist Params 7_instruction: 'Kannst Du diese Figuren zeichnen? Fülle einfach die „???“ aus! Das Quadrat und das Dreieck haben eine Kantenlänge von 100, das Sechseck 75 Pixel. '
      Course 4 Artist Params 8_instruction: 'Kannst du herausfinden, wie man diese Form zeichnet? Kommst Du dahinter, wie man diese Figur malt? Hier ist ein Tipp: Mach eine neue Funktion, die ein Sechseck zeichnet. '
      Course 4 Artist Params 9_instruction: Kannst du dich noch daran erinnern, wie wir die Zählschleife verwendet haben, bei der eine innere Schleife entfernt wurde? Lass uns doch mal die „Zeichne Quadrat“-Funktion mit Parametern für „Seiten“ und „Länge“ ausprobieren. Kannst du diese Figuren wieder erstellen? Der Quadratzähler sollte 5/100/5 sein, der Dreieckzähler sollte 10/100/10 und das Sechseck 2/100/2 sein.
      Course 4 Artist Var 9_instruction: 'Hier ist der Algorithmus zum Zeichnen eines Dreiecks. Verändere ihn so, dass er die Variable „Seiten“ benutzt. Ersetze die Zahl 3 durch die „Seiten“-Variable. Hinweis: Denke daran, den „Stelle Seiten auf“-Baustein zu benutzen.'
      Course 4 Artist Vars 1_instruction: Kannst du mir helfen, ein gleichseitiges Dreieck zu zeichnen? Es soll auf jeder Seite genau 100 Pixel lang sein.
      Course 4 Artist Vars 10_instruction: Dieser Algorithmus hier zeichnet ein großes Dreieck aus lauter kleinen Dreiecken. Wie muss der Algorithmus geändert werden, damit er die „Seiten“-Variable benutzt, um alle Dreiecke zu zeichnen? Schau dir den Code an und ersetze jede 3 durch eine „Seiten“-Variable. Benutze auch den „Setze Seiten“-Baustein.
      Course 4 Artist Vars 11_instruction: Hier ist etwas komplizierterer Code, der dieselben Konzepte verwendet wie das letzte Rätsel. Welchen Wert muss die „Seiten“-Variable diesmal bekommen, um die dargestellte Figur aus Quadraten zu zeichnen?
      Course 4 Artist Vars 12_instruction: Stelle die „Seiten“-Variable auf 5 ein. Je mehr Seiten wir zu dem Algorithmus hinzufügen, desto größer wird das Muster. Beachte, dass es noch die Variable „Länge“ gibt. Wir können dies immer dort verwenden, wo wir ein „Schritt vorwärts“ haben. Stelle die Variable für die Länge dieser Form auf 75 ein!
      Course 4 Artist Vars 13_instruction: |
        Wenn eine Form viele Seiten hat, muss jede Seite kürzer sein, wenn du willst, dass das Muster vollständig auf den Bildschirm passt.
        Lass uns nun den Algorithmus für dieses tolle Muster erneuern, aber statt einer manuellen Einstellung die „Länge“-Variable nutzen. Lass uns einen Mathematik-Baustein mit der „Seiten“-Variablen darin verwenden, um sicherzustellen, dass jede Form richtig passt. Der Umfang jedes Vielecks beträgt 300 Pixel.
        Brauchst du ein paar Hinweise?  Klicke hier!
      Course 4 Artist Vars 14_instruction: |
        Freies Spiel: Probiere es aus! Nun ist dein Algorithmus in eine weitere Schleife eingebettet. Experimentiere, indem du die zwei Variablen auf unterschiedliche Werte einstellst, um coole Muster zu zeichnen.
        
        Mehr Effekte kannst Du natürlich auch mit Farbe erzielen!  Benutze zufällige Farben in Schleifen und schau dir an, wie sich dadurch dein Design ändert.
      Course 4 Artist Vars 2_instruction: Statt „um 150 vorwärts bewegen“ verwendet der „Bewegen“-Baustein jetzt eine Variable namens „Länge“. Kannst du „Länge“ auf 150 einstellen, um dieses neue Dreieck zu zeichnen?
      Course 4 Artist Vars 3_instruction: 'Diese Schleife hier zeichnet ein Quadrat. Es fehlt allerdings noch etwas. Kannst du die Variable „Länge“ verwenden, um die richtige Länge der Seiten herauszubekommen? '
      Course 4 Artist Vars 4_instruction: Nun möchte ich ein Rechteck zeichnen, das doppelt so lang wie breit ist. Dazu haben wir eine Variable namens „Breite“, die auf 100 eingestellt werden muss. Kannst Du die Mathematik-Bausteine verwenden, um den Code zu vervollständigen?
      Course 4 Artist Vars 5_instruction: 'Lege mit der Variablen "Seiten" die Anzahl der Schleifendurchläufe fest.'
      Course 4 Artist Vars 6_instruction: |
        Hier ist Code, der jedes gleichseitige Polygon (Vieleck) zeichnen kann. Er benutzt eine neue Variable namens „Seiten“, die auf 4 eingestellt wurde. Kannst Du diese „Seiten“-Variable (zusammen mit dem Mathematik-Baustein) verwenden, um jeweils um den korrekten Winkel zu drehen - egal aus wie vielen Seiten das Polygon bestehen soll?
        
        Du kannst hier klicken, um den Hinweis nochmals zu sehen!
      Course 4 Artist Vars 7_instruction: |
        Jetzt wende dein Wissen vom letzten Rätsel an, um mithilfe der Seiten-Variable dieses Sechseck zu erschaffen.
        
        Merkst du, dass du nur durch Ändern eines einzigen Wertes mit demselben Code ein Dreieck, Quadrat, Fünfeck oder Achteck zeichnen kannst?
      Course 4 Artist Vars 8_instruction: 'Freies Spiel: Experimentiere mit der Anzahl Seiten, die diese Form hat. Schaffst du es, den Algorithmus so anzupassen, dass die Größe der Form unabhängig von der Zahl der Seiten immer dieselbe ist? Hinweis: Wenn du die Ausgangslänge durch die Zahl der Seiten teilst, nimmt die Länge der Seiten mit zunehmender Seitenzahl ab.'
      Course 4 Artist Vars 9_instruction: Verwende bei diesem Algorithmus die „Seiten“-Variable statt einer festen Zahl, um ein Dreieck zu zeichnen. Denke daran, den „Stelle Seiten auf“-Baustein zu benutzen.
      Course 4 Bee 1_instruction: 'Die Biene weiß nicht, was sich unter der Wolke verbirgt! Benutze den „Wenn“-Baustein, um nachzusehen und nur dann Nektar zu sammeln, wenn eine Blume unter der Wolke ist. '
      Course 4 Bee 2_instruction: Verwende den „Wenn/ansonsten“-Baustein, um bei jedem Objekt zu prüfen, ob es sich um eine Blume oder Honigwabe handelt. Wenn es eine Blume ist, sammle Nektar ... ansonsten, mache Honig!
      Course 4 Bee 3_instruction: 'Das unbekannte Objekt ist entweder eine Blume oder eine Bienenwabe. Benutze den „Wenn/ansonsten"- Baustein, um Nektar zu machen, wenn es eine Blüte ist, ansonsten mache Honig (denn dann wäre es eine Honigwabe).'
      Course 4 Bee 4_instruction: 'Diese lila Blüte kann entweder 3, 2 oder 1 Nektar haben. Hier ist ein „wenn/ansonsten“-Baustein mit einem weiteren „wenn/ansonsten“- Baustein kombiniert, damit eine „wenn/ansonsten-wenn/ansonsten“ - Aussage erzeugt wird. Vervollständige die Lösung, um eine unbekannte Menge Nektar zu sammeln.'
      Course 4 Bee 5_instruction: Diese lila Blüte kann entweder 3, 2 oder 1 Nektar haben. Füge einen „Wenn/ansonsten“-Baustein hinzu, um einen „Wenn/ansonsten-wenn/ansonsten“-Baustein zu erhalten. Vervollständige die Lösung, um eine unbekannte Menge Nektar zu sammeln.
      Course 4 Bee 6_instruction: Diese lila Blüte kann entweder 3, 2 oder 1 Nektar haben. Stelle einen „Wenn/ansonsten-wenn/ansonsten“-Baustein her, um die unbekannte Menge Nektar einzusammeln.
      Course 4 Bee 7_instruction: Wende alles an, was du bisher gelernt hast, um den gesamten Nektar zu einzusammeln. Diese lila Blüte kann entweder 3, 2 oder 1 Nektar haben.
      Course 4 Bee For Loops 1_instruction: Benutze eine Schleife, um den Nektar von jeder Blume zu sammeln.
      Course 4 Bee For Loops 10_instruction: Wenn Deine Schleife herunterzählt, wird ein Wert bei jedem Schleifendurchlauf von der Zählervariable abgezogen. Wie hoch sollte dieser Wert sein, um 9, dann 6 und später 3 mal Nektar zu sammeln?
      Course 4 Bee For Loops 11_instruction: Was stimmt mit dieser Schleife nicht? Schaue, ob du das repariert bekommst und lass die Biene allen Nektar sammeln.
      Course 4 Bee For Loops 2_instruction: Hier ist eine neue Art von Schleife, die „Zähle mit“-Schleife. In diesem Fall zählt sie von 1 bis 5 und führt die Anweisungen innerhalb der Schleife jedes Mal aus. Lass die Biene den Nektar einsammeln.
      Course 4 Bee For Loops 3_instruction: Diese Aufgabe kannst du mit einer „Zähle mit“-Schleife lösen, die im 1er-Schritt von 1 bis 3 zählt. Sammle etwas Nektar ein.
      Course 4 Bee For Loops 4_instruction: Sammle den ganzen Nektar von allen Blumen. Ich frage mich, ob es einen einfacheren Weg gibt, dies zu tun ...
      Course 4 Bee For Loops 5_instruction: 'Ah, die Schleife macht dies viel einfacher! Mit der „Zähler“-Variablen der „Zähl mit“-Schleife wird der „Nimm Nektar“-Baustein genauso oft ausgeführt, wie die Schleife. Puh! Das sind eine Menge Schleifen! Alles was du benötigst steht schon da. Schau dir an, wie die Anweisungen zusammengesetzt sind und führe das Programm aus, um zu sehen, wie es funktioniert. '
      Course 4 Bee For Loops 6_instruction: 'Du kannst auch eine „Zähle mit“- Schleife zum Runterzählen verwenden. Versuche, den Nektar durch das Runterzählen von 5 bis 1 in Einzerschritten zu sammeln.'
      Course 4 Bee For Loops 7_instruction: 'Mit der Zählvariablen der „Zähle mit"-Schleife kannst du die horizontale Entfernung festlegen.'
      Course 4 Bee For Loops 8_instruction: Wie kann mit der Schleifenvariablen die Bewegung und das Einsammeln von Nektar gesteuert werden?
      Course 4 Bee For Loops 9_instruction: 'Die letzte Zahl in deiner „Zähle mit"-Schleife ist die Schrittweite. Bei jedem Schleifendurchlauf wird der Zähler um die Schrittweite herauf- oder herabgesetzt. Sammle die Blumen ein, indem du eine Schrittweite von 2 benutzt.'
      Course 4 Bee Loops 5 NEW_instruction: Hier sind drei Blumen. Kannst du das Anweisungsmuster finden, das du dreimal wiederholen musst, um den Nektar mit möglichst wenigen Bausteinen zu sammeln?
      Course 4 Bee Loops 5a NEW_instruction: 'Jetzt solltest Du Wiederholungen verwenden, um den Bienen beim Einsammeln des Nektars auf ihrem Weg zur Bienenwabe zu helfen. Benutze so wenige Bausteine, wie möglich!  Vergiss nicht am Schluss Honig zu erzeugen!'
      Course 4 Bee Params 1_instruction: 'Die „Nimm 3 Nektar"-Funktion lässt die Biene sich drehen, zum Nektar gehen und zurückkehren. Setze eine Programmablauf zusammen, der mit dieser Funktion den ganzen Nektar einsammelt.'
      Course 4 Bee Params 2_instruction: 'Ändere die „Nimm 3 Nektar"-Funktion so, dass sie mich nach rechts, statt nach links zu den Blumen drehen lässt.'
      Course 4 Bee Params 3 (copy 1)_instruction: Jetzt sind auf beiden Seiten Blumen! Mit einem Parameter kann die Funktion vielleicht so angepasst werden, dass sie für Blumen auf beiden Seiten verwendet werden kann. Ich habe den Parameter „Richtung“ zu der Funktion hinzugefügt. Hat der Parameter „Richtung“ den Wert 0, dann drehe ich mich nach links, beim Wert 1 drehe ich mich nach rechts.
      Course 4 Bee Params 3_instruction: 'Jetzt sind auf beiden Seiten Blumen! Für dich stehen die Variablen „links“ und „rechts“ zur Verfügung. Die Funktion „Nimm 3 Nektar“ wurde außerdem um den Parameter „Richtung“ ergänzt. Ändere die Funktion „Nimm 3 Nektar“ so, dass die Biene sich in die richtige Richtung dreht, wenn ihr die Variablen „links“ oder „rechts“ übergeben werden.  '
      Course 4 Bee Params 4 (copy 1)_instruction: 'Benutze die neue Funktion um alle Blumen zu sammeln. Denke an: 0 = links und 1 = rechts.'
      Course 4 Bee Params 4 - Two WhenRun_instruction: Benutze die neue Funktion um alle Blumen zu sammeln. Verwende die „links“ und „rechts“-Variablen.
      Course 4 Bee Params 4 backup_instruction: Wäre es nicht schön, den ganzen Nektar mit nur einer Funktion zu sammeln? Versuche mit dem Parameter „Nektarportionen“ die Menge an Nektar, die gesammelt werden soll, zu steuern. Vielleicht möchtest du der Funktion auch einen neuen Namen geben?
      Course 4 Bee Params 4_instruction: Benutze die neue Funktion, um Nektar von allen Blumen zu sammeln. Verwende die „links“ und „rechts“-Variablen.
      Course 4 Bee Params 5_instruction: 'Lass uns von vorne beginnen - erstelle eine neue Funktion mit einem Parameter für die Richtung. Gib ihr die Bezeichnung: „Nimm 5 Nektar".'
      Course 4 Bee Params 6 (copy 1)_instruction: Benutze die neue Funktion, um allen Nektar zu sammeln.
      Course 4 Bee Params 6_instruction: Wäre es nicht schön, den ganzen Nektar mit nur einer Funktion zu sammeln? Versuche mit dem neuen Parameter „Nektarportionen“ die Menge an Nektar, die gesammelt werden soll, zu steuern. Vielleicht möchtest du der Funktion auch einen neuen Namen geben?
      Course 4 Bee Params 7 (copy 1)_instruction: Benutze die neue Funktion, um allen Nektar zu sammeln.
      Course 4 Bee Params 7_instruction: Benutze die neue Funktion, um allen Nektar zu sammeln.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, jetzt kümmern wir uns noch um Honig. Wie kannst Du Deine Funktion anpassen, um entweder Nektar zu bekommen oder Honig zu machen?
      Course 4 Bee Params 8 clone 3_instruction: Oooh, jetzt kümmern wir uns noch um Honig. Wie kannst Du Deine Funktion anpassen, um entweder Nektar zu bekommen oder Honig zu machen?
      Course 4 Bee Params 8 Clone_instruction: Oooh, jetzt kümmern wir uns noch um Honig. Wie kannst Du Deine Funktion anpassen, um entweder Nektar zu bekommen oder Honig zu machen?
      Course 4 Bee Params 8 new_instruction: Oooh, jetzt kümmern wir uns noch um Honig. Wie kannst Du Deine Funktion anpassen, um entweder Nektar zu bekommen oder Honig zu machen?
      Course 4 Bee Params 8_instruction: 'Herausforderung: Jetzt kümmern wir uns noch um Honig. Ändere deine Funktion so, dass sie die Anzahl der Honig- und Nektarportionen verwendet.  Wie kannst du mit der Anzahl entscheiden, was zu tun ist?'
      Course 4 Bee Params Ex_instruction: Benutze die neue Funktion, um allen Nektar zu sammeln.
      Course 4 Binary 1_instruction: "Mit dieser Funktion hier kannst den Bauer auf Feldern mit einer ‚1‘ und '0' drehen, während er sich von links nach rechts und von oben nach unten bewegt und auf den Quadraten dreht, wo die Zahl eine Null hat. Starte das Programm und beobachte wie der Bauer mit Binärcode ein Bild zeichnet."
      Course 4 Binary 2_instruction: 'Welche Binärfolge könntest du 8 Mal durchlaufen lassen, um dieses Bild zu malen? Hinweis: Die Zahl „1" füllt ein Loch.'
      Course 4 Binary 3_instruction: Kannst du dieses Muster zeichnen, indem du eine Binärzeichenfolge wiederholst?
      Course 4 Binary 5 (copy 1)_instruction: Mit welcher Binärzeichenfolge kannst du dieses Bild zeichnen, wenn du sie 10 Mal wiederholst?
      Course 4 Binary 5_instruction: Mit welcher Binärzeichenfolge kannst du dieses Bild zeichnen, wenn du sie 10 Mal wiederholst?
      Course 4 Binary 6 (copy 1)_instruction: Mit welcher Binärzeichenfolge kannst du dieses Bild zeichnen, wenn du sie 10 Mal wiederholst?
      Course 4 Binary 6_instruction: Mit welcher Binärzeichenfolge kannst du dieses Bild zeichnen, wenn du sie 10 Mal wiederholst?
      Course 4 Binary 7_instruction: Mit welcher Binärzeichenfolge kannst du dieses Bild zeichnen, wenn du sie 10 Mal wiederholst?
      Course 4 Binary 8_instruction: 'Den größten Teil dieses Bildes kannst du zeichnen, indem du eine 5-stellige Binärzeichenfolge in eine Schleife durchlaufen lässt - danach benötigst du für rechts unten noch eine weitere 4-stellige Binärfolge.'
      Course 4 EC 1a_instruction: Keine Regeln. Keine Hinweise. Nur die Herausforderung!
      Course 4 EC 1b_instruction: Keine Regeln. Keine Hinweise. Nur die Herausforderung!
      Course 4 EC 2a_instruction: '**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise, nur die Aufgabe.'
      Course 4 EC 2b_instruction: Keine Regeln. Keine Hinweise. Nur die Herausforderung!
      Course 4 EC 2c_instruction: Keine Regeln. Keine Hinweise. Nur die Herausforderung!
      Course 4 EC 2d_instruction: Keine Regeln. Keine Hinweise. Nur die Herausforderung!
      Course 4 EC 3_instruction: 'Jetzt kannst du mit dem bisher gelernten ein solches Bild zeichnen. Hinweis: Der Code wird einfacher, wenn du mit Parametern arbeitest. '
      Course 4 EC 3a_instruction: 'Extreme Herausforderung: Keine Regeln. Keine Hinweise. Nur die Herausforderung!'
      Course 4 Maze 1_instruction: Bring den bösen Vogel zum Schwein!
      Course 4 Maze 2_instruction: Vermeide das Dynamit!
      Course 4 Maze 3_instruction: 'Zeige dem bösen Vogel den Weg zum Schwein! '
      Course 4 Maze 4_instruction: Versuche, das Rätsel mit dem „Wiederholen“-Baustein zu lösen, damit du weniger Bausteine benötigst ...
      Course 4 Maze 5_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      Course 4 Maze 6_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche Anzahl an Bausteinen verwenden?
      Course 4 Play Lab For Loops 2_instruction: Jetzt versuchen wir die ungeraden Zahlen von 1 bis 100 durchzuzählen.
      Course 4 Play Lab Params 1_instruction: 'Die Funktion „Springen" lässt deine Hauptfigur 100 Pixel hoch springen. Benutze die „Springen“-Funktion, um alle Flaggen einzusammeln.'
      Course 4 Play Lab Params 10_instruction: |
        Wir haben für dich eine letzte Funktion ergänzt.
        
        Benutze eine „Wenn“-Aussage, um dein Spiel zu programmieren, um die „Level-hoch“-Funktion nur dann aufzurufen, wenn „Spieler_Punkte“ größer als eine bestimmte Zahl wird.
        
        Zum Beispiel: „Spieler_Punkte“ > 6
        
        Spiele das Spiel und lasse es Level 4 passieren, um zum nächsten Puzzle zu gelangen.
      Course 4 Play Lab Params 2_instruction: |
        Hier gibt es Flaggen, die zu hoch sind, um sie mit dem Sprung zu erreichen. Verwende die „Aufwärts“ und „Abwärts“-Pfeiltasten für verschiedene Sprunghöhen.
        
        Dazu muss der Funktion „Springen“ ein Parameter „Höhe“ hinzugefügt werden.  Mit der „Aufwärts“-Taste soll der Hund 200 Pixel und mit der „Abwärts“-Taste 100 Pixel hoch springen.
        
        Hinweis: Zum Ändern der Funktion „Springen“ musst du auf „Bearbeiten“ klicken und die Funktion aktualisieren, sodass sie den Parameter „Höhe“ verwendet.
      Course 4 Play Lab Params 3_instruction: 'Wir haben einen weiteren Parameter zu der Sprungfunktion hinzugefügt, um sie mit verschiedenen Figuren zu benutzen. Jede Figur erhält eine Nummer beginnend mit 1. Ändere die Funktion „Springen“ so, dass mit dem Parameter „Figur“ die richtige Figur hochspringt. '
      Course 4 Play Lab Params 4_instruction: 'Hier ist eine Funktion namens „Patrouille“. Ändere sie so, dass die Katze sich 400 Pixel auf- und abwärts bewegt.'
      Course 4 Play Lab Params 5_instruction: Füge der Funktion „Patrouille“ einen Parameter „Figur“ hinzu, damit sie für alle Figuren auf dem Bildschirm verwendet werden kann. Die Figuren haben die Nummern 1, 2 und 3.
      Course 4 Play Lab Params 6_instruction: Füge noch den Parameter „Geschwindigkeit“ zur Funktion „Patrouille“ hinzu. Verwende einen „Figur festlegen Geschwindigkeit“-Baustein mit dem neuen Parameter „Geschwindigkeit“, damit der Pinguin beide Flaggen vor den Anderen erreicht.
      Course 4 Play Lab Params 7_instruction: |
        Lass uns etwas Spaß haben! Findest du heraus, was jeder Baustein macht, wenn du dir den Code anschaust?
        
        Sammle anschließend mit dem Hund alle Flaggen. Benutze dazu die Pfeiltasten.
      Course 4 Play Lab Params 8_instruction: 'Verwende den „Wenn Figur berührt"-Baustein, um den Hund nach links-oben zurückzuschicken; aber NUR wenn der Hund eine andere Figur berührt.'
      Course 4 Play Lab Params 9_instruction: |
        Hier ist unser Spiel aus einer früheren Phase, doch der größte Teil des Codes ist versteckt. Es gibt eine neue Funktion „Erziele_Punkte“.
        
        Bearbeite die Funktion so, dass der Variablen „Spieler_Punkte“ ein Parameter „Punkte“ hinzugefügt wird.
        
        Die Variable „Spieler_Punkte“ soll immer dann erhöht werden, wenn der Hund die Katze mit seinen Herzen trifft, wird der Hund von der Katze mit Herzen getroffen, soll die Punktezahl verringert werden.
        
        Hinweis: Wenn du fertig bist, klicke zum Spielen auf „Ausführen“.  Wenn der Hund 6 Punkte erreicht hat geht es zur nächsten Aufgabe weiter.
      Course 4 Play Lab Vars 1_instruction: Diesmal brauchst Du keinen Code zu schreiben! Einfach „Ausführen“ klicken und spielen! In diesem Spiel bist du der Hund, der versucht, mehr Flaggen als die Katze zu sammeln. Benutze den Nach-unten-Pfeil, um den Hund zu kontrollieren. Klicke „Fertigstellen“, wenn du mit Spielen fertig bist.
      Course 4 Play Lab Vars 2_instruction: Das Rennen im letzten Rätsel war nicht sehr fair! Ändere die Variable „Hunde_Geschwindigkeit“ so, dass du mehr Fahnen sammeln kannst als die Katze. Der erste, der 10 Fahnen hat, gewinnt!
      Course 4 Play Lab Vars 3_instruction: Jetzt was anderes! Verwende die Pfeiltasten nach links und rechts sowie nach oben zum Springen. Schau mal, ob du alle Fahnen einsammeln kannst.
      Course 4 Play Lab Vars 4_instruction: Hier wird eine Variable namens „Höhe” verwendet, um einzustellen, wie hoch der Hund springen kann. Ändere die Variable „Höhe“ so, dass der Hund hoch genug springen kann, um alle Fahnen zu erreichen.
      Course 4 Play Lab Vars 5_instruction: 'Lass uns ein Spiel bauen! Zuerst brauchen wir einen Punktestand. Baue den Code um, den du im letzten Level gesehen hast, um den Punktestand auf 10 einzustellen. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Cool, jetzt haben wir eine Variable für den Punktestand, aber wie setzen wir sie ein? Du könntest jedes Mal, wenn du den Gegner mit einem Feuerball triffst, deine Variable für den Punktestand erhöhen. Mit dem Ereignisbaustein „Wenn die Figur 2 irgendetwas berührt“ kannst du deinen Punktestand erhöhen, wenn du die Katze mit einem Feuerball triffst. Die Punktezahl wird erhöht, indem du „Punktezahl = Punktezahl +1“ einstellst. Du hast das Level erreicht, wenn du 10 Punkte (auf einmal!) erreichst.
      Course 4 Play Lab Vars 6_instruction: |
        Mit dem Pfeil nach rechts können wir Herze abschießen.
        
        Wie sollen wir in unserem Spiel Punkte erzielen? Addiere 1 zu deiner Variablen „Punkte“, wenn der Hund die Katze mit einem Herz trifft. Verwende das Ereignis „Wenn die Figur 2 irgendwas berührt“, um den Punktestand zu aktualisieren. Du kannst deine Variable erhöhen, indem du „Punktezahl = Punktezahl + 1“ einstellst. Du hast das Level erreicht, wenn du 10 Punkte (auf einmal!) erreichst.
      Course 4 Play Lab Vars 7_instruction: Sehr schön, und jetzt sorgen wir dafür, dass das Spiel nicht zu einfach wird. Jedes Mal wenn der Hund (Figur 1) von der Katze (Figur 2) mit gelben Herzen getroffen wird, soll dir ein Punkt abgezogen werden. Beginne mit 10 Punkten, damit es nicht zu schwierig wird. Das Level ist erreicht, wenn deine Punktzahl von 10 auf 0 gesunken ist.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: 'Okay, eine letzte Sache für dieses Spiel - richte es so ein, dass der Spieler gewinnen (oder verlieren) kann: Benutze immer eine Endlosschleife, um den Punktestand zu überprüfen – wenn der Punktestand über 20 ist, soll der Feind verschwinden. Ist der Punktestand weniger als 0, soll der Spieler verschwinden. Klicke auf „Abschließen“, wenn das Spiel so funktioniert, wie du möchtest.'
      Course 4 Play Lab Vars 8_instruction: Lass uns jetzt das Spiel so gestalten, dass der Hund gewinnen (oder verlieren) kann. Benutze immer eine Endlosschleife, um den Punktestand zu überprüfen – wenn der Punktestand über 20 ist, soll der Feind (die Katze) verschwinden. Ist der Punktestand weniger als 0 soll der Spieler (der Hund) verschwinden. Klicke auf „Abschließen“, wenn das Spiel so funktioniert, wie du möchtest.
      Course 4 Play Lab Vars 9_instruction: |
        Zeit für freies Spiel! Hier sind alle Variablen, mit denen wir bis jetzt in dieser Phase gespielt haben, sowie ein paar mehr, falls du sie möchtest.
        
        Beachte, dass deine Toolbox jetzt über eine große Zahl von Bausteinen verfügt, die wir daher erneut nach Kategorien geordnet haben.  Hier haben wir jedes Teil in eine passende Kategorie eingeordnet.  Nimm dir Zeit und schau dir alles genau an. Wenn du mit Browsen fertig bist, gestalte ein Spiel oder eine Geschichte mit Wiederholungen, Variablen und Ereignissen.
        
        Hinweis: Du musst vielleicht runterscrollen, um alle Befehle im Arbeitsraum zu finden.
      Course 4 Play Lab Vars_instruction: 'Okay, eine letzte Sache für dieses Spiel - richte es so ein, dass der Spieler gewinnen (oder verlieren) kann: Benutze immer eine Endlosschleife, um den Punktestand zu überprüfen – wenn der Punktestand über 20 ist, soll der Feind verschwinden. Ist der Punktestand weniger als 0, soll der Spieler verschwinden.'
      Course 4 Play Labs For Loops 1_instruction: Lass den Hund von 1 bis 100 zählen. Verwende dazu eine „Zähle mit“-Schleife und den Zähler-Baustein, um bei jedem Schleifendurchlauf zu sagen, was in der Zählvariablen steht.
      Course 4 Play Labs For Loops 2_instruction: Jetzt versuchen wir die ungeraden Zahlen von 1 bis 100 durchzuzählen.
      Course 4 Play Labs For Loops 3_instruction: Wenn wir größere Schritte verwenden, können wir in derselben Zeit noch höher zählen. Probiere aus, den Hund in 10er-Schritten von 10 bis 1000 zählen zu lassen.
      Course 4 Play Labs For Loops 4_instruction: 'Es ist schon einmal hilfreich, die Schrittweite zu ändern, aber wir zählen immer noch linear (jeder Schritt hat den gleichen Abstand). Wie sieht es aus, wenn wir exponentiell zählen wollen? Kann man ohne die Einstellungen in der „Zähle mit“-Schleife zu ändern: 1, 4, 9, 16, 25... (also quadratisch) zählen?'
      Course 4 Play Labs For Loops 4a_instruction: |
        Fügen wir nun die Variablen von Phase 7 mit deiner „Zähler“-Variablen zusammen, um etwas Magisches zu bewirken.
        
        In dieser Aufgaben zählt der Hund „Schrittweite“ von 0 bis 1000.  Stelle die Variable „Schrittweite“ am Anfang deines Codes auf 10, um zu sehen, was passiert.
      Course 4 Play Labs For Loops 5_instruction: In der letzten Phase haben wir das Quadrat jeder Zahl gezählt. Versuche, „Zähler ^ 2“ in „Zähler ^ 3“ zu ändern, um die Kubikzahl jeder Zahl (1, 8, 27, 64, 125, 216, 343 …) zu zählen.
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime keeper.\\r\n\\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable will begin with a value of 1.\\r\n\\r\nCan you make it so that each\ntime you click Dog, the increment increases by 2?  Click the forward arrow\nto run the for loop.\\r\n\\r\nRun the loop a couple of times, clicking Dog before\neach one."
      Course 4 Play Labs For Loops 6_instruction: Denke daran, dass eine Primzahl eine ganze Zahl ist, die nur durch sich selbst und durch 1 teilbar ist. Nutze die „ist_Prim“-Funktion, um nur die Primzahlen von 1 bis 100 auszusprechen.
      Course 4 Play Labs For Loops 6a_instruction: |
        Der Hund wird noch immer die Zeit angeben, indem er mit unserer „Zähl mit“-Schleife mit „Schrittweite“ zählt, aber dieses Mal werden wir den Zauberer hinzufügen.  Kannst du den Code so ändern, dass die „Schrittweite“ um jeweils 2 erhöht wird, wenn auf den Zauberer geklickt wird?
        
        Pass auf!  Der Zauberer bewegt sich schnell!
      Course 4 Play Labs For Loops 7_instruction: 'Kannst du mich mit einer „Zähle mit“-Schleife die Folge: 1, 4, 7, 10, 13, 16, 19, 22, 25 sprechen lassen?'
      Course 4 Play Labs For Loops 7a_instruction: |
        Jetzt kommen wir schon weiter!  Wir könnten jetzt zählen, wie oft man den Zauberer anklicken kann, bevor der Hund bis 30 gezählt hat.
        
        Füge Bausteine hinzu, damit die Variable „geklickt“ jedes Mal um 1 erhöht wird, wenn der Zauberer angeklickt wird. „Schrittweite“ wird im Moment nicht benötigt.
        
        Der Hund beginnt mit dem Zählen, wenn du auf „Ausführen“ klickst.
      Course 4 Play Labs For Loops 8_instruction: |
        Bringe die Figuren jetzt in Bewegung, während sie zählen.
        
        Der Hund soll bei jeder Bewegung 2 hinzuzählen (Zähler + 2).  Die Katze wird bei jeder Bewegung den Zähler mit 2 multiplizieren (Zähler * 2). Der Pinguin soll die Zählvariable mit 2 potenzieren (Zähler ^ 2).  Wer ist als erster bei der Fahne?
      Course 4 Play Labs For Loops 8a_instruction: |
        Um das Spiel fertigzustellen benötigen wir wieder die Variable „Schrittweite“!    Verbinde sie mit der Spielstufe.
        
        1) Beobachte wie oft der Zauberer angeklickt wird.
        2) Sobald der Zauberer 10 Mal geklickt wurde, bevor der Hund bis 30 gezählt hat, erhöhe „Schrittweite“ um 1 und fang von vorne an.
        3) Schaffst du es nicht, den Zauberer mindestens 10 Mal anzuklicken, ist das Spiel zu Ende.
      Course 4 Playlab For Loop Freeplay_instruction: |
        Freeplay: Use everything you've
        learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b_instruction: "Now, these two characters are going\nto race!  \\r\n\\r\nEach of them will move `counter` steps at a time, but their\ncounters will have different values because of the `for` loops.  \\r\n\\r\nCan\nyou change the increment in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b_instruction: |
        Adjust the interval on these `for`
        loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b_instruction: "Edit this `for` loop to create\na game that's fun for you to play!\\r\n\\r\nPress \"Run\" and click Madame\nUnicorn four times to win. "
      Course 4 SCF 1_instruction: Zeichne mit dem vorgegebenen Funktionen vier Zeilen mit Sechsecken. Beachte, dass die geradzahligen Zeilen nach rechts verschoben sind.
      Course 4 SCF 1a_instruction: Wie kann der ganze Nektar mit möglichst wenigen Bausteinen eingesammelt werden?
      Course 4 SCF 1b_instruction: Wie kann der ganze Nektar mit möglichst wenigen Bausteinen eingesammelt werden?
      Course 4 SCF 2_instruction: 'Jetzt kannst du mit dem bisher gelernten ein solches Bild zeichnen. Hinweis: Der Code wird einfacher, wenn du mit Parametern arbeitest. '
      Course 4 SCF 3 Fail 1_instruction: Findest du heraus, wie ...
      Course 4 SCF 3 Fail 2_instruction: Findest du heraus, wie ...
      Course 4 SCF 3_instruction: 'Jetzt kannst du mit dem bisher gelernten ein solches Bild zeichnen. Hinweis: Der Code wird einfacher, wenn du mit Parametern arbeitest. '
      Course 4 SCFL 1_instruction: Löse diese Aufgabe mit so wenig Bausteinen wie möglich.
      Course 4 SCFL 1a_instruction: Bringe Skrat mit möglichst wenigen Bausteinen zu seiner Eichel.
      Course 4 SCFL 1b_instruction: Bringe Skrat mit möglichst wenigen Bausteinen zu seiner Eichel.
      Course 4 SCFL 2_instruction: Löse diese Aufgabe mit so wenig Bausteinen wie möglich.
      Course 4 SCFL 3_instruction: Kriegst du heraus, wie man das Bild nachzeichnet?
      Course 4 SCFL 4_instruction: Kriegst du heraus, wie man das Bild nachzeichnet?
      Course 4 SCFL 5_instruction: Kriegst du heraus, wie man das Bild nachzeichnet?
      Course 4 SCFL 6_instruction: Kriegst du heraus, wie man das Bild mit einer einzigen Schleife nachzeichnet?
      Course 4 SCFL 7_instruction: Die Figur will ein paar Wellen fangen! Kriegst du heraus, wie man das Bild nachzeichnet?
      Course 4 SCFP 1_instruction: Schaffe eine Funktion mit Parametern, die es der Figur erlaubt, bei x Pixeln vor und zurück zu springen und bei y Pixeln auch hoch und runter (und dabei positive und negative Zahlen nutzt).
      Course 4 SCV 1_instruction: Klicke hier, um die Anleitung noch einmal anzuschauen.
      Course 4 SCV 2_instruction: Klicke hier, um die Anleitung noch einmal anzuschauen.
      Course 4 SCV 3_instruction: |
        Jetzt ein Fangspiel!  Berühre die Katze, um 2 Punkte zu erhalten. Berühre den Pinguin, um 3 Punkte zu bekommen.  Du brauchst 10 Punkte, um zu gewinnen.
        Vorsicht: wenn sich Katze und Pinguin einander berühren, werden Punkte abgezogen.
        
        Mit den richtigen Bausteinen kannst du das Spiel wie erklärt zum Laufen bringen.  Wie bewegst du den Hund mit den Pfeiltasten in alle Richtungen?  Wie werden die Punkte erhöht, wenn der Hund auf die Katze oder den Pinguin trifft?  Wie werden Punkte abgezogen, wenn Katze und Pinguin sich berühren?
      Course 4 SCV 4_instruction: Löse diese Aufgabe mit so wenig Bausteinen wie möglich.
      Course 4 SCV 5_instruction: Löse diese Aufgabe mit so wenig Bausteinen wie möglich.
      Course 4 SCV 6_instruction: Klicke hier, um die Anleitung noch einmal anzuschauen.
      Course 4 SCVP 1_instruction: Schaffe eine Funktion mit Parametern, die es der Figur erlaubt, bei x Pixeln vor und zurück zu springen und bei y Pixeln auch hoch und runter (und dabei positive und negative Zahlen nutzt).
      Course 4 Variables Assessment_instruction: Kannst du dieses Bild mit einer Variablen für die Seiten erstellen? Jede Seite sollte 50 Pixel lang sein.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSD Hackathon Pt 1_instruction: (Click to see full instructions)
      CSD Hackathon Pt 2_instruction: (Click to see full instructions)
      CSD Hackathon Week 1_instruction: (Click to see full instructions)
      CSD Hackathon Week 2_instruction: (Click to see full instructions)
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Predict_instruction: |
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Frame Rate_instruction: "Slow down Gamelab Gary's animation with frameRate()"
      CSD U3 Keypress Boolean_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables create and assign_instruction: |
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: 'Create your own variable '
      CSD U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |
        Use console.log to display the
        results of each expression. Then create your own.
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Jetzt erstellen wir 20 überschneidende Kreise und drehen die einzelnen Kreise um 18 Grad.
      frozen circle function with parameter_instruction: Hier ist ein „Erzeuge einen Kreis“-Baustein, der Kreise verschiedener Größe zeichnen kann. Kannst du ihn benutzen, um einen kleinen Kreis, mit der Größe 5, und einen größeren Kreis, mit der Größe 10, zu erstellen?
      frozen circle function_instruction: Verwende den neuen „Erzeuge einen Kreis“-Baustein, um 10 sich überschneidende Kreise zu erstellen. Vergiss nicht zwischen den Kreisen nach vorn zu springen.
      frozen circle_instruction: Ein Kreis ist eine besondere Form. Kannst du herausfinden, durch welche Zahl du das Fragezeichen ersetzen musst, um einen Kreis zu zeichnen?
      frozen cross rotate dense_instruction: 'Wiederhole es 90 Mal! Wie oft geht 90 in 360? Hinweis: Es ist eine sehr kleine Zahl.'
      frozen cross rotate_instruction: Jetzt versuche, es zehn Mal zu wiederholen. Wie viel Grad musst du zwischen den einzelnen Linien drehen?
      frozen cross_instruction: 'Wir brauchen hier noch einen „Wiederholen"-Baustein, um ein Plus-Zeichen zu zeichnen! Hast du bemerkt, dass sich Elsa vor und zurück bewegen kann?'
      frozen diamond mini snowflake_instruction: Wusstest du schon, dass jede Schneeflocke eine andere Form hat? Nun erstellen wir eine neue Schneeflocke mit dem Wiederholen-Baustein, um ein Parallelogramm 4 Mal zu wiederholen und dabei jeweils 90 Grad nach rechts zu drehen.
      frozen diamond snowflake_instruction: Nun erstellen wir eine neue Schneeflocke mit dem Wiederholen-Baustein, um ein Parallelogramm 10 Mal zu wiederholen und dabei jeweils 36 Grad nach rechts zu drehen.
      frozen diamond_instruction: Du kannst ein Parallelogramm zeichnen, indem Du um diesen Code einen „wiederholen“-Baustein einfügst. Es ist wie ein Rechteck, hat aber verschiedene große Winkel. Dieses hier hat Winkel von 60 Grad und 120 Grad, statt nur 90-Grad-Winkel.
      frozen freeplay_instruction: Du bist ein richtiger Künstler geworden. Zeichne ein Winter-Wunderland.
      frozen line_instruction: Hallo! Ich bin Elsa von Arendelle. Hilf mir, eine einzige Linie zu zeichnen.
      frozen perpendicular_instruction: Jetzt schauen wir mal, ob wir zwei Linien zeichnen können, die in einem 90° Winkel zueinander stehen. Du musst sowohl den „Drehen“-Baustein als auch den „Bewegen“-Baustein benutzen.
      frozen snowflake branch_instruction: 'Verwende den „Erstelle einen Schneeflockenzweig"-Baustein, um drei Zweige zu erstellen, die beginnen wie eine Schneeflocke auszusehen.'
      frozen snowflake full_instruction: Jetzt wiederhole das 8 Mal, um eine schöne Schneeflocke zu machen!
      frozen snowflower_instruction: Komplizierte Schneemuster können mit sehr einfachen Formen erstellt werden. Kannst du ein Muster machen, das 5 Kreise der Größe 5 und 5 Kreise der Größe 10 wiederholt?
      frozen square iterative_instruction: Es scheint, als hätten wir die Hälfte eines Quadrates geschafft. Lass uns 4 Linien benutzen, um ein Quadrat zu erstellen.
      frozen square loop 3x_instruction: Lass uns drei Quadrate erstellen und nach jedem Quadrat drehen. Stell sicher, dass du vor jedem neuen Quadrat um 120° drehst.
      frozen square loop_instruction: Hallo, ich bin Anna von Arendelle! Lass uns ein Quadrat mit dem „Wiederholen“-Baustein zeichnen, dadurch brauchen wir weniger Blöcke. Wie oft (???) muss der „Wiederholen“-Baustein die inneren Bausteine durchlaufen, damit ein Quadrat entsteht?
      frozen square snowflake_instruction: 'Kannst du eine Schneeflocke erstellen, indem du den „Wiederholen"-Baustein 10 mal benutzt, um ein Quadrat zu erstellen und nach jedem Quadrat den „Drehen"-Baustein mit 36° benutzt?'
      Infinity_catch_instruction: 'Kannst du Elsa („Figur 2") dazu bewegen, Anna mithilfe der Pfeiltasten einzufangen?'
      Infinity_finale_instruction: Erstelle alles, was dir gefällt und teile es!
      Infinity_move_collide_instruction: 'Hiro ist „Figur1“.  Bewege ihn nach rechts zu Baymax und spiele einen Ton ab, wenn sie sich berühren.'
      Infinity_move_directions_instruction: 'Baymax ist „Figur 2“.  Füge den Baustein „bewegen“ hinzu und verschiebe Baymax dann mit Hilfe der Pfeiltasten.  Lass ihn die beiden anderen Figuren berühren.'
      Infinity_move_right_instruction: 'Hiro ist „Figur1“.  Verwende den Baustein „bewegen", um Hiro nach rechts zu bewegen und Baymax zu berühren.'
      Infinity_repeat_instruction: 'Benutze den Baustein „endlos wiederholen", um Anna 400 Pixel nach oben und unten zu verschieben.'
      Infinity_say_instruction: 'Lass Anna mit Hilfe des „Sage"-Bausteins „Hallo Leute" sagen.'
      Infinity_shoot_instruction: 'Baymax ist „Figur 2“.  Lass Baymax eine Rakete auf Hiro abschießen.'
      Infinity_shoot_directions_instruction: 'Hiro ist „Figur 3“.  Lass Hiro ein Geschoss auf alle vier Figuren abfeuern.  Warte jeweils eine Sekunde nach jedem Schuss.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Berühre noch mehr Schneeflocken!
      Infinity_touch_four_instruction: Bewege Anna hoch, runter, nach links und rechts, damit sie alle vier Schneeflocken berührt.
      Infinity_touch_score_instruction: 'Anna erhält einen Punkt, sobald sie eine Schneeflocke berührt.  Klicke danach „Ausführen“ und steuere sie so, dass sie alle Schneeflocken genau einmal berührt.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Zeichne eine kurze Linie nach oben und eine lange Linie nach rechts!
      K-1 artist 1 level 10_instruction: 'Zeichne die gestrichelte Linie mithilfe sowohl des Sprung- als auch des Zeichnen-Bausteins.'
      K-1 artist 1 level 9_instruction: Dafür brauchst du drei Linien.
      K-1 Artist Loops 1_instruction: Zeichne die Linie, indem du 4-mal nach Osten gehst.
      K-1 Artist Loops 2_instruction: Kannst du die gleiche Linie mit Hilfe einer Schleife zeichnen?
      K-1 Artist Loops 3_instruction: Kannst du die Bausteine in eine Schleife einbauen, um 6 Linien zu zeichnen?
      K-1 Artist Loops 4_instruction: Könnte man mit einer Schleife das Dach der Burg zeichnen?
      K-1 Artist Loops 5_instruction: Was muss 4-mal wiederholt werden, um diese Treppe zu zeichnen?
      K-1 Artist Loops 6_instruction: 'Diese braucht zwei Schleifen: eine, um die Treppe hoch zu gehen und eine, um herunterzugehen.'
      K-1 Artist Loops 7_instruction: Schleifen können dir dabei helfen, dieses Muster fertigzustellen.
      K-1 Artist Loops 8_instruction: Diese Treppe hat längere Stufen.
      K-1 Artist Loops 9_instruction: Was ist der einfachste Weg, diese Treppe zu zeichnen?
      K-1 Artist Loops Free Play_instruction: Freies Spiel! Zeichne was Lustiges!
      K-1 Artist1 1_instruction: Zeichne den Fuß des Männchens mit einer Linie!
      K-1 Artist1 10_instruction: Zeichne und springe um die Ecke, auf dem Weg zum Schatz X!
      K-1 Artist1 2_instruction: Du brauchst zwei Linien für das Barthaar der Katze!
      K-1 Artist1 3_instruction: Mit zwei Linien nach Osten und zwei nach Norden wird aus dieser Zeichnung ein Haus!
      K-1 Artist1 4_instruction: Ziehe Linien nach oben, über und nach unten, um diese Burg fertigzustellen!
      K-1 Artist1 5.5_instruction: Ergänze den dritten Turm der Burg mit kurzen Linien.
      K-1 Artist1 5_instruction: Die Blume braucht noch einen Stiel! Zeichne zwei Linien!
      K-1 Artist1 6_instruction: 'Um dieses Bild fertig zu malen, musst du den „Springen"-Baustein verwenden!'
      K-1 Artist1 7_instruction: Benutze den Springen-Baustein, um ohne Zeichnen zu bewegen. Spring und zieh eine Linie!
      K-1 Artist1 8_instruction: 'Zeichne die gestrichelte Linie mithilfe sowohl des Sprung- als auch des Zeichnen-Bausteins.'
      K-1 Artist1 9_instruction: Zeichne und springe, um die gestrichelte Linie zu zeichnen!
      K-1 Artist1 Assessment 1_instruction: Zeichne die langen und kurzen Linien!
      K-1 Artist1 Assessment 2_instruction: Zeichne die kurzen gestrichelten Linien!
      K-1 Artist2 1_instruction: Zeichne ein Quadrat unter das Dreieck!
      K-1 Artist2 2_instruction: Spring rüber und mal ein Quadrat neben dem Haus!
      K-1 Artist2 3_instruction: Zeichne ein Quadrat über das andere Quadrat!
      K-1 Artist2 4_instruction: Zeichne ein Rechteck, um die Brücke zu vervollständigen.
      K-1 Artist2 5_instruction: Zeichne ein Rechteck, um die Brückenpfeiler zu vervollständigen.
      K-1 Artist2 6_instruction: Füge zwei Quadrate zu einem Rechteck zusammen!
      K-1 Artist2 Assessment1_instruction: 'Prüfung: Zeichne ein Quadrat neben dem anderen Quadrat.'
      K-1 Artist2 Free Draw_instruction: Zeichne irgendwas!
      K-1 Artist2_7_instruction: Bei dieser Kommode fehlt noch die oberste Schublade! Zeichne ein Rechteck!
      K-1 Bee 1_instruction: Bewege mich zur Blume, nimm den Nektar, bewege mich danach zur Honigwabe und erzeuge Honig.
      K-1 Bee 10_instruction: Hole 4 Nektar und mache dann 2 Honig!
      K-1 Bee 11.5_instruction: Hole 4 Nektar, um 4 Honig zu machen!
      K-1 Bee 11_instruction: Hole 3 Nektar und mache dann 1 Honig.
      K-1 Bee 12_instruction: Hole 3 Nektar und mache dann 2 Honig!
      K-1 Bee 13_instruction: Hole 3 Nektar und mache dann 1 Honig!
      K-1 Bee 14_instruction: Bring mich zum Nektar, sammle ihn ein; bring mich zum Honig und mache Honig.
      K-1 Bee 15_instruction: Hole zwei Portionen Nektar, um 2 Honig herzustellen.
      K-1 Bee 2_instruction: Bewege mich zur Blume, nimm den Nektar, bewege mich danach zur Honigwabe und erzeuge Honig.
      K-1 Bee 3_instruction: Bewege mich zur Blume, nimm den Nektar, bewege mich danach zur Honigwabe und erzeuge Honig.
      K-1 Bee 4_instruction: Hole zwei Portionen Nektar und stelle zwei Portionen Honig her.
      K-1 Bee 5_instruction: Hole drei Portionen Nektar und stelle drei Portionen Honig her.
      K-1 Bee 6_instruction: Hole zwei Portionen Nektar und stelle zwei Portionen Honig her.
      K-1 Bee 7_instruction: Hole 3 Nektar und mache dann 2 Honig!
      K-1 Bee 8_instruction: Hole zwei Portionen Nektar und stelle zwei Portionen Honig her.
      K-1 Bee 9_instruction: Hole zwei Portionen Nektar und stelle zwei Portionen Honig her.
      K-1 Bee Assessment 1_instruction: Hole Nektar, um Honig herzustellen.
      K-1 Bee Assessment 2_instruction: Hole Nektar, um Honig herzustellen.
      K-1 Bee Loops 1_instruction: Hole den Nektar, um Honig herzustellen.
      K-1 Bee Loops 10_instruction: Hole den ganzen Nektar und stelle Honig daraus her.
      K-1 Bee Loops 11_instruction: Hole den ganzen Nektar und Honig.
      K-1 Bee Loops 12_instruction: Hole den ganzen Nektar und den ganzen Honig.
      K-1 Bee Loops 2_instruction: Verwende eine „Wiederhole“-Schleife zum Bewegen, dann den Nektar einzusammeln und Honig herzustellen.
      K-1 Bee Loops 3_instruction: 'Verwende drei „Wiederhole"-Schleifen, um Nektar zu holen und Honig herzustellen.'
      K-1 Bee Loops 4_instruction: 'Verwende „Wiederhole"-Schleifen, um den Nektar einzusammeln, Honig herzustellen und zum Bewegen.'
      K-1 Bee Loops 5_instruction: 'Verwende „Wiederhole"-Schleifen, um den Nektar und den Honig zu sammeln.'
      K-1 Bee Loops 6_instruction: 'Verwende eine „Wiederhole"-Schleife, um den Nektar einzusammeln, Honig herzustellen und zum Bewegen.'
      K-1 Bee Loops 7_instruction: Sammle Nektar und stelle Honig her.
      K-1 Bee Loops 8_instruction: Sammle Nektar und stelle Honig her.
      K-1 Bee Loops 9_instruction: Sammle den ganzen Nektar und stelle allen Honig her.
      K-1 Bee Loops Assessment 1_instruction: Nimm Nektar, um Honig herzustellen. Bewege dich mithilfe von Schleifen.
      K-1 Bee Loops Assessment 2_instruction: Verwende Schleifen und hole Nektar, um Honig herzustellen.
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Baue eine dreistufige Pyramide. Es gibt keine anderen Richtungsanweisungen. Probiere es einfach aus!
      k-1 maze 1_instruction: Kannst du mich nach Westen bewegen, damit ich zum Schwein komme?
      K-1 Maze 10_instruction: Gehe um das TNT herum, um mich zum Schwein zu bringen!
      K-1 Maze 11_instruction: 'Verfolge den Pfad und führe mich zu dem dummen Schwein. Vermeide das TNT, sonst muss ich Federn lassen! Hinweis: Es ist südlich von mir.'
      K-1 Maze 2_instruction: Bewege mich nach Osten, um mich zum Schwein zu bringen!
      K-1 Maze 3_instruction: Bewege mich nach Süden, um mich zum Schwein zu bringen!
      K-1 Maze 4_instruction: Bewege mich nach Norden, um mich zum Schwein zu bringen!
      K-1 Maze 5_instruction: Bewege mich nach Osten, um mich zum Schwein zu bringen!
      K-1 Maze 6_instruction: Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      K-1 Maze 7_instruction: Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      K-1 Maze 8_instruction: Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      K-1 Maze 9_instruction: Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      K-1 Maze Assessment 1_instruction: 'Prüfung: Bring mich zum Schwein!'
      K-1 Maze Assessment 12_instruction: Bewertungsstufe
      K-1 Maze Assessment 13_instruction: Bewertungsstufe
      K-1 Maze Assessment 2_instruction: 'Prüfung: Bring mich zum Schwein!'
      K-1 maze debug 1_instruction: Bring mich zum Schwein, indem du den Code änderst.
      K-1 maze debug 10_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 maze debug 11_instruction: |
        Dies ist ein Test!
        Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 maze debug 2_instruction: Finde heraus was fehlt und ergänze dann Bausteine, um mich zu dem Schwein zu bringen!
      K-1 maze debug 3_instruction: Etwas ist nicht ganz richtig. ENTFERNE Bausteine, um mich zu dem Schwein zu bringen!
      K-1 maze debug 4_instruction: Gehe diese Bausteine durch und repariere sie! Ich glaube, dass ich in die falsche Richtung gehe.
      K-1 maze debug 5_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 maze debug 6_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 maze debug 7_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 maze debug 8_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine neu anordnest und Bausteine ergänzt, damit ich das Schwein erreiche.
      K-1 maze debug 9_instruction: Bereinige diesen Level von Fehlern, indem du die Bausteine so anordnest, dass ich das Schwein erreiche.
      K-1 Maze debug Assessment 1_instruction: 'Prüfung -- Bereinige diesen Level von Fehlern, indem du die Bausteine neu anordnest und Bausteine ergänzt, damit ich das Schwein erreiche.'
      K-1 Maze Loops 1_instruction: Bring mich zum Schwein!
      K-1 Maze Loops 10_instruction: Bring mich zum Schwein! Wenn du die „Wiederholen“-Schleife benutzt, geht es viel einfacher.
      K-1 Maze Loops 11_instruction: |
        Bring mich zum Schwein!
        Mit der „Wiederholen“-Schleife geht es leichter.
      K-1 Maze Loops 12_instruction: Bring mich zum Schwein! Mit der „Wiederholen“-Schleife geht es leichter.
      K-1 Maze Loops 2_instruction: 'Benutze die “Wiederholen"-Schleife, um mich zum Schwein zu bringen.'
      K-1 Maze Loops 3_instruction: Bring mich zum Schwein! Benutze auf jeden Fall die „Wiederholen“-Schleifen.
      K-1 Maze Loops 4_instruction: Bring mich zum Schwein!
      K-1 Maze Loops 5_instruction: Bring mich zum Schwein! Benutze auf jeden Fall die „Wiederholen“-Schleifen.
      K-1 Maze Loops 6_instruction: Bring mich zum Schwein! Benutze auf jeden Fall die „Wiederholen“-Schleifen.
      K-1 Maze Loops 7_instruction: Bring mich zum Schwein! Benutze auf jeden Fall die „Wiederholen“-Schleifen.
      K-1 Maze Loops 8_instruction: Benutze „Wiederholen“-Schleifen, um mich zum Schwein zu bringen.
      K-1 Maze Loops 9_instruction: Bring mich zum Schwein!
      K-1 Maze Loops Assessment 1_instruction: Schau, was wir alles gelernt haben! Benutze eine „Wiederholen“-Schleife, um mich zum Schwein zu bringen.
      K-1 Maze Loops Assessment 2_instruction: Benutze „Wiederholen“-Schleifen, um mich zum Schwein zu bringen.
      K-1 Maze Multi 14_instruction: Bewertungsstufe
      K-1 Maze Multi 15_instruction: Bewertungsstufe
      K-1 Maze Sequence Assessment 1_instruction: |
        Schauen wir mal, was du gelernt hast!
        Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      K-1 Maze Sequence Assessment 2_instruction: Bewege mich in eine Richtung, dann in eine andere, um mich zum Schwein zu bringen!
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: (Click to see full instructions)
      Middle School Hackathon Pt 2_instruction: (Click to see full instructions)
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Zeichne etwas Tolles! Dein Code wurde als Projekt gespeichert, zu dem du jederzeit zurückkehren kannst.
      NEW Course 4 Artist Functions 1_instruction: Kannst du ein Quadrat mit der Seitenlänge 100 zeichnen, indem du eine Wiederholen-Schleife verwendest?
      NEW Course 4 Artist Functions 10.1_instruction: Benutze die Funktionen aus der vorherigen Aufgabe, um dieses Muster zu zeichnen.
      NEW Course 4 Artist Functions 10_instruction: Klicke „Ausführen“, um die Bausteine in der Funktionsdefinition auszufüllen, um ein Quadrat von 40 Pixeln zu erstellen.
      NEW Course 4 Artist Functions 11_instruction: 'Jetzt wollen wir eine neue Funktion namens „Zeichne eine Reihe von Quadraten“ schaffen, die sechs Quadrate in einer Reihe zeichnet.  Kannst du diese Funktion mit Hilfe der Funktion „Zeichne ein Quadrat 20“ bauen, die wir bereits erstellt haben? Hinweis: Beachte, dass der Stift jetzt eine viel schmalerer Linie zeichnet. Wenn du bei der Funktion „Zeichne ein Quadrat 20“ auf „Bearbeiten“ klickst, kannst du dir anschauen, wie das funktioniert.'
      NEW Course 4 Artist Functions 12_instruction: Zeichne dieses Muster mithilfe der Funktion „Zeichne eine Reihe von Quadraten“ aus der letzten Aufgabe.
      NEW Course 4 Artist Functions 13_instruction: 'Kannst du deine Sternform mit der Funktion „Zeichne eine Reihe von Quadraten“ zeichnen? Hinweis: Bearbeite die Funktion „Zeichne eine Reihe von Quadraten“, damit du sie nicht zweimal aufrufen musst.  Beachte, dass du um eine bestimmte Zahl von Pixeln vorwärtsbewegen und um 144 Grad drehen musst.'
      NEW Course 4 Artist Functions 14_instruction: 'Zeit für freies Spiel! '
      NEW Course 4 Artist Functions 2_instruction: 'Kannst du 3 Quadrate im Abstand von 20 Pixeln zeichnen? Hinweis: Jedes Quadrat ist 100 Pixel lang.'
      NEW Course 4 Artist Functions 3_instruction: Hier ist eine neue Art von Baustein. Er wird als „Funktions“-Baustein bezeichnet. Klicke auf „Bearbeiten“, fülle ihn dann mit dem Code zum Zeichnen eines Quadrates mit Seiten von 100 Pixeln. Wenn du mit der Bearbeitung der Funktion fertig bist, klicke „Schließen“, um zu deinem Programm zurückzukehren.
      NEW Course 4 Artist Functions 4_instruction: 'Benutze die Funktion „Zeichne ein Quadrat“, um das Muster zu zeichnen. Hinweis: Du wirst den Baustein „drehe rechts um 120 Grad“ nach jedem Quadrat verwenden müssen.'
      NEW Course 4 Artist Functions 5_instruction: Wie wusste der Baustein „Zeichne ein Quadrat“, welche Befehle auszuführen sind? Klicke auf „Bearbeiten“ im Funktionsbaustein „Zeichne ein Quadrat“. Die Bausteine im Funktionseditor sind die Definition, die „Zeichne ein Quadrat“ erstellen. Wenn du fertig damit bist, dich umzuschauen, klicke auf „Speichern und Schließen“ und dann „Ausführen“.
      NEW Course 4 Artist Functions 6_instruction: 'Benutze die „Zeichne ein Quadrat“-Funktion. Kannst du dieses Bild zeichnen? Hinweis: Die Quadrate sind jeweils 20 Pixel voneinander entfernt.'
      NEW Course 4 Artist Functions 7_instruction: 'Kriegst du langsam heraus, wie du die Funktionsbausteine benutzt? Lass uns dieses Viereck so verändern, dass es 200 Pixel groß ist. Hinweis: Klicke auf „bearbeiten“, um die Größe von „zeichne ein Viereck“ im Editor zu ändern. Vergiss nicht auf „speichern und schließen“ zu klicken, um wieder aus dem Editor herauszukommen. '
      NEW Course 4 Artist Functions 8_instruction: 'Wir haben eine neue Funktion namens „Zeichne ein Dreieck“ für dich geschaffen.  Kannst du die Funktionsdefinition so bearbeiten, dass sie ein Dreieck mit Seiten von 100 Pixeln zeichnet?'
      NEW Course 4 Artist Functions 9_instruction: Löse das Problem, indem du nur einen Baustein hinzufügst.
      NEW Course 4 Artist Functions inspire_instruction: Klicke hier, und lasse dich noch einmal von dem Bild inspirieren.
      New Course 4 Artist Functions Level 4_instruction: Benutze die Funktion „Zeichne ein Quadrat“, um das Muster zu zeichnen.
      NEW Course 4 Artist Params 1_instruction: Lass uns eine Funktion definieren, die ein Quadrat mit 50 Pixel langen Seiten zeichnet. Klicke „Bearbeiten“, um anzufangen.
      NEW Course 4 Artist Params 10_instruction: 'Erstelle einen Funktionsbaustein „Zeichne ein Sechseck“ mit einem Längenparameter. Hinweis: Dieses Sechseck hat 100 Pixel lange Seiten. '
      NEW Course 4 Artist Params 11_instruction: Kannst du herausfinden, wie man diese Form zeichnet? Bearbeite die Funktion, um den Parameter „Seiten“ zu benutzen.
      NEW Course 4 Artist Params 12_instruction: Kannst du diese Zeichnung vervollständigen? Die Seiten aller Formen sind 100 Pixel lang.
      NEW Course 4 Artist Params 12a_instruction: Dieses Bild ist so ähnlich wie das letzte. Kannst du eine „Zähle mit“-Schleife mit deiner Funktion benutzen, um dieses Design zu erstellen?
      NEW Course 4 Artist Params 13_instruction: |
        Lass und diese „Zeichne ein Vieleck“-Funktion ändern. Sie hat bereits einen Parameter „Seiten“. Lass uns nun einen Parameter „Länge“ ergänzen.
        Hinweis: Der Umfang jeder Form ist 200 Pixel lang. Kannst du dich noch an die Gleichung erinnern, mit der jede Figur gleich groß wird, auch bei unterschiedlicher Seitenanzahl?
      NEW Course 4 Artist Params 14_instruction: Bearbeite „Zeichne einen Spiralenrand“, um die Parameter „Länge“ und „Seiten“ zu verwenden, dann erstelle diese Figuren neu.
      NEW Course 4 Artist Params 15_instruction: 'Freies Spiel: Hier sind die Funktionen, die du geschrieben hast, und ein paar mehr für dich zum Spielen. Zeichne etwas Tolles! Spiele mit der Stiftbreite um zu sehen, wie unterschiedlich deine Zeichnungen aussehen!'
      NEW Course 4 Artist Params 2_instruction: Erstelle eine Funktion „Zeichne ein Dreieck“ mit einer Seitenlänge von 50 Pixeln von Grund auf.
      NEW Course 4 Artist Params 3_instruction: 'Nutze jetzt die Funktion, um 5 Dreiecke in einer Reihe zu zeichnen. Hinweis: Die Dreiecke sind jeweils 30 Pixel voneinander entfernt.'
      NEW Course 4 Artist Params 4_instruction: Fällt dir irgendetwas Neues an diesen Funktionsbausteinen auf? Klicke „Ausführen“, um zu sehen, was passiert.
      NEW Course 4 Artist Params 5_instruction: 'Fülle die ??? im Längenparameter-Eingabebaustein aus. Hinweis: Das Fünfeck hat 100 Pixel lange Seiten. '
      NEW Course 4 Artist Params 6_instruction: Fülle den „Längen“-Parameter aus, um diese Formen zu zeichnen, indem du die „???“ durch die richtigen Zahlen ersetzt. Das Quadrat und das Dreieck haben eine Kantenlänge von 100 Pixeln, das Sechseck ist 75 Pixel lang.
      NEW Course 4 Artist Params 7_instruction: 'Kannst du diese Zeichnung vervollständigen? Hinweis: Die Seite jedes Dreiecks sind 25 Pixel länger als die des vorherigen.  Das erste Dreieck hat Seiten von 25 Pixeln.'
      NEW Course 4 Artist Params 8_instruction: Der Code für diese Dreiecksfunktion ist defekt. Kannst du die Funktion überarbeiten, um ihn zu reparieren und dann Dreiecke mit einer Länge von 25, 50 und 75 erstellen?
      NEW Course 4 Artist Params 9_instruction: 'Klicke „Ausführen“, um die Funktionsdefinition von „Zeichne ein Quadrat“ auszufüllen und füge einen Parameter hinzu. Sie sollte auch von einem Längenparameter ausgehen, genau wie das Dreieck. Zeichne dieses Mal 3 Quadrate: 25, 50 und 75 Pixel lang, jeweils 100 Pixel voneinander entfernt.'
      NEW Course 4 Artist Params inspire_instruction: |
        Freies Spiel Inspiration: Du hast jetzt alles gelernt, um so ein Muster zu machen! Wenn dich das Bild inspiriert, versuche etwas Ähnliches zu machen. Wenn nicht, mach etwas ganz alleine.
        
        Möchtest du wissen, wie unser Inspirationsmuster gemacht wurde?
      NEW Course 4 Artist Vars 1.5_instruction: 'Schau dir den Code an, kannst du sehen, wie der Baustein „Länge einstellen“ und der Baustein „Länge“ zusammenarbeiten? Klicke „Ausführen“, um ihn in Aktion zu sehen. '
      NEW Course 4 Artist Vars 12_instruction: Schreib den Algorithmus vom letzten Level noch mal hin und erstelle ein Fünfeck mit einer Seitenlänge von 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Schau dir den Code an, kannst du sehen, wie der Baustein „Länge einstellen“ und der Baustein „Länge“ zusammenarbeiten? Klicke „Ausführen“, um ihn in Aktion zu sehen. '
      NEW Course 4 Artist Vars 2_instruction: 'Ziehe einen Nummernbaustein zum Baustein „Länge einstellen“, um ein Set von Dreiecken von 50 Pixeln zu zeichnen. '
      NEW Course 4 Artist Vars 4 5_instruction: Super gemacht beim vorigen Rätsel. Wir wollen es noch mal versuchen und dieses coole Muster mit den 60-Pixel-Sechsecken machen.
      NEW Course 4 Artist Vars 4_instruction: 'Probieren wir es noch einmal. Kannst du die Variable „Länge“ so einstellen, dass dieses coole Design aus Sechsecken entsteht? Hinweis: Es ist ein Vielfaches von 10.'
      NEW Course 4 Artist Vars 6_instruction: |
        Zeichne dieses Muster, indem du die Längenvariable an die richtigen Stellen setzt und dann den richtigen Wert für die Länge eingibst. (Hinweis: Es ist ein Vielfaches von 10).
        
        So braucht man die Länge nur an einer Stelle zu setzen - und der Code verwendet den richtigen Wert an jeder Stelle!
      NEW Course 4 Bee For Loops 1_instruction: Benutze eine Schleife, um den Nektar von jeder Blume zu sammeln.
      NEW Course 4 Bee For Loops 10_instruction: 'Mit der Zählvariablen der „Zähle mit"-Schleife kannst du die horizontale Entfernung festlegen.'
      NEW Course 4 Bee For Loops 10a_instruction: 'Bereit für eine Herausforderung?  Löse das Problem mit deinen bisherigen Kenntnissen über Schleifen. Denke daran: Wahrscheinlich brauchst du mehrere Durchläufe, bis alles richtig funktioniert.'
      NEW Course 4 Bee For Loops 11_instruction: Wie kann mit der Schleifenvariablen die Bewegung und das Einsammeln von Nektar gesteuert werden?
      NEW Course 4 Bee For Loops 2_instruction: Ergänze den nötigen Code, um sicherzustellen, dass die Biene den gesamten Nektar sammelt. Schau, wie viel Code du für diese Aufgabe benötigst! (In der nächsten Aufgabe lernen wir eine einfachere Methode.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ah, die „Zähl mit“-Schleife macht dies viel einfacher! Alles was du benötigst steht schon da. Schau dir an, wie die Anweisungen zusammengesetzt sind und führe das Programm aus, um zu sehen, wie es funktioniert. '
      NEW Course 4 Bee For Loops 4 4_instruction: 'Jetzt müssen wir „Zähler“ mal vorwärtsbewegen, dann „Zähler“ mal Nektar sammeln.  Kannst du diese Herausforderung mit zwei „Wiederholen“-Schleifen meistern?'
      NEW Course 4 Bee For Loops 4_instruction: 'Ersetze die ??? in der „Zähl mit“-Schleife mit der größten Menge an Nektar, den die Biene sammeln muss. '
      NEW Course 4 Bee For Loops 5 5_instruction: Kriegst du langsam heraus, wie man die „Zähle mit“-Schleife benutzt? Hilf der Biene, den Rest des Nektars zu sammeln.
      NEW Course 4 Bee For Loops 5_instruction: 'Du kannst auch eine „Zähle mit“- Schleife zum Runterzählen verwenden. Versuche, den Nektar durch das Runterzählen von 5 bis 1 in Einzerschritten zu sammeln.'
      NEW Course 4 Bee For Loops 6_instruction: 'Die letzte Zahl in deiner „Zähle mit“-Schleife ist die Schrittweite. Bei jedem Schleifendurchlauf wird der Zähler um die Schrittweite herauf- oder herabgesetzt. Sammle die Blumen ein, indem du eine Schrittweite von 2 benutzt.'
      NEW Course 4 Bee For Loops 7_instruction: |
        Kombinieren wir jetzt die „Zähler“-Variable mit dem Mathe-Baustein! Wie kann man sich mit möglichst wenigen Bausteinen mithilfe der Zählvariable durch den Garten bewegen? Wie kannst du 3, 6, 9, 12, 15 Portionen Nektar einsammeln? Die Lösung steckt in der Zählvariablen.
        
        Denke daran: Wenn deine Schleife heraufzählt, wird die Schrittweite bei jedem Durchlauf zu deinem „Zähler“ ergänzt.
      NEW Course 4 Bee For Loops 8_instruction: |
        Jetzt hast du es! Wie hoch sollte deine Schrittweite sein, um 3, 6, 9, 12, 15 Nektarportionen zu sammeln?
        Hinweis: Was musst du jeder Zahl hinzufügen, um die Zahl danach zu bekommen?
      NEW Course 4 Bee For Loops 9_instruction: Wenn Deine Schleife herunterzählt, wird ein Wert bei jedem Schleifendurchlauf von der Zählervariable abgezogen. Wie hoch sollte deine Schrittweite sein, um 15, dann 12 und später 9, 6, 3 mal Nektar zu sammeln?
      NEW Course 4 Bee For Loops 95_instruction: 'Schau dir jedes Stück der „Zähle mit“-Schleife an, die du gerade erstellt hast.  Kannst du herausfinden, welche Zahlen du verdoppeln musst, um diese Aufgabe zu lösen? Wozu dient es?'
      NEW Course 4 Play Lab Params 11_instruction: 'Zeit für freies Spiel! Viel Spaß mit all den Bausteinen in deinem Werkzeugkasten. '
      NEW Course 4 Play Lab Params 5 5_instruction: Lass uns das noch einmal versuchen, aber mit weniger Hilfe. Was musst du dieses Mal bearbeiten, um die Figur patrouillieren zu lassen?
      NEW Course 4 Play Lab Vars 4 5_instruction: Was meinst du, wird dieser Code bewirken? Klicke „Ausführen“, um zu sehen, was passiert.
      NEW Course 4 Play Labs For Loops 7a_instruction: Kannst du unter Heranziehung deines bisherigen Wissens den Dinosaurier dazu bringen, jedes Mal, wenn der Pinguin zählt, einen Schritt vorwärts zu gehen?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Freies Spielen! Viel Spaß mit all den Bausteinen in deinem Werkzeugkasten. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Herausforderung: Wie würdest Du die „Zähle mit“-Schleife verwenden, um jeden Schauspieler umherlaufen, seine Nummer sagen und dann vom Bildschirm verschwinden zu lassen? '
      New Play Lab Project_instruction: Programmiere deine eigene Geschichte oder dein eigenes Spiel! Dein Code wurde als Projekt gespeichert, zu dem du jederzeit zurückkehren kannst.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: In einen Creeper hinein zu laufen, ist eine schlechte Idee. Bewege dich vorsichtig an den Creeper vorbei und erreiche dein sicheres Zuhause.
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: Holz ist ein sehr wichtiger Rohstoff. Viele Dinge werden daraus hergestellt. Um einen Baum zu fällen, gehe zu seinem Stamm und benutze den „Zerstören“-Baustein.
      Overworld Chop Trees_instruction: Wir müssen ein Haus bauen, bevor die Sonne untergeht. Für Häuser braucht man viel Holz. Fälle alle 3 Bäume.
      Overworld Free Play 20x20_instruction: Herzlichen Glückwunsch! Du hast alle Aufgaben gelöst! Jetzt baue ab, baue und erstelle etwas Einzigartiges, indem du alles bisher Gelernte anwendest.
      Overworld Free Play_instruction: Diese Landschaft steht dir zum Spielen zur Verfügung. Du kannst auswählen, was du bauen willst.
      Overworld House Frame - A_instruction: Mache dein eigenes Haus! Dieser Ort sieht gut aus. Baue einen Rahmen auf den Erdbausteinen.
      Overworld House Frame - C_instruction: Mache dein eigenes Haus! Dieser Ort sieht gut aus. Baue einen Rahmen auf den Erdbausteinen.
      Overworld House Frame B_instruction: Eine Mauer ist fertig, lass uns den Rest des Hauses, in dem du dem Grundriss folgst, bauen! Du musst dich hier ziemlich häufig wiederholen.
      Overworld House Frame B2_instruction: Eine Mauer ist fertig, lass uns den Rest des Hauses, in dem du dem Grundriss folgst, bauen! Du musst dich hier ziemlich häufig wiederholen.
      Overworld House Frame C_instruction: Eine Mauer ist fertig, lass uns den Rest des Hauses, in dem du dem Grundriss folgst, bauen! Du musst dich hier ziemlich häufig wiederholen.
      Overworld House Frame Chosen_instruction: Baue den Rest deines Hauses aus einem Material deiner Wahl. Der „Wiederhole“-Befehl ist dabei sehr nützlich.
      Overworld House Frame_instruction: Mache dein eigenes Haus! Dieser Ort sieht gut aus. Baue einen Rahmen auf den Erdbausteinen.
      Overworld Minecart Track_instruction: Du bist wieder an der Oberfläche mit vielen unterirdischen Rohstoffen. Jetzt bauen wir Schienen entlang des Erdpfads, der von deinem Haus wegführt. Zuerst muss der Pfad freigeräumt werden. Folge dem Pfad und fälle die Bäume.
      Overworld Move to Sheep_instruction: Füge einen zweiten „Vorwärts“-Befehl hinzu, um zu den Schafen zu gelangen.
      Overworld Place Wall_instruction: 'Alle Häuser beginnen mit einer Wand. Baue den ersten Teil deines Hauses, indem du die „Platzieren“- und „Vorwärts“-Befehle in die Wiederholungsschleife platzierst.'
      Overworld Plant Crops_instruction: Es ist gut, vorauszuplanen. Pflanze auf beiden Seiten des Wassers Getreide an, damit du später nicht hungrig wirst.
      Overworld Powered Minecart_instruction: Gute Arbeit! Du hast viele Rohstoffe gesammelt und ein bescheidenes Haus gebaut. Lege jetzt Schienen vom Rand der Karte bis zur Tür deines Hauses.
      Overworld Shear Sheep_instruction: 'Zeit zum Schafescheren! Benutze den Befehl "scheren", um Wolle von beiden Schafen zu sammeln.'
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Funktionen erlauben dir, neue Blöcke zu definieren! Wir haben die Blöcke in eine Funktion namens „zeichne ein Quadrat“ verschoben, um ein Quadrat zu zeichnen. Kannst du die Funktion „zeichne ein Quadrat“ benutzen, um die Gläser zu erstellen? Die Quadrate haben einen Abstand von 75 Pixel.
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Rocket Height Course A_instruction: |
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: Die Biene will jetzt nur Nektar. Nicht alle Objekte sind Blumen, also sieh unter jeder Wolke nach, ob dort eine Blume versteckt ist. Falls ja, dann kannst du Nektar sammeln.
      Ryan - Bee Conditionals_instruction: Die Biene will jetzt nur Nektar. Nicht alle Objekte sind Blumen, also sieh unter jeder Wolke nach, ob dort eine Blume versteckt ist. Falls ja, dann kannst du Nektar sammeln.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: 'Hier ist eine Funktion namens „Patrouille“. Ändere sie so, dass die Katze sich 400 Pixel auf- und abwärts bewegt.'
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      sample1_instruction: "Our adventurer wants to collect gems.  But she can only\nuse 4 blocks to get them.\\r\n\\r\nCan you help her grab as many as she can\nusing just 4 blocks?"
      sample2_instruction: |
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: Now you can help bee make all of the honey.
      sample4_instruction: "Our adventurer has found a stash of coins in this cave.\\r\n\\r\nCan\nyou help her grab as many as she can using just 7 blocks?"
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Eichel! Eichel! Eichel! Verwende einen „Wenn"-Baustein, um mich mit der geringsten Anzahl an Bausteinen zum Ziel zu bringen.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'OK, nochmals zum Üben - das ist nicht sehr unterschiedlich, aber man muss auf die Wand achten!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Die „Wenn-Ansonsten“-Bausteine überprüfen eine Bedingung und führen dann entweder eine ODER eine andere Anweisung aus. Verwende diesen neuen Baustein, um mich zur Eichel zu bringen.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Noch eine Übung mit dem „Wenn-Ansonsten" Baustein, schaffst du es mit dem ersten Versuch?'
      scrat 20_instruction: Kannst du 3 Bausteine hinzufügen, um mit mir zusammen ein komplizierteres Labyrinth zu lösen? Wenn du es richtig machst, kann ich auf jedem kurvigen Weg entlang gehen, egal wie lang. Beeile dich! Das Eis schmilzt!
      SpecialFrozenLevel_instruction: Du bist ein richtiger Künstler geworden. Zeichne ein Winter-Wunderland.
      Standalone_Artist_1_instruction: Willkommen zu Künstler! Als Erstes versuchen wir, ein einfaches Quadrat zu zeichnen, indem wir den „Nach rechts drehen“-Baustein und den „Nach vorne bewegen“-Baustein verwenden. Jede Seite sollte 100 Pixel lang sein.
      Standalone_Artist_2_instruction: Malen diesen Diamanten mit 120 und 60 Grad Winkeln und 150 Pixel langen Seiten.
      Standalone_Artist_3_instruction: Kannst du ein Hexagon mit 100 Pixel Seitenlänge und 60°-Drehungen malen?
      Standalone_Artist_4_instruction: 'Jetzt hast du einen neuen Baustein zum Spielen: die Schleife. Dieser wird eine Reihe von Befehlen wiederholen. Was passiert, wenn du diesen Befehl 6 Mal wiederholst?'
      Standalone_Artist_5.5_instruction: 'Beachte, wie wir den Diamand-Code vereinfacht haben, indem wir ihn in eine Schleife umgesetzt haben. Du kannst die ganze Folge 12 Mal wiederholen, um die Blume zu zeichnen. Hinweis: Du musst nach deiner Diamantschleife um 30 Grad drehen, damit du denselben Diamanten nicht übermalst.'
      Standalone_Artist_5_instruction: Wie oft musst du diesen Diamant wiederholen, um eine Blume zu zeichnen?
      Standalone_Artist_6_instruction: 'Wiederhole diesen Sechseck-Code 6 Mal, um das Design zu schaffen. Um wie viel Grad musst du jedes mal drehen? Hinweis: Teile die Gradzahl in einem Kreis durch die Anzahl der Wiederholungen.'
      Standalone_Artist_7_instruction: 'Eine Funktion ist ein weiteres Programmierwerkzeug, um dir zu helfen, dich nicht selbst zu wiederholen. Diese Funktion zeichnet eine Blume, du kannst sie also immer benutzen, wenn du eine Blume zeichnen möchtest. Benutze diese Funktion und den neuen Spring-Baustein, um diese Blumen zu zeichnen. Hinweis: Die Blumen liegen 150 Pixel auseinander.'
      Standalone_Artist_8_instruction: Hier ist eine Funktion namens „Zeichne eine Figur“, die wir zum Zeichnen von Sechsecken programmiert haben. Führe den Code aus, um zu sehen, was er macht und experimentiere dann mit der Funktion, um zu sehen, was passiert. Kannst du mit ihr ein Muster von Quadraten, Dreiecken oder Fünfecken zeichnen?
      Standalone_Artist_9_instruction: Leg los und zeichne ein Bild deiner Wahl! Du erhältst eine leere Funktion, die das macht, was immer du sie machen lässt.
      Standalone_Artist_v2_instruction: Willkommen zu Künstler! Als Erstes versuchen wir, ein einfaches Quadrat zu zeichnen, indem wir den „Nach rechts drehen“-Baustein und den „Nach vorne bewegen“-Baustein verwenden. Jede Seite sollte 100 Pixel lang sein.
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Anweisungen
      U2 frequency random sub_instruction: Anweisungen
      U2 vigenere cipher_instruction: Anweisungen
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Vorlage
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Lava versteckt sich unter manchen dieser Bausteine, die du abdecken musst, bevor du dich vorwärts bewegst. Ein „Wenn“-Befehl ist hier praktisch. Füge einen „Bewege vorwärts“-Befehl an der richtigen Stelle ein, um diese Bausteine zu meiden.
      Underground If Statements_instruction: Jetzt wird des knifflig. Baue 3 Redstone-Bausteine ab, aber falle nicht in die Lava. Benutze einen „Wenn“-Befehl, um Kopfsteinpflaster über alle von dir entdeckte Lava zu platzieren.
      Underground Iron_instruction: In geschmolzene Lava zu laufen, ist keine gute Idee. Platziere Kopfsteinpflaster, um eine Brücke zu erstellen, und baue mindestens zwei Eisenblöcke ab.
      Underground Mine in a Circle_instruction: Finde einen Weg, 5 Diamanten und 7 Redstone zu erhalten! Versuche, einen „Wiederholen“-Befehl in einem „Wiederholen“-Befehl anzuwenden, um im Quadrat zu laufen.
      Underground Mining Coal_instruction: Du wirst die wertvollsten Rohstoffe unter der Erde finden, aber dort kann es dunkel sein. Platziere mindestens 2 Fackeln und baue mindestens 2 Kohleblöcke ab.
      Underground Test Level_instruction: Sammle alle Mineralien!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
