#TODO: Wrap numeric keys in quotes & rectify translations on Crowdin.
#Why? Well...
#1) Numeric keys in Yaml are loaded as Fixnums, not strings.
#2) Rails' i18n can only look up string or symbol keys.
#3) Crowdin proofreaders are translating filepaths, despite being hidden.
de:
  slides:
    maze_intro:
      1:
        image: 'notes/hoc1_1.jpg'
        text: "Willkommen bei deiner ersten \"Hour of Code\"! Fangen wir gleich mit der ersten Übung an."
      2:
        image: 'notes/hoc1_2.jpg'
        text: "Um Programme zu schreiben, benutzen wir Blockly, eine grafische Programmiersprache, in der du Bausteine per Drag-und-drop positionierst."
      3:
        image: 'notes/hoc1_3.jpg'
        text: "Meist wird Code als Text geschrieben, aber Blockly ist eine visuelle Sprache. Jeder Baustein entspricht einer Zeile \"echtem\" Code."
      4:
        image: 'notes/hoc1_4.jpg'
        text: "Du lernst die Grundlagen der Informatik, mit Konzepten, die überall verwendet werden, von einer App-Erstellung bis hin zur Steuerung eines Mars Rovers."
      5:
        image: 'notes/hoc1_5.jpg'
        text: "Ein Programm ist eine Sammlung von Anweisungen, die dein Computer befolgt."
      6:
        image: 'notes/hoc1_6.jpg'
        text: "Das Ziel bei deinem ersten Programm ist es, Angry Bird durch ein Labyrinth zu führen, um einen grünen Schwein zu treffen."
      7:
        image: 'notes/hoc1_7.jpg'
        text: "Die linke Seite ist das Labyrinth, in dem dein Programm ausgeführt wird. Die Anweisungen für jede Aufgabe stehen unter dem Labyrinth."
      8:
        image: 'notes/hoc1_8.jpg'
        text: "Der mittlere Werkzeugkasten enthält die Befehlsbausteine für den Angry Bird. Verwende sie, um das Programm zu erstellen."
      9:
        image: 'notes/hoc1_9.jpg'
        text: "Rechts ist der Arbeitsbereich, wo die Bausteine aus dem Werkzeugkasten zum Programm zusammengesetzt werden. Um einen Baustein zu löschen, ziehe ihn in den Papierkorb in der Ecke."
      10:
        image: 'notes/hoc1_10.jpg'
        text: "Jeder Baustein ist eine Anweisung. Wenn du einen \"Vorwärts bewegen\"-Baustein auf deinen Arbeitsbereich ziehst und anschließend \"Programm starten\" drückst, dann bewegt sich der Vogel im Labyrinth einen Schritt nach vorne."
      11:
        image: 'notes/hoc1_11.jpg'
        text: "Um mehr als einen Schritt zu machen, kannst du viele Bausteine auf deinen Arbeitsplatz ziehen und zusammensetzen. Der Vogel wird die Anweisungen von oben nach unten ausführen."
      12:
        image: 'notes/hoc1_12.jpg'
        text: "Wenn Du ein Programm reparieren und es nochmals versuchen möchtest, dann drücke die Schaltfläche \"Zurücksetzen\"."
      13:
        image: 'notes/hoc1_13.jpg'
        text: "Holen wir die Schweine!"
    artist_intro:
      1:
        image: 'notes/stage5_1.jpg'
        text: "Hallo, ich bin JR! Jedes Rennteam braucht Informatiker, um zu gewinnen. Informatiker analysieren die Daten vom Auto, damit es noch schneller fährt."
      2:
        image: 'notes/stage5_2.jpg'
        text: "Bei diesen Aufgaben bist du ein Künstler, der überall, wo er hinläuft, eine Linie zeichnet."
      3:
        image: 'notes/stage5_3.jpg'
        text: "Auf diesem Baustein steht \"vorwärts bewegen um 100 Pixel\". Pixel sind kleine Punkte auf deinem Bildschirm."
      4:
        image: 'notes/stage5_4.jpg'
        text: "Auf diesem Baustein steht \"nach rechts drehen um 90 Grad\". Damit dreht sich dein Künstler, genau wie beim \"Drehen\"-Baustein in den Labyrinth-Aufgaben."
      5:
        image: 'notes/stage5_5.jpg'
        text: "Klicke auf den Pfeil in den Bausteinen, um zu verändern, wie weit die Künstlerfigur nach vorne läuft oder sich dreht. Spiele etwas mit diesen Bausteinen herum, um mit ihnen vertraut zu werden."
    farmer_intro:
      1:
        image: 'notes/stage9_1.jpg'
        text: "Hallo, ich bin Paola! In dieser Aufgabe bist du eine Bäuerin, die ihr Feld völlig flach bekommen muss, um mit dem Anpflanzen zu beginnen."
      2:
        image: 'notes/stage9_2.jpg'
        text: "Du musst ihr helfen, alle Erdhaufen zu entfernen und alle Löcher zu füllen."
      3:
        image: 'notes/stage9_3.jpg'
        text: "Die neuen Bausteine entfernen eine Schaufel Erde von einem Haufen und füllen eine Schaufel voll Erde in ein Loch."
      4:
        image: 'notes/stage9_4.jpg'
        text: "Die Haufen und Löcher sind unterschiedlich groß. Deshalb musst du der Bäuerin sagen, wie viele Schaufeln sie nehmen muss."
    flappy_intro:
      1:
        image: 'notes/flappy01.jpg'
        text: "Hallo, ich bin Katie! Am Interessantesten an der Informatik ist, dass ein Computerprogramm interaktiv sein kann."
      2:
        image: 'notes/flappy02.jpg'
        text: "Jedes Mal, wenn jemand auf einem Computer oder Smartphone klickt, den Bildschirm berührt oder tippt, wird ein Event erzeugt und Code wird ausgeführt, der entscheidet was bei diesem Event zu tun ist."
      3:
        image: 'notes/flappy03.jpg'
        text: "Zum Beispiel könntest du einen \"Ereignis-Verarbeiter\" haben, der sagt: \"Wenn mit der Maus geklickt wird, spiele einen Ton\" "
      4:
        image: 'notes/flappy04.jpg'
        text: "Kennst du das Spiel FlappyBird? Wir verwenden \"Ereignis-Verarbeiter\", um eine eigene Version von FlappyBird zu programmieren!"
      5:
        image: 'notes/flappy05.jpg'
        text: "Um den Code zu schreiben, musst du per Drag-und-drop Bausteine verschieben, die Befehle für den Computer sind. Jeder der Bausteine repräsentiert in Wirklichkeit echten Code."
      6:
        image: 'notes/flappy06.jpg'
        text: "Wenn du einen Blick auf den Arbeitsbereich wirfst, siehst du einige grüne Bausteine, die für dich eingefügt wurden - das sind \"Ereignis-Verarbeiter\" "
      7:
        image: 'notes/flappy07.jpg'
        text: "Wenn du den Vogel beim Mausklick mit den Flügeln schlagen lassen willst, kannst du das durch Anhängen des \"flattern\"-Bausteine an den passenden \"Ereignis-Verarbeiter\" erreichen. Nun wird der Vogel jedes Mal seine Flügel bewegen, wenn mit der Maus geklickt wird."
      8:
        image: 'notes/flappy08.jpg'
        text: "In jeder Aufgabe dieser Übung werden wir neue Arten von Events als grüne Bausteine im Arbeitsbereich einfügen und du kannst die passenden Bausteine für Events auswählen."
      9:
        image: 'notes/flappy09.jpg'
        text: "Wenn du einen Dropdown-Pfeil wie diesen siehst, kannst du die Einstellungen ändern - zum Beispiel, was für ein Ton abgespielt werden soll, wenn der Vogel den Boden berührt."
      10:
        image: 'notes/flappy10.jpg'
        text: "In der letzten Aufgabe erstellst du dein eigenes Spiel, das du deinen Freunden zeigen kannst. Viel Spaß!"
    loop_times:
      1:
        image: 'notes/hoc2_1.jpg'
        text: "Hallo, ich bin Mark! Lass uns etwas über Schleifen lernen. Wenn Du Schleifen verwendest, kannst du dem Computer befehlen, dass er jede beliebige Anweisung wieder und wieder, tausendmal oder sogar milliardenmal, wiederholen soll."
      2:
        image: 'notes/hoc2_2.jpg'
        text: "In dieser Aufgabe möchten wir, dass sich der Vogel 5 Schritte nach vorne zum Schwein bewegt."
      3:
        image: 'notes/hoc2_3.jpg'
        text: "Wir können den neuen \"Wiederholen\"-Baustein verwenden, um uns zu helfen."
      4:
        image: 'notes/hoc2_4.jpg'
        text: "Anstatt 5 \"vorwärts gehen\"-Bausteine herauszutragen..."
      5:
        image: 'notes/hoc2_5.jpg'
        text: "Ziehen wir den \"Vorwärts bewegen\"-Baustein in einen \"Wiederholen\"-Baustein und geben eine Zahl im Baustein an, wie oft es wiederholt werden soll."
      6:
        image: 'notes/hoc2_6.jpg'
        text: "Und wichtig: Man kann mehr als einen Baustein in einen \"Wiederholen\"-Baustein ziehen."
      7:
        image: 'notes/hoc2_7.jpg'
        text: "Viel Spaß mit deinem neuen \"Wiederholen\"-Baustein!"
    loop_until:
      1:
        image: 'notes/hoc3_1.jpg'
        text: "Hallo, ich bin Chris. Bevor ich zu Miami Heat gegangen bin, habe ich an der Georgia-Tech-Universität Informatik studiert. Probieren wir unseren neuen Baustein aus, den \" Wiederholen bis\"-Baustein."
      2:
        image: 'notes/hoc3_2.jpg'
        text: "Was tun wir, wenn wir nicht wissen, wie weit der Vogel laufen muss, um zum Schwein zu kommen?"
      3:
        image: 'notes/hoc3_3.jpg'
        text: "Wenn wir einen \"Vorwärts bewegen\"-Baustein in den \"Wiederholen bis\"-Baustein setzen, wird sich der Vogel nach vorne bewegen BIS er bei einem Schwein ankommt (oder gegen die Wand läuft)."
      4:
        image: 'notes/hoc3_4.jpg'
        text: 'Und das ist wichtig: wie zuvor auch, können wir in den "Wiederholen bis"-Baustein mehrere Bausteine setzen, die dann alle wiederholt werden.'
    if:
      1:
        image: 'notes/hoc4_1.jpg'
        text: "Hallo, ich bin Bill! Heute lernen wir ein neues, wichtiges Konzept: \"Wenn\"-Anweisungen. So trifft ein Computer Entscheidungen."
      2:
        image: 'notes/hoc4_2.jpg'
        text: "Du selbst verwendest \"Wenn\"-Anweisungen täglich. Bevor du am Morgen nach draußen gehst, sagst du zu dir: WENN es draußen regnet, muss ich meine Jacke anziehen."
      3:
        image: 'notes/hoc4_3.jpg'
        text: "Wir können den Zombie anweisen, zu überprüfen, ob es einen Weg nach links gibt. WENN er einen Weg nach links findet, soll er sich in diese Richtung drehen."
      4:
        image: 'notes/hoc4_4.jpg'
        text: "Um ein Programm dafür zu schreiben, verwende zuerst den \"Wenn\"-Baustein und setze danach einen \"Nach links drehen\"-Baustein hinein."
      5:
        image: 'notes/hoc4_5.jpg'
        text: "Wenn wir jetzt einen \"Vorwärts bewegen\"-Baustein darüber setzen und alles in einen \"Wiederholen\"-Baustein einschließen, prüft der Zombie jedes Mal, wenn er sich bewegt, ob es links einen Weg gibt. Der Befehl \"Wiederholen\" ist sehr wichtig, damit bei jedem Schritt erneut geprüft wird."
      6:
        image: 'notes/hoc4_6.jpg'
        text: "\"Wenn\"-Anweisungen sind in der Informatik sehr wichtig. Eines meiner ersten Programme war \"Drei gewinnt\". Dort gab es eine \"Wenn\"-Anweisung, die sagte, WENN die andere Person beinahe gewinnt, dann blockiere das Feld, mit dem sie gewinnen kann."
      7:
        image: 'notes/hoc4_7.jpg'
        text: "Viel Spaß mit dem \"Wenn\"-Baustein!"
    if_else:
      1:
        image: 'notes/hoc5_1.jpg'
        text: "Hallo, ich heiße Saloni. Ich verwende Informatik, um Probleme der Medizin zu lösen. Heute werden wir mehr über den \"Wenn-Ansonsten\"-Baustein lernen. Er sieht aus wie der \"Wenn\"-Baustein, hat aber einen Extrateil am Ende, auf dem \"ansonsten\" steht."
      2:
        image: 'notes/hoc5_2.jpg'
        text: "Wenn ich einen \"Vorwärts bewegen\"-Baustein hinter \"mache\" setze, und einen \"Nach links drehen\"-Baustein hinter \"ansonsten\" setze, wählt der Zombie zwischen zwei Optionen aus. WENN es einen Weg geradeaus gibt, bewegt sich der Zombie vorwärts, ANSONSTEN (wenn es keinen Weg geradeaus gibt), dreht sich der Zombie nach links."
      3:
        image: 'notes/hoc5_3.jpg'
        text: "Genau wie einen \"Wenn\"-Baustein, können wir einen \"Wenn-Ansonsten\"-Baustein in einen \"Wiederholen\"-Baustein setzen, so dass der Zombie sich weiter bewegt und der \"Wenn-Ansonsten\"-Baustein prüft, ob es einen Weg zum Drehen gibt."
      4:
        image: 'notes/hoc5_4.jpg'
        text: "Jetzt bring die Zombies dahin, wo sie hingehören!"
    if_else_scrat:
      1:
        image: 'notes/saloni_ifelse_scrat1.jpg'
        text: "Eine \"Wenn-Ansonsten\"-Anweisung ist eine Entscheidung zwischen zwei Möglichkeiten. Lass uns sehen, wie wir eine \"Wenn-Ansonsten\"-Anweisung bei unserem Freund Scrat verwenden können."
      2:
        image: 'notes/saloni_ifelse_scrat2.jpg'
        text: "Dieser Baustein sieht fast genauso aus wie der \"Wenn\"-Baustein, aber unten ist ein Extrateil, auf dem \"ansonsten\" steht. Wenn ich einen \"Vorwärts bewegen\"-Baustein hinter \"mache\" setze, und einen \"Nach links drehen\"-Baustein hinter \"ansonsten\" setze, bewegt sich Scrat das Eichhörnchen nach vorne, wenn es einen Weg geradeaus gibt. Wenn es keinen Weg geradeaus gibt, dreht sich Scrat nach links."
      3:
        image: 'notes/saloni_ifelse_scrat3.jpg'
        text: "Er trifft eine Entscheidung und wählt eine der beiden Aktionen aus. Genau wie \"Wenn\"-Bausteine können auch \"Wenn-Ansonsten\"-Bausteine in \"Wiederholen\"-Bausteine eingefügt werden."
      4:
        image: 'notes/saloni_ifelse_scrat4.jpg'
        text: "Lass uns Scrat dabei helfen, die Eichel zu erreichen."
    function:
      1:
        image: 'notes/stage13_1.jpg'
        text: "Hi, bin ich Brina, Ingenieur bei Instagram. Eine Funktion ist eine Reihe bestimmter Codezeilen, die du immer wieder verwenden möchtest. Anstatt diese Zeilen immer wieder neu zu schreiben, kannst du einfach einen Baustein verwenden."
      2:
        image: 'notes/stage13_2.jpg'
        text: "Wir werden lernen, wie man Funktionen definiert. Funktionsdefinitionen haben einen Stern in der Ecke. Der Name der Funktion steht in der obersten Zeile."
      3:
        image: 'notes/stage13_3.jpg'
        text: "Die Bausteine in der Definition sagen, was die Funktion macht. Diese Funktionsdefinition heißt \"5 hinzufügen\" und ist aus einem \"Wiederholen\"-Baustein und einem \"hinzufügen\"-Baustein zusammengesetzt."
      4:
        image: 'notes/stage13_4.jpg'
        text: "Die Definition ist auf dem Arbeitsplatz, aber die Bäuerin wird die Funktion nicht ausführen, bis wir unseren \"5 hinzufügen\"-Baustein aus der Funktionen-Kategorie hinzufügen."
      5:
        image: 'notes/stage13_5.jpg'
        text: "Viel Spaß mit Funktionen! "
    loop_while:
      1:
        image: 'notes/stage9_5.jpg'
        text: "Hallo, ich bin Makinde! Ich zeige euch etwas über den \"Solange\"-Baustein. "
      2:
        image: 'notes/stage9_6.jpg'
        text: "Der \"Solange\"-Baustein führt alles aus, was in ihm enthalten ist, SOLANGE die Anweisung darüber WAHR ist."
      3:
        image: 'notes/stage9_7.jpg'
        text: "Wenn die Bäuerin zum Beispiel auf einem Haufen steht, wird sie immer wieder eine Schaufel Erde entfernen, SOLANGE unter ihr noch ein Haufen ist."
    loop_for:
      1:
        image: 'notes/stage11_1.jpg'
        text: "Hallo, ich bin Trina und arbeite für Pixar. Ich habe in vielen Filmen mitgearbeitet, darunter auch an Shrek."
      2:
        image: 'notes/stage11_2.jpg'
        text: "Das ist unsere neue \"Zähler\"-Schleife. Sie wiederholt Befehle immer und immer wieder und du kannst die Befehle jedes mal leicht verändern."
      3:
        image: 'notes/stage11_3.jpg'
        text: "In diesem Beispiel sagt die \"Zähler\"-Schleife \"Zähle mit Zähler von 50 bis 90 in 10-er-Schritte\" und in der Schleife gibt es einen \"Zeichne ein Quadrat\"-Baustein. Ziehe den \"Zähler\"-Baustein aus dem \"Variablen\"-Abschnitt auf die Stelle, wo der \"Länge\"-Baustein ist."
      4:
        image: 'notes/stage11_4.jpg'
        text: "Dies bedeutet, dass unser Künstler ein Quadrat zeichnen wird, das eine Seitenlänge von 50 Pixeln hat, dann wird er 10 hinzufügen und ein Quadrat mit einer Seitenlänge von 60 Pixeln zeichnen. Er wird immer 10 hinzufügen und Quadrate malen, bis er 90 erreicht hat. Also gibt es Quadrate mit Seitenlängen von 50, 60, 70, 80 und 90."
    parameters:
      1:
        image: 'notes/stage15_1.jpg'
        text: "Hi, ich bin Janete und ich bin Ingenieurin bei Zynga."
      2:
        image: 'notes/stage15_2.jpg'
        text: "Was machen wir, wenn wir ein paar Dreiecke mit verschiedenen Längen malen wollen?"
      3:
        image: 'notes/stage15_3.jpg'
        text: "Wir könnten den ganzen Code per Hand schreiben, oder wir benutzen eine Funktion mit Parametern."
      4:
        image: 'notes/stage15_4.jpg'
        text: "Um dies zu tun, klicke auf den blauen Stern der \"Zeichne ein Dreieck\"-Funktionsdefinition. Ziehe dann \"Name eingeben\" in den \"Eingeben\"-Baustein."
      5:
        image: 'notes/stage15_5.jpg'
        text: "Wenn du nun \"Länge\" an die Stelle schreibst, wo \"x\" steht, und dann \"Eingeben\" drückst, erstellst du eine Längeneingabe für deine Funktion."
      6:
        image: 'notes/stage15_6.jpg'
        text: "Klicke dann auf den Stern. Jetzt klickst du auf die \"Variablen\"-Kategorie und ziehst den \"Länge\"-Baustein in den \"Vorwärts bewegen\"-Baustein deiner Funktionsdefinition. Ziehe den alten Nummernbaustein weg."
      7:
        image: 'notes/stage15_7.jpg'
        text: "Um deine Funktion mit Parametern zu benutzen, klicke auf die \"Funktionen\"-Kategorie und ziehe deine \"Zeichne ein Dreieck mit Länge\"-Funktion heraus."
      8:
        image: 'notes/stage15_8.jpg'
        text: "Jetzt kannst du den Mathe-Baustein verändern, um Dreiecke in verschiedenen Größen zu zeichnen."
    hoc_wrapup:
      1:
        image: 'notes/hoc6_1.jpg'
        text: "Herzlichen Glückwunsch! In der letzten Aufgabe hast du ein Programm geschrieben, das JEDER Roboter dazu verwenden kann, um seinen Weg durch nicht-verzweigte Labyrinthe oder Tunnel aller Längen zu finden. Ganz egal, ob es ein Zombie, ein Vogel, ein Mars-Rover, oder sogar ein selbstfahrendes Auto ist."
      2:
        image: 'notes/hoc6_2.jpg'
        text: "Die grundlegenden Konzepte, die du verwendet hast, sind dieselben, die in allen Programmen oder Apps verwendet werden.  Wir haben erfahren, wie \"Wiederholen\"-Schleifen, \"Wiederhole bis\"-Schleifen, \"Wenn\"-Anweisungen und \"Wenn-ansonsten\"-Anweisungen funktionieren."
      3:
        image: 'notes/hoc6_3.jpg'
        text: "Wenn dir deine erste \"Hour of Code\" gefallen hat, besuche Code.org, um noch mehr über Informatik zu lernen. Sobald Du unseren 20 Stunden-Kurs abgeschlossen hast, hast Du die Grundlagen des Programmierens gemeistert und kannst lernen, wie man Apps, Roboter-Anweisungen, Spiele oder andere Dinge programmiert."
      4:
        image: 'notes/hoc6_4.jpg'
        text: "Technologie verändert alles, was wir tun, und es ist egal, ob du jung oder alt bist: Programmieren macht Spaß, es ist kreativ, und jeder kann es lernen!"
    20_wrapup:
      1:
        image: 'notes/bird.png'
        text: "Hinweise anzeigen kommt bald!"
    frozen_intro:
      1:
        image: 'notes/frozen1_1.jpg'
        text: "Hallo, ich heiße Lyndsey. Ich bin Model, Schauspielerin und programmiere meine eigenen Apps. Verwende Code, um Anna und Elsa bei ihrer Entdeckung der Magie und Schönheit von Eis zu begleiten."
      2:
        image: 'notes/frozen1_2.jpg'
        text: "Du wirst Schneeflocken und Muster erschaffen, während du Schlittschuh fährst und ein Winterwunderland erstellst, das du dann mit deinen Freunden teilen kannst."
      3:
        image: 'notes/frozen1_3.jpg'
        text: "Während der nächsten Stunde wirst du die Grundlagen des Programmierens lernen. Traditionell wird in Textform programmiert, aber heute benutzen wir Blockly: ein System, bei dem man per Drag & Drop grafische Bausteine verschiebt und so Programme schreibt. Selbst Studenten an der Universität lernen so die Grundlagen. Im Hintergrund wird dabei nach wie vor Code erstellt."
      4:
        image: 'notes/frozen1_4.jpg'
        text: "Ein Programm ist eine Reihe von Anweisungen, die einem Computer sagen, was er tun soll. Wir werden einen Code oder ein Programm schreiben, mit dem Elsa eine einfache Linie zeichnet. Später werden wir kompliziertere Muster machen."
      5:
        image: 'notes/frozen1_5.jpg'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist die Eisfläche, auf der dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen direkt unter der Eisfläche."
      6:
        image: 'notes/frozen1_6.jpg'
        text: "Dieser mittlere Bereich ist die Werkzeugkiste, und jeder dieser Bausteine ist eine Aktion, die Elsa und Anna ausführen können."
      7:
        image: 'notes/frozen1_7.jpg'
        text: "Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen. Mit dem \"Vorwärts bewegen\"-Baustein bewegst du dich auf der Eisfläche."
      8:
        image: 'notes/frozen1_8.jpg'
        text: "Auf diesem Baustein steht \"vorwärts bewegen um 100 Pixel\". Was passiert, wenn wir auf \"ausführen\" klicken? Elsa bewegt sich auf dem Bildschirm um eine bestimmte Strecke, nämlich 100 Pixel, nach vorne. Pixel sind sehr kleine Punkte auf deinem Bildschirm."
      9:
        image: 'notes/frozen1_9.jpg'
        text: "Der andere Baustein in dieser Aufgabe sagt \"nach rechts drehen um 90 Grad\". Und wenn wir diesen \"Nach rechts drehen\"-Baustein verwenden, dreht sich Elsa in einem bestimmten Winkel. Spiele mit dem Baustein und lasse Elsa sich drehen. Der Winkel wird gemessen ab dem Weg vor Elsa. Das ist eine 90-Grad-Drehung. Das ist eine 120-Grad-Drehung."
      10:
        image: 'notes/frozen1_10.jpg'
        text: "Denk dran, du kannst die Anzahl der Pixel und die Weite der Drehung ändern, indem du auf die Pfeile direkt daneben drückst."
    frozen_loops:
      1:
        image: 'notes/frozen2_1.jpg'
        text: "Hallo, ich bin Paola! Computer sind sehr gut darin, Aktionen zu wiederholen. Du kannst bis 10, 20 oder 100 zählen. Aber ein Computer kann bis zu einer Milliarde oder einer Billion zählen. Ihm wird nicht langweilig und es dauert nur einige Sekunden. Nicht nur beim Zählen, sondern auch beim Zeichnen oder anderen Aufgaben können Computer hunderte oder sogar Millionen von Wiederholungen machen."
      2:
        image: 'notes/frozen2_2.jpg'
        text: "Beim Programmieren nennen wir dies eine Schleife. Eine Schleife wiederholt deinen Code wieder und wieder. Bei der nächsten Aufgabe musst du mit Anna ein Quadrat mit dem \"Wiederholen\"-Baustein zeichnen."
      3:
        image: 'notes/frozen2_3.jpg'
        text: "Alle Codebausteine, die du in den \"Wiederholen\"-Baustein setzt, werden der Reihe nach wiederholt, so oft du willst."
      4:
        image: 'notes/frozen2_4.jpg'
        text: "Um ein Quadrat zu zeichnen, kannst du die Bausteine \"vorwärts bewegen\" und \"nach rechts drehen\" 4 Mal verwenden. Aber es ist einfacher, dem Computer nur einmal zu befehlen, sich vorwärts zu bewegen und nach rechts zu drehen, und ihn dann diese beiden Aktionen 4 Mal wiederholen zu lassen. Dafür musst du die Bausteine \"vorwärts bewegen\" und \"nach rechts drehen\" in einen \"Wiederholen\"-Baustein setzen."
      5:
        image: 'notes/frozen2_5.jpg'
        text: "Denk dran, du kannst die Zahl in dem \"Wiederholen\"-Baustein verändern, und er wird das, was sich in dem Baustein befindet, so oft wie angegeben wiederholen."
    frozen_functions:
      1:
        image: 'notes/frozen3_1.jpg'
        text: "Hallo, ich bin Chris Bosh. Ich bin ein professioneller Basketball-Spieler und ich habe an der Uni programmiert."
      2:
        image: 'notes/frozen3_2.jpg'
        text: "Eines der wichtigsten Konzepte der Informatik ist die Definition neuer Befehle. Die meisten Computersprachen haben nur 100 Wörter oder Befehle. Die Kunst besteht darin, aus diesen Bausteinen neue Wörter zusammenzusetzen."
      3:
        image: 'notes/frozen3_3.jpg'
        text: "Hast du deinem Computer erst einmal beigebracht, eine Aktion auszuführen, indem du eine Befehlssequenz verwendet hast, kannst du dieser Aktion einen eigenen Namen geben, sodass es leicht ist, sie später zu wiederholen. Definierst du einen eigenen Befehl und gibst ihm einen Namen, nennt man das eine Funktion."
      4:
        image: 'notes/frozen3_4.jpg'
        text: "Hallo, ich bin Jess! Beim Programmieren mit Bausteinen nutzt man Funktionen, wenn es eine Reihe von Handlungen gibt, die man öfter verwenden möchte. Ein Beispiel ist der Code, den du geschrieben hast, um ein Quadrat zu zeichnen."
      5:
        image: 'notes/frozen3_5.jpg'
        text: "Du kannst diese Funktion \"ein Quadrat zeichnen\" nennen. "
      6:
        image: 'notes/frozen3_6.jpg'
        text: "Nun hast du einen neuen Baustein, den du viele Male benutzen kannst, um mehrere Quadrate zu zeichnen."
      7:
        image: 'notes/frozen3_7.jpg'
        text: "Viele einfache Formen können verwendet werden, um komplexe Muster zu zeichnen. In der nächsten Aufgabe ist der Code, den du geschrieben hast, um einen Kreis zu zeichnen, als neue Funktion verfügbar, mit der du Kreise verschiedener Größen zeichnen kannst. Kannst du damit Elsa helfen, hübsche Muster in den Schnee zu zeichnen?"
    playlab_intro:
      1:
        image: 'notes/playlab_intro_1.png'
        text: "Wir werden Spiele mit dem Spielelabor erstellen. Gute Spiele haben eine Geschichte, und in jeder Geschichte gibt es verschiedene Figuren. Wir bringen unseren Figuren bei zu sprechen und zu interagieren, egal ob es Hexen, Außerirdische oder Tiere sind. Am Ende dieser Anleitung kannst du selbst ein Spiel aus einen Entwurf bauen und mit deinen Freunden teilen."
      2:
        image: 'notes/playlab_intro_2.png'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen darunter."
      3:
        image: 'notes/playlab_intro_3.png'
        text: "Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist eine Zeile Code. Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      4:
        image: 'notes/playlab_intro_4.png'
        text: "Am Anfang musst du deine Bausteine an den orangefarbenen \"Beim Ausführen\"-Baustein anhängen. Du kannst mehrere Bausteine miteinander verbinden, indem du sie ziehst, bis die gelbe Linie zu sehen ist, und sie werden sich von selbst zusammenfügen."
      5:
        image: 'notes/playlab_intro_5.png'
        text: "In dieser ersten Aufgabe ist unsere Figur ein Pinguin. Wir lassen ihn \"Hallo!\" sagen, indem wir den \"Sage\"-Baustein herausziehen, ihn mit dem \"Beim Ausführen\"-Baustein verknüpfen, und \"Hallo\" tippen. Wir können den Pinguin auch mit den Bausteinen \"Nach links bewegen\" und \"Nach rechts bewegen\" dazu bringen, herumzulaufen. Hast du erst einmal alle deine Bausteine am richtigen Platz, drück auf \"ausführen\", um zu sehen, was du programmiert hast."
      6:
        image: 'notes/playlab_intro_6.png'
        text: "Fang einfach an. Am Ende kannst du dein eigenes Spiel erstellen, mit allen möglichen Arten von Spielern, die miteinander interagieren, glücklich oder traurig sind, Punkte erzielen oder einander sogar verschwinden lassen. Du kannst selbst entscheiden, wie dein Spiel aussehen soll."
    playlab_events:
      1:
        image: 'notes/playlab_events_1.png'
        text: "Jetzt lernen wir ein Element kennen, das alle Spiele-Programmierer jeden Tag benutzen. Es heißt \"Ereignisse\". Ein Ereignis sagt deinem Programm darauf zu achten, ob etwas passiert. Wenn das Ereignis passiert, führt das Programm eine Aktion aus."
      2:
        image: 'notes/playlab_events_2.png'
        text: "Ereignisse sind beispielsweise das Achten auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms."
      3:
        image: 'notes/playlab_events_3.png'
        text: "Hier bringen wir den Space Bot dazu, die Erdlinge zu grüßen, wenn ein Spieler auf ihn klickt. Wir verwenden den Baustein \"Wenn angeklickt wird\" und hängen den \"Sage\"-Baustein daran. Wenn der Spieler auf den Space Bot klickt, werden alle Anweisungen ausgeführt, die an diesen \"Wenn angeklickt wird\"-Baustein angehängt sind. Was sagt Dein Außerirdischer?"
      4:
        image: 'notes/playlab_events_4.png'
        text: "Es gibt auch \"Wenn Pfeil\"-Bausteine. Wenn du die \"Bewegen\"-Bausteine daran hängst, kannst du deine Figuren nach oben, unten, links oder rechts bewegen. So wird dein Spiel nach und nach immer interaktiver."
    playlab_repeat_forever:
      1:
        image: 'notes/playlab_repeat_forever_1.png'
        text: "Das ist der \"Ewig wiederholen\"-Baustein. Alles innerhalb dieses Bausteins wird im Spiel immer wieder passieren."
      2:
        image: 'notes/playlab_repeat_forever_2.png'
        text: "Willst du eine Figur dazu bringen, etwas immer wieder zu machen, ohne dass der Spieler etwas tun muss, setzen wir die Bausteine in den \"Ewig wiederholen\"-Baustein."
      3:
        image: 'notes/playlab_repeat_forever_3.png'
        text: "In der nächsten Aufgabe müssen wir dem Zauberer helfen, die Grenzen des Königreichs zu bewachen und immer hin und her zu laufen. Wenn du lernst, wie der „Wiederholen“-Befehl funktioniert, kannst du später viel Zeit sparen, wenn du dein eigenes Spiel programmierst."
    C1_artist_intro:
      1:
        image: 'notes/C1_artist_intro_1.png'
        text: "Das sind deine \"Zeichnen\"-Bausteine. Verwende den richtigen Baustein, um den Künstler dorthin zu bewegen, wo er die grauen Linien ausfüllen soll."
      2:
        image: 'notes/C1_artist_intro_2.png'
        text: "Dies sind die \"Springen\"-Bausteine. Wenn du diese Bausteine verwendest, bewegt sich der Künstler, zeichnet aber nicht. Verwende sie, um zur nächsten grauen Linie zu gelangen."
    C1_bee_level_intro:
      1:
        image: 'notes/C1_bee_level_intro_1.png'
        text: "Bienen sind einfach toll. In diesen Aufgaben musst du der Biene helfen, den Nektar aus den Blumen zu sammeln und zur Honigwabe zu fliegen, um dort Honig zu machen. Du musst für diese Aufgabe die Bausteine \"nimm Nektar\" und \"Honig machen\" verwenden."
      2:
        image: 'notes/C1_bee_level_intro_2.png'
        text: "Jede Blume enthält eine unterschiedliche Menge an Nektar: 1, 2, 3 Portionen oder mehr. Wir wissen, wie viel Nektar in den roten Blumen ist, denn in der Ecke steht eine kleine Zahl. Pass auf, dass du den ganzen Nektar aus der Blume holst, bevor du weiterfliegst. In jede Honigwabe passt nur eine bestimmte Menge Honig: 1, 2, 3 Portionen oder mehr. Pass auf, dass du die Honigwabe ganz mit Honig füllst."
      3:
        image: 'notes/C1_bee_level_intro_3.png'
        text: "Wenn du den gesamten Nektar eingesammelt und alles zu Honig verarbeitet hast, erreichst du den nächsten Level. Ansonsten musst du diese Aufgabe noch einmal versuchen. Probiere etwas herum und sein ein bienenfleißiger Programmierer!"
    C1_bee_loops:
      1:
        image: 'notes/C1_bee_loops_1.png'
        text: "Eine Schleife ist die Wiederholung einer Aktion. Wenn ich einen Bienenkasten überprüfe, nehme ich einen Rahmen nach dem anderen heraus und schaue ihn an. Das bedeutet, dass ich dieselbe Aktion mehrmals wiederhole."
      2:
        image: 'notes/C1_bee_loops_2.png'
        text: "In dieser Aufgabe soll die Biene drei Portionen Nektar aus der Blume holen. Anstatt drei \"Nimm Nektar\"-Bausteine zu verwenden, kannst du den \"Wiederholen\"-Baustein verwenden, um 3-mal Nektar zu sammeln. Klicke auf \"ausführen\" und schau nach, ob du alles richtig gemacht hast. Super!"
    C1_bigevent_unplugged:
      1:
        image: 'notes/C1_bigevent_unplugged_1.png'
        text: "Diese Lektion heißt \"Das große Ereignis\". Es geht darum, Programme zu kontrollieren und laufende Programme über Ereignisse wie einen Tastendruck oder einen Mausklick zu ändern."
      2:
        image: 'notes/C1_bigevent_unplugged_2.png'
        text: "In dieser Übung wirst du mit einer Papier-Fernbedienung gesteuert. Es ist wie ein Video-Spiel in echt."
      3:
        image: 'notes/C1_bigevent_unplugged_3.png'
        text: "Ein Ereignis ist eine Aktion, die eine Handlung auslöst. So wie wenn du die Maustaste drückst, und eine Webseite sich öffnet. Das ist ein Ereignis. Wenn du deinen Bildschirm auf dem Tablet berührst, um den Fensterinhalt zu verschieben, ist das auch ein Ereignis. Ereignisse ermöglichen den Anwendern, dein Programm zu steuern, wenn sie möchten."
      4:
        image: 'notes/C1_bigevent_unplugged_4.png'
        text: "Auf manche Ereignisse reagieren wir alle. Wenn wir hungrig sind, gehen wir zum Kühlschrank. Wenn wir hören, dass der Briefträger die Post in den Briefkasten legt, gehen wir unsere Post holen. Das sind alles Ereignisse, genauso wie das Klicken auf eine Schaltfläche oder die Bewegung eines Joysticks. Ereignisse sind etwas, das passiert, und uns dazu bewegt, etwas zu tun."
      5:
        image: 'notes/C1_bigevent_unplugged_5.png'
        text: "In Videospielen gibt es ein Ereignis namens \"Update\", das 30- oder 60-mal pro Sekunde geschieht. Für Spiele-Programmierer ist dieses Ereignis fast noch wichtiger als Schaltflächen oder Joystick."
      6:
        image: 'notes/C1_bigevent_unplugged_6.png'
        text: "Das wichtigste Ereignis, auf das wir warten, ist der \"Update\". Und dann überprüfen wir den Joystick. Wir fragen: \"Hat jemand gerade den Joystick bewegt? Ja oder nein?\" Ohne Ereignisse kann der Spieler sich nicht bewegen, nicht springen oder kontrollieren, was im Spiel passiert. Das Spiel würde nicht funktionieren."
    C1_building_foundation:
      1:
        image: 'notes/C1_building_foundation_1.jpg'
        text: "Wenn du eine Sandburg baust, weißt du, dass sie früher oder später wieder kaputtgeht. Aber mit der Zeit lernst du, immer bessere und größere Sandburgen zu bauen. Du musst nur dran bleiben. Gib nicht auf, es macht wirklich sehr viel Spaß!"
      2:
        image: 'notes/C1_building_foundation_2.jpg'
        text: "Diese Lektion heißt „ein Fundament aufbauen“. Dabei arbeiten wir an einer Aufgabe, die wirklich schwierig ist. Du musst eine Struktur bauen, die mindestens so hoch wie eine dieser Tassen und stark genug ist, um das Gewicht eines Buchs zu halten."
      3:
        image: 'notes/C1_building_foundation_3.jpg'
        text: "Oft klappt ein solches Vorhaben nicht auf Anhieb. Manchmal wirst du vielleicht frustriert und möchtest aufgeben. Solche Momente können ziemlich oft vorkommen. Aber wenn wir nicht aufgeben und es immer und immer wieder versuchen, werden wir es früher oder später schaffen."
      4:
        image: 'notes/C1_building_foundation_4.jpg'
        text: "Beharrlichkeit bedeutet, dass du es immer wieder versuchst, auch wenn du eigentlich aufgeben möchtest. Wenn du etwas Neues und Anders schaffen willst, wirst du viele Versuche bis zum Erfolg brauchen."
      5:
        image: 'notes/C1_building_foundation_5.jpg'
        text: "Der Trick bei der Beharrlichkeit ist, sich dafür zu entscheiden, weiterzumachen und aus deinen Fehlern zu lernen, anstatt frustriert aufzugeben. Frustration bedeutet eigentlich nur, dass du bis zum Ziel noch ein Stück gehen musst. Also gib nicht auf, bevor du am Ziel bist. Mach einfach weiter!"
    C1_getting_loopy:
      1:
        image: 'notes/C1_getting_loopy_1.png'
        text: "Hallo, ich bin Miral Kotb und der Schöpfer von Iluminate. Bei meiner Arbeit gibt es ein Element, das sowohl beim Tanz als auch bei der Programmierung der Leuchtanzüge verwendet wird. Und zwar die Schleife. Schleifen wiederholen eine Aktion immer wieder."
      2:
        image: 'notes/C1_getting_loopy_2.png'
        text: "Wenn ich mehrfach dasselbe tue - so wie ich mich bewege, um den Hula-Hoop-Reifen in Bewegung zu halten - führe ich eine Schleife aus. Dies ist eine Schleife. Dies ist eine Schleife. Und dies ist auch eine Schleife."
      3:
        image: 'notes/C1_getting_loopy_3.png'
        text: "Heute haben wir eine Tanzparty. Wir werden Schleifen in einem neuen Tanz verwenden. Der Iterationstanz. Wir werden bei einem Tanz etwas über Schleifen lernen. Du wirst einige einfache Schritte lernen und diese während des Tanzes mehrfach wiederholen."
      4:
        image: 'notes/C1_getting_loopy_4.png'
        text: "Hier sind die Schritte, die du lernen musst. Klatsch in die Hände. Leg deine Hände hinter deinem Kopf. Leg deine Hände auf die Hüften. Hebe deine linke Hand. Hebe deine rechte Hand. Klingt einfach, oder? Du wirst herausfinden, dass du die Anweisungen abkürzen kannst, wenn du einige Tanzschritte in Schleifen einfügst."
      5:
        image: 'notes/C1_getting_loopy_5.png'
        text: "Bei unseren Tänzen verwenden wir ebenfalls Schleifen. Die Tänzer tragen Computer, die über ein Netzwerk miteinander verbunden sind. Ich kann die Lichter nun immer wieder über die Anzüge derselben Tänzer laufen lassen. In der Schleife gibt es dann eine Iteration, bei der die Lichter bei diesen sechs Tänzern wiederholt werden und dann innerhalb der Schleife die Geschwindigkeit der Lichter vergrößert wird. Und das alles läuft über Schleifen. Schleifen sind in der Informatik sehr wichtig, da sie die Arbeit abkürzen und einfacher machen."
    C1_happy_maps_unplugged:
      1:
        text: "Diese Lektion heißt \"Landkartenspiel\". Heute werden wir unserem pelzigen kleinen Freund Flurb helfen, zur Frucht zu gelangen."
      2:
        text: "Hilf deinem Flurb, zu deiner Frucht zu gelangen. Dazu musst du herausfinden, wo der Flurb hingehen muss, und ihm den Weg mit den Pfeilen zeigen. In welche Richtungen muss der Flurb gehen, um zum Apfel zu gelangen? Wie bewegt sich der Flurb nach oben?"
      3:
        text: "Damit er dorthin gelangt, kreise die Richtung ein, in die er gehen muss!"
      4:
        text: "Erstelle deine Algorithmen, indem du die passenden Pfeile neben die Karten klebst. Die zweite Aufgabe ist ähnlich, aber hier muss der Flurb nach unten gehen."
      5:
        text: "Das ist wie Programmieren auf Papier. Es ist ganz einfach!"
    C1_maze_debugging:
      1:
        image: 'notes/C1_maze_debugging_1.png'
        text: "Debuggen bedeutet, Probleme zu suchen und zu reparieren. Es gibt viele Methoden, Probleme zu debuggen. Eine der einfachsten Methoden ist, Schritt für Schritt vorzugehen, bis du herausfindest, wo der Fehler liegt. Hier versuche ich, einen Handstandüberschlag rückwärts auf dem Schwebebalken zu machen, aber ich falle immer herunter."
      2:
        image: 'notes/C1_maze_debugging_2.png'
        text: "Ich bin die Bewegung Schritt für Schritt durchgegangen und habe herausgefunden, wo mein Fehler liegt. Ich habe meine Hände auf dem Schwebebalken nicht richtig positioniert. Also habe ich es erneut mit einer anderen Handposition versucht, und jetzt klappt es. So habe ich das Debugging für meinen Handstandüberschlag abgeschlossen."
      3:
        image: 'notes/C1_maze_debugging_3.png'
        text: "Um etwas über Debugging zu lernen, beginnen wir mit einigen Bausteinen, die bereits auf der Arbeitsfläche legen. Du wirst merken, dass diese Bausteine dich nicht zum Ziel bringen. Wir müssen ein Debugging durchführen und das Problem beheben. Was ist schief gelaufen? Du wirst bemerken, dass du einen Baustein weiter nach Westen gehen musst."
      4:
        image: 'notes/C1_maze_debugging_4.png'
        text: "Fügen wir einen weiteren \"Nach-Westen\"-Baustein hinzu und klicken auf \"ausführen\", um zu sehen, ob es jetzt funktioniert. Super, du hast es geschafft!"
    C1_maze_intro_sequencing:
      1:
        text: "Bei dieser Aufgabe muss der Vogel das Schwein erreichen. Schaue dir die Aufgabe an und finde heraus, in welche Richtung er gehen muss."
      2:
        text: "Du musst die Bausteine aus der Werkzeugkiste auf die Arbeitsfläche ziehen. Die Bausteine müssen direkt unter dem \"Beim Ausführen\"-Baustein eingefügt werden. Wenn du denkst, dass du die richtige Lösung gefunden hast, klicke auf \"ausführen\" und schaue dir an, wie der Vogel zum Schwein läuft."
    C1_maze_loops:
      1:
        image: 'notes/C1_maze_loops_1.png'
        text: "Computer sind wirklich gut darin, Befehle zu wiederholen. Die meisten Menschen langweilen sich, wenn sie immer und immer wieder dieselben Dinge tun müssen. Aber ein Computer kann Millionen oder Milliarden Mal dasselbe tun. Er langweilt sich nicht und erledigt seine Aufgabe wirklich gut."
      2:
        image: 'notes/C1_maze_loops_2.png'
        text: "Wenn ich zum Beispiel allen Menschen auf Facebook eine E-Mail zum Geburtstag schreiben wollte, würde es mehr als ein Jahrhundert dauern, alle diese E-Mails zu schreiben und zu verschicken. Aber mit wenigen Codezeilen kann ich ein System entwickeln, das jedem auf Facebook eine E-Mail zum Geburtstag schickt."
      3:
        image: 'notes/C1_maze_loops_3.png'
        text: "Um in dieser Aufgabe den Vogel zum Schwein zu bringen, ist es besser, den \"Wiederholen\"-Baustein zu verwenden, anstatt drei \"Nach-Norden-Bausteine\" zu nehmen. Ziehe den \"Wiederholen\"-Baustein auf die Arbeitsfläche und gibt dort die Zahl 3 ein. Ziehe dann den \"Nach-Norden\"-Baustein in den \"Wiederholen\"-Baustein und klicke auf \"ausführen\", um zu sehen, ob alles stimmt. Glückwunsch. Du hast es geschafft!"
    C1_moveitmoveit_unplugged:
      1:
        text: "Diese Lektion heißt \"Achtung, fertig, LOS!\". Wir werden zusammen ein Programm schreiben, um unsere Freunde vom Start mit der Kompassrose bis zum Ziel mit dem Smiley zu bringen."
      2:
        text: "Allerdings liegt der Smiley mit dem Gesicht nach unten, und nur eine Person weiß, wie man dorthin kommt. Lass uns anfangen mit dem Programmieren."
      3:
        text: "Ein Programm ist ein Algorithmus, der so codiert ist, dass er von einer Maschine ausgeführt werden kann. Die meisten von uns glauben, dass Programme nur für Computer geschrieben werden. Programme sind dafür tatsächlich sehr nützlich, funktionieren aber auch anderswo. Du kannst dein eigenes Spiel machen oder einen Roboter programmieren, der Dinge für dich erledigt."
    C1_going_places_safely:
      1:
        image: 'notes/C1_going_places_safely_1.png'
        text: "Ich heiße Jeremiah. Hallo! Ich bin sieben Jahre alt. Ich spiele gerne mit dem Computer von meiner Mama, aber ich frage vorher, ob ich darf. \"Mama, darf ich an den Computer? Alles klar, Schatz!\""
      2:
        image: 'notes/C1_going_places_safely_2.png'
        text: "Ich mag den Computer von meiner Mama, weil ich da ins Internet kann. Das Internet ist wie dein Stadtviertel. Man kann dort spannende Orte besuchen, mit Familie und Freunden sprechen und viele neue Dinge lernen."
      3:
        image: 'notes/C1_going_places_safely_3.png'
        text: "Gestern habe ich einen Zoo in der Nähe von meinem Zuhause besucht. Ich habe ein Baby-Zebra gesehen. Ich habe ein Bild davon genommen und die Farbe der Streifen geändert, einen Hut hinzugefügt und das Bild meiner Sammlung seltsamer Tiere hinzugefügt. Toll! Danach bin ich sehr weit gereist. Nach Kenia. Das ist ein Land in Afrika. Dort leben viele Zebras."
      4:
        image: 'notes/C1_going_places_safely_4.png'
        text: "Manchmal spreche ich im Internet mit Menschen, die ich kenne, zum Beispiel mit meiner Oma, die in einer anderen Stadt wohnt. Hallo Oma! Sie backt gerade Kekse für meinen Geburtstag. \"Schade, dass man im Internet nichts riechen kann!\" Ich kann im Internet mit verschiedenen Leuten sprechen, zum Beispiel mit meinem Cousin. Aber ich spreche nur mit Leuten, die ich kenne."
      5:
        image: 'notes/C1_going_places_safely_5.png'
        text: "Was ich am Internet am meisten mag, sind die tollen Spiele. Gewonnen! Ich zeichne auch gerne neue Bilder, die ich mit meinen Freunden teile. Super! Manchmal besuche ich Webseiten, auf denen ich neue Dinge lerne. Aber ich gehe nur auf Webseiten, die für mich geeignet sind. Wow, Dinosaurier!"
      6:
        image: 'notes/C1_going_places_safely_6.png'
        text: "Das Internet macht echt viel Spaß! Aber genauso, wie du beim Überqueren der Straße in deinem Stadtviertel vorsichtig sein musst, musst du auch online aufpassen. Hier sind drei wichtige Regeln. Regel 1: Frag immer erst deine Eltern. Regel 2: Sprich nur mit Leuten, die du kennst. Regel 3: Halte dich nur an Orten auf, die für Kinder okay sind."
      7:
        image: 'notes/C1_going_places_safely_7.png'
        text: "Das hat Spaß gemacht! Essenszeit. Ich melde mich jetzt ab. Ich freue mich schon auf mein nächstes Internet-Abenteuer."
    C1_pair_programming:
      1:
        image: 'notes/C1_pair_programming_1.png'
        text: "Heute lernen wir etwas über Paarprogrammierung. Bei der Paarprogrammierung arbeitet ihr als Team zusammen. Warum sollten zwei Leute einen Computer teilen? Weil ihr zu zweit doppelt so schlau seid. Bei der Paarprogrammierung sitzt du zusammen mit deinem Partner an einem Computer und ihr arbeitet beide am selben Projekt."
      2:
        image: 'notes/C1_pair_programming_2.png'
        text: "Bei der Paarprogrammierung gibt es einen Fahrer und einen Copiloten, wie bei einer Autorallye. Der Fahrer sitzt am Computer und verwendet Keyboard, Maus oder Touchscreen. Er kontrolliert den Computer. Die andere Person ist der Copilot. Der Copilot hilft dem Fahrer, indem er die Fragen des Fahrers beantwortet und auf mögliche Probleme oder Fehler hinweist."
      3:
        image: 'notes/C1_pair_programming_3.png'
        text: "Kommunikation ist der Schlüssel zur erfolgreichen Paarprogrammierung. Aber Achtung! Beleidigungen sind nicht erlaubt. Und der Copilot sollte nicht rechthaberisch, sondern hilfsbereit sein. Du solltest immer mit deinem Partner im Gespräch bleiben. Der Fahrer kann erklären, was er gerade tut. Und der Copilot kann vorschlagen, was als nächstes gemacht werden soll."
      4:
        image: 'notes/C1_pair_programming_4.png'
        text: "Der Copilot sollte den Überblick behalten und der Fahrer sollte sich auf die Details konzentrieren. Beide Rollen sind wichtig. Bei der Paarprogrammierung geht es vor allem um Teamarbeit."
    C1_planting_seed:
      1:
        image: 'notes/C1_planting_seed_1.png'
        text: "Diese Lektion heißt \"Einen Samen pflanzen\". Hier geht es um Algorithmen. Algorithmen sind spezifische Anweisungen, die angeben, in welcher Reihenfolge etwas getan werden soll. Auch alltägliche Dinge wie Frühstücken und Zähneputzen sind Algorithmen, die aus kleineren Schritten zusammengesetzt sind."
      2:
        image: 'notes/C1_planting_seed_2.png'
        text: "Computer können sehr schlau sein, aber dazu musst du ihnen Schritt für Schritt erklären, was sie tun sollen. Das Tolle an Algorithmen ist, dass du etwas machen kannst, was du vorher nicht konntest, wenn du den Anweisungen Schritt für Schritt folgst. Wie ein Kochrezept."
      3:
        image: 'notes/C1_planting_seed_3.png'
        text: "Heute pflanzen wir mit einem Algorithmus Samen ein. Erstelle deinen eigenen Algorithmus, indem du die Bilder ausschneidest. Sortiere die Bilder, damit die Schritte in der passenden Reihenfolge sind."
      4:
        image: 'notes/C1_planting_seed_4.png'
        text: "Jetzt kannst du ausprobieren, ob dein Algorithmus funktioniert. Folge den Schritten in der von dir angegebenen Reihenfolge. Stimmt die Reihenfolge? Konntest du den Samen pflanzen, indem du dem Algorithmus gefolgt bist? Das ist wie Programmieren mit Bildern!"
      5:
        image: 'notes/C1_planting_seed_5.png'
        text: "Wenn wir Schokolade machen möchten, ist das ein Prozess mit vielen großen Schritten, die jeweils aus kleineren Schritten bestehen. Es gibt verschiedene Rezepte oder Algorithmen, je nachdem, welchen Geschmack wir möchten. Jeder Schritt ist wichtig, auch die ganz kleinen Schritte. Wenn nur ein Schritt fehlt, können die anderen Schritte nicht durchgeführt werden. Es ist wichtig, Algorithmen zu erstellen, die von anderen verstanden werden. Deshalb muss jeder Schritt aufgeschrieben werden, damit das Ergebnis immer dasselbe ist, egal, wer die Schritte durchführt."
    C1_playlab_storytelling:
      1:
        text: "Jetzt kannst du kreativ werden und deine Programmierkenntnisse dazu nutzen, eine Geschichte zu erzählen. Deine Geschichte enthält Figuren, die du zum Sprechen bringst und miteinander interagieren lässt. Denke darüber nach, welche Geschichte du erzählen möchtest."
      2:
        text: "Die Katze hatte immer Angst vor dem Hund. Was passiert, wenn die Katze merkt, dass der Hund nur spielen möchte? Der \"Beim Ausführen\"-Baustein ist immer der Startpunkt. Der \"Bewegen\"-Baustein bewegt deine Figur und der \"Sagen\"-Baustein lässt deine Figur sagen, was du im Baustein eintippst."
      3:
        text: "Dies ist der Baustein \"wenn die Figuren sich berühren\", den du an die anderen Bausteine anhängen kannst."
      4:
        text: "Ich habe es so programmiert, dass der Hund zur Katze geht und \"Hallo\" sagt, aber die Katze hat Angst bekommen und ist weggerannt. \"Aaahh!\". Wenn ich mehr Zeit hätte, hätte ich ein glückliches Ende programmiert. Das Ende."
    C1_spelling_bee_intro:
      1:
        image: 'notes/C1_spelling_bee_intro_1.png'
        text: "Dies ist die Buchstabier-Biene. Bewege die Biene mit den Puzzleteilen. Dabei sammelt die Biene Buchstaben, um Wörter zu buchstabieren."
      2:
        image: 'notes/C1_spelling_bee_intro_2.png'
        text: "Versuche, das Wort zu buchstabieren, das im Kasten unter dem Programmfenster angezeigt wird. Und jetzt emsig an die Arbeit! Wenn du dich in die falsche Richtung bewegst, werden falsche Buchstaben hinzugefügt."
    C1_zuck_repeat_loop:
      1:
        image: 'notes/C1_zuck_repeat_loop_1.png'
        text: "Computer sind wirklich gut darin, Befehle zu wiederholen. Die meisten Menschen langweilen sich, wenn sie immer und immer wieder dieselben Dinge tun müssen. Aber ein Computer kann Millionen oder Milliarden Mal dasselbe tun. Er langweilt sich nicht und erledigt seine Aufgabe wirklich gut."
      2:
        image: 'notes/C1_zuck_repeat_loop_2.png'
        text: "Wenn ich zum Beispiel allen Menschen auf Facebook eine E-Mail zum Geburtstag schreiben wollte, würde es mehr als ein Jahrhundert dauern, alle diese E-Mails zu schreiben und zu verschicken. Aber mit wenigen Codezeilen kann ich ein System entwickeln, das jedem auf Facebook eine E-Mail zum Geburtstag schickt."
      3:
        image: 'notes/C1_zuck_repeat_loop_3.png'
        text: "In diesem Beispiel musst du den Vogel so bewegen, dass er das Schwein erreicht. Jetzt können wir den \"Wiederholen\"-Baustein verwenden, um uns die Arbeit zu erleichtern. Entweder kannst du dem Computer fünfmal befehlen, einen Schritt nach vorne zu gehen, damit der Vogel das Schwein erreicht, oder du gibst einmal den Befehl und wiederholst den Befehl fünf Mal. Der Computer macht beide Male genau dasselbe."
      4:
        image: 'notes/C1_zuck_repeat_loop_4.png'
        text: "Dazu musst du einen \"Nach Vorne\"-Befehl auf die Arbeitsfläche ziehen und in den \"Wiederholen\"-Baustein setzen. Du kannst dann auf den Baustein klicken und angeben, wie oft der Befehl wiederholt werden soll, je nachdem, wie viele Schritte du gehen willst."
      5:
        image: 'notes/C1_zuck_repeat_loop_5.png'
        text: "In den \"Wiederholen\"-Baustein kannst du so viele Befehle setzen, wie du möchtest. In diesem Beispiel befiehlst du dem Vogel, nach vorne zu gehen und sich nach links zu drehen. Das wird dann fünfmal wiederholt. Viel Spaß!"
    C2_artist_intro:
      1:
        image: 'notes/C2_artist_intro_1.png'
        text: "Du könntest nicht am Rennen teilnehmen, wenn du keine Mitarbeiter hast, die sich mit Informatik auskennen, denn die Autos sammeln viele Daten und es werden immer Leute benötigt, die Programme schreiben, damit die Leistung des Autos verbessert wird."
      2:
        image: 'notes/C2_artist_intro_2.png'
        text: "Bei diesen Aufgaben bist du ein Künstler, der mit seinem Bleistift unterschiedliche Formen zeichnet. Der Künstler zeichnet überall, wo er hinläuft, eine Linie."
      3:
        image: 'notes/C2_artist_intro_3.png'
        text: "Mit dem \"Vorwärts bewegen\"-Baustein bewegst du dich auf der Leinwand. Auf diesem Baustein steht \"vorwärts bewegen um 100 Pixel\". Was passiert, wenn wir auf \"ausführen\" klicken? Der Künstler bewegt sich um eine bestimmte Strecke nach vorne, und zwar um 100 Pixel. Pixel sind sehr kleine Punkte auf deinem Bildschirm."
      4:
        image: 'notes/C2_artist_intro_4.png'
        text: "Der andere Baustein in dieser Aufgabe sagt \"nach rechts drehen um 90 Grad\". Wenn wir diesen Baustein verwenden, dreht sich der Künstler um eine bestimmte Strecke. Spiele mit dem Baustein und probiere aus, wie weit sich der Künstler dreht. Das ist eine 90-Grad-Drehung."
      5:
        image: 'notes/C2_artist_intro_5.png'
        text: "Das ist eine 120-Grad-Drehung. Denk dran, du kannst diese Werte ändern, indem du auf die Pfeile direkt neben den Pixel- und Grad-Werten drückst. Viel Spaß beim Zeichnen mit dem Künstler!"
    C2_bee_conditionals:
      1:
        image: 'notes/C2_bee_conditionals_1.png'
        text: "Das ist der bedingte Baustein. Er bedeutet: WENN Nektar oder Honig da ist, der weniger, gleich oder größer als eine bestimmte Zahl ist, DANN führe eine Aktion aus."
      2:
        image: 'notes/C2_bee_conditionals_2.png'
        text: "Das ist nützlich, wenn wir nicht wissen, wie viel Nektar oder Honig wir sammeln müssen, zum Beispiel hier beim Fragezeichen."
      3:
        image: 'notes/C2_bee_conditionals_3.png'
        text: "Bei diesem Beispiel sagen wir, WENN in der lila Blume mehr als 0 Portionen Nektar sind, DANN hole den Nektar. Damit sagen wir unserer Biene, solange Nektar zu sammeln, bis er alle ist. Geschafft!"
    C2_binary_bracelets:
      1:
        image: 'notes/C2_binary_bracelets_1.png'
        text: "Dies ist die Lektion \"Binäre Armbänder\". Wir werden unsere Initialen auf einem Armband codieren, das wir tragen und unseren Freunden zeigen können!"
      2:
        image: 'notes/C2_binary_bracelets_2.png'
        text: "Bei der binären Schreibweise werden Informationen mit nur zwei Optionen repräsentiert. Manche stellen sich das als Einsen und Nullen vor. Aber binäre Informationen können auch als An oder Aus, als Oben oder Unten, oder als andere Gegensätze repräsentiert werden."
      3:
        image: 'notes/C2_binary_bracelets_3.png'
        text: "Hallo, ich heiße Orion und ich programmiere Roboter hier bei Play-im. Alle Computer und Robotergehirne sind im Grunde genommen wie elektronische Tore. Wenn das Tor geöffnet ist, kann Elektrizität hindurchfließen, und wenn es geschlossen ist, fließt keine Elektrizität."
      4:
        image: 'notes/C2_binary_bracelets_4.png'
        text: "Ein Beispiel für Binärdaten beim Roboter sind die Roboteraugen. Die Augen des Roboters sind LEDs. Das sind Lichter, die entweder an oder aus sind. Das ist ein binäres System - entweder eins oder das andere. Wir können die Lichter verwenden, um binäre Zahlen zu repräsentieren. Wenn wir verschiedene Roboter haben, können wir sagen, dass der erste Roboter die Einer darstellt, der zweite Roboter die Zweier, der dritte Roboter die Vierer, und so weiter. So wird eine binäre Zahl repräsentiert. Die Roboter zählen mit ihren binären Augen für dich."
    C2_conditionals_with_cards:
      1:
        text: "Diese Lektion heißt \"Bedingungen mit Karten\". Jeden Tag triffst du Entscheidungen anhand der Dinge, die du siehst und hörst."
      2:
        text: "Ich möchte im Park spazieren gehen, muss aber erst entscheiden, ob ich einen Regenschirm mitnehme oder nicht. Also schaue ich aus dem Fenster. Wenn der Himmel bewölkt ist, nehme ich den Schirm mit. Ansonsten setze ich eine Sonnenbrille auf. Ich glaube, ich nehme lieber den Schirm. Was ich sehe und höre, bestimmt, was ich in den Park mitnehme."
      3:
        text: "Bedingungen werden auch in Spielen verwendet. Heute üben wir Bedingungen mit einem Kartenspiel. Bei diesem Spiel bestimmt die Karte, die ich ziehe, was meine Freunde und ich tun werden. Wenn ich eine sieben ziehe, klatschen alle in die Hände. Wenn nicht, sagen alle \"Oooooh.\" Probieren wir es aus! \"Oooooh\" \"Jubel\""
      4:
        text: "Du kannst bestimmt noch spannendere Spiele mit Bedingungen erfinden. Probiere es mal! Bedingungen lassen Computer so schlau wirken. Ein Computerprogramm mit Bedingungen kann auf den Anwender reagieren und seine Funktion ändern."
      5:
        text: "Denke an dein Lieblings-Computerspiel. Bekommst du für manche Aktionen mehr Punkte als für andere? Das funktioniert, weil der Computer Bedingungen verwendet. So trifft der Computer Entscheidungen. Zum Beispiel: Wenn du das Ziel triffst, erhältst du zehn Punkte. Ansonsten verlierst du drei Punkte. Wenn du weißt, wie Bedingungen funktionieren, kannst du alle möglichen spannenden Spiele programmieren."
    C2_artist_debugging:
      1:
        image: 'notes/C2_artist_debugging_1.png'
        text: "Hier sind bereits einige Bausteine auf der Arbeitsfläche. Aber da stimmt etwas nicht."
      2:
        image: 'notes/C2_artist_debugging_2.png'
        text: "Wir müssen den Code debuggen, indem wir die Geschwindigkeit reduzieren und beobachten, was bei jedem Baustein passiert."
      3:
        image: 'notes/C2_artist_debugging_3.png'
        text: "Aha, da ist das Problem! Die Schnurrhaare der Katze sind 75 Pixel lang, nicht 25."
    C2_bee_debugging:
      1:
        image: 'notes/C2_bee_debugging_1.png'
        text: "Hast du schon einmal vom \"Debugging\" gehört? Das ist die Methode, mit der du herausfindest, was nicht funktioniert. Beim Debuggen von Code suchst und behebst du Fehler."
      2:
        image: 'notes/C2_bee_debugging_2.png'
        text: "Hier liegen bereits einige Bausteine auf der Arbeitsfläche. Wir verwenden die Schritt-Schaltfläche, um jeden Baustein einzeln durchzugehen, Schritt für Schritt, um herauszufinden, ob alles stimmt, oder ob etwas repariert werden muss."
      3:
        image: 'notes/C2_bee_debugging_3.png'
        text: "Sieht so aus, als sei dort unser Problem! Wir brauchen einen weiteren \"Vorwärts bewegen\"-Baustein. Die \"Schritt\"-Schaltfläche hilft uns, unser Programm zu debuggen und zu identifizieren, wo der Fehler liegt, damit wir diesen reparieren können."
    C2_digital_footprint:
      1:
        text: "Auf dem Kopf da sitzt dein Hut, auch zum schlau sein ist er gut, er kann an schöne Sachen denken und anderen ein Lächeln schenken. Auch im Internet online, muss dein Kopf aufmerksam sein, um die ganz geheimen Sachen nicht dort öffentlich zu machen. Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken!"
      2:
        text: "Dein Herz das schlägt im Takt, das macht es ganz exakt, und hast du jemand herzlich gern, spürt man das von nah und fern. Im Internet und auch online, ist Herzlichkeit auch immer fein, und viel Respekt und Freundlichkeit, die bringen dich im Netz sehr weit. Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken!"
      3:
        image: 'notes/C2_digital_footprint_3.png'
        text: "Die Arme, die sind lang und rund, und sie umarmen deinen Hund, sie halten feste deine Tasche und schütteln deine Limoflasche. Wer will schon immer Online sein, wenn draußen schön die Sonne scheint: mit starken Armen wie im Traum, kletterst du auf jeden Baum. Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken!"
      4:
        image: 'notes/C2_digital_footprint_4.png'
        text: "Im Bauch wird Essen abgebaut, bei Hunger grummelt er ganz laut, klatscht er aufs Wasser, tut es weh, und eisig kalt wird er im Schnee. Das Bauchgefühl ist für dich da, im Internet ganz wunderbar, denn dein Gefühl weiß immer gut, ob etwas gar nicht gut dir tut. Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken!"
      5:
        image: 'notes/C2_digital_footprint_5.png'
        text: "Denke mit dem Kopf, fühle mit dem Herz, bewege deine Arme, hör auf deinen Bauch, online. Deine Beine laufen schnell, treten gegen jeden Ball, hüpfen hoch und springen weit, latschen deine Schuhe breit. Mit den Beinen stehst du stark, wenn online jemand dich nicht mag, wenn zu anderen du freundlich bist und die Nettikette nicht vergisst."
      6:
        image: 'notes/C2_digital_footprint_6.png'
        text: "Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken! Denke mit dem Kopf, fühle mit dem Herz, bewege deine Arme, hör auf deinen Bauch, stehe auf deinen Beinen. Vom Kopf bis zu den Zehen: erst denken, dann gehen. Beim auf den Bildschirm blicken: erst denken, dann klicken!"
    C2_digital_footprint_v2:
      1:
        text: "Immer wenn du online gehst, hinterlässt du einen Fußabdruck, der gesucht, kopiert und geteilt werden kann und so für immer im Netz bleibt. Was für einen digitalen Fußabdruck hinterlässt du? Was für einen digitalen Fußabdruck möchtest du hinterlassen?"
    C2_graph_paper:
      1:
        image: 'notes/C2_graph_paper_1.png'
        text: "Diese Lektion heißt \"Programmieren auf Rasterpapier\" und behandelt Algorithmen. Heute lernen wir, Programme zu schreiben, mit denen wir einander nur mit gezeichneten Pfeilen zeigen, wie wir einfache schwarz-weiße Bilder zeichnen."
      2:
        image: 'notes/C2_graph_paper_2.png'
        text: "Ein Algorithmus ist eine Liste mit Anweisungen für die Durchführung einer Aufgabe. Wir befolgen diese Anweisungen, um die Schüssel zu machen. Algorithmen sind wirklich hilfreich, wenn jemand anderes verstehen soll, wie etwas getan werden muss."
      3:
        image: 'notes/C2_graph_paper_3.png'
        text: "Wenn du einen Algorithmus für einen Computer schreibst, musst du die Aufgabe in winzig kleine Schritte aufteilen. Wenn du diese Zeile durcharbeitest, dann zur nächsten Zeile gehst, dann zur nächsten, bist du fertig."
      4:
        image: 'notes/C2_graph_paper_4.png'
        text: "Ich verwende Algorithmen bei meiner Arbeit. Ich schreibe alle Schritte auf. So kann ich ein Stück genauso wieder machen, oder jemand anderem beibringen, wie man es macht. Lege das Glas in den Ofen, verschmelze es, und befolge den Rest der Anweisungen, um die Schüssel zu machen. Algorithmen sind eine Anleitung, um etwas zu erledigen."
    C2_artist_loops:
      1:
        image: 'notes/C2_artist_loops_1.png'
        text: "Hier verwenden wir den \"Wiederholen\"-Baustein, um Schritte zu sparen, wenn wir unseren Künstler programmieren. Wir haben bereits einige Bausteine im Arbeitsbereich, aber das ist erst der Anfang."
      2:
        image: 'notes/C2_artist_loops_2.png'
        text: "Um diese Bausteine viermal zu wiederholen und ein ganzes Quadrat zu zeichnen, ziehen wir einfach den \"Wiederholen\"-Baustein auf die Arbeitsfläche und setzen die Bausteine \"vorwärts bewegen\" und \"nach rechts drehen\" in den \"Wiederholen\"-Baustein. Wenn wir auf \"ausführen\" klicken, wiederholt der Künstler diese Schritte viermal, um das Quadrat zu zeichnen."
    C2_bee_loops:
      1:
        image: 'notes/C2_bee_loops_1.png'
        text: "Eine Schleife ist die Wiederholung einer Aktion. Wenn ich einen Bienenkasten untersuche, schaue ich mir einen Rahmen an und setze ihn dann wieder ein. Diesen Vorgang wiederhole ich mehrere Male. Das bedeutet, dass ich dieselbe Aktion mehrmals wiederhole."
      2:
        image: 'notes/C2_bee_loops_2.png'
        text: "Das ist der \"Wiederholen\"-Baustein. Was du in den \"Wiederholen\"-Baustein setzt, wird so oft wiederholt, wie im Baustein angegeben. In dieser Aufgabe könntest du \"vorwärts bewegen\" und \"nimm Nektar\" dreimal benutzen, aber es ist einfacher, sie nur einmal zu verwenden und die Aktion dreimal zu wiederholen. So ist es viel einfacher!"
    C2_maze_intro:
      1:
        image: 'notes/C2_maze_intro_1.png'
        text: "Normalerweise wird in Textform programmiert, aber heute benutzen wir Blockly: ein System, bei dem man per Drag & Drop grafische Bausteine verschiebt und so Programme schreibt. Im Hintergrund wird dabei nach wie vor Code erstellt. Zuerst werden wir Code für ein Programm erstellen, mit dem Angry Bird sich durch ein Labyrinth bewegt, um die bösen Schweine zu schnappen, die seine Eier gestohlen haben."
      2:
        image: 'notes/C2_maze_intro_2.png'
        text: "Blockly ist in drei Bereiche aufgeteilt. Links ist das Labyrinth, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen unter dem Labyrinth. Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Befehl, den der Vogel versteht. Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      3:
        image: 'notes/C2_maze_intro_3.png'
        text: "Wenn ich den \"Bewegen\"-Baustein in den Arbeitsbereich ziehe und auf \"ausführen\" klicke, was passiert dann? Der Vogel bewegt sich um ein Feld auf dem Raster vorwärts. Und was mache ich, wenn der Vogel etwas tun soll, nachdem er um ein Feld vorwärts gegangen ist? Ich füge dem Programm einen weiteren Baustein hinzu."
      4:
        image: 'notes/C2_maze_intro_4.png'
        text: "Ich wähle den \"Nach rechts drehen\"-Baustein und ziehe ihn unter den \"Bewegen\"-Baustein, bis der gelbe Pfeil erscheint. Dann lege ich ihn ab und die beiden Bausteine werden zusammengesetzt. Wenn ich erneut auf \"ausführen\" klicke, führt der Vogel der Reihe nach die Befehle aus, die im Arbeitsbereich zusammengesetzt sind."
      5:
        image: 'notes/C2_maze_intro_5.png'
        text: "Wenn du einen Baustein löschen möchtest, dann löse ihn von den übrigen Bausteinen und ziehe ihn in den Papierkorb. Du kannst jederzeit die Schaltfläche \"Zurücksetzen\" benutzen, um den Vogel zurück auf Start zu bringen. Holen wir die Schweine!"
    C2_paper_airplanes:
      1:
        image: 'notes/C2_paper_airplanes_1.png'
        text: "Diese Lektion heißt \"Algorithmen in der realen Welt\". Algorithmen beschreiben Handlungen, die Menschen jeden Tag tun. Ein Rezept für Kekse und eine Anleitung, wie man ein Vogelhaus baut, sind Algorithmen aus dem Alltag."
      2:
        image: 'notes/C2_paper_airplanes_2.png'
        text: "Heute werden wir einen Algorithmus für einen Papierflieger erstellen und ausprobieren. Aber zuerst müssen wir dieses große Projekt in einfach zu befolgende, kleine Schritte aufteilen. Um einen Papierflieger zu machen, müssen wir entscheiden, welche Schritte nötig sind und in welcher Reihenfolge sie ausgeführt werden müssen."
      3:
        image: 'notes/C2_paper_airplanes_3.png'
        text: "Erstellt euren eigenen Algorithmus, indem ihr zuerst die Bilder ausschneidet. Wählt dann die sechs Bilder aus, auf denen die Schritte zum Falten des Papierfliegers zu sehen sind, und setzt sie in die richtige Reihenfolge. Nachdem ihr die Schritte sortiert habt, könnt ihr euren Algorithmus mit einem anderen Team tauschen, um auszuprobieren, ob der Algorithmus funktioniert. Ein guter Algorithmus ist sehr wichtig, um das beste Papierflugzeug zu falten."
      4:
        image: 'notes/C2_paper_airplanes_4.png'
        text: "Bei der Herstellung von Schokolade gibt es einen Prozess mit vielen großen Schritten. Und jeder dieser großen Schritte besteht aus einer Reihe kleinerer Schritte. Es gibt unterschiedliche Rezepte oder Algorithmen, je nachdem welchen Geschmack die Schokolade haben soll. Jeder Schritt ist wichtig, auch die ganz kleinen Schritte. Wenn ein Schritt fehlt, kann der Rest des Prozesses nicht abgeschlossen werden. Es ist wichtig, Algorithmen zu erstellen, die von anderen verstanden werden. Deshalb muss jeder Schritt aufgeschrieben werden, damit das Ergebnis immer dasselbe ist, egal, wer die Schritte durchführt."
    C2_playlab_createstory:
      1:
        image: 'notes/C2_playlab_createastory_1.png'
        text: "Du hast bereits eine Animation oder eine Geschichte programmiert, die jedes Mal, wenn du sie abspielst, genau dasselbe macht. Nun kannst du ein interaktives Spiel programmieren, das man tatsächlich spielen kann."
      2:
        image: 'notes/C2_playlab_createastory_2.png'
        text: "Es gibt einige neue Bausteine, die du ausprobieren kannst. Da ist der \"Wenn Pfeil\"-Baustein und der \"Figur bewegen\"-Baustein. Diese Bausteine kannst du zusammensetzen, um die Figuren mit den Pfeiltasten zu bewegen. Außerdem gibt es einige Bausteine, die etwas tun, wenn Figuren zusammenstoßen oder angeklickt werden. Viel Spaß beim Ausprobieren!"
    C2_relay_programming:
      1:
        image: 'notes/C2_relay_programming_1.png'
        text: "Heute machen wir eine Staffellauf-Programmierung. Es geht darum, unter Druck zu programmieren und die Fehler zu beheben, die passieren, wenn man sehr schnell oder in einem Team zusammenarbeitet. Wir programmieren auf Rasterpapier, um Code zu simulieren. Der Staffellauf ist so, als müssten wir eine dringende Frist einhalten."
      2:
        image: 'notes/C2_relay_programming_2.png'
        text: "Bei der Staffellauf-Programmierung laufen die Teams um die Wette, um ein Programm auf Rasterpapier zu schreiben. Du musst die Arbeit deiner Teammitglieder kontrollieren, debuggen oder reparieren, deinen Pfeil hinzufügen und zurückrennen, um den nächsten Läufer abzuschlagen."
      3:
        image: 'notes/C2_relay_programming_3.png'
        text: "Programmierer nutzen Debugging, um Probleme in ihren Algorithmen oder ihrem Code zu finden und zu beheben. Es gibt viele Methoden, Probleme zu debuggen. Eine der einfachsten Methoden ist, Schritt für Schritt vorzugehen, bis du herausfindest, wo der Fehler liegt. Dann kannst du den Fehler beheben."
      4:
        image: 'notes/C2_relay_programming_4.png'
        text: "Hier versuche ich, einen Handstandüberschlag rückwärts zu machen, aber ich falle immer herunter. Ich gehe die Bewegung Schritt für Schritt durch und finde heraus, wo mein Fehler liegt. Mein Trainer hat mir gezeigt, dass ich meine Hände auf dem Schwebebalken nicht richtig positioniert habe. Also habe ich es erneut mit einer anderen Handposition versucht, und jetzt klappt es. Ich bin froh, dass ich meinen Handstandüberschlag debuggen konnte. Wir haben den Fehler gefunden! Debuggen bedeutet, Probleme zu suchen und zu reparieren. Gut gemacht!"
    C2_zuck_repeat_loop:
      1:
        image: 'notes/C2_zuck_repeat_loop_1.png'
        text: "Computer sind wirklich gut darin, Befehle zu wiederholen. Die meisten Menschen langweilen sich, wenn sie immer und immer und immer wieder dieselben Dinge tun müssen. Aber ein Computer kann Millionen oder Milliarden Mal dasselbe tun. Er langweilt sich nicht und erledigt seine Aufgabe wirklich gut."
      2:
        image: 'notes/C2_zuck_repeat_loop_2.png'
        text: "Wenn ich allen Menschen auf Facebook eine E-Mail zum Geburtstag schreiben wollte, würde es sicher mehr als ein Jahrhundert dauern, alle diese E-Mails zu schreiben und zu verschicken. Aber mit wenigen Codezeilen kann ich ein System entwickeln, das jedem auf Facebook eine E-Mail zum Geburtstag schickt. So funktionieren Schleifen, und deshalb sind sie so wichtig und für Computer so einfach durchzuführen."
      3:
        image: 'notes/C2_zuck_repeat_loop_3.png'
        text: "In diesem Beispiel musst du den Vogel so bewegen, dass er das Schwein erreicht.  Jetzt können wir den \"Wiederholen\"-Baustein verwenden, um uns die Arbeit zu erleichtern. Entweder kannst du dem Computer fünfmal einen \"Vorwärts bewegen\"-Befehl geben, um den Vogel Schritt für Schritt zum Schwein zu bringen."
      4:
        image: 'notes/C2_zuck_repeat_loop_4.png'
        text: "Oder du gibst dem Computer einmal den \"Vorwärts bewegen\"-Befehl und lässt ihn mit \"wiederholen\" den Befehl fünfmal ausführen. Der Computer tut beide Male dasselbe. Du ziehst also deinen \"Vorwärts bewegen\"-Befehl und setzt ihn in den \"Wiederholen\"-Baustein. Dann klickst du auf den Baustein und gibst an, wie oft der Baustein wiederholt werden soll, d.h. wie viele Schritte vorwärts gegangen werden sollen."
      5:
        image: 'notes/C2_zuck_repeat_loop_5.png'
        text: "In den \"Wiederholen\"-Baustein kannst du übrigens so viele Befehle setzen, wie du möchtest. In diesem Beispiel befiehlst du dem Vogel, nach vorne zu gehen und sich nach links zu drehen. Das macht er dann fünfmal. Gut gemacht! Viel Spaß noch!"
    C3_artist_functions:
      1:
        image: 'notes/C3_artist_functions_1.png'
        text: "Die Computerprogrammierung hat einen großen Vorteil: wenn du einem Computer einmal erklärt hast, wie er eine Aktion durchführen soll, kannst du diese Funktion immer wieder aufrufen. Dazu gibst du der Funktion einfach einen Namen und rufst sie auf. Damit erweiterst du die Programmiersprache."
      2:
        image: 'notes/C3_artist_functions_2.png'
        text: "Bei unserem Programm haben wir gelernt, ein Quadrat zu zeichnen, indem wir vier Vorwärtsbewegungen und Drehbewegungen kombiniert haben. Diese Funktion können wir nehmen, ihr einen Namen wie \"Quadrat zeichnen\" geben, und jedes Mal, wenn wir ein Quadrat brauchen, wird die Funktion mit diesem Code wieder aufgerufen. Der Computer erledigt das für uns. Wir haben das Konzept zu unserer Programmiersprache hinzugefügt."
    C3_artist_intro:
      1:
        image: 'notes/C3_artist_intro_1.png'
        text: "Du könntest nicht am Rennen teilnehmen, wenn du keine Mitarbeiter hast, die sich mit Informatik auskennen, denn die Autos sammeln viele Daten und es werden immer Leute benötigt, die Programme schreiben, damit die Leistung des Autos verbessert wird."
      2:
        image: 'notes/C3_artist_intro_2.png'
        text: "Bei diesen Aufgaben bist du ein Künstler, der mit seinem Bleistift unterschiedliche Formen zeichnet. Der Künstler zeichnet überall, wo er hinläuft, eine Linie."
      3:
        image: 'notes/C3_artist_intro_3.png'
        text: "Mit dem \"Vorwärts bewegen\"-Baustein bewegst du dich auf der Leinwand. Auf diesem Baustein steht \"vorwärts bewegen um 100 Pixel\". Was passiert, wenn wir auf \"ausführen\" klicken? Der Künstler bewegt sich um eine bestimmte Strecke nach vorne, und zwar um 100 Pixel. Pixel sind sehr kleine Punkte auf deinem Bildschirm."
      4:
        image: 'notes/C3_artist_intro_4.png'
        text: "Der andere Baustein in dieser Aufgabe sagt \"nach rechts drehen um 90 Grad\". Wenn wir diesen Baustein verwenden, dreht sich der Künstler um eine bestimmte Strecke. Spiele mit dem Baustein und probiere aus, wie weit sich der Künstler dreht. Das ist eine 90-Grad-Drehung."
      5:
        image: 'notes/C3_artist_intro_5.png'
        text: "Das ist eine 120-Grad-Drehung. Denk dran, du kannst diese Werte ändern, indem du auf die Pfeile direkt neben den Pixel- und Grad-Werten drückst. Viel Spaß beim Zeichnen mit dem Künstler!"
    C3_artist_nested_loops:
      1:
        image: 'notes/C3_artist_nested_loops_1.png'
        text: "Wenn du eine Schleife in eine andere Schleife einschließt, nennen wir das eine verschachtelte Schleife.  Hier haben wir zum Beispiel den Code, um ein Dreieck mit einer Seitenlänge von 100 Pixeln zu zeichnen. Der \"Wiederholen\"-Baustein steht auf \"3\", eine Wiederholung für jede Seite des Dreiecks."
      2:
        image: 'notes/C3_artist_nested_loops_2.png'
        text: "Aber wir möchten sechs Dreiecke zeichnen. Dazu nehmen wir die Schleife und setzen sie in einen anderen \"Wiederholen\"-Baustein. Supercool!"
    C3_bee_conditionals:
      1:
        image: 'notes/C3_bee_conditionals_1.png'
        text: "Das ist der bedingte Baustein. Er bedeutet: WENN Nektar oder Honig da ist, der weniger, gleich oder größer als eine bestimmte Zahl ist, DANN führe eine Aktion aus."
      2:
        image: 'notes/C3_bee_conditionals_2.png'
        text: "Das ist nützlich, wenn wir nicht wissen, wie viel Nektar oder Honig wir sammeln müssen, zum Beispiel hier beim Fragezeichen."
      3:
        image: 'notes/C3_bee_conditionals_3.png'
        text: "Bei diesem Beispiel sagen wir, WENN in der lila Blume mehr als 0 Portionen Nektar sind, DANN hole den Nektar. Damit sagen wir unserer Biene, solange Nektar zu sammeln, bis er alle ist. Geschafft!"
    C3_bee_debugging:
      1:
        image: 'notes/C3_debugging_bee_1.png'
        text: "Hast du schon einmal vom \"Debugging\" gehört? Das ist die Methode, mit der du herausfindest, was nicht funktioniert. Beim Debuggen von Code suchst und behebst du Fehler."
      2:
        image: 'notes/C3_debugging_bee_2.png'
        text: "Hier liegen bereits einige Bausteine auf der Arbeitsfläche. Wir verwenden die Schritt-Schaltfläche, um jeden Baustein einzeln durchzugehen, Schritt für Schritt, um herauszufinden, ob alles stimmt, oder ob etwas repariert werden muss."
      3:
        image: 'notes/C3_debugging_bee_3.png'
        text: "Sieht so aus, als sei dort unser Problem! Wir brauchen einen weiteren \"Vorwärts bewegen\"-Baustein. Die \"Schritt\"-Schaltfläche hilft uns, unser Programm zu debuggen und zu identifizieren, wo der Fehler liegt, damit wir diesen reparieren können."
    C3_bee_functions:
      1:
        image: 'notes/C3_bee_functions_1.png'
        text: "Eines der wichtigsten Konzepte der Informatik ist die Definition neuer Befehle, mit der einer Computersprache neue Wörter hinzugefügt werden. Die meisten Computersprachen haben nur etwa hundert Wörter oder Befehle. Die Kunst besteht im Grunde darin, aus diesen Bausteinen neue Wörter zusammenzusetzen."
      2:
        image: 'notes/C3_bee_functions_2.png'
        text: "Im Sport wird das ständig so gemacht. Beim Basketball lernt man zum Beispiel erst das Dribbeln, dann Pässe, dann den Wurf auf den Korb. Nachdem du diese grundlegenden Bewegungen gelernt hast, kannst du neue Bewegungen lernen und diese wie Bausteine zusammensetzen. Von da aus beherrscht durch immer komplexere Spielzüge. Nachdem du deinen Spielzug gut beherrscht und ihm einen Namen gegeben hast, können ihn auch die anderen Spieler der Mannschaft lernen."
      3:
        image: 'notes/C3_bee_functions_3.png'
        text: "Genauso der Computer: Hast du ihm erst einmal beigebracht, eine Aktion mit einer Sequenz von Befehlen auszuführen, kannst du dieser Aktion einen eigenen Namen geben, damit sie später einfach wiederholt werden kann. Definierst du einen eigenen Befehl und gibst ihm einen Namen, nennt man das eine Funktion. Jetzt werden wir Funktionen verwenden, um der Biene zu helfen."
      4:
        image: 'notes/C3_bee_functions_4.png'
        text: "Bei diesem Beispiel heißt unsere Funktion \"nimm 2 Portionen Nektar\" – dieser grüne Baustein hier. Wir wissen, was \"nimm 2 Portionen Nektar\" macht, indem wir in diesem grauen Kasten die Funktionsdefinition lesen. Dort sehen wir, dass \"nimm 2 Portionen Nektar\" eine Portion Nektar holt und dann noch eine. Du solltest immer schauen, was im grauen Kasten steht, damit du weißt, was die grünen Funktionsbausteine tun können."
    C3_bee_nested_loops:
      1:
        image: 'notes/C3_bee_nested_loops_1.png'
        text: "Jetzt verwenden wir diese verschachtelten Schleifen bei der Biene. Wir haben bereits einige Bausteine auf der Arbeitsfläche, damit sich die Biene erst nach vorne bewegt, dann drei Portionen Nektar sammelt und sich dann nach rechts dreht. Diesen ganzen Code setzen wir in einen anderen \"Wiederholen\"-Baustein, den wir dreimal wiederholen. Fertig!"
    C3_bounce:
      1:
        image: 'notes/C3_bounce_1.png'
        text: "Du wirst dein eigenes Bounce-Spiel entwickeln, dass du dann mit deinen Freunden teilen kannst! So cool!"
      2:
        image: 'notes/C3_bounce_2.png'
        text: "Zuerst müssen wir die Schläger-Steuerungen mit den Pfeiltasten auf dem Keyboard verbinden."
      3:
        image: 'notes/C3_bounce_3.png'
        text: "Dies können wir tun, indem wir den \"Wenn Linkspfeil\"-Baustein mit dem \"Nach links bewegen\"-Baustein verknüpfen und den \"Wenn Rechtspfeil\"-Baustein mit dem \"Nach rechts bewegen\"-Baustein. Probiere es aus, es ist gar nicht schwer, ein Bounce-Spiel zu machen!"
    C3_computational_thinking:
      1:
        text: "Bei dieser Lektion geht es um computerbezogenes Denken. Manchmal kann es ganz schön schwer sein, ein neues Spiel zu lernen, nicht wahr? Zuerst ist alles fürchterlich kompliziert und manchmal gibt es keinen, der dir die Regeln erklärt, und du musst alles selbst herausfinden."
      2:
        text: "Das Gute ist, dass du immer besser darin wirst, Dinge selbst herauszufinden, wenn du beim Nachdenken einige Tricks verwendest. Diese Tricks sind super, um Probleme zu untersuchen und zu lösen. In dieser Lektion lernst du vier Tricks und übst sie mit deinen Freunden, um die Regeln eines Spiels herauszufinden."
      3:
        text: "Wenn du ein großes Problem in kleinere Teile aufteilst, nutzt du dein Gehirn, um das große Problem auseinanderzunehmen. Nachdem du ein großes Problem in mehrere kleinere Probleme aufgeteilt hast, kannst du den nächsten Trick anwenden, die Musterübereinstimmung."
      4:
        text: "Dabei suchen wir nach Ähnlichkeiten zwischen Dingen. Wenn ich weiß, welche Dinge gleich sind, kann ich herausfinden, welche Dinge unterschiedlich sind. Wenn ich diese Unterschiede weglasse, nennt man das Abstraktion."
      5:
        text: "Nachdem ich die Schritte kenne, um ein Problem zu lösen, kann ich diese in einer bestimmten Reihenfolge ordnen, um einen Algorithmus zu erstellen, damit auch andere nach meiner Anleitung das Problem lösen können. Wir werden diese vier Schritte verwenden, um herauszufinden, wie das Spiel ohne Regeln gespielt wird. Am Ende des Spiels kannst du auch andere Spiele spielen, die so ähnlich aussehen!"
    C3_crowdsourcing:
      1:
        image: 'notes/C3_crowdsourcing_1.png'
        text: "Diese Lektion heißt \"Crowdsourcing\". In dieser Lektion verwenden wir ein Kartenspiel, um zu lernen, dass einige Tätigkeiten in der Gruppe viel einfacher sind als alleine. Such dir ein paar Freunde und mache etwas Tolles! Crowdsourcing bedeutet, sich Hilfe von einer großen Gruppe Personen zu suchen, um eine Aufgabe schneller zu erledigen."
      2:
        image: 'notes/C3_crowdsourcing_2.png'
        text: "In der Informatik wird Crowdsourcing oft genutzt. Tausende von Amateuren und Profis vernetzen ihre Computer, um Milliarden und Abermilliarden von Informationen zu durchsuchen. Zum Beispiel werden so Dinge wie die nächste Mersenne-Primzahl gesucht oder es wird nach außerirdischen Signalen geforscht."
      3:
        image: 'notes/C3_crowdsourcing_3.png'
        text: "Wenn du einen Film siehst, besteht jede Sekunde des Films aus 24 Einzelbildern, die wir auch Frames nennen. Jedes dieser Bilder muss erstellt, gerendert und mit den anderen Bildern zusammengesetzt werden. Mein Team und ich, wir sind alle Softwareentwickler. Wir arbeiten alle zusammen, um eine Software zu erstellen, die ein Bild erzeugt, das du dann auf dem Bildschirm siehst. Das ist ein Werkzeug, das Künstler und andere Entwickler bei ihrer Zusammenarbeit benutzen, um die Bilder zu erstellen, die auf dem Bildschirm erscheinen sollen."
      4:
        image: 'notes/C3_crowdsourcing_4.png'
        text: "In \"Findet Nemo\" zum Beispiel, wenn Crush und Racker und ihre Freunde durch den Ostaustralstrom schwimmen. Du siehst die Bilder vom vorbeiströmenden Wasser, die Farben auf dem Rücken der Schildkröte, und die Seiten der Fische. Alle diese Bilder werden mit Mathematik und von uns geschriebenen Computerprogrammen erzeugt, die wir den Künstlern geben und die sie verwenden, damit das Bild im Film richtig gut aussieht."
    C3_dice_race:
      1:
        image: 'notes/C3_dice_race_1.png'
        text: "Diese Lektion heißt \"Würfelrennen\". Fast jeder spielt gerne Computerspiele. Hast du schon einmal darüber nachgedacht, wie Programmierer die Schritte eines Spiels in ein Programm umwandeln? Der erste Schritt bei der Erstellung von Computerspielen, aber auch bei allen anderen Problemen, ist Nachdenken und Planen."
      2:
        image: 'notes/C3_dice_race_2.png'
        text: "Das Nachdenken ist wie ein Algorithmus oder Schritt-für-Schritt-Plan, um ein Problem zu lösen oder eine Aufgabe durchzuführen. In dieser Lektion erstellst du einen Algorithmus für ein Würfelrennen. Dann bittest du deine Freunde, deinen Plan auszuprobieren, um zu sehen, ob sie die Schritte befolgen können, um das Spiel zu spielen. Nachdem der Programmierer sicher ist, dass alle Schritte stimmen, muss der Algorithmus in ein Programm übersetzt werden, in einer Sprache, die der Computer versteht."
      3:
        image: 'notes/C3_dice_race_3.png'
        text: "Fast alles, was wir täglich tun, erfordert einen Algorithmus, oder eine Liste von Schritten, die zur Durchführung der Aufgabe befolgt werden kann. Denke zum Beispiel daran, wie du dich für die Schule bereit machst, einen Snack zubereitest oder einen Tag mit deinen Freunden planst. Um diese Aufgaben durchzuführen, musst du sie in kleinere Schritte aufteilen, die oft in einer ganz bestimmten Reihenfolge durchgeführt werden müssen."
      4:
        image: 'notes/C3_dice_race_4.png'
        text: "Zum Beispiel die Zubereitung eines Butterbrotes. Es ist egal, welche Zutat du zuerst aus dem Schrank nimmst. Aber du kannst die Margarine erst aufs Brot streichen, nachdem du die Packung geöffnet hast. Computer brauchen Algorithmen und Programme, die ihnen sagen, wie man ganz einfache Dinge tut, über die wir gar nicht nachdenken müssen."
      5:
        image: 'notes/C3_dice_race_5.png'
        text: "Ein Algorithmus ist der Denkprozess, der stattfindet, während das Programm die Anweisungen an den Computer befolgt. Ein Algorithmus muss in ein Programm übersetzt werden, bevor er auf einem Computer verwendet werden kann. Die Erstellung von Algorithmen, also die Aufteilung einer Aufgabe in kleinere Schritte, ist manchmal schwierig. Aber mit viel Übung wird es immer einfacher."
    C3_farmer_while:
      1:
        image: 'notes/C3_farmer_while_1.png'
        text: "\"Solange\"-Schleifen sind vielen Prozessen im Alltag ähnlich. Wenn du zum Beispiel ein Auto wäschst, schrubbst du es so lange, bis es sauber ist. Solange es nicht sauber ist, schrubbst du weiter. Du beurteilst solche Situationen die ganze Zeit."
      2:
        image: 'notes/C3_farmer_while_2.png'
        text: "Wir haben einen neuen Baustein, der unserer Bäuerin hilft. Er heißt \"Solange\"-Baustein. Seine Funktion ist ganz einfach. Solange die Aussage oben wahr ist, wird etwas getan. Zum Beispiel: Solange ein Haufen da ist, musst du schaufeln. Probiere den Baustein bei der Bäuerin aus."
    C3_functional_suncatchers:
      1:
        text: "Bei dieser Lektion geht es um funktionale Sonnenfänger. Diese hübschen Sonnenfänger werden mit Funktionen erstellt. Mehrere Schritte sind nötig, um einen dieser Sonnenfänger zu machen. Einige dieser Schritte müssen mehrmals wiederholt werden."
      2:
        text: "Um den Prozess zu vereinfachen, müssen wir zuerst herausfinden, welche Handlung immer wieder wiederholt wird. Diese Schritte können wir in einer sogenannten Funktion gruppieren."
      3:
        image: 'notes/C3_functional_suncatchers_3.png'
        text: "Aber zum Erstellen eines hübschen Sonnenfängers braucht es mehr als präzise Schritte. Manchmal möchten wir auch kreativ sein und die Farbe der Perlen ändern. Wir können ganz einzigartige Sonnenfänger basteln, wenn wir Perlen in unterschiedlichen Farben verwenden."
      4:
        image: 'notes/C3_functional_suncatchers_4.png'
        text: "Du kannst einen einzigartigen Sonnenfänger basteln, wenn du die Perlen als Variablen betrachtet ist. Eine Variable ist ein Platzhalter für Informationen, die sich ändern können. Viel Spaß beim Sonnenfänger-Basteln mit Funktionen und Variablen!"
    C3_internet:
      1:
        image: 'notes/C3_internet_1.png'
        text: "In dieser Lektion geht es um das Internet. Das Internet ist ein sehr geschäftiger Ort, fast wie eine vielbefahrene Straße. Nachrichten rauschen wie Autos vorbei, um an ihr Ziel zu gelangen. Nachrichten bewegen sich sehr schnell durchs Internet."
      2:
        image: 'notes/C3_internet_2.png'
        text: "Wenn wir das Internet nachspielen, verstehen wir besser, wie es funktioniert. Du wirst erfahren, wie Nachrichten von einem Computer zu deiner Lieblingswebsite oder zum E-Mail-Posteingang deines Freundes gelangen. Und so, wie es einfacher ist, große Straßen zu überqueren, wenn du dich mit Schildern und Ampeln auskennst, ist auch das Surfen im Internet nicht schwer, wenn du weißt, was hinter den Kulissen passiert."
      3:
        image: 'notes/C3_internet_3.png'
        text: "Das Senden von Nachrichten über das Internet ist fast wie das Senden von Briefen in der Post, mit einigen kleinen Unterschieden. Ich bin hier auf Google.com. Die IP-Adresse für diese Webseite ist diese Nummer. Du kannst dir eine IT-Adresse so wie eine Postadresse vorstellen. Stell dir vor, ich möchte eine Nachricht an jemanden im Büro dort unten senden. Siehst du die URL und die IP an der Tür? Ich habe diese Nachricht geschrieben und klicke auf \"Absenden\"."
      4:
        image: 'notes/C3_internet_4.png'
        text: "Anders als bei der Post wird die Nachricht im Internet zuerst in kleinere Teile aufgeteilt, damit diese einfacher verschickt werden können. Diese kleineren Teile heißen Pakete. Jedes Paket der Nachricht wird einzeln am Bestimmungsort abgeliefert. Dort werden die Pakete wieder in der richtigen Reihenfolge zusammengesetzt, damit der Empfänger die Nachricht lesen kann. Natürlich gibt es noch viele andere Dinge über das Internet zu lernen, aber das ist bereits ein guter Anfang. Du bist auf dem besten Weg, ein Internetexperte zu werden! Erzähle auch deiner Familie und deinen Freunden, was du gelernt hast!"
      5:
        image: 'notes/C3_internet_5.png'
        text: "Ich heiße Amanda Camp und bin Informatikerin bei Google. Ich arbeite in einem Team, das mit einem Backend-Server arbeitet, der Profile und Kontakte speichert. Bei meiner Arbeit denken wir viel darüber nach, wie Kontakte an andere Geräte, zum Beispiel an dein Telefon, gesendet werden können. Die meisten Menschen haben viele Kontakte, zum Beispiel 1000. Wir möchten nicht all diese Kontakte gleichzeitig an dein Telefon senden, weil das eine zu große Nachricht wäre. Ähnlich wie das Internet große Nachrichten in Pakete aufteilt, benutzen wir ein Konzept namens Paging, bei dem wir nur 100 Kontakte gleichzeitig an dein Telefon senden und warten, bis dein Telefon nach den nächsten 100 Kontakten fragt."
      6:
        image: 'notes/C3_internet_6.png'
        text: "Was so spannend an Software ist? Sie kann die ganze Welt verändern. Ich habe mit 19 angefangen, Programmieren zu lernen. Da war ich bereits in der Mittel- oder Oberstufe. Das erste Programm, das ich geschrieben habe, konnte Celsius in Fahrenheit umwandeln. Ich programmiere gerne, weil ich gerne Leuten helfe. Ich kann bei Google Programme schreiben, die Menschen weltweit helfen, und das finde ich wirklich toll."
    C3_maze_conditionals:
      1:
        image: 'notes/C3_maze_conditionals_1.png'
        text: "Menschen treffen jeden Tag Entscheidungen. Wenn du zum Beispiel rausgehst, benutzt du vorher eine \"Wenn\"-Anweisung: Wenn es regnet, muss ich meine Jacke anziehen. Computer sind großartig, wenn sie mit diesen Anweisungen arbeiten, da sie diese Anweisungen mit unglaublicher Geschwindigkeit ausführen können. Ein Computerprogramm besteht eigentlich nur aus etwas Mathematik und einigen \"Wenn\"-Anweisungen, die Entscheidungen treffen."
      2:
        image: 'notes/C3_maze_conditionals_2.png'
        text: "Der \"Wenn\"-Baustein hilft dem Zombie, eine Entscheidung zu treffen. Er überprüft einen Zustand. Benutzen wir zum Beispiel den Baustein, der sagt \"Wenn links ein Weg ist\". Wir setzen dort einen \"Nach links drehen\"-Befehl ein. Wir sagen dem Zombie, dass er nachschauen soll, ob es links einen Weg gibt, damit er sich in diesem Fall dreht."
      3:
        image: 'notes/C3_maze_conditionals_3.png'
        text: "Dann benutzen wir den \"Vorwärts bewegen\"-Baustein innerhalb der Wiederholung, damit er nach vorne läuft, solange er möchte. Sobald es aber links einen Weg gibt, sagt der \"Wenn\"-Baustein, dass er sich nach links drehen soll. Du wirst sehen, dass wir unser Ziel erreichen, wenn wir uns nach links drehen und uns sonst immer nach vorne bewegen."
      4:
        image: 'notes/C3_maze_conditionals_4.png'
        text: "Das ist ein Beispiel für die Verwendung einer \"Wenn\"-Anweisung – ein fundamentales Konzept der Informatik. Eines meiner ersten Computerprogramme war ein Spiel namens \"Drei gewinnt\". Dort kamen \"Wenn\"-Anweisungen vor, die sagten: Wenn die andere Person nur noch ein Feld ausfüllen muss, um zu gewinnen, blockiere dieses Feld. Viel Spaß beim Lernen der \"Wenn\"-Anweisungen. Sie sind ein sehr wichtiges Konzept."
    C3_maze_level_4:
      1:
        image: 'notes/C3_maze_level_4_1.png'
        text: "In diesem Beispiel musst du den Zombie zur Sonnenblume bringen. Dabei könntest du fünf \"Vorwärts bewegen\"-Bausteine verwenden oder dem Computer mit einem \"Wiederholen\"-Baustein befehlen, die Vorwärtsbewegung fünfmal zu wiederholen."
      2:
        image: 'notes/C3_maze_level_4_2.png'
        text: "Das spart Zeit und Mühe. Ziehe den \"Vorwärts bewegen\"-Baustein einfach in den \"Wiederholen\"-Baustein. Klicke auf \"ausführen\", und der Zombie wird fünf Felder nach vorne zur leckeren Sonnenblume gehen."
    C3_playlab_create_game:
      1:
        text: "Du hast bereits eine Animation oder eine Geschichte programmiert, die jedes Mal, wenn du sie abspielst, genau dasselbe macht. Nun kannst du ein interaktives Spiel programmieren, das man tatsächlich spielen kann."
      2:
        text: "Es gibt einige neue Bausteine, die du ausprobieren kannst. Da ist der \"Wenn Pfeil\"-Baustein und der \"Figur bewegen\"-Baustein. Diese Bausteine kannst du zusammensetzen, um die Figuren mit den Pfeiltasten zu bewegen. Außerdem gibt es einige Bausteine, die etwas tun, wenn Figuren zusammenstoßen oder angeklickt werden. Viel Spaß beim Ausprobieren!"
    C3_songwriting_with_parameters:
      1:
        image: 'notes/C3_songwriting_with_parameters_1.png'
        text: "In dieser Lektion schreiben wir Lieder. Musik funktioniert ähnlich wie ein Computerprogramm. Die geschriebenen Noten und Worte sagen dem Sänger genau, was er tun muss. Einige Elemente der Musik werden immer wieder verwendet."
      2:
        image: 'notes/C3_songwriting_with_parameters_2.png'
        text: "Wir nennen das den Refrain. In einem Computerprogramm heißen Elemente, die wieder und wieder benutzt werden, Funktionen. Wenn du Liedtexte liest und dort \"Refrain\" steht – singst du dann das Wort \"Refrain\"? Nein, du gehst wieder zum Anfang der Seite, um dort den Text für den Refrain nachzulesen."
      3:
        image: 'notes/C3_songwriting_with_parameters_3.png'
        text: "In dieser Lektion singen wir ein albernes kleines Lied namens \"Kleines Häschen Foo Foo\". Dieser Song hat einen Refrain, den du immer und immer wieder singen wirst. Eine Funktion ist ein Stück Code, das du wieder und wieder verwenden kannst. Es macht das Programmieren einfacher und effizienter, damit du die Schritte deiner Funktion nicht immer wieder schreiben musst. Du musst sie nur einmal aufschreiben!"
    C4_bee_conditional:
      1:
        image: 'notes/C4_bee_conditional_1.png'
        text: "Das ist der bedingte Baustein. Er sagt: Wenn du an der Blume oder der Honigwabe bist, musst du etwas tun. Das ist nützlich, wenn wir nicht wissen, wie viel Nektar wir sammeln oder Honig machen müssen, zum Beispiel hier beim Fragezeichen."
      2:
        image: 'notes/C4_bee_conditional_2.png'
        text: "Bei diesem Beispiel sagen wir: Wenn dort eine Blume ist, hole den ganzen Nektar. Mit einem anderen Baustein sagen wir: Wenn es eine Honigwabe ist, mache Honig. Geschafft!"
    C4_conditionals:
      1:
        image: 'notes/C4_conditionals_1.png'
        text: "Wir haben einen neuen Baustein, den \"Wenn-Ansonsten\"-Baustein. Es handelt sich dabei um eine bedingte Anweisung, wie der \"Wenn\"-Baustein der vorherigen Aufgaben. Aber jetzt gibt es ein neues Element unten. Dort steht \"ansonsten\". Mit dem \"Wenn-Ansonsten\"-Baustein kann die Biene eine Entscheidung zwischen zwei verschiedenen Aktionen treffen. Wenn die Biene bei einer Blume ist, wird sie die Aktionen im ersten Teil, hinter \"machen\", ausführen. Wenn die Biene nicht bei einer Blume ist, wird sie die Aktionen im zweiten Teil, hinter \"ansonsten\", ausführen."
      2:
        image: 'notes/C4_conditionals_2.png'
        text: "Mit \"Wenn\"-Anweisungen können Computer Entscheidungen treffen. Menschen legen Bedingungen für den Computer fest, die sagen: Wenn beim Computer eine bestimmte Situation auftritt, mache dies. Ansonsten mache das. Oben auf dem \"Wenn-Ansonsten\"-Baustein steht \"Wenn bei einer Blume\". Aber man kann oben auch andere Sachen hinschreiben, etwa \"Wenn es 3 Portionen Nektar gibt\" oder \"Wenn geradeaus ein Weg ist\". Der Baustein wird sich ähnlich verhalten. Wenn die Aussage oben wahr ist, wird die erste Serie von Aktionen durchgeführt. Wenn die Aussage oben falsch ist, wird die zweite Serie von Aktionen durchgeführt."
    C4_for_loops:
      1:
        image: 'notes/C4_for_loops_1.png'
        text: "Wenn du einen \"Wiederholen\"-Baustein verwendest, um in deinem Code eine Schleife einzubauen, woher weiß der Computer, wenn er genug Wiederholungen gemacht hat? Der \"Wiederholen\"-Baustein ist in Wirklichkeit ein ziemlich komplexer Code namens \"Zähle mit\"-Schleife, der in bestimmten Schritten von einem Anfangswert bis zu einem Endwert zählt."
      2:
        image: 'notes/C4_for_loops_2.png'
        text: "Ein \"Wiederhole 3-mal\"-Baustein zählt zum Beispiel in Einer-Schritten von 1 bis 3. Bei jeder Zählrunde wird der Code in der Schleife ausgeführt. Die \"Zähle mit\"-Schleife weiß, wie oft sie bereits ausgeführt wurde, da eine Zähler-Variable zu Beginn der Schleife auf einen Startwert gesetzt wird und bei jeder Runde der angegebene Zählschritt hinzugefügt wird. Sobald die Zähler-Variable größer als der Endwert ist, stoppt die Schleife."
      3:
        image: 'notes/C4_for_loops_3.png'
        text: "Der Vorteil einer \"Zähle mit\"-Schleife anstelle des \"Wiederholen\"-Bausteins ist, dass du die Zähler-Variable sehen und in deiner Schleife verwenden kannst. Wenn du zum Beispiel eine Reihe von Blumen hast und die erste Blume eine Portion Nektar, die zweite zwei Portionen Nektar und die dritte drei Portionen Nektar hat, kannst du mit der \"Zähle mit\"-Schleife der Biene sagen, dass sie den Zählerwert an Nektar sammeln soll – 1 an der ersten Blume, 2 an der zweiten und 3 an der dritten."
      4:
        image: 'notes/C4_for_loops_4.png'
        text: "Außerdem kann in einer \"Zähle mit\"- Schleife der Zähler um eine andere Zahl als eins erhöht werden. Du kannst zum Beispiel um 2, 4 oder eine variierende Menge erhöhen."
    C4_for_loops_bee:
      1:
        image: 'notes/C4_for_loops_bee_1.png'
        text: "Wenn du einen \"Wiederholen\"-Baustein verwendest, um in deinem Code eine Schleife einzubauen, woher weiß der Computer, wenn er genug Wiederholungen gemacht hat? Der \"Wiederholen\"-Baustein ist in Wirklichkeit ein ziemlich komplexer Code namens \"Zähle mit\"-Schleife, der in bestimmten Schritten von einem Anfangswert bis zu einem Endwert zählt."
      2:
        image: 'notes/C4_for_loops_bee_2.png'
        text: "Ein \"Wiederhole 3-mal\"-Baustein zählt zum Beispiel in Einer-Schritten von 1 bis 3. Bei jeder Zählrunde wird der Code in der Schleife ausgeführt. Die \"Zähle mit\"-Schleife weiß, wie oft sie bereits ausgeführt wurde, da eine Zähler-Variable zu Beginn der Schleife auf einen Startwert gesetzt wird und bei jeder Runde der angegebene Zählschritt hinzugefügt wird. Sobald die Zähler-Variable größer als der Endwert ist, stoppt die Schleife."
      3:
        image: 'notes/C4_for_loops_bee_3.png'
        text: "Der Vorteil einer \"Zähle mit\"-Schleife anstelle des \"Wiederholen\"-Bausteins ist, dass du die Zähler-Variable sehen und in deiner Schleife verwenden kannst. Wenn du zum Beispiel eine Reihe von Blumen hast und die erste Blume eine Portion Nektar, die zweite zwei Portionen Nektar und die dritte drei Portionen Nektar hat, kannst du mit der \"Zähle mit\"-Schleife der Biene sagen, dass sie den Zählerwert an Nektar sammeln soll – 1 an der ersten Blume, 2 an der zweiten und 3 an der dritten."
      4:
        image: 'notes/C4_for_loops_bee_4.png'
        text: "Außerdem kann in einer \"Zähle mit\"- Schleife der Zähler um eine andere Zahl als eins erhöht werden. Du kannst zum Beispiel um 2, 4 oder eine variierende Menge erhöhen."
    C4_for_loops_no_bee:
      1:
        image: 'notes/C4_for_loops_no_bee_1.png'
        text: "Wenn du einen \"Wiederholen\"-Baustein verwendest, um in deinem Code eine Schleife einzubauen, woher weiß der Computer, wenn er genug Wiederholungen gemacht hat? Der \"Wiederholen\"-Baustein ist in Wirklichkeit ein ziemlich komplexer Code namens \"Zähle mit\"-Schleife, der in bestimmten Schritten von einem Anfangswert bis zu einem Endwert zählt."
      2:
        image: 'notes/C4_for_loops_no_bee_2.png'
        text: "Ein \"Wiederhole 3-mal\"-Baustein zählt zum Beispiel in Einer-Schritten von 1 bis 3. Bei jeder Zählrunde wird der Code in der Schleife ausgeführt. Die \"Zähle mit\"-Schleife weiß, wie oft sie bereits ausgeführt wurde, da eine Zähler-Variable zu Beginn der Schleife auf einen Startwert gesetzt wird und bei jeder Runde der angegebene Zählschritt hinzugefügt wird. Sobald die Zähler-Variable größer als der Endwert ist, stoppt die Schleife. Der Vorteil einer \"Zähle mit\"-Schleife anstelle des \"Wiederholen\"-Bausteins ist, dass du die Zähler-Variable sehen und in deiner Schleife verwenden kannst."
    C4_function_create:
      1:
        image: 'notes/C4_function_create_1.png'
        text: "Nachdem du jetzt einige Funktionsbausteine bearbeitet hast, ist es nun Zeit, selbst einen Funktionsbaustein zu erstellen. Das ist ganz einfach. Die Werkzeugkiste hat eine Kategorie namens \"Funktionen\". Wenn du darauf klickst, siehst du eine orangefarbene Schaltfläche namens \"Erstelle eine Funktion\". Ein Klick darauf öffnet den Funktionseditor, den du bereits verwendet hast, um vorhandene Funktionsbausteine zu bearbeiten."
      2:
        image: 'notes/C4_function_create_2.png'
        text: "Wie vorher, beginnst du, indem du deiner Funktion einen Namen gibst und beschreibst, was die Funktion tun soll. Das könnte zum Beispiel das Zeichnen eines Quadrats oder Dreiecks sein. Ziehe dann Bausteine aus dem Werkzeugkasten in den Arbeitsbereich unten. Denke daran, die Bausteine in den grünen Funktionsbaustein einzusetzen."
      3:
        image: 'notes/C4_function_create_3.png'
        text: "Wenn du fertig bist, klicke auf \"Speichern\" und du bist fertig. Damit gelangst du zurück zum Haupt-Arbeitsbereich der Aufgabe. Die neue Funktion, die du erstellt hast, erscheint als grüner Baustein in der Kategorie \"Funktionen\" in deiner Werkzeugkiste. Du kannst diesen Baustein in den Arbeitsbereich ziehen und genauso verwenden wie die anderen Bausteine, um die Aufgabe zu lösen."
    C4_function_edit:
      1:
        image: 'notes/C4_function_edit_1.png'
        text: "Die Computerprogrammierung hat einen großen Vorteil: wenn du einem Computer einmal erklärt hast, wie er eine Aktion durchführen soll, kannst du diese Funktion immer wieder aufrufen. Dazu gibst du der Funktion einfach einen Namen und rufst sie auf. Damit erweiterst du die Programmiersprache."
      2:
        image: 'notes/C4_function_edit_2.png'
        text: "Bei unserem Programm haben wir gelernt, ein Quadrat zu zeichnen, indem wir vier Vorwärtsbewegungen und Drehbewegungen kombiniert haben. Diese Funktion können wir nehmen, ihr einen Namen wie \"Quadrat zeichnen\" geben, und jedes Mal, wenn wir ein Quadrat brauchen, wird die Funktion mit diesem Code wieder aufgerufen, und alles wird für uns erledigt. Wir haben das Konzept zu unserer Programmiersprache hinzugefügt."
      3:
        image: 'notes/C4_function_edit_3.png'
        text: "Bei dieser Aufgabe haben wir bereits eine \"Quadrat zeichnen\"-Funktion für dich erstellt. Sie erscheint in der Werkzeugkiste als grüner Baustein. Du musst denselben Code schreiben, den du vorher geschrieben hast, um ein Quadrat zu zeichnen, und ihn in diese Funktion einsetzen. Klicke dazu auf die Option \"Bearbeiten\" im grünen \"Zeichne ein Quadrat\"-Baustein. Dadurch wird der Funktionseditor geöffnet. Der Funktionseditor besteht aus drei Teilen. Einen Abschnitt, in dem du deine Funktion benennst. Dieser erscheint auf dem grünen Baustein vor der Funktion. Gib dann in einer kurzen Beschreibung an, was deine Funktion tun soll."
      4:
        image: 'notes/C4_function_edit_4.png'
        text: "In diesem Fall soll die Funktion ein Quadrat zeichnen. Der weiße Bereich unten ist der Arbeitsbereich. Er funktioniert genauso wie der Arbeitsbereich, den du bereits kennst. Ziehe die Bausteine aus der Werkzeugkiste in diesen Arbeitsbereich. Denke daran, die Bausteine zum Zeichnen des Quadrats in den grünen Funktionsbaustein einzusetzen. Wenn du fertig bist, klicke auf \"Speichern\" und du bist fertig. Damit gelangst du zurück zum Haupt-Arbeitsbereich der Aufgabe. Jetzt kannst du den Funktionsbaustein \"Zeichne ein Quadrat\" so wie jeden anderen Baustein einsetzen, um die Aufgabe zu lösen."
    C4_function_parameters:
      1:
        image: 'notes/C4_function_parameters_1.png'
        text: "Hier ist eine Funktion, die ein Quadrat mit 50 Pixel langen Seiten zeichnet Das ist super, aber was ist, wenn ich ein Quadrat mit 50 Pixel langen Seiten und dann ein anderes mit 100 Pixel langen Seiten zeichnen möchte? Es sollte nicht nötig sein, zwei unterschiedliche Funktionen zu schreiben, die fast genau dasselbe tun. Stattdessen können wir eine Funktion mit einem Parameter verwenden."
      2:
        image: 'notes/C4_function_parameters_2.png'
        text: "Parameter ermöglichen uns, Werte in eine Funktion einzusetzen, die in der Funktion als Variablen verwendet werden. Lass uns einen Parameter namens \"Länge\" zu dieser Funktion hinzufügen, damit wir Quadrate in unterschiedlichen Größen zeichnen können. Im Funktionseditor kannst du den Namen und die Beschreibung wie vorher bearbeiten, aber jetzt kannst du auch noch einen Parameter hinzufügen. Schreibe den Namen deines Parameters in das Feld und klicke auf \"Parameter hinzufügen\". Dadurch wird ein roter Baustein mit dem Namen des Parameters erstellt. Jetzt können wir den Baustein \"vorwärts bewegen um 100\" durch den Parameter \"Länge\" ersetzen, damit sich die Figur um \"Länge\" vorwärts bewegt."
      3:
        image: 'notes/C4_function_parameters_3.png'
        text: "Klicke auf \"Speichern\" und \"Schließen\" und ziehe deinen neuen \"Quadrat zeichnen\"-Baustein aus der Funktionskategorie in die Werkzeugkiste. Du wirst bemerken, dass neben \"Länge\" ein leerer Bereich ist, weil die Funktion wissen will, welchen Wert der Parameter \"Länge\" haben sollte. Ziehe einen Zahlenbaustein aus der Kategorie \"Mathe\" und setze ihn in den leeren Bereich ein. Siehst du jetzt, wie du die Funktion immer wieder mit unterschiedlichen Längen verwenden kannst, um Quadrate unterschiedlicher Größen zu zeichnen? Probiere es selbst aus!"
    C4_intro:
      1:
        image: 'notes/C4_intro_1.png'
        text: "Normalerweise wird in Textform programmiert, aber heute benutzen wir Blockly: ein System, bei dem man per Drag & Drop grafische Bausteine verschiebt und so Programme schreibt. Im Hintergrund wird dabei nach wie vor Code erstellt. Zuerst werden wir Code für ein Programm erstellen, mit dem Angry Bird sich durch ein Labyrinth bewegt, um die bösen Schweine zu schnappen, die seine Eier gestohlen haben."
      2:
        image: 'notes/C4_intro_2.png'
        text: "Blockly ist in drei Bereiche aufgeteilt. Links ist das Labyrinth, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen unter dem Labyrinth. Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Befehl, den der Vogel versteht. Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      3:
        image: 'notes/C4_intro_3.png'
        text: "Wenn ich den \"Bewegen\"-Baustein in den Arbeitsbereich ziehe und auf \"ausführen\" klicke, was passiert dann? Der Vogel bewegt sich um ein Feld auf dem Raster vorwärts. Und was mache ich, wenn der Vogel etwas tun soll, nachdem er um ein Feld vorwärts gegangen ist? Ich füge dem Programm einen weiteren Baustein hinzu."
      4:
        image: 'notes/C4_intro_4.png'
        text: "Ich wähle den \"Nach rechts drehen\"-Baustein und ziehe ihn unter den \"Bewegen\"-Baustein, bis der gelbe Pfeil erscheint. Dann lege ich ihn ab und die beiden Bausteine werden zusammengesetzt. Wenn ich erneut auf \"ausführen\" klicke, führt der Vogel der Reihe nach die Befehle aus, die im Arbeitsbereich zusammengesetzt sind."
      5:
        image: 'notes/C4_intro_5.png'
        text: "Wenn du einen Baustein löschen möchtest, dann löse ihn von den übrigen Bausteinen und ziehe ihn in den Papierkorb. Du kannst jederzeit die Schaltfläche \"Zurücksetzen\" benutzen, um den Vogel zurück auf Start zu bringen. Holen wir die Schweine!"
    C4_math_artist:
      1:
        image: 'notes/C4_math_artist_1.png'
        text: "Wenn ich ein 50 Pixel hohes Rechteck zeichnen möchte, das doppelt so breit wie hoch ist, wie kann ich das dem Computer befehlen? Nun, ich könnte dem Künstler sagen, 50 Pixel nach oben zu gehen, sich nach rechts zu drehen und dann 100 Pixel zu laufen und das zweimal wiederholen. Aber dann würde ich ja dem Computer das Rechnen abnehmen."
      2:
        image: 'notes/C4_math_artist_2.png'
        text: "Die Multiplikation von 50 x 2 ist zwar nicht schwierig, aber Computer sind so gut in Mathe, dass wir ihnen das Rechnen überlassen sollten, wann immer das möglich ist. Wenn ich eine Variable namens \"Höhe\" verwende, kann ich für die Höhe den Wert 50 angeben und dann meinen Algorithmus so ändern, dass ich dem Künstler sage, sich um \"Höhe\" nach oben zu bewegen und dann um \"2 x Höhe\" nach rechts. So erhalte ich ein Rechteck, das doppelt so breit wie hoch ist."
    C4_unplugged_algorithms:
      1:
        text: "Diese Lektion heißt \"Tangram-Algorithmen\". Ein Tangram ist ein Puzzle mit sieben Teilen, das zu anderen Formen zusammengesetzt werden kann. Du wirst einen Algorithmus verwenden, um deinem Partner zu erklären, wie er das Puzzle zusammensetzen muss."
      2:
        text: "Ein Algorithmus ist eine Liste von Schritten, mit der eine Aufgabe erledigt werden kann. Wir verwenden sie jeden Tag bei Einkaufslisten und Rezepten. Wenn du den Algorithmus zu einfach gestaltest, kann er auf unterschiedliche Weisen interpretiert werden, und die ausführende Person versteht eventuell nicht genau, was du willst. Wenn du ganz sicher sein willst, dass alle genau dasselbe tun, musst du einen sehr detaillierten Algorithmus erstellen."
      3:
        text: "Ich habe heute einen Algorithmus verwendet, um ein Bild zu malen. Ich wollte ein paar Wölfe malen, aber ich kann nicht so gut malen. Zum Glück gibt es \"Malen nach Zahlen\". Man hat 40 Farben und kleine Buchstaben und Zahlen, die angeben, wie die Felder ausgemalt werden müssen. Mit \"Malen nach Zahlen\" weiß ich genau, welche Farbe ich wo verwenden muss."
      4:
        text: "Die Anweisungen sind ganz deutlich, und deshalb sieht das Endergebnis richtig gut aus. Dies ist ein sehr guter Algorithmus. Wenn die Anweisungen nicht so deutlich wären, würden meine Wölfe nicht so gut aussehen. Wenn das Ergebnis genauso werden soll, wie du dir das vorgestellt hast, musst du sehr präzise sein."
    C4_unplugged_binary:
      1:
        image: 'notes/C4_unplugged_binary_1.png'
        text: "In jedem Team muss die Person, die Anweisungen gibt, also die, die das Papier hält, bestimmen, was ihr \"AN\"-Symbol sein soll und was ihr \"AUS\"-Symbol sein soll. Das binäre System ist ein bisschen wie ein Alphabet mit zwei Buchstaben. Als wären A und B das gesamte Alphabet, oder 0 und 1."
      2:
        image: 'notes/C4_unplugged_binary_2.png'
        text: "Am häufigsten wird das binäre System in einer \"Wenn\"-Anweisung benutzt. Das ist ein klassisches Element der Programmierung. Das Programm läuft und sagt: Wenn etwas wahr ist, tue dies. Wenn nicht, tue das. Und wenn du etwas Komplizierteres machen möchtest? Zum Beispiel möchtest du anstatt einer \"Wenn\"-Anweisung mit Bildern oder Musik im Computer arbeiten."
      3:
        image: 'notes/C4_unplugged_binary_3.png'
        text: "Ein Computer kann nur die binäre Sprache, aber ein Bild ist nicht binär. Es besteht nicht aus Einsen und Nullen – wie geht das also? Hier ist ein Beispiel: Du hast ein schönes Bild. Ein Bild ist im Grunde eine Form von Information. Alle Informationen können als binäre Informationen codiert werden, wir müssen nur herausfinden, wie."
      4:
        image: 'notes/C4_unplugged_binary_4.png'
        text: "Stell dir vor, wir legen ein Raster über diesen Pandabär und entscheiden bei jedem Quadrat, ob das Quadrat eher schwarz oder eher weiß ist. Und dann färben wir es in dieser Farbe ein. Jetzt ist jedes Quadrat im Raster entweder schwarz oder weiß und wir können die schwarzen Quadrate als Nullen (eine binäre Ziffer) bezeichnen und die weißen Quadrate als Einsen (die andere binäre Ziffer). Und am Ende hast du nur eine Reihe Einsen und Nullen. So kannst du dieses Bild im Binärsystem darstellen."
    C4_unplugged_forloops:
      1:
        image: 'notes/C4_unplugged_forloops_1.png'
        text: "Diese Lektion heißt \"Zähle mit\"-Schleifenspaß. In dieser Lektion verwenden wir eine Zahlenreihe, um ein Würfelspiel zu machen. Jeder Spieler würfelt, um einen Startwert, einen Endwert und einen Intervall zu bestimmen. Während jeder Runde kreisen wir unseren Startwert ein und jeden Wert, den wir beim Vorwärtsgehen gemäß dem Intervallwert erreichen. Wenn wir unseren Endwert erreichen, halten wir an. Die Person mit der höchsten Punktzahl gewinnt!"
      2:
        image: 'notes/C4_unplugged_forloops_2.png'
        text: "\"Zähle mit\"-Schleifen können sehr praktisch sein. Zum Beispiel würdest du als Meteorologe die ganze Zeit \"Zähle mit\"-Schleifen verwenden. Hallo, ich bin Becky. Ich arbeite als Wind-Meteorologin bei EverPower Renewables. Ich prognostiziere Windgeschwindigkeiten für die Columbia-River-Gorge-Region, in der unser Unternehmen Windparks besitzt."
      3:
        image: 'notes/C4_unplugged_forloops_3.png'
        text: "Wir versuchen, zu verstehen, wie viel Wind es gibt, damit wir vorher sagen können, wie viel Energie produziert wird. Diese Informationen geben wir an Energiehändler weiter. Diese kaufen und verkaufen Energie und nutzen dabei unsere Angaben, wie viel Energie zur Verfügung stehen wird. So wird sichergestellt, dass alle genug Strom zur Verfügung haben, die Lichter in deinem Haus leuchten und wir möglichst viel Energie mit unseren Windparks produzieren."
      4:
        image: 'notes/C4_unplugged_forloops_4.png'
        text: "Wir sind hier in der nationalen Steuerzentrale von EverPower Renewables in Portland. Die Informationen aller Windparks im ganzen Land kommen hier an. Selbst die leistungsstärksten Computer schaffen es nicht, die Atmosphäre genau zu simulieren. Bei unseren Computer-Prognosemodellen verwenden wir ein Raster. Jeder Rasterpunkt besitzt einen Breitengrad und einen Längengrad. Wir müssen die Physik berechnen und versuchen, Windgeschwindigkeit, Temperatur, Druck und so weiter zu bestimmen."
      5:
        image: 'notes/C4_unplugged_forloops_5.png'
        text: "Da wir ziemlich große Raster verwenden und dies an vielen Orten tun, laufen dafür unsere Schleifen viele Millionen Mal. Und ich verwende dafür immer \"Zähle mit\"-Schleifen. Hier ist zum Beispiel eine \"Zähle mit\"-Schleife. Bei der Vorhersage von Wind gibt es so viele verschiedene Parameter, dass ein Mensch nicht in der Lage wäre, alle diese Berechnungen zu machen. Es gibt so viele Einflüsse, die auf den Wind einwirken, dass wir die Vorhersage nur mit einem Computermodell machen können."
    C4_unplugged_madlibs:
      1:
        image: 'notes/C4_unplugged_madlibs_1.png'
        text: "In dieser Lektion spielen wir mit Lückengeschichten. Es gibt eine Vorlage, die du ausfüllen kannst, um ähnliche Geschichten mit verrückten Ideen zu schreiben."
      2:
        image: 'notes/C4_unplugged_madlibs_2.png'
        text: "Bei dieser Lektion haben wir gelernt, aus zwei existierenden Geschichten eine abstrahierte Vorlage zu erstellen. Abstraktion ist die Kunst, Unterschiede zu entfernen, um herauszufinden, wie eine Lösung für verschiedene Probleme verwendet werden kann. Das ist sehr hilfreich in der Informatik, da wir so Funktionen erstellen können, die in unterschiedlichen Situationen nützlich sein können."
    C4_unplugged_parameters:
      1:
        text: "Diese Lektion heißt \"Komponieren mit Parametern\". Diesmal schreiben wir selbst einige Songs. Manchmal ist der Refrain nach jeder Strophe etwas anders. Kennst du \"Old Macdonald hat `ne Farm\"? Der Refrain ist bei jedem Tier etwas anders. Und auf der Farm hat er `ne Kuh, i-a-i-a-o. Die kleine Änderung in jedem Refrain kann mit einem Element namens \"Parameter\" gezeigt werden."
      2:
        text: "Manchmal benötigt eine Funktion einen Parameter. Ein Parameter ist eine zusätzliche Information, die du in eine Funktion einsetzen und an deine Bedürfnisse anpassen kannst. Wenn du für deine Freunde Eisbecher machst, verwendest du einen Prozess, der Parametern in einem Computerprogramm ähnelt."
      3:
        text: "Die Kugel mit Vanilleeis ist vielleicht bei jedem Eisbecher dieselbe, aber wenn du deine Freunde fragst, welche beiden Extrazutaten sie möchten, kann es viele verschiedene Kombinationen geben. Extrazutat ist der Funktionsname, und die verschiedenen Sorten von Zutaten sind die Parameter. Funktionen und Parameter arbeiten zusammen – für tolle Computerprogramme und tolle Eisbecher."
    C4_unplugged_variables:
      1:
        image: 'notes/C4_unplugged_variables_1.png'
        text: "Diese Lektion heißt \"Variablen in Briefumschlägen\". Wir werden lernen, wie wir Sätze bauen können, wenn wir nicht alle Informationen zur Verfügung haben. Wir alle kennen Situationen, in denen wir Lücken ausfüllen. Zum Beispiel wenn wir unseren Namen auf ein Arbeitsblatt schreiben. Manchmal muss mehr als ein Wort ausgefüllt werden. In diesem Fall werden die Lücken gekennzeichnet, damit wir wissen, welche Informationen wohin gehören."
      2:
        image: 'notes/C4_unplugged_variables_2.png'
        text: "Variablen sind Platzhalter für Informationen, die sich ändern können. Indem wir eine Variable für die fehlende Information verwenden, können wir weiterarbeiten und jemand anderes kann die fehlende Information später ausfüllen. In Software werden viele Variablen verwendet. Wir verwenden Variablen als Platzhalter für Name, E-Mail-Adresse und Benutzername. So sagen wir dem Programm, wo diese Informationen erscheinen sollen, nachdem sie vom Anwender ausgefüllt wurden. Bei unserer Arbeit verwenden wir ständig Variablen."
      3:
        image: 'notes/C4_unplugged_variables_3.png'
        text: "Immer wenn du eine Information für später speichern musst, wird eine Variable verwendet. Wenn wir zum Beispiel zählen wollen, wie viele Tweets der Anwender geschrieben hat. Für jeden Tweet fügen wir dem Wert eine 1 hinzu und jedes Mal, wenn der Anwender einen Tweet löscht, ziehen wir eine 1 ab. Immer wenn wir wissen müssen, wie viele Tweets der Anwender geschrieben hat, schauen wir einfach auf die Variable."
    C4_variables_artist:
      1:
        image: 'notes/C4_variables_artist_1.png'
        text: "Eine Variable ist wie ein Behälter, in dem du einen Wert speichern kannst. Wenn du diese Variable in einem Algorithmus verwendest, wird der Behälter geöffnet und der Wert nachgeschaut. So kannst du schlauere Algorithmen schreiben, die sich je nach dem in der Variable gespeicherten Wert unterschiedlich verhalten."
      2:
        image: 'notes/C4_variables_artist_2.png'
        text: "Zum Beispiel könnte ich ein Algorithmus schreiben, der meinem kleinen Bruder sagt: Herzlichen Glückwunsch zum 10. Geburtstag! Das funktionert dieses Jahr gut, aber nächstes Jahr müsste da stehen: Herzlichen Glückwunsch zum 11. Geburtstag! Dazu könnte ich eine Variable namens \"Alter\" erstellen, die das Alter meines Bruders speichert und einen Algorithmus schreiben, der sagt: Herzlichen Glückwunsch zum \"Alter\". Geburtstag! Weil sich Variablen ändern können, kann ich die Variable \"Alter\" jedes Jahr um den Wert 1 erhöhen."
      3:
        image: 'notes/C4_variables_artist_3.png'
        text: "In dieser Aufgabe verwenden wir eine Variable für die Länge der Linie, die unser Künstler zeichnet. Unten im Code wird der \"Vorwärts bewegen\"-Baustein sich diese Längen-Variable ansehen, um den Wert abzulesen, den du bestimmt hast."
    C4_variables_playlab:
      1:
        image: 'notes/C4_variables_playlab_1.png'
        text: "Eine Variable ist ein Behälter, in dem du einen Wert speichern kannst. Wenn du diese Variable in einem Algorithmus verwendest, wird der Behälter geöffnet und der Wert nachgeschaut. So kannst du schlauere Algorithmen schreiben, die sich je nach dem in der Variable gespeicherten Wert unterschiedlich verhalten."
      2:
        image: 'notes/C4_variables_playlab_2.png'
        text: "Jetzt kannst du im Spielelabor bei verschiedenen Spielen die Werte von Variablen wie Geschwindigkeit, Höhe, Punktzahl ändern, um die Regeln oder Eigenschaften des Spiels zu ändern. Du musst nicht den Spielalgorithmus verändern, um das Spiel zu verändern, nur die Variable."
      3:
        image: 'notes/C4_variables_playlab_3.png'
        text: "Bei meiner Arbeit für Kindle und X-ray für Bücher nutzen wir Variablen auf unterschiedliche Weise. Du könntest eine Variable verwenden, um die Seitenzahlen von einem Buch zu speichern. Anwender können die Schriftgröße auf einer Seite erhöhen oder verringern. Die Anzahl der Buchseiten kann sich je nach Schriftgröße verändern. Dann können wir die Seitenzahl anpassen, indem wir die Seitenzahl in der Variablen speichern."
    infinity_playlab_events:
      1:
        image: 'notes/infinity_playlab_events_1.png'
        text: "Jetzt lernen wir ein Element kennen, das Spiele-Programmierer jeden Tag benutzen. Es heißt \"Ereignisse\". Ein Ereignis sagt deinem Programm darauf zu achten, ob etwas passiert. Und wenn es passiert, wird eine Aktion durchgeführt. Einige Beispiele für Ereignisse sind etwa, auf Mausklicks, Pfeiltasten oder ein Antippen den Bildschirms zu achten."
      2:
        image: 'notes/infinity_playlab_events_2.png'
        text: "Hier lassen wir Baymax nach oben gehen, um Hiro zu berühren, und nach unten, um Rapunzel zu berühren, wenn der Spieler die Pfeiltasten oder die Schaltflächen benutzt. Dazu verwenden wir den \"Nach-oben-Pfeil\"-Baustein und hängen den \"Figur-nach-oben-bewegen\"-Baustein daran. Wenn der Spieler die Pfeiltaste drückt, werden die am \"Nach-oben-Pfeil\"-Baustein hängenden Bausteine ausgeführt. Für die Bewegung nach unten machen wir dasselbe. So wird dein Spiel Schritt für Schritt immer interaktiver."
    infinity_playlab_intro:
      1:
        image: 'notes/infinity_playlab_intro_1.png'
        text: "In welcher Klasse bist du? Zweite. Zehnte Klasse. Erste Klasse. Ich war in der achten Klasse, als ich gelernt habe, zu programmieren. Ich habe meinen ersten Computer gekriegt, als sich in der siebten Klasse war. Ich finde es spannend, dass ich die Probleme anderer Leute lösen kann. Du kannst deine Kreativität ausdrücken und deine Ideen verwirklichen."
      2:
        image: 'notes/infinity_playlab_intro_2.png'
        text: "Informatik ist die Grundlage vieler Dinge, die Studenten und Berufstätige in den nächsten 20 oder 30 Jahren tun werden. Ich programmiere gerne, weil ich gerne Leuten helfe. Ich habe die Möglichkeit, etwas zu bauen, das den Menschen das Leben erleichtert. Das ist fast so, als hätte man Superkräfte. Der Anfang ist das Wichtigste. Ich bin selbst Anfänger und möchte zusammen mit dir lernen."
      3:
        image: 'notes/infinity_playlab_intro_3.png'
        text: "Ich heiße John Vechey und bin einer der Mitbegründer von PopCap Games. Wir machen Spiele wie Plants vs. Zombies, Bejeweled und Peggle. Bei Spielen geht es oft weniger darum, wie perfekt der Code oder die Grafik ist, sondern darum, ob sich das Spiel gut anfühlt und Spaß macht. Und ein Gefühl dafür kann man nur entwickeln, indem man ausprobiert, lernt und seine Fähigkeiten anpasst und weiterentwickelt."
      4:
        image: 'notes/infinity_playlab_intro_4.png'
        text: "Hast du ein Lieblingsspiel? Heute werden wir mit dem Spielelabor die ersten Schritte machen, um solche Spiele selbst zu erstellen. Gute Spiele haben eine Geschichte, und in jeder Geschichte gibt es verschiedene Figuren. Die Figuren sprechen, bewegen sich und interagieren mit anderen. Sie holen sich Punkte, je nach den Spielregeln. Heute lernen wir Schritt für Schritt, wie das funktioniert. Dafür verwenden wir Disney-Figuren wie Anna, Elsa, Hiro, Baymax und Rapunzel. Wir werden selbst ein Spiel entwickeln, das du teilen und auf dem Smartphone spielen kannst."
      5:
        image: 'notes/infinity_playlab_intro_5.png'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen darunter. Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Stück Code. Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      6:
        image: 'notes/infinity_playlab_intro_6.png'
        text: "Am Anfang musst du deine Bausteine an den orangefarbenen \"Beim Ausführen\"-Baustein anhängen. Du kannst mehrere Bausteine miteinander verbinden, indem du sie ziehst, bis die gelbe Umrisslinie zu sehen ist, und sie werden sich von selbst zusammenfügen. Bei dieser ersten Aufgabe ist Hiro Figur 1 und Baymax ist Figur 2. Wir müssen Hiro zu Baymax bringen. Dazu ziehen wir den \"Nach rechts bewegen\"-Baustein auf die Arbeitsfläche und verbinden ihn mit dem \"Beim Ausführen\"-Baustein. Wenn alle Bausteine am richtigen Platz sind, klicke auf \"ausführen\", um zu sehen, was du programmiert hast."
      7:
        image: 'notes/infinity_playlab_intro_7.png'
        text: "Wenn du alle Aufgaben durcharbeitest, kannst du am Ende dein eigenes Spiel mit all diesen Figuren erstellen, die miteinander interagieren, Punkte gewinnen, Microbots, Kirschen, Töpfe, Funken und Eis werfen und einander verschwinden lassen können. Du hast die Wahl!"
    infinity_playlab_repeat_forever:
      1:
        text: "Stell dir vor, du müsstest etwas ewig wiederholen. Hoffentlich wird das nie passieren, denn Computer sind viel besser darin, Dinge zu wiederholen. Das ist der \"Ewig wiederholen\"-Baustein. Alles innerhalb dieses Bausteins wird im Spiel immer wieder passieren."
      2:
        text: "Willst du eine Figur dazu bringen, etwas immer wieder zu wiederholen, ohne dass der Spieler etwas tun muss, setzen wir die Bausteine in den \"Ewig wiederholen\"-Baustein. Bei der nächsten Aufgabe lassen wir Anna immer wieder nach oben und unten laufen. Wenn du lernst, wie der \"Wiederholen\"-Befehl funktioniert, kannst du später viel Zeit sparen, wenn du dein eigenes Spiel programmierst."
    tutorial_puzzle_challenge:
      1:
        text: "Was möchtest du werden, wenn du groß wirst, Olivia? Astronautin. Weißt du, was ein Programmierer ist? Ähh, nein. Ein was? Ich weiß nicht, wie man es am besten erklärt, aber Programmieren ist relativ einfach. Es ist eine Reihe von Anweisungen, wie ein Rezept, denen du Schritt für Schritt folgen musst, um das gewünschte Endergebnis zu erreichen."
      2:
        text: "Ich kann die Anzahl der Pixel ändern, die Länge der Linie, mit diesem Dropdown-Menü. Wie lang war das noch? Die Anleitungen kannst du unter der Schaltfläche \"ausführen\" sehen. Hier habe ich den \"Vorwärts bewegen\"-Baustein verwendet und wähle 100 Pixel. Ich kann einen Baustein löschen, indem ich ihn in die Werkzeugkiste oder den Papierkorb ziehe. Legen wir ihn wieder zurück."
      3:
        text: "Wir lassen den Code laufen, indem wir auf \"ausführen\" klicken. Das hat nicht funktioniert! Ich drücke auf \"Zurücksetzen\" und versuche es nochmal. Du kannst eine Aufgabe so oft probieren wie du möchtest, einzelne Aufgaben überspringen oder sie später lösen. Aber du solltest immer dein Bestes geben und nicht aufgeben! Fügen wir einen weiteren \"Vorwärts bewegen\"-Baustein hinzu. Das funktioniert immer noch nicht. Ich kann einen Baustein zwischen andere Bausteine setzen."
      4:
        text: "Nehmen wir einen \"Drehen\"-Baustein und setzen ihn zwischen die \"Vorwärts\"-Bausteine. Um 45 Grad nach links drehen. Versuchen wir es erneut. Zurücksetzen, ausführen, super! Hier ist eine weitere Aufgabe. Manchmal erhältst du etwas fertigen Code, den du vervollständigen sollst. Hier muss ich die passenden Längen und Grade eingeben."
      5:
        text: "Manchmal bringst du vielleicht versehentlich den Anfangscode durcheinander. Wie kannst du das reparieren? Drücke einfach auf \"Puzzle löschen\" und beginne erneut. Ich werde diesen Zahlenbaustein in die verschiedenen Pixelbereiche ziehen. Ich wähle 100 für Pixel, 45 für Grad und nochmal 100 für Pixel. Toll! Hier ist die Code-Studio-Biene. Ich muss die Biene zu jeder Blume bringen, um Nektar zu holen."
      6:
        text: "Die erste Blume ist drei Felder entfernt, daher muss ich mich dreimal vorwärts bewegen. 1, 2, 3. Dann einmal Nektar holen, und nochmal Nektar holen. Das hat nicht funktioniert! Ich setze einen weiteren \"Vorwärts bewegen\"-Baustein zwischen die \"Nimm Nektar\"-Bausteine und versuche es erneut. So geht es! Du hast gerade gelernt, wie du die Aufgaben mit dem Code-Studio-Künstler und der Biene löst. Viel Glück bei der Code-Studio-Puzzle-Herausforderung"
    unplug1:
      1:
        image: 'notes/unplug1_1.png'
        text: "Was möchtest du werden, wenn du groß wirst, Olivia? Hm... ein Astronaut! Weißt du, was ein Programmierer ist? Ääh, nein. Ein was? Ich weiß nicht, wie ich es am besten erkläre. Computer programmieren ist ziemlich einfach. Es ist eine Reihe von Anweisungen, wie ein Rezept. Du musst sie Schritt für Schritt befolgen, um das gewünschte Endergebnis zu erreichen."
      2:
        image: 'notes/unplug1_2.png'
        text: "Informatik kann die Welt verändern. Musikvideos, Spiele, oder herausfinden, ob zwei Menschen sich kennen. Zum Beispiel, Freunde von Leuten finden. Und andere richtig coole Dinge, die sogar Leben retten können. Du musst eine gute Motivation haben. Für mich ist das wie ein Pinsel. Großartige Programme sind für mich nicht anders als großartige Kunst."
      3:
        image: 'notes/unplug1_3.png'
        text: "Als ich endlich etwas über Programmierung gelernt habe, haben sich plötzlich viele Türen geöffnet und auf einmal hat man so unendlich viele Möglichkeiten, weiter zu kommen. Programmierung macht Spaß und ist gar nicht so schwer. Du kannst alles tun, was du dir vorstellst. Und wenn du genug gelernt hast, wird plötzlich alles klar. Ein fertiges Programm ist für mich wie eine Struktur voller Licht. Alle Ecken sind beleuchtet. Es ist unglaublich, wie viele Leute du damit berühren und mit wem du alles interagieren kannst."
      4:
        image: 'notes/unplug1_4.png'
        text: "Unsere erste Lektion dieser Serie erläutert, was Informatik ist, was ein Informatiker tut und wie du Technologie verantwortungsvoll benutzt. Die Lektion ist sehr wichtig, hat aber viel Text. Zum Abschluss wirst du deine eigene Verschlüsselung mit den Anfangsbuchstaben deines Namens erstellen. Das macht Spaß und ist sehr aufschlussreich, denn das binäre System kann oft sehr kompliziert wirken. Aber wenn du es erst einmal verstanden hast, ist es wie eine Geheimsprache."
    unplug2:
      1:
        image: 'notes/unplug2_1.png'
        text: "Diese Lektion über computerbezogenes Denken zeigt dir, wie du ein großes, kompliziertes Problem nimmst und in kleinere, einfache Probleme aufteilst. Das Ziel der Lektion ist, eine Reihe von Anweisungen zu schreiben, mit denen eine andere Person eines der Monster im Unterrichtsplan zeichnen kann."
      2:
        image: 'notes/unplug2_2.png'
        text: "Die Schüler werden in Gruppen aufgeteilt, um Anweisungen zu schreiben und sie mit einer anderen Gruppe auszutauschen, die dann das Monster zeichnet. Die Gruppen schreiben Anweisungen und nutzen dabei die vier Schritte des computerbezogenen Denkens: Zerlegen, Mustererkennung, Abstraktion und Algorithmen."
      3:
        image: 'notes/unplug2_3.png'
        text: "Erst zerlegen die Gruppen die Aufgabe – das heißt, sie machen einen Spielplan. Dann suchen Sie bei den Monstern im Katalog nach ähnlichen Mustern. Dann werden Unterschiede zwischen den Monstern abstrahiert oder entfernt. Zum Beispiel hat ein Monster im Katalog \"Vegitas\"-Augen und ein anderes hat \"Spritem\"-Augen. Aber beide haben Augen, also können wir schreiben, das Monster hat \"Leerstelle\"-Augen."
      4:
        image: 'notes/unplug2_4.png'
        text: "Die Schüler lernen, eine Reihe von Anweisungen namens Algorithmus zu schreiben, auf denen die einzelnen Elemente der Monster aufgelistet werden, mit Leerstellen anstelle der jeweiligen Stile. Diese Anweisungen geben sie an andere Schüler weiter, damit diese ihr eigenes Monster erstellen können."
    unplug3:
      1:
        image: 'notes/unplug3_1.png'
        text: "Beim Programmieren auf Rasterpapier erklären wir, wie Programmierung funktioniert, indem wir Zeichnungen anhand von Pfeilen und Skizzen erstellen. Eine Person erhält eine kleine Zeichnung auf Rasterpapier. Dann muss sie mit Pfeilen beschreiben, wie diese Zeichnung erstellt werden kann."
      2:
        image: 'notes/unplug3_2.png'
        text: "Bei dieser Aktivität dürfen nur diese Symbole verwendet werden: ein Feld vorwärts, ein Feld rückwärts, ein Feld nach oben, ein Feld nach unten, Farbe wechseln, Feld mit Farbe füllen. Nachdem wir die Anweisung codiert haben, geben wir sie einer anderen Person, die den Code liest und das Bild zeichnet."
    unplug4:
      1:
        image: 'notes/unplug4_1.png'
        text: "Beim Programmieren auf Rasterpapier erklären wir, wie Programmierung funktioniert, indem wir Zeichnungen anhand von Pfeilen und Skizzen erstellen. Eine Person erhält eine kleine Zeichnung auf Rasterpapier. Dann muss sie mit Pfeilen beschreiben, wie diese Zeichnung erstellt werden kann."
      2:
        image: 'notes/unplug4_2.png'
        text: "Während der zweiten Hälfte der Aktivität fragen wir Schüler, auf wie viele verschiedene Arten sie ein Stück Papier falten können, um 16 gleiche Rechtecke zu erhalten. Dann sprechen wir darüber, wie verschiedene Lösungen zum selben Endergebnis führen können, und warum einige Lösungen in bestimmten Situationen besser sind."
    unplug5:
      1:
        image: 'notes/unplug5_1.png'
        text: "Beim Programmieren auf Rasterpapier erklären wir, wie Programmierung funktioniert, indem wir Zeichnungen anhand von Pfeilen und Skizzen erstellen. Eine Person erhält eine kleine Zeichnung auf Rasterpapier. Dann muss sie mit Pfeilen beschreiben, wie diese Zeichnung erstellt werden kann."
      2:
        image: 'notes/unplug5_2.png'
        text: "Während der zweiten Hälfte der Aktivität fragen wir Schüler, auf wie viele verschiedene Arten sie ein Stück Papier falten können, um 16 gleiche Rechtecke zu erhalten. Dann sprechen wir darüber, wie verschiedene Lösungen zum selben Endergebnis führen können, und warum einige Lösungen in bestimmten Situationen besser sind."
    unplug6:
      1:
        image: 'notes/unplug6_1.png'
        text: "Diese Aktivität heißt \"Coding mit Karten\" und eignet sich für jedes Alter. Wie du bereits in früheren Lektionen über \"Wenn\"-Anweisungen mit Blockly gelernt hast, besitzen diese Anweisungen ein Element, das überprüft wird, um herauszufinden, ob es wahr oder falsch ist. Das ist die Bedingung, die auf viele verschiedene Weisen benutzt werden kann."
      2:
        image: 'notes/unplug6_2.png'
        text: "Dies nutzen wir, indem wir Programme auf Papier erstellen, die mit zufällig gezogenen Spielkarten ausgeführt werden. Du könntest eine \"Wenn\"-Anweisung haben, die sagt: Wenn die Karte, die du ziehst, größer als 8 ist, erhältst du einen Punkt. Ansonsten erhält dein Gegner einen Punkt. Du kannst die Regeln so kompliziert oder einfach machen, wie du möchtest."
    unplug7:
      1:
        image: 'notes/unplug7_1.png'
        text: "Du kennst sicherlich Liedtexte, in denen nach der ersten Strophe der Text des Refrains steht und zwischen den anderen Strophen nur das Wort \"Refrain\". So wird eine Funktion aufgerufen."
      2:
        image: 'notes/unplug7_2.png'
        text: "In dieser Lektion legen wir den Text des Refrains zu Beginn des Liedes fest und singen dann das Lied. Dann sprechen wir an, dass die Klasse nicht das Wort \"Refrain\" singt, sondern automatisch im oberen Textabschnitt nachschaut, wo der Text des Refrains steht. Wir nutzen das als Einführung, um zu verstehen, was ein Programm tut, wenn es eine Funktion definiert und abruft."
      3:
        image: 'notes/unplug7_3.png'
        text: "Dabei werden bekannte Lieder wie Old Macdonald verwendet, um zu besprechen, wie ein Refrain immer wieder verwendet wird, sich aber teilweise auch ändern kann. Ein Lied wie Old McDonald, bei denen sich nur einzelne Wörter ändern, ist ideal, um die Idee von Parametern einzuführen. Bestimmte Wörter werden verwendet, damit zusätzliche Informationen an deine Funktion gesendet werden können. Sobald wir sicher sind, dass jeder das Konzept verstanden hat, kannst du eigene bekannte Lieder analysieren. Schaut, ob ihr es gemeinsam herausfinden könnt."
    unplug8:
      1:
        image: 'notes/unplug8_1.png'
        text: "Unsere Lektion über Abstraktionen nutzt das bekannte Konzept der Lückengeschichten, bei denen Lücken in einer Geschichte mit unterschiedlichen Wörtern ausgefüllt werden. Wir nehmen diese Idee, fordern die Kinder auf, eigene Wörter für ihre eigenen Geschichten zu erfinden und erläutern das Konzept der Abstraktion."
      2:
        image: 'notes/unplug8_2.png'
        text: "Dabei geht es um Funktionen, wie im Lied \"Old Macdonald\", bei dem es eine Struktur für den Refrain gibt, aber einzelne Elemente geändert werden. Du suchst das kleine Element, das sich ändert und setzt dein eigenes Wort dort ein. Manchmal ändern sich aber auch drei Worte, also ersetzt du diese mit drei Parametern und auch das ist sehr nützlich."
      3:
        image: 'notes/unplug8_3.png'
        text: "Du kannst eine einzige Funktion haben, die unterschiedliche Probleme löst. Leute schreiben oft unterschiedliche Funktionen für alle diese Probleme und merken nicht, dass es nur einen winzigen Unterschied gibt. Wenn sie lediglich herausfinden würden, wie Sie diesen kleinen Unterschied ändern, könnten sie dieselbe Funktion immer und immer wieder verwenden, statt 14 unterschiedliche Funktionen zu nutzen."
    unplug9:
      1:
        image: 'notes/unplug9_1.png'
        text: "Staffellauf-Programmierung ist eine lustige Lektion, bei der mehr als nur Informatik vermittelt wird. Die Aktivität ist ideal, wenn Schüler etwas kribbelig werden und Bewegung brauchen. Und die manchmal trockene Informatik wird dadurch ebenfalls spannender."
      2:
        image: 'notes/unplug9_2.png'
        text: "Die Klasse wird in zwei Gruppen aufgeteilt, die zwei Schlangen bilden und einen Staffellauf machen. Die erste Person in jeder Gruppe läuft zur anderen Seite des Raums, wo eine Zeichnung auf Rasterpapier und ein leeres Stück Papier liegen. Sie schreiben den ersten Schritt auf, mit dem das Bild reproduziert werden kann, laufen zurück auf die andere Seite, schlagen den nächsten Spieler ab, der losläuft und den nächsten Schritt aufschreibt."
      3:
        image: 'notes/unplug9_3.png'
        text: "Das ist eine gute Möglichkeit, die Idee des Debuggens einzuführen, um nicht nur die eigene Arbeit zu überprüfen, sondern auch die Arbeit, die andere vor einem geleistet haben. Die Teilnehmer lernen schnell, wie wichtig es ist, beim Programmieren sorgfältig zu sein, wenn ein ganzes Team von der eigenen Arbeit abhängt."
    unplug10:
      1:
        image: 'notes/unplug10_1.png'
        text: "Bei dieser Aktivität wird leicht verständlich erläutert, wie das Internet funktioniert. Die erforderlichen Fachbegriffe werden leicht verständlich vermittelt, sodass Schüler die Übertragung von Nachrichten simulieren können."
      2:
        image: 'notes/unplug10_2.png'
        text: "Schüler übertragen Nachrichten und geben dabei vor, eine von drei Übertragungsmethoden zu sein. Drahtloses Internet, DSL oder Faseroptik. Der Schüler, der die drahtlose Übertragung repräsentiert, muss die Nachricht auf dem Kopf tragen, da bei dieser Übertragungsmethode der Verlust einiger Informationen am wahrscheinlichsten ist."
      3:
        image: 'notes/unplug10_3.png'
        text: "Der Schüler, der vorgibt, DSL oder Kabel zu sein, trägt die Nachricht auf dem Rücken der Hand, da dort der Verlust von Informationen weniger wahrscheinlich ist. Und der Schüler, der die Faseroptik darstellt, trägt die Nachricht mit beiden Händen. Diese Aktivität ist großartig, um etwas zu verstehen, dass viele von uns jeden Tag benutzen."
    unplug11:
      1:
        image: 'notes/unplug11_1.png'
        text: "Jetzt ist es an der Zeit, alle Aktivitäten zu rekapitulieren, die du in den letzten 19 Lektionen kennengelernt hast. Die Schüler sollten daran erinnert werden, dass sie sehr viel gelernt und erreicht haben. Sie haben in diesen Lektionen mehr über Informatik gelernt, als viele Erwachsene wissen."
      2:
        image: 'notes/unplug11_2.png'
        text: "Sprich in der Klasse oder in kleinen Gruppen über ihre Lieblingslektionen. Nachdem das Gelernte in Erinnerung gerufen wurde, ist es Zeit, kreativ zu werden. Teile die Schüler in Gruppen auf und lass sie eine eigene Offline-Lektion entwickeln. Gib jeder Gruppe ein Schlüsselkonzept wie Funktionen oder Algorithmen und Bastelmaterial, das sie verwenden können. Lasse jede Gruppe ihre neue Offline-Aktivität präsentieren oder reserviere einen weiteren Tag für einige der Schüleraktivitäten."
      3:
        image: 'notes/unplug11_3.png'
        text: "Wir von Code.org hoffen, dass dir dieser Kurs jede Menge Spaß gemacht hat. Egal, ob du die beste neue App entwickeln, mit Computerprogrammen gegen Krankheiten kämpfen, oder einfach ein hervorragender Problemlöser sein möchtest, dieser Kurs war der erste Schritt auf dem Weg zu deinem Traum."
    starwars_intro:
      1:
        image: 'notes/starwars_intro_1.JPG'
        text: "Hallo, ich heiße Kathleen Kennedy und bin Produzentin von Star Wars: Das Erwachen der Macht. Heute arbeitest du mit einem unserer Stars, BB-8. BB-8 ist ein Kugel-Droide. Alle seine Bewegungen und Handlungen werden durch Computer-Software gesteuert. Die Informatik beeinflusst jede Industrie, vom Marketing über das Gesundheitswesen bis zum Film. Für einen Film wie \"Das Erwachen der Macht\" arbeiten Hunderte von Informatikern zusammen."
      2:
        image: 'notes/starwars_intro_2.JPG'
        text: "Hallo, ich heiße Rachel Rose und bin Entwicklungsingenieurin bei ILM. Ich leite das Team für Animation und Figurenentwicklung. In \"Das Erwachen der Macht\" unterstütze ich das Künstlerteam, welches die Knochensysteme erstellt. Dies sind Teile eines Charakters, welche sich bewegen und es der Figur erlauben, glaubwürdig auszusehen."
      3:
        image: 'notes/starwars_intro_3.JPG'
        text: "In der nächsten Stunde werden wir unser eigenes Star Wars Spiel entwickeln. Dabei lernst du die Grundlagen der Programmierung. Normalerweise werden Programme als Text geschrieben, aber hier benutzen wir Bausteine, die wir auf die Arbeitsfläche ziehen, um die Programme zu schreiben. Im Hintergrund wird dabei nach wie vor Code erstellt. Nachdem du die Grundlagen mit Bausteinen gelernt hast, wechselst du zu Javascript, eine der beliebtesten Programmiersprachen im Web."
      4:
        image: 'notes/starwars_intro_4.JPG'
        text: "Zuerst arbeiten wir mit Rey, um BB-8 zu programmieren, damit er den Metallschrott einsammelt. Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Star Wars Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen unter dem Spielbereich."
      5:
        image: 'notes/starwars_intro_5.JPG'
        text: "Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Befehl an BB-8."
      6:
        image: 'notes/starwars_intro_6.JPG'
        text: "Der leere Bereich rechts ist der Arbeitsbereich. Dort werden wir unser Programm zusammenbauen."
      7:
        image: 'notes/starwars_intro_7.JPG'
        text: "Wenn ich den \"moveLeft();\"-Baustein in den Arbeitsbereich ziehe und auf \"ausführen\" klicke, was passiert dann? BB-8 bewegt sich um ein Feld auf dem Raster."
      8:
        image: 'notes/starwars_intro_8.JPG'
        text: "Und was ist, wenn BB-8 nach dem \"moveLeft();\"-Baustein noch etwas anderes tun soll? Ich füge dem Programm einen weiteren Baustein hinzu. Ich wähle den \"moveUp();\"-Baustein und ziehe ihn unter den \"moveLeft();\"-Baustein, bis die gelbe Umrandung erscheint. Dann lege ich ihn ab und die beiden Bausteine werden zusammengesetzt."
      9:
        image: 'notes/starwars_intro_9.JPG'
        text: "Wenn ich erneut auf \"ausführen\" klicke, führt BB-8 der Reihe nach die Befehle aus, die im Arbeitsbereich zusammengesetzt sind. Wenn du einen Baustein löschen möchtest, dann löse ihn von den übrigen Bausteinen und ziehe ihn zurück in die Werkzeugkiste."
      10:
        image: 'notes/starwars_intro_10.JPG'
        text: "Du kannst jederzeit die Schaltfläche „Zurücksetzen“ benutzen, um BB-8 zurück auf Start zu bringen. Los geht‘s!"
    starwars_typing:
      1:
        image: 'notes/starwars_typing_1.JPG'
        text: "In den Bausteinen verwenden wir Javascript-Befehle. Javascript ist aktuell die beliebteste Programmiersprache für professionelle Entwickler. Bausteine sind großartig, um die Grundlagen des Programmierens zu lernen. Selbst Top-Universitäten wie Harvard und Berkeley unterrichten auf diese Weise. Aber nachdem die Grundlagen sitzen, wird Code als Text geschrieben, da das schneller geht."
      2:
        image: 'notes/starwars_typing_2.JPG'
        text: "Wir können Hunderte von Befehlen tippen, ohne sie jedesmal in der Werkzeugkiste zu suchen und auf die Arbeitsfläche ziehen zu müssen. Während du lernst, geht das Tippen etwas langsamer, aber du solltest es dennoch versuchen."
      3:
        image: 'notes/starwars_typing_3.JPG'
        text: "In der oberen rechten Ecke des Arbeitsbereichs kannst du in jeder Aufgabe die \"Zeige Quelltext\"-Schaltfläche anklicken, um von Bausteinen zu Quellcode umzuschalten und zu tippen."
      4:
        image: 'notes/starwars_typing_4.JPG'
        text: "In der nächsten Lektion werden wir mit dem Eingabe-Modus beginnen. Dort kannst du nach wie vor den Baustein aus der Werkzeugkiste ziehen, oder den Befehl per Hand eingeben. Sobald du mit der Eingabe beginnst, werden unter deiner Eingabe Namen möglicher Befehle angezeigt. Statt den gesamten Befehl zu tippen, kannst du eine dieser Optionen wählen, damit es schneller geht. In meinem Beruf benutze ich immer die Autovervollständigung, wenn ich Code schreibe."
      5:
        image: 'notes/starwars_typing_5.JPG'
        text: "Wenn du Code schreibst, musst du sehr genau sein. Du musst alles richtig schreiben, an der richtigen Stelle Groß- und Kleinschreibung verwenden und jedes Semikolon und jede Klammer richtig setzen. Selbst bei einem kleinen Tippfehler kann BB-8 den Code nicht verstehen und wird sich nicht bewegen."
      6:
        image: 'notes/starwars_typing_6.JPG'
        text: "Wenn du in einer Zeile einen Fehler machst, dann markiert ihn der Editor, damit du versuchen kannst, den Quelltext zu ändern und den Fehler zu beheben."
      7:
        image: 'notes/starwars_typing_7.JPG'
        text: "Wenn du nicht weiter weißt, kannst du alles mit der \"Neu Starten\"-Schaltfläche zurücksetzen oder jederzeit zum Baustein-Modus zurückkehren, indem du oben rechts klickst. Probieren wir es aus! Sei nicht frustriert, wenn du Fehler machst. Auch bei den besten Programmierern hat am Anfang nicht alles geklappt."
    starwars_events:
      1:
        image: 'notes/starwars_events_1.JPG'
        text: "Hallo, ich heiße Charita Carter. Ich bin Kreativproduzentin bei Walt Disney Imagineering. Ich bin für die Teams verantwortlich, die Attraktionen für unsere Gäste entwickeln. Wir versuchen immer, die Attraktionen zu verbessern, um unseren Gästen eine bessere Erlebnisse zu bieten. Die Technik spielt dabei eine große Rolle."
      2:
        image: 'notes/starwars_events_2.JPG'
        text: "Glückwunsch. Du hast es geschafft! Du hast BB-8 programmiert. Jetzt bist du bereit für eine schwierigere Aufgabe. Lass es uns versuchen. Nachdem du die Grundlagen der Programmierung gelernt hast, reisen wir in der Zeit zurück, damit du dein eigenes Spiel mit R2-D2 und C-3PO entwickeln kannst."
      3:
        image: 'notes/starwars_events_3.JPG'
        text: "Um ein Spiel zu programmieren, müssen wir ein Konzept lernen, dass Programmierer jeden Tag verwenden: Ereignisse. Ereignisse befehlen deinem Programm, darauf zu achten, ob etwas Bestimmtes passiert. Wenn das der Fall ist, wird eine Aktion durchgeführt."
      4:
        image: 'notes/starwars_events_4.JPG'
        text: "Ereignisse sind beispielsweise das Achten auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms."
      5:
        image: 'notes/starwars_events_5.JPG'
        text: "Wir werden R2-D2 so programmieren, dass er zuerst dem oberen Rebellenpiloten eine Nachricht übermittelt und dann zum unteren Rebellenpiloten geht. Wir bewegen ihn mithilfe von Ereignissen. Wenn der Spieler die Pfeiltasten oder die Schaltflächen benutzt."
      6:
        image: 'notes/starwars_events_6.JPG'
        text: "Wir verwenden den \"whenUp()\"-Ereignisbaustein und hängen den \"goUp()\"-Baustein daran. Wenn der Spieler den Nach-oben-Pfeil drückt, wird der Code unter dem \"whenUp()\"-Baustein ausgeführt. Für die Bewegung nach unten machen wir dasselbe."
      7:
        image: 'notes/starwars_events_7.JPG'
        text: "Dazu verwenden wir einen Befehl namens \"whenUp()\". Wenn du den Befehl aus der Werkzeugkiste ziehst, siehst du, dass er mit einer geschweiften Klammer beginnt und endet, statt einem Semikolon. So können wir andere Befehle in die Mitte setzen. Jeder Befehl, den wir in diese Klammern setzen, wird ausgeführt, wenn der Spieler den Nach-oben-Pfeil drückt."
      8:
        image: 'notes/starwars_events_8.JPG'
        text: "Wir möchten, dass sich R2-D2 nach oben bewegt, deshalb setzen wir einen \"goUp();\"-Baustein in den Befehl. Für die Bewegung nach unten machen wir dasselbe."
      9:
        image: 'notes/starwars_events_9.JPG'
        text: "Anstatt Code zu schreiben, welcher R2-D2 bewegt, können wir ihn auf die Tasten reagieren lassen, um ihn so über den Bildschirm zu bewegen. So wird dein Spiel nach und nach immer interaktiver."
    starwars_congrats:
      1:
        image: 'notes/starwars_congrats_1.JPG'
        text: "Hallo, mein Name ist Alice und ich leite die Produkt- und Technikteams hier bei Code.org. Ich habe auch an dem Tutorial gearbeitet, in dem du gerade spielst."
      2:
        image: 'notes/starwars_congrats_2.JPG'
        text: "Du hast es bis zum letzten Level geschafft. Herzlichen Glückwunsch! Du weißt jetzt alles, was du zum Programmieren deines eigenen Star Wars Spiels brauchst. Jetzt gibt es keine Anleitungen und Aufgaben mehr. Du kannst dein eigenes Spiel nach deinen Vorstellungen programmieren. Und noch etwas: Jetzt stehen dir sogar neue Geräusche und Befehle zur Verfügung."
      3:
        image: 'notes/starwars_congrats_3.JPG'
        text: "[Schüler spricht] Also wir haben ein Spiel gemacht, bei dem du Punkte kriegst, wenn du die Ballonsäue schnappst. Das Besondere ist, jedes Mal wenn du eine Ballonsau schnappst, erscheint ein Sturmsoldat. Der ganze Bildschirm ist voll mit Ballonsäulen und wenn du 10.000 von ihnen berührst, gewinnst du."
      4:
        image: 'notes/starwars_congrats_4.JPG'
        text: "[Schüler sprechen] Wir haben ein Spiel gemacht, wo du nicht verlieren kannst und immer Punkte kriegst, egal was du tötest. Bei meinem Programm habe ich die Tasten umgedreht. Wenn du nach oben klickst, geht die Figur nach unten und wenn du nach rechts klickst, geht die Figur nach links. Das ist richtig schwierig! Manchmal hast du einen unfairen Vorteil, wenn du der Entwickler des Spiels bist. Habe ich es geschafft? Yay!"
      5:
        image: 'notes/starwars_congrats_5.JPG'
        text: "Wenn du mit deinem Spiel fertig bist, wähle \"Teilen\", um einen Link zu bekommen. So kannst du es mit deinen Freunden teilen oder auf deinem Handy spielen. Viel Spaß!"
    starwars_blocks_intro:
      1:
        image: 'notes/starwars_blocks_intro_1.JPG'
        text: "Hallo, ich heiße Kathleen Kennedy und bin Produzentin von Star Wars: Das Erwachen der Macht. Heute arbeitest du mit einem unserer Stars, BB-8. BB-8 ist ein Kugel-Droide. Alle seine Bewegungen und Handlungen werden durch Computer-Software gesteuert. Die Informatik beeinflusst jede Industrie, vom Marketing über das Gesundheitswesen bis zum Film. Für einen Film wie \"Das Erwachen der Macht\" arbeiten Hunderte von Informatikern zusammen."
      2:
        image: 'notes/starwars_blocks_intro_2.JPG'
        text: "Hallo, ich heiße Rachel Rose. Ich bin Entwicklungsingenieurin bei ILM. Ich leite das Team für Animation und Figurenentwicklung. In \"Das Erwachen der Macht\" unterstütze ich das Künstlerteam, welches die Knochensysteme erstellt. Dies sind Teile eines Charakters, welche sich bewegen und es der Figur erlauben, glaubwürdig auszusehen."
      3:
        image: 'notes/starwars_blocks_intro_3.JPG'
        text: "In der nächsten Stunde werden wir unser eigenes Star Wars Spiel entwickeln. Dabei lernst du die Grundlagen der Programmierung. Normalerweise werden Programme als Text geschrieben, aber hier benutzen wir Bausteine, die wir auf die Arbeitsfläche ziehen, um die Programme zu schreiben. Zuerst arbeiten wir mit Rey, um BB-8 zu programmieren, damit er den Metallschrott einsammelt."
      4:
        image: 'notes/starwars_blocks_intro_4.JPG'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Star Wars Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen unter dem Spielbereich."
      5:
        image: 'notes/starwars_blocks_intro_5.JPG'
        text: "Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Befehl an BB-8."
      6:
        image: 'notes/starwars_blocks_intro_6.JPG'
        text: "Der leere Bereich auf der rechten Seite wird \"Arbeitsfläche\" genannt. Dort werden wir unser Programm zusammenbauen."
      7:
        image: 'notes/starwars_blocks_intro_7.JPG'
        text: "Wenn ich den \"moveLeft();\"-Baustein in den Arbeitsbereich ziehe, was passiert dann? BB-8 bewegt sich um ein Feld auf dem Raster."
      8:
        image: 'notes/starwars_blocks_intro_8.JPG'
        text: "Und was ist, wenn BB-8 nach dem \"moveLeft();\"-Baustein noch etwas anderes tun soll? Ich füge dem Programm einen weiteren Baustein hinzu. Ich wähle den \"moveUp();\"-Baustein und ziehe ihn unter den \"moveLeft();\"-Baustein, bis die gelbe Umrandung erscheint. Dann lege ich ihn ab und die beiden Bausteine werden zusammengesetzt. Wenn ich erneut auf \"ausführen\" klicke, führt BB-8 der Reihe nach die Befehle aus, die im Arbeitsbereich zusammengesetzt sind."
      9:
        image: 'notes/starwars_blocks_intro_9.JPG'
        text: "Wenn du einen Baustein löschen möchtest, dann löse ihn von den übrigen Bausteinen und ziehe ihn zurück in die Werkzeugkiste."
      10:
        image: 'notes/starwars_blocks_intro_10.JPG'
        text: "Nachdem du auf \"ausführen\" gedrückt hast, kannst du jederzeit den Zurücksetzen-Knopf benutzen, um BB-8 zurück auf Start zu bringen. Los geht‘s!"
    starwars_blocks_events:
      1:
        image: 'notes/starwars_blocks_events_1.JPG'
        text: "Hallo, ich heiße Charita Carter. Ich bin Kreativproduzentin bei Walt Disney Imagineering. Ich bin für die Teams verantwortlich, die Attraktionen für unsere Gäste entwickeln. Wir versuchen immer, die Attraktionen zu verbessern, um unseren Gästen eine bessere Erlebnisse zu bieten. Die Technik spielt dabei eine große Rolle."
      2:
        image: 'notes/starwars_blocks_events_2.JPG'
        text: "Glückwunsch. Du hast es geschafft! Du hast BB-8 programmiert. Jetzt bist du bereit für eine schwierigere Aufgabe. Lass es uns versuchen. Nachdem du die Grundlagen der Programmierung gelernt hast, reisen wir in der Zeit zurück, damit du dein eigenes Spiel mit R2-D2 und C-3PO entwickeln kannst."
      3:
        image: 'notes/starwars_blocks_events_3.JPG'
        text: "Um ein Spiel zu programmieren, müssen wir ein Konzept lernen, dass Programmierer jeden Tag verwenden: Ereignisse. Ereignisse befehlen deinem Programm, darauf zu achten, ob etwas Bestimmtes passiert. Wenn das der Fall ist, wird eine Aktion durchgeführt."
      4:
        image: 'notes/starwars_blocks_events_4.JPG'
        text: "Ereignisse sind beispielsweise das Achten auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms."
      5:
        image: 'notes/starwars_blocks_events_5.JPG'
        text: "Wir werden R2-D2 so programmieren, dass er zuerst dem oberen Rebellenpiloten eine Nachricht übermittelt und dann zum unteren Rebellenpiloten geht. Wir bewegen ihn mithilfe von Ereignissen. Wenn der Spieler die Pfeiltasten oder die Schaltflächen benutzt."
      6:
        image: 'notes/starwars_blocks_events_6.JPG'
        text: "Wir verwenden den \"whenUp()\"-Ereignisbaustein und hängen den \"goUp()\"-Baustein daran. Wenn der Spieler den Nach-oben-Pfeil drückt, wird der Code unter dem \"whenUp()\"-Baustein ausgeführt. Für die Bewegung nach unten machen wir dasselbe. Anstatt Code zu schreiben, welcher R2-D2 bewegt, können wir ihn auf die Tasten reagieren lassen, um ihn so über den Bildschirm zu bewegen."
      7:
        image: 'notes/starwars_blocks_events_7.JPG'
        text: "So wird dein Spiel nach und nach immer interaktiver."
    starwars_blocks_congrats:
      1:
        image: 'notes/starwars_blocks_congrats_1.JPG'
        text: "Hallo, mein Name ist Alice und ich leite die Produkt- und Technikteams hier bei Code.org. Ich habe auch an dem Tutorial gearbeitet, in dem du gerade spielst."
      2:
        image: 'notes/starwars_blocks_congrats_2.JPG'
        text: "Du hast es bis zum letzten Level geschafft. Herzlichen Glückwunsch! Du weißt jetzt alles, was du zum Programmieren deines eigenen Star Wars Spiels brauchst. Jetzt gibt es keine Anleitungen und Aufgaben mehr. Du kannst dein eigenes Spiel nach deinen Vorstellungen programmieren. Und noch etwas: Jetzt stehen dir sogar neue Geräusche und Befehle zur Verfügung."
      3:
        image: 'notes/starwars_blocks_congrats_3.JPG'
        text: "[Schüler spricht] Also wir haben ein Spiel gemacht, bei dem du Punkte kriegst, wenn du die Ballonsäue schnappst. Das Besondere ist, jedes Mal wenn du eine Ballonsau schnappst, erscheint ein Sturmsoldat. Der ganze Bildschirm ist voll mit Ballonsäulen und wenn du 10.000 von ihnen berührst, gewinnst du."
      4:
        image: 'notes/starwars_blocks_congrats_4.JPG'
        text: "[Schüler sprechen] Wir haben ein Spiel gemacht, wo du nicht verlieren kannst und immer Punkte kriegst, egal was du tötest. Bei meinem Programm habe ich die Tasten umgedreht. Wenn du nach oben klickst, geht die Figur nach unten und wenn du nach rechts klickst, geht die Figur nach links. Das ist richtig schwierig! Manchmal hast du einen unfairen Vorteil, wenn du der Entwickler des Spiels bist. Habe ich es geschafft? Yay!"
      5:
        image: 'notes/starwars_blocks_congrats_5.JPG'
        text: "Wenn du mit deinem Spiel fertig bist, wähle \"Teilen\", um einen Link zu bekommen. So kannst du es mit deinen Freunden teilen oder auf deinem Handy spielen. Viel Spaß!"
    mc_intro:
      1:
        image: 'notes/mc_intro_1.JPG'
        text: "Ich heiße Jens Bergensten, aber alle nennen mich Jeb. Ich bin der leitende Entwickler für Minecraft hier bei Mojang in Stockholm. Ich habe mit elf oder zwölf angefangen, zu programmieren, weil ich Spiele machen wollte. Ein Freund meines Vaters sagte mir, dass man programmieren können muss, um Spiele zu machen. So habe ich angefangen. Es macht mir Spaß, die Architektur der Spiele zu entwickeln. Das mag ich besonders bei Minecraft."
      2:
        image: 'notes/mc_intro_2.JPG'
        text: "In der nächsten Stunde erlernst du die Grundlagen der Informatik, indem du Alex oder Steve dazu programmierst, durch einen simulierten Teil einer Minecraft-Welt zu laufen."
      3:
        image: 'notes/mc_intro_3.JPG'
        text: "Traditionell wird in Textform programmiert, aber heute benutzen wir Blockly: ein System, bei dem man per Drag & Drop grafische Bausteine verschiebt und so Programme schreibt. Dabei erstellst du JavaScript-Code."
      4:
        image: 'notes/mc_intro_4.JPG'
        text: "Die Konzepte, die du hier erlernst, sind die Grundlage der Informatik und werden von Programmierern tagtäglich verwendet. Hier bei Mojang nutzen wir dieselben Konzepte für Minecraft."
      5:
        image: 'notes/mc_intro_5.JPG'
        text: "Bevor du anfängst, musst du dir eine Figur aussuchen. Ich wähle Alex. Lass uns ein Programm entwickeln, mit dem sie sich über den Bildschirm bewegt."
      6:
        image: 'notes/mc_intro_6.JPG'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Minecraft-Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen darunter."
      7:
        image: 'notes/mc_intro_7.JPG'
        text: "Der mittlere Bereich ist die Werkzeugkiste und jeder dieser Bausteine ist ein Befehl, der Alex' Aktionen steuert."
      8:
        image: 'notes/mc_intro_8.JPG'
        text: "Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      9:
        image: 'notes/mc_intro_9.JPG'
        text: "Was passiert, wenn wir den \"moveForward();\"-Baustein in den Arbeitsbereich ziehen und dann auf \"ausführen\" klicken? Alex bewegt sich im Raster um ein Feld nach vorn."
      10:
        image: 'notes/mc_intro_10.JPG'
        text: "Und wenn wir möchten, dass sie noch etwas anderes macht, nachdem sie sich um ein Feld vorwärts bewegt hat? Wir fügen unsere Programm einen weiteren Baustein hinzu. Ich wähle den \"turnRight();\"-Baustein und ziehe ihn unter meinen \"moveForward();\"-Baustein, bis diese orangefarbene Linie erscheint. Dann lege ich ihn ab und die beiden Bausteine werden zusammengesetzt. Wenn wir erneut auf \"ausführen\" klicken, führt Alex der Reihe nach die Befehle aus, die im Arbeitsbereich zusammengesetzt sind."
      11:
        image: 'notes/mc_intro_11.JPG'
        text: "Möchtest du einen Baustein löschen, ziehst du ihn einfach aus dem Stapel zurück in die Werkzeugkiste."
      12:
        image: 'notes/mc_intro_12.JPG'
        text: "Um unsere Änderungen zu löschen und zurück zum Beginn des Levels zu gelangen, kannst du die Schaltfläche \"Neu starten\" oben rechts im Arbeitsbereich verwenden. Und noch etwas: siehst du das kleine Dreieck auf den \"Drehen\"-Bausteinen? Immer, wenn du diese Dreiecke siehst, kannst du dort eine andere Option auswählen. Lass uns Code schreiben!"
    mc_repeat:
      1:
        image: 'notes/mc_repeat_1.JPG'
        text: "Ich bin Lydia Winters, Markendirektorin bei Mojang. Wir haben dieses kleine Spiel namens Minecraft herausgebracht."
      2:
        image: 'notes/mc_repeat_2.JPG'
        text: "Am liebsten gehe ich in der Minecraft-Welt auf Entdeckungsreise. Ich klettere gerne durch Höhlen und schaue, was ich dort finden kann. Ich bin keine Programmiererin, und deshalb freue ich mich besonders darauf, die Minecraft-Lektion durchzuarbeiten und selbst etwas Code zu lernen."
      3:
        image: 'notes/mc_repeat_3.JPG'
        text: "Im letzten Level waren sehr viele \"moveForward();\"-Bausteine nötig. Es wäre leichter, wenn wir dem Computer einfach sagen könnten, den \"moveForward();\"-Befehl vier- oder fünfmal auszuführen. Zum Glück sind Computer richtig gut darin, Befehle mit \"Wiederhole\"-Schleifen zu wiederholen."
      4:
        image: 'notes/mc_repeat_4.JPG'
        text: "Bei der Entwicklung von Minecraft verwenden wir \"Wiederhole\"-Schleifen, um die Materialien für eine neue Welt bereitzustellen. Das sind Tausende von Blöcken. Wir verwenden Schleifen auch für andere Dinge, etwa damit die Füße von Alex sich nach hinten und vorne bewegen, während sie läuft. \"Wiederhole\"-Schleifen sind ein sehr nützliches Element beim Programmieren."
      5:
        image: 'notes/mc_repeat_5.JPG'
        text: "Es wird Nacht, darum werden wir uns in den nächsten Levels ein Haus zum Schutz bauen. Das ist mithilfe der Wiederholungsschleifen ganz einfach."
      6:
        image: 'notes/mc_repeat_6.JPG'
        text: "Um eine Wand unseres Hauses zu bauen, können wir Alex entweder viermal vorwärts gehen und Bretter platzieren lassen, oder wir befehlen ihr mit \"moveForward();\", vorwärts zu gehen und ein Brett zu platzieren, und lassen sie diese Aktion mit dem \"Wiederholen\"-Baustein mehrmals ausführen. Jetzt klicken wir den \"Wiederholen\"-Baustein an und sagen ihr, wie oft sie die Aktion ausführen soll. Bauen wir schnell unser Haus, bevor es dunkel wird! Viel Spaß!"
    mc_if_statements:
      1:
        image: 'notes/mc_if_statements_1.JPG'
        text: "Jetzt lernen wir etwas über \"Wenn\"-Anweisungen. \"Wenn\"-Anweisungen sind wichtig, wenn man Programmieren lernen will. Sie helfen dem Computer, Entscheidungen zu treffen."
      2:
        image: 'notes/mc_if_statements_2.JPG'
        text: "Alle Computer verwenden \"Wenn\"-Anweisungen, sogar mein Telefon. Wenn ich zum Beispiel mein Handy entsperre, läuft ein Code, der sagt: Wenn ich das Passwort richtig eingebe, dann wird das Handy entsperrt. Ansonsten wird eine Fehlermeldung angezeigt."
      3:
        image: 'notes/mc_if_statements_3.JPG'
        text: "Du kannst in deinem Code \"Wenn\"-Anweisungen verwenden, damit Steve und Alex auf Ereignisse in der Minecraft-Welt reagieren. Wenn zum Beispiel ein Felsen vor ihnen liegt, können sie sich nach links drehen. Oder sie drehen sich nach rechts, wenn sie gegen einen Baum laufen."
      4:
        image: 'notes/mc_if_statements_4.JPG'
        text: "In diesem Fall möchten wir nicht in die Lava fallen. Man kann einfach darum herumlaufen. Sie ist auf dem Bildschirm gut zu sehen. Aber was ist, wenn Lava unter einem Stein ist?"
      5:
        image: 'notes/mc_if_statements_5.JPG'
        text: "Nachdem wir den Stein abgebaut haben, können wir nicht einfach weiterlaufen, da dort Lava sein könnte. Wenn dort Lava ist, müssen wir erst einen Stein vor unsere Figur setzen, bevor wir weiter laufen können. Nur so können wir sicher weitergehen. Lass uns noch mehr Steine abbauen! Und verwende die \"Wenn\"-Anweisung, um nicht in die Lava zu fallen."
    mc_congrats_share:
      1:
        image: 'notes/mc_congrats_share_1.JPG'
        text: "Herzlichen Glückwunsch! Du hast jetzt die Grundbausteine der Informatik kennengelernt."
      2:
        image: 'notes/mc_congrats_share_2.JPG'
        text: "Jetzt kannst du diese Bausteine verwenden, um selbst Programme zu erstellen. Es gibt keine Anleitungen und Aufgaben mehr. Du kannst alles bauen, was du willst. Du hast die Wahl."
      3:
        image: 'notes/mc_congrats_share_3.JPG'
        text: "[Schüler sprechen] Wow, jetzt geht es los. Scheren! Ich habe ein \"L\" aus Fackeln gemacht. Ich habe ein \"A\" aus Birkenholzbrettern gemacht. Es hat funktioniert! Wir haben ein Haus aus Wolle gebaut!"
      4:
        image: 'notes/mc_congrats_share_4.JPG'
        text: "Wenn dein Werk fertig ist, hol dir über \"Teilen\" einen Link, um es mit deinen Freunden zu teilen. Viel Spaß!"
    mc_congrats_no_share:
      1:
        image: 'notes/mc_congrats_no_share_1.JPG'
        text: "Herzlichen Glückwunsch! Du hast jetzt die Grundbausteine der Informatik kennengelernt."
      2:
        image: 'notes/mc_congrats_no_share_2.JPG'
        text: "Jetzt kannst du diese Bausteine verwenden, um selbst Programme zu erstellen. Es gibt keine Anleitungen und Aufgaben mehr. Du kannst alles bauen, was du willst. Du hast die Wahl."
      3:
        image: 'notes/mc_congrats_no_share_3.JPG'
        text: "[Schüler sprechen] Wow, jetzt geht es los. Scheren! Ich habe ein \"L\" aus Fackeln gemacht. Ich habe ein \"A\" aus Birkenholzbrettern gemacht. Es hat funktioniert! Wir haben ein Haus aus Wolle gebaut!"
      4:
        image: 'notes/mc_congrats_no_share_4.JPG'
        text: "Jetzt kannst du alles bauen, was du willst. Viel Spaß!"
    gumball_intro:
      1:
        image: 'notes/gumball_intro_1.JPG'
        text: "Du willst ein eigenes Spiel machen? Das ist gar nicht so schwer. Du brauchst nur einige Grundlagen der Programmierung, und schon kannst du ein Spiel spielen, das du selbst entwickelt hast."
      2:
        image: 'notes/gumball_intro_2.JPG'
        text: "Hast du ein Lieblingsspiel? Heute werden wir mit dem Spielelabor die ersten Schritte machen, um solche Spiele selbst zu erstellen. Gute Spiele haben eine Geschichte, und in jeder Geschichte gibt es verschiedene Figuren. Die Figuren sprechen, bewegen sich und interagieren mit anderen. Sie holen sich Punkte, je nach den Spielregeln. Heute lernen wir mit lustigen Figuren Schritt für Schritt alle diese Dinge und bauen am Ende selbst ein Spiel, das über das Handy geteilt und gespielt werden kann."
      3:
        image: 'notes/gumball_intro_3.JPG'
        text: "Heute lernen wir mit lustigen Figuren Schritt für Schritt alle diese Dinge und bauen am Ende selbst ein Spiel, das über das Handy geteilt und gespielt werden kann."
      4:
        image: 'notes/gumball_intro_4.JPG'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen darunter."
      5:
        image: 'notes/gumball_intro_5.JPG'
        text: "Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Stück Code."
      6:
        image: 'notes/gumball_intro_6.JPG'
        text: "Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      7:
        image: 'notes/gumball_intro_7.JPG'
        text: "Am Anfang musst du deine Bausteine an den orangefarbenen \"Beim Ausführen\"-Baustein anhängen. Du kannst mehrere Bausteine miteinander verbinden, indem du sie ziehst, bis die gelbe Linie zu sehen ist. Sie fügen sich dann von selbst zusammen."
      8:
        image: 'notes/gumball_intro_8.JPG'
        text: "In der ersten Aufgabe sollen die Figuren etwas sagen. Dazu verbinden wir den \"Sagen\"-Baustein mit dem \"Beim Ausführen\"-Baustein und geben eine Nachricht ein. Wenn alle Bausteine am richtigen Platz sind, klicke auf \"ausführen\", um zu sehen, was du programmiert hast."
      9:
        image: 'notes/gumball_intro_9.JPG'
        text: "Fang einfach an. Am Ende kannst du dein eigenes Spiel erstellen, mit allen möglichen Figuren, die miteinander interagieren, Punkte erzielen, Sachen werfen oder einander sogar verschwinden lassen. Du hast die Wahl!"
    gumball_events:
      1:
        image: 'notes/gumball_events_1.JPG'
        text: "Jetzt lernen wir ein Element kennen, das Spiele-Programmierer jeden Tag benutzen. Es heißt \"Ereignisse\". Ein Ereignis befiehlt deinem Programm, darauf zu achten, ob etwas Bestimmtes passiert. Wenn das der Fall ist, wird im Spiel eine Aktion durchgeführt."
      2:
        image: 'notes/gumball_events_2.JPG'
        text: "Einige Beispiele für Ereignisse sind etwa, auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms zu achten."
      3:
        image: 'notes/gumball_events_3.JPG'
        text: "In diesem Fall soll die Figur etwas sagen, wenn der Spieler darauf klickt. Wir verwenden den Baustein \"Wenn angeklickt wird\" und hängen den \"Sage\"-Baustein daran. Wenn der Spieler klickt, werden alle Bausteine ausgeführt, die an diesem Baustein hängen."
      4:
        image: 'notes/gumball_events_4.JPG'
        text: "Es gibt auch \"Wenn Pfeil\"-Bausteine. Wenn du die \"Bewegen\"-Bausteine daran hängst, kannst du deine Figuren mit den Pfeiltasten nach oben, unten, links oder rechts bewegen. So wird dein Spiel Schritt für Schritt immer interaktiver."
    gumball_repeat:
      1:
        image: 'notes/gumball_repeat_1.JPG'
        text: "Stell dir vor, du müsstest etwas ewig wiederholen. Hoffentlich wird das nie passieren, den Computer sind viel besser darin, Dinge zu wiederholen."
      2:
        image: 'notes/gumball_repeat_2.JPG'
        text: "Das ist der \"Ewig wiederholen\"-Baustein. Alles innerhalb dieses Bausteins wird im Spiel immer wieder passieren. Willst du eine Figur dazu bringen, etwas immer wieder zu wiederholen, ohne dass der Spieler etwas tun muss, setzen wir die Bausteine in den \"Ewig wiederholen\"-Baustein."
      3:
        image: 'notes/gumball_repeat_3.JPG'
        text: "Bei der nächsten Aufgabe lassen wir die Figur eine Aufgabe ständig wiederholen. Wenn du lernst, wie der \"Wiederholen\"-Befehl funktioniert, kannst du später viel Zeit sparen, wenn du dein eigenes Spiel programmierst."
    iceage_intro:
      1:
        image: 'notes/iceage_intro_1.JPG'
        text: "Du willst ein eigenes Spiel machen? Das ist gar nicht so schwer. Du brauchst nur einige Grundlagen der Programmierung, und schon kannst du ein Spiel spielen, das du selbst entwickelt hast."
      2:
        image: 'notes/iceage_intro_2.JPG'
        text: "Hast du ein Lieblingsspiel? Heute werden wir mit dem Spielelabor die ersten Schritte machen, um solche Spiele selbst zu erstellen. Gute Spiele haben eine Geschichte, und in jeder Geschichte gibt es verschiedene Figuren. Die Figuren sprechen, bewegen sich und interagieren mit anderen. Sie holen sich Punkte, je nach den Spielregeln. Heute lernen wir mit lustigen Figuren Schritt für Schritt alle diese Dinge und bauen am Ende selbst ein Spiel, das über das Handy geteilt und gespielt werden kann."
      3:
        image: 'notes/iceage_intro_3.JPG'
        text: "Heute lernen wir mit lustigen Figuren Schritt für Schritt alle diese Dinge und bauen am Ende selbst ein Spiel, das über das Handy geteilt und gespielt werden kann."
      4:
        image: 'notes/iceage_intro_4.JPG'
        text: "Dein Bildschirm ist in drei Bereiche aufgeteilt. Links ist der Spielbereich, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen darunter."
      5:
        image: 'notes/iceage_intro_5.JPG'
        text: "Dieses mittlere Feld ist die Werkzeugkiste und jeder Baustein ist ein Stück Code."
      6:
        image: 'notes/iceage_intro_6.JPG'
        text: "Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen."
      7:
        image: 'notes/iceage_intro_7.JPG'
        text: "Am Anfang musst du deine Bausteine an den orangefarbenen \"Beim Ausführen\"-Baustein anhängen. Du kannst mehrere Bausteine miteinander verbinden, indem du sie ziehst, bis die gelbe Linie zu sehen ist. Sie fügen sich dann von selbst zusammen."
      8:
        image: 'notes/iceage_intro_8.JPG'
        text: "In der ersten Aufgabe sollen die Figuren etwas sagen. Dazu verbinden wir den \"Sagen\"-Baustein mit dem \"Beim Ausführen\"-Baustein und geben eine Nachricht ein. Wenn alle Bausteine am richtigen Platz sind, klicke auf \"ausführen\", um zu sehen, was du programmiert hast."
      9:
        image: 'notes/iceage_intro_9.JPG'
        text: "Fang einfach an. Am Ende kannst du dein eigenes Spiel erstellen, mit allen möglichen Figuren, die miteinander interagieren, Punkte erzielen, Sachen werfen oder einander sogar verschwinden lassen. Du hast die Wahl!"
    iceage_events:
      1:
        image: 'notes/iceage_events_1.JPG'
        text: "Jetzt lernen wir ein Element kennen, das Spiele-Programmierer jeden Tag benutzen. Es heißt \"Ereignisse\". Ein Ereignis befiehlt deinem Programm, darauf zu achten, ob etwas Bestimmtes passiert. Wenn das der Fall ist, wird im Spiel eine Aktion durchgeführt."
      2:
        image: 'notes/iceage_events_2.JPG'
        text: "Einige Beispiele für Ereignisse sind etwa, auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms zu achten."
      3:
        image: 'notes/iceage_events_3.JPG'
        text: "In diesem Fall soll die Figur etwas sagen, wenn der Spieler darauf klickt. Wir verwenden den Baustein \"Wenn angeklickt wird\" und hängen den \"Sage\"-Baustein daran. Wenn der Spieler klickt, werden alle Bausteine ausgeführt, die an diesem Baustein hängen."
      4:
        image: 'notes/iceage_events_4.JPG'
        text: "Es gibt auch \"Wenn Pfeil\"-Bausteine. Wenn du die \"Bewegen\"-Bausteine daran hängst, kannst du deine Figuren mit den Pfeiltasten nach oben, unten, links oder rechts bewegen. So wird dein Spiel Schritt für Schritt immer interaktiver."
    iceage_repeat:
      1:
        image: 'notes/iceage_repeat_1.JPG'
        text: "Stell dir vor, du müsstest etwas ewig wiederholen. Hoffentlich wird das nie passieren, den Computer sind viel besser darin, Dinge zu wiederholen."
      2:
        image: 'notes/iceage_repeat_2.JPG'
        text: "Das ist der \"Ewig wiederholen\"-Baustein. Alles innerhalb dieses Bausteins wird im Spiel immer wieder passieren. Willst du eine Figur dazu bringen, etwas immer wieder zu wiederholen, ohne dass der Spieler etwas tun muss, setzen wir die Bausteine in den \"Ewig wiederholen\"-Baustein."
      3:
        image: 'notes/iceage_repeat_3.JPG'
        text: "Bei der nächsten Aufgabe lassen wir die Figur eine Aufgabe ständig wiederholen. Wenn du lernst, wie der \"Wiederholen\"-Befehl funktioniert, kannst du später viel Zeit sparen, wenn du dein eigenes Spiel programmierst."
    mc_2016_intro:
      1:
        image: 'notes/mc_2016_intro_1.jpg'
        text: "Hi, mein Name ist Jens und ich bin der leitende Designer von Minecraft. In der nächsten Stunde erschaffst du dein eigenes Minecraft-Spiel. Das sieht wie Minecraft aus, aber die Welt steht still. Die Schafe bewegen sich nicht, die Hühner legen keine Eier und die Zombies stehen nur herum. Es liegt jetzt an dir, die Minecraft-Welt mit Code wiederzubeleben."
      2:
        image: 'notes/mc_2016_intro_2.jpg'
        text: "My name is Melissa and I am a user researcher at Minecraft. What I'm really interested in is how people think and interact with technology and so this job is the perfect job for me to put together the computer engineering with the psychology: wie Menschen denken und sich verhalten."
      3:
        image: 'notes/mc_2016_intro_3.jpg'
        text: "Dein Bildschirm ist in drei Hauptbereiche gegliedert. 1) Links befindet sich das Spiel. Im Moment steht die Welt still, aber das werden wir mithilfe von Code ändern."
      4:
        image: 'notes/mc_2016_intro_4.jpg'
        text: "2) In der Mitte ist die Werkzeugkiste. Jeder dieser Blöcke ist ein Befehl, den Hühner, Schafe und andere Minecraft-Kreaturen verstehen können."
      5:
        image: 'notes/mc_2016_intro_5.jpg'
        text: "3) Auf der rechten Seite haben wir den Arbeitsplatz, wo wir unser Programm erstellen werden."
      6:
        image: 'notes/mc_2016_intro_6.jpg'
        text: "Hast du vergessen, was du in einem Level tun musst, findest du oben die nötigen Anweisungen."
      7:
        image: 'notes/mc_2016_intro_7.jpg'
        text: "Wir werden zu Beginn ein Huhn programmieren. Ziehen wir den „vorwärts“-Befehl auf den Arbeitsplatz. Mit „Ausführen“ bewegt sich das Huhn einen Schritt vorwärts. Das kann ich mit einem weiteren „vorwärts“-Block unter dem ersten „vorwärts“-Block erweitern, wenn das Zeichen erscheint. Dann lass ich ihn los und die Blöcke verbinden sich. Klicke ich auf „Ausführen“, macht das Huhn zwei Schritte."
      8:
        image: 'notes/mc_2016_intro_8.jpg'
        text: "Wenn du einen Block löschen möchtest, entferne ihn vom Stapel und ziehe ihn zurück in die Werkzeugkiste."
      9:
        image: 'notes/mc_2016_intro_9.jpg'
        text: "Nach „Ausführen“ kannst du mit „Zurücksetzen“ das Spiel zurücksetzen und von vorne beginnen. Jetzt kannst du deine eigene Version von Minecraft erstellen. Viel Spaß!"
    mc_2016_loops:
      1:
        image: 'notes/mc_2016_loops_1.jpg'
        text: "Hi, ich bin Lisa. Ich bin eine Entwicklerin von Minecraft und ich arbeite an einigen Tieren und Feinden im Spiel. Eines der Tiere, an dem ich gearbeitet habe, ist der Ozelot. Du kannst ihn mit einem Fisch füttern und ihn zu deiner eigenen Katze machen."
      2:
        image: 'notes/mc_2016_loops_2.jpg'
        text: "Uns Menschen wird schnell mal langweilig, wenn wir immer und immer wieder dasselbe tun müssen. Das Coole an Computern ist, dass ihnen nie langweilig wird, wenn sie unzählige Male pausenlos dasselbe wiederholen müssen. Das nennt man eine Schleife, und jede Kreatur in Minecraft verwendet sie."
      3:
        image: 'notes/mc_2016_loops_3.jpg'
        text: "Vorhin haben wir ein Huhn dazu gebracht, sich zu bewegen, doch dann ist es stehengeblieben. In Minecraft hören die Hühner nie auf, sich zu bewegen. Setzen wir eine „immer tun“-Schleife ein, um auch unsere Hühner nie stillstehen zu lassen. Schleifen werden dir eine Menge Zeit sparen und dir tolle Möglichkeiten beim Bauen deiner eigenen Minecraft-Version eröffnen."
    mc_2016_events:
      1:
        image: 'notes/mc_2016_events_1.jpg'
        text: "Beim nächsten Level kannst du Steve oder Alex auswählen. Drücke die Pfeiltasten deiner Tastatur und bewege dich nach oben, unten, links und rechts. So kannst du in einem Level überall hingehen. Verwende eine Kreatur, indem du hingehst, dich drehst und die Leertaste drückst."
      2:
        image: 'notes/mc_2016_events_2.jpg'
        text: "Wische zum Bewegen auf einem Touchscreen nach oben, unten, links und rechts. Tippe dann auf das Feld und verwende den Gegenstand vor dir."
      3:
        image: 'notes/mc_2016_events_3.jpg'
        text: "Aber was passiert dabei genau? In Minecraft lassen Schafe Wolle fallen, wenn du sie scherst. Kühen laufen bei einem Treffer fort und Creeper explodieren in deiner Nähe. Diese Reaktionen lösen sich dank sogenannter Ereignisse aus. Ereignisse lassen dein Programm zuhören oder warten, wenn etwas passiert. Wenn was passiert, führt es etwas aus."
      4:
        image: 'notes/mc_2016_events_4.jpg'
        text: "Bis jetzt hast du ein Ereignis genutzt. Code im „beim Spawnen“-Platz läuft, wenn deine Kreatur erstellt wird oder das Spiel beginnt. In den nächsten Levels hast du neue Plätze für Ereignisse wie „bei Berührung“, die beim Berühren der Kreatur laufen, oder „bei Verwendung“, wenn du die Kreatur verwendest. Wenn Zombies beim Sonnenaufgang verschwinden sollen, dann nutze den „bei Tag“-Platz."
    mc_2016_spawn:
      1:
        image: 'notes/mc_2016_spawn_1.jpg'
        text: "In Spielen ist spawnen das Gleiche wie erschaffen. Lass uns in diesem Level Zombies beim Sonnenuntergang spawnen. Dafür brauchen wir den „bei Nacht“-Block."
      2:
        image: 'notes/mc_2016_spawn_2.jpg'
        text: "Da die Zombies in der Nacht spawnen sollen, fügen wir den „Zombie spawnen“-Block unter dem „bei Nacht“-Block hinzu. Beim Spawnen wird jeder Zombie den Code ausführen, den du in seinem „beim Spawnen“-Ereignisplatz gewählt hast. Viel Spaß beim Spawnen!"
    mc_2016_congrats:
      1:
        image: 'notes/mc_2016_congrats_1.jpg'
        text: "Glückwunsch! Du hast gelernt, wie man mit Programmierbefehlen die Minecraft-Welt zum Leben erweckt. Du bist jetzt der Entwickler. Du hast alle Befehle und alle Kreaturen freigeschaltet. Du entscheidest, was passiert."
      2:
        image: 'notes/mc_2016_congrats_2.jpg'
        text: "Wenn dein Spiel fertig ist, wähle teilen, um einen Link zu erhalten, den du mit deinen Freunden teilen kannst, oder spiele es auf deinem Handy. Viel Spaß! Ich freue mich darauf, deine Version von Minecraft zu spielen."
    applab_intro_welcome:
      1:
        image: 'notes/applab_intro_welcome_1.png'
        text: "Mein Name ist Mei'lani. Ich bin Praktikantin bei code.org und studiere außerdem Informatik. Ich mag Informatik, weil sie sehr kreativ ist. Ich darf der Problemlöser sein. Ich kann dafür sorgen, dass alles so funktioniert, wie ich es möchte. Aber ich darf auch der Designer sein. Ich bin der Künstler und entscheide über alles, was mit Kreativität zu tun hat."
      2:
        image: 'notes/applab_intro_welcome_2.png'
        text: "Mit App Lab ist es ganz einfach, eigene Apps zu erstellen! Egal, ob du neu im Programmieren bist oder schon etwas Erfahrung hast. App Lab ist ein großartiges Werkzeug, um neue Apps zu erstellen und sie mit Ihren Freunden zu teilen."
      3:
        image: 'notes/applab_intro_welcome_3.png'
        text: "Dies ist ein App-Labor. Auf der linken Seite ist Ihre App. Auf der rechten Seite steht der Code, mit dem sie ausgeführt werden soll. Du baust dein Programm auf, indem du Blöcke aus der Werkzeugkiste hineinziehst. Zu Beginn haben Sie nur einen Block namens 'setProperty'."
      4:
        image: 'notes/applab_intro_welcome_4.png'
        text: "Der Set-Eigenschaft-Block ändert das Aussehen der Elemente auf Ihrem Bildschirm. Wie die Schaltflächen, Beschriftungen oder sogar der Bildschirm selbst. Zuerst musst du entscheiden, welches Element du ändern möchtest. Wenn du mit dem Mauszeiger über ein Element in deiner App fährst, siehst du hier den Namen oder die ID. Wählen Sie dann diese ID aus dem ersten Dropdown-Menü aus."
      5:
        image: 'notes/applab_intro_welcome_5.png'
        text: "Elemente haben viele Eigenschaften, die du ändern kannst, z. B. ihre Textfarbe, Hintergrundfarbe oder Schriftgröße. Du kannst die vollständige Liste sehen und in der zweiten Dropdown-Liste die Eigenschaft auswählen, die du ändern möchtest."
      6:
        image: 'notes/applab_intro_welcome_6.png'
        text: "In die letzte Auswahlliste gibst du den Wert ein, den du verwenden möchtest. Der Block wird dir einen Vorschlag unterbreiten. Du kannst aber auch jederzeit selbst andere Farben oder Zahlen eintippen."
      7:
        image: 'notes/applab_intro_welcome_7.png'
        text: "Sobald du fertig bist, liest sich der Baustein ein wenig wie ein Satz: \"Stelle die Hintergrundfarbe der Schaltfläche1 auf grün\". Klicke auf Ausführen, um deine Änderungen am Code zu sehen. Wenn du auf \"Zurücksetzen\" klickst, kannst du weitere Bausteine hineinziehen, um andere Dinge an deiner App zu ändern. Genau wie den Text!"
      8:
        image: 'notes/applab_intro_welcome_8.png'
        text: "Für dieses Tutorial werden wir im Bausteinmodus arbeiten, App Lab unterstützt aber auch die Arbeit im Text."
      9:
        image: 'notes/applab_intro_welcome_9.png'
        text: "Ihr werdet in JavaScript, der Sprache des Webs, programmieren. Jedes Level hat ein Ziel, Anweisungen und ein Bild von dem, was du erstellen sollst."
      10:
        image: 'notes/applab_intro_welcome_10.png'
        text: "Wenn du mal nicht weiter kommst, klicke auf dieses Bild und es wird dir genau zeigen, wie du das Level abschließen kannst. Aber sieh dir bitte erst an, ob du es nicht vielleicht auch alleine schaffen kannst."
      11:
        image: 'notes/applab_intro_welcome_11.png'
        text: "Wenn du das Ziel für dieses Level erreicht hast, klicke auf Fertig stellen, um weiterzumachen. Das war's auch schon! Klicke auf die orangefarbene Schaltfläche \"Weiter\", um zum nächsten Level zu gelangen und dein Abenteuer mit einem App-Labor zu beginnen!"
    applab_intro_events:
      1:
        image: 'notes/applab_intro_events_1.png'
        text: "Apps sind wirklich cool, weil es so ist, als würde man sein eigenes Unternehmen gründen, d. h. man kann alles von Grund auf selbst entwerfen, man kann alles verwalten und ist der Eigentümer dieses Werks, das man gerade mit Code erstellt hat."
      2:
        image: 'notes/applab_intro_events_2.png'
        text: "Jetzt, wo du das Aussehen der App ändern kannst, machen wir sie interaktiv, indem wir auf Ereignisse reagieren! Ereignisse sind Benutzeraktionen wie das Klicken auf eine Schaltfläche, das Blättern durch ein Menü oder das Bewegen mit der Maus über ein Bild. Interaktive Apps erfordern Methoden, wie auf Ereignisse reagiert werden soll, wie z. B. die Wiedergabe eines Geräusches, wenn ich auf diese Schaltfläche klicke. Um dies in App Lab zu tun, musst du einen neuen Baustein namens 'onEvent' verwenden."
      3:
        image: 'notes/applab_intro_events_3.png'
        text: "Dieses Programm setzt den Bildschirm auf blau. Ich möchte, dass der Bildschirm grün wird, wenn ich auf diese Schaltfläche klicke. Zuerst muss ich einen onEvent-Block hineinziehen. Durch Schweben weiß ich, dass die ID der Schaltfläche \"bigButton\" ist, also wähle ich das im ersten Dropdown aus."
      4:
        image: 'notes/applab_intro_events_4.png'
        text: "Als Nächstes wähle ich die Art des Ereignisses. Es gibt viele Optionen, aus denen Sie auswählen können, aber im Moment belasse ich es bei einem normalen Klick."
      5:
        image: 'notes/applab_intro_events_5.png'
        text: "Zum Schluss füge ich einen Code in das on-Ereignis ein, der die Hintergrundfarbe des Bildschirms ändert. Sie können diesen Block wie einen Satz lesen: \"Wenn die Schaltfläche angeklickt wird, wird dieser Code ausgeführt.\""
      6:
        image: 'notes/applab_intro_events_6.png'
        text: "Lasst es uns ausprobieren. Bausteine außerhalb eines onEvent laufen immer noch sofort ab, so dass der Bildschirm blau beginnt."
      7:
        image: 'notes/applab_intro_events_7.png'
        text: "Und wenn ich auf die große Schaltfläche klicke, läuft der Code in meinem onEvent und mein Bildschirm wird grün."
      8:
        image: 'notes/applab_intro_events_8.png'
        text: "Wenn du nach dem Ereignis noch mehr ändern möchtest, wie z. B. den Text auf dem Bildschirm, füge einfach mehr Code zum onEvent Baustein hinzu."
      9:
        image: 'notes/applab_intro_events_9.png'
        text: "Um Ihr Programm auf mehr Ereignisse reagieren zu lassen, fügen Sie weitere onEvent-Blöcke hinzu. Achten Sie nur darauf, sie nicht ineinander zu setzen. Jetzt ist es an der Zeit, es selbst auszuprobieren. Viel Spaß dabei!"
    applab_intro_sounds:
      1:
        image: 'notes/applab_intro_sounds_1.png'
        text: "Als nächstes erfährst du, wie Bilder und Geräusche zur App hinzugefügt werden können. Beginnen wir mit dem Ausprobieren der Soundoptionen."
      2:
        image: 'notes/applab_intro_sounds_2.png'
        text: "In der Toolbox finden Sie einen neuen Block namens \"playSound\". Ziehen Sie ihn in den Arbeitsbereich. Sie können einen Sound zum Abspielen auswählen, indem Sie auf das Dropdown-Menü und dann auf \"Auswählen\" klicken."
      3:
        image: 'notes/applab_intro_sounds_3.png'
        text: "Von hier aus kannst du entweder eine Audiodatei von deinem Computer hochladen oder nach einem Sound aus der Soundbibliothek suchen. Die Soundbibliothek hat viele verschiedene Kategorien wie Instrumente, Hintergrundmusik oder Tiergeräusche."
      4:
        image: 'notes/applab_intro_sounds_4.png'
        text: "Sobald du den gewünschten Sound erhalten hast, klicke auf \"Auswählen\". Wenn dieser Block ausgeführt wird gibt er den von Dir gewählten Sound wieder."
      5:
        image: 'notes/applab_intro_sounds_5.png'
        text: "Um Bilder zu deinen Elementen hinzuzufügen, kannst du einfach den setProperty-Baustein verwenden. Wähle die Bildeigenschaft in der zweiten Dropdown-Liste aus"
      6:
        image: 'notes/applab_intro_sounds_6.png'
        text: "Wähle dann aus dem dritten Dropdown-Menü \"Auswählen\"."
      7:
        image: 'notes/applab_intro_sounds_7.png'
        text: "Von hier aus kannst du ein Bild von Deinem Computer hochladen oder eine riesige Bibliothek von Symbolen in der Symbolbibliothek durchsuchen."
      8:
        image: 'notes/applab_intro_sounds_8.png'
        text: "Zurück im Codemodus kannst du mit dem Block \"setProperty\" die Symbolfarbe des Symbols ändern. Sobald du ausgewählt hast, welches Bild dein Symbol verwenden sollst, klicke auf \"Ausführen\", um zu sehen, wie es aussieht."
      9:
        image: 'notes/applab_intro_sounds_9.png'
        text: "Das war's schon! Jetzt können Sie damit beginnen, Bilder und Sounds hinzuzufügen, um Ihre Apps noch unterhaltsamer und dynamischer zu gestalten."
    applab_intro_designmode:
      1:
        text: "Um eigene Apps zu erstellen, musst du mit dem Design von Bildschirmen und Elementen von Grund auf Grund auf beginnen. App Lab macht das mit dem Designmodus einfach."
      2:
        text: "Verwende den Schalter oben in deiner App, um in den Designmodus zu gelangen."
      3:
        text: "Du kannst neue Elemente hinzufügen, indem du siae auf den Bildschirm ziehst. Du kannst sie an verschiedene Positionen verschieben und ihre Größe ändern, indem du die untere rechte Ecke ziehst."
      4:
        text: "Um die Eigenschaften eines Elements zu ändern, verwende die Steuerelemente auf der rechten Seite. So ist es beispielsweise sehr einfach, Text, Farbe und Schriftgröße dieser Schaltfläche zu ändern."
      5:
        text: "Wenn du ein neues Element zu deinem Bildschirm hinzufügst, erhält es eine generische ID wie button1/Schaltfläche1. Es ist eine gute Idee, die ID dieser Schaltfläche in etwas Aussagekräftigeres wie \"rightButton\" umzubenennen. Dann weißt due, welche Schaltfläche es ist, wenn du das Programm aufmachst."
      6:
        text: "Wenn du versehentlich ein Element zur App hinzugefügt hast, ziehe es einfach heraus oder klicke auf Löschen."
      7:
        text: "Du kannst Deiner App völlig neue Bildschirme hinzufügen, indem du ein Bildschirmelement per Drag & Drop in die App ziehst"
      8:
        text: "Über das Dropdown-Menü oben kannst du schnell zwischen den von dir erstellten Bildschirmen hin und her wechseln."
      9:
        text: "Innerhalb der App brauchst du eine Möglichkeit, zwischen all diesen Bildschirmen zu wechseln, so dass der setScreen-Baustein der  Werkzeugkiste hinzugefügt wurde. Verwende \"setScreen\" innerhalb des Bausteins \"onEvent\", um die Bildschirme mit einem Klick auf die Schaltfläche zu wechseln."
      10:
        text: "In den nächsten Levels werden Sie an einem einzigen Projekt arbeiten. Zuerst fügen Sie eine Schaltfläche hinzu, dann einen neuen Bildschirm und schließlich schreiben Sie den Code, damit die Schaltfläche zum neuen Bildschirm wechselt."
    applab_intro_share:
      1:
        image: 'notes/applab_intro_share_1.png'
        text: "Nachdem du nun einige der Grundlagen von App Lab gelernt hast, wie z. B. das Hinzufügen von Schaltflächen, Sounds, Bildern, Text und neuen Bildschirmen, kannst du alle Arten von Apps erstellen."
      2:
        image: 'notes/applab_intro_share_2.png'
        text: "Im nächsten Level findest du die App, die du gerade fertiggestellt hast. Mit etwas Kreativität kannst du daraus ein Persönlichkeitsquiz für deine Freunde, eine Grußkarte, die du mit deiner Familie teilen kannst, oder ein \"Wähle-dein-eigenes-Abenteuer\"-Spiel machen. Alle diese Apps sind nur eine Kombination aus den Fähigkeiten, die du bereits gelernt hast, und ich wette, du kannst dir noch mehr einfallen lassen."
      3:
        image: 'notes/applab_intro_share_3.png'
        text: "Wenn du mit deiner App fertig bist, kannst du sie ganz einfach an dein Handy schicken, um zu sehen, wie sie aussieht. Klicken Sie einfach auf \"Teilen\" und geben Sie hier Ihre Telefonnummer ein."
      4:
        image: 'notes/applab_intro_share_4.png'
        text: "Sie erhalten eine Textnachricht, mit der Sie Ihre App sofort öffnen können."
      5:
        image: 'notes/applab_intro_share_5.png'
        text: "Sie können auch einen Link zu Ihrer App über soziale Medien weitergeben oder sie in der öffentlichen Galerie von code.org veröffentlichen, damit andere Leute sie spielen und weitergeben können."
      6:
        image: 'notes/applab_intro_share_6.png'
        text: "Sie haben nur an der Oberfläche dessen gekratzt, was App Lab leisten kann. Das vollständige App Lab bietet erweiterte Benutzerinteraktionen, neue Bildschirmelemente und sogar eine integrierte Datenbank, mit der Sie schnell vollwertige Anwendungen erstellen können. Unter \"code.org/applab\" finden Sie das vollständige Tool und jede Menge Ideen, wenn Sie weitermachen wollen."
      7:
        image: 'notes/applab_intro_share_7.png'
        text: "Vielen Dank, dass Sie uns auf unserem Weg begleitet haben. Erstellen Sie jetzt Ihre erste App, teilen Sie sie mit anderen und entwickeln Sie weiterhin Apps mit App Lab!"
    mc_2017_agent_intro:
      1:
        image: 'notes/mc_2017_agent_intro_1.png'
        text: "Stacy: Stampy, Lizzy, Preston - danke, dass ihr mit mir gekommen seid. Was ich euch zeigen möchte, befindet sich gleich hinter diesem Tafelberg-Plateau. Ich glaube, ihr werdet es lieben!"
      2:
        image: 'notes/mc_2017_agent_intro_2.png'
        text: "Moment mal - da ist ein Loch im Gleis! (schreit)"
      3:
        image: 'notes/mc_2017_agent_intro_3.png'
        text: "Geht es allen gut? Stampy: Ah, ich sehe das Problem. Seht doch! Da war ein Loch im Gleis. Wirklich, Stampy? Lizzy: Vielleicht sollten wir Blöcke sammeln, um es zu reparieren. Preston: Lasst uns ein Rennen veranstalten. Wer zuerst wieder oben ist, hat gewonnen. Stacy: Ok, auf die Plätze, fertig, los! Ok, ich sammle ein paar von diesen Terrakottasteinen. Wartet mal. Leute, ich kann nicht meinen! Preston: Ich auch nicht. Lizzy: Ich kann auch nicht. Stacy: Ok, das ist wirklich seltsam. Stampy, kannst du meins? Stampy: Ich kann nicht minen! Stacy: Okay, bleibt alle ruhig. Stampy: Ist das Spiel kaputt? Stacy: Wenn ja, wie können wir es reparieren? Lizzy: Ich weiß es nicht. Stampy: Weiß jemand, wie man Minecraft-Code schreibt?"
      4:
        image: 'notes/mc_2017_agent_intro_4.png'
        text: "(puff) Preston: Was ist das? Stampy: So etwas habe ich noch nie gesehen. Lizzy: Es ist so niedlich! Stacy: Ist es... ist es zähmbar? Preston: Okay, was ist hier los? Jemand muss zurück in die reale Welt gehen und das in Ordnung bringen. Alle: Nicht es! Nicht ich... Okay, ich werde gehen."
      5:
        image: 'notes/mc_2017_agent_intro_5.png'
        text: "Oh, okay, hey, ich bin jetzt also in der realen Welt. Ich werde versuchen, die Büros von Minecraft zu finden."
      6:
        image: 'notes/mc_2017_agent_intro_6.png'
        text: "Aber ich werde eure Hilfe brauchen. Fangt an, das Tutorial zu machen, fangt an zu lernen, wie man programmiert, und ich werde euch nach ein paar Leveln einholen, okay? Wünscht mir Glück! Ich glaube, es geht hier lang. Aua! Kaktus! Mir geht's gut!"
      7:
        image: 'notes/mc_2017_agent_intro_7.png'
        text: "Um die \"Hour of Code\"-Herausforderung abzuschließen, müssen Sie Code schreiben, um den Agenten zu programmieren. Du arbeitest mit dem Agenten zusammen, um alle Hindernisse aus dem Weg zu räumen, damit du die Gegenstände einsammeln kannst, die du für deine Reise brauchst. Nur der Agent kann Blöcke platzieren und zerbrechen, und nur du kannst Gegenstände einsammeln. Dein Bildschirm ist in drei Hauptbereiche unterteilt. Auf der linken Seite ist Minecraft."
      8:
        image: 'notes/mc_2017_agent_intro_8.png'
        text: "Der mittlere Bereich ist die Werkzeugkiste mit Befehlen, die der Agent verstehen kann."
      9:
        image: 'notes/mc_2017_agent_intro_9.png'
        text: "Und auf der rechten Seite befindet sich der Arbeitsbereich. Hier stapeln Sie die Befehle, um Ihr Programm zur Steuerung des Agenten zu erstellen."
      10:
        image: 'notes/mc_2017_agent_intro_10.png'
        text: "Der Agent kann gehen, sich drehen und Druckplatten aktivieren. Er kann auch Blöcke zerstören und Blöcke platzieren. Wenn er den Block wie diese Minenkart-Schienen platziert, platziert er ihn unter sich selbst."
      11:
        image: 'notes/mc_2017_agent_intro_11.png'
        text: "Hast du vergessen, was du in einem Level tun musst, findest du oben die nötigen Anweisungen."
      12:
        image: 'notes/mc_2017_agent_intro_12.png'
        text: "Wenn Sie es noch einmal versuchen möchten, können Sie auf die blaue Schaltfläche \"Zurücksetzen\" klicken, um alles auf den Ausgangszustand zurückzusetzen. Und wenn Sie einen Codeblock löschen müssen, ziehen Sie ihn von Ihrem Arbeitsbereich in die Toolbox. Vergessen Sie nicht, auf Ausführen zu klicken, um den Agenten in Gang zu setzen. Okay, probieren Sie die ersten paar Level aus. Viel Erfolg dabei!"
    mc_2017_repeat:
      1:
        image: 'notes/mc_2017_repeat_1.png'
        text: "Stampy: Ich frage mich, was Stacy gerade macht?"
      2:
        image: 'notes/mc_2017_repeat_2.png'
        text: "Stacy: Woah, ich denke, ich bin am richtigen Ort. Das ist unglaublich!"
      3:
        image: 'notes/mc_2017_repeat_3.png'
        text: "Ich fühle mich, als wäre ich wieder in Minecraft! Hallo. Wie geht es euch? Hallo?"
      4:
        image: 'notes/mc_2017_repeat_4.png'
        text: "Oh, da ist ein Schleicher. Du machst doch nichts, oder? Katie: Stacy? Stacy:Hi, Katie? Katie: Ja, willkommen bei Minecraft!"
      5:
        image: 'notes/mc_2017_repeat_5.png'
        text: "Stacy: Das ist erstaunlich. Du arbeitest hier also jeden Tag als Entwickler, richtig? Katie: Ja, das ist ziemlich großartig. Ich bin eine Entwicklerin im Minecraft-Marktplatz-Team. Stacy: Wie viele Programmiersprachen kennst du denn? Katie: In meiner Karriere habe ich wahrscheinlich mit über einem Dutzend gearbeitet. Stacy: Ein Dutzend? Katie: Ja. Stacy: Sie wissen also nicht zufällig etwas über diesen kleinen Golem, der sich Agent nennt? Katie: Wir benutzen den Agenten, um Dinge zu tun, die Steve oder Alex nicht können, zum Beispiel durch Lava gehen. Stacy: Nun, ich will lernen, wie man programmiert, und sie wollen lernen, wie man programmiert, also was ist eines der ersten Dinge, die man wissen muss, wenn man es lernt?"
      6:
        image: 'notes/mc_2017_repeat_6.png'
        text: "Katie: Nun, du musst lernen, wie man Schleifen benutzt. Schleifen sind Dinge, die Entwickler schreiben, um dem Computer Befehle zu geben, die immer und immer wieder ausgeführt werden können. Stacy: Verstehe. Ich glaube, in den nächsten Levels werden wir noch einiges davon lernen, also probieren Sie Schleifen aus."
      7:
        image: 'notes/mc_2017_repeat_7.png'
        text: "In der nächsten Ebene können Sie eine Schleife verwenden, um den Agenten entlang des Pfades zu bewegen. Ziehen Sie den Wiederholungsblock in den Arbeitsbereich und platzieren Sie den Vorwärtsbewegungsblock innerhalb des Wiederholungsblocks. Dadurch wird der Computer angewiesen, denselben Vorgang mehrmals hintereinander auszuführen, ohne dass eine ganze Reihe von Blöcken in den Arbeitsbereich gezogen werden muss. Sie können die Anzahl der Wiederholungen festlegen, indem Sie eine Zahl in den Wiederholungsblock eingeben."
      8:
        image: 'notes/mc_2017_repeat_8.png'
        text: "Sie können auch Drehungen und mehrere Befehle in den Wiederholungsblock einfügen, aber versuchen Sie erst einmal, den Agenten durch eine Wiederholung ein paar Schritte vorwärts zu bringen. Wenn Sie bei einem Rätsel nicht weiterkommen, können Sie jederzeit die blaue Reset-Taste drücken und es erneut versuchen."
      9:
        image: 'notes/mc_2017_repeat_9.png'
        text: "Wenn du darüber nachdenkst, einen coolen Job wie Katie zu haben, dann klicke auf die Schaltfläche \"Code anzeigen\", wenn du jedes Level beendet hast. Das wird euch den Javascript-Code zeigen, den jemand wie Katie benutzt, wenn sie Minecraft programmiert. Katie: Ja, viel Glück euch allen!"
    mc_2017_functions:
      1:
        image: 'notes/mc_2017_functions_1.png'
        text: "Preston: Ich will ja nicht angeben, aber ich bin ziemlich gut im Parkour. Lizzy: Lass uns schlafen, damit es Tag ist, wenn Stacy zurückkommt."
      2:
        image: 'notes/mc_2017_functions_2.png'
        text: "Stacy: Ok Leute, ich bin zurück von den Minecraft Büros, und ich denke, ich weiß, wie ich das Problem, das ich in meinem Spiel habe, lösen kann. Ich denke, ich kann eine Funktion verwenden. Lass mich das nur öffnen."
      3:
        image: 'notes/mc_2017_functions_3.png'
        text: "Eine Funktion ist also ein spezifischer Satz von Anweisungen, um eine bestimmte Aufgabe zu erfüllen, ähnlich wie ein Rezept. In den nächsten Levels werden Sie Zugang zu Funktionen haben, die Sie zur Lösung der Rätsel verwenden können."
      4:
        image: 'notes/mc_2017_functions_4.png'
        text: "Schauen Sie sich den Code in der Funktion an, wenn sie im Arbeitsbereich ist, um zu sehen, was sie tut."
      5:
        image: 'notes/mc_2017_functions_5.png'
        text: "Suchen Sie dann den Block mit diesem Namen in der Toolbox und ziehen Sie ihn aus der Toolbox auf den Block \"When Run\"."
      6:
        image: 'notes/mc_2017_functions_6.png'
        text: "Denken Sie daran, dass Sie dieselbe Funktion jedes Mal verwenden können, wenn Sie dieselbe Reihe von Anweisungen ausführen müssen, um etwas zu tun, wie z. B. eine Brücke zu bauen. Viel Glück, ich weiß, dass Sie es schaffen können!"
    mc_2017_congratulations:
      1:
        text: "Preston: Herzlichen Glückwunsch!"
      2:
        text: "Lizzy: Herzlichen Glückwunsch!"
      3:
        text: "Stampy: Glückwunsch, du hast es geschafft!"
      4:
        text: "Stacy: Herzlichen Glückwunsch, Leute, das habt ihr wirklich toll gemacht! Und jetzt, wo ihr die Hour of Code abgeschlossen habt, könnt ihr mit dem Programmieren in Minecraft beginnen. Ihr habt etwas über Schleifen, Funktionen und die Aufgaben eines Software-Agenten gelernt."
      5:
        text: "Jetzt ist es Zeit für die freie Spielstufe, in der du der Entwickler bist. Nutzen Sie die verbleibende Zeit, um Ihre eigenen Funktionen zum Erforschen, Abbauen und Bauen zu schreiben."
      6:
        text: "Du kannst den Code, den du in diesem Level schreibst, in deine Minecraft-Welt in Minecraft übernehmen: Education Edition übernehmen. Klicke einfach auf \"Fertigstellen\" und folge den Anweisungen, um den Link für deine Welt zu erhalten. um mit dem Agenten weiter zu programmieren. Viel Spaß, und gute Arbeit!"
      7:
        text: "Stacy: Und ich bin wieder da! Okay, Leute, das ist der Agent! Lasst mich euch zeigen, was er kann. Schaut, er macht es! Ich habe ihm gesagt, er soll eine Treppe aus diesen Terrakotta-Blöcken bauen, jetzt können wir sie benutzen, um hier rauszukommen. Und Leute, es sind nicht nur Treppen. Ich kann dem Agenten sagen, er soll alles tun, was ich will, und er wird es für mich tun."
      8:
        text: "Stampy: Wie hast du das gemacht? Stacy: Das war eigentlich ganz einfach. Ich habe einfach einen Code benutzt!"
    csd_concept_how_computers_work:
      1:
        image: 'notes/csd_concept_how_computers_work_1.png'
        text: "Überall, wo man hinschaut, verändern Computer die Welt. Ob auf unseren Schreibtischen, in unseren Wohnungen, in unseren Taschen oder einfach überall sonst. Aber obwohl die meisten von uns diese revolutionäre Technologie täglich nutzen, fragen wir uns nicht oft: \"Wie funktionieren Computer?\" In dieser Reihe erfahren Sie, wie Computer wirklich funktionieren, angefangen damit, was einen Computer zu einem Computer macht. Dann werden Sie sich ansehen, wie Informationen im Computer durch winzige elektrische Signale dargestellt werden, die mit atemberaubender Geschwindigkeit ein- und ausgeschaltet werden."
      2:
        image: 'notes/csd_concept_how_computers_work_2.png'
        text: "Danach lernen Sie, wie Computer Schaltkreise verwenden, um alles zu tun, von einfacher Mathematik bis zur Simulation ganzer virtueller Welten. Als Nächstes werden Sie herauszoomen und sich die verschiedenen Teile eines Computers ansehen, die all diese Informationen eingeben, ausgeben und speichern. Schließlich werden Sie sich ansehen, was Code eigentlich ist und wie Software die Hardware steuert. Ganz gleich, ob Sie einfach nur neugierig auf die Geräte sind, die Sie jeden Tag benutzen, oder ob Sie die Innovationen der Zukunft entwerfen wollen, der erste Schritt ist, zu lernen, wie Computer funktionieren."
    csd_concept_computer:
      1:
        image: 'notes/csd_concept_computer_1.png'
        text: "Mein Name ist May-Li Khoe und ich bin Designerin und Erfinderin. Einige der Dinge, die ich entworfen habe, waren bei Apple, und jetzt entwerfe ich Produkte für Kinder, damit sie es in der Schule leichter haben. Außerdem lege ich als DJ auf und tanze."
      2:
        image: 'notes/csd_concept_computer_2.png'
        text: "Computer sind überall! Sie sind in den Taschen der Leute, sie sind in den Autos der Leute, die Leute haben sie an ihren Handgelenken. Vielleicht befinden sie sich gerade in Ihrem Rucksack. Aber was macht einen Computer zu einem Computer? Was macht einen Computer überhaupt zu einem Computer? Und wie funktioniert er überhaupt?"
      3:
        image: 'notes/csd_concept_computer_3.png'
        text: "Hallo, ich bin Nat! Ich war einer der ersten Designer der Xbox. Ich arbeite mit Computern, seit ich etwa sieben Jahre alt bin, und jetzt arbeite ich an virtueller Realität. Wir Menschen haben schon immer Werkzeuge gebaut, die uns helfen, Probleme zu lösen. Werkzeuge wie eine Schubkarre, einen Hammer, eine Druckerpresse oder einen Sattelschlepper."
      4:
        image: 'notes/csd_concept_computer_4.png'
        text: "All diese Erfindungen halfen uns bei der manuellen Arbeit. Mit der Zeit begannen sich die Menschen zu fragen, ob man nicht eine Maschine entwerfen und bauen könnte, die uns bei der Denkarbeit hilft, wie dem Lösen von Gleichungen oder dem Verfolgen der Sterne am Himmel. Anstatt physische Dinge wie Erde und Steine zu bewegen oder zu manipulieren, müssten diese Maschinen so konstruiert sein, dass sie Informationen manipulieren können. Als die Pioniere der Informatik untersuchten, wie man eine denkende Maschine konstruieren könnte, wurde ihnen klar, dass sie vier verschiedene Aufgaben erfüllen musste."
      5:
        image: 'notes/csd_concept_computer_5.png'
        text: "Er muss Eingaben entgegennehmen, Informationen speichern, sie verarbeiten und dann die Ergebnisse ausgeben. Das mag einfach klingen, aber diese vier Dinge sind allen Computern gemeinsam. Das ist es, was einen Computer zu einem Computer macht."
      6:
        image: 'notes/csd_concept_computer_6.png'
        text: "Computer begannen als einfache Taschenrechner, was damals schon wirklich genial war, und sie haben damals nur Zahlen manipuliert. Aber jetzt können wir mit ihnen miteinander reden, wir können mit ihnen Spiele spielen, Roboter steuern und alle möglichen verrückten Dinge tun, die man sich vorstellen kann. Moderne Computer sehen nicht mehr so aus wie die klobigen alten Maschinen, aber sie tun immer noch die gleichen vier Dinge."
      7:
        image: 'notes/csd_concept_computer_7.png'
        text: "Zunächst werden wir über die Eingabe sprechen. Man kann Computern mit der Tastatur sagen, was sie tun sollen, man kann ihnen sagen, was sie mit der Maus, dem Mikrofon oder der Kamera tun sollen. All diese verschiedenen Eingaben liefern dem Computer Informationen, die dann im Speicher abgelegt werden."
      8:
        image: 'notes/csd_concept_computer_8.png'
        text: "Der Prozessor eines Computers nimmt Informationen aus dem Speicher auf. Er manipuliert oder verändert sie mit Hilfe eines Algorithmus, der nur eine Reihe von Befehlen ist. Dann sendet er die verarbeiteten Informationen zurück, um sie erneut im Speicher abzulegen. So geht es weiter, bis die verarbeiteten Informationen zur Ausgabe bereit sind."
      9:
        image: 'notes/csd_concept_computer_9.png'
        text: "Wie ein Computer Informationen ausgibt, hängt davon ab, wofür der Computer konzipiert ist. Ein Computerbildschirm kann Text, Fotos, Videos oder interaktive Spiele anzeigen - sogar virtuelle Realität! Die Ausgabe eines Computers kann sogar Signale zur Steuerung eines Roboters enthalten."
      10:
        image: 'notes/csd_concept_computer_10.png'
        text: "Und wer weiß schon, wie die Computer von morgen aussehen werden? Ich hoffe, Sie können mitentscheiden, wie die Computer von morgen aussehen sollen. Aber bei allen Computern, ungeachtet der verschiedenen Arten von Technologie, die sie verwenden, tun sie immer die gleichen vier Dinge. Sie nehmen Informationen auf, speichern sie als Daten, verarbeiten sie und geben dann die Ergebnisse aus."
    csd_concept_binary_data:
      1:
        text: "Hallo! Mein Name ist Limor Fried, und ich bin Ingenieurin hier bei Adafruit Industries. Hier mache ich Technik und Design und entwerfe Schaltungen für Mode, Musik und Technologie."
      2:
        text: "Mein Name ist Federico Gomez Suarez, und ich bin Softwareentwickler bei Microsoft Hack for Good. Und ich beschäftige mich damit, wie wir mit Hilfe von Technologie einige der großen sozialen Probleme unserer Zeit lösen können."
      3:
        text: "Sie haben vielleicht schon gehört, dass Computer mit Einsen und Nullen arbeiten. Aber fast niemand hat heute noch direkt mit diesen Einsen und Nullen zu tun. Aber Einsen und Nullen spielen eine große Rolle dabei, wie Computer im Inneren funktionieren."
      4:
        text: "Im Inneren eines Computers befinden sich elektrische Drähte und Schaltkreise, die alle Informationen in einem Computer übertragen. Wie kann man Informationen mit Hilfe von Elektrizität speichern oder darstellen?"
      5:
        text: "Nun, wenn man ein einzelnes Kabel hat, durch das Strom fließt, kann das Signal entweder an oder aus sein. Das sind nicht viele Möglichkeiten, aber es ist ein wirklich wichtiger Anfang. Mit einem einzigen Draht können wir ein Ja oder Nein, wahr oder falsch, eine Eins oder Null oder irgendetwas anderes mit nur zwei Optionen darstellen. Dieser Ein/Aus-Zustand eines einzelnen Drahtes wird als Bit bezeichnet und ist die kleinste Information, die ein Computer speichern kann."
      6:
        text: "Wenn Sie mehr Drähte verwenden, erhalten Sie mehr Bits: mehr Einsen und Nullen. Mit mehr Bits kann man komplexere Informationen darstellen. Aber um das zu verstehen, müssen wir etwas über das so genannte binäre Zahlensystem lernen."
      7:
        text: "Im dezimalen Zahlensystem gibt es zehn Ziffern von null bis neun, und so haben wir alle gelernt zu zählen. Im binären Zahlensystem haben wir nur zwei Ziffern: Null und Eins. Mit diesen beiden Ziffern können wir bis zu einer beliebigen Zahl zählen."
      8:
        text: "Das funktioniert folgendermaßen. In einem Dezimalsystem, an das wir alle gewöhnt sind, hat jede Stelle in einer Zahl einen anderen Wert. Es gibt eine 1er-Stelle, die 10er-Stelle, die 100er-Stelle und so weiter. Eine 9 an der 100er-Stelle ist zum Beispiel eine 900. Im Binärsystem hat jede Stelle ebenfalls einen Wert. Aber anstatt jedes Mal mit 10 zu multiplizieren, wird mit 2 multipliziert. Es gibt also die 1er-Stelle, die 2er-Stelle, die 4er-Stelle, die 8er-Stelle und so weiter. Ein Beispiel: Die Zahl 9 im Binärformat ist 1001. Um den Wert zu berechnen, addieren wir 1 mal 8, plus 0 mal 4, plus 0 mal 2, plus 1 mal 1. Fast niemand macht diese Rechnungen, weil Computer sie für uns erledigen. Wichtig ist, dass jede Zahl nur durch Einsen und Nullen oder durch eine Reihe von Drähten dargestellt werden kann, die an oder aus sind. Je mehr Drähte Sie verwenden, desto größere Zahlen können Sie speichern. Mit 8 Drähten können Sie Zahlen zwischen 0 und 255 speichern. Das sind 8 Einsen. Mit nur 32 Drähten können Sie den gesamten Bereich von 0 bis über 4 Milliarden speichern. Mit dem binären Zahlensystem können Sie jede beliebige Zahl darstellen."
      9:
        text: "Aber was ist mit anderen Arten von Informationen? Wie Text, Bilder oder Ton? Es hat sich herausgestellt, dass all diese Dinge auch mit Zahlen dargestellt werden können. Denken Sie an alle Buchstaben des Alphabets. Sie könnten jedem Buchstaben eine Zahl zuordnen. A könnte 1 sein, B könnte 2 sein, und so weiter. Sie können dann jedes Wort oder jeden Absatz als eine Folge von Zahlen darstellen. Und wie wir gesehen haben, können diese Zahlen als elektrische Signale gespeichert werden, die ein- oder ausgeschaltet sind. Jedes Wort, das Sie auf jeder Webseite oder auf Ihrem Telefon sehen, wird durch ein solches System dargestellt."
      10:
        text: "Betrachten wir nun Fotos, Videos und alle Grafiken, die ihr auf einem Bildschirm seht."
      11:
        text: "Alle diese Bilder bestehen aus winzigen Punkten, die Pixel genannt werden, und jedes Pixel hat eine Farbe. Jede der Farben kann mit Zahlen dargestellt werden. Wenn man bedenkt, dass das typische Bild Millionen dieser Pixel hat und das typische Video 30 Bilder pro Sekunde zeigt, dann sprechen wir hier über eine Menge Daten."
      12:
        text: "Jeder Ton ist im Grunde eine Reihe von Schwingungen in der Luft. Schwingungen können grafisch als Wellenform dargestellt werden. Jeder Punkt auf dieser Wellenform kann durch eine Zahl dargestellt werden. Auf diese Weise lässt sich jeder Klang in eine Reihe von Zahlen aufschlüsseln. Wenn Sie eine höhere Klangqualität wünschen, wählen Sie 32-Bit-Audio oder 8-Bit-Audio. Mehr Bits bedeuten einen größeren Zahlenbereich."
      13:
        text: "Wenn du einen Computer benutzt, um Code zu schreiben oder deine eigene App zu erstellen, hast du es nicht direkt mit diesen Einsen und Nullen zu tun. Aber du wirst es mit Bildern, Ton oder Video zu tun haben. Wenn du also verstehen willst, wie Computer im Inneren funktionieren, kommt alles von diesen einfachen Einsen und Nullen und den elektrischen Signalen in den Schaltkreisen dahinter."
    csd_concept_circuits_logic:
      1:
        text: "Eines der coolsten Dinge, die ich über Schaltkreise entdeckt habe, ist, dass Schaltkreise eine Kunstform sein können, wie wenn ich eine kreative Idee habe, ich kann diese kreative Idee mit Schaltkreisen herausbringen. Wenn du also Ideen hast, kannst du die Technologie nutzen, um diese Ideen zum Leben zu erwecken."
      2:
        text: "Jeder Ein- oder Ausgang eines Computers ist im Grunde genommen eine Art von Information, die durch ein- oder ausgeschaltete elektrische Signale oder Einsen und Nullen dargestellt werden kann."
      3:
        text: "Um die Informationen, die als Input eingehen, zu verarbeiten und die Informationen, die ausgegeben werden, zu erzeugen, muss ein Computer die Eingangssignale ändern und kombinieren. Dazu verwendet ein Computer Millionen von winzigen elektronischen Komponenten, die sich zu Schaltungen zusammenfügen."
      4:
        text: "Lasst uns einen genaueren Blick darauf werfen, wie Schaltkreise Informationen, die in Einsen und Nullen dargestellt werden, ändern und verarbeiten können. Dies ist eine unglaublich einfache Schaltung. Es nimmt ein elektrisches Signal, ein- oder ausgeschaltet, und dreht es um. Wenn also das Signal, das du eingibst, eine 1 ist, gibt die Schaltung dir eine 0, und wenn du der Schaltung eine 0 gibst, gibt sie dir eine 1. Das Signal, das hineingeht, ist nicht das gleiche wie das Signal, das herauskommt, und so nennen wir diese Schaltung NICHT."
      5:
        text: "Komplexere Schaltungen können mehrere Signale aufnehmen und kombinieren und Ihnen ein anderes Ergebnis liefern. In diesem Beispiel nimmt eine Schaltung zwei elektrische Signale auf, jetzt könnte jedes eine 1 oder eine 0 sein. Wenn eines der eingehenden Signale eine 0 ist, dann ist das Ergebnis auch eine 0. Diese Schaltung gibt dir nur dann eine 1, wenn das erste Signal und das zweite Signal beide eine 1 sind, und so nennen wir die Schaltung UND."
      6:
        text: "Es gibt viele kleine Schaltungen wie diese, die einfache logische Berechnungen durchführen. Wenn wir diese Schaltungen miteinander verbinden, können wir komplexere Schaltungen erstellen, die komplexere Berechnungen durchführen."
      7:
        text: "Zum Beispiel kannst du eine Schaltung erstellen, die 2 Bits zusammen addiert, die als Addierer bezeichnet wird. Diese Schaltung nimmt 2 einzelne Bits, jedes eine 1 oder eine 0, auf und addiert sie zur Berechnung der Summe. Die Summe kann 0 plus 0 gleich 0 sein, 0 plus 1 gleich 1, oder 1 plus 1 gleich 2. Du brauchst zwei Drähte als Ausgabe, weil es bis zu zwei Binärziffern braucht um die Summe darzustellen. Sobald du einen einzelnen Addierer hast, um zwei Bits Informationen hinzuzufügen, kannst du Vielfache dieser Addierer-Schaltungen nebeneinander zusammensetzen, um viel größere Zahlen zusammenzufügen."
      8:
        text: "So addiert zum Beispiel ein 8-Bit-Addierer die Zahlen 25 und 50. Jede Zahl wird mit 8 Bits dargestellt, was zu 16 verschiedenen elektrischen Signalen führt, die in die Schaltung eingehen. Die Schaltung für einen 8-Bit-Addierer besteht aus vielen kleinen Addierern, die zusammen die Summe bilden."
      9:
        text: "Verschiedene Stromkreise können andere einfache Berechnungen wie Subtraktion oder Multiplikation durchführen. Tatsächlich ist die gesamte Informationsverarbeitung, die dein Computer durchführt, nur eine Menge und viele kleine einfache Operationen zusammengesetzt. Jede einzelne Operation, die von einem Computer durchgeführt wird, ist so einfach, dass sie von einem Menschen durchgeführt werden könnte, aber diese Schaltungen in Computern sind viel schneller."
      10:
        text: "Früher waren diese Schaltkreise groß und klobig, und ein 8-Bit-Addierer konnte so groß wie ein Kühlschrank sein, und es dauerte Minuten, bis er eine einfache Berechnung durchführen konnte. Heute sind die Computerschaltungen mikroskopisch klein und viel schneller. Warum sind kleinere Computer auch schneller? Nun, je kleiner der Schaltkreis ist, desto geringer ist die Entfernung, die das elektrische Signal zurücklegen muss. Elektrizität bewegt sich fast mit Lichtgeschwindigkeit, weshalb moderne Schaltkreise Milliarden von Berechnungen pro Sekunde durchführen können."
      11:
        text: "Egal, ob du ein Spiel spielst, ein Video aufnimmst oder den Kosmos erkundest, alles, was du mit Technologie machen kannst, erfordert eine extrem schnelle Verarbeitung vieler Informationen. Unter all dieser Komplexität befinden sich nur viele winzige kleine Schaltkreise, die binäre Signale in Websites, Videos, Musik und Spiele verwandeln. Diese Schaltkreise können uns sogar helfen, die DNA zu entschlüsseln, um Krankheiten zu diagnostizieren und zu heilen. Also, was möchtest du mit all diesen Schaltungen machen?"
    csd_concept_memory_cpu_input_output:
      1:
        text: "Hallo, mein Name ist Madison Maxey. Ich habe eine Firma namens Loomia, und wir konzentrieren uns auf die Herstellung von Smart Fabrics für Smart Clothing und Smart Soft Good Products. Bei Textilien sind der Fantasie keine Grenzen gesetzt."
      2:
        text: "Mein Name ist Danielle Applestone, und ich bin CEO der Othermachine Company. Wir bauen eine Tischfräse. Eine Fräsmaschine nimmt ein rotierendes Schneidwerkzeug und bewegt es durch das Material, um ein 3D-Objekt zu erzeugen."
      3:
        text: "Unter der Haube tun alle Computer die gleichen vier grundlegenden Dinge. Sie geben Informationen ein, speichern und verarbeiten die Informationen und geben dann Informationen aus. Jedes dieser Dinge wird von einem anderen Teil des Computers erledigt."
      4:
        text: "Es gibt Eingabegeräte, die Eingaben aus der Außenwelt übernehmen und in binäre Informationen umwandeln. Es gibt Speicher, um diese Informationen zu speichern. Es gibt eine zentrale Verarbeitungseinheit oder CPU, in der alle Berechnungen durchgeführt werden. Und schließlich gibt es Ausgabegeräte, die Informationen aufnehmen und in eine physische Ausgabe umwandeln."
      5:
        text: "Lasst uns zuerst über den Input sprechen. Computer können viele verschiedene Arten von Eingaben vornehmen, wie die Tastatur eines Computers, das Touchpad eines Telefons, eine Kamera, ein Mikrofon oder ein GPS. Aber auch die Sensoren an einem Auto, einem Thermostat oder einer Drohne sind unterschiedliche Eingabegeräte."
      6:
        text: "Schauen wir uns nun ein einfaches Beispiel dafür an, wie eine Eingabe durch einen Computer läuft und zur Ausgabe wird. Wenn Sie eine Taste auf Ihrer Tastatur drücken - sagen wir mal den Buchstaben \"B\". Die Tastatur wandelt den Buchstaben in eine Zahl um. Diese Zahl wird als Binärwert, also mit Einsen und Nullen, an den Computer gesendet."
      7:
        text: "Ausgehend von dieser Zahl berechnet die CPU, wie der Buchstabe \"B\" Pixel für Pixel dargestellt werden soll. Die CPU fordert schrittweise Anweisungen aus dem Speicher an, die ihr sagen, wie der Buchstabe \"B\" zu zeichnen ist. Die CPU führt diese Anweisungen aus und speichert die Ergebnisse als Pixel im Speicher."
      8:
        text: "Schließlich werden diese Pixelinformationen in binärer Form an den Bildschirm gesendet. Der Bildschirm ist ein Ausgabegerät, das die binären Signale in die winzigen Lichter und Farben umwandelt, die das, was Sie sehen, ausmachen."
      9:
        text: "Das alles geschieht so schnell, dass es sich wie ein Augenblick anfühlt, aber um jeden Buchstaben darzustellen, führt ein Computer Tausende von Anweisungen aus, und zwar ab dem Moment, in dem Ihr Finger auf den Tastenpunkt drückt."
      10:
        text: "In diesem Beispiel war das Ausgabegerät der Bildschirm, aber es gibt viele verschiedene Arten von Ausgaben, die ein binäres Signal vom Computer aufnehmen und etwas in der physischen Welt tun. Ein Lautsprecher gibt zum Beispiel Töne wieder, und ein 3D-Drucker druckt ein Objekt. Ausgabegeräte können auch physische Bewegungen steuern, z. B. einen Roboterarm, den Motor eines Autos oder das Schneidewerkzeug der Fräsmaschine, die meine Firma herstellt. Neue Arten von Ein- und Ausgängen ermöglichen es Computern, auf völlig neue Weise mit der Welt zu interagieren. Dies wurde durch Verbesserungen bei der Geschwindigkeit und Größe des Speichers und der CPU begünstigt."
      11:
        text: "Je komplizierter eine Aufgabe ist und je mehr Informationen eingegeben oder ausgegeben werden, desto mehr Rechenleistung und Speicherplatz benötigt ein Computer. Das Tippen von Buchstaben auf einem Bildschirm mag einfach sein, aber um komplizierte 3D-Grafiken zu erstellen oder einen hochauflösenden Film aufzuzeichnen, haben moderne Computer oft mehrere CPUs, um all diese Informationen zu verarbeiten, und viele Gigabyte Speicher, um sie zu speichern."
      12:
        text: "Unabhängig davon, was Sie mit dem Computer machen wollen, geht es bei jeder einzelnen Aktion darum, Informationen aus der physischen Welt einzugeben, diese Informationen zu speichern und zu verarbeiten und eine Ausgabe in die physische Welt zurückzubringen."
    csd_concept_hardware_software:
      1:
        text: "Hallo, mein Name ist Erica Gomez und ich bin Engineering Manager bei Amazon.com. Eines der besten Dinge an der Arbeit in der Technologiebranche und insbesondere bei Amazon ist, dass ich meinen Hund jeden Tag mit zur Arbeit nehmen kann. Meine Aufgabe ist es, dafür zu sorgen, dass die Software vor die Tür kommt, und ihre Aufgabe ist es, unter meinem Schreibtisch ein Nickerchen zu machen und sehr laut zu schnarchen."
      2:
        text: "Mein Name ist Jerome Holman, ich bin Programm-Manager im Team Xbox und habe eine wirklich tolle Aufgabe: Ich bringe die Hardware und die Software zusammen, damit ihr alle Spiele, die ihr liebt, auf eurer Xbox spielen könnt."
      3:
        text: "Wenn Sie einen Blick in ein Computergerät werfen, sehen Sie einen Haufen Schaltkreise, Chips, Drähte, Lautsprecher, Stecker und alles Mögliche andere. Das ist die Hardware."
      4:
        text: "Was Sie aber nicht sehen, ist die Software. Software ist die Gesamtheit der Computerprogramme oder des Codes, die auf dieser Maschine laufen. Software kann alles sein, von Apps und Spielen bis hin zu Webseiten und der Data-Science-Software, die ich und meine Teams bei Amazon verwenden, um zu verstehen, wie sich Kunden verhalten."
      5:
        text: "Aber wie interagieren die Hardware und die Software miteinander? Beginnen wir mit der zentralen Recheneinheit (CPU) eines Computers."
      6:
        text: "Die CPU ist der Hauptchip, der alle anderen Teile des Computers steuert. Eine CPU muss verschiedene Dinge tun, daher hat sie im Inneren kleinere, einfachere Teile, die bestimmte Aufgaben übernehmen. Sie hat Schaltkreise für einfache mathematische und logische Aufgaben. Sie verfügt über weitere Schaltkreise zum Senden und Empfangen von Informationen an und von verschiedenen Teilen des Computers."
      7:
        text: "Die eigentliche Magie der CPU besteht darin, dass sie weiß, welche Schaltkreise wann zu verwenden sind. Die CPU empfängt einfache Befehle, die ihr mitteilen, welcher Schaltkreis für eine bestimmte Aufgabe zu verwenden ist. Ein \"Additions\"-Befehl weist die CPU beispielsweise an, ihren äußeren Schaltkreis zu verwenden, um eine neue Zahl zu berechnen. Und der Befehl \"store\" weist die CPU an, einen anderen Schaltkreis zu verwenden, um das Ergebnis im Speicher zu speichern."
      8:
        text: "Genau wie Zahlen können alle diese einfachen Befehle in binären Einsen und Nullen oder elektrischen Ein- und Aus-Signalen dargestellt werden. Die binären Befehle werden im Speicher abgelegt, und die CPU holt sie nacheinander ab und führt sie aus. Diese Befehlsfolge ist im Grunde ein sehr einfaches Computerprogramm."
      9:
        text: "Binärcode ist die grundlegendste Form von Software und steuert die gesamte Hardware eines Computers. Heutzutage schreibt niemand mehr Software im Binärformat. Das würde ewig dauern!"
      10:
        image: 'notes/csd_concept_hardware_software_10.png'
        text: "Heutzutage sieht die Software, die wir schreiben, eher so aus (Python), oder so (Ruby), oder sogar so (Blockly). Mit Programmiersprachen wie diesen können Sie Befehle in etwas eingeben, das dem Englischen sehr ähnlich ist."
      11:
        image: 'notes/csd_concept_hardware_software_11.png'
        text: "Um ein Rechteck auf dem Bildschirm zu zeichnen, brauchen Sie nur einen einzigen Befehl. Dieser High-Level-Befehl wird in Hunderte oder Tausende von einfacheren Binärbefehlen umgewandelt, die die CPU versteht. Die Software teilt der CPU mit, was zu tun ist. Wenn Sie jedoch Musik hören, im Internet surfen und mit einem Freund chatten, führt Ihr Computer mehrere Softwareprogramme gleichzeitig aus."
      12:
        image: 'notes/csd_concept_hardware_software_12.png'
        text: "Wie kommen also all diese Programme überhaupt auf den Computer, und wie kann die CPU sie alle gleichzeitig ausführen? Um das herauszufinden, müssen wir einen Blick auf das Betriebssystem werfen."
      13:
        image: 'notes/csd_concept_hardware_software_13.png'
        text: "Das Betriebssystem des Computers ist das Hauptprogramm, das steuert, wie die Software die Hardware des Computers nutzen kann. Ich habe zum Beispiel an der Entwicklung des Windows-Betriebssystems mitgewirkt, das auf den meisten Computern läuft."
      14:
        image: 'notes/csd_concept_hardware_software_14.png'
        text: "Das Betriebssystem ist ein Programm mit besonderen Fähigkeiten, die es ihm ermöglichen, die andere Software auf dem Computer zu steuern. Mit ihm können Sie neue Programme installieren, indem Sie sie in den Speicher Ihres Computers laden. Es entscheidet, wann ein Programm von der Zentraleinheit ausgeführt wird und ob dieses Programm auf die Eingabe- und Ausgabegeräte des Computers zugreifen kann. Und wenn Sie denken, dass Ihr Computer viele Programme gleichzeitig ausführt, ist es in Wirklichkeit das Betriebssystem, das schnell zwischen den Programmen umschaltet, die sich die CPU für Bruchteile von Sekunden teilen."
      15:
        image: 'notes/csd_concept_hardware_software_15.png'
        text: "In jedem Computer befindet sich ein Betriebssystem, das Software verwaltet, die die Hardware des Computers steuert."
      16:
        image: 'notes/csd_concept_hardware_software_16.png'
        text: "Die Software besteht aus einer Reihe von Befehlen in einfachem Binärcode, und dieser Binärcode ist nichts anderes als elektrische Signale, die durch Milliarden von winzigen Schaltkreisen fließen."
      17:
        image: 'notes/csd_concept_hardware_software_17.png'
        text: "Computer haben das Potenzial, alle möglichen erstaunlichen Dinge zu tun. Aber das Einzige, was den Computer intelligent oder nützlich macht, bist du. Wenn du lernst zu programmieren, kannst du das Problem definieren, das du lösen willst, und die Software schreiben, die diese Ideen in die Realität umsetzt."
    hoc_dance_warmup:
      1:
        image: 'notes/hoc_dance_warmup_1.png'
        text: "Hour of Code | Tanzparty: Aufwärmübung"
      2:
        image: 'notes/hoc_dance_warmup_2.png'
        text: "Hallo, mein Name ist Miral Kotb und ich bin Tänzer, Softwareentwickler und Entwickler von iLuminate."
      3:
        image: 'notes/hoc_dance_warmup_3.png'
        text: "Die Informatik bezieht sich also auf Kreativität in vielfältiger Weise. Unermesslich, wirklich. Ich meine, sobald man die Fähigkeit hat, Software zu schreiben, kann man Ideen in alles umsetzen. Ich mache es mit leichten Anzügen. Es gibt so viel, was man tun kann, wenn man die Werkzeuge hat, um Software zu schreiben, und die Möglichkeiten sind wirklich endlos."
      4:
        image: 'notes/hoc_dance_warmup_4.png'
        text: "In der nächsten Stunde wirst du mit der Informatik beginnen, indem du deine eigene Tanzparty programmierst! Wir haben einige Hits und ein Team von großartigen Tänzern zusammengestellt, mit denen du spielen kannst."
      5:
        image: 'notes/hoc_dance_warmup_5.png'
        text: "Du wirst Codeblöcke verwenden, um verschiedene Tänzer auszuwählen, ihre Tanzbewegungen zu ändern, sie auf die Musik reagieren zu lassen und sie interaktiv zu machen."
      6:
        image: 'notes/hoc_dance_warmup_6.png'
        text: "Sie werden sehen, dass Ihr Bildschirm in drei Hauptbereiche unterteilt ist. Auf der linken Seite befindet sich die Spielfläche. Hier werden Ihre Tänzerinnen und Tänzer zu sehen sein."
      7:
        image: 'notes/hoc_dance_warmup_7.png'
        text: "Dieser mittlere Bereich ist die Werkzeugkiste. Neue Codeblöcke werden in diesem Bereich verfügbar sein, während du durch die Lektionen gehst."
      8:
        image: 'notes/hoc_dance_warmup_8.png'
        text: "Der Raum auf der rechten Seite ist der Arbeitsbereich. Du kannst Bausteine aus der Werkzeugkiste in den Arbeitsbereich ziehen, um dein Programm zu erstellen."
      9:
        image: 'notes/hoc_dance_warmup_9.png'
        text: "Die Anweisungen für jedes Level werden hier oben auf dem Bildschirm angezeigt. Wenn du einen Tipp brauchst, klicke einfach auf die Glühbirne."
      10:
        image: 'notes/hoc_dance_warmup_10.png'
        text: "Beginnen wir mit der Erstellung eines neuen Tänzers mit diesem roten Block. Ziehen Sie ihn zunächst aus dem Werkzeugkasten und fangen Sie ihn unter diesem orangefarbenen \"Setup\"-Block ein. Dieser Tänzer ist eine Katze und sein Name ist \"my_first_dancer\". Sie können den Namen nach Belieben ändern, indem Sie hier klicken."
      11:
        image: 'notes/hoc_dance_warmup_11.png'
        text: "Damit kannst du auch ändern, wo die Tänzerin in deinem Spielraum erscheint."
      12:
        image: 'notes/hoc_dance_warmup_12.png'
        text: "Über dem Spielbereich befindet sich ein Menü, aus dem man Musik auswählen kann. Es gibt eine Vielzahl von Liedern zur Auswahl, also viel Spaß beim Suchen deiner Favoriten. Unter der Abspielfläche befindet sich die Schaltfläche \"Ausführen\". Wenn du auf \"Ausführen\" drückst, werden die Tänzer aus deinem Programm in der Abspielfläche angezeigt und die Musik wird abgespielt."
      13:
        image: 'notes/hoc_dance_warmup_13.png'
        text: "Probiere es selbst aus! Und wenn du dich festgefahren fühlst, ist es okay! Steh einfach auf und bewege dich, und bevor du dich versiehst, hast du deine eigene Tanzparty gemacht. Also, was wirst du bauen?"
    hoc_dance_events:
      1:
        image: 'notes/hoc_dance_events_1.png'
        text: "Hour of Code | Tanzparty: Ereignisse (Events)"
      2:
        image: 'notes/hoc_dance_events_2.png'
        text: "Ich bin Aloe Blacc. Ich bin Sänger, Songwriter und Entertainer. Ich denke, dass es wirklich wichtig ist, Informatik zu lernen, weil Informatik die Zukunft ist, und ich denke, dass es wichtig ist, dass die Menschen die Kontrolle über die Technologie haben, die buchstäblich ihr Leben kontrolliert."
      3:
        image: 'notes/hoc_dance_events_3.png'
        text: "Um verschiedene Tanzbewegungen zur richtigen Zeit mit der Musik durchzuführen, kannst du so genannte Ereignisse verwenden. Ein Ereignis sagt deinem Programm, dass es darauf achten soll, dass etwas passiert und dann sofort reagiert."
      4:
        image: 'notes/hoc_dance_events_4.png'
        text: "Einige Beispiele für Ereignisse sind das Abhören eines Mausklicks, einer Pfeiltaste oder eines Tippens auf dem Bildschirm. Das Ereignis, das wir jetzt verwenden werden, wird auf eine Änderung im Lied hören. Die Änderung veranlasst den Tänzer, einen neuen Tanz auszuführen."
      5:
        image: 'notes/hoc_dance_events_5.png'
        text: "Professionelle Tänzerinnen und Tänzer üben ihre Choreografien, indem sie die Schläge des Liedes mitzählen."
      6:
        image: 'notes/hoc_dance_events_6.png'
        text: "In der Musik bezieht sich ein Takt auf eine bestimmte Anzahl von Beats. In den meisten populären Liedern ist ein Takt vier Beats lang."
      7:
        image: 'notes/hoc_dance_events_7.png'
        text: "Damit deine Tänzer loslegen können, brauchst du einen grünen Ereignisblock. Dieser Ereignisblock sagt: \"nach 4 Takten\"."
      8:
        image: 'notes/hoc_dance_events_8.png'
        text: "Wenn du einen violetten \"do forever\"-Block herausziehst, kannst du einen Tanz auswählen, den dein Tänzer tanzen soll. Da er unter dem Ereignisblock \"nach 4 Takten\" steht, wartet Ihr Tänzer vier Takte des Liedes ab, bevor er seinen Tanz beginnt."
      9:
        image: 'notes/hoc_dance_events_9.png'
        text: "Achte auf den Taktgeber oben im Anzeigebereich."
      10:
        image: 'notes/hoc_dance_events_10.png'
        text: "Achte und höre auf das Ereignis, das den Tanzcode auslöst. Und genau zur richtigen Zeit beginnt unsere Tänzerin zu tanzen."
    hoc_dance_properties:
      1:
        image: 'notes/hoc_dance_properties_1.png'
        text: "Hour of Code | Tanzparty: Eigenschaften"
      2:
        image: 'notes/hoc_dance_properties_2.png'
        text: "Mein Name ist Maria, ich studiere im ersten Jahr an der University of Washington und ich bin Amazon Future Engineer."
      3:
        image: 'notes/hoc_dance_properties_3.png'
        text: "Ich liebe die Informatik, weil sie Problemlösung und kritisches Denken beinhaltet und nachdem man Stunden der Arbeit in etwas investiert hat, kann man etwas wirklich Cooles und Belohnendes daraus machen."
      4:
        image: 'notes/hoc_dance_properties_4.png'
        text: "Bisher hattest du die Gelegenheit, mit verschiedenen Tänzern zu spielen, und du hast sie so programmiert, dass sie verschiedene Tanzbewegungen ausführen. Aber wie funktionieren diese Bewegungen wirklich?"
      5:
        text: "Jede Tanzbewegung besteht aus einer Reihe von Bildern, die als Frames bezeichnet werden. Jedes Bild unterscheidet sich leicht von dem davor. Wenn dein Programm ausgeführt wird, zeigt der Computer ein Bild nach dem anderen an. Die Bilder werden so schnell gezeigt, dass es so aussieht, als würde sich die Tänzerin bewegen. Das ist das Geheimnis hinter jeder Animation."
      6:
        text: "Du kannst nicht nur die Bewegungen deiner Tänzerin ändern, du kannst auch die Eigenschaften einer Tänzerin ändern. Eigenschaften beschreiben Dinge wie die Position der Tänzerin auf dem Bildschirm, die Größe der Tänzerin und die Farbe der Tänzerin."
      7:
        text: "Um die Eigenschaften einer Tänzerin zu ändern, verwende einen festen Baustein. Lasst uns einen festen Baustein verwenden, damit unsere Tänzer kleiner aussehen. Zuerst ziehe den gesetzten Satz in dein Programm. Dann wähle die Tänzerin aus, die du ändern möchtest, und gib die Größe ein, die auf dem Bildschirm angezeigt wird."
      8:
        text: "Die volle Größe ist 100. Wenn du eine niedrigere Zahl wählst, wird die Tänzerin kleiner. Je kleiner die Tänzerin ist, desto weiter entfernt sieht sie aus. Dies ist eine großartige Möglichkeit, Background-Tänzer zu werden."
      9:
        image: 'notes/hoc_dance_properties_9.png'
        text: "Mit dem eingestellten Bausteinen kannst du auch die Abmessungen, die Drehung, die Position und die Farbe der Tänzerin ändern. Indem du mit diesen Eigenschaften herumspielst, kannst du alle möglichen Änderungen vornehmen und sie mit verschiedenen Teilen des Songs verknüpfen."
      10:
        text: "Denke daran, dass du nur die Eigenschaften einer Tänzerin einstellen kannst, die bereits existiert. Achte darauf, dass dein Set-Baustein nach dem Baustein \"Make a new dancer\" kommt. Zögere nicht zu experimentieren, sei kreativ und habe Spaß."
    hoc_dance_congrats:
      1:
        image: 'notes/hoc_dance_congrats_1.png'
        text: "Hour of Code | Tanzparty: Party!"
      2:
        image: 'notes/hoc_dance_congrats_2.png'
        text: "Herzlichen Glückwunsch! Du hast gerade die Grundlagen der Informatik gelernt. Jetzt kannst du diese Bausteine verwenden, um eine Tanzparty nach eigenem Muster zu gestalten, die du mit deinen Freunden teilen kannst."
      3:
        text: "Wenn du in der Werkzeugkiste nachschaust, wirst du einige brandneue Bausteine finden, die du noch nie zuvor gesehen hast. So kannst du beispielsweise mit dem Layoutbaustein die Tänzer auf dem Bildschirm unterschiedlich anordnen."
      4:
        image: 'notes/hoc_dance_congrats_4.png'
        text: "Sieh dich um und versuche, mit diesen neuen Bausteinen und Funktionen zu experimentieren. Schaffst du es einen sorgfältig choreographierten Tanz zu deinem Lieblings-Song kreieren?"
      5:
        image: 'notes/hoc_dance_congrats_5.png'
        text: "Oder ein Tanzwettbewerb mit deinen Freunden?"
      6:
        image: 'notes/hoc_dance_congrats_6.png'
        text: "Oder etwas ganz anderes?"
      7:
        text: "Am Ende des Tutorials kannst du einen Link zu deiner Kreation mit deinen Freunden teilen. Öffne deine Vorstellungskraft und habe einfach Spaß!"
    mc_2018_intro:
      1:
        image: 'notes/mc_2018_intro_1.png'
        text: "Hallo! Du kommst genau richtig. Willkommen auf der Voyage Aquatic. Ich werde mich auf die Suche nach einem verborgenen Unterwasserschatz machen und bin froh, wenn ich deine Hilfe habe. Wer weiß, was uns in diesen geheimnisvollen Gewässern alles begegnen wird? Wir sollen unseren ersten Führer irgendwo auf diesem Steg treffen."
      2:
        image: 'notes/mc_2018_intro_2.png'
        text: "Willkommen, Abenteurer! Um das Voyage Aquatic zu vervollständigen, musst du eine Reihe von Rätseln mit Code lösen. So funktioniert es. Dein Bildschirm ist in drei Hauptteile gegliedert."
      3:
        image: 'notes/mc_2018_intro_3.png'
        text: "Auf der linken Seite siehst du die Minecraft-Welt."
      4:
        image: 'notes/mc_2018_intro_4.png'
        text: "Der mittlere Bereich ist deine Werkzeugkiste, in der du Codierbefehle finden kannst."
      5:
        image: 'notes/mc_2018_intro_5.png'
        text: "Und der große Bereich auf der rechten Seite ist dein Arbeitsplatz. Hier kannst du Befehle stapeln, um dein Programm zu erstellen und deine Bewegungen zu kontrollieren."
      6:
        image: 'notes/mc_2018_intro_6.png'
        text: "Die Anweisungen der einzelnen Levels findest du oben auf der Seite. Klicke auf das Pluszeichen, um zwischen Lang- und Kurzanleitung zu wechseln."
      7:
        image: 'notes/mc_2018_intro_7.png'
        text: "Zieh Blöcke aus der Werkzeugkiste in den Arbeitsbereich, stapel sie, und klicke dann auf die Schaltfläche Ausführen, um deine Befehle auszuführen."
      8:
        image: 'notes/mc_2018_intro_8.png'
        text: "Es kann sein, dass du es ein paar Mal versuchen musst, um es richtig zu machen, und einige der Rätsel haben mehr als eine Lösung, also experimentiere, um zu sehen, was funktioniert."
      9:
        image: 'notes/mc_2018_intro_9.png'
        text: "Wenn du es noch einmal versuchen möchtest, klicke auf die Reset-Taste, um dorthin zurückzukehren, wo du angefangen hast."
      10:
        image: 'notes/mc_2018_intro_10.png'
        text: "Wenn du einen Befehl löschen möchtest, ziehe einfach den Baustein aus deinem Arbeitsbereich zurück in die Werkzeugkiste. Denke daran auf \"Ausführen\" zu klicken, um zu sehen, wie dein Code in Aktion aussieht."
      11:
        image: 'notes/mc_2018_intro_11.png'
        text: "Okay, genug herumgealbert, Mitabenteurer. Lasst uns mit der Codierung beginnen, um einen Unterwasserschatz zu finden."
    MC_2018_loops:
      1:
        image: 'notes/MC_2018_loops_1.png'
        text: "Toll! Wir haben einen Kabeljau gefangen! Wusstest du, dass, wenn du einen Delphin mit einem Kabeljau fütterst, der Delphin dich zu einem Schiffswrack führen wird, in dem es vielleicht einen Schatz gibt? Wir müssen näher dran sein. Die nächsten Rätsel werden bestimmt noch kniffliger, also sollten wir besser noch ein paar Programmierkenntnisse lernen. Und was ist das? Eine Höhle?"
      2:
        image: 'notes/MC_2018_loops_2.png'
        text: "Willkommen, Abenteurer! Mein Name ist Squid. Mir ist aufgefallen, dass ihr bei einigen der letzten Rätsel immer wieder dieselben Befehle verwendet habt. Das muss ein bisschen ermüdend gewesen sein. Hast du dir jemals gewünscht, du könntest etwas immer wieder tun, wie zum Beispiel Geschirr spülen oder Zähne putzen, ohne dass es dich ermüdet oder langweilt? Das wäre doch schön."
      3:
        image: 'notes/MC_2018_loops_3.png'
        text: "Computer sind sehr gut darin, dasselbe immer und immer wieder zu tun, indem sie Schleifen kodieren. Wenn Sie möchten, dass Ihr Programm die gleichen Anweisungen mehrmals ausführt, können Sie eine Schleife verwenden!"
      4:
        image: 'notes/MC_2018_loops_4.png'
        text: "Der Schleifenblock enthält Anweisungen, die wiederholt werden, bis das Ziel erreicht ist. Sobald Ihr Programm eine \"Repeat until goal\"-Schleife startet, wiederholt es die darin enthaltenen Anweisungen so lange, bis es das Ziel erreicht hat."
      5:
        image: 'notes/MC_2018_loops_5.png'
        text: "Probieren Sie es selbst aus! Platziere die Befehle, die du wiederholen möchtest, im Block \"Wiederholen bis zum Ziel\", klicke auf \"Ausführen\" und sieh zu, wie es läuft!"
      6:
        image: 'notes/MC_2018_loops_6.png'
        text: "Nun, das war ein bisschen seltsam. Wer hätte gedacht, dass Tintenfische programmieren können? Ich dachte nicht einmal, dass sie Finger haben. Jetzt wissen wir also, was Schleifen sind. Benutzen wir sie, um noch mehr Schätze zu bergen."
    mc_2018_conditionals:
      1:
        image: 'notes/mc_2018_conditionals_1.png'
        text: "Wahnsinn! Wieder drei Rätsel gelöst! Und wir haben ... einen Lachs gefangen. Nicht ganz so aufregend wie ein Haufen Gold, aber wir nehmen, was wir kriegen können. Und ich habe das Gefühl, dass uns die Nautilusschale später noch nützlich sein wird. Ich frage mich, was in diesen Ruinen lauert. Vielleicht ein weiterer Hinweis! Werfen wir einen Blick hinein."
      2:
        image: 'notes/mc_2018_conditionals_2.png'
        text: "Mein Name ist Netty und willkommen in meinen Ruinen. Wir treffen ständig Entscheidungen, die von den Bedingungen abhängen. Wenn es nach Regen aussieht, nehmen wir einen Regenschirm mit. Wenn wir hungrig sind, essen wir einen Snack."
      3:
        image: 'notes/mc_2018_conditionals_3.png'
        text: "Wenn wir einen Schleicher sehen, laufen wir in die entgegengesetzte Richtung. Auch Computer treffen diese Art von Entscheidungen. Sie können tatsächlich mit Hilfe von Code auf Bedingungen reagieren."
      4:
        image: 'notes/mc_2018_conditionals_4.png'
        text: "Um eine Antwort wie diese mit Ihren Code-Befehlen zu programmieren, wählen Sie einen if-Pfad-Block."
      5:
        image: 'notes/mc_2018_conditionals_5.png'
        text: "Wählen Sie das Dropdown-Menü, um den Befehl zu erstellen."
      6:
        image: 'notes/mc_2018_conditionals_6.png'
        text: "Wenn Sie z. B. den Befehl \"if path to the right\" (wenn der Weg nach rechts führt) schreiben und \"turn right\" (nach rechts abbiegen) in die Bedingung aufnehmen, dann wird Steve immer nach rechts abbiegen, wenn er einen offenen Weg nach rechts erreicht. Wenn es keine Öffnung nach rechts gibt, wird er nicht nach rechts abbiegen. Diese bedingten if-Befehle sind hilfreich, wenn Sie Code in unvorhersehbaren Situationen ausführen, z. B. in mysteriösen Ruinen in Unterwasserhöhlen."
      7:
        image: 'notes/mc_2018_conditionals_7.png'
        text: "Versuchen Sie, die if-Blöcke zu verwenden, und probieren Sie Ihren Code aus."
      8:
        image: 'notes/mc_2018_conditionals_8.png'
        text: "Wahnsinn! Nettys Ruinen waren fantastisch. Ich muss wirklich aus dem Haus meiner Eltern ausziehen. Also, was denkst du? Sind die Bedingungen richtig, um die letzten Puzzles zu lösen? Lasst es uns versuchen."
    mc_2018_closing:
      1:
        image: 'notes/mc_2018_closing_1.png'
        text: "Amy Lee33: Herzlichen Glückwunsch! Sie haben es geschafft!"
      2:
        image: 'notes/mc_2018_closing_2.png'
        text: "Tintenfisch: Herzlichen Glückwunsch!"
      3:
        image: 'notes/mc_2018_closing_3.png'
        text: "Netty: Du hast es geschafft! Herzlichen Glückwunsch!"
      4:
        image: 'notes/mc_2018_closing_4.png'
        text: "Tomohawk: Herzlichen Glückwunsch!"
      5:
        image: 'notes/mc_2018_closing_5.png'
        text: "Was für ein toller Tag! Auf der Schatzsuche haben wir eine Minecraft-Leitung gebaut, Nautilus-Muscheln gefunden und Schatztruhen entdeckt. Ich liebe die Farbe von Prismarin. Wir haben auch gelernt, wie man mit Schleifen und Bedingungen programmiert."
      6:
        image: 'notes/mc_2018_closing_6.png'
        text: "Apropos Programmierung, es gibt noch ein weiteres Level für diese Aufgabe. Seid ihr bereit, Abenteurer?"
      7:
        image: 'notes/mc_2018_closing_7.png'
        text: "Es ist ein freies Spiel und du kannst deine Programmierkenntnisse einsetzen und etwas Unglaubliches bauen."
      8:
        image: 'notes/mc_2018_closing_8.png'
        text: "Hmmm... ein Ort, um deinen Schatz zu verstecken, ein Unterwasserdenkmal, ein Korallenschloss? Ahhh...so viele Ideen. Versuchen Sie, Schleifen zu verwenden, um eine wiederholte Aktion zu erstellen, und Konditionale, um sich auf all diese unvorhersehbaren Szenarien vorzubereiten."
      9:
        image: 'notes/mc_2018_closing_9.png'
        text: "Sie haben sich inzwischen als unerschrockener Programmierer erwiesen, und ich kann es kaum erwarten, zu sehen, was Sie bauen. Und hoffentlich enden deine Abenteuer mit Code nicht hier. Gute Reise!"
    teaching_csf_how_it_works:
      1:
        image: 'notes/teaching_cs_fundamentals_1.png'
        text: "Dieser Kurs ist in Etappen gegliedert."
      2:
        image: 'notes/teaching_cs_fundamentals_2.png'
        text: "In den ersten Phasen wird vorgestellt, was Informatik ist, sowie einige Schlüsselwörter."
      3:
        image: 'notes/teaching_cs_fundamentals_3.png'
        text: "Anschließend lernen Sie, wie Ihre SchülerInnen programmieren. Die letzten Schritte des Kurses werden Ihnen helfen, einen Plan für den Informatikunterricht in Ihrem Klassenzimmer zu erstellen. Während des gesamten Kurses sehen Sie Beispiele sowohl für \"plugged\" - oder online - Unterricht, als auch für \"unplugged\" Unterricht, der ohne Computer durchgeführt wird."
      4:
        image: 'notes/teaching_cs_fundamentals_4.png'
        text: "Die Lernplattform verfolgt Ihre Fortschritte, so dass Sie jederzeit dort weitermachen können, wo Sie aufgehört haben."
    what_is_cs:
      1:
        image: 'notes/what_is_cs.png'
        text: "Kodierung ist der Satz von Anweisungen, den man einem Computer gibt. Die Informatik ist ein Bereich, in dem Menschen die Leistung von Computern nutzen, um große Probleme zu lösen. Zur Informatik gehört das Programmieren, aber auch andere Dinge, wie die Funktionsweise des Internets und die Auswirkungen auf die Gesellschaft, der Umgang mit großen Datenmengen und die Lösung großer Probleme. In der Informatik geht es um Problemlösung, kritisches Denken und Ausdauer."
    writing_first_program:
      1:
        image: 'notizen/erste_programmierung_1.png'
        text: "Code.org verwendet eine visuelle Drag-and-Drop-Programmiersprache namens Blockly. Blockly verwendet bunte Anweisungen, die Blöcke genannt werden, um Programme zu erstellen und Rätsel zu lösen."
      2:
        image: 'notizen/schreibe_erstes_programm_2.png'
        text: "Jedes Puzzle besteht aus vier Teilen."
      3:
        image: 'notizen/schreibe_erstes_programm_3.png'
        text: "Auf der linken Seite befindet sich der Spielbereich, in dem Ihr Programm läuft."
      4:
        image: 'notizen/erste_programm_4.png'
        text: "In der Mitte befindet sich der Werkzeugkasten, in dem alle benötigten Blöcke zu finden sind."
      5:
        image: 'notizen/schreibe_erstes_programm_5.png'
        text: "Auf der rechten Seite befindet sich der Arbeitsbereich, in den Sie Blöcke ziehen, um Ihr Programm zu erstellen."
      6:
        image: 'notizen/erste_programm_6.png'
        text: "Über dem Arbeitsbereich befinden sich die Anweisungen für jedes Rätsel."
      7:
        image: 'notizen/erste_programmierung_7.png'
        text: "Wenn Sie zu viele Blöcke aus dem Werkzeugkasten herausziehen, ziehen Sie den zusätzlichen Block einfach zurück in den Werkzeugkasten. Klicken Sie auf Ausführen, um Ihr Programm zu testen, und auf Zurücksetzen, um es erneut zu versuchen."
    repeat_block:
      1:
        image: 'notes/repeat_block.png'
        text: "Mit einem Wiederholungsblock können Sie den darin enthaltenen Code so oft wiederholen, wie Sie es wünschen."
    what_is_an_event:
      1:
        image: 'notes/what_is_an_event.png'
        text: "Ein Ereignis weist Ihr Programm an, auf ein bestimmtes Ereignis zu warten. Wenn dieses Ereignis eintritt, führt das Programm eine Aktion aus. Ein Computer könnte auf einen Mausklick, einen Druck auf eine Pfeiltaste oder ein Tippen auf den Bildschirm warten."
    lesson_planning:
      1:
        image: 'notes/lesson_planning_1.png'
        text: "Die Lektionen zu den CS-Grundlagen beginnen mit Übersichten, damit Sie wissen, was in der Lektion behandelt wird."
      2:
        image: 'notes/lesson_planning_2.png'
        text: "Die Lektionen bestehen aus Aufwärmübungen, Aktivitäten und Nachbereitungen. Wenn Sie Ihre eigenen Unterrichtspläne erstellen möchten, sollten Sie diese Tipps beachten."
      3:
        image: 'notes/lesson_planning_3.png'
        text: "1. Versuchen Sie, ein spiralförmiges Curriculum-Design zu verwenden. Führen Sie Konzepte einmal ein und besuchen Sie sie dann erneut."
      4:
        image: 'notes/lesson_planning_4.png'
        text: "2. Schaffen Sie eine gemischte Lernerfahrung, indem Sie Online-Unterricht mit unplugged-Unterricht kombinieren."
      5:
        image: 'notes/lesson_planning_5.png'
        text: "3. Unterteilen Sie Ihren Lehrplan in kleinere Abschnitte."
      6:
        image: 'notes/lesson_planning_6.png'
        text: "4. Achten Sie darauf, dass Sie sich an den lokalen Standards und an den Fähigkeiten zur Vorbereitung auf das Studium und die berufliche Laufbahn orientieren."
    opd_closing:
      1:
        image: 'notes/opd_closing_1.png'
        text: "Herzlichen Glückwunsch! Du hast den Online-Kurs „Grundlagen der Informatik unterrichten“ abgeschlossen. Du bist jetzt Teil der wachsenden Gemeinschaft von Lehrern, die ihre Schüler auf die Zukunft vorbereiten."
      2:
        image: 'notes/opd_closing_2.png'
        text: "Schauen Sie sich diese Ressourcen an, wenn Sie mehr Unterstützung benötigen: 1. forum.code.org 2. @teachcode auf Twitter 3. studio.code.org"
    hoc_dance_warmup_2019:
      1:
        image: 'notes/hoc_dance_warmup_1.png'
        text: "Hour of Code | Tanzparty: Aufwärmübung"
      2:
        image: 'notes/hoc_dance_warmup_2.png'
        text: "Hallo, mein Name ist Miral Kotb und ich bin Tänzer, Softwareentwickler und Entwickler von iLuminate."
      3:
        image: 'notes/hoc_dance_warmup_3.png'
        text: "Die Informatik hat in vielerlei Hinsicht mit Kreativität zu tun. Unermesslich, wirklich. Ich meine, wenn man erst einmal die Fähigkeit hat, Software zu schreiben, kann man Ideen in alles einbringen. Ich mache das mit leichten Anzügen. Es gibt so viel, was man tun kann, wenn man erst einmal die Werkzeuge zum Schreiben von Software hat, und die Möglichkeiten sind wirklich endlos."
      4:
        image: 'notes/hoc_dance_warmup_4.png'
        text: "In der nächsten Stunde wirst du mit der Informatik beginnen, indem du deine eigene Tanzparty programmierst! Wir haben einige Hits und ein Team von großartigen Tänzern zusammengestellt, mit denen du spielen kannst."
      5:
        image: 'notizen/hoc_dance_warmup_2019_5.png'
        text: "Du wirst Codeblöcke verwenden, um verschiedene Tänzer auszuwählen, ihre Tanzbewegungen zu ändern, sie auf die Musik reagieren zu lassen und sie interaktiv zu machen."
      6:
        image: 'notizen/hoc_dance_warmup_2019_6.png'
        text: "Sie werden sehen, dass Ihr Bildschirm in drei Hauptbereiche unterteilt ist. Auf der linken Seite befindet sich die Spielfläche. Hier werden Ihre Tänzerinnen und Tänzer zu sehen sein."
      7:
        image: 'notizen/hoc_dance_warmup_2019_7.png'
        text: "Der mittlere Bereich ist die Toolbox. In diesem Bereich werden im Laufe der Lektionen neue Codeblöcke verfügbar sein."
      8:
        image: 'notizen/hoc_dance_warmup_2019_8.png'
        text: "Der Raum auf der rechten Seite ist der Arbeitsbereich. Du kannst Bausteine aus der Werkzeugkiste in den Arbeitsbereich ziehen, um dein Programm zu erstellen."
      9:
        image: 'notizen/hoc_dance_warmup_2019_9.png'
        text: "Die Anweisungen für jedes Level werden hier oben auf dem Bildschirm angezeigt. Wenn du einen Tipp brauchst, klicke einfach auf die Glühbirne."
      10:
        image: 'notes/hoc_dance_warmup_2019_10.png'
        text: "Beginnen wir mit der Erstellung eines neuen Tänzers mit diesem roten Block. Ziehen Sie ihn zunächst aus dem Werkzeugkasten und rasten Sie ihn unter diesem orangefarbenen \"Setup\"-Block ein. Dieser Tänzer ist eine Katze."
      11:
        image: 'notes/hoc_dance_warmup_2019_11.png'
        text: "Damit kannst du auch ändern, wo die Tänzerin in deinem Spielraum erscheint."
      12:
        image: 'notes/hoc_dance_warmup_2019_12.png'
        text: "Über dem Spielbereich befindet sich ein Menü, aus dem man Musik auswählen kann. Es gibt eine Vielzahl von Liedern zur Auswahl, also viel Spaß beim Suchen deiner Favoriten. Unter der Abspielfläche befindet sich die Schaltfläche \"Ausführen\". Wenn du auf \"Ausführen\" drückst, werden die Tänzer aus deinem Programm in der Abspielfläche angezeigt und die Musik wird abgespielt."
      13:
        image: 'notes/hoc_dance_warmup_13.png'
        text: "Probiere es selbst aus! Und wenn du dich festgefahren fühlst, ist es okay, steh einfach auf und beweg dich! Und bevor du dich versiehst, hast du deine eigene Tanzparty gemacht. Also, was wirst du bauen?"
    hoc_dance_events_2019:
      1:
        image: 'notes/hoc_dance_events_1.png'
        text: "Hour of Code | Tanzparty: Ereignisse (Events)"
      2:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_2.png'
        text: "Mein Name ist Erin.  Ich bin Software-Ingenieurin hier bei Code.org und ich habe beim Aufbau der Tanzparty mitgewirkt."
      3:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_3.png'
        text: "Um verschiedene Tanzbewegungen genau zum richtigen Zeitpunkt mit der Musik ablaufen zu lassen, können Sie so genannte Ereignisse verwenden. Ein Ereignis weist Ihr Programm an, auf ein bestimmtes Ereignis zu \"warten\" und dann sofort zu reagieren."
      4:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_4.png'
        text: "Ereignisse sind beispielsweise das Achten auf Mausklicks, Pfeiltasten oder ein Antippen des Bildschirms."
      5:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_5.png'
        text: "Hier werden wir einen Tänzer programmieren, der eine Bewegung ausführt, wenn Sie die Pfeiltasten auf dem Bildschirm oder die Tasten auf Ihrer Tastatur drücken."
      6:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_6.png'
        text: "Wir können den Ereignisblock \"when up arrow\" verwenden und einen \"do once\"-Block damit verbinden. Wenn jemand die Pfeiltaste nach oben drückt, wird der mit dem \"when up arrow\"-Block verbundene Code ausgeführt. Welche Tanzbewegung werden Sie wählen?"
      7:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_7.png'
        text: "Vergewissern Sie sich, dass der von Ihnen gewählte Tänzertyp mit einem der Tänzer übereinstimmt, die Sie im \"Setup\"-Block erstellt haben, sonst passiert möglicherweise nichts."
      8:
        image: 'notizen/hoc_tanz_veranstaltungen_2019_8.png'
        text: "Mit der Zeit können Sie weitere Ereignisse wie dieses erstellen, damit Ihre Tänzer mit jeder Taste andere Bewegungen ausführen. Probieren Sie es aus, und mit ein paar Zeilen Code können Sie Ihren eigenen interaktiven Tanz erstellen."
    hoc_dance_measures_2019:
      1:
        image: 'notizen/hoc_dance_measures_2019_1.png'
        text: "Hour of Code | Tanzparty: Takte"
      2:
        image: 'notizen/hoc_dance_measures_2019_2.png'
        text: "Ich bin Aloe Blacc. Ich bin Sänger, Songwriter und Entertainer. Ich denke, dass es wirklich wichtig ist, Informatik zu lernen, weil Informatik die Zukunft ist, und ich denke, dass es wichtig ist, dass die Menschen die Kontrolle über die Technologie haben, die buchstäblich ihr Leben kontrolliert."
      3:
        image: 'notizen/hoc_dance_measures_2019_3.png'
        text: "Das Ereignis, das wir jetzt verwenden werden, wird auf eine Änderung des Liedes achten. Diese Änderung veranlasst den Tänzer, einen neuen Tanz zu tanzen."
      4:
        image: 'notizen/hoc_dance_measures_2019_4.png'
        text: "Professionelle Tänzerinnen und Tänzer üben ihre Choreografien, indem sie die Schläge des Liedes mitzählen. In der Musik bezieht sich ein Takt auf eine bestimmte Anzahl von Beats. In den meisten populären Liedern ist ein Takt vier Beats lang."
      5:
        image: 'notizen/hoc_tanz_massnahmen_2019_5.png'
        text: "Damit deine Tänzer loslegen können, brauchst du einen grünen Ereignisblock. Dieser Ereignisblock sagt: \"nach 4 Takten\"."
      6:
        image: 'notizen/hoc_dance_measures_2019_6.png'
        text: "Wenn du einen violetten \"do forever\"-Block herausziehst, kannst du einen Tanz auswählen, den dein Tänzer tanzen soll. Da er unter dem Ereignisblock \"nach 4 Takten\" steht, wartet Ihr Tänzer vier Takte des Liedes ab, bevor er seinen Tanz beginnt."
      7:
        image: 'notizen/hoc_dance_measures_2019_7.png'
        text: "Achte auf den Taktgeber oben im Anzeigebereich."
      8:
        image: 'notizen/hoc_dance_measures_2019_8.png'
        text: "Achte und höre auf das Ereignis, das den Tanzcode auslöst. Und genau zur richtigen Zeit beginnt unsere Tänzerin zu tanzen."
    hoc_dance_properties_2019:
      1:
        image: 'notes/hoc_dance_properties_1.png'
        text: "Hour of Code | Tanzparty: Eigenschaften"
      2:
        image: 'notes/hoc_dance_properties_2.png'
        text: "Mein Name ist Maria, ich studiere im ersten Jahr an der University of Washington und ich bin Amazon Future Engineer."
      3:
        image: 'notes/hoc_dance_properties_3.png'
        text: "Ich liebe die Informatik, weil sie Problemlösung und kritisches Denken beinhaltet und nachdem man Stunden der Arbeit in etwas investiert hat, kann man etwas wirklich Cooles und Belohnendes daraus machen."
      4:
        image: 'notes/hoc_dance_properties_4.png'
        text: "Bisher hattest du die Möglichkeit, verschiedene Arten von Tänzern zu spielen, und du hast sie so programmiert, dass sie verschiedene Arten von Tanzbewegungen ausführen. Aber wie funktionieren diese Bewegungen wirklich?"
      5:
        text: "Jede Tanzbewegung besteht aus einer Reihe von Bildern, die als Frames bezeichnet werden. Jedes Bild unterscheidet sich leicht von dem davor. Wenn dein Programm ausgeführt wird, zeigt der Computer ein Bild nach dem anderen an. Die Bilder werden so schnell gezeigt, dass es so aussieht, als würde sich die Tänzerin bewegen. Das ist das Geheimnis hinter jeder Animation."
      6:
        text: "Du kannst nicht nur die Bewegungen deiner Tänzerin ändern, du kannst auch die Eigenschaften einer Tänzerin ändern. Eigenschaften beschreiben Dinge wie die Position der Tänzerin auf dem Bildschirm, die Größe der Tänzerin und die Farbe der Tänzerin."
      7:
        image: 'notes/hoc_dance_properties_2019_7.png'
        text: "Um die Eigenschaften eines Tänzers zu ändern, verwenden Sie einen Setblock. Verwenden wir einen Set-Block, um unsere Tänzer kleiner aussehen zu lassen. Ziehen Sie zunächst den Setblock in Ihr Programm."
      8:
        image: 'notes/hoc_dance_properties_2019_8.png'
        text: "Wählen Sie dann einen Tänzer aus, den Sie ändern möchten, und geben Sie die Größe ein, in der er auf dem Bildschirm erscheinen soll. Die volle Größe ist 100. Wenn Sie eine niedrigere Zahl wählen, wird die Tänzerin kleiner dargestellt. Je kleiner die Tänzerin ist, desto weiter weg sieht sie aus."
      9:
        image: 'notes/hoc_dance_properties_2019_9.png'
        text: "Mit dem Set-Block können Sie auch die Abmessungen, die Drehung, die Position und die Farbe eines Tänzers ändern. Indem Sie mit diesen Eigenschaften spielen, können Sie alle möglichen Änderungen vornehmen und sie mit verschiedenen Teilen des Liedes verknüpfen."
      10:
        image: 'notes/hoc_dance_properties_2019_10.png'
        text: "Denken Sie daran, dass Sie nur die Eigenschaften eines bereits existierenden Tänzers einstellen können. Vergewissern Sie sich, dass der Block \"Setzen\" nach dem Block \"Einen neuen Tänzer erstellen\" kommt. Experimentieren Sie ruhig, seien Sie kreativ, und haben Sie Spaß!"
    hoc_dance_congrats_2019:
      1:
        image: 'notes/hoc_dance_congrats_1.png'
        text: "Hour of Code | Tanzparty: Party!"
      2:
        image: 'notes/hoc_dance_congrats_2.png'
        text: "Herzlichen Glückwunsch! Du hast gerade die Grundlagen der Informatik gelernt. Jetzt kannst du diese Bausteine verwenden, um eine Tanzparty nach eigenem Muster zu gestalten, die du mit deinen Freunden teilen kannst."
      3:
        text: "Wenn du in der Werkzeugkiste nachschaust, wirst du einige brandneue Bausteine finden, die du noch nie zuvor gesehen hast. So kannst du beispielsweise mit dem Layoutbaustein die Tänzer auf dem Bildschirm unterschiedlich anordnen."
      4:
        image: 'notes/hoc_dance_congrats_4.png'
        text: "Sieh dich um und versuche, mit diesen neuen Bausteinen und Funktionen zu experimentieren. Schaffst du es einen sorgfältig choreographierten Tanz zu deinem Lieblings-Song kreieren?"
      5:
        image: 'notes/hoc_dance_congrats_5.png'
        text: "Oder ein Tanzwettbewerb mit deinen Freunden?"
      6:
        image: 'notes/hoc_dance_congrats_6.png'
        text: "Oder etwas ganz anderes?"
      7:
        image: 'notes/hoc_dance_congrats_7.png'
        text: "Am Ende des Tutorials kannst du einen Link zu deiner Kreation mit deinen Freunden teilen. Öffne deine Vorstellungskraft und habe einfach Spaß!"
    poemart_intro:
      1:
        image: 'notes/hoc_poem_art_2021_introduction_01.jpg'
        text: "Mein Name ist Caia und ich bin Dichterin und Informatikstudentin. Durch das Programmieren habe ich so viel gelernt, was mich zu einem besseren Dichter gemacht hat, und so vieles an meiner Poesie hat mich beim Programmieren besser gemacht, weil man wirklich über die Worte nachdenken muss, die man wählt, und darüber, was man erschaffen wird, wenn alles zusammenkommt."
      2:
        image: 'notes/hoc_poem_art_2021_introduction_02.jpg'
        text: "In der nächsten Stunde werden Sie etwas über Informatik und Poesie lernen, indem Sie ein animiertes Gedicht erstellen. Poesie bedeutet im Wesentlichen, mit Worten Kunst zu machen. Ich schreibe Gedichte, um mich selbst auszudrücken. Ich versuche, die Fantasie und die Emotionen des Publikums anzuregen, wenn ich schreibe, indem ich meinen einzigartigen Stil und Rhythmus verwende."
      3:
        image: 'notes/hoc_poem_art_2021_introduction_03.jpg'
        text: "Genau wie die Kunst können auch Gedichte auf viele verschiedene Arten interpretiert werden. Ein und dasselbe Gedicht kann für verschiedene Menschen sehr unterschiedliche Dinge bedeuten, und jedes Gedicht hat seine eigene Stimmung. Die Stimmung ist das Gefühl, das man bei einem Gedicht empfindet. Manchmal assoziieren Menschen bestimmte Farben und Bilder mit verschiedenen Stimmungen."
      4:
        image: 'notes/hoc_poem_art_2021_introduction_04.jpg'
        text: "Die Farbe Gelb zum Beispiel macht mich fröhlich. Und wenn ich an eine Stimmung wie Angst denke, stelle ich mir manchmal eine dunkle und stürmische Nacht vor. In dieser Übung haben Sie die Möglichkeit, die Stimmung eines Gedichts zu illustrieren und zu beleben, je nachdem, wie Sie sich dabei fühlen."
      5:
        image: 'notes/hoc_poem_art_2021_introduction_05.jpg'
        text: "Schauen wir uns an, wie Sie dies mit Hilfe von Code erreichen. Sie werden sehen, dass Ihr Bildschirm in drei Hauptteile aufgeteilt ist. Auf der linken Seite befindet sich der Spielbereich. Hier wird Ihr animiertes Gedicht angezeigt. Jedes Gedicht hat einen Titel und einen Autor."
      6:
        image: 'notes/hoc_poem_art_2021_introduction_06.jpg'
        text: "Dieser mittlere Bereich ist der Werkzeugkasten. In diesem Bereich werden im Laufe der Lektion neue Codeblöcke verfügbar."
      7:
        image: 'notes/hoc_poem_art_2021_introduction_07.jpg'
        text: "Der Bereich auf der rechten Seite ist der Arbeitsbereich. Sie können Blöcke aus dem Werkzeugkasten in den Arbeitsbereich ziehen, um Ihr Programm zu erstellen."
      8:
        image: 'notes/hoc_poem_art_2021_introduction_08.jpg'
        text: "Die Anweisungen für jedes Level werden hier oben auf dem Bildschirm angezeigt. Wenn Sie einen Hinweis wünschen, klicken Sie auf die Glühbirne."
      9:
        image: 'notes/hoc_poem_art_2021_introduction_09.jpg'
        text: "Wählen Sie zunächst ein Gedicht aus, das Ihnen gefällt. Es gibt alle Arten von Gedichten und Sie können auf jeder Ebene ein neues auswählen."
      10:
        image: 'notes/hoc_poem_art_2021_introduction_10.jpg'
        text: "Als Nächstes ziehen Sie Blöcke aus dem Werkzeugkasten in Ihren Arbeitsbereich, um Ihr Gedicht zu animieren. Sie können eine Hintergrundfarbe oder einen Effekt wählen, der zur Stimmung Ihres Gedichts passt, und dann auf \"Ausführen\" klicken, um Ihr Gedicht in Aktion zu sehen."
      11:
        image: 'notes/hoc_poem_art_2021_introduction_11.jpg'
        text: "Nehmen Sie sich etwas Zeit, um die verschiedenen Gedichte zu lesen, und finden Sie eines, das in Ihnen ein Gefühl auslöst. Denken Sie darüber nach, wie Sie sich fühlen und wie Sie dieses Gefühl durch Bilder und Code vermitteln können."
    poemart_events:
      1:
        image: 'notes/hoc_poem_art_2021_events_01.jpg'
        text: "Manchmal ändert sich die Stimmung eines Gedichtes im Laufe des Gedichtes. Was vielleicht als fröhlich klingendes Gedicht beginnt, wird traurig, oder die Dunkelheit wandelt sich zum Licht."
      2:
        image: 'notes/hoc_poem_art_2021_events_02.jpg'
        text: "In dieser Aktivität werden Sie mit Ereignissen arbeiten. Sie können diesen Ereignisblock verwenden, um den Ablauf Ihres Programms zu ändern, wenn eine bestimmte Zeile in Ihrem Gedicht auftaucht. Beachten Sie, dass Ereignisblöcke sich nicht in Ihr Hauptprogramm einklinken. Stattdessen erstellen sie eigene kleine Programme."
      3:
        image: 'notes/hoc_poem_art_2021_events_03.jpg'
        text: "Lies dein Gedicht durch und finde einen Moment, in dem die Stimmung umschlägt. Zählen Sie, in welcher Zeile das passiert: eins, zwei, drei. Tragen Sie die Nummer der Zeile in Ihren Ereignisblock ein."
      4:
        image: 'notes/hoc_poem_art_2021_events_04.jpg'
        text: "Dann programmieren Sie etwas ein, das den Stimmungsumschwung widerspiegelt, wenn diese Zeile auf dem Bildschirm erscheint. Wenn Sie \"Ausführen\" drücken, können Sie sehen, was Sie programmiert haben."
    poemart_imagery:
      1:
        image: 'notes/hoc_poem_art_2021_imagery_01.jpg'
        text: "In der Poesie verwenden die Autoren Bilder, um ein Bild im Kopf des Lesers zu zeichnen. Wenn wir das Wort Krokodil sehen, stellen wir uns automatisch ein grünes Krokodil vor. Um ein solches Bild in eine Animation zu übertragen, verwenden wir Sprites."
      2:
        image: 'notes/hoc_poem_art_2021_imagery_02.jpg'
        text: "Dies ist ein neuer Sprite-Block, mit dem du einen Sprite erstellen und ein Kostüm für ihn auswählen kannst. Wähle ein Kostüm für das Sprite, das deiner Meinung nach zu dem Gedicht passt."
      3:
        image: 'notes/hoc_poem_art_2021_imagery_03.jpg'
        text: "Um die Position des Sprites zu ändern, können Sie auf das Stecknadelsymbol im Positionsblock klicken und dann auf die gewünschte Stelle im Spielfeld."
      4:
        image: 'notes/hoc_poem_art_2021_imagery_04.jpg'
        text: "In den nächsten Levels wirst du einige neue Blöcke sehen. Mit diesem Block kannst du die Größe deines Sprites ändern. Dieser Block ermöglicht es Ihnen, Ihr Sprite mit dem Verhalten zu animieren."
      5:
        image: 'notes/hoc_poem_art_2021_imagery_05.jpg'
        text: "Wenn in einem Gedicht von wandernden Wolken die Rede ist, erstellen Sie zunächst das Wolken-Sprite, wählen dann diesen Verhaltensblock aus, ziehen ihn heraus und wählen wandernd."
      6:
        image: 'notes/hoc_poem_art_2021_imagery_06.jpg'
        text: "Achte darauf, dass deine Sprite-Kostüme übereinstimmen. Wenn du \"Run\" drückst, siehst du eine wandernde Wolke."
      7:
        image: 'notes/hoc_poem_art_2021_imagery_07.jpg'
        text: "Jetzt können Sie wörtliche Bilder hinzufügen, um die Wörter im Gedicht zu illustrieren. Viel Spaß!"
    poemart_celebration:
      1:
        image: 'notes/hoc_poem_art_2021_feier_01.jpg'
        text: "Herzlichen Glückwunsch! Du hast soeben die Grundlagen der Informatik gelernt und erfahren, wie man die Stimmung eines Gedichts findet. Jetzt kannst du dein eigenes animiertes Gedicht erstellen und mit deinen Freunden teilen."
      2:
        image: 'notes/hoc_poem_art_2021_feier_02.jpg'
        text: "Werden Sie sorgfältig eine einfache Szene für das ganze Gedicht auswählen?"
      3:
        image: 'notes/hoc_poem_art_2021_feier_03.jpg'
        text: "Oder werden Sie viele Ereignisse verwenden, um für jede Zeile Ihres Gedichts eine neue Szene zu schaffen?"
      4:
        image: 'notes/hoc_poem_art_2021_feier_04.jpg'
        text: "Am Ende des Tutorials können Sie einen Link zu Ihrer Kreation mit Ihren Freunden teilen."
      5:
        image: 'notes/hoc_poem_art_2021_feier_05.jpg'
        text: "Lassen Sie Ihrer Fantasie freien Lauf und haben Sie Spaß!"
    hello_world_intro:
      1:
        image: 'notizen/hoc_hello_world_2021_einfuehrung_01.jpg'
        text: "Hallo! Mein Name ist Erin und ich bin Software-Ingenieurin hier bei Code.org. Ich bin so aufgeregt, weil ich an dem Tutorial arbeiten durfte, das du gleich machen wirst! Wir nennen es \"Hallo Welt\""
      2:
        image: 'notizen/hoc_hello_world_2021_einfuehrung_02.jpg'
        text: "\"Hello World\" ist ein berühmter Satz in der Informatik, und die Darstellung dieses Satzes ist ein üblicher erster Schritt beim Erlernen der Informatik. In der nächsten Stunde werden Sie mit der Programmierung in Sprite Lab in die Informatik einsteigen."
      3:
        image: 'notes/hoc_hello_world_2021_introduction_03.jpg'
        text: "Sprite Lab ist ein Werkzeug, mit dem Sie fantasievolle und lustige Projekte erstellen können. Sie werden sehen, dass Ihr Bildschirm in drei Hauptbereiche unterteilt ist. Auf der linken Seite befindet sich die Spielfläche. Hier werden Ihre Sprites angezeigt."
      4:
        image: 'notes/hoc_hello_world_2021_introduction_04.jpg'
        text: "Sprites sind Objekte auf dem Bildschirm, mit denen Sie interagieren können, z. B. eine Figur oder ein Gegenstand in einer Geschichte oder einem Spiel."
      5:
        image: 'notes/hoc_hello_world_2021_introduction_05.jpg'
        text: "Dieser mittlere Bereich ist der Werkzeugkasten. In diesem Bereich werden im Laufe der Lektion neue Codeblöcke verfügbar."
      6:
        image: 'notes/hoc_hello_world_2021_introduction_06.jpg'
        text: "Der Bereich auf der rechten Seite ist der Arbeitsbereich. Sie können Blöcke aus dem Werkzeugkasten in den Arbeitsbereich ziehen, um Ihr Programm zu erstellen."
      7:
        image: 'notes/hoc_hello_world_2021_introduction_07.jpg'
        text: "Die Anweisungen für jedes Level werden hier oben auf dem Bildschirm angezeigt. Wenn Sie einen Hinweis wünschen, klicken Sie auf die Glühbirne."
      8:
        image: 'notes/hoc_hello_world_2021_introduction_08.jpg'
        text: "Beginnen wir mit der Erstellung eines Sprites! Mit diesem Block kannst du deinem Sprite ein Kostüm und einen Ort geben. Kostüm ist das Wort, das wir verwenden, um das Aussehen eines Sprites zu beschreiben. Um den Standort des Sprites zu ändern, kannst du auf das Stecknadel-Symbol im Standort-Block klicken und dann auf die gewünschte Stelle."
      9:
        image: 'notes/hoc_hello_world_2021_introduction_09.jpg'
        text: "Jetzt soll sich das Sprite selbst vorstellen! Um das Sprite etwas sagen zu lassen, verwenden Sie diesen \"Say\"-Block und fügen Sie ihn in Ihr Programm ein. Vergewissere dich, dass das in deinem \"Say\"-Block ausgewählte Kostüm mit dem Kostüm deines Sprites übereinstimmt."
      10:
        image: 'notes/hoc_hello_world_2021_introduction_10.jpg'
        text: "Wenn du auf \"Ausführen\" drückst, wird das Sprite den Text sagen, den du ihm sagst. Jetzt ist es an der Zeit, mit Sprite Lab loszulegen und zu sehen, wohin deine Fantasie dich führt!"
    hello_world_events:
      1:
        image: 'notizen/hoc_hello_world_2021_events_01.jpg'
        text: "Nachdem Sie nun gelernt haben, wie man Sprite Lab verwendet, wollen Sie Ihr Programm reagieren lassen, wenn jemand damit spielt. Dazu werden Sie Ereignisse verwenden. Ein Ereignis weist Ihr Programm an, auf ein bestimmtes Ereignis zu warten und dann sofort zu reagieren."
      2:
        image: 'notizen/hoc_hello_world_2021_events_02.jpg'
        text: "Einige Beispiele für Ereignisse sind das Warten auf einen Mausklick, eine Pfeiltaste oder ein Tippen auf den Bildschirm. Blöcke wie \"wenn geklickt\" werden Ereignisblöcke genannt. Der mit einem Ereignisblock verbundene Code wird ausgeführt, wenn die entsprechende Aktion erkannt wird."
      3:
        image: 'notizen/hoc_hello_world_2021_events_03.jpg'
        text: "Wenn ich zum Beispiel diesen \"say\"-Block an das \"when clicked\"-Ereignis anhänge, wird mein Sprite etwas sagen, wenn der Benutzer darauf klickt oder tippt. Beachten Sie, dass Ereignisblöcke sich nicht in Ihr Hauptprogramm einklinken. Stattdessen erstellen sie eigene kleine Programme."
      4:
        image: 'notizen/hoc_hello_world_2021_events_04.jpg'
        text: "Wenn Sie mehrere Sprites haben, können Sie zusätzliche Ereignisse verwenden, um eine interaktive Geschichte zu erzählen."
      5:
        image: 'notizen/hoc_hello_world_2021_events_05.jpg'
        text: "Bald werden Sie lernen, wie Sie in Sprite Lab noch mehr tun können, z. B. die Größe oder das Aussehen eines Sprites ändern, verschiedene Hintergründe einstellen, Sounds abspielen und vieles mehr. Was sollen deine Sprites tun, wenn jemand mit ihnen interagiert? Das liegt ganz bei dir!"
    hello_world_congrats:
      1:
        image: 'notizen/hoc_hello_world_2021_freeplay_01.jpg'
        text: "Herzlichen Glückwunsch! Du hast gerade die Grundlagen der Informatik gelernt. Jetzt kannst du mit Sprite Lab alles machen, was du willst."
      2:
        image: 'notizen/hoc_hello_world_2021_freeplay_02.jpg'
        text: "Sie sehen eine Schaltfläche mit der Aufschrift Kostüme. Wenn Sie darauf klicken, können Sie neue Sprite-Kostüme aus einer Bibliothek auswählen."
      3:
        image: 'notizen/hoc_hello_world_2021_freeplay_03.jpg'
        text: "Du kannst auch dein eigenes zeichnen! Wenn du ein Kostüm hast, das dir gefällt, gehe zurück zu deinem Code."
      4:
        image: 'notizen/hoc_hello_world_2021_freeplay_04.jpg'
        text: "Wählen Sie nun dieses Kostüm für Ihr Sprite aus."
      5:
        image: 'notizen/hoc_hello_world_2021_freeplay_05.jpg'
        text: "In der Toolbox findest du einige brandneue Blöcke, die du bisher noch nicht gesehen hast. So gibt es zum Beispiel viele Verhaltensblöcke, mit denen Sie Ihr Sprite auf lustige und interessante Weise bewegen können."
      6:
        image: 'notizen/hoc_hello_world_2021_freeplay_06.jpg'
        text: "Sie können den Ereignisblock \"when touches\" verwenden, um zu steuern, was passiert, wenn zwei Sprites aneinander stoßen."
      7:
        image: 'notizen/hoc_hello_world_2021_freeplay_07.jpg'
        text: "Suchen Sie nach dem Block \"Effekt erzeugen\". Dieser mächtige Block kann verwendet werden, um eine ganze Reihe von Sprites zu erstellen, die auf Kommando platzen, knallen oder regnen."
      8:
        image: 'notizen/hoc_hello_world_2021_freeplay_08.jpg'
        text: "Schauen Sie sich um, und experimentieren Sie mit den neuen Blöcken und Funktionen. Klicken Sie am Ende des Tutorials auf die Schaltfläche \"Teilen\", um einen Link zu Ihrer Kreation mit Ihren Freunden zu teilen."
      9:
        image: 'notizen/hoc_hello_world_2021_freeplay_09.jpg'
        text: "Du hast alle Fähigkeiten, die du brauchst, um mit der Entwicklung von Apps, Spielen und anderen neuen Programmen in Sprite Lab zu beginnen! Setze deine neuen Fähigkeiten für das Gute ein. Sei freundlich und respektvoll, so wie du es tun würdest, wenn du etwas auf dem Papier erstellst oder mit einem Freund sprichst."
      10:
        image: 'notizen/hoc_hello_world_2021_freeplay_10.jpg'
        text: "Was werden Sie also erfinden? Du könntest eine Geschichte über dich selbst erzählen ... oder eine mit deinen eigenen besonderen Figuren erfinden. Vielleicht kannst du deine neuen Informatikkenntnisse sogar für dein nächstes Schulprojekt nutzen! Lasst eurer Fantasie freien Lauf und habt Spaß!"
