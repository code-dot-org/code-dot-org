de:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Willkommen zu deiner ersten Programmierstunde! Fangen wir gleich mit der ersten Übung an.
      2:
        image: notes/hoc1_2.jpg
        text: 'Wir werden Blocky, eine Grafische Programmiersprache in der du mit Drag&Drop Bausteine setzt, benutzen um Programme zu schreiben.'
      3:
        image: notes/hoc1_3.jpg
        text: 'Meistens werden Programme geschrieben, aber Blockly ist grafisch. Jeder Baustein entspricht einer Zeile "echten" Codes.'
      4:
        image: notes/hoc1_4.jpg
        text: Du wirst die Grundlagen der Informatik lernen. Konzepte die überall genutzt werden, von erstellen von Apps bis zum Kontrollieren des Mars Rovers.
      5:
        image: notes/hoc1_5.jpg
        text: Ein Programm ist eine Ansammlung von Anweisungen, die dein Computer befolgt.
      6:
        image: notes/hoc1_6.jpg
        text: Das Ziel deines ersten Programmes ist es Angry Bird durch ein Laybrinth zum grünen Schwein zu führen.
      7:
        image: notes/hoc1_7.jpg
        text: Die linke Seite ist das Labybrinth wo dein Programm ausgeführt wird. Die Anweisungen für jede Aufgabe findest du unter dem Laybrinth.
      8:
        image: notes/hoc1_8.jpg
        text: Der mittlere Werkzeugkasten enthält die Befehlsbausteine für den Vogel. Verwende sie, um das Programm zu erstellen.
      9:
        image: notes/hoc1_9.jpg
        text: Rechts ist der Arbeitsbereich, wo die Bausteine aus dem Werkzeugkasten zum Programm zusammengesteckt werden. Um einen Block zu löschen, ziehe ihn in den Papierkorb in der Ecke.
      10:
        image: notes/hoc1_10.jpg
        text: 'Jeder Baustein ist eine Anweisung. Wenn du einen "vorwärts bewegen"-Baustein auf deinen Arbeitsbereich ziehst und anschließend "Programm Starten" drückst, dann bewegt sich der Vogel im Labyrinth einen Schritt nach vorne.'
      11:
        image: notes/hoc1_11.jpg
        text: Um mehr als eine Handlung ausführen zu lassen, kannst du viele Bausteine auf deinen Arbeitsplatz ziehen und aneinandersetzen. Der Vogel wird die Anweisungen von oben nach unten ausführen.
      12:
        image: notes/hoc1_12.jpg
        text: 'Wenn Du ein Programm reparieren und es nochmals versuchen möchtest, dann drücke den "Neu Starten" Knopf.'
      13:
        image: notes/hoc1_13.jpg
        text: Holen wir die Schweine!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hallo, ich heiße JR! Jedes Autorennteam braucht Computerspezialisten, um erfolgreich zu sein. Sie analysieren die Messdaten des Autos, um es noch schneller zu machen.
      2:
        image: notes/stage5_2.jpg
        text: In diesen Aufgaben bist du ein Künstler, der überall wohin er geht, eine Linie hinter sich zeichnet.
      3:
        image: notes/stage5_3.jpg
        text: 'Dieser Baustein sagt "Bewege dich 100 Pixel nach vorne". Pixel sind sehr kleine Punkte auf dem Bildschirm.'
      4:
        image: notes/stage5_4.jpg
        text: Dieser Block bedeutet „um 90 Grad nach rechts drehen.“ Damit dreht sich die Künstlerfigur, genau wie beim „Drehen“-Baustein in den Labyrinth-Aufgaben.
      5:
        image: notes/stage5_5.jpg
        text: Klicke auf den Pfeil in den Bausteinen, um zu verändern, wie weit sich die Künstlerfigur nach vorne läuft oder in welche Richtung sie sich dreht. Spiele etwas mit diesen Bausteinen herum, um mit ihnen vertraut zu werden.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hallo, bin ich Paola! In dieser Aufgabe bist du ein Bauer, der sein Feld völlig flach bekommen muss, um mit dem Anpflanzen zu beginnen.
      2:
        image: notes/stage9_2.jpg
        text: Du musst ihr helfen alle Erdhaufen zu entfernen und alle Löcher zu füllen.
      3:
        image: notes/stage9_3.jpg
        text: Die neuen Bausteine entfernen eine Schauel Erde von einem Haufen und füllen eine Schaufel voll Erde in ein Loch.
      4:
        image: notes/stage9_4.jpg
        text: Die Haufen und Löcher sind unterschiedlich groß, weshalb du dem Bauer sagen musst, wie viele Schaufeln er benutzen muss.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hallo, ich bin Katie! Am Interessantesten an der Informatik ist, dass ein Computerprogramm interaktiv sein kann.
      2:
        image: notes/flappy02.jpg
        text: Jedes Mal, wenn jemand auf einem Computer oder Smartphone klickt, den Bildschirm berührt oder tippt, wird ein Event erzeugt und Code wird ausgeführt, der entscheidet was bei diesem Event zu tun ist.
      3:
        image: notes/flappy03.jpg
        text: 'Zum Beispiel könntest du einen "Ereignis-Verarbeiter" haben, der sagt: "Wenn mit der Maus geklickt wird, spiele einen Ton" '
      4:
        image: notes/flappy04.jpg
        text: 'Hast du schon von FlappyBird gehört? Durch Benutzen von "Ereignis-Verarbeitern" werden wir eine eigene Version von FlappyBird programmieren!'
      5:
        image: notes/flappy05.jpg
        text: Den Code wirst du durch Drag-and-drop von Bausteinen schreiben, die Befehle für den Computer sind. Unter der Haube steht jeder dieser Blöcke für wirklichen Code.
      6:
        image: notes/flappy06.jpg
        text: 'Wenn du einen Blick auf den Arbeitsbereich wirfst, siehst du einige grüne Blöcke, die für dich eingefügt wurden - das sind "Ereignis-Verarbeiter" '
      7:
        image: notes/flappy07.jpg
        text: 'Wenn du den Vogel beim Mausklick mit den Flügeln schlagen lassen willst, kannst du das durch Anhängen des "flattern"-Bausteins an den passenden "Ereignis-Verarbeiter" erreichen. Nun wird der Vogel jedes Mal seine Flügel bewegen, wenn mit der Maus geklickt wird.'
      8:
        image: notes/flappy08.jpg
        text: In jeder Aufgabe dieser Übung werden wir neue Typen von Events als grüne Blocks im Arbeitsbereich einfügen und du kannst die passenden bausteine für Events auswählen.
      9:
        image: notes/flappy09.jpg
        text: 'Wenn du einen Dropdown-Pfeil wie diesen siehst, kannst du die Einstellungen ändern - zum Beispiel, was für ein Ton abgespielt werden soll, wenn der Vogel den Boden berührt.'
      10:
        image: notes/flappy10.jpg
        text: Im der letzten Aufgabe wirst du dein eigenes Spiel erstellen und deinen Freunden zeigen können. Viel Spaß!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hi, ich bin Mark! Lass uns etwas über Schleifen lernen. Wenn Du Schleifen verwendest, kannst du dem Computer befehlen, dass er jede beliebige Anweisung wieder und wieder, tausendmal oder sogar milliardenmal, wiederholen soll.
      2:
        image: notes/hoc2_2.jpg
        text: In dieser Aufgabe möchten wir, dass sich der Vogel 5 Schritte nach vorne zum Schwein bewegt.
      3:
        image: notes/hoc2_3.jpg
        text: 'Wir können den neuen "Wiederholen"-Block verwenden, um uns zu helfen.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Anstatt 5 "vorwärts gehen"-Bausteine zu stapeln...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Wir können den "vorwärts bewegen"-Baustein in einen "Wiederholen"-Baustein ziehen und eine Zahl im Baustein angeben, wie oft es wiederholt werden soll.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Und wichtig: Man kann mehr als einen Baustein in einen "Wiederholen"-Baustein ziehen.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Viel Spaß mit deinem neuen "Wiederholen" Baustein!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hi, ich bin Chris. Bevor ich angefangen habe Basketball für das Team "Miami Heat" zu spielen, habe ich an der "Georgia Tech"-Universität Informatik studiert. Lass uns den neuen "Wiederholen bis"-Baustein ausprobieren.'
      2:
        image: notes/hoc3_2.jpg
        text: Was wäre wenn wir nicht wüssten, wie weit sich der Vogel bewegen muss, um zum Schwein zu kommen?
      3:
        image: notes/hoc3_3.jpg
        text: 'Wenn wir einen "vorwärts bewegen"-Baustein in den "Wiederholen bis"-Baustein setzen, wird sich der Vogel nach vorne bewegen BIS er bei einem Schwein ankommt (oder in eine Wand kracht).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Und das ist wichtig: wie zuvor auch, können wir in den "wiederhole bis"-Baustein mehrere Bausteine setzten, die dann alle wiederholt werden.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hi, ich bin Bill! Lass uns ein neues, fundamentales Konzept lernen: Die "Wenn"-Anweisungen. Damit trifft der Computer Entscheidungen.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du benutzt "Wenn"-Anweisungen tagtäglich selbst. Zum Beispiel überlegst Du jeden Morgen bevor du aus dem Haus gehst: "Wenn" es regnet, muss ich meinen Regenmantel anziehen.'
      3:
        image: notes/hoc4_3.jpg
        text: Wir können den Zombie anweisen zu überprüfen WENN es einen Weg nach links gibt und wenn er einen Weg nach links findet, dass er sich in diese Richtung drehen soll.
      4:
        image: notes/hoc4_4.jpg
        text: 'Um ein Programm dafür zu schreiben, ziehe zuerst unseren "Wenn"-Baustein heraus und setze danach einen "nach links drehen"-Baustein hinein.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Wenn wir jetzt einen "gehe vorwärts"-Baustein darüber stapeln und um alles einen "Wiederholen"-Baustein legen, wird der Zombie bei jeder Bewegung prüfen, ob es einen Weg nach links gibt und sich in dem Fall drehen. Der "Wiederholen" Befehl ist wichtig, um bei jedem Schritt auf eine Drehmöglichkeit zu prüfen.'
      6:
        image: notes/hoc4_6.jpg
        text: Wenn Anweisung sind in der Informatik wirklich wichtig. Eines meiner ersten Programme war Tic Tac Toe, und es gab eine Wenn Anweisung, die sagte, wenn die andere Person gewinnen sollte, blockiere das Feld, mit dem sie gewinnen kann.
      7:
        image: notes/hoc4_7.jpg
        text: 'Viel Spaß mit dem "Wenn"-Baustein!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hallo, ich heiße Saloni. Ich benutze Informatik, um Probleme im Gesundheitswesen und in der Medizin zu lösen. Wir wollen etwas über den "wenn ansonsten"- Baustein lernen. Er sieht aus wie der "Wenn"- Baustein, hat aber noch einen Teil am Ende, auf dem "ansonsten" steht.'
      2:
        image: notes/hoc5_2.jpg
        text: 'Wenn ich den "vorwärts bewegen"-Baustein an die Stelle setze, wo "machen" steht, und einen "nach links drehen"-Baustein dorthin, wo "ansonsten" steht, dann bedeutet das, dass der Zombie zwischen zwei Möglichkeiten wählt. Wenn es einen Weg gibt, der geradeaus führt, dann wird der Zombie geradeaus gehen, und andernfalls (wenn es keinen Weg gibt, der geradeaus führt), wird der Zombie sich nach links drehen.'
      3:
        image: notes/hoc5_3.jpg
        text: |
          Genau wie den "Wenn"- Baustein können wir "wenn ansonsten"- Bausteine in
          "wiederholen"- Bausteine einsetzen, so dass der Zobmbie sich weiter bewegt und der 
          "wenn ansonsten"- Baustein überprüft, ob eine Drehung erfolgen muss.
      4:
        image: notes/hoc5_4.jpg
        text: Jetzt bring die Zombies dahin, wo sie hingehören!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'Eine "wenn ansonsten"- Anweisung ist eine Entscheidung zwischen zwei Sachen. Wir wollen uns ansehen, wie wir eine "wenn ansonsten"- Anweisung bei unserem Freund Scrat, dem Eichhörnchen, anwenden können.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Dieser Baustein sieht aus wie der "Wenn"- Baustein, hat aber noch einen Teil am Ende, auf dem "ansonsten" steht. Wenn ich einen "vorwärts bewegen"- Baustein dahin setze, wo "machen" steht und einen "nach links drehen"-Baustein dorthin, wo "ansonsten" steht, bedeutet das: Das Eichhörnchen wird sich vorwärts bewegen, wenn es einen Weg geradeaus gibt. Wenn es keinen Weg geradeaus gibt, wird sich  Scrat nach links drehen.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Es trifft eine Entscheidung and führt eine der beiden möglichen Handlungen aus. Und genau wie "wenn"- Bausteine, kann man "wenn-ansonsten"-Bausteine in "wiederholen"- Bausteine einsetzen.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Jetzt wollen wir Scrat dem Eichhörnchen dabei helfen, diese Eichel zu kriegen!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hi, bin ich Brina, Ingenieur bei Instagram. Eine Funktion ist eine Reihe bestimmter Codezeilen, die du immer wieder verwenden möchtest. Anstatt diese Zeilen jedesmal wieder zu schreiben, kannst du einfach einen Baustein verwenden.
      2:
        image: notes/stage13_2.jpg
        text: Wir lernen jetzt, wie man Funktionen definiert. Funktionsdefinitionen haben einen Stern in der Ecke. Der Name der Funktion ist in der obersten Zeile geschrieben.
      3:
        image: notes/stage13_3.jpg
        text: 'Die Bausteine, die in der Definition liegen, sagen uns, was sie tut. Daher heißt diese Funktionsdefinition "5 hinzufügen" und ist aus einem "wiederhole"-Baustein und einem "hinzufügen"-Baustein aufgebaut.'
      4:
        image: notes/stage13_4.jpg
        text: 'Die Definition ist auf dem Arbeitsplatz, aber unserer Bauer wird die Funktion nicht ausführen, bis wir unseren "5 hinzufügen"-Baustein aus der Funktionen-Kategorie hinzufügen.'
      5:
        image: notes/stage13_5.jpg
        text: Lass uns Spaß haben!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hi, Ich bin Makinde! Ich zeige euch etwas über den "solange"-Baustein '
      2:
        image: notes/stage9_6.jpg
        text: 'Der "solange"-Baustein wird alles, was du hereintust, ausführen, SOLANGE die Anweisung darüber WAHR ist.'
      3:
        image: notes/stage9_7.jpg
        text: Zum Beispiel, wenn der Bauer auf einem Haufen steht, wird sie immer wieder einen Haufen entfernen, SOLANGE sie immernoch auf einem Haufen steht.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hi, ich bin Trina und ich arbeite für Pixar. Ich habe an vielen Filmen, einschließlich Shrek mitgearbeitet.
      2:
        image: notes/stage11_2.jpg
        text: 'Dies ist unsere neue "Zähler"-Schleife. Sie wiederholt Befehle immer und immer wieder und du kannst die Befehle jedes mal leicht verändern lassen.'
      3:
        image: notes/stage11_3.jpg
        text: 'In diesem Beispiel sagt die "Zähler"-Schleife "Zähle mit Zähler von 50 bis 90 mit 10" und in der Schleife gibt es einen "Zeichne ein Quadrat"-Baustein. Ziehe den "Zähler"-Baustein aus dem "Variablen"-Abschnitt auf die Stelle, wo der "Länge"-Baustein ist.'
      4:
        image: notes/stage11_4.jpg
        text: Dies bedeutet, dass unser Künstler ein Quadrat zeichnen wird, das eine Seitenlänge von 50 Pixeln hat, dann wird er 10 hinzufügen und ein Quadrat mit einer Seitenlänge von 60 Pixeln zeichnen. Er wird immer 10 hinzufügen und Quadrate malen, bis er 90 erreicht hat. Also gibt es Quadrate mit Seitenlängen von 50, 60, 70, 80 und 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hi, ich bin Janete und ich bin Ingenieurin bei Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Was, wenn wir ein paar Dreiecke mit verschiedenen Längen malen wollen?
      3:
        image: notes/stage15_3.jpg
        text: Wir könnten den ganzen Code per Hand schreiben, oder wir benutzen eine Funktion mit Parametern.
      4:
        image: notes/stage15_4.jpg
        text: 'Um dies zu tun, klicke auf den blauen Stern der "Zeichne ein Dreieck"-Funktionsdefinition. Ziehe dann "Name eingeben" in den "Eingeben"-Baustein.'
      5:
        image: notes/stage15_5.jpg
        text: 'Wenn du nun "Länge" an die Stelle schreibst, wo "x" steht, und dann "Enter" drückst, erstellst du eine Längeneingabe für deine Funktion.'
      6:
        image: notes/stage15_6.jpg
        text: 'Dann klicke auf den Stern. Jetzt klickst du auf die "Variablen"-Kategorie und ziehst den "Länge"-Baustein in den "vorwärts bewegen"-Baustein deiner Funktionsdefinition. Ziehe den alten Nummernblock weg.'
      7:
        image: notes/stage15_7.jpg
        text: 'Um deine Funktion mit Parametern zu benutzen, klicke auf die "Funktionen"-Kategorie und ziehe deine "Zeichne ein Dreieck mit Länge"-Funktion heruas.'
      8:
        image: notes/stage15_8.jpg
        text: Jetzt kannst du den Mathe-Baustein verändern, um Dreiecke in verschiedenen Größen zu zeichnen.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Herzlichen Glückwunsch! Mit der letzten Aufgabe, das du gerade gelöst hast, hast du ein Prgramm geschrieben, das JEDER Roboter dazu verwenden kann, um seinen Weg durch nicht-verzweigte Labyrinthe oder Tunnel aller Längen zu finden. Ganz egal ob es ein Zombie, ein Vogel, ein Mars-Rover, oder sogar ein selbstfahrendes Auto ist.
      2:
        image: notes/hoc6_2.jpg
        text: Die grundlegenden Konzepte, die du verwendet hast, sind das Herzstück jedes Programms. Wir haben etwas über Schleifen, Wiederholungen, Wenn-Dann-Befehle und Wenn-Ansonsten gelernt.
      3:
        image: notes/hoc6_3.jpg
        text: Wenn Dir die ersten Stunden Programmieren gefallen haben, dann besuche code.org, um Deine Ausbildung in der Informatik fortzuführen! Sobald Du unseren 20 Stunden-Kurs abgeschlossen hast, hast Du die Grundlagen des Programmieren gemeistert und kannst anfangen zu lernen wie man Handy-Apps, Roboter-Anweisungen, Spiele, oder was immer Du möchtest, programmiert.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologie verändert alles was wir tun und es ist egal ob du jung oder alt bist: Programmieren macht Spaß, es ist kreativ, und jeder kann es lernen!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: In Text Form anzeigen kommt bald!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hallo, ich heiße Lyndsey. Ich bin Model, Schauspielerin und schreibe meinen eigenen Apps. Wir wollen ein Programm schreiben, um Anna und Elsa zu treffen, wenn sie den Zauber und die Schönheit des Eises erkunden.
      2:
        image: notes/frozen1_2.jpg
        text: Du wirst Schneeflocken und Muster erschaffen während du Schlittschuh fährst und ein Winterwunderland erstellst, das du dann mit deinen Freunden teilen kannst.
      3:
        image: notes/frozen1_3.jpg
        text: In der nächsten Stunde wirst du die grundlegenden Fähigkeiten zum Programmieren kennenlernen. Traditionell ist Programmieren Text-basiert, aber wir werden heute Blockly benutzen; damit kannst du mithilfe von visuellen Bausteinen, die du mit der Maus anordnen kannst, Programme erstellen, auch wenn es auf den ersten Blick nicht so erscheinen mag. So lernen selbst Universitätsstudenten die Grundlagen.
      4:
        image: notes/frozen1_4.jpg
        text: Ein Programm ist eine Zusammenstellung von Instruktionen, die dem Computer vorgeben, was er tun soll. Lass uns ein Programm schreiben, mit dem wir Elsa helfen, einen einfachen Satz zu erstellen. Wir werden das später brauchen, um komplexere Strukturen zu programmieren.
      5:
        image: notes/frozen1_5.jpg
        text: Dein Bildschirm ist in drei Hauptteile gegliedert. Links ist eine Eisfläche, auf der du dein Programm laufen lassen wirst. Die Anweisungen für jedes Level findest du direkt unter der Fläche.
      6:
        image: notes/frozen1_6.jpg
        text: Dieser mittlere Bereich ist die Werkzeugkiste, und jeder dieser Bausteine ist eine Aktion, die Elsa und Anna ausführen können.
      7:
        image: notes/frozen1_7.jpg
        text: 'Die weiße Fläche auf der rechten Seite ist unser Arbeitsbereich. Dort werden wir unser Programm erstellen. Um jemanden auf der Eisfläche zu bewegen, brauchst du den "vorwärts bewegen"-Baustein.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Hier, der Baustein "vorwärts bewegen" besagt, "bewege um 100 Pixel vorwärts". Wenn wir "ausführen" drücken, was passiert? Elsa bewegt sich um eine bestimmte Länge vorwärts, und zwar genau 100 Pixel. Pixel sind im Grunde sehr kleine Quadrate auf dem Bildschirm deines Computers.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Der andere Baustein in dieser Aufgabe sagt "nach rechts um 90 Grad drehen." Und wenn wir diesen "Nach rechts drehen"-Baustein benutzen, dann dreht sich Elsa um eine bestimmte Weite. Du kannst selber ausprobieren, wie weit du Elsa drehen willst. Der Winkel basiert auf dem Pfad, der direkt vor Elsa liegt. Also ist das eine 90-Grad-Drehung. Und das ist eine 120-Grad-Drehung.'
      10:
        image: notes/frozen1_10.jpg
        text: Denk dran, du kannst die Anzahl der Pixel und die Weite der Drehung ändern, indem du auf die Pfeile direkt daneben drückst.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hallo, ich bin Paola! Computer sind wirklich gut, wenn es darum geht, etwas zu wiederholen. Du kannst bis 10, 20 oder 100 zählen. Aber ein Computer kann bis zu einer Milliarde oder einer Billion zählen. Einem Computer wird nie langweilig und er braucht nur ein paar Sekunden. Ob es ums Zählen, Malen oder etwas anderes geht--Computer können Dinge hundert oder sogar Millarden Mal wiederholen.
      2:
        image: notes/frozen2_2.jpg
        text: 'In der Programmierung nennen wir sowas eine Schleife. Mit einer Schleife kannst du Code wiederholen, so oft du willst. Für die nächste Aufgabe ist es dein Ziel, Anna zu helfen mit dem "Wiederholen"-Baustein ein Quadrat zu erstellen.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Alle Codeblöcke, die du in den "Wiederholen"-Baustein setzt, werden der Reihe nach wiederholt, so oft du willst.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Um ein Quadrat zu zeichen, kannst du den "vorwärts bewegen" und "nach rechts drehen" Baustein 4 Mal benutzen. Aber der einfachere Weg ist es, dem Computer einmal "vorwärts bewegen" und "Um 90 Grad nach rechts drehen" zu sagen, und ihm dann zu sagen, dieses Aktionspaar 4 Mal zu wiederholen. Dafür musst du den "vorwärts bewegen" und den "nach rechts drehen" Baustein in einen "wiederholen" Baustein setzen.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Denk dran, du kannst die Zahl in dem "Wiederholen"-Baustein verändern, und er wird das, was sind in dem Baustein befindet, so oft wie angegeben wiederholen.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, ich bin Chris Bosh. Ich bin ein professioneller Basketball Spieler und ich habe in der Schule programmiert.
      2:
        image: notes/frozen3_2.jpg
        text: Eins der wichtigsten Konzepte in der Informatik ist das Definieren neuer Befehle. Die meisten Computersprachen haben nur ungefähr 100 Wörter oder Befehle. Und ehrlich gesagt, die Kunst und Magie liegt darin, deine eigenen neuen Wörter aus diesen Bausteinen zu bauen.
      3:
        image: notes/frozen3_3.jpg
        text: Hast du deinem Computer erst einmal beigebracht, eine Aktion auszuführen, indem du diese Befehlssequenz verwendet hast, kannst du dieser Aktion einen eigenen Namen geben, sodass es leicht ist, sie später zu wiederholen. Definierst du einen eigenen Befehl, und gibst ihm einen Namen, nennt man das eine Funktion (engl. function).
      4:
        image: notes/frozen3_4.jpg
        text: Hi, ich bin Jess. Beim Programmieren mit Blöcken, nutzt man Funktionen, wenn es eine Reihe von Handlungen gibt, die man viele Male wiederholen möchte. Ein Beispiel ist der Code, den du geschrieben hast, um ein Quadrat zu zeichnen.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kannst diese Funktion "Zeichne ein Quadrat" nennen. '
      6:
        image: notes/frozen3_6.jpg
        text: Nun hast du einen neuen Block, den du viele Male benutzen kannst, um mehrere Quadrate zu zeichnen.
      7:
        image: notes/frozen3_7.jpg
        text: Viele einfache Formen können verwendet werden, um komplexere Muster zu erstellen. Im nächsten Schritt ist der Code, den du vorhin geschrieben hast, um einen Kreis zu erstellen, als neue Funktion verfügbar, um weitere, verschieden große Kreise zu machen. Kannst du Elsa so helfen, komplizierte und schöne Muster im Schnee zu erschaffen?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 'Wir werden Spiele mit dem Play Lab erstellen. Gute Spiele haben eine Story und jede Story hat Hauptcharaktere. Wir werden lernen, wie wir unsere Charaktere - wie Hexen, Aliens und Tiere - dazu bringen, zu sprechen, sich zu bewegen und miteinander zu kommunizieren. Am Ende dieses Tutorials, kannst du ein Spiel von Grund auf erstellen und es mit deinen Freunden teilen.'
      2:
        image: notes/playlab_intro_2.png
        text: Dein Bildschirm gliedert sich in drei Hauptteile. Auf der linken Seite ist der Spiel-Bereich, in dem dein Programm ausgeführt wird. Die Anweisungen für die einzelnen Levels stehen darunter.
      3:
        image: notes/playlab_intro_3.png
        text: Der mittlere Bereich ist die Toolbox, und jeder dieser Blöcke ist ein Code-Teil. Den weißen Bereich rechts nennt man Arbeitsplatz (engl. workspace) und hier werden wir unser Programm erstellen.
      4:
        image: notes/playlab_intro_4.png
        text: 'Um zu beginnen, musst du deine Blöcke mit dem orangen "Ausführung"-Block verknüpfen. Du kannst mehrere Blöcke miteinander verbinden, indem du sie herausziehst bis die gelbe Linie zu sehen ist, und sie werden sich von selbst zusammenfügen.'
      5:
        image: notes/playlab_intro_5.png
        text: 'Im ersten Schritt ist unser Charakter ein Pinguin, und wir werden ihn dazu bringen, "Hallo" zu sagen, indem wir den "Sagen"-Baustein herausziehen, ihn mit dem "Ausführung"-Baustein verknüpfen, und "Hallo" tippen. Wir können den Pinguin mit den "Nach links bewegen" und "Nach rechts bewegen" Bausteinen auch dazu bringen, sich umherzubewegen. Hast du erst einmal alle deine Bausteine am richtigen Platz, drück den "Ausführung"-Block um zu sehen, was zu programmiert hast.'
      6:
        image: notes/playlab_intro_6.png
        text: Beginn einfach mal, und am Ende kannst du dein eigenes Spiel erstellen, mit allen möglichen Arten von Spielern, die miteinander interagieren können, glücklich oder traurig sein, Punkte erzielen, oder einander sogar verschwinden lassen können. Es liegt allein an dir und dem Spiel, das du erstellen willst.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nun werden wir etwas lernen, das alle Programmierer jeden Tag verwenden, nämlich Ereignisse (engl. Events). Ein Ereignis bringt dein Programm dazu, darauf zu achten, ob etwas passiert. Wenn etwas geschieht, führt es eine Aktion aus.
      2:
        image: notes/playlab_events_2.png
        text: Einige Beispiele für Ereignisse sind etwa, auf Mausklicks, Pfeiltasten oder ein Antippen den Bildschirms zu achten.
      3:
        image: notes/playlab_events_3.png
        text: 'Hier werden wir den Spacebot die Erdlinge begrüßen lassen, wenn ein Spieler auf ihn klickt. Wir werden den "Wenn angeklickt"-Baustein verwenden und den "Sagen"-Baustein mit ihm verbinden. Klickt ein Spieler auf den Spacebot, wird jede Handlung, die mit dem "Wenn angeklickt" Ereignis-Block verbunden ist, ausgeführt. Was wird dein Alien sagen?'
      4:
        image: notes/playlab_events_4.png
        text: 'Es gibt auch "Pfeil"-Blöcke. Verbindest du die "Bewegungs"-Blöcke mit ihnen, kannst du deine Akteure nach oben, unten, links oder rechts bewegen. Schritt für Schritt wird dein Spiel immer interaktiver.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Dies ist der "Ewig Wiederholen"-Block. Alles innerhalb dieses Blocks wird immer wieder im Spiel passiern, für immer.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Willst du einen Akteur dazu bringen, etwas immer wieder zu wiederholen, ohne dass der Spieler etwas dazu machen soll, setzen wir die Bausteine in den "Ewig Wiederholen"-Block.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In diesem nächsten Schritt, ist es unser Ziel, dem Zauberer zu helfen, der die Grenzen des Königreiches bewacht, links und rechts, ohne Unterlass. Zu lernen, wie der Wiederholungsbefehl funktioniert, wird dir später eine Menge Zeit ersparen, wenn du dein Spiel aufbaust.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Dies sind deine Blöcke zum zeichnen. Verwende den richtigen Block um den Artisten dorthin zu bewegen wo er hin muss um die grauen Linien auszufüllen.
      2:
        image: notes/C1_artist_intro_2.png
        text: Dies sind Blöcke zum springen. Wenn du diese benutzt dann wird dein Artist sich bewegen aber nichts zeichnen. Benutze diese deshalb um zu nächsten grauen Linie zu springen.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Sind Bienen nicht super cool? Im nächsten Aufgabenteil ist es dein Ziel, den Bienen zu helfen, zu den Blumen zu gelangen, Nektar von den Blüten zu sammeln und zu den Honigwaben hinüber zu fliegen und Honig zu machen. Du wirst für diese Übung die Bausteine "sammle Nektar" und "mache Honig" brauchen.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Jede Blume hat eine unterschiedliche Menge an Nektar: 1, 2, 3 oder mehr. Wir wissen durch die kleine Zahl in der Ecke, wie viel Nektar in den roten Blumen ist. Nimm auf jeden Fall den ganzen Nektar von einer Blume, bevor du dich weiterbewegst. Auch jede Honigwabe kann eine unterschiedliche Menge an Honig aufnehmen: 1, 2, 3 oder mehr. Also mache unbedingt so viel Honig, wie in die Honigwabe hineinpasst.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Wenn du es schaffst, den ganzen Nektar einzusammeln und all den Honig zu machen, erreichst du erfolgreich das nächste Level. Ansonsten versuche diese Aufgabe noch einmal zu lösen. Spiele eine Weile herum und probiere aus, wie es sich anfühlt, ein Programmierer zu sein!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: 'Eine Schleife ist eine Wiederholung einer Tätigkeit. Wenn ich einen Bienenstock untersuche, schaue ich mir einen Wabenrahmen an und stecke ihn wieder zurück. Diese Tätigkeit wiederhole ich viele Male. Das ist eine Schleife: dieselbe Tätigkeit mehrere Male wiederholen.'
      2:
        image: notes/C1_bee_loops_2.png
        text: 'In diesem Level wollen wir, dass die Bienen 3x Nektar von den Blüten sammeln. Anstatt drei "nimm Nektar" Bausteine zu verwenden, wirst du den "wiederholen"-Baustein verwenden, um 3x Nektar zu holen. Drücke "Ausführen" und schau, ob du es richtig gemacht hast. Sehr schön!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Diese Lektion nennt sich das große Ereignis. Es geht darum, Programme im laufenden Betrieb mittels Ereignissen wie einen Tastendruck oder einen Mausklick zu ändern.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: In dieser Übung wirst du mit einer Papier-Fernbedienung gesteuert. Es ist so, als ob man ein Video-Spiel in echt erlebt.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Ein Event ist eine Aktion, die etwas verursacht, zu passieren. Es ist so, wie wenn du den Knopf auf einer Maus drückst und eine Website lädt. Das ist ein Event. Wenn du den Bildschirm auf einem Tablet berührst, dann ist das auch ein Event. Events sind ein guter Weg, dem Benutzer sein Programm weiterzuleiten, wann auch immer man muss, oder will.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Dinge passieren, auf die wir alle reagieren. Sind wir hungrig, gehen wir zum Kühlschrank. Hören wir den Briefträger kommen, wenn er uns Post in den Briefkasten legt, dann gehen wir hin und holen unsere Post. Das sind Events, genau so wie die, die passieren, wenn wir einen Knopf drücken, oder einen Joystick bewegen. Events sind etwas, die uns dazu bewegen etwas zu tun.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'In Video Spielen gibt es ein Event, dass sich "Update" nennt und es passiert entweder 30 oder 60 mal pro Sekunde. Für Videospiel Programmierer ist das fast ein wichtigeres Event, wie die Knöpfe oder der Joystick.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Das Haupt-Event das wir wünschen, dass es stattfindet, ist der "Update" Tick. Und dann überprüfen wir den Joystick im Tick. Also sagen wir: "Oh, hat jemand diesen Knopf in diesem Frage gedrückt? Ja, oder Nein?" Ohne Events, könnte sich der Spieler nicht bewegen, man könnte nicht springen, man könnte überhaupt nicht entscheiden was passiert. Das Videospiel wäre nicht in der Lage, etwas zu animieren.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Beim Sand Skulpturen bauen, muss man wissen, dass Fehlschlag zum Programm gehört. Aber wenn du hartnäckig bleibst, dann wird es besser und spannender für dich. Hartnäckigkeit ist der Name des Spiels. Bleib am Ball; Du wirst es lieben.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Diese Lektion handelt um das Gründen einer Stiftung. In dieser Lektion werden wir an einer Aufgabe arbeiten, die wirklich schwierig sein soll. Du wirst herausfinden, wie man eine Struktur aufbaut, die so groß ist, wie eine dieser Tassen. Sie muss stark genug sein, um das Gewicht eines Buches zu halten.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Es kann sein, dass es vorkommt, dass unsere Kreation nicht funktioniert. Es kann Zeiten geben, in denen wir frustriert sind und aufgeben möchten. Es gibt viele dieser Momente. Aber wenn wir es weiterhin versuchen, uns wirklich anzustrengen, dann können wir sicher sein, dass dieses Gefühl von Frustration nicht lange anhält.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Bei Hartnäckigkeit geht es darum, sich reinzuhängen, auch wenn man wirklich aufgeben will. Wenn man etwas neues und anderes ausprobieren möchte, dann wird es sehr viele Fehlschläge auf dem Weg geben.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Der Trick für Ausdauer ist, weiterzumachen und von deinen Fehlern zu lernen anstatt frustriert aufzugeben. Frustration bedeutet, dass etwas Tolles gleich um die Ecke auf dich wartet. Also höre nicht auf, bevor du es erreicht hast. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hallo, mein Name ist Miral Kotb und ich bin der Schöpfer der Iluminate. In meiner Arbeit gibt es etwas, das wir in beiden Tänzen und in der Programmierung von Lightsuits verwenden. Und das ist Schleifen! Schleifen sind eine Aktion die sich immer und immer wieder wiederholen.
      2:
        image: notes/C1_getting_loopy_2.png
        text: 'Wenn ich mehrfach dasselbe tue - so wie ich mich bewege, um den Reifen in Bewegung zu halten - dann führe ich eine Wiederholung aus. Im Programmieren nennt man das eine Schleife.'
      3:
        image: notes/C1_getting_loopy_3.png
        text: Heute werden wir eine Tanz Party haben. Wir versuchen, Schleifen mit einem neuen Tanz nachzuspielen. Die Iteration. Wir werden über die Schleifen mit einem Tanz lernen. Sie lernen ein paar einfache Schritte und wiederholen Sie sie immer und immer wieder um den Tanz zu vervollständigen.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Hier sind die Schritte, die Sie lernen müssen. Klatschen Sie Ihre Hände. Legen Sie Ihre Hände hinter Ihrem Kopf. Legen Sie Ihre Hände auf die Taille. Heben Sie Ihre linke Hand. Heben Sie Ihre Rechte Hand. Ziemlich einfach, nicht wahr? Sie werden entdecken, dass Sie die Schilder verkürzen können, indem man einige Tanzschritte in Schleifen setzt.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: 'DIese Unterrichtseinheit heisst "Lustige Landkarten". Heute werden wir unserem pelzigen, kleinen Freund Flurb helfen, zu ihrer Frucht zu gelangen.'
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Lass Deinen Flurb zur Frucht gehen. Um dies zu tun, wirst Du herausfinden müssen, welchen Weg Flurb gehen muss und sie mit den Feilen leiten. Damit der Flurb zum Apfel gelangen kann, in welche Richtung muss der Flurb gehen? Stellt Euch auf, um das zu tun!
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Damit sie dorthin gelangt, kreise die Richtung ein, in die sie gehen muss!
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Erstelle deinen Algorithmus durch das Kleben von Pfeilen neben die Karte, die du zu lösen versuchst. Die zweite ist die selbe, aber es geht nach unten.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Das ist wie Programmierung mit Papier. Genau das ist es.
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging ist das Finden und Beheben von Problemen. Es gibt viele Wege Probleme zu lösen. Einer der einfachsten ist sich Schritt für Schritt zu bewegen, bis Du die Stelle gefunden hast, wo etwas falsch läuft. Hier versuche ich einen Flick-Flack auf dem Strahl, aber falle immer wieder herunter.
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Für dieses Puzzle musst Du den Vogel zum Schwein bringen. Sieh Dir das Puzzle an und schaue, welche Richtung er nehmen muss.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Ich heiße Jeremiah. Hi! Ich bin 7 Jahre alt. Ich liebe es mit dem Computer meiner Mama zu spielen, aber erst, wenn sie es mir erlaubt. "Mama, kann ich an den Computer?" - "Na, klar, Schatz!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: 'Ich liebe den Computer meiner Mutter, weil ich damit ins Internet gehen kann. Das Internet ist ein bisschen wie Dein Stadtteil: Du kannst coole Orte besuchen, mit Familie und Freunden plaudern und jede Menge neue Sachen lernen.'
      3:
        image: notes/C1_going_places_safely_3.png
        text: 'Gestern habe ich den Zoo in der Nähe meines Hauses besucht. Ich habe ein Baby-Zebra gesehen. Ich habe ein Foto gemacht und dann die Farben der Streifen geändert, einen Hut hinzugefügt. Das Foto kam in meine Sammlung verrückter Tiere. Prima! Später habe ich dann einen weit entfernten Ort besucht: Kenia. Das ist ein Land in Afrika. Mit jeder Menge Zebras.'
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the Internet had smellorama!" I can talk to different people on the Internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: Nun ist es Zeit um zu schauen ob dein Algorithmus funktioniert. Gehe die Schritte im Algorithmus vorsichtig durch. Sind sie in der richtigen Reihenfolge? Ist es dir gelungen einen Samen zu pflanzen, indem du dem Algorithmus gefolgt bist? Es ist wie mit Bildern programmieren!
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In diesem Beispiel werden wir immer dann Nektar entnehmen WENN die Nektarmenge der violetten Blume größer als 0 ist. Dadurch wird die Biene so lange Nektar aufnehmen wie Nektar vorhanden ist. Tataa!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: 'Eine Binärzahl gibt die Möglichkeit, Informationen nur mithilfe von zwei verschiedenen Alternativen darzustellen. Häufig werden Binärzahlen mit Einsen und Nullen verbunden, man kann sie aber auch mit der Kombination von "An" und "Aus", "Hoch" und "Runter", "Rein" und "Raus", oder jeder anderen Kombination aus Gegensätzen darstellen.'
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: 'Ich wette du kannst Spiele erstellen, die noch mehr Spaß machen, indem du "Bedingungen" benutzt. Versuch es! Bedingungen sorgen dafür, dass der Computer schlau wirkt. Ein Computerprogramm, dass Bedingungen beinhaltet, kann auf den Benutzer reagieren und seine Handlungen entsprechend anpassen.'
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Hier haben wir bereits ein paar Blöcke in unserem Arbeitsplatz. Aber hier ist noch etwas falsch.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Lass uns den Code debuggen, indem wir die Geschwindigkeit reduzieren. Dadurch können wir sehen wie jeder Block einzeln ausgeführt wird.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, da ist das Problem! Der Schnurrbart der Katze ist 75 Pixel groß und nicht 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Hast du jemals vom Begriff debugging gehört? Das ist eine Art und Weise, herraus zu finden, was nicht funktioniert. Wenn du Code debugst, dann kannst du Fehler finden und diese beheben.
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: 'Eine Schleife ist eine Wiederholung einer Tätigkeit. Wenn ich einen Bienenstock untersuche, schaue ich mir einen Wabenrahmen an und stecke ihn wieder zurück. Diese Tätigkeit wiederhole ich viele Male. Das ist eine Schleife: dieselbe Tätigkeit mehrere Male wiederholen.'
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Bisher hast du eine Animation oder eine Geschichte geschaffen, die jedes Mal, wenn du sie abspielst, genau dasselbe macht. Nun kannst du ein interaktives Spiel erstellen, das man tatsächlich spielen kann.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Es gibt den "Pfeil"-Baustein und den "Figur bewegen"-Baustein. Du kannst diese Bausteine zusammenfügen und so deine Figuren mit den Pfeiltasten bewegen.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C3_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C3_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In diesem Beispiel werden wir immer dann Nektar entnehmen WENN die Nektarmenge der violetten Blume größer als 0 ist. Dadurch wird die Biene so lange Nektar aufnehmen wie Nektar vorhanden ist. Tataa!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Hast du jemals vom Begriff debugging gehört? Das ist eine Art und Weise, herraus zu finden, was nicht funktioniert. Wenn du Code debugst, dann kannst du Fehler finden und diese beheben.
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C3_debugging_bee_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Bisher hast du eine Animation oder eine Geschichte geschaffen, die jedes Mal, wenn du sie abspielst, genau dasselbe macht. Nun kannst du ein interaktives Spiel erstellen, das man tatsächlich spielen kann.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Es gibt den "Pfeil"-Baustein und den "Figur bewegen"-Baustein. Du kannst diese Bausteine zusammenfügen und so deine Figuren mit den Pfeiltasten bewegen.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: 'Wenn Du fertig bist, klicke auf "Speichern" und "Beenden". Damit kommst Du zurück zum Haupt-Puzzle-Arbeitsplatz. Die neue Funktion, die Du erzeugt hast, erscheint als grüner Block in der Funktionskategorie in Deinem Werkzeugkasten. Greife und ziehe es in den Hauptarbeitsplatz und benutze es wie jeden anderen Block zum Lösen des Puzzles.'
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C4_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C4_intro_3.png
        text: 'If I drag the move block to our work space and press "run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Dein Bildschirm ist in drei Hauptbereiche geteilt. Links ist das Spielfeld, wo Dein Programm laufen wird. Die Anleitung für jedes Level steht unterhalb des Spielfeldes. Der mittlere Bereich ist der Werkzeugkasten, und jeder der Blöcke ist ein Stück Code. Der weiße Bereich wird Arbeitsbereich genannt, in dem wir unser Programm erstellen werden.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Hi, ich bin Kathleen Kennedy und ich bin Produzentin von Star Wars: Das Erwachen der Macht. Heute wirst du mit einem unserer Stars arbeiten, BB-8. BB-8 ist ein kugelförmiger Droide. Alles was er macht und jede Bewegung wird über Computer-Software gesteuert. Informatik verändert jede Industrie, von Marketing über das Gesundheitswesen bis zum Film. Tatsächlich haben über 100 Informatiker zusammen an Das Erwachen der Macht gearbeitet.'
      2:
        image: notes/starwars_intro_2.JPG
        text: 'Hi, ich bin Rachel Rose. Ich bin Senior Ingenieur bei ILM und ich leite das Animations- und Kreaturenteam. In Das Erwachen der Macht unterstütze ich das Künstlerteam, welches die Knochensysteme erstellt. Dies sind Teile eines Charakters, welche sich bewegen und es der Figur erlauben glaubwürdig auszusehen.'
      3:
        image: notes/starwars_intro_3.JPG
        text: In der nächsten Stunde werden wir unser eigenes Star Wars Spiel erschaffen. Dadurch wirst du grundlegende Konzepte der Programmierung lernen. Normalerweise besteht Programmierung nur aus Text, aber wir werden Blöcke benutzen, durch hin und her schieben können wir Programme schreiben. Im Hintergrund erstellst du dennoch Code. Wenn du die Grundlagen beherrscht werden wir zu JavaScript wechseln, eine der weit verbreitetsten Programmiersprachen im Web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Zum Start werden wir mit Rey arbeiten, um den BB-8 alle Schrottteile sammeln zu lassen. Dein Bildschirm ist in drei Teile aufgeteilt. Links siehst du das Star Wars Spiel. Die Befehle für jedes Level werden darunter gegeben.
      5:
        image: notes/starwars_intro_5.JPG
        text: Dieses mittlere Feld ist die Toolbox und jeder Block ist ein Befehl an BB-8.
      6:
        image: notes/starwars_intro_6.JPG
        text: Der leere Bereich rechts wird Arbeitsbereich genannt. Dort werden wir unser Programm zusammenbauen.
      7:
        image: notes/starwars_intro_7.JPG
        text: 'Wenn ich einen "moveLeft();"-Block benutze, was passiert dann? BB-8 wird sich ein Raster nach links bewegen.'
      8:
        image: notes/starwars_intro_8.JPG
        text: 'Und was wenn ich etwas danach machen möchte? Ich kann weitere Blöcke unserem Programm hinzufügen. Ich wähle den "moveUp();"-Block und ziehe diesen unter den bestehenden Block. Dann lasse ich los und beide Blöcke werden sich verbinden.'
      9:
        image: notes/starwars_intro_9.JPG
        text: 'Wenn ich "Ausführen" drücke, wird BB-8 diese Befehle der Reihe nach ausführen. Wenn du einen Block löschen möchtest, ziehe ihn einfach zurück in die Toolbox.'
      10:
        image: notes/starwars_intro_10.JPG
        text: Du kannst jederzeit den Zurücksetzen-Knopf benutzen, um BB-8 zurück auf Start zu bringen. Nun leg los!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: 'Hinter den Blöcken, die wir verwendet haben, stehen JavaScript-Befehle. JavaScript ist zur Zeit die beliebteste Programmiersprache der professionellen Entwickler. Blöcke sind ein guter Anfang, um das Programmieren zu lernen, und an berühmten Universitäten wie Harvard und Berkeley wird tatsächlich auch so begonnen. Aber nachdem man die Grundlagen gelernt hat, werden Computerprogramme häufig getippt, da dies schneller geht. '
      2:
        image: notes/starwars_typing_2.JPG
        text: Wir können hunderte von Befehlen tippen, anstatt sie erst in der Toolbox zu suchen und herauszuziehen. Weil du das Tippen gerade erst lernst, wirst du vielleicht zu Beginn langsamer sein. Wir möchten dich trotzdem bitten, es einmal zu versuchen.
      3:
        image: notes/starwars_typing_3.JPG
        text: 'In der oberen rechten Ecke des Arbeitsbereichs kannst du in jeder Aufgabe die "Zeige Quelltext"-Schaltfläche anklicken, um von Blöcken zu Quellcode umzuschalten und zu tippen.'
      4:
        image: notes/starwars_typing_4.JPG
        text: In der nächsten Lektion werden wir mit dem Textmodus beginnen. Hier kannst du weiterhin Blöcke aus der Toolbox ziehen oder die Befehle eingeben. Wenn du mit dem Eingeben beginnst, erscheinen Namen für mögliche Befehle. Du kannst so direkt den gewünschten Befehl auswählen, so bist du schneller. In meinem Beruf nutze ich diese Vervollständigung jederzeit.
      5:
        image: notes/starwars_typing_5.JPG
        text: 'Wenn du programmierst, musst du sehr genau sein. Du musst die Befehle exakt schreiben, neben Groß- und Kleinschreibung musst du Klammern und Semikolon beachten. Beim kleinsten Fehler wird BB-8 dich nicht mehr verstehen.'
      6:
        image: notes/starwars_typing_6.JPG
        text: Wenn du in einer Zeile einen Fehler machst, dann hebt der Editor ihn für dich hervor, damit du versuchen kannst, den Quelltext zu ändern und den Fehler zu beheben.
      7:
        image: notes/starwars_typing_7.JPG
        text: 'Wenn du nicht weiter kommst, kannst du jeder Zeit mit dem "Neu starten"-Knopf von vorne anfangen. Du kannst auch in den Blockmodus wechseln, durch klicken in die rechte obere Ecke. Ok, gib dem Textmodus eine Chance! Und wenn du Fehler machst, nicht verzweifeln. Jeder braucht ein paar Versuche um es richtig zu machen.'
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hallo, mein Name ist Charita Carter. Ich bin Senior Produzentin hier bei Walt Disney Imagineering. Ich bin verantwortlich für die Leitung der Teams, welche Attraktionen für unsere Gäste herstellen. Wir suchen immer nach Wegen die Erfahrung für unsere Gäste zu verbessern und Technologie bildet die Grundlage dafür.
      2:
        image: notes/starwars_events_2.JPG
        text: Glückwunsch, du hast es geschafft! Du hast BB-8 programmiert. Nun bist du bereit für etwas schwereres. Auf geht’s. Da du nun die Grundlagen gelernt hast, gehen wir rückwärts in der Zeit, um unser eigenes Spiel mit R2-D2 und C3PO zu bauen.
      3:
        image: notes/starwars_events_3.JPG
        text: Dafür müssen wir etwas lernen, was Entwickler täglich benutzen, Ereignisse genannt. Ereignisse sagen deinem Programm das es auf etwas reagieren oder warten soll und wenn es geschieht soll eine Aktion ausgeführt werden.
      4:
        image: notes/starwars_events_4.JPG
        text: Zum Beispiel wenn die Maus geklickt wird, eine Taste gedrückt oder auf den Bildschirm getippt wird.
      5:
        image: notes/starwars_events_5.JPG
        text: Wir werden R2-D2 dazu bringen eine Nachricht an einen Rebellenpilot zu übermitteln und dann nach unten zum anderen Piloten zu gehen. Wir werden Ereignisse nutzen um ihn zu bewegen, indem der Spieler hoch/runter Tasten benutzt, oder die hoch/runter Knöpfe.
      6:
        image: notes/starwars_events_6.JPG
        text: |
          Wir nutzen das whenUp() -Ereignis um nach oben zu laufen. Wenn der Spieler nach oben drückt, wird der Code an diesem Block ausgeführt. Das Selbe machen wir um 
          R2-D2 nach unten zu bewegen.
      7:
        image: notes/starwars_events_7.JPG
        text: Dazu werden wir den whenUp()-Befehl benutzen. Wenn du diesen Befehl aus der Toolbox ziehst, wirst du sehen das er mit einer geschweiften Klammer anfängt und endet, anstatt eines Semikolon. Dies erlaubt es uns weitere Befehle in die Mitte zu platzieren. Jeder Befehl darin wird ausgeführt, wenn der Spieler die nach-oben-Pfeiltaste drückt.
      8:
        image: notes/starwars_events_8.JPG
        text: Wir wollen das R2-D2 nach oben geht, also platzieren wir einen goUp(); Block innerhalb des Befehls. Das gleiche tun wir um R2-D2 nach unten zu bewegen.
      9:
        image: notes/starwars_events_9.JPG
        text: Anstatt Code zu schreiben, welcher R2-D2 bewegt, können wir ihn auf die Tasten reagieren lassen, um ihn so über den Bildschirm zu bewegen. Schritt für Schritt, so wird dein Spiel viel interaktiver.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: 'Hallo, mein Name ist Alice und ich leite die Produkt- und Ingenieurteams hier bei Code.org und ich habe an dem Tutorial gearbeitet, dass du gerade spielst.'
      2:
        image: notes/starwars_congrats_2.JPG
        text: 'Du hast es bis zum letzten Level geschafft. Glückwunsch! Du hast nun alles gelernt um dein eigenes Star Wars Spiel herzustellen. Nun gibt es keine Anweisungen mehr, keine Puzzle zu lösen. Du kannst dein eigenes Spiel machen und frei entscheiden. Noch eine Sache: du hast weitere Töne und Befehle freigeschalten, um noch mehr zu machen.'
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[Schüler reden] Wir haben ein Spiel erschaffen, bei dem du Punkte für Ballonsäue bekommst. Das Schwierige dabei ist, dass jedes Mal ein Sturmtruppler auftaucht. Eventuell ist dein ganzer Bildschirm voll mit Ballonsäuen und wenn du 10.000 berührst, gewinnst du.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[Schüler reden] Wir haben ein Spiel erstellt, bei dem du nicht verlieren kannst und alles was du tötest bringt dir Punkte. Für mein Programm habe ich die Tasten vertauscht. Wenn du nach oben klickst, läuft der Charakter nach unten, wenn du rechts klickst läuft er nach links. Das macht es echt schwer! Manchmal bekommst du einen Vorteil wenn du der Entwickler des Spiels bist. Habe ich ihn bekommen? Klar!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: 'Wenn du mit deinem Spiel fertig bist, wähle "abschließen" um einen Link zu bekommen. So kannst du es mit deinen Freunden teilen oder auf deinem Handy spielen. Viel Spaß!'
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi, ich bin Kathleen Kennedy und ich bin Produzentin von Star Wars: Das Erwachen der Macht. Heute wirst du mit einem unserer Stars arbeiten, BB-8. BB-8 ist ein kugelförmiger Droide. Alles was er macht und jede Bewegung wird über Computer-Software gesteuert. Informatik verändert jede Industrie, von Marketing über das Gesundheitswesen bis zum Film. Tatsächlich haben über 100 Informatiker zusammen an Das Erwachen der Macht gearbeitet.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: 'Hi, ich bin Rachel Rose. Ich bin Senior Ingenieur bei ILM und ich leite das Animations- und Kreaturenteam. In Das Erwachen der Macht unterstütze ich das Künstlerteam, welches die Knochensysteme erstellt. Dies sind Teile eines Charakters, welche sich bewegen und es der Figur erlauben glaubwürdig auszusehen.'
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: 'In der nächsten Übung werden wir unser eigenes Star-Wars-Spiel erstellen. Dabei wirst du die grundlegenden Konzepte des Programmierens lernen. Normalerweise schreibt man Computerprogramme in Textform, aber wir werden Blöcke verwenden, die wir bewegen und verbinden können, um Programme zu erstellen. Zu Beginn werden wir mit Rey arbeiten, um BB-8 so zu programmieren, dass er alle der Schrott-Teile einsammelt. '
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Dein Bildschirm ist in drei Bereiche geteilt. Links ist das Star-Wars-Spielfeld, in dem das Programm ablaufen wird. Die Hinweise zu jeder Aufgabe stehen unter dem Spielfeld.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Dieses mittlere Feld ist die Toolbox und jeder Block ist ein Befehl an BB-8.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: 'Der leere Bereich auf der rechten Seite wird "Arbeitsfläche" genannt. Dort werden wird unser Programm zusammenbauen.'
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: 'Wenn ich einen "moveLeft();"-Block benutze, was passiert dann? BB-8 wird sich ein Raster nach links bewegen.'
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: 'Und was wenn ich etwas danach machen möchte? Ich kann weitere Blöcke unserem Programm hinzufügen. Ich wähle den "moveUp();"-Block und ziehe diesen unter den bestehenden Block. Dann lasse ich los und beide Blöcke werden sich verbinden. Wenn ich "Ausführen" drücke, wird BB-8 diese Befehle der Reihe nach ausführen.'
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Wenn du einen Block löschen möchtest, dann löse ihn von den übrigen Blöcken und ziehe ihn zurück in den Werkzeugkasten.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Du kannst jederzeit den Zurücksetzen-Knopf benutzen, um BB-8 zurück auf Start zu bringen. Nun leg los!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hallo, mein Name ist Charita Carter. Ich bin Senior Produzentin hier bei Walt Disney Imagineering. Ich bin verantwortlich für die Leitung der Teams, welche Attraktionen für unsere Gäste herstellen. Wir suchen immer nach Wegen die Erfahrung für unsere Gäste zu verbessern und Technologie bildet die Grundlage dafür.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Glückwunsch, du hast es geschafft! Du hast BB-8 programmiert. Nun bist du bereit für etwas schwereres. Auf geht’s. Da du nun die Grundlagen gelernt hast, gehen wir rückwärts in der Zeit, um unser eigenes Spiel mit R2-D2 und C3PO zu bauen.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: Dafür müssen wir etwas lernen, was Entwickler täglich benutzen, Ereignisse genannt. Ereignisse sagen deinem Programm das es auf etwas reagieren oder warten soll und wenn es geschieht soll eine Aktion ausgeführt werden.
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Zum Beispiel wenn die Maus geklickt wird, eine Taste gedrückt oder auf den Bildschirm getippt wird.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Wir werden R2-D2 dazu bringen eine Nachricht an einen Rebellenpilot zu übermitteln und dann nach unten zum anderen Piloten zu gehen. Wir werden Ereignisse nutzen um ihn zu bewegen, indem der Spieler hoch/runter Tasten benutzt, oder die hoch/runter Knöpfe.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Wir nutzen das whenUp()-Ereignis und verbinden damit den goUp()-Block. Wenn der Spieler die Pfeil-nach-oben-Taste drückt, wird dieser Befehl ausgeführt. Das Gleiche machen wir um R2-D2 nach unten zu bewegen. Anstatt Code zu schreiben, welcher R2-D2 bewegt, können wir ihn auf die Tasten reagieren lassen, um ihn so über den Bildschirm zu bewegen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Schritt für Schritt, so wird dein Spiel viel interaktiver.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: 'Hallo, mein Name ist Alice und ich leite die Produkt- und Ingenieurteams hier bei Code.org und ich habe an dem Tutorial gearbeitet, dass du gerade spielst.'
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: 'Du hast es bis zum letzten Level geschafft. Glückwunsch! Du hast nun alles gelernt um dein eigenes Star Wars Spiel herzustellen. Nun gibt es keine Anweisungen mehr, keine Puzzle zu lösen. Du kannst dein eigenes Spiel machen und frei entscheiden. Noch eine Sache: du hast weitere Töne und Befehle freigeschalten, um noch mehr zu machen.'
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[Schüler reden] Wir haben ein Spiel erschaffen, bei dem du Punkte für Ballonsäue bekommst. Das Schwierige dabei ist, dass jedes Mal ein Sturmtruppler auftaucht. Eventuell ist dein ganzer Bildschirm voll mit Ballonsäuen und wenn du 10.000 berührst, gewinnst du.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[Schüler reden] Wir haben ein Spiel erstellt, bei dem du nicht verlieren kannst und alles was du tötest bringt dir Punkte. Für mein Programm habe ich die Tasten vertauscht. Wenn du nach oben klickst, läuft der Charakter nach unten, wenn du rechts klickst läuft er nach links. Das macht es echt schwer! Manchmal bekommst du einen Vorteil wenn du der Entwickler des Spiels bist. Habe ich ihn bekommen? Klar!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: 'Wenn du mit deinem Spiel fertig bist, wähle "abschließen" um einen Link zu bekommen. So kannst du es mit deinen Freunden teilen oder auf deinem Handy spielen. Viel Spaß!'
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Ich bin Jens Bergensten, besser bekannt als Jeb. Ich bin leitender Entwickler für Minecraft hier bei Mojang in Stockholm. Ich habe mit 11 oder 12 mit dem Programmieren angefangen, weil ich Spiele machen wollte. Ein Freund meines Vaters sagte mir, um Spiele zu entwickeln, müsste ich Programmieren lernen. So habe ich angefangen. Ich gestalte gern und mache mir Gedanken über den Aufbau von Spielen. Das gefällt mir so sehr an Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: In der nächsten Stunde erlernst du die Grundlagen der Informatik, indem du Alex oder Steve dazu programmierst, durch einen simulierten Teil einer Minecraft-Welt zu laufen.
      3:
        image: notes/mc_intro_3.JPG
        text: 'Traditionell wird in Textform programmiert, aber heute benutzen wir Blockly: ein System, bei dem man per Drag & Drop grafische Blöcke verschiebt und so Programme schreibt. Dabei erstellst du JavaScript-Code.'
      4:
        image: notes/mc_intro_4.JPG
        text: Die Konzepte, die du hier erlernst, sind die Grundlage der Informatik und werden von Programmierern tagtäglich verwendet. Hier bei Mojang nutzen wir dieselben Konzepte für Minecraft.
      5:
        image: notes/mc_intro_5.JPG
        text: Bevor du anfängst, suchst du dir einen Charakter aus. Ich nehme Alex. Jetzt erstellen wir den Code für ein Programm, mit dem sie sich über den Bildschirm bewegen kann.
      6:
        image: notes/mc_intro_6.JPG
        text: Dein Bildschirm ist in drei Hauptbereiche unterteilt. Links ist das Minecraft-Spielfeld, in dem dein Programm ausgeführt wird. Die Anweisungen für jeden Level stehen untendrunter.
      7:
        image: notes/mc_intro_7.JPG
        text: "Der mittlere Bereich ist die Werkzeugkiste und jeder dieser Blöcke ist ein Befehl, der Alex' Aktionen steuert."
      8:
        image: notes/mc_intro_8.JPG
        text: Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen.
      9:
        image: notes/mc_intro_9.JPG
        text: 'Was passiert, wenn wir den "vorwärts"-Block in den Arbeitsbereich ziehen und dann auf "Ausführen" klicken? Alex bewegt sich im Raster um ein Feld nach vorn.'
      10:
        image: notes/mc_intro_10.JPG
        text: 'Und wenn wir etwas tun wollen, nachdem sie ein Feld vorgegangen ist? Wir können unserem Programm einen weiteren Block hinzufügen. Ich nehme den "nach rechts"-Block und ziehe ihn unter meinen "vorwärts"-Block, bis diese orangefarbene Linie erscheint. Dann lasse ich los und die beiden Blöcke verbinden sich. Betätigen wir "Ausführen" jetzt erneut, führt Alex die gestapelten Befehle im Arbeitsbereich von oben nach unten aus.'
      11:
        image: notes/mc_intro_11.JPG
        text: Möchtest du einen Block löschen, ziehst du ihn einfach aus dem Stapel zurück in die Werkzeugkiste.
      12:
        image: notes/mc_intro_12.JPG
        text: 'Um deine Änderungen zu verwerfen und den Level wieder in den Ausgangszustand zu bringen, benutze die "Neu beginnen"-Schaltfläche rechts oben im Arbeitsbereich. Siehst du das kleine Dreieck auf den Richtungsänderungsblöcken? Wenn du so ein Dreieck siehst, kannst du damit eine andere Option auswählen. Jetzt lass uns programmieren!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Ich bin Lydia Winters, Markendirektorin bei Mojang. Wir haben dieses Spiel namens Minecraft herausgebracht.
      2:
        image: notes/mc_repeat_2.JPG
        text: Bei Minecraft erkunde ich am liebsten. Ich streife unheimlich gern durch Höhlen, um zu sehen, was es dort zu entdecken gibt. Ich kann nicht programmieren und bin deswegen sehr gespannt darauf, es in den Minecraft-Lektionen zu lernen.
      3:
        image: notes/mc_repeat_3.JPG
        text: 'Im letzten Level brauchten wir viele "vorwärts"-Blöcke. Es wäre aber leichter, wenn man dem Computer sagen könnte, er soll den "vorwärts"-Befehl vier- oder fünfmal ausführen. Zum Glück können Computer Befehle sehr gut wiederholen, mithilfe von Wiederholungsschleifen.'
      4:
        image: notes/mc_repeat_4.JPG
        text: "Beim Aufbau von Minecraft benutzen wir Wiederholungsschleifen zum Platzieren aller Grundmaterialien einer neuen Welt. Das sind Tausende von Blöcken. Wir nutzen Schleifen auch für anderes, z. B., damit sich Alex' Füße beim Gehen vor und zurück bewegen. Wiederholungsschleifen sind sehr wichtig beim Programmieren."
      5:
        image: notes/mc_repeat_5.JPG
        text: Es wird Nacht, darum werden wir uns in den nächsten Levels ein Haus zum Schutz bauen. Das geht mithilfe der Wiederholungsschleifen ganz leicht.
      6:
        image: notes/mc_repeat_6.JPG
        text: 'Um eine Wand unseres Hauses zu bauen, können wir Alex entweder viermal vorwärts gehen und Bretter platzieren lassen, oder wir befehlen ihr, "vorwärts" zu gehen und ein Brett zu platzieren, und lassen sie diese Aktion mit dem "wiederholen"-Block mehrmals ausführen. Jetzt klicken wir den "wiederholen"-Block an und sagen ihr, wie oft sie die Aktion ausführen soll. Bauen wir schnell unser Haus, bevor es dunkel wird! Viel Spaß!'
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Jetzt lernen wir etwas über Wenn-Anweisungen. Wenn-Anweisungen sind ein grundlegendes Element beim Programmieren. Sie helfen Computern, Entscheidungen zu treffen.
      2:
        image: notes/mc_if_statements_2.JPG
        text: 'Alle Computer nutzen Wenn-Anweisungen, sogar mein Smartphone. Wenn ich mein Smartphone entsperre, startet ein Code, der besagt: Wenn das korrekte Passwort eingegeben wird, schalte das Telefon frei. Ansonsten erscheint eine Fehlermeldung.'
      3:
        image: notes/mc_if_statements_3.JPG
        text: "Mit Wenn-Anweisungen in deinem Code kannst du Steves und Alex' Reaktionen auf das steuern, was ihnen in der Welt begegnet. Wenn vor ihnen ein Fels ist, können sie nach links gehen. Oder nach rechts, wenn sie gegen einen Baum laufen."
      4:
        image: notes/mc_if_statements_4.JPG
        text: Hier möchten wir nicht in die Lava fallen. Die Lava lässt sich leicht einplanen. Wir sehen sie ja auf dem Bildschirm. Aber was ist mit der Lava unter dem Stein?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Nachdem wir den Stein abgebaut haben, müssen wir prüfen, ob sich dort Lava befindet, bevor wir vorwärts gehen. Wenn dort Lava ist, müssen wir einen Stein vor unseren Charakter platzieren, bevor wir vorwärts gehen. So können wir sicher weitergehen. Es wird Zeit, etwas abzubauen! Und denk an die Wenn-Anweisung, um dich sicher umherzubewegen.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Glückwunsch! Du hast jetzt die Grundbausteine der Informatik kennengelernt.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nun kannst du mit diesen Bausteinen dein eigenes Werk erstellen. Es gibt keine weiteren Anweisungen und keine Rätsel mehr. Du kannst alles bauen, was du willst. Die Wahl liegt bei dir.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[Schüler reden] Jetzt wird es ernst. Scheren. Ich habe ein L aus Fackeln gemacht. Ich habe ein A aus Birkenholzbrettern gemacht. Es klappt, es klappt. Wir haben ein Haus aus Wolle gebaut!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: 'Wenn dein Werk fertig ist, hol dir über "teilen" einen Link, um es mit deinen Freunden zu teilen. Viel Spaß!'
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Glückwunsch! Du hast jetzt die Grundbausteine der Informatik kennengelernt.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nun kannst du mit diesen Bausteinen dein eigenes Werk erstellen. Es gibt keine weiteren Anweisungen und keine Rätsel mehr. Du kannst alles bauen, was du willst. Die Wahl liegt bei dir.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[Schüler reden] Jetzt wird es ernst. Scheren. Ich habe ein L aus Fackeln gemacht. Ich habe ein A aus Birkenholzbrettern gemacht. Es klappt, es klappt. Wir haben ein Haus aus Wolle gebaut!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Jetzt kannst du alles bauen, was du willst. Viel Spaß!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen.
      7:
        image: notes/gumball_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Der weiße Bereich rechts ist der Arbeitsbereich, in dem wir unser Programm aufbauen.
      7:
        image: notes/iceage_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
