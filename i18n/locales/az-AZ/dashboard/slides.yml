az:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: İlk kod saatınıza xoş gəldiniz! Gəlin, birbaşa proqramlaşdırmanın ilk dadını çıxarmağa dalaq.
      2:
        image: notes/hoc1_2.jpg
        text: 'Kod yazmaq üçün blokları sürükləyib buraxacağınız bir vizual proqramlaşdırma dili olan "Blockly"dən ("Blokli") istifadə edəcəyik.'
      3:
        image: notes/hoc1_3.jpg
        text: 'Proqram kodu çox vaxt yazılır, lakin "Blockly" vizualdır. Hər bir blok "həqiqi" kodun bir sətrinə uyğun gəlir.'
      4:
        image: notes/hoc1_4.jpg
        text: Siz informatikanın əsaslarını, telefon üçün proqram yazmaqdan tutmuş Marsda özüyeriyən aparatları idarə etməyə qədər hər yerdə istifadə olunan anlayışları öyrənəcəksiniz.
      5:
        image: notes/hoc1_5.jpg
        text: Proqram kompüterinizin əməl etməsi üçün əmrlər çoxluğudur.
      6:
        image: notes/hoc1_6.jpg
        text: İlk proqramınızın məqsədi Acıqlı Quşu labirintdən keçirməkdir ki, Yaşıl Donuzu vursun.
      7:
        image: notes/hoc1_7.jpg
        text: Ekranın sol tərəfində proqramınızın icra olunduğu labirint yerləşir. Hər tapmaca üçün təlimatlar labirintin aşağısında verilir.
      8:
        image: notes/hoc1_8.jpg
        text: Ekranın ortasındakı alətlər qutusunda Acıqlı Quş üçün əmrlər yerləşir. Öz kodunuzu qurmaq üçün onlardan istifadə edəcəksiniz.
      9:
        image: notes/hoc1_9.jpg
        text: Sağınızda sizin iş sahənizdir. Burada siz alətlər qutusundan blokları seçməklə öz proqramınızı quracaqsınız. Bloku pozmaq üçün onu küncdəki zibil qutusuna sürükləyin.
      10:
        image: notes/hoc1_10.jpg
        text: 'Hər blok bir göstərişdir. "İrəli get" blokunu iş sahənizə sürükləyib "Proqramı icra et"i bassanız, quş labirintdə bir xana irəliləyər.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Əgər bir proqramı icra edirsinizsə və onu düzəldib yenidən cəhd etmək istəyirsinizsə, "Yenidən başla" düyməsini basın.'
      13:
        image: notes/hoc1_13.jpg
        text: Haydı, gedək, o donuzların dərsini verək!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Salam, mənim adım Cey-Ardır. Avtomobil yarışlarında iştirak edən hər bir komandanın informatika üzrə mütəxəssisə ehtiyacı var. Onlar avtomobildən daxil olan məlumatları təhlil edərək onun daha sürətlə hərəkət etməyini təmin edirlər.
      2:
        image: notes/stage5_2.jpg
        text: Bu tampacalarda siz hara getsə arxasıyla xətt çəkən bir rəssam olacaqsınız.
      3:
        image: notes/stage5_3.jpg
        text: 'Bu blok "100 piksel irəli get" deyir. Piksellər sadəcə ekranınızdakı çox kiçik nöqtələrdir.'
      4:
        image: notes/stage5_4.jpg
        text: 'Bu blok "90 dərəcə sağa dön" deyir. Bu, rəssamınızı labirint tapmacasındakı "dön" blokları qədər döndərəcək.'
      5:
        image: notes/stage5_5.jpg
        text: Rəssamın nə qədər irəli getməyini və ya dönməyini dəyişmək üçün bu blokların hər ikisində oxu klikləyin. Oynaya-oynaya bu yeni bloklarla tanış olun.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Salam, mən Paolayam. Bu tapmacada siz taxıl əkmək üçün sahəsini tamamilə hamarlamalı olan bir fermersiniz.
      2:
        image: notes/stage9_2.jpg
        text: Siz ona bütün torpaq təpəciklərini yığışdıraraq çuxurları doldurmaqda kömək etməlisiniz.
      3:
        image: notes/stage9_3.jpg
        text: Yeni bloklar təpəcikdən bir kürək torpağı götürür və çüxüra bir kürək torpaq doldurur.
      4:
        image: notes/stage9_4.jpg
        text: Çuxurlarin və təpəciklərin ölçüləri müxtəlifdir. Ona görə də siz fermerə neçə kürək istifadə etməli olduğunu deməlisiniz.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Salam, mən Kətiyəm! İnformatikanın ən həyəcanlı cəhətlərindən biri odur ki, kompüter proqramı interaktiv ola bilər.
      2:
        image: notes/flappy02.jpg
        text: "Any time somebody clicks or taps or types on a computer or phone, that generates an EVENT, and there's some code that decides what to do when an EVENT occurs."
      3:
        image: notes/flappy03.jpg
        text: 'For example, you could have an EVENT-HANDLER that says "when the mouse is clicked, play a sound" '
      4:
        image: notes/flappy04.jpg
        text: "Have you ever heard of the game FlappyBird? By using Event handlers, we're going to learn to program our own custom version of FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: "The code you'll write involves dragging and dropping blocks that represent commands for the computer. Under the hood, each of these blocks is represented by real code."
      6:
        image: notes/flappy06.jpg
        text: 'If you take a look at the workspace, there are some green blocks that are filled in for you - these are "event handlers" '
      7:
        image: notes/flappy07.jpg
        text: 'If you want the bird to FLAP when you CLICK the mouse, you can do that by attaching the "FLAP" block to the appropriate event handler, and now in your game whenever you click the mouse, the bird will flap.'
      8:
        image: notes/flappy08.jpg
        text: "In each puzzle of this activity we'll introduce new types of events as green blocks on the workspace, and you can decide the appropriate blocks to add in response to those events."
      9:
        image: notes/flappy09.jpg
        text: 'When you see a drop down arrow like this, that means you can change the settings - like what sound to play when flappy hits the ground.'
      10:
        image: notes/flappy10.jpg
        text: "In the final puzzle you'll be able to create your own game and share it with your friends. Have fun!"
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Salam, mən Markam! Gəlin, dövrləri öyrənək. Dövrlərdən istifadə edərək siz kompüterə tapşıra bilərsiniz ki, istənilən əmrlər çoxluğunu dəfələrlə, neçə min, hətta neçə milyard dəfə təkrar etsin.
      2:
        image: notes/hoc2_2.jpg
        text: Bu tapmacada quşu 5 mövqe irəli hərəkət etdirərək onun donuzu tutmağını istəyirik.
      3:
        image: notes/hoc2_3.jpg
        text: 'Biz köməklik üçün yeni "təkrar et" blokundan istifadə edə bilərik.'
      4:
        image: notes/hoc2_4.jpg
        text: '5 dənə "irəli get" blokundan istifadə etməkdənsə...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Biz "irəli get" blokunu "təkrar et" blokunun içərisində yerləşdirə və bu blokda təkrarlanmaların sayını bildirmək üçün bir ədəd daxil edə bilərik.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Bunu bilmək vacibdir: siz "təkrar et" blokunun daxilində birdən çox əmr yerləşdirə bilərsiniz.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Yeni "təkrar et" blokunuzu istifadə etməyin dadını çıxardın!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Salam, mənim adım Krisdir. "Miami Heat" komandasına qoşulmazdan əvvəl mən Corciya Texnologiya İnstitutunda İnformatika oxumuşam. Gəlin, yeni blokumuzu sınaqdan keçirək, "təkrar et, ta ki" blokunu.'
      2:
        image: notes/hoc3_2.jpg
        text: Bəs əgər biz quşun donuza çatması üçün nə qədər yerdəyişmə etməli olduğunu bilməsək necə?
      3:
        image: notes/hoc3_3.jpg
        text: 'Əgər biz "təkrar et, ta ki" blokunun daxilində "irəli get" blokunu yerləşdirsək, quş donuza çatana (və ya divara dəyənə) QƏDƏR irəli gedəcək.'
      4:
        image: notes/hoc3_4.jpg
        text: 'Bunu bilmək vacibdir: daha əvvəldə olduğu kimi,  biz "təkrar et, ta ki" blokunun daxilində bir neçə blok yerləşdirə bilərik. Bu zaman onların hamısı təkrar olunacaq.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Salam, mən Billəm! Gəlin, yeni bir təməl anlayışı öyrənək: "əgər" ifadələri. Kompüterlər qərarları onların köməyi ilə verir.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Siz özünüz də hər gün "əgər" ifadəsindən istifadə edirsiniz. Hər səhər çölə çıxmazdan əvvəl siz deyirsiniz ki, ƏGƏR çöldə yağış yağırsa mən gödəkçəmi geyinməliyəm.'
      3:
        image: notes/hoc4_3.jpg
        text: Biz zombiyə deyə bilərik ki, yoxlasın, sola yol varmı və ƏGƏR o sola yol tapsa, biz onu həmin tərəfə döndərə bilərik.
      4:
        image: notes/hoc4_4.jpg
        text: 'Bunun kodunu yazmaq üçün gəlin "əgər" blokunu dartaq və onun daxilinə "sola dön" bloku yerləşdirək.'
      5:
        image: notes/hoc4_5.jpg
        text: 'İndi biz bunun aşağısına "irəli get" bloku yerləşdirsək və hamısını "təkrar et" blokunun daxilinə atsaq, onda hər dəfə zombi yerdəyişmə etdikdə o, sol yolun olub-olmamasını yoxlayacaq və əgər varsa dönəcək. Burada "təkrar et" əmri hər addımda yoxlanış üçün vacibdir.'
      6:
        image: notes/hoc4_6.jpg
        text: '"Əgər" ifadələri informatikada həqiqətən də vacib yer tutur. Yazdığım ilk proqramlardan biri "tik-tak-to" oyunu idi və orada bir "əgər" ifadəsi var idi ki, deyirdi: ƏGƏR rəqib oyunu udmağa yaxındrısa, ona qalib gəlmək imkanı verən xananı bağla.'
      7:
        image: notes/hoc4_7.jpg
        text: '"Əgər" blokunu istifadə etməyin kefini çıxardın!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Salam, mənim adım Brinadır, İnstaqramda mühəndisəm. Funsiya təkrar-təkrar istifadə etmək istədiyiniz müəyyən kod sətirləridir, beləliklə, hər dəfə eyni kodu yazmağın yerinə siz sadəcə bir blokdan istifadə edə bilərsiniz.
      2:
        image: notes/stage13_2.jpg
        text: Biz funksiyanı necə yaratmağı öyrənəcəyik. Funksiyanın təyinatının küncündə ulduz olur. Funksiyanın adı ən yuxarı sətirdə yazılir.
      3:
        image: notes/stage13_3.jpg
        text: 'Təyinatın içərisindəki bloklar bizə onun nə etdiyini deyir. Bu funksiya təyinatı "doldur 5" adlanır və "təkrarla" və "doldur" bloklarından ibarətdir.'
      4:
        image: notes/stage13_4.jpg
        text: 'Təyinat iş sahəsində yerləşir, amma bizin fermer biz "doldur 5 funksiyası" blokunu funksiyalar kateqoriyasından çıxarmayınca funksiyanı işə salmayacaq.'
      5:
        image: notes/stage13_5.jpg
        text: 'Gəlin "FUNksiya"dakı "fun"-ı (ingiliscə: "əyləncə") yerinə qoyaq '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Salam, mənim adım Makindedir. Gəlin "nə qədər ki" bloku haqqında öyrənək '
      2:
        image: notes/stage9_6.jpg
        text: '"Hələ ki" bloku başlığında yazılan ifadə "doğru" OLDUĞU MÜDDƏTCƏ içərisinə yerləşdirdiklərinizi təkrarlayacaq.'
      3:
        image: notes/stage9_7.jpg
        text: Məsələn, əgər fermer təpəciyin üzərində dayanırsa, o, altında təpəcik olduğu müddətcə bir kürək torpağı altından yığışdırır.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: 'Salam, mən Trinayam, "Pixar"da işləyirəm. Bir sürü filmin, o cümlədən "Şrek" filminin üzərində işləmişəm.'
      2:
        image: notes/stage11_2.jpg
        text: 'Bu bizim yeni "sayğac" dövrümüzdür. O əmrləri təkrar-təkrar yerinə yetirəcək və siz hər dəfə əmrlərə bir az dəyişiklik edə bilərsiniz.'
      3:
        image: notes/stage11_3.jpg
        text: 'Bu nümunədə bizim "sayğac" dövrümüz "sayğac ilə 50-dən 90-a qədər hər addım 10 olmaqla say" deyir və onun daxilində bizim "kvadrat çək" blokumuz yerləşir. "Dəyişənlər" bölməsindən "sayğac" blokunu götürüb "uzunluq" xanasına dartın.'
      4:
        image: notes/stage11_4.jpg
        text: Bu o deməkdir ki, bizim rəssam ilk öncə kənarları 50 piksel olan kvadrat çəkəcək, sonra isə ölçüyə 10 əlavə edərək kənarları 60 piksel olan kvadrat çəkəcək. Sonra, rəssam kvadratın kənarlarının ölçüsünə ölçü 90-a çatmadığı müddətcə 10 əlavə etməkdə davam edəcək. Beləliklə, biz ölçüsü 50,60,70,80 və 90 olan kvadratlar əldə edəcəyik.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: 'Salam, mən Janetəm, "Zynga"da mühəndisəm.'
      2:
        image: notes/stage15_2.jpg
        text: Bəs əgər bir sürü üçbucaq çəkmək və tərəflərinin fərqli uzunluqda olmağını istəsək?
      3:
        image: notes/stage15_3.jpg
        text: Bütün bu kodu əlimizlə yaza bilərdik, amma biz həm də parametrli bir funksiyadan istifadə edə bilərik.
      4:
        image: notes/stage15_4.jpg
        text: 'Bunu etməkdən ötəri, "üçbucaq çək" funksiyasının təyinatındaki mavi ulduza klikləyin. Sonra "giriş adı" -nı "giriş" blokuna sürükləyiniz.'
      5:
        image: notes/stage15_5.jpg
        text: 'Sonra əgər "x" yazılan sahədə "uzunluq" yazaraq "Enter" düyməsini bassanız, funksiyanız üçün uzunluğu təyin edən giriş veriləni düzəltmiş olarsınız.'
      6:
        image: notes/stage15_6.jpg
        text: 'Sonra isə ulduza klikləyin. İndi, siz,  verilənlər kateqoriyasına klikləməyə bilər və "uzunluq" blokunu funksiya təyinatınızın "irəli get" blokuna sürükləyə bilərsiniz və köhnə rəqəm blokunu kənara çıxarda bilərsiniz.'
      7:
        image: notes/stage15_7.jpg
        text: 'Parametrli funksiyasınızdan istifadə etməkdən ötəri, funksiyalar kateqoriyasına klikləyin və "ölçülü üçbucaq çək" funksiyanızı sürükləyin.'
      8:
        image: notes/stage15_8.jpg
        text: 'İndi  girişə müxtəlif ədədlər verərək müxtəlif ölçüdə üçbucaqlar çəkmək üçün riyaziyyat blokundan istifadə edə bilərsiniz.'
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Təbrik edirik! Axırıncı tapmacanı həll etməklə elə kod yazdınız ki, İSTƏNİLƏN robota budaqlanmayan istənilən uzunluqda bir labirint və ya tunneldə öz yolunu necə tapacağını söyləyə bilər, onun bir zombi, quş, Marsda özüyeriyən aparat, yaxud hətta bir sürücüsüz avtomatik minik maşını olmasından asılı olmayaraq.
      2:
        image: notes/hoc6_2.jpg
        text: 'İstifadə etdiyiniz əsas anlayışlar nə vaxtsa sınaqdan keçirdiyiniz hər bir proqramın və ya mobil əlavənin ürəyidir. Biz "təkrar et", "təkrar et, ta ki", "əgər" və "əgər-əks halda" ifadələri barədə öyrəndik.'
      3:
        image: notes/hoc6_3.jpg
        text: İlk kod saatınızı bəyəndinizsə, infromatika təhsilinizi davam etdirmək üçün code.org ünvanına baş çəkin! Bizim 20 saatlıq kursumuzu başa vurduqdan sonra proqramlaşdırmanın əsaslarını mənimsəyib, telefonlar üçün proqramlar, robotlar üçün əmrlər, oyunlar, ürəyiniz istəyən hər şeyi necə yazmağı öyrənməyə başlaya bilərsiniz.
      4:
        image: notes/hoc6_4.jpg
        text: Texnologiya bizim bütün hərəkətlərimizi dəyişir və fərqi yoxdur, siz cavan yaxud yaşlı olsanız da proqramlaşdırma əyləncəlidir, yaradıcılıqdır və hər kəs onu öyrənə bilər!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Qeydləri göstərmək imkanı tezliklə olacaq!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'Proqramlaşdırmada biz buna dövr deyirik. Dövr proqramınızı təkrar-təkrar yenidən icra etməyin yoludur. Növbəti tapmacada tapşırığınız Annanın "təkrar et" bloku ilə kvadrat düzəltməsinə kömək etməkdir.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
