te:
  data:
    markdown_instructions:
      "pre-assessment survey q25A'_markdown_instruction": "If yes, what computer\nscience course(s) had you taken before your current computer science  class?\n\\r\n"
      2-3 Artist 1 new_markdown_instruction: "Hi, I'm an artist. You can write code\nto make me draw almost anything. Use a few blocks to make me draw over the\ngrey lines in the picture. (Each line is 100 pixels long)\\r\n\\r\n"
      2-3 Artist 11_markdown_instruction: "Give the stop sign a border by making\nan octagon with 100 pixels sides. "
      2-3 Artist 12_markdown_instruction: "Create a circle to finish the eyeball!\n\\r\n\\r\nIf the artist turns 1 degree with each loop, how many times do you\nneed to repeat the code to draw a circle? "
      2-3 Artist 2 new_markdown_instruction: "This house has a half-finished wall.\nEach side is 100, but the half-finished wall is only 50. Complete the wall."
      2-3 Artist 3.4_markdown_instruction: "The jump block moves the artist without\ndrawing. Draw the dashed line using both the `jump forward` and `move forward`\nblocks. Each line is 50 pixels long."
      2-3 Artist 3new_markdown_instruction: "The red hat is 100 pixels tall. Finish\ndrawing a black hat that is 70 pixels shorter. \\r\n\\r\n*(Note: The width of\neach hat is 50 pixels.)*"
      2-3 Artist 4_markdown_instruction: "Help me complete the house for this cat."
      2-3 Artist 6_markdown_instruction: "This house needs a roof! Draw the triangle.  \\r\n\\r\nHint:\nall three sides are the same length.\\r\n\\r\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"\nwidth=\"300\"/>"
      2-3 Artist 7_markdown_instruction: "Finish drawing the last set of windows\non the school so that everyone in class can see outside. \\r\n\\r\nThe sides\nof each square window pane are 25 pixels long. "
      2-3 Artist 8_markdown_instruction: "Time to build a barn!\\r\n\\r\nMake the rooms\nfor each animal by splitting the barn into 2 equal-sized squares. \\r\n\\r\nHint:\nThe rectangle is 200 pixels wide and 100 pixels tall.\\r\n\\r\nThere are many\ndifferent ways to solve this puzzle."
      2-3 Artist 9 NEW_markdown_instruction: "Finish this kite"
      2-3 Artist 9 REPLACEMENT_markdown_instruction: "Finish drawing these stairs!"
      2-3 Artist 9_markdown_instruction: "Finish this kite"
      2-3 Artist Assessment 1_markdown_instruction: "**Assessment:** Finish drawing\nthe last tooth. It is 25 pixels wide and 25 pixels tall."
      2-3 Artist Debugging 1_markdown_instruction: "This hat should only be 50 pixels\nwide. \\r\nCan you fix it?\\r\n\\r\n<br/>\\r\n"
      2-3 Artist Debugging 10_markdown_instruction: "The direction pad on my game\ncontroller is too narrow. \\r\n\\r\nCan you make it wider by 10 pixels?\\r\n\\r\nTry\nrunning the code first to see what's wrong."
      2-3 Artist Debugging 11_markdown_instruction: "My snowflake is falling apart!\\r\n\\r\nCan\nyou figure out what's going wrong?"
      2-3 Artist Debugging 2_markdown_instruction: "This code for the cat's whiskers\nis wrong. \\r\n\\r\nFix this code to draw whiskers that are all the same length."
      2-3 Artist Debugging 3_markdown_instruction: "My boat has a hole! \\r\n\\r\nWhat\ndo you need to fix to make the ends meet?"
      2-3 Artist Debugging 5_markdown_instruction: "The code that we have for the\nleg and foot is wrong. \\r\n\\r\nCan you fix it?"
      2-3 Artist Debugging 6_markdown_instruction: "Looks like I'm sitting on a\nchair that’s missing a leg!\\r\n\\r\nEdit the code to draw the last leg."
      2-3 Artist Debugging 7_markdown_instruction: "Looks like the C in code is drawn\nbackwards!\\r\n\\r\nCan you make it look like a C again?"
      2-3 Artist Debugging 8_markdown_instruction: "My teacher says that I should\nfinish what I start!\\r\n\\r\nHelp me finish my pinwheel. Can you figure out\nwhat's wrong?"
      2-3 Artist Debugging 9_markdown_instruction: "Something is off!\\r\n\\r\nThe\ncode for this stem is wrong. Can you figure out how to get the artist to trace\nthe stem the right way?"
      2-3 Artist Debugging Assessment 1_markdown_instruction: "**Assessment:** \\r\nWhy\ndoes this square end up being 75 pixels too small on each side?  \\r\n\\r\nWhere\ndoes the code go wrong?"
      2-3 Artist Free Play_markdown_instruction: "Free-play! Draw anything you'd\nlike."
      2-3 Artist Functions 1 a_markdown_instruction: "\"Me zombie artist. Me love\ndrawing!\" \\r\n\\r\nHelp the zombie draw square glasses.  \\r\n\\r\nThe bridge\nbetween the glasses is 25 pixels shorter than the width of the squares, which\nis 100 pixels.\\r\n\\r\n"
      2-3 Artist Functions 1_markdown_instruction: "\"Me zombie artist. Me love drawing!\"\n\\r\n\\r\nHelp the zombie draw square glasses.  \\r\n\\r\nThe bridge between the\nglasses is 25 pixels shorter than the width of the squares, which is 100 pixels.\\r\n\\r\n"
      2-3 Artist Functions 10_markdown_instruction: "**Freeplay:** Here are two functions,\none to draw a big gear and one to draw a small gear.  \\r\n\\r\nUse them to\ndraw the inside of a machine!"
      2-3 Artist Functions 11 a_markdown_instruction: "We've renamed the `draw a\nsquare` function to `draw a hexagon`, but it's still giving us squares!  \\r\n\\r\nCan\nyou modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides?\n\\r\n\\r\nDraw the image using the new function!"
      2-3 Artist Functions 11.5 a_markdown_instruction: "Here's that same `draw\na hexagon` function. \\r\n\\r\nWhat happens if you loop the main program **6**\ntimes, turning **60** degrees each time you loop?"
      2-3 Artist Functions 11.5_markdown_instruction: "Here's that same `draw a\nhexagon` function. \\r\n\\r\nWhat happens if you loop the main program 6 times,\nturning 60 degrees each time you loop?"
      2-3 Artist Functions 11_markdown_instruction: "We've renamed the `draw a square`\nfunction to `draw a hexagon`, but it's still giving us squares!  \\r\n\\r\nCan\nyou modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides?\n\\r\n\\r\nDraw the image using the new function!"
      2-3 Artist Functions 12 Mike_markdown_instruction: "Functions are really great\nfor drawing complex things multiple times. \\r\n\\r\nCan you use the `draw a\nflower` function to fill the rest of the planter box?\\r\nThe plants are all\n100 pixels apart."
      2-3 Artist Functions 12 a_markdown_instruction: "Functions are really great\nfor drawing complex things multiple times. \\r\n\\r\nCan you use the `draw a\nflower` function to fill the rest of the planter box?\\r\nThe plants are all\n100 pixels apart."
      2-3 Artist Functions 12_markdown_instruction: "Functions are really great for\ndrawing complex things multiple times. \\r\n\\r\nCan you use the `draw a flower`\nfunction to fill the rest of the planter box?\\r\nThe plants are all 100 pixels\napart."
      2-3 Artist Functions 2 a_markdown_instruction: "Functions let you define new\nblocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into a\nfunction called `draw a square`. This time, use the small green `draw a square`\nblock to call this new function and create the glasses. \\r\n\\r\nThe squares\nin this drawing are 75 pixels apart."
      2-3 Artist Functions 2_markdown_instruction: "Functions let you define new\nblocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into a\nfunction called `draw a square`. This time, use the `draw a square` function\nto create the glasses. \\r\n\\r\nThe squares are 75 pixels apart."
      2-3 Artist Functions 3 a_markdown_instruction: "Edit the \"draw a square\"\nfunction to draw glasses with frames that are 115px on each side. \\r\n\\r\nThe\nsquares are now 45 pixels apart."
      2-3 Artist Functions 3_markdown_instruction: "Edit the function to draw a square\nwith a side length of 115 to draw the bigger glasses. \\r\n\\r\nThe squares\nare now 45 pixels apart."
      2-3 Artist Functions 4 a_markdown_instruction: "Now, put the function inside\nof a loop and add an extra turn to draw these three squares."
      2-3 Artist Functions 4_markdown_instruction: "Now, put the function inside\nof a loop to draw these three squares."
      2-3 Artist Functions 9_markdown_instruction: "**Freeplay:** Here is a snowflake\nfunction. Experiment with it to create a winter scene! \\r\n\\r\nThis is a free\nplay level, so there is no puzzle to solve. Have fun!"
      2-3 Artist Loops 1_markdown_instruction: "Can you make a hexagon with sides\nthat are 100 pixels long to finish the cell? Remember, that means that you\nwill only need to turn 60 degrees!"
      2-3 Artist Loops 2_markdown_instruction: "Now use a repeat block to make the\ncell a shell."
      2-3 Artist Loops New 1_markdown_instruction: "Let's draw this robot's head!\nCan you make a square with sides that are 100 pixels?\\r\n\\r\n<br/>\\r\n"
      2-3 Artist Loops New 10_markdown_instruction: "Now let's connect a bunch of\nV's together in a loop."
      2-3 Artist Loops New 11_markdown_instruction: "Time to make something snazzy!\n\\r\n\\r\nRebuild the code from the last puzzle, but this time, add a left turn\nof 30 degrees inside the loop. Now, repeat it 24 times instead of 8."
      2-3 Artist Loops New 12_markdown_instruction: "Draw a diamond with sides of\n100 pixels. "
      2-3 Artist Loops New 13_markdown_instruction: "We are going to start you with\nsome code (in grey) to make one diamond. \\r\n\\r\nLoop the grey code to create\na fun pattern!"
      2-3 Artist Loops New 14_markdown_instruction: "Play around with the code for\nthe diamond and see what other patterns you can make. \\r\n\\r\nTry changing\nhow many degrees you turn and how many times you loop."
      2-3 Artist Loops New 15_markdown_instruction: "Now, draw anything you like!\\r\n<br/><br/>\\r\n\\r\n"
      2-3 Artist Loops New 2_markdown_instruction: "Here is the same puzzle that\nwe just solved, but this time, we can only use one `move forward` block and\none `turn` block this time.\\r\n\\r\nCan you use a `repeat` to solve this puzzle?"
      2-3 Artist Loops New 9_markdown_instruction: "Draw a simple V (where both sides\nare 50 pixels) to complete the arrow."
      2-3 Artist Nested Loops 1_markdown_instruction: "You've used loops to draw\nshapes before, but now we're going to put loops inside of other loops!\\r\n\\r\nPut\na `repeat` block around this whole stack of code to draw the pattern.\\r\n\\r\n<br/>\\r\n\\r\n"
      2-3 Artist Nested Loops 10_markdown_instruction: "Loop this code 12 times to\ncomplete the pattern."
      2-3 Artist Nested Loops 11_markdown_instruction: "Loop this code 4 times to\ncomplete the pattern, turn 90 degrees after each circle."
      2-3 Artist Nested Loops 12_markdown_instruction: "Loop this code 12 times to\ncomplete the curls."
      2-3 Artist Nested Loops 2_markdown_instruction: "Now loop the triangle 6 times.\n\\r\n\\r\nAfter each triangle, you'll need to turn 60 degrees before drawing\nthe next."
      2-3 Artist Nested Loops 3_markdown_instruction: "You'll need to loop your\ntriangle 12 times to draw this pattern. \\r\n\\r\nDivide the number of degrees\nin a circle (360) by the number of shapes you're drawing (12) to figure out\nhow far to turn after each shape."
      2-3 Artist Nested Loops 4_markdown_instruction: "Loop this diamond 12 times\nto draw a flower!\\r\n\\r\nNote: We'll use the same angle to loop 12 diamonds\nas we did for 12 triangles.  \\r\nHow much do you need to turn after each shape?"
      2-3 Artist Nested Loops 5_markdown_instruction: "Fill in this building's windows\nusing a nested loop. \\r\n\\r\nThe windows are 20 pixels long and 20 pixels\napart."
      2-3 Artist Nested Loops 6_markdown_instruction: "This dinosaur has 8 spikes\nrunning up its tail.\\r\n\\r\nEach spike is 30 pixels long. \\r\n\\r\nLoop the\ntriangle 8 times, but make sure to jump forward after each one!"
      2-3 Artist Nested Loops 7_markdown_instruction: "Loop this triangle 10 times\nto draw the sun. \\r\n\\r\nYou'll need to move and turn after each triangle.\n\\r\n\\r\nYou can figure out how much to turn by dividing the number of degrees\nin a circle by the number of triangles that make it up."
      2-3 Artist Nested Loops 8_markdown_instruction: "Now let's add some grass\nto our picture. \\r\n\\r\nEach tuft of grass is 50 pixels apart."
      2-3 Artist Nested Loops 9_markdown_instruction: "We'll finish this picture\nby adding our flower. \\r\n\\r\nLoop the diamond 12 times to draw the flower."
      2-3 Artist Nested Loops Free Play_markdown_instruction: "Free play, draw something\ncool with nested loops."
      2-3 Bee Conditionals 11_markdown_instruction: "I wonder what's out there!\\r\n\\r\nHelp\nme fly around the yard and collect nectar only from the flowers that have\nsome. "
      2-3 Bee Conditionals 13_markdown_instruction: "There's a lot happening here!\\r\n\\r\nUse\nwhat you've learned to collect all of the nectar and then make the honey."
      2-3 Bee Conditionals 14_markdown_instruction: "Let's put everything together!\\r\n\\r\nUse\nwhat you've learned to help me collect nectar only from flowers that have\nit, using as few blocks as possible.  \\r\n\\r\nDon't forget to make honey\nat the end."
      2-3 Bee Conditionals 15_markdown_instruction: "This stair step pattern should\nlook familiar.  \\r\n\\r\nCan you collect nectar only from the flowers that\nhave some, using as few blocks as possible?"
      2-3 Bee Conditionals 2_markdown_instruction: "I'm a hungry bee! \\r\n\\r\n\\r\nHelp\nme collect all of the nectar from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3_markdown_instruction: "Look at all of that nectar!\\r\n\\r\nHelp\nme collect the nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 5_markdown_instruction: "These magic purple flowers change!\\r\n\\r\nEach\ntime you try the puzzle, purple flowers can have either 1 nectar or none at\nall...but you won't know the number until you run the code! \\r\n\\r\nBe careful\nnot to collect nectar from a purple flower if it doesn't have any. \\r\nYou\nmust first check if the nectar is equal to 1 using the `if nectar` block."
      2-3 Bee Conditionals Assessment 1_markdown_instruction: "**Assessment:** Collect\nall of the nectar.  \\r\nBe careful not to try to collect nectar from a purple\nflower if it doesn't have any."
      2-3 Bee Debugging 1_markdown_instruction: "These blocks are really bugging\nme!\\r\n\\r\nFix the error(s) to collect all of the nectar."
      2-3 Bee Debugging 10_markdown_instruction: "This puzzle is making me loopy!\n\\r\n\\r\nFix the error(s) to collect all of the nectar and make all of the\nhoney."
      2-3 Bee Debugging 2_markdown_instruction: "Can you find the problem here?\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      2-3 Bee Debugging 3_markdown_instruction: "Ooh, this one stings!\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      2-3 Bee Debugging 5_markdown_instruction: "That flower looks tasty! \\r\n\\r\nFix\nthe error(s) to collect all of the nectar.  \\r\nYou can now use both run and\nstep."
      2-3 Bee Debugging 6_markdown_instruction: "What a sweet challenge!\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      2-3 Bee Debugging 9_markdown_instruction: "\"Bee\" patient with this one!\\r\n\\r\nYou\nwill need to fix a couple of things in this program to collect all of the\nnectar and make all of the honey."
      2-3 Bee Debugging Assessment 1_markdown_instruction: "**Assessment:**  Now\nit's time to show what you know!\\r\n\\r\nFix the error(s) to collect all of\nthe nectar and make all of the honey."
      2-3 Bee Functions 1_markdown_instruction: "Functions are blocks of code that\nperform a task.  \\r\n\\r\nUse the `get 2 nectar` function to collect the nectar\nfrom each flower."
      2-3 Bee Functions 10_markdown_instruction: "Purple flowers change between either\n1 or 0 nectar each time you run the puzzle.   \\r\n\\r\nCreate a function that\ncollects nectar only from purple flowers that have nectar."
      2-3 Bee Functions 2_markdown_instruction: "Functions are blocks of code that\nperform a task.  \\r\n\\r\nUse the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 4_markdown_instruction: "The `move and get nectar` function\nturns the bee, collects nectar, and then returns the bee to where it started.  \\r\n\\r\nUse\nthe function to collect all of the nectar."
      2-3 Bee Functions Assessment 1_markdown_instruction: "**Assessment:** Use the\ngiven function to collect nectar from each flower."
      2-3 Bee Functions Assessment 2_markdown_instruction: "**Assessment:** Create\na function to turn, move forward and make 3 honey, then return the bee to\nwhere it started and turn back."
      2-3 Bee Loops 1_markdown_instruction: "Those flowers look tasty!\\r\n\\r\nCollect\nnectar from each of the flowers using the fewest blocks possible."
      2-3 Bee Loops 13_markdown_instruction: "**Assessment:** Collect all of the\nnectar using the fewest blocks possible."
      2-3 Bee Loops 3A_markdown_instruction: "Use a `repeat` loop to collect all\nof the nectar."
      2-3 Bee Loops 3B_markdown_instruction: "Now use the `repeat` block to collect\nall of the nectar and make all of the honey."
      2-3 Bee Loops 4_markdown_instruction: "Such a busy bee!\\r\n\\r\nHelp Bee collect\nall of the nectar and make all of the honey with the fewest blocks possible."
      2-3 Bee Loops 4A_markdown_instruction: "How many times can loops help you in\nthis puzzle?  \\r\n\\r\nLoops are your friend! Use a few of them to complete\nthis puzzle with the fewest blocks possible."
      2-3 Bee Loops 5_markdown_instruction: "The shape of this path is different\nfrom the others. \\r\n\\r\nCan you collect all of the nectar using as few blocks\nas possible?"
      2-3 Bee Loops 7_markdown_instruction: "What a beautiful field of flowers!   \\r\n\\r\nHelp\nthe bee visit each one.\\r\n\\r\nCan you find a way to do it with fewer than\n7 blocks?"
      2-3 Bee Loops 8_markdown_instruction: "These purple flowers have different\namount of nectar each time you run the puzzle. \\r\n\\r\nUse the `while nectar`\nloop to collect all of the nectar. \\r\n\\r\nThis loop will run as long as the\ncondition is true, in this case `nectar > 0`."
      2-3 Bee Loops Assessment 1_markdown_instruction: "**Assessment:** Use a `while`\nloop to collect all of the nectar from these flowers."
      2-3 Maze 1_markdown_instruction: "Can you help me catch the naughty pig? \\r\n\\r\nStack\na couple of `move forward` blocks below the `when run` block and press \"Run\".\n"
      2-3 Maze 12 - One Move Block_markdown_instruction: "Get the mean pig! But this\ntime, you can only use one `move forward` block...\\r\n\\r\nAh, look closely\n- do you see any other blocks that can help you get there?"
      2-3 Maze 12_markdown_instruction: "Suddenly, a magical block appears!  With\nthe `repeat` block, you can loop code over and over.\\r\n\\r\nCan you get to\nthe pig by creating a loop that uses only one `move forward` block inside\nof a `repeat`?"
      2-3 Maze 13_markdown_instruction: "Get me to the pig! You can only use one\n`move forward` block this time"
      2-3 Maze 15_markdown_instruction: "In this puzzle, two `repeat` loops will\nhelp you get to the pig with the fewest number of blocks!"
      2-3 Maze Loops 18_markdown_instruction: "Get me to the sunflower using the\nfewest blocks possible!  \\r\n\\r\nTry using one `repeat` loop inside of another\nto cut down on the amount of code you need."
      2-3 Maze Loops 19_markdown_instruction: "Let's take this to another level!\n\\r\n\\r\nUse loops to get me to the sunflower with the fewest loops possible."
      2-3 Maze Loops Assessment 1_markdown_instruction: "**Assessment:**  Get me\nto the sunflower using only 5 blocks! "
      4-5 Artist 1_markdown_instruction: "Help me finish drawing my box. (Each line\nis 300 pixels long) \\r\n\\r\n"
      4-5 Artist 10_markdown_instruction: "Press \"Run\" to try the code. Then, repeat\nit enough times to complete the drawing. The colors will be different every\ntime."
      4-5 Artist 11_markdown_instruction: "Complete the green lines.  \\r\n\\r\nThe\nlines are 300 pixels long and 15 pixels apart."
      4-5 Artist 2_markdown_instruction: "Loop this code using the `repeat` block\nto complete the square."
      4-5 Artist 3.5_markdown_instruction: "Try to figure out what happens if you\nrun this code (or just press \"Run\" and try it). \\r\n\\r\nNext, repeat the\ncode enough times to complete the drawing!"
      4-5 Artist 3_markdown_instruction: "This rectangular flower bed has a perimeter\nof 600.  \\r\nThe long side has a length of 200. \\r\n\\r\nDraw the rectangle\nusing as few blocks as possible."
      4-5 Artist 4_markdown_instruction: "How many degrees are in a circle?  \\r\n\\r\nLoop\nthe blocks to create a circle of colors."
      4-5 Artist 5_markdown_instruction: "What can we replace \"???\" with to make\nsure that the zombie completes this drawing using the loop provided?"
      4-5 Artist 6_markdown_instruction: "This equilateral triangle has angles of\n60, 60, and 60 degrees. Each side is 200 pixels. Complete the drawing."
      4-5 Artist 7_markdown_instruction: "This right triangle has angles of 30, 60,\nand 90 degrees.  The slanted side's length (length of the hypotenuse) is\n200 pixels. \\r\n\\r\nComplete the drawing."
      4-5 Artist 8_markdown_instruction: "The halfway line on a soccer field is *perpendicular*\nto the sidelines.   \\r\nThis rectangle has a perimeter of 800 pixels total,\nand it is 240 pixels long. How tall is it?   \\r\n\\r\nDraw the bounds and the\nhalfway line."
      4-5 Artist 9_markdown_instruction: "Draw the right half of this image so that\nthe design is symmetrical. \\r\nThe triangles are equilateral and have sides\nthat are 50 pixels long."
      4-5 Artist Assessment 1_markdown_instruction: "**Assessment:** Use a loop to\ndraw the equilateral triangle. Each side is 300 pixels."
      4-5 Artist Free Draw 1_markdown_instruction: "Free Draw!  Draw whatever you\nare inspired to create."
      4-5 Artist Patterns 1_markdown_instruction: "Draw this square using a loop.\\r\n\\r\nEach\nside is 20 pixels long."
      4-5 Artist Patterns 10_markdown_instruction: "This code draws two rows of hexagons\n- loop the whole thing 4 times to draw the whole honeycomb. \\r\n\\r\nYou'll\nneed to jump back 120 pixels in your outermost loop to make sure the artist\ndoesn't draw off the screen."
      4-5 Artist Patterns 11_markdown_instruction: "How many times do you need to\nloop this to draw a half circle?"
      4-5 Artist Patterns 12_markdown_instruction: "If you create another loop like\nthis one, but turn left instead of right, what happens? \\r\n\\r\nCan you repeat\nall of that to draw this wave?"
      4-5 Artist Patterns 13_markdown_instruction: "Now let's loop that whole thing\nfour times to create this picture frame. Watch out for the corners - you can't\njust turn 90 degrees! \\r\n\\r\nIf looping a 3 degree turn 60 times makes a\nhalf circle, which of these blocks of code will make an additional quarter\ncircle for the corners?"
      4-5 Artist Patterns 2_markdown_instruction: "If you place your square loop\ninside another loop, we call that a nested loop. \\r\n\\r\nWhat do you need\nto add as an outer loop to make sure all 15 squares line up next to each other?"
      4-5 Artist Patterns 3_markdown_instruction: "Now let's go one level deeper!\nWe've nested that whole block of code into another loop, but you need to\nget the artist back in place to draw the next line. Which of these code blocks\ncan you place at the end of the outermost loop to draw the whole grid?"
      4-5 Artist Patterns 4_markdown_instruction: "This diamond has 50 pixel sides\nand angles of 120 and 60 degrees. \\r\n\\r\nUse a loop to draw it."
      4-5 Artist Patterns 5_markdown_instruction: "Repeat this code to make a row\nof 6 diamonds. \\r\n\\r\nNotice that we changed our diamond code to repeat 3\ntimes instead of 2 - why do you think that is?"
      4-5 Artist Patterns 6_markdown_instruction: "How many times do you need to\nrepeat this block to draw the full grid of diamonds?\\r\n\\r\n"
      4-5 Artist Patterns 7_markdown_instruction: "Let's modify the code from the\nlast puzzle to make this more complex pattern. Notice how the diamonds overlap\nnow, try changing the first \"jump backwards\" from 100 to 50 (half as far)\n- now how far should the artist go in the second \"jump backwards\"?\\r\n\\r\n"
      4-5 Artist Patterns 8_markdown_instruction: "Use a loop to draw this hexagon\nwith 40 pixel sides and 60 degree angles."
      4-5 Artist Patterns 9.5_markdown_instruction: "Let's loop this code to draw\ntwo rows of hexagons. \\r\n\\r\nNotice how our second row is shifted to the\nright."
      4-5 Artist Patterns 9_markdown_instruction: "Now repeat this code 3 times and\ndraw the whole row. \\r\n\\r\nEach hexagon is 80 pixels wide from the furthest\npoints left to right."
      4-5 Artist Patterns Free Play_markdown_instruction: "Free play - try your hand\nat making a pattern of your own!"
      4-5 Bee Conditionals 1_markdown_instruction: "This cloud is blocking my view!\n\\r\n\\r\nCheck to see if there's a flower under the cloud, and only get nectar\nif there's a flower.   \\r\nBe careful, it can change!"
      4-5 Bee Conditionals 2_markdown_instruction: "More clouds! \\r\n\\r\nCheck underneath\nevery cloud to see if it is hiding a flower before you get nectar.  \\r\n\\r\nRemember:\nNot all clouds hide the same thing!"
      4-5 Bee Conditionals 4_markdown_instruction: "Sometimes this cloud covers a\nflower, and sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else` block\nto collect nectar only if it is a flower.  \\r\nElse, make honey (because it\nis a honeycomb)."
      4-5 Bee Conditionals 5_markdown_instruction: "There will be either a flower\nor a honeycomb under each of those clouds!\\r\n\\r\nUse the `if/else` block\nto collect nectar if there is a flower.\\r\nOtherwise, make honey (because\nthere is a honeycomb)."
      4-5 Bee Conditionals 6_markdown_instruction: "I am not sure how much nectar\nthis flower has, but I know it has either 1, 2, or 3 nectar. \\r\n\\r\nCombine\nthe conditional blocks (`if` and/or `if/else`) to only get as much nectar\nas the flower has. \\r\n\\r\nRemember, the amount of nectar can change each\ntime you run the puzzle!"
      4-5 Bee Conditionals 7_markdown_instruction: "These flowers can have 3, 2,\nor 1 nectar. \\r\n\\r\nComplete the `check purple flower` function and use it\nto collect all of the nectar at the flowers."
      4-5 Bee Conditionals 8_markdown_instruction: "Write the function for `check\nflower make honey`. \\r\n\\r\nYour function should check if the purple flower\nhas 3, 2, or 1 nectar and get all of the nectar. \\r\nThen, move forward and\nmake honey."
      4-5 Bee Conditionals Assessment 1_markdown_instruction: "**Assessment:** This\ncloud is either hiding a flower with one nectar or a honeycomb that needs\none honey.  \\r\n\\r\nComplete the `get nectar or make honey` function, then\ncall it to collect the nectar or honey. \\r\n"
      4-5 Bee Debugging 1_markdown_instruction: "These blocks are really bugging\nme. \\r\n\\r\nCan you fix them?"
      4-5 Bee Debugging 6_markdown_instruction: "The purple flower has a different\namount of nectar each time you run the puzzle. \\r\n\\r\nFix the blocks to get\nall of the nectar from the flower each time."
      4-5 Bee Debugging Assessment 1_markdown_instruction: "**Assessment:** Fix the\ncode."
      4-5 Bee Nested Loops 2_markdown_instruction: "Collect all of the nectar from\neach flower. \\r\n\\r\nUse a nested loop. "
      4-5 Bee Nested Loops 4_markdown_instruction: "Collect all of the nectar from\neach flower and make honey at the honeycomb. \\r\n\\r\nUse a nested loop. "
      4-5 Bee Nested Loops Assessment 1_markdown_instruction: "**Assessment:** Collect\nall of the nectar and make all of the honey using loops."
      4-5 Maze 7_markdown_instruction: "Get the zombie to the sunflower quickly!  \\r\n\\r\nCan\nyou solve the puzzle in fewer than 11 blocks?"
      4-5 Maze 9_markdown_instruction: "Now we have a new block called `repeat until`.  \\r\nThis\nwill let us keep looping commands until the zombie gets the sunflower.  \\r\n\\r\nUse\nthe new `repeat until` block to solve this puzzle in as few commands as possible."
      4-5 Maze Assessment 1_markdown_instruction: "**Assessment:** Get to the sunflower\nusing as few blocks as possible."
      4-5 Maze Conditionals 1_markdown_instruction: "Use the `repeat until` block\nto get the zombie to the sunflower."
      4-5 Maze Conditionals 10_markdown_instruction: "Can you add just 3 blocks to\nhelp the zombie solve a more complex maze? \\r\n\\r\nIf you do it right, he\ncan walk any curvy path no matter the length!"
      4-5 Maze Conditionals 2_markdown_instruction: "Use the `repeat until` block\nto get the zombie to the sunflower."
      4-5 Maze Conditionals 3_markdown_instruction: "Use the `if` block to help me\ndecide when to turn. \\r\n"
      4-5 Maze Conditionals 4_markdown_instruction: "Ok, solve this one just like\nthe last puzzle, but you need to remember how you used the `if` and `repeat\nuntil` blocks together."
      4-5 Maze Conditionals 5_markdown_instruction: "\"Me want sunflower!\"  \\r\n\\r\nUse\nan `if` statement to get the zombie to the sunflower with the fewest number\nof blocks."
      4-5 Maze Conditionals 6_markdown_instruction: "\"Eat sunflower!\"\\r\n\\r\nUse\nan `if` statement to get the zombie to the sunflower with the fewest number\nof blocks."
      4-5 Maze Conditionals 7_markdown_instruction: "The solution to this puzzle\nisn't very different, but watch out for the chompers!"
      4-5 Maze Conditionals 8_markdown_instruction: "The `if/else` block checks a\ncondition, and then does one thing OR another. \\r\n\\r\nUse this new block\nto get me to the sunflower."
      4-5 Maze Conditionals 9_markdown_instruction: "One more practice puzzle with\nthe `if/else` block!\\r\n\\r\nTrace it with your finger to see if you can figure\nit out on your first try."
      4-5 Maze Conditionals Assessment 1_markdown_instruction: "**Assessment:** Use\na `repeat until` and an `if/else` block to get me to the sunflower in as few\nblocks as possible."
      4-5 Nested Loops 1_markdown_instruction: "Complete the code to draw these triangles.  The\nfirst one is done for you.  Hint:  3 triangles in a 360 degree rotation.\\r\n\\r\n"
      4-5 Nested Loops 11_markdown_instruction: "Can you draw these 10 squares of\nthis sidewalk using a nested loop? \\r\n\\r\nEach square is 30 pixels."
      4-5 Nested Loops 12_markdown_instruction: "Can you draw these 36 triangles\nusing a nested loop?"
      4-5 Nested Loops 2_markdown_instruction: "Now nest this loop inside another\nloop to draw 10 triangles.  \\r\nThis is called a \"nested\" loop.  "
      4-5 Nested Loops 3_markdown_instruction: "Create a sun by nesting the starter\ncode in another loop.\\r\n\\r\nTo get this cool design with a hollow center,\nyou'll need to jump forward by the length of the triangle before turning."
      4-5 Nested Loops 5_markdown_instruction: "Loop the given code to create a windmill."
      4-5 Nested Loops 6_markdown_instruction: "Can you draw a hexagon by looping\nthe triangle code?"
      4-5 Nested Loops 7_markdown_instruction: "Loop this design 10 times. \\r\n\\r\nHow\nmuch do you have to turn each time you loop?"
      4-5 Nested Loops 8_markdown_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch do you have to turn each time you loop? "
      4-5 Nested Loops 9_markdown_instruction: "Draw the teeth in the alligator's\nmouth!"
      4-5 Nested Loops Assessment 1_markdown_instruction: "**Assessment:** Use a\nnested loop to complete the design."
      4-5 While Loops 1_markdown_instruction: "Move me to the hole and fill it with\ntwo shovelfuls of dirt, using the `fill` block."
      4-5 While Loops 2_markdown_instruction: "Move me to the pile of dirt and remove\nit with 5 shovel scoops, using the `remove 1` block."
      4-5 While Loops 3_markdown_instruction: "Use as few blocks as possible to complete\nthis puzzle!  \\r\n\\r\nMove me to the pile and remove all the dirt, then move\nto the hole and fill it completely."
      4-5 While Loops 4_markdown_instruction: "Wow, look at that! \\r\n\\r\nI don't\nknow how many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat keeps using the `fill` block until the ground is even?  "
      AWS applab_markdown_instruction: "# Do this stuff now\\r\n\\r\n* step one\\r\n*\nstep two"
      AWS link_markdown_instruction: "# Use this tool for stuff"
      AlgPD DR Free Play_markdown_instruction: "Using a word problem from your existing\ncurriculum or elswhere, complete the Design Recipe and program a function.\nUse a Design Recipe form from your workbook or download a copy [here]('https://code.org/curriculum/algebra/docs/worksheets/design_recipe.pdf')."
      Alien Defender_markdown_instruction: "**Project Idea**: Make a defender game\nin Play Lab!"
      Alien Defender_2018_markdown_instruction: "**Project Idea**: Make a defender\ngame in Play Lab!"
      AllTheThings Applab - Turtle move with button_markdown_instruction: "# Please\nsign in to test applab levels (By design, applab levels only work if signed\nin. Normally, we make people sign in, but this is only enforceable for a whole\nscript and would be annoying to do for the allthethings script).\\r\n # Your\nFirst Interactive App!\\r\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'\nstyle='float: right; width: 250px'> A new group of commands has been added\nto the toolbox called **UI Controls** (User Interface Controls) which are\ncommands that let you interact with, and respond to, the user of your app.\nTo keep it simple, we'll start with just two commands: \\r\n* `onEvent` which\nlet's you run a function in response to some event occuring (such as a button\nclick)\\r\n* `button` which puts a button on the screen\\r\n\\r\n# Do This\\r\nYou\nwill replicate the small app, shown below, which makes the turtle move with\na button click. You will do three things:\\r\n* Add a `button`\\r\n* Add an\n`onEvent` block\\r\n* Add `moveForward` inside the the onEvent function block\\r\n\\r\nHere's\nwhat you should do - you can come back to watch this as many times as you\nneed to get it right.\\r\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\"\nstyle=\"border: solid 1px black; width: 500px; margin: auto\">"
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_markdown_instruction': "<img\nalign=\"right\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\"\nhspace=\"20\">\\r\n            # Task 1: Make a 3x5 letter 'A'\\r\n            Start\nby trying to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation\nwidget. \\r\n          \\r\n            The image is intially setup with the\n*incorrect* dimensions. Your first task is to set the second byte to the 8-bit\nbinary code for 5: 0000 0101. Then you can start entering pixel data to make\nthe A.\\r\n            "
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction': "#\nPixelation: Task 3\\r\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\"\nalign=right width=200 hspace=20>\\r\n**Directions:**\\r\nWe start you out with\nthe 4x4 image Maddie created in the video.\\r\n\\r\nYour task is to fill a 4x4\ngrid with colors using *12-bits per pixel*. The result should look something\nlike (but not exactly) the image shown at right.  \\r\n\\r\nHere are the requirements:\\r\n\\r\n\n* Row 1 - fill with shades of red. \\r\n * Row 2 - shades of green. \\r\n *\nRow 3 - shades of blue. \\r\n * Row 4 - shades of gray.\\r\n"
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction': "#\nColor Pixelation: Task 1\n**Directions:**\n\n* We start you with the 4x2 image\nMaddie was creating, but we've left out the last two squares. \n* Finish\noff the image by figuring out which two colors are missing and encode them.\n"
      App Lab test_markdown_instruction: "<a href=\"https://docs.google.com/document/d/1HgSfQeUI1zxo-3bL-9jhff0jI2um2A-3vwpvy3JAD38\"\ntarget=\"_blank\">Innovation Project</a>"
      AppLab Intro 1 - Add Button_markdown_instruction: "# Getting Started - Add\na button\\r\n\\r\nYou'll need a button on your home screen to go to your new\nscreen. You can make a new button in two ways. \\r\n\\r\n1. If you like the\nstyle of the \"Dogs\" button you can make a copy of it. Click the button and\nthen click \"Duplicate\".\\r\n\\r\n\\t![](https://images.code.org/171aa97d90014f66f999ecf929b672c0-image-1504289310310.08.10\nAM.png)\\r\n\\r\n2. You can also make a new button from scratch by dragging\nit in from the Design Toolbox.\\r\n\\r\n\\t![](https://images.code.org/501c9ddd3e5b737df5b9cf053ae198a7-image-1504289359851.09.09\nAM.png)\\r\n\\r\n3. Click and drag to move your new button where you want it.\\r\n\\r\n3.\nOnce you have a new button give it a clear name, \"catButton\". You can also\nchange its text to read \"Cats!\".\\r\n\\r\n\\t![](https://images.code.org/87586b18b001fae0001d2243f6d09889-image-1504289448320.10.14\nAM.png)\\r\n    \\r\n4. There's lots of other ways you can change the look\nof your button. Experiment with the full menu of options.\\r\n\\r\n5. Once you're\ndone run your app to make sure your button appears. Then click \"Finish\"\nto move on to learn how to make your button actually work."
      AppLab Intro 1 - Add Event_markdown_instruction: "# Getting Started - onEvent\\r\n\\r\nYou're\nback in \"Code Mode\". You'll notice there's already a bit of code in this\napp. This `onEvent()` block runs some code when the `dogButton` is clicked.\nYou're going to need a second `onEvent()` block to make your button work.\nThere's two ways to do this.\\r\n\\r\n1. From Code Mode you can drag in the\nblock \\r\n\\r\n\\t![](https://images.code.org/c1ca564880152242c3bf92b2b9ad4fca-image-1504290427563.26.56\nAM.png)\\r\n    \\r\n2. From Design Mode your button has an \"Events\" tab.\nClick 'Insert and show code' to add the code.\\r\n\\r\n\\t![](https://images.code.org/90d6c0cb723ee4317244f99dcfbd3a66-image-1504290568475.29.18\nAM.png)\\r\n    \\r\n3. Use the drop down to make sure you're making the event\nrespond to the \"catButton\".\\r\n\\r\n\\t![](https://images.code.org/ebef61f18259a2fb0d8addb90d9d8ba4-image-1504290674099.31.03\nAM.png)\\r\n    \\r\n4. The `setScreen()` block changes the screen. Drag this\nblock inside your `onEvent()` block and choose your `catScreen` from the list.\\r\n\\r\n\\t![](https://images.code.org/00433d32665ec6f2aa6a0caac2626568-image-1504290788639.33.02\nAM.png)\\r\n    \\r\n5. Run your app. If everything worked correctly your cat\nbutton should now take you to your cat screen when you click it. When you're\nready move on to learn how to add sounds to your app!"
      AppLab Intro 1 - Add Screen_markdown_instruction: "# Getting Started - Add\na cats screen\\r\n\\r\n1. You're going to make a cats screen. This is \"Design\nMode\" where you can add and edit screens. To add a screen click the screen\ndropdown and select \"New screen\".\\r\n\\r\n\\t![expandable](https://images.code.org/4e90c1d897ede63403a1351f5ec3bfae-image-1504288061907.47.33\nAM.png) \\r\n\\r\n2. Then name your new screen \"catScreen\". \\r\n\\r\n\\t![expandable](https://images.code.org/966a2563aaf8a59a983fe6417d01dae9-image-1504288205242.49.33\nAM.png)\\r\n    \\r\n3. Finally, choose the cats background image of your screen\\r\n\\r\n\\t![expandable](https://images.code.org/ff8509146b8a249973498af63f41b08d-image-1504288758611.51.40\nAM.png)\\r\n    \\r\nOnce you have added your new screen hit \"Finish\" to learn\nhow to add buttons to navigate to the screen."
      AppLab Intro 1 - Add Sound_markdown_instruction: "# Getting Started - Add Sound\\r\n\\r\nApp\nLab can play sound too. You'll need to use the `playSound()` block to do\nit.\\r\n\\r\n1. Drag a `playSound()` block into your `onEvent`. This will make\nthe sound play when your user clicks the button. Then click \"Choose...\"\nfrom the menu.\\r\n\\r\n\\t![](https://images.code.org/9c84293859317f7ae46391a28c5a51e7-image-1504291688560.47.41\nAM.png)\\r\n\\r\n2. Go through the \"Sound Library\" and find the sounds you\nwant. There's tons!\\r\n\\r\n\\t![](https://images.code.org/5393762b4f31fa4f09040ca8b09ca91c-image-1504291692587.47.52\nAM.png)\\r\n\\r\n3. Run your app to check out how your sounds work."
      AppLab Intro 1 - Build Your Adventure_markdown_instruction: "# Build Your Adventure\\r\n\\r\nUse\nthis blank project to build your project. To get you started there's already\na home screen with a couple of buttons. If you want you can **quickly make\ncopies of screens** to build out your world. What will you create?!\\r\n\\r\nWhen\nyou're done you can \"Share\" your work with a friend by phone or with a\nlink. Create your own account to keep building in App Lab!"
      AppLab Intro 1 - Template_markdown_instruction: "# Getting Started - Try this\napp\\r\n\\r\nBefore you build your own Choose Your Own Adventure app, practice\nusing AppLab by building this one about a visit to a pet shop. To get started,\nclick \"Run\" and then navigate to the \"Dogs\" screen. Once you've made\nit there click \"Finish\" to move on."
      AppLab Intro 1 - Try App_markdown_instruction: "# Getting Started - Try this\napp\\r\n\\r\nBefore you build your own Choose Your Own Adventure app, practice\nusing AppLab by building this one about a visit to a pet shop. To get started,\nclick \"Run\" and then navigate to the \"Dogs\" screen. Once you've made\nit there click \"Finish\" to move on."
      AppLab Intro 2 - Edit place1 2_markdown_instruction: "Think about how you want\nyour adventure to continue on this screen. Then add some text to tell your\nstory!\\r\n\\r\n1. Use the screen selector to choose the screen you just made\n([Show me where](#triggercallout=selector))\\r\n2. Drag a new \"text area\"\nonto your screen to add it. ([Show me where](#triggercallout=textArea))\\r\n3.\nDrag the bottom right corner of your text area to change its size.\\r\n4. Change\nthe text to tell your user what happens on this screen. Then change the color\nof your text if you want!\\r\n\\r\nClick \"Run\" and then \"Finish\" to move\non.\\r\n\\r\n![expandable](https://images.code.org/8ba0d4f0eccaf83163e86d10eec3a291-image-1505766539456.gif)\nClick to see a GIF of these steps"
      AppLab Intro 2 - Edit place1_markdown_instruction: "On the last screen you\ngave your character a choice between to actions or places. Pick one of them\nand start making a screen for it!\\r\n\\r\n1. In the screen selector choose\n\"New screen...\" ([Show me where](#triggercallout=selector))\\r\n2. Change\nthe \"id\" of the screen to something clear, for example the name of the new\nlocation ([Show me where](#triggercallout=idChange))\\r\n3. You can switch\nback and forth between your two screens from the screen selector. ([Show me\nwhere](#triggercallout=selector))\\r\n4. You can select the \"background-color\"\nof your screen if you like.\\r\n\\r\nClick \"Run\" and then \"Finish\" to move\non and start adding to your screen."
      AppLab Intro 2 - Edit startScreen_markdown_instruction: "Welcome to App Lab!\nRight now you're in **Design Mode** where you can personalize the look of\nyour app. Get your adventure started by picking a fun title!\\r\n\\r\n1. Click\nthe title of your app. ([Show me where](#triggercallout=titleCallout))\\r\n2.\nChange the \"text\" to pick whatever name you like! ([Show me where](#triggercallout=designMenu))\\r\n3.\nScroll down the menu to change the color of your title ([Show me where](#triggercallout=changeTextColor))\\r\n\\r\nOnce\nyou like the look of your title hit \"Run\" once to make sure it's looking\ngood. Then hit \"Finish\" to move on!\\r\n\\r\n![expandable](https://images.code.org/47c8fc2986226beaa39e382bc0759797-image-1505765264098.com-gif-maker.gif)\nClick here to see all three steps in a GIF"
      AppLab Intro 2 - Edit startScreen2_markdown_instruction: "Nice work! Time to\nstart filling in your story.\\r\n\\r\n1. Click the story text on this screen.\n([Show me where](#triggercallout=storyText))\\r\n2. Fill in your story ([Show\nme where](#triggercallout=editStoryText))\\r\n3. Explore the different properties\nyou can change in the menu. Personalize this screen's look! ([Show me where](#triggercallout=changeTextColor))\\r\n\\r\nHit\n\"Run\" once to make everything looks good. Then hit \"Finish\" to move on!"
      AppLab Intro 2 - Template_markdown_instruction: "# Getting Started - Try this\napp\\r\n\\r\nBefore you build your own Choose Your Own Adventure app, practice\nusing AppLab by building this one about a visit to a pet shop. To get started,\nclick \"Run\" and then navigate to the \"Dogs\" screen. Once you've made\nit there click \"Finish\" to move on."
      AppLab Intro 2 - Try App_markdown_instruction: "<img src=\"https://images.code.org/1f43ffc6a6da4c3a7644802cdbbff58b-image-1504737782528.jpg\",\nstyle=\"float:right;width:200px\">\\r\n\\r\n# Getting Started - Try this app\\r\n\\r\nYou're\ngoing to build a \"Choose Your Own Adventure\" app by extending this project.\nTo get you started you already have the parts of your project outlined in\nblue. Hit \"Run\" and click through what's already been created for you.\n\\r\n\\r\nOnce you see how the project already works hit \"Finish\" to start\nmaking it yours."
      AppLab Intro 2 - Try Cat Commander_markdown_instruction: "This is what the\ncode for Cat Commander looks like. Take one minute to scroll through the code\nand see if you can understand how it works. Talk about it with a partner.\nWhat patterns do you see? \\r\n\\r\nOnce you're done, move on by clicking \"Run\"\nthen \"Finish\", to learn to build your own adventure."
      AppLab Intro 2 - add Button_markdown_instruction: "Now you have two screens,\nbut no way to get between them. Time to start adding buttons!\\r\n\\r\n1. Use\nthe screen selector to go back to your \"startScreen\" ([Show me where](#triggercallout=selector))\\r\n2.\nDrag a button onto the screen ([Show me where](#triggercallout=dragButton))\\r\n3.\nGive your button a clear \"id\" that describes what it does ([Show me where](#triggercallout=changeButtonID))\\r\n4.\nChange the \"text\" of your button to describe where it will take the user.\\r\n5.\nPersonalize your button's other properties like \"text color\" or \"background\ncolor\".\\r\n\\r\nClick \"Run\" then \"Finish\" to move on and start writing\nthe code that will make your button work\\r\n\\r\n![expandable](https://images.code.org/43f2678e4748a1fa09556f75cad65e97-image-1505766882756.gif)\nClick to see a GIF of all steps"
      AppLab Intro 2 - add images_markdown_instruction: "You now know everything\nyou need to make a simple Choose Your Own Adventure app, but you can add so\nmuch more! If you want to add images to your screen it's easy!\\r\n\\r\n1.\nIn another tab in your browser go online and find an image you want to use\\r\n2.\nRight click the image and save its URL (usually \"Copy link address\" or \"Copy\nimage URL\")\\r\n3. Back in App Lab go to Design Mode\\r\n4. Drag an \"image\"\nelement onto your screen\\r\n5. Paste the URL you copied into the \"image\"\nproperty\\r\n\\r\n\"Run\" your app once to test it. Then hit \"Finish\" to move\nto learn to add sounds.\\r\n\\r\n![expandable](https://images.code.org/5b977b1c127b3fcb1761aadcb74c79e8-image-1505772215256.gif)\nClick to see GIF of all steps"
      AppLab Intro 2 - add more buttons 2_markdown_instruction: "Time to add a second\nbutton and write the code to make it work.\\r\n\\r\n1. Drag a second button\nonto your \"startScreen\" and give it a clear \"id\"\\r\n2. Change the text\nand color of your button\\r\n3. In Code Mode drag in a second `onEvent()` block\nand drag a `setScreen()` inside of it\\r\n4. Set the \"id\"s of your `onEvent()`\nand `setScreen()` blocks to the button and screens you added\\r\n\\r\nIf everything\nworked you should now have a second button that changes the screen. \"Run\"\nyour app and hit \"Finish\" if it worked.\\r\n\\r\n![expandable](https://images.code.org/33d1a6d2dcc81ed8ecd0966d2f0682ca-image-1505770427380.gif)\nClick to see a GIF of all steps"
      AppLab Intro 2 - add more buttons_markdown_instruction: "If this is going to\nbe a real Choose Your Own Adventure, you're need to add some more choices!\nStart by adding a screen for the second choice your player could make.\\r\n\\r\n1.\nUse the screen selector to add a new screen. Give it a clear \"id\".\\r\n2.\nSet the \"background color\" of your screen\\r\n3. Add a \"Text Area\" to your\nscreen describing what happens on it.\\r\n\\r\nClick \"Run\" then \"Finish\"\nto move on. You'll add another button and write the code to make it work.\\r\n\\r\n![expandable](https://images.code.org/f1c83578a245d832c94c78aeba6ef317-image-1505768404048.gif)\nClick to see a GIF of all steps"
      AppLab Intro 2 - add onEvent_markdown_instruction: "<img src=\"https://images.code.org/89a0cddfc305cb44a3d888c5de864d2e-image-1505423852271.17.02\nPM.png\" style=\"float:right;height:120px\">\\r\n\\r\nThis is Code Mode where\nyou write the code of your app. You're going to add code that looks like\nthis picture.\\r\n\\r\n1. Click and drag an \"onEvent\" block into your workspace\n([Show me where](#triggercallout=onEvent))\\r\n2. Use the left dropdown to\npick your button's ID\\r\n3. Click and drag a \"setScreen\" block inside the\n\"onEvent\" block ([Show me where](#triggercallout=setScreen))\\r\n4. Use the\ndropdown to pick your new screen's ID\\r\n\\r\nYour app now switches screens!\nTry it out yourself by hitting \"Run\". Then \"Finish\" to move on.\\r\n\\r\n![expandable](https://images.code.org/b9970c3478dfb15e7531034d26fbcc40-image-1505767231404.gif)\nClick to see all steps in a GIF"
      AppLab Intro 2 - add sound_markdown_instruction: "<img src=\"https://images.code.org/3c1d6506a6a3c350380b921e08588a2b-image-1505429594117.52.37\nPM.png\" style=\"float:right;height:100px\">\\r\n\\r\nYou can add sound to your\napp too! Add them outside an `onEvent()` to play from the start of the adventure\n(good for background music) or inside an `onEvent()` to play when that button\nis clicked (good for \"Win\" / \"Lose\" sounds).\\r\n\\r\n1. Drag a `playSound()`\nblock into your program\\r\n2. Click the dropdown, then \"Choose...\", then\n\"Sound Library\" to find the library of sounds built into App Lab\\r\n3. Try\nout the \"Background\" category for longer songs that will play for your entire\nadventure.\\r\n4. Hit \"Choose\" to select the sound you like.\\r\n5. You can\nalso drag code inside an `onEvent` block to play sound only when an event\nhappens. Shorter sounds work better here.\\r\n\\r\nRun your app. There should\nbe sound playing now too!"
      AppLab Intro 2 - finish and share_markdown_instruction: "Congrats on finishing\nyour Hour of Code! You can share your work with friends! Click \"Share\" to\nget a link or even text it to them.\\r\n\\r\nYou can keep working on your project\nhere. Whenever your friends go to the link you shared they'll get the latest\nversion you made. How far will you build your adventure?"
      AppLab Intro 3 - Change Screen Color_markdown_instruction: "Set the screen's\n`\"background-color\"` to `\"red\"`. Click the picture to see how. \\r\n\\r\n![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)\n"
      AppLab Intro 3 - Change Text 2_markdown_instruction: "Give `\"label1\"` a `\"font-size:`\nof 40 and set its `\"text-color\"` to `\"blue\"`. Don't forget the double\nquote `\"` for colors. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>"
      AppLab Intro 3 - Change Text_markdown_instruction: "Make the `\"font-size\"`\nof `\"label1\"` even bigger. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)"
      AppLab Intro 3 - Change Two Buttons_markdown_instruction: "Make the `\"background-color\"`\nof the left button `\"red\"` and the right one `\"blue\"`. Hover over a button\nwith your mouse to read its `\"id\"`. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)"
      AppLab Intro 3 - Full Text_markdown_instruction: "Set the `\"text\"` of this\nlabel to anything you want (for example `\"Hi there!\"`). Make sure you include\nthe double-quotes `\"`. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)"
      AppLab Intro 3 - onEvent before_markdown_instruction: "Set the screen's `\"background-color\"`\nto `\"orange\"`. Then add code inside the `onEvent()` so the button will set\nthe screen's `\"background-color\"` to `\"pink\"`. Click the picture to see\nhow.\\r\n\\r\n![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)"
      AppLab Intro 3 - onEvent intro_markdown_instruction: "Blocks placed inside\nthe new `onEvent()` block will only run when you `\"click\"` the `\"bigButton\"`.\nAdd code so the button will make the screen's `\"background-color\"` turn\n`\"green\"`. Remember to use double-quotes `\"` for colors. Click the picture\nto see how.\\r\n\\r\n![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)"
      AppLab Intro 3 - onEvent mouseInOut_markdown_instruction: "Your program can\nuse multiple `onEvent()` blocks. The left button already sets both buttons'\n`\"background-color\"` to `\"purple\"`. Add code to make the right button\nset both buttons' `\"background-color\"` to `\"green\"`. Click the picture\nto see how.\\r\n\\r\n![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)"
      AppLab Intro 3 - onEvent mouseOut_markdown_instruction: "The `\"mouseout\"`\nevent fires when your mouse moves out of a button. Write code that will set\nthe screen's `\"background-color\"` back to `\"black\"` and set the button's\n`\"text\"` to `\"Off!\"` when the mouse moves out of the button. Remember\nto use double quotes `\"`. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/a3403900844f631cc2579539c8d68ed1-image-1505937421979.gif)"
      AppLab Intro 3 - onEvent mouseOver_markdown_instruction: "`\"click\"` is just\none type of event. `\"mouseover\"` events run when your mouse is over a button,\neven if you don't click it. Add code to set the `\"background-color\"` of\nthe screen to `\"black\"` when the mouse is over the `\"offButton\"`. Click\nthe picture to see how.\\r\n\\r\n![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)"
      AppLab Intro 3 - onEvent twoButtons_markdown_instruction: "Your program can\nuse multiple `onEvent()` blocks. The left button already sets both buttons'\n`\"background-color\"` to `\"purple\"`. Add code to make the right button\nset both buttons' `\"background-color\"` to `\"green\"`. Click the picture\nto see how.\\r\n\\r\n![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)"
      AppLab Intro 3 - playSound_markdown_instruction: "The `\"playSound()\"` block\nplays sounds. The `\"horseButton\"` already plays a horse sound. Add code\nto make the `\"duckButton\"` play a duck sound. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)"
      AppLab Intro 3 - share and keep going_markdown_instruction: "Make a This or\nThat app. Decide what happens to the screen and text when the user clicks\neach button.\\r\n\\r\nWhen you're done with your app click \"Share\" at the\ntop to send it to a friend to play! Click the picture to see how to share.\\r\n\\r\n![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)"
      AppLab Intro 3 - stopSound_markdown_instruction: "The `stopSound()` block stops\nall sounds. The `\"playButton\"` plays a very long sound. Add code to make\nthe `\"stopButton\"` stop all sounds. Click the picture to see how.\\r\n\\r\n![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)"
      AppLab Intro 3 - thisOrThat_markdown_instruction: "Make a This or That app.\nDecide what happens to the screen and text when the user clicks each button.\\r\n\\r\nWhen\nyou're done with your app click \"Share\" at the top to send it to a friend\nto play! Click the picture to see how to share.\\r\n\\r\n![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)"
      AppLab Intro 4 - Change Screen Color_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54\nAM.png\" style=\"height:150px\"> \\r\n</div>\\r\n\\r\n**Goal:** Make the screen\n`\"red\"`. \\r\n\\r\n**How:** Drag in the block and hit \"Run\".\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)"
      AppLab Intro 4 - Change Text 2_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\" style=\"height:150px;\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger and blue \\r\n\\r\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80`\nand `\"text-color\"` of `\"blue\"`.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>"
      AppLab Intro 4 - Change Text_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23\nPM.png\" style=\"height:150px\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger\\r\n\\r\n**How:** Drag in the block and then choose a bigger `\"font-size\"`\nof `\"label1\"`.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)"
      AppLab Intro 4 - Change Two Buttons_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33\nAM.png\" style=\"height:150px\">\\r\n</div>\\r\n\\r\n**Goal:** Make the buttons\n`\"red\"` and `\"blue\"`\\r\n\\r\n**How:** Hover over the buttons with your\nmouse to read its `\"id\"`. Then set the `\"background-color\"` of each block\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)"
      AppLab Intro 4 - Full Text_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/9109abf972acc093fd591eb56619aee5-image-1506617570302.52.18\nAM.png\" style=\"height:150px\">\\r\n</div>\\r\n\\r\n**Goal:** Change the words\non the screen\\r\n\\r\n**How:** Set the `\"text\"` of the label to anything\nyou want, like `\"My app is uh-mazing!`\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)</details>\\r\n\\r\n"
      AppLab Intro 4 - Video designMode_markdown_instruction: "# Sneak Peak of Design\nMode"
      AppLab Intro 4 - Video onEvent_markdown_instruction: "# Using onEvent"
      AppLab Intro 4 - Video share your work_markdown_instruction: "# Make and Share\nYour App!"
      AppLab Intro 4 - Video share_markdown_instruction: "# Make and Share Your App!"
      AppLab Intro 4 - onEvent before_markdown_instruction: "<img src=\"https://images.code.org/d1d4126613db6bc3db331d47eecf0748-image-1506619589642.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n**Goal:** The screen starts as\n`\"orange\"`. The button turns the screen `\"pink\"`.\\r\n\\r\n**How:** Before\nthe `onEvent()` set the screen's `\"background-color\"` to `\"orange\"`.\nInside the `onEvent()` set it to `\"pink\"`.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)"
      AppLab Intro 4 - onEvent intro_markdown_instruction: "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n**Goal:** The screen turns `\"green\"`\nwhen you click the button\\r\n\\r\n**How:** Add code inside the `\"onEvent\"`\nthat sets the screen's `\"background-color\"` to `\"green\"`.\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)"
      AppLab Intro 4 - onEvent mouseOver_markdown_instruction: "`\"click\"` is just\none type of event. `\"mouseover\"` events run when your mouse is over a button,\neven if you don't click it. Add code to set the `\"background-color\"` of\nthe screen to `\"black\"` when the mouse is over the `\"offButton\"`. Click\nthe picture to see how.\\r\n\\r\n![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)"
      AppLab Intro 4 - onEvent twoButtons_markdown_instruction: "<img src=\"https://images.code.org/624964d54e36fe248f91f08563a57c4b-image-1506620778039.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n**Goal:** The right button makes\nboth buttons `\"green\"`\\r\n\\r\n**How:** Add a second `onEvent()` below the\nfirst. Set the `\"id\"` to `\"rightButton\"`. Inside it add code that changes\nboth buttons' `\"background-color\"`\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)"
      AppLab Intro 4 - playSound_markdown_instruction: "**Goal:** The right button\nplays a duck sound\\r\n\\r\n**How:** The `playSound()` block plays sounds. Add\nan `onEvent()` for the right button and use the `playSound()` block inside\nit.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)"
      AppLab Intro 4 - stopSound_markdown_instruction: "**Goal:** The right button\nstops all sound\\r\n\\r\n**How:** Add an `onEvent()` for the right button and\nuse the `stopSound()` block inside it.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)"
      AppLab Intro 4 - thisOrThat design_markdown_instruction: "**Goal:** Try out\nDesign Mode to keep making changes to your This or That App. There's also\nsome new blocks in your toolbox! You'll learn more about these in later lessons.\\r\n\\r\n**How:**\nClick into \"Design\" to quickly edit how your app looks or add screen elements\nyourself. Experiment with some of the new blocks in the toolbox."
      AppLab Intro 4 - thisOrThat template_markdown_instruction: "**Goal:** Try out\nDesign Mode to keep making changes to your This or That App. You'll learn\nmore in later lessons.\\r\n\\r\n**How:** Click into \"Design\" to quickly edit\nhow your app looks or add screen elements yourself."
      AppLab Intro 4 - thisOrThat_markdown_instruction: "**Goal:** Make a \"This\nor That\" app, then share it with friends\\r\n\\r\n**How:** You know how to\nuse `\"background-color\"`, `\"font-size\"`, `\"text-color\"`, `\"text\"`,\n`playSound()`, and `onEvent()`. Use them to set the look of your app and make\nit change when your user clicks the buttons. Click \"Share\" to send it to\na friend.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)"
      AppLab Intro 4 - video onEvent_markdown_instruction: "# Using onEvent"
      AppLab Intro 5 - Change Screen Color_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54\nAM.png\" style=\"height:150px\"> \\r\n</div>\\r\n\\r\n**Goal:** Make the screen\n`\"red\"`. \\r\n\\r\n**How:** Drag in the block, change the color, then hit\n\"Run\"\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)"
      AppLab Intro 5 - Change Text 2_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\" style=\"height:150px;\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger and blue \\r\n\\r\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80`\nand `\"text-color\"` of `\"blue\"`.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>"
      AppLab Intro 5 - Change Text_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23\nPM.png\" style=\"height:150px\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger\\r\n\\r\n**How:** Drag in the block and then choose a bigger `\"font-size\"`\nof `\"label1\"`.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)"
      AppLab Intro 5 - Change Two Buttons_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33\nAM.png\" style=\"height:150px\">\\r\n</div>\\r\n\\r\n**Goal:** Make the buttons\n`\"red\"` and `\"blue\"`\\r\n\\r\n**How:** Hover over the buttons with your\nmouse to read its `\"id\"`. Then set the `\"background-color\"` of each block\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)"
      AppLab Intro 5 - Full Text_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\" style=\"height:200px\">\\r\n</div>\\r\n\\r\n**Goal:** Change the words\non the screen and the colors of the buttons.\\r\n\\r\n**How:** Set the `\"text\"`\nof the label to anything you want, like `\"Welcome to my app!\"`. Then set\nthe `\"background-color\"` of the buttons.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)"
      AppLab Intro 5 - addButton_markdown_instruction: "**Goal:** Add a right arrow\nto the screen for switching the next image. In the next level you'll make\nit work.\\r\n\\r\n**How:** Use Design Mode to drag in an `\"image\"` element.\nThe icon library has many different arrows to choose from. \\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/066245e52135c038502620a19f961667-image-1507570682956.gif)"
      AppLab Intro 5 - go further_markdown_instruction: "**Goal:** This is a blank\nApp Lab project. Build whatever you like here! You also have a few more blocks\nyou can try out if you like. Don't forget to share your work!"
      AppLab Intro 5 - onEvent intro_markdown_instruction: "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n**Goal:** The screen turns `\"green\"`\nwhen you click the button\\r\n\\r\n**How:** Add code inside the `\"onEvent\"`\nthat sets the screen's `\"background-color\"` to `\"green\"`.\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)"
      AppLab Intro 5 - onEvent twoButtons_markdown_instruction: "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\"\nstyle=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Complete this flashlight\napp. The right button should switch the make the screen `\"black\"` and the\ntext `\"white\"`\\r\n\\r\n**How:** Add a second `onEvent()` block below the\nfirst. Then set the `\"background-color\"` of the screen and `\"text-color\"`\nof the label.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)"
      AppLab Intro 5 - playSound_markdown_instruction: "<img src=\"https://images.code.org/cdc81e79687693db50383a41894d6679-image-1507566452258.26.22\nAM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Add two more\nanimals to the sound board.\\r\n\\r\n**How:** You'll need to add two `onEvent()`\nblocks to the program. Then use `playSound()` inside them.\\r\n\\r\n**Show Me:**\n![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)"
      AppLab Intro 5 - rate it app_markdown_instruction: "<img src=\"https://images.code.org/74c675e72f33fa368057d7b783e50e31-image-1507568235560.gif\"\nstyle=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Complete this simple\nprofile. Set the user name. Choose a main image. When you click the heart\nit should switch to a filled in heart icon and turn red.\\r\n\\r\n**How:** You'll\nneed to use the `\"image\"` property.\\r\n\\r\n**Show Me:** ![expandable](https://images.code.org/217e10ec9ac91037b80b963fab299a60-image-1507568801064.gif)"
      AppLab Intro 5 - setScreen_markdown_instruction: "**Goal:** Write code to let\nthe user switch to your second screen.\\r\n\\r\n**How:** Add an `onEvent()`\nfor the button you just created. Use `setScreen()` to switch between screens.\\r\n\\r\n**Show\nMe:** ![expandable](https://images.code.org/9ac5102ec678c1ecd0278446560ba617-image-1507571425597.gif)"
      AppLab Intro 5 - share keep going_markdown_instruction: "**Goal:** Share your\napp with someone, or just send it to yourself! Then keep building it out!\\r\n\\r\n**How:**\nClick \"Share\" to find lots of ways to share your app. Here's some ideas\nto try\\r\n\\r\n* Add a button that takes you back from `\"screen2\"` to `\"screen1\"`\\r\n*\nAdd more screens with more images\\r\n* Add more types of reaction buttons\nthat users can click"
      AppLab Intro 5 - socialTemplate_markdown_instruction: "**Goal:** Add a button\nto the screen for scrolling to the next image. Give it a good icon, like a\nright arrow. In the next level you'll make it work.\\r\n\\r\n**How:** Use Design\nMode to drag in a button. The icon library has many different arrows to choose\nfrom. Don't forget you can search for them.\\r\n\\r\n**Show Me:** "
      AppLab Intro 6 - Change Screen Color_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54\nAM.png\" style=\"height:150px\"> \\r\n</div>\\r\n\\r\n**Goal:** Make the screen\n`\"red\"`. \\r\n\\r\n**How:** Drag in the block, change the color, then hit\n\"Run\"\\r\n\\r\n**Stuck? Click here** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)"
      AppLab Intro 6 - Change Text 2_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\" style=\"height:150px;\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger and blue \\r\n\\r\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80`\nand `\"text-color\"` of `\"blue\"`.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>"
      AppLab Intro 6 - Full Text_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\" style=\"height:200px\">\\r\n</div>\\r\n\\r\n**Goal:** Change the words\non the screen and the colors of the buttons.\\r\n\\r\n**How:** Set the `\"text\"`\nof the label to anything you want, like `\"Welcome to my app!\"`. Then set\nthe `\"background-color\"` of the buttons.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)"
      AppLab Intro 6 - animalSoundBoard_markdown_instruction: "**Goal:** Keep building\nout the Animal Sound board. Then make sure to \"Share\" it.\\r\n\\r\n**How:**\nAdd new buttons for more animals. Or make the soundboard for a totally different\ntopic entirely!"
      AppLab Intro 6 - blankApp_markdown_instruction: "**Goal:** This is a completely\nblank App Lab App. Build whatever you want from scratch!?\\r\n\\r\n**How:**\nYou're in control here. You decide what you want to make!"
      AppLab Intro 6 - onEvent intro_markdown_instruction: "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n**Goal:** The screen turns `\"green\"`\nwhen you click the button\\r\n\\r\n**How:** Add code inside the `\"onEvent\"`\nthat sets the screen's `\"background-color\"` to `\"green\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)"
      AppLab Intro 6 - onEvent twoButtons_markdown_instruction: "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\"\nstyle=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Complete this flashlight\napp. The right button should switch the make the screen `\"black\"` and the\ntext `\"white\"`\\r\n\\r\n**How:** Add a second `onEvent()` block below the\nfirst. Then set the `\"background-color\"` of the screen and `\"text-color\"`\nof the label.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)"
      AppLab Intro 6 - playSound Template_markdown_instruction: "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Add an animal\nto the sound board. If you don't want to find a picture of your animal then\nchange the color of the speaker icon to one you like.\\r\n\\r\n**How:** Add\nan `onEvent()` and use `playSound()` inside of it. Find an animal sound you\nlike in the sound library. For the picture you can either upload an image\nyou find online and change the button's `\"image\"` property, or just change\nthe `\"icon-color\"`. \\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)"
      AppLab Intro 6 - playSound_markdown_instruction: "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Add an animal\nto the sound board. If you don't want to find a picture of your animal then\nchange the color of the speaker icon to one you like.\\r\n\\r\n**How:** Add\nan `onEvent()` and use `playSound()` inside of it. Find an animal sound you\nlike in the sound library. For the picture you can either upload an image\nyou find online and change the button's `\"image\"` property, or just change\nthe `\"icon-color\"`. \\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/80b30e5bd85dd5430e2c375568d53580-image-1508432171734.gif)"
      AppLab Intro 6 - quizApp_markdown_instruction: "**Goal:** Build out three questions\nin this Quiz App. You can always make more questions by duplicating screens.\nThen send it to a friend!\\r\n\\r\n**How:** Run the app first and try clicked\nall the buttons to see how it works. Then from Design Mode you can change\nthe default text for the questions and buttons. In Code mode create response\ntext for when the user clicks the different buttons. Customize the colors\nor add images if you want too!"
      AppLab Intro 6 - thisOrThatAddButton Template_markdown_instruction: "**Goal:**\nAdd a second button to the screen that says \"Right!\"\\r\n\\r\n**How:** In\nDesign Mode drag in a new button. Position and resize it. Then set its `\"text\"`,\n`\"background color\"`, and `\"font size\"`\\r\n\\r\n**Show Me:** "
      AppLab Intro 6 - thisOrThatAddButton_markdown_instruction: "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Add a second\nbutton to the screen that says \"Right!\"\\r\n\\r\n**How:** In Design Mode drag\nin a new button. Position and resize it. Then set its `\"text\"`, `\"background\ncolor\"`, and `\"font size\"`\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)"
      AppLab Intro 6 - thisOrThatAddScreen_markdown_instruction: "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Create a new\nscreen called `\"rightScreen\"`. Add a short text label to the screen.\\r\n\\r\n**How:**\nIn Design Mode add a new screen. Change its `\"id\"` to be `\"rightScreen\"`.\nThen drag a label onto the screen with a short message to your user. You can\nalso duplicate the `\"leftScreen\"` to do this.\\r\n\\r\n**Stuck? Click here:**\n![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)"
      AppLab Intro 6 - thisOrThatPersonalize_markdown_instruction: "<img src=\"https://images.code.org/762507aef26d512f820c42fb2e7fc6f1-image-1508386296370.11.19\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Start building\nyour own \"Choose Your Own Adventure\" app. Don't forget to \"Share\" it\nwith someone!\\r\n\\r\n**How:** Choose the basic story you want to tell, like\nwho your character is and the setting. Then change the text and images of\nyour app to match the story. You can always add more screens as you keep building\nout your adventure.\\r\n\\r\n<details><summary><b>Stuck? Click here for some\nideas</b></summary>\\r\n\\r\n<li>Make an adventure about your favorite fictional\ncharacter</li>\\r\n<li>Make an adventure about a famous (or not-so-famous person)\nyou're a big fan of</li>\\r\n<li>Make an adventure that has a lot of unexpected\ntwists or has a difficult moral choice</li>\\r\n\\r\n</details>"
      AppLab Intro 6 - thisOrThatSetScreen_markdown_instruction: "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop\n(1).gif\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** The screen\nswitches to `\"rightScreen\"` when the user clicks the \"Right!\" button.\\r\n\\r\n**How:**\nIn Code Mode add a new `onEvent()` to your program for your \"Right!\" button.\nAdd a `setScreen()` block inside of it that switches screens to `\"thatScreen\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)"
      AppLab Intro 7 - Change Screen Color_markdown_instruction: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54\nAM.png\" style=\"height:150px\"> \\r\n</div>\\r\n\\r\n**Goal:** Make the screen\ngreen. \\r\n\\r\n**How:** Drag in a `setProperty()` block. Use the dropdowns\nto set the screen's `\"background-color\"` to `\"green\"`. Then hit \"Run\".\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\" style=\"height:200px;\">\\r\n</div>\\r\n\\r\n**Goal:** Make the text\nbigger and blue.\\r\n\\r\n**How:**  You'll need two lines of code. Give `\"label1\"`\na `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)"
      AppLab Intro 7 - Full Text_markdown_instruction: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\" style=\"height:200px\">\\r\n</div>\\r\n\\r\n**Goal:** Make the buttons\n`\"red\"` and `\"blue\"`. Then change the text in the large orange label.\\r\n\\r\n**How:**\n\\r\n* Remember you can hover over elements to see their `\"id\"`.\\r\n* Set\nthe `\"background-color\"` of the buttons to `\"red\"` and `\"blue\"`.\\r\n*\nSet the `\"text\"` property of the label to anything you want, like `\"Welcome\nto my app!\"`.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)"
      AppLab Intro 7 - onEvent intro_markdown_instruction: "<img src=\"https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif\"\nstyle=\"float:right;height:200px\">\\r\n\\r\n**Goal:** The screen will start\nout blue. Add code so it turns green when you click the \"Green-ify\" button.\\r\n\\r\n**How:**\nAdd code inside the `onEvent()` that sets the screen's `\"background-color\"`\nto `\"green\"`.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)"
      AppLab Intro 7 - onEvent twoButtons_markdown_instruction: "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\"\nstyle=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Help finish this flashlight\napp. The \"On\" button already turns the screen white. Run the app and try\nit out. Then write code so the \"Off\" button makes the screen black again.\\r\n\\r\n**How:**\nAdd code inside the empty `onEvent()` that sets the `\"background-color\"`\nof the screen to `\"black\"` and `\"text-color\"` of the label to `\"white\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)"
      AppLab Intro 7 - playSound_markdown_instruction: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52\nAM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** This sound board\nis almost done! Run it to see how it works. Then add an image, text, and sound\nto the last button.\\r\n\\r\n**How:** \\r\n* Add an `onEvent()` to the program\nand set the \"id\" to `\"button4\"`. Drag a `playSound()` into the `onEvent()`\nand choose a sound from the library. \\r\n* Add a `setProperty()` (outside\nyour `onEvent()`) to change the button's `\"image\"` property. Choose an\nimage using the third dropdown.\\r\n* Add one more `setProperty()` to change\nthe button's `\"text\"`.\\r\n\\r\n**Stuck? Click here:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton_markdown_instruction: "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Add a second\nbutton to the screen that says \"Right!\" with an `\"id\"` of `\"rightButton\"`.\\r\n\\r\n**How:**\nIn Design Mode drag in a new button. Position and resize it. Then set its\n`\"id\"`, `\"text\"`, `\"background color\"`, and `\"font size\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)"
      AppLab Intro 7 - thisOrThatAddScreen_markdown_instruction: "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59\nPM.png\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** Create a new\nscreen called `\"rightScreen\"`. Add a text label that says \"You went right!\".\\r\n\\r\n**How:**\nIn Design Mode drag in a new screen element. Change its `\"id\"` to `\"rightScreen\"`.\nThen drag a label onto the screen and change the text to \"You went right!\".\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)"
      AppLab Intro 7 - thisOrThatPersonalize_markdown_instruction: "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"\ntarget=\"_blank\"><img src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18\nPM.png\" style=\"float:right;height:200px\"></a>\\r\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"\ntarget=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05\nPM.png\" style=\"float:right;height:200px\"></a>\\r\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"\ntarget=\"_blank\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40\nPM.png\" style=\"float:right;height:200px\"></a>\\r\n\\r\n**Goal:** Build your\nown app by extending this project. Then \"Share\" it with someone!\\r\n\\r\n**How:**\nDecide what type of app you're interested in building. Then go build it by\nadding more screens, buttons, text, sound, and user interactions to your app.\nThere's a few more blocks in the toolbox that you can experiment with as\nwell. Once you're done click \"Share\" to send it to yourself or a friend!\n\\r\n\\r\n<details><summary><b>Choose Your Own Adventure Ideas</b></summary>\\r\n\\r\nTry\nout this <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"\ntarget=\"_blank\">Example Choose Your Own Adventure App</a> so you can see\nhow one works. Here's some ideas to help you come up with your own story.\\r\n\\r\n<li>Make\nan adventure about your favorite character, real or fictional.</li>\\r\n<li>Make\nan adventure that tells the story of your favorite book, movie, or your own\ncreation.</li>\\r\n<li>Make an adventure that has a lot of unexpected twists\nor has a difficult moral choice.</li>\\r\n<br>\\r\n</details>\\r\n\\r\n<details><summary><b>Greeting\nCard Ideas</b></summary>\\r\n\\r\nTry out this <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"\ntarget=\"_blank\">Example Greeting Card App</a> so you can see how one works.\nHere's some ideas to help you come up with your own card.\\r\n\\r\n<li>Think\nof a birthday, holiday, or other special day that's coming up. Make a card\nto celebrate!</li>\\r\n<li>Create a thank you card for someone you appreciate.</li>\\r\n<li>Create\nan invitation for an upcoming event.</li>\\r\n<br>\\r\n</details>\\r\n\\r\n<details><summary><b>Personality\nQuiz Ideas</b></summary>\\r\n\\r\nTry out this <a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"\ntarget=\"_blank\">Example Personality Quiz App</a> so you can see how one\nworks. Here's some ideas to help you come up with your own quiz.\\r\n\\r\n<li>Make\na quiz that suggests something a person might like, for example a meal, a\nteam, a book, or a place.</li>\\r\n<li>Make an quiz that \"predicts the future\"\nbased on their answers.</li>\\r\n<li>Make a quiz to help people make a hard\ndecision.</li>\\r\n\\r\n</details>"
      AppLab Intro 7 - thisOrThatSetScreen_markdown_instruction: "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop\n(1).gif\" style=\"float:right;height:200px\">\\r\n\\r\n**Goal:** The screen\nswitches to `\"rightScreen\"` when the user clicks the `\"rightButton\"`.\\r\n\\r\n**How:**\nIn Code Mode add a new `onEvent()` to your program for your \"Right!\" button.\nAdd a `setScreen()` block inside of it that switches screens to `\"rightScreen\"`.\\r\n\\r\n**Stuck?\nClick here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)"
      AppLab_test02_markdown_instruction: "# This is the title \\r\n\\r\n- bullet 1\n\\r\n- do this\\r\n- then this\\r\n\\r\n![](https://images.code.org/982f9167cf54c24251922fbd0a7f60b3-image-1436470853351.png)"
      Applab AllTheThings ResourcesTab AllResources_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      Applab AllTheThings ResourcesTab MapReference_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      Applab AllTheThings ResourcesTab ReferenceLinks_markdown_instruction: "<img\nsrc=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      Applab allthethings onRecordEvent_markdown_instruction: "Please sign in to\ntest applab levels (By design, applab levels only work if signed in. Normally,\nwe make people sign in, but this is only enforceable for a whole script and\nwould be annoying to do for the allthethings script)."
      Applab test_markdown_instruction: "This level is submittable. For testing only!\nPlease sign in to test applab levels (By design, applab levels only work if\nsigned in. Normally, we make people sign in, but this is only enforceable\nfor a whole script and would be annoying to do for the allthethings script)."
      Artist Inspiration_markdown_instruction: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\\r\n\\r\nNotice:\nWe've used the `set alpha` block to make the \"petals\" fade toward the outside."
      Bergeron Robot Maze1_markdown_instruction: "Can you help me catch the naughty\npig? \\r\n\\r\nStack a couple of `move forward` blocks below the `when run`\nblock and press \"Run\". "
      Big Game Animation 1_markdown_instruction: "Now that you've learned to write\nsimple linear functions, let's work on using them to add some movement to\nour game. Click \"Run\" to see what your game can currently do (not much!),\nupdate any variables you like, and then click finish to move on."
      Big Game Animation 2_markdown_instruction: "The `update-target` function takes\nthe target's current x value, and returns an updated value.\\r\n\\r\nComplete\n`update-target` so that it adds to the x value each time it is called. The\nmore you add to x, the faster the target will go."
      Big Game Animation 3_markdown_instruction: "The `update-danger` function should\nwork just like `update-target`, except that the danger should move from the\nright side over towards the left.\\r\n\\r\nComplete `update-danger` to make\nthe danger fly across the screen."
      Big Game Animation 4_markdown_instruction: "At this point in your game your\ndanger should run across the screen from right to left, and your target should\nrun across from left to right.\\r\n\\r\nThey don't ever come back on screen\nonce they've left, but we'll take care of that later.\\r\n\\r\nTake a minute\nto make sure your game is working like you want it to, and then click \"Finish\"\nto move on."
      Big Game Booleans 1_markdown_instruction: "When you last worked on your game\nwe got our target and danger sprites to fly across the screen, but they never\ncome back. Click \"Run\" to see how your game is currently working, and then\nclick finish and we'll work on making those sprites reappear on screen after\nthey've left."
      Big Game Booleans 2_markdown_instruction: "Now that your `onscreen?` function\nis checking `safe-left?` and `safe-right?` we need to fix those functions.\\r\n\\r\nWhen\nwe used them for Sam the Bat we wanted to prevent Sam from leaving the screen,\nbut now we want the Target and Danger to actually go all the way off screen\nbefore returning to the opposite side.\\r\n\\r\nGo to the \"Functions\" section\nof the toolbox and complete the `safe-left?` function so that it returns *true*\nif the sprite's x coordinate is greater than -50.\\r\n\\r\nIf you're successful\nyou should see the Danger go all the way off the left side before returning\non the right side."
      Big Game Booleans 3_markdown_instruction: "Now that you've got `safe-left?`\nworking, let's fix `safe-right?`\\r\n\\r\nIt should take in a sprite's x coordinate\nand return true if that coordinate is less than 450.\\r\n\\r\nOnce your `safe-right?`\nis complete you should see the Target go off the right side of the screen\nand return on the left."
      Big Game Booleans 4_markdown_instruction: "We've provided a couple of empty\nfunctions for `safe-left?` and `safe-right?` The first thing you need to do\nis complete the `onscreen?` function so that it checks whether both `safe-left?`\nand `safe-right?` are true.\\r\n\\r\n**TIP** - even after you add `safe-left?`\nand `safe-right?` your sprites won't return to the screen - why do you think\nthat is?"
      Big Game Booleans 5_markdown_instruction: "At this point your Danger should\nrun across the screen from right to left, your Target should run across from\nleft to right, and they should both return to the opposite side, repeatedly.\nTake a minute to make sure your game is working like you want it to, and then\nclick \"Finish\" to move on."
      Big Game Collision 1_markdown_instruction: "At this point you've programmed\na video game with a moving Target and Danger, both of which return to the\nscreen once they've left, and a Player that responds to keyboard input. Click\n\"Run\" to see how your game is currently working, and then we'll dig into\nthe final missing piece - collision detection!"
      Big Game Collision 3_markdown_instruction: "Let's fix this `distance` function\nso our collision detection works properly.\\r\n\\r\nUse the Distance Formula,\nso the distance function returns the distance between the player's center\ncoordinates (px, py) and another sprite's center coordinates (cx, cy).\\r\n\\r\nWe've\nprovided a working `line-length` function to help you out."
      Big Game Collision 4_markdown_instruction: "The `distance` function returns\nthe distance between two sprites.\\r\n\\r\nComplete the `collide?` function\nso that it returns *true* if the distance between two points is less than\n100 pixels apart.\\r\n\\r\nIf you're successful, your sprites will instantly\ncollide - why do you think that is?"
      Big Game Final_markdown_instruction: "You made it!\\r\n\\r\nAt this point your\ngame should be fully functioning, take some time to enjoy your new game and\nmake any final tweaks to it.\\r\n\\r\nWhen you're happy with the final product,\nclick Finish and you'll have an opportunity to share a link to your game.\\r\n\\r\nGood\nwork!"
      Big Game Player 1_markdown_instruction: "We're getting really close to a finished\ngame!\\r\n\\r\nLast time you worked on your game, you used booleans to make\nyour Target and Danger return to the screen once they've left. Click \"Run\"\nto see how your game looks right now, and then we'll get to making your Player\nmove up and down."
      Big Game Player 2_markdown_instruction: "To move the player up and down, we'll\nneed to use a conditional block to figure out which key is pressed and respond\naccordingly.\\r\n\\r\nComputers read keypresses as numeric key codes - the up\narrow is **38** and the down arrow is **40**. You can lookup other key codes\nin your student workbook.\\r\n\\r\nEdit the `update-player` function so the\nplayer moves up when the up arrow (keycode 38) is pressed, and moves down\n(keycode 40) when the down arrow is pressed."
      Big Game Vars 1_markdown_instruction: "Let's get started on your Big Game!\nHere you'll see a whole bunch of placeholder code that you'll eventually\nreplace with your own, but for now we're only going to worry about defining\nvariables. Click \"Run\" to see what the game looks like with the default\nvalues."
      Big Game Vars 2_markdown_instruction: "The first step to making this game your\nown is to give it a good Title. Click edit on the `title` and `subtitle` variables\nand change them to something new."
      Big Game Vars 3_markdown_instruction: "Now let's set the background for your\nnew game. Edit the `bg` variable and select a new background Image from the\ndropdown."
      Big Game Vars 4_markdown_instruction: "Awesome! Now you can update the variables\nfor your Player, Target, and Danger. Feel free to play with all of the variables\nat this point to make your game look like you'd like it to. Click \"Finish\"\nwhen you're done."
      Boolean Expressions_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n1.\nWhat's a *Boolean Expression?*\\r\n2. Why is it called a \"Boolean\"?\\r\n3.\nIs this a legal expression?  `10 > 25`?"
      Brad Spooky House Copy_markdown_instruction: "Freeplay: Here are the functions\nyou've written, and some more for you to play with. Play with the pen width\nto see how different your drawings look!\\r\n\\r\n"
      Brad Spooky House_markdown_instruction: "Freeplay: Here are the functions you've\nwritten, and some more for you to play with. Play with the pen width to see\nhow different your drawings look!\\r\n\\r\n"
      Brand Book Example_markdown_instruction: "# Brand Book\\r\n\\r\nCheck out the\nexample of a brand book\\r\n\\r\n"
      CDU U6 Playground Sound Board_markdown_instruction: "# Sound Board 2.0\\r\n\\r\nYou\ncan now play sounds, notes, and songs! With this new knowledge, you can even\nturn your board into a sound board.\\r\n\\r\nIn the toolbox you have all of\nthe buzzer and led-related blocks at your disposal. See what cool stuff you\ncan come up with!\\r\n\\r\n# Do This\\r\n\\r\n* Use all of the button related\nboard events (up, down), to play a unique sound or song at each event.\\r\n*\nAre there any other events you could use to play even more sounds/songs?"
      CDU U6 Playground Sound Board_2018_markdown_instruction: "# Sound Board 2.0\\r\n\\r\nYou\ncan now play sounds, notes, and songs! With this new knowledge, you can even\nturn your board into a sound board.\\r\n\\r\nIn the toolbox you have all of\nthe buzzer and led-related blocks at your disposal. See what cool stuff you\ncan come up with!\\r\n\\r\n# Do This\\r\n\\r\n* Use all of the button related\nboard events (up, down), to play a unique sound or song at each event.\\r\n*\nAre there any other events you could use to play even more sounds/songs?"
      CSD - Predict - Array Length List Printing_markdown_instruction: "# For Loop\n- Using List Length in For Loop\\r\n\\r\nOne of the most common ways that for\nloops are used is with lists. In this example the condition is dependent on\nlist. \\r\n\\r\nWhat will this print in the console?"
      CSD - Predict List Accessing_markdown_instruction: "# Predict\\r\n\\r\nThe code\nbelow has 4 things it will log to the console. What do you think will print\nin the console as a result of this code?\\r\n"
      CSD - for loop - on off_markdown_instruction: "# For Loops with Color LEDs\\r\n\\r\nFor\nloops can make doing something to all the `colorLed`s easier. \\r\n\\r\n**Starter\nProgram:** There are two buttons one to turn all the `colorLeds` on and one\nto turn them all off. \\r\n\\r\nCan you fill in the functions for each of these\ntask using a for loop to write your algorithm."
      CSD For Loops - Check For Understanding_markdown_instruction: "# Check In\\r\n\\r\nIn\nthe box below explain the 3 different parts of the for loop. Why is each important?\\r\n"
      CSD Hackathon Pt 1_markdown_instruction: "# MS Hackathon: Fancy Drawing\\r\n\\r\nThe\nblocks you've been provided are those that a student in CS Discoveries would\nlikely have available after a week or so of using Game Lab. No sprites yet,\nbut you've **just been introduced to some powerful programming constructs\nlike generating random numbers, storing values in a variable, and looping.**\nYou'll also be pretty familiar with the drawing commands at this point.\\r\n\\r\n#\nDo This\\r\n\\r\n* Using only the tools provided to you, **make something awesome!!**\\r\n*\nThe likely project at this point would be an **animated card** but feel free\nto go other directions if you like.\\r\n* **Avoid complex variable arithmetic**\nif you can. You \"don't know it\" yet.\\r\n* **Avoid referencing the iterator\nin your for loops**. At this point it's just a repeat loop."
      CSD Hackathon Pt 2_markdown_instruction: "# MS Hackathon: Sprites and Interactivity\\r\n\\r\nYou\nnow can **create sprites, add images, manipulate their properties, and perform\nsimple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale\n+ 1;`)**. You've also been introduced to conditional statements and know\nhow to use them to get some interactive behavior with the mouse and keyboard.\\r\n\\r\n#\nDo This\\r\n\\r\n* Using only the tools provided to you **make something awesome!**\\r\n*\nThe likely target project here might be a **simple game** or **interactive\nvisualization**.\\r\n* You don't yet know about **groups, loops, collisions**,\nor more magical properties like **velocity or rotationSpeed**\\r\n\\r\n**These\ncommands are not in the block palette but feel free to use**\\r\n\\r\n* `mySprite.mouseActive\n= true;` will make your sprite track mouse events\\r\n* `mySprite.mouseIsOver`\nand `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite\ninteractions.\\r\n\\r\n**To add sprites to images follow the pattern below**\\r\n\\r\n```\\r\nvar\nspriteImage, sprite;\\r\n\\r\n//You'll need to create a preload function to\nload the image.\\r\nfunction preload(){\\t\\t\\t\\r\n    spriteImage = loadImage(\"imageURL\");\\r\n}\\r\n\\r\n//Create\nyour sprite and add the image\\r\nfunction setup(){\\r\n    sprite = createSprite(200,200,10,10);\\r\n    sprite.addImage(\"someName\",\nspriteImage);\\r\n}\\r\n\\r\n//Draw your sprites.\\r\nfunction draw(){\\r\n\\tbackground(255,255,255);\\r\n\\tdrawSprites();\\r\n}\\r\n```"
      CSD Hackathon Week 1_markdown_instruction: "# MS Hackathon: Fancy Drawing\\r\n\\r\nThe\nblocks you've been provided are those that a student in CS Discoveries would\nlikely have available after a week or so of using Game Lab. No sprites yet,\nbut you've **just been introduced to some powerful programming constructs\nlike generating random numbers, storing values in a variable, and looping.**\nYou'll also be pretty familiar with the drawing commands at this point.\\r\n\\r\n#\nDo This\\r\n\\r\n* Using only the tools provided to you, **make something awesome!!**\\r\n*\nThe likely project at this point would be an **animated card** but feel free\nto go other directions if you like.\\r\n* **Avoid complex variable arithmetic**\nif you can. You \"don't know it\" yet.\\r\n* **Avoid referencing the iterator\nin your for loops**. At this point it's just a repeat loop."
      CSD Hackathon Week 2_markdown_instruction: "# MS Hackathon: Sprites and Interactivity\\r\n\\r\nYou\nnow can **create sprites, add images, manipulate their properties, and perform\nsimple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale\n+ 1;`)**. You've also been introduced to conditional statements and know\nhow to use them to get some interactive behavior with the mouse and keyboard.\\r\n\\r\n#\nDo This\\r\n\\r\n* Using only the tools provided to you **make something awesome!**\\r\n*\nThe likely target project here might be a **simple game** or **interactive\nvisualization**.\\r\n* You don't yet know about **groups, loops, collisions**,\nor more magical properties like **velocity or rotationSpeed**\\r\n\\r\n**These\ncommands are not in the block palette but feel free to use**\\r\n\\r\n* `mySprite.mouseActive\n= true;` will make your sprite track mouse events\\r\n* `mySprite.mouseIsOver`\nand `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite\ninteractions.\\r\n\\r\n**To add sprites to images follow the pattern below**\\r\n\\r\n```\\r\nvar\nspriteImage, sprite;\\r\n\\r\n//You'll need to create a preload function to\nload the image.\\r\nfunction preload(){\\t\\t\\t\\r\n    spriteImage = loadImage(\"imageURL\");\\r\n}\\r\n\\r\n//Create\nyour sprite and add the image\\r\nfunction setup(){\\r\n    sprite = createSprite(200,200,10,10);\\r\n    sprite.addImage(\"someName\",\nspriteImage);\\r\n}\\r\n\\r\n//Draw your sprites.\\r\nfunction draw(){\\r\n\\tbackground(255,255,255);\\r\n\\tdrawSprites();\\r\n}\\r\n```"
      CSD U1 - Image Filter Demo show Binary_markdown_instruction: "# Oh Noes\\r\nThis\ntree should be green, but it's blue instead. Can you use the filter blocks\nto change all of the blue pixels to green?"
      CSD U1 - Image Filter Demo_markdown_instruction: "# Oh Noes\\r\nThis tree should\nbe green, but it's blue instead. Can you use the filter blocks to change\nall of the blue pixels to green?"
      CSD U1 - PixFilter 1x1 Filter_markdown_instruction: "# Filtering Images\\r\nIf\nyou've ever used Instragram you've probably encountered an image filter.\nImage filters read in each pixel, process it in some way, and the return the\nfiltered pixel. In this tool we're going to start by filtering just a single\npixel before moving on to a full image.\\r\n\\r\nYou’ll notice there are three\ndrop downs under the picture. A red replace, a green replace, and a blue replace.\nNext to it are drop downs for the colors. How many bits are we working with?\nYes, we’re working with 3. We also learned that the bits control the colors.\nFirst bit controls R, second bit controls G, third bit controls B.\\r\n\\r\n\\r\n#\nDo This\\r\nTry changing the color drop downs next to replace. Based on how\nthe bits change, can you formulate what replace is doing? Talk to your partner\nand see if you can figure it out.\\r\n\\r\n"
      CSD U1 - PixFilter 1x1 intro_markdown_instruction: "# 3 Bit Colors\\r\nEach\npixel is a square on a screen that emits light. Each pixel can have a certain\nnumber of bits assigned to it, and bits per pixel determine the colors that\ncan be rendered.\\r\n\\r\nIn this tool we're using 3 bits to define the one\nlarge black pixel. The first bit affects the red tint. The second bit affects\nthe green tint. The third bit affects the blue tint.\\r\n\\r\n# Do This\\r\n\\r\n*\nClick the \"Run\" button to start the widget\\r\n* Click on the light bulbs\nto turn on or off each color and see what happens to your pixel\\r\n* See how\nmany different colors you can create with just three bits\\r\n* Write down\nthe binary associated with each color you come up with\\r\n"
      CSD U1 - PixFilter Filter Intro_markdown_instruction: "# Filtering Pixels\\r\nIf\nyou've ever used Instagram you've probably encountered an image filter.\nImage filters read in each pixel, process it in some way, and the return the\nfiltered pixel. In this tool we're going to start by filtering just a single\npixel before moving on to a full image.\\r\n\\r\n# Do This\\r\n\\r\n* Try changing\nthe color drop downs in the Filter section\\r\n* Click on the top row of lightbulbs\nin the Diagram section to see how the filter will convert the input (top bulbs)\nto the output (bottom bulbs)\\r\n* Look at how the numbers in the Binary section\nreflect changes to the colors\\r\n* Based on how the bits change, can you formulate\nwhat replace is doing? Talk to your partner and see if you can figure it out.\\r\n*\nComplete the Level 2 table in your Activity Guide\\r\n\\r\n"
      CSD U1 - PixFilter Filter Revisit_markdown_instruction: "# Combining Filters\\r\nNow\nthat you've played with filtering a single color channel, it's time to see\nwhat happens if we filter more than one color.\\r\n\\r\n# Do This\\r\n\\r\n* Using\nthe color dropdowns in the filter section, build a filter that changes the\nvalue of more than one color channel\\r\n* Click on the top row of lightbulbs\nin the Diagram section to see how the filter will convert the input (top bulbs)\nto the output (bottom bulbs)\\r\n* Look at how the numbers in the Binary section\nreflect changes to the colors\\r\n* Complete the Level 4 table in your Activity\nGuide\\r\n\\r\n"
      CSD U1 - PixFilter FreePlay_markdown_instruction: "# Free Play\\r\n\\r\nDo as\nyou will, make something awesome"
      CSD U1 - PixFilter Full_markdown_instruction: "# Instructions Go Here"
      CSD U1 - PixFilter Mario_markdown_instruction: "# Combining Filters\\r\n\\r\nSometimes\nyou'll need to filter more than one pixel to get the color change that you\nwant.\\r\n\\r\n# Do This\\r\nCheck out Mario, he's lookin' pretty good in his\nred hat and overalls. Your job it to set up the filter so he looks like Luigi,\nwith a green hat and overalls.\\r\n\\r\n* First, determine which bit(s) needs\nto change in order to the change you want\\r\n* Once you've figured out which\nbit needs changing, set the filter dropdown appropriately\\r\n* After you've\ngot the filter working so that, try to come up with other filters that change\n*only* his hat and overalls - how many different clothing colors can you come\nup with?\\r\n\\r\n_How many tries did it take you to find the right filter?_\\r\n\\r\n\\r\n\\r\n"
      CSD U1 - PixFilter Mushroom_markdown_instruction: "# Filtering Images\\r\nNow\nthat we've seen how a single pixel can be filtered to change its color, let's\ntry applying a filter to an image made of multiple pixels. The filter you\ncreate will be applied to each pixel in the image - and you still have the\nlight bulbs available to experiment with how your filter will work with individual\ncolors.\\r\n\\r\n\\r\n# Do This\\r\nHere's a picture of a red mushroom - you're\ngoing to try and turn it into a yellow mushroom.\\r\n\\r\n* First, determine\nwhich bit needs to change in order to turn red into yellow\\r\n* Once you've\nfigured out which bit needs changing, use the filter dropdowns to make all\nof the red areas turn yellow\\r\n* After you've got the filter working so\nthat the red has turned yellow, see if you can come up with filters that turn\nthe mushroom other colors\\r\n\\r\n_How many tries did it take you to find the\nright filter?_\\r\n\\r\n\\r\n\\r\n"
      CSD U1 - PixFilter UnFilter_markdown_instruction: "# UnFiltering\\r\n\\r\nBit\nfilters can be used to _undo_ filtering as well. Here's an image of a bird\nthat's been filtered from it's original colors. Can you get it back to normal?\\r\n\\r\n#\nDo This\\r\n\\r\n<img src=\"https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png\"\nstyle=\"float:right; width: 200px\"/>\\r\nHere's what our bird should look\nlike. Use the filter to get him back to normal.\\r\n\\r\n* Decide which colors\n(and so which bits) you need to change. You might need to write your thoughts\nwith pencil and paper.\\r\n* Once you know which bits need changing, set the\nfilter dropdown appropriately to test your answer\\r\n* After you've fixed\nthe image, write down both your process and your final filter in the Level\n6 section of your Activity Guide\\r\n\\r\n_How many tries did it take you to\nfind the right filter?_\\r\n"
      CSD U1 - Single Pixel_markdown_instruction: "# 3 Bit Colors\\r\nEach pixel is\na square on a screen that emits light. Each pixel can have a certain number\nof bits assigned to it, and bits per pixel determine the colors that can be\nrendered.\\r\n\\r\nIn this tool we're using 3 bits to define the one large\nblue pixel pixel. The first bit affects the red tint. The second bit affects\nthe green tint. The third bit affects the blue tint.\\r\n\\r\n# Do This\\r\n\\r\n*\nClick on the light bulbs to turn on or off each color and see what happens\nto your pixel\\r\n* See how many different colors you can create with just\nthree bits\\r\n"
      CSD U2  layout style body_markdown_instruction: "<div style=\"float: right;\nheight: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\\r\n<details>\\r\n<summary>**What\nis a CSS rule-set?**</summary>\\r\nBlah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a selector?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a declaration block?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**what\nis a property-value pair?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new rule-set?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n</div>\\r\n# The Body Element\\r\n\\r\n* Find the `body`\nrule-set in \"style.css\"\\r\n* Discuss with a partner what you think will\nhappen if you add `text-align`, `color`, or other text properties to the `body`\nrule set.\\r\n* Try out some different properties to check your guesses."
      CSD U2  layout style textalign_markdown_instruction: "<div style=\"float: right;\nheight: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\\r\n<details>\\r\n<summary>**What\nis a CSS rule-set?**</summary>\\r\nBlah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a selector?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a declaration block?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**what\nis a property-value pair?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new rule-set?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n</div>\\r\n# Text Align\\r\n\\r\n* Find the `text-align`\nproperty in \"style.css\" in the `p` rule-set.\\r\n* Change the text-align\nvalue to `center` or `right`.\\r\n* Add a `text-align` rule in the `body` rule\nset"
      CSD U2 CSS explore CSS_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I switch between files?**</summary>\\r\nClick\nthe name of the file you want to look at in the menu on the left side of the\nscreen.\\r\n</details>\\r\n</div>\\r\n\\r\n# Adding Style\\r\n\\r\nThis Web Lab\nproject is using a new language to add style to the page. With a partner explore\nboth the `index.html` and `style.css` files. Be ready to discuss the following\nquestions.\\r\n\\r\n* What changes is this new language making to the page?\\r\n*\nHow is this language different from HTML?\\r\n* How are the `index.html` and\n`style.css` files connected?"
      CSD U2 CSS explore CSS_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I switch between files?**</summary>\\r\nClick\nthe name of the file you want to look at in the menu on the left side of the\nscreen.\\r\n</details>\\r\n</div>\\r\n\\r\n# Adding Style\\r\n\\r\nThis Web Lab\nproject is using a new language to add style to the page. With a partner explore\nboth the `index.html` and `style.css` files. Be ready to discuss the following\nquestions.\\r\n\\r\n* What changes is this new language making to the page?\\r\n*\nHow is this language different from HTML?\\r\n* How are the `index.html` and\n`style.css` files connected?"
      CSD U2 Debugging 1_markdown_instruction: "# Debugging\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n</div>\\r\n\\r\nComputer\ncode is written by humans, and all humans make mistakes. Part of being a good\ncomputer scientist is finding your mistakes and fixing them. In computer science\nwe call mistakes **bugs**. The process of finding and fixing those bugs is\ncalled **debugging**.  Over the next couple levels you are going to work on\nyour debugging skills.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56\nAM.png\" style=\"float:right;border:black solid 5px;\">\\r\n\\r\n* Look at the\nweb page code, and discuss with your partner what is causing the following\ntwo bugs:\\r\n\\t* The heading is not big enough.\\r\n\\t* The second item on\nthe list doesn't have a number.\\r\n* Fix all the bugs in the code so that\nthe final result matches the image on the right.\\r\n"
      CSD U2 Debugging 1_2018_markdown_instruction: "# Debugging\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n</div>\\r\n\\r\nComputer\ncode is written by humans, and all humans make mistakes. Part of being a good\ncomputer scientist is finding your mistakes and fixing them. In computer science\nwe call mistakes **bugs**. The process of finding and fixing those bugs is\ncalled **debugging**.  Over the next couple levels you are going to work on\nyour debugging skills.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56\nAM.png\" style=\"float:right;border:black solid 5px;\">\\r\n\\r\n* Look at the\nweb page code, and discuss with your partner what is causing the following\ntwo bugs:\\r\n\\t* The heading is not big enough.\\r\n\\t* The second item on\nthe list doesn't have a number.\\r\n* Fix all the bugs in the code so that\nthe final result matches the image on the right.\\r\n"
      CSD U2 Debugging 2_markdown_instruction: "# Debugging\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n</div>\\r\n\\r\nMore\ndebugging practice!  This page is a little more challenging to debug than\nthe last one.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38\nAM.png\" style=\"float:right;border:5px black solid;width:250px\">\\r\n\\r\n*\nDiscuss with your partner what you think the bugs are in this page.\\r\n* Find\nand fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 2_2018_markdown_instruction: "# Debugging\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n</div>\\r\n\\r\nMore\ndebugging practice!  This page is a little more challenging to debug than\nthe last one.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38\nAM.png\" style=\"float:right;border:5px black solid;width:250px\">\\r\n\\r\n*\nDiscuss with your partner what you think the bugs are in this page.\\r\n* Find\nand fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 3_markdown_instruction: "# Debugging\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the inspector sometimes stop working?**</summary>\\r\nSometimes there\nare so many bugs in the HTML that the inspector cannot read the code properly\nand it stops working completely, even on the parts of the code that are correct.  Once\nthe bugs are corrected, the inspector will work again.\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage has images in it. Images make finding bugs a little more tricky. Can\nyou debug this page?\\r\n\\r\n# Do This\\r\n\\r\n* Discuss with your partner what\nis causing the bugs in this page.\\r\n* Fix the bugs so that your page matches\nthe target page shown below.\\r\n\\r\n![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24\nAM.png)"
      CSD U2 Debugging 3_2018_markdown_instruction: "# Debugging\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a bug?**</summary>\\r\nBugs\nare mistakes in code which causes it not to work as planned.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis debugging?**</summary>\\r\nDebugging is the process of finding and fixing\nbugs.  Debugging is a problem solving process so use your problem solving\nsteps as you try to debug. \\r\n</details>\\r\n<details>\\r\n<summary>**What\nare some examples of bugs?**</summary>\\r\nBugs can be anything that causes\ncode not to work as planned.  Some examples are misspelling, putting code\nin the wrong place, using the wrong tag, or forgetting to close a tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the inspector sometimes stop working?**</summary>\\r\nSometimes there\nare so many bugs in the HTML that the inspector cannot read the code properly\nand it stops working completely, even on the parts of the code that are correct.  Once\nthe bugs are corrected, the inspector will work again.\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage has images in it. Images make finding bugs a little more tricky. Can\nyou debug this page?\\r\n\\r\n# Do This\\r\n\\r\n* Discuss with your partner what\nis causing the bugs in this page.\\r\n* Fix the bugs so that your page matches\nthe target page shown below.\\r\n\\r\n![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24\nAM.png)"
      CSD U2 Debugging 4_markdown_instruction: "# Formatting\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is whitespace?**</summary>\\r\nWhitespace\nrefers to any character that shows up as a blank space on the screen, such\nas a space, a tab, or a new line. Whitespace helps separate different parts\nof the document to make it easier to read.  For example, in HTML code new\nelements are usually put on a new line, even though it doesn't make any difference\nin how the page is displayed.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis indentation?**</summary>\\r\nIndentation is the placement of text farther\nto the right, or left, to separate it from surrounding text.  Indentation\nhelps to convey the program's structure.  In HTML, elements that are inside\nother elements are usually indented.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis formatting?**</summary>\\r\nFormatting is arranging text in a way that makes\nit easier to understand.  HTML is usually formatted using indentation.  That\nmeans that elements that are inside other elements are further to the right\nin code.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the inspector sometimes stop working?**</summary>\\r\nSometimes there\nare so many bugs in the HTML that the inspector cannot read the code properly\nand it stops working completely, even on the parts of the code that are correct.  Once\nthe bugs are corrected, the inspector will work again.\\r\n</details>\\r\n</div>\\r\n\\r\nThe\nway that you write your code can make it easier or harder to find bugs.  If\nyou use **whitespace** and **indentation**, it will make it easier to read\nand easier to fix.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code with your partner\nand discuss how you should format the code to make it easier to read.\\r\n*\nMake the code easier to read by adding new lines and indentation.\\r\n* Fix\nall the bugs so that your page matches the target page below.\\r\n\\r\n![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13\nAM.png)"
      CSD U2 Debugging 4_2018_markdown_instruction: "# Formatting\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is whitespace?**</summary>\\r\nWhitespace\nrefers to any character that shows up as a blank space on the screen, such\nas a space, a tab, or a new line. Whitespace helps separate different parts\nof the document to make it easier to read.  For example, in HTML code new\nelements are usually put on a new line, even though it doesn't make any difference\nin how the page is displayed.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis indentation?**</summary>\\r\nIndentation is the placement of text farther\nto the right, or left, to separate it from surrounding text.  Indentation\nhelps to convey the program's structure.  In HTML, elements that are inside\nother elements are usually indented.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis formatting?**</summary>\\r\nFormatting is arranging text in a way that makes\nit easier to understand.  HTML is usually formatted using indentation.  That\nmeans that elements that are inside other elements are further to the right\nin code.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the inspector sometimes stop working?**</summary>\\r\nSometimes there\nare so many bugs in the HTML that the inspector cannot read the code properly\nand it stops working completely, even on the parts of the code that are correct.  Once\nthe bugs are corrected, the inspector will work again.\\r\n</details>\\r\n</div>\\r\n\\r\nThe\nway that you write your code can make it easier or harder to find bugs.  If\nyou use **whitespace** and **indentation**, it will make it easier to read\nand easier to fix.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code with your partner\nand discuss how you should format the code to make it easier to read.\\r\n*\nMake the code easier to read by adding new lines and indentation.\\r\n* Fix\nall the bugs so that your page matches the target page below.\\r\n\\r\n![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13\nAM.png)"
      CSD U2 Debugging comments_markdown_instruction: "# Debugging\\r\n\\r\nThis page\nhas images in it. Images make finding bugs a little more tricky. Can you debug\nthis page?\\r\n\\r\nAs you are debugging you may notice a new set of symbols\nthat look something like this:\\r\n<pre>\\r\n&lt;!-- this is a comment --&gt;\\r\n</pre>\\r\n\\r\nThis\nis a **comment**. Comments are written by computer scientists creating web\npages for themselves and other humans who might look at their HTML file. Comments\nexplain the different parts of the code and what it should create.  Comments\nmight help you debug.\\r\n\\r\n# Do This\\r\n\\r\n* Find and fix all bugs in the\nstarting HTML\\r\n* You know you’ve found all of the bugs when your page matches\nthe <a href=\"https://thimbleprojects.org/danimcavoy/103295/\" target=\"_blank\">\nTarget Page</a>."
      CSD U2 HTML Add Content_markdown_instruction: "# Adding Content\\r\n\\r\nStart\ncreating your first web page! Try to create a page with a title and two paragraphs.\\r\n\\r\n#\nDo This\\r\n\\r\n* Write a sentence about your favorite animal\\r\n* On a separate\nline write another sentence about your least favorite animal.\\r\n* Above both\nsentences try adding a title that says \"Animals\"\\r\n* Don't forget to click\n<img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12\nPM.png\" style=\"width:100px\">\\r\n* **What do you notice about the structure\nof your content?**"
      CSD U2 HTML Adding Paragraphs Template_markdown_instruction: "# Add Text to\nthe Body\\r\n\\r\nWhen you start any Web Lab project it will automatically add\n`<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When\nyou add content to your projects you'll need to do it between the `<body>`\nand `</body>` tags since it should be part of the body of your webpage.\\r\n\\r\n#\nDo This\\r\n\\r\n* Write three separate sentences about any topic you like inside\nof the body tags of your web page\\r\n* Hit \"Refresh and Save\" if you don't\nsee the changes in the Preview area\\r\n* Compare your work with a neighbor.\nMake sure you're placing code in the same place.\\r\n"
      CSD U2 HTML Adding Paragraphs Template_2018_markdown_instruction: "# Add Text\nto the Body\\r\n\\r\nWhen you start any Web Lab project it will automatically\nadd `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When\nyou add content to your projects you'll need to do it between the `<body>`\nand `</body>` tags since it should be part of the body of your webpage.\\r\n\\r\n#\nDo This\\r\n\\r\n* Write three separate sentences about any topic you like inside\nof the body tags of your web page\\r\n* Hit \"Refresh and Save\" if you don't\nsee the changes in the Preview area\\r\n* Compare your work with a neighbor.\nMake sure you're placing code in the same place.\\r\n"
      CSD U2 HTML Adding Paragraphs pt 2_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a paragraph element?**</summary>\\r\nParagraphs\nare marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML\ncan be any length of text from one word to a bunch of sentences. Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make multiple paragraphs?**</summary>\\r\nHere's an example of several\nparagraph tags in a row. This code would be placed inside of the body of your\nweb page.\\r\n\\r\n<pre>\\r\n`<p>This is a paragraph. It has two sentences.</p>`\\r\n`<p>This\nis another paragraph.</p>`\\r\n</pre>\\r\n\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nUse Paragraph Tags\\r\n\\r\nThe `<p>` tag or \"paragraph\" tag is placed around\ntext to indicate that it is part of a paragraph. Placing text in a paragraph\ntag lets the computer know that it should be displayed differently, usually\njust by spacing it out from other text.\\r\n\\r\n# Do This\\r\n\\r\n* Place the\ntext you just wrote inside at least two separate paragraphs by surrounding\nit with `<p>` and `</p>` tags\\r\n* Compare the results with a neighbor. What\nhas changed about the way your text is displayed?"
      CSD U2 HTML Adding Paragraphs pt 2_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a paragraph element?**</summary>\\r\nParagraphs\nare marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML\ncan be any length of text from one word to a bunch of sentences. Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make multiple paragraphs?**</summary>\\r\nHere's an example of several\nparagraph tags in a row. This code would be placed inside of the body of your\nweb page.\\r\n\\r\n<pre>\\r\n`<p>This is a paragraph. It has two sentences.</p>`\\r\n`<p>This\nis another paragraph.</p>`\\r\n</pre>\\r\n\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nUse Paragraph Tags\\r\n\\r\nThe `<p>` tag or \"paragraph\" tag is placed around\ntext to indicate that it is part of a paragraph. Placing text in a paragraph\ntag lets the computer know that it should be displayed differently, usually\njust by spacing it out from other text.\\r\n\\r\n# Do This\\r\n\\r\n* Place the\ntext you just wrote inside at least two separate paragraphs by surrounding\nit with `<p>` and `</p>` tags\\r\n* Compare the results with a neighbor. What\nhas changed about the way your text is displayed?"
      CSD U2 HTML Adding Paragraphs_markdown_instruction: "# Add Text to the Body\\r\n\\r\nWhen\nyou start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`,\n`<head>`, and `<body>` tags to your project. When you add content to your\nprojects, you'll need to do it between the `<body>` and `</body>` tags because\nit should be part of the body of your webpage.\\r\n\\r\n# Do This\\r\n\\r\n* Write\nthree separate sentences about any topic you like inside of the body tags\nof your web page.\\r\n* Hit \"Refresh and Save\" if you don't see the changes\nin the preview area.\\r\n* Compare your work with a neighbor. Make sure you're\nplacing code in the same place.\\r\n"
      CSD U2 HTML Adding Paragraphs_2018_markdown_instruction: "# Add Text to the\nBody\\r\n\\r\nWhen you start any Web Lab project, it will automatically add\n`<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When\nyou add content to your projects, you'll need to do it between the `<body>`\nand `</body>` tags because it should be part of the body of your webpage.\\r\n\\r\n#\nDo This\\r\n\\r\n* Write three separate sentences about any topic you like inside\nof the body tags of your web page.\\r\n* Hit \"Refresh and Save\" if you don't\nsee the changes in the preview area.\\r\n* Compare your work with a neighbor.\nMake sure you're placing code in the same place.\\r\n"
      CSD U2 HTML Debug Paragraphs_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary><strong>What is a paragraph element?</strong></summary>\\r\nParagraphs\nare marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML\ncan be any length of text from one word to a bunch of sentences. Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary><strong>Why\ndoes HTML seem to work even when it's broken?</strong></summary>\\r\nHTML\nis read by your web browser to generate web pages. Since people often make\nlittle mistakes when writing their web pages, browsers are programmed to make\na best guess of what you intended to do. Sometimes different browsers are\neven programmed to make different guesses! The only way to ensure your code\nlooks like you intend is make sure you're always using tags correctly.\\r\n</details>\\r\n<details>\\r\n<summary><strong>Why\ndoes the code sometimes turn pink?</strong></summary>\\r\nWeb Lab is programmed\nto automatically detect some mistakes in HTML.  When it notices a mistake,\nit turns that code pink.  The mistake might be in pink, or it might be somewhere\nbefore the pink code.  You'll need to carefully debug to find your mistake.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nDebug: Fix the Broken Tags\\r\n\\r\nThis simple web page has some issues which\nare preventing the content from being displayed correctly. Identify and fix\nthe issues. This practice is also called \"debugging\" your code.\\r\n\\r\n#\nDo This\\r\n\\r\n* Fix the broken code so that the web page displays correctly\\r\n*\nCompare the problems you fixed with a neighbor"
      CSD U2 HTML Debug Paragraphs_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary><strong>What is a paragraph element?</strong></summary>\\r\nParagraphs\nare marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML\ncan be any length of text from one word to a bunch of sentences. Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary><strong>Why\ndoes HTML seem to work even when it's broken?</strong></summary>\\r\nHTML\nis read by your web browser to generate web pages. Since people often make\nlittle mistakes when writing their web pages, browsers are programmed to make\na best guess of what you intended to do. Sometimes different browsers are\neven programmed to make different guesses! The only way to ensure your code\nlooks like you intend is make sure you're always using tags correctly.\\r\n</details>\\r\n<details>\\r\n<summary><strong>Why\ndoes the code sometimes turn pink?</strong></summary>\\r\nWeb Lab is programmed\nto automatically detect some mistakes in HTML.  When it notices a mistake,\nit turns that code pink.  The mistake might be in pink, or it might be somewhere\nbefore the pink code.  You'll need to carefully debug to find your mistake.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nDebug: Fix the Broken Tags\\r\n\\r\nThis simple web page has some issues which\nare preventing the content from being displayed correctly. Identify and fix\nthe issues. This practice is also called \"debugging\" your code.\\r\n\\r\n#\nDo This\\r\n\\r\n* Fix the broken code so that the web page displays correctly\\r\n*\nCompare the problems you fixed with a neighbor"
      CSD U2 Header Demo_markdown_instruction: "# Headers\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are headers?**</summary>\\r\nHeaders\nare the different sized section titles throughout a web page. Headers add\nstructure to your web page by breaking it up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headers?**</summary>\\r\nHeaders come in 6 different\nsizes. So far you have primarily used the biggest one &lt;h1&gt;. The number\n1 in the HTML tag designates that this is the biggest header. The smallest\nheader is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n</div>\\r\n\\r\nSo far, you've organized your content\ninto paragraphs.  Another way HTML allows you to organize your code is by\nusing **headers**.  A header is a short piece of text that goes at the top\nof a section of content, like a title.\\r\n\\r\nDo This:\\r\n* Find the headers\nin the web page below and use the inspector tool to see that code that makes\nthem.\\r\n* Make sure you and your partner agree on what the tags do.\\r\n*\nChange the code so that \"Drawing\" and \"2 years\" match the headers on the\nrest of the page."
      CSD U2 Header Sizes_markdown_instruction: "# Header Sizes\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are headers?**</summary>\\r\nHeaders\nare the different sized section titles throughout a web page. Headers add\nstructure to your web page by breaking it up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headers?**</summary>\\r\nHeaders come in 6 different\nsizes.  The most common header is &lt;h1&gt; The number 1 in the HTML tag\ndesignates that this is the biggest header. The smallest header is &lt;h6&gt;.\nYou can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags\nwhich get smaller as the number gets larger.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nHeaders can come in different sizes.  In\nthis page, there are six different sized headers, but they are all mixed up.  Can\nyou and your partner figure out how to fix them?\\r\n\\r\n\\r\n\\r\nDo This:\\r\n*\nUse the inspector tool to figure out what makes the headers different sizes\\r\n*\nMake sure you and your partner agree on what the different header tags do.\\r\n*\nChange the tags so that the headers are in order from biggest to smallest,\nand the text says the correct size, as in the picture below. \\r\n\\r\n<img\nsrc=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\" style=\"width:100px\" style=\"float:left\">\\r\n"
      CSD U2 Header Test_markdown_instruction: "# Headers and Paragraphs\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What is\na paragraph element?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. Paragraphs in HTML can be any length of\ntext from one word to a bunch of sentences. All of your text in your web page\nshould be contained in an HTML element (headers or paragraphs). Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create multiple paragraphs?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. To create more than one paragraph you will\nwant multiple sets of opening and closing `<p>` tags. For example\\r\n<pre>\\r\n\\t&lt;p&gt;\\r\n    \\tThis\nis a paragraph.\\r\n    &lt;/p&gt;\\r\n\\t&lt;p&gt;\\r\n    \\tThis is another\nparagraph.\\r\n    &lt;/p&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare headers?**</summary>\\r\nHeaders are the different sized section titles\nthroughout a web page. Headers add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headers?**</summary>\\r\nHeaders come in 6 different\nsizes. So far you have primarily used the biggest one &lt;h1&gt;. The number\n1 in the HTML tag designates that this is the biggest header. The smallest\nheader is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nThe author of this page added in\na lot of content, but did not think about structure.  All of the text is mashed\ntogether.\\r\n\\r\nDo This:\\r\n* Look through the content with your partner\nand decide what you think the best structure should be.\\r\n* Use your header\nand paragraph tags to code the structure into the page.\\r\n"
      CSD U2 Headers_markdown_instruction: "<div style=\"float: right; height: 250px;\nwidth: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nare headers?**</summary>\\r\nHeaders are the different sized section titles\nthroughout a web page. Headers add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a header?**</summary>\\r\nYou can make something a header element\nby surrounding it by header tags.  For example:\\r\n<pre> &lt;h1&gt; Header\nText &lt;/h1&gt; </pre> <br> <br>\\r\n\\r\nNotice how there is a the opening\ntag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same\nas the opening tag except it has `/` after the opening angle bracket. The\ntext you want to show as the header goes in the middle of the two tags.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example: \\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is. HTML tags\nadd structure to the content of a web page.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo you need an opening and closing tag?**</summary>\\r\nYou need both an opening\nand closing tag for many HTML elements because it marks where that structure\nstarts and stops. You don't want all the text on your web page to be a title.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nHeaders\\r\n\\r\nYou may have noticed on the last level that everything you\ntype into the editor is getting smashed together. In order to differentiate\nbetween these different parts we use HTML elements to mark the different parts\nof a web page. In your investigation with the inspector did you come across\nsomething that made headers?\\r\n\\r\n# Do This\\r\n\\r\n* Make your header \"Animals\"\nstand out using the `<h1>` header element."
      CSD U2 Heading Demo_markdown_instruction: "# Headings\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are headings?**</summary>\\r\nHeadings\nare the different sized section titles throughout a web page. Headings add\nstructure to your web page by breaking it up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number\n'1' in the HTML tag designates that this is the biggest heading. The smallest\nheading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags, which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n</div>\\r\n\\r\nSo far, you've organized your content\ninto paragraphs.  Another way HTML allows you to organize your code is by\nusing **headings**.  A heading is a short piece of text that goes at the top\nof a section of content, like a title.\\r\n\\r\nDo This:\\r\n* Find the headings\nin the web page below and use the Inspector Tool to see the code that makes\nthem.\\r\n* Make sure you and your partner agree on what the tags do.\\r\n*\nChange the code so that \"Drawing\" and \"2 years\" match the headings on\nthe rest of the page."
      CSD U2 Heading Demo_2018_markdown_instruction: "# Headings\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are headings?**</summary>\\r\nHeadings\nare the different sized section titles throughout a web page. Headings add\nstructure to your web page by breaking it up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number\n'1' in the HTML tag designates that this is the biggest heading. The smallest\nheading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags, which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n</div>\\r\n\\r\nSo far, you've organized your content\ninto paragraphs.  Another way HTML allows you to organize your code is by\nusing **headings**.  A heading is a short piece of text that goes at the top\nof a section of content, like a title.\\r\n\\r\nDo This:\\r\n* Find the headings\nin the web page below and use the Inspector Tool to see the code that makes\nthem.\\r\n* Make sure you and your partner agree on what the tags do.\\r\n*\nChange the code so that \"Drawing\" and \"2 years\" match the headings on\nthe rest of the page."
      CSD U2 Heading Sizes_markdown_instruction: "# Heading Sizes\\r\n\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are headings?**</summary>\\r\nHeadings\nare the different sized section titles throughout a web page. Headings add\nstructure to your web page by breaking it up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag\ndesignates that this is the biggest heading. The smallest heading is &lt;h6&gt;.\nYou can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags\nwhich get smaller as the number gets larger.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nHeadings can come in different sizes.  In\nthis page, there are six different sized headings, but they are all mixed\nup.  Can you and your partner figure out how to fix them?\\r\n\\r\n\\r\n\\r\nDo\nThis:\\r\n* Use the inspector tool to figure out what makes the headings different\nsizes\\r\n* Make sure you and your partner agree on what the different heading\ntags do.\\r\n* Change the tags so that the headings are in order from biggest\nto smallest, and the text says the correct size, as in the picture below.\n\\r\n\\r\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\" style=\"width:100px\" style=\"float:left\">\\r\n"
      CSD U2 Heading Sizes_2018_markdown_instruction: "# Heading Sizes\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What are\nheadings?**</summary>\\r\nHeadings are the different sized section titles throughout\na web page. Headings add structure to your web page by breaking it up so its\neasier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How do\nI make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag\ndesignates that this is the biggest heading. The smallest heading is &lt;h6&gt;.\nYou can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags\nwhich get smaller as the number gets larger.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nHeadings can come in different sizes.  In\nthis page, there are six different sized headings, but they are all mixed\nup.  Can you and your partner figure out how to fix them?\\r\n\\r\n\\r\n\\r\nDo\nThis:\\r\n* Use the inspector tool to figure out what makes the headings different\nsizes\\r\n* Make sure you and your partner agree on what the different heading\ntags do.\\r\n* Change the tags so that the headings are in order from biggest\nto smallest, and the text says the correct size, as in the picture below.\n\\r\n\\r\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\" style=\"width:100px\" style=\"float:left\">\\r\n"
      CSD U2 Heading Test_markdown_instruction: "# Headings and Paragraphs\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What is\na paragraph element?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. Paragraphs in HTML can be any length of\ntext from one word to a bunch of sentences. All of your text in your web page\nshould be contained in an HTML element (headings or paragraphs). Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create multiple paragraphs?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. To create more than one paragraph you will\nwant multiple sets of opening and closing `<p>` tags. For example\\r\n<pre>\\r\n\\t&lt;p&gt;\\r\n    \\tThis\nis a paragraph.\\r\n    &lt;/p&gt;\\r\n\\t&lt;p&gt;\\r\n    \\tThis is another\nparagraph.\\r\n    &lt;/p&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare headings?**</summary>\\r\nHeadings are the different sized section titles\nthroughout a web page. Headings add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes. So far you have primarily used the biggest one &lt;h1&gt;. The number\n1 in the HTML tag designates that this is the biggest heading. The smallest\nheading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nThe author of this page added in\na lot of content, but did not think about structure.  All of the text is mashed\ntogether.\\r\n\\r\nDo This:\\r\n* Look through the content with your partner\nand decide what you think the best structure should be.\\r\n* Use your heading\nand paragraph tags to code the structure into the page.\\r\n"
      CSD U2 Heading Test_2018_markdown_instruction: "# Headings and Paragraphs\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What is\na paragraph element?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. Paragraphs in HTML can be any length of\ntext from one word to a bunch of sentences. All of your text in your web page\nshould be contained in an HTML element (headings or paragraphs). Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create multiple paragraphs?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. To create more than one paragraph you will\nwant multiple sets of opening and closing `<p>` tags. For example\\r\n<pre>\\r\n\\t&lt;p&gt;\\r\n    \\tThis\nis a paragraph.\\r\n    &lt;/p&gt;\\r\n\\t&lt;p&gt;\\r\n    \\tThis is another\nparagraph.\\r\n    &lt;/p&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare headings?**</summary>\\r\nHeadings are the different sized section titles\nthroughout a web page. Headings add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make different sized headings?**</summary>\\r\nHeadings come in 6 different\nsizes. So far you have primarily used the biggest one &lt;h1&gt;. The number\n1 in the HTML tag designates that this is the biggest heading. The smallest\nheading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nHTML stands for Hypertext Markup Language. HTML is\nused to add structure to the content of a web page. HTML uses tags to specify\nwhere certain structures start and end. These tags are sets of characters\nnot found in the English language so that the content and structure can be\ndifferentiated. \\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML\nelement?**</summary>\\r\nAn HTML element is a piece of a website that is marked\nby a start tag and sometimes closed with an end tag. The element also includes\nthe content inside the tags. For example: \\r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nAn HTML tag is the special set of characters that\ntells the machine where the start or end of an HTML element is and what type\nit is.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\nThe author of this page added in\na lot of content, but did not think about structure.  All of the text is mashed\ntogether.\\r\n\\r\nDo This:\\r\n* Look through the content with your partner\nand decide what you think the best structure should be.\\r\n* Use your heading\nand paragraph tags to code the structure into the page.\\r\n"
      CSD U2 Image Tag 1_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Images\\r\n\\r\nA Dog\nvs Cat web page has been started for you. The dog image has already been added\nto the below web page. Use an image tag to add the `cat.jpeg` image to the\npage below the cat heading."
      CSD U2 Image Tag 1_2018_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Images\\r\n\\r\nA Dog\nvs Cat web page has been started for you. The dog image has already been added\nto the below web page. Use an image tag to add the `cat.jpeg` image to the\npage below the cat heading."
      CSD U2 Image Tag 2_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Uploading Images\\r\n\\r\nYou\ncan upload images that you've found elsewhere using the **Add Image** button.\nGo find an image of a different type of pet that you like and download it\nto your computer (using right-click \"Save As\").\\r\n\\r\nOnce you have your\nimages, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49\nPM.png) and upload the image from your computer into your project, where you\ncan then use it in your page.\\r\n\\r\n# Do This\\r\n\\r\n* Upload at least one\nimage into this web page\\r\n* Use the `<img>` tag to display the image(s)\nin your website.\\r\n* Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Uploading Images\\r\n\\r\nYou\ncan upload images that you've found elsewhere using the **Add Image** button.\nGo find an image of a different type of pet that you like and download it\nto your computer (using right-click \"Save As\").\\r\n\\r\nOnce you have your\nimages, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49\nPM.png) and upload the image from your computer into your project, where you\ncan then use it in your page.\\r\n\\r\n# Do This\\r\n\\r\n* Upload at least one\nimage into this web page\\r\n* Use the `<img>` tag to display the image(s)\nin your website.\\r\n* Make sure to add an `alt` attribute."
      CSD U2 Image Tag Attribution_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Giving Credit\\r\n\\r\nWhen\nusing a Creative Commons licensed image, you need to give credit to the original\ncreator (this is also called _attribution_). There are lots of ways to provide\nattribution, but the easiest way is to add text below the image that identifies\nthe creator and website it came from.\\r\n\\r\n# Do This\\r\n\\r\nIn this page\nwe've already added and attributed an image of a frog. Use the Creative Commons\nsearch engine to find another image of an amphibian. Add your found image\nto this page, along with proper attribution, including:\\r\n\\r\n* The name\nof the creator (if available)\\r\n* The website it was found on (e.g. commons.wikimedia.org)\\r\n*\nThe license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# Giving Credit\\r\n\\r\nWhen\nusing a Creative Commons licensed image, you need to give credit to the original\ncreator (this is also called _attribution_). There are lots of ways to provide\nattribution, but the easiest way is to add text below the image that identifies\nthe creator and website it came from.\\r\n\\r\n# Do This\\r\n\\r\nIn this page\nwe've already added and attributed an image of a frog. Use the Creative Commons\nsearch engine to find another image of an amphibian. Add your found image\nto this page, along with proper attribution, including:\\r\n\\r\n* The name\nof the creator (if available)\\r\n* The website it was found on (e.g. commons.wikimedia.org)\\r\n*\nThe license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Debug_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# The Details Matter\\r\n\\r\nThe\n`src` attribute needs to point to the _exact_ filename of the image you want\nto use. That means you need to pay attention to spelling, capitalization,\nand the file extension. Each of the three images on this page is broken because\nof an improper `src` attribute. Using the file menu for reference, fix each\nof the image tags.\\r\n\\r\n_Note: Even though the images are not loading properly,\nour website is still showing descriptive text of what should be there because\nwe used `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How do I add images?**</summary>\\r\nThe\n`<img>` tag allows you to show images on your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img\nsrc=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to\ntell the browser which file to use, extra information, called an **attribute**,\nis added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands\nfor **s**ou**rc**e and tell the name of the image. Image files names include\nextensions which tell the computer which type of image they are working with.\nCommon extensions are .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have\nthe src attribute, image elements also have the `alt` attribute which describe\nthe image. This is important in case the image doesn’t load or for people\nwho have trouble with their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an\nexample of a  **self-closing tag** because it starts and closes in one tag.\nTo mark this we put the `/` which usually goes in the close tag at the end\nof the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an\nimage tag not have a closing tag?**</summary>\\r\nAn image tag doesn't need\na closing tag because there is no text content which must be wrapped in tags.\nThe content that shows on the screen is specified through the tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an attribute?**</summary>\\r\nAttributes are extra information included\nin a tag.  Attributes have names and values. The name tells what type of information\nis being provided and then the value gives the specific information for that\ntag. \\r\n\\r\nFor example &lt;img&gt; tags have two attributes, src and alt.\nsrc specifies the name of the image file and alt tells the browser in readable\ntext what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n# The Details Matter\\r\n\\r\nThe\n`src` attribute needs to point to the _exact_ filename of the image you want\nto use. That means you need to pay attention to spelling, capitalization,\nand the file extension. Each of the three images on this page is broken because\nof an improper `src` attribute. Using the file menu for reference, fix each\nof the image tags.\\r\n\\r\n_Note: Even though the images are not loading properly,\nour website is still showing descriptive text of what should be there because\nwe used `alt` attributes. Cool!_"
      CSD U2 Info Page Content_markdown_instruction: "# Adding Your Content\\r\n\\r\nYou\nshould now have found a handful of websites that you can use to help make\nyour case for the cause you've chosen. If not, keep on researching! Otherwise\nit's time to start structuring the content of your page.\\r\n\\r\nFor all of\nthe content you find externally, you'll need to provide attribution to the\noriginal creator. For now, just include the url of the site where you found\nit in parenthesis. For example\\r\n\\r\n* According to the ASPCA only 10% of\nanimals entering shelters have been spayed or neutered (http://www.aspca.org/animal-homelessness).\\r\n*\nKill shelters euthanize 2.7 million animals per year (http://www.aspca.org/animal-homelessness).\\r\n\\r\n#\nDo This\\r\n\\r\nThe specifics of your page layout will depend on your topics\nand goals, but in general you should create the following structure\\r\n\\r\n*\nA first level header with a catchy title for your page\\r\n* A second level\nheader for each separate argument to support your cause\\r\n* Paragraphs of\ncontent under each second level header\\r\n* The urls of any sites where you\nfound information\\r\n* Don't worry about styling right now you are just getting\nthe content\\r\n"
      CSD U2 Info Page Create_markdown_instruction: "# Informational Page\\r\n\\r\nLet's\nstart by setting up the page you will be using to create your informational\npage.\\r\n\\r\n# Do This\\r\n\\r\n* Add a new HTML file to your project for your\ninformational page.\\r\n* Add a title and description"
      CSD U2 Info Page Final Touches_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n\\r\n<h2>\\r\nChecklist\\r\n</h2>\\r\n\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Ensure that your image is properly licensed</span>\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Upload image into Web Lab</span>\\r\n<input type=\"checkbox\"\nstyle=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Create an image tag with a descriptive alt attribute</span>\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">If the image isn't your own, add attribution\nunderneath<br/>\\r\n\\r\n</div>\\r\n\\r\n\\r\n# Adding Images to Your Site\\r\n\\r\nYou've\nalready created some pages with great content on your website, now you can\nadd some images!\\r\n\\r\n# Do This\\r\n\\r\nUsing either your own images or those\nfound through a Commons Search, add some images to the pages you've already\ncreated. Get creative! Use the checklist to the right to keep track of the\nsteps you need to follow when adding images.\\r\n"
      CSD U2 Info Page Final Touches_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n\\r\n<h2>\\r\nChecklist\\r\n</h2>\\r\n\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Ensure that your image is properly licensed</span>\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Upload image into Web Lab</span>\\r\n<input type=\"checkbox\"\nstyle=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Create an image tag with a descriptive alt attribute</span>\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">If the image isn't your own, add attribution\nunderneath<br/>\\r\n\\r\n</div>\\r\n\\r\n\\r\n# Adding Images to Your Site\\r\n\\r\nYou've\nalready created some pages with great content on your website, now you can\nadd some images!\\r\n\\r\n# Do This\\r\n\\r\nUsing either your own images or those\nfound through a Commons Search, add some images to the pages you've already\ncreated. Get creative! Use the checklist to the right to keep track of the\nsteps you need to follow when adding images.\\r\n"
      CSD U2 Info Page Images_markdown_instruction: "# Adding Your Images\\r\n\\r\nWith\nimages and attribution information in hand, it's time to spruce up your new\npage.\\r\n\\r\n# Do This\\r\n\\r\nUpload your images to Web Lab and, using `<img>`\ntags, add them where you'd like them to go. For each image:\\r\n\\r\n* Add\na descriptive `alt` attribute\\r\n* Add attribution underneath the image, including\\r\n\\t*\nName or screenname of author (if available)\\r\n    * Title of image (if available)\\r\n    *\nUrl to original site\\r\n    * License image was published under either in\ntext (eg CC-BY) or using a badge from the [Creative Commons website](https://creativecommons.org/about/downloads/).\\r\n\\r\nFor\nexample\\r\n\\r\n![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\\r\n\\r\nLonghaired\nDachshund portrait by Flickr user Soggydan (ht<span>tps://</span>commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg)\n- CC-BY"
      CSD U2 Inspector Warm Up_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**<span>\nHow do I use the Inspector Tool? </span>**</summary>\\r\nThe Inspector Tool\nis a great way to learn more about unfamiliar code in Web Lab. To turn on\nthe Inspector Tool, click <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">. You will know that the Inspector Tool is\non because the button will turn white and say \"Inspector: On\". Once you\nturn on the Inspector Tool, you can hover over anything in the preview area\nand Web Lab will highlight the code that is making that part of the page appear.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nExplore HTML\\r\n\\r\nThis is a web page written in HTML, the language of the\nweb. You'll learn more about how it works, but first explore it by using\nthe Inspector Tool.\\r\n\\r\n# Do This\\r\n\\r\n* Click the Tip \"How do I use\nthe Inspector Tool?\" on the right to learn how to use the Inspector Tool.\\r\n*\nFollow the instructions in the web page to explore the web page and discuss\nwith a partner how it is working."
      CSD U2 Inspector Warm Up_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**<span>\nHow do I use the Inspector Tool? </span>**</summary>\\r\nThe Inspector Tool\nis a great way to learn more about unfamiliar code in Web Lab. To turn on\nthe Inspector Tool, click <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">. You will know that the Inspector Tool is\non because the button will turn white and say \"Inspector: On\". Once you\nturn on the Inspector Tool, you can hover over anything in the preview area\nand Web Lab will highlight the code that is making that part of the page appear.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nExplore HTML\\r\n\\r\nThis is a web page written in HTML, the language of the\nweb. You'll learn more about how it works, but first explore it by using\nthe Inspector Tool.\\r\n\\r\n# Do This\\r\n\\r\n* Click the Tip \"How do I use\nthe Inspector Tool?\" on the right to learn how to use the Inspector Tool.\\r\n*\nFollow the instructions in the web page to explore the web page and discuss\nwith a partner how it is working."
      CSD U2 Project Start_markdown_instruction: "# Start Your Project\\r\n\\r\nNow\nthat you have a plan for your personal website, you can start coding it here.  Don't\nworry if you can't do everything you want today.  You'll have plenty of\nchances to improve your work as you learn more about developing websites.\\r\n\\r\n#\nDo This\\r\n* Use HTML to create the page that you sketched out.  Make sure\nit includes\\r\n * At least **two headings of different sizes**\\r\n * At least\n**one paragraph**\\r\n* **Reflect** on your page by comparing to your sketch\nand showing it to your partner"
      CSD U2 Project Start_2018_markdown_instruction: "# Start Your Project\\r\n\\r\nNow\nthat you have a plan for your personal website, you can start coding it here.  Don't\nworry if you can't do everything you want today.  You'll have plenty of\nchances to improve your work as you learn more about developing websites.\\r\n\\r\n#\nDo This\\r\n* Use HTML to create the page that you sketched out.  Make sure\nit includes\\r\n * At least **two headings of different sizes**\\r\n * At least\n**one paragraph**\\r\n* **Reflect** on your page by comparing to your sketch\nand showing it to your partner"
      CSD U2 RGB intro_markdown_instruction: "# RGB Colors\\r\n\\r\nAll colors, whether\nthey have names or not, can be described by the level of red, green, and blue\nlight it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You\ncan use the widget on your left to try out different RGB values and see what\ncolors they make.\\r\n\\r\n* **Click \"Run\" to start the widget on the left,**\nand use the sliders to adjust the levels of red, green, and blue light.\\r\n*\nFor each of the colors below, match it to its RGB value.\\r\n\\r\nA) red: 216,\ngreen: 191, blue: 216 - rgb(216,191,216)\\r\n\\r\nB) red: 255, green: 239, blue:\n213 - rgb(255,239,213)\\r\n\\r\nC) red: 250, green: 128, blue: 114 - rgb(250,128,114)\\r\n\\r\nD)\nred: 70, green: 130, blue: 180 - rgb(70, 130, 180)\\r\n\\r\nE) red: 107, green:\n142, blue: 35 - rgb(107,142,35)\\r\n\\r\n\\r\n<div style=\"font-size: 16px\">\\r\n<br\n/>\\r\n<details>\\r\n<summary>**Why do red and green make yellow?**</summary>\\r\n<p>When\nyou mix paint, red and green make brown, but RGB color mixing uses light instead\nof paint, so the colors mix differently.  RGB uses _additive color mixing_.  In\nadditive color mixing, red and green make yellow, red and blue make magenta,\nand blue and green make cyan.  When you mix the three primary colors together\n(red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a>\\r\n</p> </details>\\r\n<details>\\r\n<summary>**How many\ncolors can I make with RGB color mixing?**</summary>\\r\n<p>\\r\nYou can make\nover sixteen million different colors with RGB color mixing.\\r\n</p></details>\\r\n</div>"
      CSD U2 RGB intro_2018_markdown_instruction: "# RGB Colors\\r\n\\r\nAll colors,\nwhether they have names or not, can be described by the level of red, green,\nand blue light it takes to make them.  This is called an RGB value (short\nfor Red-Green-Blue).  You can use the widget on your left to try out different\nRGB values and see what colors they make.\\r\n\\r\n* **Click \"Run\" to start\nthe widget on the left,** and use the sliders to adjust the levels of red,\ngreen, and blue light.\\r\n* For each of the colors below, match it to its\nRGB value.\\r\n\\r\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\\r\n\\r\nB)\nred: 255, green: 239, blue: 213 - rgb(255,239,213)\\r\n\\r\nC) red: 250, green:\n128, blue: 114 - rgb(250,128,114)\\r\n\\r\nD) red: 70, green: 130, blue: 180\n- rgb(70, 130, 180)\\r\n\\r\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\\r\n\\r\n\\r\n<div\nstyle=\"font-size: 16px\">\\r\n<br />\\r\n<details>\\r\n<summary>**Why do red\nand green make yellow?**</summary>\\r\n<p>When you mix paint, red and green\nmake brown, but RGB color mixing uses light instead of paint, so the colors\nmix differently.  RGB uses _additive color mixing_.  In additive color mixing,\nred and green make yellow, red and blue make magenta, and blue and green make\ncyan.  When you mix the three primary colors together (red, green, and blue),\nthey make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a>\\r\n</p> </details>\\r\n<details>\\r\n<summary>**How many\ncolors can I make with RGB color mixing?**</summary>\\r\n<p>\\r\nYou can make\nover sixteen million different colors with RGB color mixing.\\r\n</p></details>\\r\n</div>"
      CSD U2 RGB others_markdown_instruction: "# Spring and Autumn Colors\\r\n\\r\nChoose\nRGB values for spring and autumn colors.\\r\n\\r\n* Click \"Run\" to start the\nwidget.\\r\n* Adjust the levels until you find a spring color you like, then\nwrite down the values on your activity guide.\\r\n* Do the same for an autumn\ncolor.   You will need the RGB values for the next activity.\\r\n\\r\n\\r\n<div\nstyle=\"font-size: 16px\">\\r\n<br />\\r\n<details><summary>**Where can I see\nthe whole range of color types?**</summary>\\r\nYou can find many options for\ncolors at <a href=\"http://www.w3schools.com/colors/colors_picker.asp\">W3Schools\n- HTML Color Picker</a></details>\\r\n<details>\\r\n<summary>**Why do red and\ngreen make yellow?**</summary>\\r\n<p>When you mix paint, red and green make\nbrown, but RGB color mixing uses light instead of paint, so the colors mix\ndifferently.  RGB uses _additive color mixing_.  In additive color mixing,\nred and green make yellow, red and blue make magenta, and blue and green make\ncyan.  When you mix the three primary colors together (red, green, and blue),\nthey make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 RGB others_2018_markdown_instruction: "# Spring and Autumn Colors\\r\n\\r\nChoose\nRGB values for spring and autumn colors.\\r\n\\r\n* Click \"Run\" to start the\nwidget.\\r\n* Adjust the levels until you find a spring color you like, then\nwrite down the values on your activity guide.\\r\n* Do the same for an autumn\ncolor.   You will need the RGB values for the next activity.\\r\n\\r\n\\r\n<div\nstyle=\"font-size: 16px\">\\r\n<br />\\r\n<details><summary>**Where can I see\nthe whole range of color types?**</summary>\\r\nYou can find many options for\ncolors at <a href=\"http://www.w3schools.com/colors/colors_picker.asp\">W3Schools\n- HTML Color Picker</a></details>\\r\n<details>\\r\n<summary>**Why do red and\ngreen make yellow?**</summary>\\r\n<p>When you mix paint, red and green make\nbrown, but RGB color mixing uses light instead of paint, so the colors mix\ndifferently.  RGB uses _additive color mixing_.  In additive color mixing,\nred and green make yellow, red and blue make magenta, and blue and green make\ncyan.  When you mix the three primary colors together (red, green, and blue),\nthey make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 RGB summer_markdown_instruction: "# Summer Color\\r\n\\r\nFind the RGB\nvalues for a summery yellow color.\\r\n\\r\n* Click \"Run\" to start the widget.\\r\n*\nAdjust the levels until you match the summery yellow at the bottom of the\nwidget.\\r\n* Write the RGB values on your activity guide.  You will need them\nin the next activity.\\r\n\\r\n\\r\n<div style=\"font-size: 16px\">\\r\n<br />\\r\n<details>\\r\n<summary>**Why\ndo red and green make yellow?**</summary>\\r\n<p>When you mix paint, red and\ngreen make brown, but RGB color mixing uses light instead of paint, so the\ncolors mix differently.  RGB uses _additive color mixing_.  In additive color\nmixing, red and green make yellow, red and blue make magenta, and blue and\ngreen make cyan.  When you mix the three primary colors together (red, green,\nand blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 RGB summer_2018_markdown_instruction: "# Summer Color\\r\n\\r\nFind the\nRGB values for a summery yellow color.\\r\n\\r\n* Click \"Run\" to start the\nwidget.\\r\n* Adjust the levels until you match the summery yellow at the bottom\nof the widget.\\r\n* Write the RGB values on your activity guide.  You will\nneed them in the next activity.\\r\n\\r\n\\r\n<div style=\"font-size: 16px\">\\r\n<br\n/>\\r\n<details>\\r\n<summary>**Why do red and green make yellow?**</summary>\\r\n<p>When\nyou mix paint, red and green make brown, but RGB color mixing uses light instead\nof paint, so the colors mix differently.  RGB uses _additive color mixing_.  In\nadditive color mixing, red and green make yellow, red and blue make magenta,\nand blue and green make cyan.  When you mix the three primary colors together\n(red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 RGB winter_markdown_instruction: "# Winter Color\\r\n\\r\nIn the next\nfew levels, you'll be finding seasonal colors for a website.  Here, you'll\nneed to find the RGB values for a wintery blue color.\\r\n\\r\n* Click \"Run\"\nto start the widget.\\r\n* Adjust the levels until you match the wintery blue\ncolor at the bottom of the widget.\\r\n* Write the RGB values on your activity\nguide.  You will need them in the next activity.\\r\n\\r\n\\r\n<div style=\"font-size:\n16px\">\\r\n<br />\\r\n<details><summary>**How do I make a color lighter?**</summary>\\r\n<p>To\nmake a color lighter, you need to add more light (increase the level of the\nslider).  If you have already added the maximum amount of blue light, you\nwill need to add more red and green light to make your blue lighter.</p></details>\\r\n<details>\\r\n<summary>**Why\ndo red and green make yellow?**</summary>\\r\n<p>When you mix paint, red and\ngreen make brown, but RGB color mixing uses light instead of paint, so the\ncolors mix differently.  RGB uses _additive color mixing_.  In additive color\nmixing, red and green make yellow, red and blue make magenta, and blue and\ngreen make cyan.  When you mix the three primary colors together (red, green,\nand blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 RGB winter_2018_markdown_instruction: "# Winter Color\\r\n\\r\nIn the\nnext few levels, you'll be finding seasonal colors for a website.  Here,\nyou'll need to find the RGB values for a wintery blue color.\\r\n\\r\n* Click\n\"Run\" to start the widget.\\r\n* Adjust the levels until you match the wintery\nblue color at the bottom of the widget.\\r\n* Write the RGB values on your\nactivity guide.  You will need them in the next activity.\\r\n\\r\n\\r\n<div\nstyle=\"font-size: 16px\">\\r\n<br />\\r\n<details><summary>**How do I make\na color lighter?**</summary>\\r\n<p>To make a color lighter, you need to add\nmore light (increase the level of the slider).  If you have already added\nthe maximum amount of blue light, you will need to add more red and green\nlight to make your blue lighter.</p></details>\\r\n<details>\\r\n<summary>**Why\ndo red and green make yellow?**</summary>\\r\n<p>When you mix paint, red and\ngreen make brown, but RGB color mixing uses light instead of paint, so the\ncolors mix differently.  RGB uses _additive color mixing_.  In additive color\nmixing, red and green make yellow, red and blue make magenta, and blue and\ngreen make cyan.  When you mix the three primary colors together (red, green,\nand blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a></p> </details>\\r\n<details>\\r\n<summary>**How many colors\ncan I make with RGB color mixing?**</summary>\\r\n<p>You can make make over\nsixteen million different colors with RGB color mixing.</p></details>\\r\n</div>"
      CSD U2 add content_markdown_instruction: "# Add HTML\\r\n\\r\nNext, you should\nadd the HTML to your pages.\\r\n\\r\n# Do This\\r\n* For each of the new pages\nthat you've created, add HTML to make the page you sketched in your project\nguide.\\r\n* You may also add more HTML to the pages you've already created.\\r\n"
      CSD U2 add content_2018_markdown_instruction: "# Add HTML\\r\n\\r\nNext, you\nshould add the HTML to your pages.\\r\n\\r\n# Do This\\r\n* For each of the new\npages that you've created, add HTML to make the page you sketched in your\nproject guide.\\r\n* You may also add more HTML to the pages you've already\ncreated.\\r\n"
      CSD U2 add file - OLD_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a style sheet?**</summary>\\r\nA\nstyle sheet is a document that controls how a web page will appear.  External\nstyle sheets are separate files that are linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new style sheet?**</summary>\\r\nTo create a new style sheet,\nclick on the \"Add CSS\" button above the code area.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nshould I name my style sheet?**</summary>\\r\nYou can name your style sheet\nanything, but it's better to choose a relevant name, such as \"style.css\"\nor \"aboutmestyles.css\" so that it's clear what the file is.  Your file\nshould always end in the \".css\" extension.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I rename a file?**</summary>\\r\nTo rename a file, you can right click (or\ncontrol click) on the file name and choose the \"Rename\" option.  This will\nallow you to type in a new file name.  Clicking on a file name after it is\nalready highlighted will also allow you to rename the file.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a style sheet to a web page?**</summary>\\r\nTo add a style sheet\nto a web page, open up the code for the web page.  Inside the head tag, add\nthe following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change\n\"style.css\" to the name of your style sheet.\\r\n</details>\\r\n</div>\\r\n#\nAdding a Style Sheet\\r\n\\r\nThis is your About Me page from before.  In the\nnext level, you'll have a chance to add some different styles to it, but\nfirst, you need to add a style sheet, name it, and link it to your html page.\\r\n\\r\n1.\nCreate a new style sheet for your project.\\r\n2. Rename the style sheet file.\\r\n3.\nAdd your style sheet to your HTML page.\\r\n\\r\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 add file_markdown_instruction: "<div style=\"float: right; height: 250px;\nwidth: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new style sheet?**</summary>\\r\nTo create a new style sheet,\nclick on the \"Add CSS\" button above the code area.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nshould I name my style sheet?**</summary>\\r\nYou can name your style sheet\nanything, but it's better to choose a relevant name, such as \"style.css\"\nor \"aboutmestyles.css\" so that it's clear what the file is.  Your file\nshould always end in the \".css\" extension.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I rename a file?**</summary>\\r\nTo rename a file, you can right click (or\ncontrol click) on the file name and choose the \"Rename\" option.  This will\nallow you to type in a new file name.  Clicking on a file name after it is\nalready highlighted will also allow you to rename the file.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a style sheet to a web page?**</summary>\\r\nTo add a style sheet\nto a web page, open up the code for the web page.  Inside the head tag, add\nthe following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change\n\"style.css\" to the name of your style sheet.\\r\n</details>\\r\n</div>\\r\n#\nAdding a Style Sheet\\r\n\\r\nThis is your project from before.  In the next\nlevel, you'll have a chance to add some different styles to it, but first,\nyou need to add a style sheet, name it, and link it to your html page.\\r\n\\r\n1.\nCreate a new style sheet for your project.\\r\n2. Rename the style sheet file.\\r\n3.\nAdd your style sheet to your HTML page.\\r\n\\r\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 add file_2018_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is a style sheet?**</summary>\\r\nA\nstyle sheet is a document that controls how a web page will appear.  External\nstyle sheets are separate files that are linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new style sheet?**</summary>\\r\nTo create a new style sheet,\nclick on the \"Add CSS\" button above the code area.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nshould I name my style sheet?**</summary>\\r\nYou can name your style sheet\nanything, but it's better to choose a relevant name, such as \"style.css\"\nor \"aboutmestyles.css\" so that it's clear what the file is.  Your file\nshould always end in the \".css\" extension.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I rename a file?**</summary>\\r\nTo rename a file, you can right click (or\ncontrol click) on the file name and choose the \"Rename\" option.  This will\nallow you to type in a new file name.  Clicking on a file name after it is\nalready highlighted will also allow you to rename the file.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a style sheet to a web page?**</summary>\\r\nTo add a style sheet\nto a web page, open up the code for the web page.  Inside the head tag, add\nthe following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change\n\"style.css\" to the name of your style sheet.\\r\n</details>\\r\n</div>\\r\n#\nAdding a Style Sheet\\r\n\\r\nThis is your project from before.  In the next\nlevel, you'll have a chance to add some different styles to it, but first,\nyou need to add a style sheet, name it, and link it to your html page.\\r\n\\r\n1.\nCreate a new style sheet for your project.\\r\n2. Rename the style sheet file.\\r\n3.\nAdd your style sheet to your HTML page.\\r\n\\r\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 add links_markdown_instruction: "# Missing Home Link\\r\n\\r\nCopying\nyour hyperlinks to all your pages allowed you to get to most of the pages\non your website from any other page. One hyperlink is missing - the one to\nget you to your home page (index.html).\\r\n\\r\n**Add a hyperlink to your home\npage from all the pages, even your home page itself.** Adding it to your home\npage will keep your navigation header consistent on all pages."
      CSD U2 challenge_markdown_instruction: "# Challenge\\r\n\\r\nCheck with your\nteacher before starting on this challenge.\\r\n\\r\nThis page is only partially\nfinished, and it has some bugs.  Luckily, there are comments that should help\nyou to finish the page as the author intended.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the code and with your partner and discuss what the page should look like.\\r\n*\nWork together to finish the page, paying attention to formatting.\\r\n* Compare\nwith another pair to see whether your pages are the same.\\r\n"
      CSD U2 challenge_2018_markdown_instruction: "# Challenge\\r\n\\r\nCheck with\nyour teacher before starting on this challenge.\\r\n\\r\nThis page is only partially\nfinished, and it has some bugs.  Luckily, there are comments that should help\nyou to finish the page as the author intended.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the code and with your partner and discuss what the page should look like.\\r\n*\nWork together to finish the page, paying attention to formatting.\\r\n* Compare\nwith another pair to see whether your pages are the same.\\r\n"
      CSD U2 classes modify_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a winter class and add elements\nto the class.\\r\n\\r\nThe class is created in the style sheet, with the following\ncode.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nrules can be added to a class rule-set?**</summary>\\r\nA class rule-set can\nhave the same rules as any other type of selector.  If a rule does not apply\nto the content of the class (for example, using `font-size` on an element\nwith no text), then the computer will ignore that rule, but still use the\nrules that work.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n<details>\\r\n<summary>**I got different\nRGB values, but mine are right, too.**</summary>\\r\nBecause RGB creates millions\nof different colors, some are so similar that people have a hard time telling\nthem apart.  That means that there are multiple RGB values that are close\nenough to work for our winter color.\\r\n\\r\n</details>\\r\n</div>\\r\n# Adding\nRules\\r\n\\r\nYour winter words should all have the same color and font.\\r\n\\r\n*\nFind the CSS rule-set in the style sheet that gives the winter words their\nstyle.\\r\n* Add a rule that changes the font of the winter words.  It can\nbe any font, but it will need to be different from that of the other three\nseasons.\\r\n* Add any other rules you'd like for your winter words."
      CSD U2 classes modify_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a winter class and add elements\nto the class.\\r\n\\r\nThe class is created in the style sheet, with the following\ncode.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nrules can be added to a class rule-set?**</summary>\\r\nA class rule-set can\nhave the same rules as any other type of selector.  If a rule does not apply\nto the content of the class (for example, using `font-size` on an element\nwith no text), then the computer will ignore that rule, but still use the\nrules that work.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n<details>\\r\n<summary>**I got different\nRGB values, but mine are right, too.**</summary>\\r\nBecause RGB creates millions\nof different colors, some are so similar that people have a hard time telling\nthem apart.  That means that there are multiple RGB values that are close\nenough to work for our winter color.\\r\n\\r\n</details>\\r\n</div>\\r\n# Adding\nRules\\r\n\\r\nYour winter words should all have the same color and font.\\r\n\\r\n*\nFind the CSS rule-set in the style sheet that gives the winter words their\nstyle.\\r\n* Add a rule that changes the font of the winter words.  It can\nbe any font, but it will need to be different from that of the other three\nseasons.\\r\n* Add any other rules you'd like for your winter words."
      CSD U2 classes sample_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a winter class and add elements\nto the class.\\r\n\\r\nThe class is created in the style sheet, with the following\ncode.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the selector have a period in front of it?**</summary>\\r\nIn CSS, a period\nin front of a selector means that the selector is the name of a class.  If\nthere is no period, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n<details>\\r\n<summary>**I got different\nRGB values, but mine are right, too.**</summary>\\r\nBecause RGB creates millions\nof different colors, some are so similar that people have a hard time telling\nthem apart.  That means that there are multiple RGB values that are close\nenough to work for our winter color.\\r\n\\r\n</details>\\r\n</div>\\r\n# Classes\\r\n\\r\nIn\nthis page, the web developer has used classes to give some of the words our\nwinter color.\\r\n\\r\n* Look at the HTML code for the winter words.  Why is\n\"snowy\" the only winter word without the winter color?\\r\n* Add code to\nthe HTML that will give \"snowy\" the same winter blue as the other words.\\r\n*\nLook inside the style sheet to find the rule that makes all the words in the\nwinter class blue, and check whether your RGB numbers are close to the ones\nin the style sheet.  \\r\n* Discuss with your partner how the code works."
      CSD U2 classes sample_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a winter class and add elements\nto the class.\\r\n\\r\nThe class is created in the style sheet, with the following\ncode.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndoes the selector have a period in front of it?**</summary>\\r\nIn CSS, a period\nin front of a selector means that the selector is the name of a class.  If\nthere is no period, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n<details>\\r\n<summary>**I got different\nRGB values, but mine are right, too.**</summary>\\r\nBecause RGB creates millions\nof different colors, some are so similar that people have a hard time telling\nthem apart.  That means that there are multiple RGB values that are close\nenough to work for our winter color.\\r\n\\r\n</details>\\r\n</div>\\r\n# Classes\\r\n\\r\nIn\nthis page, the web developer has used classes to give some of the words our\nwinter color.\\r\n\\r\n* Look at the HTML code for the winter words.  Why is\n\"snowy\" the only winter word without the winter color?\\r\n* Add code to\nthe HTML that will give \"snowy\" the same winter blue as the other words.\\r\n*\nLook inside the style sheet to find the rule that makes all the words in the\nwinter class blue, and check whether your RGB numbers are close to the ones\nin the style sheet.  \\r\n* Discuss with your partner how the code works."
      CSD U2 classes spring_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a spring class and add elements\nto the class.\\r\n\\r\nThe spring class is already created in the style sheet,\nbut it doesn't have any rules.\\r\n\\r\n<pre>.spring {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nLook\nat the rules in the `winter` class for clues to how to make rules for the\nsummer class.\\r\n\\r\nYou will also need to add some elements to the spring\nclass inside your HTML file.\\r\n\\r\nThe code in the HTML file that adds a\n`h5` element to the winter class is `<h5 class=\"winter\">`.  Use this pattern\nto add elements to the spring class, too.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nrules can be added to a class rule-set?**</summary>\\r\nA class rule-set can\nhave the same rules as any other type of selector.  If a rule does not apply\nto the content of the class (for example, using `font-size` on an element\nwith no text), then the computer will ignore that rule, but still use the\nrules that work.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n</div>\\r\n# Spring Class\\r\n\\r\nNow\nthat your winter class is ready, you can start on the other seasons.\\r\n\\r\n*\nFind the empty CSS rule-set in the style sheet that gives the spring words\ntheir style.\\r\n* Add two rules, one to give the text your spring color for\nearlier in the lesson, and another to give the text a different font, font\nsize, or decoration.\\r\n* Add the spring class to the spring elements in the\nHTML page."
      CSD U2 classes spring_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code to work, you need to both create a spring class and add elements\nto the class.\\r\n\\r\nThe spring class is already created in the style sheet,\nbut it doesn't have any rules.\\r\n\\r\n<pre>.spring {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nLook\nat the rules in the `winter` class for clues to how to make rules for the\nsummer class.\\r\n\\r\nYou will also need to add some elements to the spring\nclass inside your HTML file.\\r\n\\r\nThe code in the HTML file that adds a\n`h5` element to the winter class is `<h5 class=\"winter\">`.  Use this pattern\nto add elements to the spring class, too.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nrules can be added to a class rule-set?**</summary>\\r\nA class rule-set can\nhave the same rules as any other type of selector.  If a rule does not apply\nto the content of the class (for example, using `font-size` on an element\nwith no text), then the computer will ignore that rule, but still use the\nrules that work.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n</div>\\r\n# Spring Class\\r\n\\r\nNow\nthat your winter class is ready, you can start on the other seasons.\\r\n\\r\n*\nFind the empty CSS rule-set in the style sheet that gives the spring words\ntheir style.\\r\n* Add two rules, one to give the text your spring color for\nearlier in the lesson, and another to give the text a different font, font\nsize, or decoration.\\r\n* Add the spring class to the spring elements in the\nHTML page."
      CSD U2 classes summer_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code for the winter class to work, it needs to both create a winter class\nand add elements to the class.\\r\n\\r\nThe class is created in the style sheet,\nwith the following code.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new rule-set?**</summary>\\r\nYou can create a new rule-set by\nfollowing the pattern that the `winter` and `spring` classes used in the style\nsheet.\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThe\nselector name and the color values will be different, but the following pattern\nis always the same.\\r\n\\r\n<pre>.classname {\\r\n  property1: value1;\\r\n  property2:\nvalue2;\\r\n}</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n</div>\\r\n# Summer and Autumn Classes\\r\n\\r\n*\nInside the style sheet, create a new rule-set for a \"summer\" class.\\r\n*\nAdd a rule to set the text in the summer class to your summer RGB color.\\r\n*\nAdd the summer class to the summer elements in the HTML page.\\r\n* Do the\nsame for the autumn class."
      CSD U2 classes summer_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nFor\nthe code for the winter class to work, it needs to both create a winter class\nand add elements to the class.\\r\n\\r\nThe class is created in the style sheet,\nwith the following code.\\r\n\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThis\ncode creates a class called `winter` and makes everything in the class our\nwinter blue, which has the RGB values of (195,230,255).\\r\n\\r\nThe code that\nadds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter`\ninside the opening tag adds everything inside the tag to the class.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new rule-set?**</summary>\\r\nYou can create a new rule-set by\nfollowing the pattern that the `winter` and `spring` classes used in the style\nsheet.\\r\n<pre>.winter {\\r\n  color: rgb(195,230,255);\\r\n}</pre>\\r\n\\r\nThe\nselector name and the color values will be different, but the following pattern\nis always the same.\\r\n\\r\n<pre>.classname {\\r\n  property1: value1;\\r\n  property2:\nvalue2;\\r\n}</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**Why does the selector\nhave a period in front of it?**</summary>\\r\nIn CSS, a period in front of\na selector means that the selector is the name of a class.  If there is no\nperiod, it means that the selector is the name of an HTML tag.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nwould a web developer use classes?**</summary>\\r\nA web developer uses classes\nwhen some elements should be styled differently than others, even if they\nare the same tag.  Classes can also be used to give elements that have different\ntags the same style.\\r\n</details>\\r\n</div>\\r\n# Summer and Autumn Classes\\r\n\\r\n*\nInside the style sheet, create a new rule-set for a \"summer\" class.\\r\n*\nAdd a rule to set the text in the summer class to your summer RGB color.\\r\n*\nAdd the summer class to the summer elements in the HTML page.\\r\n* Do the\nsame for the autumn class."
      CSD U2 commenting_markdown_instruction: "# Comments\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is whitespace?**</summary>\\r\nWhitespace\nrefers to any character that shows up as a blank space on the screen, such\nas a space, a tab, or a new line. Whitespace helps separate different parts\nof the document to make it easier to read.  For example, in HTML code new\nelements are usually put on a new line, even though it doesn't make any difference\nin how the page is displayed.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis indentation?**</summary>\\r\nIndentation is the placement of text farther\nto the right, or left, to separate it from surrounding text.  Indentation\nhelps to convey the program's structure.  In HTML, elements that are inside\nother elements are usually indented.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis formatting?**</summary>\\r\nFormatting is arranging text in a way that makes\nit easier to understand.  HTML is usually formatted using indentation.  That\nmeans that elements that are inside other elements are further to the right\nin code.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n</details>\\r\n</div>\\r\n\\r\nYou\ncan add **comments** to your code to explain the different parts of the code\nand what it should create.  Comments can help you to debug, and will also\nhelp other people who are trying to understand your code.\\r\n\\r\n<pre>\\r\n&lt;!--\nthis is a comment --&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nwith your partner and find the comments.\\r\n* Use the comments to help you\nfix the bugs in the HTML."
      CSD U2 commenting_2018_markdown_instruction: "# Comments\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What is whitespace?**</summary>\\r\nWhitespace\nrefers to any character that shows up as a blank space on the screen, such\nas a space, a tab, or a new line. Whitespace helps separate different parts\nof the document to make it easier to read.  For example, in HTML code new\nelements are usually put on a new line, even though it doesn't make any difference\nin how the page is displayed.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis indentation?**</summary>\\r\nIndentation is the placement of text farther\nto the right, or left, to separate it from surrounding text.  Indentation\nhelps to convey the program's structure.  In HTML, elements that are inside\nother elements are usually indented.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis formatting?**</summary>\\r\nFormatting is arranging text in a way that makes\nit easier to understand.  HTML is usually formatted using indentation.  That\nmeans that elements that are inside other elements are further to the right\nin code.  Here is an example:\\r\n<pre>\\r\n   &lt;body&gt;\\r\n      &lt;p&gt;This\nparagraph is inside the \"body\" element.&lt;/p&gt;\\r\n   &lt;/body&gt;\\r\n</pre>\\r\n</details>\\r\n</div>\\r\n\\r\nYou\ncan add **comments** to your code to explain the different parts of the code\nand what it should create.  Comments can help you to debug, and will also\nhelp other people who are trying to understand your code.\\r\n\\r\n<pre>\\r\n&lt;!--\nthis is a comment --&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nwith your partner and find the comments.\\r\n* Use the comments to help you\nfix the bugs in the HTML."
      CSD U2 create page_markdown_instruction: "# Create and Name Your New Page\\r\n\\r\nBefore\nyou start coding, you should make sure that you have all the pages that you\nneed in your project.\\r\n\\r\n# Do This\\r\n* Create a new HTML page and rename\nit. (Look at <a href=\"/s/csd2/stage/6/puzzle/8\" target=\"_new\">Lesson 6\nLevel 8</a> if you've forgotten how.)\\r\n* Repeat this process for any other\npages you want to add.\\r\n\\r\n"
      CSD U2 create page_2018_markdown_instruction: "# Create and Name Your New Page\\r\n\\r\nBefore\nyou start coding, you should make sure that you have all the pages that you\nneed in your project.\\r\n\\r\n# Do This\\r\n* Create a new HTML page and rename\nit. (Look at <a href=\"/s/csd2/stage/6/puzzle/8\" target=\"_new\">Lesson 6\nLevel 8</a> if you've forgotten how.)\\r\n* Repeat this process for any other\npages you want to add.\\r\n\\r\n"
      CSD U2 debug comments_markdown_instruction: "# Debugging\\r\n\\r\nThis page has\nimages in it. Images make finding bugs a little more tricky. Can you debug\nthis page?\\r\n\\r\nAs you are debugging you may notice a new set of symbols\nthat look something like this:\\r\n<pre>\\r\n&lt;!-- this is a comment --&gt;\\r\n</pre>\\r\n\\r\nThis\nis a **comment**. Comments are written by computer scientists creating web\npages for themselves and other humans who might look at their HTML file. Comments\nexplain the different parts of the code and what it should create.  Comments\nmight help you debug.\\r\n\\r\n# Do This\\r\n\\r\n* Find and fix all bugs in the\nstarting HTML\\r\n* You know you’ve found all of the bugs when your page matches\nthe <a href=\"https://thimbleprojects.org/danimcavoy/103295/\" target=\"_blank\">\nTarget Page</a>."
      CSD U2 header footer_markdown_instruction: "# Navigation Bar and Footer\\r\n\\r\nEach\nof your pages needs a navigation bar and a footer.\\r\n\\r\n# Do This\\r\n* For\neach page, make sure it has a navigation bar that links to other pages in\nyour site.  For a review of the navigation bar, go to <a href=\"/s/csd2/stage/9/puzzle/4\"\ntarget=\"_new\">Lesson 9 Level 4</a>.\\r\n* For each page, make sure it has\na footer at the bottom that explains the copyright information for your page.\n(Go to <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative\nCommons</a> for help in creating this HTML.)"
      CSD U2 header footer_2018_markdown_instruction: "# Navigation Bar and Footer\\r\n\\r\nEach\nof your pages needs a navigation bar and a footer.\\r\n\\r\n# Do This\\r\n* For\neach page, make sure it has a navigation bar that links to other pages in\nyour site.  For a review of the navigation bar, go to <a href=\"/s/csd2/stage/9/puzzle/4\"\ntarget=\"_new\">Lesson 9 Level 4</a>.\\r\n* For each page, make sure it has\na footer at the bottom that explains the copyright information for your page.\n(Go to <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative\nCommons</a> for help in creating this HTML.)"
      CSD U2 image tag_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I add images?**</summary>\\r\nThe `<img>` tag allows you to show images\non your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img src=\"dog.png\"\nalt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to tell the browser\nwhich file to use, extra information, called an **attribute**, is added to\nthe &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e\nand tell the name of the image. Image files names include extensions which\ntell the computer which type of image they are working with. Common extensions\nare .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have the src attribute,\nimage elements also have the `alt` attribute which describe the image. This\nis important in case the image doesn’t load or for people who have trouble\nwith their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an example of a  **void\nelement** because it starts and closes in one tag. To mark this we put the\n`/` which usually goes in the close tag at the end of the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a void tag?**</summary>\\r\nAn `<img>` tag is an example of a  **void element**\nbecause it starts and closes in one tag. To mark this we put the `/` which\nusually goes in the close tag at the end of the image tag. Void tags do not\nneed a closing tag because there is no text content which must be wrapped\nin tags. The content that shows on the screen is specified through the tags\nattributes.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an image tag\nnot have a closing tag?**</summary>\\r\nAn image tag is a void tag and void\ntags do not need a closing tag because there is no text content which must\nbe wrapped in tags. The content that shows on the screen is specified through\nthe tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What is an attribute?**</summary>\\r\nAttributes\nare extra information included in a tag.  Attributes have names and values.\nThe name tells what type of information is being provided and then the value\ngives the specific information for that tag. \\r\n\\r\nFor example &lt;img&gt;\ntags have two attributes, src and alt. src specifies the name of the image\nfile and alt tells the browser in readable text what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nImages\\r\n\\r\nA Dog vs Cat web page has been started for you. The dog image\nhas already been added to the below web page. Use an image tag to add the\ncat.jpeg image to the page below the cat header."
      CSD U2 images intro_markdown_instruction: "# Images\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I add images?**</summary>\\r\nThe `<img>` tag allows you to show images\non your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img src=\"dog.png\"\nalt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to tell the browser\nwhich file to use, extra information, called an **attribute**, is added to\nthe &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e\nand tell the name of the image. Image files names include extensions which\ntell the computer which type of image they are working with. Common extensions\nare .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have the src attribute,\nimage elements also have the `alt` attribute which describe the image. This\nis important in case the image doesn’t load or for people who have trouble\nwith their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an example of a  **void\nelement** because it starts and closes in one tag. To mark this we put the\n`/` which usually goes in the close tag at the end of the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a void tag?**</summary>\\r\nAn `<img>` tag is an example of a  **void element**\nbecause it starts and closes in one tag. To mark this we put the `/` which\nusually goes in the close tag at the end of the image tag. Void tags do not\nneed a closing tag because there is no text content which must be wrapped\nin tags. The content that shows on the screen is specified through the tags\nattributes.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an image tag\nnot have a closing tag?**</summary>\\r\nAn image tag is a void tag and void\ntags do not need a closing tag because there is no text content which must\nbe wrapped in tags. The content that shows on the screen is specified through\nthe tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What is an attribute?**</summary>\\r\nAttributes\nare extra information included in a tag.  Attributes have names and values.\nThe name tells what type of information is being provided and then the value\ngives the specific information for that tag. \\r\n\\r\nFor example &lt;img&gt;\ntags have two attributes, src and alt. src specifies the name of the image\nfile and alt tells the browser in readable text what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\nThe\nrecipe page would look a lot better with a picture of the scotcheroos, so\nwe added one onto this page.  It might look better somewhere else on the page,\nthough.\\r\n\\r\n# Do This\\r\n* Look at the file list on the left of your workspace,\nand find the file named \"scotcheroos.jpeg\"\\r\n* Use the inspector tool to\nfind the code that made the image appear on the page.\\r\n* Make sure you and\nyour partner agree on how the image tag works.\\r\n* Try to move the picture\nto the top of the page."
      CSD U2 layout style bgcolor_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the background of the page blue:\\r\n\\r\n<pre>body\n{\\r\n  background-color: lightblue;\\r\n}</pre>\\r\n\\r\n* `body` is the _selector_.  It\nspecifies which elements will have to follow the rules inside the curly braces,\nin this case, the body element is the entire page.\\r\n* `background-color:\nlightblue;` is the rule that makes the entire page light blue.\\r\n * `background-color`\nis the _property_.  It explains what the rule is about, in this case the color\nof the background.\\r\n * `lightblue` is the _value_.  It explains how the\nrule should be applied, in this case making the background light blue.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ncolors can I use in CSS?**</summary>\\r\nCSS includes most common color names\n(red, blue, green, etc.), and many uncommon ones.  You can see a full list\nof CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `background-color` property do?**</summary>\\r\nThe `background-color`\nproperty determines the color of the background of an element.  You can read\nmore about the property at <a href=\"http://www.w3schools.com/cssref/pr_background-color.asp\">W3Schools\n- CSS background-color Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nif an element inside the page has a different background color from the body?**</summary>\\r\nYou\ncan see the answer to this question by adding a `background-color` rule to\nthe `p` tag.  The paragraphs will have the background color in the rule for\nthe `p` tag, and the rest of the page will follow the rule for the `body`\ntag.\\r\n</details>\\r\n<details>\\r\n<summary>**What is a style sheet?**</summary>\\r\nA\nstyle sheet is a document that controls how a web page will appear.  External\nstyle sheets are separate files that are linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nBackground Color\\r\n\\r\n* Find the code in the style sheet that is making\nthe background of the entire page light blue.\\r\n* Change the code to make\nthe page a different color.\\r\n* Try to change the background color of just\nthe paragraphs."
      CSD U2 layout style bgcolor_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the background of the page blue:\\r\n\\r\n<pre>body\n{\\r\n  background-color: lightblue;\\r\n}</pre>\\r\n\\r\n* `body` is the _selector_.  It\nspecifies which elements will have to follow the rules inside the curly braces,\nin this case, the body element is the entire page.\\r\n* `background-color:\nlightblue;` is the rule that makes the entire page light blue.\\r\n * `background-color`\nis the _property_.  It explains what the rule is about, in this case the color\nof the background.\\r\n * `lightblue` is the _value_.  It explains how the\nrule should be applied, in this case making the background light blue.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ncolors can I use in CSS?**</summary>\\r\nCSS includes most common color names\n(red, blue, green, etc.), and many uncommon ones.  You can see a full list\nof CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `background-color` property do?**</summary>\\r\nThe `background-color`\nproperty determines the color of the background of an element.  You can read\nmore about the property at <a href=\"http://www.w3schools.com/cssref/pr_background-color.asp\">W3Schools\n- CSS background-color Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nif an element inside the page has a different background color from the body?**</summary>\\r\nYou\ncan see the answer to this question by adding a `background-color` rule to\nthe `p` tag.  The paragraphs will have the background color in the rule for\nthe `p` tag, and the rest of the page will follow the rule for the `body`\ntag.\\r\n</details>\\r\n<details>\\r\n<summary>**What is a style sheet?**</summary>\\r\nA\nstyle sheet is a document that controls how a web page will appear.  External\nstyle sheets are separate files that are linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nBackground Color\\r\n\\r\n* Find the code in the style sheet that is making\nthe background of the entire page light blue.\\r\n* Change the code to make\nthe page a different color.\\r\n* Try to change the background color of just\nthe paragraphs."
      CSD U2 layout style body_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What does the `body` selector do?**</summary>\\r\nBecause\nthe content of the web page is all inside the `body` tag, the body selector\ngives style rules for everything on the web page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `color` property do?**</summary>\\r\nThe `color` property specifies\nthe color of the text.  If there’s no text, it won’t do anything. Read more\nat <a href=\"http://www.w3schools.com/cssref/pr_text_color.asp\"> W3Schools\n- CSS color Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `text-align` property do?**</summary>\\r\nThe `text-align` property aligns\nthe text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n- CSS text-align Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `text-decoration` property do?**</summary>\\r\nThe `text-decoration`\nproperty puts a line over, under, or through a piece of text.  You can read\nmore about the property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `font-family` property do?**</summary>\\r\nThe `font-family` property\nchanges the font of the text.  It gives a general description of the type\nof font that should be used, but each browser might display the font slightly\ndifferently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">W3chools\n- CSS font-family Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `font-size` property do?**</summary>\\r\nThe `font-size` property\nchanges the size of the text.  You can use general terms, such as `small`,\n`medium`, and `large`, or you can specify the exact size in pixels, such as\n`20px`. Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\">W3Schools\n- CSS font-size Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nThe Body Element\\r\n\\r\n* Find the `body` rule-set in the style sheet.\\r\n*\nDiscuss with a partner what you think will happen if you add `text-align`,\n`color`, or other text properties to the `body` rule set.\\r\n* Try out some\ndifferent properties to check your guesses."
      CSD U2 layout style body_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What does the `body` selector do?**</summary>\\r\nBecause\nthe content of the web page is all inside the `body` tag, the body selector\ngives style rules for everything on the web page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `color` property do?**</summary>\\r\nThe `color` property specifies\nthe color of the text.  If there’s no text, it won’t do anything. Read more\nat <a href=\"http://www.w3schools.com/cssref/pr_text_color.asp\"> W3Schools\n- CSS color Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `text-align` property do?**</summary>\\r\nThe `text-align` property aligns\nthe text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n- CSS text-align Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `text-decoration` property do?**</summary>\\r\nThe `text-decoration`\nproperty puts a line over, under, or through a piece of text.  You can read\nmore about the property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `font-family` property do?**</summary>\\r\nThe `font-family` property\nchanges the font of the text.  It gives a general description of the type\nof font that should be used, but each browser might display the font slightly\ndifferently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">W3chools\n- CSS font-family Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `font-size` property do?**</summary>\\r\nThe `font-size` property\nchanges the size of the text.  You can use general terms, such as `small`,\n`medium`, and `large`, or you can specify the exact size in pixels, such as\n`20px`. Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\">W3Schools\n- CSS font-size Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nThe Body Element\\r\n\\r\n* Find the `body` rule-set in the style sheet.\\r\n*\nDiscuss with a partner what you think will happen if you add `text-align`,\n`color`, or other text properties to the `body` rule set.\\r\n* Try out some\ndifferent properties to check your guesses."
      CSD U2 layout style border_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndoes the code work?**</summary>\\r\nHere is the code that is making the image\nborders:\\r\n\\r\n<pre>img {\\r\n  border-color: saddlebrown;\\r\n  border-width:\n4px;\\r\n  border-style: solid;\\r\n  border-radius: 10px;\\r\n}</pre>\\r\n\\r\n*\n`img` is the _selector_.  It specifies which elements will have to follow\nthe rules inside the curly braces, in this case, the images.\\r\n* `border-color:\nsaddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius:\n10px;` are the rules that make the border.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Borders\\r\n\\r\n*\nFind the rules in the style sheet that set image borders color and width.\\r\n*\nChange the color and width of your borders.\\r\n* Try out some different border\nstyles.\\r\n  * Choose from `dotted`, `dashed`, `solid`, and `double`\\r\n*\nPut a border on another type of page element, such as one of the headings\nor the paragraphs."
      CSD U2 layout style border_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndoes the code work?**</summary>\\r\nHere is the code that is making the image\nborders:\\r\n\\r\n<pre>img {\\r\n  border-color: saddlebrown;\\r\n  border-width:\n4px;\\r\n  border-style: solid;\\r\n  border-radius: 10px;\\r\n}</pre>\\r\n\\r\n*\n`img` is the _selector_.  It specifies which elements will have to follow\nthe rules inside the curly braces, in this case, the images.\\r\n* `border-color:\nsaddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius:\n10px;` are the rules that make the border.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Borders\\r\n\\r\n*\nFind the rules in the style sheet that set image borders color and width.\\r\n*\nChange the color and width of your borders.\\r\n* Try out some different border\nstyles.\\r\n  * Choose from `dotted`, `dashed`, `solid`, and `double`\\r\n*\nPut a border on another type of page element, such as one of the headings\nor the paragraphs."
      CSD U2 layout style borderradius_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image borders:\\r\n\\r\n<pre>img {\\r\n  border-color:\nsaddlebrown;\\r\n  border-width: 4px;\\r\n  border-style: solid;\\r\n  border-radius:\n10px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces, in this case, the images.\\r\n*\n`border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`,\nand `border-radius: 10px;` are the rules that make the border.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Border Radius\\r\n\\r\n*\nLook at the `border-radius` property inside your `img` rule-set\\r\n* Discuss\nwith your partner what you think the property does.\\r\n* Try different values\nfor border radius and decide which one you like the best."
      CSD U2 layout style borderradius_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image borders:\\r\n\\r\n<pre>img {\\r\n  border-color:\nsaddlebrown;\\r\n  border-width: 4px;\\r\n  border-style: solid;\\r\n  border-radius:\n10px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces, in this case, the images.\\r\n*\n`border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`,\nand `border-radius: 10px;` are the rules that make the border.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Border Radius\\r\n\\r\n*\nLook at the `border-radius` property inside your `img` rule-set\\r\n* Discuss\nwith your partner what you think the property does.\\r\n* Try different values\nfor border radius and decide which one you like the best."
      CSD U2 layout style float_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image float on the left hand side of the page:\\r\n\\r\n<pre>img\n{\\r\n  float: left;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces, in this\ncase, the images.\\r\n* `float: left;` is the rule that makes the image float\nto the left.\\r\n</details>\\r\n<details>\\r\n<summary>**What does the `float`\nproperty do?**</summary>\\r\nThe `float` property makes an element \"float\",\nmeaning that the elements that come after it all flow around it.  If the `float`\nvalue is `left`, the element will float to the left, and the elements after\nit will show up on its right.  If the `float` value is `right`, the element\nwill float to the right, and the elements after it will show up on its left.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Float\\r\n\\r\n* Look\nat the `float` property inside your `img` rule-set\\r\n* Discuss with your\npartner what you think the property does.\\r\n* Change the value from `left`\nto `right`."
      CSD U2 layout style float_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image float on the left hand side of the page:\\r\n\\r\n<pre>img\n{\\r\n  float: left;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces, in this\ncase, the images.\\r\n* `float: left;` is the rule that makes the image float\nto the left.\\r\n</details>\\r\n<details>\\r\n<summary>**What does the `float`\nproperty do?**</summary>\\r\nThe `float` property makes an element \"float\",\nmeaning that the elements that come after it all flow around it.  If the `float`\nvalue is `left`, the element will float to the left, and the elements after\nit will show up on its right.  If the `float` value is `right`, the element\nwill float to the right, and the elements after it will show up on its left.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Float\\r\n\\r\n* Look\nat the `float` property inside your `img` rule-set\\r\n* Discuss with your\npartner what you think the property does.\\r\n* Change the value from `left`\nto `right`."
      CSD U2 layout style freeplay - OLD_markdown_instruction: "# Personal Web Site\\r\n\\r\nTry\nout these some new CSS properties on your personal web site.\\r\n\\r\n* Add\nstyling of your choice to your web site. Be sure to use at least 3 new CSS\nproperties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least 3 of the following CSS Properties\nare used:\\r\n\\r\n * `background-color`\\r\n * `height`\\r\n * `width`\\r\n *\n`border-style`\\r\n * `border-radius`\\r\n * `border-width`\\r\n * `float`\\r\n\n* `margin`\\r\n\\r\n\\r\nIf you’ve used at least 3 of the properties from the\nchecklist, you can explore some additional CSS properties to add to your About\nMe page."
      CSD U2 layout style freeplay_markdown_instruction: "# Personal Web Site\\r\n\\r\nTry\nout some of these new CSS properties on your personal web site.\\r\n\\r\n* Add\nstyling of your choice to your web site. Be sure to use at least three new\nCSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least three of the following\nCSS Properties are used:\\r\n\\r\n * `background-color`\\r\n * `height`\\r\n *\n`width`\\r\n * `border-style`\\r\n * `border-radius`\\r\n * `border-width`\\r\n\n* `float`\\r\n * `margin`\\r\n\\r\nWe encourage you to use more than three, though!  Explore\nadditional CSS properties and add them to your page."
      CSD U2 layout style freeplay_2018_markdown_instruction: "# Personal Web Site\\r\n\\r\nTry\nout some of these new CSS properties on your personal web site.\\r\n\\r\n* Add\nstyling of your choice to your web site. Be sure to use at least three new\nCSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least three of the following\nCSS Properties are used:\\r\n\\r\n * `background-color`\\r\n * `height`\\r\n *\n`width`\\r\n * `border-style`\\r\n * `border-radius`\\r\n * `border-width`\\r\n\n* `float`\\r\n * `margin`\\r\n\\r\nWe encourage you to use more than three, though!  Explore\nadditional CSS properties and add them to your page."
      CSD U2 layout style margin_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is putting extra space around the images:\\r\n\\r\n<pre>img\n{\\r\n\\tmargin: 10px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces, in this\ncase, the images.\\r\n* `margin: 10px;` is the rule that puts 10 pixels of\nspace around the image.\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `margin` property do?**</summary>\\r\nThe `margin` property determines\nhow much space will be around the image.  Most of the time, you will define\nin the margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools\n- CSS margin Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\n`px` mean / What is a pixel?**</summary>\\r\nPixel, which is abbreviated `px`,\nis how elements are measured in CSS.  It’s the size of a single point of light\non the screen.\\r\n</details>\\r\n</div>\\r\n# Margin\\r\n\\r\nMargins specify\nhow much space should be around an element.\\r\n\\r\n* Find the `margin` property\nin the `img` rule-set.\\r\n* Change the margin to be larger, and discuss the\neffect with a partner.\\r\n* Choose another element type and give it a margin,\ntoo."
      CSD U2 layout style margin_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is putting extra space around the images:\\r\n\\r\n<pre>img\n{\\r\n\\tmargin: 10px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces, in this\ncase, the images.\\r\n* `margin: 10px;` is the rule that puts 10 pixels of\nspace around the image.\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `margin` property do?**</summary>\\r\nThe `margin` property determines\nhow much space will be around the image.  Most of the time, you will define\nin the margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools\n- CSS margin Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\n`px` mean / What is a pixel?**</summary>\\r\nPixel, which is abbreviated `px`,\nis how elements are measured in CSS.  It’s the size of a single point of light\non the screen.\\r\n</details>\\r\n</div>\\r\n# Margin\\r\n\\r\nMargins specify\nhow much space should be around an element.\\r\n\\r\n* Find the `margin` property\nin the `img` rule-set.\\r\n* Change the margin to be larger, and discuss the\neffect with a partner.\\r\n* Choose another element type and give it a margin,\ntoo."
      CSD U2 layout style sample_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What does the `body` selector do?**</summary>\\r\nBecause\nthe content of the web page is all inside the `body` tag, the body selector\ngives style rules for everything on the web page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, dashed, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Layout and Style\\r\n\\r\n*\nLook through web page below for new styles.\\r\n* Open the style sheet\\r\n*\nWith your partner, discuss which parts of the CSS code you think are making\nthe page appear different.\\r\n * What makes the entire page blue?\\r\n * How\nare the images positioned to the left of all the other elements?\\r\n * What\nmade the image corners rounded?\\r\n\\r\nIn the next few levels, you'll be\nchanging and adding new styles on this page."
      CSD U2 layout style sample_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What does the `body` selector do?**</summary>\\r\nBecause\nthe content of the web page is all inside the `body` tag, the body selector\ngives style rules for everything on the web page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-style` property do?**</summary>\\r\nThe `border-style` property\ndetermines what kind of border (solid, dotted, dashed, etc.) the element has.  You\ncan read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools\n- CSS border-style Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `border-radius` property do?**</summary>\\r\nThe `border-radius` property\ndetermines the radius of the curves at the corners of the element.  A bigger\nradius makes a bigger, softer curve, and a smaller radius makes a smaller,\nsharper curve.  A radius of zero makes a regular corner.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools\n- CSS3 border-radius property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `float` property do?**</summary>\\r\nThe `float` property makes an\nelement \"float\", meaning that the elements that come after it all flow around\nit.  If the `float` value is `left`, the element will float to the left, and\nthe elements after it will show up on its right.  If the `float` value is\n`right`, the element will float to the right, and the elements after it will\nshow up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools\n- CSS float Property</a>\\r\n</details>\\r\n</div>\\r\n\\r\n# Layout and Style\\r\n\\r\n*\nLook through web page below for new styles.\\r\n* Open the style sheet\\r\n*\nWith your partner, discuss which parts of the CSS code you think are making\nthe page appear different.\\r\n * What makes the entire page blue?\\r\n * How\nare the images positioned to the left of all the other elements?\\r\n * What\nmade the image corners rounded?\\r\n\\r\nIn the next few levels, you'll be\nchanging and adding new styles on this page."
      CSD U2 layout style width_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image its current size:\\r\n\\r\n<pre>img {\\r\n\\twidth:\n250px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces, in this case, the images.\\r\n*\n`width: 250px` is the rule that makes the image 250 pixels wide.  It also\nchanges the height so that the image does not stretch.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `width` property do?**</summary>\\r\nThe `width` property determines\nhow wide the element will be.  Most of the time, you will define in the width\nin pixels, which makes the element take up an exact amount of space on the\nscreen.  Defining the width will also change the height so that the image\ndoes not stretch, unless you have also defined the height.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools\n- CSS width Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `height` property do?**</summary>\\r\nThe `height` property determines\nhow tall the element will be.  Most of the time, you will define in the height\nin pixels, which makes the element take up an exact amount of space on the\nscreen.  Defining the height will also change the width so that the image\ndoes not stretch, unless you have also defined the width.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools\n- CSS width Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\n`px` mean / What is a pixel?**</summary>\\r\nPixel, which is abbreviated `px`,\nis how elements are measured in CSS.  It’s the size of a single point of light\non the screen.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does using a width\nand height rule at the same time sometimes stretch out the image?**</summary>\\r\nWhen\nthe width of an images changes, the height must change by the same percentage,\notherwise the image will stretch.  For example, if you double the width of\nan image, you must also double the height, or the image will be stretched\nhorizonally.  When you only define the width or the height, the computer will\nautomatically change the other property so that the image looks the same.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nWidth and Height\\r\n\\r\n* Find the property in the style sheet that controls\nthe width of the images.\\r\n* Change the width of the images to be larger\nor smaller.\\r\n* Create a new rule with a `height` property to control the\nheight of the images.\\r\n* Use the `width` property in the `p` rule-set to\nchange the width of your paragraphs."
      CSD U2 layout style width_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is making the image its current size:\\r\n\\r\n<pre>img {\\r\n\\twidth:\n250px;\\r\n}</pre>\\r\n\\r\n* `img` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces, in this case, the images.\\r\n*\n`width: 250px` is the rule that makes the image 250 pixels wide.  It also\nchanges the height so that the image does not stretch.\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `width` property do?**</summary>\\r\nThe `width` property determines\nhow wide the element will be.  Most of the time, you will define in the width\nin pixels, which makes the element take up an exact amount of space on the\nscreen.  Defining the width will also change the height so that the image\ndoes not stretch, unless you have also defined the height.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools\n- CSS width Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `height` property do?**</summary>\\r\nThe `height` property determines\nhow tall the element will be.  Most of the time, you will define in the height\nin pixels, which makes the element take up an exact amount of space on the\nscreen.  Defining the height will also change the width so that the image\ndoes not stretch, unless you have also defined the width.  You can read more\nabout this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools\n- CSS width Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What does\n`px` mean / What is a pixel?**</summary>\\r\nPixel, which is abbreviated `px`,\nis how elements are measured in CSS.  It’s the size of a single point of light\non the screen.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does using a width\nand height rule at the same time sometimes stretch out the image?**</summary>\\r\nWhen\nthe width of an images changes, the height must change by the same percentage,\notherwise the image will stretch.  For example, if you double the width of\nan image, you must also double the height, or the image will be stretched\nhorizonally.  When you only define the width or the height, the computer will\nautomatically change the other property so that the image looks the same.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nWidth and Height\\r\n\\r\n* Find the property in the style sheet that controls\nthe width of the images.\\r\n* Change the width of the images to be larger\nor smaller.\\r\n* Create a new rule with a `height` property to control the\nheight of the images.\\r\n* Use the `width` property in the `p` rule-set to\nchange the width of your paragraphs."
      CSD U2 link demo_markdown_instruction: "# Making a Multi-page Site\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What are\nhyperlinks?**</summary>\\r\nHyperlinks can connect to local web pages or external\nweb pages. To add navigation to your website you will need to add hyperlinks\nwhich connect your individual web pages. You can **add hyperlinks to your\nweb page using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a hyperlink?**</summary>\\r\nYou can **add hyperlinks to your web\npage using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nA web site\nshould include more than one web page, and they should connect to each other.   Here's\nan example of a project with multiple pages that are connected by hyperlinks\n(the blue underlined words that take you to another page when you click on\nthem).\\r\n\\r\n# Do This\\r\n* Use the inspector tool to see the code that creates\nthe hyperlinks on the top of index.html.\\r\n* Discuss with your partner how\nyou think that code works.\\r\n* Click on recipe.html in the files list on\nthe left hand side.  Add a hyperlink to the top of this page that will take\nyou back to index.html."
      CSD U2 link demo_2018_markdown_instruction: "# Making a Multi-page Site\\r\n\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What are\nhyperlinks?**</summary>\\r\nHyperlinks can connect to local web pages or external\nweb pages. To add navigation to your website you will need to add hyperlinks\nwhich connect your individual web pages. You can **add hyperlinks to your\nweb page using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a hyperlink?**</summary>\\r\nYou can **add hyperlinks to your web\npage using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nA web site\nshould include more than one web page, and they should connect to each other.   Here's\nan example of a project with multiple pages that are connected by hyperlinks\n(the blue underlined words that take you to another page when you click on\nthem).\\r\n\\r\n# Do This\\r\n* Use the inspector tool to see the code that creates\nthe hyperlinks on the top of index.html.\\r\n* Discuss with your partner how\nyou think that code works.\\r\n* Click on recipe.html in the files list on\nthe left hand side.  Add a hyperlink to the top of this page that will take\nyou back to index.html."
      CSD U2 link pages_markdown_instruction: "# Create a New Page for Your Website.\\r\n\\r\nHere's\nyour project from before.  You'll be adding another page.  Your new page\ncan be a top 10 list, a recipe, or anything you like.\\r\n\\r\n# Do This\\r\n*\nAdd a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png).  The new file will appear in the file list on the left side of the\nworkspace.\\r\n* Rename the file, either by right clicking it and choosing\n\"Rename\", or by clicking on it when it's already highlighted.  **Make sure\nthe name is unique, descriptive and ends in \".html\"**.\\r\n* Use HTML to\nfill out your new page.  It should include:\\r\n * a list\\r\n * a header\\r\n\\r\n"
      CSD U2 lists intro_markdown_instruction: "# Lists\\r\n<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are the two types of lists?**</summary>\\r\n\nThere are two types of lists in HTML, ordered and unordered lists.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n<br /><br />\\r\nAn unordered list element has the tag `<ul> </ul>`.\nThis is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li> </li>`. This\nis an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list\nitem element is a child element, which means that it goes inside of its parent\nelement, the unordered list.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an unordered list?**</summary>\\r\nMaking an unordered list has two\nsteps: making the list and adding the list items.  To make the unordered list,\nwrite the unordered list tags `<ul> </ul>`.  Next, add your list items **inside**\nthe unordered list tags.  To make each list item, use the list item tags `<li>\n</li>` and write the list item inside the tags.\\r\n<br /><br />\\r\nIt can\nbe helpful to indent your `<li> </li>` tags so it's clear they are contained\nin the `<ul> </ul>` tags.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n<br /><br />\\r\nAn ordered list element has the tags\n`<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li> </li>`. This\nis an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list\nitem element is a child element, which means that it goes inside of its parent\nelement, the ordered list.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an ordered list?**</summary>\\r\nMaking an ordered list has two steps:\nmaking the list and adding the list items. To make the ordered list, write\nthe ordered list tags `<ol> </ol>`. Next, add your list items **inside** the\nordered list tags. To make each list item, use the list item tags `<li> </li>`\nand write the list item inside the tags.\\r\n<br /><br/>\\r\nIt can be helpful\nto indent your `<li> </li>` tags so it's clear they are contained in the\n`<ol> </ol>` tags.\\r\n</details>\\r\n</div>\\r\n\\r\nYou can also use HTML to\nmake different types of lists on your web page.  This recipe includes two\ndifferent types of lists, one ordered (with numbers) and one unordered (with\nbullets).\\r\n\\r\n#  Do This\\r\n\\r\n* Use the inspector tool to see the code\nthat is making the two different kinds of lists.\\r\n* Make sure you and your\npartner agree on what the different tags do.\\r\n* Fix the code so that the\nsecond item in each list displays correctly"
      CSD U2 lists intro_2018_markdown_instruction: "# Lists\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are the two types of lists?**</summary>\\r\n\nThere are two types of lists in HTML, ordered and unordered lists.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n<br /><br />\\r\nAn unordered list element has the tag `<ul> </ul>`.\nThis is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li> </li>`. This\nis an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list\nitem element is a child element, which means that it goes inside of its parent\nelement, the unordered list.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an unordered list?**</summary>\\r\nMaking an unordered list has two\nsteps: making the list and adding the list items.  To make the unordered list,\nwrite the unordered list tags `<ul> </ul>`.  Next, add your list items **inside**\nthe unordered list tags.  To make each list item, use the list item tags `<li>\n</li>` and write the list item inside the tags.\\r\n<br /><br />\\r\nIt can\nbe helpful to indent your `<li> </li>` tags so it's clear they are contained\nin the `<ul> </ul>` tags.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n<br /><br />\\r\nAn ordered list element has the tags\n`<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li> </li>`. This\nis an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list\nitem element is a child element, which means that it goes inside of its parent\nelement, the ordered list.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an ordered list?**</summary>\\r\nMaking an ordered list has two steps:\nmaking the list and adding the list items. To make the ordered list, write\nthe ordered list tags `<ol> </ol>`. Next, add your list items **inside** the\nordered list tags. To make each list item, use the list item tags `<li> </li>`\nand write the list item inside the tags.\\r\n<br /><br/>\\r\nIt can be helpful\nto indent your `<li> </li>` tags so it's clear they are contained in the\n`<ol> </ol>` tags.\\r\n</details>\\r\n</div>\\r\n\\r\nYou can also use HTML to\nmake different types of lists on your web page.  This recipe includes two\ndifferent types of lists, one ordered (with numbers) and one unordered (with\nbullets).\\r\n\\r\n#  Do This\\r\n\\r\n* Use the inspector tool to see the code\nthat is making the two different kinds of lists.\\r\n* Make sure you and your\npartner agree on what the different tags do.\\r\n* Fix the code so that the\nsecond item in each list displays correctly"
      CSD U2 navigation_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are hyperlinks?**</summary>\\r\nHyperlinks\ncan connect to local web pages or external web pages. To add navigation to\nyour website you will need to add hyperlinks which connect your individual\nweb pages. You can **add hyperlinks to your web page using the `<a>` element**.  The\ntext you want to display as the hyperlink goes between the opening and closing\nhyperlink tags. The `<a>` element has an attribute `href` which is the location\nto link to.  The location of a local page is just the file path for that page.\n<br> <br>\\r\n\\r\nFor example to link to the unique houses page you would add\nthe following code inside your `<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a\nhref=”houses.html”&gt; Unique Houses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a hyperlink?**</summary>\\r\nYou can **add hyperlinks to your web\npage using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\n# Create a\nNavigation Bar\\r\n\\r\nHere's your project from before.  You'll be linking\nthe two pages by creating a **navigation bar** at the top of the page.  Websites\nusually have the same navigation bar across all of their pages so you can\nget back and forth between things on the site.  You can see an example of\na navigation bar on <a href=\"https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/\"\ntarget=\"_new\">this page</a>\\r\n\\r\n# Do This\\r\n* In your home page (index.html),\nadd two hyperlinks at the top of the page, one to your lists page, and one\nto the home page.\\r\n * *Even though it might seem strange to link a page\nto itself, it's less confusing if the navigation bar is exactly the same\non every page.*\\r\n* Copy the code for the navigation bar, then add it to\nthe top of your lists page.\\r\n* Test your links in the preview area by clicking\non them.\\r\n"
      CSD U2 navigation_2018_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are hyperlinks?**</summary>\\r\nHyperlinks\ncan connect to local web pages or external web pages. To add navigation to\nyour website you will need to add hyperlinks which connect your individual\nweb pages. You can **add hyperlinks to your web page using the `<a>` element**.  The\ntext you want to display as the hyperlink goes between the opening and closing\nhyperlink tags. The `<a>` element has an attribute `href` which is the location\nto link to.  The location of a local page is just the file path for that page.\n<br> <br>\\r\n\\r\nFor example to link to the unique houses page you would add\nthe following code inside your `<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a\nhref=”houses.html”&gt; Unique Houses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a hyperlink?**</summary>\\r\nYou can **add hyperlinks to your web\npage using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\n# Create a\nNavigation Bar\\r\n\\r\nHere's your project from before.  You'll be linking\nthe two pages by creating a **navigation bar** at the top of the page.  Websites\nusually have the same navigation bar across all of their pages so you can\nget back and forth between things on the site.  You can see an example of\na navigation bar on <a href=\"https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/\"\ntarget=\"_new\">this page</a>\\r\n\\r\n# Do This\\r\n* In your home page (index.html),\nadd two hyperlinks at the top of the page, one to your lists page, and one\nto the home page.\\r\n * *Even though it might seem strange to link a page\nto itself, it's less confusing if the navigation bar is exactly the same\non every page.*\\r\n* Copy the code for the navigation bar, then add it to\nthe top of your lists page.\\r\n* Test your links in the preview area by clicking\non them.\\r\n"
      CSD U2 new page_markdown_instruction: "# Create a New Page for Your Website.\\r\n\\r\nHere's\nyour project from before.  You'll be adding another page.  Your new page\ncan be a top 10 list, a recipe, or anything you like.\\r\n\\r\n# Do This\\r\n*\nAdd a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png).  The new file will appear in the files list on the left side of the\nworkspace.\\r\n* Rename the file, either by right clicking it and choosing\n\"Rename\", or by clicking on it when it's already highlighted.  **Make sure\nthe name is unique, descriptive and ends in \".html\"**.\\r\n* Use HTML to\nfill out your new page.  It should include:\\r\n * a list\\r\n * a heading\\r\n\\r\n"
      CSD U2 new page_2018_markdown_instruction: "# Create a New Page for Your Website.\\r\n\\r\nHere's\nyour project from before.  You'll be adding another page.  Your new page\ncan be a top 10 list, a recipe, or anything you like.\\r\n\\r\n# Do This\\r\n*\nAdd a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png).  The new file will appear in the files list on the left side of the\nworkspace.\\r\n* Rename the file, either by right clicking it and choosing\n\"Rename\", or by clicking on it when it's already highlighted.  **Make sure\nthe name is unique, descriptive and ends in \".html\"**.\\r\n* Use HTML to\nfill out your new page.  It should include:\\r\n * a list\\r\n * a heading\\r\n\\r\n"
      CSD U2 ordered list_markdown_instruction: "# Ordered Lists\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are the two types of lists?**</summary>\\r\n\nThere are two types of lists in HTML, ordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n<br /><br />\\r\nAn ordered list element has the tag\n`<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li>`;. This is an\nabbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item\nelement is a child element, which means that it goes inside of its parent\nelement, the ordered list (`<ol>`).\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an ordered list?**</summary>\\r\nMaking an ordered list has two steps:\nmaking the list and adding the list items.  To make the ordered list, write\nthe ordered list tags `<ol></ol>`.  Next, add your list items **inside** the\nordered list tags.  To make each list item, use the list item tags `<li></li>`\nand write the list item inside the tags.\\r\n<br /><br />\\r\nIt can be helpful\nto indent your `<li>` tags so it's clear they are contained in the `<ol>`\ntag.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Show me working code.**</summary>\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;\n<br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage should include an ordered list, but it's missing the list tags.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `<ol>` and `<li>` tags to structure this content\ninto an ordered list that looks like the one below.\\r\n\\r\n*Hint: There will\nbe NO NUMBERS in your code.* \\r\n\\r\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03\nPM.png)"
      CSD U2 ordered list_2018_markdown_instruction: "# Ordered Lists\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are the two types of lists?**</summary>\\r\n\nThere are two types of lists in HTML, ordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n<br /><br />\\r\nAn ordered list element has the tag\n`<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.\nEach item in the list is marked by a list item element `<li>`;. This is an\nabbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item\nelement is a child element, which means that it goes inside of its parent\nelement, the ordered list (`<ol>`).\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an ordered list?**</summary>\\r\nMaking an ordered list has two steps:\nmaking the list and adding the list items.  To make the ordered list, write\nthe ordered list tags `<ol></ol>`.  Next, add your list items **inside** the\nordered list tags.  To make each list item, use the list item tags `<li></li>`\nand write the list item inside the tags.\\r\n<br /><br />\\r\nIt can be helpful\nto indent your `<li>` tags so it's clear they are contained in the `<ol>`\ntag.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Show me working code.**</summary>\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;\n<br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage should include an ordered list, but it's missing the list tags.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `<ol>` and `<li>` tags to structure this content\ninto an ordered list that looks like the one below.\\r\n\\r\n*Hint: There will\nbe NO NUMBERS in your code.* \\r\n\\r\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03\nPM.png)"
      CSD U2 project review_markdown_instruction: "# Review Your Project\\r\n\\r\nYou're\nalmost ready to publish your project, but you should check one more time that\nyou have fulfilled all the requirements for this project.\\r\n\\r\n# Do This\\r\n*\nCheck that you are comfortable sharing all the information that's on your\nsite.\\r\n* Check that all of your images are correctly attributed, and that\nyou have the right to put them on your site.\\r\n* Check that your project\nincludes everything included in the project rubric.\\r\n* Use comments and\nwhitespace to make your website readable.\\r\n* Ask your partner to help you\nfind any potential problems with your site.\\r\n"
      CSD U2 project review_2018_markdown_instruction: "# Review Your Project\\r\n\\r\nYou're\nalmost ready to publish your project, but you should check one more time that\nyou have fulfilled all the requirements for this project.\\r\n\\r\n# Do This\\r\n*\nCheck that you are comfortable sharing all the information that's on your\nsite.\\r\n* Check that all of your images are correctly attributed, and that\nyou have the right to put them on your site.\\r\n* Check that your project\nincludes everything included in the project rubric.\\r\n* Use comments and\nwhitespace to make your website readable.\\r\n* Ask your partner to help you\nfind any potential problems with your site.\\r\n"
      CSD U2 project share_markdown_instruction: "# Share Your Project\\r\n\\r\nIt's\ntime to share your project with the world!\\r\n\\r\n# Do This\\r\n* Click the\n![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\nAM.png) button at the top of this page.\\r\n* Copy the URL it gives you, and\nemail it to the people you want to see your page.\\r\n\\r\n"
      CSD U2 project share_2018_markdown_instruction: "# Share Your Project\\r\n\\r\nIt's\ntime to share your project with the world!\\r\n\\r\n# Do This\\r\n* Click the\n![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\nAM.png) button at the top of this page.\\r\n* Copy the URL it gives you, and\nemail it to the people you want to see your page.\\r\n\\r\n"
      CSD U2 style background_markdown_instruction: "<div style=\"float: right; height:\n150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\\r\n<details>\\r\n<summary>**What\nis a CSS rule-set?**</summary>\\r\nBlah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a selector?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a declaration block?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**what\nis a property-value pair?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a new rule-set?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n</div>\\r\n# Text Alignment\\r\n\\r\n* Find the \"text-align\"\nproperty in the paragraph tag.\\r\n* Change the paragraph alignment.\\r\n  *\nChoose from \"left\", \"right\", and \"center\""
      CSD U2 text style bgcolor_markdown_instruction: "<div style=\"float: right;\nheight: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\\r\n<details>\\r\n<summary>**What\ncolors can I choose?**</summary>\\r\nBlah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndoes the code work?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nblah blah\nanswer\\r\n</details>\\r\n<details>\\r\n<summary>**Why is the \"style.css\" file\nin a different language?**</summary>\\r\nblah blah answer\\r\n</details>\\r\n</div>\\r\n#\nBackground Color\\r\n\\r\n* Find the code in \"style.css\" that is making the\nbackground of the entire page light blue.\\r\n* Change the code to make the\npage a different color.\\r\n* Try to change the background color of just the\nparagraphs."
      CSD U2 text style decoration_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that makes the `h1` elements underlined:\\r\n\\r\n<pre>h1 {\\r\n  text-decoration:\nunderline;\\r\n}</pre>\\r\n\\r\n* `h1` is the _selector_.  It specifies which\nelements will have to follow the rules inside the curly braces. The `p` stands\nfor paragraph.\\r\n* `text-decoration: underline;` is the rule that makes the\ntext inside the `h1` tag underlined.\\r\n * `text-decoration` is the _property_.  It\nexplains what the rule is about, in this case where the line goes.\\r\n * `underline`\nis the _value_.  It explains how the rule should be applied, in this case\nmaking the test underlined.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare the possible values for text decoration?**</summary>\\r\nYou can choose\nbetween \"underline\", \"overline\", and \"line-through\".  You can read more\nabout the text-decoration property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the stylesheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nUnderlining\\r\n\\r\n* Find the code in the style sheet that makes the h1 tag\nunderlined.\\r\n* Change the text decoration and see which one you like.\\r\n  *\nChoose from \"underline\", \"overline\", and \"line-through\"\\r\n* Add a text\ndecoration rule for the paragraph or h3 tag."
      CSD U2 text style decoration_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that makes the `h1` elements underlined:\\r\n\\r\n<pre>h1 {\\r\n  text-decoration:\nunderline;\\r\n}</pre>\\r\n\\r\n* `h1` is the _selector_.  It specifies which\nelements will have to follow the rules inside the curly braces. The `p` stands\nfor paragraph.\\r\n* `text-decoration: underline;` is the rule that makes the\ntext inside the `h1` tag underlined.\\r\n * `text-decoration` is the _property_.  It\nexplains what the rule is about, in this case where the line goes.\\r\n * `underline`\nis the _value_.  It explains how the rule should be applied, in this case\nmaking the test underlined.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare the possible values for text decoration?**</summary>\\r\nYou can choose\nbetween \"underline\", \"overline\", and \"line-through\".  You can read more\nabout the text-decoration property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the stylesheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nUnderlining\\r\n\\r\n* Find the code in the style sheet that makes the h1 tag\nunderlined.\\r\n* Change the text decoration and see which one you like.\\r\n  *\nChoose from \"underline\", \"overline\", and \"line-through\"\\r\n* Add a text\ndecoration rule for the paragraph or h3 tag."
      CSD U2 text style font family_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph font:\\r\n\\r\n<pre>p {\\r\n  font-family:\ncursive;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces. The `p` stands for\nparagraph.\\r\n* `font-family: cursive;` is the rule that makes the text inside\nthe `p` tags a particular font.\\r\n * `font-family` is the _property_.  It\nexplains what the rule is about, in this case the font.\\r\n * `cursive` is\nthe _value_.  It explains how the rule should be applied, in this case making\nthe text cursive.\\r\n</details>\\r\n<details>\\r\n<summary>**What are the possible\nvalues for font family?**</summary>\\r\nYou can choose between \"serif\", \"sans-serif\",\n\"cursive\", \"fantasy\", and \"monospace\".  You can also try more specific\nfonts as described in <a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n- CSS Web Safe Font Combinations</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the stylesheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nChanging the Font\\r\n\\r\n* Find the CSS rule-set in the style sheet that determines\nthe style for the paragraph tag.\\r\n* Change the font family and choose which\none you like the best.\\r\n  * Choose from \"serif\", \"sans-serif\", \"cursive\",\n\"fantasy\", and \"monospace\"\\r\n* Add a font family rule for the h1 or h3\ntags."
      CSD U2 text style font family_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph font:\\r\n\\r\n<pre>p {\\r\n  font-family:\ncursive;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces. The `p` stands for\nparagraph.\\r\n* `font-family: cursive;` is the rule that makes the text inside\nthe `p` tags a particular font.\\r\n * `font-family` is the _property_.  It\nexplains what the rule is about, in this case the font.\\r\n * `cursive` is\nthe _value_.  It explains how the rule should be applied, in this case making\nthe text cursive.\\r\n</details>\\r\n<details>\\r\n<summary>**What are the possible\nvalues for font family?**</summary>\\r\nYou can choose between \"serif\", \"sans-serif\",\n\"cursive\", \"fantasy\", and \"monospace\".  You can also try more specific\nfonts as described in <a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n- CSS Web Safe Font Combinations</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the stylesheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a stylesheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nChanging the Font\\r\n\\r\n* Find the CSS rule-set in the style sheet that determines\nthe style for the paragraph tag.\\r\n* Change the font family and choose which\none you like the best.\\r\n  * Choose from \"serif\", \"sans-serif\", \"cursive\",\n\"fantasy\", and \"monospace\"\\r\n* Add a font family rule for the h1 or h3\ntags."
      CSD U2 text style freeplay - OLD_markdown_instruction: "# Adding Styles\\r\n\\r\nNow\nyou can style the text on your personal web site!\\r\n\\r\n* Open your style\nsheet and add styling of your choice to your page. Be sure to use at least\n3 different CSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least 3 of the\nfollowing CSS Properties are used:\\r\n * `font-size`\\r\n * `font-family`\\r\n\n* `color`\\r\n * `text-decoration`\\r\n * `text-align`\\r\n\\r\nIf you’ve used\nat least 3 of the properties from the checklist, you can explore some additional\ntext properties to add to your project."
      CSD U2 text style freeplay_markdown_instruction: "# Adding Styles\\r\n\\r\nNow\nyou can style the text on your personal web site!\\r\n\\r\n* Open your style\nsheet and add styling of your choice to your project. Be sure to use at least\n3 different CSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least 3 of the\nfollowing CSS Properties are used:\\r\n * `font-size`\\r\n * `font-family`\\r\n\n* `color`\\r\n * `text-decoration`\\r\n * `text-align`\\r\n\\r\nIf you’ve used\nat least 3 of the properties from the checklist, you can explore some additional\ntext properties to add to your project."
      CSD U2 text style freeplay_2018_markdown_instruction: "# Adding Styles\\r\n\\r\nNow\nyou can style the text on your personal web site!\\r\n\\r\n* Open your style\nsheet and add styling of your choice to your project. Be sure to use at least\n3 different CSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* At least 3 of the\nfollowing CSS Properties are used:\\r\n * `font-size`\\r\n * `font-family`\\r\n\n* `color`\\r\n * `text-decoration`\\r\n * `text-align`\\r\n\\r\nIf you’ve used\nat least 3 of the properties from the checklist, you can explore some additional\ntext properties to add to your project."
      CSD U2 text style h1_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details><details>\\r\n<summary>**How does\nthe code work?**</summary>\\r\nHere is the code that is making the `h1` heading\nred:\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n* `h1` is the _selector_.  It\nspecifies which elements will have to follow the rules inside the curly braces.\\r\n*\n`color: red;` is the rule that makes the text inside the `h1` tags red.\\r\n\n* `color` is the _property_.  It explains what the rule is about, in this\ncase the text color.\\r\n * `red` is the _value_.  It explains how the rule\nshould be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n}\\r\n</pre>\\r\n\\r\nIn\nthis example, `h2` is the selector, `color` and `font-family` are properties,\nand `blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nCSS and Text Color\\r\n\\r\nThis HTML file uses a style sheet (\"style.css\")\nto give the page a particular style.  The style sheet contains information\nabout what each of the HTML elements should look like.\\r\n\\r\n* Find the code\nin the style sheet (click on \"style.css\" in the files list) that is making\nthe h1 heading red.\\r\n* Change the code for the color of the h1 heading from\n`red` to a different color."
      CSD U2 text style h1_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details><details>\\r\n<summary>**How does\nthe code work?**</summary>\\r\nHere is the code that is making the `h1` heading\nred:\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n* `h1` is the _selector_.  It\nspecifies which elements will have to follow the rules inside the curly braces.\\r\n*\n`color: red;` is the rule that makes the text inside the `h1` tags red.\\r\n\n* `color` is the _property_.  It explains what the rule is about, in this\ncase the text color.\\r\n * `red` is the _value_.  It explains how the rule\nshould be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n}\\r\n</pre>\\r\n\\r\nIn\nthis example, `h2` is the selector, `color` and `font-family` are properties,\nand `blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nCSS and Text Color\\r\n\\r\nThis HTML file uses a style sheet (\"style.css\")\nto give the page a particular style.  The style sheet contains information\nabout what each of the HTML elements should look like.\\r\n\\r\n* Find the code\nin the style sheet (click on \"style.css\" in the files list) that is making\nthe h1 heading red.\\r\n* Change the code for the color of the h1 heading from\n`red` to a different color."
      CSD U2 text style h3_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndoes the code work?**</summary>\\r\nHere is the code that is making the `h1`\nheader red:\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n* `h1` is\nthe _selector_.  It specifies which elements will have to follow the rules\ninside the curly braces.\\r\n* `color: red;` is the rule that makes the text\ninside the `h1` tags red.\\r\n * `color` is the _property_.  It explains what\nthe rule is about, in this case the text color.\\r\n * `red` is the _value_.  It\nexplains how the rule should be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make a new rule-set?**</summary>\\r\nTo make a new rule set, you'll need\na selector and a list of rules.  The selector is the name of the tag you want\nthe rules to be applied to.  The rules are a list of property and value pairs.  You'll\nalso need to pay careful attention to the punctuation in the rule set.  Look\nat the code below for an example of how the code should look.  You'll need\nto change the specifics for your page.\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n\\r\n*\n`h1` is the _selector_.  It specifies which elements will have to follow the\nrules inside the curly braces.\\r\n* `color: red;` is the rule that makes the\ntext inside the `h1` tags red.\\r\n * `color` is the _property_.  It explains\nwhat the rule is about, in this case the text color.\\r\n * `red` is the _value_.  It\nexplains how the rule should be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nMaking a new CSS rule-set\\r\n\\r\nThe block of code that gives rules for a\nparticular tag is called a _rule-set_.  You can make a new rule set by copying\nthe pattern you see in the rule-set for the `h1` tag.\\r\n\\r\n* Find the CSS\nrule-set in the style sheet that determines the styles for the h1 tag.\\r\n*\nUsing the same pattern, write a new CSS rule-set that will determine the style\nfor the h3 tag.\\r\n* Add code to set a different color for the h3 tags."
      CSD U2 text style h3_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What colors can I use in CSS?**</summary>\\r\nCSS\nincludes most common color names (red, blue, green, etc.), and many uncommon\nones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML Color Names</a>.  You can still use colors that are not included in\nthe named list, but you will need to use their RGB values.  You can read more\nabout using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS Legal Color Values</a>\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndoes the code work?**</summary>\\r\nHere is the code that is making the `h1`\nheader red:\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n* `h1` is\nthe _selector_.  It specifies which elements will have to follow the rules\ninside the curly braces.\\r\n* `color: red;` is the rule that makes the text\ninside the `h1` tags red.\\r\n * `color` is the _property_.  It explains what\nthe rule is about, in this case the text color.\\r\n * `red` is the _value_.  It\nexplains how the rule should be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I make a new rule-set?**</summary>\\r\nTo make a new rule set, you'll need\na selector and a list of rules.  The selector is the name of the tag you want\nthe rules to be applied to.  The rules are a list of property and value pairs.  You'll\nalso need to pay careful attention to the punctuation in the rule set.  Look\nat the code below for an example of how the code should look.  You'll need\nto change the specifics for your page.\\r\n\\r\n<pre>h1 {\\r\n  color: red;\\r\n}</pre>\\r\n\\r\n\\r\n*\n`h1` is the _selector_.  It specifies which elements will have to follow the\nrules inside the curly braces.\\r\n* `color: red;` is the rule that makes the\ntext inside the `h1` tags red.\\r\n * `color` is the _property_.  It explains\nwhat the rule is about, in this case the text color.\\r\n * `red` is the _value_.  It\nexplains how the rule should be applied, in this case making the text red.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n#\nMaking a new CSS rule-set\\r\n\\r\nThe block of code that gives rules for a\nparticular tag is called a _rule-set_.  You can make a new rule set by copying\nthe pattern you see in the rule-set for the `h1` tag.\\r\n\\r\n* Find the CSS\nrule-set in the style sheet that determines the styles for the h1 tag.\\r\n*\nUsing the same pattern, write a new CSS rule-set that will determine the style\nfor the h3 tag.\\r\n* Add code to set a different color for the h3 tags."
      CSD U2 text style sample_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\nis the \"style.css\" file in a different language?**</summary>\\r\nWeb developers\nintentionally separate content and style to make their code easier to maintain.\nHTML is the language used to structure the content of a web page. CSS is a\nlanguage that adds style to a web page.  \\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes `px` mean / What is a pixel?**</summary>\\r\nPixel, which is abbreviated\n`px`, is how elements are measured in CSS.  It’s the size of a single point\nof light on the screen.\\r\n</details>\\r\n<details>\\r\n<summary>**What does\nthe `text-decoration` property do?**</summary>\\r\nThe `text-decoration` property\nputs a line over, under, or through a piece of text.  You can read more about\nthe property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `text-align` property do?**</summary>\\r\nThe `text-align` property\naligns the text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n- CSS text-align Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**What\ndoes the `font-family` property do?**</summary>\\r\nThe `font-family` property\nchanges the font of the text.  It gives a general description of the type\nof font that should be used, but each browser might display the font slightly\ndifferently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">W3chools\n- CSS font-family Property</a>\\r\n</details>\\r\n</div>\\r\n# CSS and Style\nsheets\\r\n\\r\n* Look at the web page below and find some different types of\ntext stylings that you don't know how to code yet.\\r\n* Click on the style\nsheet (\"style.css\" in the files area) and look at the code inside the file.\\r\n*\nWith your partner, discuss which parts of the code you think are making the\ntext appear differently than before.\\r\n\\r\nIn the next few lessons, you'll\nbe changing and adding new styles on this page.\\r\n\\r\n"
      CSD U2 text style size_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph text size:\\r\n\\r\n<pre>p {\\r\n  font-size:\n14px;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces. The `p` stands for\nparagraph.\\r\n* `font-size: 14px;` is the rule that makes the text inside\nthe `p` tags a particular size.\\r\n * `font-size` is the _property_.  It explains\nwhat the rule is about, in this case the text size.\\r\n * `14px` is the _value_.  It\nexplains how the rule should be applied, in this case making the text 14 pixels\nbig.\\r\n</details>\\r\n<details>\\r\n<summary>**What does `px` mean / What is\na pixel?**</summary>\\r\nPixel, which is abbreviated `px`, is how elements\nare measured in CSS.  It’s the size of a single point of light on the screen.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nChanging text size\\r\n\\r\nYou can control other things besides colors by using\nother properties.\\r\n\\r\n* Find the CSS rule-set in the style sheet that determines\nthe style for the paragraph tag.\\r\n* Change the text size of the paragraphs\nto be bigger.\\r\n* Add a new rule to your rule-set for your h3 tag to make\nthe text bigger or smaller."
      CSD U2 text style size_2018_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph text size:\\r\n\\r\n<pre>p {\\r\n  font-size:\n14px;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies which elements\nwill have to follow the rules inside the curly braces. The `p` stands for\nparagraph.\\r\n* `font-size: 14px;` is the rule that makes the text inside\nthe `p` tags a particular size.\\r\n * `font-size` is the _property_.  It explains\nwhat the rule is about, in this case the text size.\\r\n * `14px` is the _value_.  It\nexplains how the rule should be applied, in this case making the text 14 pixels\nbig.\\r\n</details>\\r\n<details>\\r\n<summary>**What does `px` mean / What is\na pixel?**</summary>\\r\nPixel, which is abbreviated `px`, is how elements\nare measured in CSS.  It’s the size of a single point of light on the screen.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nChanging text size\\r\n\\r\nYou can control other things besides colors by using\nother properties.\\r\n\\r\n* Find the CSS rule-set in the style sheet that determines\nthe style for the paragraph tag.\\r\n* Change the text size of the paragraphs\nto be bigger.\\r\n* Add a new rule to your rule-set for your h3 tag to make\nthe text bigger or smaller."
      CSD U2 text style text align_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph text alignment:\\r\n\\r\n<pre>p\n{\\r\n  text-align: left;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces. The\n`p` stands for paragraph.\\r\n* `text-align: left;` is the rule that makes\nthe text inside the `p` tags align to the left side of the paragraph.\\r\n\n* `text-align` is the _property_.  It explains what the rule is about, in\nthis case the text alignment.\\r\n * `left` is the _value_.  It explains how\nthe rule should be applied, in this case making the text align to the left\nside of the paragraph.\\r\n</details>\\r\n<details>\\r\n<summary>**Why doesn't\n`text-align: left;` do anything?**</summary>\\r\nMost properties have default\nvalues.  The default values are the styles that an element will have automatically,\nbefore you add your style sheet.  The default value for `text-align` is `left`,\nso it doesn't change from how it already looked.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare the possible values for text align?**</summary>\\r\nYou can choose between\n\"left\", \"right\", and \"center\".  You can read more about the text-align\nproperty at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n- CSS text-align Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</details>\\r\n</div>\\r\n#\nText Alignment\\r\n\\r\nThe `text-align` property sets the horizontal (side\nto side) position of the text within each line.\\r\n\\r\n* Find the \"text-align\"\nproperty in the paragraph tag.\\r\n* Change the paragraph alignment.\\r\n  *\nChoose from \"left\", \"right\", and \"center\""
      CSD U2 text style text align_2018_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**How does the code work?**</summary>\\r\nHere\nis the code that is controlling the paragraph text alignment:\\r\n\\r\n<pre>p\n{\\r\n  text-align: left;\\r\n}</pre>\\r\n\\r\n* `p` is the _selector_.  It specifies\nwhich elements will have to follow the rules inside the curly braces. The\n`p` stands for paragraph.\\r\n* `text-align: left;` is the rule that makes\nthe text inside the `p` tags align to the left side of the paragraph.\\r\n\n* `text-align` is the _property_.  It explains what the rule is about, in\nthis case the text alignment.\\r\n * `left` is the _value_.  It explains how\nthe rule should be applied, in this case making the text align to the left\nside of the paragraph.\\r\n</details>\\r\n<details>\\r\n<summary>**Why doesn't\n`text-align: left;` do anything?**</summary>\\r\nMost properties have default\nvalues.  The default values are the styles that an element will have automatically,\nbefore you add your style sheet.  The default value for `text-align` is `left`,\nso it doesn't change from how it already looked.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare the possible values for text align?**</summary>\\r\nYou can choose between\n\"left\", \"right\", and \"center\".  You can read more about the text-align\nproperty at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n- CSS text-align Property</a>\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need all the punctuation?**</summary>\\r\nThe punctuation, such as the\ncurly braces `{}`, the colon `:`, and the semicolon `;`, help the computer\nto understand the rules in the style sheet.  The curly braces hold all the\nrules for a particular selector.  Each rule should end in a semicolon, and\nthe properties and values are always separated by a colon.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a style sheet?**</summary>\\r\nA style sheet is a document that controls\nhow a web page will appear.  External style sheets are separate files that\nare linked to the HTML page.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis CSS?**</summary>\\r\nCSS is a language that controls the way content on\na web site appears.  It uses rule-sets to change the look of a page.  Each\nrule set has a selector, which specifies which elements on the page will be\naffected, and the rules, which explain how to display the elements.   Each\nrule consists of a property and a value for that property.\\r\n\\r\n\\r\nHere’s\nan example of a rule-set that makes the text in an `h2` tag blue and cursive:\\r\n\\r\n<pre>h2\n{\\r\n   color: blue;\\r\n   font-family: cursive;\\r\n</pre>\\r\n\\r\nIn this\nexample, `h2` is the selector, `color` and `font-family` are properties, and\n`blue` and `cursive` are the values for those properties.\\r\n</details>\\r\n</details>\\r\n</div>\\r\n#\nText Alignment\\r\n\\r\nThe `text-align` property sets the horizontal (side\nto side) position of the text within each line.\\r\n\\r\n* Find the \"text-align\"\nproperty in the paragraph tag.\\r\n* Change the paragraph alignment.\\r\n  *\nChoose from \"left\", \"right\", and \"center\""
      CSD U2 unordered list_markdown_instruction: "# Unordered Lists\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\\r\n<details>\\r\n<summary>**What are the two types of lists?**</summary>\\r\n\nThere are two types of lists in HTML, ordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n<br /><br />An unordered list element has the tag &lt;ul&gt; . This\nis an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each\nitem in the list is marked by a list item element &lt;li&gt;. This is an abbreviation\nfor <strong>L</strong>ist <strong>I</strong>tem.  The list item element is\na child element, which means that it goes inside of its parent element, the\nunordered list (&lt;ul&gt;).\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an unordered list?**</summary>\\r\nMaking an unordered list has two\nsteps: making the list and adding the list items.  To make the unordered list,\nwrite the unordered list tags `<ul></ul>`.  Next, add your list items **inside**\nthe unordered list tags.  To make each list item, use the list item tags `<li></li>`\nand write the list item inside the tags.\\r\n<br /><br />\\r\nIt can be helpful\nto indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt;\ntag.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Show me working code.**</summary>\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;\n<br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage should have an unordered list, but it's missing the list tags.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `<ul>` and `<li>` tags to structure the content into\nan unordered list like the picture below.\\r\n\\r\n![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04\nPM.png)"
      CSD U2 unordered list_2018_markdown_instruction: "# Unordered Lists\\r\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\\r\n<details>\\r\n<summary>**What are\nthe two types of lists?**</summary>\\r\n There are two types of lists in HTML,\nordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n<br /><br />An unordered list element has the tag &lt;ul&gt; . This\nis an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each\nitem in the list is marked by a list item element &lt;li&gt;. This is an abbreviation\nfor <strong>L</strong>ist <strong>I</strong>tem.  The list item element is\na child element, which means that it goes inside of its parent element, the\nunordered list (&lt;ul&gt;).\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\ndo I make an unordered list?**</summary>\\r\nMaking an unordered list has two\nsteps: making the list and adding the list items.  To make the unordered list,\nwrite the unordered list tags `<ul></ul>`.  Next, add your list items **inside**\nthe unordered list tags.  To make each list item, use the list item tags `<li></li>`\nand write the list item inside the tags.\\r\n<br /><br />\\r\nIt can be helpful\nto indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt;\ntag.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Show me working code.**</summary>\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;\n<br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\nThis\npage should have an unordered list, but it's missing the list tags.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `<ul>` and `<li>` tags to structure the content into\nan unordered list like the picture below.\\r\n\\r\n![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04\nPM.png)"
      CSD U2 upload image_markdown_instruction: "# Upload a new image\\r\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I add images?**</summary>\\r\nThe `<img>` tag allows you to show images\non your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img src=\"dog.png\"\nalt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to tell the browser\nwhich file to use, extra information, called an **attribute**, is added to\nthe &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e\nand tell the name of the image. Image files names include extensions which\ntell the computer which type of image they are working with. Common extensions\nare .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have the src attribute,\nimage elements also have the `alt` attribute which describe the image. This\nis important in case the image doesn’t load or for people who have trouble\nwith their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an example of a  **void\nelement** because it starts and closes in one tag. To mark this we put the\n`/` which usually goes in the close tag at the end of the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a void tag?**</summary>\\r\nAn `<img>` tag is an example of a  **void element**\nbecause it starts and closes in one tag. To mark this we put the `/` which\nusually goes in the close tag at the end of the image tag. Void tags do not\nneed a closing tag because there is no text content which must be wrapped\nin tags. The content that shows on the screen is specified through the tags\nattributes.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an image tag\nnot have a closing tag?**</summary>\\r\nAn image tag is a void tag and void\ntags do not need a closing tag because there is no text content which must\nbe wrapped in tags. The content that shows on the screen is specified through\nthe tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What is an attribute?**</summary>\\r\nAttributes\nare extra information included in a tag.  Attributes have names and values.\nThe name tells what type of information is being provided and then the value\ngives the specific information for that tag. \\r\n\\r\nFor example &lt;img&gt;\ntags have two attributes, src and alt. src specifies the name of the image\nfile and alt tells the browser in readable text what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\nYou\ncan now add your own images to your personal website.  If you don't have\nthe images that you want on your computer, you can search for them here and\ndownload them.\\r\n<form action=\"https://www.google.com/search\" method=\"GET\"\ntarget=\"_blank\">\\r\n<input type=hidden name=site value=\"imghp\" />\\r\n<input\ntype=hidden name=tbm value=isch />\\r\n<input type=hidden name=tbs value=\"sur:fmc\"\n/>\\r\n<input name=q />\\r\n<input type=submit value=\"search\">\\r\n<br />\\r\n</form>\\r\n\\r\nOnce\nyou have your images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49\nPM.png) and upload the image from your computer into your project.\\r\n\\r\n#\nDo This\\r\n* Upload at least two images into your project\\r\n* Use the `<img>`\ntag to display the images in your website."
      CSD U2 upload images_markdown_instruction: "# Upload Images\\r\n\\r\nNext, you'll\nneed to upload all of your images into your project.\\r\n\\r\n# Do This\\r\n*\nDownload all the images you want onto your computer. Visit <a href=\"/s/csd2/stage/7/puzzle/5\"\ntarget=\"_new\">Lesson 7 Level 5</a> for help if you need it.\\r\n * Make sure\nyou have the right to use these images.\\r\n * Write down all of the attribution\ninformation that you need.\\r\n * Upload all of the images into your project.  Visit\n<a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a>\nif you've forgotten how.\\r\n"
      CSD U2 upload images_2018_markdown_instruction: "# Upload Images\\r\n\\r\nNext,\nyou'll need to upload all of your images into your project.\\r\n\\r\n# Do This\\r\n*\nDownload all the images you want onto your computer. Visit <a href=\"/s/csd2/stage/7/puzzle/5\"\ntarget=\"_new\">Lesson 7 Level 5</a> for help if you need it.\\r\n * Make sure\nyou have the right to use these images.\\r\n * Write down all of the attribution\ninformation that you need.\\r\n * Upload all of the images into your project.  Visit\n<a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a>\nif you've forgotten how.\\r\n"
      CSD U3 - Booleans Video_markdown_instruction: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2018_markdown_instruction: "# Boolean Expressions Video"
      CSD U3 - Simple Counter Predict_markdown_instruction: "# The Counter Pattern\\r\n\\r\nThis\npattern is one of the most important ones in all of programming. \\r\n\\r\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56\nPM.png)\\r\n    \\r\nIt is used to increase the value of a variable by 1. You\nmight call it the **counter pattern** since it can be used to make a variable\nthat counts up. You'll use this pattern a lot, especially with the draw loop.\nLet's see what that looks like.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates\na variable `counter` and then uses the **counter pattern** to make it count\nup. When you run the program what do you think you'll see on the screen?\\r\n\\r\n*\n**Read the program** and make a prediction of what the output will be.\\r\n*\n**Run the program** to check your prediction.\\r\n* **Discuss with a neighbor**.\nCan you explain what you observed?\\r\n\\r\n"
      CSD U3 - Simple Counter Predict_2018_markdown_instruction: "# The Counter Pattern\\r\n\\r\nThis\npattern is one of the most important ones in all of programming. \\r\n\\r\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56\nPM.png)\\r\n    \\r\nIt is used to increase the value of a variable by 1. You\nmight call it the **counter pattern** since it can be used to make a variable\nthat counts up. You'll use this pattern a lot, especially with the draw loop.\nLet's see what that looks like.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates\na variable `counter` and then uses the **counter pattern** to make it count\nup. When you run the program what do you think you'll see on the screen?\\r\n\\r\n*\n**Read the program** and make a prediction of what the output will be.\\r\n*\n**Run the program** to check your prediction.\\r\n* **Discuss with a neighbor**.\nCan you explain what you observed?\\r\n\\r\n"
      CSD U3 - Sprites - Sprite v Rect_markdown_instruction: "# Sprites vs Rect\\r\n\\r\nCurently\nsprites and rectangles seem really similar. It will become clear later on\nwhy sprites are more powerful than basic shapes. Before you get there though\nit is important to call out a major difference in the way sprites and rectangles\ndraw.\\r\n\\r\n# Do This\\r\nCan you will figure out the difference by just trying\nthis?\\r\n\\r\n* Create a rectangle with a width and height of 30\\r\n* Set the\nfill for the rectangle to a different color than gray (So its clear which\nis the rectangle)\\r\n* Create a sprite and give it the same x and y values\nas you gave the rectangle\\r\n* Make sure to call `drawSprites` in the draw\nloop\\r\n* Run the program\\r\n* Can you see the difference?"
      CSD U3 - complex - compound conditionals_markdown_instruction: "# Possible\nSolution #2 - Compound Conditionals\\r\n\\r\nAnother way that you might have\nphrased the challenge problem is:\\r\n\\r\n\\tIf the up arrow was pressed AND\nthe sprite hasn't gone off the top of the screen, move up.\\r\n\\r\nThis structure\nof asking both questions at the same time is accomplished using a **compound\nconditional**. Compound conditionals use the boolean operators `AND` and `OR`\nto ask multiple questions at once. `AND` only returns true if _both_ of the\nquestions it's asking are true, while `OR` will return true if _either_ of\nits questions are true. In JavaScript (and many other languages) `AND` is\nrepresented by two ampersands (`&&`) while `OR` is represented by two pipes\n(`||`) - their blocks look like this: \\r\n\\r\n![](https://images.code.org/c7ab68cb4091472f05d7c862a52730c6-image-1466785066210.48.02.png)\\r\n\\r\nWe\ncould pseudocode this solution as \\r\n\\r\n\\tIf the up arrow was pressed AND\nsprite.y > 0\\t// Both Questions\\r\n    \\tmove up\\t\\t\\t\\t\\t\\t\\t\\t\\t // Only\nruns if both questions were true\\r\n\\r\n\\r\n# Do This\\r\n\\r\nHere's the same\ncode from the challenge again, but this time the up arrow uses a compound\nconditional. \\r\n\\r\n* Use the same compound conditional pattern on the other\nthree arrow keys.\\r\n"
      CSD U3 - complex - key up and down_markdown_instruction: "# Responding to a\nSingle Click\\r\n\\r\nEarlier we learned that `keyWentDown` and `keyWentUp`\ncan be used to respond to a keypress a single time. The blocks `mouseWentUp`\nand `mouseWentDown` allow you to do that for the mouse!\\r\n\\r\n# Do This\\r\n\\r\nLet's\nmake a simple game that counts how many times you've clicked. We've already\nprovided a variable `clicks` that you can use to track how many times the\nuser has clicked.\\r\n\\r\n* Add a conditional that checks if the mouse went\ndown.\\r\n* Inside your conditional, add to the `clicks` variable.\\r\n\\r\n_Challenge:\nCan you add a sprite that responds to `mouseWentDown` as well? Add an image\nof your choice and increase the sprite's size each time the mouse is clicked._"
      CSD U3 - complex - key up and down_2018_markdown_instruction: "# Responding\nto a Single Click\\r\n\\r\nEarlier we learned that `keyWentDown` and `keyWentUp`\ncan be used to respond to a keypress a single time. The blocks `mouseWentUp`\nand `mouseWentDown` allow you to do that for the mouse!\\r\n\\r\n# Do This\\r\n\\r\nLet's\nmake a simple game that counts how many times you've clicked. We've already\nprovided a variable `clicks` that you can use to track how many times the\nuser has clicked.\\r\n\\r\n* Add a conditional that checks if the mouse went\ndown.\\r\n* Inside your conditional, add to the `clicks` variable.\\r\n\\r\n_Challenge:\nCan you add a sprite that responds to `mouseWentDown` as well? Add an image\nof your choice and increase the sprite's size each time the mouse is clicked._"
      CSD U3 - complex - mouse down_markdown_instruction: "# Mouse Clicks\\r\n\\r\nKeypresses\nare great, but sometimes you want users to interact through mouse clicks.\nThere's a new block called `mouseDown` which, similar to `keyDown`, checks\nwhether the left or right mouse buttons is being pressed. If you are using\na computer with a mouse or trackpad that has only one button, you'll want\nto always use `mouseDown(\"left\")`. \\r\n\\r\n# Do This\\r\nHere's a program\nthat drops a balloon down the screen - you're going to program the mouse\nbutton to raise the balloon back up while it's clicked.\\r\n\\r\n* Add an if\nelse statment that checks for `mouseDown`.\\r\n* Inside the conditional, move\nthe balloon up one pixel if the mouse is down. Otherwise, move the balloon\ndown.\\r\n\\r\n_Hint: You'll need to move the code that drops the balloon for\nthis to work - you only want it to run if `mouseDown` is `false`_\\r\n\\r\n_Challenge:\nCan you make the balloon drift randomly to the left and right as it rises\nand falls?_"
      CSD U3 - complex - mouse down_2018_markdown_instruction: "# Mouse Clicks\\r\n\\r\nKeypresses\nare great, but sometimes you want users to interact through mouse clicks.\nThere's a new block called `mouseDown` which, similar to `keyDown`, checks\nwhether the left or right mouse buttons is being pressed. If you are using\na computer with a mouse or trackpad that has only one button, you'll want\nto always use `mouseDown(\"left\")`. \\r\n\\r\n# Do This\\r\nHere's a program\nthat drops a balloon down the screen - you're going to program the mouse\nbutton to raise the balloon back up while it's clicked.\\r\n\\r\n* Add an if\nelse statment that checks for `mouseDown`.\\r\n* Inside the conditional, move\nthe balloon up one pixel if the mouse is down. Otherwise, move the balloon\ndown.\\r\n\\r\n_Hint: You'll need to move the code that drops the balloon for\nthis to work - you only want it to run if `mouseDown` is `false`_\\r\n\\r\n_Challenge:\nCan you make the balloon drift randomly to the left and right as it rises\nand falls?_"
      CSD U3 - complex - mouse move_markdown_instruction: "# mouseDidMove\\r\n\\r\nWe\ncan also use Boolean expressions to check whether or not the mouse has moved.\nThe `mouseDidMove` block will return `false` if the mouse is still, but `true`\nif the mouse has been moving.\\r\n\\r\n# Do This\\r\nRight now, this program\njust displays a salt shaker sprite. You'll need to use `mouseDidMove` so\nthat you can \"shake\" the salt by moving the mouse back and forth.\\r\n\\r\n*\nAdd a conditional that checks if `mouseDidMove`.\\r\n* If the conditional is\ntrue, rotate the salt sprite randomly to the left or right.\\r\n\\r\n_Challenge:\nCan you keep track of how many times the `mouseDidMove` shakes the salt, and\nthen rotate it right side up after 100 shakes?_"
      CSD U3 - complex - mouse move_2018_markdown_instruction: "# mouseDidMove\\r\n\\r\nWe\ncan also use Boolean expressions to check whether or not the mouse has moved.\nThe `mouseDidMove` block will return `false` if the mouse is still, but `true`\nif the mouse has been moving.\\r\n\\r\n# Do This\\r\nRight now, this program\njust displays a salt shaker sprite. You'll need to use `mouseDidMove` so\nthat you can \"shake\" the salt by moving the mouse back and forth.\\r\n\\r\n*\nAdd a conditional that checks if `mouseDidMove`.\\r\n* If the conditional is\ntrue, rotate the salt sprite randomly to the left or right.\\r\n\\r\n_Challenge:\nCan you keep track of how many times the `mouseDidMove` shakes the salt, and\nthen rotate it right side up after 100 shakes?_"
      CSD U3 - complex - nested conditional_markdown_instruction: "# Possible Solution\n#1 - Nested Conditionals\\r\n\\r\nThe way you phrase the previous challenge\nsays a lot about how you might approach solving it. For example, you might\nhave phrased moving up and staying on screen as:\\r\n\\r\n\\tIf the up arrow\nwas pressed then check if the sprite hasn't gone off the top of the screen\nand move up.\\r\n\\r\nThis structure of first asking one question, and then\nasking a second question if the first was true is accomplished using a **nested\nif statement**. Nested if statements put one if statement inside another if\nstatement. You can think of this as asking a question and then based on the\nanswer asking another question before making a decision. We could pseudocode\nthe previous phrase as:\\r\n\\r\n\\tIf the up arrow was pressed\\t// First Question\\r\n    \\tIf\nmy y > 0\\t\\t\\t\\t// Second Question\\r\n        \\tmove up\\t\\t\\t\\t// Only runs\nif both questions were true\\r\n\\r\n\\r\n# Do This\\r\n\\r\nHere's the same code\nfrom the challenge, with the up arrow using a nested conditional. \\r\n\\r\n*\nUse the same nested conditional pattern on the other 3 arrow keys.\\r\n"
      CSD U3 - conditionals - arrows and gears_markdown_instruction: "# Gears with\nConditionals\\r\n\\r\nLet's make the gears spin only when the space key is\nbeing held down.\\r\n\\r\n# Do This\\r\n\\r\n* Add an `if` statement.\\r\n* Use\n`keyDown` as input to the if statement to check when the space key is pressed.\\r\n*\nMove the code that makes the gears rotate inside the `if`."
      CSD U3 - conditionals - first conditional 2-2018_markdown_instruction: "<img\nsrc=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\"\nstyle=\"width:200px;float:right\">\\r\n# Visible\\r\n\\r\nSometimes it's useful\nto hide the image for a while and then show it again. You can do this using\nthe `visible` property. The visible property is a little different from other\nproperties you have seen in the past: It is a Boolean value, either `true`\n(the sprite is visible) or `false` (the sprite is **not** visible). By default,\nvisible is set to `true`.\\r\n\\r\n# Do This\\r\nMake the balloon pop when it\nhits the edge of the game area!\\r\n\\r\n* Add a conditional that checks to\nsee whether the balloon has hit the edge.\\r\n\\t* Use a watcher on `balloon.scale`\nto help you out.\\r\n* Create a pop sprite which uses the \"pop\" visual in\nthe animation tab.\\r\n* Use the `visible` property to keep the \"pop\" sprite\nhidden at the beginning.\\r\n* Inside the `if` add two statements.\\r\n\\t* One\nthat sets the `visible` property to hide the balloon sprite.\\r\n    * One\nthat sets the `visible` property to show the pop sprite."
      CSD U3 - conditionals - first conditional 2_markdown_instruction: "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\"\nstyle=\"width:200px;float:right\">\\r\n# Visible\\r\n\\r\nNow that you have conditionals\nand images, sometimes it's useful to hide the image for a while and then\nshow it again. You can do this using the `visible` property. The visible property\nis a little different from other properties you have seen in the past: It\nis a Boolean value, either `true` (the sprite is visible) or `false` (the\nsprite is **not** visible). By default, visible is set to `true`.\\r\n\\r\n#\nDo This\\r\nMake the balloon pop when it hits the edge of the game area!\\r\n\\r\n*\nAdd an `if` statement that checks to see if the balloon has hit the edge.\\r\n\\t*\nUse a watcher on `balloon.scale` to help you out.\\r\n* Create a pop sprite\nwhich uses the \"pop\" visual in the animation tab.\\r\n* Set the pop's `visible`\nproperty to `false` to start.\\r\n* Inside the `if` add two statements.\\r\n\\t*\nOne that sets the `visible` property to hide the balloon sprite.\\r\n    *\nOne that sets the `visible` property to show the pop sprite."
      CSD U3 - conditionals - first conditional 2_2018_markdown_instruction: "<img\nsrc=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\"\nstyle=\"width:200px;float:right\">\\r\n# Visible\\r\n\\r\nSometimes it's useful\nto hide the image for a while and then show it again. You can do this using\nthe `visible` property. The visible property is a little different from other\nproperties you have seen in the past: It is a Boolean value, either `true`\n(the sprite is visible) or `false` (the sprite is **not** visible). By default,\nvisible is set to `true`.\\r\n\\r\n# Do This\\r\nMake the balloon pop when it\nhits the edge of the game area!\\r\n\\r\n* Add a conditional that checks to\nsee whether the balloon has hit the edge.\\r\n\\t* Use a watcher on `balloon.scale`\nto help you out.\\r\n* Create a pop sprite which uses the \"pop\" visual in\nthe animation tab.\\r\n* Use the `visible` property to keep the \"pop\" sprite\nhidden at the beginning.\\r\n* Inside the `if` add two statements.\\r\n\\t* One\nthat sets the `visible` property to hide the balloon sprite.\\r\n    * One\nthat sets the `visible` property to show the pop sprite."
      CSD U3 - conditionals - first conditional_markdown_instruction: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03\nPM.png\" style=\"float:right;width:100px\">\\r\n# If Statement\\r\n\\r\nThe Boolean\nexpressions you used earlier allow us to ask questions, but in order to _respond\nto those questions_, we need to use an `if` statement.\\r\n\\r\n`if` statements\nusually go inside your draw loop because we want to check them each time the\nloop runs. \\r\n\\r\n# Do This\\r\n\\r\nThe race car program you wrote earlier\nis loaded here for you.\\r\n\\r\n* Add an `if` statement after you update the\nposition of the race car.\\r\n* Move the Boolean expression from the console.log\nstatement to the condition of the if statement.\\r\n* Inside the `if` statement\nadd a statement to draw text on the screen to say \"Winner\".\\r\n"
      CSD U3 - conditionals - first conditional_2018_markdown_instruction: "<img\nsrc=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03\nPM.png\" style=\"float:right;width:100px\">\\r\n# If Statement\\r\n\\r\nThe Boolean\nexpressions you used earlier allow us to ask questions, but in order to _respond\nto those questions_, we need to use an `if` statement.\\r\n\\r\n`if` statements\nusually go inside your draw loop because we want to check them each time the\nloop runs. \\r\n\\r\n# Do This\\r\n\\r\nThe race car program you wrote earlier\nis loaded here for you.\\r\n\\r\n* Add an `if` statement after you update the\nposition of the race car.\\r\n* Move the Boolean expression from the console.log\nstatement to the condition of the if statement.\\r\n* Inside the `if` statement\nadd a statement to draw text on the screen to say \"Winner\".\\r\n"
      CSD U3 - conditionals - transition 2_markdown_instruction: "# More Practice\nWith Booleans\\r\n\\r\nLet's use one more Boolean expression to check the condition\nof a sprite.\\r\n\\r\n# Do This\\r\nThere is a growing balloon sprite created\nfor you. Can you create an expression to check when the balloon hits the edge\nof the game area?\\r\n\\r\n* Add a `console.log` statement.\\r\n* Add a Boolean\nexpression inside the `console.log` that checks whether the balloon has hit\nthe edge of the game area.\\r\n* Hint: Use the scale of the balloon. You might\nhave to do some guess and check testing to find the right scale."
      CSD U3 - conditionals - transition_markdown_instruction: "# Booleans\\r\n\\r\nIn\nthe past few levels, we have been comparing values of sprites to find out\nwhether something is true or false. Let's start putting that in the context\nof an animation.\\r\n\\r\n# Do This\\r\nThe program draws a race car and a finish\nline. We are going to figure out when the race car crosses the finish line.\nThe sprites have all been set up for you.\\r\n\\r\n* Add a `console.log` statement\ninside the draw loop. ( [Show me where](#triggercallout=callout) )\\r\n* Add\nan Boolean expression inside the `console.log` that asks \"Is the x position\nof the race car less than the x position of the finish line?\"\\r\n* Look at\nthe output of the program as the car moves. When does the output change? Why?"
      CSD U3 - conditionals - transition_2018_markdown_instruction: "# Booleans\\r\n\\r\nIn\nthe past few levels, we have been comparing values of sprites to find out\nwhether something is true or false. Let's start putting that in the context\nof an animation.\\r\n\\r\n# Do This\\r\nThe program draws a race car and a finish\nline. We are going to figure out when the race car crosses the finish line.\nThe sprites have all been set up for you.\\r\n\\r\n* Add a `console.log` statement\ninside the draw loop. ( [Show me where](#triggercallout=callout) )\\r\n* Add\nan Boolean expression inside the `console.log` that asks \"Is the x position\nof the race car less than the x position of the finish line?\"\\r\n* Look at\nthe output of the program as the car moves. When does the output change? Why?"
      CSD U3 - images - Embed Project_markdown_instruction: "Example of the Final\nProject"
      CSD U3 - images - animations_markdown_instruction: "# Animations\\r\n\\r\nYou\nhave seen through out this Unit that when you put together a set of images\nand play them close together back to back it looks like movement! Well sprites\nmake that animation easier! You can put together a set of images to create\nan animation. There are pre-loaded animations for you in the animations manager.\n\\r\n\\r\nSet the animation with setAnimation.\\r\n\\r\n# Do This\\r\n\\r\n* Create\na sprite\\r\n* Add the animation."
      CSD U3 - images - changing scene_markdown_instruction: "# Images\\r\n\\r\nUse\nthe animations tab to finish making all three sprites fish images.\\r\n\\r\n<img\nsrc=\"https://images.code.org/f947fc6800cd1abda023b08c20a2ee87-image-1477679298953.gif\"\nstyle=\"float:right\">\\r\n\\r\n# Do This\\r\nYour goal is to finish the underwater\nscene so all three sprites are fish like the example on the right. \\r\n\\r\n*\nThere is a rectangle sprite already created for you for each fish.\\r\n* Run\nthe code to see how it works.\\r\n* Add a `setAnimation` command to change\nthe look for the remaining two fish. \\r\n* Run it to see that your rectangle\nis now an image!\\r\n"
      CSD U3 - images - first image_markdown_instruction: "# Images\\r\n\\r\nUp until\nnow all of your sprites have been rectangles. No longer! Now you can use pictures\nfor your sprites instead.\\r\n\\r\nCheck out the animations tab by clicking\nthe <img src=\"https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49\nPM.png\" style=\"width:100px\"> button above the display area.\\r\n\\r\nThere\nis an image there that have been loaded for you!\\r\n\\r\nIn order to use that\nimage you will need to use the `setAnimation` command. You have to create\nthe sprite before you can set its animation.\\r\n\\r\n# Do This\\r\n\\r\nThere\nis a rectangle sprite already created for you. All you need to do is change\nit to an image.\\r\n\\r\n* Add a call to `setAnimation` to set the animation\nto the image provided\\r\n* Run it to see that your rectangle is now an image!"
      CSD U3 - images - first sprite with image_markdown_instruction: "# Images\\r\n\\r\nRectangles\nare great, but if you're going to make animations and games that really look\ngreat, you'll need some way to add more interesting images to your sprites.\\r\n\\r\nOver\non the **Animations Tab** you'll see three images that have been loaded for\nyou! You can get to the animations tab by clicking the <img src=\"https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49\nPM.png\" style=\"width:100px\"> button above the display area.\\r\n\\r\n<img\nsrc=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\" style=\"width:300px;float:right\">\\r\n\\r\nOnce you have created a\nsprite you can **use the `setAnimation()` command to change the look of your\nsprite from a rectangle to a picture.** The blocks make this super easy to\ndo as the names of all the images you have loaded in the animation tab show\nup in the `setAnimation()` dropdown.  The alien is set up for you as an example.\\r\n\\r\n#\nDo This\\r\nChange the sprite to your favorite image from the animations tab.\\r\n\\r\n*\nA sprite that is set to an image has already been created for you.\\r\n* Run\nthe code to see how it works.\\r\n* Change the input to the `setAnimation`\ncommand to change the look of the sprite.\\r\n* Try out all the different images."
      CSD U3 - images - fish free play_markdown_instruction: "# Fish Free Play\\r\n\\r\nHere\nare the swimming fish you have been working on. Continue to improve the animation!\\r\n\\r\n#\nDo This\\r\n\\r\n* Add another sea creature to the scene.\\r\n* Make the sea\ncreature move.\\r\n* Make one of the fish follow the mouse.\\r\n* Add more ideas\nof your own!"
      CSD U3 - images - fish with arrows_markdown_instruction: "# Fish With Arrows\\r\n\\r\nThe\nfish are back. Can you make the fish move left only when the left arrow key\nis pressed down?\\r\n\\r\n# Do This\\r\n\\r\n* Add an if statement to check when\nthe left arrow key is pressed down.\\r\n* Move the statements for moving the\nfish inside the if statement."
      CSD U3 - images - kite free play_markdown_instruction: "# Kite Free Play\\r\n\\r\nHere\nis the flying kite you have been working on. Continue to improve the animation!\\r\n\\r\n#\nDo This\\r\n\\r\n* Add at least 1 other sprite.\\r\n* Make the sprite move.\\r\n*\nImprove the background by adding clouds or other objects.\\r\n* Add more ideas\nof your own!"
      CSD U3 - images - kiteFlying_markdown_instruction: "# Flying Kite\\r\n\\r\nNow\nthat you have a kite, make it fly around.\\r\n\\r\nTo do this we will need to\nmove the kite and update the end position of the line that is the string.\nYou have done similar things with variables before but now you will be using\nproperties.\\r\n\\r\n# Do This\\r\n\\r\n* Make the kite move around the top right\ncorner of the screen randomly.\\r\n* Move the code for the string of the kite\nto the Draw Animations section since it is now moving!\\r\n* Update the end\nposition of the line so that one end of string stays at the center of the\nkite."
      CSD U3 - images - nextFrame_markdown_instruction: "# Next Frame\\r\n\\r\nOn the\nlast level the animation you used continously looped through the animation\nand never stopped. Sometimes we want to control when the animation changes.  When\nyou want to create a sequence but not have it loop you can click the button\nin the anmations tab *** show example***. Then in the code you can control\nwhen you move to the next frame using `nextFrame`. \\r\n\\r\n\\r\n# Do This\\r\n\\r\nThere\nis a sprite already created for you and 4 images loaded into the animations\ntab. Make the sprite change frames each time the space bar is pressed down.\\r\n\\r\n*\nCreate a conditional to respond to the space bar\\r\n* Inside the conditional\ncall `nextFrame` to move the sprite to the next frame"
      CSD U3 - images - race images_markdown_instruction: "# Race Cars\\r\n\\r\nYou\nmade a racing game in the last lesson. You can now make those rectangles look\nlike race cars!\\r\n\\r\n# Do This\\r\n\\r\n* Use the race car images in the animations\ntab to update your racing animation."
      CSD U3 - images - random movement_markdown_instruction: "<img src=\"https://images.code.org/fccef5d23434917c0a22361cb6e69666-image-1477679738105.gif\"\nstyle=\"float:right\">\\r\n\\r\n# Updating Fish\\r\n\\r\nThe same thing you did\non the last level will help your fish look more like they are swimming. Update\nyour scene to make the fish look like they don't swim in a perfectly straight\nline. \\r\n\\r\n# Do This\\r\nYour goal is to finish the underwater scene so\nall three sprites are fish like the example on the right. \\r\n\\r\n* Use a\nsmall random rotation to **make your fish wiggle**.\\r\n"
      CSD U3 - images - review_markdown_instruction: "# Sprites Review\\r\n\\r\nYou\nhave learned a lot about sprites already and conditionals. Can you use those\nskills to create a square that moves in all 4 directions in response to the\narrow keys?\\r\n\\r\n# Do This\\r\n\\r\n* Create a sprite\\r\n* Make the sprite\nmove up, down, left, and right in response to the arrow keys"
      CSD U3 - images - scale_markdown_instruction: "# Upload your own image\\r\n\\r\nSo\nthe image you uploaded probably was not the size you wanted was it? You can\nfix that!  There is a property for sprites called `scale`.  **Scale controls\nthe width and the height of the sprite at once.** Using scale is better than  using\nwidth and height for images because...\\r\n1. It's one property instead of\ntwo.\\r\n2. You keep the image ratio and it doesn't distort it.\\r\n\\r\n**To\nmake the image smaller you want to use a scale less than 1. To make the image\nbigger you want to use a number greater than 1. A scale of 1 would keep it\nthe same.**\\r\n\\r\n# Do This\\r\n\\r\n* Resize your kite using `scale` to better\nfit the picture."
      CSD U3 - images - setAnimation_markdown_instruction: "# Upload your own image\\r\n\\r\nYou\ncan also use the Animation tab to upload your own image.\\r\n\\r\n# Do This\\r\nYou\nare going to make a flying kite. The first step is to pick out a kite you\nlike.\\r\n\\r\n* Find an image of a kite you want to use.  It works best if\nit has a clear background.\\r\n* Open the animations tab.\\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\nPM.png\" style=\"width:50px\">\\r\n* Click <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\nPM.png\" style=\"width:50px\">\\r\n* Select a file from your computer.\\r\n*\nRename your image so it has a name that is easy to remember. To rename it\nclick the text below the image. <img src=\"https://images.code.org/c7809f27743bcb4cd86e46a4493c5c7a-image-1466194516357.15.04\nPM.png\" style=\"width:60px\">\\r\n* Set the kite sprite to display your image.\\r\n\\r\nDon't\nworry if your kite image is too big! You'll learn how to fix that in the\nnext level."
      CSD U3 - images - switch the picture_markdown_instruction: "# Switching Images\\r\n\\r\nYou\ndon't have to keep the same image the whole time. In fact since your *image*\nwas moving around the screen it would be cool to have it fact the correct\ndirection as it moves.\\r\n\\r\n# Do This\\r\n\\r\nYour work was copied here as\nwell\\r\n\\r\n* Add a call to `setAnimation` inside each if statement to the\ncorrect image"
      CSD U3 - images - visible_markdown_instruction: "# Visible\\r\n\\r\nNow that\nyou have conditionals and images sometimes it appropriate to hide the image\nfor a while and then show it again. You can do this using the `visible` property.\nThe visible property is a little different than some of the other properties\nyou have seen in the past. It is a boolean value. So visible is either true\nor false. By default visible is set to true.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n*\nIn response to something set the sprite to visible and invisible.\\r\n"
      CSD U3 - sprites - motiviation_markdown_instruction: "# How Many Variables?\\r\n\\r\nIn\nthe last lesson you learned how to use the **counter pattern** (`x = x + 1`,\n`x = x - 0.5`, `x = x - 1`, etc.) to create smooth animations. Using this\npattern in many different ways allows you to create interesting and complex\nanimations.\\r\n\\r\nWatch the animation here. With a partner discuss: \\r\n\\r\n*\nHow many counter variables would you need to create to make this animation?\nWhat are they used to animate?\\r\n* What would you name your variables?\\r\n*\nWhat are the challenges of using counter variables in a scene like this?"
      CSD U3 AnimationsMulti Play Defender_markdown_instruction: "# Defend Your Cake!\\r\n\\r\nThis\nis an example of a defender game that you'll build by the end of this lesson.\nTo defend your cake, move the alien with arrow keys to block the lady bugs\nand push them into the water.\\r\n\\r\n# Do This\\r\n\\r\nTurn to a classmate\nand make a list of the following information.\\r\n\\r\n* How many sprites are\nthere in this game. Which are they?\\r\n* What variables are needed to make\nthis game? What do they store?\\r\n* If you were to split the code of this\ngame into functions what do you think they would be? What are the major pieces\nof behavior you'd need to create in your code?"
      CSD U3 AnimationsMulti Play Defender_2018_markdown_instruction: "# Defend Your\nCake!\\r\n\\r\nThis is an example of a defender game that you'll build by the\nend of this lesson. To defend your cake, move the alien with arrow keys to\nblock the lady bugs and push them into the water.\\r\n\\r\n# Do This\\r\n\\r\nTurn\nto a classmate and make a list of the following information.\\r\n\\r\n* How\nmany sprites are there in this game. Which are they?\\r\n* What variables are\nneeded to make this game? What do they store?\\r\n* If you were to split the\ncode of this game into functions what do you think they would be? What are\nthe major pieces of behavior you'd need to create in your code?"
      CSD U3 AnimationsMulti defender animate cake enemies_markdown_instruction: "#\nGetting Started: Set Animations\\r\n\\r\nYou should have already reviewed the\nplanning guide for this project. A lot of the work to turn this project guide\ninto a working game has already been started. Based on the project guide you're\ngoing to do the rest of this work.\\r\n\\r\n# Do This\\r\n\\r\nBefore we get started\nyou'll want some better animations for each of your sprites.\\r\n\\r\n* In\nthe Animation Tab are animations for each of your sprites. Go look at what\nthey are.\\r\n* In your code give each sprite its appropriate animation. **Use\nthe ones provided for now** but later you'll be able to go change them.\\r\n*\nHead to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering\nhow to do this."
      CSD U3 AnimationsMulti defender animate cake enemies_2018_markdown_instruction: "#\nGetting Started: Set Animations\\r\n\\r\nYou should have already reviewed the\nplanning guide for this project. A lot of the work to turn this project guide\ninto a working game has already been started. Based on the project guide you're\ngoing to do the rest of this work.\\r\n\\r\n# Do This\\r\n\\r\nBefore we get started\nyou'll want some better animations for each of your sprites.\\r\n\\r\n* In\nthe Animation Tab are animations for each of your sprites. Go look at what\nthey are.\\r\n* In your code give each sprite its appropriate animation. **Use\nthe ones provided for now** but later you'll be able to go change them.\\r\n*\nHead to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering\nhow to do this."
      CSD U3 AnimationsMulti defender animate player_markdown_instruction: "# Change\nPlayer Animations\\r\n\\r\nRight now your player is always facing the same direction.\nYou can make things look a lot more realistic by switching between animations.\nYour player should switch between a left-facing and right-facing animation\ndepending on which key was last pressed. Remember, you can quickly copy and\nedit animations inside the Animation Tab.\\r\n\\r\n# Do This\\r\n\\r\n* Inside\nthe Animation Tab copy the animation of your player sprite.\\r\n* Flip each\nframe of the new animation so that the sprite is facing in the opposite direction.\\r\n*\nRename your new animation.\\r\n* Use the `setAnimation` command inside the\n`movePlayer` function so that the player changes the direction it is facing\nwhen the \"left\" and \"right\" arrows are pressed."
      CSD U3 AnimationsMulti defender animate player_2018_markdown_instruction: "#\nChange Player Animations\\r\n\\r\nRight now your player is always facing the\nsame direction. You can make things look a lot more realistic by switching\nbetween animations. Your player should switch between a left-facing and right-facing\nanimation depending on which key was last pressed. Remember, you can quickly\ncopy and edit animations inside the Animation Tab.\\r\n\\r\n# Do This\\r\n\\r\n*\nInside the Animation Tab copy the animation of your player sprite.\\r\n* Flip\neach frame of the new animation so that the sprite is facing in the opposite\ndirection.\\r\n* Rename your new animation.\\r\n* Use the `setAnimation` command\ninside the `movePlayer` function so that the player changes the direction\nit is facing when the \"left\" and \"right\" arrows are pressed."
      CSD U3 AnimationsMulti defender create set enemies_markdown_instruction: "#\nCreating Functions\\r\n\\r\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00\nAM.png\" style=\"float:right; height:90px\">\\r\n\\r\nYour program now includes\ncode in two places to set the enemies on the left side of the screen at a\nrandom y location. You can create functions to reset each of your two enemies\nto remove repetitions from your program. This will make your program easier\nto read, allow you to change it more easily, and allow you to quickly reset\nyour sprites at other points in your program if you need to.\\r\n\\r\n# Do This\\r\n\\r\n<img\nsrc=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52\nAM.png\" style=\"\\r\nfloat:right; height:70px\">\\r\n\\r\n* At the bottom of\nyour program create two new functions, `setEnemy1` and `setEnemy2`.\\r\n* Inside\neach of these functions place the code that sets the enemies on the left side\nof the screen and gives them a random y position.\\r\n* Wherever the code for\n`setEnemy1` and `setEnemy2` appears in your program replace them with a call\nto the functions you just created."
      CSD U3 AnimationsMulti defender create set enemies_2018_markdown_instruction: "#\nCreating Functions\\r\n\\r\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00\nAM.png\" style=\"float:right; height:90px\">\\r\n\\r\nYour program now includes\ncode in two places to set the enemies on the left side of the screen at a\nrandom y location. You can create functions to reset each of your two enemies\nto remove repetitions from your program. This will make your program easier\nto read, allow you to change it more easily, and allow you to quickly reset\nyour sprites at other points in your program if you need to.\\r\n\\r\n# Do This\\r\n\\r\n<img\nsrc=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52\nAM.png\" style=\"\\r\nfloat:right; height:70px\">\\r\n\\r\n* At the bottom of\nyour program create two new functions, `setEnemy1` and `setEnemy2`.\\r\n* Inside\neach of these functions place the code that sets the enemies on the left side\nof the screen and gives them a random y position.\\r\n* Wherever the code for\n`setEnemy1` and `setEnemy2` appears in your program replace them with a call\nto the functions you just created."
      CSD U3 AnimationsMulti defender displace enemies_markdown_instruction: "# Displace\nEnemies\\r\n\\r\nIt's time to write code for some more sprite interactions.\nYour player sprite should displace the enemy sprites.\\r\n\\r\n# Do This\\r\n\\r\nFor\nthis level you'll be writing code inside the `displaceEnemies` function.\\r\n\\r\n*\nWrite code that makes player displace both enemy sprites.\\r\n* Test your program\nto make sure your player is displacing enemies but they keep moving right\nafter the player moves away.\\r\n\\r\n_Hint: You can use `sprite.debug` to see\nyour sprites' colliders if you need to debug your program._"
      CSD U3 AnimationsMulti defender displace enemies_2018_markdown_instruction: "#\nDisplace Enemies\\r\n\\r\nIt's time to write code for some more sprite interactions.\nYour player sprite should displace the enemy sprites.\\r\n\\r\n# Do This\\r\n\\r\nFor\nthis level you'll be writing code inside the `displaceEnemies` function.\\r\n\\r\n*\nWrite code that makes player displace both enemy sprites.\\r\n* Test your program\nto make sure your player is displacing enemies but they keep moving right\nafter the player moves away.\\r\n\\r\n_Hint: You can use `sprite.debug` to see\nyour sprites' colliders if you need to debug your program._"
      CSD U3 AnimationsMulti defender enemies move_markdown_instruction: "# Moving\nThe Enemies\\r\n\\r\nIt's time to start writing the code that will move your\nsprites. To begin you'll need to get your enemy sprites to a random position\nand moving across the screen.\\r\n\\r\n# Do This\\r\n\\r\nAt the top of your program,\nafter you create each enemy sprite, write code that will move it to the correct\nposition and give it the correct velocity.\\r\n\\r\n* Use `sprite.x` to set\nthe x position to 0.\\r\n* Use `sprite.y` to set the y position should be a\nrandom number between 150 and 250.\\r\n* Use `sprite.velocityX` to set the\nx velocity to 2.\\r\n\\r\nTest your program. Your enemy sprites should now be\nmoving across the bridge."
      CSD U3 AnimationsMulti defender enemies move_2018_markdown_instruction: "#\nMoving The Enemies\\r\n\\r\nIt's time to start writing the code that will move\nyour sprites. To begin you'll need to get your enemy sprites to a random\nposition and moving across the screen.\\r\n\\r\n# Do This\\r\n\\r\nAt the top\nof your program, after you create each enemy sprite, write code that will\nmove it to the correct position and give it the correct velocity.\\r\n\\r\n*\nUse `sprite.x` to set the x position to 0.\\r\n* Use `sprite.y` to set the\ny position should be a random number between 150 and 250.\\r\n* Use `sprite.velocityX`\nto set the x velocity to 2.\\r\n\\r\nTest your program. Your enemy sprites should\nnow be moving across the bridge."
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_markdown_instruction: "#\nTouching the Cake: Second Ladybug\\r\n\\r\nYour first enemy sprite should now\nbe resetting when it gets to the cake. Now you'll want the other ladybug\nto reset as well.\\r\n\\r\n# Do This\\r\n\\r\nInside the `enemiesTouchCake` function\nyou should have written code that resets `enemy1`.\\r\n\\r\n* Copy the entire\nif-statement you wrote in the last level (Ctrl-C).\\r\n* Paste the code inside\nof the `enemiesTouchCake` function, just below the last one (Ctrl-V).\\r\n*\nChange the name of the sprite in that code from `enemy1` to `enemy2`.\\r\n  \\r\nTest\nyour code. Now both bugs should reset when they touch the cake."
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018_markdown_instruction: "#\nTouching the Cake: Second Ladybug\\r\n\\r\nYour first enemy sprite should now\nbe resetting when it gets to the cake. Now you'll want the other ladybug\nto reset as well.\\r\n\\r\n# Do This\\r\n\\r\nInside the `enemiesTouchCake` function\nyou should have written code that resets `enemy1`.\\r\n\\r\n* Copy the entire\nif-statement you wrote in the last level (Ctrl-C).\\r\n* Paste the code inside\nof the `enemiesTouchCake` function, just below the last one (Ctrl-V).\\r\n*\nChange the name of the sprite in that code from `enemy1` to `enemy2`.\\r\n  \\r\nTest\nyour code. Now both bugs should reset when they touch the cake."
      CSD U3 AnimationsMulti defender enemies touch cake_markdown_instruction: "#\nTouching the Cake\\r\n\\r\nIf the enemies get all the way across to the cake\nyou should place them back at the left side of the screen and decrease the\nscore. To start you'll **write code for only one of your enemies**.\\r\n\\r\n#\nDo This\\r\n\\r\nInside the `enemiesTouchCake` function you'll need to write\ncode that checks when a ladybug is touching the cake, resets its position,\nand changes the score.\\r\n\\r\n* Use an `if` and `isTouching` to detect whether\nenemy1 has touched the cake.\\r\n* Inside your `if` block place code that:\\r\n  *\nsets enemy1's x position back to 0.\\r\n  * sets enemy1's y position to a\nrandom number between 150 and 250.\\r\n  * uses the counter pattern to decrease\nthe score by 2.\\r\n\\r\n(_Hint: You can reuse some code you already wrote_)\\r\n\\r\nTest\nyour code. One of your ladybugs should now reset when it gets across to the\ncake, and the score should go down by 2."
      CSD U3 AnimationsMulti defender enemies touch cake_2018_markdown_instruction: "#\nTouching the Cake\\r\n\\r\nIf the enemies get all the way across to the cake\nyou should place them back at the left side of the screen and decrease the\nscore. To start you'll **write code for only one of your enemies**.\\r\n\\r\n#\nDo This\\r\n\\r\nInside the `enemiesTouchCake` function you'll need to write\ncode that checks when a ladybug is touching the cake, resets its position,\nand changes the score.\\r\n\\r\n* Use an `if` and `isTouching` to detect whether\nenemy1 has touched the cake.\\r\n* Inside your `if` block place code that:\\r\n  *\nsets enemy1's x position back to 0.\\r\n  * sets enemy1's y position to a\nrandom number between 150 and 250.\\r\n  * uses the counter pattern to decrease\nthe score by 2.\\r\n\\r\n(_Hint: You can reuse some code you already wrote_)\\r\n\\r\nTest\nyour code. One of your ladybugs should now reset when it gets across to the\ncake, and the score should go down by 2."
      CSD U3 AnimationsMulti defender make it your own_markdown_instruction: "# Make\nIt Your Own\\r\n\\r\nYou just walked through someone else's plan for creating\na game, so now it's time to make it your own. What additional features or\nchallenges do you want to create?\\r\n\\r\n# Do This\\r\n\\r\nSelect one of the\nchallenges below to add to the game or come up with a challenge of your own.\\r\n\\r\n*\nChange the visuals of the game so that your player, enemies, or cake look\ndifferent.\\r\n* End the game when the enemies get to the cake and print the\nscore. For an extra challenge end the game only after 3 enemies get through.\\r\n*\nRandomize the speed of the enemies.\\r\n* Create a new background that shows\nup when players reach a higher score."
      CSD U3 AnimationsMulti defender make it your own_2018_markdown_instruction: "#\nMake It Your Own\\r\n\\r\nYou just walked through someone else's plan for creating\na game, so now it's time to make it your own. What additional features or\nchallenges do you want to create?\\r\n\\r\n# Do This\\r\n\\r\nSelect one of the\nchallenges below to add to the game or come up with a challenge of your own.\\r\n\\r\n*\nChange the visuals of the game so that your player, enemies, or cake look\ndifferent.\\r\n* End the game when the enemies get to the cake and print the\nscore. For an extra challenge end the game only after 3 enemies get through.\\r\n*\nRandomize the speed of the enemies.\\r\n* Create a new background that shows\nup when players reach a higher score."
      CSD U3 AnimationsMulti defender move player_markdown_instruction: "# Moving\nLeft and Right\\r\n\\r\nNow that your enemy sprites are moving correctly, it's\ntime to write the code to move your player. For now you'll just need to get\nyour character moving left and right and changing its animations.\\r\n\\r\n#\nDo This\\r\n\\r\nFor this level you'll be writing code inside the `movePlayer`\nfunction.\\r\n\\r\n* Use an `if` block along with `keyDown` to detect when the\n\"right\" arrow is pressed.\\r\n* Use `sprite.x` and the counter pattern increase\nthe player's x position by 3.\\r\n* Use another `if` block to move the player\nto the left when the \"left\" arrow is pressed. This time you'll need to\ndecrease the player's x position.\\r\n\\r\nTest your game. Your character sprite\nshould now move left and right when you press the left and right arrows."
      CSD U3 AnimationsMulti defender move player_2018_markdown_instruction: "# Moving\nLeft and Right\\r\n\\r\nNow that your enemy sprites are moving correctly, it's\ntime to write the code to move your player. For now you'll just need to get\nyour character moving left and right and changing its animations.\\r\n\\r\n#\nDo This\\r\n\\r\nFor this level you'll be writing code inside the `movePlayer`\nfunction.\\r\n\\r\n* Use an `if` block along with `keyDown` to detect when the\n\"right\" arrow is pressed.\\r\n* Use `sprite.x` and the counter pattern increase\nthe player's x position by 3.\\r\n* Use another `if` block to move the player\nto the left when the \"left\" arrow is pressed. This time you'll need to\ndecrease the player's x position.\\r\n\\r\nTest your game. Your character sprite\nshould now move left and right when you press the left and right arrows."
      CSD U3 AnimationsMulti defender move up down_markdown_instruction: "# Moving\nUp and Down\\r\n\\r\nYou'll want your player sprite to move up and down as\nwell.\\r\n\\r\n# Do This\\r\n\\r\nFor this level you'll still be writing code\ninside the `movePlayer` function.\\r\n\\r\n* Use an `if` block along with `keyDown`\nto detect when the \"up\" arrow is pressed.\\r\n* Use `sprite.y` to increase\nthe player's y position by 3 using the counter pattern.\\r\n* Use another\n`if` block to move the player down when the \"down\" arrow is pressed.\\r\n\\r\nTest\nyour code. Your character should now move in all 4 directions."
      CSD U3 AnimationsMulti defender move up down_2018_markdown_instruction: "#\nMoving Up and Down\\r\n\\r\nYou'll want your player sprite to move up and down\nas well.\\r\n\\r\n# Do This\\r\n\\r\nFor this level you'll still be writing code\ninside the `movePlayer` function.\\r\n\\r\n* Use an `if` block along with `keyDown`\nto detect when the \"up\" arrow is pressed.\\r\n* Use `sprite.y` to increase\nthe player's y position by 3 using the counter pattern.\\r\n* Use another\n`if` block to move the player down when the \"down\" arrow is pressed.\\r\n\\r\nTest\nyour code. Your character should now move in all 4 directions."
      CSD U3 AnimationsMulti defender template_markdown_instruction: "# Play and\nPause\\r\n\\r\nYou can use the `sprite.play` and `sprite.pause` commands to\nplay and pause a sprite's animation. If the animation is already playing\nor paused, using these commands twice in a row has no effect.  There's one\nimportant exception, however, which is that **play will restart a non-looping\nanimation if it has finished**. We're going to look at some cool behavior\nthis lets us create.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `sprite.play` command\nafter each of your `setAnimation` commands. This will restart the walk animations\nas long as the keys are pressed."
      CSD U3 AnimationsMulti defender template_2018_markdown_instruction: "# Play\nand Pause\\r\n\\r\nYou can use the `sprite.play` and `sprite.pause` commands\nto play and pause a sprite's animation. If the animation is already playing\nor paused, using these commands twice in a row has no effect.  There's one\nimportant exception, however, which is that **play will restart a non-looping\nanimation if it has finished**. We're going to look at some cool behavior\nthis lets us create.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `sprite.play` command\nafter each of your `setAnimation` commands. This will restart the walk animations\nas long as the keys are pressed."
      CSD U3 AnimationsMulti defender touch water_markdown_instruction: "# Touching\nthe Water\\r\n\\r\nThe last part of the game that you'll need to write is the\ncode to reset the sprites when they touch the water. Luckily you should have\nalready written functions that reset each sprite, so you'll just need a good\nway to know when either sprite leaves the bridge. Start by writing the code\nfor a single enemy and then copy-paste and make small changes to create code\nfor your second enemy.\\r\n\\r\n# Do This\\r\n\\r\nFor this level you'll be writing\ncode inside the `enemiesTouchWater` function.\\r\n\\r\n* Use an `if` statement\nto check whether enemy1 is off the top of the bridge by checking whether its\ny value is below 140. Within your if statement:\\r\n    * use your `setEnemy1`\nfunction to reset the sprite.\\r\n    * add 1 to the score.\\r\n* Use an if\nstatement to check whether enemy1 is off the bottom of the bridge by checking\nwhether its y value is above 260. Within your if statement:\\r\n\\t* use your\n`setEnemy1` function to reset the sprite.\\r\n    * add 1 to the score.\\r\n*\nTest your program for the first enemy sprite. Make sure the sprite is resetting\nand the score goes up.\\r\n* Once it is working copy and paste the code you\nwrote to create the same behavior for `enemy2`. You'll need to change the\nname of the sprite and the name of the functions you use."
      CSD U3 AnimationsMulti defender touch water_2018_markdown_instruction: "# Touching\nthe Water\\r\n\\r\nThe last part of the game that you'll need to write is the\ncode to reset the sprites when they touch the water. Luckily you should have\nalready written functions that reset each sprite, so you'll just need a good\nway to know when either sprite leaves the bridge. Start by writing the code\nfor a single enemy and then copy-paste and make small changes to create code\nfor your second enemy.\\r\n\\r\n# Do This\\r\n\\r\nFor this level you'll be writing\ncode inside the `enemiesTouchWater` function.\\r\n\\r\n* Use an `if` statement\nto check whether enemy1 is off the top of the bridge by checking whether its\ny value is below 140. Within your if statement:\\r\n    * use your `setEnemy1`\nfunction to reset the sprite.\\r\n    * add 1 to the score.\\r\n* Use an if\nstatement to check whether enemy1 is off the bottom of the bridge by checking\nwhether its y value is above 260. Within your if statement:\\r\n\\t* use your\n`setEnemy1` function to reset the sprite.\\r\n    * add 1 to the score.\\r\n*\nTest your program for the first enemy sprite. Make sure the sprite is resetting\nand the score goes up.\\r\n* Once it is working copy and paste the code you\nwrote to create the same behavior for `enemy2`. You'll need to change the\nname of the sprite and the name of the functions you use."
      CSD U3 AnimationsMulti introducing multiframe template_markdown_instruction: "#\nUsing Multiframe Animations\\r\n\\r\nYou probably noticed in the last game that\nthe sprites themselves were animated. Have some fun choosing some of the animations\nfrom the library.\\r\n\\r\n\\r\n# Do This\\r\n\\r\nThis program already includes\nseveral sprites but they don't yet have any animations.\\r\n\\r\n* Go to the\nAnimation tab and check out the multi-frame animations already added to your\nproject. Choose one for each of your characters.\\r\n"
      CSD U3 AnimationsMulti introducing multiframe template_2018_markdown_instruction: "#\nUsing Multiframe Animations\\r\n\\r\nYou probably noticed in the last game that\nthe sprites themselves were animated. Have some fun choosing some of the animations\nfrom the library.\\r\n\\r\n\\r\n# Do This\\r\n\\r\nThis program already includes\nseveral sprites but they don't yet have any animations.\\r\n\\r\n* Go to the\nAnimation tab and check out the multi-frame animations already added to your\nproject. Choose one for each of your characters.\\r\n"
      CSD U3 AnimationsMulti introducing multiframe_markdown_instruction: "# Using\nMultiframe Animations\\r\n\\r\nIn the sample defender game the sprites themselves\nwere animated. Before getting started on programming this game, take a minute\nto get familiar with this new way of animating sprites.\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram already includes several sprites but they don't yet have any animations.\\r\n\\r\n*\nGo to the Animation Tab and check out the multi-frame animations already added\nto your project. Choose one for each of your characters.\\r\n* Remember you\ncan use `setAnimation` to give your sprites animations you've created in\nthe Animation Tab."
      CSD U3 AnimationsMulti introducing multiframe_2018_markdown_instruction: "#\nUsing Multiframe Animations\\r\n\\r\nIn the sample defender game the sprites\nthemselves were animated. Before getting started on programming this game,\ntake a minute to get familiar with this new way of animating sprites.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program already includes several sprites but they don't\nyet have any animations.\\r\n\\r\n* Go to the Animation Tab and check out the\nmulti-frame animations already added to your project. Choose one for each\nof your characters.\\r\n* Remember you can use `setAnimation` to give your\nsprites animations you've created in the Animation Tab."
      CSD U3 AnimationsMulti mirror animation_markdown_instruction: "# Editing Multiframe\nAnimations\\r\n\\r\nYour sprites will look a lot more realistic if they turn\naround when they're moving. You can switch back and forth between multiframe\nanimations when the user presses different keys.\\r\n\\r\n# Do This\\r\n\\r\nRead\nthis code and run the program. Make sure you know how the sprite responds\nto the arrow keys.\\r\n\\r\n* In the Animation Tab, create a copy of the alien\nanimation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09\nPM.png)\\r\n* Use the tool to flip your animation. Make sure you flip both\nframes using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03\nPM.png) \\r\n* Rename your new animation.\\r\n* Use your new animation and old\nanimation so that the alien faces the correct direction when moving. Where\ndo you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2018_markdown_instruction: "# Editing\nMultiframe Animations\\r\n\\r\nYour sprites will look a lot more realistic if\nthey turn around when they're moving. You can switch back and forth between\nmultiframe animations when the user presses different keys.\\r\n\\r\n# Do This\\r\n\\r\nRead\nthis code and run the program. Make sure you know how the sprite responds\nto the arrow keys.\\r\n\\r\n* In the Animation Tab, create a copy of the alien\nanimation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09\nPM.png)\\r\n* Use the tool to flip your animation. Make sure you flip both\nframes using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03\nPM.png) \\r\n* Rename your new animation.\\r\n* Use your new animation and old\nanimation so that the alien faces the correct direction when moving. Where\ndo you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti no loop_markdown_instruction: "# Preventing Animations\nfrom Looping\\r\n\\r\nBy default your animations keep replaying in a loop. You\ncan have your animation only play once by clicking this button below your\nanimation.\\r\n\\r\n# Do This\\r\n\\r\n* Set both the animations in your project\nto non-looping.\\r\n* Run the program and confirm your sprite only takes 1\nstep when it changes directions"
      CSD U3 AnimationsMulti play pause_markdown_instruction: "# Play and Pause\\r\n\\r\nYou\ncan use the `sprite.play` and `sprite.pause` commands to play and pause a\nsprite's animation. If the animation is already playing or paused, using\nthese commands twice in a row has no effect.  There's one important exception,\nhowever, which is that **play will restart a non-looping animation if it has\nfinished**. We're going to look at some cool behavior this lets us create.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `sprite.play` command after each of your `setAnimation`\ncommands. This will restart the walk animations as long as the keys are pressed."
      CSD U3 AnimationsMulti slow down_markdown_instruction: "# Slow Down\\r\n\\r\nNice\nwork! Time to start learning how to control these multiframe animations.\\r\n\\r\n#\nDo This\\r\n\\r\nYour sprites should be animated but they're moving really\nquickly. \\r\n\\r\n* Head back to the Animation Tab. Underneath each animation\nyou should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26\nAM.png)\\r\n* Use these sliders to slow down your animations so they look more\nrealistic.\\r\n\\r\n"
      CSD U3 AnimationsMulti slow down_2018_markdown_instruction: "# Slow Down\\r\n\\r\nNice\nwork! Time to start learning how to control these multiframe animations.\\r\n\\r\n#\nDo This\\r\n\\r\nYour sprites should be animated but they're moving really\nquickly. \\r\n\\r\n* Head back to the Animation Tab. Underneath each animation\nyou should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26\nAM.png)\\r\n* Use these sliders to slow down your animations so they look more\nrealistic.\\r\n\\r\n"
      CSD U3 Background Discuss_markdown_instruction: "<i class=\"fa fa-hand-paper-o\"\naria-hidden=\"true\" style=\"color:red; float: right; font-size: 200px; font-weight:\n800;\"></i>\\r\n\\r\n# Animation\\r\nUsing the draw loop opens up the potential\nto make some neat animations, but it's a bit troublesome that every time\nthe loop is run it just draws on top of the last drawing. What if we could\nmake this behave more like a flip book animation?\\r\n\\r\n# Do This Together\\r\n\\r\n*\n**Run** the provided program together\\r\n* **Hypothesize** how does the draw\nloop work?\\r\n* **Brainstorm** how could we make it so that we only see the\nmost recently drawn rectangle?"
      CSD U3 Background Experiment_markdown_instruction: "# Background\\r\nWe could\ndraw a 400 pixel white square each time the `draw()` loop runs, but there's\nactually a built-in command that works even better. The `background()` block\njust takes one input, the color of your background, and fills the whole canvas\nwith that color. The nice thing about using `background()` instead of `rect()`\nis that it will fill the screen regardless of how big it is, making your code\nmore flexible and usable in more scenarios (like when you get a new phone\nwith a bigger screen).\\r\n\\r\n# Do This\\r\nPlace the `background()` block\ninside your `draw()` loop before any other shapes are drawn. Choose a background\ncolor of your choice and then test your code to make sure it only shows a\nsingle rectangle at a time."
      CSD U3 Boolean Modify_markdown_instruction: "# Boolean Expressions\\r\n\\r\nThe\nsimplest Boolean expressions are questions that the computer can answer with\ntrue or false. These expressions are made using **comparison operators**,\nas shown below.\\r\n\\r\n|Comparison Operator | Boolean Expression |  Meaning\n|\\r\n|:---:|:---:|:---:|\\r\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"\nstyle=\"width: 100px\"> | `1 < 9` | Is 1 less than 9? | \\r\n| <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"\nstyle=\"width: 100px\"> | `1 > 9` | Is 1 greater than 9 ? |  \\r\n| <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"\nstyle=\"width: 100px\">| `1 == 9` | Is 1 equal to 9?| \\r\n<br>\\r\n**Note:**\nIf you saw the statement 3 < 2 in math class, you'd think something was terribly\nwrong, but this is not math class.  In computer science, the comparison operators\n**ask a question** that the computer will answer with `true` or `false`. So\nyou can read 3 < 2 as **\"Is 3 less than 2?\"** The answer in this case is\nno, or `false`.  \\r\n\\r\nAnother way to say this is that the Boolean expression\n`3 < 2` **evaluates** to `false`.\\r\n\\r\n# Do This\\r\nCan you modify the values\nof the sprite properties so that each of the Boolean expressions evaluates\nto `true`?\\r\n\\r\n- Read through the entire program to see how `sprite1` and\n`sprite2` are being created and which properties are compared.\\r\n- For each\nof the Boolean expressions, identify the sprite properties being compared.\\r\n-\nChange the code _in the first **11** lines only_ so that each of the `console.log()`\nstatements print `true`."
      CSD U3 Boolean Modify_2018_markdown_instruction: "# Boolean Expressions\\r\n\\r\nThe\nsimplest Boolean expressions are questions that the computer can answer with\ntrue or false. These expressions are made using **comparison operators**,\nas shown below.\\r\n\\r\n|Comparison Operator | Boolean Expression |  Meaning\n|\\r\n|:---:|:---:|:---:|\\r\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"\nstyle=\"width: 100px\"> | `1 < 9` | Is 1 less than 9? | \\r\n| <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"\nstyle=\"width: 100px\"> | `1 > 9` | Is 1 greater than 9 ? |  \\r\n| <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"\nstyle=\"width: 100px\">| `1 == 9` | Is 1 equal to 9?| \\r\n<br>\\r\n**Note:**\nIf you saw the statement 3 < 2 in math class, you'd think something was terribly\nwrong, but this is not math class.  In computer science, the comparison operators\n**ask a question** that the computer will answer with `true` or `false`. So\nyou can read 3 < 2 as **\"Is 3 less than 2?\"** The answer in this case is\nno, or `false`.  \\r\n\\r\nAnother way to say this is that the Boolean expression\n`3 < 2` **evaluates** to `false`.\\r\n\\r\n# Do This\\r\nCan you modify the values\nof the sprite properties so that each of the Boolean expressions evaluates\nto `true`?\\r\n\\r\n- Read through the entire program to see how `sprite1` and\n`sprite2` are being created and which properties are compared.\\r\n- For each\nof the Boolean expressions, identify the sprite properties being compared.\\r\n-\nChange the code _in the first **11** lines only_ so that each of the `console.log()`\nstatements print `true`."
      CSD U3 Complex Movement counter prediction_markdown_instruction: "# Velocity\nand the Counter Pattern\\r\n\\r\nUsing the counter pattern with a sprite's\nx and y property makes a sprite move smoothly across the screen. In this program\n**the counter pattern is being used with the `sprite.velocityX` property**\ninstead.\\r\n\\r\n# Predict\\r\n\\r\nWhat do you think will happen when the code\nis run? Why? Once you're ready you can run the code to find out."
      CSD U3 Complex Movement counter prediction_2018_markdown_instruction: "# Velocity\nand the Counter Pattern\\r\n\\r\nUsing the counter pattern with a sprite's\nx and y property makes a sprite move smoothly across the screen. In this program\n**the counter pattern is being used with the `sprite.velocityX` property**\ninstead.\\r\n\\r\n# Predict\\r\n\\r\nWhat do you think will happen when the code\nis run? Why? Once you're ready you can run the code to find out."
      CSD U3 Compound Nested Challenge_markdown_instruction: "# Challenge: Checking\nfor Multiple Conditions\\r\n_Check with your teacher before taking on this\nchallenge._\\r\n\\r\n\\r\nSo far we've looked at a lot of ways to check if a\nsingle condition is true, but often a program needs to check the state of\nmany conditions simultaneously before making a decision. For this challenge,\nlet's assume the following scenario:\\r\n\\r\n- The sprite should move up,\ndown, left, and right if the corresponding arrow key is pressed.\\r\n- The\nsprite should _not_ go all the way off the screen in any direction.\\r\n\\r\n#\nDo This Together\\r\n\\r\nBefore you tackle writing this program, you'll need\nto figure out how to check multiple conditions at once.\\r\n\\r\n* **Brainstorm**\nwith your neighbors ways you might check for more than one condition.\\r\n*\n**Share** back with the whole class so you can see other potential approaches.\\r\n*\n**Explore** the toolbox for blocks that might help (pay extra attention to\nthe Math and Control drawers).\\r\n* **Program** your proposed solution.\\r\n*\n**Test** your program to make sure it's actually checking all of the conditions\nyou intended.\\r\n"
      CSD U3 Compound Nested Challenge_2018_markdown_instruction: "# Challenge: Checking\nfor Multiple Conditions\\r\n_Check with your teacher before taking on this\nchallenge._\\r\n\\r\n\\r\nSo far we've looked at a lot of ways to check if a\nsingle condition is true, but often a program needs to check the state of\nmany conditions simultaneously before making a decision. For this challenge,\nlet's assume the following scenario:\\r\n\\r\n- The sprite should move up,\ndown, left, and right if the corresponding arrow key is pressed.\\r\n- The\nsprite should _not_ go all the way off the screen in any direction.\\r\n\\r\n#\nDo This Together\\r\n\\r\nBefore you tackle writing this program, you'll need\nto figure out how to check multiple conditions at once.\\r\n\\r\n* **Brainstorm**\nwith your neighbors ways you might check for more than one condition.\\r\n*\n**Share** back with the whole class so you can see other potential approaches.\\r\n*\n**Explore** the toolbox for blocks that might help (pay extra attention to\nthe Math and Control drawers).\\r\n* **Program** your proposed solution.\\r\n*\n**Test** your program to make sure it's actually checking all of the conditions\nyou intended.\\r\n"
      CSD U3 Compound Nested Examples_markdown_instruction: "# Multiple Paths to\nthe Same Outcome\\r\n\\r\nYou may have seen several different approaches to\nsolving the previous challenge - one of the beatiful things about programming\nis that it is as much about personal expression as it is about problem solving.\nYou could have 10 people attempt to create the same program, and each would\nbe unique and reflective of the person who programmed it!\\r\n\\r\nThere are\ntwo primary approaches to checking for multiple conditions:\\r\n\\r\n### Nesting\nConditionals\\r\n\\r\nIf you think about asking one question first, and then\nasking the second question only if the first was true, you could nest your\nconditionals, like so:\\r\n\\r\n```javascript\\r\nif (keyDown('up') {\\r\n  if\n(sprite.y > 0) {\\r\n    sprite.y = sprite.y - 1;\\r\n  }\\r\n}\\r\n```\\r\n\\r\n###\nCompound Booleans\\r\n\\r\nIf you think about asking if both the first and second\nquestion are true at the same time, you could use `&&` (and) to combine booleans,\nlike so:\\r\n\\r\n```javascript\\r\nif (keyDown('up') && sprite.y < 0) {\\r\n\\tsprite.y\n= sprite.y - 1;\\r\n}\\r\n```\\r\n\\r\n# Do This\\r\n\\r\nThis program uses a nested\nconditional to check the up arrow and a compound boolean to check the down\narrow. Use one (or both) techniques to check the left and right arrows as\nwell."
      CSD U3 Conditional Predict_markdown_instruction: "# Prediction\\r\n\\r\nIn this\nprogram, the animation has different reactions when the user presses different\nkeys. One reaction is a new kind of behavior you haven't seen before. Look\nat the following inputs and match them to their outputs. Once you have made\nyour prediction you will be able to test it out.\\r\n\\r\n| Input  |\\r\n| -------------\n| \\r\n| Press the _space_ bar  | \\r\n| Press the _w_ key  | \\r\n| Press the\n_j_ key |\\r\n| Press the _j_ and _k_ keys | \\r\n| Press the _k_ key |\\r\n\\r\n\\r\n|\nOutput |\\r\n| ------------------------- |\\r\n| blue_sprite rotates clockwise  |\\r\n|\nred_sprite moves up and blue_sprite moves down  |\\r\n| The sprites don't\nchange |\\r\n| red_sprite rotates counter clockwise  |\\r\n| red_sprite gets\nbigger and blue_sprite gets smaller  |\\r\n"
      CSD U3 Conditional Project_markdown_instruction: "# Get Creative\\r\n\\r\nAt\nthis point you have all of the tools necessary to make an interactive animation\nor simple game of your own design! This is your chance practice using all\nof the blocks you've seen so far, and to experiment with blocks you haven't\nused yet.\\r\n\\r\n# Do This\\r\n\\r\nDesign an interactive animation of your\nown. Your program should -\\r\n\\r\n- Use conditionals to get keyboard input\\r\n-\nUse conditionals to react to a sprite's properties\\r\n- Allow a user to move\none or more sprites around the screen\\r\n- Change multiple sprite properties\nthrough conditionals\\r\n\\r\n_You might notice some new blocks in the Sprites\ndrawer, experiment with them and see if you can incorporate them into your\nconditionals._"
      CSD U3 Conditionals Apple 2-2018_markdown_instruction: "# Changing Fruit\\r\n\\r\nNow\nthat we know how to use _if_ statements, you can do more than just check if\nthe apple has reached a scale of 2. You turn it into a pear once it happens.\\r\n\\r\n#\nDo This\\r\n\\r\nUse a conditional in the draw loop to check whether `fruit.scale`\nis greater than 2.  If it is, change the fruit's animation to \"pear\".\\r\n\\r\n_Challenge:\nCan you also make the fruit stop growing once it turns into a pear?_"
      CSD U3 Conditionals Apple 2_markdown_instruction: "# Turning Red\\r\n\\r\nNow\nthat we know how to use _if_ statements, you can do more than just check if\nthe apple has reached a scale of 2, you turn it red once it happens.\\r\n\\r\n#\nDo This\\r\n\\r\nUse a conditional in the draw loop to check whether `apple.scale`\nis greater than 2 - if it is, set the apples new animation to \"apple_red\".\\r\n\\r\n_Challenge:\nCan you also make the apple stop growing once it turns red?_"
      CSD U3 Conditionals Apple 2_2018_markdown_instruction: "# Changing Fruit\\r\n\\r\nNow\nthat we know how to use _if_ statements, you can do more than just check if\nthe apple has reached a scale of 2. You turn it into a pear once it happens.\\r\n\\r\n#\nDo This\\r\n\\r\nUse a conditional in the draw loop to check whether `fruit.scale`\nis greater than 2.  If it is, change the fruit's animation to \"pear\".\\r\n\\r\n_Challenge:\nCan you also make the fruit stop growing once it turns into a pear?_"
      CSD U3 Conditionals Apple-2018_markdown_instruction: "# More Practice With\nBooleans\\r\n\\r\nLet's use one more Boolean expression to check the condition\nof a sprite.  You can use a `console.log` command to check whether its scale\nis 2 yet.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `console.log` statement.\\r\n* Add\na Boolean expression inside the `console.log` that checks whether the `apple.scale`\nis greater than 2."
      CSD U3 Conditionals Apple_markdown_instruction: "# More Practice With Booleans\\r\n\\r\nLet's\nuse one more Boolean expression to check the condition of a sprite.\\r\n\\r\n#\nDo This\\r\nThere is a growing apple sprite created for you. It starts as green\nand should turn red when it gets to a scale of 2. We won't worry about making\nit red yet, let's just use a `console.log` command to check whether it's\nscale is 2 yet.\\r\n\\r\n* Add a `console.log` statement.\\r\n* Add a Boolean\nexpression inside the `console.log` that checks whether the `apple.scale`\nis greater than 2."
      CSD U3 Conditionals Apple_2018_markdown_instruction: "# More Practice With\nBooleans\\r\n\\r\nLet's use one more Boolean expression to check the condition\nof a sprite.  You can use a `console.log` command to check whether its scale\nis 2 yet.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `console.log` statement.\\r\n* Add\na Boolean expression inside the `console.log` that checks whether the `apple.scale`\nis greater than 2."
      CSD U3 Counters assigning an expression_markdown_instruction: "# Assignment\nand Expressions\\r\n\\r\nYou know that **variables can hold a single value**.\nYou also know that **expressions are always evaluated to a single value**.\nWhy don't we try storing that single value in a variable so that we can use\nit many times in our programs.\\r\n\\r\n# Do This\\r\n\\r\nThis program generates\na random multiple of 10 (10, 20, 30, 40 etc) and stores it in the variable\n`size`\\r\n\\r\n* **Run the progam** to see how it works\\r\n* **Change the numbers\nused in the expression on line 3** to see how it affects this simple animation"
      CSD U3 Counters counter colors_markdown_instruction: "# Counters in Colors\\r\n\\r\nThe\ncounter pattern you've been using is incredibly useful for changing many\ndifferent aspects of your images, not just the position of shapes. **Anything\nthat normally would be drawn with a number can easily be animated with a counter\nvariable.**\\r\n\\r\n# Do This\\r\n\\r\nThe goal of this program is to use two\nvariables as counters to **transition a circle's color slowly from blue to\nred**.\\r\n\\r\n* **Run the program** to see what happens.\\r\n\\t* The `red`\nvalue **already counts up by 1**\\r\n\\t* The `blue` value **doesn't change**\nand so the circle becomes purple, not red.\\r\n* Use what you know about counters\nto **add code that will make the circle transition smoothly to red**\\r\n*\n**Note:** When the `color` command sees a value outside the range of 0 - 255\nit just rounds. For example, 300 becomes 255 and -100 becomes 0."
      CSD U3 Counters counter square movement_markdown_instruction: "# Animating\nwith Counters\\r\n\\r\nThe counter pattern can be used to increase the value\nof a variable each time the draw loop runs. You can use this to create smooth\nmotion in your programs. You're going to try out a few ways of using this.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program uses the counter pattern with a variable called\n`xPos`.\\r\n\\r\n* **Read the program** and make a prediction of how it will\nrun.\\r\n* **Run the program** to check your prediction\\r\n* **Change the code**\nso that `xPos` changes by different amounts each draw loop. For example instead\nof `xPos = xPos + 1` you could try:\\r\n\\t* `xPos = xPos + 2`\\r\n    * `xPos\n= xPos + 5`\\r\n    * `xPos = xPos + 0.1`"
      CSD U3 Counters counter subtraction_markdown_instruction: "# Counting Down\\r\n\\r\nSometimes\nyou won't want to count up, you'll want to count down. You can **subtract**\nfrom a variable's value just as easily as you add. ![](https://images.code.org/8b98effa437da54090926c3451af204d-image-1465325587949.52.49\nPM.png)\\r\n\\r\n\\t// counter pattern, counting down\\r\n    counter = counter\n- 1;\\r\n\\r\nKeep getting practice using counters to animate, but this time\ntry counting down.\\r\n# Do This\\r\n\\r\nThis program uses the counter pattern\nwith a variable called `xPos`.\\r\n\\r\n* The square currently starts in the\ncenter and **goes off the right side** of the screen\\r\n* **Change the program**\nso that the square **goes off the left side of the screen** instead.\\r\n\\r\n"
      CSD U3 Counters counters expressions_markdown_instruction: "# Using One Counter\nMany Times\\r\n\\r\nYou've already seen and used commands like  `x = x + 1`\noften to update the value of `x`. Sometimes though we want to **do some math\nwith a variable without actually changing that variable's value**. \\r\n\\r\nThis\nprogram draws a rectangle **100 pixels to the right of `x` without changing\nthe value of `x`**. Here's the steps your computer goes through to run that\nsecond line of code.\\r\n\\r\n![](https://images.code.org/8f33bbb0189c5e1b854c5b1786168225-image-1465503000293.09.49\nPM.png)\\r\n\\r\nUsing this pattern allows you to use a single counter to animate\nmultiple objects, as you're about to see.\\r\n\\r\n# Do This\\r\n\\r\nThis program\ncreates a counter variable called `xPos` and uses it to animate 3 rectangles.\\r\n\\r\n*\n**Run the program** to see what happens.\\r\n* **The red and orange rectangles\nmove across the screen but the yellow one doesn't yet.**\\r\n* **Write code\nfollowing the pattern shown above** so that the yellow rectangle will move\nacross the screen with the others.\\r\n* **Hint:** How was the orange rectangle\nmade to move?\\r\n\\r\n![](https://images.code.org/822941874e7add509bb80266718efb94-image-1463080462625.gif)"
      CSD U3 Counters counters sunset night_markdown_instruction: "# Challenge: Nightfall\\r\n\\r\nThink\nyou've got drawing with counters down? Try this challenge.\\r\n\\r\nThe color\nblock can take a 4th input that controls the opacity of the color. You can\nclick the arrows on the side of the color block to expand this 4th input.\\r\n\\r\n![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nThis is your same sunset animation from before.\nCan you make the scene slowly change to night?\\r\n\\r\n![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\\r\n\\r\n"
      CSD U3 Counters counters sunset_markdown_instruction: "# Animate a Sunset\\r\n\\r\nYou\nnow know a little bit about programming with variables. You've seen that\nthey can **store a value to use many times in a program**. You've seen how\nthe **counter pattern can allow you to perform smooth animations**. It's\nnow time to put everything you've learned together.\\r\n\\r\n<img src = \"https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif\"\nstyle=\"float: right; height: 200px\">\\r\n# Do This\\r\n\\r\nThis program is\ndesigned to **animate a sunset**. Some starter code is provided that **creates\nall the counter variables you'll need to run your animation**. You need to\ndecide how to use them to animate this image.\\r\n\\r\n* **Run the program to\nsee how it works**\\r\n* **Add code** that will:\\r\n\\t* Make the sun go down\\r\n    *\nChange the color of the sky from blue to red\\r\n    * Make the cloud go across\nthe screen\\r\n    \\r\n<details><Summary>Need help?</Summary>\\r\n<ul>\\r\n<li>For\nhelp animating the sun go check out level 10</li>\\r\n<li>For help animating\nthe sky go check out level 12</li>\\r\n<li>For help animating the cloud go\ncheck out level 13</li>\\r\n</ul>\\r\n\\r\n</details>"
      CSD U3 Counters explaining counters contained 2_markdown_instruction: "# The\nCounter Pattern\\r\n\\r\nThis pattern is one of the most important ones in all\nof programming. \\r\n\\r\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56\nPM.png)\\r\n    \\r\nIt is used to increase the value of a variable by 1. You\nmight call it the **counter pattern** since it can be used to make a variable\nthat counts up. You'll use this pattern a lot, especially with the draw loop.\nLet's see what that looks like.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates\na variable `counter` and then uses the **counter pattern** to make it count\nup. When you run the program what do you think you'll see on the screen?\\r\n\\r\n*\n**Read the program** and make a prediction of what the output will be.\\r\n*\n**Run the program** to check your prediction.\\r\n* **Discuss with a neighbor**.\nCan you explain what you observed?\\r\n\\r\n"
      CSD U3 Counters explaining counters contained 2_2018_markdown_instruction: "#\nThe Counter Pattern\\r\n\\r\nThis pattern is one of the most important ones\nin all of programming. \\r\n\\r\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56\nPM.png)\\r\n    \\r\nIt is used to increase the value of a variable by 1. You\nmight call it the **counter pattern** since it can be used to make a variable\nthat counts up. You'll use this pattern a lot, especially with the draw loop.\nLet's see what that looks like.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates\na variable `counter` and then uses the **counter pattern** to make it count\nup. When you run the program what do you think you'll see on the screen?\\r\n\\r\n*\n**Read the program** and make a prediction of what the output will be.\\r\n*\n**Run the program** to check your prediction.\\r\n* **Discuss with a neighbor**.\nCan you explain what you observed?\\r\n\\r\n"
      CSD U3 Counters explaining counters_markdown_instruction: "# The Counter Pattern\\r\n\\r\nThis\npattern is one of the most important ones in all of programming. \\r\n\\r\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56\nPM.png)\\r\n    \\r\nIt is used to increase the value of a variable by 1. You\nmight call it the **counter pattern** since it can be used to make a variable\nthat counts up. You'll use this pattern a lot, especially with the draw loop.\nLet's see what that looks like.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates\na variable `counter` and then uses the **counter pattern** to make it count\nup. When you run the program what do you think you'll see on the screen?\\r\n\\r\n*\n**Read the program** and make a prediction of what the output will be.\\r\n*\n**Run the program** to check your prediction.\\r\n* **Discuss with a neighbor**.\nCan you explain what you observed?\\r\n\\r\n"
      CSD U3 Counters expressions_markdown_instruction: "# Expressions\\r\n\\r\nWe're\ngoing to start learning about **expressions** and how to use them in programs.\nHere are two expressions, a short one and a longer one.\\r\n\\r\n`1 + 2`\\r\n\\r\n`(1000\n- 400) / (3 * 20)`\\r\n\\r\nThese expressions have two important components:\\r\n\\r\n*\n**values:** numbers, text, or information in your program \\r\n* **operators:**\ncommands telling the computer to perform an action with those value `+`, `-`,\n`*`, `/`\\r\n\\r\nDon't worry if this is a lot of vocabulary all at once. Try\nusing some expressions first to get a feel for how they work.\\r\n\\r\n# Do\nThis: \\r\n\\r\nThis program draws a rectangle using 4 separate expressions.\n\\r\n\\r\n* **Run the program** to see what happens\\r\n* **Change some of the\nvalues and operators in the 4 expressions**. How does it change the rectangle?\\r\n*\nMove on once you've changed a few expressions. It's fine if your program\ndidn't run properly."
      CSD U3 Counters long expressions_markdown_instruction: "# Expressions Evaluate\nto a Single Value\\r\n\\r\nAs you probably just noticed expressions can be used\nin places where you might normally use a number. That's because your computer\ncan **evaluate or calculate the single number that is the result of the expression**.\nWhen your computer runs the command\\r\n\\r\n`strokeWeight(10 + 20)`\\r\n\\r\nIt\nwill first calculate the value of the expression `10 + 20` to be `30` and\nuse that value to set the strokeWeight. In fact, **every expression will eventually\nbe evaluated to a single value**.\\r\n\\r\n# Do This\\r\n\\r\nThis program uses\nconsole.log to show the single value of a couple long expressions.\\r\n\\r\n*\n**Run the program** to see that the expressions result in a single value\\r\n*\n**Create and display the results of some expressions of your own**. It doesn't\nmatter what they are, just throw in something long and complex and convince\nyourself a single value always comes out."
      CSD U3 Counters random expressions_markdown_instruction: "# Random Numbers\nin Expressions\\r\n\\r\nYou can **use random numbers inside of expressions**\ntoo. For example, \\r\n\\r\n`10 * randomNumber(1,5)`\\r\n\\r\nis a perfectly valid\nexpression. This is because **`randomNumber` will generate a single random\nvalue** that can then be used in the expression just like a number.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program displays random multiples of 10 between 10 and\n50.\\r\n\\r\n* **Run the program** to see how it works\\r\n* **Change the program**\nso that it displays **random multiples of 10 between 10 and 100**.\\r\n* Change\nthe expression with a random number in it more if you like. Once you're comfortable\nwith how it works move on."
      CSD U3 Counters sunset template_markdown_instruction: "# Animate a Sunset\\r\n\\r\nYou\nnow know a little bit about how **expressions can be used to create variables\nthat count** and you've used these in some simple programs. Try using counter\nvariables to animate a more complex scene.\\r\n\\r\n# Do This\\r\n\\r\nThis program\nis designed to **animate a sunset**. Some starter code is provided but you'll\nneed to fill in the rest.\\r\n\\r\n* **Run the program to see how it works**\\r\n*\n**Add code** that will:\\r\n\\t* Make the sun go down\\r\n    * Make the cloud\ngo across the screen\\r\n    * Change the color of the sky from blue to red\\r\n    \\r\n<details><Summary>Want\na hint?</Summary>\\r\n<ul>\\r\n<li>For help animating the sun go check out level\n[[blah]]</li>\\r\n<li>For help animating the cloud go check out level [[blah]]</li>\\r\n<li>For\nhelp animating the sky go check out level [[blah]]</li>\\r\n</ul>\\r\n\\r\n</details>\\r\n\\r\n![](https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif)"
      CSD U3 Counters variables as counters_markdown_instruction: "# x = x + 1\\r\n\\r\nThe\nfollowing line of code **is the most important one to understand in this lesson**.\\r\n\\r\n`x\n= x + 1;`\\r\n\\r\nTry it out in a program first, then move on to **learn more\nabout what this command is doing**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the\nprogram to get a sense of how it should run**\\r\n* **Run the program** and\nobserve how it works\\r\n* **Discuss with a neighbor** what you observe and\nwhy you think it is happening. Once you've talked, move on."
      CSD U3 Counters variables in expressions_markdown_instruction: "# Variables\nin Expressions\\r\n\\r\nYou just saw that **the result of an expression can\nbe stored in a variable**. Get ready though, because we're about to get even\nmore interesting.\\r\n\\r\n**Variables can be used in expressions**. All of\nthese expressions are valid (assuming the variables have been created):\\r\n\\r\n`age\n+ 1`\\r\n`height / 2`\\r\n`(time * speed) + 100`\\r\n\\r\nIn each case **the variable's\nvalue is used when its label appears**.\\r\n\\r\n# Do This\\r\n\\r\nThis program\ngenerates a random multiple of 10 (10, 20, 30, 40 etc) and stores it in the\nvariable `size`\\r\n\\r\n* **Run the progam** to see how it works\\r\n* **The\nvariable `size` appears in two expressions on lines 7 and 8.**\\r\n* **Change\nthe values in these expressions** to see how they affect the way your program\nworks"
      CSD U3 Counters watchers_markdown_instruction: "# Debugging: Watchers\\r\n\\r\nOnce\nyou have multiple counter variables it can become difficult to keep track\nof how your program is running. **If you want to debug your code, it's useful\nto be able to see the values of your different variables as they change.**\\r\n\\r\nYou\ncan add a **watcher** to a variable at any time by typing `$watch` followed\nby the name of your variable into the Debug Console. This example shows how\nyou would create watchers for the variables `x` and `y`. Notice they've now\n**been added to the \"Watch\" window** to the right.\\r\n\\r\n![](https://images.code.org/c5cddda5572e73e3f082287aa076e4a8-image-1465327628344.25.11\nPM.png)\\r\n\\r\nWhile your program is running, the values of `x` and `y` in\nthe \"Watch\" window will update to show their current value.\\r\n\\r\n# Do\nThis\\r\n\\r\nThis program draws a dot that slowly grows in size. You want to\nknow **the value of `size` when the dot totally covers the screen.**\\r\n\\r\n*\n**Create a watcher** for `size` by running the command `$watch size` in the\nDebug Console.\\r\n* **Run the program** and observe the value of `size` change\nin the \"Watch\" window.\\r\n* **Talk to a neighbor**. How large is `size`\nwhen the dot covers the whole screen?"
      CSD U3 Diagonal Movement_markdown_instruction: "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Diagonal Movement\\r\n\\r\nUpdating\nonly the `x` or `y` properties of a sprite can only make it move straight\nup and down or left and right. If you want a sprite to move on a diagonal\npath you'll need to update _both_ of those properties.\\r\n\\r\nThis program\ncurrently makes the mouse move straight down the screen - can you update it\nso that it moves diagonally across the screen like the image to the right?\\r\n\\r\n_Challenge:\nCan you make the mouse point in the same direction as the image?_"
      CSD U3 Diagonal Movement_2018_markdown_instruction: "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Diagonal Movement\\r\n\\r\nUpdating\nonly the `x` or `y` properties of a sprite can only make it move straight\nup and down or left and right. If you want a sprite to move on a diagonal\npath you'll need to updated _both_ of those properties.\\r\n\\r\nThis program\ncurrently makes the mouse move straight down the screen - can you update it\nso that it moves diagonally across the screen like the image to the right?\\r\n\\r\n_Challenge:\nCan you make the mouse point in the same direction as the image?_"
      CSD U3 Direction Animations-2018_markdown_instruction: "# Changing Images as\nyou Move\\r\nRight now your conditionals only do one thing (change your sprite's\nx or y), but you can actually put as much code as you want inside a conditional.\nA common thing to do in games is to change your character's image depending\non which direction they're walking.\\r\n\\r\n# Do This\\r\nUsing the provided\nprogram and images:\\r\n\\r\n- Duplicate your chosen bug image four times.\\r\n-\nEdit each of your images to point in one of the four directions.\\r\n- Write\ncode that uses `sprite.setAnimation()` to change the image on your bug sprite\nwhen different arrow keys are pressed."
      CSD U3 Direction Animations_markdown_instruction: "# Changing Images as you\nMove\\r\nRight now your conditionals only do one thing (change your sprite's\nx or y), but you can actually put as much code as you want inside a conditional.\nA common thing to do in games is to change your character's image depending\non which direction they're walking.\\r\n\\r\n# Do This\\r\nUsing the provided\nprogram and images:\\r\n\\r\n- Duplicate your chosen bug image four times.\\r\n-\nEdit each of your images to point in one of the four directions.\\r\n- Write\ncode that uses `sprite.setAnimation()` to change the image on your bug sprite\nwhen different arrow keys are pressed."
      CSD U3 Direction Animations_2018_markdown_instruction: "# Changing Images as\nyou Move\\r\nRight now your conditionals only do one thing (change your sprite's\nx or y), but you can actually put as much code as you want inside a conditional.\nA common thing to do in games is to change your character's image depending\non which direction they're walking.\\r\n\\r\n# Do This\\r\nUsing the provided\nprogram and images:\\r\n\\r\n- Duplicate your chosen bug image four times.\\r\n-\nEdit each of your images to point in one of the four directions.\\r\n- Write\ncode that uses `sprite.setAnimation()` to change the image on your bug sprite\nwhen different arrow keys are pressed."
      CSD U3 Direction Arrows-2018_markdown_instruction: "# Move in All Directions\\r\nOnce\nyou've got your sprite moving in one direction by responding to a `keyDown`,\ngetting it to move in all four directions should be more of the same. The\nbasic keyboard control that you're developing here will become the basis\nfor many of the games you make down the road.\\r\n\\r\n# Do This\\r\nThe bug\nsprite you made that responds to the right arrow has been brought to this\nlevel. Add the interaction for the other three arrow keys!\\r\n\\r\n- Add three\nif statements - one for each arrow.\\r\n- Each if statement should move the\nsprite in the direction of the arrow.\\r\n\\r\n_HINT: Make sure you consider\nboth the axis (x or y) of movement, **and** whether you need to increase or\ndecrease that value._"
      CSD U3 Direction Arrows_markdown_instruction: "# Move in All Directions\\r\nOnce\nyou've got your sprite moving in one direction by responding to a `keyDown`,\ngetting it to move in all four directions should be more of the same. The\nbasic keyboard control that you're developing here will become the basis\nfor many of the games you make down the road.\\r\n\\r\n# Do This\\r\nThe bug\nsprite you made that responds to the up arrow has been brought to this level.\nAdd the interaction for the other three arrow keys!\\r\n\\r\n- Add three if\nstatements - one for each arrow.\\r\n- Each if statement should move the sprite\nin the direction of the arrow.\\r\n\\r\n_HINT: Make sure you consider both the\naxis (x or y) of movement, **and** whether you need to increase or decrease\nthat value._"
      CSD U3 Direction Arrows_2018_markdown_instruction: "# Move in All Directions\\r\nOnce\nyou've got your sprite moving in one direction by responding to a `keyDown`,\ngetting it to move in all four directions should be more of the same. The\nbasic keyboard control that you're developing here will become the basis\nfor many of the games you make down the road.\\r\n\\r\n# Do This\\r\nThe bug\nsprite you made that responds to the right arrow has been brought to this\nlevel. Add the interaction for the other three arrow keys!\\r\n\\r\n- Add three\nif statements - one for each arrow.\\r\n- Each if statement should move the\nsprite in the direction of the arrow.\\r\n\\r\n_HINT: Make sure you consider\nboth the axis (x or y) of movement, **and** whether you need to increase or\ndecrease that value._"
      CSD U3 Draw Loop Discuss_markdown_instruction: "# Draw()ing\\r\nHere's a program\nthat looks pretty similar to what you've been writing, but may behave quite\ndifferently. You'll want to **stop and discuss** with the class before moving\non.\\r\n\\r\n# Do This Together\\r\nYou will **not write any code** in this level,\nand you should be working as a whole class.\\r\n* **Read** the provided program\ntogether.\\r\n* **Identify** elements that are different than those you have\nseen before.\\r\n* **Predict** what the provided program will do. **Be specific!**\\r\n*\n**Run** the program several times and **record** the results.\\r\n* **Discuss\nwith a neighbor.** Was your prediction correct?\\r\n* **Hypothesize** what\nis happening when this code is run."
      CSD U3 Draw Loop Experiment_markdown_instruction: "# Do This\\r\nTry using some\nof the other shape functions you've learned in the draw loop. What happens\nwhen you use `randomNumber()` to generate some of the inputs?\\r\n\\r\n# Challenge\\r\nExperiment\nwith adding code before and after the `draw()` loop. Can you figure out what\ngets called when?"
      CSD U3 Draw Loop Plugged orange and green_markdown_instruction: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Using the Draw Loop\\r\n\\r\nNow\nit's your turn to do some work with the draw loop. Remember that the code\ninside the draw loop is run by Game Lab over and over again.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd code to this program so that your drawing has orange circles being drawn,\ntoo.\\r\n* Move on when your program looks like the picture to the right."
      CSD U3 Draw Loop Plugged orange and green_2018_markdown_instruction: "<img\nsrc=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Using the Draw Loop\\r\n\\r\nNow\nit's your turn to do some work with the draw loop. Remember that the code\ninside the draw loop is run by Game Lab over and over again.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd code to this program so that your drawing has orange circles being drawn,\ntoo.\\r\n* Move on when your program looks like the picture to the right."
      CSD U3 Draw Loop Plugged predict 1 embed_markdown_instruction: "# Predict\\r\n\\r\nThis\nprogram has some code in the draw loop and some code outside of it. Remember:\\r\n\\r\n*\nAll your code outside the draw loop is run first, one time\\r\n* All your code\ninside the draw loop is run over and over forever\\r\n\\r\nWhat will this program\ndo? Write your prediction below."
      CSD U3 Draw Loop Plugged predict 1_markdown_instruction: "# Draw Loop\\r\n\\r\nHere's\nan example of the draw loop at work.\\r\n\\r\n# Do this\\r\n* Run the code and\nsee how it works.\\r\n* Discuss with your partner whether this looks like the\nflip book you saw in the video.  Why or why not?"
      CSD U3 Draw Loop Plugged predict 1_2018_markdown_instruction: "# Draw Loop\\r\n\\r\nHere's\nan example of the draw loop at work.\\r\n\\r\n# Do this\\r\n* Run the code and\nsee how it works.\\r\n* Discuss with your partner whether this looks like the\nflip book you saw in the video.  Why or why not?"
      CSD U3 Draw Loop Plugged predict 2 embed_markdown_instruction: "# Predict\\r\n\\r\nThis\nprogram has one small difference that will make it run a little differently.\nAgain though, remember:\\r\n\\r\n* All your code outside the draw loop is run\nfirst, one time\\r\n* All your code inside the draw loop is run over and over\nforever\\r\n\\r\nWhat will this program do? Write your prediction below."
      CSD U3 Draw Loop Plugged predict 2 embed_2018_markdown_instruction: "# Predict\\r\n\\r\nThis\nprogram has one small difference that will make it run a little differently.\nAgain though, remember:\\r\n\\r\n* All your code outside the draw loop is run\nfirst, one time\\r\n* All your code inside the draw loop is run over and over\nforever\\r\n\\r\nWhat will this program do? Write your prediction below."
      CSD U3 Draw Loop Plugged update your scene_markdown_instruction: "# Extend\nYour Scene\\r\n\\r\nThis is the sprite scene you made in the last lesson. You'll\nnow be updating it a little bit to use the draw loop and sprite properties.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29\nPM.png\" style=\"float:right;height:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Add\na draw loop to your program (you should only have one).\\r\n* Use the lasso\nselector (click, hold and drag) to select all your code and place it inside\nyour draw loop. Ctrl-Z will let you undo any mistakes you make.\\r\n* Add code\nto your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation`\nproperties so that they move. You'll need to update them with `randomNumber()`.\\r\n"
      CSD U3 Draw Loop Plugged update your scene_2018_markdown_instruction: "# Extend\nYour Scene\\r\n\\r\nThis is the sprite scene you made in the last lesson. You'll\nnow be updating it a little bit to use the draw loop and sprite properties.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29\nPM.png\" style=\"float:right;height:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Add\na draw loop to your program (you should only have one).\\r\n* Use the lasso\nselector (click, hold and drag) to select all your code and place it inside\nyour draw loop. Ctrl-Z will let you undo any mistakes you make.\\r\n* Add code\nto your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation`\nproperties so that they move. You'll need to update them with `randomNumber()`.\\r\n"
      CSD U3 Draw Loop Plugged wiggle sprite rotation_markdown_instruction: "<img\nsrc=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nThis level\ncombines some of the skills you've already seen. It's drawing ellipses in\nthe background and also updating sprite properties. This time it's changing\nthe sprite's `sprite.rotation` property.\\r\n\\r\n# Do This\\r\n\\r\nThis animation\nalready is updating one sprite's rotation property to make it look like it's\nshaking\\r\n\\r\n* Run the program to see how it works.\\r\n* Add code to this\nprogram to make the other alien shake just like the first.\\r\n* Move on when\nyour program looks like the picture to the right."
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018_markdown_instruction: "<img\nsrc=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nThis level\ncombines some of the skills you've already seen. It's drawing ellipses in\nthe background and also updating sprite properties. This time it's changing\nthe sprite's `sprite.rotation` property.\\r\n\\r\n# Do This\\r\n\\r\nThis animation\nalready is updating one sprite's rotation property to make it look like it's\nshaking\\r\n\\r\n* Run the program to see how it works.\\r\n* Add code to this\nprogram to make the other alien shake just like the first.\\r\n* Move on when\nyour program looks like the picture to the right."
      CSD U3 Draw Loop Plugged wiggle sprite x_markdown_instruction: "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nSprites\nhave properties that let the computer know where and how to draw them. Two\ncommon properties to use are `sprite.x` and `sprite.y` which control the location\nof the sprite. Assigning these properties a new value will move your sprite\nto a new location on the screen.\\r\n\\r\n# Do This\\r\n\\r\nThis animation already\nis updating one sprite's x property to make it look like it's shaking\\r\n\\r\n*\nRun the program to see how it works.\\r\n* Edit the code in this program to\nmake the second sprite shake like the first one.\\r\n* Move on when your program\nlooks like the picture to the right.\\r\n\\r\n"
      CSD U3 Draw Loop Plugged wiggle sprite x_2018_markdown_instruction: "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nSprites\nhave properties that let the computer know where and how to draw them. Two\ncommon properties to use are `sprite.x` and `sprite.y` which control the location\nof the sprite. Assigning these properties a new value will move your sprite\nto a new location on the screen.\\r\n\\r\n# Do This\\r\n\\r\nThis animation already\nis updating one sprite's x property to make it look like it's shaking\\r\n\\r\n*\nRun the program to see how it works.\\r\n* Edit the code in this program to\nmake the second sprite shake like the first one.\\r\n* Move on when your program\nlooks like the picture to the right.\\r\n\\r\n"
      CSD U3 Draw Loop Plugged wiggle sprite y_markdown_instruction: "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nThis level\nis very similar to the last, but this time, you'll add in the draw loop yourself.\\r\n\\r\n#\nDo This\\r\n* Add the draw loop block to the bottom of this program.\\r\n* Move\nany blocks that need to be inside the draw loop.\\r\n* Move on when your program\nlooks like the picture to the right.\\r\n"
      CSD U3 Draw Loop Plugged wiggle sprite y_2018_markdown_instruction: "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\",\nstyle=\"float:right;height:150px\">\\r\n# Updating Properties\\r\n\\r\nThis level\nis very similar to the last, but this time, you'll add in the draw loop yourself.\\r\n\\r\n#\nDo This\\r\n* Add the draw loop block to the bottom of this program.\\r\n* Move\nany blocks that need to be inside the draw loop.\\r\n* Move on when your program\nlooks like the picture to the right.\\r\n"
      CSD U3 Drawing Squares to Corners_markdown_instruction: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Place Squares in Corners\\r\n\\r\nA\nbig part of using Game Lab is understanding position. Remember you can always\nturn on the grid or hover with the mouse to help find the x and y position\nyou want.\\r\n\\r\n# Do This\\r\n\\r\n* Place two rectangles exactly in the corners\nof the screen, just like the picture."
      CSD U3 Drawing Squares to Corners_2018_markdown_instruction: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Place Squares in Corners\\r\n\\r\nA\nbig part of using Game Lab is understanding position. Remember you can always\nturn on the grid or hover with the mouse to help find the x and y position\nyou want.\\r\n\\r\n# Do This\\r\n\\r\n* Place two rectangles exactly in the corners\nof the screen, just like the picture."
      CSD U3 Else_markdown_instruction: "# What If My Condition Isn't True?\\r\n\\r\n<img\nsrc=\"https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png\"\nwidth=\"125px\" style=\"float:right\">\\r\n\\r\nSometimes we want to tell our\nprogram what to do if a condition is `true`, but also what to do if it's\n`false`. Pressing the plus button at the bottom of your conditional block\nwill give you another section called `else`. This `else` section is a fallback\n- it will get called whenever the condition in the `if` before it is `false`.\\r\n\\r\n#\nDo This\\r\nThe gears are back again. The last time you worked with them, you\nmade them spin when the space bar is pressed. Instead of the gears only spinning\nwhen the space key is pressed, we want them to spin one way when the space\nkey is pressed and spin the other way when it's not pressed.\\r\n<img src=\"https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif\"\nstyle=\"float:right\">\\r\n\\r\n* Click the _plus_ button at the bottom of the\nif block to add an else.\\r\n* Add commands to make the gears spin opposite\nof the direction that they do when the space bar is pressed."
      CSD U3 Else_2018_markdown_instruction: "# What If My Condition Isn't True?\\r\n\\r\n<img\nsrc=\"https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png\"\nwidth=\"125px\" style=\"float:right\">\\r\n\\r\nSometimes we want to tell our\nprogram what to do if a condition is `true`, but also what to do if it's\n`false`. Pressing the plus button at the bottom of your conditional block\nwill give you another section called `else`. This `else` section is a fallback\n- it will get called whenever the condition in the `if` before it is `false`.\\r\n\\r\n#\nDo This\\r\nThe gears are back again. The last time you worked with them, you\nmade them spin when the space bar is pressed. Instead of the gears only spinning\nwhen the space key is pressed, we want them to spin one way when the space\nkey is pressed and spin the other way when it's not pressed.\\r\n<img src=\"https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif\"\nstyle=\"float:right\">\\r\n\\r\n* Click the _plus_ button at the bottom of the\nif block to add an else.\\r\n* Add commands to make the gears spin opposite\nof the direction that they do when the space bar is pressed."
      CSD U3 Entertainment Sample 1 - unembed_markdown_instruction: "# Alien Jumper\\r\n\\r\nPress\n\"Run\" to play the game on the left.  You can make the alien jump with the\nspace bar, and move it to the left and right with the arrow keys.  You score\nby collecting stars, and if you score high enough, the background will change."
      CSD U3 Entertainment Sample 1_markdown_instruction: "# Alien Jumper\\r\n\\r\nPress\n\"Run\" to play the game on the left.  You can make the alien jump with the\nspace bar, and move it to the left and right with the arrow keys.  You score\nby collecting stars, and if you score high enough, the background will change."
      CSD U3 Entertainment Sample 1_2018_markdown_instruction: "# Alien Jumper\\r\n\\r\nPress\n\"Run\" to play the game on the left.  You can make the alien jump with the\nspace bar, and move it to the left and right with the arrow keys.  You score\nby collecting stars, and if you score high enough, the background will change."
      CSD U3 Entertainment Sample 2_markdown_instruction: "# Hungry Bunny\\r\n\\r\nThe\nbunny is hungry, and it's looking for mushrooms and carrots for dinner.\\r\n\\r\nTo\nwin, you'll need to find a dinner bowl, then collect at least ten carrots\nand five mushrooms.\\r\n\\r\nMake sure to avoid the bugs.  Ladybugs and snails\nwill eat your food, and bees will sting you, making you drop everything!\\r\n\\r\nUse\nthe space bar to jump.  You can squash ladybugs and snails by jumping on them.\\r\n\\r\nClick\n\"Run\" to start the program."
      CSD U3 Entertainment Sample 2_2018_markdown_instruction: "# Hungry Bunny\\r\n\\r\nThe\nbunny is hungry, and it's looking for mushrooms and carrots for dinner.\\r\n\\r\nTo\nwin, you'll need to find a dinner bowl, then collect at least ten carrots\nand five mushrooms.\\r\n\\r\nMake sure to avoid the bugs.  Ladybugs and snails\nwill eat your food, and bees will sting you, making you drop everything!\\r\n\\r\nUse\nthe space bar to jump.  You can squash ladybugs and snails by jumping on them.\\r\n\\r\nClick\n\"Run\" to start the program."
      CSD U3 Entertainment Sample 3_markdown_instruction: "# Animated Comics\\r\n\\r\nCombining\nimages, text, and some subtle animation can make for really interesting comics\nor graphic stories.  Click \"Run\" to see an example.\\r\n"
      CSD U3 Entertainment Sample 3_2018_markdown_instruction: "# Animated Comics\\r\n\\r\nCombining\nimages, text, and some subtle animation can make for really interesting comics\nor graphic stories.  Click \"Run\" to see an example.\\r\n"
      CSD U3 Entertainment Sample 4_markdown_instruction: "# Stamp Pad\\r\n\\r\nClick\n\"Run\" to start the program, then use the stamp pad to draw pictures with\nsimple colors and animal stamps.\\r\n"
      CSD U3 Entertainment Sample 4_2018_markdown_instruction: "# Stamp Pad\\r\n\\r\nClick\n\"Run\" to start the program, then use the stamp pad to draw pictures with\nsimple colors and animal stamps.\\r\n"
      CSD U3 Expressions calculator_markdown_instruction: "# Adding and Multiplying\\r\n\\r\nYour\ncomputer can calculate the results of many math problems. Try out this example,\nwhere we add and multiply a few numbers. Then extend it yourself to the numbers\n1 - 10.\\r\n\\r\n# Do This\\r\n\\r\n* Run the program code once to see how it\nworks\\r\n* Following the examples, write a program that **multiplys the numbers\n1 - 10** and **adds the numbers 1 - 10**\\r\n* **When you're done confirm\nyour results with a neighbor**"
      CSD U3 Frame Rate_markdown_instruction: "# Too Fast, Slow Down!\\r\n<img src=\"https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif\"\nstyle=\"float:right; width:200px\"/>\\r\n\\r\nThe animation is working, but\nit's a bit too fast. We're flipping the pages in our virtual flipbook too\noften, so we'll need to slow that down.\\r\n\\r\nThe frequency that our draw\nloop is run is called the **frame rate** - the number of times per second\nthe screen is refreshed.\\r\n\\r\nThe default frame rate for Game Lab is 30\nframes per second (or FPS), which is great for a video game, but not so good\nfor our animation. We can slow down the frame rate using the `World.frameRate`\nblock.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `World.frameRate` block at the very\nbeginning of your program, setting it to a number (frames per second) that\nslows the animation down a bit. \\r\n* Test it out with different numbers to\nsee which frame rate you like (the default is 30, and it can't go any higher\nthan 60)."
      CSD U3 Functions Add Change Background tmp_markdown_instruction: "# Change\nthe Background with the Score\\r\n\\r\nOnce you've caught 10 coins it's time\nto celebrate. You should change the background to be something fun.\\r\n\\r\n<img\nsrc=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54\nPM.png\" style=\"float:right; height:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Use\nan **if-statement** and two separate functions to draw your backgrounds\\r\n*\nThen go write your functions outside your draw loop. You get to decide what\na \"simple\" or \"crazy\" background are. Have fun with it!"
      CSD U3 Functions Add Change Background_markdown_instruction: "# Change the\nBackground with the Score\\r\n\\r\nOnce you've caught 10 coins it's time to\ncelebrate. You should change the background to be something fun.\\r\n\\r\n<img\nsrc=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54\nPM.png\" style=\"float:right; height:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Use\nan **if-statement** and two separate functions to draw your backgrounds.\\r\n*\nThen go write your functions outside your draw loop. You get to decide what\na \"simple\" or \"crazy\" background are. Have fun with it!"
      CSD U3 Functions Add Change Background_2018_markdown_instruction: "# Change\nthe Background with the Score\\r\n\\r\nOnce you've caught 10 coins it's time\nto celebrate. You should change the background to be something fun.\\r\n\\r\n<img\nsrc=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54\nPM.png\" style=\"float:right; height:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Use\nan **if-statement** and two separate functions to draw your backgrounds.\\r\n*\nThen go write your functions outside your draw loop. You get to decide what\na \"simple\" or \"crazy\" background are. Have fun with it!"
      CSD U3 Functions Add IsTouching_markdown_instruction: "# Catch the Coin, Increase\nthe Score\\r\n\\r\nLet's make that score change now too to complete the game.\nYou'll need to be able to tell when the bunny is touching the coin and the\nreset it.\\r\n\\r\n# Do This\\r\n\\r\n* Use an **if-statement** and the **isTouching**\nblock to increase the score when the bunny catches the coin.\\r\n* Make sure\nyou're **calling your function** to reset the coin once it's been caught.\\r\n*\nPlay the game and **randomize the velocity of the coin** to a range that you\nthink is fun."
      CSD U3 Functions Add IsTouching_2018_markdown_instruction: "# Catch the Coin,\nIncrease the Score\\r\n\\r\nLet's make that score change now too to complete\nthe game. You'll need to be able to tell when the bunny is touching the coin\nand the reset it.\\r\n\\r\n# Do This\\r\n\\r\n* Use an **if-statement** and the\n**isTouching** block to increase the score when the bunny catches the coin.\\r\n*\nMake sure you're **calling your function** to reset the coin once it's been\ncaught.\\r\n* Play the game and **randomize the velocity of the coin** to a\nrange that you think is fun."
      CSD U3 Functions Call Draw Loop_markdown_instruction: "# Calling Functions\nin the Draw Loop\\r\n\\r\nYou can call a function inside the draw loop, just\nas you would anywhere else in your code.\\r\n\\r\n# Do This\\r\n\\r\nA function\nthat will draw a background has been created for you. A sprite has been created\nto move across the background.\\r\n\\r\n* **Call the function inside the draw\nloop** so that the sprite appears on top of the background.\\r\n* **Note:**\nDon't create functions inside the draw loop. Make them at the bottom of your\ncode."
      CSD U3 Functions Call Draw Loop_2018_markdown_instruction: "# Calling Functions\nin the Draw Loop\\r\n\\r\nYou can call a function inside the draw loop, just\nas you would anywhere else in your code.\\r\n\\r\n# Do This\\r\n\\r\nA function\nthat will draw a background has been created for you. A sprite has been created\nto move across the background.\\r\n\\r\n* **Call the function inside the draw\nloop** so that the sprite appears on top of the background.\\r\n* **Note:**\nDon't create functions inside the draw loop. Make them at the bottom of your\ncode."
      CSD U3 Functions Call Function_markdown_instruction: "# Calling Functions\\r\n\\r\nFunctions\nlet you build your own blocks and decide what code goes inside of them. This\nis the command that lets you create a new function.\\r\n\\r\n![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09\nPM.png)\\r\n\\r\nYou use or \"call\" your function like any other block by using\nthe name you gave it.\\r\n\\r\n![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00\nPM.png)\\r\n\\r\nThe blocks to create and call functions can be found in the\n\"Functions\" tab of the palette.\\r\n\\r\n![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nThis program has already created 2 functions.\nOnly one of them is being called.\\r\n\\r\n* **Call the second function** to\nreveal the full image. Use the function that is being called as a guide.\\r\n*\n**Tip:** Just as with all other blocks, spelling and capitalization are important\nhere."
      CSD U3 Functions Call Function_2018_markdown_instruction: "# Calling Functions\\r\n\\r\nFunctions\nlet you build your own blocks and decide what code goes inside of them. This\nis the command that lets you create a new function.\\r\n\\r\n![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09\nPM.png)\\r\n\\r\nYou use or \"call\" your function like any other block by using\nthe name you gave it.\\r\n\\r\n![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00\nPM.png)\\r\n\\r\nThe blocks to create and call functions can be found in the\n\"Functions\" tab of the palette.\\r\n\\r\n![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nThis program has already created 2 functions.\nOnly one of them is being called.\\r\n\\r\n* **Call the second function** to\nreveal the full image. Use the function that is being called as a guide.\\r\n*\n**Tip:** Just as with all other blocks, spelling and capitalization are important\nhere."
      CSD U3 Functions Create Function_markdown_instruction: "# Creating Functions\nto Organize Code\\r\n\\r\nIn Game Lab all the action is happening in the draw\nloop, but too much complex code makes it really confusing to read. To keep\nyour draw loop easy to read, use functions for larger chunks of code. You\ncan call them inside the draw loop and define them below. This is a really\ngood example of using **abstraction** to think about problems at a high level\nand worry about details later.\\r\n\\r\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07\nPM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program\nshould draw a daytime scene or a nighttime scene, depending on the location\nof the mouse. The draw loop describes what needs to happen but one of the\nfunctions hasn't been written yet.\\r\n\\r\n* **Write the `drawNight` function**\nwhich has been created but is empty.\\r\n* Hint: Look at the picture to the\nright for how your night image should look. Can you use the `drawDay` function\nto help you at all?"
      CSD U3 Functions Create Function_2018_markdown_instruction: "# Creating Functions\nto Organize Code\\r\n\\r\nIn Game Lab all the action is happening in the draw\nloop, but too much complex code makes it really confusing to read. To keep\nyour draw loop easy to read, use functions for larger chunks of code. You\ncan call them inside the draw loop and define them below. This is a really\ngood example of using **abstraction** to think about problems at a high level\nand worry about details later.\\r\n\\r\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07\nPM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program\nshould draw a daytime scene or a nighttime scene, depending on the location\nof the mouse. The draw loop describes what needs to happen but one of the\nfunctions hasn't been written yet.\\r\n\\r\n* **Write the `drawNight` function**\nwhich has been created but is empty.\\r\n* Hint: Look at the picture to the\nright for how your night image should look. Can you use the `drawDay` function\nto help you at all?"
      CSD U3 Functions Improve Side Scroller_markdown_instruction: "# Finish Your\nSide Scroller\\r\n\\r\nTime to use functions to finish off you side-scroller!\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the background of your game depending on the score.\nUse functions to move the code for your background out of your draw loop\\r\n*\nUse functions to make sure you're not repeating code when you reset your\nobstacle\\r\n\\r\n_Challenge: Add another sprite to your game and define how\nit will interact with your main character. It might be another obstacle to\navoid or some kind of goal to collect_"
      CSD U3 Functions Order Functions_markdown_instruction: "# Reordering Code\\r\n\\r\nPlacing\ncode inside functions makes it easy to read and make changes to. Good names\nfor functions indicate what your program is doing to a reader. You can call\nyour functions in a different order to quickly make significant changes to\nhow your program runs.\\r\n\\r\n# Do This\\r\n\\r\nThis program has already created\n4 functions that draw parts of a scene. Unfortunately it's not coming out\nright.\\r\n\\r\n* **Read the 4 functions** to know what they do\\r\n* **Call\nthe functions** in an order that draws the scene in the way that looks best\nto you"
      CSD U3 Functions Order Functions_2018_markdown_instruction: "# Reordering Code\\r\n\\r\nPlacing\ncode inside functions makes it easy to read and make changes to. Good names\nfor functions indicate what your program is doing to a reader. You can call\nyour functions in a different order to quickly make significant changes to\nhow your program runs.\\r\n\\r\n# Do This\\r\n\\r\nThis program has already created\n4 functions that draw parts of a scene. Unfortunately it's not coming out\nright.\\r\n\\r\n* **Read the 4 functions** to know what they do\\r\n* **Call\nthe functions** in an order that draws the scene in the way that looks best\nto you"
      CSD U3 Functions Prediction Order of Create Call_markdown_instruction: "# When\nCan Your Define Functions?\\r\n\\r\nSo far you've only seen functions created\nat the bottom of your code. What do you think happens if we create the function\nbefore we call it?\\r\n\\r\n# Do This\\r\n\\r\n"
      CSD U3 Functions Randomize Sprite_markdown_instruction: "# Making Changes to\nFunctions\\r\n\\r\nA nice benefit of using functions to remove repeated code\nis that you can now easily make changes to multiple places in your code. Just\nchange how you create the functions, and your program will now use the new\ncode everywhere your function is called.\\r\n\\r\n# Do This\\r\n\\r\nMake changes\nto the `setFlyer` function so that the flyer starts at a random Y location\nbetween 0 and 400, and moves at a random velocity every time he is reset."
      CSD U3 Functions Randomize Sprite_2018_markdown_instruction: "# Making Changes\nto Functions\\r\n\\r\nA nice benefit of using functions to remove repeated code\nis that you can now easily make changes to multiple places in your code. Just\nchange how you create the functions, and your program will now use the new\ncode everywhere your function is called.\\r\n\\r\n# Do This\\r\n\\r\nMake changes\nto the `setFlyer` function so that the flyer starts at a random Y location\nbetween 0 and 400, and moves at a random velocity every time he is reset."
      CSD U3 Functions Reset Sprite_markdown_instruction: "# Calling Functions Multiple\nTimes\\r\n\\r\nYou'll often want to use the same code at many places in your\nprogram. Once you've created a function you can call it as many times as\nyou like.\\r\n\\r\n# Do This\\r\n\\r\nThis code creates a sprite that moves across\nthe screen once. How can you make it go back across the screen?\\r\n\\r\n* **Note:**\nThe function is already called once at the beginning of your program\\r\n*\nRead the condition of the **if-statement** inside the draw loop. Why do you\nthink it's there?\\r\n* Use this if-statement and the function written for\nyou to make the sprite move across the screen multiple times."
      CSD U3 Functions Reset Sprite_2018_markdown_instruction: "# Calling Functions\nMultiple Times\\r\n\\r\nYou'll often want to use the same code at many places\nin your program. Once you've created a function you can call it as many times\nas you like.\\r\n\\r\n# Do This\\r\n\\r\nThis code creates a sprite that moves\nacross the screen once. How can you make it go back across the screen?\\r\n\\r\n*\n**Note:** The function is already called once at the beginning of your program\\r\n*\nRead the condition of the **if-statement** inside the draw loop. Why do you\nthink it's there?\\r\n* Use this if-statement and the function written for\nyou to make the sprite move across the screen multiple times."
      CSD U3 Functions Template Flyman_markdown_instruction: "# Calling Functions\nMultiple Times\\r\n\\r\nOften times you'll want to use the same code at many\nplaces in your program. Once you've created a function you can call it as\nmany times as you like.\\r\n\\r\n# Do This\\r\n\\r\nThis code creates a sprite\nthat moves across the screen once. How can you make it go back across the\nscreen.\\r\n\\r\n* Read the condition of the **if-statement** inside the draw\nloop. Why do you think it's there?\\r\n* Use this if-statement and the function\nwritten for you to make the sprite move across the screen multiple times."
      CSD U3 Functions Template Flyman_2018_markdown_instruction: "# Calling Functions\nMultiple Times\\r\n\\r\nOften times you'll want to use the same code at many\nplaces in your program. Once you've created a function you can call it as\nmany times as you like.\\r\n\\r\n# Do This\\r\n\\r\nThis code creates a sprite\nthat moves across the screen once. How can you make it go back across the\nscreen.\\r\n\\r\n* Read the condition of the **if-statement** inside the draw\nloop. Why do you think it's there?\\r\n* Use this if-statement and the function\nwritten for you to make the sprite move across the screen multiple times."
      CSD U3 Functions Write Reset_markdown_instruction: "# Write Your Own Function\\r\n\\r\nTime\nto practice writing functions of your own. This is a very simple game in which\ncoins fall from the sky and the bunny tries to catch them. All you need to\ndo is write the function that sets up the coin.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Read and run the code** that already exists to make sure you know how it\nworks.\\r\n* **Write the code for the `setCoin`** function to make the coin\nfall from the sky.\\r\n* You can go look at some of the previous levels if\nyou need help."
      CSD U3 Functions Write Reset_2018_markdown_instruction: "# Write Your Own Function\\r\n\\r\nTime\nto practice writing functions of your own. This is a very simple game in which\ncoins fall from the sky and the bunny tries to catch them. All you need to\ndo is write the function that sets up the coin.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Read and run the code** that already exists to make sure you know how it\nworks.\\r\n* **Write the code for the `setCoin`** function to make the coin\nfall from the sky.\\r\n* You can go look at some of the previous levels if\nyou need help."
      CSD U3 Functions Write Your Own_markdown_instruction: "# Write Your Own Function\\r\n\\r\nTry\nwriting your own function to add something to the scene!\\r\n\\r\n# Do This\\r\n\\r\nThis\nis the same program you wrote in the last level.\\r\n\\r\n* **Create and call**\na function that adds something to the scene. No need to get too complex, but\nmake sure you get some practice writing a function\\r\n* **Share your code**\nwith a neighbor. Do they think your function's name clearly describes what\nit does? Make changes if you need to."
      CSD U3 Functions isTouching_markdown_instruction: "# Making Changes to Functions\\r\n\\r\nA\nnice benefit of using functions to remove repeated code is that you can now\neasily make changes to multiple places in your code. Just change how you create\nthe functions, and your program will now use the new code everywhere your\nfunction is called.\\r\n\\r\n# Do This\\r\n\\r\nMake changes to the `setFlyman`\nfunction so that he starts at a random Y location between 0 and 400, and moves\nat a random speed every time he restarts."
      CSD U3 If Else_markdown_instruction: "# When to Provide a Fallback\\r\n\\r\nThe\nelse clause is useful as a fallback to the main condition that you're checking\n- that is, if you _care_ what happens when your primary condition is `false`,\nyou should provide an else clause to take care of it.\\r\n\\r\n<img src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\"\nstyle=\"float:right;\">\\r\n\\r\n# Do This\\r\nClick \"Run\" to see the swarm\nof bees created for you and a flower on the left side of the screen. Make\nthe swarm of bees **appear when the mouse is near the flower** (on the left\nside of the screen) and **disappear when the mouse is away from the flower**\n(on the right side of the screen). Look at the example on the right.\\r\n\\r\n*\nAdd an `if else` statement after you update the position of the bees.\\r\n*\nIn the input of the if use a boolean to check if the x position of the mouse\nis on the side of the screen with the flower.\\r\n* Set the `visible` property\nof each bee inside both the if and else statements appropriately to make the\nbees only show near the flower."
      CSD U3 If Else_2018_markdown_instruction: "# When to Provide a Fallback\\r\n\\r\nThe\nelse clause is useful as a fallback to the main condition that you're checking\n- that is, if you _care_ what happens when your primary condition is `false`,\nyou should provide an else clause to take care of it.\\r\n\\r\n<img src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\"\nstyle=\"float:right;\">\\r\n\\r\n# Do This\\r\nClick \"Run\" to see the swarm\nof bees created for you and a flower on the left side of the screen. Make\nthe swarm of bees **appear when the mouse is near the flower** (on the left\nside of the screen) and **disappear when the mouse is away from the flower**\n(on the right side of the screen). Look at the example on the right.\\r\n\\r\n*\nAdd an `if else` statement after you update the position of the bees.\\r\n*\nIn the input of the if use a boolean to check if the x position of the mouse\nis on the side of the screen with the flower.\\r\n* Set the `visible` property\nof each bee inside both the if and else statements appropriately to make the\nbees only show near the flower."
      CSD U3 Input Fish_markdown_instruction: "# Fish With Arrows\\r\n\\r\nThe fish\nare back. Can you make the fish move left only when the left arrow key is\npressed down?\\r\n\\r\n# Do This\\r\n\\r\n* Add an if statement to check when\nthe left arrow key is pressed down.\\r\n* Move the commands for moving the\nfish inside the if statement."
      CSD U3 Input Fish_2018_markdown_instruction: "# Fish With Arrows\\r\n\\r\nThe\nfish are back. Can you make the fish move left only when the left arrow key\nis pressed down?\\r\n\\r\n# Do This\\r\n\\r\n* Add an if statement to check when\nthe left arrow key is pressed down.\\r\n* Move the commands for moving the\nfish inside the if statement."
      CSD U3 Input Gears_markdown_instruction: "# Gears with Conditionals\\r\n\\r\nLet's\nmake the gears spin only when the space key is being held down.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Add an `if` statement.\\r\n* Use `keyDown` as input to the if\nstatement to check when the space key is pressed.\\r\n* Move the code that\nmakes the gears rotate inside the `if`."
      CSD U3 Input Gears_2018_markdown_instruction: "# Gears with Conditionals\\r\n\\r\nLet's\nmake the gears spin only when the space key is being held down.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Add an `if` statement.\\r\n* Use `keyDown` as input to the if\nstatement to check when the space key is pressed.\\r\n* Move the code that\nmakes the gears rotate inside the `if`."
      CSD U3 Interactive Card Background_markdown_instruction: "# Laying Out Your\nBackground\\r\nBefore beginning this project, you should have already completed\nthe Interactive Card Planning activity, and you'll want to have that paper\nwith you as you develop your program. Preparation is one of the **most important**\nelements of successfully creating a program!\\r\n\\r\n# Do This\\r\nRefer to\nyour planning activity sheet to help you lay out the shapes that will become\nthe background to your card.\\r\n\\r\n* First, figure out what the lowest layer\nin your image is (this should use the `background()` block) and add it to\nthe very top of the draw loop.\\r\n* Next, layer each additional drawing block\nin the order you want them to appear in the stack.\\r\n* Finally, add a comment\nto the top of this section of code to describe what it does, and if you have\nany particularly complicated chunks of code within (such as code to draw a\ntree or a house), add a descriptive comment to that as well.\\r\n\\r\n**Challenge:**\nCan you use variables or `randomNumber()` to add some subtle animation to\nyour background layer?"
      CSD U3 Interactive Card Background_2018_markdown_instruction: "# Laying Out\nYour Background\\r\nBefore beginning this project, you should have already\ncompleted the Interactive Card Planning activity, and you'll want to have\nthat paper with you as you develop your program. Preparation is one of the\n**most important** elements of successfully creating a program!\\r\n\\r\n# Do\nThis\\r\nRefer to your planning activity sheet to help you lay out the shapes\nthat will become the background to your card.\\r\n\\r\n* First, figure out what\nthe lowest layer in your image is (this should use the `background()` block)\nand add it to the very top of the draw loop.\\r\n* Next, layer each additional\ndrawing block in the order you want them to appear in the stack.\\r\n* Finally,\nadd a comment to the top of this section of code to describe what it does,\nand if you have any particularly complicated chunks of code within (such as\ncode to draw a tree or a house), add a descriptive comment to that as well.\\r\n\\r\n**Challenge:**\nCan you use variables or `randomNumber()` to add some subtle animation to\nyour background layer?"
      CSD U3 Interactive Card Exemplar_markdown_instruction: "# Example Project\\r\n\\r\nRun\nthe program a few times and answer the following questions:\\r\n\\r\n1) Which\nelements appear to use drawing commands?\\r\n\\r\n2) Which elements appear to\nbe Sprites?\\r\n\\r\n3) For each Sprite, which properties are being updated?\\r\n\\r\n4)\nWhere do you see conditionals being used?\\r\n\\r\n5) Are there elements that\nyou don’t understand?"
      CSD U3 Interactive Card Exemplar_2018_markdown_instruction: "# Example Project\\r\n\\r\nRun\nthe program a few times and answer the following questions:\\r\n\\r\n1) Which\nelements appear to use drawing commands?\\r\n\\r\n2) Which elements appear to\nbe Sprites?\\r\n\\r\n3) For each Sprite, which properties are being updated?\\r\n\\r\n4)\nWhere do you see conditionals being used?\\r\n\\r\n5) Are there elements that\nyou don’t understand?"
      CSD U3 Interactive Card Final_markdown_instruction: "# Finishing Touches\\r\nNow's\nyour chance to put some finishing touches on your card. We've included some\nnew blocks that you haven't seen before, so take some time to look around\nand try out some new blocks.\\r\n\\r\n# Do This\\r\nConsider adding any of the\nfollowing to finish up your card:\\r\n\\r\n* Text\\r\n* Additional images for\nyour sprites\\r\n* Subtle animation in the background\\r\n* Sound effects  (Can\nyou figure out now to do this?)\\r\n* More ways for a user to interact with\nyour card"
      CSD U3 Interactive Card Final_2018_markdown_instruction: "# Finishing Touches\\r\nNow's\nyour chance to put some finishing touches on your card. We've included some\nnew blocks that you haven't seen before, so take some time to look around\nand try out some new blocks.\\r\n\\r\n# Do This\\r\nConsider adding any of the\nfollowing to finish up your card:\\r\n\\r\n* Text\\r\n* Additional images for\nyour sprites\\r\n* Subtle animation in the background\\r\n* Sound effects  (Can\nyou figure out now to do this?)\\r\n* More ways for a user to interact with\nyour card"
      CSD U3 Interactive Card Other Conditionals_markdown_instruction: "# Other Conditionals\\r\nThe\n_surprise_ in your card comes from conditionals that don't directly respond\nto user input, but to some other element of your card. This could be triggered\nby a variable that gets updated as the user interacts with your card, or a\nSprite moving into a certain part of the screen.\\r\n\\r\n# Do This\\r\nFor each\nof the remaining items on your interactions table:\\r\n\\r\n* Add an `if` block\n(or `if-else` block if you need a fallback action) inside the draw loop.\\r\n*\nAdd the appropriate Boolean comparison block to the condition (eg. `<`, `>`,\nor `==`).\\r\n* Add the necessary actions inside the `if` block.\\r\n\\r\n**Challenge:**\nCan you create more sophisticated conditionals by nesting them or using compound\nbooleans?"
      CSD U3 Interactive Card Other Conditionals_2018_markdown_instruction: "# Other\nConditionals\\r\nThe _surprise_ in your card comes from conditionals that don't\ndirectly respond to user input, but to some other element of your card. This\ncould be triggered by a variable that gets updated as the user interacts with\nyour card, or a Sprite moving into a certain part of the screen.\\r\n\\r\n#\nDo This\\r\nFor each of the remaining items on your interactions table:\\r\n\\r\n*\nAdd an `if` block (or `if-else` block if you need a fallback action) inside\nthe draw loop.\\r\n* Add the appropriate Boolean comparison block to the condition\n(eg. `<`, `>`, or `==`).\\r\n* Add the necessary actions inside the `if` block.\\r\n\\r\n**Challenge:**\nCan you create more sophisticated conditionals by nesting them or using compound\nbooleans?"
      CSD U3 Interactive Card Sprites_markdown_instruction: "# Adding Sprites\\r\nNow\nthat you have the more static elements of your card layed out, it's time\nto add the Sprites. Your Sprites should provide the primary animations and\ninteractions for your card - so feel free to get creative here and have fun.\\r\n\\r\n#\nDo This\\r\nCheck out the Sprites table on the back of your planning sheet.\nFor each Sprite in your table:\\r\n\\r\n* Initialize the Sprite at the top of\nyour program with `createSprite()`.\\r\n* Find or create the image(s) for the\nSprite and set it with `setAnimation()`.\\r\n* Inside the `draw()` loop update\nany Sprite properties that we will be constantly animating (we'll deal with\nconditionals in a minute)."
      CSD U3 Interactive Card Sprites_2018_markdown_instruction: "# Adding Sprites\\r\nNow\nthat you have the more static elements of your card layed out, it's time\nto add the Sprites. Your Sprites should provide the primary animations and\ninteractions for your card - so feel free to get creative here and have fun.\\r\n\\r\n#\nDo This\\r\nCheck out the Sprites table on the back of your planning sheet.\nFor each Sprite in your table:\\r\n\\r\n* Initialize the Sprite at the top of\nyour program with `createSprite()`.\\r\n* Find or create the image(s) for the\nSprite and set it with `setAnimation()`.\\r\n* Inside the `draw()` loop update\nany Sprite properties that we will be constantly animating (we'll deal with\nconditionals in a minute)."
      CSD U3 Interactive Card User Input_markdown_instruction: "# User Input\\r\nYou've\ngot a background, you've got Sprites, now it's time to give your user something\nto do!\\r\n\\r\n# Do This\\r\nOn the interactions table from your planning sheet,\nfind all of the interactions that rely on user input (key presses and mouse\nmovements). For each of those interactions:\\r\n\\r\n* Add an `if` block (or\n`if-else` block if you need a fallback action) inside the `draw()` loop.\\r\n*\nAdd the appropriate input block for your condition (such as `keyDown()` or\n`mouseDown()`).\\r\n* Add the necessary actions inside the `if` block.\\r\n\\r\n**Challenge:**\nCan you create more sophisticated conditionals by nesting them or using compound\nbooleans?"
      CSD U3 Interactive Card User Input_2018_markdown_instruction: "# User Input\\r\nYou've\ngot a background, you've got Sprites, now it's time to give your user something\nto do!\\r\n\\r\n# Do This\\r\nOn the interactions table from your planning sheet,\nfind all of the interactions that rely on user input (key presses and mouse\nmovements). For each of those interactions:\\r\n\\r\n* Add an `if` block (or\n`if-else` block if you need a fallback action) inside the `draw()` loop.\\r\n*\nAdd the appropriate input block for your condition (such as `keyDown()` or\n`mouseDown()`).\\r\n* Add the necessary actions inside the `if` block.\\r\n\\r\n**Challenge:**\nCan you create more sophisticated conditionals by nesting them or using compound\nbooleans?"
      CSD U3 Keyboard Input Challenge-2018_markdown_instruction: "# Challenge\\r\n_Check\nwith your teacher before trying this challenge._\\r\n\\r\nHere's the bug program\nyou've been working on for the past few levels. Choose one or more of following\nchallenges, or add new features of your own!\\r\n\\r\n* Use the \"space\" key\nto control another property of your bug sprite, such as rotation or scale.\\r\n*\nAdd some randomization to your movement.\\r\n* Add a second sprite and control\nit with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common\nchoices).\\r\n* Add some shapes to your background to make the scene more interesting."
      CSD U3 Keyboard Input Challenge_markdown_instruction: "# Challenge\\r\n_Check\nwith your teacher before trying this challenge._\\r\n\\r\nHere's the bug program\nyou've been working on for the past few levels. Choose one or more of following\nchallenges, or add new features of your own!\\r\n\\r\n* Use the \"space\" key\nto control another property of your bug sprite, such as rotation or scale.\\r\n*\nAdd some randomization to your movement.\\r\n* Add a second sprite and control\nit with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common\nchoices).\\r\n* Add some shapes to your background to make the scene more interesting."
      CSD U3 Keyboard Input Challenge_2018_markdown_instruction: "# Challenge\\r\n_Check\nwith your teacher before trying this challenge._\\r\n\\r\nHere's the bug program\nyou've been working on for the past few levels. Choose one or more of following\nchallenges, or add new features of your own!\\r\n\\r\n* Use the \"space\" key\nto control another property of your bug sprite, such as rotation or scale.\\r\n*\nAdd some randomization to your movement.\\r\n* Add a second sprite and control\nit with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common\nchoices).\\r\n* Add some shapes to your background to make the scene more interesting."
      CSD U3 Keypress Boolean Predict_markdown_instruction: "# Make a Prediction:\nkeyDown()\\r\nThe `keyDown()` block is the first of a new set of blocks that\nwill let us get input from the user. This is the first step on our road to\nactually making games! See if you can figure out how the `keyDown()` block\nworks.\\r\n\\r\nWhat do you think will happen when you run the program and press\nthe \"up\" arrow? Write your prediction below and then run the program to\nsee if your prediction was accurate."
      CSD U3 Keypress Boolean embed-2018_markdown_instruction: "# Prediction - keyDown()\\r\n\\r\nThe\n`keyDown()` block is the first of a new set of blocks that will let us get\ninput from the user. This is the first step on our road to actually making\ngames! See if you can predict how the `keyDown()` block works. You will **not\nwrite any code**.\\r\n\\r\n# Do This\\r\n* Read the program carefully.\\r\n* **Make\na prediction about how the code will run** and write it in the box below.\nBe specific!\\r\n* Run the program.\\r\n* While the program is running, press\nthe space bar on your keyboard.\\r\n* Were you correct? Were you surprised?\nDiscuss with a classmate."
      CSD U3 Keypress Boolean embed_markdown_instruction: "# Prediction - keyDown()\\r\n\\r\nThe\n`keyDown()` block is the first of a new set of blocks that will let us get\ninput from the user. This is the first step on our road to actually making\ngames! See if you can predict how the `keyDown()` block works. You will **not\nwrite any code**.\\r\n\\r\n# Do This\\r\n* Read the program carefully.\\r\n* **Make\na prediction about how the code will run** and write it in the box below.\nBe specific!\\r\n* Run the program.\\r\n* While the program is running, press\nthe up arrow on your keyboard.\\r\n* Were you correct? Were you surprised?\nDiscuss with a classmate."
      CSD U3 Keypress Boolean embed_2018_markdown_instruction: "# Prediction - keyDown()\\r\n\\r\nThe\n`keyDown()` block is the first of a new set of blocks that will let us get\ninput from the user. This is the first step on our road to actually making\ngames! See if you can predict how the `keyDown()` block works. You will **not\nwrite any code**.\\r\n\\r\n# Do This\\r\n* Read the program carefully.\\r\n* **Make\na prediction about how the code will run** and write it in the box below.\nBe specific!\\r\n* Run the program.\\r\n* While the program is running, press\nthe space bar on your keyboard.\\r\n* Were you correct? Were you surprised?\nDiscuss with a classmate."
      CSD U3 Keypress Boolean_markdown_instruction: "# Prediction - keyDown()\\r\n\\r\nThe\n`keyDown()` block is the first of a new set of blocks that will let us get\ninput from the user. This is the first step on our road to actually making\ngames! See if you can predict how the `keyDown()` block works. You will **not\nwrite any code**.\\r\n\\r\n# Do This\\r\n* Read the program carefully.\\r\n* **Make\na prediction about how the code will run** and write it in the box below.\nBe specific!\\r\n* Run the program.\\r\n* While the program is running, press\nthe up arrow on your keyboard.\\r\n* Were you correct? Were you surprised?\nDiscuss with a classmate."
      CSD U3 Keypress Watchers Predict_markdown_instruction: "# Make a Prediction:\nUser Input\\r\n\\r\nSo far you've used `keyDown` as a way to let users control\nyour programs, but that's just one of many ways to take input. In fact, just\none of many ways _to detect keypresses_! Depending on how you want to react\nto a keypress, there are a few other blocks you might want to use.\\r\n\\r\nRead\nthe program and predict below what will happen when you press each of the\nup, down, left, and right arrows.\\r\n\\r\nAfter making your prediction, run\nthe code and write down or share with your neighbor your observations.\\r\n\\r\n*\nWhat seems to be the difference between `keyDown()`, `keyWentDown()`, and\n`keyWentUp()`?\\r\n* What do you think the exclamation mark (`!`) on line 10\ndoes?\\r\n* How might you use the different keypress blocks in a game?"
      CSD U3 Keypress Watchers Predict_2018_markdown_instruction: "# Make a Prediction:\nUser Input\\r\n\\r\nSo far you've used `keyDown` as a way to let users control\nyour programs, but that's just one of many ways to take input. In fact, just\none of many ways _to detect keypresses_! Depending on how you want to react\nto a keypress, there are a few other blocks you might want to use.\\r\n\\r\nRead\nthe program and predict below what will happen when you press each of the\nup, down, left, and right arrows.\\r\n\\r\nAfter making your prediction, run\nthe code and write down or share with your neighbor your observations.\\r\n\\r\n*\nWhat seems to be the difference between `keyDown()`, `keyWentDown()`, and\n`keyWentUp()`?\\r\n* What do you think the exclamation mark (`!`) on line 10\ndoes?\\r\n* How might you use the different keypress blocks in a game?"
      CSD U3 Keypress Watchers_2018_markdown_instruction: "# More Ways to Get User\nInput\\r\n\\r\nSo far you've used `keyDown` as a way to let users control your\nprograms, but that's just one of many ways to take input. In fact, just one\nof many ways _to detect keypresses_! Depending on how you want to react to\na keypress, there are a few other blocks you might want to use.\\r\n\\r\n# Do\nThis\\r\n\\r\nYou will **not write any code** in this program.\\r\n\\r\n* Read\nthe program and see if you can guess what will happen.\\r\n* While the program\nis running, press the arrow keys and observe how the screen responds.\\r\n*\nWrite down or share with your neighbor your observations.\\r\n\\t* What seems\nto be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\\r\n    *\nWhat do you think the exclamation mark (`!`) on line 10 does?\\r\n    * How\nmight you use the different keypress blocks in a game?"
      CSD U3 L11 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L11 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L12 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L12 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L13 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L13 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L15 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L15 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L16 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L16 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L17 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L17 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L18 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L18 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L19 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n"
      CSD U3 L19 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n"
      CSD U3 L3 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L3 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L4 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L4 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L5 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L5 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n\\r\n\\r\n\\r\n"
      CSD U3 L6 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L6 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery.\\r\n"
      CSD U3 L7 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L7 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L9 Freeplay_markdown_instruction: "# Free Play\\r\n\\r\nUse what you've\nlearned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 L9 Freeplay_2018_markdown_instruction: "# Free Play\\r\n\\r\nUse what\nyou've learned to create whatever you like.  When you're finished, you can\nclick  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png) to send it to your Projects Gallery."
      CSD U3 Mouse Input Bee 1_markdown_instruction: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\r\n\\r\n# Mouse X and Y\\r\n\\r\nOne of the simplest ways\nto take input is to just make a sprite follow the user's mouse position.\n**You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This\nfollows the pattern you learned with sprite properties. `World` is the name\nof the object. `mouseX` and `mouseY` are the names of the properties.\\r\n\\r\n#\nDo This\\r\n\\r\nYou are going to make a bee sprite follow the mouse around\nthe game area.\\r\n\\r\n* The bee image is already loaded in the animation tab\nfor you.\\r\n* Create a bee sprite that draws in the center of the window.\\r\n*\nInside the draw loop update the position of the sprite to the position of\nthe mouse:\\r\n\\t* Set the x position of the sprite to the value of `World.mouseX`.\\r\n    *\nSet the y position of the sprite to the value of `World.mouseY`.\\r\n* Run\nthe program to test that it works.\\r\n"
      CSD U3 Mouse Input Bee 1_2018_markdown_instruction: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\r\n\\r\n# Mouse X and Y\\r\n\\r\nOne of the simplest ways\nto take input is to just make a sprite follow the user's mouse position.\n**You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This\nfollows the pattern you learned with sprite properties. `World` is the name\nof the object. `mouseX` and `mouseY` are the names of the properties.\\r\n\\r\n#\nDo This\\r\n\\r\nYou are going to make a bee sprite follow the mouse around\nthe game area.\\r\n\\r\n* The bee image is already loaded in the animation tab\nfor you.\\r\n* Create a bee sprite that draws in the center of the window.\\r\n*\nInside the draw loop update the position of the sprite to the position of\nthe mouse:\\r\n\\t* Set the x position of the sprite to the value of `World.mouseX`.\\r\n    *\nSet the y position of the sprite to the value of `World.mouseY`.\\r\n* Run\nthe program to test that it works.\\r\n"
      CSD U3 Mouse Input Bee 2_markdown_instruction: "# Random Around Point\\r\n\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\r\n\\r\nNow that you can make the bee follow the mouse,\nlets make a bee fly around the mouse as shown in the picture on the right.  In\norder to do this, you will need to **add a random amount between -50 and 50\nto the `mouseX` or `mouseY`.**\\r\n\\r\n# Do This\\r\nYou already have a bee\nsprite that follows the mouse.\\r\n\\r\n* Update the x and y location to be\nrandomly close to the mouse.\\r\n\\t* Add a random number between -50 and 50\nto the `World.mouseX` and `World.mouseY`.\\r\n* If necessary, use the `World.frameRate`\nblock to slow down the animation and find the best frame rate.\\r\n\\r\n_Challenge:\n**Add 3 more bees** that follow the mouse in the same way to make a swarm\nof bees._"
      CSD U3 Mouse Input Bee 2_2018_markdown_instruction: "# Random Around Point\\r\n\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\r\n\\r\nNow that you can make the bee follow the mouse,\nlets make a bee fly around the mouse as shown in the picture on the right.  In\norder to do this, you will need to **add a random amount between -50 and 50\nto the `mouseX` or `mouseY`.**\\r\n\\r\n# Do This\\r\nYou already have a bee\nsprite that follows the mouse.\\r\n\\r\n* Update the x and y location to be\nrandomly close to the mouse.\\r\n\\t* Add a random number between -50 and 50\nto the `World.mouseX` and `World.mouseY`.\\r\n* If necessary, use the `World.frameRate`\nblock to slow down the animation and find the best frame rate.\\r\n\\r\n_Challenge:\n**Add 3 more bees** that follow the mouse in the same way to make a swarm\nof bees._"
      CSD U3 Movement Fish_markdown_instruction: "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Fish Animation\\r\n\\r\nUsing\nthe counter pattern, make all three of the fish move in the image to the left.\nThe blue fish should move the fastest, followed by the orange fish, with the\ngreen fish being the slowest."
      CSD U3 Movement Fish_2018_markdown_instruction: "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Fish Animation\\r\n\\r\nUsing\nthe counter pattern, make all three of the fish move in the image to the left.\nThe blue fish should move the fastest, followed by the orange fish, with the\ngreen fish being the slowest."
      CSD U3 Movement Gears_markdown_instruction: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px; float:right; margin-left: 20px;\">\\r\n\\r\n# Rotation\nDirection\\r\n\\r\nWhen you use the counter pattern for the `rotation` property\nwith addition, the object will always rotate clockwise. Sometimes however\nyou will want your sprite to rotate the other direction. To do this you can\njust use subtraction!\\r\n\\r\n# Do This\\r\n\\r\nThere are three gears set up\nfor you. You need to make the gears all look like they are rotating in sync\nwith each other.\\r\n\\r\n* Make the gears rotate so they look like they are\nworking as one system.\\r\n* **Hint: They won't all rotate the same direction**."
      CSD U3 Movement Gears_2018_markdown_instruction: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px; float:right; margin-left: 20px;\">\\r\n\\r\n# Rotation\nDirection\\r\n\\r\nWhen you use the counter pattern for the `rotation` property\nwith addition, the object will always rotate clockwise. Sometimes however\nyou will want your sprite to rotate the other direction. To do this you can\njust use subtraction!\\r\n\\r\n# Do This\\r\n\\r\nThere are three gears set up\nfor you. You need to make the gears all look like they are rotating in sync\nwith each other.\\r\n\\r\n* Make the gears rotate so they look like they are\nworking as one system.\\r\n* **Hint: They won't all rotate the same direction**."
      CSD U3 Movement Your Own 1_markdown_instruction: "# Make an animation of your\nown\\r\n\\r\nUsing the counter pattern and sprite properties, make an animation\nall your own. You might consider building on the static images you've made\nin the past, or come up with a new image to create or story to tell.\\r\n\\r\n#\nDo This\\r\n\\r\nTo start, let's just get a static scene set up.\\r\n\\r\n* Add\nimages in the Animation Tab.\\r\n* Create sprites and assign images.\\r\n* Set\nup the draw loop to draw a background and your sprites."
      CSD U3 Movement Your Own 1_2018_markdown_instruction: "# Make an animation\nof your own\\r\n\\r\nUsing the counter pattern and sprite properties, make an\nanimation all your own. You might consider building on the static images you've\nmade in the past, or come up with a new image to create or story to tell.\\r\n\\r\n#\nDo This\\r\n\\r\nTo start, let's just get a static scene set up.\\r\n\\r\n* Add\nimages in the Animation Tab.\\r\n* Create sprites and assign images.\\r\n* Set\nup the draw loop to draw a background and your sprites."
      CSD U3 Movement Your Own 2_markdown_instruction: "# Add movement to your animation\\r\n\\r\nWith\nyour static scene set up, you can now add some movement. When you are satisfied\nwith your program, click the \"Submit\" button to turn it in. You can always\nunsubmit and continue working if you want to add features.\\r\n\\r\n# Do This\\r\n\\r\nIn\nthe draw loop\\r\n\\r\n* Identify which sprite properties to change.\\r\n* Update\nthose properties using the counter pattern.\\r\n\\r\n_Tip: If your counter pattern\nisn't working like you expect, add watchers to help debug your program._"
      CSD U3 Movement Your Own 2_2018_markdown_instruction: "# Add movement to your\nanimation\\r\n\\r\nWith your static scene set up, you can now add some movement.\nWhen you are satisfied with your program, click the \"Submit\" button to turn\nit in. You can always unsubmit and continue working if you want to add features.\\r\n\\r\n#\nDo This\\r\n\\r\nIn the draw loop\\r\n\\r\n* Identify which sprite properties\nto change.\\r\n* Update those properties using the counter pattern.\\r\n\\r\n_Tip:\nIf your counter pattern isn't working like you expect, add watchers to help\ndebug your program._"
      CSD U3 Plotting Shapes Shape Lab - unembed_markdown_instruction: "# Drawing\nShapes\\r\n\\r\nExplore using this tool that lets you draw different colored\nshapes. \\r\n\\r\nMake sure you hit \"Run\" and try out turning on the grid\nto help you place shapes precisely.\\r\n\\r\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png)"
      CSD U3 Plotting Shapes Shape Lab Open_markdown_instruction: "# Drawing Shapes\\r\n\\r\nExplore\nusing this tool that lets you draw different colored shapes. \\r\n\\r\nMake\nsure you hit \"Run\" and try out turning on the grid to help you place shapes\nprecisely.\\r\n\\r\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png)"
      CSD U3 Plotting Shapes Shape Lab_markdown_instruction: "# Drawing Shapes\\r\n\\r\nExplore\nusing this tool that lets you draw different colored shapes. \\r\n\\r\nMake\nsure you hit \"Run\" and try out turning on the grid to help you place shapes\nprecisely.\\r\n\\r\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png)"
      CSD U3 Plotting Shapes Shape Lab_2018_markdown_instruction: "# Drawing Shapes\\r\n\\r\nExplore\nusing this tool that lets you draw different colored shapes. \\r\n\\r\nMake\nsure you hit \"Run\" and try out turning on the grid to help you place shapes\nprecisely.\\r\n\\r\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png)"
      CSD U3 Property Conditional Multi_markdown_instruction: "# Get Creative\\r\n\\r\nNow\nthat you've seen how we can use conditionals both to take input from the\nkeyboard and to react to changes is sprite properties, it's time to come\nup with a cool use of conditionals on your own. You'll want to brainstorm\nwith a partner to come up with the sprite properties you want to change, and\nthe conditions that will decide when they get changed.\\r\n\\r\n# Do This\\r\n-\nDecide which sprite properties will be controlled by conditionals eg:\\r\n\\t-\nPosition (x and y)\\r\n    - Rotation\\r\n    - Color\\r\n    - Size (width,\nheight, or scale)\\r\n    - etc\\r\n- For each sprite property, decide on a\nconditional that will impact it:\\r\n\\t- Keyboard input (`keyDown()`, `keyWentDown()`,\netc)\\r\n    - Sprite position\\r\n    - Mouse position\\r\n    - Other variables\nor properties\\r\n- One at a time, write and test each conditional\\r\n\\r\n**Challenge**\n- Can you make a single conditional impact multiple properties?\\r\n"
      CSD U3 Property Conditional_markdown_instruction: "# Doing More With Conditionals\\r\nUsing\nconditionals to figure out which key was pressed is pretty useful, but we\ncan also use conditionals with any value in our program, including sprite\nproperties!\\r\n\\r\nWith your neighbor, discuss the kinds of boolean questions\nyou could use with the following sprite properties:\\r\n\\r\n- `sprite.x` and\n`sprite.y`\\r\n- `sprite.width` and `sprite.height`\\r\n- `sprite.shapeColor`\\r\n-\n`sprite.visibility`\\r\n\\r\n# Do This\\r\nHere's a program similar to one you\njust made, it uses `keyDown()` to move the sprite around the screen when you\nclick the arrow keys. You're going to add some additional conditionals to\nthis program to do the following:\\r\n\\r\n- Change the color of the sprite\nif it goes into the top quarter of the screen\\r\n- Rotate the sprite if it\ngoes into the left quarter of the screen\\r\n- Make the sprite invisible if\nit goes into the bottom quarter of the screen\\r\n- Make the sprite larger\nif it goes into the right quarter of the screen\\r\n\\r\n_BTW, if you're looking\nfor the `keyDown()` block, you'll notice that it's now in the 'Game Lab'\ncategory._ \\r\n"
      CSD U3 Random Add a Door_markdown_instruction: "<img src=\"https://images.code.org/fd746a708d8a94ad0aad863f3284a1ad-image-1490826372819.25.25\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Do This\\r\n\\r\n* Write\ncode that makes a red rectangle that is taller than the one already in the\ndrawing.\\r\n* Don't worry about the exact dimensions as long as your new\nrectangle is taller."
      CSD U3 Random Animation_markdown_instruction: "<img src=\"https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif\"\nstyle=\"float:right; width:200px\"/>\\r\n# Animation\\r\n\\r\nLook at this face\nmade from some simple shapes. We put it in the `draw()` loop so that we could\nanimate it, but it doesn't seem to be doing anything. We want the mouth to\nmove like the image on the right, so that it looks like it's talking\\r\n\\r\n#\nDo This\\r\n* Find the code that draws the mouth and replace the width and\nheight with calls to `randomNumber()`\\r\n* Experiment with different ranges\nof random numbers to get the kind of animation you're looking for.\\r\n\\r\nHint:\nDon't worry if it's going too fast.  You'll slow it down on the next level."
      CSD U3 Random Choice_markdown_instruction: "# Making Random Choices\\r\n\\r\nYou\nprobably noticed that the code from the last puzzle did a few things.\\r\n*\nAlways produced a whole number (also called an **integer**).\\r\n* The lowest\nnumber that could be produced was 0, which is the first **input** we passed\nto the `randomNumber` block.\\r\n* The highest number that could be produced\nwas 10, which is the second **input** to the block.\\r\n\\r\nLet's create a\nprogram that can randomly make decisions for us. We'll use a **binary** representation\nwhere `0` means `false` and `1` means `true`.\\r\n\\r\n# Do This\\r\n\\r\n* Write\na program that randomly writes out either 0 or 1 using `console.log()`.\\r\n*\nHave your partner ask some true/false or yes/no questions and use your program\nto randomly answer."
      CSD U3 Random Color_markdown_instruction: "# Randomized Colors\\r\n\\r\nCould\nyou use `randomNumber()` to pick random colors as well? Back in Unit 2 you\nlearned that colors can be composed of Red, Green, and Blue channel values\n- each of which is represented by a number value. What's the maximum and\nminimum that those channels can be set to?\\r\n\\r\n# Do This\\r\n\\r\nUsing the\n`color()` function, set the `fill` or `stroke` of your shape to a random color.\\r\n\\r\n#\nChallenge\\r\n\\r\nCan you generate random colors that are limited to a narrow\nrange of colors, such as a random shade or purple, or a random shade of teal?"
      CSD U3 Random Debug Cloud-2018_markdown_instruction: "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Debug - Using 4 Parameters\\r\n\\r\nNow\nthat the grass is working, let's add a cloud to the sky. Unfortunately, it\nlooks a little funny right now.\\r\n\\r\n# Do This\\r\n\\r\n* Debug this program\nto make the cloud wider than it is tall, like in the image.\\r\n* Hint: You'll\nneed to change two parameters. Which ones set your cloud's width and height?\\r\n\\r\n_Challenge:\nThe sun is not in the exact same place as in the picture.  Can you change\nthe sun's coordinates so that the picture matches completely?_\\r\n"
      CSD U3 Random Debug Cloud_markdown_instruction: "<img src=\"https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Debug - Using 4 Parameters\\r\n\\r\nNow\nthat the grass is working, let's add a cloud to the sky. Unfortunately, it\nlooks a little funny right now.\\r\n\\r\n# Do This\\r\n\\r\n* Debug this program\nto make the cloud wider than it is tall, like in the image.\\r\n* Hint: You'll\nneed to change two parameters. Which ones set your cloud's width and height?\\r\n\\r\n_Challenge:\nThe sun is not in the exact same place as in the picture.  Can you change\nthe sun's coordinates so that the picture matches completely?_"
      CSD U3 Random Debug Cloud_2018_markdown_instruction: "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Debug - Using 4 Parameters\\r\n\\r\nNow\nthat the grass is working, let's add a cloud to the sky. Unfortunately, it\nlooks a little funny right now.\\r\n\\r\n# Do This\\r\n\\r\n* Debug this program\nto make the cloud wider than it is tall, like in the image.\\r\n* Hint: You'll\nneed to change two parameters. Which ones set your cloud's width and height?\\r\n\\r\n_Challenge:\nThe sun is not in the exact same place as in the picture.  Can you change\nthe sun's coordinates so that the picture matches completely?_\\r\n"
      CSD U3 Random Debug Grass_markdown_instruction: "<img src=\"https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Debug - Using 4 Parameters\\r\n\\r\nThis\nprogram uses the four parameter version of `rect()` and `ellipse()` to draw\na simple scene.\\r\n\\r\n# Do This\\r\n\\r\n* Debug this program and correct the\nerror so that the grass extends across the entire bottom.\\r\n* Hint: You only\nhave to change one number. Which parameter makes your rectangle (the grass)\nwider?"
      CSD U3 Random Debug Grass_2018_markdown_instruction: "<img src=\"https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Debug - Using 4 Parameters\\r\n\\r\nThis\nprogram uses the four parameter version of `rect()` and `ellipse()` to draw\na simple scene.\\r\n\\r\n# Do This\\r\n\\r\n* Debug this program and correct the\nerror so that the grass extends across the entire bottom.\\r\n* Hint: You only\nhave to change one number. Which parameter makes your rectangle (the grass)\nwider?"
      CSD U3 Random Ellipse Behind-2018_markdown_instruction: "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Do This\\r\n\\r\n* Write\ncode that makes an orange ellipse behind the green one.\\r\n* Don't worry\nabout the exact size as long as the green ellipse is entirely inside the orange\none."
      CSD U3 Random Ellipse Behind_markdown_instruction: "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Do This\\r\n\\r\n* Write\ncode that makes an orange ellipse behind the green one.\\r\n* Don't worry\nabout the exact size as long as the green ellipse is entirely inside the orange\none."
      CSD U3 Random Ellipse Behind_2018_markdown_instruction: "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Do This\\r\n\\r\n* Write\ncode that makes an orange ellipse behind the green one.\\r\n* Don't worry\nabout the exact size as long as the green ellipse is entirely inside the orange\none."
      CSD U3 Random FreeResponse_markdown_instruction: "# Randomness\\r\n\\r\nSometimes\nyou will want your programs to run a bit differently every time, and a simple\nway to do this is to generate **random numbers**. The `randomNumber()` block\nallows you to write programs with a little bit of randomization in them, which\nis also helpful when you you want images that look more natural - for example\ndrawing a lots of stars in the sky in random positions, instead of selecting\nthe x and y for each star.\\r\n\\r\n# console.log() \\r\nThe `console.log()`\nblock is a useful tool for testing and debugging - anything that you place\ninto `console.log()` block's input will be printed to the debug console,\nwhich you can find below your code.\\r\n\\r\n# Do This\\r\n\\r\nYou will **not\nwrite any code** in this level.\\r\n\\r\n* Read the program provided\\r\n* **Predict**\nwhat the provided program will do and write your prediction in the box below.\n**Be specific!**\\r\n* Run the program several times and **record** the results.\\r\n*\n**Discuss the results with a neighbor**. Was your prediction correct?"
      CSD U3 Random Intro_markdown_instruction: "# Randomness\\r\n\\r\nSometimes you\nwill want your programs to run a bit differently every time, and a simple\nway to do this is to generate **random numbers**. The `randomNumber()` block\nallows you to write programs with a little bit of randomization in them, which\nis also helpful when you you want images that look more natural - for example\ndrawing a lots of stars in the sky in random positions, instead of selecting\nthe x and y for each star.\\r\n\\r\n# console.log() \\r\nThe `console.log()`\nblock is a useful tool for testing and debugging - anything that you place\ninto `console.log()` block's input will be printed to the debug console,\nwhich you can find below your code.\\r\n\\r\n# Do This\\r\n\\r\nYou will **not\nwrite any code** in this level.\\r\n\\r\n* Read the program provided\\r\n* **Predict**\nwhat the provided program will do. **Be specific!**\\r\n* Run the program several\ntimes and **record** the results.\\r\n* **Discuss the results with a neighbor**.\nWas your prediction correct?"
      CSD U3 Random Min Max_markdown_instruction: "# Changing the minimum\\r\n\\r\nSo\nfar we've only generated numbers from 0 up to some other value, but what\nif we wanted a different minimum? For example, if we want to use `randomNumber()`\nto create circles that have a radius somewhere between 50 and 100 pixels,\nhow might we do it?\\r\n\\r\nThe first input (also called an **argument**) of\nthe `randomNumber()` block defines the lowest number that will be randomly\ngenerated. In the previous levels we always used 0, but you could use any\ninteger as the lower bound (even negative numbers!)\\r\n\\r\n# Do This\\r\n\\r\nUsing\n`console.log()` write a program that randomly returns a number in a range\nyou define. Try coming up with an interesting range of numbers for your program,\nfor example:\\r\n* Randomly generate a month number\\r\n* Randomly generate\na temperature below boiling but above freezing\\r\n* Randomly generate a year\nyou were alive in\\r\n\\r\nCan you come up with a range that includes negative\nnumbers? What about both positive and negative ones?"
      CSD U3 Random Number Map_markdown_instruction: "# Random Numbers\\r\n\\r\n# Using\nRandom Numbers\\r\n\\r\nThe `randomNumber()` block can be used to generate random\nnumbers in your programs. It can be used in the place of a single number and\nso can make your program run a little differently each time.\\r\n\\r\n![](https://images.code.org/ef48e7f0312a567eca8641f349968c2a-image-1491521271912.27.09\nPM.png)\\r\n\\r\n<img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04\nPM.png\" style=\"float:left;width:150px\">\\r\n\\r\n<img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17\nPM.png\" style=\"float:left;width:150px\">\\r\n\\r\n<img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49\nPM.png\" style=\"float:left;width:150px\">\\r\n\\r\n`randomNumber()` has two\nparameters for the minimum and maximum numbers it can choose between. If you\nwant you can make these numbers negative.\\r\n\\r\n# Drawing and Random Numbers\\r\n\\r\nBelow\nthis program you can see three examples of possible output. Notice that even\nthough it's the same program it's a different image every time.\\r\n\\r\nYou\ncan use the `randomNumber()` command multiple times in your programs. Each\ntime it's used a new random number will be generated.\\r\n\\r\n![](https://images.code.org/2c562cef4ef69c163db2b183225ee954-image-1491522524705.48.33\nPM.png)"
      CSD U3 Random Taller Rectangle_markdown_instruction: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10\nPM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\\r\n#\nRectangle Size\\r\n\\r\nThese `rect` blocks have two more parameters that you\ncan use to control the size. Notice that the `noStroke()` block turns off\nthe stroke (border) for shapes.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nand try to figure out how the last two inputs in `rect` work.\\r\n* Change\nthe numbers in the second `rect` to make red rectangle longer than the blue\none.\\r\n"
      CSD U3 Random Taller Rectangle_2018_markdown_instruction: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10\nPM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\\r\n#\nRectangle Size\\r\n\\r\nThese `rect` blocks have two more parameters that you\ncan use to control the size. Notice that the `noStroke()` block turns off\nthe stroke (border) for shapes.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nand try to figure out how the last two inputs in `rect` work.\\r\n* Change\nthe numbers in the second `rect` to make red rectangle longer than the blue\none.\\r\n"
      CSD U3 Random Width Height_markdown_instruction: "# Randomized Shapes\\r\n\\r\nLet's\nsee how we can use randomization in our drawings. Each of the inputs from\nthe shape blocks you've seen can be replaced with calls to `randomNumber()`.\nTry drawing some images that are slightly randomized each time. You might\ntry changing the position randomly by using `randomNumber()` in place of the\nx or y inputs, or you could change the size of the shape itself by randomizing\nthe length or width inputs.\\r\n\\r\n# Do This\\r\n\\r\nPick a shape command (`ellipse()`,\n`rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or\nmore of the inputs. Make sure you run it a few times so you can see the effect\nof randomization.\\r\n\\r\n_Notice that the `console.log()` block is now in\nthe Variables drawer and the `randomNumber()` block is in the Math drawer._"
      CSD U3 Random background_markdown_instruction: "# Background\\r\n\\r\nSometimes\nyou'll want to fill the entire screen with a color.  For that, you can use\n`background`.  It covers everything on the screen with the color you choose.\\r\n\\r\n#\nDo This\\r\n\\r\n* Run the code to see `background` work.\\r\n* Change the background\nfrom yellow to orange.\\r\n\\r\n*Challenge: There is a purple square that is\ncovered up by the background.  Can you change the order of the code so you\ncan see both the purple and blue squares?*"
      CSD U3 Random background2_markdown_instruction: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Background\\r\n\\r\n`background()`\nwill draw on top of everything already in your drawing, so it's important\nto think about the order of your code.\\r\n\\r\n# Do This\\r\n\\r\n* Use `background()`\nto make a \"black\" background behind the green circle."
      CSD U3 Random background2_2018_markdown_instruction: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Background\\r\n\\r\n`background()`\nwill draw on top of everything already in your drawing, so it's important\nto think about the order of your code.\\r\n\\r\n# Do This\\r\n\\r\n* Use `background()`\nto make a \"black\" background behind the green circle."
      CSD U3 Random background_2018_markdown_instruction: "# Background\\r\n\\r\nSometimes\nyou'll want to fill the entire screen with a color.  For that, you can use\n`background`.  It covers everything on the screen with the color you choose.\\r\n\\r\n#\nDo This\\r\n\\r\n* Run the code to see `background` work.\\r\n* Change the background\nfrom yellow to orange.\\r\n\\r\n*Challenge: There is a purple square that is\ncovered up by the background.  Can you change the order of the code so you\ncan see both the purple and blue squares?*"
      CSD U3 Random rainbow snake-2018_markdown_instruction: "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Rainbow Snake\\r\n\\r\nThis\nprogram draws a very rare breed of rainbow snake. To make the snake draw differently\nevery time you'll need to use random numbers.\\r\n\\r\n# Do This\\r\n\\r\n* Run\nthe program several times to see how the starter code works.\\r\n* Add at least\nthree new different colored circles to your rainbow snake.\\r\n* Use `randomNumber()`\nto make the rest of the snake's body move up and down like the first three.\\r\n\\r\n*Challenge:\nCan you make size of some of the circles random, too?*"
      CSD U3 Random rainbow snake_markdown_instruction: "<img src=\"https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Rainbow Snake\\r\n\\r\nThis\nprogram draws a very rare breed of rainbow snake. To make the snake draw differently\nevery time you'll need to use random numbers.\\r\n\\r\n# Do This\\r\n\\r\n* Run\nthe program several times to see how the starter code works.\\r\n* Add at least\nthree new different colored circles to your rainbow snake.\\r\n* Use `randomNumber()`\nto make the rest of the snake's body move up and down like the first three.\\r\n\\r\n*Challenge:\nCan you make size of some of the circles random, too?*"
      CSD U3 Random rainbow snake_2018_markdown_instruction: "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Rainbow Snake\\r\n\\r\nThis\nprogram draws a very rare breed of rainbow snake. To make the snake draw differently\nevery time you'll need to use random numbers.\\r\n\\r\n# Do This\\r\n\\r\n* Run\nthe program several times to see how the starter code works.\\r\n* Add at least\nthree new different colored circles to your rainbow snake.\\r\n* Use `randomNumber()`\nto make the rest of the snake's body move up and down like the first three.\\r\n\\r\n*Challenge:\nCan you make size of some of the circles random, too?*"
      CSD U3 Random random ellipse-2018_markdown_instruction: "# Random Numbers\\r\n\\r\n`randomNumber()`\nchooses a random number between a minimum and maximum value. You can use this\ncode instead of writing in the specific number.  If you make your drawings\nwith random numbers it will look a little bit different every time you run\nyour program.\\r\n\\r\n# Do This\\r\n\\r\n* Run the program several times to see\nhow it works.\\r\n* Change the numbers inside `randomNumber` and run the code\nagain a few times to see what changes."
      CSD U3 Random random ellipse_markdown_instruction: "# Random Numbers\\r\n\\r\n`randomNumber()`\nchooses a random number between a minimum and maximum value. You can use this\ncode instead of writing in the specific number.  If you make your drawings\nwith random numbers it will look a little bit different every time you run\nyour program.\\r\n\\r\n# Do This\\r\n\\r\n* Run the program several times to see\nhow it works.\\r\n* Change the numbers inside `randomNumber` and run the code\nagain a few times to see what changes."
      CSD U3 Random random ellipse2-2018_markdown_instruction: "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Random Numbers\\r\n\\r\nHere's\nthe same sun from last time.  Right now only the x-coordinate is random, but\nyou can make the y-coordinate random, too.\\r\n\\r\n# Do This\\r\n\\r\n* Use `randomNumber()`\nfor the ellipse's Y parameter so the circle is drawn in a random Y position,\ntoo.\\r\n* As long as your circle is appearing at random X and Y positions,\nyou can move on."
      CSD U3 Random random ellipse2_markdown_instruction: "<img src=\"https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Random Numbers\\r\n\\r\nHere's\nthe same sun from last time.  Right now only the x-coordinate is random, but\nyou can make the y-coordinate random, too.\\r\n\\r\n# Do This\\r\n\\r\n* Use `randomNumber()`\nfor the ellipse's Y parameter so the circle is drawn in a random Y position,\ntoo.\\r\n* As long as your circle is appearing at random X and Y positions,\nyou can move on."
      CSD U3 Random random ellipse2_2018_markdown_instruction: "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Random Numbers\\r\n\\r\nHere's\nthe same sun from last time.  Right now only the x-coordinate is random, but\nyou can make the y-coordinate random, too.\\r\n\\r\n# Do This\\r\n\\r\n* Use `randomNumber()`\nfor the ellipse's Y parameter so the circle is drawn in a random Y position,\ntoo.\\r\n* As long as your circle is appearing at random X and Y positions,\nyou can move on."
      CSD U3 Random random ellipse_2018_markdown_instruction: "# Random Numbers\\r\n\\r\n`randomNumber()`\nchooses a random number between a minimum and maximum value. You can use this\ncode instead of writing in the specific number.  If you make your drawings\nwith random numbers it will look a little bit different every time you run\nyour program.\\r\n\\r\n# Do This\\r\n\\r\n* Run the program several times to see\nhow it works.\\r\n* Change the numbers inside `randomNumber` and run the code\nagain a few times to see what changes."
      CSD U3 Scene Example-2018_markdown_instruction: "# Sprite Scenes\\r\n\\r\nBy\ncombining shapes, sprites, and text, you can create simple scenes, stories,\nor comics. While this example is fairly simple, you can combine as many sprites\nand shapes as you like to create scenes as complex or detailed as you like.\\r\n\\r\n##\nSketch It Out\\r\n\\r\nBefore moving on, take a second to sketch out a scene\nthat you'd like to make at the end of this lesson. Consider the simple shapes\nthat you've used in the past, sprites for your characters, and any text that\nyou'd like on the screen. Once you've sketched out an idea, you'll learn\nabout `text` and how to compose a scene.\\r\n"
      CSD U3 Scene Example_markdown_instruction: "# Sprite Scenes\\r\n\\r\nBy combining\nshapes, sprites, and a new block called `text`, you can create simple scenes,\nstories, or comics. While this example is fairly simple, you can combine as\nmany sprites and shapes as you like to create scenes as complex or detailed\nas you like.\\r\n\\r\n## Sketch It Out\\r\n\\r\nBefore moving on, take a second\nto sketch out a scene that you'd like to make at the end of this lesson.\nConsider the simple shapes that you've used in the past, sprites for your\ncharacters, and any text that you'd like on the screen. Once you've sketched\nout an idea, you'll learn about `text` and how to compose a scene.\\r\n"
      CSD U3 Scene Example_2018_markdown_instruction: "# Sprite Scenes\\r\n\\r\nBy\ncombining shapes, sprites, and text, you can create simple scenes, stories,\nor comics. While this example is fairly simple, you can combine as many sprites\nand shapes as you like to create scenes as complex or detailed as you like.\\r\n\\r\n##\nSketch It Out\\r\n\\r\nBefore moving on, take a second to sketch out a scene\nthat you'd like to make at the end of this lesson. Consider the simple shapes\nthat you've used in the past, sprites for your characters, and any text that\nyou'd like on the screen. Once you've sketched out an idea, you'll learn\nabout `text` and how to compose a scene.\\r\n"
      CSD U3 Simple Drawing - Animation 2_markdown_instruction: "# Rays of Sunshine\\r\n\\r\nLet's\nadd a little bit more animation to the scene. The `line()` block takes in\ntwo pairs of x,y coordinates and draws a line between them.\\r\n\\r\nDraw 5\nyellow lines that all start from the center of the sun and move out to a random\npoint around the top half.\\r\n\\r\n# Do This\\r\n\\r\n* Create 5 lines, each\nof which should start at the center of the sun and go out to a random point.\nYou can pick your own random ranges, but you might try:\\r\n  * `randomNumber(115,135),\nrandomNumber(10,20)`\\r\n  * `randomNumber(145,165), randomNumber(20,30)`\\r\n  *\n`randomNumber(85, 105), randomNumber(20,30)`\\r\n  * `randomNumber(165,185),\nrandomNumber(40,50)`\\r\n  * `randomNumber(65, 85 ), randomNumber(40,50)`\\r\n*\nDon't forget to set the `strokeColor()` before you draw your lines and to\nreset to `noStroke()` afterwards."
      CSD U3 Simple Drawing - Animation_markdown_instruction: "# Clouds in the Wind\\r\n\\r\nNow\nthat our image is in the draw loop, let's make use of that feature to add\na little bit of animation. We're going to make our clouds look as though\nthey're shifting in the breeze by randomizing their position and size a little\nbit each time the `draw()` loop is run.\\r\n\\r\n# Do This\\r\n\\r\n* Replace\nthe x input of each cloud ellipse with a call to `randomNumber`\\r\n  * `randomNumber`\nshould vary the x position by + or - 5 pixels. So if your x position was 50,\nreplace it with `randomNumber(45,55)`\\r\n* Replace the width input of each\ncloud ellipse with a call to `randomNumber`\\r\n  * `randomNumber` should vary\nthe width by + 5 pixels. So if your width was 50, replace it with `randomNumber(50,55)`\\r\n*\nChange the **frame rate** to something slower (try 5 or 10 FPS)"
      CSD U3 Simple Drawing - Background_markdown_instruction: "# Draw()ing your\nstreet image\\r\n\\r\nHere's the street image you started working on in the\nlast lesson. We're going to get it ready to add some animation.\\r\n\\r\nFor\nthe animation to work you'll need to wrap all of your current code in the\n`draw()` loop, adding a call to `background()` at the top of the loop.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a `draw()` block and move all of your current code inside\nit\\r\n* Replace the rectangle that draws your background with a call to the\n`background()` block"
      CSD U3 Simple Drawing - Personal Animation_markdown_instruction: "# Your Own\nAnimation\\r\n\\r\nHere's the drawing you planned and started in the last lesson\n- let's animate it!\\r\n\\r\n# Do This\\r\n\\r\n* Move all of your code into\na `draw()` loop\\r\n* Use `randomNumber()` in the inputs of some of your shapes\\r\n*\nSet the speed of your animation using the `World.frameRate` block\\r\n"
      CSD U3 Sprite Movement Left_markdown_instruction: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float: right; margin-left: 20px\">\\r\n\\r\n# Moving to the Left\\r\n\\r\nIf\nadding to a sprite's x coordinate makes it move to the right, how could you\nmake it move to the left?\\r\n\\r\n# Do This\\r\n\\r\nMake your program animate\nlike the image to the right. Update `fly.x` inside the draw loop so that in\neach frame the fly is drawn a little bit further to the left.\\r\n\\r\n_Tip:\nYou can make your sprites move faster by adding or subtracting larger numbers.\nThe fly in our example moves about twice as fast as the plane in the last\nlevel._"
      CSD U3 Sprite Movement Left_2018_markdown_instruction: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float: right; margin-left: 20px\">\\r\n\\r\n# Moving to the Left\\r\n\\r\nIf\nadding to a sprite's x coordinate makes it move to the right, how could you\nmake it move to the left?\\r\n\\r\n# Do This\\r\n\\r\nMake your program animate\nlike the image to the right. Update `fly.x` inside the draw loop so that in\neach frame the fly is drawn a little bit further to the left.\\r\n\\r\n_Tip:\nYou can make your sprites move faster by adding or subtracting larger numbers.\nThe fly in our example moves about twice as fast as the plane in the last\nlevel._"
      CSD U3 Sprite Movement Right_markdown_instruction: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float: right; margin-left: 20px\">\\r\n\\r\n# Sprite Movement\\r\n\\r\nUsing\nthe counter pattern, you can write programs that animate sprites smoothly.\nAdding to or removing from a sprite's `x` or `y` property in the draw loop\nmakes your sprite move just a bit each time it is redrawn.\\r\n\\r\n# Do This\\r\n\\r\nMake\nyour program animate like the image to the right. We've already added a line\nto update `plane.x` in the draw loop, but it needs to be finished.\\r\n"
      CSD U3 Sprite Movement Right_2018_markdown_instruction: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float: right; margin-left: 20px\">\\r\n\\r\n# Sprite Movement\\r\n\\r\nUsing\nthe counter pattern, you can write programs that animate sprites smoothly.\nAdding to or removing from a sprite's `x` or `y` property in the draw loop\nmakes your sprite move just a bit each time it is redrawn.\\r\n\\r\n# Do This\\r\n\\r\nMake\nyour program animate like the image to the right. We've already added a line\nto update `plane.x` in the draw loop, but it needs to be finished.\\r\n"
      CSD U3 Sprites Template race_markdown_instruction: "# Putting it All Together\\r\n\\r\nLet's\nput all of this together in a fun way. We're going to make three sprites\n\"race\" across the screen by combining the counter pattern, random numbers,\nand sprite properties.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nTo begin with make three\ndifferent sprites and put them in a row on the left side of your screen.\\r\n\\r\n*\n**Create three sprites** and give them labels\\r\n* **Add code to the \"Drawing\"\nsection of the draw loop that draws the background and your sprites**\\r\n*\nYour animation should look like the example at the right.\\r\n\\r\n"
      CSD U3 Sprites animating with sprites_markdown_instruction: "# Animating with\nSprites\\r\n\\r\n**Sprite properties can be used in the counter pattern too**.\\r\n\\r\n\\t//\nCounter Pattern with variables\\r\n    x = x + 1;\\r\n    \\r\n    // Counter\nPattern with sprite properties\\r\n    mySprite.x = mySprite.x + 1\\r\n\\r\nIf\nyou call ![](https://images.code.org/16810be94cc61ea828e0acce5b642468-image-1466009389700.19.16\nAM.png) inside the draw loop then you can use this counter pattern to animate\nsprites as well.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/a34d5c36c98c2d61ce341be59cbcf315-image-1466534169200.gif\"\nstyle=\"float:right; width:200px\">\\r\n\\r\n\\r\nThis program creates 2 sprites\nand then animates one of them to move across the screen using the counter\npattern.\\r\n\\r\n* Inside the draw loop **add code that uses the counter pattern\nto make the orange sprite move across the screen**.\\r\n* Hint: How can you\nuse the counter pattern here? Look at the code for the redSprite if you need\nhelp.\\r\n* Your animation should look like the example at the right."
      CSD U3 Sprites anitab 1_markdown_instruction: "# Images\\r\n\\r\nOver on the\n**Animations Tab**, you'll see three images that have been loaded for you.\nYou can get to the animations tab by clicking the **Animation** button above\nthe display area.\\r\n\\r\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\" style=\"width:300px;float:right\">\\r\n\\r\nOnce you have created a\nsprite, you can **use the `sprite.setAnimation()` command to change the look\nof your sprite from a rectangle to a picture.** All the images you have loaded\nin the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The\nalien is set up for you as an example.\\r\n\\r\n# Do This\\r\nChange the sprite\nto your favorite image from the animations tab.\\r\n\\r\n* A sprite that is\nset to an image has already been created for you.\\r\n* Run the code to see\nhow it works.\\r\n* Change the input to the `setAnimation` command to change\nthe look of the sprite.\\r\n* Try out all the different images."
      CSD U3 Sprites anitab 1_2018_markdown_instruction: "# Images\\r\n\\r\nOver on\nthe **Animations Tab**, you'll see three images that have been loaded for\nyou. You can get to the animations tab by clicking the **Animation** button\nabove the display area.\\r\n\\r\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\" style=\"width:300px;float:right\">\\r\n\\r\nOnce you have created a\nsprite, you can **use the `sprite.setAnimation()` command to change the look\nof your sprite from a rectangle to a picture.** All the images you have loaded\nin the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The\nalien is set up for you as an example.\\r\n\\r\n# Do This\\r\nChange the sprite\nto your favorite image from the animations tab.\\r\n\\r\n* A sprite that is\nset to an image has already been created for you.\\r\n* Run the code to see\nhow it works.\\r\n* Change the input to the `setAnimation` command to change\nthe look of the sprite.\\r\n* Try out all the different images."
      CSD U3 Sprites anitab 2_markdown_instruction: "# Upload your own image\\r\n\\r\nYou\ncan also use the Animation tab to upload or draw your own image.\\r\n\\r\n#\nDo This\\r\nYou are going to make a flying kite. You can search the web for\nan image or create a new animation from scratch by drawing your own kite.\\r\n\\r\n*\nDownload your kite image. Images with transparent backgrounds work best.\\r\n*\nOpen the animations tab.\\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\nPM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\nPM.png\" style=\"width:50px\"> to upload an image.\\r\n* Select the file from\nyour computer.\\r\n* Rename your image so it is easy to remember. To rename\nit click the text below the image.\\r\n* Back in code mode, use `sprite.setAnimation()`\nto make your `kite` sprite show your new animation.\\r\n\\r\nDon't worry if\nyour kite image is too big! You'll learn how to fix that in the next level."
      CSD U3 Sprites anitab 2_2018_markdown_instruction: "# Upload your own image\\r\n\\r\nYou\ncan also use the Animation tab to upload or draw your own image.\\r\n\\r\n#\nDo This\\r\nYou are going to make a flying kite. You can search the web for\nan image or create a new animation from scratch by drawing your own kite.\\r\n\\r\n*\nDownload your kite image. Images with transparent backgrounds work best.\\r\n*\nOpen the animations tab.\\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\nPM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\nPM.png\" style=\"width:50px\"> to upload an image.\\r\n* Select the file from\nyour computer.\\r\n* Rename your image so it is easy to remember. To rename\nit click the text below the image.\\r\n* Back in code mode, use `sprite.setAnimation()`\nto make your `kite` sprite show your new animation.\\r\n\\r\nDon't worry if\nyour kite image is too big! You'll learn how to fix that in the next level."
      CSD U3 Sprites anitab 3_markdown_instruction: "# Resizing with Scale\\r\n\\r\nIn\nthe _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`.\nIt lets you change the size of a sprite in relation to its original size.\n`sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite\nhalf as big, while `sprite.scale = 2` makes it twice as big.\\r\n\\r\n# Do This\\r\n\\r\nThe\nprogram should already include your newly uploaded image, but it's probably\nnot the _perfect_ size. Use `sprite.scale` to change the size of your `kite`\nsprite.\\r\n\\r\n_Hint: the order of your code matters! You need to add `sprite.scale`\n**after** you've created the sprite, but **before** you draw the sprite with\n`drawSprites()`. For clarity, try to keep all of your sprite code together\nat the top of your program._"
      CSD U3 Sprites anitab 3_2018_markdown_instruction: "# Resizing with Scale\\r\n\\r\nIn\nthe _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`.\nIt lets you change the size of a sprite in relation to its original size.\n`sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite\nhalf as big, while `sprite.scale = 2` makes it twice as big.\\r\n\\r\n# Do This\\r\n\\r\nThe\nprogram should already include your newly uploaded image, but it's probably\nnot the _perfect_ size. Use `sprite.scale` to change the size of your `kite`\nsprite.\\r\n\\r\n_Hint: the order of your code matters! You need to add `sprite.scale`\n**after** you've created the sprite, but **before** you draw the sprite with\n`drawSprites()`. For clarity, try to keep all of your sprite code together\nat the top of your program._"
      CSD U3 Sprites anitab 4_markdown_instruction: "# Resizing with Scale\\r\n\\r\nIn\nthe _Sprites_ drawer of the toolbox you'll see a new block called `sprite.scale`.\nThis command let's you change the size of a sprite in relation to its original\nsize. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` would make\nyour sprite half as big, while `sprite.scale = 2` would make it twice as big.\\r\n\\r\n#\nDo This\\r\n\\r\nAt this point the program should include your newly uploaded\nimage, but it's probably not the _perfect_ size. Add a `sprite.scale` block\nto change the size of your `kite` sprite.\\r\n\\r\n_Hint: the order of your\ncode matters! You need to add `sprite.scale` **after** you've created the\nsprite, but **before** you draw the sprite with `drawSprites()`. For clarity,\ntry to keep all of your sprite code together at the top of your program._"
      CSD U3 Sprites createSprite params_markdown_instruction: "# createSprite()\nwith parameters\\r\n\\r\nWhen you create a variable you often want to set its\nvalue right away. That's why the command `var x =` exists, to let you perform\nboth commands at once.\\r\n\\r\nIt's very common to want to set the x and y\nof your sprite in a single command. To help, the createSprite command accepts\n2 parameters or values that set these properties right away. Instead of writing\n\\r\n\\r\n  \\tvar mySprite = createSprite();\\r\n  \\tmySprite.x = 100;\\r\n  \\tmySprite.y\n= 200; \\r\n\\r\nyou can just write the command\\r\n\\r\n\\tvar mySprite = createSprite(100,\n200);\\r\n\\r\nThis code does exactly the same thing, but it's much easier\nto write. \\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nThis is your code from\nearlier. Note that a new, larger version of `createSprite` is now available.\\r\n\\r\n<img\nsrc=\"https://images.code.org/4a2e6bf1ffbd9782ce637b3e997004e3-image-1468337207497.25.20\nAM.png\" style=\" width:350px\">\\r\n\\r\n* Update your code to use this new\nversion of `createSprite`\\r\n* Your program should only be **9 total lines**\\r\n*\nYou're still trying to make your image look as close as possible to the image\nat the right."
      CSD U3 Sprites debug background_markdown_instruction: "# Debug: Ordering in\nthe Draw Loop\\r\n\\r\nAs you start animating with sprites you'll have more\ncomplex code in your draw loop. It's important to stay organized if you don't\nwant your code to be confusing.\\r\n\\r\nHere's the way you should structure\nyour draw loop when animating with sprites:\\r\n\\r\n\\tfunction draw(){\\r\n    \\t//\nDraw Background\\r\n        \\r\n    \\t// Update Sprite Properties\\r\n        \\r\n        //\nDraw Animations\\r\n     \\r\n    }\\r\n    \\r\nThis strategy will work for most\ncases but not all.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/df08c0bb7290e9d255f1cc51be35954d-image-1472665837101.gif\"\nstyle=\"float:right; width:200px\">\\r\n\\r\nThis program is supposed to animate\na sprite moving across the screen, but **there's a problem that's preventing\nit from running properly**.\\r\n\\r\n* **Run the program** to see how it works.\\r\n*\n**Debug the program** to find the error that prevents it from working properly.\\r\n*\nYour animation should look like the example at the right.\\r\n* Hint: Order\nmatters a lot when drawing.\\r\n"
      CSD U3 Sprites debug dot notation_markdown_instruction: "# Debugging: Dot Notation\\r\n\\r\n**Dot\nNotation:** Sprites all have the same properties, which is really useful.\nIt means that once you know the label of a sprite, you know the labels of\nits properties. All you need to do is combine the name of your sprite and\nthe name of your property with a period or \"dot\" in between. This is also\nreferred to as **dot notation**. For example, a sprite called `bob` will have\nthe properties `bob.x`, `bob.y`, and so on.\\r\n\\r\nWhen using dot notation\nit's important that **you spell the label of your sprite and your property\ncorrectly.** Just like with variables, keep an eye out for:\\r\n\\r\nRule |\nExample\\r\n---|---\\r\nCorrect capitalization|`sprite.x` is not `sprite.X`\\r\nCorrect\nspelling|`sprite.y` is not `sprte.y`\\r\nWhether the label you're trying to\nuse actually exists|`sprite.xlocation` does not exist\\r\nThe sprite's label\ncomes before the property's label|`x.sprite` will not work\\r\n\\r\n# Do This\\r\n\\r\n<img\nsrc=\"https://images.code.org/5c6019e343bc58650c45f66c3e3c9bc5-image-1466089712070.08.20\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nThis program tries to\nuse dot notation to change the properties of two sprites. Unfortunately, errors\nare preventing the program from running correctly.\\r\n\\r\n* **Use dot notation\ncorrectly** to fix the errors in this program\\r\n* When your program works\ncorrectly, it should draw the image to the right"
      CSD U3 Sprites debug watchers_markdown_instruction: "# Debug: Watchers\\r\n\\r\nYou\ncan place watchers on a sprite property just like you would a regular variable.\\r\n\\r\n![](https://images.code.org/291b83de4b7d540017df382944474c16-image-1466017776084.09.27\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/1a1a724338e983c2124b0e97d43469a2-image-1466024475859.gif\"\nstyle=\"float:right; width:200px\">\\r\n\\r\nThis program is supposed to animate\na sprite moving across the screen but **there's a problem that's preventing\nit from running properly**.\\r\n\\r\n* **Run the program** to see how it works.\\r\n*\n**Add a watcher** if you like to help you check individual properties.\\r\n*\n**Debug the program** to find the error that prevents it from working properly.\\r\n*\nYour animation should look like the example at the right.\\r\n* Hint: Read\nthe code carefully. Is there a logical error?"
      CSD U3 Sprites intro debug_markdown_instruction: "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\"\nstyle=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\\r\n#\nDebug\\r\n\\r\nThis program should create two new sprites, one on the left of\nthe screen and one on the right, but it's only drawing one. **You don't\nneed to add any code**, just rearrange the code already present to make sure\nthat both sprites show up like the picture on the right."
      CSD U3 Sprites intro debug_2018_markdown_instruction: "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\"\nstyle=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\\r\n#\nDebug\\r\n\\r\nThis program should create two new sprites, one on the left of\nthe screen and one on the right, but it's only drawing one. **You don't\nneed to add any code**, just rearrange the code already present to make sure\nthat both sprites show up like the picture on the right."
      CSD U3 Sprites intro sprites_markdown_instruction: "# Sprites\\r\n\\r\n**Creating\nSprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41\nPM.png\" style = \"height:30px\">  creates a new sprite and assigns it to\na variable.  The default name is `sprite`, so you'll want to change it to\nsomething more meaningful.\\r\n\\r\n**Drawing Sprites:** Sprites only appear\non the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16\nAM.png) will draw all of your created sprites on the screen.\\r\n\\r\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\"\nstyle=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left:\n20px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program includes comments that let you\nknow where to place code but otherwise is blank. Your program should look\nlike the image on the right.\\r\n\\r\n* Add `var sprite = createSprite(200,\n200)` under the comment `Creating Sprites`.\\r\n\\t* You can ignore the yellow\ntriangle warning for now.  It's just telling you that you haven't used your\nsprite yet.\\r\n* Add `drawSprites()` under the comment `Drawing`.\\r\n* **Run\nthe code** to draw your first sprite on the screen.\\r\n\\r\n_Hint: Sprites\nare drawn from their center, which means that center of the square (not the\ntop left corner) is at (200, 200)._"
      CSD U3 Sprites intro sprites_2018_markdown_instruction: "# Sprites\\r\n\\r\n**Creating\nSprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41\nPM.png\" style = \"height:30px\">  creates a new sprite and assigns it to\na variable.  The default name is `sprite`, so you'll want to change it to\nsomething more meaningful.\\r\n\\r\n**Drawing Sprites:** Sprites only appear\non the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16\nAM.png) will draw all of your created sprites on the screen.\\r\n\\r\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\"\nstyle=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left:\n20px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program includes comments that let you\nknow where to place code but otherwise is blank. Your program should look\nlike the image on the right.\\r\n\\r\n* Add `var sprite = createSprite(200,\n200)` under the comment `Creating Sprites`.\\r\n\\t* You can ignore the yellow\ntriangle warning for now.  It's just telling you that you haven't used your\nsprite yet.\\r\n* Add `drawSprites()` under the comment `Drawing`.\\r\n* **Run\nthe code** to draw your first sprite on the screen.\\r\n\\r\n_Hint: Sprites\nare drawn from their center, which means that center of the square (not the\ntop left corner) is at (200, 200)._"
      CSD U3 Sprites make template_markdown_instruction: "# Make Your Own Sprite\\r\n\\r\nYou\nnow know how to create a sprite, set its properties with dot notation, and\ndraw sprites using `drawSprites`. It's time to put all these pieces together\non your own.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nThis program creates a\nred sprite in the bottom right hand corner of the screen.\\r\n\\r\n* **Write\ncode** that creates a new separate sprite in the top left corner of the screen.\\r\n*\nBe careful with your dot notation, and use the code for the first sprite as\na guide.\\r\n* Try to make your image look as close as possible to the image\nat the right."
      CSD U3 Sprites make your own sprite_markdown_instruction: "# Make Your Own\nSprite\\r\n\\r\nYou now know how to create a sprite, set its properties with\ndot notation, and draw sprites using `drawSprites`. It's time to put all\nthese pieces together on your own.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nThis program creates a\nred sprite in the bottom right hand corner of the screen.\\r\n\\r\n* **Write\ncode** that creates a new separate sprite in the top left corner of the screen.\\r\n*\nBe careful with your dot notation, and use the code for the first sprite as\na guide.\\r\n* Try to make your image look as close as possible to the image\nat the right."
      CSD U3 Sprites motivation_markdown_instruction: "# How Many Counter Variables?\\r\n\\r\nYou\ncan use counter variables (`x = x + 1` , `x = x - 1` , `x = x + 0.5`, etc.)\nto animate a scene. What happens when scenes start to get larger and more\ncomplicated? \\r\n\\r\nWatch this animation. With a partner: \\r\n\\r\n* Decide\nhow many counter variables you would need to create this scene\\r\n* Decide\nwhat you would name your counter variables\\r\n* **Draw a Labels-Values-Connectors**\ndiagram of your variables at the first frame of this scene. Don't worry about\ngetting the values exactly correct.\\r\n* Share your answer with another group\n**and be ready to share your ideas with the class**"
      CSD U3 Sprites race create sprites_markdown_instruction: "# Putting it All\nTogether\\r\n\\r\nLet's put all of this together in a fun way. You're going\nto make three sprites \"race\" across the screen by combining the counter\npattern, random numbers, and sprite properties.\\r\n\\r\n# Do This\\r\n\\r\n<img\nsrc=\"https://images.code.org/1ee52eac731176211c286023c87c166a-image-1466021038288.03.29\nPM.png\" style=\"float:right; width:200px\">\\r\n\\r\nTo begin with, make three\ndifferent sprites and put them in a row on the left side of your screen.\\r\n\\r\n*\n**Create three sprites** and give them labels.\\r\n* **Add code to the \"Draw\nBackground\" section of the draw loop that draws the background**.\\r\n* **Add\ncode to the \"Draw Animations\" section of the draw loop that draws your sprites**.\\r\n*\nYour picture should look like the example at the right."
      CSD U3 Sprites race finish_markdown_instruction: "# Make It Your Own\\r\n\\r\nKeep\nadding to this project and make it your own. Do you want to add a finish line?\nDo you want to make one racer a little bit faster than the others? Maybe you\ncould add some text and give your race a name. There's a ton of ways you\ncan make this animation a lot more interesting and exciting!\\r\n\\r\n<img src\n= \"https://images.code.org/387aec833f243632735c97b56ae6e64e-image-1466022313176.gif\"\nstyle=\"float:right; width:200px\">\\r\n# Do This\\r\n\\r\n* **Keep adding your\nown touches to your race** using what you already know about drawing, sprites,\nand animation."
      CSD U3 Sprites race movement_markdown_instruction: "# Get Those Sprites Moving!\\r\n\\r\nNow\nthat you have three sprites on the screen, it's time to make them \"race\"\nacross the screen. For now, the race will just be a tie, so focus mainly on\n**making sure your code is organized** and that **you use sprite properties\nwith the counter pattern correctly**.\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/a935615480098eb0a8e7723d87b2308c-image-1466021329937.gif\"\nstyle=\"float:right; width:200px\">\\r\n\\r\n* **Add code to the \"Update Properties\"\nsection** that makes the sprites move across the screen together.\\r\n* Your\nanimation should look like the example at the right."
      CSD U3 Sprites race random_markdown_instruction: "# Random Movement\\r\n\\r\nRight\nnow your race isn't very interesting. Let's make one small change to make\nit a lot more exciting. Instead of your sprites moving the same amount forward\nevery frame, **they will now move a random amount**. This will make use of\nwhat we'll call the **random counter pattern**. Here's what the code might\nlook like.\\r\n\\r\n\\t// Random Counter Pattern\\r\n    mySprite.x = mySprite.x\n+ randomNumber(0,2);\\r\n    \\r\nInstead of adding the same amount every time\nit will move forward by some random amount between 0 and 2.\\r\n\\r\n# Do This\\r\n\\r\n<img\nsrc=\"https://images.code.org/accadb669e88a7c2aff8a29b6305da55-image-1466021491106.gif\"\nstyle=\"float:right; width:200px\">\\r\n\\r\n* **Use the random counter pattern**\nto make your sprites move forward by a random amount in each frame.\\r\n* **Run\nthe program** to make sure your sprites now move a random amount. Is your\nrace predictable anymore?\\r\n* Your animation should look similar to the example\nat the right."
      CSD U3 Sprites scene challenge_markdown_instruction: "# Challenge: Extend your\nscene\\r\n\\r\n_Check with your teacher before starting this challenge._\\r\n\\r\nNow\nthat you've finished your scene, consider adding to it or creating another."
      CSD U3 Sprites scene challenge_2018_markdown_instruction: "# Challenge: Extend\nyour scene\\r\n\\r\n_Check with your teacher before starting this challenge._\\r\n\\r\nNow\nthat you've finished your scene, consider adding to it or creating another."
      CSD U3 Sprites scene drawing_markdown_instruction: "# Create Your Scene - Drawing\\r\n\\r\nYou're\ngoing to start creating a scene of your own. If you haven't already, take\na minute to sketch out a picture of your scene (consider using graph paper).\nOnce you have an idea and plan for your scene, start drawing the background.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use a `background()` command to fill the screen with a color.\\r\n*\nAdd any necessary shape commands to draw the non-sprite elements of your scene."
      CSD U3 Sprites scene drawing_2018_markdown_instruction: "# Create Your Scene\n- Drawing\\r\n\\r\nYou're going to start creating a scene of your own. If you\nhaven't already, take a minute to sketch out a picture of your scene (consider\nusing graph paper). Once you have an idea and plan for your scene, start drawing\nthe background.\\r\n\\r\n# Do This\\r\n\\r\n* Use a `background()` command to\nfill the screen with a color.\\r\n* Add any necessary shape commands to draw\nthe non-sprite elements of your scene."
      CSD U3 Sprites scene sprites_markdown_instruction: "# Create Your Scene - Sprites\\r\n\\r\nWith\nyour background in place, it's time to add your sprites.\\r\n# Do This\\r\n\\r\n*\nAdd or create all of your sprite images in the Animation Tab.\\r\n* Create\na variable for each sprite at the top of your program and use `setAnimation()`\nto assign the images you created in the Animation Tab.\\r\n* Call `drawSprites()`\nonce at the end of your program.\\r\n\\r\n_Hint: You probably want to call `drawSprites()`\nat the very end of your program so the sprites are on top of your background,\nbut for some designs you may want to call `drawSprites()` earlier so that\nyour sprites are on top of some shapes but below others._"
      CSD U3 Sprites scene sprites_2018_markdown_instruction: "# Create Your Scene\n- Sprites\\r\n\\r\nWith your background in place, it's time to add your sprites.\\r\n#\nDo This\\r\n\\r\n* Add or create all of your sprite images in the Animation\nTab.\\r\n* Create a variable for each sprite at the top of your program and\nuse `setAnimation()` to assign the images you created in the Animation Tab.\\r\n*\nCall `drawSprites()` once at the end of your program.\\r\n\\r\n_Hint: You probably\nwant to call `drawSprites()` at the very end of your program so the sprites\nare on top of your background, but for some designs you may want to call `drawSprites()`\nearlier so that your sprites are on top of some shapes but below others._"
      CSD U3 Sprites scene text_markdown_instruction: "# Create Your Scene - Text\\r\n\\r\nThe\nfinal piece of your scene is to add text.\\r\n\\r\n# Do This\\r\n\\r\n* Add a\n`text()` command for each separate line of text.\\r\n* If necessary, use `fill()`\nand `textSize()` to change the appearance of your text.\\r\n\\r\n_Hint: Most\nscenes have the text on top of everything else, which would require your `text()`\ncommands to be the last lines in your program. If, however, you want the text\nlayered in with other elements, you might consider changing the order._"
      CSD U3 Sprites scene text_2018_markdown_instruction: "# Create Your Scene -\nText\\r\n\\r\nThe final piece of your scene is to add text.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a `text()` command for each separate line of text.\\r\n* If necessary,\nuse `fill()` and `textSize()` to change the appearance of your text.\\r\n\\r\n_Hint:\nMost scenes have the text on top of everything else, which would require your\n`text()` commands to be the last lines in your program. If, however, you want\nthe text layered in with other elements, you might consider changing the order._"
      CSD U3 Sprites setting properties_markdown_instruction: "# Properties\\r\n\\r\n<img\nsrc=\"https://images.code.org/9567c9df55163104ff91df0920457ad3-image-1466047307713.21.28\nPM.png\" style=\"float:right\">\\r\n\\r\n**Properties:** When you create a sprite\nit will automatically be given many special variables called properties. Properties\nkeep track of information about the sprite, which is used when you draw it\non the screen. For example, these two properties keep track of a sprite's\nx and y position on the screen.\\r\n\\r\n**Changing Properties:** Properties\nare just variables, so you can change their values using `=` just like any\nother variable. Here's an example of how you might change the `x` property\nof a sprite called `myFavoriteSprite`.\\r\n\\r\n![](https://images.code.org/6976d707cba95e92369831729cdb7435-image-1466085767357.02.35\nAM.png)\\r\n\\r\n<img src=\"https://images.code.org/2743e55cef5da23bf61db1556c88f174-image-1466049906667.04.41\nPM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program\ncreates a new sprite, gives it a label, and then sets its `x` and `y` properties.\\r\n\\r\n*\n**Read the code**. Notice that the label given to the sprite is used in the\nsprite's property.\\r\n* **Change the values given to the `x` and `y` properties**\nto move the sprite to the bottom right corner of the screen."
      CSD U3 Sprites shapeColor_markdown_instruction: "# shapeColor\\r\n\\r\n**shapeColor:**\nAnother useful property is ![](https://images.code.org/538b61640803ec3b333d7cb2d9a162f5-image-1466050497196.14.46\nPM.png) which can be used to change the color of the sprite. It can be assigned\nvalues in different ways. For example, you could use the name of a color\\r\n\\r\n<img\nsrc=\"https://images.code.org/e5ffaee2a40c1690958b5c35a1d74719-image-1466086033266.06.45\nAM.png\" style=\"height:30px\">\\r\n\\r\nor you can use the rgb block\\r\n\\r\n<img\nsrc=\"https://images.code.org/670af2867af02830979ff95356ba87d6-image-1488480027884.39.53\nPM.png\" style=\"height:30px\">\\r\n\\r\nTo make it easier to program with blocks,\n**when you drag a sprite property onto its own line it will automatically\nbe placed inside an \"=\" block.**\\r\n\\r\n<img src=\"https://images.code.org/9790f3285269e9cf909fb820679a472e-image-1466091972429.46.00\nAM.png\" style=\"float:right;width:150px\">\\r\n\\r\n# Do This\\r\n\\r\nThis program\ncreates two sprites and places them on the screen. Currently they are still\ngray.\\r\n\\r\n* Beneath the \"Setting Properties\" comment add code to **set\nthe shapeColor of these two sprites**\\r\n\\t* Make sure you use dot notation\ncorrectly. Use the code already written as a guide.\\r\n    * Try assigning\none sprite a **named color** and another sprite a color using the **rgb block**.\\r\n*\nYour finished work should look something like the image to the right."
      CSD U3 Sprites sprites vs rects_markdown_instruction: "# Sprites vs. Rectangles\\r\n\\r\nSprites\nmay seem a lot like fancy rectangles right now. In time you'll see that sprites\nare **much more powerful**. But for now, there's one key difference you need\nto know about.\\r\n\\r\nSprites have an `x` and a `y` location just like a rectangle.\nThe key difference is that **a sprite's `x` and `y` are in the middle of\nthe sprite, not the top left corner**. \\r\n\\r\n\\r\n# Do This\\r\n\\r\n<img src=\"https://images.code.org/b1b38266c674e43687148a1ec4fd8e82-image-1466007512332.17.59\nAM.png\" style=\"float:right; width:200px\">\\r\n\\r\nThis program creates a\nred sprite and a green rectangle that are the same size and have the same\n`x` and `y`. **The sprite does not cover the rectangle since its `x` and `y`\nare at its center**.\\r\n\\r\n* Change the `x` and `y` properties of the sprite\nso that it entirely covers the green rectangle.\\r\n* When your program works\ncorrectly, it should draw the image to the right."
      CSD U3 Sprites text debug-2018_markdown_instruction: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float: right; width: 200px; margin-left: 20px;\">\\r\n# Debug\\r\n\\r\nThis\nscene has all the right code, but it's not in the right order. The scene\nshould look like the image to the right.  Can you reorder the blocks so that\neach part of the scene is drawn in the correct order?"
      CSD U3 Sprites text debug_markdown_instruction: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float: right; width: 200px; margin-left: 20px;\">\\r\n# Debug\\r\n\\r\nThis\nscene has all the right code, but it's not in the right order. The scene\nshould look like the image to the right.  Can you reorder the blocks so that\neach part of the scene is drawn in the correct order?"
      CSD U3 Sprites text debug_2018_markdown_instruction: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float: right; width: 200px; margin-left: 20px;\">\\r\n# Debug\\r\n\\r\nThis\nscene has all the right code, but it's not in the right order. The scene\nshould look like the image to the right.  Can you reorder the blocks so that\neach part of the scene is drawn in the correct order?"
      CSD U3 Sprites text_markdown_instruction: "# Adding Text\\r\n\\r\nYou can put\ntext anywhere you'd like on the screen using `text`. Change the displayed\ntext in the provided code, then add a second `text` to write in a different\npart of the screen.\\r\n\\r\n_Tip: The default text size is pretty small, but\nyou can use the `textSize` block to change that. You can also use `fill` to\nchange the color of your text._"
      CSD U3 Sprites text_2018_markdown_instruction: "# Adding Text\\r\n\\r\nYou can\nput text anywhere you'd like on the screen using `text`. Change the displayed\ntext in the provided code, then add a second `text` to write in a different\npart of the screen.\\r\n\\r\n_Tip: The default text size is pretty small, but\nyou can use the `textSize` block to change that. You can also use `fill` to\nchange the color of your text._"
      CSD U3 Sprites width and height_markdown_instruction: "# Setting Properties\\r\n\\r\nYou\nare going to start programming with **sprites**. A sprite is made up of many\npieces of information called **properties**. The ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16\nAM.png) command can be called whenever you like. It uses the properties of\nyour sprites to draw them all at once.\\r\n\\r\nSprites have **lots and lots\nof properties** but to get started let's just look at three.\\r\n\\r\n![](https://images.code.org/4d0f35bc60aa9d1c80e6dda4db16abc4-image-1466004005360.19.30\nAM.png)\\r\n\\r\n<img src=\"https://images.code.org/cb14a5f6add86bf3c0bcf12901366794-image-1466004148640.22.16\nAM.png\" style=\"float:right; width:200px\">\\r\n# Do This\\r\n\\r\nThis program\ncreates a sprite and gives it the label `mySprite`. Then it sets the properties\n`shapeColor`, `x`, and `y` of the sprite. When `drawSprites` is called, this\ninformation is used to draw the sprite in the correct location and color.\\r\n\\r\n*\n**Change the values given to each property** so that:\\r\n\\t* The sprite is\nnow in the bottom right corner of the screen\\r\n    * The sprite is \"orange\"\nrather than \"red\""
      CSD U3 Sprites width height_markdown_instruction: "# Width and Height\\r\n\\r\nWhen\nyou create a sprite, it is automatically set up with all its properties having\ndefault values. If you know the names of these properties, you can use dot\nnotation to change them. This will change the way your sprite looks when you\ndraw it.\\r\n\\r\nHere are two new properties:\\r\n\\r\n![](https://images.code.org/158421dbb4f9640ee852d994d2b4a7d6-image-1466006293357.40.26\nAM.png)\\r\n\\r\nBy default each sprite starts with a width and height of 100.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program creates a sprite and sets its `x`, `y`, and `shapeColor`\nproperties.\\r\n\\r\n* Use the new `width` and `height` properties to make the\nsprite fill up most of the screen.\\r\n* Make sure you're using dot notation\ncorrectly.\\r\n* **Note:** If you drag the property block onto a new line it\nwill change to include the `=` command automatically.\\r\n\\r\n![](https://images.code.org/77d0a16f19a2a7b2c2f1f6b88cda17b3-image-1466006474149.41.53\nAM.png)"
      CSD U3 UP_ARROW-2018_markdown_instruction: "# Moving Sprites\\r\n\\r\nYou can\nchange your sprite's position based on key presses in the same way you changed\nits animations.\\r\n\\r\n# Do This\\r\n\\r\n* Add an `if` statement inside your\ndraw loop.\\r\n* Check whether the right arrow key has been pressed down.\\r\n*\nAdd code inside the conditional to move the sprite right if the right arrow\nis down.\\r\n\\r\n_Do you need to change sprite's x or y property to move it\nright?_"
      CSD U3 UP_ARROW_markdown_instruction: "# Moving Sprites\\r\n\\r\nYou can change\nyour sprite's position based on key presses in the same way you changed its\nanimations.\\r\n\\r\n# Do This\\r\n\\r\nYou have been provided with the start\nof a bug sprite. You need to pick the bug picture you want to use from the\nanimation tab.\\r\n\\r\n* Set the animation of the sprite to your favorite bug.\\r\n*\nAdd an if statement inside your draw loop.\\r\n* Add a call to keyDown as the\ninput to the if statement to check if the up arrow was pressed.\\r\n* Add code\ninside the conditional to move the sprite up if the up arrow is down.\\r\n\\r\n_Do\nyou need to change sprite's x or y property to move it up?_\\r\n\\r\n\\r\n\\r\n"
      CSD U3 UP_ARROW_2018_markdown_instruction: "# Moving Sprites\\r\n\\r\nYou can\nchange your sprite's position based on key presses in the same way you changed\nits animations.\\r\n\\r\n# Do This\\r\n\\r\n* Add an `if` statement inside your\ndraw loop.\\r\n* Check whether the right arrow key has been pressed down.\\r\n*\nAdd code inside the conditional to move the sprite right if the right arrow\nis down.\\r\n\\r\n_Do you need to change sprite's x or y property to move it\nright?_"
      CSD U3 Variable Arithmetic pt2_markdown_instruction: "# Variable Arithmetic\nPt2\\r\n\\r\nAs we saw in the last level, **you can add, subtract, multiply,\nor divide** your variable **without changing its value**. The only time a\nvariable's value will change is when you use the `=` or **gets** command.\\r\n\\r\nTry\nanother example highlighting another common misconception.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the program provided\\r\n* **Predict:** What two numbers will get displayed?\nWhy? **Explain your reasoning to a neighbor**.\\r\n* Run the program. Were\nyou surpised by what happened? **Compare notes with a neighbor**."
      CSD U3 Variable Arithmetic_markdown_instruction: "# Variable Arithmetic\\r\n\\r\nYou\ncan use the values stored in a variable to perform **addition, subtraction,\nmultiplication, and division**. Let's have a look at some common misconceptions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the program provided\\r\n* **Predict:** what will displayed\nwhen you run the program? Why? **Explain your reasoning to a neighbor**.\\r\n*\nRun the program. Were you surpised by what happened? **Compare notes with\na neighbor**."
      CSD U3 Variable Incrementation pt2_markdown_instruction: "# Variable Reassignment\\r\n\\r\nThis\nexample is starting to get a little more complex. Work through it with a partner.\nWhy do you get the output you do?\\r\n\\r\n# Do This\\r\n\\r\n* Read the program\nprovided\\r\n* **Predict:** What two numbers will get displayed? Why? **Explain\nyour reasoning to a neighbor**.\\r\n* Run the program. Were you surpised by\nwhat happened? **Compare notes with a neighbor**."
      CSD U3 Variable Incrementation_markdown_instruction: "# Variable Incrementation\\r\n\\r\nTo\n**increment** something means to add something to a value. In programming\nif you want to increase or increment the value in a variable you need to use\nthe **gets** command to store the new value.\\r\n\\r\nAs you work through this\nexample try to discuss with your partner, **What's the difference between\nthe left side and the right side of the `=` command?**\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the program provided\\r\n* **Predict:** What two numbers will get displayed?\nWhy? **Explain your reasoning to a neighbor**.\\r\n* Run the program. Were\nyou surpised by what happened? **Compare notes with a neighbor**."
      CSD U3 Variables CHALLENGE gamelab gary_markdown_instruction: "# Challenge:\nVariables and Game Lab Gary\\r\n\\r\n* You've been provided code that draws\na simple version of Game Lab Gary\\r\n* **Use variables to animate Gary**.\nHow can you extend them?\\r\n* [[Question that leads towards incrementation]]"
      CSD U3 Variables Challenge_markdown_instruction: "# Challenge: Updating Variables\\r\n\\r\n_Check\nwith your teacher before tackling this challenge level._\\r\n\\r\nSo far we've\nonly ever assigned a value to a variable once, but did you know you can update\na variable during a program?  Read through the example program we've provided,\nrun it a few times to understand how it works, and then attempt to modify\nthe program to draw one of the following images.\\r\n\\r\n\\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n"
      CSD U3 Variables Challenge_2018_markdown_instruction: "# Challenge: Updating\nVariables\\r\n\\r\n_Check with your teacher before tackling this challenge level._\\r\n\\r\nSo\nfar we've only ever assigned a value to a variable once, but did you know\nyou can update a variable during a program?  Read through the example program\nwe've provided, run it a few times to understand how it works, and then attempt\nto modify the program to draw one of the following images.\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px; border: 1px solid grey; margin:20px;\">\\r\n"
      CSD U3 Variables Draw Challenge_markdown_instruction: "# Challenge: Draw an\nImage\\r\n\\r\n_Check with your teacher before tackling this challenge level._\\r\n\\r\nUsing\nvariables, draw an image where many of the items rely on a common variable\nfor size or placement. For example, draw a face with variables controlling\nthe size and/or placement of both eyes, ears, and nostrils. Once you have\nyour drawing completed, try changing the values of your variables to make\nsure that the whole image changes together.\\r\n"
      CSD U3 Variables Draw Challenge_2018_markdown_instruction: "# Challenge: Draw\nan Image\\r\n\\r\n_Check with your teacher before tackling this challenge level._\\r\n\\r\nUsing\nvariables, draw an image where many of the items rely on a common variable\nfor size or placement. For example, draw a face with variables controlling\nthe size and/or placement of both eyes, ears, and nostrils. Once you have\nyour drawing completed, try changing the values of your variables to make\nsure that the whole image changes together.\\r\n"
      CSD U3 Variables Draw Poppy_markdown_instruction: "# Using a Variable Many\nTimes\\r\n\\r\nThis program has only one variable called `petalSize` but it\nuses it 8 different times. This makes it easy to quickly make lots of changes\nto how your picture is drawn.\\r\n\\r\n# Do This\\r\n\\r\n* Change the number\nassigned to `petalSize` so the red petals touch one another.\\r\n* Try to find\nthe size that makes the most sense. Compare your answer with someone around\nyou."
      CSD U3 Variables Draw Poppy_2018_markdown_instruction: "# Using a Variable\nMany Times\\r\n\\r\nThis program has only one variable called `petalSize` but\nit uses it 8 different times. This makes it easy to quickly make lots of changes\nto how your picture is drawn.\\r\n\\r\n# Do This\\r\n\\r\n* Change the number\nassigned to `petalSize` so the red petals touch one another.\\r\n* Try to find\nthe size that makes the most sense. Compare your answer with someone around\nyou."
      CSD U3 Variables Initialize_markdown_instruction: "# Using a Variable's Value\\r\n\\r\nThis\nprogram creates a variable called `size`. You will need to **assign it a value**.\nIt will then be used to set the size of a square on the screen.\\r\n\\r\n# Do\nThis\\r\n\\r\n* **Assign the variable `size` a value** and run the program to\nsee how its value is used\\r\n* **Change the value** and rerun the program\nto see how it affects the output of your program."
      CSD U3 Variables Intro_markdown_instruction: "# Your first variable\\r\n\\r\nThe\n`var` command **creates a new variable**. You only need to use it once with\neach variable you create.\\r\n\\r\n# Do This\\r\n\\r\n* Create a new variable\nwith a **name of your choosing**, as shown in the starter code."
      CSD U3 Variables Predict Where X Embed_markdown_instruction: "# Predict\\r\n\\r\nIn\nwhich corner of the screen will the circle be drawn?"
      CSD U3 Variables Predict Where X_markdown_instruction: "# Using Variables\\r\n\\r\nIn\nthis program, the variable `xPosition` is used to store the x-coordinate of\nthe circle.\\r\n\\r\n# Do This\\r\n* Run the program to see how it works.\\r\n*\nChange the number that is stored into the variable ([Show me where](#triggercallout=code_triggered))\nand run the code again."
      CSD U3 Variables Predict Where XY Embed_markdown_instruction: "# Predict\\r\n\\r\nIn\nwhich corner of the screen will the circle be drawn?\\r\n\\r\n_Hint: Click the\n\"Show grid\" box to help you find the exact coordinates on the screen._"
      CSD U3 Variables Predict Where XY Embed_2018_markdown_instruction: "# Predict\\r\n\\r\nIn\nwhich corner of the screen will the circle be drawn?\\r\n\\r\n_Hint: Click the\n\"Show grid\" box to help you find the exact coordinates on the screen._"
      CSD U3 Variables Predict Where X_2018_markdown_instruction: "# Using Variables\\r\n\\r\nIn\nthis program, the variable `xPosition` is used to store the x-coordinate of\nthe circle.\\r\n\\r\n# Do This\\r\n* Run the program to see how it works.\\r\n*\nChange the number that is stored into the variable ([Show me where](#triggercallout=code_triggered))\nand run the code again."
      CSD U3 Variables Random_markdown_instruction: "# Variables random values\\r\n\\r\nYou\ncan use a variable to store a **randomly generated number**.\\r\n\\r\n# Do This\\r\n\\r\n*\nIn the starter code a variable is **initialized with a random number** and\nthen **displayed twice**\\r\n* **Predict:** Will the value displayed change\nbetween the two `console.log` statements?\\r\n* Run the program. Was your prediction\ncorrect? Were you surprised?\\r\n* **Compare notes with a neighbor**"
      CSD U3 Variables Reassign Predict_markdown_instruction: "# Make a Prediction\n\nThis\nprogram **creates a variable** and then sets its value twice in a row. **What\nvalue will be displayed when the console.log() statement runs?**\n\n![](https://images.code.org/0375d4215c5cc4b937c9333390deb81c-image-1460404063955.47.09\nPM.png)\n\n**Once you've submitted your answer be prepared to discuss your\nreasoning with your classmates.**\n"
      CSD U3 Variables Reassign pt2_markdown_instruction: "# Creating and assigning\nin one line\\r\n\\r\nYou can use `var` and `=` in a single line to **assign\na value to a variable as soon as it is created**, for example: `var size =\n10;`\\r\n\\r\n# Do This\\r\n\\r\n* **Create a new variable and assign it a value**\nin a single line."
      CSD U3 Variables Reassign_markdown_instruction: "# Assiging a Variable\\r\n\\r\nVariables\n**store a single piece of information that can change throughout your program**.\nThe `=` command gives a variable a new value.\\r\n\\r\nYou read the command\n`size = 10;` as \"size gets the value 10\". You can also say \"size gets 10\".\\r\n\\r\n#\nDo This\\r\n\\r\n**Use the `=` command** to assign a value to the variable `numberOfDogs`"
      CSD U3 Variables Square Random Loop_markdown_instruction: "# Random Values\nand the Draw Loop\\r\n\\r\nIn the last level you should have **made a prediction**\nabout the difference between two programs. They are both available here, with\nthe second one commented out.\\r\n\\r\n# Do This\\r\n\\r\n* Run the first program\\r\n*\n**Comment out** the first program and **uncomment** the second program\\r\n*\nRun the second program\\r\n* **Compare what you observed to your prediction.\nDiscuss the results with a neighbor**"
      CSD U3 Variables Square Random_markdown_instruction: "# Variables and Random\nDrawing\\r\n\\r\nVariables can be used to **store a randomly generated value**\nthat you want to use many times in your program.\\r\n\\r\n# Do This\\r\n\\r\n*\nAssign size a **random number between 1 and 200**.\\r\n* **Run the program\nmultiple times**\\r\n* **Discuss with a neighbor:** Can you explain why the\nprogram always drawing a square?"
      CSD U3 Variables Square_markdown_instruction: "# Variables and Drawing\\r\n\\r\nVariables\nallow you to **use the same value multiple times in your program**. If a value\nwill always be used many times in a program it is really useful to place that\nvalue in a variabnle. This lets you **quickly change the same value at many\nplaces in your program**. It also can make move obvious **how that value is\nused**.\\r\n\\r\n# Do This\\r\n\\r\n* Change the value that `size` is initialized\nto so that the program draws a **larger square**"
      CSD U3 Variables TEMPLATE square_markdown_instruction: "# Drawing with Variables\\r\n\\r\n**Get\nexcited because you're about to see your first variable used in a program!**\nThis program uses a variable in three separate ways.\\r\n\\r\n* `var size;`\nCreates a new variable with the label size\\r\n* `size = 50;` Assigns the value\n50 to size\\r\n* `rect(200, 200, size, size);` Uses the value in size to draw\na rectangle with equal width and height.\\r\n\\r\n# Do This\\r\n\\r\n* Run the\nprogram once to see how it works\\r\n* **Change the value assigned to size\nin line 2** and rerun the program to see what changed."
      CSD U3 Variables change circle size_markdown_instruction: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\" style=\"float:right; height:150px\">\\r\n\\r\n# Debug: Using Variables\\r\n\\r\nThis\nprogram uses the variable `circleSize` to control the width and height of\na circle.  If you make the circle big enough, it will fill up the entire screen,\nas in the picture on the right.\\r\n\\r\n# Do This\\r\n\\r\n* Change the value\nassigned to `circleSize` so that the circle takes up the entire screen."
      CSD U3 Variables change circle size_2018_markdown_instruction: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\" style=\"float:right; height:150px\">\\r\n\\r\n# Debug: Using Variables\\r\n\\r\nThis\nprogram uses the variable `circleSize` to control the width and height of\na circle.  If you make the circle big enough, it will fill up the entire screen,\nas in the picture on the right.\\r\n\\r\n# Do This\\r\n\\r\n* Change the value\nassigned to `circleSize` so that the circle takes up the entire screen."
      CSD U3 Variables create and assign_markdown_instruction: "# Create and Assign\\r\n\\r\nWhen\nyou create a new variable you will often want to assign it a value right away.\nYou can **create and assign a value** to a variable in a single command as\nshown below.\\r\n\\r\n![](https://images.code.org/2110bcf19415401434a876503ddecab5-image-1462472203840.16.37\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nThis program needs you to **create and assign\na value to the variable `size`** in order to draw a square.\\r\n\\r\n* Use the\nblock shown above to create the rectangle and assign it a value in a single\nline of code.\\r\n\\r\n"
      CSD U3 Variables draw loop newVars_markdown_instruction: "# Keep going!\\r\n\\r\n**Keep\nusing the patterns we just explored to build your own visualization**\\r\n\\r\n#\nDo This\\r\n\\r\n* Extend your project to create a **personal randomized piece\nof art**\\r\n* Some techniques you might try:\\r\n\\t* Use **new shapes** like\n`rect`, `regularPolygon`, or `line`\\r\n    * Use **variables in unexpected\nways**, (e.g. `red` also controls the size of your ellipse)\\r\n    * Create\n**new variables** to control new parts of your program\\r\n    * Pick **new\nranges** for your random values\\r\n    * Switch which variables are assigned\nvalues **inside or outside the draw loop**"
      CSD U3 Variables draw loop rgb_markdown_instruction: "# Using variables in\nthe draw loop\\r\n\\r\nNow try randomizing the `red`, `green`, and `blue` variables.\nTry setting their values to random numbers **before the draw loop** or **inside\nthe draw loop** like you did with `x1` and `y1` in the previous level.  \\r\n\\r\n#\nDo This\\r\n\\r\n* Randomize the values of `red`, `green`, and `blue`, changing\nsome **before the draw loop** and some **inside the draw loop**\\r\n* Find\na visual effect you really like and share with a neighbor before moving on"
      CSD U3 Variables draw loop xy_markdown_instruction: "# Using variables in the\ndraw loop\\r\n\\r\nAs you saw in the last example, **you can update a value\nrepeatedly within the draw loop**. Using this allows you to redraw an image\nwith random changes every time. By storing these random values in a variable\nyou can **use the same random value multiple times**.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd to the starter code provided so that the variables `x1` and `y1` are updated\nrandomly in the draw loop.\\r\n* Use these values to redraw the ellipses at\nrandom locations."
      CSD U3 Variables eyeBrows_markdown_instruction: "# Create Your Own\\r\n\\r\nThe\npattern you just saw is very common. The steps were:\\r\n\\r\n* **Create** a\nvariable **outside** the draw loop\\r\n* **Assign** the variable a new value\n**inside** the draw loop\\r\n* **Use** the new value **inside** the draw loop\nto draw the current frame\\r\n\\r\nLet's see if you can put together everything\nyou've done so far to use this pattern yourself.\\r\n\\r\n# Do This\\r\n\\r\nYou\nwill be adding **eyebrows that move up and down together** to your smiley\nface.\\r\n\\r\n* **Create** a variable **outside** the draw loop with a good\nlabel. Remember this variable will control **the height of the eyebrows**\\r\n*\n**Assign** your variable a new random value **inside** your draw loop\\r\n*\n**Use** your value inside the draw loop to create **two new ellipses**. The\nvalue in your variable should control the height\\r\n\\r\n**Hints and Tips:**\\r\n\\r\n*\nThe x values of your eyes can help you line up your eyebrows. \\r\n* Don't\nbe afraid to work **iteratively** here (that means try something and keep\nimproving). It's ok to have something not work the first time.\\r\n* Talk\nwith a neighbor if you're having trouble, or go check your work from earlier\nin the lesson.\\r\n\\r\n![](https://images.code.org/05e5ea214c8ccc37fc8dd4223569602a-image-1462474590368.gif)"
      CSD U3 Variables make a big square_markdown_instruction: "# Replacing Labels\nwith Values \\r\n\\r\nThe last command in the program you just ran is:\\r\n\\r\n\\tconsole.log(size);\\r\n\\r\nBut\nthe output you saw was\\r\n\\r\n\\t10\\r\n    \\r\nThe reason is that **variables\nare replaced with their values before running almost all commands.** The only\nexceptions are the commands `var size` and `size = `.\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram is very similar to the one you just ran, except now you'll be using\na variable to draw. **Can you fill the entire screen?**\\r\n\\r\n* **Predict**\nwhat this program will do.\\r\n\\t* Does it generate an error? What will it\ndraw?\\r\n* **Run** the program and check your prediction.\\r\n* **Change the\nvalue** assigned on line 2 so that **the rectangle drawn fills the whole screen**.\\r\n\\r\n"
      CSD U3 Variables make a square_markdown_instruction: "# Drawing with Variables\\r\n\\r\nA\n**variable** is a named piece of information in a program. You can think of\nit as a **label** that identifies a **value** that we wish to use and update\nmany times in our programs. In the previous lesson, you learned two important\ncommands with variables.\\r\n\\r\n\\tvar size;        // Creates a new label\n(or variable) called size\\r\n    size = 10;       // size \"gets\" 10. The\nlabel score is now connected to the value 10\\r\n    \\r\nOnce these connections\nhave been formed, we can use them to make much more interesting drawings and\nanimations.\\r\n\\r\n# Do This\\r\n\\r\nThis program creates a variable called\n`size` and assigns it the value `10`. These two commands are familiar, but\nline 3 should look new to you. What do you think will happen?\\r\n\\r\n* **Predict**\nwhat this program will do.\\r\n\\t* Does it generate an error? Output some text?\nOutput a value? Why do you think so?\\r\n* **Run** the program and check your\nprediction.\\r\n* **Change the value** that size \"gets\" on line 2 and re-run\nyour program. Notice anything?"
      CSD U3 Variables multiple assignments_markdown_instruction: "# Multiple Assignments\\r\n\\r\nA\nvariable contains a single piece of information called its **value**. To tell\nvariables apart each one has a **label** or name. In your last program, the\nvariable had the label `size` and originally had a value of `10`. **Here's\nhow each command you just saw works**\\r\n\\r\n![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32\nPM.png) **Create a new variable** with the label `size`\\r\n\\r\n![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43\nPM.png) **Assign the value `10`** to the variable `size`\\r\n\\r\n![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53\nPM.png) **Use the value in `size`** as the width and height of the rectangle.\n(Since they're the same we end up with a square)\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram is similar to the first but it assigns multiple values to `size` before\ndrawing the rectangle.\\r\n\\r\n* **Run the program once** to see how it works\\r\n*\n**One at a time change the values assigned to `size` in lines 2-4 and rerun\nthe program** \\r\n* **Discuss / Reflect:**\\r\n\\t* Which lines is changing\nthe rectangle drawn? How can you tell?\\r\n    * Can you explain what you're\nseeing?"
      CSD U3 Variables naming rules v2-2018_markdown_instruction: "<img style=\"float:\nright\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38\nAM.png\">\\r\n# Debug: Naming Variables\\r\n\\r\nThis program has multiple errors\ncaused by bad label names.  The errors prevent the program from being viewed\nin block mode, so the code is in text.\\r\n\\r\n# Do This\\r\n\\r\n* Find the\nrule each variable label violates.\\r\n* **Correct the errors by picking new\nnames that follow the rules you learned in the last level.**\\r\n* If your\nprogram works it should draw the image on the right.\\r\n\\r\n<summary><em>Hint:\nClick the arrow for a quick review of the rules.</em><details><ul>\\r\n<li>Labels\ncan't have spaces.</li>\\r\n<li>Labels can't start with a number.</li>\\r\n<li>Capitalization\nand spelling must be exactly the same.</li>\\r\n</ul></details></summary>"
      CSD U3 Variables naming rules v2_markdown_instruction: "<img style=\"float:\nright\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38\nAM.png\">\\r\n# Debug: Naming Variables\\r\n\\r\nThis program has multiple errors\ncaused by bad label names.  The errors prevent the program from being viewed\nin block mode, so the code is in text.\\r\n\\r\n# Do This\\r\n\\r\n* Find the\nrule each variable label violates.\\r\n* **Correct the errors by picking new\nnames that follow the rules you learned in the last level.**\\r\n* If your\nprogram works it should draw the image on the right.\\r\n\\r\n<summary><em>Hint:\nClick the arrow for a quick review of the rules.</em><details><ul>\\r\n<li>Labels\ncan't have spaces.</li>\\r\n<li>Labels can't start with a number.</li>\\r\n<li>Capitalization\nand spelling must be exactly the same.</li>\\r\n</ul></details></summary>"
      CSD U3 Variables naming rules v2_2018_markdown_instruction: "<img style=\"float:\nright\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38\nAM.png\">\\r\n# Debug: Naming Variables\\r\n\\r\nThis program has multiple errors\ncaused by bad label names.  The errors prevent the program from being viewed\nin block mode, so the code is in text.\\r\n\\r\n# Do This\\r\n\\r\n* Find the\nrule each variable label violates.\\r\n* **Correct the errors by picking new\nnames that follow the rules you learned in the last level.**\\r\n* If your\nprogram works it should draw the image on the right.\\r\n\\r\n<summary><em>Hint:\nClick the arrow for a quick review of the rules.</em><details><ul>\\r\n<li>Labels\ncan't have spaces.</li>\\r\n<li>Labels can't start with a number.</li>\\r\n<li>Capitalization\nand spelling must be exactly the same.</li>\\r\n</ul></details></summary>"
      CSD U3 Variables naming rules_markdown_instruction: "# Choosing Labels\\r\n\\r\nGood\nlabels **indicate how the variable will be used in the program**. The label\n`size` is a good choice for a variable that controls the size of something.\nYou could always choose `potato` or `s`, but confusing or unclear names make\nyour program hard to read for you and others.\\r\n\\r\nThere are a **few rules**\nwhen choosing labels:\\r\n\\r\n* Labels **cannot include spaces**. For example,\n`size of rectangle` would generate an error.\\r\n* Labels with multiple words\ncan be easier to read in **camelCase**. CamelCase looks like `sizeOfRectangle`\nor `aReallyLongLabelName`\\r\n* Labels **cannot begin with a number**. `4sides`\nand `2morrow` will generate errors.\\r\n* Be very careful with **spelling**.\\r\n*\nLabels are **case-sensitive**. `size` is not the same as `Size` or `SIZE`.\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/39340782150ad1635f6274f6edadb114-image-1462314883756.34.32\nPM.png\" style=\"float:right; height:200px\"> \\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram has multiple errors caused by bad label names.\\r\n\\r\n* **Correct\nthe errors by picking new names that follow the rules listed above.**\\r\n*\n**Note:** The errors prevent the program from being viewed in block mode.\\r\n*\nIf your program works it should draw the image on the right.\\r\n\\r\n"
      CSD U3 Variables random assignment_markdown_instruction: "# Random Assignment\\r\n\\r\nVariables\nare really helpful when you want to **store a number that you'll use many\ntimes in your program**. For example, if you generate a random number you\ncould store it in a variable so that you can use that same random number as\nmany times as you wish, like this.\\r\n\\r\n\\tvar randomSize;                     //\nCreate variable randomSize\\r\n    randomSize = randomNumber(10,100);  // randomSize\n\"gets\" a randomly generated number between 10 and 100\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram **assigns a random number** to `eyeSize` on line 1. It's already\nbeing used to change the size of one of the eyes on the smiley face, but not\nthe other. **Can you get both eyes to always be the same random size?**\\r\n\\r\n*\n**Run the program** to see how it works\\r\n* **Change the program** so that\nboth eyes are always the same random size. Check line 12 if you need some\nhelp.\\r\n\\r\nNote: Read the documentation about the `arc` command if you want\nto know more about how the mouth on the smiley was made."
      CSD U3 Variables random draw loop_markdown_instruction: "# Variables and the\nDraw Loop\\r\n\\r\nYou already know that draw loop **runs over and over again\nso long as your program is running**. If you assign a value to a variable\noutside the draw loop it will not change while the draw loop runs. If your\nassignment happens **inside the draw loop the variable will be constantly\nupdated, once for each time the loop runs**. \\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram draws a smiley face with randomly sized eyes. You are going to **move\nthe assignment of `eyeSize` inside of the draw loop, but first...**\\r\n\\r\n*\n**Run the program** without making changes to remind yourself how it works\\r\n*\n**Predict what will happen** when you move the assignment statement inside\nthe draw loop\\r\n* **Move the assignment inside the draw loop** and run your\nprogram\\r\n* **Discuss / Reflect:**\\r\n\\t* Was your prediction correct?\\r\n    *\nCan you explain what you see?\\r\n    * Try changing the range of random values\nto get a different effect."
      CSD U3 Variables random drawing exemplar_markdown_instruction: "# Exemplar:\nRandom Drawing\\r\n\\r\nTo practice using **variables with the draw loop** you\nwill be building your own **randomized art project**. Check out the exemplar\nto see one possible outcome. Then move on to get started building your own."
      CSD U3 Variables random with assignment_markdown_instruction: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n# Debug: Variables and Random Numbers\\r\n\\r\nVariables\ncan be assigned a random number too. This lets you save a single random value\nso that you can use it as many times as you want in your program.\\r\n\\r\n#\nDo This\\r\n\\r\n`eyeSize` is assigned a random number. Unfortunately only one\nof the eyes is currently using it.\\r\n\\r\n* **Run the program** to see how\nit works.\\r\n* **Change the program** so that both eyes are always the same\nrandom size. Hint: you'll only need to make changes to one line of code."
      CSD U3 Variables random with assignment_2018_markdown_instruction: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\r\n\\r\n# Debug: Variables and Random Numbers\\r\n\\r\nVariables\ncan be assigned a random number too. This lets you save a single random value\nso that you can use it as many times as you want in your program.\\r\n\\r\n#\nDo This\\r\n\\r\n`eyeSize` is assigned a random number. Unfortunately only one\nof the eyes is currently using it.\\r\n\\r\n* **Run the program** to see how\nit works.\\r\n* **Change the program** so that both eyes are always the same\nrandom size. Hint: you'll only need to make changes to one line of code."
      CSD U3 Variables use value rect_markdown_instruction: "# Using a Variable's\nValue\\r\n\\r\nThis program creates a variable called `size`. You will need\nto **assign it a value**. It will then be used to set the size of a square\non the screen.\\r\n\\r\n# Do This\\r\n\\r\n* **Assign the variable `size` a value**\nand run the program to see how its value is used\\r\n* **Change the value**\nand rerun the program to see how it affects the output of your program."
      CSD U3 Variables write_markdown_instruction: "# Displaying a Variable's Value\\r\n\\r\nOften\nyou want to see the exact value contained in a variable, especially if it\nwas randomly generated. Both `console.log` and `text` can be used with variables\nto specifically see their values. This is an important skill when **debugging**\nyour programs.\\r\n\\r\n# Do This\\r\n\\r\nThis program uses a variable `size`\nto draw a square with a randomly generated value.\\r\n\\r\n* **Use the `text`\ncommand** to display the value of `size` on the screen.\\r\n* **Use the `console.log`\ncommand** to display the value of `size` in the debug console."
      CSD U3 Variables2 expressions in commands_markdown_instruction: "# Expressions\ninside commands\\r\n\\r\n**When your computer sees an expression in a program\nit will calculate its value before using it**. This means you can even use\nexpressions in unexpected places, like inside drawing commands.\\r\n\\r\n\\tstrokeWeight(4\n* 5);\\r\n    rect(10 + 10, 5 * 50, 30, 30);\\r\n    \\r\nNotice that the commas\nstill separate each expression. This is just further evidence that **even\nthough an expression may have multiple parts, it will eventually get treated\nas a single value.**\\r\n\\r\n# Do This\\r\n\\r\nTry writing more complex expressions\ninside of the drawing commands provided."
      CSD U3 Variables2 expressions in variables_markdown_instruction: "# Do This\\r\n\\r\n*\nUse the `=` (assignment operator) to store the value of each expression in\na variable\\r\n* Use `console.log` to display each value\\r\n* Repeat the pattern\nwith some expressions of your own. What do you want to calculate?"
      CSD U3 Variables2 expressions_markdown_instruction: "# Do This\\r\n\\r\n* Place\neach expression inside of a `console.log` command to display their results\\r\n*\nWhat other expressions can you make? Try writing 3 of your own.\\r\n"
      CSD U3 Watcher Debug_markdown_instruction: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Debug: Watching the Counter\nPattern\\r\n\\r\nLet's practice using watchers to debug your code. This program\nshould move the motorcycle from the bottom left to the top right, like the\nimage to the right. Unfortunately the motorcycle moves off screen too quickly\nto see what's going wrong.\\r\n\\r\nUsing the provided watchers for `cycle.x`\nand `cycle.y`, figure out which one is moving in the wrong direction and fix\nthe program."
      CSD U3 Watcher Debug_2018_markdown_instruction: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float: right; margin-left: 20px;\">\\r\n\\r\n# Debug: Watching the Counter\nPattern\\r\n\\r\nLet's practice using watchers to debug your code. This program\nshould move the motorcycle from the bottom left to the top right, like the\nimage to the right. Unfortunately the motorcycle moves off screen too quickly\nto see what's going wrong.\\r\n\\r\nUsing the provided watchers for `cycle.x`\nand `cycle.y`, figure out which one is moving in the wrong direction and fix\nthe program."
      CSD U3 Watcher Predict response_markdown_instruction: "# Watching the Counter\nPattern\\r\n\\r\nWatchers are a really useful tool for debugging programs that\nuse the counter pattern.\\r\n\\r\n* **Read the program** and predict what the\nprogram will do.\\r\n* **Run the program** to check your prediction.\\r\n* **Look\nat the watchers** and explain to a neighbor what you are seeing.\\r\n\\r\n"
      CSD U3 Watcher Predict response_2018_markdown_instruction: "# Watching the\nCounter Pattern\\r\n\\r\nWatchers are a really useful tool for debugging programs\nthat use the counter pattern.\\r\n\\r\n* **Read the program** and predict what\nthe program will do.\\r\n* **Run the program** to check your prediction.\\r\n*\n**Look at the watchers** and explain to a neighbor what you are seeing.\\r\n\\r\n"
      CSD U3 abstraction accelerateX_markdown_instruction: "# Velocity and the Counter\nPattern\\r\n\\r\nAs you just saw, using a `sprite.velocityX` property with the\ncounter pattern will change a sprite's velocity during the program. This\nmakes the sprite speed up. Do a little practice using this pattern yourself.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program already makes a car move across the screen, but\nit's going very slowly.\\r\n\\r\n* Use the counter pattern with the sprite's\nvelocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered)\n)"
      CSD U3 abstraction accelerateX_2018_markdown_instruction: "# Velocity and the\nCounter Pattern\\r\n\\r\nAs you just saw, using a `sprite.velocityX` property\nwith the counter pattern will change a sprite's velocity during the program.\nThis makes the sprite speed up. Do a little practice using this pattern yourself.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program already makes a car move across the screen, but\nit's going very slowly.\\r\n\\r\n* Use the counter pattern with the sprite's\nvelocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered)\n)"
      CSD U3 abstraction accelerateY up_markdown_instruction: "# Rising Bubble\\r\n\\r\nThis\nprogram makes a bubble rise up the water. Can you make it get faster as it\nrises?\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern and the sprite's\ny velocity to make the bubble move up more quickly."
      CSD U3 abstraction accelerateY up_2018_markdown_instruction: "# Rising Bubble\\r\n\\r\nThis\nprogram makes a bubble rise up the water. Can you make it get faster as it\nrises?\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern and the sprite's\ny velocity to make the bubble move up more quickly."
      CSD U3 abstraction accelerateY_markdown_instruction: "# Falling Rock\\r\n\\r\nThe\nrock should speed up as it falls down the screen.  Can you use the same counter\npattern with `velocityY` inside the draw loop to make the rock go faster and\nfaster as it falls?\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern with\nthe sprite's y velocity to make the rock speed up as it falls.  ( [Show me\nwhere](#triggercallout=code_triggered) )\\r\n\\r\n*Challenge: Can you make the\nrock spin as it falls?*"
      CSD U3 abstraction accelerateY_2018_markdown_instruction: "# Falling Rock\\r\n\\r\nThe\nrock should speed up as it falls down the screen.  Can you use the same counter\npattern with `velocityY` inside the draw loop to make the rock go faster and\nfaster as it falls?\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern with\nthe sprite's y velocity to make the rock speed up as it falls.  ( [Show me\nwhere](#triggercallout=code_triggered) )\\r\n\\r\n*Challenge: Can you make the\nrock spin as it falls?*"
      CSD U3 abstraction add coin_markdown_instruction: "# Add a Coin\\r\n\\r\nIn the\nnext few levels you'll add to your program to make a simple game. In this\ngame the player will collect points to increase the score. This is a good\nchance to see how different kinds of movement can affect the way a game feels,\nand it will also just help you practice programming skills.\\r\n\\r\n# Do This\\r\n\\r\nIn\nthis level you'll just be adding a new coin sprite to the game. You should\nbe working at the top of your program, outside the draw loop.\\r\n\\r\n* Use\nthe `createSprite()` block to create a new sprite. Make sure to give it a\ndescriptive name such as **coin**.\\r\n* Use the `sprite.x` and `sprite.y`\nproperties of the sprite to give it a random X and Y position between 0 and\n400.\\r\n* In the Animation Tab there is already a coin animation. Use the\n`sprite.setAnimation()` block to give your sprite this animation.\\r\n\\r\nTest\nyour code before moving on. When you run the game, you should see a coin sprite\nappear somewhere randomly on the screen."
      CSD U3 abstraction add coin_2018_markdown_instruction: "# Add a Coin\\r\n\\r\nIn\nthe next few levels you'll add to your program to make a simple game. In\nthis game the player will collect points to increase the score. This is a\ngood chance to see how different kinds of movement can affect the way a game\nfeels, and it will also just help you practice programming skills.\\r\n\\r\n#\nDo This\\r\n\\r\nIn this level you'll just be adding a new coin sprite to the\ngame. You should be working at the top of your program, outside the draw loop.\\r\n\\r\n*\nUse the `createSprite()` block to create a new sprite. Make sure to give it\na descriptive name such as **coin**.\\r\n* Use the `sprite.x` and `sprite.y`\nproperties of the sprite to give it a random X and Y position between 0 and\n400.\\r\n* In the Animation Tab there is already a coin animation. Use the\n`sprite.setAnimation()` block to give your sprite this animation.\\r\n\\r\nTest\nyour code before moving on. When you run the game, you should see a coin sprite\nappear somewhere randomly on the screen."
      CSD U3 abstraction animation circle_markdown_instruction: "# Animate the Satellite\\r\n\\r\nNow\nyou are ready for the final piece of the drawing: making the satellite circle\nthe moon.\\r\n\\r\n# Do This\\r\n\\r\nUse `setSpeed()` and `getDirection()` to\nmake the satellite circle the moon. "
      CSD U3 abstraction animation rotate_markdown_instruction: "# Rotation\\r\n\\r\nMake\nearth rotate using the `rotationSpeed` property."
      CSD U3 abstraction animation setSpeed_markdown_instruction: "# Animate Your\nPicture\\r\n\\r\n<img style=\"float:right\" src=\"https://images.code.org/d2ad362f37d0e5f9b98691654256d2fb-image-1469469372823.gif\">\\r\n\\r\nNow\nthat everything is in the right place, you can make them move using the properties\nand methods you have learned.\\r\n\\r\n# Do This\\r\n\\r\nUse `rotationSpeed`,\n`rotationToDirection`, `getSpeed`, `getDirection`, and `setSpeed` to animate\nyour scene, as seen in the image to the right.  "
      CSD U3 abstraction animation setup_markdown_instruction: "# Setting up your\npicture\\r\n<img style=\"float: right; margin: 4px;\" src=\"https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png\">\\r\nBefore\nyou make anything move, you'll need to start all your sprites off in the\nright place.  The Earth has already been positioned for you.\\r\n\\r\n# Do This\\r\n\\r\nCreate\nsprites for the moon, spaceship, and satellite.  Use `setAnimation` to add\na picture to each one, and use the `x` and `y` properties to put them in the\nright place on the screen.\\r\n\\r\n"
      CSD U3 abstraction animation_markdown_instruction: "# Setting up your picture\\r\n<img\nstyle=\"float: right; margin: 4px;\" src=\"https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png\">\\r\nBefore\nyou make anything move, you'll need to start all your sprites off in the\nright place.  The Earth has already been positioned for you.\\r\n\\r\n# Do This\\r\n\\r\nCreate\nsprites for the moon, spaceship, and satellite.  Use `setAnimation` to add\na picture to each one, and use the `x` and `y` properties to put them in the\nright place on the screen.\\r\n\\r\n"
      CSD U3 abstraction bug template_markdown_instruction: "# velocityY\\r\n\\r\n`velocityY`\nis like `velocityX`, but it moves things up and down.  Can you use it to make\nthe dragonfly walk up the screen?\\r\n\\r\n# Do This\\r\n\\r\nUse `velocityY`\nto make the sprite go up the screen.\\r\n\\r\n*Hint: Should velocity by positive\nor negative to move the sprite up the screen?*"
      CSD U3 abstraction car rotation_markdown_instruction: "# rotateToDirection\\r\n\\r\nHere's\nthe car you just made move.  It stayed on the road, but it was not pointing\nin the right direction.  You can tell the sprite to always point in the direction\nthat it's moving by adding `car.rotateToDirection = true` outside the draw\nloop, right after you create your sprite.\\r\n\\r\n# Do This\\r\n\\r\nUse the\n`rotateToDirection` property to make your car face the direction it's moving."
      CSD U3 abstraction car template_markdown_instruction: "# Moving at an Angle\\r\n\\r\nIf\nyou use `velocityX` and `velocityY` at the same time, you can move your sprite\nat an angle.  See if you can keep the car on the road by using these two properties.\\r\n\\r\n#\nDo This\\r\n\\r\nUse `velocityX` and `velocityY` to make the car move along\nthe road."
      CSD U3 abstraction change velocityX_markdown_instruction: "# Moving Faster\\r\n\\r\nRemember\nwhen you used the counter pattern `sprite.x = sprite.x + 1` to change your\nsprite's position inside the draw loop?  Now you can use the same type of\ncounter pattern with `sprite.velocityX` to change your sprite's speed as\nyour program runs. Can you add a line of code in the draw loop to make the\nsprite swim faster and faster?\\r\n\\r\n# Do This\\r\n\\r\nMake the fish get faster\nby adding `fish.velocityX = fish.velocityX + 1` inside the draw loop.  [Show\nme where](#triggercallout=code_triggered)"
      CSD U3 abstraction change velocityXY_markdown_instruction: "# Getting faster\nat an angle\\r\n\\r\nHere's a different car that uses the same counter pattern\nwe used in the last lesson to make the car go faster, but it changes both\n`velocityX` and `velocityY`. ([Show me where](#triggercallout=code_triggered))  It\nalso prints the speed and direction to the debug console.  What do you think\nwill happen when you run the code?\\r\n\\r\n# Do This\\r\n\\r\nDiscuss with your\npartner what you think will happen when the code runs, then run it and see\nwhether you were right.  Why do you think the car moves in this way?\\r\n\\r\n[//]:\n#(https://images.code.org/4d1af9cc274f30b9d9263a47f9f64f13-image-1470941637433.png)"
      CSD U3 abstraction change velocityY_markdown_instruction: "# Moving Faster\\r\n\\r\nJust\nas you can change `velocityX` inside the draw loop, you can change `velocityY`\nto make your sprite move faster up or down.  Can you add code into the draw\nloop to make the dragonfly go faster?\\r\n\\r\n# Do This\\r\n\\r\nUse the `velocityY`\nproperty to make the dragonfly fly faster and faster up the screen.    [Show\nme where](#triggercallout=code_triggered)"
      CSD U3 abstraction circle_markdown_instruction: "# getDirection()\\r\n\\r\nYou've\nbeen using `getSpeed` and `setSpeedAndDirection`  to change the speed of a\nsprite in a particular direction.  What do you think will happen if you keep\nthe speed the same, but use `getDirection` and `setSpeedAndDirection` to change\nthe direction?  Look at the code below and predict what it will do.  After\nyou've run it, try changing the direction by different amounts to see what\nhappens.\\r\n\\r\n# Do This\\r\n* Read the code where the direction is changed\nand predict what it will do [Show me where](#triggercallout=code_triggered)\\r\n*\nRun the program and observe what it does\\r\n* Modify the program to make the\ncar spin in large circles\\r\n* Modify the program to make the car move in\nthe opposite direction\\r\n\\r\n[//]: #(https://images.code.org/63b04e63fc4bc21700b64ef3d6c6b8b7-image-1471475653020.png)"
      CSD U3 abstraction decelerateX_markdown_instruction: "# Slowing Things Down\\r\n\\r\nNow\nthat you've had some practice speeding things up, can you use the counter\npattern to slow sprites down? \\r\n\\r\n# Do This\\r\n\\r\nThe car is going to\nrun into the water! You'll need to use the counter pattern to slow it down.\\r\n\\r\n*\nUse the `sprite.velocityX` block with a counter pattern to slow the car down\nby 0.25 as it moves across the screen.  \\r\n* Discuss with your Partner: What\ndo you think will happen when the car finally stops?\\r\n\\r\n*Challenge: Add\ncode that makes the car slow down only if his velocityX is greater than 0.*"
      CSD U3 abstraction decelerateX_2018_markdown_instruction: "# Slowing Things\nDown\\r\n\\r\nNow that you've had some practice speeding things up, can you\nuse the counter pattern to slow sprites down? \\r\n\\r\n# Do This\\r\n\\r\nThe\ncar is going to run into the water! You'll need to use the counter pattern\nto slow it down.\\r\n\\r\n* Use the `sprite.velocityX` block with a counter\npattern to slow the car down by 0.25 as it moves across the screen.  \\r\n*\nDiscuss with your Partner: What do you think will happen when the car finally\nstops?\\r\n\\r\n*Challenge: Add code that makes the car slow down only if his\nvelocityX is greater than 0.*"
      CSD U3 abstraction decelerateY_markdown_instruction: "# Simulating Gravity\\r\n\\r\nIn\nthe last level you slowed down the car with the `sprite.velocityX` block and\nthe counter pattern. It almost looked like the car was getting pulled to the\nleft.\\r\n\\r\nIf you use this same pattern with the `sprite.velocityY` block\nit will look like your sprite is always being pulled down, which is exactly\nwhat gravity does!\\r\n\\r\n# Do This\\r\n\\r\nThe rock is thrown in the air but\nit never falls back down.\\r\n\\r\n* Use the `sprite.velocityY` block with the\ncounter pattern to make the rock slow down and then fall in the other direction.\\r\n*\nExperiment with different values in your counter pattern. Do you want the\nrock to slow down quickly or gradually? What looks most realistic to you?\\r\n*\nDiscuss with your partner: Why are you setting the rock's initial velocity\noutside the draw loop? Why are you changing the sprite's velocity inside\nthe draw loop?"
      CSD U3 abstraction decelerateY_2018_markdown_instruction: "# Simulating Gravity\\r\n\\r\nIn\nthe last level you slowed down the car with the `sprite.velocityX` block and\nthe counter pattern. It almost looked like the car was getting pulled to the\nleft.\\r\n\\r\nIf you use this same pattern with the `sprite.velocityY` block\nit will look like your sprite is always being pulled down, which is exactly\nwhat gravity does!\\r\n\\r\n# Do This\\r\n\\r\nThe rock is thrown in the air but\nit never falls back down.\\r\n\\r\n* Use the `sprite.velocityY` block with the\ncounter pattern to make the rock slow down and then fall in the other direction.\\r\n*\nExperiment with different values in your counter pattern. Do you want the\nrock to slow down quickly or gradually? What looks most realistic to you?\\r\n*\nDiscuss with your partner: Why are you setting the rock's initial velocity\noutside the draw loop? Why are you changing the sprite's velocity inside\nthe draw loop?"
      CSD U3 abstraction demo pic_markdown_instruction: "# Space Animation\\r\n\\r\nIn\nthe next few puzzles, you'll be building the space animation on the left.  You\ncan use your activity guide to help you plan how to make the different type\nof movements you see.\\r\n\\r\n# Do This\\r\n\\r\n* Click \"Run\" to see the animation.\\r\n*\nLook at how all the different sprites are moving and update your activity\nguide with any ideas you have.\\r\n* Discuss with a partner how you might make\nthis picture."
      CSD U3 abstraction dragonfly (OLD)_markdown_instruction: "# velocityY\\r\n\\r\n`velocityY`\nis like `velocityX`, but it moves things up and down.  Can you use it to make\nthe feather float the down screen?\\r\n\\r\n# Do This\\r\n\\r\nUse `velocityY`\nto make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)"
      CSD U3 abstraction dragonfly OLD_markdown_instruction: "# velocityY\\r\n\\r\n`velocityY`\nis like `velocityX`, but it moves things up and down.  Can you use it to make\nthe dragonfly walk up the screen?\\r\n\\r\n# Do This\\r\n\\r\nUse `velocityY`\nto make the sprite go up the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)\\r\n\\r\n*Hint:\nShould velocity be positive or negative to move the sprite up the screen?*"
      CSD U3 abstraction drive_markdown_instruction: "# Race Your Car\\r\n\\r\nNow\nthat you can steer, you need to control the speed of your car.  Use the `setSpeed`\nmethod to make the car go faster when you push the up arrow and slower when\nyou push the down arrow.\\r\n\\r\n# Do This\\r\n\\r\nAdd two conditionals to your\ncar program.  \\r\n\\r\n* The first should check whether the up arrow is pressed,\nand increase the speed of the car. \\r\n* The second should check whether the\ndown arrow is pressed and decrease the speed of the car.\\r\n\\r\n*Hint:  What's\nthe difference between `keyDown` and `keyWentDown`?  Which do you think will\nwork better for changing the speed of the car?*"
      CSD U3 abstraction fish template_markdown_instruction: "# velocityX\\r\n\\r\nLast\ntime you made the fish move, you did it by changing its `x` property in the\ndraw loop.  Now, you can use `velocityX` to make your sprites move left or\nright by a certain amount each time they are drawn.\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `velocityX` block to make the sprite go across the screen.\\r\n"
      CSD U3 abstraction horse_markdown_instruction: "# Horse\\r\n\\r\nThe horse is\ntrying to make its escape. Can you use the `velocityX` and `velocityY` blocks\nto make the horse jump over the fence?\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Set the\nstarting `velocityX` and `velocityY` values outside the draw loop [Show me\nwhere](#triggercallout=code_triggered1)\\r\n* Change your sprite's `velocityY`\nusing a counter pattern inside the draw loop [Show me where](#triggercallout=code_triggered2)\\r\n"
      CSD U3 abstraction horse2_markdown_instruction: "# Better Horse\\r\n\\r\nIf you're\nmaking a game, you'll want the horse to jump according to user input. This\nprogram automatically moves the horse to the right, but the horse should jump\nwhen the user presses the up arrow key.  You will need to add three lines\nof code to make this work.  First, you'll need to check whether the up arrow\nkey has been pressed, and make the horse move up if it has. \\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Inside the `if` block that checks whether the up arrow key\nhas been pressed, use the `velocityY` block to make the horse move up by 4\neach time. [Show me where](#triggercallout=code_triggered)\\r\n\\r\n"
      CSD U3 abstraction horse3_markdown_instruction: "# Better Horse\\r\n\\r\nNext,\nyou'll make the horse fall back down to the ground. You'll need to check\nwhether the horse is in the air by looking at its y position. If it's in\nthe air it should fall down, but once it touches the ground it should stop.\nThe `if/else` block has already been provided for you.\\r\n\\r\n# Do This\\r\n\\r\nLook\nat the `if/else` block that checks whether the horse's position is less than\n325. [Show me where](#triggercallout=code_triggered1)\\r\n\\r\n* If the horse's\ny position is less than 325, use a counter pattern to change the horse's\nvelocityY by 0.1 on each tick of the draw loop. \\r\n* If the horse's y position\nis not less than 325, use the `velocityY` to change its vertical velocity\nto zero. [Show me where](#triggercallout=code_triggered2)\\r\n\\r\n"
      CSD U3 abstraction jump-2018_markdown_instruction: "# Jumping\\r\n\\r\nYou now\nhave all the blocks you need to make your sprite jump!  The sprite should\njump up if it's on the ground and the user presses the \"up\" key, then should\nstart moving back down when it reaches the top of its jump.\\r\n\\r\n# Do this\\r\n\\r\n*\nFind the `if` statement that checks whether the sprite is on the ground, and\nlook at the `if` statement inside of it that checks whether the user has pressed\nthe \"up\" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\\r\n\\t*\nMake the frog jump up when the user presses the arrow key.\\r\n\\t* Make the\nfrog stop moving otherwise.\\r\n* Add code that does the following  ( [Show\nme where](#triggercallout=code_triggered2) )\\r\n  * Checks whether the frog\nsprite has reached its highest point.\\r\n  * If so, make the sprite go back\ndown."
      CSD U3 abstraction jump_markdown_instruction: "# Jumping\\r\n\\r\nYou now have\nall the blocks you need to make your sprite jump!\\r\n\\r\nJust as you checked\nwhether your fish was at the left edge, you'll need to check whether the\nfrog is on the ground.  If it is, it could either jump up or stay still, so\nyou'll need one more `if` block to check whether the user has pressed the\nup arrow ( [Show me where](#triggercallout=code_triggered1) ).\\r\n\\r\nYou'll\nalso need to check whether the frog has reached its highest point, and send\nit back down if it has.\\r\n\\r\n# Do this\\r\n\\r\n* Find the `if` statement\nthat checks whether the sprite is on the ground, and look at the `if` statement\ninside of it that checks whether the user has pressed the \"up\" arrow key.\n( [Show me where](#triggercallout=code_triggered1) )\\r\n\\t* Use the `velocityY`\nblock to make the frog jump up when the user presses the arrow key.\\r\n\\t*\nUse the `velocityY` block to make the frog stop moving otherwise.\\r\n* Add\nan if statement that does the following  ( [Show me where](#triggercallout=code_triggered2)\n)\\r\n  * Checks whether the frog sprite has reached its highest point.\\r\n  *\nIf so, use the `velocityY` block to make the sprite fall back down."
      CSD U3 abstraction jump_2018_markdown_instruction: "# Jumping\\r\n\\r\nYou now\nhave all the blocks you need to make your sprite jump!  The sprite should\njump up if it's on the ground and the user presses the \"up\" key, then should\nstart moving back down when it reaches the top of its jump.\\r\n\\r\n# Do this\\r\n\\r\n*\nFind the `if` statement that checks whether the sprite is on the ground, and\nlook at the `if` statement inside of it that checks whether the user has pressed\nthe \"up\" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\\r\n\\t*\nMake the frog jump up when the user presses the arrow key.\\r\n\\t* Make the\nfrog stop moving otherwise.\\r\n* Add code that does the following  ( [Show\nme where](#triggercallout=code_triggered2) )\\r\n  * Checks whether the frog\nsprite has reached its highest point.\\r\n  * If so, make the sprite go back\ndown."
      CSD U3 abstraction jumper intro_markdown_instruction: "# Horse Jumper\\r\n\\r\nNow\nthat you've learned these new blocks, you can start to make a horse jumper\ngame.  Press \"Run\" to play the game on the left.  You can use the up arrow\nto jump over the tumbleweed.  What block will you need to make the tumbleweed\nmove?  How many different ways does the horse move?\\r\n\\r\n\\r\n"
      CSD U3 abstraction jumper template_markdown_instruction: "# Horse Jumper\\r\n\\r\nNow\nthat you've learned these new blocks, you can start to make a horse jumper\ngame.  Press \"Run\" to play the game on the left.  You can use the up arrow\nto jump over the tumbleweed.  What block will you need to make the tumbleweed\nmove?  How many different ways does the horse move?\\r\n\\r\n\\r\n"
      CSD U3 abstraction jumping advanced_markdown_instruction: "# Jumping with the\nCounter Pattern\\r\n\\r\nIn the last level you just set the sprite's velocity\nto -5 to make it jump. Eventually the sprite slows down and then starts falling\nagain. Now you'll build a slightly more realistic jump by using the counter\npattern with the sprite's y velocity.\\r\n\\r\n# Do This\\r\n\\r\nInside the\n`if` block you should have code that sets the sprite's y velocity to a number.\\r\n\\r\n*\nReplace that line of code with new code, `flyer.velocityY = flyer.velocityY\n- 5`\\r\n* Discuss with Your Partner: How did this change affect the way the\nsprite moves? How does subtracting a different amount change the way your\nsprite moves? Do you prefer one or the other type of jump?"
      CSD U3 abstraction jumping template_markdown_instruction: "# Jumping\\r\n\\r\nIncreasing\na sprite's y velocity inside the counter pattern can simulate gravity. By\nadding user interactions you can make your sprite appear to jump as well.\nFor starters you'll make a simple jump and then make it more realistic looking\nin the next level.\\r\n\\r\n# Do This\\r\n\\r\nA sprite has already been created\nfor you that falls because its y velocity is increased inside the draw loop.\nYou'll need to make this sprite appear to jump.\\r\n\\r\n* Inside the draw\nloop add an `if` block\\r\n* Use the `keyWentDown` block to make the block\nrespond to the \"up\" arrow being pressed\\r\n* Inside your `if` block set\nthe sprite's y velocity to -5\\r\n\\r\nRun the code to make sure it works.\nThen experiment with different values. How could you make your sprite jump\nhigher or lower?"
      CSD U3 abstraction jumping template_2018_markdown_instruction: "# Jumping\\r\n\\r\nIncreasing\na sprite's y velocity inside the counter pattern can simulate gravity. By\nadding user interactions you can make your sprite appear to jump as well.\nFor starters you'll make a simple jump and then make it more realistic looking\nin the next level.\\r\n\\r\n# Do This\\r\n\\r\nA sprite has already been created\nfor you that falls because its y velocity is increased inside the draw loop.\nYou'll need to make this sprite appear to jump.\\r\n\\r\n* Inside the draw\nloop add an `if` block\\r\n* Use the `keyWentDown` block to make the block\nrespond to the \"up\" arrow being pressed\\r\n* Inside your `if` block set\nthe sprite's y velocity to -5\\r\n\\r\nRun the code to make sure it works.\nThen experiment with different values. How could you make your sprite jump\nhigher or lower?"
      CSD U3 abstraction jumping_markdown_instruction: "# Jumping\\r\n\\r\nIncreasing\na sprite's y velocity inside the counter pattern can simulate gravity. By\nadding user interactions you can make your sprite appear to jump as well.\nFor starters you'll make a simple jump, and then make it more realistic looking\nin the next level.\\r\n\\r\n# Do This\\r\n\\r\nA sprite has already been created\nfor you that falls because its y velocity is increased inside the draw loop.\nYou'll need to make this sprite appear to jump.\\r\n\\r\n* Inside the `if`\nblock that checks whether the up arrow has been pressed, set the sprite's\ny velocity to -5. ( [Show me where](#triggercallout=callout1) )\\r\n* Discuss\nwith a neighbor: Why does this code run the way it does? How would using a\nnumber besides -5 affect the way the code works? How could you jump higher\nor lower?"
      CSD U3 abstraction jumping_2018_markdown_instruction: "# Jumping\\r\n\\r\nIncreasing\na sprite's y velocity inside the counter pattern can simulate gravity. By\nadding user interactions you can make your sprite appear to jump as well.\nFor starters you'll make a simple jump, and then make it more realistic looking\nin the next level.\\r\n\\r\n# Do This\\r\n\\r\nA sprite has already been created\nfor you that falls because its y velocity is increased inside the draw loop.\nYou'll need to make this sprite appear to jump.\\r\n\\r\n* Inside the `if`\nblock that checks whether the up arrow has been pressed, set the sprite's\ny velocity to -5. ( [Show me where](#triggercallout=callout1) )\\r\n* Discuss\nwith a neighbor: Why does this code run the way it does? How would using a\nnumber besides -5 affect the way the code works? How could you jump higher\nor lower?"
      CSD U3 abstraction left right counter 2_markdown_instruction: "# Floating Left\\r\n\\r\nIn\nthe last level you got detailed instructions on how to make your sprite start\nfloating to the right. This time you'll need to make your sprite float to\nthe left on your own. You should be pretty comfortable with using velocity\nand the counter pattern together at this point. If you're having trouble,\ntalk to a neighbor or review some of the past levels.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd code to your draw loop that will make the sprite start moving to the left\nwhen the \"left\" arrow is down.\\r\n* Make sure you're using velocity and\nthe counter pattern together.\\r\n\\r\nOnce your code is working share what\nyou wrote with a partner. Is your sprite easy to control? Does changing the\namount you add or subtract in the counter patterns you wrote affect the way\nthe game feels? What kind of game might be fun to make with a player that\nmoves like this?"
      CSD U3 abstraction left right counter 2_2018_markdown_instruction: "# Floating\nLeft\\r\n\\r\nIn the last level you got detailed instructions on how to make\nyour sprite start floating to the right. This time you'll need to make your\nsprite float to the left on your own. You should be pretty comfortable with\nusing velocity and the counter pattern together at this point. If you're\nhaving trouble, talk to a neighbor or review some of the past levels.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code to your draw loop that will make the sprite start\nmoving to the left when the \"left\" arrow is down.\\r\n* Make sure you're\nusing velocity and the counter pattern together.\\r\n\\r\nOnce your code is\nworking share what you wrote with a partner. Is your sprite easy to control?\nDoes changing the amount you add or subtract in the counter patterns you wrote\naffect the way the game feels? What kind of game might be fun to make with\na player that moves like this?"
      CSD U3 abstraction left right counter_markdown_instruction: "# Floating Right\\r\n\\r\nYou're\nnow using the counter pattern with the sprite's Y velocity to simulate gravity\nand jumping. If you use the sprite's X velocity in the counter pattern then\nyou can make your sprite float from side to side as well.\\r\n\\r\n# Do This\\r\n\\r\nIn\nthis level you'll make your sprite start floating to the right when the right\narrow is pressed.\\r\n\\r\n* Add an `if` statement inside your draw loop below\nthe one you created for the \"up\" arrow.\\r\n* Use the `keyDown` block to\nmake the `if` statement respond to when the \"right\" arrow is pressed.\\r\n*\nInside the `if` block use the counter pattern with the `sprite.velocityX`\nblock to add 0.1 to the sprite's X velocity.\\r\n\\r\nRun your code to see\nhow it works. The sprite should start floating to the right when you press\nthe right arrow and jump when you press \"up\". You'll make the left arrow\nwork in the next level."
      CSD U3 abstraction left right counter_2018_markdown_instruction: "# Floating\nRight\\r\n\\r\nYou're now using the counter pattern with the sprite's Y velocity\nto simulate gravity and jumping. If you use the sprite's X velocity in the\ncounter pattern then you can make your sprite float from side to side as well.\\r\n\\r\n#\nDo This\\r\n\\r\nIn this level you'll make your sprite start floating to the\nright when the right arrow is pressed.\\r\n\\r\n* Add an `if` statement inside\nyour draw loop below the one you created for the \"up\" arrow.\\r\n* Use the\n`keyDown` block to make the `if` statement respond to when the \"right\" arrow\nis pressed.\\r\n* Inside the `if` block use the counter pattern with the `sprite.velocityX`\nblock to add 0.1 to the sprite's X velocity.\\r\n\\r\nRun your code to see\nhow it works. The sprite should start floating to the right when you press\nthe right arrow and jump when you press \"up\". You'll make the left arrow\nwork in the next level."
      CSD U3 abstraction looping_markdown_instruction: "# Looping\\r\n\\r\nThe game\nwill be more fun if the frog can jump more than once.  You can make the mushroom\n\"loop\" by checking whether it's moved past the left edge and moving it\nback to the right edge when it has.\\r\n\\r\n# Do this\\r\n* Find the `if` statement\nthat checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1)\n)\\r\n* Use the `sprite.x` block to set the mushroom's position back to the\nright edge if it has."
      CSD U3 abstraction looping_2018_markdown_instruction: "# Looping\\r\n\\r\nThe\ngame will be more fun if the frog can jump more than once.  You can make the\nmushroom \"loop\" by checking whether it's moved past the left edge and moving\nit back to the right edge when it has.\\r\n\\r\n# Do this\\r\n* Find the `if`\nstatement that checks whether the mushroom has passed the left edge. ( [Show\nme where](#triggercallout=code_triggered1) )\\r\n* Use the `sprite.x` block\nto set the mushroom's position back to the right edge if it has."
      CSD U3 abstraction make it your own_markdown_instruction: "# Make It Your Own\\r\n\\r\nYou\nnow have the basic mechanics of your game in place, so it's time to make\nit your own. What do you want to happen? Should the character get points every\ntime it collects a coin? Can you add a scoreboard like you learned in the\nlast lesson? Do you want to make another coin? What about a \"bad coin\" that\ntakes away points?\\r\n\\r\n# Do This\\r\n\\r\nMake at least one improvement to\nthe game that makes it your own. Be prepared to share your changes and improvements\nwith your classmate."
      CSD U3 abstraction make it your own_2018_markdown_instruction: "# Make It Your\nOwn\\r\n\\r\nYou now have the basic mechanics of your game in place, so it's\ntime to make it your own. What do you want to happen? Should the character\nget points every time it collects a coin? Can you add a scoreboard like you\nlearned in the last lesson? Do you want to make another coin? What about a\n\"bad coin\" that takes away points?\\r\n\\r\n# Do This\\r\n\\r\nMake at least\none improvement to the game that makes it your own. Be prepared to share your\nchanges and improvements with your classmate."
      CSD U3 abstraction parabola_markdown_instruction: "# Basketball\\r\n\\r\nHere's\na basketball that's thrown up, then falls back down.  Can you use the `velocityX`\nblock to make it go through the hoop?\\r\n\\r\n\\r\n# Do This\\r\n\\r\nUse the\n`velocityX` block outside the draw loop to make the ball move to the right\nby 3 each time. [Show me where](#triggercallout=code_triggered)\\r\n\\r\n[//]:\n#(https://images.code.org/119358fc8705640a24d2138439ea7cc1-image-1472496770816.png)"
      CSD U3 abstraction race template_markdown_instruction: "Template for the race\ngame"
      CSD U3 abstraction reset coin_markdown_instruction: "# Reset Coin\\r\n\\r\nWhen\nyour character touches the coin you should reset it somewhere on the screen.\\r\n\\r\n#\nDo This\\r\n\\r\n* Place an `if` block inside of your draw loop.\\r\n* Use the\n`sprite.isTouching()` block as the condition to detect when the character\ntouches the coin.\\r\n* Inside the `if` block write code that sets the coin's\nX and Y position to random numbers between 0 and 400.\\r\n\\t* *Hint: You've\nalready written this code elsewhere in your program.*\\r\n\\r\nTest your code\nbefore moving on. When your player touches the coin, it should move somewhere\nelse on the screen."
      CSD U3 abstraction reset coin_2018_markdown_instruction: "# Reset Coin\\r\n\\r\nWhen\nyour character touches the coin you should reset it somewhere on the screen.\\r\n\\r\n#\nDo This\\r\n\\r\n* Place an `if` block inside of your draw loop.\\r\n* Use the\n`sprite.isTouching()` block as the condition to detect when the character\ntouches the coin.\\r\n* Inside the `if` block write code that sets the coin's\nX and Y position to random numbers between 0 and 400.\\r\n\\t* *Hint: You've\nalready written this code elsewhere in your program.*\\r\n\\r\nTest your code\nbefore moving on. When your player touches the coin, it should move somewhere\nelse on the screen."
      CSD U3 abstraction rotation accelerate_markdown_instruction: "# Speeding up\\r\n\\r\nNow\nthat you've used `rotationSpeed` outside the draw loop to start your sprite\nrotating at a certain speed, you can also use `rotationSpeed` inside the draw\nloop to change how fast the sprite rotates.  Look at the code inside the draw\nloop.  It uses the counter pattern to make the wheel speed up when the up\narrow is pressed.  Can you use a different counter pattern to make the wheel\nslow down when the down arrow is pressed?\\r\n\\r\n# Do This\\r\n\\r\n* Look at\nthe code that makes the wheel spin faster when the up arrow is pressed [Show\nme where](#triggercallout=code_triggered1)\\r\n* Add code that makes the wheel\nspin slower when the down arrow is pressed [Show me where](#triggercallout=code_triggered2)"
      CSD U3 abstraction rotation control_markdown_instruction: "# Controlling Speed\\r\n\\r\nYou\nused `rotatationSpeed` outside the draw loop to make your sprite rotate when\nyour program started.  You can also use `rotationSpeed` **inside** the draw\nloop to change the speed of the sprite during the game.  For example, a sprite\ncan start rotating when the user presses the space bar, and it will keep rotating\nuntil it's told to stop.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the `if` statement\ninside the draw loop that checks whether the space bar has been pressed. (\n[Show me where](#triggercallout=code_triggered1) )\\r\n* Use the `rotationSpeed`\nblock to make the color wheel start spinning when the user presses the space\nbar."
      CSD U3 abstraction rotation control_2018_markdown_instruction: "# Controlling\nSpeed\\r\n\\r\nYou used `rotatationSpeed` outside the draw loop to make your\nsprite rotate when your program started.  You can also use `rotationSpeed`\n**inside** the draw loop to change the speed of the sprite during the game.  For\nexample, a sprite can start rotating when the user presses the space bar,\nand it will keep rotating until it's told to stop.\\r\n\\r\n# Do This\\r\n\\r\n*\nLook at the `if` statement inside the draw loop that checks whether the space\nbar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )\\r\n*\nUse the `rotationSpeed` block to make the color wheel start spinning when\nthe user presses the space bar."
      CSD U3 abstraction rotation_markdown_instruction: "# rotationSpeed\\r\n\\r\nYou've\nalready learned how to make your sprite spin by using the `rotation` block.  For\nexample, when you wanted your sprite to rotate by two degrees each time it\nwas drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw\nloop.\\r\n\\r\nNow, you can use `rotationSpeed` to make your sprites rotate\nby a certain amount each time they are drawn. If you want your sun to rotate\nby two degrees each time it's drawn, you can use `sun.rotationSpeed = 2`\nbefore the draw loop, after you create your sprite.\\r\n\\r\n# Do This\\r\n\\r\nMake\nthe sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show\nme where](#triggercallout=callout1) )"
      CSD U3 abstraction rotation_2018_markdown_instruction: "# rotationSpeed\\r\n\\r\nYou've\nalready learned how to make your sprite spin by using the `rotation` block.  For\nexample, when you wanted your sprite to rotate by two degrees each time it\nwas drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw\nloop.\\r\n\\r\nNow, you can use `rotationSpeed` to make your sprites rotate\nby a certain amount each time they are drawn. If you want your sun to rotate\nby two degrees each time it's drawn, you can use `sun.rotationSpeed = 2`\nbefore the draw loop, after you create your sprite.\\r\n\\r\n# Do This\\r\n\\r\nMake\nthe sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show\nme where](#triggercallout=callout1) )"
      CSD U3 abstraction setSpeed accelerate_markdown_instruction: "# Moving faster\nand faster\\r\n\\r\nNow that you've started your car off in the right direction,\nyou can make it go faster and faster by using a counter pattern inside the\ndraw loop.  Because the sprite does not store its speed as it would a property,\nyou'll need to use the `getSpeed` block inside the `setSpeedAndDirection`\nblock to add one to the speed each time.  The code `car.setSpeedAndDirection(car.getSpeed()\n+ 1, -20)` will get the speed of the car, add one to it, and set the new speed\nto be the sum.  Even though it looks different from using a counter pattern\non a property or variable, the basic pattern of adding one each time is the\nsame.\\r\n\\r\n# Do this\\r\n\\r\nUse the `getSpeed` and `setSpeedAndDirection`\nblocks to add one to the speed each time the draw loop is called.  [Show me\nwhere](#triggercallout=code_triggered)"
      CSD U3 abstraction setSpeed fish_markdown_instruction: "# Save the Fish\\r\n<img\nstyle=\"float: right; height: 200px;\" src=\"https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif\"\n/>\\r\nYour fish is in danger!  The shark is swimming faster than the fish,\nbut we can use the counter pattern to make the fish get faster as the program\nruns.   Can use use the counter pattern inside the draw loop to change the\nprogram to match the animation on the right?\\r\n\\r\n# Do This\\r\nUse `setSpeedAndDirection`\ninside the draw loop to increase the speed of the sprite by 1 each time the\ndraw loop is called.\\r\n\\r\n[//]: # (https://images.code.org/a87dac6c803751292c6fb11a63623e3f-image-1471466985600.png)\\r\n\\r\n[//]:\n# (https://images.code.org/b63256ffb19a98d9d20f3b3b79364006-image-1471467188241.png)\\r\n\\r\n[//]:\n# (https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif)"
      CSD U3 abstraction setSpeed intro_markdown_instruction: "# getSpeed() and getDirection()\\r\n\\r\nWhen\nyou move around the world, you probably don't normally think about your velocityX\nand velocityY.  You probably just think about how fast you are going in the\ndirection you are heading.  You can figure out a sprite's speed and direction\nwith math, but it's faster to teach the computer to do those calculations\nfor you.  `getSpeed()` and `getDirection()` are methods that use the information\nin `velocityX` and `velocityY` to find your speed and direction.\\r\n\\r\n#\nDo this\\r\n\\r\n* For each of the three sprites in this animation: Look at\nits `velocityX` and `velocityY` and guess what its speed and direction are.  \\r\n*\nThen run the code and see the answers in the debug console.\\r\n"
      CSD U3 abstraction setSpeed_markdown_instruction: "# setSpeedAndDirection()\\r\n\\r\nJust\nas you can use the `getSpeed` and `getDirection` blocks to see how your sprite\nis moving, you can use the `setSpeedAndDirection` block to tell the computer\nhow you want your sprite to move.  This block takes in two numbers, first\nthe new speed of your sprite, then the angle of its direction.\\r\n\\r\nBefore,\nyou did this by setting your `velocityX` and `velocityY` properties, but `setSpeedAndDirection`\nlets you input the exact speed and direction of your sprite.  The computer\ncalculates the matching `velocityX` and `velocityY` values and sets them for\nyou, according to code that another programmer already wrote.\\r\n\\r\n# Do\nthis\\r\n\\r\nUse `setSpeedAndDirection` to make the car stay on the road.  You\ncan see the effect on your sprite's `velocityX` and `velocityY` in the debug\nconsole.\\r\n\\r\n*Hint: The angle of the road is -20 degrees*\\r\n\\r\n*Challenge:\nMake the car point in the correct direction.*"
      CSD U3 abstraction sidescroll intro_markdown_instruction: "# Horse Jumper\\r\n\\r\nNow\nthat you've learned these new blocks, you can start to make a horse jumper\ngame.  Press \"Run\" to play the game on the left.  You can use the up arrow\nto jump over the tumbleweed.  What block will you need to make the tumbleweed\nmove?  How many different ways does the horse move?\\r\n\\r\n\\r\n"
      CSD U3 abstraction sidescroll_markdown_instruction: "# Side Scroller\\r\n\\r\nNow\nthat you can make your sprite jump, you're ready to start a simple side scroller.  In\na side scroller game, the main sprite stays at the same x location, and the\nbackground and obstacles slide past it.  In this first part of the project,\nyou'll make a hay bale slide across the screen so that your horse can jump\nover it.  You can do this by creating the hay bale off the right hand side\nof the screen, but setting its velocity so that it moves to the left.  Then,\nwhen the hay bale is completely off the left hand side of the screen, move\nit back to where it started so it can scroll across the screen again.\\r\n\\r\n#\nDo this\\r\n\\r\n* Change the line of code where the hay sprite is created to\nmake it start off the right side of the screen. [Show me where](#triggercallout=code_triggered1)\\r\n*\nAdd a line of code to make the sprite move across the screen toward the left.\n[Show me where](#triggercallout=code_triggered2)\\r\n* Add an if statement\nthat does the following  [Show me where](#triggercallout=code_triggered3)\\r\n  *\nChecks whether the sprite has gone off the left side of the screen.\\r\n  *\nIf so, moves the sprite back to its initial position off the right side of\nthe screen.\\r\n\\r\n\\r\n_Challenge: Can you make the hay bale come out from\ndifferent places on the right hand side of the screen?_\\r\n\\r\n_Extra fun:\nYou can choose your own images to use, rather than the horse and hay bale,\nand draw a new background._\\r\n\\r\n[](https://images.code.org/0a265cf4c22f69463200dce05989e8e4-image-1474609853181.png)"
      CSD U3 abstraction space animation_markdown_instruction: "# Your choice\\r\n\\r\n<img\nstyle=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\\r\n\\r\nNow\nthat you have everything moving in the correct way, you can add your own sprite.  You\ncan choose between the star and astronaut animations in the animations tab\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a new sprite to the picture using the star or astronaut\nin the animations tab\\r\n* Make  your sprite move in a new way based on what\nyou have learned\\r\n* Share your picture with a classmate and compare your\nanimations"
      CSD U3 abstraction space comet_markdown_instruction: "# Animate The Comet\\r\n\\r\n<img\nstyle=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\\r\n\\r\nNow\nthat your sprites are in the right place, you can make them move using the\nproperties and methods you have learned.  In this level, you can make the\ncomet fly across the sky in a curve.  If you want to animate another sprite,\nyou can click on the following links:\\r\n\\r\n* [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\\r\n*\n[Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\\r\n*\n[Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\\r\n\\r\n#\nDo This\\r\n\\r\nUse the correct blocks to make the comet fly across the sky\nas in the picture.\\r\n\\r\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/13)\nfor clues.*"
      CSD U3 abstraction space earth_markdown_instruction: "# Animate The Earth\\r\n\\r\n<img\nstyle=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\\r\n\\r\nNow\nthat everything is in the right place, you can make the sprites move using\nthe properties and methods you have learned.  In this level, you can make\nthe earth rotate.  If you want to animate another sprite, you can click on\nthe following links:\\r\n* [Animate the Comet](s/CSDU3-Draft/stage/12/puzzle/13)\\r\n*\n[Animate the Spaceship](s/CSDU3-Draft/stage/12/puzzle/14)\\r\n* [Animate the\nSatellite](s/CSDU3-Draft/stage/12/puzzle/15)\\r\n\\r\n# Do This\\r\n\\r\nUse the\ncorrect blocks to make the earth rotate as in the picture.\\r\n"
      CSD U3 abstraction space satellite_markdown_instruction: "# Animate The Satellite\\r\n\\r\n<img\nstyle=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\\r\n\\r\nNow\nthat everything is in the right place, you can make the sprites move using\nthe properties and methods you have learned.  In this level, you can make\nthe satellite revolve around the moon.  If you want to animate another sprite,\nyou can click on the following links:\\r\n\\r\n* [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\\r\n*\n[Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\\r\n*\n[Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\\r\n\\r\n#\nDo This\\r\n\\r\nUse the correct blocks to make the satellite move as in the\npicture.\\r\n\\r\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8)\nfor clues.*"
      CSD U3 abstraction space setup_markdown_instruction: "# Setting up your picture\\r\n<img\nstyle=\"float: right; margin: 4px;\" src=\"https://images.code.org/aabf67f8692c025f62a43e54d4bfd830-image-1472408773491.png\">\\r\nBefore\nyou make anything move, you'll need to start all your sprites off in the\nright place.  The Earth has already been positioned for you, and all the images\nare loaded for you in the animations tab.\\r\n\\r\n# Do This\\r\n\\r\n* Create\nsprites for the moon, spaceship, and satellite.\\r\n* Use `setAnimation` to\nadd a picture to each sprite.\\r\n* Use the `x` and `y` properties to put the\nsprites in the right place on the screen.\\r\n"
      CSD U3 abstraction space spaceship_markdown_instruction: "# Animate The Spaceship\\r\n\\r\n<img\nstyle=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\\r\n\\r\nNow\nthat everything is in the right place, you can make the sprites move using\nthe properties and methods you have learned.  In this level, you can make\nthe spaceship speed up as it takes off from Earth.  If you want to animate\nanother sprite, you can click on the following links:\\r\n\\r\n* [Animate the\nEarth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\\r\n*\n[Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\\r\n*\n[Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\\r\n\\r\n#\nDo This\\r\n\\r\nUse the correct blocks to make the spaceship take off as in\nthe picture.\\r\n\\r\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/6)\nfor clues.*"
      CSD U3 abstraction space template_markdown_instruction: "![](https://images.code.org/b449da443093a6b7fb872c0b65d4ea39-image-1472234725048.png)\\r\n\\r\n![](https://images.code.org/87f39110a8cec7a6ca1978989f1d8eaf-image-1472235414354.png)\\r\n\\r\n![](https://images.code.org/69cb2daab7d1eec824b8bd2d2b117116-image-1472235429548.png)"
      CSD U3 abstraction steer_markdown_instruction: "# Steering your car\\r\n\\r\nNow\nyou have enough information to control your car with the keyboard using conditionals.  Every\ntime the left arrow key is pressed, the car will turn to the left.  Can you\nuse the `if` block to make the car turn to the right when the right arrow\nkey is pressed?  (Don't worry about speeding up and slowing down.  You will\ndo that on the next level.)\\r\n\\r\n# Do This\\r\n\\r\nInside the draw loop:\\r\n*\ncheck whether the right arrow key is pressed\\r\n* if it's pressed, turn the\ncar to the right\\r\n\\r\n*Challenge: Can you modify the code so that the car\nturns faster?*"
      CSD U3 abstraction teaser_markdown_instruction: "# Space Animation\\r\n\\r\nLook\nat the space animation on the left.\\r\n\\r\n* What sorts of movements are the\ndifferent sprites making? \\r\n* Which types of movement do you already know\nhow to program?\\r\n* Is there anything you're not sure how to do? \\r\n* Discuss\nwith a partner how you might make this picture.\\r\n\\r\n# Do This\\r\n\\r\n*\nClick \"Run\" to see the space animation.\\r\n* With your partner, discuss\nthe different types of movement and how you might code your sprites.\\r\n*\nFill out the activity guide with your notes on the different movements."
      CSD U3 abstraction tumbleweed_markdown_instruction: "# Mushroom\\r\n\\r\nNow\nyou just need something for your sprite to jump over.  This program already\nhas a mushroom just past the right edge of the screen, but it needs to move\ntoward your frog.\\r\n\\r\n# Do this\\r\n* Use the `velocityX` block to make\nthe mushroom move left across the screen.\\r\n\\r\n*Hint: The mushroom should\nstart moving at the very beginning of the game, and never change, so should\nit be inside or outside the draw loop?*\\r\n\\r\n"
      CSD U3 abstraction tumbleweed_2018_markdown_instruction: "# Mushroom\\r\n\\r\nNow\nyou just need something for your sprite to jump over.  This program already\nhas a mushroom just past the right edge of the screen, but it needs to move\ntoward your frog.\\r\n\\r\n# Do this\\r\n* Use the `velocityX` block to make\nthe mushroom move left across the screen.\\r\n\\r\n*Hint: The mushroom should\nstart moving at the very beginning of the game, and never change, so should\nit be inside or outside the draw loop?*\\r\n\\r\n"
      CSD U3 abstraction velocityX control_markdown_instruction: "# Multiple Controls\\r\n\\r\nAs\nyou saw in the last level, you can change the sprite's velocity with multiple\n`if` statements. In this program, the fish has three different types of movement,\neach of which should be controlled by its own `if` statement.\\r\n\\r\n# Do\nThis\\r\n* Look at the three `if` statements inside the draw loop.\\r\n\\r\n*\nUse a `sprite.velocityX` block inside each `if` statement to make the three\nfollowing movements:\\r\n * If the user presses the right arrow key, move the\nfish to the right.\\r\n * If the fish gets to the right-hand side of the screen,\nmove the fish to the left.\\r\n * If the fish gets to the left-hand side of\nthe screen, stop the fish."
      CSD U3 abstraction velocityX control_2018_markdown_instruction: "# Multiple\nControls\\r\n\\r\nAs you saw in the last level, you can change the sprite's\nvelocity with multiple `if` statements. In this program, the fish has three\ndifferent types of movement, each of which should be controlled by its own\n`if` statement.\\r\n\\r\n# Do This\\r\n* Look at the three `if` statements inside\nthe draw loop.\\r\n\\r\n* Use a `sprite.velocityX` block inside each `if` statement\nto make the three following movements:\\r\n * If the user presses the right\narrow key, move the fish to the right.\\r\n * If the fish gets to the right-hand\nside of the screen, move the fish to the left.\\r\n * If the fish gets to the\nleft-hand side of the screen, stop the fish."
      CSD U3 abstraction velocityX if-statements predict_markdown_instruction: "#\nChanging Velocity with Position\\r\n\\r\nOne advantage to using the velocity\nblocks inside conditionals (`if` blocks) is that your sprite keeps moving,\neven after the condition stops being true.  For example, you only had to press\na key once to launch your fly bot, and it kept flying forever.  The code below\nuses if statements to make a fish sprite move in different directions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Look at `if` statements that check the sprite's position\nand set its velocity.\\r\n* With your partner, discuss what you think the code\nwill do, and write your answer below.\\r\n* Once you have submitted your answer,\nrun the code."
      CSD U3 abstraction velocityX if-statements predict_2018_markdown_instruction: "#\nChanging Velocity with Position\\r\n\\r\nOne advantage to using the velocity\nblocks inside conditionals (`if` blocks) is that your sprite keeps moving,\neven after the condition stops being true.  For example, you only had to press\na key once to launch your fly bot, and it kept flying forever.  The code below\nuses if statements to make a fish sprite move in different directions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Look at `if` statements that check the sprite's position\nand set its velocity.\\r\n* With your partner, discuss what you think the code\nwill do, and write your answer below.\\r\n* Once you have submitted your answer,\nrun the code."
      CSD U3 abstraction velocityX if-statements_markdown_instruction: "# Changing\nVelocity with Position\\r\n\\r\nOne advantage to using the velocity blocks inside\nconditionals (`if` blocks) is that your sprite keeps moving, even after the\ncondition stops being true.  For example, you only had to press a key once\nto launch your fly bot, and it kept flying forever.\\r\n\\r\nIn the code below,\nthe fish sprite moves to the left when it hits the right edge, and to the\nright when it hits the left edge.  The sprite keeps moving, even when it's\nnot touching the edge anymore.\\r\n\\r\n# Do This\\r\n\\r\n* Look at `if` statements\nthat check the sprite's position and set its velocity.\\r\n* With your partner,\ndiscuss how the sprite knows which way to move when neither of the `if` statements\nare true (the sprite is in the middle of the screen)."
      CSD U3 abstraction velocityX if-statements_2018_markdown_instruction: "# Changing\nVelocity with Position\\r\n\\r\nOne advantage to using the velocity blocks inside\nconditionals (`if` blocks) is that your sprite keeps moving, even after the\ncondition stops being true.  For example, you only had to press a key once\nto launch your fly bot, and it kept flying forever.\\r\n\\r\nIn the code below,\nthe fish sprite moves to the left when it hits the right edge, and to the\nright when it hits the left edge.  The sprite keeps moving, even when it's\nnot touching the edge anymore.\\r\n\\r\n# Do This\\r\n\\r\n* Look at `if` statements\nthat check the sprite's position and set its velocity.\\r\n* With your partner,\ndiscuss how the sprite knows which way to move when neither of the `if` statements\nare true (the sprite is in the middle of the screen)."
      CSD U3 abstraction velocityX_markdown_instruction: "# velocityX\\r\n\\r\nOne\nway to move sprites in Game Lab is with the counter pattern. For example `sprite1.x\n= sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This\npattern is so common that sprites have a `velocityX` property that does this\nfor you.\\r\n\\r\n# Do This\\r\n\\r\n* Drag a `sprite.velocityX` block directly\nbelow where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show\nme where](#triggercallout=code_triggered) )\\r\n* Write the name of your sprite\nin the block.\\r\n* Assign the `velocityX` property a value of 1.\\r\n* Run\nthe code. What happens?\\r\n* Re-run the code giving the `velocityX` property\na different value. What's changing?"
      CSD U3 abstraction velocityXY_markdown_instruction: "# Moving at an Angle\\r\n\\r\nFor\nthe next several levels you'll use the `sprite.velocityX` and `sprite.velocityY`\nblocks to create some interesting sprite movements. As you do so ask yourself\nwhether you need the code to run just once (outside the draw loop) or on every\nframe (inside the draw loop).\\r\n\\r\n# Do This\\r\n\\r\nThis car sprite should\nmove along the diagonal road.\\r\n\\r\n* Set both the X and Y velocities of\nthe car to make it move along the road.\\r\n* Discuss with a Neighbor: Did\nyou set the velocity inside or outside the draw loop? Does it make a difference?\nWhy might one be better than the other?"
      CSD U3 abstraction velocityX_2018_markdown_instruction: "# velocityX\\r\n\\r\nOne\nway to move sprites in Game Lab is with the counter pattern. For example `sprite1.x\n= sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This\npattern is so common that sprites have a `velocityX` property that does this\nfor you.\\r\n\\r\n# Do This\\r\n\\r\n* Drag a `sprite.velocityX` block directly\nbelow where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show\nme where](#triggercallout=code_triggered) )\\r\n* Write the name of your sprite\nin the block.\\r\n* Assign the `velocityX` property a value of 1.\\r\n* Run\nthe code. What happens?\\r\n* Re-run the code giving the `velocityX` property\na different value. What's changing?"
      CSD U3 abstraction velocityY 2_markdown_instruction: "# velocityY\\r\n\\r\n`velocityY`\nis like `velocityX`, but it moves things up and down.  Can you use it to make\nthe feather float the down screen?\\r\n\\r\n# Do This\\r\n\\r\nUse `velocityY`\nto make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)"
      CSD U3 abstraction velocityY control_markdown_instruction: "# Controlling Speed\\r\n\\r\nYour\ncode before the draw loop sets up the beginning of your game.  Your code inside\nthe draw loop controls how the game will change while it's being played.  In\nthis game, the helicopter bot starts off at the bottom of the screen, but\nwhen the space key is pressed, it flies up.\\r\n\\r\n# Do This\\r\n\\r\n* Use\nan `if` statement inside the draw loop to check when the space bar is pressed.\\r\n*\nUse the `velocityY` block to make the sprite fly up when the user presses\nthe space bar.  The sprite should keep moving up even after you let go of\nthe space bar."
      CSD U3 abstraction velocityY control_2018_markdown_instruction: "# Controlling\nSpeed\\r\n\\r\nYour code before the draw loop sets up the beginning of your\ngame.  Your code inside the draw loop controls how the game will change while\nit's being played.  In this game, the helicopter bot starts off at the bottom\nof the screen, but when the space key is pressed, it flies up.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Use an `if` statement inside the draw loop to check when the\nspace bar is pressed.\\r\n* Use the `velocityY` block to make the sprite fly\nup when the user presses the space bar.  The sprite should keep moving up\neven after you let go of the space bar."
      CSD U3 abstraction velocityY_markdown_instruction: "# Moving Down\\r\n\\r\nHere\nis a feather sprite that should be floating down the screen.  If `velocityX`\nmakes a sprite move to the right, can you find the block that will make the\nfeather move down?\\r\n\\r\n# Do This\\r\n\\r\nFind the block that will make the\nfeather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp;\n(  [Show me where](#triggercallout=code_triggered) )"
      CSD U3 abstraction velocityY_2018_markdown_instruction: "# Moving Down\\r\n\\r\nHere\nis a feather sprite that should be floating down the screen.  If `velocityX`\nmakes a sprite move to the right, can you find the block that will make the\nfeather move down?\\r\n\\r\n# Do This\\r\n\\r\nFind the block that will make the\nfeather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp;\n(  [Show me where](#triggercallout=code_triggered) )"
      CSD U3 challenge face_markdown_instruction: "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\r\n# Challenge:\nFace\\r\n\\r\n_Check with your teacher before starting any of the challenges._\\r\n\\r\nWrite\na program that uses `rect`, `ellipse`, and `fill` to create the face on the\nright. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\\r\nOnce\nyou've finished, add your own personal touches to the image.\\r\n\\r\n\\r\n"
      CSD U3 challenge face_2018_markdown_instruction: "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\r\n# Challenge:\nFace\\r\n\\r\n_Check with your teacher before starting any of the challenges._\\r\n\\r\nWrite\na program that uses `rect`, `ellipse`, and `fill` to create the face on the\nright. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\\r\nOnce\nyou've finished, add your own personal touches to the image.\\r\n\\r\n\\r\n"
      CSD U3 challenge new shape_markdown_instruction: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\r\n\\r\n#\nChallenge: Shape of Shapes\\r\n\\r\n_Check with your teacher before starting\nany of the challenges._\\r\n\\r\nUsing only the `rect` and `ellipse` commands,\ncan you draw a new shape, such as this triangle made out of circles?"
      CSD U3 challenge new shape_2018_markdown_instruction: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\r\n\\r\n#\nChallenge: Shape of Shapes\\r\n\\r\n_Check with your teacher before starting\nany of the challenges._\\r\n\\r\nUsing only the `rect` and `ellipse` commands,\ncan you draw a new shape, such as this triangle made out of circles?"
      CSD U3 collisions bounce birds_markdown_instruction: "# bounce()\\r\n\\r\nThe\nbirds are fighting for space on the wire.  Can you change the code so that\nthe green bird pushes the yellow bird off the wire?\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `bounce` block to the green bird sprite bounce against the yellow bird\nsprite.\\r\n"
      CSD U3 collisions bounce intro_markdown_instruction: "# bounce()\\r\n\\r\nYou\ncan also make sprites bounce when they touch each other, as in the code below.\nRead the code and run it with a partner.  Can you change the code so that\nthe green bird pushes the yellow bird off the wire?\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `bounce` block to make the green bird sprite bounce against the yellow\nbird sprite.\\r\n"
      CSD U3 collisions bounce_markdown_instruction: "# Billiards\\r\n\\r\nChanging\nyour sprites' velocities will change the ways that they bounce when they\ntouch each other.  Read the code and run it with a partner, then try out different\nintial velocities for your sprites.  After each change, discuss with your\npartner what you think will happen before you run the code.\\r\n\\r\n# Do This\\r\nDiscuss\nwith your partner what you think will happen when you run the code, then try\nit again with the following changes:\\r\n* set the purple ball's velocity\nto 0\\r\n* set the purple ball's velocity to 4\\r\n* switch the purple and\nred balls so it says `red_ball.bounce(purple_ball)`\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)"
      CSD U3 collisions bounceOff intro_markdown_instruction: "# Basketball\\r\n\\r\nRun\nthe code below and see what happens.  You want the basketball to bounce, but\nthe floor should not move!  See if you can find a different block that you\ncan use to make the basketball bounce off the floor.\\r\n\\r\n# Do This\\r\n\\r\nReplace\n`bounce` with a different block so that the floor sprite does not move, and\nthe basketball sprite bounces off it.\\r\n\\r\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\\r\n\\r\n[//]:\n# (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)"
      CSD U3 collisions bounceOff_markdown_instruction: "# Mouse\\r\n\\r\nThe mouse\nshould be running back and forth between the two walls.  Can you use the `bounceOff`\nblock to make it move in the right way?\\r\n\\r\n# Do This\\r\n\\r\nUse the `bounceOff`\nblock to make the mouse sprite bounce off the wall sprites.\\r\n\\r\n[//]: #\n(https://images.code.org/e542bc5decf5f57d3184a8d5449776d2-image-1470413949810.png)\\r\n\\r\n[//]:\n# (https://images.code.org/fcd40235d2a4285723eecec1df041edc-image-1470413965009.png)\\r\n\\r\n[//]:\n# (https://images.code.org/c3f6298b05a9eb51772c8c03a06abe54-image-1470414415864.png)\\r\n\\r\n[//]:\n# (https://images.code.org/e89b80c63658eb3607478fe91aceda47-image-1470414741858.png)"
      CSD U3 collisions bounciness_markdown_instruction: "# Bounciness\\r\n\\r\nSo\nfar, `bounceOff` has made sprites bounce away from other objects as fast as\nthey bounced into them.  In the real world, almost everything slows down just\na little bit when it bounces off something else.  You can use the `bounciness`\nblock to tell your sprite how much to slow down or speed up when it bounces\noff something else.\\r\n\\r\n# Do This\\r\n\\r\n* Read the code below and press\n\"Run\" to see the behavior of the basketball and pool ball.\\r\n* Use a `bounciness`\nblock to set the bounciness of your soccer ball.\\r\n* Run the code again to\nsee how the sprites bounce off the floor.\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)"
      CSD U3 collisions bounciness_2018_markdown_instruction: "# Bounciness\\r\n\\r\nSo\nfar, `bounceOff` has made sprites bounce away from other objects as fast as\nthey bounced into them.  In the real world, almost everything slows down just\na little bit when it bounces off something else.  You can use the `bounciness`\nblock to tell your sprite how much to slow down or speed up when it bounces\noff something else.\\r\n\\r\n# Do This\\r\n\\r\n* Read the code below and press\n\"Run\" to see the behavior of the basketball and pool ball.\\r\n* Use a `bounciness`\nblock to set the bounciness of your soccer ball.\\r\n* Run the code again to\nsee how the sprites bounce off the floor.\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)"
      CSD U3 collisions build isTouching_markdown_instruction: "# Balloon\\r\n\\r\nThe\ncode below uses the sprites' x and y positions to check whether they are\ntouching.  It will change the balloon sprite's animation when the tack touches\nit.  Use the arrow keys to move the tack until it touches the balloon.\\r\n\\r\n#\nDo This\\r\n\\r\n* You do not need to change any code on this level.\\r\n* Read\nthe if statements inside the draw loop and find the different sprite properties\nand how they are compared.\\r\n* Discuss the code with your partner.  Would\nyou want to write this code every time you checked whether sprites were touching?\\r\n\\r\n\\r\n[//]:\n# (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)"
      CSD U3 collisions build isTouching_2018_markdown_instruction: "# Balloon\\r\n\\r\nThe\ncode below uses the sprites' x and y positions to check whether they are\ntouching.  It will change the balloon sprite's animation when the tack touches\nit.  Use the arrow keys to move the tack until it touches the balloon.\\r\n\\r\n#\nDo This\\r\n\\r\n* You do not need to change any code on this level.\\r\n* Read\nthe if statements inside the draw loop and find the different sprite properties\nand how they are compared.\\r\n* Discuss the code with your partner.  Would\nyou want to write this code every time you checked whether sprites were touching?\\r\n\\r\n\\r\n[//]:\n# (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)"
      CSD U3 collisions bumper_markdown_instruction: "# Bumper Cars\\r\n\\r\nThe bumper\ncars are almost ready, but they still don't bump into each other.  Can you\nchoose the right method to make the cars behave like they do in the picture?\\r\n\\r\n#\nDo This\\r\n\\r\nUse `displace`, `collide`, `bounce`, or `bounceOff` to make\nthe sprites interact in the right way.\\r\n\\r\n[//]: # (https://images.code.org/682567536f824cc930ebed5c1b936e5f-image-1470415888369.png)\\r\n\\r\n[//]:\n# (https://images.code.org/8a6915fe703f4fe097094cad1e754a6f-image-1470415888371.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b9f5ca88dc99fc08d472fdba87d6e32-image-1470417254115.png)\\r\n\\r\n[//]:\n# (https://images.code.org/2085e5de29f7170465b0c7bd5e6b56e9-image-1470417254116.png)"
      CSD U3 collisions car intro_markdown_instruction: "# Frog Jump\\r\n\\r\nLook\nat the frog jumping game to the left.   It looks like the game from the last\nlesson, but the frog moves the mushroom if it hits it.  What code do you think\nwould help the computer to know whether two sprites are touching?\\r\n\\r\n[//]:\n#  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)"
      CSD U3 collisions car intro_2018_markdown_instruction: "# Frog Jump\\r\n\\r\nLook\nat the frog jumping game to the left.   It looks like the game from the last\nlesson, but the frog moves the mushroom if it hits it.  What code do you think\nwould help the computer to know whether two sprites are touching?\\r\n\\r\n[//]:\n#  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)"
      CSD U3 collisions car_markdown_instruction: "# Improve Your Game\\r\n\\r\nNow\nthat you know how to use `isTouching` and `playSound`, you can make some fun\nthings happen when your sprites run into each other.\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `if`, `isTouching`, `playsound`, and any other blocks you want to add\neffects when your sprites collide.  You should have at least two effects.\\r\n\\r\n_Challenge:\nCan you add a score board to the top of the screen?  How would your game keep\nscore, and how would the score be displayed?_"
      CSD U3 collisions collide_markdown_instruction: "# Save your treasure\\r\n\\r\nThe\npirate is trying to steal your treasure!  Use the arrow keys to move the pirate\naround the screen.  Can you change the code so the pirate can't get past\nthe wall?\\r\n\\r\n# Do This\\r\n\\r\nUse the `collide` block to make the pirate\nsprite collide into the wall.\\r\n\\r\n[//]: #(https://images.code.org/04a7b28f7228570602238fed87420aab-image-1470944619236.png)\\r\n\\r\n[//]:\n#(https://images.code.org/8f7ec18621c97ce98d22337a1e21ddab-image-1470944619234.png)\\r\n\\r\n[//]:\n#(https://images.code.org/6b749a05857ea1e88fa46f7e2740c77c-image-1470944619235.png)"
      CSD U3 collisions debug isTouching_markdown_instruction: "# Debugging Collisions\\r\n\\r\nThe\nballoon is popping before the tack touches it.  When sprites aren't doing\nwhat you expect, you can use the `debug` block to get more information about\nwhy the sprites are behaving that way.  Can you find out what's wrong in\nthe code below?\\r\n\\r\n# Do This\\r\n* Run the code and use the arrow keys\nto move the tack to pop the balloon.\\r\n* In the code below, change `balloon.debug\n= false` to `balloon.debug = true`.\\r\n* Add a new `debug` block to the code\nand set the tack sprite's debug property to `true`.\\r\n* Run the code again,\nthen discuss with your partner why the balloon is popping early.\\r\n\\r\n*Challenge:\nCan you use the animations tab to resize the balloon picture so it pops at\nthe correct time?*\\r\n\\r\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\\r\n\\r\n[//]:\n# (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\\r\n\\r\n[//]:\n# (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)"
      CSD U3 collisions debug isTouching_2018_markdown_instruction: "# Debugging\nCollisions\\r\n\\r\nThe balloon is popping before the tack touches it.  When\nsprites aren't doing what you expect, you can use the `debug` block to get\nmore information about why the sprites are behaving that way.  Can you find\nout what's wrong in the code below?\\r\n\\r\n# Do This\\r\n* Run the code and\nuse the arrow keys to move the tack to pop the balloon.\\r\n* In the code below,\nchange `balloon.debug = false` to `balloon.debug = true`.\\r\n* Add a new `debug`\nblock to the code and set the tack sprite's debug property to `true`.\\r\n*\nRun the code again, then discuss with your partner why the balloon is popping\nearly.\\r\n\\r\n*Challenge: Can you use the animations tab to resize the balloon\npicture so it pops at the correct time?*\\r\n\\r\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\\r\n\\r\n[//]:\n# (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\\r\n\\r\n[//]:\n# (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)"
      CSD U3 collisions debug_markdown_instruction: "# Debug\\r\n\\r\nSometimes sprites\nwill behave in ways that are unexpected. There is a special `sprite.debug`\nproperty you can use to better understand why the sprites interact the way\nthat they do.\\r\n\\r\n# Do This\\r\n\\r\nThese two coins are round, so you would\nexpect them to bounce in a certain way. Something weird is happening though!\\r\n\\r\n*\nRun the code and watch the way that the coins interact.\\r\n* Use the `sprite.debug`\nblock to make debug 'true' for both the sprites and run the code again.\\r\n*\nChange the gold coin's starting x position to 51 and run the code again.\\r\n*\nDiscuss with a partner: Why do you think the coins are bouncing strangely?"
      CSD U3 collisions debug_2018_markdown_instruction: "# Debug\\r\n\\r\nSometimes\nsprites will behave in ways that are unexpected. There is a special `sprite.debug`\nproperty you can use to better understand why the sprites interact the way\nthat they do.\\r\n\\r\n# Do This\\r\n\\r\nThese two coins are round, so you would\nexpect them to bounce in a certain way. Something weird is happening though!\\r\n\\r\n*\nRun the code and watch the way that the coins interact.\\r\n* Use the `sprite.debug`\nblock to make debug 'true' for both the sprites and run the code again.\\r\n*\nChange the gold coin's starting x position to 51 and run the code again.\\r\n*\nDiscuss with a partner: Why do you think the coins are bouncing strangely?"
      CSD U3 collisions displace diagonal_markdown_instruction: "# Diagonal Elevator\\r\n\\r\nLast\ntime we saw balloon, it pushed the feather all the way off screen.  What do\nyou think will happen when the balloon moves away from the feather while it's\nmoving it?\\r\n\\r\n# Do This\\r\n\\r\nUse the `displace` block to make the balloon\nsprite push the feather sprite, and watch what happens when the sprites stop\ntouching each other.\\r\n\\r\n[//]: # (https://images.code.org/a6c891b044cea1b6d8649a153e13739b-image-1470316517410.png)\\r\n\\r\n[//]:\n# (https://images.code.org/af2df53196186e50a58f64f6559a53ca-image-1470316589121.png)\\r\n\\r\n[//]:\n# (https://images.code.org/fb739254c4d2f6745977a26e0481162a-image-1470316780326.png)\\r\n\\r\n[//]:\n# (https://images.code.org/341bb1ce73ba812f2bd0afeb01e08aad-image-1470316853020.png)"
      CSD U3 collisions displace intro_markdown_instruction: "# Displace\\r\n\\r\nThe\ninteraction you've been programming is so common that there's a block designed\nto do the interaction for you. `sprite.displace()` that will make one sprite\npush the other when they touch. The code underlying this block might look\na lot like what you just wrote, but now you no longer need to worry about\nwriting those details yourself.\\r\n\\r\n# Do This\\r\n\\r\nSomeone tried to use\nthe `sprite.displace()` block to make the **elephant push the hippo**, but\nthere is a bug. Can you change the code so that the elephant pushes the hippo\noff the screen?\\r\n\\r\n* Find the line of code where the `sprite.displace()`\nblock is used and fix the error."
      CSD U3 collisions displace intro_2018_markdown_instruction: "# Displace\\r\n\\r\nThe\ninteraction you've been programming is so common that there's a block designed\nto do the interaction for you. `sprite.displace()` that will make one sprite\npush the other when they touch. The code underlying this block might look\na lot like what you just wrote, but now you no longer need to worry about\nwriting those details yourself.\\r\n\\r\n# Do This\\r\n\\r\nSomeone tried to use\nthe `sprite.displace()` block to make the **elephant push the hippo**, but\nthere is a bug. Can you change the code so that the elephant pushes the hippo\noff the screen?\\r\n\\r\n* Find the line of code where the `sprite.displace()`\nblock is used and fix the error."
      CSD U3 collisions displace x_markdown_instruction: "# Program a Sprite Interaction\\r\n\\r\nYou\nshould have discussed with your classmates how you could create the sprite\ninteraction you saw in the last level. Now it's your turn to program it yourself.\nHow can you make the giraffe move the monkey off the screen?\\r\n\\r\n# Do This\\r\n\\r\nThe\ngiraffe is already moving across the screen toward the monkey but the sprite\ninteraction itself hasn't been programmed.\\r\n\\r\n* Use the plan you developed\nwith your classmates on the last level to program the sprite interaction yourself.\\r\n\\r\n[//]:\n# (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\\r\n\\r\n[//]:\n# (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)"
      CSD U3 collisions displace x_2018_markdown_instruction: "# Program a Sprite\nInteraction\\r\n\\r\nYou should have discussed with your classmates how you\ncould create the sprite interaction you saw in the last level. Now it's your\nturn to program it yourself. How can you make the giraffe move the monkey\noff the screen?\\r\n\\r\n# Do This\\r\n\\r\nThe giraffe is already moving across\nthe screen toward the monkey but the sprite interaction itself hasn't been\nprogrammed.\\r\n\\r\n* Use the plan you developed with your classmates on the\nlast level to program the sprite interaction yourself.\\r\n\\r\n[//]: # (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\\r\n\\r\n[//]:\n# (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)"
      CSD U3 collisions displace y_markdown_instruction: "# Write Your Own Sprite\nInteraction\\r\n\\r\nIn the last level you should have written code for a sprite\ninteraction that you developed with your classmates. This time try to write\nthe program on your own, but you can use the patterns you saw in the last\nlevel.\\r\n\\r\n# Do This\\r\n\\r\nThe elephant should **push the hippo off the\nscreen**. Notice that the elephant moves at a random Y velocity each time\nthe program runs.\\r\n\\r\n* Using the patterns from the last level, write code\nthat makes the elephant push the hippo off the screen."
      CSD U3 collisions displace y_2018_markdown_instruction: "# Write Your Own Sprite\nInteraction\\r\n\\r\nIn the last level you should have written code for a sprite\ninteraction that you developed with your classmates. This time try to write\nthe program on your own, but you can use the patterns you saw in the last\nlevel.\\r\n\\r\n# Do This\\r\n\\r\nThe elephant should **push the hippo off the\nscreen**. Notice that the elephant moves at a random Y velocity each time\nthe program runs.\\r\n\\r\n* Using the patterns from the last level, write code\nthat makes the elephant push the hippo off the screen."
      CSD U3 collisions egg template_markdown_instruction: "# Template Level\\r\n\\r\n[//]:\n#  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)"
      CSD U3 collisions egg template_2018_markdown_instruction: "# Template Level\\r\n\\r\n[//]:\n#  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)"
      CSD U3 collisions egg_markdown_instruction: "# Applesauce\\r\n\\r\nWhen the apple\nhits the blender, the blender should turn on.\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `isTouching` block to make the blender shake back and forth when the apple\nsprite touches the blender sprite.  The shaking motion is already coded using\nthe random block, so you just have to check when the two sprites are touching.\\r\n\\r\n*Challenge:\nCan you make the apple disappear when it touches the blender?*\\r\n\\r\n[//]:\n#  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)"
      CSD U3 collisions egg2_markdown_instruction: "# Making Sounds\\r\n\\r\nYou can\nalso use code to play a blender sound.\\r\n\\r\n# Do This\\r\n\\r\nUse the `playSound`\nblock from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\"\nsound when the apple touches the blender.  You will need to paste the address\nof the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57\nPM.png)\\r\n\\r\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57\nPM.png)"
      CSD U3 collisions egg2_2018_markdown_instruction: "# Making Sounds\\r\n\\r\nYou\ncan also use code to play a blender sound.\\r\n\\r\n# Do This\\r\n\\r\nUse the\n`playSound` block from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\"\nsound when the apple touches the blender.  You will need to paste the address\nof the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57\nPM.png)\\r\n\\r\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57\nPM.png)"
      CSD U3 collisions egg_2018_markdown_instruction: "# Applesauce\\r\n\\r\nWhen\nthe apple hits the blender, the blender should turn on.\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `isTouching` block to make the blender shake back and forth when the apple\nsprite touches the blender sprite.  The shaking motion is already coded using\nthe random block, so you just have to check when the two sprites are touching.\\r\n\\r\n*Challenge:\nCan you make the apple disappear when it touches the blender?*\\r\n\\r\n[//]:\n#  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)"
      CSD U3 collisions flyman add obstacles_markdown_instruction: "# Flyer Game\n- Add Obstacle\\r\n\\r\nThis is the flyer game you built in the last lesson.\nFor the next several levels, you'll be adding an obstacle sprite to the game,\nusing some of the sprite interactions you just learned. At the end you'll\nhave a chance to keep adding on ideas of your own.\\r\n\\r\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58\nAM.png\" style=\"float:right;width:200px\">\\r\n\\r\n# Do This\\r\n\\r\nAdd an\nobstacle sprite to the game. You can use whatever image you like from the\nanimation tab but the example shown here uses a sun. Right now you just need\nto add the sprite to your game and give it an animation.\\r\n\\r\n* Add a new\nsprite to your game called \"obstacle\".\\r\n* In the animation tab create\na new animation for your obstacle. In the example a sun image was chosen.\\r\n*\nUse the `sprite.setAnimation()` block to give your sprite the image you chose.\\r\n*\nRun the code and make sure the sprite appears where you want it on the screen.\nYou may need to set its X, Y, and scale properties to get it to look the way\nyou want."
      CSD U3 collisions flyman add obstacles_2018_markdown_instruction: "# Flyer\nGame - Add Obstacle\\r\n\\r\nThis is the flyer game you built in the last lesson.\nFor the next several levels, you'll be adding an obstacle sprite to the game,\nusing some of the sprite interactions you just learned. At the end you'll\nhave a chance to keep adding on ideas of your own.\\r\n\\r\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58\nAM.png\" style=\"float:right;width:200px\">\\r\n\\r\n# Do This\\r\n\\r\nAdd an\nobstacle sprite to the game. You can use whatever image you like from the\nanimation tab but the example shown here uses a sun. Right now you just need\nto add the sprite to your game and give it an animation.\\r\n\\r\n* Add a new\nsprite to your game called \"obstacle\".\\r\n* In the animation tab create\na new animation for your obstacle. In the example a sun image was chosen.\\r\n*\nUse the `sprite.setAnimation()` block to give your sprite the image you chose.\\r\n*\nRun the code and make sure the sprite appears where you want it on the screen.\nYou may need to set its X, Y, and scale properties to get it to look the way\nyou want."
      CSD U3 collisions flyman bounceOff_markdown_instruction: "# Flyer Game - Interacting\nwith the Obstacle\\r\n\\r\nYou don't want your player to be able to move through\nthe obstacle, so you'll need to use one of the sprite interactions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code to your game that prevents your player from moving\nthrough the obstacle.\\r\n* If you use one of the bounce interactions, decide\nwhether you want to reset the bounciness of your character.\\r\n* Discuss with\na neighbor: Which sprite interaction did you decide to use? Is there more\nthan one sprite interaction that works the way you'd expect?"
      CSD U3 collisions flyman bounceOff_2018_markdown_instruction: "# Flyer Game\n- Interacting with the Obstacle\\r\n\\r\nYou don't want your player to be able\nto move through the obstacle, so you'll need to use one of the sprite interactions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code to your game that prevents your player from moving\nthrough the obstacle.\\r\n* If you use one of the bounce interactions, decide\nwhether you want to reset the bounciness of your character.\\r\n* Discuss with\na neighbor: Which sprite interaction did you decide to use? Is there more\nthan one sprite interaction that works the way you'd expect?"
      CSD U3 collisions flyman change colliders_markdown_instruction: "# Flyer Game\n- Change Colliders\\r\n\\r\nRight now your colliders are all rectangular. Switch\nthem over to circles to get more interesting and realistic bounces and collisions.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `sprite.setCollider()` block to change the colliders\nof your sprites to circles.\\r\n* Set your sprites' debug properties to `true`\nto make sure your game is working the way you want.\\r\n* Play your game to\nmake sure it's working the way you want."
      CSD U3 collisions flyman change colliders_2018_markdown_instruction: "# Flyer\nGame - Change Colliders\\r\n\\r\nRight now your colliders are all rectangular.\nSwitch them over to circles to get more interesting and realistic bounces\nand collisions.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `sprite.setCollider()` block\nto change the colliders of your sprites to circles.\\r\n* Set your sprites'\ndebug properties to `true` to make sure your game is working the way you want.\\r\n*\nPlay your game to make sure it's working the way you want."
      CSD U3 collisions flyman displace coin_markdown_instruction: "# Flyer Game\n- Coin Behind the Obstacle\\r\n\\r\nRight now your coin is moving to random\nlocations. That means sometimes it even will appear behind your obstacle,\nso your character can't get to it. Using sprite interactions you can fix\nthis problem.\\r\n\\r\n# Do This\\r\n\\r\n* Add code to your game that prevents\nthe coin from moving behind the obstacle. Don't be afraid to try out ideas\njust to see how they work.\\r\n* Discuss with a neighbor: Which sprite interaction\ndid you decide to use? Is there more than one sprite interaction that works\nthe way you'd expect?"
      CSD U3 collisions flyman displace coin_2018_markdown_instruction: "# Flyer\nGame - Coin Behind the Obstacle\\r\n\\r\nRight now your coin is moving to random\nlocations. That means sometimes it even will appear behind your obstacle,\nso your character can't get to it. Using sprite interactions you can fix\nthis problem.\\r\n\\r\n# Do This\\r\n\\r\n* Add code to your game that prevents\nthe coin from moving behind the obstacle. Don't be afraid to try out ideas\njust to see how they work.\\r\n* Discuss with a neighbor: Which sprite interaction\ndid you decide to use? Is there more than one sprite interaction that works\nthe way you'd expect?"
      CSD U3 collisions flyman make it your own_markdown_instruction: "# Flyer Game\n- Make It Your Own\\r\n\\r\nTime to make this game your own by using what you've\nlearned about sprite interactions.\\r\n\\r\n# Do This\\r\n\\r\nAdd at least one\nmore aspect to your game that uses sprite interactions. There's some ideas\nbelow or you can choose to add features of your own. Make sure you're ready\nto share your ideas with your classmates.\\r\n\\r\n* Create \"edge\" sprites\nto keep your character from bouncing out.\\r\n* Add platforms to the game for\nyour character to navigate around.\\r\n* Add another obstacle to your game.\\r\n*\nCreate another idea of your own."
      CSD U3 collisions flyman make it your own_2018_markdown_instruction: "# Flyer\nGame - Make It Your Own\\r\n\\r\nTime to make this game your own by using what\nyou've learned about sprite interactions.\\r\n\\r\n# Do This\\r\n\\r\nAdd at\nleast one more aspect to your game that uses sprite interactions. There's\nsome ideas below or you can choose to add features of your own. Make sure\nyou're ready to share your ideas with your classmates.\\r\n\\r\n* Create \"edge\"\nsprites to keep your character from bouncing out.\\r\n* Add platforms to the\ngame for your character to navigate around.\\r\n* Add another obstacle to your\ngame.\\r\n* Create another idea of your own."
      CSD U3 collisions getSpeed_markdown_instruction: "# Dashboard\\r\n\\r\nHere's\na car that can be controlled with the arrow keys.  The dashboard at the bottom\nshould show the car's speed and direction, even when it is off the screen.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `getDirection()` block to turn the compass needle\nto the car's current direction. [Show me where](#triggercallout=code_triggered1)\\r\n*\nUse the `getSpeed()` block to display the car's current speed on the dashboard,\ninstead of 0. [Show me where](#triggercallout=code_triggered2)\\r\n\\r\n*Challenge:\nCan you also show the car's current location on the dashboard?*\\r\n\\r\n[//]:\n#(https://images.code.org/b87e51b8ed026ca239cbf629c9a58b26-image-1472571454000.png)\\r\n\\r\n[//]:\n#(https://images.code.org/669fd48b2a28602220c2d07b717c1ace-image-1472571454002.png)\\r\n\\r\n[//]:\n#(https://images.code.org/e3013d8428f54f7fbde63d0a4a8eaafb-image-1472571782304.png)"
      CSD U3 collisions horse_markdown_instruction: "# Rainbow Horse\\r\n\\r\nWhen\nthe rainbow touches the horse, it should turn into a unicorn.\\r\n\\r\n# Do\nThis\\r\n\\r\nUse the `if`, `isTouching`, and `setAnimation` blocks to change\nthe horse sprite's image when the rainbow touches it.  The unicorn image\nis already loaded in the animations tab for you.\\r\n\\r\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)"
      CSD U3 collisions horse_2018_markdown_instruction: "# Rainbow Horse\\r\n\\r\nWhen\nthe rainbow touches the horse, it should turn into a unicorn.\\r\n\\r\n# Do\nThis\\r\n\\r\nUse the `if`, `isTouching`, and `setAnimation` blocks to change\nthe horse sprite's image when the rainbow touches it.  The unicorn image\nis already loaded in the animations tab for you.\\r\n\\r\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)"
      CSD U3 collisions isTouching intro_markdown_instruction: "# isTouching()\\r\n\\r\nWriting\nout the math each time you want to check whether two sprites are touching\ncan take a while, so a programmer created the `isTouching` block, which can\ncheck whether one sprite is touching another sprite (the *target*).  The computer\nis still doing the same math as in the previous program, but you don't have\nto worry about it because another programmer already did that work.\\r\n\\r\n#\nDo This\\r\n\\r\nInside the draw loop, drag the `isTouching` block into the\n`if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n*Hint: Don't forget to change the \"sprite\" to \"balloon\" and\nthe \"target\" to \"tack\".*\\r\n\\r\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)"
      CSD U3 collisions isTouching intro_2018_markdown_instruction: "# isTouching()\\r\n\\r\nWriting\nout the math each time you want to check whether two sprites are touching\ncan take a while, so a programmer created the `isTouching` block, which can\ncheck whether one sprite is touching another sprite (the *target*).  The computer\nis still doing the same math as in the previous program, but you don't have\nto worry about it because another programmer already did that work.\\r\n\\r\n#\nDo This\\r\n\\r\nInside the draw loop, drag the `isTouching` block into the\n`if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n*Hint: Don't forget to change the \"sprite\" to \"balloon\" and\nthe \"target\" to \"tack\".*\\r\n\\r\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\\r\n\\r\n[//]:\n# (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\\r\n\\r\n[//]:\n# (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)"
      CSD U3 collisions obstacle_markdown_instruction: "# Mouse Maze\\r\n\\r\nThe mouse\nneeds to find its way through the maze to get to the cheese, but right now\nit passes through the walls.  Can you change the code so that the mouse is\nblocked by the walls?\\r\n\\r\n# Do This\\r\n\\r\nAdd a `displace`, `collide`,\n`bounce`, or `bounceOff` block in the draw loop to make the sprites interact\nin the right way.\\r\n\\r\n[//]: # (https://images.code.org/cefb99d244b9167314128578e477808c-image-1470948228670.png)\\r\n\\r\n[//]:\n# (https://images.code.org/e0cf14ae384355129b32b73ef64ed77e-image-1470948281047.png)"
      CSD U3 collisions open_markdown_instruction: "# Your Choice\\r\n\\r\nYou've\nseen sprites do many things when they collide with each other: rotate, disappear,\nchange animation, or even make a new sprite appear on the screen.  Now it's\nyour turn to choose what the sprites can do.  Decide what two animations you\nwant to use for your sprite, and what you want to happen when they touch each\nother, then code your choice.  You may also choose to change the position,\nspeed, and direction of your sprites.\\r\n\\r\n# Do This\\r\n* Decide what your\nsprites should look like, and use `setAnimation` to give them that image\\r\n*\nChange the starting position of your sprites in the `createSprite` block\\r\n*\nUse `setSpeedAndDirection` or `velocityX` and `velocityY` to make your sprites\nmove how you want\\r\n* Use the `if` block, with `isTouching` and `rotate`,\n`visible`, `setAnimation` or any other block to make your sprites react when\nthey collide."
      CSD U3 collisions overlap x_markdown_instruction: "# Turtle Race\\r\n\\r\nThe\nturtle moves forward every time you press the left key.  When he touches the\nfinish line, he should get a trophy.  The trophy will appear when `isTouchingX`\nis true.  Can you add code to make sure it is set to true when the turtle\ngets to the finish line?\\r\n\\r\n# Do This\\r\n\\r\nAdd code inside the draw\nloop to set the values of the variables that have been created for you.  Then,\ntest your program by playing the game.\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/af2cffe952997258eb6b5573cfe9a29f-image-1470188585528.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/d2eb9684743d45ef1e10ff4602936107-image-1470188590517.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/98aee1ed11c7e00cd66718b4c232ab66-image-1470190293465.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/fb129d34e3089763f35dfc8980d705ea-image-1470191576501.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/3fc6da739dfd31b256618a560c12a076-image-1470191923150.png)"
      CSD U3 collisions overlap y_markdown_instruction: "# Fried Egg\\r\n\\r\nIt's\nbreakfast time!  When the egg hits the pan, it should start to fry.  Can you\nadd code so that isTouchingX is set to true at the right time?\\r\n\\r\n# Do\nThis\\r\n\\r\nSet the values of the variables so that `isTouchingX` is true\nwhen the egg hits the pan.\\r\n\\r\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)"
      CSD U3 collisions overlap_markdown_instruction: "# IDEK\\r\n\\r\nThis is Tracey's\nidea.  Apparently horses turn into unicorns when they go through rainbows?  Use\nyour arrow keys to aim the rainbow at the unicorn, then hit the space bar\nto make it fly toward the horse.\\r\n\\r\n# Do This\\r\n\\r\nUse two `if` blocks\ntogether to change the sprite's animation when the two sprites touch each\nother.  Then play the game to test your code.\\r\n\\r\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)"
      CSD U3 collisions pinball_markdown_instruction: "# Panda Game\\r\n\\r\nPress\n\"Run\" to try out the game on the left.  You can use the left and right arrow\nkeys to control the paddle.  What types of sprite interactions do you see?  Which\nones will use the `isTouching` block?  Which interactions have their own blocks?\\r\n\\r\n#\nDo This\\r\n\\r\nPlay the game a few times and discuss with your partner what\nhow you would program the different sprite interactions.\\r\n"
      CSD U3 collisions pinball2_markdown_instruction: "# Panda Game\\r\n\\r\nHere\nis the same game, but missing most of the interactions.  All of the missing\ninteractions should be inside the \"spriteInteractions\" function.  ([Show\nme where](#triggercallout=code_triggered))  The comments will help you remember\nwhich interactions are missing.\\r\n\\r\n# Do This\\r\n\\r\nUse the blocks you\nknow to program back the missing interactions.\\r\n"
      CSD U3 collisions pirate_markdown_instruction: "# Hide your treasure\\r\n<img\nstyle=\"float: right\" src=\"https://images.code.org/2bcf0ba8d5efe69c4531627f2c4d2a1f-image-1472600812452.gif\"\n/>\\r\nYour enemies are still after your treasure.  Use the arrow keys to move\nthe person around the screen.  Can you change the code so that she can push\nthe treasure behind the tree?\\r\n\\r\n# Do This\\r\n\\r\nUse `displace`, `collide`,\n`bounce`, or `bounceOff` to make the sprites interact in the right way.\\r\n\\r\n[//]:\n# (https://images.code.org/732942eef4d0c288bf445a4478aee6ec-image-1470947222110.png)\\r\n\\r\n[//]:\n# (https://images.code.org/1458d90cb97f3bd37508fa0ec3d997f8-image-1470947222109.png)\\r\n\\r\n[//]:\n# (https://images.code.org/56da2ef5cef40080e0d677c86aec3901-image-1470947222108.png)"
      CSD U3 collisions predict set velocity code_markdown_instruction: "# Sprite\nInteractions\\r\n\\r\nSo far you've been able to create simple sprite interactions\nby using the `sprite.isTouching()` block. For example, you've reset a coin\nto a different location on the screen when a character touches it. Now it's\ntime to start making sprites have more complex interactions.\\r\n\\r\n# Do This\\r\n\\r\n*\nRun the program and observe the interaction between the two sprites.\\r\n*\nDiscuss with a neighbor: Using only the commands you already know how could\nyou create this kind of interaction? There are many ways to do it, but here\nare some blocks to consider:\\r\n\\t* `sprite.isTouching()`\\r\n    * `sprite.velocityX`\\r\n    *\n`sprite.velocityY`\\r\n    * `sprite.x`\\r\n    * `sprite.y`\\r\n\\r\nBe ready\nto share your ideas with your classmates."
      CSD U3 collisions predict set velocity code_2018_markdown_instruction: "# Sprite\nInteractions\\r\n\\r\nSo far you've been able to create simple sprite interactions\nby using the `sprite.isTouching()` block. For example, you've reset a coin\nto a different location on the screen when a character touches it. Now it's\ntime to start making sprites have more complex interactions.\\r\n\\r\n# Do This\\r\n\\r\n*\nRun the program and observe the interaction between the two sprites.\\r\n*\nDiscuss with a neighbor: Using only the commands you already know how could\nyou create this kind of interaction? There are many ways to do it, but here\nare some blocks to consider:\\r\n\\t* `sprite.isTouching()`\\r\n    * `sprite.velocityX`\\r\n    *\n`sprite.velocityY`\\r\n    * `sprite.x`\\r\n    * `sprite.y`\\r\n\\r\nBe ready\nto share your ideas with your classmates."
      CSD U3 collisions predict set velocity_markdown_instruction: "# Setting Velocity\\r\n\\r\nThis\nprogram creates two sprites, one that's standing still in the middle of the\nscreen and the other that moves towards it. Notice the one important line\nof code in this program\\r\n\\r\n\\tif(sprite1.isTouching(sprite2)){\\r\n\\t\\tsprite2.velocityX\n= sprite1.velocityX;\\r\n    }\\r\n\\r\n# Predict\\r\n\\r\nWhat do you think will\nhappen when the two sprites touch? Write your answer and reasonings in the\nspace below. Then run the code to see for yourself.\\r\n\\r\n"
      CSD U3 collisions scoreboard_markdown_instruction: "# Scoreboard\\r\n\\r\nYou\ncan also use `isTouching` to decide whether you should increase the score.  In\nthis game, the score is stored inside the 'score' variable.  It is displayed\non the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n# Do This\\r\n\\r\n* Use the `if` and `isTouching` blocks to determine\nwhether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2)\n)\\r\n* If it has, do the following three things:\\r\n * Use the counter pattern\non the score variable to increase the score.\\r\n * Reset the carrot's x position\noff the right-hand side of the screen.\\r\n * Set the carrot's y position\nto a random number between 10 and 390."
      CSD U3 collisions scoreboard_2018_markdown_instruction: "# Scoreboard\\r\n\\r\nYou\ncan also use `isTouching` to decide whether you should increase the score.  In\nthis game, the score is stored inside the 'score' variable.  It is displayed\non the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n# Do This\\r\n\\r\n* Use the `if` and `isTouching` blocks to determine\nwhether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2)\n)\\r\n* If it has, do the following three things:\\r\n * Use the counter pattern\non the score variable to increase the score.\\r\n * Reset the carrot's x position\noff the right-hand side of the screen.\\r\n * Set the carrot's y position\nto a random number between 10 and 390."
      CSD U3 collisions setCollider_markdown_instruction: "# setCollider\\r\n\\r\nSprites\ninteract based on the size and shape of their collider, not the images that\nare assigned to them. You can only see the collider when debug mode is turned\non.  You can change the shape of the collider using the `sprite.setCollider()`\nblock, which lets you pick between a \"rectangle\" or a \"circle\".  By default\nall colliders are \"rectangle\".\\r\n\\r\n# Do This\\r\n\\r\n* Find the `sprite.setCollider()`\nblock for the gold coin, and change it from \"rectangle\" to \"circle\".\\r\n*\nAdd a new `sprite.setCollider()` block for the silver coin, and choose \"circle\"\nfor the shape of the collider.\\r\n* Run the code again to see how the sprites\nbounce.\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)"
      CSD U3 collisions setCollider_2018_markdown_instruction: "# setCollider\\r\n\\r\nSprites\ninteract based on the size and shape of their collider, not the images that\nare assigned to them. You can only see the collider when debug mode is turned\non.  You can change the shape of the collider using the `sprite.setCollider()`\nblock, which lets you pick between a \"rectangle\" or a \"circle\".  By default\nall colliders are \"rectangle\".\\r\n\\r\n# Do This\\r\n\\r\n* Find the `sprite.setCollider()`\nblock for the gold coin, and change it from \"rectangle\" to \"circle\".\\r\n*\nAdd a new `sprite.setCollider()` block for the silver coin, and choose \"circle\"\nfor the shape of the collider.\\r\n* Run the code again to see how the sprites\nbounce.\\r\n\\r\n\\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)"
      CSD U3 collisions sidescroll2_markdown_instruction: "# Improve Your Game\\r\n\\r\nNow\nthat you know how to use `isTouching` and `playSound`, you can make some fun\nthings happen when your sprites run into each other.\\r\n\\r\n*Note: The `playSound`\nblock now has an extra parameter called \"loop\" that can be set to true or\nfalse.  If this parameter is true, the sound will continue to play in a loop.*\\r\n\\r\n#\nDo This\\r\n\\r\n* Add at least two effects when your sprites collide.\\r\n\\r\n*Challenge:\nAdd a scoreboard to the top of your screen.*\\r\n"
      CSD U3 collisions sidescroll2_2018_markdown_instruction: "# Improve Your Game\\r\n\\r\nNow\nthat you know how to use `isTouching` and `playSound`, you can make some fun\nthings happen when your sprites run into each other.\\r\n\\r\n*Note: The `playSound`\nblock now has an extra parameter called \"loop\" that can be set to true or\nfalse.  If this parameter is true, the sound will continue to play in a loop.*\\r\n\\r\n#\nDo This\\r\n\\r\n* Add at least two effects when your sprites collide.\\r\n\\r\n*Challenge:\nAdd a scoreboard to the top of your screen.*\\r\n"
      CSD U3 collisions sundae_markdown_instruction: "# collide()\\r\n\\r\nThe `collide`\nblock is similar to `displace`, but it makes the sprite that uses it stop\nwhen it is touching the other sprite.  Can you use this to make the cherry\nstop when it gets to the top of the ice cream sundae?\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe `collide` block to make the cherry sprite stop when it runs into the ice\ncream sprite.\\r\n\\r\n[//]: # (https://images.code.org/491fb8bff907a183bd1cf0061689d193-image-1470419927625.png)\\r\n\\r\n[//]:\n# (https://images.code.org/ea2066d640e74284b8c48e382f56bf1b-image-1470419927627.png)"
      CSD U3 collisions tennis_markdown_instruction: "# Tennis\\r\n\\r\nComplete the\ntennis game by making sure the ball and the racket interact in the right way.\nYou can use your up and down arrows to control the racket.\\r\n\\r\n# Do This\\r\n\\r\nAdd\na `displace`, `collide`, `bounce`, or `bounceOff` block in the draw loop to\nmake the sprites interact as they do in the picture.\\r\n\\r\n_Challenge: Can\nyou add a scoreboard that will add a point every time the ball is hit, and\nsubtract one every time it's missed?_\\r\n\\r\n[//]: # (https://images.code.org/8d8cf039f50114c07a21e73bbc1c8dfe-image-1470418244037.png)\\r\n\\r\n[//]:\n# (https://images.code.org/d05be653ae7e4717353dffd08af9c656-image-1470418244039.png)"
      CSD U3 collisions try blocks_markdown_instruction: "# More Collision Blocks\\r\n\\r\nThree\nnew types of sprite interactions have been added to the toolbox, `sprite.collide()`,\n`sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect\nthe sprites?\\r\n\\r\n# Do This\\r\n\\r\n* Switch out the displace block for the\n`sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. (\n[Show me where](#triggercallout=code_triggered) )\\r\n\\t* *Hint: If you're\nhaving trouble doing this with blocks then switch over to text mode.*\\r\n*\nDiscuss with a neighbor: What is the difference between the four different\nsprite interactions? What do you think the purpose of each block is?\\r\n\\r\n\\r\n[//]:\n#  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)"
      CSD U3 collisions try blocks_2018_markdown_instruction: "# More Collision Blocks\\r\n\\r\nThree\nnew types of sprite interactions have been added to the toolbox, `sprite.collide()`,\n`sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect\nthe sprites?\\r\n\\r\n# Do This\\r\n\\r\n* Switch out the displace block for the\n`sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. (\n[Show me where](#triggercallout=code_triggered) )\\r\n\\t* *Hint: If you're\nhaving trouble doing this with blocks then switch over to text mode.*\\r\n*\nDiscuss with a neighbor: What is the difference between the four different\nsprite interactions? What do you think the purpose of each block is?\\r\n\\r\n\\r\n[//]:\n#  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\\r\n\\r\n[//]:\n#  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)"
      CSD U3 collisions turtle_markdown_instruction: "# Debugging Sprite Interactions\\r\n\\r\nSprite\ninteractions just run some code when they're called. The interactions are\nnot \"remembered\" by the game. If you want one sprite to bounce or collide\nwith another then it needs to be a part of the draw loop. If you forget then\nthis can lead to unexpected behavior.\\r\n\\r\n# Do This\\r\n\\r\nThe turtle can\nbe moved with the arrow keys. It's not supposed to be able to walk through\nthe tree, but something is wrong in the code. Can you find and correct the\nbug in the code?\\r\n\\r\n* Run the code and try to make the turtle collide\nwith the tree.\\r\n* Look through the code and discuss with your partner what\nthe problem is.\\r\n* Correct the code, then run it again to make sure it works."
      CSD U3 collisions turtle_2018_markdown_instruction: "# Debugging Sprite Interactions\\r\n\\r\nSprite\ninteractions just run some code when they're called. The interactions are\nnot \"remembered\" by the game. If you want one sprite to bounce or collide\nwith another then it needs to be a part of the draw loop. If you forget then\nthis can lead to unexpected behavior.\\r\n\\r\n# Do This\\r\n\\r\nThe turtle can\nbe moved with the arrow keys. It's not supposed to be able to walk through\nthe tree, but something is wrong in the code. Can you find and correct the\nbug in the code?\\r\n\\r\n* Run the code and try to make the turtle collide\nwith the tree.\\r\n* Look through the code and discuss with your partner what\nthe problem is.\\r\n* Correct the code, then run it again to make sure it works."
      CSD U3 collisions types_markdown_instruction: "# Collision Types\\r\n\\r\nThere\nare four types of collisions that we use in Game Lab.  These blocks will cause\na certain type of interaction between the _sprite_ and its _target_.\\r\n\\r\n##\ndisplace\\r\n\\r\nThe `displace` block causes the sprite to push the target\nas long as they are touching each other. The sprite keeps moving normally.\\r\n\\r\n##\ncollide\\r\n\\r\nThe `collide` block makes the sprite stop when it runs into\nthe target.  If the target is moving, it will push the sprite with it.  The\ntarget keeps moving normally.\\r\n\\r\n## bounce\\r\n\\r\nThe `bounce` block makes\nthe sprite and the target bounce when they touch each other.  Both the sprite\nand the target change how they are moving.\\r\n\\r\n## bounceOff\\r\n\\r\nThe\n`bounceOff` block makes the sprite bounce off the target.  The target keeps\nmoving normally.\\r\n\\r\n\\r\n\\r\n# Do This\\r\n\\r\nChoose the best block to\nmodel the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\\r\n\\r\n[//]:\n# (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)"
      CSD U3 collisions types_2018_markdown_instruction: "# Collision Types\\r\n\\r\nThere\nare four types of collisions that we use in Game Lab.  These blocks will cause\na certain type of interaction between the _sprite_ and its _target_.\\r\n\\r\n##\ndisplace\\r\n\\r\nThe `displace` block causes the sprite to push the target\nas long as they are touching each other. The sprite keeps moving normally.\\r\n\\r\n##\ncollide\\r\n\\r\nThe `collide` block makes the sprite stop when it runs into\nthe target.  If the target is moving, it will push the sprite with it.  The\ntarget keeps moving normally.\\r\n\\r\n## bounce\\r\n\\r\nThe `bounce` block makes\nthe sprite and the target bounce when they touch each other.  Both the sprite\nand the target change how they are moving.\\r\n\\r\n## bounceOff\\r\n\\r\nThe\n`bounceOff` block makes the sprite bounce off the target.  The target keeps\nmoving normally.\\r\n\\r\n\\r\n\\r\n# Do This\\r\n\\r\nChoose the best block to\nmodel the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered)\n)\\r\n\\r\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\\r\n\\r\n[//]:\n# (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)"
      CSD U3 counter example_markdown_instruction: "# The Counter Pattern\\r\n\\r\nIn\nthis program, the draw loop is used to make the sprites move across the screen.\\r\n\\r\n#\nDo This\\r\n\\r\n* Run the code and discuss with your partner how you think\nit works."
      CSD U3 dancing alien_markdown_instruction: "# Sprites in the Draw Loop\\r\n\\r\nBy\nchanging sprite properties in the draw loop, you can animate your characters.\n\\r\n\\r\nThis animation has also been slowed down.  At the beginning of the\nprogram the `World.frameRate` block has been used to set the frame rate to\n10. Usually the frame rate is 30. Feel free to explore different frame rates.\\r\n\\r\n#\nDo This\\r\n* Run the code to see how it works.\\r\n* Discuss with your partner\nwhy some code is inside the draw loop and some code is outside.\\r\n* Try changing\nthe frame rate and running the code again."
      CSD U3 dancing alien_2018_markdown_instruction: "# Sprites in the Draw Loop\\r\n\\r\nBy\nchanging sprite properties in the draw loop, you can animate your characters.\n\\r\n\\r\nThis animation has also been slowed down.  At the beginning of the\nprogram the `World.frameRate` block has been used to set the frame rate to\n10. Usually the frame rate is 30. Feel free to explore different frame rates.\\r\n\\r\n#\nDo This\\r\n* Run the code to see how it works.\\r\n* Discuss with your partner\nwhy some code is inside the draw loop and some code is outside.\\r\n* Try changing\nthe frame rate and running the code again."
      CSD U3 debug_markdown_instruction: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\" style=\"float:right;width:150px;\">\\r\n\\r\n# Debugging\\r\n\\r\nOften,\ncode doesn't work the first time it runs, and programmers have to debug it.  The\ncode below is supposed to make the picture on the right, but the programmer\ngot confused about which order the code should be in, as well as how to put\na square in the right place on the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the code in the workspace.\\r\n* Change the code so it makes the picture\non the right.\\r\n * (You'll need to move one line of code AND change the\ncoordinates of the square.)"
      CSD U3 debug_2018_markdown_instruction: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\" style=\"float:right;width:150px;\">\\r\n\\r\n# Debugging\\r\n\\r\nOften,\ncode doesn't work the first time it runs, and programmers have to debug it.  The\ncode below is supposed to make the picture on the right, but the programmer\ngot confused about which order the code should be in, as well as how to put\na square in the right place on the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the code in the workspace.\\r\n* Change the code so it makes the picture\non the right.\\r\n * (You'll need to move one line of code AND change the\ncoordinates of the square.)"
      CSD U3 ellipse_markdown_instruction: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\" style=\"float:right;width:150px;\">\\r\n\\r\n# ellipse\\r\n\\r\nYou can\nuse `ellipse` to make a circle.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nthat makes the ellipse.\\r\n* Add a new ellipse of a different color.\\r\n"
      CSD U3 ellipse_2018_markdown_instruction: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\" style=\"float:right;width:150px;\">\\r\n\\r\n# ellipse\\r\n\\r\nYou can\nuse `ellipse` to make a circle.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the code\nthat makes the ellipse.\\r\n* Add a new ellipse of a different color.\\r\n"
      CSD U3 fill_markdown_instruction: "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19\nPM.png\" style=\"float:right;width:200px;\">\\r\n# fill(color)\\r\n\\r\nYou can\nalso make your rectangles different colors with `fill`. It will set the color\nfor every shape that comes after it in the code.\\r\n\\r\n# Do This\\r\n\\r\n*\nLook at the code that sets the color. ( [Show me where](#triggercallout=fill)\n)\\r\n* Change the color from blue to yellow.\\r\n* Add a new square by dragging\na `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block)\n).  The new square can go any location on the screen you like.\\r\n"
      CSD U3 fill_2018_markdown_instruction: "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19\nPM.png\" style=\"float:right;width:200px;\">\\r\n# fill(color)\\r\n\\r\nYou can\nalso make your rectangles different colors with `fill`. It will set the color\nfor every shape that comes after it in the code.\\r\n\\r\n# Do This\\r\n\\r\n*\nLook at the code that sets the color. ( [Show me where](#triggercallout=fill)\n)\\r\n* Change the color from blue to yellow.\\r\n* Add a new square by dragging\na `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block)\n).  The new square can go any location on the screen you like.\\r\n"
      CSD U3 finishing touches_markdown_instruction: "# Finishing Touches\\r\n\\r\nNow\nthat you have the basis for your game, it's time to add some finishing touches.\\r\n\\r\nTo\nmake your game even better, try making at least two improvements to it. You\ncan use the list below to help you, or you can come up with your own improvements\nthat you'd like to make.\\r\n\\r\n* Find a way to keep your player from going\noff the edges of the screen.\\r\n* Add a different item for your player to\ncollect or avoid that are worth different point values.\\r\n* Make a variable\nto keep track of how many lives your player has, and then end the game when\nthe lives run out.\\r\n* Add sprites that move in the background of your game.\\r\n*\nMake another background to switch to when the score gets even higher, or when\nthe game ends.\\r\n* Give your game a way to end. Possible events to end your\ngame could be the score reaching a certain value, or the amount of lives to\nkeep the game running runs out.\\r\n* If your game has platforms, try making\nthe objects in your game interact with these platforms in some way."
      CSD U3 finishing touches_2018_markdown_instruction: "# Finishing Touches\\r\n\\r\nNow\nthat you have the basis for your game, it's time to add some finishing touches.\\r\n\\r\nTo\nmake your game even better, try making at least two improvements to it. You\ncan use the list below to help you, or you can come up with your own improvements\nthat you'd like to make.\\r\n\\r\n* Find a way to keep your player from going\noff the edges of the screen.\\r\n* Add a different item for your player to\ncollect or avoid that are worth different point values.\\r\n* Make a variable\nto keep track of how many lives your player has, and then end the game when\nthe lives run out.\\r\n* Add sprites that move in the background of your game.\\r\n*\nMake another background to switch to when the score gets even higher, or when\nthe game ends.\\r\n* Give your game a way to end. Possible events to end your\ngame could be the score reaching a certain value, or the amount of lives to\nkeep the game running runs out.\\r\n* If your game has platforms, try making\nthe objects in your game interact with these platforms in some way."
      CSD U3 game animations_markdown_instruction: "# Create your Animations\\r\n\\r\nNext\nyou will create your animations in the animation tab.  Don't forget to make\nmultiple animations if you want your sprite to change appearance according\nto how it's moving.\\r\n"
      CSD U3 game animations_2018_markdown_instruction: "# Create your Animations\\r\n\\r\nNext\nyou will create your animations in the animation tab.  Don't forget to make\nmultiple animations if you want your sprite to change appearance according\nto how it's moving.\\r\n"
      CSD U3 game backgrounds_markdown_instruction: "# Create your Backgrounds\\r\n\\r\nNext,\nyou'll create all of the background functions that you need for your game.  Some\ngames only have one background, and others have more than one that's chosen\naccording to user score or another aspect of gameplay.  You'll need to create\na function for each separate background in your game.  You'll write the code\nto choose the correct background in the next level.\\r\n\\r\n* [Show me the\nblock to create a new function](#triggercallout=callout1)\\r\n* [Show me the\narea in the code to put my function](#triggercallout=callout2)\\r\n\\r\nAfter\nyou create your functions, test them by calling them inside the draw loop,\none background per test.\\r\n\\r\n* [Show me the block to call my function](#triggercallout=callout3)"
      CSD U3 game backgrounds_2018_markdown_instruction: "# Create your Backgrounds\\r\n\\r\nNext,\nyou'll create all of the background functions that you need for your game.  Some\ngames only have one background, and others have more than one that's chosen\naccording to user score or another aspect of gameplay.  You'll need to create\na function for each separate background in your game.  You'll write the code\nto choose the correct background in the next level.\\r\n\\r\n* [Show me the\nblock to create a new function](#triggercallout=callout1)\\r\n* [Show me the\narea in the code to put my function](#triggercallout=callout2)\\r\n\\r\nAfter\nyou create your functions, test them by calling them inside the draw loop,\none background per test.\\r\n\\r\n* [Show me the block to call my function](#triggercallout=callout3)"
      CSD U3 game choose background_markdown_instruction: "# Choose your Backgrounds\\r\n\\r\nNow\nthat you have the backgrounds that you need, you'll write the code to choose\nthe correct background.  You've seen this done in [Lesson 15 Level 11](/s/csd3/stage/15/puzzle/11).\\r\n\\r\nAfter\nyou've written the code, test it by changing the starting value of your variables\nand making sure the correct background shows up.\\r\n"
      CSD U3 game choose background_2018_markdown_instruction: "# Choose your Backgrounds\\r\n\\r\nNow\nthat you have the backgrounds that you need, you'll write the code to choose\nthe correct background.  You've seen this done in [Lesson 15 Level 11](/s/csd3/stage/15/puzzle/11).\\r\n\\r\nAfter\nyou've written the code, test it by changing the starting value of your variables\nand making sure the correct background shows up.\\r\n"
      CSD U3 game create sprites_markdown_instruction: "# Create your Sprites\\r\n\\r\nNext\nyou will create your sprites and give them starting properties in the \"Create\nSprites\" area of your code.  For each sprite your should:\\r\n\\r\n* Create\nthe sprite in the correct place on the screen\\r\n* Set its animation (or color\nand size)\\r\n* Set its velocity and rotation speed, if needed\\r\n* Set its\ncollider and bounciness, if needed\\r\n\\r\nAfter you create each sprite, test\nit before making the next one.  If your sprite starts off screen, first place\nit on the screen to test it, them move it back off screen once you know that\nit looks right.\\r\n\\r\nIf your sprites position will need to be reset later\nin your game, it's a good idea to make a function that sets the position\nof this sprite that you can use again later.\\r\n"
      CSD U3 game create sprites_2018_markdown_instruction: "# Create your Sprites\\r\n\\r\nNext\nyou will create your sprites and give them starting properties in the \"Create\nSprites\" area of your code.  For each sprite your should:\\r\n\\r\n* Create\nthe sprite in the correct place on the screen\\r\n* Set its animation (or color\nand size)\\r\n* Set its velocity and rotation speed, if needed\\r\n* Set its\ncollider and bounciness, if needed\\r\n\\r\nAfter you create each sprite, test\nit before making the next one.  If your sprite starts off screen, first place\nit on the screen to test it, them move it back off screen once you know that\nit looks right.\\r\n\\r\nIf your sprites position will need to be reset later\nin your game, it's a good idea to make a function that sets the position\nof this sprite that you can use again later.\\r\n"
      CSD U3 game display boards_markdown_instruction: "# Display Boards\\r\n\\r\nNow\nthat your backgrounds are working, you can add your display boards.  Most\ngames have a score board, but you might also want to display information about\nplayer level or lives remaining.  Look at [Lesson 12 Puzzle 9](/s/csd3/stage/12/puzzle/9)\nfor an example of how to make a scoreboard.\\r\n\\r\nFor each display board:\\r\n*\nCreate a function to display the information\\r\n* Call the function in the\ndraw loop\\r\n\\r\nBe sure to test your boards by changing the starting value\nof your variables and making sure the board also changes when you run the\ncode.\\r\n"
      CSD U3 game display boards_2018_markdown_instruction: "# Display Boards\\r\n\\r\nNow\nthat your backgrounds are working, you can add your display boards.  Most\ngames have a score board, but you might also want to display information about\nplayer level or lives remaining.  Look at [Lesson 12 Puzzle 9](/s/csd3/stage/12/puzzle/9)\nfor an example of how to make a scoreboard.\\r\n\\r\nFor each display board:\\r\n*\nCreate a function to display the information\\r\n* Call the function in the\ndraw loop\\r\n\\r\nBe sure to test your boards by changing the starting value\nof your variables and making sure the board also changes when you run the\ncode.\\r\n"
      CSD U3 game interactions_markdown_instruction: "# Sprite Interactions\\r\n\\r\nThe\nlast step is to create the functions that make your sprites interact in the\nright ways.  You'll need a function for each type of sprite interaction.\nYou can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17)\nand `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15)\nas examples.\\r\n\\r\nFor each interaction:\\r\n* Create a function in the functions\narea of your code\\r\n* Call the function inside the draw loop\\r\n\\r\nAfter\nyou make each function, run the code to test it before making another."
      CSD U3 game interactions_2018_markdown_instruction: "# Sprite Interactions\\r\n\\r\nThe\nlast step is to create the functions that make your sprites interact in the\nright ways.  You'll need a function for each type of sprite interaction.\nYou can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17)\nand `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15)\nas examples.\\r\n\\r\nFor each interaction:\\r\n* Create a function in the functions\narea of your code\\r\n* Call the function inside the draw loop\\r\n\\r\nAfter\nyou make each function, run the code to test it before making another."
      CSD U3 game sprite movement_markdown_instruction: "# Sprite Movement Functions\\r\n\\r\nNow\nyou'll make the functions that make the sprite move in different ways as\nthe game is played.  Some examples of functions that you've written are `loopPlatforms`\nin [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson\n17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\\r\n\\r\nFor each movement:\\r\n*\nCreate a function that will make the sprite move in that way\\r\n* Call the\nfunction inside the draw loop\\r\n"
      CSD U3 game sprite movement_2018_markdown_instruction: "# Sprite Movement Functions\\r\n\\r\nNow\nyou'll make the functions that make the sprite move in different ways as\nthe game is played.  Some examples of functions that you've written are `loopPlatforms`\nin [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson\n17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\\r\n\\r\nFor each movement:\\r\n*\nCreate a function that will make the sprite move in that way\\r\n* Call the\nfunction inside the draw loop\\r\n"
      CSD U3 game user controls_markdown_instruction: "# User Controls\\r\n\\r\nNext,\nyou'll want to make sure your user controls are working.  Create a function\nthat makes your sprites respond to user controls as defined in your project\nguide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13)\nas an example."
      CSD U3 game user controls_2018_markdown_instruction: "# User Controls\\r\n\\r\nNext,\nyou'll want to make sure your user controls are working.  Create a function\nthat makes your sprites respond to user controls as defined in your project\nguide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13)\nas an example."
      CSD U3 game variables_markdown_instruction: "# Create your Variables\\r\n\\r\nFirst,\nyou'll need to create all of your variables and put them in the variables\narea of your code.\\r\n* [Show me the block](#triggercallout=callout1)\\r\n*\n[Show me the area in the code](#triggercallout=callout2)\\r\n\\r\nDon't forget,\neach variable needs a label (name) and a starting value.  You can change the\nvalue of the variable later in your code."
      CSD U3 game variables_2018_markdown_instruction: "# Create your Variables\\r\n\\r\nFirst,\nyou'll need to create all of your variables and put them in the variables\narea of your code.\\r\n* [Show me the block](#triggercallout=callout1)\\r\n*\n[Show me the area in the code](#triggercallout=callout2)\\r\n\\r\nDon't forget,\neach variable needs a label (name) and a starting value.  You can change the\nvalue of the variable later in your code."
      CSD U3 keydown conditional-2018_markdown_instruction: "# Changing Sprites\\r\n\\r\nYou\nsaw on the last level that `keyDown` returns `true` while you are holding\na key down and `false` when the key is not pressed down.   The input for the\n`keyDown` command is the name of key you want to check in quotes. Some examples\nare \"x\", \"up\" and \"space\".\\r\n\\r\nWe can use `keyDown` as an input to\nan `if` statement to change our animations based on key presses!\\r\n\\r\n#\nDo This\\r\n* Run the code and try pressing the \"p\" and \"h\" keys.\\r\n*\nLook inside the `if` statement to see how the code works.\\r\n* Add a block\ninside the third `if` statement to change the animation to a different animal.\\r\n\\r\n*Challenge:\nWhen you use `setAnimation`, it keeps the new animation until you change it\nagain.  Can you change the code so that the sprite will automatically go back\nto a giraffe when you're not holding one of the keys down?*"
      CSD U3 keydown conditional_markdown_instruction: "# Changing Sprites\\r\n\\r\nYou\nsaw on the last level that `keyDown` returns `true` while you are holding\na key down and `false` when the key is not pressed down.   The input for the\n`keyDown` command is the name of key you want to check in quotes. Some examples\nare \"x\", \"up\" and \"space\".\\r\n\\r\nWe can use `keyDown` as an input to\nan `if` statement to change our animations based on key presses!\\r\n\\r\n#\nDo This\\r\n* Run the code and try pressing the up and down arrows.\\r\n* Look\ninside the `if` statement to see how the code works.\\r\n* Add a block inside\nthe third `if` statement to change the animation to a different animal.\\r\n\\r\n*Hint:\nyou can use the rabbit that's already in the Animations tab, or add a new\nanimation.*"
      CSD U3 keydown conditional_2018_markdown_instruction: "# Changing Sprites\\r\n\\r\nYou\nsaw on the last level that `keyDown` returns `true` while you are holding\na key down and `false` when the key is not pressed down.   The input for the\n`keyDown` command is the name of key you want to check in quotes. Some examples\nare \"x\", \"up\" and \"space\".\\r\n\\r\nWe can use `keyDown` as an input to\nan `if` statement to change our animations based on key presses!\\r\n\\r\n#\nDo This\\r\n* Run the code and try pressing the \"p\" and \"h\" keys.\\r\n*\nLook inside the `if` statement to see how the code works.\\r\n* Add a block\ninside the third `if` statement to change the animation to a different animal.\\r\n\\r\n*Challenge:\nWhen you use `setAnimation`, it keeps the new animation until you change it\nagain.  Can you change the code so that the sprite will automatically go back\nto a giraffe when you're not holding one of the keys down?*"
      CSD U3 my-rect_markdown_instruction: "# rect(x,y)\\r\n\\r\nWelcome to Game Lab,\nwhere you can create interactive animations and games!   \\r\n\\r\nIn class\nyou already practiced the basics of putting shapes on a grid.  In Game Lab,\nyou'll do the same with the display area on the left.\\r\n\\r\n# Do This\\r\n\\r\n*\nLook at the line of code in the workspace below these instructions ( [Show\nme where](#triggercallout=block_trigger) ) and discuss with your partner where\nyou think the shape will be dawn on the grid.  (insert picture of block here)\n\\r\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\nPM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)\n)\\r\n* Change the numbers in the two different openings, then try running\nthe program again. \\r\n* Try to place the rectangle near the bottom right\nof the screen"
      CSD U3 picture_markdown_instruction: "# Challenge: Draw an Image\\r\n\\r\n_Check\nwith your teacher before starting any of the challenges._\\r\n\\r\nIn the previous\nlesson you and your partner created several interesting images. See if you\ncan recreate one of them using code."
      CSD U3 picture_2018_markdown_instruction: "# Challenge: Draw an Image\\r\n\\r\n_Check\nwith your teacher before starting any of the challenges._\\r\n\\r\nIn the previous\nlesson you and your partner created several interesting images. See if you\ncan recreate one of them using code."
      CSD U3 platform background1_markdown_instruction: "# Background\\r\n\\r\nThe\nfirst thing that you will create for your game is the background.   The sample\ngame had two different backgrounds that were chosen according to the user's\nscore.  The first background has already been created for you.  Look at the\n`background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\\r\n\\r\nIn\norder for the background function to do something, you have to call it inside\nthe draw loop. ([Show me where](#triggercallout=code_triggered2))\\r\n\\r\nThere\nis also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You\nwill need to fill that function with new code to make a different background,\nthen test the code by calling the function inside the draw loop.\\r\n\\r\n#\nDo this\\r\n\\r\n* Read the code for `background1`.\\r\n* Fill the `background2`\nfunction with new code for a second background.\\r\n* Test your `background2`\nfunction by calling it inside the draw loop.\\r\n\\r\n_Hint: It's much easier\nto copy, paste, and make small changes to your code in text mode._"
      CSD U3 platform background1_2018_markdown_instruction: "# Background\\r\n\\r\nThe\nfirst thing that you will create for your game is the background.   The sample\ngame had two different backgrounds that were chosen according to the user's\nscore.  The first background has already been created for you.  Look at the\n`background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\\r\n\\r\nIn\norder for the background function to do something, you have to call it inside\nthe draw loop. ([Show me where](#triggercallout=code_triggered2))\\r\n\\r\nThere\nis also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You\nwill need to fill that function with new code to make a different background,\nthen test the code by calling the function inside the draw loop.\\r\n\\r\n#\nDo this\\r\n\\r\n* Read the code for `background1`.\\r\n* Fill the `background2`\nfunction with new code for a second background.\\r\n* Test your `background2`\nfunction by calling it inside the draw loop.\\r\n\\r\n_Hint: It's much easier\nto copy, paste, and make small changes to your code in text mode._"
      CSD U3 platform background2_markdown_instruction: "# Choosing your Background\\r\n\\r\nNow\nthat you have your score variable, you can use it to choose the right background\nfor your game.  You can see an example of changing your background according\nto your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\\r\n\\r\n#\nDo This\\r\n\\r\n\\r\n* Inside the draw loop, use an `if` statement and your\ntwo background functions to draw your background according to your score level.\\r\n*\nTest your code by changing the start score to 100, then running to code to\nsee whether the background changes.\\r\n\\r\n_Challenge: If you have a third\nbackground, you can click the plus sign at the bottom of the `if` block.  Another\nspace will appear for your third background function, as well as a place to\ncheck the score again._\\r\n"
      CSD U3 platform background2_2018_markdown_instruction: "# Choosing your Background\\r\n\\r\nNow\nthat you have your score variable, you can use it to choose the right background\nfor your game.  You can see an example of changing your background according\nto your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\\r\n\\r\n#\nDo This\\r\n\\r\n\\r\n* Inside the draw loop, use an `if` statement and your\ntwo background functions to draw your background according to your score level.\\r\n*\nTest your code by changing the start score to 100, then running to code to\nsee whether the background changes.\\r\n\\r\n_Challenge: If you have a third\nbackground, you can click the plus sign at the bottom of the `if` block.  Another\nspace will appear for your third background function, as well as a place to\ncheck the score again._\\r\n"
      CSD U3 platform challenge_markdown_instruction: "# Improve Your Game\\r\n\\r\nImprove\nyour game by adding in two or more of the features you saw in the last two\nexamples.  You can use the list below to help you.\\r\n\\r\n* Choose new animations\nfor your player, platform, and items.\\r\n* Prevent your player from going\noff the side of the screen.\\r\n* Add a different type of item for the player\nto collect or avoid.\\r\n* Add a variable that keeps track of how many lives\nthe player has, and end the game if the player runs out.\\r\n* Make your player's\nanimation change direction when the player changes direction.\\r\n* Change\nthe player to only jump when it is on a platform.\\r\n* Add another background\nand make it appear when the score gets even higher.\\r\n* Make your items interact\nwith the platforms in some way."
      CSD U3 platform challenge1_markdown_instruction: "# Collect Items\\r\n\\r\nLast,\nyou'll want your player to collect the items falling from the top of the\nscreen.\\r\n\\r\n# Do This\\r\n\\r\n* Create a `collectItems` function and add\nit to the \"functions\" area of your code.\\r\n* Use the `if` and `isTouching`\nblocks to change the x and y position of the items when the player touches\nthem.  You can look at the `loopItem` function for clues in how to reset the\nitem position.\\r\n* Inside your `if` statement, add a counter pattern that\nwill increase the score every time the player touches an item.  Look at [Stage\n12 Puzzle 8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8)\nfor an example.\\r\n* Call the function inside the draw loop, in the \"update\nsprites\" area of your code.\\r\n* Run the code to test your function."
      CSD U3 platform challenge_2018_markdown_instruction: "# Improve Your Game\\r\n\\r\nImprove\nyour game by adding in two or more of the features you saw in the last two\nexamples.  You can use the list below to help you.\\r\n\\r\n* Choose new animations\nfor your player, platform, and items.\\r\n* Prevent your player from going\noff the side of the screen.\\r\n* Add a different type of item for the player\nto collect or avoid.\\r\n* Add a variable that keeps track of how many lives\nthe player has, and end the game if the player runs out.\\r\n* Make your player's\nanimation change direction when the player changes direction.\\r\n* Change\nthe player to only jump when it is on a platform.\\r\n* Add another background\nand make it appear when the score gets even higher.\\r\n* Make your items interact\nwith the platforms in some way."
      CSD U3 platform draw loop_markdown_instruction: "# Draw Loop\\r\n\\r\nOnce you\nhave functions that can draw what you want, you can put them inside a draw\nloop.\\r\n\\r\n# Do This\\r\n\\r\n* Add the `function draw() {}` (draw loop) block\ninto the workspace.\\r\n* Inside the draw loop, use an `if` block to choose\nthe correct background function to use [Remind me how](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/13/puzzle/10)\\r\n*\nAfter the if statement, use the function you wrote to display the current\ninformation\\r\n* Test your code by changing the starting value of your variables\nand running it to see whether the correct information and background are drawn."
      CSD U3 platform items_markdown_instruction: "# Create your Items\\r\n\\r\nNext,\nyou need to add in the items that fall from the top of the screen.  In [Stage\n11 Puzzle 6](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/6),\nyou modeled falling using the counter pattern on `velocityY`.  You can use\nthe same pattern to make your items fall from the sky.  In our sample game,\nour carrots rotated and bounced off the platforms, but you can choose to add\nany other type of interaction that you like in the next level.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Create an item sprite with the label and starting position that\nyou put on your worksheet.\\r\n* Give the sprite the starting properties you\nwrote on your worksheet.\\r\n* Run the code to test your sprite.\\r\n* Create\na function that checks whether the sprite is off the bottom of the screen,\nand loops it back to the top of the screen if it is.  (Look at [Stage 11 Bubble\n16](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/16)\nto see an example of code that loops a sprite.)\\r\n* Run the code to test\nyour sprite."
      CSD U3 platform items1_markdown_instruction: "# Create an Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\"\nstyle=\"float:right;\">\\r\n\\r\nNext, you need to add the items that fall from\nthe top of the screen.  These move just like the platforms, but faster.  In\norder to make the game more interesting, the items start at a random location\nabove the screen.  For the sample game, the item's x position is a random\nnumber between 50 and 350, and the y position is a random number between -30\nand -60.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `createSprite` block to make an\nitem sprite in the \"create sprites\" section of your code.\\r\n* Use the `randomNumber`\nblock inside your `createSprite` block to start the item at a random x and\ny position.\\r\n* Use `setAnimation` and `velocityY` to give your sprite the\ncorrect image and make it fall from the top of the screen.\\r\n* Run the code\nto test your sprite."
      CSD U3 platform items1_2018_markdown_instruction: "# Create an Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\"\nstyle=\"float:right;\">\\r\n\\r\nNext, you need to add the items that fall from\nthe top of the screen.  These move just like the platforms, but faster.  In\norder to make the game more interesting, the items start at a random location\nabove the screen.  For the sample game, the item's x position is a random\nnumber between 50 and 350, and the y position is a random number between -30\nand -60.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `createSprite` block to make an\nitem sprite in the \"create sprites\" section of your code.\\r\n* Use the `randomNumber`\nblock inside your `createSprite` block to start the item at a random x and\ny position.\\r\n* Use `setAnimation` and `velocityY` to give your sprite the\ncorrect image and make it fall from the top of the screen.\\r\n* Run the code\nto test your sprite."
      CSD U3 platform items2_markdown_instruction: "# Loop your Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\"\nstyle=\"float:right\">\\r\nNow that your item is falling, you can add code\nto loop it back to the top.  This is similar to what you did for the platform\nsprite, but the item sprite will loop back to a random x and y location when\nit goes to the top of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Create a `loopItems`\nfunction that uses an `if` block to check whether the item sprite is off the\nbottom of the screen, then sends the item back to a random x and y position,\njust as it did when you first created the sprite.\\r\n* Call the function inside\nthe draw loop.\\r\n* Run the code to test your sprite."
      CSD U3 platform items2_2018_markdown_instruction: "# Loop your Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\"\nstyle=\"float:right\">\\r\nNow that your item is falling, you can add code\nto loop it back to the top.  This is similar to what you did for the platform\nsprite, but the item sprite will loop back to a random x and y location when\nit goes to the top of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Create a `loopItems`\nfunction that uses an `if` block to check whether the item sprite is off the\nbottom of the screen, then sends the item back to a random x and y position,\njust as it did when you first created the sprite.\\r\n* Call the function inside\nthe draw loop.\\r\n* Run the code to test your sprite."
      CSD U3 platform items3_markdown_instruction: "# Make your Second Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\"\nstyle=\"float: right\">\\r\n\\r\nNext, you'll copy and paste the code for your\nfirst item to create a second item.  Remember that this is a lot easier in\n**text mode**, so be sure to try it out if you haven't already.\\r\n\\r\nYou'll\nneed to copy two parts of your code: the part at the beginning where you made\nthe item, and the part in your `loopItem` function, where you looped the item\nback to the top of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Copy the code you\nused to create the first item sprite (`createSprite`, `setAnimation`, and\n`velocityY`), and paste it directly beneath the original code.\\r\n* Change\nthe names of the sprite in the new lines.  For example, if you named your\noriginal sprite \"star\", you could name this one \"star2\".\\r\n* Inside your\n`loopItems` function, copy the if statement, then paste it directly underneath\nthe original code, inside the function.\\r\n* Change the sprite name in the\nnew lines of code.\\r\n* Run your code to test it.\\r\n"
      CSD U3 platform items3_2018_markdown_instruction: "# Make your Second Item\\r\n\\r\n<img\nsrc=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\"\nstyle=\"float: right\">\\r\n\\r\nNext, you'll copy and paste the code for your\nfirst item to create a second item.  Remember that this is a lot easier in\n**text mode**, so be sure to try it out if you haven't already.\\r\n\\r\nYou'll\nneed to copy two parts of your code: the part at the beginning where you made\nthe item, and the part in your `loopItem` function, where you looped the item\nback to the top of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Copy the code you\nused to create the first item sprite (`createSprite`, `setAnimation`, and\n`velocityY`), and paste it directly beneath the original code.\\r\n* Change\nthe names of the sprite in the new lines.  For example, if you named your\noriginal sprite \"star\", you could name this one \"star2\".\\r\n* Inside your\n`loopItems` function, copy the if statement, then paste it directly underneath\nthe original code, inside the function.\\r\n* Change the sprite name in the\nnew lines of code.\\r\n* Run your code to test it.\\r\n"
      CSD U3 platform platform1_markdown_instruction: "# Create a Platform Sprite\\r\n\\r\n<img\nsrc=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"\nstyle=\"float: right;\"> \\r\n\\r\nNow that you have your background and your\nvariables, it's time to create your sprites.  Usually, it will be easiest\nto start with the sprites that are part of the environment, such as your platforms.  The\nsample game had two platform sprites, but you'll make just one first, then\ntest it before copying and pasting the code to make the second.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Look at your worksheet and choose a platform sprite to create.\\r\n*\nIn the \"Create sprites\" area at the top of your code, create your new sprite\nwith the `createSprite` block, giving it the correct position and label (name).\n([Show me the block](#triggercallout=callout))\\r\n* Use the `setAnimation`\nand `velocityY` blocks to give your sprite the correct image and downward\nvelocity.\\r\n* Test the sprite to make sure that it's moving in the correct\nway.  You might need to adjust its velocity.\\r\n\\r\n_Hint: The sprite will\ngo off the screen and not come back.  You'll make it loop back around in\nthe next level._\\r\n"
      CSD U3 platform platform1_2018_markdown_instruction: "# Create a Platform Sprite\\r\n\\r\n<img\nsrc=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"\nstyle=\"float: right;\"> \\r\n\\r\nNow that you have your background and your\nvariables, it's time to create your sprites.  Usually, it will be easiest\nto start with the sprites that are part of the environment, such as your platforms.  The\nsample game had two platform sprites, but you'll make just one first, then\ntest it before copying and pasting the code to make the second.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Look at your worksheet and choose a platform sprite to create.\\r\n*\nIn the \"Create sprites\" area at the top of your code, create your new sprite\nwith the `createSprite` block, giving it the correct position and label (name).\n([Show me the block](#triggercallout=callout))\\r\n* Use the `setAnimation`\nand `velocityY` blocks to give your sprite the correct image and downward\nvelocity.\\r\n* Test the sprite to make sure that it's moving in the correct\nway.  You might need to adjust its velocity.\\r\n\\r\n_Hint: The sprite will\ngo off the screen and not come back.  You'll make it loop back around in\nthe next level._\\r\n"
      CSD U3 platform platform2_markdown_instruction: "# Loop the Platform Sprite\\r\n\\r\n<img\nsrc=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\"\nstyle=\"float: right;\">\\r\n\\r\nRight now, your platform sprite moves down,\nbut it doesn't loop back up to the top of the screen. You can look at [Lesson\n15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping\naround a screen.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `function` block to create\na `loopPlatforms` function at the bottom of your code.\\r\n* Use the `if` block\ninside the function to check whether the platform has gone off the bottom\nof screen and, if it has, move it back to the top of the screen.\\r\n* Call\nthe function inside the draw loop, in the \"update sprites\" area.\\r\n* Run\nthe code to test your sprite.\\r\n\\r\n_Hint: What will platform.y be when the\nsprite moves off the bottom of the screen?  What should platform.y be when\nyou put it back at the top of the screen?_"
      CSD U3 platform platform2_2018_markdown_instruction: "# Loop the Platform Sprite\\r\n\\r\n<img\nsrc=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\"\nstyle=\"float: right;\">\\r\n\\r\nRight now, your platform sprite moves down,\nbut it doesn't loop back up to the top of the screen. You can look at [Lesson\n15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping\naround a screen.\\r\n\\r\n# Do This\\r\n\\r\n* Use the `function` block to create\na `loopPlatforms` function at the bottom of your code.\\r\n* Use the `if` block\ninside the function to check whether the platform has gone off the bottom\nof screen and, if it has, move it back to the top of the screen.\\r\n* Call\nthe function inside the draw loop, in the \"update sprites\" area.\\r\n* Run\nthe code to test your sprite.\\r\n\\r\n_Hint: What will platform.y be when the\nsprite moves off the bottom of the screen?  What should platform.y be when\nyou put it back at the top of the screen?_"
      CSD U3 platform platform3_markdown_instruction: "# Make your Second Platform\\r\n\\r\n<img\nsrc=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\"\nstyle=\"float:right;\">\\r\n\\r\nMaking a second platform will be easier than\nmaking the first, because you can copy and paste a lot of the code, then make\na few small changes.  This is a lot easier in *text mode*, so be sure to try\nit out if you haven't already.\\r\n\\r\nYou'll need to copy two parts of your\ncode: the part at the beginning where you made the platform, and the part\nin your `loopPlatforms` function, where you looped the platform back to the\ntop of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Copy the code you used to create\nthe first platform sprite (`createSprite`, `setAnimation`, and `velocityY`),\nand paste it directly beneath the original code.\\r\n* Change the names of\nthe sprite in the new lines.  For example, if you named your original sprite\n\"platform\", you could name this one \"platform2\".\\r\n* Change the starting\nposition of your new platform sprite.\\r\n* Inside your `loopPlatforms` function,\ncopy the if statement, then paste it directly underneath the original code,\ninside the function.\\r\n* Change the sprite name in the new lines of code.\\r\n*\nRun your code to test it.\\r\n\\r\n_Challenge: You can make your platforms appear\nat random x positions when they loop back to the top of the screen._\\r\n"
      CSD U3 platform platform3_2018_markdown_instruction: "# Make your Second Platform\\r\n\\r\n<img\nsrc=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\"\nstyle=\"float:right;\">\\r\n\\r\nMaking a second platform will be easier than\nmaking the first, because you can copy and paste a lot of the code, then make\na few small changes.  This is a lot easier in *text mode*, so be sure to try\nit out if you haven't already.\\r\n\\r\nYou'll need to copy two parts of your\ncode: the part at the beginning where you made the platform, and the part\nin your `loopPlatforms` function, where you looped the platform back to the\ntop of the screen.\\r\n\\r\n# Do This\\r\n\\r\n* Copy the code you used to create\nthe first platform sprite (`createSprite`, `setAnimation`, and `velocityY`),\nand paste it directly beneath the original code.\\r\n* Change the names of\nthe sprite in the new lines.  For example, if you named your original sprite\n\"platform\", you could name this one \"platform2\".\\r\n* Change the starting\nposition of your new platform sprite.\\r\n* Inside your `loopPlatforms` function,\ncopy the if statement, then paste it directly underneath the original code,\ninside the function.\\r\n* Change the sprite name in the new lines of code.\\r\n*\nRun your code to test it.\\r\n\\r\n_Challenge: You can make your platforms appear\nat random x positions when they loop back to the top of the screen._\\r\n"
      CSD U3 platform player1_markdown_instruction: "# Create your Player\\r\n\\r\n<img\nsrc=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\"\nstyle=\"float:right\">\\r\n\\r\nNow you can create your player sprite.  Just\nlike the item sprites, the player sprite will fall from the top of the screen.  Unlike\nthe items, your player sprite will get faster as it falls, just like real\nfalling objects.  This is what allows it to jump up, and fall back down.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `createSprite` block to make a player sprite with\nthe label and starting position that you put on your worksheet.\\r\n* Use `setAnimation`\nto give it the correct image.\\r\n* Create a `playerFall` function that makes\nthe sprite fall from the top of the screen.  The code inside the function\nshould use `velocityY` in a counter pattern, just as when you made the falling\nrock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\\r\n* Call the `playerFall`\nfunction inside the draw loop.\\r\n* Run the code to test your sprite."
      CSD U3 platform player1_2018_markdown_instruction: "# Create your Player\\r\n\\r\n<img\nsrc=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\"\nstyle=\"float:right\">\\r\n\\r\nNow you can create your player sprite.  Just\nlike the item sprites, the player sprite will fall from the top of the screen.  Unlike\nthe items, your player sprite will get faster as it falls, just like real\nfalling objects.  This is what allows it to jump up, and fall back down.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the `createSprite` block to make a player sprite with\nthe label and starting position that you put on your worksheet.\\r\n* Use `setAnimation`\nto give it the correct image.\\r\n* Create a `playerFall` function that makes\nthe sprite fall from the top of the screen.  The code inside the function\nshould use `velocityY` in a counter pattern, just as when you made the falling\nrock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\\r\n* Call the `playerFall`\nfunction inside the draw loop.\\r\n* Run the code to test your sprite."
      CSD U3 platform player2_markdown_instruction: "# User Controls\\r\n\\r\nNext,\nyou should add user controls so that you can move your player around.  Your\nplayer needs to move to the left when the left arrow key is pressed, to the\nright when the right arrow key is pressed, and jump when the space bar is\npressed.\\r\n\\r\n# Do This\\r\n\\r\n* Create a new `controlPlayer` function in\nthe \"functions\" area of your code.\\r\n* Inside the `controlPlayer` function,\nuse the `if`, `keyDown`, and `sprite.x` blocks to make your player move to\nthe left and right according to the arrow keys.  Look at <a href=\"/s/csd3/stage/12/puzzle/7\"\ntarget=\"_blank\"> Lesson 12 Puzzle 7 </a> for examples.\\r\n* Inside the `controlPlayer`\nfunction, use the `if`, `keyDown`, and `velocityY` blocks to make your player\njump when the up arrow is pressed.  Look at <a href=\"/s/csd3/stage/15/puzzle/11\"\ntarget=\"_blank\"> Lesson 15 Puzzle 11 </a> for an example.\\r\n* Call the\n`controlPlayer` function inside the draw loop.\\r\n* Run the game and test\nyour code."
      CSD U3 platform player2_2018_markdown_instruction: "# User Controls\\r\n\\r\nNext,\nyou should add user controls so that you can move your player around.  Your\nplayer needs to move to the left when the left arrow key is pressed, to the\nright when the right arrow key is pressed, and jump when the space bar is\npressed.\\r\n\\r\n# Do This\\r\n\\r\n* Create a new `controlPlayer` function in\nthe \"functions\" area of your code.\\r\n* Inside the `controlPlayer` function,\nuse the `if`, `keyDown`, and `sprite.x` blocks to make your player move to\nthe left and right according to the arrow keys.  Look at <a href=\"/s/csd3/stage/12/puzzle/7\"\ntarget=\"_blank\"> Lesson 12 Puzzle 7 </a> for examples.\\r\n* Inside the `controlPlayer`\nfunction, use the `if`, `keyDown`, and `velocityY` blocks to make your player\njump when the up arrow is pressed.  Look at <a href=\"/s/csd3/stage/15/puzzle/11\"\ntarget=\"_blank\"> Lesson 15 Puzzle 11 </a> for an example.\\r\n* Call the\n`controlPlayer` function inside the draw loop.\\r\n* Run the game and test\nyour code."
      CSD U3 platform player2b_markdown_instruction: "# Add Reset\\r\n\\r\nNow that\nyour player is falling, you can add code to reset him when he gets to the\ntop.\\r\n\\r\n# Do This\\r\n\\r\n* Create a function that checks whether the player\nsprite is off the bottom of the screen, and decreases the number of lives\nby one if it is.\\r\n* Use the function inside the draw loop.\\r\n* Run the\ncode to test your function.\\r\n* Once you have decreased the lives, you need\nto check whether the player has run out.  Add code to your function that checks\nto see whether the player's lives equals 0.  If they do equal zero, use the\n`text` block to write \"GAME OVER\" in the middle of the screen.  Otherwise,\nreset the sprite to the top of the screen.\\r\n"
      CSD U3 platform player3_markdown_instruction: "# Player Interactions\\r\n\\r\nThe\nlast part of making your game is programming the player interactions with\nthe other sprites.  First, your player needs to land on the platforms.\\r\n\\r\n#\nDo This\\r\n\\r\n* Create a `playerLands` function and add it to the \"functions\"\narea of your code.\\r\n* Inside the function, use the `collide` block so that\nyour player can land on both the platforms.\\r\n* Call the function inside\nthe draw loop.\\r\n* Run the code to test your function.\\r\n"
      CSD U3 platform player3_2018_markdown_instruction: "# Player Interactions\\r\n\\r\nThe\nlast part of making your game is programming the player interactions with\nthe other sprites.  First, your player needs to land on the platforms.\\r\n\\r\n#\nDo This\\r\n\\r\n* Create a `playerLands` function and add it to the \"functions\"\narea of your code.\\r\n* Inside the function, use the `collide` block so that\nyour player can land on both the platforms.\\r\n* Call the function inside\nthe draw loop.\\r\n* Run the code to test your function.\\r\n"
      CSD U3 platform player4_markdown_instruction: "# Collect Items\\r\n\\r\nLast,\nyou'll want your player to collect the items falling from the top of the\nscreen.\\r\n\\r\n# Do This\\r\n\\r\n* Create a `collectItems` function and add\nit to the \"functions\" area of your code.\\r\n* Use the `if` and `isTouching`\nblocks to change the x and y position of the items when the player touches\nthem.  You can look at the `loopItem` function for clues in how to reset the\nitem position.\\r\n* Inside your `if` statement, add a counter pattern that\nwill increase the score every time the player touches an item.  Look at [Lesson\n16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\\r\n* Call the function\ninside the draw loop, in the \"update sprites\" area of your code.\\r\n* Run\nthe code to test your function."
      CSD U3 platform player4_2018_markdown_instruction: "# Collect Items\\r\n\\r\nLast,\nyou'll want your player to collect the items falling from the top of the\nscreen.\\r\n\\r\n# Do This\\r\n\\r\n* Create a `collectItems` function and add\nit to the \"functions\" area of your code.\\r\n* Use the `if` and `isTouching`\nblocks to change the x and y position of the items when the player touches\nthem.  You can look at the `loopItem` function for clues in how to reset the\nitem position.\\r\n* Inside your `if` statement, add a counter pattern that\nwill increase the score every time the player touches an item.  Look at [Lesson\n16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\\r\n* Call the function\ninside the draw loop, in the \"update sprites\" area of your code.\\r\n* Run\nthe code to test your function."
      CSD U3 platform sample_markdown_instruction: "# Platform Jumper\\r\n\\r\nThe\ngame on the left is an example of a platform jumper.  Press \"Run\" to play\nit.  You can make the bunny bump with the space bar, and move it to the left\nand right with the arrow keys.  You score by collecting carrots, and if you\nscore high enough, the background will change.\\r\n\\r\nYou have three lives,\nso if you fall to the bottom of the screen three times, the game will be over.\\r\n\\r\nYou\nalready know how to use all the blocks you need to make a game just like this\none, and you'll be making your own platform jumper in this lesson."
      CSD U3 platform sample1_markdown_instruction: "# Platform Jumper\\r\n\\r\nThe\ngame on the left is an example of a platform jumper.  Press \"Run\" to play\nit.  You can make the alien jump with the up arrow, and move it to the left\nand right with the arrow keys.  You score by collecting stars, and if you\nscore high enough, the background will change.\\r\n\\r\nYou already know how\nto use all the blocks you need to make a game just like this one, and you'll\nbe making your own platform jumper in this lesson."
      CSD U3 platform sample1_2018_markdown_instruction: "# Platform Jumper\\r\n\\r\nThe\ngame on the left is an example of a platform jumper.  Press \"Run\" to play\nit.  You can make the alien jump with the up arrow, and move it to the left\nand right with the arrow keys.  You score by collecting stars, and if you\nscore high enough, the background will change.\\r\n\\r\nYou already know how\nto use all the blocks you need to make a game just like this one, and you'll\nbe making your own platform jumper in this lesson."
      CSD U3 platform sample2_markdown_instruction: "# Plane Jumper\\r\n\\r\nHere's\nanother example of a platform jumper, but it has a few more features.  You\ncan use it to get ideas to improve your own game.  For example, there is a\ncoin sprite that gives the player an extra life.\\r\n\\r\nChoose one or more\nof the following changes and add them to your game.\\r\n* Choose new animations\nfor your player, platform, and items.\\r\n* Make it impossible for your player\nto go off the left or right of the screen.\\r\n* Add a different type of item\nfor the player to collect or avoid.\\r\n* Add a variable that keeps track of\nhow many lives the player has, and end the game if the player runs out.\\r\n\\r\n"
      CSD U3 platform sample2_2018_markdown_instruction: "# Plane Jumper\\r\n\\r\nHere's\nanother example of a platform jumper, but it has a few more features.  You\ncan use it to get ideas to improve your own game.  For example, there is a\ncoin sprite that gives the player an extra life.\\r\n\\r\nChoose one or more\nof the following changes and add them to your game.\\r\n* Choose new animations\nfor your player, platform, and items.\\r\n* Make it impossible for your player\nto go off the left or right of the screen.\\r\n* Add a different type of item\nfor the player to collect or avoid.\\r\n* Add a variable that keeps track of\nhow many lives the player has, and end the game if the player runs out.\\r\n\\r\n"
      CSD U3 platform sample3_markdown_instruction: "# Bunny Jumper\\r\n\\r\nHere's\nanother example of a jumper.  In this one, the items get faster when they\nfall, and bounce off the platforms.\\r\n\\r\nChoose one or more of the following\nchanges and add them to your game.\\r\n* Make your player's animation change\ndirection when the player changes direction.\\r\n* Add another background and\nmake it appear when the score gets even higher.\\r\n* Make your items interact\nwith the platforms in some way.\\r\n\\r\n"
      CSD U3 platform sample3_2018_markdown_instruction: "# Bunny Jumper\\r\n\\r\nHere's\nanother example of a jumper.  In this one, the items get faster when they\nfall, and bounce off the platforms.\\r\n\\r\nChoose one or more of the following\nchanges and add them to your game.\\r\n* Make your player's animation change\ndirection when the player changes direction.\\r\n* Add another background and\nmake it appear when the score gets even higher.\\r\n* Make your items interact\nwith the platforms in some way.\\r\n\\r\n"
      CSD U3 platform scoreboard_markdown_instruction: "# Make the Scoreboard\\r\n\\r\n<img\nsrc=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\"\nstyle=\"float:right;\">\\r\n\\r\nYou'll also need a scoreboard so the player\ncan keep track of the score.   There's already a `showScore` function written,\nbut it only shows the text \"Score\" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You\ncan see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the code in the `showScore` function.\\r\n* Call the\nfunction inside the draw loop, right after you draw the backgrounds.\\r\n*\nUse the `text` block to display the score at the top of the screen."
      CSD U3 platform scoreboard_2018_markdown_instruction: "# Make the Scoreboard\\r\n\\r\n<img\nsrc=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\"\nstyle=\"float:right;\">\\r\n\\r\nYou'll also need a scoreboard so the player\ncan keep track of the score.   There's already a `showScore` function written,\nbut it only shows the text \"Score\" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You\ncan see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the code in the `showScore` function.\\r\n* Call the\nfunction inside the draw loop, right after you draw the backgrounds.\\r\n*\nUse the `text` block to display the score at the top of the screen."
      CSD U3 platform variable1_markdown_instruction: "# Score Variable\\r\n\\r\nNow\nthat you've created your backgrounds, you'll need to choose when each background\nis drawn.  For that, you'll need a score variable to hold information about\nyour player's score.\\r\n\\r\nYou should always give your variables a starting\nvalue at the very beginning of the program.  That way, they are available\nfor any code that comes after.\\r\n\\r\n# Do This\\r\n\\r\n* Create a score variable\nat the beginning of your game program. ( [Show me the block](#triggercallout=callout)\n)\\r\n* Set the score equal to 0."
      CSD U3 platform variable1_2018_markdown_instruction: "# Score Variable\\r\n\\r\nNow\nthat you've created your backgrounds, you'll need to choose when each background\nis drawn.  For that, you'll need a score variable to hold information about\nyour player's score.\\r\n\\r\nYou should always give your variables a starting\nvalue at the very beginning of the program.  That way, they are available\nfor any code that comes after.\\r\n\\r\n# Do This\\r\n\\r\n* Create a score variable\nat the beginning of your game program. ( [Show me the block](#triggercallout=callout)\n)\\r\n* Set the score equal to 0."
      CSD U3 platform variables_markdown_instruction: "# Variables and Display\\r\n\\r\nIn\nour sample game, we kept track of the score and the number of lives left,\nthen displayed them at the top of the screen.  For your game, you'll need\nto create a variable for each piece of information you want to keep track\nof during the game.  Once you have your variables, you can create a function\nto display information at the top of the screen for the player.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Create the variables that you listed on your planning sheet\nand give them starting values.\\r\n* Use the `text` block to display information\nabout the variables on the screen.  You can use `textSize` and `fill` to change\nthe way the text looks.\\r\n* Make a new function and put the code that displays\nthe information inside of it.\\r\n\\r\n_Hint: You can look at [Stage 12 Bubble\n8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8) to\nsee a working scoreboard.  Scroll down in the code until you see the comment\n\"draw score\"_"
      CSD U3 rect_markdown_instruction: "# Explore Game Lab\\r\n\\r\nWelcome to Game\nLab, where you can create interactive animations and games!   \\r\n\\r\nYou've\nalready practiced the basics of putting shapes on a grid.  In Game Lab, you'll\ndo the same with the display area on the left.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)\n) and discuss with your partner where you think the shape will be drawn on\nthe grid.\\r\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\nPM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)\n)\\r\n* Change the numbers inside the block, then try running the program again.\\r\n*\nTry to place the rectangle near the bottom right of the screen."
      CSD U3 rect_2018_markdown_instruction: "# Explore Game Lab\\r\n\\r\nWelcome to\nGame Lab, where you can create interactive animations and games!   \\r\n\\r\nYou've\nalready practiced the basics of putting shapes on a grid.  In Game Lab, you'll\ndo the same with the display area on the left.\\r\n\\r\n# Do This\\r\n\\r\n* Look\nat the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)\n) and discuss with your partner where you think the shape will be drawn on\nthe grid.\\r\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\nPM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)\n)\\r\n* Change the numbers inside the block, then try running the program again.\\r\n*\nTry to place the rectangle near the bottom right of the screen."
      CSD U3 sequence_markdown_instruction: "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05\nPM.png\" style=\"float:right\">\\r\n# Order Matters\\r\n\\r\nIn Game Lab, it\nmatters what order your code is in.  New shapes are drawn on top of the ones\nthat came before, covering up the shapes that are drawn first.  You can see\nthe difference when you use more than one color in your code.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Look at the code that draws the two rectangles.  The first is\ndrawn red, and the second is drawn blue.\\r\n* Change the red rectangle's\ncolor to green.\\r\n* Change the order of the code so the green rectangle appears\non top."
      CSD U3 sequence_2018_markdown_instruction: "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05\nPM.png\" style=\"float:right\">\\r\n# Order Matters\\r\n\\r\nIn Game Lab, it\nmatters what order your code is in.  New shapes are drawn on top of the ones\nthat came before, covering up the shapes that are drawn first.  You can see\nthe difference when you use more than one color in your code.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Look at the code that draws the two rectangles.  The first is\ndrawn red, and the second is drawn blue.\\r\n* Change the red rectangle's\ncolor to green.\\r\n* Change the order of the code so the green rectangle appears\non top."
      CSD U4 - Design Mode Input Widgets_markdown_instruction: "# Input Elements\\r\n\\r\n<img\nsrc=\"https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png\"\nstyle=\"float: right; width: 150px\"/>\\r\nButtons are a great way to navigate\naround your app, and text labels are the primary way to display content in\nyour app. When it comes to taking input from your users, sometimes you need\na place for them to type or boxes to check. The **Text Input**, **Dropdown**,\n**Radio Button**, and **Checkbox** elements all provide ways for your users\nto input information to your app.\\r\n\\r\n# Do This\\r\n\\r\nChoose at least\ntwo of the input elements, and for each one:\\r\n\\r\n* Drag it out and position\nit on the screen\\r\n* Change the id to something meaningful\\r\n* Read through\nthe properties and experiment with them\\r\n* Add a label element next to each\nthat describes what they do (don't forget to give it an id too!)\\r\n\\r\n"
      CSD U4 - Design Mode Project_markdown_instruction: "# Mocking Up Your App\\r\n\\r\nUsing\nyour paper prototype, create a digital version of your screen using the Design\nMode elements you've learned about.\\r\n\\r\n# Do This\\r\n\\r\n* Rename the\nscreen to match your _namespace_.\\r\n* Use the built-in elements to lay out\nyour app screen, giving each a proper ID\\r\n\\t* For example, if your namespace\nis \"home_\" you might create IDs like:\\r\n    \\t* \"home_title\"\\r\n        *\n\"home_login_button\"\\r\n        * \"home_logo\"\\r\n* For any components of\nyour app that can't be recreated with the built in elements you can either:\\r\n\\t*\nRedesign to utilize built in elements\\r\n    * Find an image to use in place\nof your element\\r\n    * Draw the element using your preferred image editor\\r\n*\nShare your design regularly with your teammates to ensure consistent style"
      CSD U4 - Design Mode Text_markdown_instruction: "# Adding Text\\r\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"\nstyle=\"float: right; width: 75px\"/>\\r\nThe label element lets you add any\ntext you'd like to your app. Just drag out a label block and set its \"text\"\nproperty. \\r\n\\r\n# Do This\\r\nUse a label element to create a title for this\napp.\\r\n\\r\n* Drag out a label and place it on the top of the screen\\r\n*\nChange the id to \"titleLabel\"\\r\n* Change the text to \"My App\"\\r\n* Increase\nthe font size\\r\n* Choose a color you like for the title\\r\n\\r\n"
      CSD U5 Amazon Data Video_markdown_instruction: "Watch this video to learn how\nthis problem is solved by Amazon. As you watch think about what data is being\ncollected and where it's coming from."
      CSD U5 Netflix Data Video_markdown_instruction: "Watch this video to learn\nhow this problem is solved by Netflix. As you watch think about what data\nis being collected and where it's coming from."
      CSD U5 Pizza 2_markdown_instruction: "# Pizza Party\\r\n\\r\nWhen people work\nwith data, they know to leave off answers that don't make sense, and that\nsome answers, such as \"peppers\", \"pepppers\" and \"green peppers\", actually\nmeant the same thing. Computers don't know how to do this, so we have to\nclean the data before the computer is able to use it.\\r\n\\r\nThis version\nof the app has a second column for data to be cleaned.\\r\n\\r\n## Do this\\r\n*\nClick \"Run\" to see the new list of answers to be cleaned.\\r\n* Click on\neach answer that needs to be cleaned and correct it so that the computer will\nchart it properly. (You may want to delete some answers entirely.)\\r\n* When\nyou are finished, click \"Show Chart\" to see the new chart of cleaned answers."
      CSD U5 Pizza_markdown_instruction: "# Pizza Party\\r\n\\r\nThe pizza party data\nhas been put into an app for you, and the answers from another class have\nbeen added.  Because this is an app, we can automate the creation of the bar\nchart from the given data.\\r\n\\r\n# Do This\\r\n* Click \"Run\" to see the\nlist of answers that the classes have given.\\r\n* Discuss with a partner what\nyou think the chart of this data will look like.\\r\n* Click \"Show Chart\"\nto see for yourself.\\r\n\\r\n# Spreadsheet Version\\r\n\\r\nThe pizza party data\nhas also been put into a spreadsheet for you, if you would like to use it\ninstead.  To use the spreadsheet, you'll need to make your own copy of it.\\r\n\\r\n*\nThis link will make you your own copy of the \"Pizza Topping Choices\" data:\n[Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\\r\n*\nYou can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv)."
      CSD U5 Waze Data Video_markdown_instruction: "Watch this video to learn how\nthis problem is solved by Waze. As you watch think about what data is being\ncollected and where it's coming from."
      CSD U5 binary 1_markdown_instruction: "# 5-Bit Number\\r\n\\r\nWhen you only\nhad four bits, the highest number that you could make was fifteen.  Now you'll\nhave a chance to work with more bits to make higher numbers.\\r\n\\r\nIn this\nactivity, the dots are replaced with numbers, but you still add up everything\nthat's showing to see what number the binary code stands for.  The left-most\nbit doesn't have a number yet, so you'll have to give it one.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Click on the bits to turn them on and off, and see the different\nnumbers you can make.\\r\n* With your partner, discuss the pattern in the numbers.  Decide\nwhat number you think should go in the left most box.\\r\n* Click \"Edit\"\nto change the value of the left most bit.\\r\n* Once you've decided on the\nvalue, try to make the following numbers: 16, 27, 31"
      CSD U5 binary 2_markdown_instruction: "# 6-Bit Number\\r\n\\r\nThis widget helps\nyou to calculate 6-bit binary numbers.\\r\n\\r\n# Do This\\r\n\\r\n* With your\npartner, answer the following questions:\\r\n  1. What's the biggest number\nyou can make with this widget?\\r\n  2. The record for most skips by a dog\nand person in one minute is 59.  How would you encode 59 in binary?"
      CSD U5 binary 3-new_markdown_instruction: "# Decoding multiple numbers\\r\n\\r\nHere's\na widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to\nfind the two world records encoded in the binary string below.\\r\n\\r\n1. Most\nnumber of people lifted and thrown in two minutes. (4 bits)\\r\n1. Most canned\ndrinks opened by a parrot in one minute. (6 bits)\\r\n\\r\n# Do This\\r\n* Decode\nthe two numbers from the binary string."
      CSD U5 binary 3_markdown_instruction: "# Decoding multiple numbers\\r\n\\r\nHere's\na widget that can calculate numbers up to to eight bits.  You can use it to\ntry to find the three world records encoded in the binary string below.  The\nanswers are in order in the string.\\r\n\\r\n1. Most canned drinks opened by\na parrot in one minute.\\r\n2. Most ice cream scoops balanced on a cone.\\r\n3.\nMost number of people lifted and thrown in two minutes.\\r\n\\r\n![](https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png)\\r\n\\r\n#\nDo This\\r\n* Try to decode the three numbers from a the binary string\\r\n*\nDiscuss your answers with your partner.\\r\n * Was there any other information\nyou need to be certain your numbers are correct?"
      CSD U5 binary 4-new_markdown_instruction: "# Decoding multiple numbers\\r\n\\r\nHere's\na widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to\nfind the two world records encoded in the binary string below.\\r\n\\r\n![](https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06\nPM.png)\\r\n\\r\n1. Most number of people lifted and thrown in two minutes.\n(4 bits)\\r\n1. Most canned drinks opened by a parrot in one minute. (6 bits)\\r\n\\r\n#\nDo This\\r\n* Decode the two numbers from the binary string."
      CSD U5 binary 4_markdown_instruction: "# Bit Length\\r\n\\r\nIf you don't know\nhow many bits long each number is, you won't be able to decode a string of\nnumbers.\\r\n\\r\nFor example, the following binary string could be decoded\nmany different ways.\\r\n\\r\n<img src=\"https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png\"\nstyle=\"height: 30px;\">\\r\n\\r\nIf you split the string like this, the string\nreads 71, 28, 28.\\r\n\\r\n<img src=\"https://images.code.org/03f40f140dbdbff92af0784911e66fa2-image-1502741759516.png\"\nstyle=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\"\nstyle=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\"\nstyle=\"height: 30px;\">\\r\n\\r\nIf you split it like this, the string reads\n17, 249, 12.\\r\n\\r\n<img src=\"https://images.code.org/ec9a1533c32a23637f9d1021d318f496-image-1502741540345.png\"\nstyle=\"height: 30px;\"> &nbsp;&nbsp;  <img src=\"https://images.code.org/1239b8d5f24df95e6461165b92a41383-image-1502741542720.png\"\nstyle=\"height: 30px;\">  &nbsp;&nbsp; <img src=\"https://images.code.org/5e71958697e30b9874ed6f6028a02023-image-1502741545510.png\"\nstyle=\"height: 30px;\">\\r\n\\r\n\\r\nTo solve this problem, people agree on\na fixed length for every number.  The following string uses the same three\nnumbers, but each number takes up exactly eight bits.\\r\n\\r\n\\r\n<img src=\"https://images.code.org/2c55ec3f4ff236cb4ffa8d9b1b46895f-image-1502742909603.png\"\nstyle=\"height: 30px;\">\\r\n\\r\n# Do This\\r\n\\r\n* Use the binary widget to\ndecode the string that uses eight bit numbers.\\r\n* Check you answer with\na partner to see whether you got the same answer."
      CSD U5 binary 5-new_markdown_instruction: "# Decoding multiple numbers\\r\n\\r\nHere's\na widget that can calculate numbers up to to eight bits. You can use it to\nfind the values of the two world records below.\\r\n\\r\nDon't forget to make\nsure that the \"1\" bit is always the right most bit.  If you have extra bits\non the left side of the widget, just keep them turned off.\\r\n\\r\n![](https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14\nPM.png)\\r\n\\r\n1. Longest tail on a dog (in inches) (5 bits)\\r\n2. Most spoons\nbalanced on someone's face (5 bits)\\r\n\\r\n# Do This\\r\n* Decode the two\nnumbers from a the binary string."
      CSD U5 binary 6-new_markdown_instruction: "# Decoding multiple numbers\\r\n\\r\nHere's\na new bit string.  This time, you don't know the bit length of the two numbers.  Try\nto decode the numbers without knowing the bit length.\\r\n\\r\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png)\\r\n\\r\n1. Largest wind chime, in feet (? bits)\\r\n2. Furthest arrow\nshot with someone's feet (in feet) (? bits)\\r\n\\r\n# Do This\\r\n* Try to\ndecode the two numbers from the binary string.\\r\n* Discuss with your partner\nwhy you cannot know for sure whether your answer is correct."
      CSD U5 binary 7-new_markdown_instruction: "# Bit Length\\r\n\\r\nIf you don't\nknow how many bits long each number is, you won't be able to decode a string\nof numbers.\\r\n\\r\nFor example, the following binary string could be decoded\nmany different ways.\\r\n\\r\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png)\\r\n\\r\nIf you split the string like this, the string reads 10, 84.\\r\n\\r\n![](https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01\nPM.png) ![](https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08\nPM.png)\\r\n\\r\n\\r\nIf you split it like this, the string reads 42, 20.\\r\n\\r\n![](https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13\nPM.png) ![](https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19\nPM.png)\\r\n\\r\nTo solve this problem, people agree on a fixed length for every\nnumber.  The following string uses the same two numbers, but each number takes\nup exactly eight bits, no matter how many bits it actually needs.\\r\n\\r\n![](https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\n* Use the binary widget to decode the string\nthat uses eight bit numbers.\\r\n* Check you answer with a partner to see whether\nyou got the same answer."
      CSD U5 black white images pixelation 2_markdown_instruction: "# Do This\\r\n\\r\nUse\nthe pixelation widget to draw a smiley face\\r\n\\r\n![](https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png)"
      CSD U5 black white images pixelation 3_markdown_instruction: "# Do This\\r\n\\r\nThe\nwidth and height sliders are set incorrectly for this image so it doesn't\nlook like anything. Change them until you find the image.\\r\n\\r\n![](https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png)"
      CSD U5 black white images pixelation 4_markdown_instruction: "# Do This\\r\n\\r\nAdd\neyebrows to this smiley face. Remember to use the \"Readable Format\" if you\nget stuck.\\r\n\\r\n![](https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png)"
      CSD U5 black white images pixelation 5_markdown_instruction: "# Do This\\r\n\\r\nNow\nit's your turn. Draw anything you want in the pixelation widget. Feel free\nto change the width and height of your image if you wish."
      CSD U5 black white images pixelation_markdown_instruction: "# Do This\\r\n\\r\nComplete\nthe \"X\" shape by typing 0s and 1s. You can always click \"Readable Format\"\nif you want to clean up your work."
      CSD U5 collection UPS_markdown_instruction: "<img src=\"https://images.code.org/db7d21a8d28df27dee3449939038c7a9-image-1488501564775.jpg\"\nstyle=\"float:right;height:250px\">\\r\n### Plan a Route\\r\n\\r\nRoutz is a\ncompany that helps people navigate traffic. It has maps of locations all around\nthe world and knows real-time information about traffic conditions. When you\ntype in a destination you want to go, it will give you the best route it can\nfind.\\r\n\\r\nRoutz wants to improve its data to provide even better directions.\nYour job is to help the company decide what data it could collect to improve\nthose directions.\\r\n\\r\n**What data should Routz collect to improve its recommendations\nAND where could it get that data?**\\r\n\\r\n"
      CSD U5 collection videos_markdown_instruction: "<img src=\"https://images.code.org/dbefd53cc9aaa2ee1c54f25afc88d860-image-1488492606296.jpg\"\nstyle=\"float:right;height:300px\">\\r\n\\r\n### Make a Recommendation\\r\n\\r\nMeScreen\nis a website where users can watch videos uploaded from all over the world.\nIt has millions of videos and users and new ones every day.\\r\n\\r\nMeScreen\nrecommends a Top Video to each of its users every day. You job is to collect\ninformation about your users and your videos to make the best recommendation\nyou can.\\r\n\\r\n**What kinds of information should you collect AND how could\nyou get it?**"
      CSD U5 color image_markdown_instruction: "# Paint by Numbers\\r\n\\r\nLook at\nthe binary code below.  Use the patterns of ones and zeros to create the picture\nthe code represents. To paint each square, click on the color you want to\nuse, then click on the square.\\r\n\\r\n\\r\n`011 011 011 011 011 011 011 011\n110 110`\\r\n\\r\n`011 011 111 111 111 011 011 011 110 110`\\r\n\\r\n`011 111\n111 111 111 111 011 011 011 011`\\r\n\\r\n`011 011 111 111 111 011 011 011 011\n011`\\r\n\\r\n`011 011 011 011 011 011 011 010 011 011`\\r\n\\r\n`011 011 011\n011 011 011 010 010 010 011`\\r\n\\r\n`011 011 011 011 011 011 010 010 010 011`\\r\n\\r\n`011\n011 011 011 011 011 011 000 011 011`\\r\n\\r\n`001 001 001 010 010 010 010 000\n010 010`\\r\n\\r\n`001 001 001 001 010 010 010 010 010 010`"
      CSD U6 Catch the Mouse prediction_markdown_instruction: "# Catch the Mouse\\r\n\\r\nThis\nis a clicker game, similar to the one that you built in the last lesson.\\r\n\\r\nLook\nat the code with your partner and answer the following question:\\r\n\\r\n*\nHow many times do you need to click the mouse before the LED starts to blink?\\r\n\\r\nWrite\nyour answer in the box below, then run the code and see what happens."
      CSD U6 Catch the Mouse prediction_2018_markdown_instruction: "# Catch the Mouse\\r\n\\r\nThis\nis a clicker game, similar to the one that you built in the last lesson.\\r\n\\r\nLook\nat the code with your partner and answer the following question:\\r\n\\r\n*\nHow many times do you need to click the mouse before the LED starts to blink?\\r\n\\r\nWrite\nyour answer in the box below, then run the code and see what happens."
      CSD U6 Catch the Mouse_markdown_instruction: "Embedded Prediction"
      CSD U6 Catch the Mouse_2018_markdown_instruction: "Embedded Prediction"
      CSD U6 Driver pt 2_markdown_instruction: "# Limiting Turn\\r\n\\r\nYou might\nhave noticed that it was really hard to steer the car unless your hands were\nmoving slowly and carefully. This is because the number that `roll` returns\ncan be a really big number depending on how much the accelerometer is being\nturned. Remember, `roll` has a range from -90 to 90.\\r\n\\r\n# Do This\\r\n\\r\nFind\na way to make `roll` a smaller number while still using it to steer the car.\nYou have all of the math operators available to you for this.\\r\n\\r\n_Challenge_:\nCan you keep the car from going off the side of the screen?"
      CSD U6 Driver pt 2_2018_markdown_instruction: "# Limiting Turn\\r\n\\r\nYou might\nhave noticed that it was really hard to steer the car unless your hands were\nmoving slowly and carefully. This is because the number that `roll` returns\ncan be a really big number depending on how much the accelerometer is being\nturned. Remember, `roll` has a range from -90 to 90.\\r\n\\r\n# Do This\\r\n\\r\nFind\na way to make `roll` a smaller number while still using it to steer the car.\nYou have all of the math operators available to you for this.\\r\n\\r\n_Challenge_:\nCan you keep the car from going off the side of the screen?"
      CSD U6 Driver pt1_markdown_instruction: "# Steering Wheel\\r\n\\r\nThis game\nis similar to the goalie game that you just played, except a little different.\nUse your board as a steering wheel for the car (moving side to side). You\nhave to get to the checkered flag at while avoiding the red flags along the\nway!\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Make the car move down the screen while\nthe program runs.\\r\n* Give the car the ability to steer side to side.\\r\n\\r\nThink\nback to the programs you've made up until this point, how can you update\nthese values?"
      CSD U6 Driver pt1_2018_markdown_instruction: "# Steering Wheel\\r\n\\r\nThis\ngame is similar to the goalie game that you just played, except a little different.\nUse your board as a steering wheel for the car (moving side to side). You\nhave to get to the checkered flag at while avoiding the red flags along the\nway!\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Make the car move down the screen while\nthe program runs.\\r\n* Give the car the ability to steer side to side.\\r\n\\r\nThink\nback to the programs you've made up until this point, how can you update\nthese values?"
      CSD U6 LED all_markdown_instruction: "# Multi-function Light\\r\n\\r\nThis app\nshould let you choose between three types of lights: on, blink, and pulse.  It\nshould also have a button that turns the light completely off.  Right now\nonly the \"on\" button works, and the \"off\" button is completely missing.\\r\n\\r\n#\nDo This\\r\n* Add code to make the \"blink\" and \"pulse\" buttons work.\\r\n*\nIn design mode, add a new \"off\" button.\\r\n* Add code to make the \"off\"\nbutton work."
      CSD U6 LED all_2018_markdown_instruction: "# Multi-function Light\\r\n\\r\nThis\napp should let you choose between three types of lights: on, blink, and pulse.  It\nshould also have a button that turns the light completely off.  Right now\nonly the \"on\" button works, and the \"off\" button is completely missing.\\r\n\\r\n#\nDo This\\r\n* Add code to make the \"blink\" and \"pulse\" buttons work.\\r\n*\nIn design mode, add a new \"off\" button.\\r\n* Add code to make the \"off\"\nbutton work."
      CSD U6 LED toggle_markdown_instruction: "# Light Switch\\r\n\\r\nThere are three\nmore LED blocks that you haven't used yet. One of them can make the button\nwork like a light switch, turning the LED on when it's off, but off when\nit's on.\\r\n\\r\n# Do This\\r\n* Try the `blink`, `toggle` and `pulse` blocks\nto see what they do.\\r\n* Use one of the blocks to make the button work like\na light switch.\\r\n * If the LED is off, the button should turn it on.\\r\n\n* If the LED is on, the button should turn it off."
      CSD U6 LED toggle_2018_markdown_instruction: "# Light Switch\\r\n\\r\nThere are\nthree more LED blocks that you haven't used yet. One of them can make the\nbutton work like a light switch, turning the LED on when it's off, but off\nwhen it's on.\\r\n\\r\n# Do This\\r\n* Try the `blink`, `toggle` and `pulse`\nblocks to see what they do.\\r\n* Use one of the blocks to make the button\nwork like a light switch.\\r\n * If the LED is off, the button should turn\nit on.\\r\n * If the LED is on, the button should turn it off."
      CSD U6 LEDbutton predict embed_markdown_instruction: "# Using Events\\r\n\\r\nThis\nprogram uses events.  Look at the code with a partner and discuss what you\nthink it will do.  Once you have answered the questions click \"Run\" to check\nyour answer.\\r\n\\r\n* Will the light turn on when the program is \"Run\"?  Why\nor why not?"
      CSD U6 LEDbutton predict embed_2018_markdown_instruction: "# Using Events\\r\n\\r\nThis\nprogram uses events.  Look at the code with a partner and discuss what you\nthink it will do.  Once you have answered the questions click \"Run\" to check\nyour answer.\\r\n\\r\n* Will the light turn on when the program is \"Run\"?  Why\nor why not?"
      CSD U6 LEDs color_markdown_instruction: "# Adding Some Color\\r\n\\r\nYou probably\nnoticed when you used `colorLeds[0].on()` in the last level, the LEDs turned\non as white. If you don't specify a color, `on()` will turn on all three\nparts of the LED (red, green, and blue) to produce white. You'll see a new\ncommand in the toolbox called `colorLeds[0].color()` which lets you specify\na color, either as a string like \"blue\" or an RGB value using color `color()`\ncommand.\\r\n\\r\n# Do This\\r\n\\r\nUse the `.color()` command to set each of\nthe color LEDs to a different color."
      CSD U6 LEDs color_2018_markdown_instruction: "# Adding Some Color\\r\n\\r\nYou\nprobably noticed when you used `colorLeds[0].on()` in the last level, the\nLEDs turned on as white. If you don't specify a color, `on()` will turn on\nall three parts of the LED (red, green, and blue) to produce white. You'll\nsee a new command in the toolbox called `colorLeds[0].color()` which lets\nyou specify a color, either as a string like \"blue\" or an RGB value using\ncolor `color()` command.\\r\n\\r\n# Do This\\r\n\\r\nUse the `.color()` command\nto set each of the color LEDs to a different color."
      CSD U6 Pedometer_markdown_instruction: "# Jogger\\r\n\\r\nThis program should\nuse the `shake` event, which is triggered when the board is shaken.  It should\nadd a step to the jogger's total every time the user shakes the board.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the event so it triggers every time the board is shaken.\\r\n*\nAdd code inside the event so that `steps` increases every time the board is\nshaken."
      CSD U6 Pedometer_2018_markdown_instruction: "# Jogger\\r\n\\r\nThis program should\nuse the `shake` event, which is triggered when the board is shaken.  It should\nadd a step to the jogger's total every time the user shakes the board.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the event so it triggers every time the board is shaken.\\r\n*\nAdd code inside the event so that `steps` increases every time the board is\nshaken."
      CSD U6 add LED button_markdown_instruction: "# Using Events\\r\n\\r\nThis program\nhas two buttons.  The \"on\" button works, but the \"off\" button still needs\nto be programmed.\\r\n\\r\n# Do This\\r\n* Add code so that the second button\nturns the LED off."
      CSD U6 add LED button_2018_markdown_instruction: "# Using Events\\r\n\\r\nThis\nprogram has two buttons.  The \"on\" button works, but the \"off\" button\nstill needs to be programmed.\\r\n\\r\n# Do This\\r\n* Add code so that the second\nbutton turns the LED off."
      CSD U6 airplane predict markdown_markdown_instruction: "# Accelerometer\\r\n\\r\nLook\nat the code below. What do you think it's going to do? Give it a guess, and\nrun the code to find out!"
      CSD U6 airplane predict markdown_2018_markdown_instruction: "# Accelerometer\\r\n\\r\nLook\nat the code below. What do you think it's going to do? Give it a guess, and\nrun the code to find out!"
      CSD U6 analog challenge_markdown_instruction: "# Challenge\\r\n\\r\n_Check with\nyour teacher before pursuing this challenge_\\r\n\\r\nNow that you've practiced\ntaking input from the various analog sensors and changing their scale to meet\nyour needs, can you come up with an interesting use for sensor data? It's\neasy to display the raw numbers coming out of a sensor, but far more interesting\nto present that data in different ways.\\r\n\\r\nConsider the following ways\nyou might communicate sensor data:\\r\n\\r\n* Use the board outputs\\r\n* Change\nthe width, height, or position of a UI element\\r\n* Use conditionals to display\ndifferent images based on sensor values"
      CSD U6 analog challenge_2018_markdown_instruction: "# Challenge\\r\n\\r\n_Check\nwith your teacher before pursuing this challenge_\\r\n\\r\nNow that you've\npracticed taking input from the various analog sensors and changing their\nscale to meet your needs, can you come up with an interesting use for sensor\ndata? It's easy to display the raw numbers coming out of a sensor, but far\nmore interesting to present that data in different ways.\\r\n\\r\nConsider the\nfollowing ways you might communicate sensor data:\\r\n\\r\n* Use the board outputs\\r\n*\nChange the width, height, or position of a UI element\\r\n* Use conditionals\nto display different images based on sensor values"
      CSD U6 analog change_markdown_instruction: "# Change Event\\r\n\\r\nThe data\nevent is fine if you don't mind your code running constantly, but sometimes\nthat's not the most efficient solution to your problem. The sensor \"change\"\nevent only fires if the sensor value has changed since the last reading, which\ncan make sure your program isn't running code when it's not necessary.\\r\n\\r\n#\nDo This\\r\n\\r\nUsing the provided event handler, write a program that buzzes\nthe buzzer and updates \"temp_value\" whenever the temperature sensor reading\nchanges. Place your thumb over the temperature sensor to get it to change\nand see how your program responds."
      CSD U6 analog change_2018_markdown_instruction: "# Change Event\\r\n\\r\nThe\ndata event is fine if you don't mind your code running constantly, but sometimes\nthat's not the most efficient solution to your problem. The sensor \"change\"\nevent only fires if the sensor value has changed since the last reading, which\ncan make sure your program isn't running code when it's not necessary.\\r\n\\r\n#\nDo This\\r\n\\r\nUsing the provided event handler, write a program that buzzes\nthe buzzer and updates \"temp_value\" whenever the temperature sensor reading\nchanges. Place your thumb over the temperature sensor to get it to change\nand see how your program responds."
      CSD U6 analog data_markdown_instruction: "# Data Event\\r\n\\r\nEach of these\nanalog sensors emits a special event called \"data\" which occurs every time\nnew data comes in from the sensor. Using this event, we can write programs\nthat continually update.\\r\n\\r\n# Do This\\r\n\\r\nThis is the first program\nyou worked on in this lesson, let's see if we can make it continually update\nthe sound reading using the \"data\" event.\\r\n\\r\n* Create an event handler\nto respond to sound sensor's \"data\" event\\r\n* Move the existing code into\nyour event handler"
      CSD U6 analog data_2018_markdown_instruction: "# Data Event\\r\n\\r\nEach of\nthese analog sensors emits a special event called \"data\" which occurs every\ntime new data comes in from the sensor. Using this event, we can write programs\nthat continually update.\\r\n\\r\n# Do This\\r\n\\r\nThis is the first program\nyou worked on in this lesson, let's see if we can make it continually update\nthe sound reading using the \"data\" event.\\r\n\\r\n* Create an event handler\nto respond to sound sensor's \"data\" event\\r\n* Move the existing code into\nyour event handler"
      CSD U6 analog light_markdown_instruction: "# Light Sensor Updates\\r\n\\r\nThis\napp is very similar to the last, but we've added a button with the ID \"update_button\".\nWrite a program that displays the current value of the light sensor every\ntime the update button is clicked.\\r\n\\r\n# Do This\\r\n\\r\nUse an event handler\nto update the text of \"light_value\" using the `lightSensor.value` block."
      CSD U6 analog light_2018_markdown_instruction: "# Light Sensor Updates\\r\n\\r\nThis\napp is very similar to the last, but we've added a button with the ID \"update_button\".\nWrite a program that displays the current value of the light sensor every\ntime the update button is clicked.\\r\n\\r\n# Do This\\r\n\\r\nUse an event handler\nto update the text of \"light_value\" using the `lightSensor.value` block."
      CSD U6 analog rbg 1_markdown_instruction: "# Displaying Sensor Readings in\nColor\\r\n\\r\nIn the earlier prediction level you saw how the `setScale()`\nmethod can convert the full range of sensor readings (0-1023) into a range\nthat can be used for RGB values (0-255). Let's build on that idea to make\nan app that can communicate the current value of all three analog sensors\nwith a single color.\\r\n\\r\n# Do This\\r\n\\r\nTo start, we just need to set\nthe sensor scales correctly - don't worry about actually setting the color\nof the background yet.\\r\n\\r\n* Using the `sensor.setScale()` block, set each\nof light and sound sensors to the right scale for an RGB color channel.\\r\n*\nCreate a variable for each of the three colors and assign each one to the\nvalue of a different sensor.\\r\n* Use `console.log()` to test that your variables\nare in the correct range.\\r\n\\r\n_Hint: Order matters. You need to set the\nscale of a sensor before checking its value_\\r\n\\r\n_Hint: Remember that the\ntemperature sensor can be read in both Celsius and Fahrenheit - either way\nit should already give you a value that's within the necessary range for\nRGB_"
      CSD U6 analog rbg 1_2018_markdown_instruction: "# Displaying Sensor Readings\nin Color\\r\n\\r\nIn the earlier prediction level you saw how the `setScale()`\nmethod can convert the full range of sensor readings (0-1023) into a range\nthat can be used for RGB values (0-255). Let's build on that idea to make\nan app that can communicate the current value of all three analog sensors\nwith a single color.\\r\n\\r\n# Do This\\r\n\\r\nTo start, we just need to set\nthe sensor scales correctly - don't worry about actually setting the color\nof the background yet.\\r\n\\r\n* Using the `sensor.setScale()` block, set each\nof light and sound sensors to the right scale for an RGB color channel.\\r\n*\nCreate a variable for each of the three colors and assign each one to the\nvalue of a different sensor.\\r\n* Use `console.log()` to test that your variables\nare in the correct range.\\r\n\\r\n_Hint: Order matters. You need to set the\nscale of a sensor before checking its value_\\r\n\\r\n_Hint: Remember that the\ntemperature sensor can be read in both Celsius and Fahrenheit - either way\nit should already give you a value that's within the necessary range for\nRGB_"
      CSD U6 analog rbg 2_markdown_instruction: "# Putting Color on the Screen\\r\n\\r\nNow\nthat your sensor data is in a scale that works for RGB, you can go about setting\nthe screen color.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `setProperty()` block and\nset it to change the screen's background color.\\r\n* Add an `rgb()` block\nto the last parameter of `setProperty()`.\\r\n* Use the three color variables\nyou created as inputs to the `rgb()` block."
      CSD U6 analog rbg 2_2018_markdown_instruction: "# Putting Color on the Screen\\r\n\\r\nNow\nthat your sensor data is in a scale that works for RGB, you can go about setting\nthe screen color.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `setProperty()` block and\nset it to change the screen's background color.\\r\n* Add an `rgb()` block\nto the last parameter of `setProperty()`.\\r\n* Use the three color variables\nyou created as inputs to the `rgb()` block."
      CSD U6 analog rgb 3_markdown_instruction: "# Continuous Updates\\r\n\\r\nThis\nsensor-to-color app isn't super useful if it only sets the color once when\nyou start the app. You can use the sensors' \"data\" event to make your app\ncontinually update the background color every time the value changes.\\r\n\\r\nMove\nyour `setProperty()` block into a an event handler for one of the sensors\nto make the app update continually."
      CSD U6 analog rgb 3_2018_markdown_instruction: "# Continuous Updates\\r\n\\r\nThis\nsensor-to-color app isn't super useful if it only sets the color once when\nyou start the app. You can use the sensors' \"data\" event to make your app\ncontinually update the background color every time the value changes.\\r\n\\r\nMove\nyour `setProperty()` block into a an event handler for one of the sensors\nto make the app update continually."
      CSD U6 analog sound_markdown_instruction: "# Reading the Sound Sensor\\r\n\\r\nThe\n`soundSensor.value` block allows you to get the current sound sensor reading\\r\n\\r\n#\nDo This\\r\n\\r\nIn this app we've already added a text label with the id \"sound_value\".\nUsing the `soundSensor.value` block, display the value of the sound sensor.\\r\n\\r\n_Tip:\nYou can drag the `soundSensor.value` block directly into any other block where\nyou could type a value instead._\\r\n\\r\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)"
      CSD U6 analog sound_2018_markdown_instruction: "# Reading the Sound Sensor\\r\n\\r\nThe\n`soundSensor.value` block allows you to get the current sound sensor reading\\r\n\\r\n#\nDo This\\r\n\\r\nIn this app we've already added a text label with the id \"sound_value\".\nUsing the `soundSensor.value` block, display the value of the sound sensor.\\r\n\\r\n_Tip:\nYou can drag the `soundSensor.value` block directly into any other block where\nyou could type a value instead._\\r\n\\r\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)"
      CSD U6 analog temp_markdown_instruction: "# Make a Thermometer App\\r\n\\r\nWhile\nthe light and sound sensors have just a raw value with the `value` property,\nthe temperature sensor is a little bit smarter. Instead of `tempSensor.value`,\nthere are two properties `tempSensor.F` and `tempSensor.C` which convert the\nraw input value to either Fahrenheit or Celsius.\\r\n\\r\n# Do This\\r\n\\r\nMake\na simple thermometer app that reads in values from the temperature sensor.\nYour app can display the temperature in either Fahrenheit or Celsius (or both!)\\r\n\\r\n*\nUsing Design Mode, create a button for updating and a label to display the\ntemperature\\r\n* Add an event handler to respond to your update button being\nclicked\\r\n* Add code to your event handler to read the temperature sensor\nand display the value on screen"
      CSD U6 analog temp_2018_markdown_instruction: "# Make a Thermometer App\\r\n\\r\nWhile\nthe light and sound sensors have just a raw value with the `value` property,\nthe temperature sensor is a little bit smarter. Instead of `tempSensor.value`,\nthere are two properties `tempSensor.F` and `tempSensor.C` which convert the\nraw input value to either Fahrenheit or Celsius.\\r\n\\r\n# Do This\\r\n\\r\nMake\na simple thermometer app that reads in values from the temperature sensor.\nYour app can display the temperature in either Fahrenheit or Celsius (or both!)\\r\n\\r\n*\nUsing Design Mode, create a button for updating and a label to display the\ntemperature\\r\n* Add an event handler to respond to your update button being\nclicked\\r\n* Add code to your event handler to read the temperature sensor\nand display the value on screen"
      CSD U6 analog threshold_markdown_instruction: "# Change Threshold\\r\n\\r\nBy\ndefault a sensor's \"change\" event fires every time the sensor value changes\nat all, even by one. The light and sound sensors are constantly fluctuating,\nso you probably want the \"change\" event to be a little less responsive.\nThe `threshold` property allows you to set how much a sensor should change\nbefore considering it a \"change\" event - so setting `soundSensor.threshold\n= 100` would cause the sound sensor's \"change\" event only to trigger if\nits value increased or decreased by at least 100.\\r\n\\r\n# Do This\\r\n\\r\nThis\napp changes the background color of the screen whenever the sound sensor value\nchanges, but we want to only respond to big changes in volume (like a loud\nnoise). Use the `soundSensor.threshold` block to fix it.\\r\n\\r\n* Add a `soundSensor.threshold`\nblock before the event handler\\r\n* Test out which how different threshold\nvalues impact the \"change\" event\\r\n* Choose a threshold value that makes\nthe screen background change only when a loud noise is sensed.\\r\n\\r\n_Tip:\nYour threshold depends on how much ambient noise there is in the room, and\nhow much it changes. A threshold that works in a quiet room may not work in\na louder classroom._"
      CSD U6 analog threshold_2018_markdown_instruction: "# Change Threshold\\r\n\\r\nBy\ndefault a sensor's \"change\" event fires every time the sensor value changes\nat all, even by one. The light and sound sensors are constantly fluctuating,\nso you probably want the \"change\" event to be a little less responsive.\nThe `threshold` property allows you to set how much a sensor should change\nbefore considering it a \"change\" event - so setting `soundSensor.threshold\n= 100` would cause the sound sensor's \"change\" event only to trigger if\nits value increased or decreased by at least 100.\\r\n\\r\n# Do This\\r\n\\r\nThis\napp changes the background color of the screen whenever the sound sensor value\nchanges, but we want to only respond to big changes in volume (like a loud\nnoise). Use the `soundSensor.threshold` block to fix it.\\r\n\\r\n* Add a `soundSensor.threshold`\nblock before the event handler\\r\n* Test out which how different threshold\nvalues impact the \"change\" event\\r\n* Choose a threshold value that makes\nthe screen background change only when a loud noise is sensed.\\r\n\\r\n_Tip:\nYour threshold depends on how much ambient noise there is in the room, and\nhow much it changes. A threshold that works in a quiet room may not work in\na louder classroom._"
      CSD U6 array piano_markdown_instruction: "# Piano Panic\\r\n\\r\nSo far you’ve\njust been using the elements of an array. Now, you're going to change what's\ninside the array.\\r\n\\r\nOur good friend the piano is back, except now it\nplays notes from two arrays: `notes`, which holds natural notes (C, D, E,\nF, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).\\r\n\\r\n#\nDo this\\r\n\\r\nThe `sharpNotes` array only has one item inside of it right\nnow.\\r\n\\r\n* Fix the array so that the sharp keys on the piano can actually\nplay the right note.\\r\n\\r\n_Hint: Modifying arrays is much easier in text\nmode.  You can always switch between block and text mode by clicking the button\nat the top right of your code workspace._"
      CSD U6 array piano_2018_markdown_instruction: "# Piano Panic\\r\n\\r\nSo far\nyou’ve just been using the elements of an array. Now, you're going to change\nwhat's inside the array.\\r\n\\r\nOur good friend the piano is back, except\nnow it plays notes from two arrays: `notes`, which holds natural notes (C,\nD, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#,\nG#, A#).\\r\n\\r\n# Do this\\r\n\\r\nThe `sharpNotes` array only has one item\ninside of it right now.\\r\n\\r\n* Fix the array so that the sharp keys on the\npiano can actually play the right note.\\r\n\\r\n_Hint: Modifying arrays is\nmuch easier in text mode.  You can always switch between block and text mode\nby clicking the button at the top right of your code workspace._"
      CSD U6 balloon clicker predict_markdown_instruction: "# Make the Balloon Fly\\r\n\\r\nIn\nthis game, you have to click on the correct buttons to make the balloon fly\ninto the sky.\\r\n\\r\nLook at the code with your partner and answer the following\nquestions:\\r\n\\r\n* When does the value stored in the variable `correct` change?\\r\n*\nWhy does the program need this line: `var choice = randomNumber(1,3);`?\\r\n\\r\nOnce\nyou have answered the questions, run the code and see what happens."
      CSD U6 board getters_markdown_instruction: "# Using the Circuit Playground\\r\n\\r\nYou\ncan also use getters and setters with the Circuit Playground.  For this level,\nyou'll need to plug in your board.\\r\n\\r\nRead through the code and predict\nwhat the program will do, then hit \"Run\" to test your prediction."
      CSD U6 board getters_2018_markdown_instruction: "# Using the Circuit Playground\\r\n\\r\nYou\ncan also use getters and setters with the Circuit Playground.  For this level,\nyou'll need to plug in your board.\\r\n\\r\nRead through the code and predict\nwhat the program will do, then hit \"Run\" to test your prediction."
      CSD U6 challenge motorcycle_markdown_instruction: "# Challenge\\r\n\\r\nUse this\nprogram to experiment some more with getting and setting properties. Some\nideas you might try include:\\r\n\\r\n* Use the toggle switch to change the\nmotorcycle's movement to go up and down.\\r\n* Use a dropdown with color names\nto change the motorcycle's color\\r\n* Make the buzzer or LED turn on when\nthe motorcycle reaches the top or bottom of the screen."
      CSD U6 challenge motorcycle_2018_markdown_instruction: "# Challenge\\r\n\\r\nUse\nthis program to experiment some more with getting and setting properties.\nSome ideas you might try include:\\r\n\\r\n* Use the toggle switch to change\nthe motorcycle's movement to go up and down.\\r\n* Use a dropdown with color\nnames to change the motorcycle's color\\r\n* Make the buzzer or LED turn on\nwhen the motorcycle reaches the top or bottom of the screen."
      CSD U6 change_markdown_instruction: "# Change\\r\n\\r\nIn the last level, the\nprogram only got the interval value from the slider when you pressed the left\nbutton.  Sometimes, though, you'll want to change the interval of the LED\nas soon as the user chooses a new value.   For that, you'll need the \"change\"\nevent.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the first event block in the program\nand find where it says \"change\".\\r\n* Inside the event block, get the interval\nvalue from the slider and use it to make the LED blink at that new rate.\\r\n*\nRun your program, moving the slider to see whether the LED speed changes automatically."
      CSD U6 change_2018_markdown_instruction: "# Change\\r\n\\r\nIn the last level,\nthe program only got the interval value from the slider when you pressed the\nleft button.  Sometimes, though, you'll want to change the interval of the\nLED as soon as the user chooses a new value.   For that, you'll need the\n\"change\" event.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the first event block\nin the program and find where it says \"change\".\\r\n* Inside the event block,\nget the interval value from the slider and use it to make the LED blink at\nthat new rate.\\r\n* Run your program, moving the slider to see whether the\nLED speed changes automatically."
      CSD U6 checkbox_markdown_instruction: "Predict Level"
      CSD U6 circuit createButton scratch_markdown_instruction: "<div style=\"float:\nright\" markdown=\"1\">\\r\n\\r\n![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\\r\n\\r\n</div>\\r\n\\r\n#\nMake Your Own Buttons\\r\n\\r\nJust like `createLed()` lets us create LED objects\nthat can be used like the built-in `led`, you can use `createButton()` to\ncreate button objects that can be used just like the built-in `buttonL` and\n`buttonR` objects.\\r\n\\r\n# Do This\\r\n\\r\n* Grab two wires.\\r\n* Connect\none wire to an free data pin.\\r\n* Connect the second wire to a ground pin.\\r\n*\nUpdate line 2 so that it's referencing the pin you chose.\\r\n* Run the provided\ncode.\\r\n* With the program running, touch the unconnected ends of both wires\ntogether to \"press\" the button.\\r\n\\r\n_Tip: A button circuit can be made\nwith many different kinds of materials, as long as they are electrically conductive.\nTry making buttons with foil, silverware, or paper clips._"
      CSD U6 circuit createButton scratch_2018_markdown_instruction: "<div style=\"float:\nright\" markdown=\"1\">\\r\n\\r\n![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\\r\n\\r\n</div>\\r\n\\r\n#\nMake Your Own Buttons\\r\n\\r\nJust like `createLed()` lets us create LED objects\nthat can be used like the built-in `led`, you can use `createButton()` to\ncreate button objects that can be used just like the built-in `buttonL` and\n`buttonR` objects.\\r\n\\r\n# Do This\\r\n\\r\n* Grab two wires.\\r\n* Connect\none wire to an free data pin.\\r\n* Connect the second wire to a ground pin.\\r\n*\nUpdate line 2 so that it's referencing the pin you chose.\\r\n* Run the provided\ncode.\\r\n* With the program running, touch the unconnected ends of both wires\ntogether to \"press\" the button.\\r\n\\r\n_Tip: A button circuit can be made\nwith many different kinds of materials, as long as they are electrically conductive.\nTry making buttons with foil, silverware, or paper clips._"
      CSD U6 circuit createButton_markdown_instruction: "<div style=\"float: right\"\nmarkdown=\"1\">\\r\n\\r\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\\r\n\\r\n</div>\\r\n\\r\n#\nMake Your Own Buttons\\r\n\\r\nSimilar to LEDs, buttons are a really simple\ncircuit that you can add to your board pretty easily. Like LEDs, buttons should\nbe wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit\nshould be disconnected in the middle. When you connect the circuit, it will\nproduce a button press event.\\r\n\\r\n# Do This\\r\n\\r\n* Grab two wires.\\r\n*\nConnect one wire to an open numbered pin.\\r\n* Connect the second wire to\na ground pin.\\r\n* Update line 2 so that it's referencing the pin you chose.\\r\n*\nRun the provided code.\\r\n* With the program running, touch the unconnected\nends of both wires together to \"press\" the button.\\r\n\\r\n_Tip: A button\ncircuit can be made with many different kinds of materials, as long as they\nare electrically conductive. Try making buttons with foil, silverware, or\npaper clips._"
      CSD U6 circuit createButton_2018_markdown_instruction: "<div style=\"float:\nright\" markdown=\"1\">\\r\n\\r\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\\r\n\\r\n</div>\\r\n\\r\n#\nMake Your Own Buttons\\r\n\\r\nSimilar to LEDs, buttons are a really simple\ncircuit that you can add to your board pretty easily. Like LEDs, buttons should\nbe wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit\nshould be disconnected in the middle. When you connect the circuit, it will\nproduce a button press event.\\r\n\\r\n# Do This\\r\n\\r\n* Grab two wires.\\r\n*\nConnect one wire to an open numbered pin.\\r\n* Connect the second wire to\na ground pin.\\r\n* Update line 2 so that it's referencing the pin you chose.\\r\n*\nRun the provided code.\\r\n* With the program running, touch the unconnected\nends of both wires together to \"press\" the button.\\r\n\\r\n_Tip: A button\ncircuit can be made with many different kinds of materials, as long as they\nare electrically conductive. Try making buttons with foil, silverware, or\npaper clips._"
      CSD U6 circuit createLed_markdown_instruction: "# Creating Board Objects\\r\n\\r\nYou\nmight have noticed that the new blocks we're using are in a different toolbox\ndrawer. The **Circuit** drawer contains all of the board objects that are\nbuilt into the Circuit Playground, but when you start wiring your own circuits\nthe Maker Toolkit no longer knows where everything is.\\r\n\\r\nThe new **Maker**\ndrawer contains general purpose commands instead of ones that are customized\nfor the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()`\ncommands you've seen, it includes commands to create new objects on the board\nthat can be programmed in the same way as the blocks in the **Circuit** drawer.\nThe `var myLed = createLed()` command, for example, creates a new LED object\nthat behaves just like the `led` blocks you've been using.\\r\n\\r\n# Do This\\r\n\\r\nNow\nthat you're creating new board objects that we don't have blocks for, you'll\nneed to work in text mode. You can still drag out blocks that you're familiar\nwith from the **Circuit** drawer, you'll just need to change the name of\nthe object.\\r\n\\r\n* Keep your LED wired just as it was before (connected\nto pin 2)\\r\n* Make sure you're in text mode, not block mode.\\r\n* Drag out\nan `led.blink()` block below the comment `// Blink myLed`.\\r\n* Replace the\ntext `led` with `myLed`.\\r\n* Test your code."
      CSD U6 circuit createLed_2018_markdown_instruction: "# Creating Board Objects\\r\n\\r\nYou\nmight have noticed that the new blocks we're using are in a different toolbox\ndrawer. The **Circuit** drawer contains all of the board objects that are\nbuilt into the Circuit Playground, but when you start wiring your own circuits\nthe Maker Toolkit no longer knows where everything is.\\r\n\\r\nThe new **Maker**\ndrawer contains general purpose commands instead of ones that are customized\nfor the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()`\ncommands you've seen, it includes commands to create new objects on the board\nthat can be programmed in the same way as the blocks in the **Circuit** drawer.\nThe `var myLed = createLed()` command, for example, creates a new LED object\nthat behaves just like the `led` blocks you've been using.\\r\n\\r\n# Do This\\r\n\\r\nNow\nthat you're creating new board objects that we don't have blocks for, you'll\nneed to work in text mode. You can still drag out blocks that you're familiar\nwith from the **Circuit** drawer, you'll just need to change the name of\nthe object.\\r\n\\r\n* Keep your LED wired just as it was before (connected\nto pin 2)\\r\n* Make sure you're in text mode, not block mode.\\r\n* Drag out\nan `led.blink()` block below the comment `// Blink myLed`.\\r\n* Replace the\ntext `led` with `myLed`.\\r\n* Test your code."
      CSD U6 circuit mix_markdown_instruction: "# Mix and Match Circuits\\r\n\\r\nUsing\nthe 8 numbered pins around the edge of the board, you can combine as many\nbuttons and LEDs as you can fit, using a separate numbered pin for each circuit\nand a shared ground pin for all them.\\r\n\\r\n# Do This\\r\n\\r\nDisconnect any\ncircuits currently attached to your board.\\r\n\\r\n* Create a button circuit\nconnected to pin 0.\\r\n* Create an LED circuit connected to pin 2.\\r\n* Create\na new button object for your button circuit with `createButton()`.\\r\n* Create\na new LED object for your LED circuit with `createLed()`\\r\n* Add event handlers\nto turn on your new LED when your button is pressed down, and turn it back\noff when the button is released.\\r\n\\r\n_Tip: When sharing the ground pin\nwith multiple circuits it can be useful to connect a larger conductive object\n(like a bare wire) to the pin and then connect all of your circuits to that\nlarger object._"
      CSD U6 circuit multi led_markdown_instruction: "# Wiring Multiple LEDs\\r\n\\r\nUsing\nthe `createLed()` block you can connect and control as many LEDs as your board\nhas room for. Each LED needs to be connected to a separate numbered pin, but\nthey can all share the same ground pin.\\r\n\\r\n# Do This\\r\n\\r\nLeave the\ncurrent LED connected to pin 2, but add another one to a numbered pin of your\nchoice. For your new LED:\\r\n\\r\n* Add a `var myLed = createLed()` block.\\r\n*\nReplace the variable label `myLed` with a unique label.\\r\n* Make sure you're\nin text mode, not block mode.\\r\n* Add an `led.blink()` command.\\r\n* Replace\nthe text `led` with your new LED variable.\\r\n* Test your code.\\r\n\\r\n_Challenge:\nTry adding a third LED and make all three LED blink at different intervals._"
      CSD U6 circuit multi led_2018_markdown_instruction: "# Wiring Multiple LEDs\\r\n\\r\nUsing\nthe `createLed()` block you can connect and control as many LEDs as your board\nhas room for. Each LED needs to be connected to a separate numbered pin, but\nthey can all share the same ground pin.\\r\n\\r\n# Do This\\r\n\\r\nLeave the\ncurrent LED connected to pin 2, but add another one to a numbered pin of your\nchoice. For your new LED:\\r\n\\r\n* Add a `var myLed = createLed()` block.\\r\n*\nReplace the variable label `myLed` with a unique label.\\r\n* Make sure you're\nin text mode, not block mode.\\r\n* Add an `led.blink()` command.\\r\n* Replace\nthe text `led` with your new LED variable.\\r\n* Test your code.\\r\n\\r\n_Challenge:\nTry adding a third LED and make all three LED blink at different intervals._"
      CSD U6 circuit pinMode_markdown_instruction: "# Wire a Circuit\\r\n\\r\nYou can\nuse any of the numbered pads to add additional circuits to your board. Let's\nuse pin 2 to add another LED.\\r\n\\r\n# Do This\\r\n\\r\n* Using a wire, connect\npin 2 to the positive (+) side of an LED\\r\n* Using another wire, connect\nthe negative (-) side of the LED to a ground (GND) pin (it doesn't matter\nwhich one)\\r\n* Run this program to test your circuit. If it worked, your\nLED should turn on.\\r\n\\r\n_Debugging Tip: LEDs only work if the electricity\nis flowing from positive to negative. If your LED doesn't light up, make\nsure that it's oriented the right way._"
      CSD U6 circuit pinMode_2018_markdown_instruction: "# Wire a Circuit\\r\n\\r\nYou\ncan use any of the numbered pads to add additional circuits to your board.\nLet's use pin 2 to add another LED.\\r\n\\r\n# Do This\\r\n\\r\n* Using a wire,\nconnect pin 2 to the positive (+) side of an LED\\r\n* Using another wire,\nconnect the negative (-) side of the LED to a ground (GND) pin (it doesn't\nmatter which one)\\r\n* Run this program to test your circuit. If it worked,\nyour LED should turn on.\\r\n\\r\n_Debugging Tip: LEDs only work if the electricity\nis flowing from positive to negative. If your LED doesn't light up, make\nsure that it's oriented the right way._"
      CSD U6 circuit predict multi_markdown_instruction: "# Make a Prediction\\r\n\\r\nAll\nof the devices that you've used so far are actually circuits connected to\nnumbered pins! Look for **#13** on your board to see which circuit is connected\nto pin 13, then read through this code and predict what will happen when the\nprogram is run."
      CSD U6 circuit predict multi_2018_markdown_instruction: "# Make a Prediction\\r\n\\r\nAll\nof the devices that you've used so far are actually circuits connected to\nnumbered pins! Look for **#13** on your board to see which circuit is connected\nto pin 13, then read through this code and predict what will happen when the\nprogram is run."
      CSD U6 circuit project program_markdown_instruction: "# Program Your Prototype\\r\n\\r\nUsing\nyour planning guide, program your prototype to simulate basic functionality.\\r\n\\r\n#\nDo This\\r\n\\r\nYour physical prototype should by now include one of the buttons\nwired to pin 0, and one of your location indicator LEDs connected to pin 2.\nThat's enough to model how the prototype should work, you just need program\nthe button to turn on and off the LED.\\r\n\\r\n* Create your LED and button\nobjects using the appropriate `create` commands.\\r\n* Program event handlers\nto respond to your button going down and up, which turn on and off the LED."
      CSD U6 circuit project template_markdown_instruction: "# Prototyping Circuit\nProject Template"
      CSD U6 circuit project template_2018_markdown_instruction: "# Prototyping Circuit\nProject Template"
      CSD U6 circuit smart bike blinker buttons_markdown_instruction: "# Smart Bike\n- Blinker Controls\\r\n\\r\nWith your turn signal LEDs hooked up, you just need\nto program some buttons to control them. You may want to place buttons elsewhere\non the bike to make controlling your turn signals easier, but for now we'll\njust use the built in left and right buttons.\\r\n\\r\n# Do This\\r\n\\r\n* Add\nevent handlers to blink the left turn signal when the left button is pressed.\\r\n*\nAdd event handlers to blink the right turn signal when the right button is\npressed.\\r\n* Test your code!\\r\n\\r\n_Hint: You'll need to be in text mode\nto make the blinkers work, since there are no built-in blocks for the elements\nthat you add on to the board._"
      CSD U6 circuit smart bike blinker buttons_2018_markdown_instruction: "# Smart\nBike - Blinker Controls\\r\n\\r\nWith your turn signal LEDs hooked up, you just\nneed to program some buttons to control them. You may want to place buttons\nelsewhere on the bike to make controlling your turn signals easier, but for\nnow we'll just use the built in left and right buttons.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd event handlers to blink the left turn signal when the left button is pressed.\\r\n*\nAdd event handlers to blink the right turn signal when the right button is\npressed.\\r\n* Test your code!\\r\n\\r\n_Hint: You'll need to be in text mode\nto make the blinkers work, since there are no built-in blocks for the elements\nthat you add on to the board._"
      CSD U6 circuit smart bike blinkers_markdown_instruction: "# Smart Bike - Blinkers\\r\n\\r\nUsing\nyour planning guide, wire up the two LEDs that will serve as the blinkers.\nIn order to make sure that the blinkers can be mounted at the end of the handlebars,\nmake sure you wire them so that they can stretch out in opposite directions.\\r\n\\r\n#\nDo This\\r\n\\r\nUsing alligator clips, wire, or other conductive material,\nconnect two LEDs to your board, one for each turn signal blinker.\\r\n\\r\n*\nHook up each LED to a different numbered pin on the board.\\r\n* Use the `createLed()`\nblock to create an LED object for each blinker.\\r\n\\r\n_Tip: Make your wiring\neasier by considering how your blinkers will be mounted when selecting a pin\nto use._ "
      CSD U6 circuit smart bike blinkers_2018_markdown_instruction: "# Smart Bike\n- Blinkers\\r\n\\r\nUsing your planning guide, wire up the two LEDs that will\nserve as the blinkers. In order to make sure that the blinkers can be mounted\nat the end of the handlebars, make sure you wire them so that they can stretch\nout in opposite directions.\\r\n\\r\n# Do This\\r\n\\r\nUsing alligator clips,\nwire, or other conductive material, connect two LEDs to your board, one for\neach turn signal blinker.\\r\n\\r\n* Hook up each LED to a different numbered\npin on the board.\\r\n* Use the `createLed()` block to create an LED object\nfor each blinker.\\r\n\\r\n_Tip: Make your wiring easier by considering how\nyour blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer_markdown_instruction: "# Smart Bike - Buzzer\\r\n\\r\nNow\nthat we know how to add more buttons, you can add a button to control the\nsmart bike's horn.\\r\n\\r\n# Do This\\r\n\\r\nUsing the button that you've\nalready wired to the board, find a good spot to place your horn button. Then:\\r\n\\r\n*\nCreate a button object for your horn button\\r\n* Add an event handler to buzz\nwhen button is pressed\\r\n\\r\n_Hint: The button object that you create won't\nbe in the `onBoardEvent()` dropdown, so you'll need to type the name you've\nchosen in. Make sure not to use quotation marks!_"
      CSD U6 circuit smart bike buzzer_2018_markdown_instruction: "# Smart Bike -\nBuzzer\\r\n\\r\nNow that we know how to add more buttons, you can add a button\nto control the smart bike's horn.\\r\n\\r\n# Do This\\r\n\\r\nUsing the button\nthat you've already wired to the board, find a good spot to place your horn\nbutton. Then:\\r\n\\r\n* Create a button object for your horn button\\r\n* Add\nan event handler to buzz when button is pressed\\r\n\\r\n_Hint: The button object\nthat you create won't be in the `onBoardEvent()` dropdown, so you'll need\nto type the name you've chosen in. Make sure not to use quotation marks!_"
      CSD U6 circuit smart bike final_markdown_instruction: "# Smart Bike - Final\nTouches\\r\n\\r\nAt this point your smart bike should have all of its basic\nfunctionality in place. Now is your chance to add any finishing touches.\\r\n\\r\n#\nDo This\\r\n\\r\nYou may want to divide and conquer at this point, allowing\nsome members of your group to focus on the physical aspects of the prototype\nwhile others work on improving the code. As this is a prototype, don't worry\nabout making everything perfect, but do try to ensure that the prototype communicates\nyour design well enough to test and get feedback."
      CSD U6 circuit smart bike final_2018_markdown_instruction: "# Smart Bike -\nFinal Touches\\r\n\\r\nAt this point your smart bike should have all of its\nbasic functionality in place. Now is your chance to add any finishing touches.\\r\n\\r\n#\nDo This\\r\n\\r\nYou may want to divide and conquer at this point, allowing\nsome members of your group to focus on the physical aspects of the prototype\nwhile others work on improving the code. As this is a prototype, don't worry\nabout making everything perfect, but do try to ensure that the prototype communicates\nyour design well enough to test and get feedback."
      CSD U6 circuit smart bike light_markdown_instruction: "# Smart Bike - Headlight\\r\n\\r\nThe\nlast part of the smart bike plan that we need to figure out is the automatic\nheadlight.\\r\n\\r\n# Do This\\r\n\\r\nFirst you'll need to decide what to use\nfor your headlight. You could add another LED circuit, or perhaps you can\nfind a way to mount the board that allows for using the color LEDs as a headlight.\nOnce you've figured out the physical layout of your lights, add code to your\nprogram that turns on and off the headlight based on how light or dark it\nis.\\r\n\\r\n_Hint: If you're using the built-in color LEDs, you might need\nto protect the light sensor to make sure that it's responding to the ambient\nlight level and not the light from the LEDs._"
      CSD U6 circuit smart bike light_2018_markdown_instruction: "# Smart Bike -\nHeadlight\\r\n\\r\nThe last part of the smart bike plan that we need to figure\nout is the automatic headlight.\\r\n\\r\n# Do This\\r\n\\r\nFirst you'll need\nto decide what to use for your headlight. You could add another LED circuit,\nor perhaps you can find a way to mount the board that allows for using the\ncolor LEDs as a headlight. Once you've figured out the physical layout of\nyour lights, add code to your program that turns on and off the headlight\nbased on how light or dark it is.\\r\n\\r\n_Hint: If you're using the built-in\ncolor LEDs, you might need to protect the light sensor to make sure that it's\nresponding to the ambient light level and not the light from the LEDs._"
      CSD U6 colorLED on_markdown_instruction: "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\"\nstyle=\"float: right; margin: 10px;\">\\r\n\\r\n# colorLeds\\r\n\\r\nThe color\nLEDs can use the same basic commands that you used with the red LED, such\nas `on()` and `off()`. This program should turn on and off the bottom LEDs\nas shown in the picture, but only one LED is working.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead and run the code to see how the program turns the bottom left LED on\nand off.\\r\n* Add more code to make both bottom LEDs turn on and off."
      CSD U6 colorLED on_2018_markdown_instruction: "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\"\nstyle=\"float: right; margin: 10px;\">\\r\n\\r\n# colorLeds\\r\n\\r\nThe color\nLEDs can use the same basic commands that you used with the red LED, such\nas `on()` and `off()`. This program should turn on and off the bottom LEDs\nas shown in the picture, but only one LED is working.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead and run the code to see how the program turns the bottom left LED on\nand off.\\r\n* Add more code to make both bottom LEDs turn on and off."
      CSD U6 colorLeds debug_markdown_instruction: "<img src=\"https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png\"\nstyle=\"width:250px; float:right\">\\r\n\\r\n# Debug: colorLeds\\r\n\\r\nCan you\ndebug the index values so that the rainbow shows up on the board like in the\npicture?"
      CSD U6 colorLeds debug_2018_markdown_instruction: "<img src=\"https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png\"\nstyle=\"width:250px; float:right\">\\r\n\\r\n# Debug: colorLeds\\r\n\\r\nCan you\ndebug the index values so that the rainbow shows up on the board like in the\npicture?"
      CSD U6 colorLeds intensity_markdown_instruction: "# Changing Brightness\\r\n\\r\nThe\n`intensity()` command lets you set an LED's brightness (or _intensity_) from\n0 - 100. This program lets you choose three levels of brightness for your\nrainbow lights, but the medium level doesn't work yet.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the program and see how the \"Bright\" and \"Dim\" buttons work.\\r\n*\nAdd code to make the \"Medium\" button make the rainbow a medium level of\nbrightness (between \"Bright\" and \"Dim\"). ([Show me where](#triggercallout=code_triggered))"
      CSD U6 colorLeds intensity_2018_markdown_instruction: "# Changing Brightness\\r\n\\r\nThe\n`intensity()` command lets you set an LED's brightness (or _intensity_) from\n0 - 100. This program lets you choose three levels of brightness for your\nrainbow lights, but the medium level doesn't work yet.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the program and see how the \"Bright\" and \"Dim\" buttons work.\\r\n*\nAdd code to make the \"Medium\" button make the rainbow a medium level of\nbrightness (between \"Bright\" and \"Dim\"). ([Show me where](#triggercallout=code_triggered))"
      CSD U6 colorLeds light pattern_markdown_instruction: "# Light Patterns\\r\n\\r\nThis\napp already has one light pattern program, which can be activated by clicking\na button. Notice that we put this pattern into a function to make the code\ncleaner and clearer.\\r\n\\r\n# Do This\\r\n\\r\nCreate a light pattern function\nof your own - maybe the colors of your favorite holiday, college, sports team,\nor try to create an image with the lights.\\r\n\\r\nAfter you've created your\nnew function, add a button and event handler so that you can switch between\nthe two light patterns."
      CSD U6 colorLeds light pattern_2018_markdown_instruction: "# Light Patterns\\r\n\\r\nThis\napp already has one light pattern program, which can be activated by clicking\na button. Notice that we put this pattern into a function to make the code\ncleaner and clearer.\\r\n\\r\n# Do This\\r\n\\r\nCreate a light pattern function\nof your own - maybe the colors of your favorite holiday, college, sports team,\nor try to create an image with the lights.\\r\n\\r\nAfter you've created your\nnew function, add a button and event handler so that you can switch between\nthe two light patterns."
      CSD U6 colorLeds predict embed_markdown_instruction: "# colorLEDs\\r\n\\r\nThis\nprogram uses the colorLEDs array, which lets you control the color LEDs in\nyour Circuit Playground.\\r\n\\r\nWhat do you think this code will do?  Write\nyour prediction in the box below, then run the code to see what happens."
      CSD U6 colorLeds predict embed_2018_markdown_instruction: "# colorLEDs\\r\n\\r\nThis\nprogram uses the colorLEDs array, which lets you control the color LEDs in\nyour Circuit Playground.\\r\n\\r\nWhat do you think this code will do?  Write\nyour prediction in the box below, then run the code to see what happens."
      CSD U6 create LED app 2_markdown_instruction: "# Make Your App - The Code\\r\n\\r\nNext,\nyou'll need to add the code that makes your app work.\\r\n\\r\n# Do This\\r\n\\r\n*\nDiscuss with your partner what code you will need in your app.  Do you need...\\r\n  *\nEvents?\\r\n  * Variables?\\r\n  * Setters?\\r\n  * Random Numbers?\\r\n* In Code\nMode, add in the code that will make your app work."
      CSD U6 create LED app 2_2018_markdown_instruction: "# Make Your App - The Code\\r\n\\r\nNext,\nyou'll need to add the code that makes your app work.\\r\n\\r\n# Do This\\r\n\\r\n*\nDiscuss with your partner what code you will need in your app.  Do you need...\\r\n  *\nEvents?\\r\n  * Variables?\\r\n  * Setters?\\r\n  * Random Numbers?\\r\n* In Code\nMode, add in the code that will make your app work."
      CSD U6 create LED app_markdown_instruction: "# Make Your App - The Screen\\r\n\\r\nNow,\nyou and your partner can make your own app using the LED.  Discuss with your\npartner what kind of app you want to make.\\r\n\\r\n# Do This\\r\n\\r\n* Discuss\nwith your partner what screen elements you will need in your app.  Do you\nwant...\\r\n  * Buttons?\\r\n  * Images?\\r\n  * Text?\\r\n* In Design Mode, add\nthe elements, making sure you give each a meaningful ID."
      CSD U6 create LED app_2018_markdown_instruction: "# Make Your App - The Screen\\r\n\\r\nNow,\nyou and your partner can make your own app using the LED.  Discuss with your\npartner what kind of app you want to make.\\r\n\\r\n# Do This\\r\n\\r\n* Discuss\nwith your partner what screen elements you will need in your app.  Do you\nwant...\\r\n  * Buttons?\\r\n  * Images?\\r\n  * Text?\\r\n* In Design Mode, add\nthe elements, making sure you give each a meaningful ID."
      CSD U6 design motorcycle_markdown_instruction: "# Add Your Own Elements\\r\n\\r\nNow\nit's time to add some elements of your own. The motorcycle should be able\nto move up and down right now, but how can you control its speed?\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a slider in design mode.\\r\n  * Make sure you set the\nmin and max values of the slider in design mode.\\r\n* Create an event that\nwill trigger when the slider value is changed.\\r\n* Add code to get the slider\nvalue and store it into the `speed` variable when the event is triggered."
      CSD U6 design motorcycle_2018_markdown_instruction: "# Add Your Own Elements\\r\n\\r\nNow\nit's time to add some elements of your own. The motorcycle should be able\nto move up and down right now, but how can you control its speed?\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a slider in design mode.\\r\n  * Make sure you set the\nmin and max values of the slider in design mode.\\r\n* Create an event that\nwill trigger when the slider value is changed.\\r\n* Add code to get the slider\nvalue and store it into the `speed` variable when the event is triggered."
      CSD U6 direction theremin_markdown_instruction: "# Accelerated Music\\r\n\\r\nWe're\ngoing to make music with the board again, this time using the accelerometer.\n\\r\n\\r\nSince `buzzer.frequency` takes a number as a parameter, we can use\nthe number that the accelerometer's pitch and roll properties return to change\nthe frequency.\\r\n\\r\n# Do This\\r\n* Make a variable to store either the accelerometer's\npitch or roll, name it accordingly.\\r\n* Use this variable with the buzzer,\nand alter it in some way. You can add or subtract from it, multiply it by\nanother number, etc.\\r\n* Run the program and alter it again to see what sort\nof sounds you get this time."
      CSD U6 directional LEDs roll_markdown_instruction: "# Roll\\r\n\\r\nThis program\nshould display \"Left\" or \"Right\" on the screen, depending on which way\nthe board is tilted.\\r\n\\r\n# Do this\\r\n* Use the \"roll\" property of the\naccelerometer to determine whether the board is tilted to the left or right.\\r\n*\nUse a conditional to change the text for the \"direction\" element to be either\n\"Left\" or \"Right\", depending on the board's orientation."
      CSD U6 directional LEDs roll_2018_markdown_instruction: "# Roll\\r\n\\r\nThis\nprogram should display \"Left\" or \"Right\" on the screen, depending on which\nway the board is tilted.\\r\n\\r\n# Do this\\r\n* Use the \"roll\" property of\nthe accelerometer to determine whether the board is tilted to the left or\nright.\\r\n* Use a conditional to change the text for the \"direction\" element\nto be either \"Left\" or \"Right\", depending on the board's orientation."
      CSD U6 directional leds pitch_markdown_instruction: "# Pitch\\r\n\\r\nThis program\nlights the top LEDs (0 and 9) when you tilt the board forward. If you tilt\nthe board back, the LEDs at the bottom (4 and 5) should light.\\r\n\\r\n# Do\nThis\\r\n* Use the board's pitch to make LEDs 4 and 5 light up when you tilt\nthe board back.\\r\n* Run your code and test it a few times."
      CSD U6 directional leds pitch_2018_markdown_instruction: "# Pitch\\r\n\\r\nThis\nprogram lights the top LEDs (0 and 9) when you tilt the board forward. If\nyou tilt the board back, the LEDs at the bottom (4 and 5) should light.\\r\n\\r\n#\nDo This\\r\n* Use the board's pitch to make LEDs 4 and 5 light up when you\ntilt the board back.\\r\n* Run your code and test it a few times."
      CSD U6 emoji race demo_markdown_instruction: "# Emoji Race!\\r\n\\r\nThis is\nan example of a race game that you'll build by the end of this lesson. To\nplay, pair up with another student. The student on the left will the click\nthe left button on the Circuit Playground as fast as they can, while the student\non the right clicks the right button. Whoever can get their emoji to the bottom\nof the screen first wins.\\r\n\\r\n# Do This\\r\n\\r\nTurn to a classmate and\nmake a list of the following information.\\r\n\\r\n* What components of the\nboard does this program use?\\r\n* What events is this program responding to?\\r\n*\nWhat functions might you create to make this program work?"
      CSD U6 emoji race demo_2018_markdown_instruction: "# Emoji Race!\\r\n\\r\nThis\nis an example of a race game that you'll build by the end of this lesson.\nTo play, pair up with another student. The student on the left will the click\nthe left button on the Circuit Playground as fast as they can, while the student\non the right clicks the right button. Whoever can get their emoji to the bottom\nof the screen first wins.\\r\n\\r\n# Do This\\r\n\\r\nTurn to a classmate and\nmake a list of the following information.\\r\n\\r\n* What components of the\nboard does this program use?\\r\n* What events is this program responding to?\\r\n*\nWhat functions might you create to make this program work?"
      CSD U6 emotion machine 1_markdown_instruction: "# Changing Images\\r\n\\r\nThe\nfirst thing you'll need your emotion machine to do is change to the appropriate\nimage when a button is clicked. If you look at the starting code, you'll\nsee that we already added `setProperty(\"face\", \"image\", \"icon://fa-smile-o\")`\nto change to a smiley face when you click happy.\\r\n\\r\n# Do This\\r\n\\r\n<div\nmarkdown=\"1\" style=\"float:right; margin: 20px;\">\\r\n\\r\n![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\\r\n\\r\n</div>\\r\n\\r\nCreate\nan event handler for \"sad_button\" and make it change to a sad emoji. To\ndo this you'll need to set the \"image\" property of the image with id \"face\".\\r\n\\r\n_Tip:\nwhen you click the last dropdown in the `setProperty` block click \"Choose...\"\nto go to your media library. From there you can select an icon from our icon\nlibrary or upload an image of your own._"
      CSD U6 emotion machine 1_2018_markdown_instruction: "# Changing Images\\r\n\\r\nThe\nfirst thing you'll need your emotion machine to do is change to the appropriate\nimage when a button is clicked. If you look at the starting code, you'll\nsee that we already added `setProperty(\"face\", \"image\", \"icon://fa-smile-o\")`\nto change to a smiley face when you click happy.\\r\n\\r\n# Do This\\r\n\\r\n<div\nmarkdown=\"1\" style=\"float:right; margin: 20px;\">\\r\n\\r\n![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\\r\n\\r\n</div>\\r\n\\r\nCreate\nan event handler for \"sad_button\" and make it change to a sad emoji. To\ndo this you'll need to set the \"image\" property of the image with id \"face\".\\r\n\\r\n_Tip:\nwhen you click the last dropdown in the `setProperty` block click \"Choose...\"\nto go to your media library. From there you can select an icon from our icon\nlibrary or upload an image of your own._"
      CSD U6 emotion machine 2_markdown_instruction: "# Changing Color\\r\n\\r\nIf\nyou look back at the example for this app, you should notice that not only\ndo the emojis change when you click a button, but their color changes as well.\\r\n\\r\n#\nDo This\\r\n\\r\nIn each of the event handlers, set the \"icon-color\" property\nof \"face\". Pick a warm color for happy and a cool color for sad."
      CSD U6 emotion machine 2_2018_markdown_instruction: "# Changing Color\\r\n\\r\nIf\nyou look back at the example for this app, you should notice that not only\ndo the emojis change when you click a button, but their color changes as well.\\r\n\\r\n#\nDo This\\r\n\\r\nIn each of the event handlers, set the \"icon-color\" property\nof \"face\". Pick a warm color for happy and a cool color for sad."
      CSD U6 emotion machine 3_markdown_instruction: "# Setting Text\\r\n\\r\nYour\nhappy and sad buttons should be almost completely functional now. The only\nthing they still need to do is change the text at the bottom of the screen.\\r\n\\r\n#\nDo This\\r\n\\r\nMake each of the event handlers change the text of \"feeling\"\nto the appropriate emotion (either \"happy\" or \"sad\")"
      CSD U6 emotion machine 3_2018_markdown_instruction: "# Setting Text\\r\n\\r\nYour\nhappy and sad buttons should be almost completely functional now. The only\nthing they still need to do is change the text at the bottom of the screen.\\r\n\\r\n#\nDo This\\r\n\\r\nMake each of the event handlers change the text of \"feeling\"\nto the appropriate emotion (either \"happy\" or \"sad\")"
      CSD U6 emotion machine 4_markdown_instruction: "# Add Another Emotion\\r\n\\r\nIn\nthe example app you saw earlier, you could set the emotion to happy, sad,\nor meh. Your app only has happy and sad, can you add a third emotion?\\r\n\\r\n#\nDo This\\r\n\\r\nUsing all of the same techniques you used for the happy and\nsad buttons, create a third emotion button. You could stick with meh, or you\ncould pick an emotion of your own.\\r\n\\r\nWhen you're all done, feel free\nto add more emotions or features before submitting your final version."
      CSD U6 emotion machine 4_2018_markdown_instruction: "# Add Another Emotion\\r\n\\r\nIn\nthe example app you saw earlier, you could set the emotion to happy, sad,\nor meh. Your app only has happy and sad, can you add a third emotion?\\r\n\\r\n#\nDo This\\r\n\\r\nUsing all of the same techniques you used for the happy and\nsad buttons, create a third emotion button. You could stick with meh, or you\ncould pick an emotion of your own.\\r\n\\r\nWhen you're all done, feel free\nto add more emotions or features before submitting your final version."
      CSD U6 emotion machine example_markdown_instruction: "# The Emotion Machine\\r\n\\r\nCheck\nout this Emotion Machine app that you'll be building next. Try clicking on\nthe buttons to see how it works.\\r\n\\r\n# Do This\\r\n\\r\nTry out the app,\nand then with a neighbor discuss:\\r\n\\r\n* What events handlers does this\napp use?\\r\n* Which elements are being changed with code?\\r\n* Which properties\nare being changed when you click a button?"
      CSD U6 emotion machine example_2018_markdown_instruction: "# The Emotion Machine\\r\n\\r\nCheck\nout this Emotion Machine app that you'll be building next. Try clicking on\nthe buttons to see how it works.\\r\n\\r\n# Do This\\r\n\\r\nTry out the app,\nand then with a neighbor discuss:\\r\n\\r\n* What events handlers does this\napp use?\\r\n* Which elements are being changed with code?\\r\n* Which properties\nare being changed when you click a button?"
      CSD U6 for loop button array_markdown_instruction: "# Looping Over Arrays\\r\n\\r\nOne\nof the most powerful ways to use a for loop is to loop over an array, running\ncode on each item in the array. We can do this by using the for loop counter\nvariable (usually `i`) as the index of your array.\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram should loop over the array `buttons` and do two things to each button\n- change the background color to red, and change the height to 50 px.\\r\n\\r\n*\nAdd a second `setProperty` block inside the loop\\r\n* Change the target to\n`buttons[i]`\\r\n* Set the \"height\" property to 50\\r\n\\r\n![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)"
      CSD U6 for loop button array_2018_markdown_instruction: "# Looping Over Arrays\\r\n\\r\nOne\nof the most powerful ways to use a for loop is to loop over an array, running\ncode on each item in the array. We can do this by using the for loop counter\nvariable (usually `i`) as the index of your array.\\r\n\\r\n# Do This\\r\n\\r\nThis\nprogram should loop over the array `buttons` and do two things to each button\n- change the background color to red, and change the height to 50 px.\\r\n\\r\n*\nAdd a second `setProperty` block inside the loop\\r\n* Change the target to\n`buttons[i]`\\r\n* Set the \"height\" property to 50\\r\n\\r\n![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)"
      CSD U6 for loop click exit_markdown_instruction: "# Knowing When to Stop\\r\n\\r\nIf\nyou clicked the button too many times in the last level, you got an error.\nWhenever you're writing code that repeats, you should think about when to\n_stop_ repeating.\\r\n\\r\n# Do This\\r\n\\r\nThis program is similar to the previous\none, but there is a conditional inside the event handler. You'll need to\ncomplete the conditional so that we don't try to toggle an LED that doesn't\nexist.\\r\n\\r\n_Would your code work without changes for a board with more\nor fewer LEDs? If not, could you modify it so it would?_"
      CSD U6 for loop click exit_2018_markdown_instruction: "# Knowing When to Stop\\r\n\\r\nIf\nyou clicked the button too many times in the last level, you got an error.\nWhenever you're writing code that repeats, you should think about when to\n_stop_ repeating.\\r\n\\r\n# Do This\\r\n\\r\nThis program is similar to the previous\none, but there is a conditional inside the event handler. You'll need to\ncomplete the conditional so that we don't try to toggle an LED that doesn't\nexist.\\r\n\\r\n_Would your code work without changes for a board with more\nor fewer LEDs? If not, could you modify it so it would?_"
      CSD U6 for loop click predict question_markdown_instruction: "# Make a Prediction\\r\n\\r\nRead\nthrough the code for this program and predict what will happen each time the\nbutton is clicked?"
      CSD U6 for loop click predict question_2018_markdown_instruction: "# Make a\nPrediction\\r\n\\r\nRead through the code for this program and predict what\nwill happen each time the button is clicked?"
      CSD U6 for loop images_markdown_instruction: "# Constructing a for loop from\nscratch\\r\n\\r\nNow that you've had some practice modifying for loops to process\narrays, let's see if you can do it yourself.\\r\n\\r\n# Do This\\r\n\\r\nWe've\nprovided the design elements and an array to start with, but the rest is on\nyou.\\r\n\\r\n* Add an event handler to respond to the \"thumbsup_button\" being\nclicked\\r\n* Place a _for loop_ inside the event handler\\r\n* Modify the exit\ncondition of the _for loop_ so that it will run until it gets to the end of\nthe array `images`\\r\n* Inside your _for loop_ change the current image to\n\"icon://fa-thumbs-o-up\"\\r\n\\r\n_Challenge: Can you add a second button that\nturns all of the images back to thumbs down?_"
      CSD U6 for loop images_2018_markdown_instruction: "# Constructing a for loop\nfrom scratch\\r\n\\r\nNow that you've had some practice modifying for loops\nto process arrays, let's see if you can do it yourself.\\r\n\\r\n# Do This\\r\n\\r\nWe've\nprovided the design elements and an array to start with, but the rest is on\nyou.\\r\n\\r\n* Add an event handler to respond to the \"thumbsup_button\" being\nclicked\\r\n* Place a _for loop_ inside the event handler\\r\n* Modify the exit\ncondition of the _for loop_ so that it will run until it gets to the end of\nthe array `images`\\r\n* Inside your _for loop_ change the current image to\n\"icon://fa-thumbs-o-up\"\\r\n\\r\n_Challenge: Can you add a second button that\nturns all of the images back to thumbs down?_"
      CSD U6 for loop led bonus 1_markdown_instruction: "# Challenge: Add More Buttons\\r\n\\r\nExtend\nthe program by adding more buttons that change the board to different colors.\\r\n\\r\n#\nDo This\\r\n\\r\nAdd your new buttons in Design Mode and create event handlers\nto respond to your buttons and change the LED colors."
      CSD U6 for loop led bonus 1_2018_markdown_instruction: "# Challenge: Add More\nButtons\\r\n\\r\nExtend the program by adding more buttons that change the board\nto different colors.\\r\n\\r\n# Do This\\r\n\\r\nAdd your new buttons in Design\nMode and create event handlers to respond to your buttons and change the LED\ncolors."
      CSD U6 for loop led bonus 2_markdown_instruction: "# Challenge: Color Patterns\\r\n\\r\nExtend\nthe program by adding more buttons that create different patterns of light.\\r\n\\r\n#\nDo This\\r\n\\r\nAdd your new buttons in Design Mode and create event handlers\nto respond to your buttons and change the LED colors.\\r\n\\r\n_Hint: As you\ndesign your patterns, consider whether a function with parameters could help\nsimplify your program._"
      CSD U6 for loop led bonus 2_2018_markdown_instruction: "# Challenge: Color\nPatterns\\r\n\\r\nExtend the program by adding more buttons that create different\npatterns of light.\\r\n\\r\n# Do This\\r\n\\r\nAdd your new buttons in Design\nMode and create event handlers to respond to your buttons and change the LED\ncolors.\\r\n\\r\n_Hint: As you design your patterns, consider whether a function\nwith parameters could help simplify your program._"
      CSD U6 for loop led bonus 3_markdown_instruction: "# Challenge: Music\\r\n\\r\nUse\nwhat you learned in the Making Music lesson to make the board play music when\nthe lights change.\\r\n\\r\n# Do This\\r\n\\r\nCreate some arrays of notes for\ndifferent songs and add code to your event handlers to play your music."
      CSD U6 for loop led bonus 3_2018_markdown_instruction: "# Challenge: Music\\r\n\\r\nUse\nwhat you learned in the Making Music lesson to make the board play music when\nthe lights change.\\r\n\\r\n# Do This\\r\n\\r\nCreate some arrays of notes for\ndifferent songs and add code to your event handlers to play your music."
      CSD U6 for loop led function call_markdown_instruction: "# Calling Your Function\\r\n\\r\nNow\nthat you've created a function that can behave differently based on the parameter\nit is passed, we can use it in multiple different event handlers to change\nthe lights to different colors.\\r\n\\r\n# Do This\\r\n\\r\nWe'll start simple\nby just creating an event handler for \"button_red\"\\r\n\\r\n* Create a new\nevent handler to respond to \"button_red\"\\r\n* Inside your event handler,\nadd a \"call function with parameter\" block\\r\n![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\\r\n*\nChange the name from `myFunction` to `setLedsColor`\\r\n* Change the parameter\nfrom `n` to \"red\" (note the quotation marks!)\\r\n* Test your program, the\n\"Red\" button should turn all of your LEDs red"
      CSD U6 for loop led function call_2018_markdown_instruction: "# Calling Your\nFunction\\r\n\\r\nNow that you've created a function that can behave differently\nbased on the parameter it is passed, we can use it in multiple different event\nhandlers to change the lights to different colors.\\r\n\\r\n# Do This\\r\n\\r\nWe'll\nstart simple by just creating an event handler for \"button_red\"\\r\n\\r\n*\nCreate a new event handler to respond to \"button_red\"\\r\n* Inside your event\nhandler, add a \"call function with parameter\" block\\r\n![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\\r\n*\nChange the name from `myFunction` to `setLedsColor`\\r\n* Change the parameter\nfrom `n` to \"red\" (note the quotation marks!)\\r\n* Test your program, the\n\"Red\" button should turn all of your LEDs red"
      CSD U6 for loop led function finish_markdown_instruction: "# Finish the App\\r\n\\r\nIf\nyour red button worked, the only thing left is to call your new function when\nall of the remaining buttons is pressed.\\r\n\\r\n# Do This\\r\n\\r\nFor each\nof the remaining buttons (green, blue, and white):\\r\n\\r\n* Create a new event\nhandler\\r\n* Call your `setLedsColor` function with the appropriate color\n(\"green\", \"blue\", or \"white\")\\r\n* Test your program to make sure all\nof the buttons work\\r\n\\r\nWhen you've got all of your buttons working properly,\nclick \"Submit\" to turn your program in."
      CSD U6 for loop led function finish_2018_markdown_instruction: "# Finish the\nApp\\r\n\\r\nIf your red button worked, the only thing left is to call your\nnew function when all of the remaining buttons is pressed.\\r\n\\r\n# Do This\\r\n\\r\nFor\neach of the remaining buttons (green, blue, and white):\\r\n\\r\n* Create a\nnew event handler\\r\n* Call your `setLedsColor` function with the appropriate\ncolor (\"green\", \"blue\", or \"white\")\\r\n* Test your program to make sure\nall of the buttons work\\r\n\\r\nWhen you've got all of your buttons working\nproperly, click \"Submit\" to turn your program in."
      CSD U6 for loop led function_markdown_instruction: "# Switching Colors with\na Function\\r\n\\r\nWe could write a for loop for each different color that\nwe want to set LEDs to, but that would be a lot of duplicate code that's\n_almost_ the same. This is the perfect place to use a _function with a parameter_!\nYou've seen and used functions with parameters before, but now you're going\nto make one from scratch.\\r\n\\r\n# Do This\\r\n\\r\nCreate a function called\n`setLedsColor` that takes a parameter `color` and uses it to change the color\nof all of the LEDs\\r\n\\r\n* At the bottom of your program, drag out a function\nwith parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r\n*\nChange the name from `myFunction` to `setLedsColor`\\r\n* Change the parameter\nname from `n` to `color`\\r\n* Inside your function, add a _for loop_ that\nrepeats until it reaches the end of `colorLeds`\\r\n* Inside your _for loop_,\nset the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\\r\n\\r\nWe'll\nadd event handlers that use this function in the next level, but for now you\ncan test your function by your program and typing this into the debug console:\n`setLedsColor(\"blue\")`"
      CSD U6 for loop led function_2018_markdown_instruction: "# Switching Colors\nwith a Function\\r\n\\r\nWe could write a for loop for each different color\nthat we want to set LEDs to, but that would be a lot of duplicate code that's\n_almost_ the same. This is the perfect place to use a _function with a parameter_!\nYou've seen and used functions with parameters before, but now you're going\nto make one from scratch.\\r\n\\r\n# Do This\\r\n\\r\nCreate a function called\n`setLedsColor` that takes a parameter `color` and uses it to change the color\nof all of the LEDs\\r\n\\r\n* At the bottom of your program, drag out a function\nwith parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r\n*\nChange the name from `myFunction` to `setLedsColor`\\r\n* Change the parameter\nname from `n` to `color`\\r\n* Inside your function, add a _for loop_ that\nrepeats until it reaches the end of `colorLeds`\\r\n* Inside your _for loop_,\nset the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\\r\n\\r\nWe'll\nadd event handlers that use this function in the next level, but for now you\ncan test your function by your program and typing this into the debug console:\n`setLedsColor(\"blue\")`"
      CSD U6 for loop led off_markdown_instruction: "# Turning all the Color LEDs\nOff\\r\n\\r\nNow that you've got one button to turn the color LEDs on, you\ncan make another turn them off.\\r\n\\r\n# Do This\\r\n\\r\nAdd an event handler\nto \"button_off\" with a for loop that turns each color LED off."
      CSD U6 for loop led off_2018_markdown_instruction: "# Turning all the Color\nLEDs Off\\r\n\\r\nNow that you've got one button to turn the color LEDs on,\nyou can make another turn them off.\\r\n\\r\n# Do This\\r\n\\r\nAdd an event handler\nto \"button_off\" with a for loop that turns each color LED off."
      CSD U6 for loop led on_markdown_instruction: "# Turning all the Color LEDs\nOn\\r\n\\r\nNow that you know how to use a _for loop_ to process all of the\nelements in an array, you can turn on all of the Color LEDs much more easily\nthan before.\\r\n\\r\n# Do This\\r\n\\r\nWe're going to start an app that will\ncontrol all of the Color LEDs on your board. The first step is to wire up\nthe button that turns all of the LEDs on.\\r\n\\r\n* Add an event handler for\n\"button_on\"\\r\n* Place a _for loop_ in your event handler that repeats until\nit reaches in the end of the array `colorLeds`\\r\n* Inside the for loop, call\n`colorLeds[i].on()` to turn on the current color LED"
      CSD U6 for loop led on_2018_markdown_instruction: "# Turning all the Color\nLEDs On\\r\n\\r\nNow that you know how to use a _for loop_ to process all of\nthe elements in an array, you can turn on all of the Color LEDs much more\neasily than before.\\r\n\\r\n# Do This\\r\n\\r\nWe're going to start an app that\nwill control all of the Color LEDs on your board. The first step is to wire\nup the button that turns all of the LEDs on.\\r\n\\r\n* Add an event handler\nfor \"button_on\"\\r\n* Place a _for loop_ in your event handler that repeats\nuntil it reaches in the end of the array `colorLeds`\\r\n* Inside the for loop,\ncall `colorLeds[i].on()` to turn on the current color LED"
      CSD U6 for loop led template_markdown_instruction: "# Arrays and For Loops\nRGB LED Project Template"
      CSD U6 for loop led template_2018_markdown_instruction: "# Arrays and For Loops\nRGB LED Project Template"
      CSD U6 for loop list.length_markdown_instruction: "# Array Length\\r\n\\r\nIn\nthe last program we told the loop to run three times with the code `for (var\ni = 0; i < 3; i++)`. This works, but we could write smarter programs by using\nthe length of the array to decide how many times to loop.\\r\n\\r\n# Do This\\r\n\\r\nChange\nthe exit condition of this for loop so that it runs while `i < buttons.length`."
      CSD U6 for loop list.length_2018_markdown_instruction: "# Array Length\\r\n\\r\nIn\nthe last program we told the loop to run three times with the code `for (var\ni = 0; i < 3; i++)`. This works, but we could write smarter programs by using\nthe length of the array to decide how many times to loop.\\r\n\\r\n# Do This\\r\n\\r\nChange\nthe exit condition of this for loop so that it runs while `i < buttons.length`."
      CSD U6 frequency_markdown_instruction: "# Frequency\\r\n\\r\nThis buzzer controller\nhas been expanded to control frequency as well, but the code isn't finished\nyet.\\r\n\\r\n# Do This\\r\n* Using the `duration` variable as a model, create\na `frequency` variable that gets the value from the *frequency* slider.\\r\n*\nModify the line of code that makes the buzzer sound so that it uses the `frequency`\nvariable rather than the default frequency of `500`.\\r\n* Run your code, then\nchange the frequency and the duration to hear the difference in the buzzer.  (Don't\nforget to hit the button after you make a change!)"
      CSD U6 frequency_2018_markdown_instruction: "# Frequency\\r\n\\r\nThis buzzer\ncontroller has been expanded to control frequency as well, but the code isn't\nfinished yet.\\r\n\\r\n# Do This\\r\n* Using the `duration` variable as a model,\ncreate a `frequency` variable that gets the value from the *frequency* slider.\\r\n*\nModify the line of code that makes the buzzer sound so that it uses the `frequency`\nvariable rather than the default frequency of `500`.\\r\n* Run your code, then\nchange the frequency and the duration to hear the difference in the buzzer.  (Don't\nforget to hit the button after you make a change!)"
      CSD U6 game project board events_markdown_instruction: "# Board Events\\r\n\\r\nGo\nback to the Events section of your activity guide and find any events that\nrespond to your board (ones that would use `onBoardEvent()`). Create event\nhandlers for each of those now. If these events rely on functions you haven't\nwritten yet, just leave yourself a comment in the code."
      CSD U6 game project board events_2018_markdown_instruction: "# Board Events\\r\n\\r\nGo\nback to the Events section of your activity guide and find any events that\nrespond to your board (ones that would use `onBoardEvent()`). Create event\nhandlers for each of those now. If these events rely on functions you haven't\nwritten yet, just leave yourself a comment in the code."
      CSD U6 game project finish_markdown_instruction: "# Finishing Touches and Testing\\r\n\\r\nAt\nthis point you should have most of your program in place. Now you need to\nadd whatever finishing touches are needed and do a little testing. When your\napp is ready, have your classmates try it out. See if you can find any bugs,\nconfusing design choices, or missing features you'd like to work on.\\r\n\\r\nOnce\nyou're all done with this version of your program, click Submit to turn it\nin."
      CSD U6 game project finish_2018_markdown_instruction: "# Finishing Touches\nand Testing\\r\n\\r\nAt this point you should have most of your program in place.\nNow you need to add whatever finishing touches are needed and do a little\ntesting. When your app is ready, have your classmates try it out. See if you\ncan find any bugs, confusing design choices, or missing features you'd like\nto work on.\\r\n\\r\nOnce you're all done with this version of your program,\nclick Submit to turn it in."
      CSD U6 game project functions call_markdown_instruction: "# Calling your Functions\\r\n\\r\nWith\nyour functions defined, you can can call them wherever you need. Go through\nyour event handlers, or anywhere else in your program that your function should\nbe used, and add calls to the function you created."
      CSD U6 game project functions call_2018_markdown_instruction: "# Calling your\nFunctions\\r\n\\r\nWith your functions defined, you can can call them wherever\nyou need. Go through your event handlers, or anywhere else in your program\nthat your function should be used, and add calls to the function you created."
      CSD U6 game project functions define_markdown_instruction: "# Define Your Functions\\r\n\\r\nDefine\nall of your functions at the bottom of the program, under the comment `//\nCreate your functions here`.\\r\n\\r\nRight now we're only worrying about writing\nthe function _definitions_, the part which looks like:\\r\n\\r\n```\\r\nfunction\nmyFunction() {\\r\n\\t// Things my function does\\r\n}\\r\n```"
      CSD U6 game project functions define_2018_markdown_instruction: "# Define Your\nFunctions\\r\n\\r\nDefine all of your functions at the bottom of the program,\nunder the comment `// Create your functions here`.\\r\n\\r\nRight now we're\nonly worrying about writing the function _definitions_, the part which looks\nlike:\\r\n\\r\n```\\r\nfunction myFunction() {\\r\n\\t// Things my function does\\r\n}\\r\n```"
      CSD U6 game project screen links_markdown_instruction: "# UI Element Events\\r\n\\r\nNow\nthat all of your screens are designed, you can add any event handlers that\nwill respond to _screen interaction_. These should be listed in the \"Events\"\nsection of your activity guide. If you run into new events that you hadn't\nthought of in the planning stage, make sure you add them to your project guide.\\r\n\\r\nDon't\nworry about making these completely functional yet. If your events rely on\nboard elements or your own functions, we'll take care of that in later levels."
      CSD U6 game project screen links_2018_markdown_instruction: "# UI Element Events\\r\n\\r\nNow\nthat all of your screens are designed, you can add any event handlers that\nwill respond to _screen interaction_. These should be listed in the \"Events\"\nsection of your activity guide. If you run into new events that you hadn't\nthought of in the planning stage, make sure you add them to your project guide.\\r\n\\r\nDon't\nworry about making these completely functional yet. If your events rely on\nboard elements or your own functions, we'll take care of that in later levels."
      CSD U6 game project screens_markdown_instruction: "# Create Your Screens\\r\n\\r\nThe\nfirst thing you'll need to do is create all of the screens that you've sketched\nin your planning guide.\\r\n\\r\n# Do This\\r\n\\r\nUse Design Mode to create\nall of the screens that your program will need. Don't forget to **pick sensible\nIDs** for all of your design elements."
      CSD U6 game project screens_2018_markdown_instruction: "# Create Your Screens\\r\n\\r\nThe\nfirst thing you'll need to do is create all of the screens that you've sketched\nin your planning guide.\\r\n\\r\n# Do This\\r\n\\r\nUse Design Mode to create\nall of the screens that your program will need. Don't forget to **pick sensible\nIDs** for all of your design elements."
      CSD U6 get toggle_markdown_instruction: "# change\\r\n\\r\nThis program has events\nthat detect three different changes: the toggle switch, the interval slider,\nand the duration slider.  Because there are so many different things that\ncause the LED and buzzer to reset, it uses functions to organize the code.\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the `updateLED` function to see what it does.\\r\n* Add\ncode to `updateBuzzer` to make the buzzer only turn on when the toggle switch\nis open."
      CSD U6 get toggle_2018_markdown_instruction: "# change\\r\n\\r\nThis program\nhas events that detect three different changes: the toggle switch, the interval\nslider, and the duration slider.  Because there are so many different things\nthat cause the LED and buzzer to reset, it uses functions to organize the\ncode.\\r\n\\r\n# Do This\\r\n\\r\n* Read the `updateLED` function to see what\nit does.\\r\n* Add code to `updateBuzzer` to make the buzzer only turn on when\nthe toggle switch is open."
      CSD U6 getProperty Demo_markdown_instruction: "# Updating Properties\\r\n\\r\nHere's\nan example of an app that uses both `getProperty` and `setProperty` to update\nelements on the screen. Read through the code, and then test it out by filling\nout the input fields and clicking \"Save\"\\r\n\\r\n_Note: you don't need to\nchange any code here, but read through the provided code to see how it works._"
      CSD U6 getProperty Demo_2018_markdown_instruction: "# Updating Properties\\r\n\\r\nHere's\nan example of an app that uses both `getProperty` and `setProperty` to update\nelements on the screen. Read through the code, and then test it out by filling\nout the input fields and clicking \"Save\"\\r\n\\r\n_Note: you don't need to\nchange any code here, but read through the provided code to see how it works._"
      CSD U6 getProperty Text Input_markdown_instruction: "# Getting Text\\r\n\\r\nThe\n`getProperty()` block makes it easy to take text input from a user. In this\napp, the user can type in their name, click \"Submit,\" and see their name\nbelow.\\r\n\\r\n# Do This\\r\n\\r\n* Drag out a `setProperty` block\\r\n* For the\nfirst parameter, select \"name\" (the element's id)\\r\n* For the second parameter,\nselect \"text\" (the property you want to set)\\r\n* For the third parameter,\nwrite your name in quotes (the value to set)\\r\n\\r\n_Note: We've removed\nthe Design Mode tab for now so you can practice working with `setProperty`,\nbut it'll come back later once you're building apps of your own._"
      CSD U6 getProperty board predict_markdown_instruction: "Predict Level (See\ncontained level for markdown)"
      CSD U6 getProperty board predict_2018_markdown_instruction: "Predict Level\n(See contained level for markdown)"
      CSD U6 getProperty buzzer_markdown_instruction: "# Using the Circuit Playground\\r\n\\r\nHere's\nthe same code you saw in the last level, but this time there's another dropdown\nmenu to control the buzzer.  You'll have to add the code to make it work.\\r\n\\r\n#\nDo This\\r\n* Using the LED code as a model, add new code inside the buttonL\nevent that will play a long or short buzz according to the chosen value property\nof the *buzzer_input* dropdown menu.\\r\n* Add new code that will turn the\nbuzzer off when the right button is pressed.\\r\n  * (Hint: the event is already\nin the code.)"
      CSD U6 getProperty buzzer_2018_markdown_instruction: "# Using the Circuit Playground\\r\n\\r\nHere's\nthe same code you saw in the last level, but this time there's another dropdown\nmenu to control the buzzer.  You'll have to add the code to make it work.\\r\n\\r\n#\nDo This\\r\n* Using the LED code as a model, add new code inside the buttonL\nevent that will play a long or short buzz according to the chosen value property\nof the *buzzer_input* dropdown menu.\\r\n* Add new code that will turn the\nbuzzer off when the right button is pressed.\\r\n  * (Hint: the event is already\nin the code.)"
      CSD U6 getProperty debug_markdown_instruction: "# Debug\\r\n\\r\nThis program\nshould change the background color, text color, and text of the button \"click_me\"\nwhen it is clicked, but nothing seems to be working. Fix the code so that\nthe program works as expected."
      CSD U6 getProperty dropdown_markdown_instruction: "# Dropdowns\\r\n\\r\nText\nInputs are nice when you want users to be able to enter _anything_ they want,\nbut often you want to restrict them to just a few choices. For example, if\nyou want your user to pick a color, you probably want to make sure they can\nonly choose colors that will actually work.\\r\n\\r\nThe provided dropdown with\nthe ID \"color_input\" allows a user to choose from a handful of background\ncolors. When the \"Set Color\" button is clicked, the screen will turn that\ncolor.\\r\n\\r\n# Do This\\r\n\\r\n* Inside the event block, create a variable\ncalled `color` and assign it a value using the `getProperty` block.\\r\n  *\nHint: You'll need to use the \"value\" property to get the user's choice.\\r\n*\nUse the `setProperty` block to set the \"background-color\" property of \"screen1\"\nto your variable `color`.\\r\n  * Hint: Make sure you type `color` without\nquotation marks.\\r\n* Test your program by picking a color and clicking \"Set\nColor\"."
      CSD U6 getProperty dropdown_2018_markdown_instruction: "# Dropdowns\\r\n\\r\nText\nInputs are nice when you want users to be able to enter _anything_ they want,\nbut often you want to restrict them to just a few choices. For example, if\nyou want your user to pick a color, you probably want to make sure they can\nonly choose colors that will actually work.\\r\n\\r\nThe provided dropdown with\nthe ID \"color_input\" allows a user to choose from a handful of background\ncolors. When the \"Set Color\" button is clicked, the screen will turn that\ncolor.\\r\n\\r\n# Do This\\r\n\\r\n* Inside the event block, create a variable\ncalled `color` and assign it a value using the `getProperty` block.\\r\n  *\nHint: You'll need to use the \"value\" property to get the user's choice.\\r\n*\nUse the `setProperty` block to set the \"background-color\" property of \"screen1\"\nto your variable `color`.\\r\n  * Hint: Make sure you type `color` without\nquotation marks.\\r\n* Test your program by picking a color and clicking \"Set\nColor\"."
      CSD U6 getProperty input_markdown_instruction: "# getProperty and Variables\\r\n\\r\nThis\nprogram uses the `name` variable to display the name typed into \"name_input\"\nwhen the Submit button is clicked. It should do the same for *friend_input*\nand *friend_output*, but it's missing a block.\\r\n\\r\n# Do This\\r\n* Read\nthe code and comments, then run the program to see how it works. (Make sure\nyou type in your name and your friend's name before hitting \"Submit\".)\\r\n*\nUse a `getProperty` block to store the text property of *friend_input* into\nyour the variable \"friend_name\". ([Show me where.](#triggercallout=code_triggered))"
      CSD U6 getProperty input_2018_markdown_instruction: "# getProperty and Variables\\r\n\\r\nThis\nprogram uses the `name` variable to display the name typed into \"name_input\"\nwhen the Submit button is clicked. It should do the same for *friend_input*\nand *friend_output*, but it's missing a block.\\r\n\\r\n# Do This\\r\n* Read\nthe code and comments, then run the program to see how it works. (Make sure\nyou type in your name and your friend's name before hitting \"Submit\".)\\r\n*\nUse a `getProperty` block to store the text property of *friend_input* into\nyour the variable \"friend_name\". ([Show me where.](#triggercallout=code_triggered))"
      CSD U6 getProperty predict_markdown_instruction: "# Debug\\r\n\\r\nThis program\nshould change the background color, text color, and text of the button \"click_me\"\nwhen it is clicked, but nothing seems to be working. Fix the code so that\nthe program works as expected."
      CSD U6 getProperty var_markdown_instruction: "# getProperty and Variables\\r\n\\r\nYou\nmight have noticed in the last level that we used a _variable_ to store the\nvalues collected with `getProperty()`. Using variables in this way allows\nus to both get the properties of design elements and to use those values later\non.\\r\n\\r\n# Do This\\r\n\\r\nThis program should get the text typed into \"name_input\"\nwhen the Submit button is clicked, and then use that to set the text property\nof \"name_output\". It does this by storing the text in a variable called\n`name`, but it's not finished.\\r\n\\r\nUsing a `getProperty` block, assign\nthe `name` variable to the text property of \"name_input\". Test your program\nby typing in your name and clicking \"Submit.\""
      CSD U6 getProperty xy challenge_markdown_instruction: "# Challenge: Make it\nYour Own\\r\n\\r\nUse this program to experiment some more with getting and\nsetting properties. Some ideas you might try include:\\r\n\\r\n* Add a button\nthat returns the motorcycle to the center of the screen\\r\n* Add buttons that\nmove the motorcycle in two directions at once (eg up and right)\\r\n* Use a\ndropdown with color names to change the motorcycle's color\\r\n* Use a text\ninput to control how much the motorcycle moves when you click the button"
      CSD U6 getProperty xy design_markdown_instruction: "# Design Mode is Back!\\r\n\\r\nNow\nthat you have Design Mode back, you can add some elements of your own. The\nmotorcycle should be able to move up and down right now, but what about left\nand right?\\r\n\\r\n# Do This\\r\n\\r\nAdd two more buttons in design move for\nleft and right, then program those buttons to move the motorcycle when clicked."
      CSD U6 getProperty xy_markdown_instruction: "# Movement with Properties\\r\n\\r\nEarlier\nwe used `setProperty` to change the x and y position of elements on the screen,\nbut we could only move them to either a single specific location, or a random\nlocation. By using `getProperty` to find out an element's current position,\nwe can use the **counter pattern** from Unit 3 to update that position.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program includes two buttons to move the motorcycle up\nand down. Using the working \"up\" button as an example, can you make the\n\"down\" button work?"
      CSD U6 getters debug_markdown_instruction: "# LED and Buzzer Controller\\r\n\\r\nThis\nprogram operates the LED and the buzzer, but it has some problems.\\r\n\\r\n#\nDo This\\r\n* Read the program to understand how it is supposed to work.\\r\n*\nFind and correct the bugs so that the program works properly."
      CSD U6 getters debug_2018_markdown_instruction: "# LED and Buzzer Controller\\r\n\\r\nThis\nprogram operates the LED and the buzzer, but it has some problems.\\r\n\\r\n#\nDo This\\r\n* Read the program to understand how it is supposed to work.\\r\n*\nFind and correct the bugs so that the program works properly."
      CSD U6 goalie_markdown_instruction: "# Updating Values with Data\\r\n\\r\nIn\nthis program the goalie is trying to block the soccer ball, but right now\nthe ball isn't moving.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern\nto update the ball's `x` value so that it moves across the screen."
      CSD U6 goalie_2018_markdown_instruction: "# Updating Values with Data\\r\n\\r\nIn\nthis program the goalie is trying to block the soccer ball, but right now\nthe ball isn't moving.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Use the counter pattern\nto update the ball's `x` value so that it moves across the screen."
      CSD U6 interval predict_markdown_instruction: "# Interval\\r\n\\r\nNow we're\nusing the slider to affect the behavior of the LED.   Just as we could change\nthe values for the frequency and duration of the buzzer, we can change the\nvalue for the blink or pulse interval of the LED.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the code and predict what the program will do, then hit \"Run\" to test\nyour prediction."
      CSD U6 interval predict_2018_markdown_instruction: "# Interval\\r\n\\r\nNow we're\nusing the slider to affect the behavior of the LED.   Just as we could change\nthe values for the frequency and duration of the buzzer, we can change the\nvalue for the blink or pulse interval of the LED.\\r\n\\r\n# Do This\\r\n\\r\n*\nRead the code and predict what the program will do, then hit \"Run\" to test\nyour prediction."
      CSD U6 interval_markdown_instruction: "Predict Level"
      CSD U6 interval_2018_markdown_instruction: "Predict Level"
      CSD U6 investigate orientation_markdown_instruction: "# Pitch and Roll\\r\n\\r\nThis\nprogram displays the board's pitch and roll, and it will also change colors\ndepending on their values.  \\r\n\\r\n# Do This\\r\n\\r\nMake the program change\nthe following colors by tilting the board to the correct pitch and roll.\\r\n\\r\n<div\nstyle=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div>\nPitch: 0 | Roll: -20\\r\n\\r\n<div style=\"display:inline-block; background-color:\nburlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0 \\r\n\\r\n<div\nstyle=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>\nPitch: -15 | Roll: 10 \\r\n\\r\n<div style=\"display:inline-block; background-color:\nyellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\\r\n\\r\n<div style=\"display:inline-block; background-color: thistle; height:\n30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30 \\r\n\\r\nWhich way should\nyou tilt to get a positive pitch?\\r\n\\r\nWhich way should you tilt to get\na negative roll?"
      CSD U6 investigate orientation_2018_markdown_instruction: "# Pitch and Roll\\r\n\\r\nThis\nprogram displays the board's pitch and roll, and it will also change colors\ndepending on their values.  \\r\n\\r\n# Do This\\r\n\\r\nMake the program change\nthe following colors by tilting the board to the correct pitch and roll.\\r\n\\r\n<div\nstyle=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div>\nPitch: 0 | Roll: -20\\r\n\\r\n<div style=\"display:inline-block; background-color:\nburlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0 \\r\n\\r\n<div\nstyle=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>\nPitch: -15 | Roll: 10 \\r\n\\r\n<div style=\"display:inline-block; background-color:\nyellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\\r\n\\r\n<div style=\"display:inline-block; background-color: thistle; height:\n30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30 \\r\n\\r\nWhich way should\nyou tilt to get a positive pitch?\\r\n\\r\nWhich way should you tilt to get\na negative roll?"
      CSD U6 iter create notes_markdown_instruction: "# Music Player\\r\n\\r\nThis\nprogram lets you play music by waving a wand over the different notes, but\nit's missing a function definition.\\r\n\\r\n# Do This\\r\n* Create a `checkNotes()`\nfunction that will call `checkNote(note)` on everything in the \"notes\" array."
      CSD U6 iter create notes_2018_markdown_instruction: "# Music Player\\r\n\\r\nThis\nprogram lets you play music by waving a wand over the different notes, but\nit's missing a function definition.\\r\n\\r\n# Do This\\r\n* Create a `checkNotes()`\nfunction that will call `checkNote(note)` on everything in the \"notes\" array."
      CSD U6 iter modify bugs_markdown_instruction: "# Bug Shaker\\r\n\\r\nThis program\nshakes bugs around when the board is shaken, but it's only working for one\nbug.\\r\n\\r\n# Do This\\r\n* Change the `moveBugs()` function so that it calls\n`moveBug(color)` on every bug color.\\r\n  * (Hint: Look at the `detectHits()`\nfunction for clues how to do this.)"
      CSD U6 iter modify bugs_2018_markdown_instruction: "# Bug Shaker\\r\n\\r\nThis\nprogram shakes bugs around when the board is shaken, but it's only working\nfor one bug.\\r\n\\r\n# Do This\\r\n* Change the `moveBugs()` function so that\nit calls `moveBug(color)` on every bug color.\\r\n  * (Hint: Look at the `detectHits()`\nfunction for clues how to do this.)"
      CSD U6 iter predict bubbles contained_markdown_instruction: "# Fish Bubbles\\r\n\\r\nThis\nprogram uses the sound sensor in the same way as the clouds program.  How\nmany bubbles will move when you blow on the board?"
      CSD U6 iter predict bubbles contained_2018_markdown_instruction: "# Fish Bubbles\\r\n\\r\nThis\nprogram uses the sound sensor in the same way as the clouds program.  How\nmany bubbles will move when you blow on the board?"
      CSD U6 iter predict bubbles_markdown_instruction: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2018_markdown_instruction: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 light pattern challenge_markdown_instruction: "# Challenge: More Patterns\\r\n\\r\nAdd\nsome more patterns to your app. Find a partner and add their pattern as an\noption. Make sure to put each pattern into its own function."
      CSD U6 light pattern challenge_2018_markdown_instruction: "# Challenge: More\nPatterns\\r\n\\r\nAdd some more patterns to your app. Find a partner and add\ntheir pattern as an option. Make sure to put each pattern into its own function."
      CSD U6 light pattern off_markdown_instruction: "# Turning It Off\\r\n\\r\nWhen\nyou start this app your lights are off, but as soon as choose a pattern, there's\nno way to turn the lights back off!\\r\n\\r\n# Do This\\r\n\\r\nCreate a function\nthat turns all of the LEDs off, and then add a \"Off\" button to your app\nand make it turn off all of the color LEDs."
      CSD U6 light pattern off_2018_markdown_instruction: "# Turning It Off\\r\n\\r\nWhen\nyou start this app your lights are off, but as soon as choose a pattern, there's\nno way to turn the lights back off!\\r\n\\r\n# Do This\\r\n\\r\nCreate a function\nthat turns all of the LEDs off, and then add a \"Off\" button to your app\nand make it turn off all of the color LEDs."
      CSD U6 light show predict_markdown_instruction: "# Put on a Light Show\\r\n\\r\nThis\napp lets you put on a light show with the LED.\\r\n\\r\nLook at the code with\nyour partner and answer the following questions:\\r\n\\r\n* What does this line\nof code do: `setProperty(\"screen\", \"background-color\", rgb(randomNumber(0,255),\nrandomNumber(0,255), randomNumber(0,255)));`?\\r\n\\r\nOnce you have answered\nthe question, run the code and click the buttons to see what happens."
      CSD U6 light show predict_2018_markdown_instruction: "# Put on a Light Show\\r\n\\r\nThis\napp lets you put on a light show with the LED.\\r\n\\r\nLook at the code with\nyour partner and answer the following questions:\\r\n\\r\n* What does this line\nof code do: `setProperty(\"screen\", \"background-color\", rgb(randomNumber(0,255),\nrandomNumber(0,255), randomNumber(0,255)));`?\\r\n\\r\nOnce you have answered\nthe question, run the code and click the buttons to see what happens."
      CSD U6 making music w arrays mod_markdown_instruction: "# Changing Elements\nin Arrays\\r\n\\r\nSo far you’ve just been using the elements of arrays. Now,\nyou're going to change what these elements are.\\r\n\\r\nIn the code below\nthere's an array called `notes`, which is filled with notes the buzzer can\nplay. Every time the left button is pressed, the buzzer plays one of these\nnotes randomly. However, all of the notes in the `notes` array are the same.\\r\n\\r\n#\nDo this\\r\n\\r\n* Change the elements of `notes` so that each one is a different\nnote."
      CSD U6 move motorcycle_markdown_instruction: "# Movement with Properties\\r\n\\r\nEarlier\nwe used `setProperty` to change the x and y position of elements on the screen,\nbut we could only move them to either a single specific location, or a random\nlocation. By using `getProperty` to find out an element's current position,\nwe can use the **counter pattern** from Unit 3 to update that position.\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the program and discuss with your partner how the left\nbutton makes the motorcycle go up.\\r\n* Using the working left button as an\nexample, program the right button to make the motorcycle go down."
      CSD U6 move motorcycle_2018_markdown_instruction: "# Movement with Properties\\r\n\\r\nEarlier\nwe used `setProperty` to change the x and y position of elements on the screen,\nbut we could only move them to either a single specific location, or a random\nlocation. By using `getProperty` to find out an element's current position,\nwe can use the **counter pattern** from Unit 3 to update that position.\\r\n\\r\n#\nDo This\\r\n\\r\n* Read the program and discuss with your partner how the left\nbutton makes the motorcycle go up.\\r\n* Using the working left button as an\nexample, program the right button to make the motorcycle go down."
      CSD U6 onChange_markdown_instruction: "# onChange\\r\n\\r\nIn the last level,\nthe program only got the interval value from the slider when you pressed the\nleft button.  Sometimes, though, you'll want to change the interval of the\nLED as soon as the user chooses a new value.   For that, you'll need the\n\"onChange\" event.\\r\n\\r\n# Do This\\r\n\\r\n* Look at the first event block\nin the program and find where it says \"onChange\".\\r\n* Inside the event\nblock, get the interval value from the slider and use it to make the LED blink\nat that new rate.\\r\n* Run your program, moving the slider to see whether\nthe LED speed changes automatically."
      CSD U6 params create colors_markdown_instruction: "# Color Picker\\r\n\\r\nIn\nthis program, pressing the buttons at the bottom of the screen changes the\ncolor of the images and the color LEDs.\\r\n\\r\n# Do This\\r\n* Create a function\n`chooseColor(color)` that changes each of the images and the color LEDs to\nthe given color.\\r\n* Call your function in the event blocks so that all the\nbuttons work."
      CSD U6 params create colors_2018_markdown_instruction: "# Color Picker\\r\n\\r\nIn\nthis program, pressing the buttons at the bottom of the screen changes the\ncolor of the images and the color LEDs.\\r\n\\r\n# Do This\\r\n* Create a function\n`chooseColor(color)` that changes each of the images and the color LEDs to\nthe given color.\\r\n* Call your function in the event blocks so that all the\nbuttons work."
      CSD U6 params predict contained_markdown_instruction: "# Bug Crawl\\r\n\\r\nLook\nat the program below, paying special attention to the function `crawl(bug)`.  What\nhappens if you press the left or right button?"
      CSD U6 params predict contained_2018_markdown_instruction: "# Bug Crawl\\r\n\\r\nLook\nat the program below, paying special attention to the function `crawl(bug)`.  What\nhappens if you press the left or right button?"
      CSD U6 params starchaser 1_markdown_instruction: "# Make your `loopStar(color)`\nfunction\\r\n\\r\nRight now only the red star works, so you'll need to change\nthis code.\\r\n\\r\n# Do This\\r\n* Use the code from the `loopRedStar()` function\nto create a `loopStar(color)` function that will work with any star.\\r\n*\nTest your function by calling `loopStar(\"red\")` and `loopStar(\"blue\")`\ninside the `loopStars()` function."
      CSD U6 params starchaser 1_2018_markdown_instruction: "# Make your `loopStar(color)`\nfunction\\r\n\\r\nRight now only the red star works, so you'll need to change\nthis code.\\r\n\\r\n# Do This\\r\n* Use the code from the `loopRedStar()` function\nto create a `loopStar(color)` function that will work with any star.\\r\n*\nTest your function by calling `loopStar(\"red\")` and `loopStar(\"blue\")`\ninside the `loopStars()` function."
      CSD U6 params starchaser 2_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nyou'll need to make all the stars loop around the screen.\\r\n\\r\n# Do This\\r\n*\nUse a `for` loop inside your `loopStars()` function to make every star in\n\"starArray\" loop around the screen."
      CSD U6 params starchaser 2_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nyou'll need to make all the stars loop around the screen.\\r\n\\r\n# Do This\\r\n*\nUse a `for` loop inside your `loopStars()` function to make every star in\n\"starArray\" loop around the screen."
      CSD U6 params starchaser 3_markdown_instruction: "# Star Chaser\\r\n\\r\nAll\nthe stars loop, but you can still only catch the red star.\\r\n\\r\n# Do This\\r\n*\nUse code from the `moveRedStar()` function to make a `moveStar(color)` function\nthat can move any star.\\r\n* Use code from the `checkRedStar()` function to\nmake a `checkStar(color)` function that works for any star.\\r\n* Test your\ncode by calling `checkStar(\"red\")` and `checkStar(\"blue\")` inside your\nevent block."
      CSD U6 params starchaser 3_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nAll\nthe stars loop, but you can still only catch the red star.\\r\n\\r\n# Do This\\r\n*\nUse code from the `moveRedStar()` function to make a `moveStar(color)` function\nthat can move any star.\\r\n* Use code from the `checkRedStar()` function to\nmake a `checkStar(color)` function that works for any star.\\r\n* Test your\ncode by calling `checkStar(\"red\")` and `checkStar(\"blue\")` inside your\nevent block."
      CSD U6 params starchaser 4_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nmake it work for all the stars\\r\n\\r\n# Do This\\r\n* Create a `checkStars()`\nfunctions that uses a `for` loop to check every star in the star array.\\r\n*\nTest your code by calling the `checkStars()` function inside the event block."
      CSD U6 params starchaser 4_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nmake it work for all the stars\\r\n\\r\n# Do This\\r\n* Create a `checkStars()`\nfunctions that uses a `for` loop to check every star in the star array.\\r\n*\nTest your code by calling the `checkStars()` function inside the event block."
      CSD U6 params starchaser 5_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nyou can add extra stars, and your functions will work with them, too.\\r\n\\r\n#\nDo This\\r\n* In design mode, copy one of the stars, and change its name and\ncolor to \"yellow\".\\r\n* Add a new element, \"yellow\", to your star array.\\r\n*\nTest the game with your new star."
      CSD U6 params starchaser 5_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nyou can add extra stars, and your functions will work with them, too.\\r\n\\r\n#\nDo This\\r\n* In design mode, copy one of the stars, and change its name and\ncolor to \"yellow\".\\r\n* Add a new element, \"yellow\", to your star array.\\r\n*\nTest the game with your new star."
      CSD U6 params starchaser challenge 1_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nthat you have a working game, you can challenge yourself with some different\nfeatures.\\r\n\\r\n# Do This\\r\n* Start the user with 5 \"lives\", and take\none away every time the user touches the **wrong** star.\\r\n* Make an end\nscreen, and change to that screen when the user runs out of lives."
      CSD U6 params starchaser challenge 1_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nthat you have a working game, you can challenge yourself with some different\nfeatures.\\r\n\\r\n# Do This\\r\n* Start the user with 5 \"lives\", and take\none away every time the user touches the **wrong** star.\\r\n* Make an end\nscreen, and change to that screen when the user runs out of lives."
      CSD U6 params starchaser challenge 2_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nthat you have a working game, you can challenge yourself with some different\nfeatures.\\r\n\\r\n# Do This\\r\n* Make the player go back to the middle of the\nscreen when the left button is pressed."
      CSD U6 params starchaser challenge 2_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nthat you have a working game, you can challenge yourself with some different\nfeatures.\\r\n\\r\n# Do This\\r\n* Make the player go back to the middle of the\nscreen when the left button is pressed."
      CSD U6 params starchaser challenge_markdown_instruction: "# Star Chaser\\r\n\\r\nNow\nthat you have a working game, you can challenge yourself with some different\nfeatures.\\r\n\\r\n# Do This\\r\n* Start the user with 5 \"lives\", and take\none away every time the user touches the **wrong** star.\\r\n* Make an end\nscreen, and change to that screen when the user runs out of lives."
      CSD U6 params starchaser intro_markdown_instruction: "# Star Chaser\\r\n\\r\nIn\nthis game, the user tries to catch the stars according to the color of the\nLEDs.\\r\n\\r\n# Do This\\r\n* Play the game, and discuss the following with\na partner:\\r\n * What functions might this program need?\\r\n * What parameters\nshould these functions have?"
      CSD U6 params starchaser intro_2018_markdown_instruction: "# Star Chaser\\r\n\\r\nIn\nthis game, the user tries to catch the stars according to the color of the\nLEDs.\\r\n\\r\n# Do This\\r\n* Play the game, and discuss the following with\na partner:\\r\n * What functions might this program need?\\r\n * What parameters\nshould these functions have?"
      CSD U6 params starchaser template_markdown_instruction: "Template Level."
      CSD U6 params starchaser template_2018_markdown_instruction: "Template Level."
      CSD U6 plane shake_markdown_instruction: "# Shaking Things Up\\r\n\\r\nLike the\n`change` event, the `shake` event updates every time the board moves. However,\n`shake` is a lot less sensitive than `change`. In order to actually trigger\nit, the board has to be shaken, not just slightly moved.\\r\n\\r\n# Do This\\r\n\\r\nThe\nairplane needs to be shaken in order to take off.\\r\n\\r\n* Use the `shake`\nevent move the airplane\\r\n* Update the airplane's x and y coordinates in\norder to move it."
      CSD U6 predict LED button_markdown_instruction: "Embedded Prediction"
      CSD U6 predict LED button_2018_markdown_instruction: "Embedded Prediction"
      CSD U6 random array notes_markdown_instruction: "# Random Song Generator\\r\n\\r\nYou're\ngoing to make a random song generator. When you press a button, a random note\nshould play. Press it enough times, and you have yourself a beautiful arrangement\nof bleeps and bloops. \\r\n\\r\nYou used `randomNumber()` to select an element\nfrom an array in the previous lesson, so this should be familiar.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code to randomly select a note from the `notes` array\nand play it.\\r\n* Run the program and press the left button to hear your buzzer\nsing its beautiful tune."
      CSD U6 random array notes_2018_markdown_instruction: "# Random Song Generator\\r\n\\r\nYou're\ngoing to make a random song generator. When you press a button, a random note\nshould play. Press it enough times, and you have yourself a beautiful arrangement\nof bleeps and bloops. \\r\n\\r\nYou used `randomNumber()` to select an element\nfrom an array in the previous lesson, so this should be familiar.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code to randomly select a note from the `notes` array\nand play it.\\r\n* Run the program and press the left button to hear your buzzer\nsing its beautiful tune."
      CSD U6 sensor experiment embedded_markdown_instruction: "# Sensor Experiment\\r\n\\r\nRun\nthe program to the right and experiment with your board. Try interacting with\nyour board in many different ways to figure out what each sensor might be.\nAs you experiment with each sensor, discuss with a neighbor:\\r\n\\r\n* What\ndoes this sensor measure?\\r\n* What is its maximum value?\\r\n* What is its\nminimum value?"
      CSD U6 sensor experiment embedded_2018_markdown_instruction: "# Sensor Experiment\\r\n\\r\nRun\nthe program to the right and experiment with your board. Try interacting with\nyour board in many different ways to figure out what each sensor might be.\nAs you experiment with each sensor, discuss with a neighbor:\\r\n\\r\n* What\ndoes this sensor measure?\\r\n* What is its maximum value?\\r\n* What is its\nminimum value?"
      CSD U6 setProperty Text_markdown_instruction: "# Changing the Text\\r\n\\r\nThe\n`setProperty` block can be used to change lots of things about your design\nelements, including the text they contain.\\r\n\\r\n# Do This\\r\n\\r\n* Drag\nout a `setProperty` block\\r\n* For the first parameter, select \"name\" (the\nelement's id)\\r\n* For the second parameter, select \"text\" (the property\nyou want to set)\\r\n* For the third parameter, write your name in quotes (the\nvalue to set)\\r\n\\r\n_Note: We've removed the Design Mode tab for now so\nyou can practice working with `setProperty`, but it'll come back later once\nyou're building apps of your own._"
      CSD U6 setProperty Text_2018_markdown_instruction: "# Changing the Text\\r\n\\r\nThe\n`setProperty` block can be used to change lots of things about your design\nelements, including the text they contain.\\r\n\\r\n# Do This\\r\n\\r\n* Drag\nout a `setProperty` block\\r\n* For the first parameter, select \"name\" (the\nelement's id)\\r\n* For the second parameter, select \"text\" (the property\nyou want to set)\\r\n* For the third parameter, write your name in quotes (the\nvalue to set)\\r\n\\r\n_Note: We've removed the Design Mode tab for now so\nyou can practice working with `setProperty`, but it'll come back later once\nyou're building apps of your own._"
      CSD U6 setProperty hidden 2_markdown_instruction: "# Showing/Hiding\\r\n\\r\nThis\nalarm app isn't super useful if you can't turn the alarm off once it's\nbeen triggered. Let's fix that.\\r\n\\r\n# Do This\\r\n\\r\nAdd a second `onEvent`\nblock to watch for the \"stopAlarmButton\" to be clicked. Inside that block:\\r\n\\r\n*\nChange the status text to \"OFF\"\\r\n* Hide the \"stopAlarmButton\"\\r\n\\r\n_Hint:\n\"hidden\" is a boolean property. If we used `false` to make the button show\nup, what should you use to make it hidden again?_"
      CSD U6 setProperty hidden 2_2018_markdown_instruction: "# Showing/Hiding\\r\n\\r\nThis\nalarm app isn't super useful if you can't turn the alarm off once it's\nbeen triggered. Let's fix that.\\r\n\\r\n# Do This\\r\n\\r\nAdd a second `onEvent`\nblock to watch for the \"stopAlarmButton\" to be clicked. Inside that block:\\r\n\\r\n*\nChange the status text to \"OFF\"\\r\n* Hide the \"stopAlarmButton\"\\r\n\\r\n_Hint:\n\"hidden\" is a boolean property. If we used `false` to make the button show\nup, what should you use to make it hidden again?_"
      CSD U6 setProperty hidden_markdown_instruction: "# Hidden\\r\n\\r\nDesign elements\nhave a property called \"hidden\" that controls whether the element should\nshow on screen or not. We are going to use this property to create an alarm\napp. Notice that when the program starts one button is hidden, and one is\nnot.\\r\n\\r\nWe have already set up an event handler for the \"triggerAlarmButton\"\nwhich will do two things when clicked:\\r\n\\r\n* Change the \"text\" property\nof \"statusLabel\" to \"on\"\\r\n* Set the \"hidden\" property of \"stopAlarmButton\"\nto `false` (meaning it should _not_ be hidden)\\r\n\\r\n# Do This\\r\n\\r\n* Run\nthe program and click \"Trigger Alarm\" to see how it works\\r\n* Add code\nto the provided event handler that hides the \"triggerAlarmButton\"\\r\n\\r\n_Note:\nthe button \"stopAlarmButton\" is already on the screen, but because its \"hidden\"\nproperty is marked true, it isn't shown when the program starts._"
      CSD U6 setProperty hidden_2018_markdown_instruction: "# Hidden\\r\n\\r\nDesign\nelements have a property called \"hidden\" that controls whether the element\nshould show on screen or not. We are going to use this property to create\nan alarm app. Notice that when the program starts one button is hidden, and\none is not.\\r\n\\r\nWe have already set up an event handler for the \"triggerAlarmButton\"\nwhich will do two things when clicked:\\r\n\\r\n* Change the \"text\" property\nof \"statusLabel\" to \"on\"\\r\n* Set the \"hidden\" property of \"stopAlarmButton\"\nto `false` (meaning it should _not_ be hidden)\\r\n\\r\n# Do This\\r\n\\r\n* Run\nthe program and click \"Trigger Alarm\" to see how it works\\r\n* Add code\nto the provided event handler that hides the \"triggerAlarmButton\"\\r\n\\r\n_Note:\nthe button \"stopAlarmButton\" is already on the screen, but because its \"hidden\"\nproperty is marked true, it isn't shown when the program starts._"
      CSD U6 setProperty xy click_markdown_instruction: "# Changing With a Click\\r\n\\r\nIt's\nnot really useful to only set a property when your program is first run. After\nall, you could just do all of that in Design Mode. When you use an `onEvent`\nblock with `setProperty`, you're able to do things you couldn't do with\nDesign Mode alone.\\r\n\\r\n# Do This\\r\n\\r\nWe've provided an empty `onEvent`\nblock that's watching the \"smiley\" image. Inside the `onEvent` block, use\ntwo `setProperty` blocks to move the smiley somewhere else (it doesn't really\nmatter where for now). Test your program by running it and clicking on the\nsmiley."
      CSD U6 setProperty xy click_2018_markdown_instruction: "# Changing With a Click\\r\n\\r\nIt's\nnot really useful to only set a property when your program is first run. After\nall, you could just do all of that in Design Mode. When you use an `onEvent`\nblock with `setProperty`, you're able to do things you couldn't do with\nDesign Mode alone.\\r\n\\r\n# Do This\\r\n\\r\nWe've provided an empty `onEvent`\nblock that's watching the \"smiley\" image. Inside the `onEvent` block, use\ntwo `setProperty` blocks to move the smiley somewhere else (it doesn't really\nmatter where for now). Test your program by running it and clicking on the\nsmiley."
      CSD U6 setProperty xy random_markdown_instruction: "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\"\nstyle=\"float:right; max-width: 150px; margin: 10px;\">\\r\n\\r\n# Randomization\\r\n\\r\nMoving\non the first click is fine, but this smiley would be even cooler if it moved\nsomewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber`\nblock to do just that.\\r\n\\r\n# Do This\\r\n\\r\nInstead of setting the \"x\"\nand \"y\" properties to a specific number, use the `randomNumber` block to\npick a new random \"x\" and \"y\" each time the smiley is clicked.\\r\n\\r\n_Tip:\nThe App Lab screen is 320 pixels wide by 450 pixels tall. What range of random\nnumbers will ensure that the smiley is always visible on screen?_"
      CSD U6 setProperty xy random_2018_markdown_instruction: "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\"\nstyle=\"float:right; max-width: 150px; margin: 10px;\">\\r\n\\r\n# Randomization\\r\n\\r\nMoving\non the first click is fine, but this smiley would be even cooler if it moved\nsomewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber`\nblock to do just that.\\r\n\\r\n# Do This\\r\n\\r\nInstead of setting the \"x\"\nand \"y\" properties to a specific number, use the `randomNumber` block to\npick a new random \"x\" and \"y\" each time the smiley is clicked.\\r\n\\r\n_Tip:\nThe App Lab screen is 320 pixels wide by 450 pixels tall. What range of random\nnumbers will ensure that the smiley is always visible on screen?_"
      CSD U6 setProperty xy_markdown_instruction: "# Changing Position\\r\n\\r\nEvery\ndesign element (except for the screen) has an \"x\" and a \"y\" property that\ncontrols its position.\\r\n\\r\n# Do This\\r\n\\r\n<div markdown=\"1\" style=\"float:right\">\\r\n\\r\n![expandable](https://images.code.org/e5c325d8105a0cf7cf681d6eab898595-image-1507319516043.png)\\r\n\\r\n</div>\\r\n\\r\nUsing\nthe `setProperty` block, move \"red_button\" so that it matches the image\nto the right. (Click on the image to see the full size.)\\r\n\\r\n_Note: We've\nremoved the Design Mode tab for now so you can practice working with setProperty,\nbut it'll come back later once you're building apps of your own._"
      CSD U6 setProperty xy_2018_markdown_instruction: "# Changing Position\\r\n\\r\nEvery\ndesign element (except for the screen) has an \"x\" and a \"y\" property that\ncontrols its position.\\r\n\\r\n# Do This\\r\n\\r\n<div markdown=\"1\" style=\"float:right\">\\r\n\\r\n![expandable](https://images.code.org/e5c325d8105a0cf7cf681d6eab898595-image-1507319516043.png)\\r\n\\r\n</div>\\r\n\\r\nUsing\nthe `setProperty` block, move \"red_button\" so that it matches the image\nto the right. (Click on the image to see the full size.)\\r\n\\r\n_Note: We've\nremoved the Design Mode tab for now so you can practice working with setProperty,\nbut it'll come back later once you're building apps of your own._"
      CSD U6 slider intro_markdown_instruction: "# Sliders\\r\n\\r\nLast time, your\nusers were only able to choose between a short and long buzz.  To give the\nuser control over the exact duration of the buzzer, you'll want to use a\nslider.\\r\n\\r\nThis slider lets users choose a value between 100 and 1000\nfor the duration of the buzz, but there's something not quite right about\nhow it's working.\\r\n\\r\n# Do This\\r\n* Look over the code and find the bug\nthat's keeping the duration from being set correctly.\\r\n\\t* (Hint: Hover\nover the yellow triangles for clues as to what might be wrong with the code.)"
      CSD U6 slider intro_2018_markdown_instruction: "# Sliders\\r\n\\r\nLast time,\nyour users were only able to choose between a short and long buzz.  To give\nthe user control over the exact duration of the buzzer, you'll want to use\na slider.\\r\n\\r\nThis slider lets users choose a value between 100 and 1000\nfor the duration of the buzz, but there's something not quite right about\nhow it's working.\\r\n\\r\n# Do This\\r\n* Look over the code and find the bug\nthat's keeping the duration from being set correctly.\\r\n\\t* (Hint: Hover\nover the yellow triangles for clues as to what might be wrong with the code.)"
      CSD U6 stillness game predict code_markdown_instruction: "# Change with the\nAccelerometer\\r\n\\r\nThis program uses the change event to increase a movement\nmeter every time the board moves. When the movement meter reaches 100, the\nalarm will sound.\\r\n\\r\n\\r\n# Do This\\r\nThis program has two bugs that you\nneed to fix:\\r\n\\r\n* The movement meter is being triggered by a button press,\ninstead of the accelerometer's `change` event.\\r\n* The programmer forgot\nhow to use the counter pattern to increase the movement variable.\\r\n\\r\nOnce\nyou have found the bugs, run the program and try to pass the board to your\npartner without setting off the alerm."
      CSD U6 stillness game predict code_2018_markdown_instruction: "# Change with\nthe Accelerometer\\r\n\\r\nThis program uses the change event to increase a\nmovement meter every time the board moves. When the movement meter reaches\n100, the alarm will sound.\\r\n\\r\n\\r\n# Do This\\r\nThis program has two bugs\nthat you need to fix:\\r\n\\r\n* The movement meter is being triggered by a\nbutton press, instead of the accelerometer's `change` event.\\r\n* The programmer\nforgot how to use the counter pattern to increase the movement variable.\\r\n\\r\nOnce\nyou have found the bugs, run the program and try to pass the board to your\npartner without setting off the alerm."
      CSD U6 stillness game predict_markdown_instruction: "# Accelerometer Events\\r\n\\r\nLook\nat the code below with a partner. What do you think it's going to do? Give\nit a guess, then run the code to find out!\\r\n"
      CSD U6 test LED_markdown_instruction: "# Control the LED\\r\n\\r\nNow that you\nknow your board is working, you can try out the different LED blocks.\\r\n\\r\n#\nDo This\\r\n* Click \"Run\" and discuss with your partner how the code works.\\r\n*\nTry the different LED blocks to see what they do.\\r\n  * Hint: Don't forget\nto hit \"Reset\" and run your code again after you change it"
      CSD U6 test LED_2018_markdown_instruction: "# Control the LED\\r\n\\r\nNow that\nyou know your board is working, you can try out the different LED blocks.\\r\n\\r\n#\nDo This\\r\n* Click \"Run\" and discuss with your partner how the code works.\\r\n*\nTry the different LED blocks to see what they do.\\r\n  * Hint: Don't forget\nto hit \"Reset\" and run your code again after you change it"
      CSD U6 tugowar buzzer_markdown_instruction: "# Winning Buzzer\\r\n\\r\nThat last\nthing that that is missing from your project guide's description of this\nproject is the buzzer. It should buzz a high tone if player 1 wins and a low\ntone if player 2 wins. \\r\n\\r\n# Do This\\r\n\\r\nSo far we've been able to\njust use the `player` parameter directly to report which player won, but that\nwon't work for buzzing different sounds. Inside the conditional that checks\nif a player won, you'll need to add _another_ conditional that checks which\nplayer it was. If `player == \"red\"` the buzzer should play a high note,\notherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018_markdown_instruction: "# Winning Buzzer\\r\n\\r\nThat\nlast thing that that is missing from your project guide's description of\nthis project is the buzzer. It should buzz a high tone if player 1 wins and\na low tone if player 2 wins. \\r\n\\r\n# Do This\\r\n\\r\nSo far we've been able\nto just use the `player` parameter directly to report which player won, but\nthat won't work for buzzing different sounds. Inside the conditional that\nchecks if a player won, you'll need to add _another_ conditional that checks\nwhich player it was. If `player == \"red\"` the buzzer should play a high\nnote, otherwise (else) it should play a low note."
      CSD U6 tugowar conditional_markdown_instruction: "# Check for a Winner\\r\n\\r\nYour\ngame should be pretty playable by now. Two players can click their respective\nbuttons, and their emojies will race down the screen. We still need a way\nfor a player to win though.\\r\n\\r\n# Do This\\r\n\\r\nUsing a conditional inside\nthe `checkWin()` function, you want to check if a player has won each time\nthey click. For now, we can just use `console.log` to report the winner.\\r\n\\r\n*\nAdd an if statement to the bottom of `checkWin()`\\r\n* For the condition of\nyour if statement, check if `player_y` is greater than 350 (or use the bottom\nof screen value you decided on in the last level)\\r\n* In your conditional,\nadd a `console.log` that reports which player won\\r\n* Test your program to\nmake sure that it reports a winner when one of the emojis makes it to the\nbottom of the screen"
      CSD U6 tugowar conditional_2018_markdown_instruction: "# Check for a Winner\\r\n\\r\nYour\ngame should be pretty playable by now. Two players can click their respective\nbuttons, and their emojies will race down the screen. We still need a way\nfor a player to win though.\\r\n\\r\n# Do This\\r\n\\r\nUsing a conditional inside\nthe `checkWin()` function, you want to check if a player has won each time\nthey click. For now, we can just use `console.log` to report the winner.\\r\n\\r\n*\nAdd an if statement to the bottom of `checkWin()`\\r\n* For the condition of\nyour if statement, check if `player_y` is greater than 350 (or use the bottom\nof screen value you decided on in the last level)\\r\n* In your conditional,\nadd a `console.log` that reports which player won\\r\n* Test your program to\nmake sure that it reports a winner when one of the emojis makes it to the\nbottom of the screen"
      CSD U6 tugowar demo_markdown_instruction: "# Grab that Bug!\\r\n\\r\nThis is\nan example of a tug o' war game that could be built in this lesson. To play,\npair up with another student. The student on the left will the click the left\nbutton on the Circuit Playground as fast as they can, while the student on\nthe right clicks the right button. Whoever can get the bug over to their side\nfirst wins."
      CSD U6 tugowar demo_2018_markdown_instruction: "# Grab that Bug!\\r\n\\r\nThis\nis an example of a tug o' war game that could be built in this lesson. To\nplay, pair up with another student. The student on the left will the click\nthe left button on the Circuit Playground as fast as they can, while the student\non the right clicks the right button. Whoever can get the bug over to their\nside first wins."
      CSD U6 tugowar design 1.5_markdown_instruction: "# Game Screen Design\\r\n\\r\nWe've\nalso added a \"game\" screen where the game will be played. It just needs\na couple of tweaks.\\r\n\\r\n# Do This\\r\n\\r\nSwitch to the \"game\" screen\nand, using your planning guide, fix this screen by changing the color of the\ntwo emoji images.\\r\n\\r\nFeel free to add any other design tweaks that you'd\nlike."
      CSD U6 tugowar design 1.5_2018_markdown_instruction: "# Game Screen Design\\r\n\\r\nWe've\nalso added a \"game\" screen where the game will be played. It just needs\na couple of tweaks.\\r\n\\r\n# Do This\\r\n\\r\nSwitch to the \"game\" screen\nand, using your planning guide, fix this screen by changing the color of the\ntwo emoji images.\\r\n\\r\nFeel free to add any other design tweaks that you'd\nlike."
      CSD U6 tugowar design 1_markdown_instruction: "# Getting Started: Screen Design\\r\n\\r\nYou\nshould have already reviewed the planning guide for this project. Some of\nthe work to turn this project guide into a working program has already been\nstarted. Based on the project guide you're going to do the rest of this work.\\r\n\\r\n#\nDo This\\r\n\\r\nWe've already created a \"start\" screen and included a title\nand \"play\" button. Using your planning guide, finish creating this screen.\nSpecifically you'll want to:\\r\n\\r\n* Update the title text to say \"Emoji\nRace\"\\r\n* Add instructions for playing using the ID \"instructions\"\\r\n\\r\nFeel\nfree to add any other design tweaks that you'd like."
      CSD U6 tugowar design 1_2018_markdown_instruction: "# Getting Started: Screen\nDesign\\r\n\\r\nYou should have already reviewed the planning guide for this\nproject. Some of the work to turn this project guide into a working program\nhas already been started. Based on the project guide you're going to do the\nrest of this work.\\r\n\\r\n# Do This\\r\n\\r\nWe've already created a \"start\"\nscreen and included a title and \"play\" button. Using your planning guide,\nfinish creating this screen. Specifically you'll want to:\\r\n\\r\n* Update\nthe title text to say \"Emoji Race\"\\r\n* Add instructions for playing using\nthe ID \"instructions\"\\r\n\\r\nFeel free to add any other design tweaks that\nyou'd like."
      CSD U6 tugowar design 2_markdown_instruction: "# Designing the Win Screen\\r\n\\r\nThe\nfinal screen in this program shows who won. It's totally blank right now.\\r\n\\r\n#\nDo This\\r\n\\r\nSwitch to \"win\" and design it based on your project guide.\nMake sure to pay close attention to the ID of each element. Once you've added\nthe required elements, feel free to add any other design tweaks that you'd\nlike."
      CSD U6 tugowar design 2_2018_markdown_instruction: "# Designing the Win Screen\\r\n\\r\nThe\nfinal screen in this program shows who won. It's totally blank right now.\\r\n\\r\n#\nDo This\\r\n\\r\nSwitch to \"win\" and design it based on your project guide.\nMake sure to pay close attention to the ID of each element. Once you've added\nthe required elements, feel free to add any other design tweaks that you'd\nlike."
      CSD U6 tugowar final_markdown_instruction: "# Make It Your Own\\r\n\\r\nYou just\nwalked through someone else's plan for creating a program, so now it's time\nto make it your own. What additional features or challenges do you want to\ncreate?\\r\n\\r\n# Do This\\r\n\\r\nSelect one of the challenges below to add\nto the game or come up with a challenge of your own.\\r\n\\r\n* Change the look\nand layout of the screens\\r\n* Use the buzzer or the led to show when one\nof the buttons has been clicked\\r\n* Set the \"icon-color\" property of \"winner_image\"\nto the winning color\\r\n* Make the emojis start out sad, change to meh halfway,\nand end up happy\\r\n* Use a variable and conditionals to make sure that players\ncan only move their emojis when the \"game\" screen is showing"
      CSD U6 tugowar final_2018_markdown_instruction: "# Make It Your Own\\r\n\\r\nYou\njust walked through someone else's plan for creating a program, so now it's\ntime to make it your own. What additional features or challenges do you want\nto create?\\r\n\\r\n# Do This\\r\n\\r\nSelect one of the challenges below to add\nto the game or come up with a challenge of your own.\\r\n\\r\n* Change the look\nand layout of the screens\\r\n* Use the buzzer or the led to show when one\nof the buttons has been clicked\\r\n* Set the \"icon-color\" property of \"winner_image\"\nto the winning color\\r\n* Make the emojis start out sad, change to meh halfway,\nand end up happy\\r\n* Use a variable and conditionals to make sure that players\ncan only move their emojis when the \"game\" screen is showing"
      CSD U6 tugowar movement 1_markdown_instruction: "# Tracking the Score\\r\n\\r\nYour\n`score` variable should keep track of how many times each user has clicked\ntheir button. Instead of just going up, `score` should _decrease_ if the player\n1 clicks `buttonL` and _increase_ if player 2 clicks `buttonR`.\\r\n\\r\n# Do\nThis\\r\n\\r\nInside each `onBoardEvent`, use the counter pattern to increase\nor decrease `score`. The amount that you change `score` will change how difficult\nthe game is to win. Start with changing by 10 - you can always experiment\nwith different values when the program is more complete.\\r\n"
      CSD U6 tugowar setProperty_markdown_instruction: "# Display the Winner\\r\n\\r\nThe\nwinning screen doesn't actually know _who_ won the game. Let's fix that\nnow.\\r\n\\r\n# Do This\\r\n\\r\nBefore each call to `setScreen`, add a `setProperty`\nblock to change the \"text\" property of \"winner\" to display the actual\nwinner."
      CSD U6 tugowar setProperty_2018_markdown_instruction: "# Display the Winner\\r\n\\r\nThe\nwinning screen doesn't actually know _who_ won the game. Let's fix that\nnow.\\r\n\\r\n# Do This\\r\n\\r\nBefore each call to `setScreen`, add a `setProperty`\nblock to change the \"text\" property of \"winner\" to display the actual\nwinner."
      CSD U6 tugowar setScreen_markdown_instruction: "# Change to the Win Screen\\r\n\\r\nNow\nthat we have conditionals to check which player won, let's switch to the\n\"win\" screen when a player wins.\\r\n\\r\n# Do This\\r\n\\r\nInside the conditional\nthat you've created to check if a player has reached the bottom, add a `setScreen`\nblock to change to the \"win\" screen. Make sure you test that your new code\nworks before moving on!"
      CSD U6 tugowar setScreen_2018_markdown_instruction: "# Change to the Win Screen\\r\n\\r\nNow\nthat we have conditionals to check which player won, let's switch to the\n\"win\" screen when a player wins.\\r\n\\r\n# Do This\\r\n\\r\nInside the conditional\nthat you've created to check if a player has reached the bottom, add a `setScreen`\nblock to change to the \"win\" screen. Make sure you test that your new code\nworks before moving on!"
      CSD U6 tugowar variables 1_markdown_instruction: "# The startGame() Function\\r\n\\r\nIf\nyou look at the events we planned for in the planning guide, you may notice\nthat two events do essentially the same thing. The events that respond to\nboth the \"play\" and \"replay\" buttons could be written with identical code,\nbut duplicate code like this is a perfect place to use a **function**.\\r\n\\r\n#\nDo This\\r\n\\r\nWe've already added blocks that call a new function named\n`startGame()` to the appropriate event handlers, and we've created an empty\nfunction for you to build out. \\r\n\\r\n* Find the `startGame()` function definition\n( [Show me where](#triggercallout=block_trigger) )\\r\n* Inside the function:\\r\n\\t*\nMove both of the emoji images to the top of the screen by setting each one's\n\"y\" property to 0\\r\n\\t* Change the screen to \"game\"\\r\n\\r\nOnce you've\nfleshed out the `startGame()` function, try clicking the \"play\" button to\ncheck that it's working."
      CSD U6 tugowar variables 1_2018_markdown_instruction: "# The startGame() Function\\r\n\\r\nIf\nyou look at the events we planned for in the planning guide, you may notice\nthat two events do essentially the same thing. The events that respond to\nboth the \"play\" and \"replay\" buttons could be written with identical code,\nbut duplicate code like this is a perfect place to use a **function**.\\r\n\\r\n#\nDo This\\r\n\\r\nWe've already added blocks that call a new function named\n`startGame()` to the appropriate event handlers, and we've created an empty\nfunction for you to build out. \\r\n\\r\n* Find the `startGame()` function definition\n( [Show me where](#triggercallout=block_trigger) )\\r\n* Inside the function:\\r\n\\t*\nMove both of the emoji images to the top of the screen by setting each one's\n\"y\" property to 0\\r\n\\t* Change the screen to \"game\"\\r\n\\r\nOnce you've\nfleshed out the `startGame()` function, try clicking the \"play\" button to\ncheck that it's working."
      CSD U6 tugowar variables 2_markdown_instruction: "# Functions with Parameters\\r\n\\r\nMost\nof the existing functions you use in App Lab need inputs, or **parameters**,\nto pass the function necessary information. For example, when changing a screen,\nyou pass the ID of that screen as a parameter, which looks like `setScreen(\"win\")`.\\r\n\\r\nThese\nparameters show up as a variable that can be used inside the function, and\nyou can create functions that use parameters too!\\r\n\\r\n# Do This\\r\n\\r\n<div\nmarkdown=\"1\" style=\"float:right; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\nInstead of a separate function to move the\nred and the blue players, we've created one function called `movePlayer()`\nthat takes the ID of the player image as a parameter called `player`. Inside\nthis function, you can use `player` any place where you need to specify the\nID of the player you want to control.\\r\n\\r\n* Find where `movePlayer()` is\ndefined ( [Show me where](#triggercallout=block_trigger) )\\r\n* Inside the\n`movePlayer()` definition:\\r\n  * Get the current \"y\" property of the player\nand save it to a variable called `player_y`\\r\n  * Increase the value of `player_y`\nby 10\\r\n  * Set the \"y\" property of player to your new value `player_y`\\r\n\\r\nOnce\nyou've added your code, test it. You should see that _both buttons_ work\neven though we only created one function - cool!"
      CSD U6 tugowar variables 2_2018_markdown_instruction: "# Functions with Parameters\\r\n\\r\nMost\nof the existing functions you use in App Lab need inputs, or **parameters**,\nto pass the function necessary information. For example, when changing a screen,\nyou pass the ID of that screen as a parameter, which looks like `setScreen(\"win\")`.\\r\n\\r\nThese\nparameters show up as a variable that can be used inside the function, and\nyou can create functions that use parameters too!\\r\n\\r\n# Do This\\r\n\\r\n<div\nmarkdown=\"1\" style=\"float:right; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\nInstead of a separate function to move the\nred and the blue players, we've created one function called `movePlayer()`\nthat takes the ID of the player image as a parameter called `player`. Inside\nthis function, you can use `player` any place where you need to specify the\nID of the player you want to control.\\r\n\\r\n* Find where `movePlayer()` is\ndefined ( [Show me where](#triggercallout=block_trigger) )\\r\n* Inside the\n`movePlayer()` definition:\\r\n  * Get the current \"y\" property of the player\nand save it to a variable called `player_y`\\r\n  * Increase the value of `player_y`\nby 10\\r\n  * Set the \"y\" property of player to your new value `player_y`\\r\n\\r\nOnce\nyou've added your code, test it. You should see that _both buttons_ work\neven though we only created one function - cool!"
      CSD U6 tugowar variables 3_markdown_instruction: "# The checkWin() Function\\r\n\\r\nThe\nlast function that you need to figure out is the `checkWin()` function, which\nafter each player is moved, and is used to both check if that player has made\nit to the bottom of the screen and to announce the winner if necessary. For\nnow, we're just going to find out where the player is and log it to the console.\\r\n\\r\n#\nDo This\\r\n\\r\nJust like the `movePlayer()` function, `checkWin()` takes a\nsingle parameter called `player`. If you call `checkWin(\"red\")`, then the\nvariable `player` will have the value \"red\".\\r\n\\r\n* Find where the function\nis defined ( [Show me where](#triggercallout=block_trigger) )\\r\n* Create\na variable called `player_y` and assign it the \"y\" property of the player\\r\n*\nUse either a `console.log()` command or a watcher to report the value of `player_y`\\r\n*\nPlay the game with only one button, keeping an eye on the value of `player_y`\\r\n*\nDecide what value of `player_y` should be considered the bottom of the screen"
      CSD U6 tugowar variables 3_2018_markdown_instruction: "# The checkWin() Function\\r\n\\r\nThe\nlast function that you need to figure out is the `checkWin()` function, which\nafter each player is moved, and is used to both check if that player has made\nit to the bottom of the screen and to announce the winner if necessary. For\nnow, we're just going to find out where the player is and log it to the console.\\r\n\\r\n#\nDo This\\r\n\\r\nJust like the `movePlayer()` function, `checkWin()` takes a\nsingle parameter called `player`. If you call `checkWin(\"red\")`, then the\nvariable `player` will have the value \"red\".\\r\n\\r\n* Find where the function\nis defined ( [Show me where](#triggercallout=block_trigger) )\\r\n* Create\na variable called `player_y` and assign it the \"y\" property of the player\\r\n*\nUse either a `console.log()` command or a watcher to report the value of `player_y`\\r\n*\nPlay the game with only one button, keeping an eye on the value of `player_y`\\r\n*\nDecide what value of `player_y` should be considered the bottom of the screen"
      CSD-Arrays_markdown_instruction: "Today you’re going to learn how to use and\ncreate **functions**.\\r\n\\r\nCreating a function lets you make your own blocks!\nThere are two parts to a function: \\r\n\\r\nMaking a newly named block that\nhas all of the code you want to run inside of it. \\r\n-xml of function definition-\n\\r\n\\r\nThe single green block itself that you use, or call, to run the function\nyou created.\\r\n-xml of function call-\\r\n\\r\nPrepare to get familiar with\nfunctions, learn how to edit them, and create your own!"
      CSD-Arrays_2018_markdown_instruction: "Today you’re going to learn how to use\nand create **functions**.\\r\n\\r\nCreating a function lets you make your own\nblocks! There are two parts to a function: \\r\n\\r\nMaking a newly named block\nthat has all of the code you want to run inside of it. \\r\n-xml of function\ndefinition- \\r\n\\r\nThe single green block itself that you use, or call, to\nrun the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare to\nget familiar with functions, learn how to edit them, and create your own!"
      'CSD: Boolean Expressions_markdown_instruction': "# Boolean Expressions Video"
      'CSD: Cake Defender Exemplar_markdown_instruction': "# Defend Your Cake!\\r\n\\r\nThis\nis an example of a defender game that you'll build by the end of this lesson.\nMove the alien with arrow keys to keep the ladybugs from getting to your cake.\nHow high of a score can you get?\\r\n\\r\n# Do This\\r\n\\r\nTurn to a classmate\nand make a list of the following information.\\r\n\\r\n* How many sprites are\nthere in this game. Which are they?\\r\n* What variables are needed to make\nthis game? What do they store?\\r\n* If you were to split the code of this\ngame into functions what do you think they would be? What are the major pieces\nof behavior you'd need to create in your code?"
      'CSD: Platform Jumper Exemplar_markdown_instruction': "# Platform Jumper\\r\n\\r\nThe\ngame on the left is an example of a platform jumper.  Press \"Run\" to play\nit.  You can make the alien jump with the up arrow, and move it to the left\nand right with the arrow keys.  You score by collecting stars, and if you\nscore high enough, the background will change.\\r\n\\r\nYou already know how\nto use all the blocks you need to make a game just like this one, and you'll\nbe making your own platform jumper in this lesson.\\r\n\\r\nYou can see other\nexamples of platform jumpers in the next two levels."
      'CSD: Slider Example_markdown_instruction': "# RGB Slider\\r\n\\r\nOver the next\ncouple levels you are going to learn about using sliders to get user input.\nYou will be creating this slider which controls the color of a button. You\nwill return to this project in later lessons to control lights!"
      CSDU2 - 2nd Validator issue_markdown_instruction: "# Add head and title tags\\r\n\\r\nYou\nshould have ended up on this level because of one of the following errors:\\r\n\\r\n*\nElement head is missing a required instance of child element title.\\r\n* Element\ntitle must not be empty.\\r\n\\r\nBoth of these error messages point out that\n**every web page needs a title**. The title is more than just putting a header\non your page. A computer won't be able to easily go through the content of\nyour web page to find your header (it could be in lots of different types\nof tags). So instead **every web page includes a title element marked by a\n&lt;title&gt; tag.** This title does not show up anywhere on your page so\nit is not part of the content of your page.\\r\n\\r\nSince the title is not\npart of web page content it goes in a special area at the top. This area is\nfor all information about your web page that is not content. This information\nis often called **metadata**.  **Metadata goes in the head element marked\nby a &lt;head&gt; tag.**  The title element is a child element of the head\nelement so the title element goes inside the head element.\\r\n\\r\nExample:\\r\n\\r\n<pre>\\r\n&lt;head&gt;\\r\n   &lt;title&gt;\nMy Awesome Website &lt;/title&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a &lt;head&gt; element above the first content in your page\\r\n* Add a\n&lt;title&gt; element inside the &lt;head&gt; element. Makes sure to give\nyour page a descriptive title.\\r\n* Once you have done this return to the\n<a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/3\">validator level</a>"
      CSDU2 - About Me Page Styling_markdown_instruction: "# About Me Page\\r\n\\r\nThere\nare many CSS properties and values that can be applied to HTML elements in\norder to change their style. Use the checklist below to add style to the text,\nimage, and body elements. Remember to think about how your styling choices\nwill impact users view of the web page.\\r\n\\r\n# Do This\\r\n\\r\n* Add `<head>`\nand `<body>` elements to your page\\r\n* Add a `<title>` element to your page\ninside the `<head>` element\\r\n* Add a `<style>` element to your page\\r\n*\nAdd styling of your choice to your About Me Page. Be sure to use at least\n5 different CSS properties.\\r\n\\r\n# Checklist\\r\n\\r\n* All content contained\nin body element\\r\n* All style contained in head element\\r\n* At least 5 of\nthe following CSS Properties are used:\\r\n\\r\n| Color Properties | Text Properties\n| Images Properties |\\r\n| ---------------  | --------------- |-----------------  |\\r\n|\n`color` <br> `background-color` | `text-align` <br> `text-decoration` <br>\n`font-family` <br> `font-size` | `height` <br> `width` <br> `border-width`\n<br> `border-color` <br> `border-style` |\\r\n\\r\nIf you’ve used at least 5\nof the properties from the checklist, you can explore some additional text\nand image CSS properties to add to your About Me page."
      CSDU2 - About Me Page start_markdown_instruction: "# About Me Page\\r\n\\r\nYou\nare going to make another page for your portfolio. This one will be your About\nMe page. The project has been loaded with 6 different images. Two pictures\nare associated with each question below.\\r\n\\r\n* Do you prefer chocolate\nor vanilla ice cream?\\r\n* Are you a dog or a cat person?\\r\n* Do you prefer\nwatching a movie or reading a book?\\r\n\\r\nCreate a website that tells your\nuser more about you by answering the 3 questions and showing pictures for\neach answer.\\r\n\\r\n# Checklist\\r\n\\r\n* At least three images\\r\n* A large\nheader with the name of the page\\r\n* Descriptions of your image choices for\neach category inside a paragraph element\\r\n* HTML document uses the correct\nstructure. (Doctype, html, head, and body)"
      CSDU2 - Add doctype and html_markdown_instruction: "# Doctype and HTML tag\\r\n\\r\nWhen\na web browswer is trying to read your document it looks for alerts which tell\nit which language you are using. In order to let the web browser know that\nthis is an html document you need to do two things:\\r\n\\r\n1. Add &lt;!DOCTYPE\nhtml&gt; at the very top of your html file. &lt;!DOCTYPE html&gt; is always\nthe first thing in an html document because it notifies the computer that\nthis is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;\nis not technically a tag but instead an instruction to the web browser. \\r\n\\r\n2.\nWrap all the content of the file in an HTML element using the &lt;html&gt;\ntag. The &lt;html&gt; tag notifies the computer where the html starts and\nends. The  &lt;html&gt; tag is the container for all other HTML elements (except\nfor the &lt;!DOCTYPE html&gt; tag).  So you need an opening and closing &lt;html&gt;\ntag.\\r\n\\r\n# Do This\\r\nThis is your Hobbies page from the last lesson.\\r\n\\r\n*\nAdd &lt;!DOCTYPE html&gt; at the top of your index.html file\\r\n* Add &lt;html&gt;\nright underneath &lt;!DOCTYPE html&gt; and add a closing &lt;/html&gt; tag\nat the end of index.html"
      CSDU2 - Adding Personal Cause_markdown_instruction: "# Personal Cause\\r\n\\r\n**Circulate:**\nAs students are working on their research and website, check to make sure\nthat thay are using appropriately licensed media and proving accurate attribution.\nSpot check by asking for the license details of specific images.\\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Finish your personal website"
      CSDU2 - Classes on ESS_markdown_instruction: "# Classes in External Style Sheets\\r\nYou\nmay have also noticed these issues appearing.\\r\n\\r\n\\t1.\\tThe styling of\nthe `<img>` elements on one page should be different than the other\\r\n\\t2.\\tFor\nthe `<h1>` headers, on one page we want to style them and on the other we\ndon't.\\r\n\\r\nLuckily you know classes and we can fix these with classes!\\r\n￼\\r\n#\nDo This\\r\n\\r\n* Put the image on the home page in the \"home-image\" class\\r\n*\nFind the old style rule for images on the home page (width: 600px) and change\nthe selector so it will style the \"home-image\" class instead\\r\n* Put all\nthe images on the technology page in the \"tech-images\" class\\r\n* Find the\nold style rule for images on the technology page (width: 100px) and change\nthe selector so it will style the \"tech-images\" class instead\\r\n* Find\nthe h1 element on the technology page and put it in the class \"page-header\"\\r\n*\nChange the secltor for the style rule for h1 elements to be just a style rule\nfor the page-header class"
      CSDU2 - Classes_markdown_instruction: "# Classes\\r\n\\r\nSometimes you only\nwant to style one specific element of a certain type instead of all elements\nof one type. **Classes are HTML attributes that can be added to any HTML element\nto group it with other elements. Classes allow for the group of elements to\nhave their own unique style.** This applies to elements on the same page or\non separate pages.\\r\n\\r\nTo style using classes:\\r\n\\r\n1. First you need\nto mark the elements in html that will be in that class.  \\r\n2. Second you\nneed to write a style rule for that class. To write a rule for a class of\nelements, the selector for the rule is a `.` before the class name. \\r\n\\r\nFor\nexample the code below would style the fancy class which has been set up for\na paragraph element:\\r\n\\r\n| HTML file | CSS File | Result |\\r\n| ---------\n| -------- | ------ |\\r\n| <pre> &lt;p class=\"fancy\"&gt;Good Day&lt;/p&gt;</pre>\n|<pre>.fancy {<br>  color: darkblue;<br>  font-family: cursive;<br>} </pre>|<img\nsrc=\"https://images.code.org/05110876c62dafe72a7d0ddf34f7ae07-image-1475009963479.58.30\nPM.png\" alt=\"result image\"> | \\r\n\\r\n# Do This\\r\n\\r\nThere are lots of\ndifferent `<h5>` elements on the page. We want to style them differently depending\non what season they are associated with.\\r\n\\r\n* For each season put all\nthe `<h5>` elements for that season in a class specific to that season. For\nexample all the winter `<h5>` elements would be in the class \"winter\".\\r\n*\nStyle each class of `<h5>` elements with a different `color`"
      CSDU2 - Copy Code_markdown_instruction: "# Adding HTML and CSS\\r\n\\r\nNow that\nyou have the files set up bring over your code for your Guinness Book of World\nRecords page.\\r\n\\r\n## Copy Code\\r\n* Go to <a href=\"https://studio.code.org/s/csd2/stage/7/puzzle/8\"\ntarget=\"_blank\">this level</a> and copy all the code from the HTML file.\nPaste the code into the HTML file you just created.\\r\n* Copy the CSS code\nfrom the style sheet at <a href=\"https://studio.code.org/s/csd2/stage/7/puzzle/8\"\ntarget=\"_blank\">this level</a> and copy it into the CSS file you just created."
      CSDU2 - Debug images_markdown_instruction: "# Debug\\r\n\\r\n\\r\n\\r\n# Do This\\r\n*\nLook through at the src attribute and determine the cause. \\r\n* Your goal\nis to have an HTML page that displays 5 images. \\r\n* Notice that the “alt”\nattribute serves as a placeholder in case the image doesn’t load\\r\n* It’s\nalso helpful to know what the picture should be about in case there’s a problem\nwith the file path"
      CSDU2 - Debugging 1_markdown_instruction: "# Debugging\\r\n\\r\nComputer code\nis written by humans and humans make mistakes. All computer scientists make\nmistakes.  So part of being a good computer scientists is about being able\nto find your mistakes and fix them. In computer science we call mistakes **bugs**.\nBugs can be anything in code which causes it not to work as planned. The process\nof finding and fixing those bugs is called **debugging**.  Debugging is a\nproblem solving process so use your problem solving steps as you try to debug.\nOver the next couple levels you are going to work on your debugging skills.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26\nAM.png\" style=\"float:right;border:black solid 5px;width:200px\">\\r\n\\r\nThe\ndesired web page is on the right. There are two issues with the starter web\npage:\\r\n\\r\n1. The header won't show up as an h1 header.\\r\n2. The list\ndoesn't seem to be formatting correctly.\\r\n\\r\n# Do This\\r\n\\r\n* Find and\nfix all bugs in the starting HTML\\r\n* Check that the final result matches\nthe image on the right."
      CSDU2 - Debugging 2_markdown_instruction: "# Debugging\\r\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38\nAM.png\" style=\"float:right;border:5px black solid;width:250px\">\\r\n\\r\nMore\ndebugging practice!  This page is a little more challenging to debug than\nthe last one.\\r\n\\r\n# Do This\\r\n\\r\nFix the HTML so that the web page makes\nthe example on the right.\\r\n\\r\n* Find and fix all bugs in the starting HTML\\r\n*\nYou will know you have found all the bugs when your page matches the one on\nthe right."
      CSDU2 - Debugging 3_markdown_instruction: "# Debugging\\r\n\\r\nThis page has\nimages in it. Images make finding bugs a little more tricky. Can you debug\nthis page?\\r\n\\r\nAs you are debugging you may notice a new set of symbols\nthat look something like this:\\r\n<pre>\\r\n&lt;!-- this is a comment --&gt;\\r\n</pre>\\r\n\\r\nThis\nis a **comment**. Comments are written by computer scientists creating web\npages for themselves and other humans who might look at their HTML file. Comments\nexplain the different parts of the code and what it should create.  Comments\nmight be able to help you debug.\\r\n\\r\n# Do This\\r\n\\r\n* Find and fix all\nbugs in the starting HTML\\r\n* You know you’ve found all of the bugs when\nyour page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103295/\"\ntarget=\"_blank\"> Target Page</a>."
      CSDU2 - Debugging 4_markdown_instruction: "# Debugging\\r\n\\r\nSometimes bugs\nin code aren't obvious in how the page displays. Remember that you want your\nweb page to display on any browser so even though it displays nicely in one\nplace may not mean that it works everywhere. \\r\n\\r\n# Do This\\r\n\\r\n* Find\nand fix all bugs in the starting HTML\\r\n* You know you’ve found all of the\nbugs when your page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103456\"\ntarget=\"_blank\"> Target Page</a>"
      CSDU2 - Developing Brand Style_markdown_instruction: "# Developing Brand Style\\r\n\\r\nAlright\nnow its time to start writing the style rules for your brand!\\r\n\\r\nYou will\nnotice that all the different basic elements you could have used on your web\npages are included on this page and you are given a style rule for each to\nstart with.\\r\n\\r\nIn addition there is a style rule for two classes: header\nand content. You will be setting up these classes on all the pages of your\nwebsite using divs. The header class contains the title of the website as\nwell as the navigation to get around it. The content class contains everything\nelse.\\r\n\\r\n# Do This\\r\n\\r\n* Look up your colors RGB values from your <a\nhref=\"https://studio.code.org/s/csd2/stage/10/puzzle/4\" target=\"_blank\">\nColor Choice Level </a> and copy the RGB values into the block comment to\nmake it easier to style your page\\r\n* Create style rules for all the basic\nelements of a web page that might be included on your website\\r\n* Create\nstyle rules for the header and content classes. Consider having background\ncolors and borders on these sections to make them stand out from the background."
      CSDU2 - Div_markdown_instruction: "# Div Element\\r\n\\r\nHTML elements allow\nyou to group together content on your web page that is connected. However\nsometimes you want to group together multiple HTML elements into one connected\nchunk and give it a style.  To connect a set of HTML elements inside one element\nyou can use the `<div>` element.\\r\n\\r\nFor your Personal Website you are\ngoing to start out by using this to group together the header section you\nwant to go on every page of your website. This will include the title of your\nwebsite as well as any navigation. Once you do this you can put a background\ncolor on the whole div to make it look like one connected block.\\r\n\\r\n<pre>\\r\n&lt;div&gt;\\r\n    &lt;h1&gt;\nTitle of Website &lt;/h1&gt;\\r\n    &lt;a href=\"index.html\"&gt; Home &lt;/a&gt;\\r\n    &lt;a\nhref=\"page1.html\"&gt; Page 1 &lt;/a&gt;\\r\n    &lt;a href=\"page2.html\"&gt;\nPage 1 &lt;/a&gt;\\r\n    &lt;a href=\"page3.html\"&gt; Page 1&lt;/a&gt;\\r\n&lt;/div&gt;\\r\n</pre>\\r\n\\r\n#\nDo This\\r\n\\r\n* Put all the navigation hyperlinks and page title in `<div>`\nelement\\r\n* Add a `background-color` for the `<div>` element"
      CSDU2 - External Style Sheets_markdown_instruction: "# External Style Sheet\\r\n\\r\nNow\nthat you have your colors and fonts, you can begin to think more about the\nstyle rules of your brand. This is a simple template page that contains the\nfeatures your website might contain. You will use this page to play around\nwith the style rules until you find the right set of style rules for your\nbrand. These style rules will be common across all the pages on your website.\nThey will promote your own personal brand. Since they will be common across\nall the web pages it would be nice if they could all be written in one place\ninstead of duplicating them on every page.\\r\n\\r\nYou can get clearer separation\nof content and style by putting content and style in separate files. The new\nfile for CSS will be called an **external style sheet**. Most of the time\nthe file name will be **style.css**. Since the file ends in .css the web browswer\nalready knows that this is CSS code so we no longer need the `<style>` element\naround it. \\r\n\\r\n# Do This\\r\n\\r\n* Add a new CSS file called style.css\\r\n*\nCopy all the CSS from inside the `<style>` element from the .html file to\nthe .css file\\r\n* Delete the `<style>` element from the .html file"
      CSDU2 - Finalize Personal Website_markdown_instruction: "# Consistent Style\\r\n\\r\nYour\nsite’s pages might look crazy since you pulled together the style of all the\npages in the last level. It is time to work on that. It will be up to you\nto determine the style rules for your page.  Remember best practice is to\nonly have one rule per html element. If you want to keep two different styles\nfor certain elements remember you can use classes. In addition you should\nhave taken time to plan out your consistent style design for website.\\r\n\\r\n#\nDo This\\r\n\\r\n* Work on creating a consistent style for your website using\nthe external style sheet and style rules.\\r\n* Use classes to make parts of\nyour website stand out."
      CSDU2 - Finish Recipe_markdown_instruction: "# Finishing Recipe Page\\r\n\\r\nNow\nits time to finish off your Recipe Page.\\r\n\\r\n* Add any more information\nto your recipe page you think would be helpful such as how long it takes to\nmake or what meal of the day you usually eat it.\\r\n* Finalize your Recipe\nPage. Use the checklist below to make sure your page is complete. Remember\nyou can always go back and look at the example page.\\r\n\\r\n## Checklist\\r\n\\r\n*\nAll text contained in an HTML tag (header, paragraph, or list)\\r\n* Unordered\nlist of ingredients\\r\n* Ordered list of directions\\r\n* Paragraph description\nof the dish\\r\n* Headers for each section\\r\n* Title header at the top of\nthe page"
      CSDU2 - First Debug_markdown_instruction: "# Debug\\r\n\\r\nMistakes happen when\nyou are programming. The great thing is that these mistakes help your code\nget better and you become a better developer as you learn how to find the\nmistakes. Mistakes in code are called **bugs** and the process of fixing the\nbugs is called **debugging**. \\r\n\\r\n# Do This\\r\nThe creator of this website\nis having trouble so trouble. Debug this page so that it matches the example\non the next level.  Your teacher may also be displaying the website at the\nfront of the room.\\r\n\\r\nAs you work to debug look specifically at:\\r\n\\r\n*\nheader elements\\r\n* list elements\\r\n* list item elements"
      CSDU2 - First-Weblab_markdown_instruction: "# Adding Content\\r\n\\r\nStart creating\nyour first web page! Try to create a page with a title and two paragraphs.\\r\n\\r\n#\nDo This\\r\n\\r\n* Write a sentence about your favorite animal\\r\n* On a separate\nline write another sentence about your least favorite animal.\\r\n* Above both\nsentences try adding a title that says \"Animals\"\\r\n* Don't forget to click\n<img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12\nPM.png\" style=\"width:100px\">\\r\n* **What do you notice about the structure\nof your content?**"
      CSDU2 - Footer_markdown_instruction: "# Recreating Page\\r\n\\r\nAt the beginning\nof class you looked at a web page and figured out which elements were styled\nsimilarly. Using those guesses and the classes in the starter code can you\nrecreate the original page?\\r\n\\r\n# Do This\\r\n* Look at the class style\nrules to see what they do. Don't worry if you don't know every property\nyet. Just use the ones you do know.\\r\n* Put elements in the appropriate classes\nto recreate the <a href=\"https://studio.code.org/s/csd2/stage/9/puzzle/2\"\ntarget=\"_blank\"> original page </a>"
      CSDU2 - Header of Page_markdown_instruction: "# Header Area\\r\n\\r\nWebsites\nusually have the same navigation bar across all of their pages so you can\nget back and forth between things on the site. To do this you need to add\nthe navigation links to all the pages on your website.\\r\n\\r\n# Do This\\r\n\\r\n*\nCopy the navigation links section onto all the web pages.\\r\n* Copy any styles\nyou need into the style sheets for those pages."
      CSDU2 - Headers_markdown_instruction: "<div style=\"float: right; height: 250px;\nwidth: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nare headers?**</summary>\\r\nHeaders are the different sized section titles\nthroughout a web page. Headers add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create a header?**</summary>\\r\nYou can make something a header element\nby surrounding it by header tags.  For example:\\r\n<pre> &lt;h1&gt; Header\nText &lt;/h1&gt; </pre> <br> <br>\\r\n\\r\nNotice how there is a the opening\ntag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same\nas the opening tag except it has `/` after the opening angle bracket. The\ntext you want to show as the header goes in the middle of the two tags.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example: \\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is. HTML tags\nadd structure to the content of a web page.\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo you need an opening and closing tag?**</summary>\\r\nYou need both an opening\nand closing tag for many HTML elements because it marks where that structure\nstarts and stops. You don't want all the text on your web page to be a title.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nHeaders\\r\n\\r\nYou may have noticed on the last level that everything you\ntype into the editor is getting smashed together. In order to differentiate\nbetween these different parts we use HTML elements to mark the different parts\nof a web page. In your investigation with the inspector did you come across\nsomething that made headers?\\r\n\\r\n# Do This\\r\n\\r\n* Make your header \"Animals\"\nstand out using the `<h1>` header element."
      CSDU2 - Hobbies Valid Update_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nis Doctype and how do I use it? **</summary>\\r\n&lt;!DOCTYPE html&gt; is always\nthe first thing in an html document because it notifies the computer that\nthis is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;\nis not technically a tag but instead an instruction to the web browser. <br>\n<br>\\r\n\\r\nAdd &lt;!DOCTYPE html&gt; at the very top of your html file.  \\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis the &lt;html&gt; element and how do I use it? **</summary>\\r\n\\r\nThe &lt;html&gt;\ntag notifies the computer where the html starts and ends. The  &lt;html&gt;\ntag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt;\ntag does NOT go inside the html element).  You will need an opening and closing\n&lt;html&gt; tag. This will also make your preview of your website update\nautomatically if there are no issues with your code! <br> <br>\\r\n \\r\nWrap\nall the content of the file in an HTML element using the &lt;html&gt; tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**Why\ndo I need to structure the HTML document this way?**</summary>\\r\nAlthough\nmany modern web browsers can make good assumptions about what language you\nare writing in and where to find different information in your document, you\ndon't want to leave the display of you web page up to chance. To guarantee\nthe best results for displaying your web page on all computers you need to\nassist the computer in figuring out where to find information. <br> <br>\\r\n\\r\nAs\nyou go forward you are going to need two different sections in your HTML file.\nThey will serve different purposes.\\r\n<br><br>\\r\n1. Content of the page<br>\\r\n2.\nInformation about the page<br>\\r\n<br>\\r\nBy breaking up a web page this way\nit is clear where to find the code that is creating the physical output on\nthe web page and which code is just information for the computer about the\npage.<br><br>\\r\n\\r\nIn creating web pages we differentiate between these\ntwo areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt;\nelement contains all the information about the page.  The &lt;body&gt; element\ncontains all the content for a web page.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis a head element?**</summary>\\r\nThe &lt;head&gt; element contains all the\ninformation about the page. This is extra information that is helpful for\nthe computer in displaying your web page but is not the physical content of\nthe web page. \\r\n\\r\nThe &lt;head&gt; element usually comes above the body\nelement but inside the &lt;html&gt; element. For right now it will be blank\nbut later we will learn important things that are added to the head.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\nis the head element different than the header elements? **</summary>\\r\nThe\nheader elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly\non your web page for your user to see. The head tag marks the information\nthat is not user facing in your HTML document. \\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis the body element? **</summary>\\r\n\\r\n The &lt;body&gt; element contains\nall the content for a web page.  The HTML elements for your headers, paragraphs,\nand lists should all go inside the &lt;body&gt; element.\\r\n\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nUpdate Hobbies Page\\r\n\\r\n&lt;!DOCTYPE html&gt;, &lt;html&gt;, &lt;head&gt;,\nand &lt;body&gt; are important to add to your web page. Practice adding them\nto update your Hobbies page. In all future levels they will be included for\nyou so you won't need to add themselves."
      CSDU2 - HobbiesPage_markdown_instruction: "# Hobbies Page\\r\n\\r\nIn this level,\nyou’ll use what you’ve learned to create your Hobbies page. Get creative with\nyour Hobbies Page but make sure it meets the basic requirements in the Checklist\nfirst.\\r\n\\r\n# Checklist\\r\n\\r\n* 1 title with large header size\\r\n* At\nleast 3 medium headers with each hobby name\\r\n* At least 3 small headers\nwith the amount of time you’ve been doing each hobby\\r\n* At least a 2 to\n3 sentence description of each hobby under the hobby’s time inside paragraph\ntags"
      CSDU2 - HobbiesPageExample_markdown_instruction: "# Example Hobbies Page\\r\n\\r\nTO\nDO: Make this an embed level\\r\n\\r\nOn the next level you are going to work\non creating your own Hobbies Page. This is an example of the type of page\nyou are working to create. Come back to this level for reference as needed\nwhile creating your page."
      CSDU2 - Inspector Warm Up_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**<span>\nHow do I use the Inspector Tool? </span>**</summary>\\r\nThe Inspector Tool\nis a great way to figure out what unfamiliar code in Web Lab. To turn on the\nInspector Tool click the <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">. You will know that the Inspector Tool is\non because the button will turn white and say Inspector: On. Once you turn\non the Inspector Tool you can hover over any element in the preview area and\nWeb Lab will highlight the associated code.\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nLanguage Detective\\r\n\\r\nUse the Inspector Tool to check out the code for\nthis website someone created on Web Lab! Focus on the index.html file open\nfor now.\\r\n\\r\nTry to answer the following questions:\\r\n\\r\n* In what ways\nis this language similar to or different from the languages your groups invented\nin the last lesson?\\r\n* What are the rules of this language?\\r\n* How does\nthis language add structure to the website?\\r\n\\r\n**Wait for instructions\nfrom your teacher before going on to the next level.**"
      CSDU2 - Internet Speed Test_markdown_instruction: "# Peer Review\\r\n\\r\nToday\nyou are going to have other people look at your website and give feedback\non it.\\r\n\\r\n# Do This\\r\n\\r\n* Leave this open on your screen so your peer\nreviewers can look at your work"
      CSDU2 - Intro to CSS_markdown_instruction: "# Style Element\\r\n\\r\nUp until\nnow you have only been able to add content to your page. In Web Developers\nintentionally separate content and style to make their code easier to maintain.  HTML\nis the language used to add content to a web page. CSS is a language that\nadds style to a web page. \\r\n\\r\nIn CSS style rules are used to style certain\nelements of HTML.  Style rules explicitly call out certain properties of the\nelement to be styled. To add CSS style rules to an HTML page, you need to\nfirst add an HTML `<style>` element. This signals to the web browser that\nall the stuff inside the `<style>` element is CSS styling instructions. \\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Add the `<style>` element right below the opening `<html>`\ntag. \\r\n\\r\nWe will add CSS to change the look of the page on the next level!"
      CSDU2 - Intro to Validator_markdown_instruction: "# Validator\\r\n\\r\nThe validator\nis a tool that allows you to check if a page is following good HTML fundamentals\nand will work consistently across many different computers and web browsers.\\r\n\\r\n#\nDo This\\r\n\\r\nUse the validator to check if the web page on this level meets\nthe requirements for consistent web pages. To use the validator, it’s important\nto work on it one error at a time.\\r\n\\r\n1. Open up the <a href=\"https://validator.w3.org/\"\ntarget=\"_blank\">W3 validator</a>.\\r\n2. Click **\"Validate by Direct Input\"**\\r\n3.**\nCopy and paste the contents of index.html** file into the box.\\r\n4. Click\n**“Check”**\\r\n5. If there is an error message click the top error below:\\r\n\\r\n\\t*\n<a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\"> Unable to Determine\nParse Mode! </a>\\r\n\\t* <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\">\nNo DOCTYPE found, and unknown root element. Aborting validation. </a>\\r\n    *\n<a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/5\"> Element head\nis missing a required instance of child element title. </a>\\r\n    * <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/5\">\nElement title must not be empty.</a>\\r\n    * <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\">\nStart tag seen without seeing a doctype first. Expected e.g. <!DOCTYPE html>.</a>\\r\n\\r\n\\tOnce\nyou fix the error start again at step 1.\\r\n\\r\n6. If there are no error messages\n<a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/6\">click here </a>\nto head to the next set of levels!"
      CSDU2 - Link Tag_markdown_instruction: "# Link Element\\r\n\\r\nIn the last level\nyou moved your style out into an external style sheet. You may have noticed\nthough that the style was no longer appearing on the page. To get the style\nto apply to the web page we need to connect the html and css files.\\r\n\\r\n**To\nlink sheets you will need to add a `<link>` element.** The `<link>` element\ngoes inside the `<head>` element since it is information about the page and\nnot content of the page. You can link a stylesheet to multiple pages if you\nwant them all to have the same style.\\r\n\\r\n`<link>` element has two main\nattributes: `rel` and `href`.\\r\n\\r\n* As you learned before for images the\n`href` attribute is the file path, in this case just the same of the CSS file.  \\r\n*\nThe `rel` attribute indicates the relationship that the linked file has to\nthe current file, in this case its a stylesheet.\\r\n\\r\nFor example:\\r\n<pre>\\r\n&lt;head&gt;\\r\n    &lt;link\nrel=\"stylesheet\" href=\"styles.css\"&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\n#\nDo This\\r\n\\r\n* For the index.html link the css file using the `<link>` element\nin the `<head>` element"
      CSDU2 - Link and Nav_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nare hyperlinks?**</summary>\\r\nHyperlinks can connect to local web pages or\nexternal web pages. To add navigation to your website you will need to add\nhyperlinks which connect your individual web pages. You can **add hyperlinks\nto your web page using the `<a>` element**.  The text you want to display\nas the hyperlink goes between the opening and closing hyperlink tags. The\n`<a>` element has an attribute `href` which is the location to link to.  The\nlocation of a local page is just the file path for that page. <br> <br>\\r\n\\r\nFor\nexample to link to the unique houses page you would add the following code\ninside your `<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt;\nUnique Houses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I add a hyperlink?**</summary>\\r\nYou can **add hyperlinks to your web\npage using the `<a>` element**.  The text you want to display as the hyperlink\ngoes between the opening and closing hyperlink tags. The `<a>` element has\nan attribute `href` which is the location to link to.  The location of a local\npage is just the file path for that page. <br> <br>\\r\n\\r\nFor example to\nlink to the unique houses page you would add the following code inside your\n`<body>` element. <br><br>\\r\n\\r\n<pre>\\r\n&lt;a href=”houses.html”&gt; Unique\nHouses &lt;/a&gt;\\r\n</pre>\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\n# Hyperlink\nElement\\r\n\\r\n* In the index.html file, find the line of code that says `<a\nhref=\"houses.html\">Odd Houses</a>`.  This is a link that will take you to\nthe Odd Houses page at `houses.html`.\\r\n* Discuss with a partner how the\ncode works.\\r\n * Where does the file name go?\\r\n * Where does the label\nof the link go?\\r\n* Below the hyperlink to the Odd Houses page add two new\nhyperlinks (`<a>`) to the following pages:\\r\n    * Crazy Signs Page\\r\n    *\nGuinness Book of World Records Page\\r\n* Test it out to see if clicking the\nlinks take you to the other pages of your site."
      CSDU2 - Local Images_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I add images?**</summary>\\r\nThe `<img>` tag allows you to show images\non your web page. <br><br>\\r\n\\r\nExample:\\r\n<pre>&lt;img src=\"dog.png\"\nalt=\"dog jumping\"/&gt;</pre><br><br>\\r\n\\r\nIn order to tell the browser\nwhich file to use, extra information, called an **attribute**, is added to\nthe &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e\nand tell the name of the image. Image files names include extensions which\ntell the computer which type of image they are working with. Common extensions\nare .jpg, .jpeg, .png. <br><br>\\r\n\\r\nIn addition to have the src attribute,\nimage elements also have the `alt` attribute which describe the image. This\nis important in case the image doesn’t load or for people who have trouble\nwith their eyesight. <br><br>\\r\n\\r\nAn `<img>` tag is an example of a  **void\nelement** because it starts and closes in one tag. To mark this we put the\n`/` which usually goes in the close tag at the end of the image tag.\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis a void tag?**</summary>\\r\nAn `<img>` tag is an example of a  **void element**\nbecause it starts and closes in one tag. To mark this we put the `/` which\nusually goes in the close tag at the end of the image tag. Void tags do not\nneed a closing tag because there is no text content which must be wrapped\nin tags. The content that shows on the screen is specified through the tags\nattributes.\\r\n</details>\\r\n<details>\\r\n<summary>**Why does an image tag\nnot have a closing tag?**</summary>\\r\nAn image tag is a void tag and void\ntags do not need a closing tag because there is no text content which must\nbe wrapped in tags. The content that shows on the screen is specified through\nthe tags attributes.\\r\n</details>\\r\n<details>\\r\n<summary>**What is an attribute?**</summary>\\r\nAttributes\nare extra information included in a tag.  Attributes have names and values.\nThe name tells what type of information is being provided and then the value\ngives the specific information for that tag. \\r\n\\r\nFor example &lt;img&gt;\ntags have two attributes, src and alt. src specifies the name of the image\nfile and alt tells the browser in readable text what the image is.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nImages\\r\n\\r\nA Dog vs Cat web page has been started for you. The dog image\nhas already been added to the below web page. Use an image tag to add the\ncat.jpeg image to the page below the cat header."
      CSDU2 - Matching Class Style Checker_markdown_instruction: "# Check your matching\nanswers\\r\n\\r\nTest out your guesses from the matching activity by applying\nthe class styling to the elements and see if it produces the same result.\nThe results from the slide show are shown below.\\r\n\\r\n| Question 1 | Question\n2 | Question 3 | Question 4 | Question 5 |\\r\n| ---------- | ---------  |\n---------- | ---------- | ---------- |\\r\n| <img src=\"https://images.code.org/702e804602dbf28874f516f1578fd883-image-1475259238611.54.05\nPM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/7f6a2c9561213f6b5c8c9285f94ae850-image-1475259241204.25.16\nPM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/291f01b170f9242a26f04f8eb8296471-image-1475259238611.52.46\nPM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/81c9db1d1258f0fd709ba4508806388c-image-1475259238611.53.08\nPM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/43df26d786235bf2402854b56c8bbcf5-image-1475259238610.50.22\nPM.png\" style=\"width:250px\"> |"
      CSDU2 - Missing Home Link_markdown_instruction: "# Missing Home Link\\r\n\\r\nCopying\nyour hyperlinks to all your pages allowed you to get to most of the pages\non your website from any other page. One hyperlink is missing - the one to\nget you to your home page (index.html).\\r\n\\r\n**Add a hyperlink to your home\npage from all the pages, even your home page itself.** Adding it to your home\npage will keep your navigation header consistent on all pages."
      CSDU2 - Multi Site First_markdown_instruction: "# Making a Multi-page Site\\r\n\\r\nA\nweb site should include more than one web page, and they should connect to\neach other.  The first multi-page site you make will be a site of Odd Stuff.  Most\nof the site is already here, but you will need to add your Guinness Book of\nWorld Records page.\\r\n\\r\n* In the list of project files, find index.html\nand click on it.   **index.html is used in Web Lab to mark the home page of\na website**, the first page that your visitors will see.\\r\n* Click on some\nof the other HTML files.  These are also web pages, but they have different\nnames.  **Every file needs a unique name that will help you know what it is.**\\r\n*\nLook around through all the files provided. Can you figure out which style\nsheets go with which web pages?"
      CSDU2 - Nav add to Personal Site_markdown_instruction: "# Navigation on Personal\nWebsite\\r\n\\r\nNow that you have all the files for your website, connect them\ntogether!\\r\n\\r\n# Do This\\r\n\\r\n* Add hyperlinks at the top of your index.html\nfile for every page on your site (including the index.html page).\\r\n* In\nyour style sheet, create a rule-set for the `a` tag that gives it the style\nthat you want.\\r\n* Copy the hyperlinks and put them in every page.\\r\n\\r\n\\r\n*\nAdd the `a` rule-set to every style sheet, or combine your style sheets to\nmake your entire page have the same look and feel!\\r\n\\r\nOnce your website\nis set up and connected, feel free to make improvements to any pages on your\nwebsite.\\r\n\\r\nBefore leaving this level:\\r\n* Take a screenshot of your\nhome page and save it somewhere on your computer so you can find it later\n(*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)\\r\n\\r\n## Check List\\r\n\\r\n* All of your web pages are individual\nHTML files in this Portfolio Project"
      CSDU2 - Nav on Personal Website_markdown_instruction: "# Multi-Page Personal\nWebsite\\r\n\\r\nNow that you know how to set up a website, go ahead and set\nup your own personal website.\\r\n\\r\n# Do This\\r\nYour personal website is\nback. So far you have just your personal home page.\\r\n\\r\n* Add html files\nfor each of the Hobbies Page, Recipe Page, and About Me page\\r\n* Copy the\ncode from the following levels <a href=\"https://studio.code.org/s/csd2-old/stage/4/puzzle/13\"\ntarget=\"_blank\">Hobbies Page</a>, <a href=\"https://studio.code.org/s/csd2-old/stage/4/puzzle/17\"\ntarget=\"_blank\">Recipe Page</a>, and <a href=\"https://studio.code.org/s/csd2-old/stage/8/puzzle/12\"\ntarget=\"_blank\">About Me page</a> into the files you created.\\r\n* Add a\nCSS file for your <a href=\"https://studio.code.org/s/csd2-old/stage/8/puzzle/12\"\ntarget=\"_blank\">\"About Me\" page style sheet</a>."
      CSDU2 - New Class Files_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**Why\nis the style sheet not working? **</summary>\\r\nCheck in the HTML of the records\npage to make sure that your link (`<link rel=\"stylesheet\" href=\"nameofstylesheet.css\">`)\nis linking to the correct CSS file.\\r\n</details>\\r\n</div>\\r\n# Making a\nMulti-page Site\\r\n\\r\nYou may notice that your styles for your Guinness Book\nof World Records don't seem to be working. Can you figure out why? \\r\n\\r\n**Hint:**\nWhen you brought over your code you had to change the name of the style sheet\nfrom \"style.css\" to something else."
      CSDU2 - New Html Files_markdown_instruction: "# Adding HTML and CSS\\r\n\\r\nYou\nwill need to add your Guinness Book of World Records page. First create an\nHTML and CSS file. On the next level you will bring over the code.\\r\n\\r\n##\nAdding File\\r\n* Add a new HTML file by clicking the \"Add HTML\" button.\\r\n*\nRename the file, either by right clicking it and choosing \"Rename\", or by\nclicking on it when it's already highlighted.  **Make sure the name is unique,\ndescriptive and ends in \".html\"**.\\r\n* Create a new CSS file and rename\nit, too."
      CSDU2 - PW - Class Style Personal Site - OLD_markdown_instruction: "# Free\nPlay Styling\\r\n\\r\nYour turn to decide what you want to style! Play with\nthe classes styling and RGB colors to improve your personal website.\\r\n\\r\n*\nMake sure you have completed the checklist below.\\r\n* Take a screenshot of\nyour home page and save it somewhere on your computer so you can find it later.\\r\n\\r\n##\nChecklist\\r\n\\r\n* Somewhere on your site, give text a particular color using\nRGB values.\\r\n* On your lists page, give all the list items the same background\ncolor.\\r\n* Use classes to style at least 2 other elements of your personal\nwebsite"
      CSDU2 - PW - Class Style Personal Site_markdown_instruction: "# Free Play Styling\\r\n\\r\nYour\nturn to decide what you want to style! Play with the classes styling and RGB\ncolors to improve your personal website.\\r\n\\r\n* Make sure you have completed\nthe checklist below.\\r\n* Take a screenshot of your home page and save it\nsomewhere on your computer so you can find it later.\\r\n\\r\n## Checklist\\r\n\\r\n*\nSomewhere on your site, give text a particular color using RGB values.\\r\n*\nOn your lists page, give all the list items the same background color.\\r\n*\nUse classes to style at least two other elements of your personal website"
      CSDU2 - PW - Class Style Personal Site_2018_markdown_instruction: "# Free Play\nStyling\\r\n\\r\nYour turn to decide what you want to style! Play with the classes\nstyling and RGB colors to improve your personal website.\\r\n\\r\n* Make sure\nyou have completed the checklist below.\\r\n* Take a screenshot of your home\npage and save it somewhere on your computer so you can find it later.\\r\n\\r\n##\nChecklist\\r\n\\r\n* Somewhere on your site, give text a particular color using\nRGB values.\\r\n* On your lists page, give all the list items the same background\ncolor.\\r\n* Use classes to style at least two other elements of your personal\nwebsite"
      CSDU2 - PW - Classes on Recipe_markdown_instruction: "# Classes on Recipe Page\\r\n\\r\nIn\nthe next few levels, as a little more practice with style, you will style\nsome of the elements on your recipe page in order to give the appearance of\na notecard. You will want to make the background of the ingredients list and\nthe directions lists look like notecards.\\r\n\\r\n# Do This\\r\n\\r\n* In the\nrecipe page add the ordered list for directions to the \"notecard\" class\\r\n*\nIn the recipe page add the unordered list for the ingredients to the \"notecard\"\nclass\\r\n* Add a style rule for the notecard class but don't put anything\nin it. You will start working on it on the next level."
      CSDU2 - PW - Consistent Personal Site Style_markdown_instruction: "# Consistent\nStyle\\r\n\\r\nYour site’s pages might look crazy since you pulled together\nthe style of all the pages in the last level. It is time to work on that by\ncreating classes for style exceptions.\\r\n\\r\n# Do This\\r\n\\r\n* Identify\nthe exceptions to the style rules such as the note card styling\\r\n* Use classes\nto separate the styling of those unique elements\\r\n* Move the styling for\nthose classes into your style.css file\\r\n* Get ride of all `<style>` elements\nand the style rules inside them\\r\n* Your website should now have a consistent\nlook!"
      CSDU2 - PW - Divs to break up the page_markdown_instruction: "# Header and\nContent Divs\\r\n\\r\nGrouping together the different sections of a web page\nwill make styling the web page easier. It also helps make clear to the user\nwhere to look for different content. You saw an example of this earlier in\nthe levels.\\r\n\\r\n# Do This\\r\n\\r\n* Put all the elements for the navigation\nof the website and the title of the website in div if it not already\\r\n*\nSet the class of that div to be \"header\"\\r\n* Put all the rest of the elements\non the page in a different div \\r\n* Set the class for the second div to be\n\"content\"\\r\n* These will get styled on the next level!"
      CSDU2 - PW - ESS Final touches_markdown_instruction: "# Finalizing Styling\\r\n\\r\nYou\nshould have completed styling your page with an external style sheet. Now\nit is time to finish up anything you still want to work on.\\r\n\\r\n# Do This\\r\n\\r\n*\nGo over the checklist below to make sure you have completed everything\\r\n*\nWork on continuing to improve your website!\\r\n* Take a screenshot of your\nhome page and save it somewhere on your computer so you can find it later\n(*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)\\r\n\\r\n## Checklist\\r\n\\r\n* Picked and used a font pair consistently\nacross your website\\r\n* Pick and used a color set of no more than 4 primary\ncolors across your website. It is okay if you use different shades of those\ncolors as well.\\r\n* All style rules are in an external style sheet named\nstyle.css\\r\n* The style.css file is linked to all pages on the website\\r\n*\nEach page has:\\r\n\\t* Header div with the title of the website, the logo for\nyour website, and the navigation bar\\r\n    * Content div with the main content\nof the web page\\r\n    * The logo as the favicon for that page\\r\n* Clicking\nthe logo on any page will take you back to the home page"
      CSDU2 - PW - External Style Sheets_markdown_instruction: "# External Style\nSheet\\r\n\\r\nAlright you just learned how to add an external style sheet to\ncreate consistent style across a website. When there are specific things you\nwant to style differently you have practiced using classes. It is time to\nuse these in your Personal Website. To start, get all the style into one external\nstyle sheet linked to each web page.\\r\n\\r\nYou can mark the different sections\nof the .css file with comments. Comments in CSS use different notation than\ncomments in HTML. Comments in CSS look like this: `/* This is a comment */`\\r\n\\r\n#\nDo This\\r\n\\r\n* Create a CSS file and name it style.css\\r\n* Cut/Paste the\nCSS code from your <a href=\"\" target=\"_blank\">style tester level</a> to\nstyle.css\\r\n* Link the stylesheet to each document in a project."
      CSDU2 - PW - Favicon_markdown_instruction: "# Favicon\\r\n\\r\nSince you have\na logo for your website it would also be cool to have it be small image associated\nyour website. The small image associate with your website is called a **favicons**.\nFavicon is short for favorite icon. It displays in the tab for a website,\nwhen a website is bookmarked, and sometimes in the browsers address bar.\\r\n\\r\nFor\nexample when you open a tab for Code.org it might look like this. The icon\non the left is the favicon.\\r\n\\r\n<img src=\"https://images.code.org/9db8bd43bf27355cd6ed799358775140-image-1475697356699.55.40\nPM.png\">\\r\n\\r\nFavicons are metadata for the website since they are used\nby the web browser and not content on the web page itself. Therefor they are\nincluded in the `<head>` element. To add the favicon you use the `<link>`\nelement. The `href` still is the file path but the `rel` is \"shortcut icon\".\\r\n\\r\nFor\nExample:\\r\n\\r\n<pre>\\r\n&lt;head&gt;\\r\n\\t&lt;link rel=\"shortcut icon\"\nhref=\"logo.png\" /&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n*\nSet your icon to be the favicon for your website. You need to add it to every\npage for it show up on each page."
      CSDU2 - PW - Final Classes Style_markdown_instruction: "# Note Card Styling\\r\n\\r\nNow\nthat you have the background of the note cards, you can finish up the styling\nof the note card. \\r\n\\r\nBefore you start styling it is important to know\nsomething about borders. So far you have controlled all four-sides of a border\nat the same time. Sometimes you want to style just one border edge at a time.\nTo do this we just add the name of the side to the property.  For example:\\r\n\\r\n<pre>\\r\np\n{\\r\n\\tborder-top-color: green;\\r\n\\tborder-bottom-style: solid;\\r\n\\tborder-right-width:\n20px;\\r\n}\\r\n</pre>\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/b38ebda06d6ce76bd59aa93fa050290c-image-1475159743251.30.18\nAM.png\" style=\"width:400px;float:right\">\\r\n\\r\nStyle the note card so\nit looks similar to the image on the right.\\r\n\\r\n* Make the writing on the\nnote card look like handwriting by using the font-family property and coloring\nit different than the rest of the text on the page\\r\n* Make all note cards\nhave a fixed width by setting the width of the notecard class to 500 pixels\\r\n*\nMake the note card pop and look 3D using border properties.\\r\n\\t* Set the\nborder color to the same color as the background of the card.\\r\n    * Set\nthe style to `outset`\\r\n    * Set the width to a small number of pixels\\r\n*\nStyle the bottom border of all li elements to be black, solid, and 1 pixel.\\r\n*\nStyle the bottom border of all h3 elements to be red, solid, and 1 pixel."
      CSDU2 - PW - Image as A Link_markdown_instruction: "# Image as a Link\\r\n\\r\nNow\nthat you have a logo lets add it to your website. It will go on every individual\npage in your header with your navigation and website title. Often clicking\non the logo of a website will take you back to the home page of a website.\nSo we will set that up as well.\\r\n\\r\nTo make an image also a link we just\nwrap the `<img>` element in a `<a>` element.\\r\n\\r\n<pre>\\r\n&lt;a href=\"index.html\"&gt;\n&lt;img src=\"logo.png\" alt=\"logo\"&gt; &lt;/a&gt;\\r\n</pre>\\r\n\\r\n# Do\nThis\\r\n\\r\n* Upload your logo to your project.\\r\n* Insert the logo using\nan `<img>` element in the header div of each page\\r\n* Make the image a link\nby surronding the `<img>` element in an `<a>` element that directs to the\nindex.html page"
      CSDU2 - PW - Pre Publishing 2_markdown_instruction: "# HTML Tags Check\\r\n\\r\nThe\nnext check should be for bugs or issues with your HTML. \\r\n\\r\n# Do This\\r\n\\r\n*\nMake sure you are viewing your index.html file on Web Lab\\r\n* Open your Web\nDevelopment Practices to page 2\\r\n* Read through the list of basic HTML tags\nyou have seen\\r\n* Check through your page to make sure you are using the\ntags correctly and not missing tags"
      CSDU2 - PW - Pre Publishing 3_markdown_instruction: "# Bugs Check\\r\n\\r\nThe\nnext check should be for general bugs.\\r\n\\r\n# Do This\\r\n\\r\n* Open your\nWeb Development Practices to page 3\\r\n* Read through the list of bugs you\nhave seen\\r\n* Check through your page to make sure none of those bugs are\nappearing in your current website"
      CSDU2 - PW - Pre Publishing 4_markdown_instruction: "# CSS Properties Check\\r\n\\r\nThe\nnext check should be for styles you still want to add or fix.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Make sure you are viewing your style.css file on Web Lab\\r\n*\nOpen your Web Development Practices to page 4\\r\n* Read through the list of\nbasic CSS properties you have seen\\r\n* Think about if there are styles you\nstill want to add or improve"
      CSDU2 - PW - Pre Publishing 5_markdown_instruction: "# Personally Identifiable\nInformation Check\\r\n\\r\nEarlier in this lesson you made a list of information\nyou would not want to give away on your website. Use that list to check your\nsite. This is the most important step before publishing your website for all\nto see.\\r\n\\r\n# Do This\\r\n\\r\n* Open your Web Development Practices to page\n5\\r\n* Read through your list of rules for protecting your PII\\r\n* Be a sleuth\non your own page and make sure people can not find out that important information\nyou want to protect.\\r\n* Remove the information you don't want people to\nknow. This doesn’t have to mean stripping all of the personal importance out\nof your site, it can be as simple as cropping an image to remove faces or\nreplacing your school’s name with “my school”."
      CSDU2 - PW - Pre Publishing 6_markdown_instruction: "# Publishing!\\r\n\\r\nIt\nis time to share your website!\\r\n\\r\n# Do This\\r\n\\r\n* Check your website\none more time to make sure you are ready to share it with others\\r\n* Notice\nthe \"Share\" button has appeared at the top of the screen.\\r\n* Click the\nshare button and copy the URL for your website.\\r\n* Send that URL to friends\nand family as instructed by your teacher.\\r\n\\r\nIf you made changes to your\nhome page during class make sure to take a screenshot of your home page and\nsave it somewhere on your computer so you can find it later (*Need help with\nhow to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)"
      CSDU2 - PW - Pre Publishing Access_markdown_instruction: "# Accessibility Check\\r\n\\r\nThe\nnext check should be for accessibility issues.\\r\n\\r\n# Do This\\r\n\\r\n* Open\nyour Web Development Practices to page 5\\r\n* Read through the list of accessibility\nissues you had identified\\r\n* Make sure you fixed all the issues you had\nlisted\\r\n* Check for any new content you have added for accessibility issues"
      CSDU2 - PW - Pre Publishing Check_markdown_instruction: "# High Quality Features\nCheck\\r\n\\r\nUse your Web Development Practices - Project Guide to review\nyour website for publishing. First you will look at the list of features you\nsaid you thought made something a high quality website to make sure you are\ndoing those things.\\r\n\\r\n# Do This\\r\n\\r\n* Open your Web Development Practices\nto page 1\\r\n* Read through the feature list\\r\n* Pick a couple features you\nmight want to improve after reading the list"
      CSDU2 - PW - Publish It_markdown_instruction: "# Publish It\\r\n\\r\n\\r\n# Do\nThis\\r\n\\r\n* Publish it"
      CSDU2 - PW - RGB color_markdown_instruction: "# RGB Color\\r\n\\r\nIn order to\nget a nice “fake” notecard color, you will have to break out from the named\ncolor values given in Web Lab. \\r\nInstead, you will be using the RGB function,\nwhich takes three values, the amount of red, green and blue you want in  your\ncolor. Each component of the color (red, green, blue) can have a value of\n0 to 255. Where 0 means the component color is not present or dark and 255\nmeans it is full present or bright.\\r\n\\r\nFor example:\\r\n\\r\n<pre>\\r\n\\r\nh1\n{\\r\n\\tcolor: rgb(120, 0, 255);\\r\n}\\r\n</pre>\\r\n\\r\nTo explore RGB colors\ngo to <a href=\"http://www.w3schools.com/colors/colors_rgb.asp\">W3 Schools\n- RGB Colors </a>. There is a tool for you to play around with different RGB\nvalues.\\r\n\\r\n# Do This\\r\n\\r\n* Play with the <a href=\"http://www.w3schools.com/colors/colors_rgb.asp\">W3\nSchools - RGB Colors </a> tool and find a color similar to this color: <img\nsrc=\"https://images.code.org/2de78dc9667e9e6c77dc5e28b1de6b0d-image-1475095252137.40.30\nPM.png\" style=\"width:50px\">\\r\n\\r\n* Set the `background-color` of the\nnotecard class to the yellow you just created.\\r\n\\r\n*Hint: Yellow is a **bright**\ncolor with **equal amounts of red and green**. *"
      CSDU2 - PW - Title for Your Site_markdown_instruction: "# Website Title\\r\n\\r\nin\nhead element need to add title element with your title\\r\n\\r\nshows up in\nthe name of the tab\\r\n\\r\n# Do This\\r\n\\r\n* Stuff"
      CSDU2 - PW - Validate Your Website_markdown_instruction: "# Validator\\r\n\\r\nThe\nHTML is designed to display the same way on all computers, but sometimes you’ll\nnotice that different web browsers, or even different versions of the same\nbrowser, display a website differently. Often this is because you either missed\na rule of HTML, or didn’t describe your content specifically enough. Fortunately\nthere’s a tool called the Validator that can check your code for errors!\\r\n\\r\n#\nDo This\\r\n\\r\n* Open up the <a href=\"https://validator.w3.org/#validate_by_input\"\ntarget=\"_blank\">Validator - Website</a>\\r\n* For each html file in your\nproject\\r\n\\t* Copy the html into the box\\r\n    * Click check to see if there\nare an error\\r\n\\t* Make a list of all unique errors.\\r\n    * For each error,\nwrite in your own words what you think it means\\r\n    * For each error, search\nto find a potential solution."
      CSDU2 - Paragraphs 2_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nis a paragraph element?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. Paragraphs in HTML can be any length of\ntext from one word to a bunch of sentences. All of your text in your web page\nshould be contained in an HTML element (headers or paragraphs). Paragraphs\ngroup together sets of sentences and put some space between that group of\ntext and the next group of text.\\r\n</details>\\r\n<details>\\r\n<summary>**How\ndo I create multiple paragraphs?**</summary>\\r\nParagraphs are marked by opening(`<p>`)\nand closing(`</p>`) tags as well. To create more than one paragraph you will\nwant multiple sets of opening and closing `<p>` tags. For example\\r\n<pre>\\r\n\\t&lt;p&gt;\\r\n    \\tThis\nis a paragraph.\\r\n    &lt;/p&gt;\\r\n\\t&lt;p&gt;\\r\n    \\tThis is another\nparagraph.\\r\n    &lt;/p&gt;\\r\n</pre>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example: \\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nParagraphs\\r\n\\r\nNow that you have a header try to separate the two sentences\nlike the example below using the paragraph element.\\r\n\\r\n<img src=\"https://images.code.org/12f8d4230fcd2144a5880815c8375149-image-1480364278934.12.18\nPM.png\" style=\"width:300px\">"
      CSDU2 - Paragraphs 3_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I make different sized headers?**</summary>\\r\nHeaders come in 6 different\nsizes. So far you have primarily used the biggest one &lt;h1&gt;. The number\n1 in the HTML tag designates that this is the biggest header. The smallest\nheader is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nand &lt;h5&gt; tags which get smaller as the number gets larger.\\r\n</h1>\\r\n</details>\\r\n<details>\\r\n<summary>**What\nare headers?**</summary>\\r\nHeaders are the different sized section titles\nthroughout a web page. Headers add structure to your web page by breaking\nit up so its easier for a user to read.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example: \\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nHeader Sizes\\r\nAdd the names of your favorite animals above the sentence\nthey go with. Make the names of the animals smaller headers than the \"Animals\"\ntitle for the page. See the example below.\\r\n\\r\n<img src=\"https://images.code.org/1462f452bd2d983902f47e275da9fa90-image-1481137414337.03.11\nPM.png\" style=\"width:250px\">"
      CSDU2 - Priority of CSS Rules_markdown_instruction: "# Priority of CSS Rules\\r\n\\r\nOn\nthe last level you moved all the style rules to one style.css file that is\nlinked to both web pages on the website. You may have noticed that the way\nsome of the styling of the elements on the two pages changed. Over the next\ncouple levels you will be working to fix this.\\r\n\\r\n## Multiple Rules for\nOne Element\\r\n\\r\nBy copying the style rules from two different pages into\none style sheet we created a couple cases where we have two style rules for\none element. Style rules are applied from top to bottom so when there are\nmultiple style-rules for the same properties of one element the one closer\nto the bottom is the one that will appear.\\r\n\\r\nFor example if you had the\nfollowing style rules.\\r\n\\r\n<pre>\\r\np{\\r\n  background-color: blue;\\r\n}\\r\np{\\r\n  background-color:\nred;\\r\n}\\r\n</pre>\\r\n\\r\nThe pargraph elements would have a red background.\\r\n\\r\nTo\nfix this issue the best thing to do is have one rule for each type of element.\\r\n\\r\n#\nDo This\\r\n\\r\n* There are two style rules for `<div>` elements. They are\nboth the same. Delete one of them.\\r\n* There are two style rules for `<body>`\nelements. They are **different** but both just control the `background-color`\ndecide which of the two you would like to keep and get rid of the other one.\\r\n*\nLeave the duplicate `<img>` element style rules for now we will deal with\nthem on the next level."
      CSDU2 - Recipe Page Start_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example:<br>\\r\n\\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is. HTML tags\nadd structure to the content of a web page.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nRecipe Page\\r\n\\r\nYou are going to start a new web page. This will be a favorite\nrecipe page. It will take a couple levels to build the page.  Use your knowledge\nfrom earlier in class to start getting it set up.\\r\n\\r\n# Do This\\r\n\\r\n*\nTake out your recipe you picked.\\r\n* Using a large header tag, put the name\nof the recipe at the top of the page.\\r\n* Create three smaller headers: Description,\nIngredients, and Instructions.\\r\n* Add a paragraph element under the \"Description\"\ndescribing the dish the recipe creates."
      CSDU2 - Recipe Valid Update_markdown_instruction: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**How\ndo I alert the web browser what language I'm writing in?**</summary>\\r\n\\r\nYou\nwill need to add two things to your HTML document, Doctype and an html element.\n\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Why do I need to add these\nelements?**</summary>\\r\n\\r\nWhen a web browser is trying to read your document\nit looks for alerts which tell it which language you are using. In order to\nlet the web browser know that this is an html document you need to tell it\nwhat type of document it is deal with (Doctype) and where to find the code\n(inside the html element).\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis DOCTYPE and how do I use it? **</summary>\\r\n&lt;!DOCTYPE html&gt; is always\nthe first thing in an html document because it notifies the computer that\nthis is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;\nis not technically a tag but instead an instruction to the web browser. <br>\n<br>\\r\n\\r\nAdd &lt;!DOCTYPE html&gt; at the very top of your html file.  \\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis the HTML element and how do I use it? **</summary>\\r\n\\r\nThe &lt;html&gt;\ntag notifies the computer where the html starts and ends. The  &lt;html&gt;\ntag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt;\ntag does NOT go inside the html element).  You will need an opening and closing\n&lt;html&gt; tag. This will also make your preview of your website update\nautomatically if there are no issues with your code! <br> <br>\\r\n \\r\nWrap\nall the content of the file in an HTML element using the &lt;html&gt; tag.\\r\n\\r\n</details>\\r\n\\r\n</div>\\r\n\\r\n#\nDoctype and HTML tag\\r\n\\r\nThis is your Recipe page from the last lesson.\nUpdate it with elements that alert your browser which language the document\nwas written in by adding DOCTYPE and &lt;html&gt; elements.\\r\n\\r\n![](https://images.code.org/f75e718b8e40870e7b6d87c0efdfc0ae-image-1481320053480.png)"
      CSDU2 - SEO 1_markdown_instruction: "# Personal Website: Search Engine Optimization\\r\n\\r\nYou\nare going to update your website to optimize for finding it on a search engine.\nIt is important to know that your website might not be easy to find on a search\nengine.  This might be partially a result of improvements you could make to\nyour website. However since your website is hosted by Code.org and does not\nhave a descriptive URL it might be harder to find.\\r\n\\r\n# Do This\\r\n\\r\n*\nRun your website through the <a href=\"http://www.seocentro.com/tools/seo/seo-analyzer.html\"\ntarget=\"_blank\"> SEO </a>\\r\n* Write down the issues it highlights with\nyour website\\r\n* We will learn how to fix some of those issues in the next\ncouple levels however some may be things you want to investigate on your own\nlater such as Social Media presence."
      CSDU2 - SEO 2_markdown_instruction: "# Search Engine Optimization: Title\\r\n\\r\nOne\npiece of metadata that should be included in every web page you create is\nthe website title. Although you may put an `<h1>` element on your page content\nwith the title of your website, the computer does not necessarily know that\nis the title as there may be multiple `<h1>` tags on your page. To make clear\nto the computer what the title is the `<title>` element is added as metadata\nin the `<head>` element. Every page on your website needs it own title.\\r\n\\r\nExample:\\r\n<pre>\\r\n&lt;head&gt;\\r\n\\t&lt;title&gt;\nMy Website Title&lt;/title&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\nThis `<title>`\nelement is not displayed anywhere on the page but the browser may use it to\nput a name in the tab of your web browser or display it when someone searches\nfor your website. In fact titles are very important to search engines because\ntitles are often a primary piece of information looked at by users to decide\nwhich websites fulfill their needs.\\r\n\\r\n*Sometimes search engines will\nstill generate their own title for your page based on the user search and\nwhat the algorithm of the search engine thinks is best for supporting what\nthe user is looking for.*\\r\n\\r\n## Guidelines for Creating Good Titles\\r\n\\r\nSince\ntitles are so important you will want to make sure you have good titles for\nall the pages of your website. Here are a couple practices for making good\ntitles. \\r\n\\r\nMake your title:\\r\n* **Descriptive:** Make sure your title\nexplains what someone will find on that page.\\r\n* **Concise:** Keep your\ntitle short. 5 words or less.\\r\n* **Individual:** Don't use the same title\nfor multiple pages.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `<title>` element to each\nweb page on your website"
      CSDU2 - SEO 3_markdown_instruction: "# Search Engine Optimization: Description\\r\n\\r\nAnother\nimportant piece of meta data used by search engines is the description. The\ndescription is added using the `<meta>` element. It has two attributes, the\nname and the content. The content is where the actual description goes. **Every\npage should have its own description.**\\r\n\\r\n<pre>\\r\n&lt;head&gt; \\r\n\\t&lt;meta\nname=\"description\" content=\"Your meta description goes here \" /&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\nJust\nlike the title tag this will not show up physically on the page but will be\nused by search engines to display information about your page. Sometimes the\ndescription will also be used when you share the link on social media platforms.\n\\r\n\\r\n*Just like titles the search engine might decide it knows best and\ngenerate a description for the page that is different than the one you provided.*\\r\n\\r\n##\nWhat goes in a description?\\r\n\\r\nA good description will follow these guidelines:\\r\n\\r\n*\n**Descriptive:** Unique description of what someone will find on this page\\r\n*\n**Keywords:** Uses keywords in full sentence descriptions which someone might\nuse to search for your page\\r\n* **Short:** Less than 150 characters\\r\n*\n**Avoid Special Characters:** Don't use special characters such as ‘”<>{}[]()\\r\n*\n**Enticing:** It makes someone want to look at your web page.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Add descriptions to each web page on your website using the\n`<meta>` tag \\r\n* Test it out!\\r\n\\t* Open <a href=\"http://www.seocentro.com/tools/seo/seo-analyzer.html\"\ntarget=\"_blank\"> SEO </a>\\r\n    * Re-load the results for your page to\nuse the most updated version\\r\n    * Under the <img src=\"https://images.code.org/01e0d19ff0278ba750efc3b3824b31b0-image-1477075078800.37.19\nPM.png\" style=\"width:80px\"> section there is a preview of the Google Search\nresults.\\r\n    \\r\n*Remember that the search engine might still decide to\nuse something else as your description. It is not a big deal and it is still\nimportant to have a description.*"
      CSDU2 - SEO 4_markdown_instruction: "# Search Engine Optimization: Keywords\\r\n\\r\n\\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Meta name =”keywords” content=”blah” (http://searchengineland.com/meta-keywords-tag-101-how-to-legally-hide-words-on-your-pages-for-search-engines-12099)"
      CSDU2 - SEO 5_markdown_instruction: "# Search Engine Optimization: Viewport\\r\n\\r\nYour\nwebsite can be used on many different devices. Those devices have different\nscreen sizes. Viewport tells the browser how to load your website depending\non the size of the browser. To get the browser to display your web page at\nthe width of the device you can use the `<meta>` element with the attributes\nbelow. The `<meta>` element should go inside the `<head>` element with all\nthe other meta data.\\r\n\\r\n<pre>\\r\n&lt;meta name=\"viewport\" content=\"width=device-width,\ninitial-scale=1\"&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n* Set the viewport\nof your website using the above code."
      CSDU2 - SEO Final_markdown_instruction: "# Search Engine Optimization: Final\\r\n\\r\nIn\nthe past levels you added metadata to your website to improve your search\nengine optimization. Go back to your list of issues the Search Engine Optimizer\nidentified and see if there are any others you can solve.\\r\n\\r\n# Do This\\r\n\\r\n*\nCheck to make sure you have completed the checklist below\\r\n* Continue to\noptimize your site for better search engine results\\r\n* Take a screenshot\nof your home page and save it somewhere on your computer so you can find it\nlater (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)\\r\n\\r\n## Checklist\\r\n\\r\n* Every web page has metadata for title,\ndescription and viewport to improve search engine optimization."
      CSDU2 - Selector and Property_markdown_instruction: "# CSS Style Rules\\r\n\\r\nStyle\nrules consists of two main parts: the selector and the property. All style\nrules go inside the `<style>` element.\\r\n\\r\n# Selector\\r\nThe selectors\ncan be any part of the web page you want to style. One way you can identify\nparts of the web page is using the names of the element. Selecting an element\nwill make all elements of that type have the given styling. The selector name\nfor HTML elements is the name of the tag with the brackets removed. In the\nbelow example the selector is `h1` and it will style all the h1 tags with\nthe properties inside the `{ }`.\\r\n\\r\n# Property\\r\nThe property describes\nwhich style component of the selected element to change. There are lots of\ndifferent style properties you can change about your web page. Not all properties\ncan be used for all elements.\\r\n\\r\nThe first property we will use is the\n`color` property. The **`color` property sets the color of text** and works\nfor any text elements including paragraphs, lists and headers. There are tons\nof colors you can choose. Luckily Web Lab pops up a list as you type. You\ncan also look at the full list of colors at <a href=\"http://www.w3schools.com/cssref/css_colors.asp\">W3\nSchools - CSS Colors</a>.\\r\n\\r\nExample:\\r\n\\r\nThe below style will make\nall the h1 headers on the page have blue text.\\r\n\\r\n<pre>\\r\n  &lt;style&gt;\\r\n    h1{\\r\n      color:blue;\\r\n    }\\r\n  &lt;/style&gt;\\r\n</pre>\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a style rule for h1 headers so the text is green.\\r\n*\nAdd another rule that defines the color of h3 headers. Pick any color you\nwould like."
      CSDU2 - Separate Content and Style_markdown_instruction: "# Separate Content\nand Style\\r\n\\r\nSoon you will get to apply your new brand style rules to\nyour website. Before you do that, though, let's investigate how to style\na multi-page website.\\r\n\\r\nAs already mentioned, from this point forward\nwe will be using external style sheets instead of styling inside the HTML\nfile because this keeps all the styling for the website in one place.  However,\nin order to do this you are going to have to pay extra close attention as\nyou remove your old styling. Even though you want consistent style on your\nwebsite, you will have exceptions to the style rules in certain cases. Exceptions\nto the style rules might include the note card styling, which you worked on\nin the last lesson. We would not want every list to have the note card styling,\njust those specific ones on the recipe page.\\r\n\\r\nYou will never want to\nhave duplicate rules for the same selector. So there should not be two stylings\nwith `p` as the selector. Instead you need to leverage the ability to make\nclasses in order to have multiple styles for `<p>` elements. \\r\n\\r\nTo practice\nthis, we have a website with an external style sheet that also still has styling.\nYou will need to figure out how to keep the unique elements of the individual\nweb pages while getting a more consistent style across the pages.\\r\n\\r\nUnique\nElements You Want to Keep:\\r\n\\r\n\\t1.\\tThe styling of the `<img>` elements\non one page should be different than the other\\r\n\\t2.\\tFor the `<h1>` headers,\non one page we want to style them and on the other we don't.\\r\n￼\\r\n# Do\nThis\\r\n\\r\n* Put the image on the home page in the \"home-image\" class\\r\n*\nFind the old style rule for images on the home page (width: 600px) and change\nthe selector so it will style the \"home-image\" class instead\\r\n* Put all\nthe images on the technology page in the \"tech-images\" class\\r\n* Find the\nold style rule for images on the technology page (width: 100px) and change\nthe selector so it will style the \"tech-images\" class instead\\r\n* Find\nthe h1 element on the technology page and put it in the class \"page-header\"\\r\n*\nChange the secltor for the style rule for h1 elements to be just a style rule\nfor the page-header class\\r\n* Copy the three new style rules you created\ninto your style.css file.\\r\n* Delete the `<style>` element and its contents\nfrom both pages."
      CSDU2 - SizeOfHeaders_markdown_instruction: "# Size of Headers\\r\n\\r\nThere\nare different sized headers which are marked by the number next to the h in\nthe header tag. They go from &lt;h1&gt; to &lt;h6&gt; .\\r\n\\r\n| Example |\nResult |\\r\n| ------- | ------ |\\r\n| <pre>&lt;h1&gt; Shoulders &lt;/h1&gt;\n<br> &lt;h2&gt; Knees &lt;/h2&gt; <br> &lt;h3&gt; Toes &lt;/h3&gt;</pre> |\n<img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43\nAM.png\" style=\"width:200px\"> |\\r\n\\r\n# Do This\\r\n* Predict what the result\nof the code in the index.html file will look like. Pick from one of the 4\noptions below.\\r\n\\r\n| Option 1 | Option 2 | Option 3 | Option 4 |\\r\n| --------\n| -------- | -------- | -------- |\\r\n| <img src=\"https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47\nAM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08\nAM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25\nAM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50\nAM.png\" style=\"width:200px\"> |"
      CSDU2 - Starting Personal Home Page_markdown_instruction: "# Starting Your\nHome Page\\r\n\\r\nIn this lesson we are going to start putting together your\npersonal website! In order to do this you need to create your personal home\npage.\\r\n\\r\n# Do This\\r\n\\r\nUsing your sketch of your personal home page\nand personal web development practice packet as a guide:\\r\n* Create as much\nof the home page design as you currently know how to.\\r\n* Take a screenshot\nof your work and save it somewhere on your computer so you can find it later\n(*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)"
      CSDU2 - Style to Personal Site_markdown_instruction: "# Style on Personal Website\\r\n\\r\nNow\nthat you have navigation on each page, you need to figure out how you want\nto style your website. You have two choices:\\r\n\\r\n1. Make a style sheet\nfor each web page on your website\\r\n2. Have one style sheet for your whole\nwebsite to give it a more consistent feel.\\r\n\\r\nPick one of the two choices\nand style your website appropriately. Make sure to link the style sheet to\nthe page(s) you want it to apply to. Also make sure that the `a` rule-set\nyou created on the last level is applied to all your `a` tags.\\r\n\\r\nOnce\nyour website is set up and connected, feel free to make improvements to any\npages on your website.\\r\n\\r\nBefore leaving this level:\\r\n* Take a screenshot\nof your home page and save it somewhere on your computer so you can find it\nlater (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)\\r\n\\r\n## Check List\\r\n\\r\n* All of your web pages are individual\nHTML files in this Portfolio Project\\r\n* Navigation to all the pages exists\nat the top of each individual page\\r\n* Style has been applied to all pages\non the website"
      CSDU2 - Sub Folders_markdown_instruction: "# Images\\r\n\\r\nWhen you have a\nbunch of images in your project its good to put them all in a folder to help\norganize your files.\\r\n\\r\nOnce files are in a folder you need to help the\ncomputer find them by giving both the folder name and the file name.  For\nexample to display the dog.png file in the folder called images we would use:\\r\n\\r\n<pre>\n&lt;img src=\"images/dog.png\" alt=\"dog jumping\" /&gt; </pre>\\r\n\\r\nThe\nfolder names comes first follow by the image name. We separate them with a\n/ .\\r\n\\r\n# Do This\\r\n* Add a folder called pictures\\r\n* Move all the image\nfiles into the pictures folder\\r\n* Notice how all the pictures no longer\nshow but the text in the alt attribute does.\\r\n* Update the links to the\nimages so they display again"
      CSDU2 - Type Anything_markdown_instruction: "<img src=\"https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg\"\nstyle=\"width:400px; float:right\">\\r\n\\r\n# Welcome to Web Lab!\\r\n\\r\nThe\nplatform you are in is called Web Lab. There are three main parts of the screen\nin Web Lab.\\r\n\\r\n# Do This\\r\n\\r\n* Try typing something in the workspace.\\r\n*\nPress <img src=\"https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45\nAM.png\" style=\"width:150px\"> to see it in the preview area!"
      CSDU2 - Type Anything_2018_markdown_instruction: "<img src=\"https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg\"\nstyle=\"width:400px; float:right\">\\r\n\\r\n# Welcome to Web Lab!\\r\n\\r\nThe\nplatform you are in is called Web Lab. There are three main parts of the screen\nin Web Lab.\\r\n\\r\n# Do This\\r\n\\r\n* Try typing something in the workspace.\\r\n*\nPress <img src=\"https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45\nAM.png\" style=\"width:150px\"> to see it in the preview area!"
      CSDU2 - Unordered Lists_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nare the two types of lists?**</summary>\\r\n There are two types of lists in\nHTML, ordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n</details>\\r\n<details>\\r\n<summary>**How do I make an unordered\nlist?**</summary>\\r\n\\r\nAn unordered list element has the tag &lt;ul&gt;\n. Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.\nEach item on the list is marked by a list item element &lt;li&gt;. Notice\nthat this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The\nlist item element is a child element which means that you don't use it on\nits own. It is contained inside a list element. It can be helpful to indent\nyour &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\\r\n\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;\n<br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How do I\nmake an ordered list?**</summary>\\r\n\\r\nAn ordered list element has the tag\n&lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered\n<strong>L</strong>ist. Each item on the list is marked by a list item element\n&lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist\n<strong>I</strong>tem.  The list item element is a child element which means\nthat you don't use it on its own. It is contained inside a list element.\nIt can be helpful to indent your &lt;li&gt; tags so its clear that is contained\nin the &lt;ol&gt; tag.\\r\n\\r\n<table border=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;\n<br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example:<br>\\r\n\\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is. HTML tags\nadd structure to the content of a web page.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nUnordered Lists\\r\n\\r\nNow that you have the basic layout for your Recipe\npage you need two lists. An ingredients list and a directions list. Start\nby trying to create the ingredients list. All text on your web page should\ngo inside one type of HTML element (header, list, or paragraph).\\r\n\\r\n#\nDo This\\r\nUnder your ingredients header create an unordered list of ingredients."
      CSDU2 - Using Your Colors_markdown_instruction: "# Using Your Font\\r\n\\r\nThere\nare other uses for the `<link>` element.  The `<link>` element also used to\nimport your chosen fonts. Since you will be using a font not from the typical\nfive font families, the browser needs to have a fall back plan in case it\ncan't load the font you wanted. To do this a back up font name is given.\\r\n\\r\nFor\nExample:\\r\n<pre>\\r\nfont-family: 'Cabin', sans-serif;\\r\n</pre>\\r\n\\r\nThe\nfont you want to use is listed first in `''` and then after a comma a back\nup font from the 5 normal font families is give.\\r\n\\r\n# Do This\\r\nSet up\nyour style rules to use your fonts you picked out.\\r\n\\r\n* Open the <a href=\"https://studio.code.org/s/csd2/stage/10/puzzle/3\"\ntarget=\"_blank\">level where you chose your fonts. </a>\\r\n* Open the link\nfor each of your chosen fonts.\\r\n* For each font:\\r\n\\t* Click <img src=\"https://images.code.org/91720f2ecae50e22d3287a92e988ee35-image-1475609982999.39.20\nPM.png\" style=\"width:130px\"> at the top right of the page.\\r\n    * That\nwill pop up a tab at the bottom. Click on the tab to open it. The pop up will\ncontain the link tag as well as the style rule for your font-family.\\r\n    <img\nsrc=\"https://images.code.org/1e8712c56112e85157da093349f4b93d-image-1475610080515.40.26\nPM.png\" style=\"width:330px\">\\r\n    * Copy the link tag in the `<head>`\nelement of your index.html file.\\r\n    <img src=\"https://images.code.org/65fe1b66992e199f7c82c1f59c98cac5-image-1475610080516.40.38\nPM.png\" style=\"width:330px\">\\r\n    * Copy the style property example into\nyour style.css file for later use. There is a block comment where you can\ncopy it for keeping. You can determine where it goes on the next level.\\r\n   <img\nsrc=\"https://images.code.org/da2f5cdec56681e0e8fa161bdf40d7a0-image-1475610080516.40.43\nPM.png\" style=\"width:330px\">"
      CSDU2 - Using Your Font_markdown_instruction: "# Using Your Font\\r\n\\r\nThere\nare other uses for the `<link>` element.  The `<link>` element is also used\nto import your chosen fonts. Since you will be using a font not from the typical\nfive font families, the browser needs to have a fall back plan in case it\ncan't load the font you wanted. To do this a back up font name is given.\\r\n\\r\nFor\nExample:\\r\n<pre>\\r\nfont-family: 'Cabin', sans-serif;\\r\n</pre>\\r\n\\r\nThe\nfont you want to use is listed first in `''` and then after a comma a back\nup font from the 5 normal font families is give.\\r\n\\r\n# Do This\\r\nSet up\nyour style rules to use your fonts you picked out.\\r\n\\r\n* Open the <a href=\"https://studio.code.org/s/csd2/stage/10/puzzle/3\"\ntarget=\"_blank\">level where you chose your fonts. </a>\\r\n* Open the link\nfor each of your chosen fonts.\\r\n* For each font:\\r\n\\t* Click <img src=\"https://images.code.org/91720f2ecae50e22d3287a92e988ee35-image-1475609982999.39.20\nPM.png\" style=\"width:130px\"> at the top right of the page.\\r\n    * That\nwill pop up a tab at the bottom. Click on the tab to open it. The pop up will\ncontain the link tag as well as the style rule for your font-family.\\r\n    <img\nsrc=\"https://images.code.org/1e8712c56112e85157da093349f4b93d-image-1475610080515.40.26\nPM.png\" style=\"width:330px\">\\r\n    * Copy the link tag in the `<head>`\nelement of your index.html file.\\r\n    <img src=\"https://images.code.org/65fe1b66992e199f7c82c1f59c98cac5-image-1475610080516.40.38\nPM.png\" style=\"width:330px\">\\r\n    * Copy the style property example into\nyour style.css file for later use. There is a block comment where you can\ncopy it for keeping. You can determine where it goes on the next level.\\r\n   <img\nsrc=\"https://images.code.org/da2f5cdec56681e0e8fa161bdf40d7a0-image-1475610080516.40.43\nPM.png\" style=\"width:330px\">"
      CSDU2 - Validator Extension_markdown_instruction: "# Favorite Places\\r\n\\r\nLets\nstart a new page. This page will be about your favorite places to spend time.\nThis could be on your block, in your city or even somewhere you like to go\non vacation.\\r\n\\r\n# Do This\\r\n\\r\n* Add &lt;!Doctype&gt;, &lt;html&gt;,\n&lt;head&gt;, &lt;title&gt; tags to set up your page correctly from the beginning.\\r\n*\nUse header and list elements to make a page describing your favorite places.\\r\n\\r\n#\nChecklist\\r\n* At least 1 header\\r\n* At least 1 list\\r\n* Description of\neach of your favorite places\\r\n* Consistency tags used correctly - &lt;!Doctype&gt;,\n&lt;html&gt;, &lt;head&gt;, and &lt;title&gt;"
      CSDU2 - Welcome-to-Weblab_markdown_instruction: "# Welcome to Web Lab!\\r\n\\r\nStuff\\r\n\\r\n#\nDo This\\r\n\\r\n* Thing 1\\r\n* Thing 2"
      CSDU2 - add header to content_markdown_instruction: "# Adding Content Part\n2\\r\n\\r\nLet's add some headers to the document.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a \"Favorite Animal\" title above your paragraph about your favorite animal.\\r\n*\nAdd a \"Favorite Way to Travel\" title above your paragraph about your favorite\nway to travel (car, plane, train, etc.)."
      CSDU2 - body tags_markdown_instruction: "# Body Element\\r\n\\r\nAs mentioned\non the last level the `<body>`element can be useful for more than breaking\nup your code. What if you wanted to put a background color on the whole page?\nSince the `<body>` element contains all the content of the web page, styling\nits `background-color` property will give the whole page a background color.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use a selector for the `<body>` element to set the `background-color`\nof the page to something other than white"
      CSDU2 - font properties_markdown_instruction: "# Font Properties\\r\nThe way\ntext looks is called a font. Two properties that control font are `font-family`\nand `font-size`.\\r\n\\r\n## font-family\\r\nThere are 5 fonts that will look\nthe same across any browser:\\r\n\\r\n* serif\\r\n* sans-serif\\r\n* monospace\\r\n*\ncursive\\r\n* fantasy\\r\n\\r\nWe will focus on using those font families to\nstart. To read more about font families you can go to <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">\nW3 Schools - CSS font-family</a>\\r\n\\r\n## font-size\\r\nThere are many values\nthat can be used to determine font-size. Pixels are the easiest to use. A\npixel is one tiny square on the screen. So when a font is 14px that means\nits 14 pixels tall.\\r\n\\r\nFor more details on font properties go to <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\">W3\nSchools - font-size</a>.\\r\n\\r\n# Do This\\r\n\\r\n* Add a font-family property\nto h1 style to make the font cursive\\r\n* Make the text in all the paragraph\nelements larger."
      CSDU2 - head and body tag intro_markdown_instruction: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**Why\ndo I need to structure the HTML document this way?**</summary>\\r\nAlthough\nmany modern web browsers can make good assumptions about what language you\nare writing in and where to find different information in your document, you\ndon't want to leave the display of you web page up to chance. To guarantee\nthe best results for displaying your web page on all computers you need to\nassist the computer in figuring out where to find information. <br> <br>\\r\n\\r\nAs\nyou go forward you are going to need two different sections in your HTML file.\nThey will serve different purposes.\\r\n<br><br>\\r\n1. Content of the page<br>\\r\n2.\nInformation about the page<br>\\r\n<br>\\r\nBy breaking up a web page this way\nit is clear where to find the code that is creating the physical output on\nthe web page and which code is just information for the computer about the\npage.<br><br>\\r\n\\r\nIn creating web pages we differentiate between these\ntwo areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt;\nelement contains all the information about the page.  The &lt;body&gt; element\ncontains all the content for a web page.\\r\n\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis a head element?**</summary>\\r\nThe &lt;head&gt; element contains all the\ninformation about the page. This is extra information that is helpful for\nthe computer in displaying your web page but is not the physical content of\nthe web page. \\r\n\\r\nThe &lt;head&gt; element usually comes above the body\nelement but inside the &lt;html&gt; element. For right now it will be blank\nbut later we will learn important things that are added to the head.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How\nis the head element different than the header elements? **</summary>\\r\nThe\nheader elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly\non your web page for your user to see. The head tag marks the information\nthat is not user facing in your HTML document. \\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**What\nis the body element? **</summary>\\r\n\\r\n The &lt;body&gt; element contains\nall the content for a web page.  The HTML elements for your headers, paragraphs,\nand lists should all go inside the &lt;body&gt; element.\\r\n\\r\n</details>\\r\n</div>\\r\n\\r\n#\nHead and Body\\r\n\\r\nFormat your HTML document with two sections using the\n&lt;head&gt; and &lt;body&gt; elements as shown in the image below. From this\npoint forward anything you add to an HTML document should go inside either\nthe &lt;head&gt; or the &lt;body&gt; elements. Put all the content and structure\nyou have created so far inside the &lt;body&gt; element.\\r\n\\r\n<img src=\"https://images.code.org/2513d8f7c31e76c2ee5427e512a54a1c-image-1481559174341.png\"\nstyle=\"width:300px\">"
      CSDU2 - head body_markdown_instruction: "# Head and Body\\r\n\\r\nThere are now\ntwo different sections of code in our HTML file:\\r\n\\r\n1. Content of the\npage\\r\n2. Information about the page (for right now just how to style it).\\r\n\\r\nIn\ncreating web pages we differentiate between these two areas using the &lt;head&gt;\nand &lt;body&gt; elements. These elements are important for creating maintainable\ncode but will also be useful for other things as well. The &lt;head&gt; element\ncontains all the information about the page, also sometimes called **metadata**.  The\n&lt;body&gt; element contains all the content for a web page.\\r\n\\r\nOutline\nof the structure of your web page:\\r\n\\r\n<pre>\\r\n&lt;!DOCTYPE html&gt;\\r\n&lt;html&gt;\\r\n\\t&lt;head&gt;\\r\n\\t\\t&lt;style&gt;\\r\n    \\t\\t&lt;!--Styling\nGoes Here--&gt;\\r\n\\t\\t&lt;/style&gt;\\r\n\\t&lt;/head&gt;\\r\n\\r\n\\t&lt;body&gt;\\r\n\\t\\t&lt;!--Content\nGoes Here--&gt;\\r\n\\t&lt;/body&gt;\\r\n    \\r\n&lt;/html&gt;\\r\n</pre>\\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a &lt;head&gt; element surrounding the styling for the\nweb page.\\r\n* Add a &lt;body&gt; element surrounding the content for the\nweb page."
      CSDU2 - image properties_markdown_instruction: "# Image Properties\\r\n\\r\nImages\nelements also have properties that can change their style.\\r\n\\r\n## Size\\r\nOne\nof the image properties is size. You can control size of an image using the\n`width` and `height` properties. The size is determined by the number of pixels\ntall and wide an image is. Pixels is abbreviated to `px`.  For example to\nmake all the images 100 pixels wide you would use:\\r\n\\r\n<pre>\\r\nimg {\\r\n\\twidth:\n100px;\\r\n}\\r\n</pre>\\r\n\\r\nAlthough you can control both width and height\nit is best practice to only set either width and height since setting both\ncan distort the image.\\r\n\\r\n\\r\n\\r\n## Borders\\r\nBorders are a common property\nfor many elements including images. Borders consist of three properties: `border-style`,\n`border-width` and `border-color`.\\r\n\\r\n<pre>\\r\nimg {\\r\n      border-style:\ndashed;\\r\n      border-width: 5px;\\r\n      border-color: blue;\\r\n}\\r\n</pre>\\r\n\\r\nFor\nmore information about borders go to <a href=\"http://www.w3schools.com/css/css_border.asp\">\nW3 Schools - Border Properties</a>.\\r\n\\r\n# Do This\\r\n\\r\n* Add a rule to\nstyle img elements\\r\n* Use the rule to set the width of all images to 200\npixels\\r\n* Add borders to all images. Be creative and try different border\nstyles and colors."
      CSDU2 - ordered Lists_markdown_instruction: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n<details>\\r\n<summary>**What\nare the two types of lists?**</summary>\\r\n There are two types of lists in\nHTML, ordered and unordered lists.\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an unordered list?**</summary>\\r\nAn unordered list is just a set of bulleted\nitems.\\r\n</details>\\r\n<details>\\r\n<summary>**How do I make an unordered\nlist?**</summary>\\r\n\\r\nAn unordered list element has the tag &lt;ul&gt;\n. Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.\nEach item on the list is marked by a list item element &lt;li&gt;. Notice\nthat this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The\nlist item element is a child element which means that you don't use it on\nits own. It is contained inside a list element. It can be helpful to indent\nyour &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\\r\n\\r\n<table\nborder=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;\n<br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis an ordered list?**</summary>\\r\nAn ordered list is a set of bulleted items\nwhich are numbered.\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**How do I\nmake an ordered list?**</summary>\\r\n\\r\nAn ordered list element has the tag\n&lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered\n<strong>L</strong>ist. Each item on the list is marked by a list item element\n&lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist\n<strong>I</strong>tem.  The list item element is a child element which means\nthat you don't use it on its own. It is contained inside a list element.\nIt can be helpful to indent your &lt;li&gt; tags so its clear that is contained\nin the &lt;ul&gt; tag.\\r\n\\r\n<table border=\"1\">\\r\n<tr>\\r\n<td>Example</td>\\r\n<td>Result</td>\\r\n</tr>\\r\n<tr>\\r\n<td><pre>\n&lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;\n<br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n<details>\\r\n<summary>**What\nis HTML?**</summary>\\r\nStands for Hypertext Markup Language. HTML is used\nto add structure to the content of a web page. HTML uses tags to specify where\ncertain structures start and end. These tags are sets of characters not found\nin the English language so that the content and structure can be differentiated.\n\\r\n</details>\\r\n<details>\\r\n<summary>**What is an HTML element?**</summary>\\r\nA\npiece of a website. Marked by a start tag and sometimes closed with an end\ntag. Also includes the content of the element as well. For example:<br>\\r\n\\r\n<img\nsrc=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\\r\n</details>\\r\n<details>\\r\n<summary>**What is an\nHTML tag?**</summary>\\r\nThe special set of characters that tells the machine\nwhere the start or end of an HTML element is and what type it is. HTML tags\nadd structure to the content of a web page.\\r\n</details>\\r\n</div>\\r\n\\r\n#\nOrdered Lists\\r\n\\r\nCreate an ordered list for each step in your recipe under\nthe Directions header"
      CSDU2 - p tags_markdown_instruction: "# Background Color\\r\n\\r\nAnother common\nCSS property used to style pages is `background-color`. This property will\nset the background color of a specific element.  You can use any of the CSS\ncolors for background color.\\r\n\\r\nFor example the code below will set the\ntext color of all h1 elements to blue and the background color to red.\\r\n\\r\n<pre>\\r\nh1\n{\\r\n\\tcolor: blue;\\r\n\\tbackground-color: red;\\r\n}\\r\n</pre>\\r\n\\r\n# Do\nThis\\r\nTry out the `background-color` property with paragraphs.\\r\n\\r\n*\nGive all the paragraphs (`<p>`) elements a background color of your choice."
      CSDU2 - testing something_markdown_instruction: "# Welcome to Web Lab!\\r\n\\r\nHTML\nis a language to express content on the web. HTML stands for Hypertext Markup\nLanguage. This means you are just using special sets of characters to define\nthe content of a website.\\r\n\\r\nThe platform you are in is called Web Lab.\nIt lets you write HTML on one side of the screen and see the results on the\nother.\\r\n\\r\n# Do This\\r\n\\r\n* Use the Inspector Tool to find where the\nHTML code for “Welcome to Web Lab” appears.\\r\n* Try to change the text from\n\"Welcome to Web Lab\" to something different.\\r\n* Try typing something else\non the page and see what happens."
      CSDU2 - text properties_markdown_instruction: "# Text Properties\\r\n\\r\nColor\nproperties are just one type of property. Another is text properties. Text\nproperties can be used on an text element (`<p>`, `<h1>` to `<h6>`, `<ul>`,\n`<ol>`, `<li>`).\\r\n\\r\n* text-align - sets the horizontal (side to side)\nposition of the text within each line\\r\n* text-decoration - can add a line\nabove, below or through the text\\r\n\\r\nFor more details on text properties\ngo to <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3\nSchools - Text Decoration</a> or <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3\nSchools - Text Align</a>.\\r\n\\r\nExample:\\r\n\\r\nThe below example will make\nall the paragraphs be right aligned with a green text color and a line through\nall the text.\\r\n<pre>\\r\np {\\r\n\\ttext-decoration: line-through;\\r\n\\tcolor:\ngreen;\\r\n    text-align: right;\\r\n}\\r\n</pre>\\r\n\\r\n# Do This\\r\nRead the\nW3 resources and figure out how to add the following styles on your page.\\r\n\\r\n*\nAdd an underline to all of the smaller headers by using the text-decoration\nproperty.\\r\n* Use the “text-align” property on paragraphs to align them on\nthe page so that each line has the same width."
      CSDU2 - title element in head_markdown_instruction: "# Title Element\\r\n\\r\nOne\npiece of metadata that should be included in every web page you create is\nthe website title. Although you may put an `<h1>` element on your page content\nwith the title of your website, the computer does not necessarily know that\nis the title as there may be multiple `<h1>` tags on your page.\\r\n\\r\nTo\nmake clear what the title of a website is for the computer the `<title>` element\nis added as metadata in the `<head>` element.  This title is not displayed\non the page anywhere as a result of the title tag but the browser may use\nit to put a name in the tab of your web browser or when someone searches for\nyour website.\\r\n\\r\nExample:\\r\n<pre>\\r\n&lt;head&gt;\\r\n\\t&lt;title&gt;\nMy Website Title&lt;/title&gt;\\r\n&lt;/head&gt;\\r\n</pre>\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a `<title>` element with the name of the web page inside the `<head>`\nelement"
      CSDU2 - website comp_markdown_instruction: "# Comparing Websites\\r\n\\r\n**Prompt:**\nImagine you have a new puppy at home who has chewed through her old leash.\nDecide between which of these two websites you would ultimately decide to\nbuy your puppy’s new leash. Why?\\r\n\\r\n* Website 1: <a href=\"https://thimbleprojects.org/nickianselmo/84613/\">\nUncle Joe's Pet Store</a>\\r\n* Website 2: <a href=\"http://www.petsmart.com/\">\nPetSmart</a>\\r\n\\r\nWrite your answer in the box below. When you are done\nwait for directions from your teacher before moving on."
      CSDU2 Color Blindness_markdown_instruction: "# Color Blindness Filter\\r\n\\r\n\\r\n\\r\n"
      CSDU2 IP Add Images_markdown_instruction: "# Adding Your Images\\r\n\\r\nWith\nimages and attribution information in hand, it's time to spruce up your new\npage.\\r\n\\r\n# Do This\\r\n\\r\nUpload your images to Web Lab and, using `<img>`\ntags, add them where you'd like them to go. For each image:\\r\n\\r\n* Add\na descriptive `alt` attribute\\r\n* Add attribution underneath the image, including\\r\n\\t*\nName or screenname of author (if available)\\r\n    * Title of image (if available)\\r\n    *\nLink to original site (you can make the whole attribution text a link)\\r\n    *\nLicense image was published under either in text (eg CC-BY) or using a badge\nfrom the [Creative Commons website](https://creativecommons.org/about/downloads/).\\r\n\\r\nFor\nexample\\r\n\\r\n![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\\r\n\\r\n[Longhaired\nDachshund portrait by Flickr user Soggydan](https://commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg)\n- CC-BY"
      CSDU2 IP Final Touches_markdown_instruction: "# Finishing Touches\\r\n\\r\nYou\nhave the content, you have pretty images, now put the finishing touches on\nyour page.\\r\n\\r\n# Do This\\r\n\\r\nMake sure you page meets the checklist\nbelow then make this page your own and get it ready for publishing. Specifically,\nconsider the following:\\r\n\\r\n* **Styling:** Add new style rules to your\nCSS file and give your page some flair.\\r\n* **Organization**: Does the structure\nof your content make it easy for users to find the information you want them\nto see?\\r\n* **Publishing Review**: Use your Web Development Practices to\nreview your site for publishing readiness.\\r\n\\r\nIf you made improvements\nto your home page ake sure to take a screenshot of your home page and save\nit somewhere on your computer so you can find it later (*Need help with how\nto screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)\\r\n\\r\n## Checklist\\r\n\\r\n* There is a separate HTML file for your\ncause site with a descriptive name\\r\n* The web page has a title, viewpoint,\nand description\\r\n* The web page is linked to your stylesheet for your website.\n\\r\n* A first level header with a catchy title for your page\\r\n* A second\nlevel header for each separate argument to support your cause\\r\n* Paragraphs\nof content under each second level header\\r\n* A link to the appropriate site\nwhere you need to cite outside sources\\r\n* All images you are using are uploaded\ninto your web lab project\\r\n* All images have a descriptive alt attribute\\r\n*\nAll images have attribution underneath the image, including:\\r\n\\t* Name or\nscreenname of author (if available)\\r\n\\t* Title of image (if available)\\r\n\\t*\nLink to original site (you can make the whole attribution text a link)\\r\n\\t*\nLicense image was published under either in text (eg CC-BY) or using a badge\nfrom the Creative Commons website."
      CSDU2 IP Portfolio_markdown_instruction: "# Cause Page\\r\n\\r\nLet's start\nby setting up the page you will be using to create your cause page.\\r\n\\r\n#\nDo This\\r\n\\r\n* Add a new HTML file to your project for your cause page.\\r\n*\nAdd a title, viewport, and description\\r\n* Link the style sheet for your\nwebsite to the cause page"
      CSDU2 IP Research Content_markdown_instruction: "# Adding Your Content\\r\n\\r\nYou\nshould now have found a handful of websites that you can use to help make\nyour case for the cause you've chosen. If not, keep on researching! Otherwise\nit's time to start structuring the content of your page.\\r\n\\r\n## Hyperlinks\nto Websites\\r\n\\r\nEarlier in the unit you learned how to use the `<a>` element\nto link between pages on your website. You can also use this element to link\nto other websites. To do this the `href` attribute needs to contain the full\nURL of the site you wish to link to. For example if I wanted to link to the\nCode.org website in my project I would use the following code:\\r\n\\r\n| Code\n| Output|\\r\n| ---- | ----- |\\r\n| <pre> My favorite coding site is &lt;a\nhref=\"https://code.org/\" &gt; Code.org &lt;/a &gt; ! </pre> | My favorite\ncoding site is <a href=\"https://code.org/\"> Code.org </a> ! |\\r\n\\r\n# Do\nThis\\r\n\\r\nThe specifics of your page layout will depend on your topics and\ngoals, but in general you should create the following structure\\r\n\\r\n* A\nfirst level header with a catchy title for your page\\r\n* A second level header\nfor each separate argument to support your cause\\r\n* Paragraphs of content\nunder each second level header\\r\n* A link to the appropriate site where you\nneed to cite outside sources\\r\n* Don't worry about styling right now you\nare just getting the content\\r\n\\r\nAttribution links can take many forms,\nfor example\\r\n\\r\n* According to the [ASPCA](http://www.aspca.org/animal-homelessness)\nonly 10% of animals entering shelters have been spayed or neutered.\\r\n* Kill\nshelters euthanize 2.7 million animals per year (Source: [ASPCA](http://www.aspca.org/animal-homelessness))."
      CSDU2 Make Your Logo_markdown_instruction: "# Create a Logo\\r\n\\r\nYou will\nalso need a logo for your brand. Get creative and create something that really\nis you. Remember you probably want to use your colors and fonts as you design\nyour logo. If the tools does not have your exact font find something close.\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the tool linked below to **create a logo for your brand**\\r\n*\n**Hint:** The color picker on this site uses a different encoding called hex.\nYour color picker gave you those values as well. They are the first encoding\nwith numbers and letters in it. They start with the # symbol.\\r\n* **Save\nthat logo somewhere on your computer** so you can use it later."
      CSDU2 Pick Your Colors_markdown_instruction: "# Pick Your Colors\\r\n\\r\nAnother\ncomponent of creating your brand is picking the colors for your brand. These\nshould be colors that stand out but also look good together. You want your\nusers to enjoy looking at your page. You will want to keep your set of colors\nsmall so that the combination is memorable. A set of 4 main colors or less\nfor your page will be a good place to start. Different shades of those colors\ncan be used as well.\\r\n\\r\n# Do This\\r\n\\r\n* Go to the <a href=\"http://paletton.com/\">\nPaletton </a> website.\\r\n* Decide how many primary colors you want for your\nbrand.\\r\n* Set the number of primary colors useing these buttons <img src=\"https://images.code.org/669d2fe15825ea753f804ebb690aab95-image-1475594935612.28.22\nAM.png\" style=\"width:150px\">. The number of dots shows the number of primary\ncolors.\\r\n* Play with dragging around the dots to find the primary colors\nyou like. The one that takes up the biggest box on the right will be your\nprimary color.\\r\n\\r\n<img src=\"https://images.code.org/b5811cea1acf1bf281ab73661db4b7cb-image-1475595405528.gif\"\nstyle=\"width:400px\">\\r\n\\r\n* Once you have picked your colors click <img\nsrc=\"https://images.code.org/3d30144dbe0cadc9bd083f1967e66b20-image-1475595929655.44.22\nAM.png\" style=\"width:100px\"> which is below the color boxes on the right.\\r\n\\r\n*\nA list like the one below will show up click on **\"as Text\"** below the\nColor List header.\\r\n\\r\n<img src=\"https://images.code.org/d39c3112948cd860148f2228f5b1c45a-image-1475595929655.44.43\nAM.png\" style=\"width:150px\">\\r\n\\r\n* A page that looks like the one below\nwill open. **Copy the text from this page into the box below.** This will\ngive you the RGB values for the colors as well as hex codes which you may\nwant on the next level.\\r\n\\r\n<img src=\"https://images.code.org/731d2612a1ccb47a4db8085abe910266-image-1475596945480.02.14\nPM.png\" style=\"width:400px\">"
      CSDU2 Pick Your Fonts_markdown_instruction: "# Pick Your Fonts\\r\n\\r\nPart\nof any good brand is having a specific font that is associated with the brand.\nMost brands keep to a small set of fonts they use. These fonts however are\nunique to the brand and will need to adventure beyond the 5 font families\nyou have been using.\\r\n\\r\nPicking a small set of fonts for your website\nis also a good practice as when you adventure beyond the 5 font families into\nother fonts the browser has to download the font file. Downloading files is\nsomething that can add time to how long it takes to your load your website.\nTo prevent it from taking too long it is good to stay with just 2 different\nfonts.\\r\n\\r\n# Do This\\r\n\\r\n* Go to the <a href=\"http://fontpair.co/\"\ntarget=\"_blank\">Font Pair </a> website. The website lists sets of heading\nand body font pairs that work nicely together. Each pair is listed like the\nimage below.\\r\n\\r\n<img src=\"https://images.code.org/7f34c1986c16fbb50e2acc4f72923b60-image-1475593488897.03.00\nAM.png\" style=\"width:400px\">\\r\n\\r\n* Pick a font set you like.\\r\n* Copy\nthe heading and body font names.\\r\n\\r\n<img src=\"https://images.code.org/879b3b41486f728fbb8840469277704e-image-1475594076521.png\"\nstyle=\"width:400px\">\\r\n\\r\n* Click the link to each font. This should take\nyou to a google fonts page.\\r\n\\r\n<img src=\"https://images.code.org/6163e64372d8825a7a8ed6a943cb3701-image-1475594076522.png\"\nstyle=\"width:400px\">\\r\n\\r\n* Copy the URL for the google fonts page into\nthe box below so they will be saved for later. An example is below.\\r\n\\r\n<img\nsrc=\"https://images.code.org/92e66b9ffae4d836175d63d87ab5586c-image-1475594389964.17.58\nAM.png\" style=\"width:400px\">"
      CSDU2 RGB Color Matching_markdown_instruction: "# RGB Colors\\r\n\\r\nAll colors,\nwhether they have names or not, can be described by the level of red, green,\nand blue light it takes to make them.  This is called an RGB value (short\nfor Red-Green-Blue).  You can use the widget on your left to try out different\nRGB values and see what colors they make.\\r\n\\r\n* **Click \"Run\" to start\nthe widget on the left,** and use the sliders to adjust the levels of red,\ngreen, and blue light.\\r\n* For each of the colors below, match it to its\nRGB value. Type your response in the box below.\\r\n\\r\nA) red: 216, green:\n191, blue: 216 - rgb(216,191,216)\\r\n\\r\nB) red: 255, green: 239, blue: 213\n- rgb(255,239,213)\\r\n\\r\nC) red: 255, green: 140, blue: 105 - rgb(255,140,105)\\r\n\\r\nD)\nred: 123, green: 104, blue: 238 - rgb(123,104,238)\\r\n\\r\nE) red: 107, green:\n142, blue: 35 - rgb(107,142,35)\\r\n"
      CSDU4 - AppLab - 1_markdown_instruction: "# Documentation\\r\nAs we move forward\nyou are going to see more and more (and more!) commands added to the toolbox.  What\nhappens if you see a command and don't understand it, or you forget how it\nworks?  Don't worry, this happens to professional programmers all the time!\nNo one actually memorizes long lists of commands.  Most programming environments\nhave ways to quickly look up documentation about the commands of the language\nyou're using.  **Good news: App Lab has documentation too!**\\r\n\\r\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\\r\n\\r\nWhen\nyou **hover your mouse over a command** in the block palette a bubble pops\nup with a quick reminder of what a function does, and what its parameters\nare. If you click \"See examples\", you will be taken to more detailed documentation\nof the command which includes **code examples** that you can even copy and\npaste.\\r\n"
      CSDU4 - AppLab - 2_markdown_instruction: "# Assigning User Input to Variables\\r\n<img\nsrc=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\"\nstyle=\"width: 350px; float:right\">\\r\nThe `promptNum` command appears in\nthe variables toolbox because it's typically used as a way to get a value\nfrom the user that you want to hold on to while the program runs.\\r\n\\r\n`promptNum`\nis similar to `randomNumber` in that it is a function whose return value *evaluates\nto a number*. The difference here is that `promptNum` pops up an input dialog\nbox and waits for the user to type a number.  Once they do and hit \"OK\"\nthe number they typed is returned and we can store it in a variable to use\nin our programs."
      CSDU4 - AppLab - 3_markdown_instruction: "# Debug Console: Variable Values\\r\n\\r\nUp\nuntil now, if we wanted to find out the value of a variable at some point\nin the execution of a program, we've used `console.log`. That is still going\nto be a great strategy but **the Debug Console can do even more for us!**\\r\n\\r\n**Check\nthis out:** We can check the value of a variable in real time (as our program\nexecutes) by typing its name into the prompt within the Debug Console and\nhitting \"enter\". **This is another powerful tool for debugging your programs.**\n\\r\n\\r\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)"
      CSDU4 - AppLab - 4_markdown_instruction: "# Debug Commands\\r\n\\r\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34\nAM.png\" style=\"width: 200px; float: right\">\\r\n\\r\nCheck out the new **Debug\nCommands toolbox** that has appeared next to the Debug Console! These powerful\ntools allow us to **pause a program at a certain point** while it’s running\nand then execute lines one at a time. \\r\n\\r\nUsing these tools we can investigate\nthe state of variables and other elements of the program at any point, mid-execution.\nThis makes it much easier to see what’s happening while the programming is\nactually running!\\r\n\\r\nIn order to use the debug commands, you first have\nto indicate which line you want the program to pause at.  This is called adding\na “breakpoint” (see animation below).\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a breakpoint**\non the line where the `while` loop starts. (**Just click the line number.**)\\r\n*\n**Use the <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09\nPM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\\r\n*\n**NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48\nAM.png\" style=\"width: 75px\"> it will \"continue\" executing the program\nnormally, unless of course it hits another breakpoint. \\r\n\\r\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)"
      CSDU4 - Design Mode - 1_markdown_instruction: "<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'\nstyle='float: right; width: 250px'> A new group of commands has been added\nto the toolbox called **UI Controls** (User Interface Controls) which are\ncommands that let you interact with, and respond to, the user of your app.\nTo keep it simple, we'll start with just two commands: \\r\n* `onEvent` which\nlets you run a function in response to some event occuring (such as a button\nclick).\\r\n* `button` which puts a button on the screen."
      CSDU4 - Design Mode - 10_markdown_instruction: "# New Elements and Events:\nMoving Buttons with Events\\r\n\\r\nOver the next few exerises we will be exploring\nseveral new user interface elements and event types. Your code will be pulled\nforward as you progress through the exercises.\\r\n\\r\n**Moving Past Turtle:**\nWe've been using buttons to move the turtle. For example, in the program\nyou're about to see a button that moves the turtle to a random location on\nthe screen. We're going to alter this program ** so that the button itself\nmoves every time you click it**.\\r\n\\r\n**Notice** that this means that event\nhandlers can affect the elements they are attached to, not just other elements!  This\nis an interesting technique for apps.  Now you're going to try it...\\r\n\\r\n#\nDo This:\\r\n* **Change the ID** of the button to something descriptive and\nmeaningful.\\r\n* **Modify** your event handler so that **it no longer moves\nthe turtle** but instead sets the position of the button itself to a random\nlocation on the screen.\\r\n\\t* TIP: add `setPosition` to the event handler,\nand just move the `randomNumber` calls from the turtle.\\r\n\\t* Recall the\nscreen is **320 by 450 pixels**.\\r\n\\r\n**Before** | **After**\\r\n---|---\\r\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)\n| <img src=\"https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif\"\nstyle=\"width: 150px\">\\r\n\\r\n\\r\n"
      CSDU4 - Design Mode - 11_markdown_instruction: "# New Elements and Events:\nNew Event Types\\r\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06\nAM.png\" style=\"float: right\">\\r\n\\r\n**New Events**: You may have noticed\nthat the `onEvent` block has a pull-down menu for the event **type** (see\nright).\\r\n\\r\n# Do This:\\r\n\\r\n* **Experiment** with **each of the different\ntypes of mouse events** by selecting from the list. You can also read about\nthem in the documentation.\\r\n\\t* click\\r\n    * mousemove\\r\n    * movedown\\r\n    *\nmouseup\\r\n    * mouseover\\r\n* **Choose** the mouse event type you like most\nand change your event handler to use it.\\r\n* **Note:** There are some events\nthat capture keystroke events. These are interesting, but they do not work\neasily with buttons.  We'll stick to mouse events for now, and get to keys\nlater."
      CSDU4 - Design Mode - 12_markdown_instruction: "# New Elements and Events:\nText Labels\\r\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\"\nstyle=\"float: right\">\\r\nThe UI controls toolbox contains an element called\n`textLabel`. A text label is what it sounds like: plain text that you can\nput in your app. Even though it's just plain text you can still move and\nresize it using `setPosition`, and you can attach event handlers to it as\nwell.\\r\n\\r\n**NOTE:** resizing a text label does not change the font size\nof the text.  We'll learn how to do that later.  "
      CSDU4 - Design Mode - 13_markdown_instruction: "# New Elements and Events:\nImages\\r\n\\r\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25\nAM.png\" style=\"float: right; width: 120px\">\\r\nImages make applications\nmore visually pleasing and interactive. You can add images to your application\nusing the `image` command. For now, just add an `image` element to your app\n(the default image link is the Code.org logo) and don't worry about choosing\na unique image just yet. We'll do that in the very next exercise!"
      CSDU4 - Design Mode - 15_markdown_instruction: "# Design Mode\\r\n\\r\nWelcome\nto Design Mode in AppLab! This will allow you to easily create a digital version\nof your sketched wireframes by adding UI elements from the toolbox and and\nstyling them the way you want!\\r\n\\r\n**Goal:** Add a large red button to\nyour app using Design Mode.\\r\n\\r\n# Do This:\\r\n\\r\n* **Find <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">\nin the Design Toolbox** and drag out a button and resize it. \\r\n\\r\n* **Change\nthe button text** to say \"Click Me\".\\r\n\\r\n* **Set the color for the button**\nto be red.\\r\n\\r\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"\nstyle=\"width: 500px; float: middle\">\\r\n"
      CSDU4 - Design Mode - 16_markdown_instruction: "# Activate Your Button\\r\nIn\nthe last lesson you focused on laying out a page of your app in Design Mode.\nThis is a great, quick way to get the visual side of an app figured out, but\nit's not very functional. If you click any of the buttons you added, nothing\nhappens. Now you're work towards adding some basic functionality by making\nthe buttons in your app actually _do_ something!\\r\n\\r\n**Goal:** Add code\nusing Design Mode to make the button respond to a click.\\r\n\\r\n# Do This\\r\nYour\nstarter app has two elements, a _label_ with the id `titleLabel` and a _button_\nwith the id `changeTitleButton`. To start with, you're going to make the\nbutton log a message to the console when it's clicked.\\r\n\\r\n* In Design\nMode, **click on the provided button to edit its properties**\\r\n* Click on\nthe **Events** tab\\r\n* Insert an `onEvent` from Design Mode by clicking **Insert\nand show code** under the **Events Tab**.\\r\n* Take a look at the block that\nwas added to the **Code Mode** tab.\\r\n* Run the program, click your button\nand **look for the output in the *Debug Console* **below the workspace instead\nof the app window. We will discuss the *Debug Console* on the next level."
      CSDU4 - Design Mode - 17_markdown_instruction: "# Updating IDs and Debugging\nwith Console Log\\r\n\\r\nHere we have a couple buttons with event handlers\nand `console.log` statements, but they are all switched around!\\r\n\\r\nWe\nshould have given the buttons better ID names so we could tell the difference\nbased on the ID. **Can you update the ID names and `console.log` messages\nto match the correct button? **\\r\n\\r\n# Do This\\r\n\\r\n* **Change the IDs**\nof the buttons in Design Mode to more descriptive names.\\r\n\\r\n* Switch to\nCode Mode and notice that the **ID pulldowns have been updated to include\nthe new IDs**. (You still need to select the correct ID from the pulldown\nmenu.)\\r\n\\r\n* **Update the `console.log` messages** to match the buttons.\\r\n"
      CSDU4 - Design Mode - 18_markdown_instruction: "# Layering and Deleting\\r\n<img\nsrc=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"\nstyle=\"width: 200px; float: right\">User interface elements can overlap one\nanother, so you'll want the ability to change the order or **depth** at which\neach one is rendered. \\r\n\\r\nIf you **scroll to the bottom of the Properties\ntab** you'll find buttons which allow you to easily **delete or change the\ndepth** of an element.\\r\n* **Delete an Element** by selecting it (clicking\non it) in the design view and then clicking **Delete** in the properties tab.\\r\n*\n**Change the depth** of elements by using the double or single arrows.\\r\n\n* Click the double arrow to send all the way to front or back.\\r\n * Click\nthe single arrow to move up or down one layer.\\r\n    \\r\n# Do This:\\r\n\\r\nUse\nthe **delete** and **depth** tools to **create the \"After\" image**\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n\\t<th\nstyle=\"text-align:center\">Before</th>\\r\n    <th style=\"text-align:center\">After</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td\nalign=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"\nstyle=\"width:200px ; border: solid 1px black\"></td>\\r\n    <td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"\nstyle=\"width:200px; border: solid 1px black\"></td>\\r\n</tr>\\r\n</table>"
      CSDU4 - Design Mode - 19_markdown_instruction: "# Second Screen\\r\n\\r\nMost\napps have more than one screen or page that each have different contents.\nWith Design Mode you can quickly add new screen to your app.\\r\n\\r\n# Do This\\r\n\\r\nYou're\ngoing to add a second screen to your app and add a button to that screen.\nMake sure you're using good IDs!\\r\n\\r\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39\nPM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You\nnow have two screens!\\r\n* Using Design Mode create a button in your new screen.  <img\nsrc=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35\nPM.png\" style=\"width: 150px\"> \\r\n* Set the IDs for your screens and buttons\nto something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_,\n_\"homeButton\"_, and _\"detailsButton\"_\\r\n\\r\n\\r\nYou can always use the\nscreen dropdown menu at the top of the app window to switch between your screens\n<img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59\nPM.png\" style=\"width: 150px\"> \\r\n\\r\n"
      CSDU4 - Design Mode - 2_markdown_instruction: "# Buttons and Unique IDs\\r\nYou\nmay have noticed that the button command has two parameters: `button(id, text)`.  The\n`text` is the text that actually shows up on the button display, and the `id`\n(we'll typically write **ID**) is a **unique identifier** for that element\nin the app.\\r\n\\r\nEach element that appears in the app must have a **unique\nID**. In fact, if you try to run a program that has two buttons with same\nID you will get a warning message in the console. Watch:\\r\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\"\nstyle=\"border: solid 1px black; width:500px\">\\r\n\\r\nNotice that even though\nthe text on the buttons was different, the IDs were the same, which caused\nthe error message to show up. To get rid of that error message you will have\nto change the ID of the button from the default `id` to something else.\\r\n\\r\n**Error\nmessages happen to everyone and they are helpful!**: getting an error or warning\nmessage when you run your program is *not a big deal*. Programmers actually\nrely on error messages to tell them where and how to fix their code.\\r\nSometimes\nerror messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers\nto an id (id) which already exists.` But a warning like this contains helpful\ninformation and clues such as the line the error occured on, or some word\nor command it didn't recognize. "
      CSDU4 - Design Mode - 20_markdown_instruction: "# Switching Screens\\r\n\\r\nYou\ncan set which screen is showing in your app with the `setScreen()` command.\nIf you're working in blocks you can select which screen you want to switch\nto from a dropdown.\\r\n\\r\n![](https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nYou'll use an `onEvent()` block with `setScreen()`\nto make the two buttons in your app switch between the two screen.\\r\n\\r\n*\nDrag out two `onEvent()` blocks\\r\n* Set the IDs for your `onEvent()` blocks\nfor each of your two buttons\\r\n* Place a `setScreen` block inside each of\nthe `onEvent` blocks.\\r\n* Choose the appropriate screen from the dropdown\nof each `setScreen` block.\\r\n* Test out your app to make sure your buttons\nlet you switch back and forth between the two screens"
      CSDU4 - Design Mode - 21_markdown_instruction: "# Adding Images\\r\nSometimes\nthe functionality you want to represent in your prototype is too complicated\nto do with just the default buttons and fields. If you want to mock up more\nadvanced interfaces (like a map), the easiest way to do it is with an image\\r\n\\r\n#\nDo This\\r\n* Find and download an image of a map you like\\r\n* Drag an image\nelement into your app ![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14\nAM.png)\\r\n* Choose your image ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42\nAM.png)\\r\n\\t* **URLs** can be added directly into the \"picture\" field.  \\r\n\\t*\n**Upload images** by clicking \"Choose\".\\r\n\\t* **Note:** You can always\nsee all the files you've uploaded by clicking the gear at the top of the\ntoolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10\nAM.png)\\r\n* Make sure to give your image a good ID!\\r\n\\r\n"
      CSDU4 - Design Mode - 22_markdown_instruction: "A new command in the toolbox:\n`playsound`! Read the documentation about how to add sounds."
      CSDU4 - Design Mode - 23_markdown_instruction: "# Changing Elements on Screen\n\\r\n\\r\nThere's another way to display text in your app besides `console.log`\nand `write`.  \\r\n\\r\nThere is a command called `setText` which will **change\nthe text of a component on screen** given its id. This is a very powerful\ntechnique and one that you will use a lot. Here's what it looks like in action....\\r\n\\r\n<img\nsrc=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\"\nstyle=\"width: 500px\">\\r\n\\r\nLet's do a **very simple** example of using\n`setText`."
      CSDU4 - Design Mode - 24_markdown_instruction: "# Text Input Elements\\r\n\\r\n<img\nsrc=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19\nPM.png\" style=\"width: 100px; float:right;\">\\r\n\\r\nSetting the text of\nan element is all well and good, but things are going to get really interesting\nwhen we can get text that a user has entered and do something with it.\\r\n\\r\n\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add two text input elements to this program**, one for\nthe name and one for the age of the user.\\r\n* **Give your text input elements\ndescriptive and meaningful IDs**.\\r\n* **In Design Mode** set their default\ntext to prompt the user for their name and age.\\r\n* **Compare your app to\nthe example below**.\\r\n\\r\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11\nPM.png\" style=\"float:left; width:200px;\">\\r\n<br>"
      CSDU4 - Design Mode - 25_markdown_instruction: "# Getting Text Input\\r\n\\r\nAs\nwe saw a user can now type inside of a text input whenever they want, **but\nnow we'll need a way to access that text**. In order to do that you'll need\nto use the `getText` command, which you can now find in the **UI Controls**\ntab.\\r\n\\r\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24\nPM.png\" style=\"width: 150px;\">\\r\n\\r\nYou can use a `getText` command just\nlike a string within a `console.log` or `write` command. Just like with `setText`\nyou will refer to the UI element by its ID.\\r\n\\r\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation **  for `getText`.\\r\n*\n**Add an event handler to the Submit button** that fires when your button\nis clicked.\\r\n* **Inside the event handler** place code that will **log the\nname your user input to the console**.\\r\n\\r\n"
      CSDU4 - Design Mode - 26_markdown_instruction: "# Saving Text Input in Variables\\r\n\\r\nOften\nwe want to save the information we pull in from the user for later use in\nour program. The best way to do this is to save it in a variable.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Create two variables inside your event handler** to store\nthe **age** and **name** of the user.\\r\n* **Use `getText()` to update the\nvalues** stored in each of these variables.\\r\n* **Change your `console.log`\nstatements to use your variable instead of `getText`**.\\r\n\\r\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13\nPM.png)"
      CSDU4 - Design Mode - 27_markdown_instruction: "# Generating Text Output\\r\n\\r\nSo\nfar we've been outputting our messages to the console, but now we'd like\nto display them in the app. In order to do so we're going to be using a new\nUI element called a **textArea**. You can use `setText()` with a **textArea**\njust like you would with a **textLabel**.\\r\n\\r\n![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43\nPM.png)\\r\n\\r\nIf we want to combine user input with default text we can do\nso with **string concatenation** (that's just a fancy phrase for combining\nstrings of text). Together with a **textArea** we can use this ability to\ncompose longer messages based on user input.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add\na textArea** to your app and give it a descriptive and meaningful ID.\\r\n*\n**Create a variable inside your event handler** called `userMessage` to hold\nthe full message that will be sent to the user.\\r\n* **Use string concatenation**\nto compose a message from the user input.\\r\n\\t* eg `var userMessage = \"Welcome\n\" + userName + \"!\";`\\r\n* **Use `setText()`** to place your `userMessage`\ninside the `textArea` you created.\\r\n\\r\n<img src=\"https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08\nPM.png\", style=\"width:250px;\">"
      CSDU4 - Design Mode - 28_markdown_instruction: "# Introducing the  *change*\nEvent\\r\nUp until now you've been using the click of a button to trigger\ngetting the text from an input or text area.\\r\n\\r\nYou can use a new event\ntype to get this behavior: The __'change' event__ is triggered when the\nuser hits 'enter' in a text input after typing.\\r\n\\r\n\\r\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\"\nstyle=\"width:350px;\">\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\"\nstyle=\"width:250px;\">\\r\n- A text input has been created for you that asks\nfor a user's name, as well as a label for the response\\r\n- Attach a \"change\"\nevent handler to the text input.\\r\n- When the \"change\" event triggers,\nset the text of \"nameResponse\" to the user's input.\\r\n"
      CSDU4 - Design Mode - 29_markdown_instruction: "# Dropdown\\r\n\\r\nOn the last\nlevel we used `promptNum` to get the user's guess. However, we had no way\nto limit them to the numbers we wanted. They could have typed 11 even though\nwe told them not to. A better way to get input with a limited set of options\nis the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23\nPM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control\nthe list of options users can choose and then use `getText` to get the chosen\nnumber.\\r\n\\r\nWe are going to need an event handler in order to do this.\nThe event handler will detect when the user has changed the value of the dropdown.\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a dropdown** for their guess instead of\n`promptNum`. Make sure to give it a good ID.\\r\n\\r\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Under properties **find the Options** and\nchange it to the **numbers 1 to 10**\\r\n\\r\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\"\nstyle=\"width: 250px\">\\r\n\\r\n* Add an event handler to detect the `change`\nevent on your dropdown.<br><br>\\r\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\"\nstyle=\"width: 150px; float: right\">\\r\n* Move your `if` statement inside\nthe event handler so it will check each time the dropdown is changed.<br><br>\\r\n*\nWhen the dropdown is changed **use `getText` to find out the user's guess**.\nSave the guess using a variable. **Don't forget about scope!**<br><br>\\r\n*\nTest your app -- it should work like the demo."
      CSDU4 - Design Mode - 3_markdown_instruction: "# How Do Events Work?\\r\nEvent-driven\napps are made up of elements that can trigger events (such as buttons) and\npieces of code called **event handlers**. Event handlers are commands that\n\"watch\" for certain events to occur in your program, and then run some function\nwhen an event occurs.\\r\n\\r\nWhen you first create an event handler from Design\nMode, puts a `console.log()` block inside to help you test the event, but\nyou can put just about any code you want inside the event hander.\\r\n\\r\n#\nDo This\\r\n\\r\nThe toolbox has a new block called `setText` which allows you\nto change the text of an element on the screen. You're going to modify the\nbutton event handler so that it changes the title text when clicked.\\r\n\\r\n*\nDrag out a `setText()` block to the _inside_ of the `onEvent()` callback function\n(where the `console.log()` block currently is)\\r\n* From the block's dropdown,\nselect \"titleLabel\" (the id of the element you want to change)\\r\n* In the\nblock's second input, replace \"text\" with a new title for the app\\r\n*\nRun your program and click the button to see it work"
      CSDU4 - Design Mode - 30_markdown_instruction: "# Using `if` to Display Images\\r\n\\r\nWe\nare going to set up a dice game. We want to show a picture of a single die\nfor each random number generated 1 to 6. We've already set up the screen\nin Design Mode, with a button to generate the roll and an image to show a\npicture of the die.\\r\n\\r\n**Note:** The flowchart for the desired behavior\nis below.\\r\n\\r\n# Do This:\\r\n\\r\n* Add an event handler for the Roll! button\nso that when the button is clicked it generates a random number from 1 to\n6. \\r\n\\r\n* Add conditionals (`if`, `else if`, and `else`) to change the\npicture of the image (ID: `dice_image`) to display the correct side of the\ndie depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\"\nstyle=\"width:150px\"> with the URLs below to set the images for the die.\\r\n\\t*\n<img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice\n1 Image URL -  https://code.org/images/dice/1.png\\r\n    * <img src=\"https://code.org/images/dice/2.png\"\nstyle=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\\r\n    *\n<img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice\n3 Image URL - https://code.org/images/dice/3.png\\r\n    * <img src=\"https://code.org/images/dice/4.png\"\nstyle=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\\r\n    *\n<img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice\n5 Image URL - https://code.org/images/dice/5.png\\r\n    * <img src=\"https://code.org/images/dice/6.png\"\nstyle=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\\r\n\\r\n<img\nsrc=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>\\r\n"
      CSDU4 - Design Mode - 31_markdown_instruction: "# *keypress*\\r\n\\r\nIf we want\nto add keyboard input to our apps we'll need to learn about how key events\nwork in App Lab. To start let's take a closer look at the `onEvent` block.\nWe already know that event handlers call a function. What we'll see now is\nthat they also **pass a parameter**. The default name for this parameter is\nsimply `event` but you can change it to be anything you like. \\r\n\\r\nThe\n`event` parameter is a more complex kind of variable (called an \"Object\")\nthat we'll learn more about later. For now just know that for both mouse\nand keyboard events, the event parameter passes more information about the\nevent. In the case of key events **you can find out the key(s) that were actually\npressed by using `event.key`**.\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out an `onEvent`\nblock.\\r\n* Change the ID to `screen1` and the event type to `keypress`.  \\r\n\\r\n<img\nsrc=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n* Once you hit **Run**, **click on the screen\nso that the keystrokes will register**.\\r\n* **Type different combinations\nof keys** and check out the results in the console. Does every key combination\nprint to the console? Some keys to try:\\r\n    * Letter keys\\r\n    * Number\nkeys\\r\n    * Shift key\\r\n    * Hold shift and letter\\r\n    * Delete key\\r\n    *\nLeft and right arrow keys\\r\n    * Press and hold a key"
      CSDU4 - Design Mode - 32_markdown_instruction: "# Using *keyup* and *keydown*\\r\n\\r\nOn\nthe last level, we played with the `keypress` event. Let's take a look at\nsome of the other key events. \\r\n\\r\nYou are going to get the chance to play\nwith `keyup` and `keydown` in this level. **Pay attention to the different\nvalues of `event.key` for `keydown` and `keypress`. **\\r\n\\r\n# Do This:\\r\n\\r\n*\nSwitch to the event type to `keydown` or `keyup`. \\r\n\\r\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Try out the event.\\r\n\\t* Press and hold\na key\\r\n    * Try the arrow keys\\r\n    * Shift\\r\n    * Option\\r\n    *\nAlt\\r\n    * Others"
      CSDU4 - Design Mode - 33_markdown_instruction: "# Play Sound With Keys\\r\n\\r\nYou\nmay have noticed from the last couple of levels that the value of `event.key`\nis just a string which is the name of the key. As a result we can check which\nkey was pressed with a simple conditional statement.  For example to check\nfor the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\\r\n\\r\n#\nDo This:\\r\nThe **starter code provided** plays the sound whenever ANY key\nis pressed.\\r\n\\r\n* Use `console.log` to **find out the value of `event.key`\nwhen the up arrow is pressed.**\\r\n\\r\n* **Add an `if` statement** so the\nsound only plays when the when the **up arrow** is pressed."
      CSDU4 - Design Mode - 4_markdown_instruction: "# IDs\\r\nThe `id` (we'll typically\nwrite **ID**) is a **unique identifier** used for each element in the app.\\r\n\\r\nEach\nelement that appears in the app must have a **unique ID**. In fact, if you\ntry to run a program that has two buttons with same ID you will get a warning\nmessage in the console.\\r\n\\r\n# Do This\\r\nWhile each element you drag out\nin Design Mode gets a default ID, they aren't really that helpful (like `button1`\nand `button2`), so you should get in the habit of creating your own IDs.\\r\n\\r\n*\nChange the ID of your \"click me\" button to something useful (like `redButton`)\\r\n*\nDrag out a second button\\r\n* Make the second button blue and give it an ID\nof `blueButton`"
      CSDU4 - Design Mode - 5_markdown_instruction: "# Debugging Event-Driven Programs:\nIDs\\r\n\\r\n**Debugging:** As you write more complex event-driven programs,\nyou'll need to polish your **debugging** skills. Debugging involves locating\nand correcting errors within a program. It is a critical (and generally unavoidable)\nstep when writing code.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 200px\">\\r\n\\r\n**Checking IDs:** Your first\ndebugging task will be to verify that the button IDs match the IDs in the\nevent-handlers. **Remember that IDs are case-sensitive**."
      CSDU4 - Design Mode - 7_markdown_instruction: "**Logical Errors: ** Sometimes\nyou can write a program that generates no errors but does not work as you\nintend. This is the result of **logical errors** in your code. These can be\ntricky to catch without knowing what your program is supposed to do in the\nfirst place, and usually are only found with careful testing of your app's\nfunctionality.\\r\n<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 150px\">"
      CSDU4 - Design Mode - 8_markdown_instruction: "# Moving and Sizing Buttons\\r\n\\r\nAn\nimportant component of designing intuitive and visually appealing user interfaces\nis the location of the elements on the screen. Using the `setPosition` command\n(now added to the Toolbox) you can move and set the size of user interface\nelements.\\r\n\\r\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48\nAM.png)\\r\n\\r\n**NOTE:**\\r\n * If you only want to set the size you can use\nthe `setSize` function which looks like this:\\r\n\\r\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\\r\n\\r\n\n* If you *only* want to set the position *without* changing the size of the\nelement, you can omit the *width* and *height* parameters from the `setPosition`\nfunction.  To do that, you need to switch into text mode, like this:\\r\n\\r\n\n<img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'\nstyle=\"width: 400px\">\\r\n\\r\n* **Remember:** in an app screen 0,0 is the\ntop left corner and you specify a location by how many pixels from the left\nand how many down from the top of the screen it is.  The screen is **320 by\n450 pixels**."
      CSDU4 - Design Mode - 9_markdown_instruction: "# How to Organize the Code\\r\nAs\nyour apps get more complex you'll have to think about how to organize your\ncode so it remains readable and easy for you to locate things when debugging\nany problems.  We suggest the following convention which breaks the code into\n3 major sections:\\r\n* **Top**:   code for event handlers.\\r\n* **Bottom**:\ncode for any other other functions you've written. (We don't have any of\nthese yet.)"
      CSDU4 - Design Mode Icons_markdown_instruction: "<img src=\"https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png\"\nstyle=\"width: 200px; float:right\">\\r\n\\r\n# Icons\\r\nIcons help users find\nthe right functionality while also making your app feel more polished.\\r\n\\r\n#\nDo This\\r\nAdd a few icons to your app. For each icon:\\r\n\\r\n* Drag out an\nimage element\\r\n* Next to the \"Picture\" field click \"Choose...\"\\r\n*\nClick on the \"Icons\" tab and select one\\r\n* Make sure to give your image\na good ID! (do we still need to say it?)\\r\n\\r\n"
      CSDU4 Connecting Screens Getting Back_markdown_instruction: "# Navigating Back\\r\n\\r\nSomeone\nusing your app can now get to each of the red, green, and blue pages, but\nthey can't get back to the homepage. You can add buttons and event handlers\nof your own to help them do this.\\r\n\\r\n# Do This\\r\n\\r\nCreate buttons and\nevent handlers to help a user navigate back to the \"home\" screen\\r\n\\r\n*\nUse Design Mode to create a button inside each of the \"red\", \"green\",\nand \"blue\" screens. Make sure to give them descriptive IDs.\\r\n* Back in\nyour code drag in three `onEvent()` blocks, one for each of the three buttons\nyou made.\\r\n* Inside each `onEvent()` block use the `setScreen()` block that\nswitches back to your \"home\" screen.\\r\n* Test your app. You should now\nbe able to navigate back to the home screen from each of the other three."
      CSDU4 Connecting Screens template_markdown_instruction: "# Navigating\\r\n\\r\nOnce\nyou start adding multiple screens to an app, you need to make sure that users\ncan always get where they want to go. If you forget to provide a link back\nhome or to a deeper page.\\r\n\\r\n# Do This\\r\n\\r\nHere's an app with four\ndifferent pages, but only the \"red\" screen is linked so far.\\r\n\\r\n* Add\nevent handlers for \"greenButton\" and \"blueButton\" to go to their respective\nscreens\\r\n* From each of the sub pages, add a button with event handler to\nnavigate back to the home page\\r\n* Test your app thoroughly to make sure\nall of your buttons work and you can always get back home"
      CSDU4 Connecting Screens_markdown_instruction: "# Navigating\\r\n\\r\nOnce you\nstart adding multiple screens to an app, you need to make sure that users\ncan always get where they want to go. In the next two levels you'll learn\nhow to make sure a user can always get back to the \"homepage\" of your app.\\r\n\\r\n#\nDo This\\r\n\\r\nHere's an app with four different pages, but only the \"red\"\nscreen is linked so far. In this level you'll make the other two buttons\ntake the user to the correct screen.\\r\n\\r\n* Add two `onEvent()` blocks,\none each for the \"greenButton\" and \"blueButton\"\\r\n* Use the `setScreen()`\nblock to make each button switch to the appropriate screen\\r\n* Test your\napp to make sure both buttons work. For example, when you click the green\nbutton you should go to the green screen."
      CSDU4 Crowdsource App Demo_markdown_instruction: "# Crowdsourcing\\r\n\\r\nCrowdsourcing\napps allow multiple users to submit content for everyone to use (the _source_\nof content is the _crowd_). This app is very similar to the list app, with\nthe main difference being that the list app assumes a single user while this\napp allows all users to add to the same list and \"like\" submissions.\\r\n\\r\nThis\nexample uses a list of crowdsourced information for simplicity, but you could\ndisplay any kind of information in many different formats. A crowdsourcing\napp could allow users to submit locations for display on a map, images to\ngo into a gallery, or any number of other types of information.\\r\n\\r\n# Functionality\nMissing from this Prototype\\r\n\\r\n* User's can't create accounts or profiles\\r\n*\nSubmitted things aren't added to the list\\r\n* Clicking on the \"like\" icons\ndon't change their state"
      CSDU4 Decision App Demo_markdown_instruction: "# Decision Maker\\r\n\\r\nSimilar\nto the quiz app, a decision tree app asks the user a series of questions.\nThe primary difference between the two is that a decision tree doesn't check\nfor right or wrong answers, but instead attempts to give the user a suggestion\nor help them make a decision based on their answers.\\r\n\\r\nThis simple decision\nmaker asks only three questions,  but more advanced ones actually take the\nform of a tree as seen below:\\r\n\\r\n![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)\\r\n\\r\nDepending\non the user's answer to each question, they're given a different page for\nthe next question. This allows the app to gradually narrow down the decision\none question at a time. This type of app can be really useful to help users\nunderstand complex processes - for example, you might introduce a recycling\nprogram by using a decision tree app to help users figure out which bin to\nsort items into - first asking what material it's made out of, then whether\nit is clean or not, and so on.\\r\n\\r\n# Functionality Missing from this Prototype\\r\n\\r\n*\nQuestion buttons don't direct you to different screens\\r\n* The final screen\ndoesn't give you a recommended decision"
      CSDU4 Functionality setText button_markdown_instruction: "# setText on More\nthan Just Labels\\r\n\\r\nYou can use `setText()` to change the text of labels,\nobviously, but it can also be used to change the text on _any_ element that\nhas text, including buttons, text input, and text areas.\\r\n\\r\n# Do This\\r\n\\r\nThe\nstarter program has an event handler already set up for the red button, can\nyou write event handlers for the other three buttons so they behave in the\nsame way?"
      CSDU4 Functionality setText input_markdown_instruction: "# Pre-fill Input Fields\nwith setText\\r\n\\r\nYou've set the text of labels, and you've set the text\nof buttons, but did you know you can also use `setText()` to pre-fill text\ninput fields?\\r\n\\r\n# Do This\\r\n\\r\nThis app has four buttons, each of which\nshould fill the \"nameInput\" field with a given name. For each button:\\r\n\\r\n*\nAdd an `onEvent` block to run when the button is clicked\\r\n* In the button's\nevent handler, set the text of \"nameInput\" to the appropriate name\\r\n\\r\nWhen\nyou've gotten all four buttons to work, add another button that will fill\nthe input field with your name."
      CSDU4 Functionality setText quiz 1_markdown_instruction: "# Making The Quiz\nApp\\r\n<img src=\"https://images.code.org/b87aef1a1fcd238590b2b866f11f47c7-image-1478035551794.15.03.png\"\nstyle=\"float:right; max-width: 200px;\">\\r\nLet's look back at the quiz\napp example that we talked about earlier in this lesson. Recall that we proposed\na single page that could serve three purposes:\\r\n\\r\n1. Display the question\\r\n2.\nShow if the question was answered correctly\\r\n3. Show if the question was\nanswered incorrectly\\r\n\\r\n# Do This\\r\n\\r\nWe've already provided the screen\nfor a single question. Before worrying about any code, you just need to set\nthis up to ask a question.\\r\n\\r\n* Change the title to a question that you\nwant to ask\\r\n* Change the text of the two buttons to two potential answers\nto your question"
      CSDU4 Functionality setText quiz 2_markdown_instruction: "# Answering the Question\\r\n\\r\nNow\nthat this screen is asking the question you want it to ask, you'll want to\nmake it respond to the answer buttons.\\r\n\\r\n# Do This\\r\n\\r\nInstead of\nusing the buttons to change screens as we did in earlier quiz apps, each one\nof the answer buttons should change the title to say either \"Correct\" or\n\"Incorrect.\" For each of the answer buttons:\\r\n\\r\n* Add an event handler\nto watch the button's ID\\r\n* In the event handler, set the title text to\neither \"Correct\" or Incorrect\"\\r\n\\r\n_Challenge: Create a couple more\nquestion screens just like this on and make the \"Next Question\" button navigate\nbetween them._"
      CSDU4 Functionality setText quiz 3_markdown_instruction: "# Don't Skip The\nQuestion\\r\n\\r\nThe way this screen currently works, a user could just click\nimmediately on \"Next Question\" and not bother answering. Worse still, the\nuser could click one answer, see that it's wrong, and then click the other.\nLet's use `hideElement()` and `showElement()` to prevent that.\\r\n\\r\n# Do\nThis\\r\n\\r\nYou'll need to hide or show all three of the buttons in order\nto make this work, so let's focus on one at a time:\\r\n\\r\n**Next Question**\\r\n\\r\nThe\n\"Next Question\" button should be hidden to start with, and then show up\nonce the question has been answered.\\r\n\\r\n* In Design Mode, select the \"Next\nQuestion\" button and check the \"hidden\" checkbox. This will make sure the\nbutton is already hidden when the app starts\\r\n* In the event handler for\neach of the answer buttons, add code to show the \"Next Question\" button\\r\n\\r\n**Answer\nButtons**\\r\n\\r\n* In the event handler for each button, add code to hide\nthe question buttons\\r\n\\t* If you want to allow a user to re-answer using\nonly the answers they haven't tried yet, you could hide just the button that\nwas clicked"
      CSDU4 Functionality setText_markdown_instruction: "# Changing text with setText()\\r\n\\r\nYou\nactually saw `setText()` briefly in the last lesson - it's a function that\nallows you to change the text of a design element with code.\\r\n\\r\n# Do This\\r\n\\r\nUsing\nthe provided `onEvent()` block\\r\n\\r\n* Add a `setText()` block in the event\nhandler\\r\n* From the dropdown in the `setText()` block, select \"title\"\\r\n*\nMake up a new title for the app and place it in the second parameter of the\n`setText()` block\\r\n* Run it and test the button"
      CSDU4 Functionality visible_markdown_instruction: "# Controlling Visibility\\r\n\\r\nEarlier\nin this lesson, when we were proposing ways to simplify the quiz app, we mentioned\nthat it was possible to show or hide design elements with code. App Lab has\ntwo functions that let you control the visibility of an element:\\r\n\\r\n*\n`hideElement()` makes the specified element invisible\\r\n* `showElement()`\nmakes the specified element visible\\r\n\\r\n# Do This\\r\n\\r\nThe provided app\nhas an image and two buttons.\\r\n\\r\n* Attach an event handler to the \"Hide\"\nbutton that hides the image when clicked\\r\n* Attach an event handler to the\n\"Show\" button that shows the image when clicked"
      CSDU4 List App Demo_markdown_instruction: "# List Manager\\r\n\\r\nThe list manager\napp allows user to keep track of the state of information and can be modified\nto serve many different purposes, such as checking in / out loaned items,\ntracking personal To Dos, or keeping track of where things are in a multi-step\nprocess.\\r\n\\r\nWhile this example focuses on a single list, more sophisticated\nlist apps could allow the user to create multiple lists, or even move items\nbetween lists. This app also only keeps track of the name of an item and whether\nor not it is \"Done,\" but it could be extended to track and organize any\namount of information about the list items.\\r\n\\r\n# Functionality Missing\nfrom this Prototype\\r\n\\r\n* Delete buttons don't actually delete items from\nthe list\\r\n* Add screen doesn't actually add an item to the list"
      CSDU4 Project Bug Feature_markdown_instruction: "# Improving and Iterating\\r\n\\r\nYou've\nput your app in front of users, gathered feedback, and identified bugs and\nnew features - time to do something about it.\\r\n\\r\n# Do This\\r\n\\r\nEach\nteam member is going to implement select features and bug fixes on their own\nversion of the team's app. Start by selecting a sticky note from the **To\nDo** column of your team's chart and moving it to the **Doing** column. For\neach sticky you tackle:\\r\n\\r\n* Add a comment to the top of your program\ndescribing the feature or bug fix you are implementing\\r\n* Work on your iteration\nuntil it works. Try to stay focused on only the single feature or bug that\nyou've selected.\\r\n* When done, move your sticky to the **Done** column,\npick a new one, and start the process over."
      CSDU4 Project Events_markdown_instruction: "# Linking Screens\\r\n\\r\nWith all\nof your screens in place you can start adding events that will change the\nscreens. When you're done with this step you'll actually have an interactive\nprototype!\\r\n\\r\n# Do This\\r\n\\r\nFor each screen of your app:\\r\n\\r\n* Find\nall of the button IDs\\r\n* For each button, add an event handler that watches\nthat ID\\r\n* In each event handler, use `setScreen()` to move the the right\nscreen\\r\n* Test it all out!\\r\n\\r\nDepending on the number of screens and\nbuttons your app has, this can be a pretty involved process. Make sure that\nyou test your work often, using `console.log()` blocks to debug any strange\nbehavior with your app. When you think you've got the whole thing working,\ncompare your app with other members of your group to see if they work the\nsame."
      CSDU4 Project Functionality_markdown_instruction: "# Add Some Functionality\\r\n\\r\nUsing\nthe list you brainstormed with your team, add a single piece of new functionality\nto your app.\\r\n\\r\n# Do This\\r\n\\r\nBefore adding anything new to a working\napp, it's always a good idea to make a backup. Click the \"Remix\" button\nin the header, give your remix a good name, and then come back here.\\r\n\\r\nFor\neach piece of functionality you incorporate:\\r\n\\r\n* Make a remix of your\napp at it's current state\\r\n* Return here to work on your app\\r\n* Add a\ncomment to the top of your program describing the functionality you are trying\nto add\\r\n* Work on your app until it works. Try to stay focused on only the\nsingle piece of functionality you've chosen\\r\n* When done, pick a new idea\nand start the process over\\r\n"
      CSDU4 Project Import_markdown_instruction: "# Back To Your App\\r\n\\r\nNow that\nyou've had some practice with importing screens, it's time to start working\non your team's app.\\r\n\\r\n# Do This\\r\n\\r\nEach member of your team is going\nto create their own copy of the app, with all of the team members' screens\nimported in. This will be your copy of the app, and the copy that you will\nstart to add code to in the next lesson.\\r\n\\r\n* Collect all of the sharing\nurls for your team's pages\\r\n\\t* You can find the share url by going back\nto the last level of the previous lesson, or by finding the screen in your\n[projects directory](/projects)\\r\n* Import each of the screens, one at a\ntime\\r\n\\t* If you run into an ID error with one of the screens, discuss the\nissue with the screen's creator so it can be fixed and imported\\r\n* Delete\nthe default \"screen1\"\\r\n* Set the main screen as the default\\r\n\\r\nDon't\nworry about adding any code at this point; we'll get to that in the next\nlevel."
      CSDU4 Quiz App Demo_markdown_instruction: "# Quiz Me\\r\n\\r\nA quiz app can\nbe used to teach, or help reinforce, information important to your chosen\ntopic.\\r\n\\r\nAt its most basic, a quiz app is composed of a screen for each\nquestion with two or more buttons for multiple choice answers. Each button\nlinks to a page that either confirms that you were correct, or gives you information\nabout why you were were wrong.\\r\n\\r\nMore advanced quiz apps could include\nfeatures such as:\\r\n\\r\n* Different types of questions (such as matching,\nfree response, or even interactive games)\\r\n* Randomizing the order of questions\\r\n*\nChanging the questions based on how we'll you're doing\\r\n* Providing a\nfinal score\\r\n* Incorporating study material\\r\n\\r\n# Functionality Missing\nfrom this Prototype\\r\n\\r\n* Questions aren't actually checked for correctness"
      CSDU4 nameAgeTemplate_markdown_instruction: "# Text Input Elements\\r\n\\r\nSo\nfar we've been using `promptNum` as a simple way to get a number as input.\nNow that we know a little about strings were are going to create **user interface\nelements that users can use to submit text (i.e. strings) instead**. The first\nand simplest example is `textInput` which you can find in Design Mode.\\r\n\\r\n<img\nsrc=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19\nPM.png\" style=\"width: 100px\">\\r\n\\r\n# Do This\\r\n\\r\n* **Add two text\ninput elements to this program**, one for the name and one for the age of\nthe user.\\r\n* **Give your text input elements descriptive and meaningful\nIDs**\\r\n* **In Design Mode** set their default text to prompt the user for\ntheir name in age\\r\n* **Compare your app to the example below**\\r\n\\r\n<img\nsrc=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11\nPM.png\" style=\"float:left; width:200px;\">\\r\n<br>"
      CSDU6  note array length_markdown_instruction: "# Adding to Arrays\\r\n\\r\nArrays\ndon't have to be a fixed length, you can add or delete as many items in the\narray as you'd like. The left and right arrows to the side of the array block\nlet you add or delete an item at the end of the array.\\r\n\\r\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\\r\n\\r\n#\nDo this\\r\n\\r\n* Add at least two more unique notes to the existing array.\\r\n*\nRun the code to see what happens."
      CSDU6 - Arrays - expressionsAsIndexes_markdown_instruction: "# Expressions\nas Indexes: Using Variables\\r\n\\r\n* **Starter code** has been provided which\ncreates an list of identifiers for icons in the icon library\\r\n* **Write\ncode** that sets the image on the screen to a random icon from the list"
      CSDU6 - Arrays - indexPractice_markdown_instruction: "# Index Practice\\r\n\\r\n<img\nsrc=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates a list called `colors`.\\r\n\\r\n* Use `setProperty`\nand the list of colors to change the `background-color` of the buttons to\ncreate a rainbow. The first button has been done for you."
      CSDU6 - Arrays - length_markdown_instruction: "<img src=\"https://images.code.org/f02914c957acffecbadaa3646388d26c-image-1486499703151.33.50\nPM.png\" style=\"width: 200px; float:right\">\\r\n\\r\n# List Length\\r\n\\r\n*\n**Starter code** has been provided which creates several long arrays.\\r\n*\n**Use `list.length` and `console.log`** to determine how many items are in\neach array. An example of the output is below."
      CSDU6 - Arrays - lengthMinus1_markdown_instruction: "# Accessing Last Item\nin List\\r\n\\r\n* **Starter code** has been provided that which creates several\nlists.\\r\n* **Write Code** to display the final item in each list. Make sure\nto use list.length so that your code will work even if the list shrank.\\r\n"
      CSDU6 - LED buttonL_markdown_instruction: "# Using Board Events\\r\n\\r\nRight\nnow the LED turns on when the left button (`buttonL`) is pressed down. It\nshould turn off when the right button (buttonR) is pressed down.\\r\n\\r\n<div\nstyle=\"float:right;\" markdown=1> \\r\n\\r\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)\n\\r\n\\r\n</div>\\r\n\\r\n# Do this\\r\n\\r\n* Add another `onBoardEvent()` block\nto turn the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018_markdown_instruction: "# Using Board Events\\r\n\\r\nRight\nnow the LED turns on when the left button (`buttonL`) is pressed down. It\nshould turn off when the right button (buttonR) is pressed down.\\r\n\\r\n<div\nstyle=\"float:right;\" markdown=1> \\r\n\\r\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)\n\\r\n\\r\n</div>\\r\n\\r\n# Do this\\r\n\\r\n* Add another `onBoardEvent()` block\nto turn the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL down_markdown_instruction: "# Other Board Events\nwith the Buttons\\r\n\\r\nThe left and right buttons have three event types:`press`,\n`down`, and `up`\\r\n\\r\nSo far you've just been using the `press` event.\nNow, we're going to use the `up` and `down` events to make the LED turn on\nand off with just **one** button.\\r\n\\r\n## Do this\\r\n* Drag out an `onBoardEvent`\nblock for one of the buttons and set the event type to `down`.\\r\n* Add code\nto turn the LED on when the button goes down."
      CSDU6 - LED toggle buttonL up_markdown_instruction: "# Other Board Events with\nthe Buttons\\r\n\\r\nInstead of using the right button, you can make the LED\nturn off when the left button comes back up.\\r\n\\r\n# Do this\\r\n* Create\nan 'up' event for the left button.\\r\n* Add code to turn the LED off when\nthe button pops back up."
      CSDU6 - LED toggle buttonL up_2018_markdown_instruction: "# Other Board Events\nwith the Buttons\\r\n\\r\nInstead of using the right button, you can make the\nLED turn off when the left button comes back up.\\r\n\\r\n# Do this\\r\n* Create\nan 'up' event for the left button.\\r\n* Add code to turn the LED off when\nthe button pops back up."
      CSDU6 - LED toggle buttonL_markdown_instruction: "# Using Board Events with\nthe LED\\r\n\\r\nCan you toggle the LED on and off using a single board event?\\r\n\\r\n##\nDo this\\r\n* Pull out one `onBoardEvent()` block.\\r\n* Add code to turn the\nLED on and off with just the one event on the Board."
      CSDU6 - UI and Inputs - Debug Screens and IDs_markdown_instruction: "# Debug\nThe Program\\r\n\\r\nIn Unit 4 you learned how to set up the UI of an app, give\nelements meaningful IDs, and switch between screens using button clicks.   The\nprogrammer that created this app did not use good IDs and that caused their\ncode to be buggy. Can you fix their code?\\r\n\\r\n* Go into Design Mode and\ngive everything meaningful IDs\\r\n* Set up the event handlers so that the\nbuttons transition to the correct screen (see diagram below)\\r\n\\r\n![](https://images.code.org/f9c9a9b5cbcb6e1cd59b1349625b7e9d-image-1485898200882.png)"
      CSDU6 - UI and Inputs - dropdown setText_markdown_instruction: "# setText and\ngetText\\r\n\\r\nOften you will want to get the text of a UI Element and use\nit to set the text of another element on the screen. Can you get the text\nfrom the dropdown when the user picks a new input and use it to set the text\nof the \"choiceDisplay\" label."
      CSDU6 - UI and Inputs - event type testing_markdown_instruction: "# Event Testing:\n\\r\n\\r\nSo far you have only used the 'click' event type. However there\nare lots of other event types. You are going to test out a couple different\nevent types for 4 different UI elements (Button, Dropdown, Slider, Text Input).\\r\n\\r\n**Starter\nCode:** The starting code is set up to react to the *click* event for the\n*button*. When that event fires a message will be logged to the console.\\r\n\\r\nOne\nat a time, **change either the ID or event type**. Run the program and write\ndown you observations of when this event fires. Keep going until you have\ntried all the combinations of events in the table."
      CSDU6 - UI and Inputs - function_markdown_instruction: "# setColor Function\\r\n\\r\nAt\nthis point you probably have the same code inside each of your event handlers.\nRemember that when you have repeated code it is good to put it into a function.\nCan you use functions to get rid of the repeated code?"
      CSDU6 - UI and Inputs - get set with text input_markdown_instruction: "# setText\nand getText\\r\n\\r\nYou've seen how to use getText and setText already. Can\nyou make this app get the text the user typed once they hit enter and show\nit in the text area at the bottom?\\r\n\\r\n_Tip: The \"change\" event is triggered\nwhen the user clicks \"enter\" in a field. Use an event handler for the text\ninput watching for the \"change\" event._"
      CSDU6 - UI and Inputs - getNumber practice_markdown_instruction: "# getNumber\\r\n\\r\n**Starter\nCode:** The program tries to update the valueDisplay whenever the slider value\nchanges but it always sets the value to 10.\\r\n\\r\nCan you use `getNumber()`\nto get the value of the slider and update the valueDisplay as it changes?"
      CSDU6 - UI and Inputs - getNumber_markdown_instruction: "# getNumber\\r\n\\r\n**Starter\nCode:** This program creates a simple calculator but **there is something\nwrong with it. Try putting in 2 + 2.**\\r\n\\r\nWe can fix this by using `getNumber()`\ninstead of `getText()`. Can you fix the program by changing `getText()` to\n`getNumber()`?"
      CSDU6 - UI and Inputs - getText_markdown_instruction: "# getText\\r\n\\r\nTry\nto set up an event handler that gets the text from the dropdown whenever a\nuser selects a new item from the dropdown. You will need to use the getter\n`getText()`. Whenever you use a getter you should save it in a variable. Use\n`console.log()` to make sure it is working."
      CSDU6 - UI and Inputs - hide show_markdown_instruction: "# Hide and Show\\r\n\\r\nIt\nis a little weird that both buttons are on the screen at the same time. You\ndon't need the stop alarm button until the alarm is on. Can you make the\nbuttons only show when they are needed?\\r\n\\r\n* You will want the stop alarm\nbutton to be hidden when the program starts. You can do this in design mode.\\r\n\\r\nHint:\nWhen you click the trigger alarm button, you should change the text, hide\nthe trigger alarm button, _and_ show the stop alarm button."
      CSDU6 - UI and Inputs - set slider range_markdown_instruction: "# Set Slider\nRange\\r\n\\r\nSliders represent a range of numbers. In order to set that range\nyou need to set the minimum value and maximum value for each slider. Do you\nremember what the range of values is you can give for each value in a RGB\ncolor?"
      CSDU6 - UI and Inputs - setProperty Image_markdown_instruction: "# setProperty\nimage\\r\n\\r\n**Note:** This level starts in Design Mode.\\r\n\\r\nThere is an\nimage element set up for you but it does not show when you leave Design Mode\nbecause it has not been told what image to display. \\r\n\\r\n* Use the `setProperty()`\ncommand to set the image of the UI Image Element on the screen.\\r\n"
      CSDU6 - UI and Inputs - setProperty first level_markdown_instruction: "# setProperty\\r\n\\r\n**Starter\nCode:** There is one call to `setProperty()` which sets the text-color to\nblue when you run the program.\\r\n\\r\nCan you add more calls to `setProperty()`\nthat change other things about the text when you run the program? Try to change\nat least 3 more things.\\r\n"
      CSDU6 - UI and Inputs - setProperty_markdown_instruction: "# setProperty background-color\\r\n\\r\nChange\nthe `background-color` of a button to a new random color each time it is clicked\nusing `setProperty()`."
      CSDU6 - UI and Inputs - setScreen_markdown_instruction: "# setScreen\\r\n\\r\nLets\nstart with a setter you have used before `setScreen()`. \\r\n\\r\n* Make the\nAbout Me button on the Home page go to the About Me page.\\r\n* Make the Back\nbutton on the About Me go to the Home page."
      CSDU6 - UI and Inputs - setText_markdown_instruction: "# setText\\r\n\\r\nWe\nare going to start making an alarm app. We have already set up an event handler\nfor the \"triggerAlarmButton\" which will change the \"statusLabel\" text\nto ON when clicked. Can you make the stop alarm button change the text to\nOFF when clicked?"
      CSDU6 - UI and Inputs - slider UI_markdown_instruction: "# RGB Sliders\\r\n\\r\n<img\nsrc=\"https://images.code.org/f3fb468a73aa35b69d7e64deee34c7c3-image-1486080850211.12.39\nPM.png\" style=\"width:200px;float:right\">\\r\n\\r\nFirst step to creating\nthe RGB Sliders app is to set up the UI elements and event handers for the\nsliders. \\r\n\\r\n* Can you get the screen to look similar to the one below?\nHint: The color box is a button with no text.\\r\n* Can you set up 3 event\nhandlers that listen for when someone has finished moving the slider to a\nnew location? Hint: Think back to your event investigation. Which event type\ndo you want?"
      CSDU6 - board event challenge_markdown_instruction: "# Challenge: Sound Board\\r\n\\r\nCheck\nwith your teacher before starting the challenge.\\r\n\\r\nNow that you know\nhow to use board events, the buttons, switch, and the buzzer, try making a\nprogram that turns your board into a sound board when you press the buttons\nor flip the switch. Play around with the duration and frequencies of the sounds,\nand listen to how it turns out."
      CSDU6 - board event challenge_2018_markdown_instruction: "# Challenge: Sound\nBoard\\r\n\\r\nCheck with your teacher before starting the challenge.\\r\n\\r\nNow\nthat you know how to use board events, the buttons, switch, and the buzzer,\ntry making a program that turns your board into a sound board when you press\nthe buttons or flip the switch. Play around with the duration and frequencies\nof the sounds, and listen to how it turns out."
      CSDU6 - button LED prediction_markdown_instruction: "See contained level for\nmarkdown"
      CSDU6 - button LED prediction_2018_markdown_instruction: "See contained level\nfor markdown"
      CSDU6 - button debug_markdown_instruction: "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/clickdebug.gif\"\nstyle=\"float: right; margin: 20px; width: 200px;\">\\r\n\\r\n# Debug\\r\n\\r\nThis\nprogram should work like the image on the right - toggle LEDs one by one in\nthe direction of the button you click. Clicking the left button should cause\nLEDs to toggle counter clockwise, while clicking the right button should toggle\nLEDs clockwise. Find and fix all of the bugs to get the program working again.\\r\n\\r\n_Challenge:\nNote that in the gif, the last LED on each side doesn't get toggled back.\nCan you update the program so that it doesn't leave an LED on when you change\ndirections?_"
      CSDU6 - button on off_markdown_instruction: "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_on_off.gif\"\nstyle=\"float: right; margin: 20px; width: 200px;\"/>\\r\n\\r\n# On and Off\nButtons\\r\n\\r\nWrite a program that works like the image to the right. The\nleft button should turn on all of the color LEDs, and the right button should\nturn them off again.\\r\n"
      CSDU6 - button screen buttonL_markdown_instruction: "# Board Events\\r\n\\r\nThe\n`onBoardEvent()` command allows you to start taking input from your Circuit\nPlayground. This app has two screens, \"red_screen\" and \"blue_screen\".\nUsing the provided board event handler, write a program that switches to the\nblue screen when the left button on your board is pressed."
      CSDU6 - button screen buttonR_markdown_instruction: "# Changing the Input\\r\n\\r\n<img\nsrc=\"https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png\"\nstyle=\"float:right; margin-left: 10px; width: 50%\">\\r\n\\r\nUsing another\n`onBoardEvent()` block, make `buttonR` change the screen back to \"red_screen\".\nThe first input of the `onBoardEvent()` command lets you pick which board\nobject to watch."
      CSDU6 - button switch_markdown_instruction: "# The Toggle Switch\\r\n\\r\nWhile\nthe toggle switch is in many ways similar to the left and right buttons, the\nreasons you might use it can be different. Unlike the buttons, the toggle\nswitch stays in whichever position you place it, so it doesn't have a \"press\"\nevent. In fact, you'll find that none of the events you used with buttons\nare present for the toggle switch.\\r\n\\r\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/toggle.gif\"\nstyle=\"float:right; margin: 20px; width: 200px;\">\\r\n\\r\n# Do This\\r\n\\r\nDrag\nout an `onBoardEvent()` block and select `toggleSwitch` from the first dropdown\\r\n\\r\n*\nLook at the options available in the events dropdown. What do you think they\ndo?\\r\n* Write a program that turns on half of the color LEDs at a time, based\non the position of the toggle switch"
      CSDU6 - button toggle_markdown_instruction: "# Toggle with a Button\\r\n\\r\nUsing\n`onBoardEvent()`, can you write a program that toggles the red LED when you\nclick the left button?"
      CSDU6 - button tug o war challenge_markdown_instruction: "# Challenge\\r\n\\r\n_Check\nwith your teacher before starting this challenge_\\r\n\\r\nAt this point your\nTug o' War game should have basic functionality, but there are still a few\nthings missing. Continue fleshing out your game. You can make the game your\nown in any way you like, but you might add some of the following features:\\r\n\\r\n*\nSwitch to a \"Win\" screen when one player reaches their target\\r\n* Add a\n\"Reset\" button to start the game over\\r\n* Add different difficulty levels\nor \"handicaps\" (one user may move two on each click while the other only\nmoves one)\\r\n* Add visuals to make the game look more interesting\\r\n* Use\nthe color LEDs to show the score"
      CSDU6 - button tug o war left button_markdown_instruction: "# Making Both Buttons\nWork\\r\n\\r\nIf you were successful in the last level, the slider should move\nto the right when the right button is pressed. To get the left button to work\nyou need to add another event handler, only this time it should **decrease**\nthe variable _score_ and update the slider on each press."
      CSDU6 - button tug o war right button_markdown_instruction: "# Tug o' War\\r\n\\r\nLet's\nstart working on a two player Tug o' War game. Each player will be assigned\none of the two hardware buttons (`buttonL` or `buttonR`), and they play the\ngame by clicking as quickly as possible. Each time one of the buttons is clicked,\nit should move the slider \"tug_slider\" in the direction of that button.When\nthe slider gets to one of the ends (either -10 or 10), that player wins.\\r\n\\r\n#\nDo This\\r\n\\r\nFirst we'll get the right button working. You've already\nbeen provided an event handler for `buttonR` - when the \"press\" event occurs,\nyour program should:\\r\n\\r\n* Increase the variable _score_ by one\\r\n* Set\nthe value of \"tug_slider\" to the new score\\r\n\\r\nDon't worry about the\nother button yet, we'll get to that in the next level."
      CSDU6 - button up down predict question_markdown_instruction: "What do you\nthink will happen when you run this code? What will happen when you press\nthe left and right buttons?"
      CSDU6 - button up down_markdown_instruction: "# Down and Up Events\\r\n\\r\nAs\nyou saw in the last level, the \"down\" and \"up\" events allow you to respond\nto buttons being pressed down and being released back up, respectively.\\r\n\\r\n#\nDo This\\r\n\\r\nUsing those events, can you write a program that shows the\nlabel with id \"alert_message\" while the button is pressed down, but hides\nit again when the button is released?"
      CSDU6 - button_LED_prediction_markdown_instruction: "# Board Events\\r\n\\r\nThe\n`onBoardEvent()` block allows you to start taking input from your Circuit\nPlayground. Look at the program with a partner and discuss what you think\nit'll do. Once you've come up with an answer, click \"Run\" to check your\nanswer.\\r\n\\r\n* What will happen when you press the left button down?"
      CSDU6 - button_LED_prediction_2018_markdown_instruction: "# Board Events\\r\n\\r\nThe\n`onBoardEvent()` block allows you to start taking input from your Circuit\nPlayground. Look at the program with a partner and discuss what you think\nit'll do. Once you've come up with an answer, click \"Run\" to check your\nanswer.\\r\n\\r\n* What will happen when you press the left button down?"
      CSDU6 - buzzer duration buttons_markdown_instruction: "# Buzzer and the Buttons\\r\n\\r\nThis\nprogram should use the buttons to play long and short buzzes.\\r\n\\r\n# Do\nthis\\r\n* Change the duration parameter of `buzzer.frequency` to make the\nleft button play a long buzz, and the right button play a short buzz."
      CSDU6 - buzzer duration buttons_2018_markdown_instruction: "# Buzzer and the\nButtons\\r\n\\r\nThis program should use the buttons to play long and short\nbuzzes.\\r\n\\r\n# Do this\\r\n* Change the duration parameter of `buzzer.frequency`\nto make the left button play a long buzz, and the right button play a short\nbuzz."
      CSDU6 - buzzer duration_markdown_instruction: "# Buzzer Duration\\r\n\\r\nAs\nyou've noticed, `buzzer.frequency()` has two parameters: frequency and duration.\nBoth of these take a number as input.\\r\n\\r\n* Frequency changes how the buzzer\nsounds. The bigger the number you give it, the higher the buzzer's sound\nwill be.\\r\n\\r\n* Duration determines how long the buzzer is going to play\na sound for in milliseconds.\\r\n\\r\nFor right now we're going to focus on\nduration, the second parameter.\\r\n\\r\n\\r\n# Do this\\r\nTry out a few things\nwith duration:\\r\n\\r\n* Change the duration of the buzzer to something longer\nthan 100.\\r\n* Try setting the duration to 0, what happens?\\r\n\\r\nRun the\nprogram multiple times to see what happens before you move on."
      CSDU6 - buzzer duration_2018_markdown_instruction: "# Buzzer Duration\\r\n\\r\nAs\nyou've noticed, `buzzer.frequency()` has two parameters: frequency and duration.\nBoth of these take a number as input.\\r\n\\r\n* Frequency changes how the buzzer\nsounds. The bigger the number you give it, the higher the buzzer's sound\nwill be.\\r\n\\r\n* Duration determines how long the buzzer is going to play\na sound for in milliseconds.\\r\n\\r\nFor right now we're going to focus on\nduration, the second parameter.\\r\n\\r\n\\r\n# Do this\\r\nTry out a few things\nwith duration:\\r\n\\r\n* Change the duration of the buzzer to something longer\nthan 100.\\r\n* Try setting the duration to 0, what happens?\\r\n\\r\nRun the\nprogram multiple times to see what happens before you move on."
      CSDU6 - buzzer intro_markdown_instruction: "# Using the Buzzer\\r\n\\r\nYou can\nuse the buzzer in a lot of different ways, but right now we're just going\nto use the `buzzer.frequency()`.\\r\n\\r\n# Do this\\r\n* Pull out a `buzzer.frequency()`\nblock from the toolbox and play around with it. You'll notice it has two\nparameters, what happens when you change either, or both of those?\\r\n* Run\nthe program and enjoy the music of your Circuit Playground."
      CSDU6 - buzzer intro_2018_markdown_instruction: "# Using the Buzzer\\r\n\\r\nYou\ncan use the buzzer in a lot of different ways, but right now we're just going\nto use the `buzzer.frequency()`.\\r\n\\r\n# Do this\\r\n* Pull out a `buzzer.frequency()`\nblock from the toolbox and play around with it. You'll notice it has two\nparameters, what happens when you change either, or both of those?\\r\n* Run\nthe program and enjoy the music of your Circuit Playground."
      CSDU6 - ch 1 exemplar LEDs_markdown_instruction: "# An Example Using Color\nLEDs\\r\n\\r\nHere's an example app that uses the color LEDs, event handlers,\nand a for loop to create an visual color mixer. Run this app and analyze how\nyou think it was written."
      CSDU6 - ch 1 project design_markdown_instruction: "# Set Up Your Screen\\r\n\\r\nUsing\nthe project guide, set up the elements of your screen in Design Mode."
      CSDU6 - ch 1 project events_markdown_instruction: "# Event Handlers\\r\n\\r\nSet\nup an event handler for each of the elements you plan to use for input. Don't\nworry yet about getting the them fully functional, but you might use `console.log()`\nstatements to help with testing."
      CSDU6 - ch 1 project finish_markdown_instruction: "# Add the Finishing Touches\\r\n\\r\nGo\nback to your project guide and check to see that your app is addressing the\ngoals you set out. This is your chance to add finishing touches, improve functionality,\nand get your app ready to be used by other people. When you're are finished,\nand have thoroughly tested it, use the share button to share your app out\nwith others."
      CSDU6 - ch 1 project functions_markdown_instruction: "# Functions\\r\n\\r\nCreate\nall of the functions that you identified in your project guide."
      CSDU6 - ch 1 project output_markdown_instruction: "# Board Output\\r\n\\r\nAt\nthis point you should have the structure of your app mostly fleshed out. Test\nyour program as is to make sure that everything currently works as expected.\nOnce you are confident in your program as-is, add the code to send output\nto your board."
      CSDU6 - end challenge_markdown_instruction: "# Challenge: Board Events and\nOutputs\\r\n\\r\nCheck with your teacher before starting the challenge.\\r\n\\r\nNow\nthat you know how to use board events, the led, and the buzzer, try to create\nan app that uses all three."
      CSDU6 - final project 1_markdown_instruction: "# Designing the User Interface\\r\n\\r\nBefore\nworrying about the code for your program, start by laying out the user interface.\nAs you add elements in Design Mode, make sure to give everything a meaningful\nID. Even if you don't plan on accessing an element with code, making sure\nthat all of your IDs are descriptive will help make your program more readable\nand easier to program."
      CSDU6 - final project 1_2018_markdown_instruction: "# Designing the User Interface\\r\n\\r\nBefore\nworrying about the code for your program, start by laying out the user interface.\nAs you add elements in Design Mode, make sure to give everything a meaningful\nID. Even if you don't plan on accessing an element with code, making sure\nthat all of your IDs are descriptive will help make your program more readable\nand easier to program."
      CSDU6 - final project 2_markdown_instruction: "# Wiring Up the UI\\r\n\\r\nWith\nyour user interface in place, you can now add event handlers for your interface\nelements. At this point you may want to just include `console.log()` commands\nto make sure that your events are working as expected - you can add the functional\ncode later one."
      CSDU6 - final project 2_2018_markdown_instruction: "# Wiring Up the UI\\r\n\\r\nWith\nyour user interface in place, you can now add event handlers for your interface\nelements. At this point you may want to just include `console.log()` commands\nto make sure that your events are working as expected - you can add the functional\ncode later one."
      CSDU6 - final project 3_markdown_instruction: "# Board Input Events\\r\n\\r\nNow\nyou can add the events which will take input from the board. Again, feel free\nto just use `console.log()` statements at this point to ensure that your events\nare working."
      CSDU6 - final project 3_2018_markdown_instruction: "# Board Input Events\\r\n\\r\nNow\nyou can add the events which will take input from the board. Again, feel free\nto just use `console.log()` statements at this point to ensure that your events\nare working."
      CSDU6 - final project 4_markdown_instruction: "# Functions\\r\n\\r\nAs you continue\nto work through your program, look for patterns that can be abstracted into\nfunctions. Can you find code that is repeated multiple places, or chunks of\ncode that could be better understood of given a name? Don't forget that you\ncan use parameters to write functions for repeated code that is _mostly_ the\nsame, but varies a bit (such as setting color on multiple LEDs)."
      CSDU6 - final project 4_2018_markdown_instruction: "# Functions\\r\n\\r\nAs you\ncontinue to work through your program, look for patterns that can be abstracted\ninto functions. Can you find code that is repeated multiple places, or chunks\nof code that could be better understood of given a name? Don't forget that\nyou can use parameters to write functions for repeated code that is _mostly_\nthe same, but varies a bit (such as setting color on multiple LEDs)."
      CSDU6 - final project 5_markdown_instruction: "# Board Output\\r\n\\r\nIf you\nhaven't already, use some of the output elements on the board to communicate\nuseful information to the user."
      CSDU6 - final project 5_2018_markdown_instruction: "# Board Output\\r\n\\r\nIf\nyou haven't already, use some of the output elements on the board to communicate\nuseful information to the user."
      CSDU6 - final project 6_markdown_instruction: "# Finishing Touches\\r\n\\r\nAdd\nany finishing touches still needed to make your innovation awesome. If you\nhave time, test out your innovation with some potential users to gather feedback\nand find opportunities for improvement. When you're totally finished, click\nthe \"Submit\" button to turn it in!"
      CSDU6 - final project 6_2018_markdown_instruction: "# Finishing Touches\\r\n\\r\nAdd\nany finishing touches still needed to make your innovation awesome. If you\nhave time, test out your innovation with some potential users to gather feedback\nand find opportunities for improvement. When you're totally finished, click\nthe \"Submit\" button to turn it in!"
      CSDU6 - for loop - 1_markdown_instruction: "# For Loop - Looping Through A\nList\\r\n\\r\n* Print out all the items in the colors list using a for loop"
      CSDU6 - for loop - 10_markdown_instruction: "# For Loop - Looping Through A\nList\\r\n\\r\nYou saw this for loop on the last level:\\r\n\\r\n<pre>\\r\nfor(var\ni = 0; i < daysOfWeek.length; i++){\\r\n  console.log(i);\\r\n}\\r\n</pre>\\r\n\\r\nWhich\nprints the numbers from 0 to one less than the list length in this case (0\nto 6). Another way of looking at this is that it prints all the index values\nin the list!  This might be helpful to loop through a list!\\r\n\\r\n**Starter\nCode:** This program writes out each item of the array individually. \\r\n\\r\n**Write\nCode** that uses the for loop from the last level to print out all the items\nin the list."
      CSDU6 - for loop - 2_markdown_instruction: "# For Loop - Condition\\r\n\\r\n*\nRun the program - how many times does it print?\\r\n* Change the 2 to another\npositive number less than 5. What happens?"
      CSDU6 - for loop - 3_markdown_instruction: "# For Loop - Starting Value\\r\n\\r\nYou\ncan change where a for loop starts counting.\\r\n\\r\n* Run the program what\nnumber does it start counting at?\\r\n* Try changing the 5 to a different number\\r\n\\t*\nWhat happens if you make the number negative?\\r\n    * What happens if you\nmake the number bigger than 10 (since the condition is i < 10)?"
      CSDU6 - for loop - 4_markdown_instruction: "# For Loop - Incrementor \\r\n\\r\n*\nRun the program what numbers is it printing?\\r\n* Try to change the 2 to another\nnumber, what happens?"
      CSDU6 - for loop - 6_markdown_instruction: "# For Loop - Condition Practice\\r\n\\r\nChange\nthe condition of the for loop so that the word message prints 6 times."
      CSDU6 - for loop - 7_markdown_instruction: "# For Loop - Starting Value Practice\\r\n\\r\nEdit\nthe starting value and the condition of the loop so that it counts from 50\nto 100.\\r\n"
      CSDU6 - for loop - 8_markdown_instruction: "# For Loop - Incrementor Practice\\r\n\\r\nCan\nyou make the program count from 30 to 60 by 3s?  (30,33,36,39......57,60)"
      CSDU6 - for loop - 9_markdown_instruction: "# *for* Loop with *if*\\r\n\\r\nSometimes\nwe want to find values in an array that meet certain conditions.  We can add\nan **`if` statement inside the `for` loop** to individually check every value\nwithin the array. To practice this, we will create a `for` loop that will\n**display every value in the array greater than 5**.\\r\n\\r\n# Do This:\\r\n**\nStarter code** has been been provided that creates an array of random values.\\r\n\\r\n*\nAdd a `for` loop that references every index in the array.\\r\n\\r\n* Add an\n`if` statement inside the `for` loop that **displays every value in the array\ngreater than 5** using `console.log`\\r\n\\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\\r\n    \\r\n*\n**Note:** Because the original array is being constructed with random values\nit's *possible* that it might not have any values greater than 5.  Just run\nthe program a few times to make sure it works.  An example of the possible\noutput is below.\\r\n\\r\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26\nPM.png)\\r\n"
      CSDU6 - for loop - around for loop_markdown_instruction: "# Before and After\nFor Loop\\r\n\\r\n* Run this code and check out when the console.log statements\nbefore and after the for loop print."
      CSDU6 - for loop - button grid 1_markdown_instruction: "# Random Button Colors\\r\n\\r\n**Starter\nCode:** An array with the name of the 30 buttons on the screen (not including\nthe New Pattern button) is provided for you. \\r\n\\r\n**Write Code** that loops\nthrough all the buttons on the screen and gives them each a random color when\nthe New Pattern Button is clicked."
      CSDU6 - for loop - color buttons with for_markdown_instruction: "# Lists\\r\n\\r\n<img\nsrc=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\nTake a look at the code\nyou wrote in the last level. Can you make it better by using a loop to set\nthe button colors instead?"
      CSDU6 - for loop - color buttons_markdown_instruction: "# Lists\\r\n\\r\n<img\nsrc=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates a list of colors and a list of the buttons on the\nscreen. In addition there is code to set each button to a color.\\r\n\\r\n**Change\nthe code** so that instead of the name of each button being used in the call\nto `setProperty`, the list index is used instead.  For example:\\r\n\\r\n<pre>\\r\nsetProperty(buttons[0],\"background-color\",\ncolors[0]);\\r\n</pre>"
      CSDU6 - for loop - condition with for_markdown_instruction: "# *for* Loop with\n*if*\\r\n\\r\nAnother way to use a for loop is to count the number of occurances\nof something in list. \\r\n\\r\n** Starter Code:** The program generates an\nlist of 5 random numbers from 1 to 3.  \\r\n\\r\n**Write Code:** Write a program\nthat prints the number of 2s in the list.\\r\n\\r\n* You will need to write\nan if statement to check if the current value of the list is equal to 2\\r\n*\nInstead of printing that value inside the if statement like on the last level\nyou will want to increment a variable that keeps track of the number of 2s.\\r\n*\nPrint out the variable after the for loop runs!"
      CSDU6 - for loop - count down_markdown_instruction: "# Counting down\\r\n\\r\nSo\nfar all the programs you have written count up. Can you make this program\ncount down from 10 to 1? Hint: You need to change something about all three\nparts of the for loop!"
      CSDU6 - for loop - next day_markdown_instruction: "# Accessing Items in a List\\r\n\\r\n**Starter\nCode:** There is a list of days of the week provided as well as a command\nto set the label on the screen.\\r\n\\r\n**Do This:** Can you change the index\nvalue so that the page displays \"Today is: Tuesday\""
      CSDU6 - for loop - predict repeat_markdown_instruction: "# For Loop - Condition\nPractice\\r\n\\r\nChange the condition of the for loop so that the word message\nprints 6 times."
      CSDU6 - for loop - repeatedCode_markdown_instruction: "# Refactoring To For\nLoop\\r\n\\r\nFor loops are just a way of simplifying repeated code and make\nit easier to update in the future.\\r\n\\r\n* Can you take the repeated code\nhere and turn it into a for loop?"
      CSDU6 - for loop - why for_markdown_instruction: "# Lists\\r\n\\r\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\nWhy are loops so great?  Well\nlets try something out.\\r\n\\r\n* Add another button to your screen in design\nmode.\\r\n* Add a color for that button to the end of your list of colors\\r\n*\nAdd the button name for that button to the end of your list of buttons\\r\n*\nRun your program!\\r\n\\r\nDid it work? Notice you never changed the for loop\nat all!"
      CSDU6 - for loop - winning num_markdown_instruction: "# Debug\\r\n\\r\nThis program\nis supposed to generate 3 random winning numbers from 1 to 5. There is a list\nof numbers but it seems like there are some bugs with generating the 3 random\nnumbers when the Draw Numbers button is clicked. Can you debug the program?\nCheck to make sure you can get every number in every slot of the winning numbers\narea. "
      CSDU6 - for loops - lights picker_markdown_instruction: "# Challenge: More\nPatterns\\r\n\\r\nYour work on the color light patterns is back:\\r\n\\r\n* Consider\nusing the all lights on and all lights off functions you made on the last\nlevel here.\\r\n* Can you edit the patterns you created to use for loops where\nappropriate?\\r\n* Can you add more patterns that use for loops?"
      CSDU6 - lightswitch toggleswitch_markdown_instruction: "# Using the Toggle\nSwitch\\r\n\\r\nThe toggle switch can flip in one of two positions: `open` and\n`close`.  This program uses it to make a light switch.  Right now it can only\nturn the light on.\\r\n\\r\n# Do this\\r\n\\r\n* Create a new toggle switch event\nthat is triggered when the switch is flipped to `close`.\\r\n* Add code so\nthat when the toggle switch is flipped to `close` the light turns off."
      CSDU6 - lightswitch toggleswitch_2018_markdown_instruction: "# Using the Toggle\nSwitch\\r\n\\r\nThe toggle switch can flip in one of two positions: `open` and\n`close`.  This program uses it to make a light switch.  Right now it can only\nturn the light on.\\r\n\\r\n# Do this\\r\n\\r\n* Create a new toggle switch event\nthat is triggered when the switch is flipped to `close`.\\r\n* Add code so\nthat when the toggle switch is flipped to `close` the light turns off."
      CSDU6 - lists - lists 1_markdown_instruction: "# Lists\\r\n\\r\nLet's practice\nadding items and printing out lists.\\r\n\\r\n* Add a `console.log()` command\nto print out the lettersList\\r\n* Add the letter \"c\" to the letters list\nso it prints [a,b,c,d]"
      CSDU6 - lists - lists 2_markdown_instruction: "# Create Your Own Lists\\r\n\\r\n**Write\ncode:** to create and then log to the console _one or more_ of the following\nlists:\\r\n\\r\n* The numbers from 1 to 10\\r\n* A list of the names of 5 different\nshapes\\r\n* The names of the months of the year"
      CSDU6 - lists - lists 3 - out of bounds_markdown_instruction: "# Accessing\nItems in a List\\r\n\\r\n**Starter Code:** There is a list of days of the week\nprovided as well as well as a console.log statement to access the spot that\nholds \"Friday\" in the list. \\r\n\\r\n**Do This:** Can you add three more\nconsole.log statements that access the spots that hold:\\r\n\\r\n* Thursday\\r\n*\nMonday\\r\n* Sunday"
      CSDU6 - lists - lists 3_markdown_instruction: "# Accessing Items in a List\\r\n\\r\n**Starter\nCode:** There is a list of days of the week provided as well as a command\nto set the label on the screen.\\r\n\\r\n**Do This:** Can you change the index\nvalue so that the page displays \"Today is: Tuesday\""
      CSDU6 - lists - lists 5_markdown_instruction: "# Debug\\r\n\\r\nThis program\nis supposed to generate 3 random winning numbers from 1 to 5. There is a list\nof numbers but it seems like there are some bugs with generating the 3 random\nnumbers when the Draw Numbers button is clicked. Can you debug the program?\nCheck to make sure you can get every number in every slot of the winning numbers\narea. "
      CSDU6 - sensor love tester demo_markdown_instruction: "# \"Love\" Tester\\r\n\\r\nThe\n\"Love\" Tester is a classic carnival game. It works by having a user place\ntheir palm flat on a sensor or hold a metal handle. The tester then displays\nhow in love that person is. The simplest version of these machines simply\nmeasure the temperature of the user’s hand and equate more love with a higher\ntemperature.\\r\n\\r\nTest out this \"Love\" Tester by holding your thumb down\non your Circuit Playground's temperature sensor. Compare your results with\nthose of your neighbors - do all of the boards respond in the same way?"
      CSDU6 - sensor theremin demo_markdown_instruction: "# Light Theremin\\r\n\\r\nA\ntheremin is an instrument that can be played without the musician actually\ntouching it! Traditional theremins use magnetic fields for user interaction,\nbut a simpler version can be made by detecting and reacting to light.\\r\n\\r\nTest\nout this theremin by waving your hand over the light sensor on your Circuit\nPlayground. How does the tone change as the amount of light detected changes?"
      CSDU6 - sensor vu meter demo_markdown_instruction: "# VU Meter\\r\n\\r\nMany\nstereo systems feature a row of LEDs that light up as the music plays. This\ndisplay is called a Volume Unit (VU) Meter, and it allows the user to see\nhow loud the music is as it plays.\\r\n\\r\nTest out this VU Meter by speaking\nor otherwise making noise near the Circuit Playground. How do the lights and\ndisplay change as the volume of ambient noise changes?"
      CSDU6 - sensors challenge_markdown_instruction: "# Challenge\\r\n\\r\n_Check\nwith your teacher before pursuing this challenge_\\r\n\\r\nNow that you've\npracticed taking input from the various analog sensors and changing their\nscale to meet your needs, can you come up with an interesting use for sensor\ndata? It's easy to display the raw numbers coming out of a sensor, but far\nmore interesting to present that data in different ways.\\r\n\\r\nConsider the\nfollowing ways you might communicate sensor data:\\r\n\\r\n* Use the board outputs\\r\n*\nChange the width, height, or position of a UI element\\r\n* Use conditionals\nto display different images based on sensor values"
      CSDU6 - sensors experiment_markdown_instruction: "<iframe width=\"370\" height=\"620\"\nstyle=\"float:right; margin-left: 25px; border: 0px;\" src=\"https://studio.code.org/projects/applab/kxyJyJI1Bg1fV_5NIl8MHQ/embed\"></iframe>\\r\n\\r\n#\nSensor Experiment\\r\n\\r\nRun the program to the right and experiment with\nyour board. Try interacting with your board in many different ways to figure\nout what each sensor might be. Once you've completed the experiment, answer\nthe following questions for each sensor in the text box below.\\r\n\\r\n* What\ndoes this sensor measure?\\r\n* What is its maximum value?\\r\n* What is its\nminimum value?"
      CSDU6 - sensors light_markdown_instruction: "# Light Sensor Updates\\r\n\\r\nThis\napp is very similar to the last, but we've added a button with the ID \"update_button\".\nWrite a program that displays the current value of the light sensor every\ntime the update button is clicked."
      CSDU6 - sensors love tester 1_markdown_instruction: "# \"Love\" Tester: Collecting\nand Scaling Input\\r\n\\r\nWhich sensor do you need to take input from?\\r\nWhat\nscale of input is appropriate for this app?\\r\n\\r\n# Do This\\r\n\\r\nAdd an\nevent handler to continually collect data from your chosen sensor and use\n`console.log()` to track how it changes to user interaction. If necessary,\nchange the scale of your input to meet your needs.\\r\n\\r\n_Tip: Consider which\ntype of data is easiest to use from the temperature sensor - the raw value,\ntemperature in C, or temperature in F._"
      CSDU6 - sensors love tester 2_markdown_instruction: "# \"Love\" Tester: Displaying\nOutput\\r\n\\r\nHow will your collected data be displayed?\\r\nDoes your data\nneed to be transformed or processed before being displayed?\\r\n\\r\n# Do This\\r\n\\r\nReplace\nyour call to `console.log()` with the kind of output you need for your project.\\r\n\\r\n_Tip:\nYou may want a conditional to determine which output to display depending\non input._"
      CSDU6 - sensors love tester 3_markdown_instruction: "# \"Love\" Tester: Finishing\nit Up\\r\n\\r\nDoes your app meet the minimum requirements of its objective?\\r\n\\r\n#\nDo This\\r\n\\r\nAdd the finishing touches to your app. Return to your planning\nguide to make sure that the app meets your initial goals."
      CSDU6 - sensors predict question_markdown_instruction: "# Make a Prediction\\r\n\\r\nRead\nthe code in this program and make a prediction below. What do you think this\nprogram will do when you run it? How is the user intended to interact with\nthe board? You may need to blow onto the board to see the full range of this\napp."
      CSDU6 - sensors predict question_2018_markdown_instruction: "# Make a Prediction\\r\n\\r\nRead\nthe code in this program and make a prediction below. What do you think this\nprogram will do when you run it? How is the user intended to interact with\nthe board? You may need to blow onto the board to see the full range of this\napp."
      CSDU6 - sensors rgb part 1_markdown_instruction: "# Displaying Sensor Readings\nin Color\\r\n\\r\nIn the previous prediction level you saw how the `setScale()`\nmethod can convert the full range of sensor readings (0-1023) into a range\nthat can be used for RGB values (0-255). Let's build on that idea to make\nan app that can communcate the current value of all three analog sensors with\na single color.\\r\n\\r\n# Do This\\r\n\\r\nTo start, we just need to set the\nsensor scales correctly - don't worry about actually setting the color of\nthe background yet.\\r\n\\r\n<img src=\"https://images.code.org/39de88e19682e905a1e08d5f12398f35-image-1488995498849.png\"\nstyle=\"float: right; width: 300px; margin-left: 20px;\"/>\\r\n\\r\n* Using\nthe `sensor.setScale()` block, set each of the three analog sensors to the\nright scale for an RGB color channel.\\r\n* Create a variable for each of the\nthree colors and assign each one to the `.value` of a different sensor.\\r\n*\nUse `console.log()` to test that your variables are in the correct range.\\r\n\\r\n_Hint:\nOrder matters. You need to set the scale of a sensor before checking it's\nvalue_"
      CSDU6 - sensors rgb part 2_markdown_instruction: "# Putting Color on the Screen\\r\n\\r\nNow\nthat your sensor data is in a scale that works for RGB, you can go about setting\nthe screen color.\\r\n\\r\n# Do This\\r\n\\r\n* Add a `setProperty()` block and\nset it to change the \"background-color\" property of \"screen1\".\\r\n* Add\nan `rgb()` block to the last parameter of `setProperty()`.\\r\n* Use the three\ncolor variables you created as inputs to the `rgb()` block."
      CSDU6 - sensors rgb part 3_markdown_instruction: "# Continuous Updates\\r\n\\r\nThis\nsensor-to-color app isn't super useful if it only sets the color once when\nyou start the app. You can use the sensors' \"data\" event to make your app\ncontinually update the background color every time the value changes.\\r\n\\r\nMove\nyour `setScale()` blocks into a an event handler for one of the sensors to\nmake the app update continually."
      CSDU6 - sensors sound_markdown_instruction: "# Reading the Sound Sensor\\r\n\\r\nIn\nthis app we've already added a text label with the id \"sound_value\". Using\nthe `soundSensor.value` block. display the value of the sound sensor."
      CSDU6 - sensors temp f c_markdown_instruction: "# Temperatures in Fahrenheit\nand Celsius\\r\n\\r\nWhile the sound, light, and temperature all behave in the\nsame fashion (converting an analog input to a 10 bit number), the temperature\nsensor is often used a bit differently. Typically if you are using a temperature\nsensor, you want to get a temperature in Fahrenheit or Celsius, not just a\nnumber in a range. To help with this, the temperature sensor how two special\nblocks, `tempSensor.F` and `tempSensor.C`.\\r\n\\r\n# Do This\\r\n\\r\nUsing an\nevent handler, write a program that continuously updates the labels \"temp_c\"\nand \"temp_f\" with the appropriate temperature readings."
      CSDU6 - sensors temp_markdown_instruction: "# Make a Thermometer App\\r\n\\r\nWhile\nthe light and sound sensors have just a raw value with the `value` property,\nthe temperature sensor is a little bit smarter. Instead of `tempSensor.value`,\nthere are two properties `tempSensor.F` and `tempSensor.C` which convert the\nraw input value to either Fahrenheit or Celsius.\\r\n\\r\n# Do This\\r\n\\r\nMake\na simple thermometer app that reads in values from the temperature sensor.\nYour app can display the temperature in either Fahrenheit or Celsius (or both!)\\r\n\\r\n_Challenge:\ncan you make your app continually update the temperature readings?_"
      CSDU6 - sensors theremin 1_markdown_instruction: "# Light Theremin: Collecting\nand Scaling Input\\r\n\\r\nWhich sensor do you need to take input from?\\r\nWhat\nscale of input is appropriate for this app?\\r\n\\r\n# Do This\\r\n\\r\nAdd an\nevent handler to continually collect data from your chosen sensor and use\n`console.log()` to track how it changes to user interaction. If necessary,\nchange the scale of your input to meet your needs."
      CSDU6 - sensors theremin 2_markdown_instruction: "# Light Theremin: Displaying\nOutput\\r\n\\r\nHow will your collected data be displayed?\\r\nDoes your data\nneed to be transformed or processed before being displayed?\\r\n\\r\n# Do This\\r\n\\r\nReplace\nyour call to `console.log()` with the kind of output you need for your project."
      CSDU6 - sensors theremin 3_markdown_instruction: "# Light Theremin: Finishing\nit Up\\r\n\\r\nDoes your app meet the minimum requirements of its objective?\\r\n\\r\n#\nDo This\\r\n\\r\nAdd the finishing touches to your app. Return to your planning\nguide to make sure that the app meets your initial goals."
      CSDU6 - sensors vu meter 1_markdown_instruction: "# VU Meter: Collecting and\nScaling Input\\r\n\\r\nWhich sensor do you need to take input from?\\r\nWhat\nscale of input is appropriate for this app?\\r\n\\r\n# Do This\\r\n\\r\nAdd an\nevent handler to continually collect data from your chosen sensor and use\n`console.log()` to track how it changes to user interaction. If necessary,\nchange the scale of your input to meet your needs.\\r\n\\r\n_Tip: If you are\ngoing to use the 10 color LEDs for output, how should you set the scale of\nyour sensor?_"
      CSDU6 - sensors vu meter 2_markdown_instruction: "# VU Meter: Displaying Output\\r\n\\r\nHow\nwill your collected data be displayed?\\r\nDoes your data need to be transformed\nor processed before being displayed?\\r\n\\r\n# Do This\\r\n\\r\nReplace your\ncall to `console.log()` with the kind of output you need for your project.\\r\n\\r\n_Tip:\nYou may want to use a conditional to determine which LEDs to turn on, and\nwhich one's to turn off_"
      CSDU6 - sensors vu meter 3_markdown_instruction: "# VU Meter: Finishing it\nUp\\r\n\\r\nDoes your app meet the minimum requirements of its objective?\\r\n\\r\n#\nDo This\\r\n\\r\nAdd the finishing touches to your app. Return to your planning\nguide to make sure that the app meets your initial goals."
      CSDU6 - switch blink_markdown_instruction: "# Changing the Input\\r\n\\r\n<img\nsrc=\"https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png\"\nstyle=\"float:right; margin-left: 10px; width: 50%\">\\r\n\\r\nUsing another\n`onBoardEvent()` block, make `buttonR` change the screen back to \"red_screen\".\nThe first input of the `onBoardEvent()` command lets you pick which board\nobject to watch."
      CSDU6 - timed loop challenge_markdown_instruction: "# Challenge\\r\n\\r\n_Ask\nyour teacher before embarking on this challenge_\\r\n\\r\nUsing your new _timed\nloop_ skills, create an interesting program of your own design. Consider using\nmultiple loops running at different speeds, or combining _timed loops_ with\nthe `blink()` and `play()` helpers you saw in the previous level.\\r\n\\r\nYou\ncan either start from scratch here, or remix any of the earlier levels in\nthis lesson."
      CSDU6 - timed loop console.log()_markdown_instruction: "# Starting From Scratch\\r\n\\r\nNow\nthat you've got some practice with `timedLoop()`, let's see if you can set\none up from scratch.\\r\n\\r\n# Do This\\r\n\\r\n* Get a `timedLoop()` block from\nthe _Control_ drawer in your toolbox\\r\n* Change the _ms_ input so that the\nloop runs twice a second\\r\n* Inside the loop, write the console with `console.log()`"
      CSDU6 - timed loop for LEDs_markdown_instruction: "# Turn on Each RGB LED and\nExit\\r\n\\r\nUsing a _timed loop_ in place of a _for loop_ loop requires that\nyou set up a counter variable, increment it each time the loop is run, and\nuse a conditional to determine when to exit the loop. Set up a _timed loop_\nto turn on each of the color LEDs one at a time and then exit. Refer back\nto the previous page for examples.\\r\n\\r\n_Tip: If you're unsure whether\nyour loop has exited or not, consider adding a `console.log()` block or displaying\ntext on the screen in the same condition that calls `stopTimedLoop()`._"
      CSDU6 - timed loop helpers_markdown_instruction: "# Timed Loop Alternatives\\r\n\\r\nBlinking\nlights and playing notes are common enough activities that we've provided\nsome helpers to do them more easily.\\r\n\\r\n# Do This\\r\n\\r\nRun this code\nto see how the helpers work, and then **discuss** with a neighbor how you\nmight do this with a _timed loop_."
      CSDU6 - timed loop question timed_markdown_instruction: "What do you think\nwill happen when you run this code?"
      CSDU6 - timed loop random blink_markdown_instruction: "# Timed Blinking\\r\n\\r\nThe\nprovided code toggles a randomly selected color LED once. Place that line\ninside a timed loop to make a randomized pattern of blinking lights."
      CSDU6 - timed loop random sound exit_markdown_instruction: "# Ending The Song\nand Light Show\\r\n\\r\nHere's the randomized light and music app you created\nearlier. Using the `stopTimedLoop()` command, can you make the program stop\nat some point? You can choose one of the following ways to stop:\\r\n\\r\n*\nUse a _counter_ variable and stop the loop after the counter has reached a\ncertain point (like a _for loop_)\\r\n* Add a button and event handler to call\n`stopTimedLoop()` when clicked.\\r\n\\r\n_Make sure you also turn off all of\nthe LEDs when the show is over!_"
      CSDU6 - timed loop random sound_markdown_instruction: "# Disco Dance Party\\r\n\\r\nAdding\nsome sound to your blinking lights would really kick this program up a notch.\\r\n\\r\n#\nDo This\\r\n\\r\n* At the top of the program, create an list of notes, such\nas `var notes = ['C4', 'D4', 'E4']`\\r\n* Inside the timed loop, randomly\nselect one of the notes to play with `buzzer.note()`\\r\n\\r\n_Challenge: By\ndefault the lights are all blinking white - can you set them to random colors?_"
      CSDU6 - timed loop smiley event_markdown_instruction: "# What Happens Between\nRepetitions\\r\n\\r\nWhen the `timedLoop()` is waiting for the next repetition,\nthe rest of your program is free to do whatever else it needs to do, including\nrespond to events.\\r\n\\r\nAdd an event handler for the \"smiley\" image. You\ncan make the event do whatever you like - just test it to make sure that your\nevent responds each time the image is moved.\\r\n\\r\n**Heads Up**: Make sure\nto put your event handler **outside** of the loop, otherwise a new event handler\nwill be added _every time your loop is run!_ \\r\n\\r\n_Challenge: At this point\nyou've got the start of a simple clicker gamer. Consider keeping track of\nscore, or adding additional event handlers._"
      CSDU6 - timed loop smiley rand y_markdown_instruction: "# Infinite Loop\\r\n\\r\nThe\n`timedLoop()` is really useful not only for looping code at a slower speed,\nbut also to loop code infinitely. The provided program moves the image \"smiley\"\nto a random x position every second, can you make the image also move to a\nrandom y?"
      CSDU6 - toggle state LED prediction_markdown_instruction: "See contained level\nfor markdown"
      CSDU6 - toggle state LED prediction_2018_markdown_instruction: "See contained\nlevel for markdown"
      CSDU6 - toggleswitch state setProp_markdown_instruction: "# State and the Toggle\nSwitch\\r\n\\r\nThis program tells you whether the toggle switch is opened or\nclosed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen`\nis `true` if the switch is opened and `false` if the switch is closed.\\r\n\\r\n#\nDo this\\r\n* Complete the if-statement with the `toggleSwitch.isOpen` property.\\r\n*\nRun the program and press the left button, then flip the toggle switch and\npress the button again."
      CSDU6 - toggleswitch state setProp_2018_markdown_instruction: "# State and\nthe Toggle Switch\\r\n\\r\nThis program tells you whether the toggle switch\nis opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen`\nis `true` if the switch is opened and `false` if the switch is closed.\\r\n\\r\n#\nDo this\\r\n* Complete the if-statement with the `toggleSwitch.isOpen` property.\\r\n*\nRun the program and press the left button, then flip the toggle switch and\npress the button again."
      CSDU6 - toggleswitch state_markdown_instruction: "# State and the Toggle Switch\\r\n\\r\nThe\ntoggle switch has the `toggleSwitch.isOpen` property, which keeps track of\nwhich **state** (opened or closed) the switch is in. `toggleSwitch.isOpen`\nis a boolean, so its value is `true` if the toggle switch is open, and `false`\nif it's closed.\\r\n\\r\n\\r\n## Do this\\r\n\\r\n You'll be adding to the if-else\nstatement to check if the toggle switch is open or closed.\\r\n\\r\n* Drag the\n`toggleSwitch.isOpen` block into the condition of the if-statement. Since\n`toggleSwitch.isOpen` is a boolean, the condition reads \"If true\".\\r\n\\r\n*\nAdd `console.log()` statements that say \"open!\" if the switch is open, and\n\"closed!\" otherwise.\\r\n\\r\n* Run your code and toggle the switch to see\nwhat happens.\\r\n\\r\nRemember: This program is wrapped under an event. You'll\n_have_ to press the left button to update the program when you toggle the\nswitch."
      CSDU6 AppLab Input 1_markdown_instruction: "# Input in App Lab\\r\n\\r\n_You\ndon't need to make any changes to the code here_\\r\n\\r\nTake a minute to\nread through the code and run the program. Discuss with a partner:\\r\n\\r\n1.\nWhat is the source of input?\\r\n2. Where and how does the program check for\ninput?\\r\n3. What does the program do when it gets the right input?\\r\n3.\nWhat is the program doing when there is no input?"
      CSDU6 AppLab Input 1_2018_markdown_instruction: "# Input in App Lab\\r\n\\r\n_You\ndon't need to make any changes to the code here_\\r\n\\r\nTake a minute to\nread through the code and run the program. Discuss with a partner:\\r\n\\r\n1.\nWhat is the source of input?\\r\n2. Where and how does the program check for\ninput?\\r\n3. What does the program do when it gets the right input?\\r\n3.\nWhat is the program doing when there is no input?"
      CSDU6 Circuit Playground Test_markdown_instruction: "# Test Your Board\\r\n\\r\nThis\nlevel is just a quick test to make sure your board is working. To run this\ntest, do the following:\\r\n\\r\n1. Plug your board into your computer with\na USB cable\\r\n2. Click \"Run\"\\r\n3. Wait a few seconds for either a Success\nor Error screen to pop up\\r\n4. If your test was successful, move on to the\nnext level. If not, try some of the troubleshooting steps\\r\n\\r\n## Troubleshooting\\r\n\\r\nThere\nare a number of things that could prevent your test from passing.\\r\n\\r\n1.\nTry refreshing the page and running the test again (you should refresh the\npage for each of the following ideas as well)\\r\n2. Try connecting your board\nto a different USB port\\r\n3. Try a different USB cable. Some USB cables can\nonly be used for charging, so make sure your cable supports data transfer!\\r\n4.\nTry a different board\\r\n5. Go to [studio.code.org/maker/setup](/maker/setup)\nto run a more detailed test"
      CSDU6 Circuit Playground Test_2018_markdown_instruction: "# Test Your Board\\r\n\\r\nThis\nlevel is just a quick test to make sure your board is working. To run this\ntest, do the following:\\r\n\\r\n1. Plug your board into your computer with\na USB cable\\r\n2. Click \"Run\"\\r\n3. Wait a few seconds for either a Success\nor Error screen to pop up\\r\n4. If your test was successful, move on to the\nnext level. If not, try some of the troubleshooting steps\\r\n\\r\n## Troubleshooting\\r\n\\r\nThere\nare a number of things that could prevent your test from passing.\\r\n\\r\n1.\nTry refreshing the page and running the test again (you should refresh the\npage for each of the following ideas as well)\\r\n2. Try connecting your board\nto a different USB port\\r\n3. Try a different USB cable. Some USB cables can\nonly be used for charging, so make sure your cable supports data transfer!\\r\n4.\nTry a different board\\r\n5. Go to [studio.code.org/maker/setup](/maker/setup)\nto run a more detailed test"
      CSDU6 GameLab Input 1_markdown_instruction: "# Input in Game Lab\\r\n\\r\n_You\ndon't need to make any changes to the code here_\\r\n\\r\nTake a minute to\nread through the code and run the program. Discuss with a partner:\\r\n\\r\n1.\nWhat is the source of input?\\r\n2. Where and how does the program check for\ninput?\\r\n3. What does the program do when it gets the correct input?\\r\n3.\nWhat is the program doing when there is no input?"
      CSDU6 GameLab Input 1_2018_markdown_instruction: "# Input in Game Lab\\r\n\\r\n_You\ndon't need to make any changes to the code here_\\r\n\\r\nTake a minute to\nread through the code and run the program. Discuss with a partner:\\r\n\\r\n1.\nWhat is the source of input?\\r\n2. Where and how does the program check for\ninput?\\r\n3. What does the program do when it gets the correct input?\\r\n3.\nWhat is the program doing when there is no input?"
      CSDU6 LED alarm silent_markdown_instruction: "# Silent Alarm\\r\n\\r\nHere's\nthe alarm app that you started in the last lesson. Right now it doesn't do\nmuch, so let's see if we can make it more useful by hooking it up to your\nboard. When the alarm is triggered, turn on the red LED. When the alarm is\nstopped, turn the LED off again.\\r\n\\r\n# Do This\\r\n\\r\nAdd `led.on()` and\n`led.off()` blocks to the events that trigger and disable the alarm.\\r\n\\r\n_Notice\nthat the LED blocks have been moved to a new drawer called Circuit_"
      CSDU6 LED basics led.off()_markdown_instruction: "# Turn that LED Off\\r\n\\r\nJust\nas you can turn your red LED on using `led.on()`, you can turn it back off\nagain with `led.off()`. You'll need to add a second button with an event\nhandler that calls `led.off()`.\\r\n\\r\n# Do this\\r\n\\r\nAdd a second button\nand use its \"click\" event to turn off the LED\\r\n\\r\n* Drag out a new button\nin Design Mode and give it a good ID\\r\n* Insert an event handler for your\nnewly created button\\r\n* Drag an `led.off()` command into your new event\nhandler\\r\n\\r\nNow you should have two buttons, one that turns the LED on,\nand another that turns it off.\\r\n\\r\n_Challenge: Can you come up with other\nways to turn on and off the LED? Could you do it with a single button?_"
      CSDU6 LED basics led.on_markdown_instruction: "# Turn on that LED\\r\n\\r\nThe\nred LED on your board is represented in code by an object called `led`. Similar\nto the sprite objects in Game Lab, you can use _dot notation_ to control the\nLED. Try using the command `led.on()` to make your red LED light up when the\nprogram is run.\\r\n\\r\n# Do this\\r\n\\r\n* Drag out the `led.on()` block and\nplace it underneath the comment\\r\n* Run the program\\r\n* Bask in the warm\nred glow of your LED!"
      CSDU6 LED basics onEvent_markdown_instruction: "# Turn on that LED - with a\nButton!\\r\n\\r\nAs exciting as an always-on red LED is, an LED that you can\nturn on with the click of a button seems much more useful. If you add a button\nto your screen in Design Mode, then you can use move your `led.on()` command\ninto an `onEvent()` block.\\r\n\\r\n# Do this\\r\n\\r\nAdd a button and use its\n\"click\" event to turn on the LED\\r\n\\r\n* Drag out a new button in Design\nMode and give it a good ID\\r\n* Insert an event handler for your newly created\nbutton\\r\n* Move the code that turns your LED on _inside_ the button's event\nhandler\\r\n\\r\nIf everything worked out, you should see that your LED starts\nout off, but turns on when you click the button!"
      CSDU6 array access modify_markdown_instruction: "# Accessing Items in a List\\r\n\\r\n**Starter\nCode:** There is a list of days of the week provided as well as a command\nto set the label on the screen.\\r\n\\r\n**Do This:** Can you change the index\nvalue so that the page displays \"Today is: Tuesday\""
      CSDU6 array index predict contained_markdown_instruction: "# Predict\\r\n\\r\nThe\ncode below will display four things on the screen.  What do you think they\nwill be?"
      CSDU6 array index predict contained_2018_markdown_instruction: "# Predict\\r\n\\r\nThe\ncode below will display four things on the screen.  What do you think they\nwill be?"
      CSDU6 array length predict_markdown_instruction: "# Playing Notes from an Array\\r\n\\r\nYou\nmay have noticed that when you ran the code from the last bubble, it didn't\nsound any different than the bubble before it. Why do you think that is?"
      CSDU6 array select days_markdown_instruction: "# Accessing Items in an Array\\r\n\\r\nThis\nprogram uses the Circuit Playground.  It creates an array of the days of the\nweek.  When the left button is pressed, it displays the day as \"Tuesday\".\\r\n\\r\n#\nDo This\\r\n\\r\n* Add code that will display the day as \"Thursday\" when the\nright button is pressed."
      CSDU6 array select days_2018_markdown_instruction: "# Accessing Items in an\nArray\\r\n\\r\nThis program uses the Circuit Playground.  It creates an array\nof the days of the week.  When the left button is pressed, it displays the\nday as \"Tuesday\".\\r\n\\r\n# Do This\\r\n\\r\n* Add code that will display the\nday as \"Thursday\" when the right button is pressed."
      CSDU6 arrays rainbow_markdown_instruction: "# Index Practice\\r\n\\r\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates a list called `colors`.\\r\n\\r\n* Use `setProperty`\nand the list of colors to change the `background-color` of the buttons to\ncreate a rainbow. The first button has been done for you."
      CSDU6 arrays random_markdown_instruction: "# Expressions as Indexes: Using\nVariables\\r\n\\r\n* **Starter code** has been provided which creates an list\nof identifiers for icons in the icon library\\r\n* **Write code** that sets\nthe image on the screen to a random icon from the list"
      CSDU6 arrays select icons_markdown_instruction: "# Expressions as Indexes:\nUsing Variables\\r\n\\r\n* **Starter code** has been provided which creates\nan list of identifiers for icons in the icon library\\r\n* **Write code** that\nsets the image on the screen to a random icon from the list"
      CSDU6 arrays select rainbow_markdown_instruction: "# Index Practice\\r\n\\r\n<img\nsrc=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates a list called `colors` and uses it to set the colors\nof the rectangles on the screen.  Unfortunately, the colors are out of order.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the index numbers inside each selection block to make\nthe rainbow appear as in the picture on the right."
      CSDU6 arrays select rainbow_2018_markdown_instruction: "# Index Practice\\r\n\\r\n<img\nsrc=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates a list called `colors` and uses it to set the colors\nof the rectangles on the screen.  Unfortunately, the colors are out of order.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the index numbers inside each selection block to make\nthe rainbow appear as in the picture on the right."
      CSDU6 arrays select random_markdown_instruction: "# Random Selection\\r\n\\r\nYou\ncan also select a random element in the list by using the `randomNumber` block\ninstead of an index.  This program selects a random icon from a list and displays\nit on the screen when the left button is pressed.  Right now, the icons are\nalways blue.\\r\n\\r\n# Do This\\r\n* Add code that will select a random color\nfrom the list and use that as the icon color."
      CSDU6 arrays select random_2018_markdown_instruction: "# Random Selection\\r\n\\r\nYou\ncan also select a random element in the list by using the `randomNumber` block\ninstead of an index.  This program selects a random icon from a list and displays\nit on the screen when the left button is pressed.  Right now, the icons are\nalways blue.\\r\n\\r\n# Do This\\r\n* Add code that will select a random color\nfrom the list and use that as the icon color."
      CSDU6 arrays select variable_markdown_instruction: "# Using Variables\\r\n\\r\nThis\nprogram is like the last one, but the icons should always match the colors\n(red heart, yellow star, green leaf, and blue water).  You can do this using\nthe variable \"myIndex\", which will store the value of a random number so\nthat it can be used to get the icon and the color from the same place on each\nlist.\\r\n\\r\n# Do This\\r\n* Change the code so that both the icon and its\ncolor are chosen using the \"myIndex\" variable."
      CSDU6 arrays select variable_2018_markdown_instruction: "# Using Variables\\r\n\\r\nThis\nprogram is like the last one, but the icons should always match the colors\n(red heart, yellow star, green leaf, and blue water).  You can do this using\nthe variable \"myIndex\", which will store the value of a random number so\nthat it can be used to get the icon and the color from the same place on each\nlist.\\r\n\\r\n# Do This\\r\n* Change the code so that both the icon and its\ncolor are chosen using the \"myIndex\" variable."
      CSDU6 arrays variable_markdown_instruction: "# Expressions as Indexes: Using\nVariables\\r\n\\r\n* **Starter code** has been provided which creates an list\nof identifiers for icons in the icon library\\r\n* **Write code** that sets\nthe image on the screen to a random icon from the list"
      CSDU6 buzzer 2d arrays_markdown_instruction: "# Challenge: 2D Arrays\\r\n\\r\nArrays\ncan hold all sorts of data, like numbers, strings, and even other arrays.\nWhen we put an array inside another, this becomes a 2D array. The `buzzer.playSong()`\nblock can be used to play songs that sound more precise with 2D arrays.\\r\n\\r\nThe\nstructure that you've been using to play notes looks like this:\\r\n\\r\n`buzzer.playNotes(\n[array of notes to play] , tempo of the whole song);`\\r\n\\r\nThe main difference\nwith `buzzer.playSong()` is each element inside the `[array of notes to play]`,\nis an array with two elements: the note you want to play, and the duration\nof the note. Sometime you'll want a quarter note in your song, other times\nyou'll want a full note, or maybe somewhere in between. A full song might\nlook something like this:\\r\n\\r\n`buzzer.playSong([\\r\n  [\"G3\",0.25],\\r\n  [\"C4\",0.25],\\r\n  [\"E4\",0.25],\\r\n  [\"G4\",0.125],\\r\n  [null,0.375],\\r\n  [\"E4\",0.1875],\\r\n  [\"G4\",1]\\r\n],\n120);`\\r\n\\r\n# Do this\\r\n\\r\n* Use the `buzzer.playSong` block to make a\ndifferent song.\\r\n* When you get comfortable with the structure, add more\nnotes to the song."
      CSDU6 buzzer 2d arrays_2018_markdown_instruction: "# Challenge: 2D Arrays\\r\n\\r\nArrays\ncan hold all sorts of data, like numbers, strings, and even other arrays.\nWhen we put an array inside another, this becomes a 2D array. The `buzzer.playSong()`\nblock can be used to play songs that sound more precise with 2D arrays.\\r\n\\r\nThe\nstructure that you've been using to play notes looks like this:\\r\n\\r\n`buzzer.playNotes(\n[array of notes to play] , tempo of the whole song);`\\r\n\\r\nThe main difference\nwith `buzzer.playSong()` is each element inside the `[array of notes to play]`,\nis an array with two elements: the note you want to play, and the duration\nof the note. Sometime you'll want a quarter note in your song, other times\nyou'll want a full note, or maybe somewhere in between. A full song might\nlook something like this:\\r\n\\r\n`buzzer.playSong([\\r\n  [\"G3\",0.25],\\r\n  [\"C4\",0.25],\\r\n  [\"E4\",0.25],\\r\n  [\"G4\",0.125],\\r\n  [null,0.375],\\r\n  [\"E4\",0.1875],\\r\n  [\"G4\",1]\\r\n],\n120);`\\r\n\\r\n# Do this\\r\n\\r\n* Use the `buzzer.playSong` block to make a\ndifferent song.\\r\n* When you get comfortable with the structure, add more\nnotes to the song."
      CSDU6 buzzer alarm_markdown_instruction: "# Noisy Alarm\\r\n\\r\nBack to the\nAlarm now - now with the buzzer we can make this thing really sound like an\nalarm. Using `buzzer.frequency()` and `buzzer.stop()` make your alarm play\na sound when it goes off."
      CSDU6 buzzer freq_markdown_instruction: "# Playing Sounds\\r\n\\r\nThe `buzzer.frequency()`\ncommand takes two inputs - the first is the _frequency_ of the sound to be\nplayed (higher numbers = higher sounds), and the second is the _duration_\nof the sound (how long it should be played)\\r\n\\r\n# Do This\\r\n\\r\nThe provided\napp has three buttons with event handlers. Add a `buzzer.frequency()` command\nto each of the event handlers so that the buzzer plays the appropriate sound\n(a low, medium, or high note)."
      CSDU6 buzzer stop_markdown_instruction: "# Playing Longer Sounds\\r\n\\r\n<img\nsrc=\"https://images.code.org/e5513675e74233d4fe55a0826376b83f-image-1487622642991.gif\"\nstyle=\"float: right; margin: 10px;\">\\r\n\\r\nThe _duration_ input of the\n`buzzer.frequency()` command is an _optional_ input - meaning that you don't\nneed to use it. You can remove an optional input by clicking the left arrow\nnext to it.\\r\n\\r\nBy removing the duration, you are telling the buzzer to\nbuzz continuously. You'll notice that there's a new block in the toolbox\ncalled `buzzer.stop()` to use in this case.\\r\n\\r\n# Do This\\r\n\\r\nHere's\nan app with two buttons, a Start and a Stop. Make these buttons Start and\nStop the buzzer\\r\n\\r\n* Add an event handler for each button\\r\n* When the\nStart button is clicked, make the buzzer play continuously\\r\n* When the Stop\nbutton is clicked, stop the buzzer from playing\\r\n\\r\n"
      CSDU6 buzzer.stop_markdown_instruction: "# Stopping the Music\\r\n\\r\nSometimes\nyou need to be able to stop the music when you want, like in the code below.\nDuration wasn't specified so now the note plays continuously. Luckily, the\n`buzzer.stop()` method is here to save your ears.\\r\n\\r\n# Do this\\r\n\\r\n*\nFind a way to get the note to stop playing with `buzzer.stop()`.\\r\n* Celebrate\nyour win over the endless note!"
      CSDU6 buzzer.stop_2018_markdown_instruction: "# Stopping the Music\\r\n\\r\nSometimes\nyou need to be able to stop the music when you want, like in the code below.\nDuration wasn't specified so now the note plays continuously. Luckily, the\n`buzzer.stop()` method is here to save your ears.\\r\n\\r\n# Do this\\r\n\\r\n*\nFind a way to get the note to stop playing with `buzzer.stop()`.\\r\n* Celebrate\nyour win over the endless note!"
      CSDU6 challenge play songs_markdown_instruction: "# Challenge: Song Bot\\r\n\\r\nYou\nhave all the tools you need to make an awesome song bot! Try your hand at\nmaking a musical masterpiece with the buzzer. Here's some additional ideas\nto add to your bot:\\r\n\\r\n* Consider making a song that uses different octaves.\\r\n*\nMaybe you could shuffle through songs by using the buttons on the board."
      CSDU6 circuit playground piano_markdown_instruction: "# Circuit Piano\\r\n\\r\nLook\nat the code below. You're not going to be changing it, but try to see what\nit does. \\r\n\\r\n# Do this\\r\n\\r\n* Run the program and play with the piano\non the screen."
      CSDU6 circuit playground piano_2018_markdown_instruction: "# Circuit Piano\\r\n\\r\nLook\nat the code below. You're not going to be changing it, but try to see what\nit does. \\r\n\\r\n# Do this\\r\n\\r\n* Run the program and play with the piano\non the screen."
      CSDU6 frequency creation_markdown_instruction: "# Making the Buzzer Buzz\\r\n\\r\nNow\nthat you can use the buzzer's frequency, try to make the buzzer play a high\nsound when the same button pops back up.\\r\n\\r\n# Do this\\r\n* Add another\nonBoardEvent block so the buzzer plays a high sound when the left button comes\nback **up**"
      CSDU6 frequency creation_2018_markdown_instruction: "# Making the Buzzer Buzz\\r\n\\r\nNow\nthat you can use the buzzer's frequency, try to make the buzzer play a high\nsound when the same button pops back up.\\r\n\\r\n# Do this\\r\n* Add another\nonBoardEvent block so the buzzer plays a high sound when the left button comes\nback **up**"
      CSDU6 frequency modification_markdown_instruction: "# Making the Buzzer Buzz\\r\n\\r\nThe\nfrequency of the buzzer determines how high or how low the buzzer will sound\nwhen it plays. The higher the number you give frequency, the higher the buzzer\nwill sound.\\r\n\\r\n# Do this\\r\n* Right now the buzzer plays a high note when\nthe left button is pressed. Make the buzzer play a low note instead.\\r\n"
      CSDU6 frequency modification_2018_markdown_instruction: "# Making the Buzzer\nBuzz\\r\n\\r\nThe frequency of the buzzer determines how high or how low the\nbuzzer will sound when it plays. The higher the number you give frequency,\nthe higher the buzzer will sound.\\r\n\\r\n# Do this\\r\n* Right now the buzzer\nplays a high note when the left button is pressed. Make the buzzer play a\nlow note instead.\\r\n"
      CSDU6 frequency template_markdown_instruction: "Do a thing!"
      CSDU6 frequency template_2018_markdown_instruction: "Do a thing!"
      CSDU6 light sensor alarm_markdown_instruction: "# Auto Alarm\\r\n\\r\nLet's\nrevisit the alarm app one last time. When we last updated this app we made\nit turn on or off the buzzer in addition to the LED, but it still needs to\nbe manually triggered. Now that we know how to use sensor events, you can\nmake the alarm trigger automatically!\\r\n\\r\n# Do This\\r\n\\r\nUsing the an\nevent handler for the light sensor, make the alarm turn on when it sees light.\nYou can test the alarm by placing an object like a piece of paper over the\nboard - if someone tries to take the piece of paper your alarm should start\nbuzzing.\\r\n\\r\n_Challenge: Can you make both the buttons and the sensor play\nnicely together?_"
      CSDU6 making new arrays_markdown_instruction: "# Making New Arrays\\r\n\\r\nYou\nknow how to change arrays, now it's time for you to make your own.\\r\n\\r\n#\nDo this\\r\n\\r\n* Make a new array with whatever notes you want. They can be\nin different octaves, arranged in a certain key, etc. Anything you want!\\r\n*\nHave the buzzer play a random note from your array when the **right** button\nis pressed."
      CSDU6 making new arrays_2018_markdown_instruction: "# Making New Arrays\\r\n\\r\nYou\nknow how to change arrays, now it's time for you to make your own.\\r\n\\r\n#\nDo this\\r\n\\r\n* Make a new array with whatever notes you want. They can be\nin different octaves, arranged in a certain key, etc. Anything you want!\\r\n*\nHave the buzzer play a random note from your array when the **right** button\nis pressed."
      CSDU6 note array length p2_markdown_instruction: "# Length of an Array\\r\n\\r\n`randomNumber()`\nwas still generating a range of numbers from 0 to 2. You added more indexes\nin the array, so checking for the index of 0-2 isn't helpful if there's\n5 items in the array.\\r\n\\r\nYou can fix this by using the **length** of the\narray with `array.length()`. If we generate a random number that's anywhere\nbetween 0 and the length of the array, you'll be able to play any of the\nelements in the array! Sort of!\\r\n\\r\nIf the array length is 5, and you want\nto select a random index between 0 (the first index) and 5, then the computer\ncan select up to 6 possible indexes, which the array doesn't have. To get\naround this, you'll have to subtract 1 from the length of the array like\nin the code below: \\r\n\\r\n![](https://images.code.org/6e4e01b50708667fcd1585b61b1a87ae-image-1512083621011.jpg)\\r\n\\r\n#\nDo this\\r\n\\r\n* Set `randomNumber()` to generate numbers between 0 and the\nlength of the list minus 1.\\r\n* Add as many new notes to the array as you\nwant.\\r\n* Run the code to see what happens.\\r\n"
      CSDU6 note array length_markdown_instruction: "# Adding to Arrays\\r\n\\r\nArrays\ndon't have to be a fixed length, you can add or delete as many items in the\narray as you'd like. The left and right arrows to the side of the array block\nlet you add or delete an item at the end of the array.\\r\n\\r\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\\r\n\\r\n#\nDo this\\r\n\\r\n* Add at least two more unique notes to the existing array.\\r\n*\nRun the code to see what happens."
      CSDU6 piano with notes_markdown_instruction: "# Piano Notes\\r\n\\r\nThis is\nthe same piano that you saw at the beginning of the lesson, but there are\nsome bugs!\\r\n\\r\n# Do this\\r\n\\r\n* Edit the code so that all keys are using\na `buzzer.note()` block to play the corresponding note.\\r\n* Make sure that\nall the values passed in to `buzzer.note()` are notes, and not frequencies.\\r\n\\r\n_Hint:\nRemember to put quotes around the notes! e.g `buzzer.note(\"A4\", 100);`_"
      CSDU6 piano with notes_2018_markdown_instruction: "# Piano Notes\\r\n\\r\nThis\nis the same piano that you saw at the beginning of the lesson, but there are\nsome bugs!\\r\n\\r\n# Do this\\r\n\\r\n* Edit the code so that all keys are using\na `buzzer.note()` block to play the corresponding note.\\r\n* Make sure that\nall the values passed in to `buzzer.note()` are notes, and not frequencies.\\r\n\\r\n_Hint:\nRemember to put quotes around the notes! e.g `buzzer.note(\"A4\", 100);`_"
      CSDU6 play null notes_markdown_instruction: "# Null Notes\\r\n\\r\nYou may have\nnoticed that if you put the same note side-by-side in the array, the buzzer\njust plays that note as one long sound instead of as individual notes. In\nmusic we often want a break (or _rest_) between notes. You can get your buzzer\nto play a rest by sending it the value `null`.\\r\n\\r\n`null` is a special\nvalue that represents emptiness in computer science. `playNotes` plays each\nnote for the same duration, so a `null` element in the array is just telling\n`playNotes` to play nothing for the same duration as everything else.\\r\n\\r\n\\r\n#\nDo this\\r\n\\r\n* Run the code to hear what it sounds like first.\\r\n* Examine\nthe array inside `buzzer.playNotes()`.\\r\n* Put a pause between notes that\nare the same and side-by-side, and any other place you deem appropriate.\\r\n\\r\n_Tip:\n`null` references a value, just like a variable name. Make sure you don't\nput it in quotation marks!_"
      CSDU6 play null notes_2018_markdown_instruction: "# Null Notes\\r\n\\r\nYou may\nhave noticed that if you put the same note side-by-side in the array, the\nbuzzer just plays that note as one long sound instead of as individual notes.\nIn music we often want a break (or _rest_) between notes. You can get your\nbuzzer to play a rest by sending it the value `null`.\\r\n\\r\n`null` is a special\nvalue that represents emptiness in computer science. `playNotes` plays each\nnote for the same duration, so a `null` element in the array is just telling\n`playNotes` to play nothing for the same duration as everything else.\\r\n\\r\n\\r\n#\nDo this\\r\n\\r\n* Run the code to hear what it sounds like first.\\r\n* Examine\nthe array inside `buzzer.playNotes()`.\\r\n* Put a pause between notes that\nare the same and side-by-side, and any other place you deem appropriate.\\r\n\\r\n_Tip:\n`null` references a value, just like a variable name. Make sure you don't\nput it in quotation marks!_"
      CSDU6 play predict code_markdown_instruction: "Markdown is in contained level"
      CSDU6 play predict code_2018_markdown_instruction: "Markdown is in contained\nlevel"
      CSDU6 play predict markdown_markdown_instruction: "# Make a Prediction\\r\n\\r\nLook\nat the code below. What do you think it's going to do?\\r\n\\r\nGive it a guess\nand run the code to find out!"
      CSDU6 play predict markdown_2018_markdown_instruction: "# Make a Prediction\\r\n\\r\nLook\nat the code below. What do you think it's going to do?\\r\n\\r\nGive it a guess\nand run the code to find out!"
      CSDU6 play songs_markdown_instruction: "# Making Songs\\r\n\\r\nYou can make\nand play full songs with `buzzer.playNotes()`. It takes two parameters: an\narray of notes to play, and a tempo at which to play the notes. In previous\nbubbles you created arrays of notes and played through them randomly, but\n`buzzer.playNotes()` plays each note consecutively instead.\\r\n\\r\n\\r\n# Do\nthis\\r\n\\r\n* Pull out a `buzzer.playNotes` block and change the starting\narray inside.\\r\n* Make sure the new array you give it has at least two pairs\nof notes that are next to each other in the list (Example: `[\"A5\", \"A5\",\n\"G4\", \"G4\"]`)\\r\n\\r\n_Hint: Don't forget that you can always switch back\nand forth between block and text mode._"
      CSDU6 play songs_2018_markdown_instruction: "# Making Songs\\r\n\\r\nYou can\nmake and play full songs with `buzzer.playNotes()`. It takes two parameters:\nan array of notes to play, and a tempo at which to play the notes. In previous\nbubbles you created arrays of notes and played through them randomly, but\n`buzzer.playNotes()` plays each note consecutively instead.\\r\n\\r\n\\r\n# Do\nthis\\r\n\\r\n* Pull out a `buzzer.playNotes` block and change the starting\narray inside.\\r\n* Make sure the new array you give it has at least two pairs\nof notes that are next to each other in the list (Example: `[\"A5\", \"A5\",\n\"G4\", \"G4\"]`)\\r\n\\r\n_Hint: Don't forget that you can always switch back\nand forth between block and text mode._"
      CSDU6 toggle state prediction_markdown_instruction: "# More on the Toggle Switch\\r\n\\r\nYou\ncan also check whether the toggle switch is in the `open` or `close` position\nanywhere in your program. \\r\n\\r\nWhat different things does the button do\nwhen the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018_markdown_instruction: "# More on the Toggle\nSwitch\\r\n\\r\nYou can also check whether the toggle switch is in the `open`\nor `close` position anywhere in your program. \\r\n\\r\nWhat different things\ndoes the button do when the toggle switch is `open` or `close`?"
      CSDU6- predict event types_markdown_instruction: "# Predict: Event Type\\r\n\\r\nSo\nfar you have really only used the click event type with buttons. There are\nmany different event types you can use in App Lab. Look at the code and predict\nwhen each of the messages will print to the console log."
      CSDU6L06 - lists and colorLeds - Light Display_markdown_instruction: "# Blink\\r\n\\r\nMake\nlights blink \\r\n\\r\n"
      CSDU6L06 - lists and colorLeds - blink_markdown_instruction: "# Blink\\r\n\\r\nMake\nlights blink \\r\n\\r\n"
      CSDU6L06 - lists and colorLeds - create light pattern_markdown_instruction: "#\nLight Pattern\\r\n\\r\nFind a partner and bring your light patterns together.\\r\n\\r\nSet\nup the app so the user can use what light pattern they want to see. You should\nput each of your light displays in a function to make this easier"
      CSDU6L06 - lists and colorLeds - debug_markdown_instruction: "<img src=\"https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png\"\nstyle=\"width:250px; float:right\">\\r\n\\r\n# Debug: colorLeds\\r\n\\r\nCan you\ndebug the index values so that the rainbow shows up on the board like in the\npicture?"
      CSDU6L06 - lists and colorLeds - intensity_markdown_instruction: "# Changing\nBrightness\\r\n\\r\nSometimes you want to do more than just turn a light on\nor off, you might want to set a specific brightness. The `intensity()` command\nlets you set an LED's brightness (or _intensity_) from 0 - 100. Under the\nhood, this works just like `buzzer.frequency()` by rapidly turning the LED\non and off to make it seem dimmer.\\r\n\\r\n# Do This\\r\n\\r\nThe provided program\nhas a slider that goes from 0 to 100 with an event handler. In the event handler,\nset intensity of your color LEDs to the value of the slider."
      CSDU6L06 - lists and colorLeds - light pattern off_markdown_instruction: "#\nTurning It Off\\r\n\\r\nWhen you start this app your lights are off, but as\nsoon as choose a pattern, there's no way to turn the lights back off!\\r\n\\r\n#\nDo This\\r\n\\r\nCreate a function that turns all of the LEDs off, and then\nadd a \"Off\" button to your app and make it turn off all of the color LEDs."
      CSDU6L06 - lists and colorLeds - pulse_markdown_instruction: "# Pulse\\r\n\\r\nMake\nlights pulse\\r\n\\r\n"
      CSDU6L06 - lists and colorLeds - set color_markdown_instruction: "# Adding\nSome Color\\r\n\\r\nYou probably noticed when you used `colorLeds[0].on()` in\nthe last level, the LEDs turned on as white. If you don't specify a color,\n`on()` will turn on all three parts of the LED (red, green, and blue) to produce\nwhite. You'll see a new command in the toolbox called `colorLeds[0].color()`\nwhich lets you specify a color, either as a string like \"blue\" or an RGB\nvalue using color `color()` command.\\r\n\\r\n# Do This\\r\n\\r\nUse the `.color()`\ncommand to set each of the color LEDs to a different color."
      CSDU6L06 - lists and colorLeds - song list_markdown_instruction: "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\"\nstyle=\"float: right; margin: 10px;\">\\r\n\\r\n# colorLeds\\r\n\\r\nThe color\nLEDs can use the same basic commands that you used with the red LED, such\nas `on()` and `off()`. Using the provided buttons, write a program that turns\non and off the bottom two color LEDs (the ones furthest away from the USB\ncable.\\r\n\\r\n# Do This\\r\n\\r\nAdd event handlers to the provided buttons\n\"on_button\" and \"off_button\" that turn on and off the bottom two color\nLEDs. Which positions in the `colorLeds` list are those two LEDs?\\r\n\\r\n"
      CSDU6L06 - lists and colorLeds - toggle_markdown_instruction: "# Toggle\\r\n\\r\nThe\n`.toggle()` command works like a light switch - whenever you call it on an\nLED, the light will turn on if it was off, or off if it was on. This can be\na really useful alternative to using both on and off.\\r\n\\r\n# Do This\\r\n\\r\nChoose\na few LEDs and write a program that toggles them on and off when you click\nthe Toggle button.\\r\n"
      CSDU6L06 - lists and colorLeds -solo light pattern_markdown_instruction: "#\nLight Patterns\\r\n\\r\nThis app already has one light pattern program, which\ncan be activated by clicking a button. Notice that we put this pattern into\na function to make the code cleaner and clearer.\\r\n\\r\n# Do This\\r\n\\r\nCreate\na light pattern function of your own - maybe the colors of your favorite holiday,\ncollege, sports team, or try to create an image with the lights.\\r\n\\r\nAfter\nyou've created your new function, add a button and event handler so that\nyou can switch between the two light patterns."
      CSDu2 IP CC Search_markdown_instruction: "# Finding Media\\r\n\\r\nNow that your\ncontent is in place, it's time to find some good images and other media to\nhelp make your page look better, and potentially strengthen your argument.\\r\n\\r\nBecause\nthe Creative Commons provides such a simple way to know what media you can\nand can't use, a lot of search engines have integrated Creative Commons filtering\nto ensure they only give you results you can use. The Creative Commons search\npage (linked below) is a compilation of CC friendly search engines that you\ncan use to find media for your page.\\r\n\\r\n# Do This\\r\n\\r\nUsing the Creative\nCommons Search page, find a handful of pictures that you'll want to use on\nyour web pages. By default the search is set to the most restrictive settings.\nNext to the the text **I want something that I can...** you can uncheck _use\nfor commercial purposes_. You can also uncheck _modify, adapt, or build upon_\nas long as you don't plan on modifying the images you find (such as adding\ntext, cropping, or otherwise editing).\\r\n\\r\n<img src=\"https://images.code.org/41b70c9ad055b42ed9d9749be2e1fdb2-image-1473978771297.31.58.png\"\nstyle=\"max-width: 800px\"/>\\r\n\\r\nFor each image you plan on using:\\r\n\\r\n*\nDownload a copy to your computer (so that you can upload it to your website\nin the next step)\\r\n* Write down all information you can find about the author,\nsuch as\\r\n\\t* Name, or screenname\\r\n    * URL of website (not URL of the\nimage itself)\\r\n    * Title of image\\r\n"
      CSP Data Unit - Counting Multiple Things_markdown_instruction: "If you can\ncount one thing you can count multiple things\\r\n\\r\nFind out how many people\nlike something other than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount\ntotal\\r\nDo the math\\r\n\\r\nblank/ blank total\\r\n\\r\nCan also use this to\nfind percents from this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_markdown_instruction: "ReadRecords\nwith specific criteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_markdown_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count"
      CSP U4 - CreateRecord with JSON_markdown_instruction: "Good news! we can also\nstore objects in the easy way!\\r\nStarting code is some kind of pre-composed\nobject. And call to createRecord that shows using the javascript object as\nthe the thing being stored.\\r\nTest.\\r\nInvestigate.\\r\nAdd a field to the\nobject and run again, see what’s there."
      CSP U4 - Export Table_markdown_instruction: "# You can export the table too!\\r\n\\r\nMake\na table and then export it to share it with a friend!"
      CSP U4 - First Create Record Experience_markdown_instruction: "So how can we\nuse this?  We can use it to compose a bunch of things we want to store at\nonce.  In Data we call this a “record”.  Let’s look at how we create records….new\nlevel:\\r\n\\r\nJust drag out createRecord and play with it (non-project level)\n— not triggered by a button. \\r\n\\r\nCreateRecord should populate with a default\nJSON object (which you can set in level builder when defining params for the\nblocks in the palette.)  Have it be the string version of of JSON object.\\r\nJust\nHit run several times.\\r\nView Data.\\r\nInvestigate problems.\\r\n\\r\n\\r\n"
      CSP U4 - Import Table_markdown_instruction: "You can create a new table by\nimporting a CSV file. CSV stands for comma separated values and is a standard\nway to move data between different applications. CSV files usually have multiple\ncolumns with the first row containing the label for each column. AppLab will\nuse this first row to create the column names in the table. \\r\n\\r\nIn AppLab\nyou can create a new table in an app by clicking the “View Data” button(a\nnew browser tab opens) and type in a new, descriptive table name (the table\nname does not have to match the app name, and an app can have more than one\ntable), then click the “Add” button next to the table name(another new browser\ntab opens). Click the “Import” button, then the “Choose File” button and select\nthe RottenTomatoes2015.csv file (see below). Finally click the “Overwrite\n& Import” button. Note the unique “Id” field created for each record."
      CSP U4 - JSON Object Intro - Bad Way_markdown_instruction: "# We've Seen Objects\nBefore\\r\n\\r\nWe're going to see how we can use objects to organize data\nin our own apps, but this actually isn't the first time we've used objects\nin our programs. **The object that we've used most frequently is the event\nparameter of our event handlers**. This single object contains many pieces\nof information about the event which can be accessed to determine how to respond\nto the event. For example `event.key` contains the key that was pressed for\nkey events, and `event.offsetX` and `event.offsetY` contain the location of\nthe mouse for mouse events.\\r\n\\r\nBefore we move on to creating objects of\nour own, let's take another look at this event parameter (or as we'll call\nit now event object) and recall how they were used.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\ncode** is provided which creates event handlers for both a \"click\" and \"keydown\"\nevent and displays the contents of the event object they create.\\r\n\\r\n*\n**Run the program** and trigger both a keyboard event and a mouse event.\\r\n*\n**Examine the objects displayed in the Debug Console** to recall the different\npieces of information they contain.\\r\n* **Reflect: ** Why wouldn't we want\nthis information stored in many variables? Why wouldn't we want this information\nstored in an array?"
      CSP U4 - JSON Object Intro - Good Way_markdown_instruction: "# Creating Your\nOwn Objects\\r\n\\r\n**Objects are unordered collections of name value pairs**.\nLike an array they can hold many pieces of information, but where arrays use\na numeric index to reference specific pieces of information, objects use a\ndescriptive name. We lose the \"ordered\" nature of our data, but we gain\nthe ability to describe the purpose of each piece of data within a collection.\\r\n\\r\nConsider\nthe event objects you just looked at. An array can just as easily store all\nthe information they contain, but it would be difficult to determine what\nany of the values represent.\\r\n\\r\n**The syntax for creating objects of your\nown is shown below**\\r\n\\r\n* Curly braces are placed around the contents\nof an object `{}`\\r\n* Names are separated from values with a colon `:`\\r\n*\nName value pairs are separated by commas `,`\\r\n* Names must be strings. If\nthey are not they will be coerced to strings, possibly creating unpredictable\nbehavior.\\r\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\",\n\"yearBorn\":1815};`\\r\n\\r\n# Do This\\r\n\\r\n**Starter code** is provided\nwhich creates an empty object and displays its value.\\r\n\\r\n* Modify the\ncode **using the syntax above** to create an object of your own. Your object\nshould contain **at least 5 pieces of information including both strings and\nnumbers**.\\r\n* **Run the program** and confirm all values in your object\nappear as you expected."
      CSP U4 - Objects - createObject_markdown_instruction: "# Creating Your Own\nObjects\\r\n\\r\n**Objects are unordered collections of name value pairs**.\nLike an array they can hold many pieces of information, but where arrays use\na numeric index to reference specific pieces of information, objects use a\ndescriptive name. We lose the \"ordered\" nature of our data, but we gain\nthe ability to describe the purpose of each piece of data within a collection.\\r\n\\r\nConsider\nthe event objects you just looked at. An array can just as easily store all\nthe information they contain, but it would be difficult to determine what\nany of the values represent.\\r\n\\r\n**The syntax for creating objects of your\nown is shown below**\\r\n\\r\n* Curly braces are placed around the contents\nof an object `{}`\\r\n* Names are separated from values with a colon `:`\\r\n*\nName value pairs are separated by commas `,`\\r\n* Names must be strings. If\nthey are not they will be coerced to strings, possibly creating unpredictable\nbehavior.\\r\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\",\n\"yearBorn\":1815};`\\r\n\\r\n# Do This\\r\n\\r\n**Starter code** is provided\nwhich creates an empty object and displays its value.\\r\n\\r\n* Modify the\ncode **using the syntax above** to create an object of your own. Your object\nshould contain **at least 5 pieces of information including both strings and\nnumbers**.\\r\n* **Run the program** and confirm all values in your object\nappear as you expected."
      CSP U5 AP Practice Choose the Algorithm_markdown_instruction: "# AP Practice\n- Identify the Algorithm\\r\n\\r\nOne component of the **AP Create Performance\nTask** is selecting an algorithm that you developed.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>3. Program Code</b>\\r\n<ul>\\r\n<li>Mark\nwith an <b>oval</b> the segment of program code that implements the algorithm\nyou created for your program that integrates other algorithms and integrates\nmathematical and/or logical concepts.</li>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\nHere's\nthe scoring guide for this question\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32\nAM.png\">\\r\n    <img src=\"https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44\nAM.png\">\\r\n</div>\\r\n\\r\n\\r\n# Choose the Student-Developed Algorithm\\r\n\\r\nThe\nprogram code below is taken from the Color Sleuth activity you just completed.\\r\n\\r\n![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\\r\n\\r\n**Write\nwhich of the ovals (A, B, C, or D) is placed around code that best meets the\ncriteria as a student-developed algorithm.**\\r\n\\r\n**Explain your answer\nusing the criteria in the scoring guide.**"
      CSPPD PD goals_markdown_instruction: "***Now that you've learned more about\nthe CSP Professional Development, let's consider your goals***\n\n<br>\n__What\nare your personal goals for your CSP PD experience (what do you hope to accomplish,\nhow do you hope to grow)?__ *NOTE: These goals might change over time, and\nwe'll revisit your responses as we go through the course so we can check\nin on how we're progressing towards those goals.*\n"
      CSPPD course goals_markdown_instruction: "***Now that you've learned more\nabout the CSP curriculum, let's consider your goals***\n<br>\n<br>\n\n__What\nare your goals for your CSP class?__ *These goals will change over time, and\nwe'll revisit this your response as we go through the course so we can check\nin on how we're progressing towards those goals.*\n\n*NOTE: remember you\ncan change the size of the text box by clicking and dragging the bottom-right\ncorner of the box.*\n"
      CSPPD impact in program_markdown_instruction: "\n#### What connections do you\nthink might exist between the ideas covered in the videos you just watched\nand the units of CSP that you learned about earlier?\n"
      CSPPD materials question1_markdown_instruction: "We just talked about the types\nof materials available through the Code.org CSP curriculum, including teacher\nlesson plans, widgets, widget tutorial videos, concept videos, teaching tips\nvideos, and student-facing activities. Which of these materials are you most\nexcited to have access to? Which are you most uncertain about? "
      CSPPD program overlap_markdown_instruction: "#### Now that you've read more\nabout the CSP program, what relationship do you see between the curriculum\nand Professional Development? What aspects of the two pieces of the program\nseem most important or interesting to you?\n"
      CSPPD strategies_markdown_instruction: "\nThis space is your __digital journal\nfor documenting strategies__ you've picked up during Professional Development\nand while teaching the course. We'll revisit this often during PD, and you\nshould refer back to it while planning lessons to remind yourself of strategies\nyou want to try in class. \n\n\n"
      CSPPD2 PT activity_markdown_instruction: "# Practice PT > Encoding a Complex\nThing\\r\n<img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FBlNhEkvsTFskXJ/Screen%20Shot%202015-07-18%20at%205.46.24%20PM.png\"\nclass=\"level-image\">\\r\n\\r\n## Doing the Project\\r\nTo wrap up our work\nin this unit, we're going to spend an hour doing the practice performance\ntask. After you've read the lesson, spend some time looking over the student-facing\nworksheet and think about what you would like to encode. This is really open\nended, and there's no 'right' thing to choose, but to get the juices going,\nhere are a few example topics: \\r\n\\r\n- A piece of music (the notes that\nare played, the instruments that play them, etc)\\r\n- A food (the smells,\ntastes, appearance, etc) \\r\n- A place (the sounds, the smells, what natural\nthings are in the space, what man-made things are in the space, etc)\\r\n\\r\n>\nOnce you've selected your topic, start working through your protocol for\nencoding the \"complex thing.\" Use the <a href =\"https://docs.google.com/document/d/1IPDnC6tKN7yRzog9t7weKISnjXvykTQe3QEpu43uM7c/edit\"\ntarget =\"_blank\">student activity guide</a> and the <a href=\"https://docs.google.com/document/d/1rkVbwb8nJBlnF9t3hkyIyckM6gJGEjcUwyQiyV-Jlu4/edit\"\ntarget =\"_blank\">lesson plan</a> to work through this.\\r\n\\r\n**See how\nfar you can get through the activity in one hour, but please do limit yourself\nto 60 minutes.** Don't worry about getting through the entire thing in that\ntime, but be ready to share your thoughts about the process along with whatever\nyou come up with! \\r\n\\r\nUse the text box below to record your protocol.\nYou'll have space on the next page to share your final product. "
      CSPPD2 share protocol_markdown_instruction: "# Chunk 3: Encoding and Sending\nText > Creating a Text Message Protocol\\r\n\\r\n<img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FCmh8I2x5GTQ3tu/Screen%20Shot%202015-07-18%20at%2012.53.45%20PM.png\"\nclass=\"level-image\">\\r\n\\r\n## Creating a Text Message Protocol\\r\n\\r\nOn\nthe right you'll find the student-facing worksheet from lesson 10, which\nbuilds on students' prior work with protocols and has them develop a text\nmessaging protocol that can handle the letters a-z as well as common punctuation.\n\\r\n\\r\n>Read over the [lesson plan](https://docs.google.com/document/d/1lAHRLpxu05-gSbNF6LX8vUIoDMHEonrmL3bk-Sh1viA/edit)\nand **work through developing a protocol yourself.** Use the text box below\nto record your protocol.\\r\n\\r\n*Having trouble viewing the activity? [Click\nhere](https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/jogZFA5WQK3rYne/text%20protocol.pdf)\nto open it directly.* \\r\n\\r\n"
      CSPPD3-u2 pick a challenge_markdown_instruction: "# Challenge Overview > What's\nyour Challenge?\\r\n\\r\nNow that you've selected a lesson, head to the forum\nand **share which lesson you plan to complete** for your challenge.\\r\n\\r\n####\n<a href=\"http://forum.code.org/t/unit-2-online-pd-challenge-selection/2222\"\ntarget=_blank>Forums <i class=\"fa fa-external-link-square\" /></a>\\r\n\\r\nEnter\nthe lesson you selected for your challenge below:"
      CSPPD3-u2 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      CSPPD3-u3 pick a challenge_markdown_instruction: "# Challenge Overview > What's\nyour Challenge? \\r\n\\r\n## Enter the lesson you selected for your challenge\nin the text box below.\\r\n\\r\n- 2 - 5: Turtle Drawing\\r\n- 6 - 7: Functions\nand Simple Loops\\r\n- 14-15: Variables \\r\n- 16: Strings\\r\n- 18: Programming\nFlow and Conditionals\\r\n\\r\nNow that you've selected a lesson, head to the\nforum and **share which lesson you plan to complete** for your challenge.\n\\r\n\\r\n#### <a href=\"http://forum.code.org/t/unit-3-challenge-selection/2470\"\ntarget=_blank>Forums <i class=\"fa fa-external-link-square\" /></a>"
      CSPPD3-u3 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      CSPPD3-u4 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      CSPPD3-u5 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      CSPU5 Add Screens to Chaser Game_markdown_instruction: "# Improved Chaser Game\\r\n\\r\nNow\nlets improve the \"Chaser Game\".  This is where you get to use your creativity.\nMake it look nice!\\r\n\\r\nIn addition you will notice a new command in the\ntoolbox: `playsound`! Read the documentation about how to add sounds.\\r\n\\r\n**Note:**\nYour code from before has been provided for you.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Create a Welcome Screen** that explains the rules of the game. Include a\n\"Start Game\" button.\\r\n\\r\n* Update the your code so that the **image jumps\nto a new location when it is clicked**. \\r\n\\r\n* **Play a sound** each time\nthe image is clicked.\\r\n\\r\n* **Add a Game Over Screen** with a lose message\nand button to start over. The Start Over Button should direct back to the\nWelcome Screen.\\r\n\\r\n* **Make the user lose**, by sending them to the Game\nOver Screen, when the background is clicked.\\r\n\\r\n\\r\n"
      CSPU5 Add a 2nd Screen_markdown_instruction: "# Design Mode: Adding a Screen\\r\n\\r\n<img\nsrc=\"https://images.code.org/3aab64d77293bda1759586e2cff5c6cc-image-1477366229125.png\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\n**Now you try it:** Add a new\nscreen and a button to the app we've started here.\\r\n\\r\n**NOTE:** We've\ncreated one screen for you - the Hello Screen.  You need to add a new screen\n- the new screen should look something like the example shown to the right.\\r\n\\r\nHere\nare the steps:\\r\n\\r\n* **Add a new screen**\\r\n * Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39\nPM.png\" style=\"width: 50px\"> from the Design Toolbox.\\r\n * Or choose *New\nScreen...* from the pulldown menu at the top of the app display.\\r\n \\r\n*\n**Set the background color**\\r\n * It doesn't have to be orange like the\nexample\\r\n \\r\n* **Add a Button**\\r\n * A simple button is fine.  You can\nembelish with an icon if you want.\\r\n * Optional: You can also add a text\nlabel saying \"Goodbye!\"\\r\n\\r\n**Click Run...but...you won't see much**\\r\n\\r\n*\nBecause we haven't added code yet **all you'll see is the (default) Hello\nscreen**\\r\n* You won't have any way to see the orange screen when the app\nis running.\\r\n\\r\n**Click Finish** to move on to the next level where we'll\nadd code\\r\n\\r\n * Note: you can continue to work on your design on the next\nlevel too\\r\n\\r\n"
      CSPU5 Add full screen image to bg of chaser game_markdown_instruction: "# Add\na Full Screen Image to act as Background to Game\\r\n\\r\n<img src=\"https://images.code.org/9898664ee57768dd6e332bfab804c2a6-image-1477324830263.png\"\nstyle=\"float: right\">\\r\n\\r\nWe want to be able to detect when the user\n*misses* clicking on the target. Since we know the screen itself registers\nevery click no matter what, the only way to determine that the user missed\nthe target is to **add an image that takes up the full screen**.  \\r\n\\r\nIn\nother words we're trying to determine which of two images was clicked - the\ntarget, or the background - which is do-able since we know when images overlap\nonly one will have a click event triggered. \\r\n\\r\n  * When the target is\nclicked, it jumps to a new location\\r\n  * When the background image is clicked\nwe will (eventually) switch to a new screen.\\r\n\\r\n**Following the Event-Driven\nPattern...**\\r\n\\r\n* **Design mode: Add a new image to the game** \\r\n  *\nand stretch it to fill the whole screen.\\r\n  * Change the layering order\n(if necessary) so that the target image is in front of the full screen image.\\r\n  *\n(See example at right which shows an image that is stretched to the full size\nof the screen sitting behind the target image).\\r\n\\r\n* **Add an onEvent\nhandler** for the full screen image with a simple console.log message\\r\n  *\n**TIP**: this is basically done for you if you add onEvent from Design Mode\\r\n\\r\n*\n**Run. Test. Debug.**\\r\n  \\r\nMake sure that with each click one of two things\nis happening.\\r\n * When the target is clicked, it jumps to a new location\n(and optionally print a message to the console).\\r\n * When the background\nimage is clicked it should display a message to the console.\\r\n * (See example\nconsole output at right)."
      CSPU5 Add game over screen_markdown_instruction: "# Add a \"game over\" screen\nand finalize the game\\r\n\\r\n* **Add a new Screen** with a \"game over\" message\nand **add a button** to start over. \\r\n\\r\n* **Add an event handler** for\nthe \"Start Over\" Button to send the user back to the Welcome Screen.\\r\n\\r\n*\n**Add `setScreen` to the event handling function for the background image**\\r\n\n* When the background image is clicked, the user should be sent to the \"game\nover\" screen you just created.\\r\n\\r\n<img src=\"https://images.code.org/bb3c0973ee0d83d3540f5ffed797e442-image-1477405500619.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n# Run. Test. Debug.\\r\n\\r\nYou\nshould now have a 3-screen app with:\\r\n\\r\n* A welcome screen\\r\n* A game\nplay screen\\r\n* A \"game over\" screen\\r\n\\r\n**Avoid dead-ends** -- the\nuser should be able to get between all the screens appropriately, and play\nthe game.\\r\n\\r\nIf it's not working:\\r\n\\r\n* Retrace your steps\\r\n* See\nif you can figure out where things are going wrong\\r\n* Add extra `console.log`\nstatements.  \\r\n* Ask a friend to help you out.\\r\n\\r\n**Stick with it until\nyou get it!**\\r\n\\r\n"
      CSPU5 Add onEvent from Design Mode_markdown_instruction: "# Add onEvent from\nDesign Mode!\\r\n<img src=\"https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif\"  style=\"width:\n250px; float: right\">\\r\n\\r\nDesign Mode has a shortcut for you to add `onEvent`\nto your code for specific UI Element.  It's quite handy.\\r\n\\r\n**You try\nit:** Add an event handler to a button from Design Mode\\r\n\\r\n**Design Mode**\\r\n  *\nA Red button has already been added to the app.\\r\n  * In Design Mode click\non the button to select it\\r\n  * Click the **EVENTS tab** and then click\nthe link that says **Insert and Show Code**\\r\n  * You may change the ID if\nyou like\\r\n\\r\nThis will insert an `onEvent` block with the ID and \"click\"\nfilled in already.\\r\n\\r\nIt also inserts a line of code with a command we\nhaven't seen yet: `console.log`.\\r\n\\r\n**Run. Test. Debug**\\r\n* Run the\nprogram and click on the button to see what happens\\r\n  * **Hint:** look\nat the **Debug Console** area below the coding workspace.\\r\n* If nothing\nhappens, retrace your steps and try again.\\r\n\\r\nOnce you see a message displayed\nin the Debug Console click finish to move on."
      CSPU5 Add welcome screen to chaser game_markdown_instruction: "# Add A Welcome\nScreen\\r\n\\r\n<div style=\"float: right; width: 150px\">\\r\n\\r\n\\r\n<img src=\"https://images.code.org/558ae19d0fb8af8c6ec573e5d7ac4e29-image-1477369385328.png\"\nstyle=\"float: right; width: 150px\"><br>\\r\n<em>This is an example showing\nthe elements of a welcome screen. Yours <strong> should not </strong> look\nexactly like this.  Yours should be appropriate for your game.</em>\\r\n\\r\n</div>\\r\n\\r\nLet's\nimprove your \"Chaser Game\" by **adding a welcome screen that shows when\nthe app starts up, and that with a button to start.**\\r\n\\r\n* NOTE: we've\nimported the chaser game that you made in the last lesson.  That's the starting\npoint for this.  You can continue with this lesson if you don't have it.\nBut you'll need to make a screen for game play along the way.\\r\n\\r\nFollowing\nthe Event Driven Programming pattern:\\r\n\\r\n1. **Design Mode** \\r\n  * Add\na New Screen to the App\\r\n  * Make this new screen the **default screen**\\r\n  *\nAdd a new Button to the screen that says \"Start\"\\r\n  * Add text welcoming\nthe user to the game.\\r\n  * Give the button and the screen meaningful IDs\\r\n\\r\n2.\n**Add an onEvent Handler for the Button**\\r\n  * Insert a new onEvent block\n(easy way from Design Mode) for the \"start\" button\\r\n\\r\n3. **Add code\nto the event handling function**\\r\n  * When the \"start\" button is clicked\nit should `setScreen` to the screen that plays the game.\\r\n  \\r\n4. **Run.\nTest. Debug.**\\r\n\\r\n Make sure that:\\r\n \\r\n * When app starts up, your\nnew welcome screen shows first\\r\n * When you click the \"start\" button it\ntakes you to the game play screen\\r\n * Note: right now there's no way to\nget back to the welcome screen - it's okay, we'll add that later.\\r\n\\r\n"
      CSPU5 Adding Screens Template_markdown_instruction: "# Second Screen\\r\n\\r\nUp\nuntil now our apps have only been able to have one view. With Design Mode\nwe can now make multiple screens and switch between them!\\r\n\\r\n**Goal:**\nMake a 2 screen app with a black screen and a white screen. \\r\n\\r\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n# Do This:\\r\n\\r\nSwitch to Design\nMode and **add a second screen**. There are two ways to add a second screen:\n\\r\n\\r\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39\nPM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen\ndropdown menu at the top right of the app window. You should now have two\nscreens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07\nPM.png\" style=\"width: 75px\"> \\r\n* From the screen dropdown menu at the\ntop right of the app window click *New Screen*. \\r\n\\r\nMake screen1 white\nand screen2 black. **Set the background color for a screen in the Properties\ntab**.  Make sure to rename the screens with appropriate IDs."
      CSPU5 Debugging Overlapping Objects and Screen Events_markdown_instruction: "#\nUse console.log to Test Overlapping Objects and the Screen\\r\n\\r\nThere are\ntwo goals here:\\r\n\\r\n1. Practice inserting your own console.log statements.\\r\n2.\nInvestigate how the screen captures events (it's different).\\r\n\\r\n## Do\nThis:\\r\n<img src=\"https://images.code.org/4100fcc7062f97ce8440003b3a17cd25-image-1477363054051.png\"\nstyle=\"float: right\">\\r\n\\r\n* **Add `console.log` statements to each of\nthe 3 event handlers** we started you out with.\\r\n * Make the text that gets\nprinted *be descriptive* so that you know exactly what is happening when.\\r\n\\r\n*\n**Run** the program and try clicking where the diagram (at right) shows.\\r\n  *\nClick on each button\\r\n  * Click where the buttons overlap\\r\n  * Click on\nthe screen (i.e. the background)\\r\n\\r\n**Investigate until you can answer\nthese questions:**\\r\n1. When you click on a location where two objects are\noverlapping, which event(s) fire(s)?\\r\n2. When you click on an non-overlapping\npart of some object what gets triggered?\\r\n3. When does a \"click\" on the\n\"screen\" get triggered?\\r\n\\r\n\\r\n<details><summary>Answers: [click here]</summary>\\r\n<br><br>\\r\n1.\nWhen you click on a location where two objects are overlapping, which event(s)\nfire(s)?\\r\n<br>\\r\n<li><em> The event-handler for object that is on top gets\ntriggered.  The object that is underneath is essentially blocked from being\nclicked in the overlapping portion</em></li>\\r\n<br><br>\\r\n2. When you click\non an non-overlapping part of some object what gets triggered?\\r\n<li><em>The\nevent-handler for the object gets triggered as you might expect</em></li>\\r\n<br><br>\\r\n3.\nWhen does a \"click\" on the \"screen\" get triggered?\\r\n<li><em>Always.\nEvents that occur on the screen cannot be blocked by other objects.  If you\nset up an event listener for the screen it will capture EVERY event of that\ntype, no matter what other UI elements are on the screen.  This behavior of\nthe screen is done on purpose and is useful for certain kinds of things.</em></li>\\r\n\\r\n\\r\n</details>\\r\n\\r\n"
      CSPU5 First Time Console.log_markdown_instruction: "# Exploring console.log\\r\n\\r\n<img\nsrc=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\"\nstyle=\"width: 250px; float: right; border: solid 1px black; margin-right:\n10px\">\\r\n\\r\nIn the last level, we saw a new command: `console.log`. You\nshould have noticed that it prints out text in the Debug Console below the\ncode workspace.\\r\n\\r\nThe Debug Console area is an important tool for programmers.  You've\nseen it display error messages, but you can also have your program display\nmessages there.  \\r\n\\r\nYou can find `console.log` in the **Variables** code\ntoolbox, and it is the command you use to send messages to the console --\nit's just about the simplest thing you can do to make your code generate\noutput.\\r\n\\r\n**You try it:** Add a console.log statement to say your name\\r\n\\r\n*\nDrag out a `console.log` statement into the workspace and add it below the\n2 statements there.\\r\n\\r\n* Following the lead of the first two lines - update\nthe code so that it says your name.\\r\n\\r\n* The output should look something\nlike this: \\r\n\\r\n![](https://images.code.org/64c82c1bf7ecb859d84192e5bffb3488-image-1477338603375.png)"
      CSPU5 Layering and Deleting in Design Mode_markdown_instruction: "# Design\nMode: Layering and Deleting\\r\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"\nstyle=\"width: 150px; float: right\">User interface elements can overlap one\nanother, so you'll want the ability to change the order or **depth** at which\neach one is shown. \\r\n\\r\n**You Try it:** Use the **depth** and **delete**\ntools to **create the \"After\" image** (shown below).\\r\n\\r\n* **Scroll to\nthe bottom of the Properties tab** you'll find buttons which allow you to\neasily **change the depth** of an element.\\r\n* **Change the depth** of elements\nby using the double or single arrows.\\r\n * Click the double arrow to send\nall the way to front or back.\\r\n * Click the single arrow to move up or down\none layer.\\r\n \\r\n* **Delete an Element** by selecting it (clicking on it)\nin the design view and then clicking the **Red Delete button** in the properties\ntab.\\r\n\\r\n\\r\n\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n\\t<th style=\"text-align:center\">Before</th>\\r\n    <th\nstyle=\"text-align:center\">After</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td align=center><img\nsrc=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"\nstyle=\"width:200px ; border: solid 1px black\"></td>\\r\n    <td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"\nstyle=\"width:200px; border: solid 1px black\"></td>\\r\n</tr>\\r\n</table>"
      CSPU5 Project - Multi Screen App_markdown_instruction: "# Multi Screen App\\r\nYou\nwill be creating your own multi-screen app to practice designing user interfaces\nand writing event-driven programs. \\r\n\\r\n**Look at the Project Guide and\nPlanning Sheets before programming**.\\r\n\\r\n# Requirements Reminder\\r\n*\nYour app will have at least **4 screens**.\\r\n* Your app should include **text,\nimages, buttons, and sound**.\\r\n* There should be **no “getting stuck” on\nany screen.**  It should always be possible to navigate from a screen in your\napp to some other screen. \\r\n* Your program code should follow **good style**.\\r\n*\nYour user interface should be **intuitive to use**."
      CSPU5 Use Console.log to update IDs_markdown_instruction: "# Updating IDs and\nDebugging with Console Log\\r\n\\r\nIn the last level you tested out the new\ncommand: `console.log`.  In this level we have a couple buttons with event\nhandlers and `console.log` statements, but they are switched around!\\r\n\\r\nWe\nshould have given the buttons better ID names so we could tell the difference\nbased on the ID. **Can you update the ID names and `console.log` messages\nto match the correct button? **\\r\n\\r\n# Do This\\r\n\\r\n* **Change the IDs**\nof the buttons in Design Mode to more descriptive names.\\r\n\\r\n* Switch to\nCode Mode and notice that the **ID pulldowns have been updated to include\nthe new IDs**. (You still need to select the correct ID from the pulldown\nmenu.)\\r\n\\r\n* **Update the `console.log` messages** to match the buttons.\\r\n"
      CSPU5 Use setScreen for first time_markdown_instruction: "# Adding Code: Switching\nScreens with *setScreen*\\r\n\\r\n<img src=\"https://images.code.org/9232bd923268d36158d63829145c9879-image-1477367827365.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n**You Try it:** Add event handlers\nto the buttons that use `setScreen` to switch to the other screen. \\r\n\\r\nThe\nresult should be two-screen app which can switch back and forth between the\n\"hello\" and \"go back\" screens.  See example at right.\\r\n\\r\n* **Add an\nonEvent handler** for the smiley face image/button to respond to a \"click\"\\r\n\n* Do it the easy way by inserting from design mode, or just drag an `onEvent`\nblock into the code workspace.\\r\n\\r\n* **Add `setScreen` into the event handling\nfunction**\\r\n * Make it switch to the other screen when the smiley face is\nclicked.\\r\n\\r\n**Run. Test. Debug**\\r\n\\r\n* Test to see if the clicking\nthe smiley face switches screens\\r\n* If it doesn't work, retrace your steps\nand try again.\\r\n\\r\nIf it works, then **repeat these steps for the \"go\nback\" button.**\\r\n\\r\n* The result should look something like the example\non the right. \\r\n"
      CSPU5 console.log debug when mouse events happen_markdown_instruction: "# Which\ncomes first?\\r\n\\r\nAnother useful thing to do with `console.log` statements\nis to use them to figure out the order in which events are triggered. In the\ncode below one button has 3 different event listeners, that will respond to\nthe events: `\"mousedown\"`, `\"mouseup\"`, and `\"click\"`\\r\n\\r\nThe question\nis, if you click the button:\\r\n\\r\n* Will all 3 of these events trigger?\n\\r\n* Will any of them trigger?  Which one(s)?\\r\n* What order will these\nevents be triggered in?\\r\n\\r\n**You try it**:\\r\n1. Study the code and **make\nPrediction**\\r\n2. **Run** the program\\r\n3. **Were you right?** What's unexpected?\\r\n4.\n**Keep testing** until you see what's happening.\\r\n\\r\n"
      CSPU5 console.log in event v. global_markdown_instruction: "# Predict what\nwill happen\\r\n\\r\nWe've added some `console.log` statements *both* in event\nhandlers as well as just out in the open, between event handler definitions.\n\\r\n\\r\n* **Study the code first**\\r\n * We've added some white space between\nlines to make it more readable.\\r\n\\r\n* **Predict:** What do you think will\nhappen when you click Run?  What will display? Will it:\\r\n * Print all 5\nmessages?\\r\n * Print only a few? Which ones?\\r\n * Halt with an error message?\\r\n\n\\r\n* *After* you've made some kind of prediction, **hit Run**.\\r\n * If\nthe program runs, then try to use it - click on the buttons and such.\\r\n\\r\n*\nWere you right? Anything unexpected?\\r\n * Reset and Run the program again\na few times until you understand what's happening.\\r\n \\r\n<details><summary>What's\nhappening? [click to expand]</summary>\\r\n<li> As soon as you hit Run messages\n\"1\", \"3\" and \"5\" will display immediately. Those statements are out\nin the \"open\" rather than part of an event handling function - the computer\ncan run them right away.</li>\\r\n<li>Messages \"1\", \"3\" and \"5\" will\nonly print once each time you run the program not matter what else you do</li>\\r\n<li>Messages\n\"2\" and \"4\" will be displayed when the the buttons are clicked.</li>\\r\n<li>In\ncase you're wondering: <strong>This is bad code</strong>.  It's hard to\nread because of where the statements fall.  Typically if some code needs to\nrun when the program starts up, you'd group it all together at the top of\nthe program.  Scattering it about in and between event handlers and other\nfunctions is a recipe for a lot of buggy code that will be hard for you to\nwork out.</li></details>"
      CSPU5_AddImageToChaserGame_markdown_instruction: "# Now you do it: Add an image\\r\n\\r\n[lice\ncap]\\r\n\\r\n* add an image from icon, or from something you upload.\\r\n\\r\n*\nWe'll make the image respond to events on the next level\\r\n\\r\n* Click continue\\r\n\\r\n"
      CSPU5_AddImage_andMakeChaserGame_markdown_instruction: "# Now you do it: Add\nan image\\r\n\\r\n[lice cap]\\r\n\\r\n* add an image from icon, or from something\nyou upload.\\r\n\\r\n* We'll make the image respond to events on the next level\\r\n\\r\n*\nClick continue\\r\n\\r\n"
      CSPU5_AddLabelToChaserGame_markdown_instruction: "# Design Mode: Add a label\\r\n\\r\n<img\nsrc=\"https://images.code.org/092af4a9c90ad36fa44c636f1227e4d9-image-1476893390336.gif\"\nstyle=\"float: right\">\\r\n\\r\nWell, now we have the beginnings of a little\ngame!  Time to go back to design mode to start embellishing our program.\\r\n\\r\n**You\ntry it:** - Add a text label that says \"Try to Catch the Button!\"\\r\n\\r\n\\r\n\\r\n*\nSwitch back to design mode\\r\n* Drag a label on the screen <img src=\"https://images.code.org/c74c0e7fed308af92740d31cbd1098a9-image-1476892918698.png\">\\r\n*\nSet the text to be something like \"Try to Catch the Button!\"\\r\n* Set any\nother properties or styles of the text label that you want.\\r\n\\r\n\\r\n"
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_markdown_instruction: "#\nDebugging Unexpected Behavior\\r\n\\r\n## Predict - Observe - Reflect\\r\n\\r\nTo\nunderstand a new piece of code good programmers often try to **first make\na prediction about what will happen before running the program**. \\r\n\\r\nBy\nforcing yourself to make a prediction (it doesn't matter if you're right\nor not) you are immediately alerted to any **unusual or unexpected behavior**\nand you can ask yourself, *\"Huh? why did it do that?  Was that supposed to\nhappen?\"*  It might not be an error, but you gain invaluable insight and\nactually **learn faster**.\\r\n\\r\n**Predict:** For the code that is here,\nwhat will happen when the \"Click Me\" button is clicked? \\r\n\\r\n * **Study\nthe code** - This program has **two event handlers** listening for events\non the same button?\\r\n * **Force yourself to make a prediction!** - \"I don't\nknow\" is not a prediction!. \\r\n\\r\nHere are some options to think about:\\r\n\\r\n*\nThere will be an error in the console immediately after hitting run\\r\n* There\nwill be an error in the console but not until you hit the button\\r\n* Program\ndoes nothing\\r\n* turtle only moves forward\\r\n* turtle only turns left\\r\n*\nturtle move forward *then* turn left \\r\n* turtle turn left *then* move forward?\\r\n*\nsomething else? \\r\n\\r\n**Observe:** Once you've made a prediction, close\nthese instructions and **run the program** to observe what happens.\\r\n\\r\n**Reflect:**\nWas your prediction correct? If not what about your mental model might need\nto change? Talk about it with a classmate and experiment with the code to\nmake sure you understand what is happening."
      CSPU5_FinalizeChaserGame_markdown_instruction: "# Add an Image and Make a Chaser\nGame!\\r\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\"\nstyle=\"float: right\">\\r\n\\r\n**Now You Try it** - add an image to your app\nand modify the code so that the image jumps around the screen rather than\nthe button.  Your little game should have:\\r\n\\r\n* **Text** on the top of\nthe screen with a title or instructions for what to do.\\r\n* **An image**\nthat \"runs away\" (moves randomly) based on some mouse event.\\r\n\\r\n**Tips:**\\r\n\n* **Hint** - the easy way to do this is to simply change the IDs in `onEvent`\nand `setPosition` to respond to the image instead of the button.\\r\n * Remove\nthe button from the app after the image is working.  We don't need it anymore.\\r\n\n* Change the label text so that the instructions make sense for your game.\\r\n\n* The game is even more fun if you use  the `mouseover` event instead of `click`\\r\n\\r\n**Optional\nExtensions**:\\r\n * Make the background interesting\\r\n * Add another image\nthat runs away.\\r\n * See what happens with the commands `hideElement` and\n`showElement`\\r\n * Have two UI elements where interacting with one controls\nor does something to the other.\\r\n\\r\n**Finalize your \"Chaser Game\"** and\nclick Finish.\\r\n\\r\n"
      CSPU5_Project - Multi Screen App_markdown_instruction: "# Multi Screen App\\r\nYou\nwill be creating your own multi-screen app to practice designing user interfaces\nand writing event-driven programs. \\r\n\\r\n**Look at the Project Guide and\nPlanning Sheets before programming**.\\r\n\\r\n# Requirements Reminder\\r\n*\nYour app will have at least **4 screens**.\\r\n* Your app should include **text,\nimages, buttons, and sound**.\\r\n* There should be **no “getting stuck” on\nany screen.**  It should always be possible to navigate from a screen in your\napp to some other screen. \\r\n* Your program code should follow **good style**.\\r\n*\nYour user interface should be **intuitive to use**."
      CSPU5_U3 - Arrays - Demo App_markdown_instruction: "# My Favorite Things\\r\n\\r\nCheck\nout this simple app for creating a collection of your favorite things. **We're\ngoing to be working towards building this app** over the next several exercises.\nAs you might expect, this application **uses an array** to store and organize\ninformation.\\r\n\\r\n# Do This:\\r\n\\r\n* Use the \"My Favorite Things\" app\nand try to **predict how arrays are used to create the functionality you observe.**\n\\r\n* Some features to notice:\\r\n\\t* The app keeps track of a **list of your\nfavorite things**.\\r\n    * You may use buttons to **move forward and backward\nthrough your list**.\\r\n    * The **current entry and total number of entries**\nare indicated at the top.\\r\n    * You may **add a new entry** at the current\nlocation in your list."
      CSPU5_U3 - Arrays - Wrap Up 1_markdown_instruction: "## Choose: Array or Variable?\\r\n\\r\nYour\napp needs to store the following information. For each type of information,\ndecide whether you would use an array or a variable to store it:\\r\n \\r\n*\nAll the messages a user has sent\\r\n* The highest score a user has ever reached\non the app\\r\n* A username and password to unlock the app\\r\n"
      CSPU5_U3 - Arrays - Wrap Up 2_markdown_instruction: "## Free Response: Choosing\nArray or Variable\n\nIn general, when do you think you should store information\nin an array, and when should you use a variable?\n"
      CSPU5_U3 - Arrays - appendItem_markdown_instruction: "# Adding Items to an\nArray\\r\n\\r\n<img src=\"https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06\nPM.png\" style=\"width: 250px; float: right\">\\r\n\\r\nIn our last exercise\nwe created our array and initialized it with some values. Another way to do\nthis is to **add items to your array on separate lines**. The simplest way\nto do this is to add a new item to the end of your array using the `appendItem`\ncommand.\\r\n\\r\n<img src=\"https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50\nPM.png\" style=\"width: 250px; float:right; border: solid 1px black\">\\r\n\\r\nTo\nappend means to add or to join. When you append an item to an array you actually\nadd a new location to the end of the array that contains the new value, so\nthat the total size of the array grows by one.  Since you can always add items\nto an array after creating it, it is very common to  **create an empty array\nand then add values in subsequent portions of your program**.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Read the documentation** for `appendItem`.\\r\n* Create an\n**empty array** called `oddNumbers`.\\r\n* Use `appendItem` to add the odd\nnumbers 1-11 to your array.\\r\n\\r\n![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\\r\n\\r\n*\n**Use `console.log`** to confirm your array is holding the correct values.\nThe output should look like the example below.\\r\n\\r\n![](https://images.code.org/4daf7aff37f4796185fc608f20856a12-image-1489697355089.png)"
      CSPU5_U3 - Arrays - assignment_markdown_instruction: "# Setting Values by Index\\r\n\\r\nEach\nlocation in an array can be treated like its own variable. We've already\nseen how we can use bracket notation to reference values stored at specific\nlocations in an array. Just like with variables, **we can assign the value\nof a specific location in an array using `=`** (the assignment operator).\\r\n\\r\n**Example:**\nThe value at index 0 of this array is set to 10.\\r\n\\r\n![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25\nAM.png)\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11\nPM.png\" style=\"width: 200px; float: right\">\\r\n\\r\nStarter code is provided\nthat creates an array of 0's and 1's. **Set all the values in this array\nto be 0**. \\r\n\\r\n* Use **indexes** and the **assignment operator** `=` to\n**set all the 1's to be 0**.\\r\n* Check the output of the `console.log` to\nconfirm **the array only contains 0's**. Example shown on the right.\\r\n\\r\n"
      CSPU5_U3 - Arrays - assignment2_markdown_instruction: "# Array Values: Arithmetic\\r\n\\r\nYou\ncan reference locations in arrays in arithmetic expressions, just like you\nmight a variable.\\r\n\\r\n![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32\nPM.png)\\r\n\\r\nThe starter code **creates an empty array and adds three random\nvalues to it**. \\r\n\\r\n![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46\nPM.png)\\r\n\\r\nYou will be adding code to your program that calculates the\nsum of the values in the array.\\r\n\\r\n**Notice** the difference between displaying\nan array as part of a string or by itself.  Example:\\r\n\\r\n* code: `console.log(myNumbers)`\ndisplays *with* brackets as: `[1, 2, 3, 4]`\\r\n* code: `console.log(\"my list:\n\"+myNumbers)` displays *without* brackets as: `my list: 1, 2, 3, 4`\\r\n\\r\nSo\nwhen it's part of a string it *does not* print the square brackets around\nthe ends of the list.  This is a \"feature\" of the language with no great\nexplanation. In the first case it sees only a list and it produces a more\ntechnical representation. In the second case the system is trying hard to\nconvert the list to a nice looking string.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add\na variable** to your program to hold the sum of the array values.\\r\n* Assign\nthe value of the variable to **the sum of the three array values**.\\r\n* Use\n`console.log` to confirm that you have correctly calculated the sum of the\nvalues. Below is sample output from one run of the program.\\r\n\\r\n![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31\nPM.png)"
      CSPU5_U3 - Arrays - assignment3_markdown_instruction: "# Reassigning Array\nValues\\r\n\\r\nWe've already seen many examples of how **a location in an\narray can be treated identically to a variable**. The last exercise we'll\nperform to prove this point is **reassigning array values**. The syntax for\nreassigning values stored in an array is identical to that used when reassigning\nvariables. Even the `++` notation to increase a value by one works!\\r\n\\r\n![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\\r\n\\r\nThe\nprogram you're about to see **creates an empty array and adds three random\nvalues to it**. You will be adding code to the program that **increases each\nvalue by one**.\\r\n\\r\n# Do This:\\r\n\\r\n* Add code to the program that **increases\nthe value stored at each location in the array by one**.\\r\n* Use `console.log`\nto confirm that you have correctly increased the values. Below is sample output\nfrom one run of the program.\\r\n\\r\n![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37\nPM.png)\\r\n\\r\n"
      CSPU5_U3 - Arrays - createFirstArray_markdown_instruction: "# Creating an Array\\r\n\\r\nArrays\nhave many features which make them different from variables, but **most of\nwhat you've learned about variables also applies to arrays**. For example,\njust like a variable:\\r\n\\r\n* Arrays should be given a **descriptive and\nmeaningful** name.\\r\n* Arrays are created using `var`.\\r\n* Arrays can be\ninitialized/set using `=`.\\r\n\\r\n**Example: Creating an Array**\\r\n\\r\n![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08\nPM.png)\\r\n\\r\nThis array contains 3 values: 100, 250, 500. Notice that the\nvalues are separated with commas `,` and that the entire array is enclosed\nin brackets `[ ]` . We can use `console.log` to display the contents of an\narray just like we would a variable.\\r\n\\r\n![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* Following the format described above **create\nan array** which contains **the even numbers from 0 to 10**.\\r\n\\r\n<img src=\"https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif\"\nwidth=450px>\\r\n\\r\n* Make sure your array has a **descriptive and meaningful\nname**.\\r\n* Use `console.log` to display the contents of your array. Below\nis an example of the output your program should generate.\\r\n\\r\n![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53\nPM.png)\\r\n\\r\n"
      CSPU5_U3 - Arrays - expressionsAsIndexes_markdown_instruction: "# Expressions\nas Indexes: Using Variables\\r\n\\r\nWe can use **any expression that evaluates\nto a number** as an index in an array. Here are some examples:\\r\n\\r\n![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** has been provided which\ncreates an array of colors.\\r\n* **Write code** that logs **a random color\nfrom this list** to the console by generating a value for a random index.\nTry to write your program using `list.length` rather than hard-coding the\nlength of the list.\\r\n\\r\n![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)"
      CSPU5_U3 - Arrays - favThings Counting Variable_markdown_instruction: "# Current\nIndex\\r\n\\r\nThis app also allows a user to scroll through individual items\nin the array. In order to keep track of which index we are currently viewing,\nour application will need **a global variable that stores the current index**.\nIn coming exercises we'll want our global index to change, so let's **make\nsure that your code references your global index** rather than fixed values.\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43\nAM.png\" style=\"width: 250px; float: right\">\\r\n\\r\n* Create a **global\nvariable** that will be used to keep track of the current index in the array.\nSet this variable to 0.\\r\n* Update `setText` which displays the words to\nshow your first favorite thing using **the global index variable** instead\nof a hard-coded number. \\r\n* Update `setText` which displays the current\nitem number to use **the global index variable** instead of a hard-coded number.\\r\n\\t*\n**Hint:** since arrays are zero-indexed **you will have to add one to your\nindex** to generate the correct value to display.\\r\n* **Note:** neither of\nthese outputs will be able to change yet. Don't worry, we'll be taking care\nof that in coming exercises!"
      CSPU5_U3 - Arrays - favThings Next_markdown_instruction: "# Next Button\\r\n\\r\nNice\nwork! Your application should now have some simple output displaying one of\nyour favorite things and indicating which item of your list you are showing.\nTo make things more interesting, however, **we want to be able to change which\nitem we display**.\\r\n\\r\nTo change the item displayed, the user will use\nthe \"Next\" and \"Last\" buttons. These should **increase or decrease the\nglobal index by one and then you should update the information displayed on\nthe screen**. To start out with, however, we'll just be writing code for\nour Next Button. \\r\n\\r\n# Do This:\\r\n\\r\n* **Add an event handler** to the\n\"Next\" button.\\r\n* Write code in this event handler that **increments your\nglobal index variable** and then **updates the output on the screen**.\\r\n\\t*\n**Note:** If your code from the last exercise was written to reference this\nvariable then you should just be able to reuse it once you've incremented\nyour variable. We'll talk more about this in the next exercise.\\r\n* Run\nyour program to **confirm that the user can move forward through the list\nand that the output displayed is correct**.\\r\n\\t* **Note:** You may notice\nthat your program throws an error if the global index variable goes out of\nbounds. Don't worry about this for now - we'll fix it in a later exercise."
      CSPU5_U3 - Arrays - favThings Prev_markdown_instruction: "# Last Button\\r\n\\r\nOur\nuser can now move forward through our list of favorite things, and we're\nabout to write code that allows them to move backwards as well. If you've\nwritten your code to reference your global index then this should only require\nyou to decrease its value by one and reuse code that updates the screen output.\nBefore we write the code for backwards let's work on cleaning up our code.\\r\n\\r\n**Removing\nRepeated Code:** Once you add the code for moving backwards through your array,\nyour program will have three places where it updates the screen by setting\nthe text of your screen elements. Rather than repeating this code we should\n**create a function** that updates the screen and then call it every time\nwe need to refresh those elements. This will not only make our program easier\nto read and avoids the errors that can arise from redundant code, but it also\nmakes it easier to make changes to how our program runs, since all the code\nthat updates the screen is in a single place.\\r\n\\r\n# Do This:\\r\n\\r\n* **Write\na function** that contains the `setText` commands you have used to update\nthe screen.\\r\n* **Replace** the places in your code where you used to have\nthese commands with **calls to your new function**.\\r\n* **Add an event handler**\nto the \"Last\" button that decreases the **global index variable** by one\nand then updates the screen by calling your new function.\\r\n* Run your program\nto confirm that the user **can move forward AND backward** through the list\nand that the output displayed is correct.\\r\n  * **Note:** You may notice\nthat your program throws an error if the global index variable goes out of\nbounds. Don't worry about this for now - we'll fix it in a later exercise."
      CSPU5_U3 - Arrays - favThings addItem_markdown_instruction: "# Adding New Items\\r\n\\r\nNow\nwe want our user to be able to add items of their own to the list. As you\nmight have guessed, this is as easy as inserting an item into our array at\nthe current index.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an event handler** to\nthe \"Add\" button.\\r\n* **Write code** in your event handler that:\\r\n\\t*\nUses `getText` to access the user's new item.\\r\n    * Uses`insertItem` to\nadd that item to your array at the current index.\\r\n    * Calls your update\nfunction to update the screen (the new item should be displayed).\\r\n* Run\nyour program to confirm that the user **can add items to the list** and that\nthe output displayed is correct."
      CSPU5_U3 - Arrays - favThings bounds_markdown_instruction: "# *if* Statements:\nStaying in Bounds\\r\n\\r\nCurrently the user can increase or decrease the value\nin the global index **past the bounds of your array**. As a result you've\nprobably already seen that errors are generated.\\r\n\\r\nTo prevent this from\nhappening, we're going to **add `if` statements** to the event handlers on\nthe \"Next\" and \"Last\" buttons. They should check the value of the global\nindex variable before changing it. If the user is about to step out of the\nbounds of your array they should either:\\r\n\\r\n* **Block:** Do not change\nthe index if it will result in a value that is out of bounds.\\r\n* **Wrap:**\nSet the index to be the other end of the array. In other words, going past\nthe end of the array moves the index back to 0 and going past the beginning\nof the array sets the index to the last in the array (`list.length` will be\nhelpful here).\\r\n\\r\n# Do This:\\r\n\\r\n* **Add `if` statements** to the event\nhandlers on the \"Next\" and \"Last\" buttons that **prevent the global index\nfrom going out of bounds** using one of the two strategies described above.\\r\n*\nRun your program to confirm that the user **cannot go out of bounds** and\nthat the output displayed is correct."
      CSPU5_U3 - Arrays - favThings createArray_markdown_instruction: "# Create Your\nArray\\r\n\\r\nNow that we've dealt with our design elements we'll need to\nstart writing the actual code of our app. This app keeps track of a list of\nitems, so we know that **we'll need to create an array** to store them. \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Create an array** that will hold your list of favorite\nthings.\\r\n* **Add three of your own favorite things to your array.**"
      CSPU5_U3 - Arrays - favThings firstOutput_markdown_instruction: "# Displaying\nInformation to the User\\r\n\\r\nBefore we make our application interactive,\nwe'll want to practice creating some simple user output. When the app starts\nup, the first item in your list should be displayed. Let's write the code\nthat will display this information to the screen. \\r\n\\r\n# Do This:\\r\n\\r\n<img\nsrc=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43\nAM.png\" style=\"width: 250px; float:right\">\\r\n\\r\n* Using `setText` set\nthe main text area to show your first favorite thing.\\r\n* Using `setText`\nand `list.length` set the text indicating what item of the list the user is\ncurrently viewing.\\r\n\\t* **Hint:** since arrays are zero-indexed **you will\nhave to add one to your index** to generate the correct value to display.\nFor now you can just write in a `1` and worry about making it change later.\\r\n*\n**Note:** neither of these outputs will be able to change yet. Don't worry,\nwe'll be taking care of that in coming exercises!\\r\n\\r\n"
      CSPU5_U3 - Arrays - favThings giveIDs_markdown_instruction: "# Getting Started:\nCreating IDs\\r\n\\r\nTo get your application off the ground we've provided\n**the user interface elements that you will use in your application**. Unfortunately\nthey all currently have **default IDs** which don't reflect how the elements\nwill be used.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create a descriptive and meaningful\nID** for each element in your app."
      CSPU5_U3 - Arrays - favThings keepPlaying_markdown_instruction: "# Keep Going!\\r\n\\r\nYour\napp should now be fully functional - nice job! There are of course plenty\nof new pieces of functionality to add. If you have time feel free to make\nany improvements you wish. Here are some ideas:\\r\n\\r\n* Allow the user to\n**append items** rather than add them at the current location.\\r\n* Give the\nuser the ability to **remove** the item at the current index. This can be\na little tricky if you **remove the item at the end of the list** so see if\nyou can account for that.\\r\n* Only add words **if they are not blank**.\\r\n*\n**Improve the appearance** of the app."
      CSPU5_U3 - Arrays - indexPractice_markdown_instruction: "# Index Practice\\r\n\\r\nIt\nwill take some practice to get comfortable using array indexes. We'll do\na couple of exercises to build your confidence.\\r\n\\r\n# Do This:\\r\n\\r\n<img\nsrc=\"https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates an array called `myNumbers`.\\r\n\\r\n* Use `console.log`\nand array indexes to write the contents of `myNumbers` to the screen in order,\nas shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\\r\n\\r\n"
      CSPU5_U3 - Arrays - insertingItems_markdown_instruction: "# Inserting Items:\nArray Indexes\\r\n\\r\nIf you want to add elements in the middle of your array\nyou can use `insertItem` to specify an **index** at which an item should be\ninserted.\\r\n\\r\n![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24\nAM.png)\\r\n\\r\nJust like `appendItem`, `insertItem` creates a new location\nin the array. However `insertItem` allows you to insert an item anywhere in\nthe array, not just at the end, and it shifts all elements at or after its\nindex one location over.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `insertItem`.\\r\n* **Starter code** has been provided which appends some\nstrings to an array, but right now they don't form a complete sentence.\\r\n*\nUse `insertItem` to **individually insert strings to your array** to form\na complete sentence.\\r\n* Use `console.log` to confirm you succesfully created\nyour sentence.\\r\n\\r\n![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59\nAM.png)"
      CSPU5_U3 - Arrays - insertionErrors_markdown_instruction: "# Out of Bounds\\r\n\\r\nIn\nmany languages trying to access indexes of an array that don't exist will\ncreate an error. **JavaScript allows for some strange behavior** with arrays\nthat it's useful to see, even though **you will likely never use this functionality**.\\r\n\\r\n**Warning:**\nsome of this code will generate errors or work in unexpected ways. Don't\nspend a long time trying to understand weird results. The point to take from\nthis is **referencing indexes that are out of bounds will almost never do\nwhat you intend**, and we'll be learning ways to avoid this as we move forward.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** has been provided which creates an array\nwith three elements.\\r\n* Uncomment the **first command that references indexes\nthat are out of bounds** and run the code.\\r\n* **Examine the output** and\ntry to understand what is happening.\\r\n* Reset and then **recomment** the\nline after you've used it. \\r\n* **Repeat the process for all the lines.**\\r\n\\r\n**Note:**\nWe have used a different style of comment in this program. `/* long block\ncomment */` is used when you want to write a multiple-line comment. "
      CSPU5_U3 - Arrays - introIndex_markdown_instruction: "# Accessing Items in\nan Array\\r\n\\r\nAn array is comprised of many locations. You can individually\nset or reference the information at each location of your array just like\na variable. To tell your locations apart each has a separate number, or **index**,\nthat identifies it.\\r\n\\r\nArrays in JavaScript are **zero-indexed** which\nmeans the first index is 0. This is similar to binary number systems which\nbegin counting at 0. For example an array of 10 items would have indexes 0-9.\nAs a result **the last index is always one less than the length of the array**.\\r\n\\r\n**Accessing\nArray Items by Index:** If you know the index of the item you wish to access\nyou can reference it using square brackets `list[index]` . The example below\nprints the value of the 4th element in the array.  \\r\n\\r\n![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n**Starter code** has been provided which\ncreates an array of the numbers 1 through 10\\r\n\\r\n* Use `console.log` to\ndisplay the first item in your array.\\r\n* Use `console.log` to display the\nlast item  in your array.\\r\n* Use `console.log` to display the number 5 from\nthe array."
      CSPU5_U3 - Arrays - length_markdown_instruction: "# *Array.length*\\r\n\\r\nAs\nwe saw in the last exercise, there are many strange behaviors that can result\nfrom referencing array indexes that are less than 0 or greater than the highest\nindex in your array. **If you want to avoid these kinds of errors then it\nis useful to know how long your array is,** especially since we've seen that\narrays can grow and shrink during the course of our program.\\r\n\\r\n![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15\nAM.png)\\r\n\\r\nYou can always check the current length of your array using\nthe command `list.length` where \"list\" is the name of your array. It evaluates\nto a number indicating how many items are in your array.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** has been provided which creates several long arrays.\\r\n*\n**Use `list.length` and `console.log`** to determine how many items are in\neach array. An example of the output is below.\\r\n\\r\n<img src=\"https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29\nAM.png\" style=\"width: 250px\">"
      CSPU5_U3 - Arrays - lengthMinus1_markdown_instruction: "# Expressions as Indexes:\n*list.length - 1*\\r\n\\r\nWe have been accessing information in an array by\nusing numbers, but we can actually use **any expression that evaluates to\na number as an index in our array**. The first example of this we will explore\nis accessing the last item in our array.\\r\n\\r\nArrays are **zero-indexed**,\nwhich means that the first index is 0. Therefore an array with a length of\n3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than\nthe length**. This will always be the case, and so we can use this expression\nto access the last element in any array:\\r\n\\r\n![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** has been provided that\nwhich creates several arrays.\\r\n* Use the syntax provided above and `console.log`\nto display the final item in each list.\\r\n"
      CSPU5_U3 - Arrays - remove_markdown_instruction: "# Removing Items\\r\n\\r\nSometimes\nwe want to remove something from an array. In order to do so you'll need\nto specify the **index** of the item that should be removed.\\r\n\\r\n<img src=\"https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40\nPM.png\" style=\"width: 250px\">\\r\n\\r\n**Note:** `removeItem` removes the\nlocation in the array at the index provided. As a result **the array is one\nlocation shorter and all the indexes after the index provided will have their\nindex decreased by one**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `removeItem`.\\r\n* **Starter code** has been provided which creates an\narray of strings.\\r\n* Use `removeItem` to **individually remove all the \"REMOVE\"\nstrings in your array** to form a complete sentence. \\r\n* Use `console.log`\nto confirm you succesfully created your sentence.\\r\n\\r\n**Note:** Keep an\neye out; your indexes will shift as you remove items.\\r\n\\r\n![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17\nPM.png)"
      CSPU5_U3 - Arrays - stringsInArrays_markdown_instruction: "# Arrays Can Hold\nStrings\\r\n\\r\nSo far we have been using arrays to hold numbers, but each\nlocation in an array could hold a string instead.\\r\n\\r\n![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13\nPM.png)\\r\n\\r\n**Note:** It is possible for an array to hold both strings\nand numbers, but **typically you will only want your arrays to hold one type\nof data**.\\r\n\\r\n# Do This:\\r\n\\r\n* Create an **empty array**.\\r\n* Use\n`appendItem` to **individually add strings to your array**, forming a sentence\nof at least **5 words**.\\r\n* Use `console.log` to confirm you succesfully\ncreated your sentence.\\r\n\\r\n![](https://images.code.org/72b8a2bf0a98be39fba73498cb6ed5da-image-1489697463827.png)"
      CSPU5_U3 - Canvas - 200dots_markdown_instruction: "# Loops on the Canvas\\r\n\\r\nTo\nmake things interesting, we're going to quickly add 200 dots to our canvas\nby using a `for` loop. **Locations on the canvas are relative to the top-left\ncorner of the canvas, not the screen**. Therefore you will need to know the\ndimensions of your canvas in order to randomly place dots throughout it. You\ncan find this information in Design Mode:\\r\n\\r\n![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29\nAM.png)\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif\"\nstyle=\"float: right\">\\r\n* Add a **`for` loop that runs 200 times.**\\r\n*\nPlace the **`circle` command inside the loop** and **decrease the radius**\n(try 20).\\r\n* **Use `randomNumber` to randomize the `x` and `y` values used\nto place your dots**. The ranges you select should be the width and height\nof your canvas.  \\r\n* **COMMON MISTAKE ALERT:** If you test your code before\nsetting the `x` and `y` values of the circle to random numbers, it will look\nlike there's only one dot.  But really you will have just drawn 200 dots\nall at the same (x,&nbsp;y) position.\\r\n\\r\n"
      CSPU5_U3 - Canvas - One Dot sprayPaint_markdown_instruction: "# Making Spray\nPaint\\r\n\\r\nThe next effect we would like to create is a \"spray paint\"\neffect. Instead of drawing a single dot for every location stored in `eventList`,\nwe'll draw many small dots randomly placed around each location.\\r\n\\r\nWe\nare going to start off just practicing **drawing a circle whose x and y locations\nuse `offsetX` and `offsetY` with a small random value added**. This makes\nthe line of code to draw the circle kind of long, but hopefully it's easy\nto understand if you read it carefully.\\r\n\\r\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Set the style of another button** in Design Mode, give\na label like \"Spray Paint,\" give it a descriptive ID, and attach a click\nevent handler to it.\\r\n* **Copy the code from the \"Original\"** button into\nthe event handler for spray paint.\\r\n* Change the code for `circle` so that\nit will **draw a dot whose x and y locations use `offsetX` and `offsetY` with\na small random value added. **\\r\n\\r\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\\r\n\\r\n*\n**Run your app** to make sure it is drawing small dots close to the original\nposition. Look at the example below.\\r\n\\r\n![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)"
      CSPU5_U3 - Canvas - appendToArray_markdown_instruction: "# Store Your Dots\\r\n\\r\nNow\nwe're going to get into the core of the activity. We will be **creating a\nrecord of every dot your user draws**.\\r\n\\r\nTo do this, we will append *every*\n`event` parameter to an array as events are generated. When we store every\nmouse location in an array, we can make many interesting effects and redraw\nthe image in different ways, by looping over the array. First let's just\nmake sure we can capture them all.\\r\n\\r\n# Do This:\\r\n\\r\n* Create a new\narray outside the event handler function: `var eventList = []`.\\r\n\\r\n* In\nyour event handler, before you call the `circle` command, use `appendItem`\nto add the `event` parameter to `eventList`.\\r\n![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\\r\n\\r\n*\n**Run the program** and draw some dots.\\r\n\\r\n* In the Debug Console type\n`console.log(eventList)` and inspect the contents. You should have a record\nof every event parameter used to draw a dot! (It might be a lot.)\\r\n![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)"
      CSPU5_U3 - Canvas - changeToMouseMove_markdown_instruction: "# Drawing on *mousemove*\\r\n\\r\nCurrently\nthe user can click to add dots, but we want **to place dots wherever the user\nmoves the mouse on the canvas**.\\r\n\\r\nTo place dots whenever the mouse is\nmoved, we'll be **changing the event type from `click` to `mousemove`**.\\r\n\\r\n#\nDo This:\\r\n<img src=\"https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif\"\nstyle=\"float: right\">\\r\n* Change the event type in your event handler **from\n`click` to `mousemove`**.\\r\n* **Run your program** to confirm that dots are\nbeing drawn anywhere the user moves the mouse.\\r\n\\r\n**Your user is now able\nto draw anywhere they want on the screen!**"
      CSPU5_U3 - Canvas - clickToAdd_markdown_instruction: "# Click to Add Dots\\r\n\\r\nLoops\nare one way of quickly adding dots to our canvas, but now we're going to\nchange our app so that the user can decide when and how many dots to add.\nThe canvas is a UI element, so **you can attach event handlers to it just\nlike you would any other element**. We're going to move the circle command\ninside of a click event handler so that the user can click to add individual\ndots.\\r\n\\r\n![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add an `onEvent` handler**; set its ID to your canvas\nID.\\r\n* **Move the `circle` command out of your `for` loop and into your\nnew event handler**.\\r\n* **Remove the `for` loop from your program.**\\r\n*\n**Run your program** and confirm that a single dot is added everytime a user\nclicks your canvas.\\r\n\\r\n![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)"
      CSPU5_U3 - Canvas - delete_markdown_instruction: "# Delete Button\\r\n\\r\nWe\nare finally going to use those buttons! Each one will trigger an event handler\nthat **processes the array `eventList` to create a visual effect** with the\nmouse data you have stored. **The first effect we are going to create is delete.**\\r\n\\r\nYou\nmay want to provide your user with a way to start over with their drawing.\nIn order to do this, you will need to *both* **clear the canvas** and **delete\nall items from `eventList`.**  The easiest way to delete everything from the\nlist is to simply set the value of `eventList` to be a new empty list.\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n* In Design Mode, set the styling\nand text of one button to indicate it's the \"delete\" or \"start over\"\nbutton. Give your button **a descriptive ID**.\\r\n\\r\n* **Add a click event\nhandler** to your button.\\r\n\\r\n* Within the event handler call `clearCanvas`.\\r\n\\r\n*\nSet `eventList` to the empty array (i.e., `eventList = []`).\\r\n\\r\n**Test\nyour program** to make sure that starting over works the way it should.  \\r\n"
      CSPU5_U3 - Canvas - draw at click point_markdown_instruction: "# Drawing Dots\nat Click\\r\n\\r\nCurrently the user can click to add dots, but they're drawn\nat random locations around the canvas. We're going to use information stored\nin the `event` parameter of the event handler function **to place dots wherever\nthe user clicks the mouse on the canvas**.\\r\n\\r\nThe event parameter has\ntwo critical pieces of information we'll want, which are `event.offsetX`\nand `event.offsetY`. These hold **the location (relative to the top left corner\nof the canvas) that was clicked**. \\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n* **Remove (or comment out) the\n`console.log` statement**.\\r\n* Replace the `x` and `y` parameters of the\n`circle` command with `event.offsetX` and `event.offsetY`.\\r\n* **Run your\nprogram** to confirm that dots are being drawn anywhere the user clicks the\nmouse."
      CSPU5_U3 - Canvas - freePlay_markdown_instruction: "# Create Your Own Effect!\\r\n\\r\nYou've\njust seen several ways that we can process our array `eventList` in order\nto create different effects. Now it's time to make your own! **Extend the\nfunctionality of one of the effects you just created, or create an entirely\nnew one**. What else could you do with the information you've stored in your\narray? How else might you combine the programming tools you've developed?\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Extend the functionality of one of the effects, or create\nan entirely new one of your own!**"
      CSPU5_U3 - Canvas - introCanvas_markdown_instruction: "# Introducing Canvas\\r\n\\r\nToday\nwe are going to be building a drawing app around **a new UI element called\nthe canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25\nPM.png)\\r\n\\r\n![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\\r\n\\r\n**A\ncanvas is simply a transparent rectangle on which you can draw basic shapes**\nlike lines, circles, and rectangles. In fact, at first you might feel like\nwe're going to end this unit in the way we started it, making turtle drawings.\nDon't worry, we'll quickly move into new and exciting things we can do with\nthis new UI element.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33\nPM.png\" style=\"float: right\">\\r\n* **Starter code** is provided which places\nbuttons on the bottom of your screen. **Ignore these for now; we'll be using\nthem later**.\\r\n* **In Design Mode, drag a canvas element into the empty\nspace at the top of your app**, resize it, and give it a descriptive ID.\\r\n*\n**Call `setActiveCanvas` with the ID you assigned to your canvas**, which\nmakes it responsive to canvas commands.\\r\n* **Add a giant circle to the canvas.**\nUse the `circle` command. Make its radius large enough that it goes off the\nedge of your canvas.\\r\n\\r\nYour code will look something like this:\\r\n\\r\n![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59\nPM.png)"
      CSPU5_U3 - Canvas - movementFunction fix Orig_markdown_instruction: "# Fix\nthe \"Original\" Button\\r\n\\r\nOur \"Original\" button is now slightly broken\nbecause the effect it renders doesn't match our new free-form drawing which\ntakes the movement of the mouse into account - it just draws fixed-size cricles.\\r\n\\r\nLet's\nfix the \"Original\" button.\\r\n\\r\n# Do This:\\r\n\\r\nIn the event handler\nfunction for the \"Original\" button:\\r\n\\r\n* Change the value used for the\nradius from a fixed value to the same thing calculated for the free-form drawing.\nSince you wrote a function to do this calculation, it should be easy to call\nit from this code as well!\\r\n* The **slight difference will be that you will\nbe looping over the array of events.**  So the line of code that draws the\ncircle might look like the one below. This line of code is certainly a mouthful,\nbut it's basically the same as the line of code in your `mousemove` event\nhandler; **it just references the event in the list instead.** <br><img src=\"https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21\nPM.png\" style=\"width: 600px\">\\r\n* **Test your program** to confirm that\nclicking the \"Original\" button creates the same effect that occurs when\ndoing free-form drawing.\\r\n\\r\n![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)"
      CSPU5_U3 - Canvas - movementFunction_markdown_instruction: "# Adjusting Circle\nSize\\r\n\\r\nAmong the other pieces of information contained in each `event`\nparameter are the values `movementX` and `movementY`. These numbers tell us\nhow far (in pixels) the mouse moved since the last mouse event was triggered,\nand can be used to measure the speed of the mouse. ** If the movement is large,\nthe mouse is moving fast; if the movement is small, the mouse is moving slowly.**\\r\n\\r\nLet's\nuse the mouse movement speed to make a cool effect. When we draw with a real\npen or brush, the line usually gets thin when making quick strokes and is\nwider and darker when making slower ones. We can generate this effect by **using\n`movementX` and `movementY` to calculate the radius for the circle.**  Since\nthis calculation might be a little tricky, a smart thing to do would be to\n**write a function** that takes `movementX` and `movementY` as parameters\nand **returns** a value that should be used as the radius.\\r\n\\r\n<img src=\"https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43\nPM.png\" style=\"width: 350px; float: right; border: solid 1px black\">\\r\n\\r\nThere\nare several ways to do this. One possible way to write the function is provided\non the right, which uses some arithmetic tricks. The function to the right\nis actually only three lines of code but is heavily commented to explain what\nit's doing. It makes use of a function called **`Math.abs` which returns\nthe absolute value of a number.** Feel free to use this or another method\nof converting `movementX` and `movementY` into a radius.\\r\n\\r\n<details>\n<summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\\r\n`Math.abs`\ntakes a number as input and returns the positive version of this number. \\r\n\\r\nIn\nmath, absolute value is often written with this | | symbol. So |10| is the\nabsolute value of ten and |-10| is the absolute value of negative ten. Both\nevaluate to 10.\\r\n\\r\nIn Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)`\nand `Math.abs(10)` both evaluate to <strong>10</strong>.\\r\n</details> <br>\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Write a function like the one above** that accepts two\nparameters (one each for `movementX` and `movementY`) and returns a radius.\nA higher speed should lead to a smaller radius.\\r\n* **Inside your `mousemove`\nevent handler,** set the radius of the circle to the value returned by your\nfunction, where the function takes `event.movementX` and `event.movementY`\nas input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22\nPM.png)\\r\n* Run your program and confirm that **when you draw, the speed\nof the mouse affects the radius of the dots**. The effect should look something\nlike what's below \\r\n\\r\n![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)"
      CSPU5_U3 - Canvas - redrawOriginal_markdown_instruction: "# Redraw Original\\r\n\\r\nIf\nyou were able to get that working and understand what you did, congratulations!\nThat was some serious programming! If not, take a moment to go back and talk\nthrough the different components with a classmate. Most of the work we'll\nbe doing for the rest of this lesson uses similar patterns, and you'll want\nto be comfortable with them as we add more complexity to our app.\\r\n\\r\nThe\nfirst thing we are going to do is **create an \"Original\" button that will\nredraw the image with the same circle radius you used before**. The process\nwill be nearly identical to how you added the \"Random\" button.\\r\n\\r\nIn\nfact, the code to redraw the original is *exactly* the same, except instead\nof making the radius of the circle be random, it will just be the fixed value\nyou used originally (probably radius 5 or so).\\r\n\\r\n![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif\"\nstyle=\"width: 200px; float: right\">\\r\n(**NOTE:** The instructions below\nare shown in the code animation above.)\\r\n\\r\n* Style a button, give it label\nlike \"Original,\" give it a meaningful ID, and add a \"click\" event handler.\\r\n*\nInside the event handler for your \"Original\" button...\\r\n\\t* Copy the code\nfrom the \"Random\" button event handler.\\r\n    * Paste it inside the event\nhandler for the \"Original\" button.\\r\n\\t* Set the `radius` parameter to\n**whatever value you used when you originally drew dots**.\\r\n* Test your\nprogram by drawing a figure and then hitting your \"Randomize\" button. Then\nhit the \"Original\" button. Your original drawing should appear."
      CSPU5_U3 - Canvas - redrawRandom_markdown_instruction: "# Redraw Random - Part\n1\\r\n\\r\nThe next effect we are going to create is **\"random.\"** We will\nbe redrawing the image but with randomly sized dots.\\r\n\\r\nWe'll be doing\nthis in two steps. For now, all you need to do is **change the first button\nin the row to have the proper styling and attach a click event handler to\nit**. **In addition, clear the canvas from inside the event handler** so we\nare ready to redraw our new image.  We don't want to delete all the items\nfrom the array though, as we will use them to redraw. Once you've done that,\nmove on to the next exercise where we'll write the actual code in our event\nhandler.\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05\nPM.png\" style=\"width: 200px; float: right\">\\r\n\\r\n* In Design Mode, **pick\na button to use for Random. Set the styling and text of the button**. The\nimage below shows one possible option, but you can style it however you like.\\r\n\\r\n*\nGive your button **a descriptive ID**.\\r\n\\r\n* **Add a click event handler**\nto your button.\\r\n\\r\n* **Call `clearCanvas`** from inside the event handler\nso the canvas is ready for the redraw."
      CSPU5_U3 - Canvas - redrawRandom2_markdown_instruction: "# Redraw Random -\nPart 2\\r\n\\r\nNow we're ready to write the code for our \"Random\" effect.\nTo do this, we will be clearing the canvas and then processing the array `eventList`\nto redraw all the dots with a random radius. \\r\n\\r\nYou already set up the\nclear canvas, so next we'll need to process our array in order to find out\nthe event information for each dot. You'll need to create a `for` loop that\niterates through every index in `eventList` (recall the `length` command).\nWithin your loop, you will be drawing dots referencing items stored in the\narray. \\r\n\\r\nAs you write this code, remember that **you can treat an individual\nelement of an array exactly like the kind of data it stores**. Inside a `for`\nloop, the event at index `i` can be accessed with the notation `eventList[i]`\nand the `offsetX` of that event can be accessed with `eventList[i].offsetX`.\nAgain, you are essentially treating the array element as if it were the data\nit contains.\\r\n\\r\n![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n(**NOTE:** Everything listed\nbelow is shown in code animation above.)\\r\n\\r\n**Inside the \"Random\" button\nevent handler...**\\r\n* **Add a `for` loop** that runs `i` from 0 up to `eventList.length`\nto process over the array.\\r\n* **Add a `circle`** command inside your loop.\\r\n*\n**Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and\n`eventList[i].offsetY`, respectively.\\r\n* **Set the `radius` parameter**\nto some `randomNumber`. Pick any range you like. You can always change it\nlater.\\r\n* **Test your program** by drawing a figure and then hitting your\n\"Randomize\" button. It should be the same drawing, but now with randomly\nsized dots!"
      CSPU5_U3 - Canvas - shiftKey_markdown_instruction: "# Draw When a Key is Pressed\\r\n\\r\nThis\napp now lets the user draw, but they have no control of whether the pen is\nup or down. Let's give the user the ability to **choose when to put down\nthe pen**. We won't even need to add a new event handler to our app! \\r\n\\r\nYou\nmay have noticed that the **`event` parameter includes information about whether\ncertain keys were pressed when the event fired**. They are stored in variables\nwith names like `shiftKey` or `altKey` and are stored as boolean values (true\n/ false). We are going to use the `shiftKey` variable to decide when we should\ndraw circles. \\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif\"\nstyle=\"float:right\">\\r\n\\r\n* **Add an `if` statement inside your event\nhandler function** where the condition is based on the value stored in `event.shiftKey`:\n**If `shiftKey` is true, then draw the circle.** <img src=\"https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32\nPM.png\" width=\"200\">\\r\n\\r\n* You might want to **decrease the radius of\nyour circle** (for example to 5).\\r\n\\r\n* **Run the program and confirm that\ndots are only drawn when the shift key is pressed.**\\r\n\\t* The effect should\nbe that the user can pick up and put down the pen to draw.\\r\n\\t* Hold the\nshift key down and move the mouse to draw.\\r\n\\t* Release the shift key to\nstop drawing.\\r\n\\r\n(**NOTE:** If you wish, use `console.log` to display\nthe values in `event` again. You'll see `event.shiftKey` is one of the values\nstored.)\\r\n"
      CSPU5_U3 - Canvas - sketch_markdown_instruction: "# Relative Indexes\\r\n\\r\nWhen\nlooping over an array, we use a counter variable (typically `i`) to keep track\nof which index we're at. We can then access the contents at each index with\nthe syntax `list[i]`.\\r\n\\r\nIf we want, however, we could access the contents\nof the next element as well, since its index is just one greater. For example,\nif we are currently focused on the element at index `i`, then `list[i+1]`\ngives us access to the next element in the array. In other words, you can\n**reference indexes relative to your counter variable**.\\r\n\\r\n![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\\r\n\\r\nWe\nare going to use relative indexing to create our final effect, which will\nlook sort of like an etching of the image. The idea is simple:  **for every\n(x,&nbsp;y) location in the event list, draw a straight line between that\nlocation and the location stored 10 spots further down the array.** You will\nuse the **`line` command** to draw a line connecting these points.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Read the documentation for `line`**.\\r\n* **Set the style\nof the final button** in Design Mode, give a label like \"Etch,\" give it\na descriptive ID, and attach a click event handler to it.\\r\n* **Call `clearCanvas`**\nto clear the screen.\\r\n* Create a `for` loop that counts from **0 to `eventList.length\n- 10`**. \\r\n\\t* Why do you think we're not counting over the entire array?\\r\n*\nUse `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]`\nand `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49\nPM.png)\\r\n* **Use `setStrokeColor` and/or `setStrokeWidth` inside the event\nhandler** to make the lines visible; otherwise, they will be transparent,\nsince we set the stroke color to transparent at the beginning of the program.\\r\n*\n**Run your app** and confirm that your new button creates a sketch effect,\nas shown below.\\r\n\\r\n![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)"
      CSPU5_U3 - Canvas - sprayPaint_markdown_instruction: "# Making Spray Paint\nwith Nested Loops\\r\n\\r\nIn order to make \"Spray Paint\" look more real you\nwill need to draw multiple dots randomly placed around the original x and\ny locations. In order to do this, you will place one `for` loop inside of\nanother, also known as a **nested loop**. You already have the main loop which\nvisits every index in `eventList`. The inner loop should **draw 5 circles\nwhose x and y locations use `offsetX` and `offsetY` with a small random value\nadded**.   \\r\n\\r\n# Nested Loops\\r\n\\r\n<img src=\"https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36\nPM.png\" width= 300px ; style=\"float: right\">\\r\n**When nesting loops, it\nis important that you use different variables to count your iterations**.\nLook at the example at right.  These nested loops effectively say: **\"for\nevery possible value in `eventList.length`, run a loop 5 times\".  **\\r\n\\r\nSince\n`i` is used as the counter variable in the outer loop, we need to use a *different\ncounter variable for the inner `for` loop*, or things will go haywire. Why?\n**If both loops used `i` as a counter variable, the inner loop would keep\nchanging `i` and the outer loop wouldn't count properly.** The example uses\n`j` as the inner loop variable, but you could use anything that's *not* `i`.\\r\n\\r\n<img\nsrc=\"https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n(**Note:** Steps shown in animation\nabove.)\\r\n\\r\n* **Add a `for` loop inside the existing `for` loop** in the\nspray paint event handler. \\r\n* **Change the counter variable** to something\nother than `i` for the inner `for` loop.\\r\n* **Change the boolean condition**\nso the inner loop will run **5 times.**\\r\n* **Move the circle** code inside\nboth `for` loops.\\r\n* **Run your app** and confirm that your new button creates\na spray paint effect, as shown below."
      CSPU5_U3 - Canvas - transparentDots_markdown_instruction: "# Changing Colors\nin Canvas\\r\n\\r\nWe would like to make our dots transparent so that we can\nsee when they are drawn on top of each other. To set the color and transparency\nof shapes you draw on your canvas, you need to change both the **stroke**\nor outline color and the **fill** color. The functions `setStrokeColor` and\n`setFillColor` can be used to set those colors. \\r\n\\r\nThese functions **accept\nstrings of the form `\"rgba(100, 200, 100, 0.5)\"` as input**. The first three\nvalues in the string are RGB values and the last value is the transparency,\nas represented by a decimal number between 0 and 1.0.  All together it looks\nlike this:\\r\n\\r\n![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\\r\n<img\nsrc=\"https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n# Do This:\\r\n\\r\n**Before the\nloop: ** \\r\n* **Add a `setStrokeColor` command** to set the stroke to **fully\ntransparent**.\\r\n* **Add a `setFillColor` command** to set your dots to full\nblack and mostly transparent **(try a value of 0.2)**."
      CSPU5_U3 - Canvas - usingOffsetXY_markdown_instruction: "# The Event Parameter\nfor Mouse Events\\r\n\\r\nWe'd like to change the app so that when the user\nclicks on the canvas we draw a circle right where they clicked. To do that,\nwe need to learn more about the **parameter passed by our event handler function,\nwhich by default is called `event`**.\\r\n\\r\nRecall that when we wanted to\nknow what key the user pressed on a `keyPress` event, we checked the value\nstored in `event.key`. **The event parameter actually stores a great deal\nmore information about each event**. \\r\n\\r\nWhen using the mouse, the event\nparameter carries information like the location of the mouse, how fast it's\nmoving, and some other things as well. \\r\n\\r\nLet's get acquainted with\nthe event parameter and what we can find out about the mouse.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* Add a `console.log` command inside the function of your event\nhandler. Use it to display the `event` parameter.\\r\n* Run your program and\nclick your canvas. **The full contents of the `event` parameter should be\ndisplayed in the console**. \\r\n* **Which values do you think hold the x and\ny coordinates**?  What else is there?\\r\n* We won't use all of these, but\nit's interesting to see just how much is available.\\r\n* Once you have experimented\na little, move to the next level.\\r\n![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30\nAM.png)\\r\n"
      CSPU5_U3 - Conditional Basics - 6_markdown_instruction: "# What happens after\nan *if* ?\\r\n\\r\nYou may have noticed that our flowchart for our game so far\nonly does something if the condition is true. What happens after the `if`\nstatement? Let's find out.\\r\n\\r\n<img src=\"https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png\"\nstyle=\"width: 200px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a `setText` after\nthe `if` statement** to \"Nope. Guess again.\"\\r\n\\r\n<img src=\"https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n* **Run the program** a couple times to **look\nfor a bug**. We will fix this on the next level."
      CSPU5_U3 - Conditionals - Combine AND OR Simple_markdown_instruction: "# Combining\nAND and OR\\r\n\\r\nYou can express more complex conditions by combining **AND**\nand **OR** in one statement.  Here is the example from the previous page which\nyou can use as a reference. This statement will evaluate to **true** if the\nday is Tuesday or Thursday AND their age is 15 or 16.\\r\n\\r\n![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\\r\n\\r\n#  Do\nThis:\\r\nWe've provided you with starting code that prompts the user to enter\na **day** and their **age** and stores the result in variables.\\r\n\\r\n**Add\nan `if` statement that uses both AND and OR operators**\\r\n\\r\n * The app\nshould write \"Sleep in!\" if it's a weekend and the user is a teenager.\\r\n\n* Otherwise it should write \"Uh oh. Have to wake up.\"\\r\n \\r\n\\r\nTry it\nout!\\r\n"
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_markdown_instruction: "# Combining\nAND and OR and NOT\\r\n\\r\nYou can stick a NOT (`!`) in front of any boolean\nexpression to invert its result. This opens the door to express the same logical\nstatements in different ways.  \\r\n\\r\nFor example, let's say you want to\ndetermine if a person, based on his or her age (under 12 or over 65) gets\nto pay a reduced price for a movie ticket.  You might express that like this:\\r\n\\r\n```\\r\n//\nIf your age is less than 12 or greater than 65\\r\nif( (age < 12) || (age >\n65) ){\\r\n\\twrite(\"You qualify for a reduced price!\");\\r\n}\\r\n```\\r\n\\r\nBut\nyou might also figure out a way to determine if a person gets a reduced price\nticket by determining if his or her age is between 12 and 65 (`(age >= 12)\n&& (age <= 65)`) and then taking the inverse of that.  So using the NOT operator\nthis would work as well:\\r\n\\r\n```\\r\n// If your age is NOT between 12 and\n65\\r\nif( !( (age >= 12) && (age <= 65) ) ){\\r\n\\twrite(\"You qualify for\na reduced price!\");\\r\n}\\r\n```\\r\n\\r\n**Why use one over the other?** Personal\npreference.  Use the one that makes the most sense to you, but it should be\na clear expression of what you are trying to say.  \\r\n\\r\n\\r\n# Do This:\\r\nWe've\nprovided you with starting code that prompts the user to enter a **day** and\ntheir **age** and store it in variables.\\r\n\\r\n**Add an `if` statement that\nuses both AND and OR operators**\\r\n\\r\n * The app should write \"Time for\nschool!\" if it's a weekday and the user is under 18.\\r\n \\t* Hint: one way\nto say that it's a weekday is to say that it's NOT a weekend.\\r\n * Otherwise,\nif it's a weekday and the user is 18 or older, it should write \"Time to\ngo to work!\"\\r\n * Otherwise, it should write \"Time to relax for the weekend!\"\\r\n\n\\r\n \\r\n**WARNING** logic can get tricky sometimes.  Make sure to test your\nprogram with inputs that cover every possibility. There are 4 basic cases\nto test for:\\r\n\\r\n * It is a weekday and age is under 18\\r\n * It is a weekday\nand age is not under 18\\r\n * It's not a weekday and age is under 18\\r\n\n* It's not a weekday and age is not under 18\\r\n\\r\nTry it out!"
      CSPU5_U3 - Conditionals - Simple AND_markdown_instruction: "# AND Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nAgain you will see the\nJavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You\ncan drag them out or simply type them.\\r\n\\r\nLet's now try out using an\n**AND** operator. As a reminder: **if both statements are true** then AND\nevaluates to **true**.  **If either (or both) are false** the AND operator\nwill evaluate to **false**.\\r\n\\r\n<img src=\"https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n# Do This:\\r\nWe've provided\nyou with starting code that prompts the user to enter their **age** and stores\nit in a variable.\\r\n\\r\n**Add an `if` statement with a Boolean expression\nthat uses an AND operator (`&&`)** to express:\\r\n\\r\n * IF *the age is between\n13 and 19* write \"You are a teenager.\"\\r\n * ELSE write \"You are not a\nteenager.\"\\r\n"
      CSPU5_U3 - Conditionals - Simple OR_markdown_instruction: "# OR Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nYou will now see the\nJavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You\ncan drag them out or simply type them.\\r\n\\r\nLet's try OR right now.  As\na reminder: the OR operator will evaluate to true if *either or both* statements\nare true. If both are false, the OR operator will evaluate to false. \\r\n\\r\n<img\nsrc=\"https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png\"\nstyle=\"width: 200px; float:right\"> \\r\n\\r\n\\r\n# Do This:\\r\nWe've provided\nyou with starting code that prompts the user to enter a day of the week and\nstores it in a variable.\\r\n\\r\n**Add the boolean expression to the if-statement\nto use an OR (`||`)** to express:\\r\n\\r\n * IF *it's Saturday or Sunday*\nthen write **\"It's the weekend!\"** \\r\n * Else write **\"Can't wait for\nthe weekend to get here.\"**"
      CSPU5_U3 - Design Mode - Console Log_markdown_instruction: "# Updating IDs\nand Debugging with Console Log\\r\n\\r\nIn the last level you tested out the\nnew command: `console.log`.  In this level we have a couple buttons with event\nhandlers and `console.log` statements, but they are switched around!\\r\n\\r\nWe\nshould have given the buttons better ID names so we could tell the difference\nbased on the ID. **Can you update the ID names and `console.log` messages\nto match the correct button? **\\r\n\\r\n# Do This\\r\n\\r\n* **Change the IDs**\nof the buttons in Design Mode to more descriptive names.\\r\n\\r\n* Switch to\nCode Mode and notice that the **ID pulldowns have been updated to include\nthe new IDs**. (You still need to select the correct ID from the pulldown\nmenu.)\\r\n\\r\n* **Update the `console.log` messages** to match the buttons.\\r\n"
      CSPU5_U3 - Design Mode - Layers and Delete_markdown_instruction: "# Layering\nand Deleting\\r\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"\nstyle=\"width: 150px; float: right\">User interface elements can overlap one\nanother, so you'll want the ability to change the order or **depth** at which\neach one is rendered. \\r\n\\r\nIf you **scroll to the bottom of the Properties\ntab** you'll find buttons which allow you to easily **delete or change the\ndepth** of an element.\\r\n* **Delete an Element** by selecting it (clicking\non it) in the design view and then clicking **Delete** in the properties tab.\\r\n*\n**Change the depth** of elements by using the double or single arrows.\\r\n\n* Click the double arrow to send all the way to front or back.\\r\n * Click\nthe single arrow to move up or down one layer.\\r\n    \\r\n# Do This:\\r\n\\r\nUse\nthe **delete** and **depth** tools to **create the \"After\" image**\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n\\t<th\nstyle=\"text-align:center\">Before</th>\\r\n    <th style=\"text-align:center\">After</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td\nalign=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"\nstyle=\"width:200px ; border: solid 1px black\"></td>\\r\n    <td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"\nstyle=\"width:200px; border: solid 1px black\"></td>\\r\n</tr>\\r\n</table>"
      CSPU5_U3 - Design Mode - Multi Screens 2_markdown_instruction: "# Switching\nScreens\\r\n\\r\nIn the last level you made two screens, a black one and a white\none. However when you ran the app you probably noticed that you had no way\nto see the second screen. Let's fix that.\\r\n\\r\nIn order to switch between\nscreens we have added a new command: `setScreen`. Read the documentation to\nfigure out how this command works.\\r\n\\r\n<img src=\"https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n**Goal:** Make a 2 screen app\nwhich can switch back and forth between a black screen and a white screen\nusing buttons.\\r\n\\r\n# Do This:\\r\n\\r\n* **Put a button on each screen**.  \\r\n\\r\n*\n**Set up event handlers** for each of your buttons. \\r\n\\r\n* **Use the `setScreen`\nblock to switch screens** when the buttons are clicked.\\r\n\\r\n* Test out\nyour app to make sure you can switch back and forth between the two screens."
      CSPU5_U3 - Design Mode - Multi Screens_markdown_instruction: "# Second Screen\\r\n\\r\nUp\nuntil now our apps have only been able to have one view. With Design Mode\nwe can now make multiple screens and switch between them!\\r\n\\r\n**Goal:**\nMake a 2 screen app with a black screen and a white screen. \\r\n\\r\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n# Do This:\\r\n\\r\nSwitch to Design\nMode and **add a second screen**. There are two ways to add a second screen:\n\\r\n\\r\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39\nPM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen\ndropdown menu at the top right of the app window. You should now have two\nscreens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07\nPM.png\" style=\"width: 75px\"> \\r\n* From the screen dropdown menu at the\ntop right of the app window click *New Screen*. \\r\n\\r\nMake screen1 white\nand screen2 black. **Set the background color for a screen in the Properties\ntab**.  Make sure to rename the screens with appropriate IDs."
      CSPU5_U3 - Design Mode - WTF Console Log_markdown_instruction: "# Console Log\\r\nIn\nthe last level, we saw a new command: `console.log`. You may have noticed\nthat it prints out text in the Debug Console below the code workspace.\\r\n\\r\n<img\nsrc=\"https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33\nPM.png\" style=\"width: 450px; border: solid 1px black\"> \\r\n\\r\nThe Debug\nConsole is an important tool for programmers.  You've seen it display error\nmessages, but you can also send messages that a user cannot see to the Debug\nConsole while a program is running. <img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\"\nstyle=\"width: 250px; float: right; border: solid 1px black\"> The Debug Console\nis really helpful for debugging programs because you can send messages to\nyourself from within your own code!\\r\n\\r\nYou can find `console.log` in the\ncode toolbox under the Variables tab.\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out\n3 `console.log` commands into the workspace.\\r\n\\r\n* Update each `console.log`\nwith your own messages.\\r\n\\r\n* Run the program a couple times to test out\nthis new command."
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction: "# Improved\nChaser Game\\r\n\\r\nNow lets improve the \"Chaser Game\".  This is where you\nget to use your creativity. Make it look nice!\\r\n\\r\nIn addition you will\nnotice a new command in the toolbox: `playsound`! Read the documentation about\nhow to add sounds.\\r\n\\r\n**Note:** Your code from before has been provided\nfor you.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create a Welcome Screen** that explains\nthe rules of the game. Include a \"Start Game\" button.\\r\n\\r\n* Update the\nyour code so that the **image jumps to a new location when it is clicked**.\n\\r\n\\r\n* **Play a sound** each time the image is clicked.\\r\n\\r\n* **Add\na Game Over Screen** with a lose message and button to start over. The Start\nOver Button should direct back to the Welcome Screen.\\r\n\\r\n* **Make the\nuser lose**, by sending them to the Game Over Screen, when the background\nis clicked.\\r\n\\r\n\\r\n"
      CSPU5_U3 - Design Mode 1_markdown_instruction: "<img src=\"https://images.code.org/5e6fa5738796d69775c0786ca9b4a076-image-1476735925167.png\"\nstyle=\"float: right\">\\r\n# Design Mode\\r\n\\r\n**You Try it:** Add a large\nred button to your app using Design Mode.\\r\n\\r\n* Switch to Design Mode\\r\n*\nDrag a button onto the app screen\\r\n* Change the text to say \"Click Me!\"\\r\n*\nMake the color of the button red.\\r\n\\r\n\\r\n"
      CSPU5_U3 - Dice - Dropdown and Score_markdown_instruction: "# Adding Guess\nand Score to Dice Game\\r\n\\r\nLet's have the user guess the number that will\ncome up when we roll a single die. \\r\n\\r\nYou can have multiple `if` statements,\none after another, if they have different purposes which are separate. \\r\n\\r\n**\nNote: ** Use the flowchart below to help you figure out the logic of the game.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add a dropdown** to take in the user's guess from 1 to\n6.\\r\n\\r\n* **Add a set of `if` statements to check if the dice roll number\nis equal to the user guess.** Put this set of `if` statements after your set\nof `if` statements for the dice image. It should be completely separate from\nthe other set of `if` statements. \\r\n\\r\n* Create a variable to **keep track\nof score**. Give 10 points if they guess right and take one point away when\nthey guess wrong.\\r\n\\r\n* **Display the score** on the screen and update\nit after each dice roll.\\r\n\\r\n<img src=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3 - Dice - Dropdown with Strings_markdown_instruction: "# Adding Difficulty\nLevels: Dropdowns with Strings\\r\n\\r\nLet's add another element to our dice\ngame: **difficulty levels**. The user will pick either \"Easy\" or \"Hard.\"  These\nare strings so you might be wondering how to check for equality. **The `==`\nworks on strings as well!** It checks if the first string is exactly the same\nas the second string. **Strings must be the same letters and even have the\nsame case to be equal**! So \"dog\" and \"Dog\" would not be equal. \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add a dropdown** for difficulty level with the options\nof \"Easy\" or \"Hard.\" \\r\n\\r\n* **Create an `if` statement for difficulty\nlevel** which prints the difficulty level to the console.\\r\n\\r\n<img src=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3 - Dice - If_markdown_instruction: "# Using `if` to Display Images\\r\n\\r\nWe\nare going to set up a dice game. We want to show a picture of a single die\nfor each random number generated 1 to 6. We've already set up the screen\nin Design Mode, with a button to generate the roll and an image to show a\npicture of the die.\\r\n\\r\n**Note:** The flowchart for the desired behavior\nis below.\\r\n\\r\n# Do This:\\r\n\\r\n* Add an event handler for the Roll! button\nso that when the button is clicked it generates a random number from 1 to\n6. \\r\n\\r\n* Add conditionals (`if`, `else if`, and `else`) to change the\npicture of the image (ID: `dice_image`) to display the correct side of the\ndie depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\"\nstyle=\"width:150px\"> with the URLs below to set the images for the die.\\r\n\\t*\n<img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice\n1 Image URL -  https://code.org/images/dice/1.png\\r\n    * <img src=\"https://code.org/images/dice/2.png\"\nstyle=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\\r\n    *\n<img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice\n3 Image URL - https://code.org/images/dice/3.png\\r\n    * <img src=\"https://code.org/images/dice/4.png\"\nstyle=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\\r\n    *\n<img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice\n5 Image URL - https://code.org/images/dice/5.png\\r\n    * <img src=\"https://code.org/images/dice/6.png\"\nstyle=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\\r\n\\r\n<img\nsrc=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>\\r\n"
      CSPU5_U3 - Dice - Nested_markdown_instruction: "# Nested *if* Statements\\r\n\\r\n<img\nsrc=\"https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Let's change the\nscoring of the game to match the difficulty level.** \\r\n\\r\nNew scoring rules:\\r\n*\n_Easy: +10 points right answer / -1 point for wrong answer_\\r\n* _Hard: +1\npoint right answer / -1 point for wrong answer_\\r\n\\r\nHow do we check _both_\nthe difficulty level and if the user's guess was correct? **We can actually\nput `if` statements inside of other `if` statements!** So we first want to\ncheck what the difficulty level is and then check if the user was right or\nwrong to determine the score.\\r\n\\r\n** Note: ** The flowchart below outlines\nthe logic you are trying to implement.\\r\n\\r\n# Do This:\\r\n\\r\n* Move a copy\nof the score `if` statement inside of the difficulty levels. Be careful with\nindenting. All of the `if` statements for score need to be inside of the difficulty\n`if` statement (i.e. indented 1 level more than the difficulty `if` statement)\\r\n\\r\n<img\nsrc=\"https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n\\r\n* Edit the `if` statements to give the\ncorrect scores\\r\n\\t* Easy level (+10 right, -1 wrong)\\r\n    * Hard level\n(+1 right, -1 wrong)\\r\n\\r\n<img src=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3 - High Low - Debug_markdown_instruction: "# Debug Conditionals\\r\n\\r\n\"Help!\nI was trying to give the player a hint when their guess was within 2 of the\nsecret number but the code I wrote isn't working. **Can you fix it?**\"\\r\n\\r\nThis\npicture shows what the message should be based on the difference between the\nsecret number and the player's guess:\\r\n\\r\n![](https://images.code.org/8b6e60db87e3c704ae5209c8c608f5d5-image-1481691055804.png)\\r\n\\r\n*\nRun the code to identify when the program is not working correctly (try guessing\nnumbers 1-6)\\r\n* Fix the problem with the order of the conditionals.\\r\n\\r\n**Hint:**\n\\r\n* The major problem here is that **conditional statements run in order\nfrom top to bottom**. \\r\n* Remember you have to check the smallest/most narrow\ncase first, and work up from there.\\r\n* The conditions might be slightly\nnon-intuitive at first glance.\\r\n* If you want to re-arrange the conditions\nit might be easier if you **switch to text mode**\\r\n\\r\n<details><summary>Check\nout the flow chart for the logic I wanted. [Click to Expand]</summary>\\r\n\\r\n<a\nhref=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\"\ntarget=\"_blank\">\\r\n<img src=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\"\nstyle=\"width: 350px;\">\\r\nClick image to open larger in a new tab</a>\\r\n</details>\\r\n\\r\n"
      CSPU5_U3 - High Low - Dropdown_markdown_instruction: "# Dropdown\\r\n\\r\nOn\nthe last level we used `promptNum` to get the user's guess. However, we had\nno way to limit them to the numbers we wanted. They could have typed 11 even\nthough we told them not to. A better way to get input with a limited set of\noptions is the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23\nPM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control\nthe list of options users can choose and then use `getText` to get the chosen\nnumber.\\r\n\\r\nWe are going to need an event handler in order to do this.\nThe event handler will detect when the user has changed the value of the dropdown.\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a dropdown** for their guess instead of\n`promptNum`. Make sure to give it a good ID.\\r\n\\r\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Under properties **find the Options** and\nchange it to the **numbers 1 to 10**\\r\n\\r\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\"\nstyle=\"width: 250px\">\\r\n\\r\n* Add an event handler to detect the `change`\nevent on your dropdown.<br><br>\\r\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\"\nstyle=\"width: 150px; float: right\">\\r\n* Move your `if` statement inside\nthe event handler so it will check each time the dropdown is changed.<br><br>\\r\n*\nWhen the dropdown is changed **use `getText` to find out the user's guess**.\nSave the guess using a variable. **Don't forget about scope!**<br><br>\\r\n*\nTest your app -- it should work like the demo."
      CSPU5_U3 - High Low - Else if_markdown_instruction: "# Guess the Secret Number\nwith *else-if*\\r\n\\r\nIn this guess-the-number game, the starting code tells\nthe user whether they were right or wrong.  Let's help the user out even\nmore by telling them if they guessed correctly or if their guess was too high\nor too low. \\r\n\\r\nThere are **only 3 possible cases:**\\r\n\\r\n* They were\nright.\\r\n* Their guess was higher than the number.\\r\n* Their guess was lower\nthan the number.\\r\n\\r\nUse a conditional with and `if`, `else-if`, and a\nfinal `else` to implement this.\\r\n\\r\n**Remember:**  You can create an `else-if`\nstatement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first\n<img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> will add an `else`, the second will add an\n`else-if`.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an `else-if` statement to\naccommodate the 3 conditions.**\\r\n\\r\n* **Update the conditions** using `<`,\n`>`, and `==` to tell the user if their guess was correct, high, or low.\\r\n\\r\n*\n**Test out the program** to make sure your updates worked.\\r\n\\r\n<details><summary>Visual\nExplanation [Click to expand]</summary>\\r\n<li>Sometimes it's helpful to\nsee how the program should flow with a flow chart.  The flow chart below depicts\nwhat should happen </li>\\r\n\\r\n<img src=\"https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png\"\nstyle=\"width: 500px\">\\r\n</details>"
      CSPU5_U3 - High Low - Else_markdown_instruction: "# *else*\\r\n\\r\n<img src=\"https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\nLet's add an `else`\nstatement so we can tell the user when they are right and when they are wrong.\\r\n\\r\n**Note:**  You\ncan create an `else` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> at the bottom of an `if` statement.  There\nis also an `if-else` block in the toolbox. \\r\n\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add an `else` statement**\\r\n\\r\n* **Move your `setText` inside the `else`\nstatement.** So it should say \"Nope that's not it. Guess again.\" when the\nuser does not guess the secret number."
      CSPU5_U3 - High Low - If_markdown_instruction: "# *if* Statement\\r\n\\r\n<img\nsrc=\"https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nThe boolean expression\nwe tested on the last level allows us to make decisions. In order to make\nthese decisions we need to use something called a conditional. **Conditionals\ncheck if a boolean expression is true and then will execute the code inside\nof the `if` statement.** \\r\n\\r\n<img src=\"https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\nOver the number couple levels\nwe are going to be creating a **Guess My Number game**. The starter code uses\n`promptNum` to ask the user for a number from 1 to 10. The `if` statement\nchecks if the user guess is equal to the secret number.  Right now nothing\nhappens when they guess the right number. Can you fix that?\\r\n\\r\n# Do This:\\r\n\\r\n*\nRead the code to identify the boolean expression.\\r\n* Add a text label to\nthe screen. Have it start out with \"Guess my secret number!\"\\r\n* **Set\nthe text label to say \"You got it right!\" from inside the `if` statement**.\nThis will tell them they get it right only when that condition is true!\\r\n*\n**Test your code out** to make sure it works.\\r\n\\r\n<img src=\"https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif\"\nstyle=\"width: 350px\">"
      CSPU5_U3 - Keys - Add Image URLs_markdown_instruction: "# Adding Image URLs\\r\n\\r\nWe're\nready to start improving the \"My Favorite Things\" app. \\r\n\\r\nWe'll do\nthis in two steps:\\r\n1. We will change it from scrolling text to scrolling\nimages.\\r\n2. We will add key events to scroll with the keyboard.\\r\n\\r\n**Step\n1:**\\r\n* The default values in your array should be image URLs.\\r\n* The\nlarge **text area** needs to be changed to an **image**.\\r\n* Instead of **setting\nthe text**, you'll now be using `setImageURL` to set the URL of the image.\\r\n\\r\n#\nDo This:\\r\n**NOTE: We've re-loaded the code from the \"My Favorite Things\"\nApp you wrote in the previous lesson.** (If you want to refer to code you\njust wrote, you can go back to look at it.)\\r\n\\r\n* **Set the default values**\nin your array to be image URLs. (You might need to take a minute to go collect\na few if you didn't in preparation for this lesson.)\\r\n* In Design Mode\n**delete the text area** and replace it with an **image**. Make sure your\nimage has a descriptive and meaningful ID.\\r\n* Inside your function that\nupdates the display **replace `setText` with `setImageURL`**. Make sure you\nreference your new image element **by its correct ID**.<br>\\r\n<img src=\"https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif\"\nstyle=\"width: 350px\">\\r\n* ** Test your app** to confirm that it's now\nshowing the images in your array."
      CSPU5_U3 - Keys - Buttons and Keys_markdown_instruction: "# Buttons and Keys\\r\n\\r\nWe\nnow know how to respond to key events, but often we want the user to be able\nto **do the same thing with the app in multiple ways**. For example, we might\nwant the app to exhibit the same behavior if the user clicks a button on the\nscreen or a key on the keyboard. (This is how so-called \"keyboard shortcuts\"\nwork.)\\r\n\\r\nIn the program you're about to see, we've provided event handlers\nfor some buttons on the screen. You're going to **create identical functionality**\nfor the key events.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add conditional statements\ninside the `keydown` event handler** to check for when the **up and down arrows**\nare pressed.\\r\n<img src=\"https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* ** Copy the code for the `upImage` button**,\nand paste into the up arrow `if` statement.\\r\n![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\\r\n\\r\n*\n** Copy the code for the down button**, and paste it into the down arrow `if`\nstatement.\\r\n\\r\n* Confirm your app **responds to key events** by running\nit.  For example, clicking the image of the up arrow in the app should do\nthe same thing as hitting the up arrow on the keyboard.\\r\n\\r\n"
      CSPU5_U3 - Keys - Demo App_markdown_instruction: "# Making our App an Image\nScroller\\r\n\\r\nOver the course of this lesson we are going to be working\ntowards improving our \"My Favorite Things\" app to add some new features.\nOur improved app will be able to:\\r\n\\r\n* Respond to **key events**.\\r\n*\n**Display images** by storing their URLs.\\r\n\\r\nWe'll call this new kind\nof app an **image scroller** but feel free to call it anything you like.\\r\n\\r\n#\nDo This:\\r\n\\r\n* Close these instructions.\\r\n* **Experiment with the improved\n\"My Favorite Things\" app** to understand the new features we'll be adding.  \\r\n*\nMake sure you try clicking the **left and right arrow keys!**\\r\n\\r\nOnce\nyou think you've experimented enough, continue on to the next level."
      CSPU5_U3 - Keys - Final Image Scroller_markdown_instruction: "# Final Image\nScroller\\r\n\\r\nYou're now ready to add key event functionality to your app!\nAs you are doing so, keep an eye out for places where you need to **refactor**\nold code in order to prevent redundancy. **Create functions** that carry out\nrepeated tasks and make other changes to keep your code **readable and consistent**.\n\\r\n\\r\nIf you want a reminder of how key events work, you can always go back\nto the example from earlier in this lesson.  You will need to add `if` statements\nto check for which keys were pressed, just as before.\\r\n\\r\n# Do This:\\r\n\\r\n*\nAdd the ability to respond to **key events** to your app.\\r\n\\r\n* **Refactor\nyour old code** to remove redundant portions.\\r\n\\r\n* Keeping adding to your\nprogram. What other features do you want to include?"
      CSPU5_U3 - Keys - Functions_markdown_instruction: "# Refactoring Code\\r\n\\r\nOn\nthe last level, we copied a few lines of code to a different part of our program.\n**Hopefully warning bells went off in your head!** Any time you are copying\nportions of code from one area of your program to another, it's a good indication\nthat you should write a function to capture that behavior in one place. \\r\n\\r\nWhen\nyou add new features to your code **you will often create redundancies**.\nTo keep your code readable and consistent, you may need to rewrite old pieces\nof code. This process of restructuring existing code without changing its\nexternal behavior is called **refactoring**. It is an important process when\ndeveloping software that improves code readability and reduces complexity.\nAs a result, code is much easier to maintain.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create\na function called `doUpArrow`**. \\r\n* Move the code from the `upArrow` event\nhandler to the function.\\r\n* **Call `doUpArrow`** from both your button and\nkey event handlers. (The animation below shows the steps above.)\\r\n* Repeat\nthe same process for the down arrow / button by creating a function called\n`doDownArrow`.\\r\n* Once you have **removed these redundancies from your code**\ntest your app to make sure it still works!\\r\n\\r\n![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)"
      CSPU5_U3 - Keys - Key Up and Down_markdown_instruction: "# Using *keyup* and\n*keydown*\\r\n\\r\nOn the last level, we played with the `keypress` event. Let's\ntake a look at some of the other key events. \\r\n\\r\nYou are going to get\nthe chance to play with `keyup` and `keydown` in this level. **Pay attention\nto the different values of `event.key` for `keydown` and `keypress`. **\\r\n\\r\n#\nDo This:\\r\n\\r\n* Switch to the event type to `keydown` or `keyup`. \\r\n\\r\n<img\nsrc=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Try out the event.\\r\n\\t* Press and hold\na key\\r\n    * Try the arrow keys\\r\n    * Shift\\r\n    * Option\\r\n    *\nAlt\\r\n    * Others"
      CSPU5_U3 - Keys - Multiple Keys_markdown_instruction: "# Multiple Keys\\r\n\\r\nIf\nyou want your program to respond differently to a couple different keys, you\nwill need to use chained conditional statements (`if` and `else-if`). \\r\n\\r\nLet's\nset up the program to **play a different sound for the down key.**\\r\n\\r\n#\nDo This:\\r\n**We've added another sound** to the app, but it's just sitting\nat the top of the code.\\r\n\\r\n* Add an `else-if` statement to check if the\n**down arrow** was pressed.\\r\n\\r\n<img src=\"https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Move the `playSound` command from the top\nof the program inside the `else-if`. (Notice that in the example, we switch\nto block mode to move this line because it's easier to move blocks around\nthat way. You can just copy/paste the text too.)\\r\n\\r\n<img src=\"https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* **Test the program:** it should play one\nsound when the **up** arrow is pressed and a different sound if the **down**\narrow is pressed.  It shouldn't make any sound if any other keys are pressed.\n"
      CSPU5_U3 - Loops -  Complex Condition_markdown_instruction: "# Expressing Stopping\nConditions: \"Until Loops\"\\r\nIt is often more natural to think about looping\nin terms of when the loop should end rather than when it should continue.\nFor example you might say \"keep going down the road until you see the gas\nstation\" or \"keep calling until you get through to someone.\" You might\nthink of these as \"until loops\" rather than \"while loops,\" since we want\nthe loop to continue **until a condition is true rather than while a condition\nis true**.\\r\n\\r\n**There is no \"until loop\" in JavaScript** but it is actually\nquite easy to translate \"until loops\" into `while` loops so that you can\nuse them in programs. An \"until loop\" runs *until* a condition is true,\nas opposed to a while loop which runs *as long as* a condition is true.  That\nmeans an until loop is the logical inverse of a while loop - it runs as long\nas the **condition is false**. The table below shows how you can use the **NOT**\n( `!` ) operator to translate stopping conditions into `while` loop conditions.\\r\n\\r\n|\nExpressed as Stopping | Expressed as Until Loop | Expressed as While Loop\n|\\r\n| --- | --- | --- |\\r\n| **Stop** once you reach the gas station | Keep\ngoing **until** you reach the gas station | Keep going **while** you have\n**NOT** reached the gas station|\\r\n| **Stop** calling when you get through\nto someone | Keep calling **until** you get through to someone | Keep calling\n**while** you have **NOT** gotten through to someone|\\r\n| **Stop** when `x\n== y` | `until(x == y){...` | `while(!(x == y)){...`|\\r\n<br>\\r\nNote how\nwe can use the **NOT** operation to find the **logical inverse** (or opposite)\nof the condition from our \"until loop\" to create a `while` loop. Let's\ndo a little practice of that now.\\r\n\\r\n# Do This:\\r\n\\r\n**Starter code**\nis provided that repeatedly rolls two dice and writes their values to the\nscreen. **Careful: ** before you edit this code it creates an infinite loop.\\r\n\\r\n*\nUse the technique above to **modify this code** so that the loop **stops when\nboth dice are 5 or greater**.\\r\n* **Try it out and experiment.** You should\nexit the loop the first time both dice have values greater than or equal to\n5 displayed.\\r\n\\r\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59\nPM.png)"
      CSPU5_U3 - Loops - 1_markdown_instruction: "# *while* Loops\\r\n\\r\n<img src=\"https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\n **The `while` loop\nuses a boolean condition to repeatedly run a block of code.**  It checks the\nexpression, and if it is true it runs the block of code contained within it.\nThis process of checking the condition and running the block of code is repeated\nas long as the boolean condition remains true. **Once the boolean expression\nbecomes false it will stop.**\\r\n\\r\nWe are going to start exploring a `while`\nloop by **modifying the condition on which a `while` loop runs and using `console.log`\nto ensure it is correctly evaluating its condition**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** is provided which creates a `while` loop that repeatedly\nmoves the turtle around the screen.\\r\n* **Add a `console.log` command** inside\nthe loop after `num` is assigned a random number. This way you can see the\nvalue the loop is based on.\\r\n![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\\r\n*\n**Run the program a couple times** and look at the results.\\r\n* **Change\nthe condition for the `while` loop** to check if the variable **`num` is less\nthan 90**. Your output might look like the example below.\\r\n\\r\n![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17\nAM.png)"
      CSPU5_U3 - Loops - 10_markdown_instruction: "# Writing a Loop From English\\r\n\\r\nAlright\nit’s your turn. Can you translate the English into code? This problem also\ninvolves an \"until loop\" problem.\\r\n# Do This:\\r\n\\r\nTake this statement\nin English and translate it into code: \\r\n\\r\n**“Write a program that simulates\nthe rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is\neither a 7 OR an 11.\"**  Your program should display the results of each\nroll.  \\r\n\\r\n**NOTE**: this one is a *little* tricky.  Hint: In English\nwe sometimes say \"or\" when in cold hard logic we mean \"and\".\\r\n\\r\nHere\nis a sample output:\\r\n\\r\n![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)"
      CSPU5_U3 - Loops - 11_markdown_instruction: "# Debugging: Complex Logic\\r\n\\r\nIn\nthis challenge you need to find and fix a bug in a program that simulates\nrolling one die.  \\r\n\\r\nThe given code accidentally loops infinitely, so\nsomething must be wrong with the condition. Can you figure out how to fix\nit?\\r\n\\r\n# Do This:\\r\n\\r\n* **Fix the condition** so that it keeps rolling\nthe die as long as the value is **not a 2 or a 3.**\\r\n\\r\n* **Hint:** Think\nabout other ways you can express this idea in English. \\r\n\\r\n"
      CSPU5_U3 - Loops - 12_markdown_instruction: "# Repeat Specific Number of Times\\r\n\\r\nInstead\nof writing code that makes the loop run a random number of times, we can control\nthe `while` loop by changing the variable used in the boolean expression differently.\nLet’s try just printing a string 5 times.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter\nCode:** Right now the code prints a string \"Hi\" twice.\\r\n* **Change the\ncode** so that it prints the string \"Hi\" 5 times.\\r\n* **Notice** how `count`\nis being re-assigned each time through the loop."
      CSPU5_U3 - Loops - 14_markdown_instruction: "# Defensive Loop Conditions\\r\n\\r\nTake\na look at the starting code. Instead of counting by 3's we had decided to\ncount by 4's. \\r\n\\r\nBut this will run us into a problem. Can you see why?\\r\n\\r\nWe\nwanted to stop counting at 30, but when you count by 4 you will actually never\nhit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop\nwhen the number is **greater than 30**. This is an important defensive programming\nstrategy. Make the condition catch more cases than you think you need so that\nif for some reason something does not go exactly as you planned it will hit\nthe stop condition and not go infinitely.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Change\nthe loop condition** to prevent the infinite loop and stop counting once the\ncount is past 30."
      CSPU5_U3 - Loops - 15_markdown_instruction: "# Using an *if* Statement In a\nLoop\\r\n\\r\nA common thing to do is to use variables to keep track of some\nsort of count.  When used in a loop we count things very quickly.\\r\n\\r\n**Scenario:**\\r\nIf\nyou roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If\nyou were to roll a pair of dice 1,000 times, on average, how many times would\nit come up as 12?\\r\n\\r\nTo figure this out, we could write code to run an\nexperiment. It would go something like this:\\r\n* Make a loop that simulates\nrolling a pair of dice 1,000 times.\\r\n* Inside the loop, add an `if` statement:\n**if die1 + die2 == 12, then add 1 to a counter**.\\r\n* After the loop, display\nthe result.\\r\n\\r\n# Do This:\\r\nThe **starter code** sets up the whole experiment\nfor you, except it doesn't count the number of 12's rolled - that's your\njob.\\r\n\\r\n* **Run the code** to see what the experiment does.\\r\n\\r\n* **\nAdd an `if` statement inside the loop** to check if the sum of the dice is\nequal to 12, and add 1 to `twelveCount`.\\r\n\\r\n*  Once the loop has completed,\n**display the number of times the sum was 12.**\\r\n\\r\n**Note:** If you remove\n(or comment out) the `console.log` statement that displays every roll of the\ndice, the experiment will speed up A LOT!  You could do tens of thousands\nof dice rolls in a matter of seconds."
      CSPU5_U3 - Loops - 2_markdown_instruction: "# Infinite *while* Loops\\r\n\\r\n`while`\nloops run until their condition becomes false, which raises an interesting\nquestion.  **What happens if the condition never becomes false**? In these\ncases the program enters what is called an **infinite loop** over the commands\nin the `while` loop, and it never reaches the rest of your program. **We normally\navoid infinite loops in our programs**, but let's try it out to see what\nhappens.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** is provided which creates\na `while` loop to move the turtle around the screen.\\r\n* **Change the `while`\nloop condition to something that will always be true.** The easiest way to\ndo this is to change 50 to be a number that randomNumber will never generate\nsuch as 200. \\r\n* **Run the program.** Notice that it will never stop running.\nYou may even get an error from your browser.\\r\n* **Hit reset to stop it.**\nYour computer may actually stop running as you expect if you let an infinite\nloop run for too long. **It's possible you may even need to close the browser\nwindow and reload the page. If you hit reset early enough you can usually\navoid this problem.**\\r\n* **Find a condition using `<` or `>` that will also\ncause an infinite loop.**"
      CSPU5_U3 - Loops - 3_markdown_instruction: "# Changing *if* to *while*\\r\n\\r\n**\nHow many times would we have to roll a die before it comes up as a 6?** In\nthe program you're about to see, we **simulate rolling a die (generating\na random number between 1 and 6)** in order to answer this question.\\r\n\\r\n#\nDo This:\\r\n\\r\n** Starter code** is provided which re-rolls a die once if\nthe first roll is not a 6. \\r\n* **Change the `if` statement to a `while`\nloop** so the program will keep rolling the die **while the current roll is\nnot a 6.** \\r\n\\t* **Hint:** The easiest way to do this is to change the text\nfrom `if` to `while`.\\r\n<img src=\"https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif\"\nstyle=\"width: 350px; border: solid 1px black \">\\r\n* Run the program to\ntest out the change.\\r\n"
      CSPU5_U3 - Loops - 4_markdown_instruction: "# Debug Commands\\r\n\\r\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34\nAM.png\" style=\"width: 200px; float: right\">\\r\n\\r\nCheck out the new **Debug\nCommands toolbox** that has appeared next to the Debug Console! These powerful\ntools allow us to **pause a program at a certain point** while it’s running\nand then execute lines one at a time. \\r\n\\r\nUsing these tools we can investigate\nthe state of variables and other elements of the program at any point, mid-execution.\nThis makes it much easier to see what’s happening while the programming is\nactually running!\\r\n\\r\nIn order to use the debug commands, you first have\nto indicate which line you want the program to pause at.  This is called adding\na “breakpoint” (see animation below).\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a breakpoint**\non the line where the `while` loop starts. (**Just click the line number.**)\\r\n*\n**Use the <img src=\"https://images.code.org/eb07da547abe4afcd745f3bb44102fdf-image-1490808274422.24.13\nPM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\\r\n*\nEach time you hit the breakpoint, **use the console to check value of `num`**.\n\\r\n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48\nAM.png\" style=\"width: 75px\"> it will \"continue\" executing the program\nnormally, unless of course it hits another breakpoint. \\r\n\\r\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)"
      CSPU5_U3 - Loops - 5_markdown_instruction: "# Update Condition\\r\n\\r\nIn order\nfor a `while` loop to stop at some point, the code inside the loop **must\nchange something about the state of the program** - usually the value of a\nvariable - so that eventually the boolean expression becomes false.  Otherwise\nyou'd have an infinite loop!\\r\n\\r\n# Do This:\\r\n**Starter Code:** The starter\ncode runs an infinite loop. \\r\n* **Run the code** to see the problem in action.\nRemember to hit the reset button to stop the infinite loop.\\r\n* **Add code\ninside the `while` loop** which will **update the variable `num` so that the\ncondition will eventually become false.**\\r\n* **TIP:** you can use the debugging\ntools if you think they would be helpful."
      CSPU5_U3 - Loops - 6_markdown_instruction: "# Starting Condition\\r\n\\r\nWe\nhave seen that loops can run infinitely. On the last level we saw that there\nis also the **chance that the loop never runs at all!** If the condition of\nthe `while` loop starts out false then the loop will never run.\\r\n\\r\nWe\nfixed this problem in the last exercise by displaying the value of `num` in\ntwo places: before the loop and in the loop. Duplicating code is generally\na bad strategy, so the question is: can we be a little clever and get into\nthe loop without missing any values?  The answer is yes.\\r\n\\r\n**The solution**\nis to initialize the values used in our boolean expression so that we are\n**certain** it will evaluate to true the first time the loop checks it.  **For\nexample, if your loop condition is: `while (num != 6)` you could initialize\n`num` to anything other than 6 and you'd know that you get into the loop**.  \\r\n\\r\nIf\nyou use this technique though...\\r\n1. You need to make sure you set the value\nof `num` right away inside the loop.\\r\n2. You probably want to use a nonsense\nvalue like -1, so that if you ever see that displayed it will be obvious something\nis wrong and be easier to debug.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code**\nis provided which creates a `while` loop that never runs.\\r\n* **Run the program**\nonce to see that the loop is never entered.\\r\n* **Fix** the problem by changing\nthe initial value of `num` to a nonsense value such as -1."
      CSPU5_U3 - Loops - 7_markdown_instruction: "# Printing After Setting Value\\r\n\\r\nWe\nstarted trying to remove the duplicate code we had on the last level by initializing\na variable to a nonsense, or \"dummy,\" value that would still ensure we entered\nthe loop. \\r\n\\r\nIn the code provided, not every number is going to display.\nHowever, this time we want to try **not to add code** to fix the problem,\nsince duplicate code is inefficient. \\r\n\\r\n# Do This:\\r\n\\r\n* **Starter\nCode:** The code is completely functional except that it does not print one\nof the numbers it's supposed to. In addition we don't want it to print the\ndummy variable of -1.** Hint: ** What should be the last number that prints\nevery time this program runs?\\r\n\\r\n* Run the program to see the behavior.\\r\n\\r\n*\nFix the code so that it prints all the values of `num`. **Hint:** You don't\nneed to add any code. Just switch the order of the code you have now!"
      CSPU5_U3 - Loops - 8_markdown_instruction: "# Printing Before the Loop Starts\\r\n\\r\nSometimes\nour code will be doing the right thing but we won't be able to tell because\nof the way we are printing values. We need to make sure we print all the values\nwe are interested in. \\r\n\\r\nThis program *should* write all the values of\n`num` to the screen as it runs; however it misses one - the first one generated.  \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program** a few times and notice that sometimes\nit just prints \"Done.\" and nothing else, even though a number was generated.\nThe first value of `num` never gets displayed.\\r\n* **Add a `write` statement**\nbefore the loop to print the first number. \\r\n* **Hint:** Look at the two\ntimes `num` is assigned a value. Which one isn't being displayed? "
      CSPU5_U3 - Loops - 9_markdown_instruction: "# Boolean Operators in *while*\nLoops\\r\n\\r\nWe can create compound boolean expressions to control our `while`\nloops just like our `if` statements. Let's try using boolean operators in\nour `while` loop condition.\\r\n\\r\n# Do This:\\r\n\\r\n* Right now this code\nrolls two dice as long as either one of them is less than 3.  **Modify the\ncondition so that it keeps rolling as long as *both* are less than 3.**\\r\n\\r\n*\n**HINT:** To say that both dice are less than 3 the boolean expression must\nsay: if die1 less-than 3 AND die2 less-than 3...\\r\n"
      CSPU5_U3 - Loops - Minus Minus_markdown_instruction: "# *++* Has a Friend!  Introducing\n*--*\\r\n\\r\nAs you may have guessed, just as we can write `count = count +\n1` as `count++` we can also write `count = count - 1` as `count--`.\\r\n\\r\nLet’s\nwrite a program that counts **down** from 10 down to 1. \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter Code: ** The current program counts **up** from 1 to 10. \\r\n\\r\n*\n**Change the code to use `count--` to count *down* from 10 to 1.** You will\nneed to:\\r\n\\t* Change the looping condition.\\r\n    * Change `count++` to\n`count--`.\\r\n    * Change the initial value assigned to `count`.\\r\n"
      CSPU5_U3 - Loops - Plus Plus_markdown_instruction: "# *++* Operator\\r\n\\r\nAs\nprogrammers we are always looking for more concise ways to write code. It\nis so common to add 1 to a variable such as in `count = count + 1` that there\nis actually a shorthand for it. \\r\n\\r\n# Introducing the *++* Operator\\r\n\\r\nYou\ncan write `count++` to add 1 to `count`. `count++` does the exact same thing\nas `count = count + 1`! \\r\n\\r\nIn fact the computer turns `count++` into\n`count = count + 1` behind the scenes - it really is just a convenient shorthand.\\r\n\\r\n**Note:**\nThis is more of a programmer style choice so if you want to write your code\nusing `count = count + 1` instead there is nothing wrong with that!\\r\n\\r\n#\nDo This:\\r\n\\r\n* Change the code to use `count++` instead of `count = count\n+ 1`. (You'll need to be in text mode to do this.)\\r\n\\r\n** Misconception\nAlert:** You don't need to write `count = count++` - the computer is doing\nthe assignment for you."
      CSPU5_U3 - Loops - Typing in Console_markdown_instruction: "# Debug Console:\nVariable Values\\r\n\\r\nUp until now, if we wanted to find out the value of\na variable at some point in the execution of a program, we've used `console.log`.\nThat is still going to be a great strategy but **the Debug Console can do\neven more for us!**\\r\n\\r\n**Check this out:** We can check the value of a\nvariable in real time (as our program executes) by typing its name into the\nprompt within the Debug Console and hitting \"enter\". **This is another powerful\ntool for debugging your programs.** \\r\n\\r\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program.**\\r\n\\r\n* Use the Debug Console to **check\nthe ending value of `num`**. You can do this by typing num in the Debug Console\nand hitting enter!"
      CSPU5_U3 - Loops - minus = operator_markdown_instruction: "# Try Out the *-=*\nOperator\\r\n\\r\nThe `-=` operator works almost identically to `+=`, but instead\nit subtracts the value provided from the variable. Let's use this operator\nto **create a loop that counts down from 30 by 3's**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Change the code to use `-=`** to count from *down* from 30 to 0 by 3's."
      CSPU5_U3 - Loops - plus and minus = operator_markdown_instruction: "# Introducing\n*+=* and *-=* Operators\\r\n\\r\nSometimes you want to add or subtract something\n*other than 1* from the current value of a variable. If you wanted to add\nor subtract 3 for example, such as: `count = count + 3` or `count = count\n- 3`, `++` and `--` wouldn’t help. \\r\n\\r\nIt turns out this is pretty common\nas well so there is actually a shorthand version of `count = count + 3`. \\r\n\\r\n**Introducing\n`+=`  and `-=`**!\\r\n\\r\nWe can use the `+=` or `-=` operator to add or subtract\nany value we want to the current value of a variable. \\r\n\\r\nSo, the shorthand\nversions of `count = count + 3` and `count = count - 3` would be:\\r\n * `count\n+= 3` \\r\n * `count -= 3`\\r\n\\r\n**Notice** that these 3 statements: `count\n= count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\\r\n\\r\nWhich\none you use as a programmer is your choice, and in the future you can use\neither version, but try out the new operator here.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Change the code to use `count += 3`** instead of `count = count + 3` so\nthe program will still count up by 3. (You'll need to be in text mode to\ndo this.) \\r\n\\r\n(You'll get to try out `-=` on the next level.)"
      CSPU5_U3 - Loops And Arrays - Add 5_markdown_instruction: "# Updating Values\nin an Array with a *for* Loop\\r\n\\r\nThe `for` loop you set up on the last\nlevel is actually so common that we will rarely deviate from this `for` loop\nsetup.\\r\n\\r\n<img src=\"https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50\nAM.png\">\\r\n\\r\nThis `for` loop basically means **\"for every possible index\nin `myArray`...\"** and we use it as a basic building block for processing\narrays. Common array-processing techniques like searching for a value, updating\nall values, or calculating simple stats on an array will all be completed\nusing a `for` loop written with the syntax above.\\r\n\\r\nIn fact, we're going\nto see that happen right now as we **use a `for` loop to add 5 to every value\nin an array**.\\r\n\\r\n# Do This:\\r\n**Starter code** has been provided that\ncreates an array of random values. You are also given a `for` loop that loops\nover every index in the array.\\r\n\\r\n* Add code inside the loop to **add\n5 to the value at every location in the array**. \\r\n\\t* ** Remember: ** `myArray[i]`\nrefers to the element in the array at the current value of `i`.\\r\n* Confirm\nyour code works by **displaying the values in your array before and after\nyour loop**. Below is a sample result.  Notice how, after the array has been\nprocessed, all of the values are 5 greater than the originals.\\r\n\\r\n![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41\nPM.png)"
      CSPU5_U3 - Loops And Arrays - Counting Times_markdown_instruction: "# Counting\nOccurrences of a Value\\r\n\\r\nInstead of displaying a true/false value for\n*every* item in the list, let's compute one value and display it.  A common\nthing to want to do is **count** the number of times a value occurs.  We can\ndo this with a very small change to the code we've already got. \\r\n\\r\n#\nDo This:\\r\n**Starter Code** is similar to past levels.  We've also created\na variable called `fiveCount`.\\r\n\\r\n* ** Add an `if` statement** inside\nthe `for` loop to **increment `fiveCount` if the value is equal to 5. **\\r\n\n(Note: this will be exactly the same as the `if` statement you wrote in the\nprevious level. Just giving you more practice).\\r\n\\r\n* **Run and re-run\nyour code** to make sure that it's accurately counting the number of 5's\nin the array. Since the array is getting a random set of values every time\nyou run the program, you might have to run it a bunch of times to thoroughly\ntest it. Make sure you get it to run at least once when no 5's appear in\nthe array.\\r\n\\r\n* Finally, if you'd like to, **change the first loop in\nthe program to add 100 items to the array** instead of 10. Your code should\nstill work to count the number of 5's, no matter how big the original array\nis!"
      CSPU5_U3 - Loops And Arrays - Divid by 2_markdown_instruction: "# Divide by\n2\\r\n\\r\nIn the last exercise, you updated every element in an array using\na `for` loop. Let's get a little bit more practice with the pattern you used\nin the last exercise, this time creating the loop yourself.\\r\n\\r\n# Do This:\\r\n**Starter\ncode** is provided which creates an array of random values.\\r\n\\r\n* Create\na `for` loop that **iterates over every index in the array**.\\r\n\\r\n* Within\nyour loop, add code that **divides each value in the array by 2**.\\r\n\\r\n*\nUse the provided `console.log` statements to **confirm your program runs as\nexpected**. Below is an example of the expected outcome.\\r\n![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21\nPM.png)"
      CSPU5_U3 - Loops And Arrays - Find Min_markdown_instruction: "# Reusing a Function\nPattern: Find Minimum\\r\n\\r\n**Nice work! You've just written a function\nthat implements an algorithm to process an array!** If you feel comfortable\nwith the basic pattern you used to create this function, you can quickly create\nfunctions for many other useful algorithms that work on arrays.\\r\n\\r\n**Basic\nFunction Pattern**\\r\n\\r\n* Create a **function that accepts an array** as\ninput.\\r\n* **Create a \"flag\" variable** and set its default value before\nlooping through the array.\\r\n* Loop through your array with a `for` loop\nthat **visits every index in the array**.\\r\n* **Update your flag** as necessary\nwith every iteration of your loop.\\r\n* **Display your flag** at the end of\nthe loop.\\r\n\\r\nLet's use this pattern to **write a function that finds\nand displays the smallest value in an array**.\\r\n\\r\nInstead of using a true/false\nflag to indicate whether we found a value, **we'll use a variable to keep\ntrack of the smallest value we've seen in the array so far**.\\r\n\\r\n# Do\nThis:\\r\n\\r\n**Starter code** has been provided which outlines and calls `findMinVal`\nwith different inputs. Your job will be to finish writing the function.\\r\n\\r\n*\nBefore programming, try to **develop an algorithm that you could use to find\nthe minimum value in an array**. Use the pattern outlined above as a guide.\\r\n*\n**Write code** in the places indicated with comments to complete the function.  \\r\n\\t*\nYou'll want to use the `minVal` variable to keep track of the smallest value\nyou've found so far.\\r\n    * You'll need to **write an `if` statement**\nthat checks whether the current value in the array is less than `minVal`.\nIf it is, then update the smallest value.     \\r\n* **Run the code** to ensure\nit is working as you intend.\\r\n\\r\n<details><summary><strong>HINT: pseudocode</strong>\n[click to expand]</summary>\\r\n<p>\\r\nHere is some pseduocode that you should\nbe able to implement.\\r\n</p>\\r\n<pre>\\r\nminVal = first value in array \\r\nfor\nEACH value IN array\\r\n  if value < minVal\\r\n     minVal = value\\r\n\\r\ndisplay(minVal)\\r\n</pre>\\r\n</details>\\r\n\\r\n\\r\n![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03\nPM.png)"
      CSPU5_U3 - Loops And Arrays - General Search Param_markdown_instruction: "#\nGeneral Search\\r\n\\r\nIn order to make a general search function, we should\nbe able to **search for any value, not just 5**.  We can do this by making\nthe value to search for a parameter as well.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add\na second parameter** to your `search` function to represent the item to search\nfor. This example uses the name `searchValue`.\\r\n\\r\n* **Update the code\ninside the function to check for `searchValue` instead of 5.** \\r\n\\r\n* **Call\nyour search function** to search for different values inside of each array.\\r\n\\r\n*\nThe `console.log` statement **is now inaccurate**. Change it to say \"Array\nhas searchValue: \" followed by the value in flag.\\r\n\\r\n(These steps are\nshown in the code animation below.)\\r\n\\r\n![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)"
      CSPU5_U3 - Loops And Arrays - Intro For Loop_markdown_instruction: "# *for*\nLoop\\r\n\\r\nIt's very common to want to repeat a set of commands a particular\nnumber of times. Recently, we have been using the `while` loop to do this\nby creating a counting variable, setting the boolean expression, and incrementing\nthe value of the counter by 1 each time. We've also used the `for` loop before,\nand we'll explain it more in-depth now.  The `for` loop was created to wrap\nall of those components related to counting loops into a single line of code.\\r\n\\r\n<img\nsrc=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\"\nstyle=\"width: 450px\">\\r\n\\r\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\"\nstyle=\"width: 450px\">\\r\n\\r\nProgrammers would typically read a loop `for\n(var i = 0; i < 10; i++)` out like this: <br>\\r\n**\"for variable i starting\nat 0, while i is less than 10, i plus plus (or increment i by 1)\"**\\r\n\\r\nNotice\nthat in reading a `for` loop we still use the word \"while\".\\r\n\\r\nYou may\nnotice that when you drag a `for` loop out from the toolbox that we've set\nit up for you with `i` as the variable. \\r\n\\r\n<details> \\r\n<summary>**Why\nis `i` the variable?** [click to expand]</summary>  \\r\n\\r\nUsing the single\ncharacter `i` as the variable in a `for` loop has become a convention in programming\nfor a variety of reasons. One reason is that `for` loops are often used when\nprocessing arrays - **you can think of `i` as shorthand for index. **   But\nthere is no reason why you have to use `i` if you don't want to.  It's just\na variable.  \\r\n</details>\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out the `for`\nloop.\\r\n\\r\n* Insert a `console.log` statement inside the `for` loop that\ndisplays `i`.\\r\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\\r\n\\r\n*\nTry changing:\\r\n\\t* The condition to stop the loop (make it run longer).\\r\n    *\nThe amount you change `i` by each time (try changing `i++` to something like\n`i += 5`).\\r\n    * The starting value of `i`.\\r\n\\r\n"
      CSPU5_U3 - Loops And Arrays - Linear Search_markdown_instruction: "# Algorithms\nand General-Purpose Functions\\r\n\\r\nOver the next several exercises we will\nbe **creating a general-purpose function to determine if a value is contained\nwithin an array**.  Over the course of these exercises, keep an eye out for\nthe general pattern we are using, because you'll get to use it again to create\nfunctions of your own.\\r\n\\r\nTo begin, we'll start simple. We'll write\ncode that **checks whether an array contains a specific value**. At every\nindex, your program should display \"true\" if the value at that index is\na 5 and \"false\" otherwise.\\r\n\\r\n# Do This:\\r\nThe **starter code** is\nsimilar to past levels, but you'll notice that we use a loop to construct\n`myArray` rather than appending items one line at a time.  You are also given\nthe `for` loop you will use.\\r\n\\r\n* Add an `if` statement inside the `for`\nloop to check if the value of the array at the current index is 5. \\r\n *\nIf the value is equal to 5, write **true** to the console. Otherwise write\n**false** to the console.\\r\n* **Test your code** to make sure it is working\nas you intend. An example output is below.\\r\n\\r\n![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45\nPM.png)"
      CSPU5_U3 - Loops And Arrays - Loop Array If_markdown_instruction: "# *for*\nLoop with *if*\\r\n\\r\nSometimes we want to find values in an array that meet\ncertain conditions.  We can add an **`if` statement inside the `for` loop**\nto individually check every value within the array. To practice this, we will\ncreate a `for` loop that will **display every value in the array greater than\n5**.\\r\n\\r\n# Do This:\\r\n** Starter code** has been been provided that creates\nan array of random values.\\r\n\\r\n* Add a `for` loop that references every\nindex in the array.\\r\n\\r\n* Add an `if` statement inside the `for` loop that\n**displays every value in the array greater than 5** using `console.log`\\r\n\\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\\r\n    \\r\n*\n**Note:** Because the original array is being constructed with random values\nit's *possible* that it might not have any values greater than 5.  Just run\nthe program a few times to make sure it works.  An example of the possible\noutput is below.\\r\n\\r\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26\nPM.png)"
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction: "#\nGeneralize *search* by Making It Into a Function - Part 2\\r\n\\r\nRight now,\nour function just searches for a 5 in a global array called `testArray`.  We\nwould like to be able to **use this function to search through any array**,\nso we will be adding a parameter to allow us to specify which array should\nbe searched.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a parameter to the `search`\nfunction called `list`**.\\r\n* **Modify the code inside the function** so\nthat it loops over `list` (the parameter) instead of `testArray` (the global\nvariable).\\r\n* **Call your function** with each of the arrays provided at\nthe top of the program.\\r\n\\r\n(These steps are shown in the code animation\nbelow.)\\r\n\\r\n![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)"
      CSPU5_U3 - Loops And Arrays - Make it a Function_markdown_instruction: "# Generalize\n*search* by Making It Into a Function\\r\n\\r\nYou've just written code to\nsearch for a value in a list!  If we could generalize this behavior, it might\nbe useful to us in the future - it's probably something that we want to do\nover and over again.  \\r\n\\r\nOver the next few levels, we'll build up a\nvery useful, general function for searching for *any* value in *any* list.  But\nwe'll do it one step at a time...\\r\n\\r\n# Do This:\\r\n\\r\n**Note:** We've\nprovided **new starter code** that implements the pseudocode from the last\nexercise. It also **creates two more arrays** that we'll be using later for\ntesting.  For this level just worry about `testArray`. \\r\n\\r\n* **Run the\nstarter** code to verify that it works correctly.\\r\n* **Create a new function**.\nName the function `search`.\\r\n* **Move the code that checks for a 5 inside\nthe function.** **Note:** You must move the boolean variable inside the function\nas well, or it won't reset each time you call the function!\\r\n* **Call the\nfunction** to make sure your code still works.  The actual behavior will be\nthe same as when you ran it the first time.  The difference now is that you're\ncalling a function to do it.\\r\n\\r\n(Steps are shown in code animation below.)\\r\n\\r\n![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)"
      CSPU5_U3 - Loops And Arrays - Print Array_markdown_instruction: "# Print an\nArray with a *for* Loop\\r\n\\r\nAs you know, we can use variables as indexes\nin an array.  We can take advantage of this fact to create a `for` **loop\nwhich visits every index in an array**.\\r\n\\r\n![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01\nPM.png)\\r\n\\r\nIn this `for` loop, the `i` eventually gets set to every possible\nindex in the array. You are going to use a loop of this kind to display all\nthe values in an array.\\r\n\\r\n# Do This:\\r\n**Starter code** is provided\nthat adds several random values to an array.\\r\n\\r\n* Create a `for` loop\nthat uses the syntax shown below (and above) to **iterate through every index\nin the array**.\\r\n\\t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\\r\n    \\r\n*\nUse `console.log` to **display the contents of the array at each index**.\\r\n\\t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\\r\n    \\r\n*\nRun the program to **confirm it is displaying all the values**.\\r\n"
      CSPU5_U3 - Loops And Arrays - Printing Single True_markdown_instruction: "#\nPrint a Single True/False Value\\r\n\\r\nSometimes we don't care about the\ncount and just want to know if the array contains a 5 or not. **Let's try\nto display a single true/false indicating whether the list contains a 5.**\nThere are two cases to consider: \\r\n\\r\n1. The list **does not contain any\n5's**; you need to display **\"false\"**.  \\r\n2. The list **contains at\nleast one 5**; you need to display **\"true\"**.\\r\n\\r\n**HINT:** one way\nto do this is to reference your counter variable `fiveCount` after the array\nhas been processed.\\r\n\\r\n# Do This:\\r\n**We've pulled your code from the\nprevious level so you can continue to add to it**.\\r\n\\r\n* Add a **`console.log`\nstatement to display a single \"true\" or \"false\"** indicating whether there\nis a 5 anywhere in the array.\\r\n\\r\n| Example output 1: One or more 5's\n| Example output 2: No 5's |\\r\n| --- | --- |\\r\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31\nPM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46\nPM.png)|"
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction: "#\nUsing a Boolean Variable as a Flag\\r\n\\r\nWe are going to do a **challenge\nthat is similar to the last exercise** but, rather than counting the number\nof 5's in the array, we're going to use a different **interesting programming\ntechnique for processing arrays** that might prove useful to you in the future.\n\\r\n\\r\n# Using a Boolean Flag\\r\n\\r\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\"\nstyle=\"float: right; width: 250px\">\\r\nThe technique is generally referred\nto as **using a boolean \"flag.\"** To understand this idea, think about how\nsome mailboxes work: the flag starts down, and when a person wants to let\nthe mail carrier know there is something to pick up, she puts the flag up\nto notify the mail carrier that there is outgoing mail in the box.\\r\n\\r\nWe\ncan use a variable to do something similar when programming. Rather than incrementing\na count every time we find a 5 in the array, we will use a variable that acts\nlike a **flag**.  We will create a variable before the loop and assign it\n`false` to start (flag is down). Then, as we process the array, if we find\na 5, set the variable to `true` (put the flag up).  \\r\n\\r\nHere is some pseudocode:\\r\n```\\r\nvar\nflag = FALSE\\r\nFOR EACH item IN list\\r\n  IF (item EQUALS 5)\\r\n    flag\n= TRUE\\r\n    \\r\nDISPLAY (flag)\\r\n```\\r\nNotice that it doesn't matter\nif we find more than one 5.  It will just keep setting the flag to `true`.  However,\nif there are no 5's, the `if` statement in the loop will never execute, and\nso the variable will remain the value it was initialized to, which was `false`.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Implement the pseudocode above** in JavaScript. \\r\n*\nWe've given you code that constructs an array of random values, and the standard\n`for` loop for looping over an array.\\r\n* The output will be no different\nfrom the previous exercise, but you should still **confirm that your program\ncorrectly identifies when a 5 is in the array.**\\r\n\\r\n| One or more 5's\n| No 5's |\\r\n| --- | --- |\\r\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31\nPM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46\nPM.png)|\\r\n\\r\n"
      CSPU5_U3 - Movie Bot - Multiple If Sequences_markdown_instruction: "# Adding\nRating to Keywords\\r\n\\r\nUp until now our movie suggestions have just been\nbased on genre. Let's now also look for keywords related to the movie rating\nlike \"G\", \"PG\", \"PG-13\", and \"R\" so we can give movie suggestions\nbased on both genre and rating.\\r\n \\r\n**Note: ** We've updated the flowchart\nbelow (highlighted in yellow) to see the logic we are trying to add.\\r\n\\r\n**Note\n2: ** The logic of the program right now will yield some odd results - there\nare some things you can type that will give 2 suggestions - this is expected,\nfor now.  We are just taking a small step here.  We'll refine the code again\nin later levels.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add another set of `if`, `else-if`,\nand `else` statements** inside the question `if` statement to **check for\nkeywords for movie ratings (G, PG, PG-13, and R).**\\r\n\\r\n* **Hint:** When\nchecking for \"G\", \"PG\" and \"R\" you need to be a little clever.  R and\nG are letters that will show up in lots of words and PG will get confused\nwith PG-13. We want to check for \"g\" and \"r\" with spaces on either side.\nSo make sure to use `\" g \"` where there is a space on either side of g instead\nof `\"g\"`. For \"pg\" you can just add a space after the pg to look for `\"pg\n\"`\\r\n\\r\n* **Test out a couple sentences with your keywords** to make sure\nthe change worked.\\r\n\\r\n<img src=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      CSPU5_U3 - Movie Bot - Nested Motivation_markdown_instruction: "# Checking\nfor a Question\\r\n\\r\nWe're going to start adding some \"intelligence\" to\nour Movie Bot. Since we've added `includes` it can now tell if its keywords\nappear anywhere in the input. As a result some inputs may be questions while\nothers might simply be statements. **We'd like the movie bot to respond differently\nto questions and statements.**\\r\n\\r\nIn order to tell when the user is asking\na question **we will be checking whether the input includes a question mark\n**.\\r\n\\r\n# Do This:\\r\n\\r\n* Add a separate statement to **check if the\ninput includes a \"?\"**. \\r\n* If the input includes a question mark **print\n\"That's a good question.\" before the recommendation.**\\r\n* Otherwise print\n**\"I only answer questions.\" before the recommendation.**\\r\n* **Test out\na couple sentences with your keywords** to make sure the change worked.\\r\n\\r\n**Example\nInput --->** | **Output**\\r\n---|---\\r\nWhat's the best action movie? | That's\na good question. The best action movie is any James Bond movie.\\r\nI love\ncomedy | I only respond to questions. The best comedy movie is The Princess\nBride.\\r\n<br>\\r\n**Note:** Check out the flowchart below to see the logic\nwe are trying to change.\\r\n\\r\n<img src=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3 - Movie Bot - When Multiple If Statements_markdown_instruction: "#\nAdding a Separate *if*\\r\n\\r\nIt's still the case that sometimes you want\nto have two completely separate groups of `if` statements because there are\nseparate conditions you want to check and possibly have responses for both.\nYou don't always just keep adding to a giant `if` statement forever.\\r\n\\r\nIn\nthe Movie Bot demo you probably saw that if you type \"please\" and \"thank\nyou\" it adds something extra to the response (it says something like \"Thanks\nfor being polite!\"). Let's add this functionality to your movie bot as well.\n\\r\n\\r\n**Note: ** Check out the flowchart below to see the logic we are trying\nto add.\\r\n\\r\n# Do This:\\r\n\\r\n* ** Add an `if` and `else-if` statement\nthat checks for \"please\" and \"thank you\"**. \\r\n\\t* If the string includes\n\"please\" it should say \"Thank you for being so polite!\" before it gives\nits response.\\r\n    * If the string includes \"thank you\" it should say\n\"You are very welcome!\" before it gives its response.\\r\n\\r\n* **Test out\na couple sentences with your keywords** to make sure the change worked.\\r\n\\r\n<img\nsrc=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      CSPU5_U3 - Movie Bot - toLowerCase_markdown_instruction: "# Dealing with Character\nCase\\r\n\\r\nWhat if the user types **ACTION** instead of **action**? These\nare two different strings to the computer and therefore it won't recognize\nthey are the same. We want Movie Bot to treat words the same ignoring the\ncase of the letters. We can do this using the string command `toLowerCase`.\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to add. \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Try typing COMEDY, ACtioN, horroR, and Romance** into\nMovie Bot.\\r\n\\r\n* **Use the `toLowerCase` command** to change all user input\ninto lowercase letters after they enter it.\\r\n\\r\n* **Check that COMEDY,\nACtioN, horroR, and Romance generate the same recommendations** as comedy,\naction, horror, and romance.\\r\n\\r\n<img src=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3 - Practice Create Performance Task_markdown_instruction: "# Practice\nCreate Performance Task\\r\n\\r\nYou've finally made it to the end of the Programming\nUnit! We will continue some programming in the next unit, but for now we are\ngoing to use all the new concepts you have learn to create something of your\nown design! \\r\n\\r\n# Do This:\\r\n\\r\n* **Read the Project Overview** to understand\nthe entire project.\\r\n* **Follow the Project Planning Guide**.\\r\n* **Implement\nyour final program in this level**."
      CSPU5_U3 - Return Values - constrainTurtle_markdown_instruction: "# Use a Function\nthat Returns a Value in an App\\r\n\\r\nWe create functions to **contain blocks\nof code that will be used multiple times within our program**. The same is\ntrue with functions that return values. Let's see an example of how we might\nuse one of the functions we've written.\\r\n\\r\nThis exercise comes with starter\ncode that creates a **simple turtle driver app**. The x and y location of\nthe turtle are stored in the variables `xloc` and `yloc`. An event handler\nis used to update these values when the **arrow keys are pressed**, and then\na separate `updateTurtle` function is called to draw the turtle on the screen.\\r\n\\r\nCurrently\nthe turtle can drive off the screen. If we are clever about how we use our\n`constrain` function, however, we can prevent this from happening.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** is provided which allows the turtle to\nmove. Additionally a **working version of `constrain`** is provided.\\r\n*\n**Call the `constrain` function twice** within the `updateTurtle` function\nto prevent the turtle from going outside the screen.\\r\n\\t* One call to the\nfunction for `xloc` and one time for `yloc`.\\r\n    * Recall the screen is\n**320 by 450 pixels**.\\r\n* **Run your app** and confirm the turtle cannot\nleave the screen.\\r\n\\r\n![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)"
      CSPU5_U3 - Return Values - debuggingConstrain_markdown_instruction: "# Debugging\nand Multiple Return Statements: *constrain*\\r\n\\r\nWe're going to debug another\nfunction that uses multiple return statements. The function is called `constrain`\nand is used to limit an input number to a certain range. The function accepts\nthree parameters.\\r\n\\r\n* `input` : the number to be constrained.\\r\n* `low`\n: the lower bound of the range. If `input` is below this value, the function\nshould return the value of `low`.\\r\n* `high` : the upper bound of the range.\nIf `input` is above this value, the function should return the value of `high`.\\r\n\\r\n<details>\\r\n<summary>**Click\nfor sample input and output for `constrain`**</summary>\\r\n* `constrain(15,10,20)`\nshould return 15 since it is within the range of 10 to 20.\\r\n* `constrain(5,10,20)`\nshould return 10 since the input is below the range of 10 to 20.\\r\n* `constrain(25,10,20)`\nshould return 20 since the input is above the range of 10 to 20.\\r\n</details>\\r\n<br>\\r\nUnfortunately,\nbecause of the way this function was written, it does not always work as expected.\nIn particular, **because of how `return` was used, some portions of the function\nnever run**. Change the structure of the function to **use the pattern you\nhave been shown in previous exercises, included below**.\\r\n<br> <br>\\r\n**Pattern\nfor Functions that Return Values**\\r\n* Use parameters to provide input.\\r\n*\nDeclare a variable that will be used as output, possibly initializing its\nvalue.\\r\n* Update the value in your output variable throughout your program.\\r\n*\nReturn your output variable on the last line of your function.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Run the program** and identify the errors generated in the\noutput.\\r\n* **Inspect the logic of `constrain`** to identify the logical\nerrors.\\r\n* **Rewrite** `constrain` to make use of the **pattern for functions\nthat return values**, shown above.\\r\n* **Run the program** to ensure it is\nnow running as you expect.\\r\n\\r\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25\nAM.png)"
      CSPU5_U3 - Return Values - debuggingMaxVal_markdown_instruction: "# Debugging\nand Multiple Return Statements\\r\n\\r\n**Having multiple `return` statements\nin a program can lead to tricky situations**. You may use multiple return\nstatements, but it makes it easier to introduce logical errors into your program.\nWe're going to look at some examples of functions with return values that\ninclude logical errors and debug them. The goal is to **recognize common errors\nwith return values now so you can avoid them when writing your own programs**.\\r\n\\r\nThere\nis a logical error somewhere in the version of `maxVal` you are about to see\nwhich uses multiple return statements. As a result, the function works correctly\nfor some inputs but not all. You'll need to inspect the code to understand\nwhat the issue is and make changes accordingly. In particular, look closely\nfor conditions that are *not* currently handled by the program.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Run the program** and identify the errors generated in the\noutput.\\r\n* **Inspect the logic of `maxVal`** to identify the logical error.\\r\n*\n**Correct the logical error** so that the function returns the correct value\nfor all inputs."
      CSPU5_U3 - Return Values - useMinVal_markdown_instruction: "# Using Functions\nthat Return Values\\r\n\\r\nWe have used functions that return values many times\nbefore, but in this exercise you will see how they are actually created by\nusing the `return` command. The function `minVal` accepts two numbers as input\nand returns the minimum of the two as output. You can call this function just\nlike any other, and **because it returns a number, you can treat the function\ncall as if it were a number**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code**\nhas been provided that creates the function `minVal` and generates two random\nvalues.\\r\n* **Inspect the code of `minVal` to understand the logic of this\nfunction**.\\r\n* On the `console.log` line **call the function using `rand1`\nand `rand2` as parameters** and ensure the minimum value is returned. You\nshould treat the function call **as if it were a number**.\\r\n\\r\n<img src=\"https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif\"\nstyle=\"width: 550px\">\\r\n\\r\n* Check that the program generates output similar\nto the output shown below.\\r\n\\r\n<img src=\"https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49\nPM.png\" style=\"width: 350px\">\\r\n"
      CSPU5_U3 - Return Values - wrapTurtle_markdown_instruction: "# Use a Function\nthat Returns a Value in an App - Part 2\\r\n\\r\nThis time, you're going to\nwrite a function that returns a value to add functionality to the turtle driver.\nThe `updateTurtle` function now is making a call to a function called `wrap`\nthat has not been written yet. It accepts three parameters and should work\nin the following way:\\r\n\\r\n* `input`: the input value to the function. If\nit is within the range it should just be returned.\\r\n* `low`: the lower bound\nof the range. If `input` is below this value the output should be the value\nof `high`.\\r\n* `high`: the upper bound of the range. If `input` is above\nthis value the output should be the value of `low`.\\r\n\\r\nBy using this function\nyou can create the illusion that the screen \"wraps\" around, so when the\nturtle leaves the top of the screen it appears again at the bottom.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** is provided which allows the turtle to\nmove.\\r\n* The `updateTurtle` function now makes two calls to `wrap`, but\nthe function is not yet written.\\r\n* **Write the `wrap` function** so that\nit implements the logic described above.\\r\n* **Run your app** and confirm\nthe turtle now \"wraps\" when it leaves the screen.\\r\n\\r\n![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)"
      CSPU5_U3 - Return Values - writeMaxVal_markdown_instruction: "# Writing Functions\nthat Return Values\\r\n\\r\nNow you are going to write your own function that\nreturns a value, `maxVal`. This function should return the maximum of two\nvalues provided as input. The code for `minVal` is provided so that you can\n**replicate the pattern used in this function**.\\r\n\\r\n**Pattern for Functions\nthat Return Values**\\r\n* Use parameters to provide input.\\r\n* Declare a\nvariable that will be used as output, possibly initializing its value.\\r\n*\nUpdate the value in your output variable throughout your program.\\r\n* Return\nyour output variable on the last line of your function.\\r\n\\r\nYou may actually\nrecognize many similarities between how we wrote functions that process arrays\nand functions that return values. **These patterns aren't rules of programming,\nbut they help make your code easy to read and understand**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** has been provided which stubs out `maxVal` and generates\ntwo random values. `minVal` is still provided **so that you can replicate\nthe pattern used**.\\r\n* **Write `maxVal`**, replicating the pattern used\nto write `minVal`.\\r\n* **Use `maxVal` within the `console.log` statement\nas if it were a number** to generate the output similar to the one shown below.\\r\n\\r\n![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)"
      CSPU5_U3 - Simulation - 1_markdown_instruction: "# Starting Small\\r\n\\r\nTo\nstart, we're going to simulate flipping a coin 10 times. You might be thinking\nthat isn't many coin flips, and that we could just do those flips in real\nlife, but this is actually an important step in developing a simulation. At\nsmall scales we can make sure our code is working as intended because **we\ncan still visually confirm its output**. Once we're convinced that the logic\nof our program is reliable we'll move up to simulating larger numbers of\nflips.\\r\n\\r\nThe core logic of our program will be focused on **a `while`\nloop** that simulates flipping a coin by repeatedly generating **random 0's\nor 1's using `randomNumber`**. This is a great opportunity to keep practicing\nusing loops while applying your knowledge of variables, iteration, and `if`\nstatements.\\r\n\\r\n# Do This:\\r\n\\r\n* When we want to flip a coin with a\ncomputer we will instead **generate a random number between 0 and 1**.\\r\n*\nWrite a program that **uses a `while` loop** to **flip a coin 10 times** and\nwrites the value of each flip to the screen. The example below shows how your\nprogram should run.\\r\n* **HINT:** you will need to use a counter variable\nin your `while` loop to keep track of how many times the coin has been flipped.\n\\r\n\\r\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)"
      CSPU5_U3 - Simulation - 2.1_markdown_instruction: "# Changing the Loop Condition\\r\n\\r\nCurrently\nour loop condition is based on a counter variable that keeps track of the\ntotal number of flips, but our simulation should only run **while we have\nfewer than the target number of heads**. In this exercise you are going to\nchange the condition used by your `while` loop so that your **simulation terminates\nonce you have flipped 5 total heads**. At the end of the loop we will **write\nthe total number of flips** to know how many flips it took to get 5 heads.\\r\n\\r\n#\nDo This:\\r\n\\r\n* Change the looping condition to use the variable you are\nusing to keep track of the number of heads. **Your loop should run as long\nas you have fewer than 5 total heads**.\\r\n* Add code after your loop that\n**writes the total number of flips**.\\r\n* **Test your program** several times\nto make sure it works as expected. See the example below.\\r\n* **Note:** the\nsimulation is always terminating once it flips its 5th heads. Sometimes this\nmeans the text output runs off the screen. We will address this in the next\nexercise.\\r\n\\r\n![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)"
      CSPU5_U3 - Simulation - 2.5_markdown_instruction: "# 10,000 Heads!\\r\n\\r\nYou're\nready to increase the number of heads your simulation is looking for and **test\nyour first hypothesis**. Before we move up to the full 10,000 heads, however,\nwe're going to perform a quick check of our program logic.  When you make\nchanges to your program **it is possible that some portion of your programming\nlogic will stop working as you expected**. In order to feel more confident\nabout your model you will **first change the number of heads you are looking\nfor to a number that we can still visually verify (7 heads)**. If our code\nstill works after making changes then we should be confident that it should\nwork at 10,000. We will remove the intermediate output and run the full simulation!\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Increase the number of heads you are looking for to 7**\nand **visually confirm** that the code is still working as you expect.\\r\n*\nIf everything seems to be working, **comment out the `write` command that\ndisplays the results of each flip.** You can use `//` to comment out a single\nline of code. Make sure that the total count of flips still prints though!\\r\n*\n**Run your simulation and find out how long it takes to get to 10,000 heads**.\nThen run it a few more times. What patterns are you noticing? Record your\nresults and move on."
      CSPU5_U3 - Simulation - 2_markdown_instruction: "# Counting Heads\\r\n\\r\nLet's\nsay that a **1 is a heads**. If we want our simulation to run until we reach\na certain number of heads then **we will need a way to count the number of\nheads that have been flipped**. In order to do this you will need to add a\nvariable that acts **as a counter**. Initialize it to 0, and every time you\nflip a heads (1) **increment your counter by 1**. At the end of your program\nyou should write the value to the screen.\\r\n\\r\n# Do This:\\r\n\\r\n* Add a\nvariable that **counts the number of heads (1's)** and write its value to\nthe screen after each flip.\\r\n* Run your program severals times **and validate\nthat the number of heads recorded is correct** by visually checking the flips\nyou've printed to the screen.\\r\n* **Hint:** you will also need to store\nyour current coin flip in a variable to complete this challenge.\\r\n\\r\n![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)"
      CSPU5_U3 - Simulation - 3_markdown_instruction: "# Streaks of Heads\\r\n\\r\nWe\nare going to alter our simulation so that it doesn't count the total number\nof heads, but rather the longest **streaks of heads**. This will allow us\nto simulate **how many flips it takes to get 12 heads in a row**. \\r\n\\r\nTo\nbegin with you will change your looping condition so that **the loop again\nonly runs 10 times**. This will allow us to visually confirm our code is working.\\r\n\\r\n**Keeping\nTrack of Streaks:** We know we need to count streaks of heads, how do we do\nthis in code?  Do we need to keep track of all the previous flips so we know\nthat we're on a streak?\\r\n\\r\nThe answer is: **no**.  We can instead just\n**count in a clever way** that makes our code pretty simple.  Make a variable\nto use as a counter and...\\r\n\\r\n * every time you see heads, add 1 to a\ncounter.\\r\n * every time you see tails, set the counter back to 0.\\r\n\\r\nHere\nis some psuedocode showing how it works.  You might take a minute to study\nand reason about why and how it works.\\r\n\\r\n**Pseudocode**\\r\n```\\r\n//\nOuside loop\\r\nheadsCount <-- 0\\r\n\\r\n// Inside loop\\t\\r\nIF (current flip\nis a heads)\\r\n  headsCount <-- headsCount + 1\\r\nELSE\\r\n  headsCount <--\n0\\r\nDISPLAY (current flip)\\r\nDISPLAY (headsCount)\\r\n```\\r\n# Do This:\\r\n\\r\n*\nChange your `while` loop's condition so that **it only runs 10 times**.\\r\n*\nAdd code to the simulation that **displays the length of each streak of heads**\nfollowing the logic described above.  Note that pseudocode should translate\nto JavaScript pretty easily.\\r\n* The example below shows an example of what\noutput from your program might look like.\\r\n\\r\n![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07\nPM.png)"
      CSPU5_U3 - Simulation - 4_markdown_instruction: "# Changing the Loop Condition:\nStreaks of Heads\\r\n\\r\nWe want our simulation to run** while the streak of\nheads is less than a target length**. In order to do this we'll need to change\nour looping condition to use the variables we've been using to count our\nstreak of heads. To begin with **your simulation should look for a streak\nof 3 heads** so that you can still visually confirm the output.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Change the condition** used by your `while` loop so that\nit now runs **while the streak of heads is less than 3**.\\r\n* **Test your\nprogram** by running it and visually confirming that its output is correct.\nIt should run like in the example below.\\r\n* **Note:** As before it's possible\nthat your output will sometimes run off the screen. You can still confirm\nyour code is working as you intend (it should never run after a streak of\n3) and we will address this issue in the next exercise.\\r\n\\r\n![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)"
      CSPU5_U3 - Simulation - 5_markdown_instruction: "# Streaks of Heads: 12 in\na Row\\r\n\\r\nWe're almost ready to test **our second hypothesis** and find\nout how long it takes to get **12 heads in a row**. Just as before we're\nfirst going to **visually test our code with a different length streak (4)**\nbefore removing most of the visual output and running the code for a streak\nof 12.\\r\n\\r\n# Do This:\\r\n\\r\n* **Change your simulation to run until you\nget a streak of 4** and visually verify that the values calculated are accurate.\\r\n*\n**Comment out** the lines of code that write the current coin flip and the\ncurrent streak count. You can use `//` to comment out a single line of code.\\r\n*\n**Change your simulation to run until you get a streak of 12 heads**. \\r\n*\n**Run your simulation a few times and record your results!**"
      CSPU5_U3 - Simulation - 6_markdown_instruction: "# Keep Experimenting!\\r\n\\r\nYour\nsimulation can be updated or changed however you like. What new questions\ndo you have? Do you want to look for longer streaks of heads? Do you want\nto roll a die instead of flipping a coin? Make any changes and improvements\nto your simulation that you like.\\r\n"
      CSPU5_U3 - User Input - Save getText To Variable_markdown_instruction: "# Saving\nText Input in Variables\\r\n\\r\nOften we want to save the information we pull\nin from the user for later use in our program. The best way to do this is\nto save it in a variable.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create two variables\ninside your event handler** to store the **age** and **name** of the user.\\r\n*\n**Use `getText()` to update the values** stored in each of these variables.\\r\n*\n**Change your `console.log` statements to use your variable instead of `getText`**.\\r\n\\r\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13\nPM.png)"
      CSPU5_U3 - Variables - Set to Expression with Other Variables_markdown_instruction: "#\nExpressions with Variables\\r\nArithmetic becomes much more interesting when\nwe use other variables in our expressions. For example you can do this:\\r\n\\r\n<table  style=\"margin-left:\nauto;\\r\n  margin-right: auto; align: center\">\\r\n<tr>\\r\n<td>\\r\n<img src=\"https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png\"\nstyle=\"width: 400px;\">\\r\n</td></tr>\\r\n<tr> <td>\\r\n <h3>\\r\n Mental Model\\r\n![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\\r\n</td></tr>\\r\n<tr><td><img\nsrc=\"https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif\"\nstyle=\"width: 400px;\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\nThe end result of\nan expression with variables is the same as one without.  The major difference\nis that values are retrieved from memory in order to do the calculation rather\nthan simply hard-coded.\\r\n\\r\n# Mental Model Check\\r\nWatch the animation\nabove. To compute the expression the computer will: **first** retrieve each\nof the values of the variables used in the expression; **then** the arithmetic\nexpression can be evaluated; **finally** the computed value can be stored\nin memory.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png\"\nstyle=\"float: right; width: 300px\">\\r\n* **Scenario:** In the starting code\nwe have provided you with variables that might be the kinds of things you\nwould keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\\r\n\\r\n*\nRight now the `totalScore` is just set to 0.  We want you to compute a final\nscore so that the person is rewarded for having a lot of points and lives,\nbut penalized for taking a lot of time.\\r\n\\r\n* **Write an expression** that\ncalculates the player's total score and stores it in the `totalScore` variable.  The\ncalculation is: **the player's points *times* lives *divided* by the total\ntime.**\\r\n\\r\n* For the values provided the app display should look like\nthis:\\r\n \\r\n<img src=\"https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png\"\nstyle=\"width: 250px\">\\r\n"
      CSPU5_U3 - Variables - Set to Expression_markdown_instruction: "# Variables\nand Arithmetic Expressions\\r\nA common thing to want to do is store the result\nof an arithmetic expression.  The 4 basic arithmetic operations `+ - * /`\nare available. \\r\n\\r\n<details><summary><strong>Here is a quick table that\nshows the arithmetic operators with code examples</strong> [click to expand]</summary>\\r\n<table>\\r\n<thead>\\r\n<tr>\\r\n<th\nstyle=\"text-align:center\">operation</th>\\r\n<th style=\"text-align:center\">block</th>\\r\n<th\nstyle=\"text-align:center\">text</th>\\r\n<th style=\"text-align:center\">example</th>\\r\n<th\nstyle=\"text-align:center\">result</th>\\r\n</tr>\\r\n</thead>\\r\n<tbody>\\r\n<tr>\\r\n<td\nstyle=\"text-align:center\">add</td>\\r\n<td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`+`</td>\\r\n<td style=\"text-align:center\">`result\n= 7 + 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>10</strong>\nin <em>result</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">subtract</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`-`</td>\\r\n<td style=\"text-align:center\">`value\n= 7 - 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>4</strong>\nin <em>value</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">multiply</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`*`</td>\\r\n<td style=\"text-align:center\">`score\n= 7 * 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>21</strong>\nin <em>score</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">divide</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`/`</td>\\r\n<td style=\"text-align:center\">`bonus\n= 7 / 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>2.3333</strong>\nin <em>bonus</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">parentheses</td>\\r\n<td\nstyle=\"text-align:center\">none</td>\\r\n<td style=\"text-align:center\">`()`</td>\\r\n<td\nstyle=\"text-align:center\">`avg = (99 + 85 + 93) / 3;`</td>\\r\n<td style=\"text-align:center\">stores\n<strong>92.3333</strong> in <em>avg</em></td>\\r\n</tr>\\r\n</tbody>\\r\n</table>\\r\n</details>\\r\n<br>\\r\n#\nMisconception Alert \\r\n\\r\n<img src=\"https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif\"\nstyle=\"float: right\">\\r\nWhen you have a statement like `result = 5 + 7;`\nrealize that this **does NOT store a mathematical expression in the variable.**  \\r\n\\r\nRather,\nwith this instruction you are asking to compute 5 + 7 and **THEN** store the\nanswer (a single number) in the variable.\\r\n\\r\n# Do This:\\r\n\\r\n**GOAL:**\nthe goal here is mostly to acquaint yourself with typing arithmetic expressions\n- the answers to the questions below are less important, and should be used\nas interesting things to investigate.  \\r\n\\r\nWe've given you some **starting\ncode** with 5 statements similar to ones in the table above.\\r\n* **Add `console.log`\nor `write` statements** to display the values of each of the variables.\\r\n*\nExperiment with arithmetic expressions, try to make really big and really\nsmall numbers.\\r\n\\r\n<hr>\\r\n\\r\n**Things to Try:**\\r\n* Using **multiplication:\nwhat's the biggest a number you can store** in a variable?\\r\n * How many\ndigits are in the biggest number before it starts using scientific notation?\\r\n*\nUsing **subtraction (or multiplication with negative numbers): what's the\nlowest number you store?** (low means a negative number with a lot of digits)\\r\n*\nUsing **parentheses** make a crazy-big arithmetic expression.  \\r\n * NOTE:\ncomposing arithmetic expressions is ***much* easier in text mode**, and is\nactually almost unreadable in block mode.  Try doing this in text mode.\\r\n\n\\r\n"
      CSPU5_U3 Digital Assistant Design_markdown_instruction: "# Getting Started\nwith Your Digital Assistant\\r\n\\r\n<img src=\"https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png\"\nstyle=\"width:200px;float:right;\">\\r\nOver the course of the next few lessons,\nyou'll be __developing your own digital assistant__. To make your digital\nassistant more useful, it needs to be able to make __decisions__ based on\nquestions the user asks it, and respond intelligently.\\r\n\\r\nTo get started,\n__choose a topic__ you want your digital assistant to specialize in. It should\nbe something you are interested in and know a lot about. Examples: Country\nMusic, Sushi, College Football, Comedy Movies.\\r\n\\r\nYou'll next set up\nthe layout for your app. __The basic layout contains just two primary design\nelements:__ a text input and a text area.\\r\n\\r\n# Do This:\\r\n\\r\n- __Choose\na topic__ for your digital assistant to specialize in.\\r\n- __Create the layout__\nfor your app. Your digital assistant should have:\\r\n    - A name\\r\n    -\nA text input for the user to ask a question\\r\n    - A text area for the digital\nassistant to respond\\r\n    - The text area should have a greeting for the\nuser (e.g. Ask me a question about movies!)\\r\n"
      CSPU5_U3 Digital Assistant Set Text_markdown_instruction: "# Respond to Basic\nUser Input\\r\n\\r\n<img src=\"https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif\"\nstyle=\"width:200px;float:right;\">\\r\nNow you can have your digital assistant\nrepeat what the user typed and add a __default response__. It's not the most\nintelligent response, but you'll build up to that over the next couple of\nlessons and it's important to build this program in pieces.  \\r\n\\r\n# Looking\nBack to Move Forward\\r\nYou're going to now add to your program without as\nmuch guidance as usual. Keep in mind that __this is very similar to programs\nyou've already built__, so look back at your work for a refresher.\\r\n- __Mad\nLibs:__ In Mad Libs you got a user's text when the 'Next' button was clicked,\nfilled in the outline with the responses, and displayed the completed Mad\nLib\\r\n- __Introducing the 'change' event:__ You just learned about the\n'change' event that triggers when the user hits 'enter' on a text input.\\r\n\\r\n#\nDo This:\\r\n- __Take the user's question and output it to the text area__\nwhen the 'enter' key is pressed in the text input\\r\n- The response should\nalso __include a default phrase__ such as _\"I don't know about that yet!\"_\\r\n-\n__Format the response with newline characters__ to separate the user's response\nfrom the assistant's response.: `\\n`\\r\n- The __text input should clear__\nafter the user hits 'enter'"
      CSPU5_U3 Digital Assistant Target_markdown_instruction: "# Introduction to\nthe Digital Assistant\\r\n\\r\n__While digital assistants may seem like magic,\nthey are just elaborate computer programs that parse, or process, text__ looking\nfor combinations of words to make decisions about what to reply.\\r\n\\r\nOver\nthe next few lessons, __you're going to build up your own digital assistant\nthat responds \"intelligently\" to a user's question__, by making a decision\nabout what to reply based on the contents.\\r\n\\r\nYou'll now __explore a\ndemo digital assistant__, Movie Bot, that represents the kind of program that\nyou'll build up to. Try out some of the prompts below and also try your own.\nYou'll quickly find the limits of what this program can and can't do.\\r\n\\r\n#\nDo This:\\r\n__Run Movie Bot. In the _'enter your question here'_ input,\ntype each of the following prompts and hit 'enter.' __\\r\n- 'help'\\r\n-\n'What is the best PG comedy movie ever?'\\r\n- 'What PG comedy movie should\nI watch next?'\\r\n- 'Could you please tell me the best romance movie?'\\r\n-\n'I waNT To WatCH a MovIE!!!'\\r\n- 'What is the capital of Kentucky?'\\r\n-\nPlay around! Ask more questions of Movie Bot and make a prediction about what\nlogic it's using to reply.\\r\n"
      CSPU5_U3 full clicker demo_markdown_instruction: "# Clicker Game Demo\\r\n\\r\nTry\nout this clicker game! You'll be building your own version (with a theme\nyou choose) at the end of the lesson.\\r\n\\r\n# Things That Are Familiar\\r\nYou\nknow how to build many of the components of this game already:\\r\n- Multiple\nscreens.\\r\n- Buttons that change the screen when clicked.\\r\n- Image that\nmoves when you click it.\\r\n\\r\n# Things That Are New\\r\n- Keeping track of\nand displaying the __changing score__.\\r\n- Keeping track of and displaying\nthe __changing lives__.\\r\n- Changing to the __win screen if the score is\n25__.\\r\n- Changing to the __lose screen if the lives is 0__.\\r\n"
      CSPU5_U3- Keys - Code Refactoring Exit Ticket_markdown_instruction: "# Free\nResponse: Why Refactor?\n\nWhy is refactoring your code important?\n"
      CSPU5_U3- Variables - Create And Assign_markdown_instruction: "# Create and\nAssign At Once\\r\n\\r\nIt's so common to want to create a variable and give\nit an initial value, that JavaScript has a shortcut that lets you create and\nassign with one line of code like this:\\r\n\\r\n<img src=\"https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png\"\nstyle=\"width:120px\">\\r\n\\r\n\\r\nYou'll also see a new block in the toolbox\nfor this (see right).<img src=\"https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif\"\nstyle=\"float: right; width: 350px\">\\r\n\\r\n# Do This:\\r\nWe'll just quickly\npractice using this form of variable creation and assignment.  The code you\nwrite will achieve the same thing as the previous level in fewer lines of\ncode. \\r\n\\r\n* **Create a variable called `lives`** and **assign it the value\n3** using the new one-line version of this command. (See animation at right.)\\r\n\\r\n*\n**Add** `console.log` statements to display the value of `lives` just as before.  \\r\n\\r\n*\nThe output in the console should (again) look like this:\\r\n \\r\n <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\"\nstyle=\"border: solid 1px gray\">\\r\n\\r\n"
      CSPU5_U3- Variables - Text Mode_markdown_instruction: "# Give Text Mode a Try!\\r\nThe\nblock-based mode of programming is useful for getting code into your app fast\nand error free.  But sometimes those little tiny edits are a pain. **Use text\nmode instead!**  Text mode is designed to make typing code fast and easy,\nand it also gives a lot of help to make your code error free. \\r\n\\r\nLet's\nre-create these variables again, but explore some features of text mode this\ntime.\\r\n\\r\n# Try Each of These 3 Things\\r\nWe've given you the first two\nlines of code in a program. \\r\nExpand each box below and try what's suggested\n- each builds on the previous one, so you might want to go in order.\\r\n\\r\n<details>\\r\n<summary>1.\n**Switch to text mode and try to type.** [click to expand]</summary>\\r\n \\r\n\nSwitch to text mode and **type out a `console.log` statement** to display\nthe value of `score`.<br>\\r\n <img src=\"https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif\"\nstyle=\"width: 500px\">\\r\n</details><br>\\r\n\\r\n<details>\\r\n<summary>2.\n**Drag blocks into text mode.** [click to expand]</summary>\\r\n\\r\n If you\ndon't want to type *everything* you can drag a block from the toolbox into\ntext mode and it will show you the text version of it. **Add code to create\nthe `lives` variable and a `console.log` message**.<br>\\r\n \\r\n <img src=\"https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif\"\nstyle=\"width: 500px\">\\r\n\\r\n</details><br>\\r\n\\r\n<details>\\r\n<summary>3.\n**Check out code completion.** [click to expand]\\r\n</summary>\\r\n When you\ntype commands a tool tip pops up that tries to guess what you're trying to\ntype. If you see what you want in the box, **highlight it** (you can use arrow\nkeys) and then **hit the tab key**. It will auto-complete the code for you!<br>\\r\n\n\\r\n <img src=\"https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif\"\nstyle=\"width: 500px\">\\r\n </details>"
      CSPU5_U3-Design Mode-ID and Event Handler_markdown_instruction: "# Activate\nYour Button\\r\nOn the last level you added a button using Design Mode. If\nyou click it, nothing happens. Let's make the button work. \\r\nYour button\nhas been brought over to this level.  \\r\n\\r\n**Goal:** Add code using Design\nMode to make the button respond to a click.\\r\n\\r\n# Do This:\\r\n\\r\n<img\nsrc=\"https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif\"  style=\"width:\n250px; float: right\">\\r\n\\r\n* **Change ID of button** from “button1” to\n“redButton”.\\r\n\\r\n* **Insert `onEvent` from Design Mode** by clicking *Insert\nand show code* under the **Events Tab**.\\r\n\\r\n* Run the program and **look\nfor the output in the *Debug Console* **below the workspace instead of the\napp window. We will discuss the *Debug Console* on the next level."
      CSPU5_U3-Design Mode-Image_markdown_instruction: "# Testing Overlapping objects\nand the Screen with Console.log\\r\n\\r\nThere are two goals here:\\r\n\\r\n1.\nPractice inserting your own console.log statements.\\r\n2. Investigate how\nthe screen captures events (it's different).\\r\n\\r\n## Do This:\\r\n\\r\n*\nAdd `console.log` statements to each of the 3 event handlers we started you\nout with.\\r\n * Make the text that gets printed *be descriptive* so that you\nknow exactly what is happening when.\\r\n\\r\n* **Run** the program\\r\n* **Click\non the overlapping objects** both the parts that overlap and the parts that\ndon't.\\r\n* **\\r\n\\r\n**Investigate until you can answer the questions:**\\r\n1.\nWhen you click on a location where two objects are overlapping, which event(s)\nfire(s)?\\r\n2. When you click on an non-overlapping part of some object what\ngets triggered?\\r\n3. When does a \"click\" on the \"screen\" get triggered?\\r\n\\r\n\\r\n<details><summary>Answers:\n[click here]</summary>\\r\n\\r\n1. When you click on a location where two objects\nare overlapping, which event(s) fire(s)?\\r\n<br>\\r\n<li> The event-handler\nfor object that is on top gets triggered.  The object that is underneath is\nessentially blocked from being clicked in the overlapping portion</li>\\r\n<br><br>\\r\n2.\nWhen you click on an non-overlapping part of some object what gets triggered?\\r\n<li>The\nevent-handler for the object gets triggered as you might expect</li>\\r\n<br><br>\\r\n3.\nWhen does a \"click\" on the \"screen\" get triggered?\\r\n<li>Always. Events\nthat occur on the screen cannot be blocked by other objects.  If you set up\nan event listener for the screen it will capture EVERY event of that type,\nno matter what other UI elements are on the screen.  This behavior of the\nscreen is done on purpose and is useful for certain kinds of things.</li>\\r\n\\r\n\\r\n</details>\\r\n"
      CSPU5_U313 Two Buttons with Ids_markdown_instruction: "# Predict - Observe\n- Reflect\\r\nHere's another one.  \\r\n\\r\nTo understand a new piece of code\ngood programmers often try to **first make a prediction about what will happen\nbefore running the program**. \\r\n\\r\nBy forcing yourself to make a prediction\n(it doesn't matter if you're right or not) you are immediately alerted to\nany **unusual or unexpected behavior** and you can ask yourself, *\"Huh? why\ndid it do that?  Was that supposed to happen?\"*  It might not be an error,\nbut you gain invaluable insight and actually **learn faster**.\\r\n\\r\n**Predict:**\nFor the code that is here, what will happen when the \"Forward\" button is\nclicked? \\r\n\\r\n * **Study the code** - This program has **two event handlers**\nlistening for events on the same button?\\r\n * **Force yourself to make a\nprediction!** - \"I don't know\" is not a prediction!. \\r\n\\r\nHere are some\noptions to think about:\\r\n\\r\n* There will be an error in the console immediately\nafter hitting run\\r\n* There will be an error in the console but not until\nyou hit the button\\r\n* Program does nothing\\r\n* turtle only moves forward\\r\n*\nturtle only turns left\\r\n* turtle move forward *then* turn left \\r\n* turtle\nturn left *then* move forward?\\r\n* something else? \\r\n\\r\n**Observe:** Once\nyou've made a prediction, close these instructions and **run the program**\nto observe what happens.\\r\n\\r\n**Reflect:** Was your prediction correct?\nIf not what about your mental model might need to change? Talk about it with\na classmate and experiment with the code to make sure you understand what\nis happening."
      CSPU5_U313 drag Two Buttons_markdown_instruction: "# Buttons and Unique IDs\\r\nYou\nmay have noticed that the button command has two parameters: `button(id, text)`.  The\n`text` is the text that actually shows up on the button display, and the `id`\n(we'll typically write **ID**) is a **unique identifier** for that element\nin the app.\\r\n\\r\nEach element that appears in the app must have a **unique\nID**. In fact, if you try to run a program that has two buttons with same\nID you will get a warning message in the console. Watch:\\r\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\"\nstyle=\"border: solid 1px black; width:500px\">\\r\n\\r\nNotice that even though\nthe text on the buttons was different, the IDs were the same, which caused\nthe error message to show up. To get rid of that error message you will have\nto change the ID of the button from the default `id` to something else.\\r\n\\r\n**Error\nmessages happen to everyone and they are helpful!**: getting an error or warning\nmessage when you run your program is *not a big deal*. Programmers actually\nrely on error messages to tell them where and how to fix their code.\\r\nSometimes\nerror messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers\nto an id (id) which already exists.` But a warning like this contains helpful\ninformation and clues such as the line the error occured on, or some word\nor command it didn't recognize. \\r\n\\r\n# Do This:\\r\nThe goal here is to\nexperience an error message in a program, study it, and fix it.\\r\n* **Drag**\ntwo buttons into the workspace (same as shown above) with the default IDs.\\r\n*\n**Run** the program to see the warning message in the console.\\r\n* **Read**\nthe warning message to see what it says.\\r\n* **Change** the IDs of the buttons\nto make them unique. An ID must be specified in quotes. You can use double-quotes:\n`\"myId\"`, or single quotes: `'myId'`\\r\n* **Re-run the program** to make\nsure you don't get the error.\\r\n\\r\nOnce you've got two buttons on the\nscreen with different IDs and the program can run without generating the warning,\nmove on to the next level.\\r\n"
      CSPU5_U3L13 - Debug Id Problem_markdown_instruction: "# Descriptive IDs\\r\n\\r\n**You\ntry it** - give your buttons **descriptive and meaningful IDs** rather than\nthe default `button1`, `button2` and so forth.\\r\n\\r\nRemember to:\\r\n\\r\n*\n**Change ** the event handler code so that it correctly references the new\nIDs of the buttons\\r\n* **Run - Test - Debug ** the program to make sure it\nworks, and debug any problems.\\r\n\\r\n<details><summary><strong>Reminder:</strong>\nRules About IDs [click to expand]</summary>\\r\n\\r\nIn making descriptive and\nmeaningful IDs there **are some rules about IDs** you need to know.  IDs...\\r\n\\r\n<li>\ncannot contain spaces.\\r\n<li>  *must* begin with a letter (A-Z or a-z) and\nmay be followed by any number of digits and letters.\\r\n<li>  can contain\nhyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\\r\n\\r\n</details>\\r\n"
      CSPU5_U3L13 - Debugging 1_markdown_instruction: "# Debugging Event-Driven Programs:\nIDs\\r\n\\r\nTry another one! -- This one is trickier, but very common.\\r\n\\r\n1.\n**Run the program** and inspect the messages in the Debug Console for clues.\\r\n2.\n**Investigate** - track down what the root of the problem might be.\\r\n3.\n**Fix it** the program and correct the errors so that it works as intended.\\r\n4.\n**Run the program** and verify that both buttons have the intended functionality.\\r\n5.\n**Repeat as necessary** until the program works as intended\\r\n\\r\n<details><summary>Hint?\n[click here]</summary>\\r\n\\r\n<li>Remember: IDs are **case-sensitive**!!!</li>\\r\n<li>The\nerror is with the id: **left**[**B/b**]**tn**</li>\\r\n</details>\\r\n"
      CSPU5_U3L13 - Debugging 2_markdown_instruction: "# Debugging Event-Driven Programs:\nOrdering Event Handlers\\r\n\\r\n**Ordering Event Handlers: ** Event handlers\nmust come **after the object they reference in the code**. If your event handler\ncomes before your object (in this case a button) your computer would be looking\nfor an event on an object that does not yet exist. You will get an error message\nand your code will not work as you intend.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n**Target Application:** Just\nlike the last exercise, you'll again try to make an app that has two buttons,\none for moving forward and one for turning left.  \\r\n\\r\nOnce again, we've\nintroduced a new error.\\r\n\\r\n# Do This:\\r\n**Run the Existing program**\nto see the error that gets generated.\\r\n\\r\n**Debug ** this program so that\nit works as intended.\\r\n\\r\n**Run the program ** and try both buttons to\nmake sure they have the intended functionality."
      CSPU5_U3L13 - Debugging 3_markdown_instruction: "# Debugging Logical Errors\\r\n\\r\nSometimes\nyou can write a program that generates no errors but still does not work as\nintended. \\r\n\\r\nThis is the result of **logical errors** in your code, and\n**making a prediction** can help find these nasty little buggers too.\\r\n\\r\nOnce\nagain we've introduced an error or two (a logical error this time) for you\nto debug.\\r\n\\r\n1. **Investigate the code and make a prediction** - What\n*should* happen here?\\r\n2. **Run the program** and experiment to see what's\nwrong.\\r\n3. **Reflect** - were you right?  Why or why not?\\r\n4. **Fix it**\n- make it work as intended.\\r\n5. **Repeat as necessary**"
      CSPU5_U3L13 - Debugging IDs case sensitive_markdown_instruction: "# Debugging\nEvent-Driven Programs: IDs\\r\n\\r\nTry another one! -- This one is trickier,\nbut very common.\\r\n\\r\n1. **Run the program** and inspect the messages in\nthe Debug Console for clues.\\r\n2. **Investigate** - track down what the root\nof the problem might be.\\r\n3. **Fix it** the program and correct the errors\nso that it works as intended.\\r\n4. **Run the program** and verify that both\nbuttons have the intended functionality.\\r\n5. **Repeat as necessary** until\nthe program works as intended\\r\n\\r\n<details><summary>Hint? [click here]</summary>\\r\n\\r\n<li>Remember:\nIDs are **case-sensitive**!!!</li>\\r\n<li>The error is with the id: **left**[**B/b**]**tn**</li>\\r\n</details>\\r\n"
      CSPU5_U3L13 - Project_markdown_instruction: "# Multi Screen App\\r\nYou will\nbe creating your own multi-screen app to practice designing user interfaces\nand writing event-driven programs. \\r\n\\r\n**Look at the Project Guide and\nPlanning Sheets before programming**.\\r\n\\r\n# Requirements Reminder\\r\n*\nYour app will have at least **4 screens**.\\r\n* Your app should include **text,\nimages, buttons, and sound**.\\r\n* There should be **no “getting stuck” on\nany screen.**  It should always be possible to navigate from a screen in your\napp to some other screen. \\r\n* Your program code should follow **good style**.\\r\n*\nYour user interface should be **intuitive to use**."
      CSPU5_U3L13 - Turtle Driver Project_markdown_instruction: "# Create a Turtle\nDriver App!\\r\n\\r\nAt this point you know enough about buttons and event handlers,\nand how to debug some common issues that arise to be able to **build your\nown \"turtle-driver\" app** from scratch. \\r\n\\r\n**Build up the program bit\nby bit**. Don't try to write all the code at once.  Add a button with an\nevent handler, make sure it works, debug any problems, and then move on to\nthe next part.\\r\n\\r\n# Do This:\\r\n\\r\n**Create ** an application with **four\nbuttons**, one for moving the turtle forward and one each for turning left\nand right.  The fourth button should do whatever you like.\\r\n\\r\n**Use descriptive\nand meaningful IDs** for your buttons and ensure your event handlers work\nas you intend.\\r\n\\r\n**If you have extra time** add more buttons that use\nother turtle commands you'd like to include.  You can also use colors, and\ndifferent line widths, dots, etc. "
      CSPU5_U3L13 - Turtle move with button_markdown_instruction: "# Your First Interactive\nApp!\\r\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'\nstyle='float: right; width: 250px'> A new group of commands has been added\nto the toolbox called **UI Controls** (User Interface Controls) which are\ncommands that let you interact with, and respond to, the user of your app.\nTo keep it simple, we'll start with just two commands: \\r\n* `onEvent` which\nlets you run a function in response to some event occuring (such as a button\nclick).\\r\n* `button` which puts a button on the screen.\\r\n\\r\n# Do This:\\r\nYou\nwill replicate the small app shown below, which makes the turtle move with\na button click. You will do three things:\\r\n* Add a `button`.\\r\n* Add an\n`onEvent` block.\\r\n* Add `moveForward` inside the onEvent function block.\\r\n\\r\nHere's\nwhat you should do - you can come back to watch this as many times as you\nneed to get it right.\\r\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\"\nstyle=\"border: solid 1px black; width: 500px; margin: auto\">\\r\n\\r\nOnce\nyou've created the program and gotten it to run, click **Finish** to move\nonto the next level."
      CSPU5_U3L13 Free Response Reflection_markdown_instruction: "Elements in your\napp are required to have **unique IDs**. Given what you now know about how\nevent handlers work, why is it important for the IDs of page elements to be\nunique?\n\n"
      CSPU5_U3L13 eventsDetails_markdown_instruction: "# onEvent\\r\n\\r\n**You try\nit!** - Make the turtle move forward when the button is clicked.\\r\n\\r\n*\n**Add an `onEvent` block** \\r\n* Set the **id** and **type** you want.\\r\n*\nAdd `moveForward` to the function definition\\r\n\\r\n* **Run the program**\nto make sure it works.\\r\n* **Try changing the event type** to something like\n*\"mouseover\"* and see what happens.  Not all event types will work with\nbuttons but it's fun to play a little bit.\\r\n\\r\nOnce you've got the program\nresponding to some event, congratulations! You've just made your first interactive\napp. \\r\n\\r\n**Click Finish** to move on to the next problem.\\r\n\\r\n"
      CSPU5_U3L14 - Assigning Random Value_markdown_instruction: "# Other Ways to\nAssign Values to Variables\\r\nPrograms become much more interesting when the\nvalues in variables change while the program is running. We can also assign\nto a variable the value returned by a function. For example:\\r\n\\r\n![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\\r\n\\r\nBecause\nthe `randomNumber` function *evaluates to a number* it means we can treat\nit *as though it were a number*. We've used it before by just \"plugging\nit in\" to some function that needed a number as a parameter like:\\r\n![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\\r\n\\r\nBecause\nthe `randomNumber` function generates a new and different number each time\nyou call it, one thing we *could not* do before we had variables was generate\na random number, and use that *same number* for two different things in a\nprogram. Now we can.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png\"\nstyle=\"float: right; width: 350px\">Write a program that simulates the rolling\nof two dice and reports their individual values as well as the sum. \\r\nThe\nprogram should:\\r\n* Generate two random numbers between 1 and 6 and store\neach result in its own variable.\\r\n* Display the individual values of the\ntwo dice.\\r\n* Display the sum of the two dice (see right).\\r\n* Every time\nyou run the program the result will be a little different.\\r\n\\r\nWe have\ngiven you starting code that shows what to do for the first die. The *rest\nof the code is up to you!*  When you're done the output in the app display\nshould look like what's above.\\r\n\\r\n"
      CSPU5_U3L14 - Mini Calculator embed_markdown_instruction: "# Getting User Input\n- A Simple Calculator\\r\nPrograms become *even more interesting* when we can\ninteract with the user. A short way to ask a user for a number is with the\n`promptNum` command, which pops up a dialog box asking the user to enter a\nnumber.\\r\n\\r\nThis very simple app demonstrates a new behavior: getting input\nfrom the user.\\r\n**You will write code to re-create this program** on the\nnext page.\\r\n\\r\n# Do This:\\r\n* Click \"Run\" on the app.\\r\n* You will\nbe prompted for two numbers, one right after the other.\\r\n* See what happens.\\r\n*\nRe-run the program and enter different numbers until you get the idea.\\r\n\\r\nClick\n**Finish** to move on."
      CSPU5_U3L14 - User Input Division calculator_markdown_instruction: "# Assigning\nUser Input to Variables\\r\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\"\nstyle=\"width: 350px; float:right\">\\r\nLet's use `promptNum` to make a simple\ncalculator. The `promptNum` command appears in the variables toolbox because\nit's typically used as a way to get a value from the user that you want to\nhold on to while the program runs.\\r\n\\r\n`promptNum` is similar to `randomNumber`\nin that it is a function whose return value *evaluates to a number*. The difference\nhere is that `promptNum` pops up an input dialog box and waits for the user\nto type a number.  Once they do and hit \"OK\" the number they typed is returned\nand we can store it in a variable to use in our programs.\\r\n\\r\n\\r\n# Do\nThis:\\r\nWrite a program that acts as a simple calculator. (An animation of\nthe end result is shown at right.) <img src=\"https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif\"\nstyle=\"width: 250px; float: right\">\\r\n* Ask the user to **enter a number**.\\r\n*\nThen ask the user to **enter a second number**.\\r\n* **Display the result**\nof *some* calculation.\\r\n * The example shows division but you may choose\nsomething else if you like.\\r\n\\r\nWe have given you starting code that shows\nyou how to get the first number.  The rest of the code is up to you.\\r\n\\r\n"
      CSPU5_U3L14 - Variable ReAssignment pt2_markdown_instruction: "# Variable Re-assignment\n- Part 2: Updating Values\\r\n\\r\nAll of our examples so far have shown how\nto set the value of a variable by using combinations of numbers and other\nvariables.  But what if you wanted to do something like **add 10 to the *current*\nvalue of a variable**? \\r\n\\r\nBecause updating the value in a variable is\njust moving memory around, the process has to go something like this:\\r\n*\nRead the current value of a variable.\\r\n* Add 10 to it.\\r\n* Store the new\nvalue back into the same variable.\\r\n\\r\nThe technical term for this is called\n**variable re-assignment** - when you change the value of a variable based\non its current contents.   To increase the value of `num1` by 10 you actually\nneed to do this:\\r\n\\r\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\"\nstyle=\"float:right\">\\r\n```\\r\nnum1 = num1 + 10;\\r\n```\\r\nThe diagram at\nright shows a picture of what's happening (it assumes the value of `num1`\nis 7 before the line is executed).  It's actually very similar to what happens\nwith plain old arithmetic: compute a value, then store it in a variable.  Because\nthe computation has to happen before storing the result in a variable, there\nis no contradiction here.\\r\n\\r\n<details>\\r\n<Summary><strong>Common Mistakes\n& Tips</strong> [click to expand]</Summary>\\r\n\\r\n<h3>\\r\nMistake 1\\r\n</h3>\\r\n<p>To\nincrease the value of variable by 10 (for example) a common mistake is to\nthink that this statement alone will do the trick.\\r\n</p><p>\\r\n\\r\n```\\r\nnum1\n+ 10;\\r\n```\\r\n</p><p>\\r\nIt doesn't. This tells the computer to add 10\nto whatever the value of `num1` is.  And the computer will do that, and the\nresult will go....nowhere.  It will be lost.\\r\n</p><p>\\r\nBecause you are\ntrying assign a new value to a variable it should make sense that **the =\nsign must be involved somehow**.  \\r\n</p>\\r\n<h3>\\r\nMistake 2\\r\n</h3>\\r\n<p>\\r\nIf\nyou were in math class this statment would make no sense:\\r\n```\\r\nnum1 =\nnum1 + 10;\\r\n```\\r\n</p><p>\\r\nBut **remember to read = as \"gets.\"** If\nyou read the statement above as: \"num1 *gets* the value of num1's current\nvalue plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\\r\n</p>\\r\n</details>\\r\n\\r\n#\nDo This:\\r\n\\r\n * **Make a prediction.**\\r\n We start you out with some code\nagain (see below). \\r\n\\r\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\"\nstyle=\"width: 500px;\"> \\r\n\\r\n Trace the code and predict what you think\nwill be printed to the console.  (NOTE: We're serious about this \"make a\nprediction\" stuff. When you force yourself to make a prediction about what\ncode will do you will learn faster since it triggers you to apply your mental\nmodel of what's happening.)\\r\n  \\r\n * **Run the program** to see if you\nwere right.\\r\n \\r\n * **Add a `console.log` statement**.\\r\n \\r\n  We've\nleft you with a *little bit* of programming to do: add a `console.log` statement\nat the end of the program to see the last value of `someNum` to see if your\nfull prediction is correct.\\r\n"
      CSPU5_U3L14 - concatenate simple_markdown_instruction: "# Text and Variables\nLiving Together!\\r\n\\r\nSometimes it’s useful to display text along with the\nvalue of a variable in the same line of output. To do this you use `+` to\nattach a variable onto a literal string of characters.  Here is an example:\\r\n\\r\n<img\nsrc=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\">\\r\n\\r\nNotice that the\n`+` operator has **two different meanings in JavaScript depending on what\ntype of data you're applying it to**. Click the explanations below for more\ndetails.\\r\n\\r\n<details>\\r\n<summary>If **both operands are numbers** `+`\nmeans to add those two numbers together.</summary>\\r\n\\r\nThis is standard\naddition.  It works both with numbers and with variables that contain numbers,\nas shown below.<br>\\r\n\\r\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n\\r\nBecause `num1`\nis a variable that holds a number, and 10 itself is obviously a number, in\nthis case `+` will do addition like you would expect.\\r\n\\r\n</details>\\r\n<br>\\r\n<details>\\r\n<summary>If\n**either of the operands is a string** `+` treats both as if they were strings\nand combines them to create a single string.</summary>\\r\nThis is potentially\nconfusing behavior and can get pretty weird if the text *looks* like numbers.  For\nexample, this code will display **16100** to the screen.<br>\\r\n\\r\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n\\r\nWhy? Because\nJavaScript sees you trying to display a mix of text and variable values. \"16\"\n(in quotes) is a string of ASCII characters not a number.  And so JavaScript\nconverts everything to text, and the characters in the result of \"16\"+\"100\"\ncomes out to \"16100\". \\r\n\\r\n</details>\\r\n<br>\\r\n \\r\n**TIP:** It's\ncommon to want to sandwich a variable between some text when displaying it.  You\ncan string together multiple pieces of text and variables using the `+` operator.  For\nexample, you can do this:\\r\n<br> \\r\n\\r\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n \\r\n<br>\\r\n<details>\\r\n<summary>**Misconception\nAlert**</summary>\\r\n\\r\nThe **key thing to understand** about the `+` symbol\nis that it can _only_ do actual arithmetic addition if the values on either\nside of the `+` are actually numbers or variables that contain numbers. \\r\n\\r\n**And**\nif the `+` symbol cannot determine whether the value is a number then it **assumes\nit's a string**, and converts everything to a string and tries to concatenate\nit.  \\r\n \\r\nThe computer relies on you - the programmer - to make sure that\nthe **type of data** stored in a variable is appropriate for the task at hand.\\r\n</details><br>\\r\n\\r\nOn\nthe next screen we'll have you play with this a little bit, but you'll write\nstatements to display a mix of text and strings from here on out.\\r\n\\r\n#\nDo This:\\r\nWe have given you the starting code shown below.  You should **modify**\nthe `write` statement on **line 3** to combine text and variables together\nto make the app display a single line of text as shown.\\r\n\\r\n|starting code|output|\\r\n|--|--|\\r\n|<img\nsrc=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\"\nstyle=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\"\nstyle=\"width: 250px\">|"
      CSPU5_U3L14 - moving memory challenge1_markdown_instruction: "# Moving Memory\n- Challenge 1\\r\n\\r\nThe next several levels all present challenges related\nto \"moving memory\" around in your program.  \\r\n\\r\n**GOAL:** Set the value\nof the variable(s) to make the `console.log` statement display what it's\nsupposed to.\\r\n\\r\n**Rules**:\\r\n\\r\n * You may **only** add lines of code\nthat re-assign values of variables provided.\\r\n * You may **only** use assignment\n(`=`) and arithmetic operators (`+` `-` `*` `/`).\\r\n * You **MAY NOT** type\nor introduce any numbers.\\r\n * You **MAY NOT** add or create any new variables.\\r\n\n* You **MAY NOT** change or alter the `console.log` statement at all.\\r\n\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n<br><br>\\r\n### Try this example yourself...\\r\n\\r\n"
      CSPU5_U3L14 - moving memory challenge2_markdown_instruction: "# Moving Memory\n- Challenge 2\\r\n\\r\n# Try another one!! \\r\n* Click through to see a new\nproblem provided in the starter code.  \\r\n* A reminder of the rules and example\nare below if you need to sneak a peek.\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      CSPU5_U3L14 - moving memory challenge3_markdown_instruction: "# Moving Memory\n- Challenge 3\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar\nx = 2;\\r\nvar y = 3;\\r\n// your code here\\r\n\\r\nconsole.log(\"The value of\nx is: \" + x + \" (x should be 7)\");\\r\n```\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      CSPU5_U3L14 - moving memory challenge4_markdown_instruction: "# Moving Memory\n- Challenge 4\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar\nx = 2;\\r\n// your code here\\r\n\\r\nconsole.log(\"The value of x is: \" + x\n+ \" (x should be 8)\");\\r\n```\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      CSPU5_U3L14 - moving memory challenge5_markdown_instruction: "# Moving Memory\n- Challenge 5\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar\nx = 2;\\r\nvar y = 3;\\r\nvar z = 0;\\r\n// your code here\\r\n\\r\nconsole.log(\"The\nvalue of x is: \" + x + \" (x should be 3)\");\\r\nconsole.log(\"The value\nof y is: \" + y + \" (y should be 2)\");\\r\n```\\r\n</p><p>\\r\n<details>\\r\n<summary><strong><big>HINT:</big></strong>(click\nto expand)</summary>\\r\nSince this one requires you to change the value of\ntwo variables you need to be careful about which one you change first, since\nits new value will affect the next lines of code.\\r\n<p></p>\\r\nYou can also\ntake advantage of the fact that since `z` is not used as a display value,\nyou can use it as a temporary holding ground for one value while you change\nanother.\\r\n\\r\n</details>\\r\n</p><p>\\r\n</p><p>\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      CSPU5_U3L14 - moving memory challenge6_markdown_instruction: "# Moving Memory\n- Challenge 5\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar\nx = 5;\\r\nvar y = 11;\\r\nvar z = 4;\\r\n// your code here\\r\n\\r\nconsole.log(\"The\nvalue of x is: \" + x + \" (x should be 2)\");\\r\nconsole.log(\"The value\nof y is: \" + y + \" (y should be 6)\");\\r\nconsole.log(\"The value of z is:\n\" + z + \" (z should be 8)\");\\r\n```\\r\n</p><p>\\r\n<details>\\r\n<summary><strong><big>HINT:</big></strong>\n(click to expand)</summary>\\r\nThis one requires you to be a little clever.  Think\nabout setting the value of one variable that you could then use to easily\nset the value of the other variables.  Then the trick is to figure out how\nto use the variables you've been given to make that useful value.\\r\n\\r\n</details>\\r\n</p><p>\\r\n</p><p>\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      CSPU5_U3L15 - Add reset button to UpDown app_markdown_instruction: "# Add a\nReset Button\\r\nIn most apps you want to provide a way to start over. \\r\n\\r\nTo\ndo this without having the user quit and restart your app, you need to add\ncode to **reset variables and text displays to initial values** so the app\ncan effectively start over.\\r\n\\r\nWe've **added a button** to the \"gameOverScreen\"\nin the *Count Up/Down App* and **added an empty event handler** for it.  \\r\n\\r\nRight\nnow clicking the \"start over\" button does nothing. You will write code to\nmake it work.\\r\n\\r\n\\r\n# Do This:\\r\n**Add code to the startOverButton event\nhandler to reset the app**.  <img src=\"https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif\"\nstyle=\"width: 150px; float: right;\">\\r\n\\r\nThe app should work like the\nanimation shown to the right. **Notice** that when the \"start over\" button\nis clicked it goes back to the main screen and  the count has been reset to\n0. \\r\n\\r\nThe code should:\\r\n\\r\n* Set the screen to the gamePlayScreen.\\r\n*\nSet the count variable to 0.\\r\n* Set the correct text label on the gamePlayScreen\nto show the count is 0.\\r\n\\r\nOnce you get it to work, move on."
      CSPU5_U3L15 - DEMO up down count practice app_markdown_instruction: "# All\nthe Basics You Need\\r\n\\r\n<img src=\"https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif\"\nstyle=\"float:right; width: 150px\"> When you close these instructions, you'll\nget to play a little bit with the very simple app (shown at right) to demonstrate\nthe basics of concepts involved in making the clicker game.  We'll call it\nthe **Count Up/Down App**.  Yes, it's a boring \"game,\" but it has all the\npieces of a more sophisticated game.\\r\n\\r\nThis app demontrates a few new\nconcepts.  We'll step through each one, one at a time, explaining how each\nthing works.  Along the way, we'll also encounter some common challenges,\nand learn how to solve them.\\r\n\\r\n# Do This:\\r\n* Keeping clicking the up\narrow until something happens (something besides the number increasing).\\r\n*\nStart over.\\r\n* Click the down arrow until something happens (something besides\nthe number decreasing).\\r\n* Start over.\\r\n\\r\nOnce you think you've seen\nall the behavior click Finish to see the first part of how this is done.\\r\n\\r\n"
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThe *Count Up/Down App* has a bug! \\r\n\\r\nA ** common\nmistake** has been introduced into the code.\\r\n\\r\nIt's a tricky one to\nfind because at first it looks like everything is okay.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the program.**\\r\n\\r\n* **To see the bug:**\\r\n * Click the up or down\narrow until you get to the \"gameOverScreen.\"\\r\n * Click \"start over.\"\\r\n\n* Click the up or down arrow again... what the?\\r\n \\r\n* **Look at the code\nand fix the problem.**\\r\n\\r\n* **Read about the common mistake** by expanding\nthe area below.\\r\n\\r\n* **Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...forgetting\nto reset <i>everything</i> you need to actually start over.</big></strong><br><br>\\r\nFrequently\nto actually reset you need to set a few variables back to initial values <i>and</i>\nupdate all the UI components, especially those that rely on those variables,\nso they reflect the new values.<br><br>\\r\n\\r\nAnother common mistake shown\nhere is setting the text of a label to \"0\" rather than the value of the\ncount variable.  For example, these two lines of code are a little dangerous:<br><br>\\r\n<pre>\\r\ncount\n= 0;\\r\nsetText(\"countDisplayLabel\", 0);\\r\n</pre>\\r\n\\r\nTo be safe, if\na label is supposed to display the value of a variable, you should always\nuse the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The\ngeneral rule of thumb is: never hard-code a value instead of using a variable\nthat holds the value you need to show.<br><br>\\r\n\\r\n<b>A common strategy</b>\nfor handling this is to put everything you need to reset the app into a function\nwhich you can call at both the beginning of your program, and from other screens\nlater on.  For example:<br><br>\\r\n\\r\n<pre>\\r\nfunction resetAll(){\\r\n  count\n= 0;\\r\n  setText(\"countDisplayLabel\", count);\\r\n  setScreen(\"gamePlayScreen\");\\r\n}\\r\n</pre>\\r\n\\r\nThen\nin some other code like a button event handler you can just call your reset\n\\r\nfunction:<br><br>\\r\n\\r\n<pre>\\r\nonEvent(\"startOverButton\", \"click\",\n\\r\nfunction() {\\r\n  <span style=\"background-color:yellow\">resetAll();</span>\\r\n});\\r\n</pre>\\r\n\\r\n</details>"
      CSPU5_U3L15 - Debug if never triggers in UpDown app_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThe *Count Up/Down App* has a bug! \\r\n\\r\nA ** common\nmistake** has been introduced into the code.\\r\n\\r\nWe've changed the app\nso that it counts up and down by 3 rather than by 1.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the program.**\\r\n\\r\n* **To see the bug:**\\r\n * Click the up or down\narrow trying to get to the game over screen.\\r\n * It should be impossible\nto get to the game over screen.\\r\n \\r\n* **Look at the code and fix the problem.**\\r\n\\r\n*\n**Read about the common mistake** by expanding the area below.\\r\n\\r\n* **Once\nyou've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...the\ncondition you're checking in your `if` statement is actually impossible to\nreach.</big></strong>\\r\n<p>\\r\nThis problem was probably easy to see here,\nbut in practice <b>logic errors</b> like this can be devilish to track down.\nIt's especially hard because the program gives you no hints that anything\nis wrong - it is syntactially a correct program. The computer cannot tell\nahead of time whether your `if` statements will ever be true. So you need\nto trace through the logic of your program step by step to try to figure out\nwhy something's not happening that you expect should have happened.\\r\n</p>\\r\n\\r\n</details>"
      CSPU5_U3L15 - Debugging Simple If-statements =v==_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThe *Count Up/Down App* has a bug! \\r\n\\r\nA **very common\nmistake** has been introduced into the code.  It's one that vexes early programmers,\nbut we're sure you'll find it.\\r\n\\r\n# Do This:\\r\n\\r\n* **Run the program.**\\r\n\\r\n*\n**To see the bug:**\\r\n * Click the up arrow just once.\\r\n * Restart the\nprogram.\\r\n * Click the down arrow just once.\\r\n \\r\n* **Look at the code\nand fix the problem.**\\r\n\\r\n* **Read about the common mistake** by expanding\nthe area below.\\r\n\\r\n* **Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...using\n`=` instead of `==`</big></strong>\\r\n<p>\\r\n<b>Yup,</b> we told you this\nis a common mistake!  And it's an easy one to make.\\r\n</p>\\r\n<p>\\r\nRemember\nthat the single `=` sign does assignment and it actually *also* evaluates\nto true.  This means that if you stick it in an `if` statement, that `if`\nstatement will <i>always</i> be true.\\r\n</p>\\r\n<p>\\r\nOne strategy to avoid\nthis mistake is to **read code aloud in your head** and don't even use the\nsingle word \"equal\":\\r\n<li> think **\"gets\"** every time you see `=`</li>\\r\n<li>\nthink **\"equal-equal\"** every time you see `==` </li>\\r\n</p>\\r\n<p>\\r\nIf\nyou get in the habit of thinking that way, these mistakes are easier to catch.  For\nexample you'd see this:<br>\\r\n`if (count = 20)`<br>\\r\nand read:<br>\\r\n<i>\"if\ncount gets 20\"</i> ...and know that that doesn't make sense.\\r\n</p>\\r\n\\r\n<p></p>\\r\n</details>\\r\n\\r\n"
      CSPU5_U3L15 - Simple If-statements in UpDown App_markdown_instruction: "# Add\nYour Own *if* Statement\\r\n\\r\nIn most apps you want to make decisions based\non the state of some data you're keeping track of in the app.  \\r\n\\r\nWe've\n**modified** the *Count Up/Down App* to add another screen.  When the count\nreaches certain values, we'll switch screens.  In the code you'll see an\n`if` statement has been added to the event handler for up arrow that states:\\r\n\\r\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\\r\n\\r\n\n* **If** the value of `count` is equal to **20, then** set the screen to *\"gameOverScreen\"*.\\r\n<img\nsrc=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\n# Do This:\\r\n**Add an `if` statement\nso that when counting down the app changes screens when the count reaches\n-5. **\\r\n\\r\n* **Run the app** and click the up arrow 20 times to see what\nhappens when the `if` statement is triggered.\\r\n* **Study the `if` statement**\nfor the up arrow button to see how it works.\\r\n* **Add an `if` statement**\nto the down arrow event handler:\\r\n\\t* **If** `count` is equal to **-5, then**\nset the screen to the \"gameOverScreen.\"\\r\n* **Goal:** Once you're finished,\nclicking the down arrow in the app should work like the animation shown to\nthe right.\\r\n\\r\n<details><summary><strong><big>HINT:</big></strong> [click\nto expand]</summary>\\r\nThere is a subtle challenge here that you need to\nset the text of the label on the <i>gameOverScreen</i> when you change screens.\\r\n<p>\\r\n</p>\\r\n<b>NOTE:</b>\nYour code can call `setText` for any UI element, on any screen, at any time\n- even if the element isn't on the screen that's currently showing.\\r\n</details>\\r\n\\r\n"
      CSPU5_U3L15 - add code to make count down work_markdown_instruction: "# Make\nCount Down Work\\r\n\\r\n<img src=\"https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif\"\nstyle=\"float: right; width: 200px\">You now know enough about using global\nvariables (and some of the problems you might run into) to try it yourself.\\r\n\\r\nLet's\nstart with an easy task. Right now clicking the up arrow works as expected;\n**clicking the down arrow does not**. So...\\r\n\\r\n# Do This:\\r\n**Make the\ncount go down by 1 every time the down arrow is clicked**\\r\n\\r\n* Study how\nthe up arrow works, and use it as an example for writing the code for the\ndown arrow.\\r\n* Add and modify the code so that when the down arrow is clicked\nthe count goes down.\\r\n* When you're done the app should work like the animation\nshown to the right.\\r\n* HINT: Don't forget to set the text of the label.\\r\n\\r\n"
      CSPU5_U3L15 - count upDown bug forget to set text_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThis program has a bug that doesn't produce an error.\nIt just doesn't do what's expected.  The reason is a common mistake that\nall programmers make.\\r\n\\r\n# Do This:\\r\n* **Run the program.**\\r\n* **To\nsee the bug:**\\r\n * Click the up arrow about 5 times.\\r\n * Click the down\narrow about 10 times.\\r\n * Click the up arrow again.\\r\n* **Look at the code\nand fix the problem.**\\r\n* **Read about the common mistake** by expanding\nthe area below.\\r\n* **Once you've fixed the issue, move on.**\\r\n <p>\\r\n\\r\n</p>\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...forgetting\nto update the display after changing something in the program</big>\\r\n\\r\n\\r\n<h1>\nMisconception Alert - Changing a Variable Doesn't Change the Display</h1>\\r\n\\r\nA\ncommon misunderstanding about variables and displaying them is to think that\na text label that's displaying a variable will change when the variable changes.\nNO.  A text label is just \"dumb\" container for text.  It's similar to a\nvariable itself in that it won't change unless you explicitly tell it to.\\r\n<p></p>\\r\n<h1>Concept:\nSeparation of Program Data from How It's Viewed</h1>\\r\nMaintaining variables\nand program data is a **different task** from maintaining the display of the\napp.  Your program could actually run without updating the display at all\n- it would still be working behind the scenes; it just wouldn't be very fun\nor interesting to use.\\r\n<p></p>\\r\n</details>\\r\n\\r\n\\r\n"
      CSPU5_U3L15 - count upDown bug logic error wrong update_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThis program has a few different bugs. Find them and squash\nthem!\\r\n\\r\n# Do This:\\r\n* **Run the program.**\\r\n* **To see the bug:**\\r\n\n* Click the up arrow exactly twice.\\r\n \\t* Restart the program and do this\na few times - you'll notice nothing happens the first time you click.\\r\n\n* Click the down arrow several times.\\r\n* **Look at the code and fix the\nproblem.**\\r\n* **Read about the common mistake** by expanding the area below.\\r\n*\n**Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...updating\nthe wrong thing in the wrong event handler.</big>\\r\n<p></p>\\r\nThere are\ntwo common mistakes here:\\r\n<p></p>\\r\n1. Mixing up which event handler should\ndo what.\\r\n<p></p>\\r\n2. Updating the display **before** any change is made\nto the underlying data of the program. \\r\n\\tThis can make the app seem oddly\nout of sync where each event triggers an update to the display that reflects\nthe **last** thing done, not the current thing.\\r\n<p></p>\\r\n</details>"
      CSPU5_U3L15 - count upDown bug var not created globally_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThis program has a few different bugs that are related\nto the same problem.\\r\n\\r\n# Do This:\\r\n* **Run the program.**\\r\n* **To\nsee the bug:**\\r\n * Click the up arrow several times.\\r\n * Click the down\narrow.\\r\n* **Look at the code and fix the problem.**\\r\n* **Read about the\ncommon mistake** by expanding the area below.\\r\n* **Once you've fixed the\nissue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read about the\ncommon mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...thinking\nyou're referencing a global variable when you're not.</big><br>\\r\n\\r\nA\ncommon mistake is basically a syntax/spelling error. These mistakes can be\nreally tricky to work out because you *think* you know what you wrote, but\nthe computer doesn't see it that way :)\\r\n<p></p>\\r\n</details>\\r\n\\r\n\\r\n"
      CSPU5_U3L15 - global var example count up_markdown_instruction: "# Using Variables\nin Apps!\\r\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\"\nstyle=\"float: right; width: 200px;\">\\r\nThe example program here has a small\nportion of the *Count Up/Down App* written.  Right now, what the app should\ndo is  shown in the animation to the right.\\r\n\\r\n# Important Concept!\\r\n\\r\nThis\nsmall functionality **demonstrates an important concept** - how to create\na variable in the app and update it when an event occurs. It may seem fairly\nstraightforward but there are some common misconceptions that we want to alert\nyou to.\\r\n\\r\n# Do This: Misconception Investigation\\r\nOver the next few\nlevels you are going to do a small investigation of two apps that do almost\nthe same thing but *one  works as expected* and *one with a bug* that demonstrates\nan important concept about using variables in apps.  Here is what you'll\ndo:\\r\n\\r\n1. **Run this app, which works properly.**\\r\n * Study the code\nuntil you think you understand what's happening.\\r\n * Pay attention to the\ncode that handles the up arrow being clicked.\\r\n\\r\n2. **Run the app on the\nnext screen, which has a bug.**\\r\n * On the next screen we show you almost\nthe same app, but with a subtle problem.\\r\n * See if you can spot the difference\nand fix it.\\r\n\\r\n3. **Report what you found!**\\r\n * We'll ask you to report\nwhat you found.  It's not a quiz.  You can go back and forth until you spot\nthe problem, but you should find it and be able to write what it is.\\r\n"
      CSPU5_U3L15 - mini clicker update score_markdown_instruction: "# Using Global\nVariables\\r\n\\r\nYou'll now look at a version of the clicker game. We've\nset up the basic functionality to move the apple around the screen, and have\n__created a global variable to keep track of the score.__\\r\n\\r\n# Do This:\\r\n__Add\ncode to update the score when the apple is clicked.__ Remember that you'll\nhave to update both the global variable _and_ the label text!\\r\n\\r\n<img\nsrc=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\"\nstyle=\"width:200px\">"
      CSPU5_U3L15 - practice with setText_markdown_instruction: "# Changing Elements\non Screen \\r\n\\r\nThere's another way to display text in your app besides\n`console.log` and `write`.  \\r\n\\r\nThere is a command called `setText` which\nwill **change the text of a component on screen** given its id. This is a\nvery powerful technique and one that you will use a lot. Here's what it looks\nlike in action....\\r\n\\r\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\"\nstyle=\"width: 500px\">\\r\n\\r\nLet's do a **very simple** example of using\n`setText`.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\"\nstyle=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\\r\n* **Run\nthe code** in the app.\\r\n \\r\n Look at the code for the \"upArrow\" event\nhandler and how it sets the text of the label.\\r\n \\r\n* **Modify the code.**\\r\n\n\\r\n When the down arrow is clicked, set the text of the label to something\nelse.\\r\n\\r\n* **GOAL:**\\r\n * Your only goal is to successfully use `setText`\nin this example app.\\r\n * The app should do something similar to the animated\nexample at right.\\r\n\\r\nOnce you've got it functional, click Finish to move\non.\\r\n \\r\n\\r\n"
      CSPU5_U3L15 - variable scoping problem debugging_markdown_instruction: "# Debugging\nProblem!\\r\n\\r\n**Uh oh!** The code here is subtly different from the one\nin the previous example and **now there is a problem**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the app** and try it to see the problem. \\r\n* **See the error.**\\r\n\n* Note that **NaN** stands for \"Not a Number\" - why would it say this?\\r\n*\n**Note the difference** between this broken version and the previous one that\nworked.\\r\n* **Fix the problem** so that it works as before."
      CSPU5_U3L15 click add lives_markdown_instruction: "# Tracking Lives\\r\n\\r\nIn\nthe game, the number of lives starts at 3 and decrements by 1 every time the\nbackground image is clicked. Add this functionality to your game!\\r\n\\r\n#\nDo This:\\r\n- __Add your variable to keep track of lives.__\\r\n- __Add a click\nhandler for the background image.__ _ID: \"background\"_\\r\n- __When the background\nis clicked, decrement the number of lives by 1.__\\r\n\\r\n<img src=\"https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif\"\nstyle=\"width:200px;\">"
      CSPU5_U3L15 full clicker app_markdown_instruction: "# Make Your Own \"Clicker\"\nGame\\r\nYou will be creating your own “clicker” game similar to the Apple\nGrabber game you worked on in this lesson. \\r\nThe general object of the game\nis to click on an element that jumps around every time you click it. You will\npick your own theme and decide what the rules are and how to keep score.\\r\n\\r\n**\nYour Main Tasks Are To:**\\r\n\\r\n * Pick a theme for your game and add appropriate\nimages and styling.\\r\n * Add variables to track some data during gameplay.\\r\n\n* Add code to event handlers to update the variables and display appropriately.\\r\n\n\\r\n**See Activity Guide for Requirements**\\r\n\\r\nThere is a full activity\nguide and rubric for this project.  You can find a link to it in the student\nresources section for this lesson. Or ask your teacher for it.\\r\n \\r\n<img\nsrc=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\"\nstyle=\"float: right; width: 300px\">\\r\n** Template **\\r\n\\r\nThis level\nis a template for the app. You should **run it to see what it does** right\nnow. You will modify *this* template, both the design elements and the code,\nfor your project.\\r\n\\r\nThe template has 4 screens and some basic navigation\nfunctionality and event handlers set up for you.  The game play screen uses\nthe images from the Apple Grabber game, but you should replace these with\nimages related to your chosen theme.\\r\n\\r\n"
      CSPU5_U3L15 spot the difference variable debugging_markdown_instruction: "Respond\nto the following questions about your investigation into the bug with the\ncounting game. Feel free to go back and look at the game again (but do so\nin another tab or be sure to click \"Submit\" to save your work!):\n\n- From\nthe user's perspective, what was the difference between the first version\nof the game and the one with the bug?\n- From looking at the code, what specifically\nwas the difference between the two, and why is that an issue?\n- How did you\nfix the bug?\n"
      CSPU5_U3L16 - challenge say hi app_markdown_instruction: "# Introducing the  *change*\nEvent\\r\n\\r\nDid you notice with the demo digital assistant that you could\njust __type a question, hit 'enter', and the assistant would respond__?\nUp until now you've been using the click of a button to trigger getting the\ntext from an input or text area.\\r\n\\r\nYou can use a new event type to get\nthis behavior: The __'change' event__ is triggered when the user hits 'enter'\nin a text input after typing.\\r\n\\r\n\\r\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\"\nstyle=\"width:350px;\">\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\"\nstyle=\"width:250px;\">\\r\n- A __text input__ has been created for you that\nasks for a user's name.\\r\n- Attach a __'change'__ event handler to the\ntext input.\\r\n- When the 'change' event triggers, __write the user's name\nand a greeting__.\\r\n"
      CSPU5_U3L16 - chaserApp_markdown_instruction: "# Chaser Game\\r\n\\r\nYou now\nhave all the skills you need to make a simple \"chaser\" game. A chaser game\nis just a game where an image runs away from your mouse.\\r\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\"\nstyle=\"float: right\">\\r\n\\r\n# Do This:\\r\n\\r\n**Create a \"Chaser Game\"**\nwhich includes the following components:\\r\n\\r\n* **Text** on the top of the\nscreen with a title or instructions for what to do.\\r\n* **An image** that\n\"runs away\" (moves randomly) based on some mouse event.\\r\n\\r\nOnce you\nhave the basic functionality down feel free to spend time adding more features\nto your application.\\r\n<br><br><br>\\r\n\\r\n"
      CSPU5_U3L16 - chooseImages_markdown_instruction: "# Choosing Your Own Images\\r\n\\r\nThe\nsecond parameter of the `image` command allows you to set the image to be\ndisplayed.  There are two ways to do this:\\r\n1. Provide the URL of an image\non the web.\\r\n2. Upload an image from your computer (by clicking \"choose...\").\\r\n\\r\n![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49\nPM.png)\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation for `image`**\nfor tips on how to find an image's URL and how to upload.\\r\n* **Change the\nimage** to one you've found online or from your own computer.\\r\n\\r\n**NOTE:**\nmany images are bigger than the screen of your app, so it's likely you'll\nneed to add a `setPosition` command to get it on the screen sized the way\nyou want."
      CSPU5_U3L16 - doubleQuotes_markdown_instruction: "# Importance of Double Quotes\\r\n\\r\nYou\nmay have noticed that the strings we've seen are **wrapped in double quotes**.\nThese double quotes **are not part of the string**. Instead this is how you\nindicate that a sequence of characters **is a string and not the name of a\nvariable**.\\r\n\\r\nAs you start writing programs with strings **it is common\nto generate errors from forgetting to place them in double quotes**. We're\ngoing to generate some of those errors now so that we can recognize them more\neasily later.\\r\n\\r\n![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **This program generates many errors**\nbecause strings were not placed in quotes.\\r\n* **Run the program** before\nyou change it to see the errors that are generated.\\r\n* **Add double quotes**\naround all the strings so that the program runs without errors.\\r\n\\r\n"
      CSPU5_U3L16 - intro getText_markdown_instruction: "# Getting Text Input\\r\n\\r\nAs\nwe saw a user can now type inside of a text input whenever they want, **but\nnow we'll need a way to access that text**. In order to do that you'll need\nto use the `getText` command, which you can now find in the **UI Controls**\ntab.\\r\n\\r\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24\nPM.png\" style=\"width: 150px;\">\\r\n\\r\nYou can use a `getText` command just\nlike a string within a `console.log` or `write` command. Just like with `setText`\nyou will refer to the UI element by its ID.\\r\n\\r\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation **  for `getText`.\\r\n*\n**Add an event handler to the Submit button** that fires when your button\nis clicked.\\r\n* **Inside the event handler** place code that will **log the\nname your user input to the console**.\\r\n\\r\n"
      CSPU5_U3L16 - introSetPosition_markdown_instruction: "# How to Organize the\nCode\\r\nAs your apps get more complex you'll have to think about how to organize\nyour code so it remains readable and easy for you to locate things when debugging\nany problems.  We suggest the following convention which breaks the code into\n3 major sections:\\r\n* **Top**:  code for UI elements **and** any code for\npositioning them.\\r\n* **Middle**: code for event handlers.\\r\n* **Bottom**:\ncode for any other other functions you've written. (We don't have any of\nthese yet.)\\r\n\\r\nSo if you have some existing code and want to insert a\n`setPosition` command, you should place it after `button` but before `onEvent`\nin the code, like this:\\r\n\\r\n<img src=\"https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif\"\nstyle=\"width: 500px\">\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png\"\nstyle=\"float: right; width: 175px\">\\r\n\\r\n* **Starter code** has been provided\nwhich creates two buttons and event handlers.\\r\n* **Insert** `setPosition`\ncommands for each button so they appear at the bottom of the screen (as shown).\\r\n  *\n**Remember:** in an app screen 0,0 is the top left corner and you specify\na location by how many pixels from the left and how many down from the top\nof the screen it is.  The screen is **320 by 450 pixels**."
      CSPU5_U3L16 - introStrings_markdown_instruction: "# Strings\\r\n\\r\nThe primary\ndata type we have used so far is **Numbers**. If we want to interact with\nuser-submitted text, however, we'll need to learn about a new data type called\na **String**.  A string is a **sequence of ASCII characters**.\\r\n\\r\n**Example**\n| **Rule**\\r\n---|---\\r\n`\"aString\"` | Strings **might** look a lot like\na variable name but there are **many differences**.\\r\n`\"look at all these\nspaces\"` | Strings can **contain spaces**.\\r\n`\"$2 bills are the coolest\"`\n| Strings can **contain special characters** (and even start with them).\\r\n`\"11\"`\n| Strings might **contain only digits**. This looks like a number but it is\nreally 2 ASCII characters.\\r\n`\"\"` | Strings might **contain no characters**.\\r\n<br>\\r\nYou\ncan **store strings in a variable just like a number**. In this example the\nvariable name is `str` but you should choose a name that is **descriptive\nand meaningful**.\\r\n\\r\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40\nPM.png)\\r\n\\r\n**Combining Strings:** often you will want to combine multiple\nstrings to create one longer string. You can do this with the `+` operator.\nThe formal name of this process is **concatenation**.\\r\n\\r\nThe program you're\nabout to see is a very simple Mad Libs app that uses strings that are created\ninside the program and  saved inside of variables. These strings are then\n**concatenated** with other strings to create a Mad Lib.\\r\n\\r\n# Do This:\\r\n\\r\n*\nThe input words of this Mad Lib are **currently set to the empty string**.\\r\n*\n**Add your own input words** and run the program to generate the Mad Lib."
      CSPU5_U3L16 - newEventTypes_markdown_instruction: "# New Elements and Events:\nNew Event Types\\r\nYou just wrote your first program that **does not include\nthe turtle**! Moving forward we're going to focus much more on programming\napps that use User Interface (UI) elements, but we'll keep the turtle library\naround in case you want to use it.\\r\n\\r\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06\nAM.png\" style=\"float: right\">\\r\n\\r\n**New Events**: You may have noticed\nthat the `onEvent` block has a pull-down menu for the event **type** (see\nright).\\r\n\\r\n# Do This:\\r\n\\r\n* **Experiment** with **each of the different\ntypes of mouse events** by selecting from the list. You can also read about\nthem in the documentation.\\r\n\\t* click\\r\n    * mousemove\\r\n    * movedown\\r\n    *\nmouseup\\r\n    * mouseover\\r\n* **Choose** the mouse event type you like most\nand change your event handler to use it.\\r\n* **Note:** There are some events\nthat capture keystroke events. These are interesting, but they do not work\neasily with buttons.  We'll stick to mouse events for now, and get to keys\nlater.\\r\n\\r\n**Be sure** to experiment with each one.  The next exercise\nwill quiz you on which one is which.\\r\n\\r\n"
      CSPU5_U3L16 - outputWithTextArea_markdown_instruction: "# Generating Text Output\\r\n\\r\nSo\nfar we've been outputting our messages to the console, but now we'd like\nto display them in the app. In order to do so we're going to be using a new\nUI element called a `textArea`. You can use `setText` with a `textArea` just\nlike you would with a `textLabel`.\\r\n\\r\n![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43\nPM.png)\\r\n\\r\nIf we want to combine user input with default text we can do\nso with **string concatenation**. Together with a `textArea` we can use this\nability to compose longer messages based on user input.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add a `textArea`** to your app and give it a descriptive and meaningful\nID.\\r\n* **Create a variable inside your event handler** called `userMessage`\nto hold the full message that will be sent to the user.\\r\n* **Use string\nconcatenation** to compose a message from the user input.\\r\n* **Use `setText`**\nto place your `userMessage` inside the `textArea` you created.\\r\n\\r\n<img\nsrc=\"https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08\nPM.png\", style=\"width:250px;\">"
      CSPU5_U3L16 - setPosition to fixed location_markdown_instruction: "# Using\nsetPosition\\r\n\\r\n<img src=\"https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif\"\nstyle=\"width: 150px; float: right;\">\\r\n\\r\n**Now you try it** - use  [setPosition](#triggercallout=setPosHover)\nto **move the button to the middle of the screen when clicked**. We've set\nup a small project for you with a button (id: `moveBtn`) already added in\ndesign mode.\\r\n\\r\n1. Add an `onEvent` block\\r\n2. Drag a `setPosition` command\ninto the event handler function\\r\n3. Set the x,y coordinate so that the button\nends up in the middle of the screen.\\r\n * You'll need to experiment a little\nbit to find coordinates that work for you.\\r\n * Hover over the screen to\nfind a good starting point.\\r\n\\r\n**Tip**: when you see a command that is\nlinked like this: [setPosition](#triggercallout=setPosHover) click it! --\nit will show you other hints.\\r\n\\r\nOnce you've got the button moving to\nthe middle of the screen click Finish to move on to the next challenge.\\r\n"
      CSPU5_U3L16 - setPosition to move button_markdown_instruction: "<img src=\"https://images.code.org/dc1f942b805f07b3581c678ed1669a27-image-1476892595302.gif\"\nstyle=\"float: right\">\\r\n# Using setPosition and randomNumber\\r\n\\r\n<img\nsrc=\"https://images.code.org/a501391fac0c396a197aaaf357e73972-image-1476892143359.gif\">\\r\n\\r\n**Now\nyou try it** - instead of using a fixed value, you use [randomNumber](#triggercallout=showRand)\nto set the x and y coordinates for setPosition.  Now you'll have to chase\nthe button all over the screen!\\r\n\\r\n* Make it so that the button could\njump *anywhere* on the visible screen each time it's clicked.\\r\n* Extend\nit: if you want to get really nuts, you could add back in the *width* and\n*height* parameters of setPosition and make the size of the button *also*\nchange randomly with each click!\\r\n\\r\nOnce you've got the button jumping\naround the screen.  Click **Finish** to move onto the next level.\\r\n"
      CSPU5_U3L16 - singleSetPosition_markdown_instruction: "# Moving and Sizing\nButtons\\r\n\\r\nAn important component of designing intuitive and visually\nappealing user interfaces is the location of the elements on the screen. Using\nthe `setPosition` command (now added to the Toolbox) you can move and set\nthe size of user interface elements.\\r\n\\r\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48\nAM.png)\\r\n\\r\n**NOTE:**\\r\n * If you only want to set the size you can use\nthe `setSize` function which looks like this:\\r\n\\r\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\\r\n\\r\n\n* If you *only* want to set the position *without* changing the size of the\nelement, you can omit the *width* and *height* parameters from the `setPosition`\nfunction.  To do that, you need to switch into text mode, like this:\\r\n\\r\n\n<img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'\nstyle=\"width: 400px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `setPosition`.\\r\n* **Starter code** has been provided which creates a\nsingle button.\\r\n* **Move the button to the middle of the screen** using\n`setPosition`, as in the image below. (You may need to experiment a little\nbit with the x,y location to get it right).\\r\n* **Remember:** in an app screen\n0,0 is the top left corner and you specify a location by how many pixels from\nthe left and how many down from the top of the screen it is.  The screen is\n**320 by 450 pixels**.\\r\n\\r\n![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05\nAM.png)\\r\n\\r\n"
      CSPU5_U3L16 - text labels_markdown_instruction: "# New Elements and Events:\nText Labels\\r\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\"\nstyle=\"float: right\">\\r\nThe UI controls toolbox contains an element called\n`textLabel`. A text label is what it sounds like: plain text that you can\nput in your app. Even though it's just plain text you can still move and\nresize it using `setPosition`, and you can attach event handlers to it as\nwell.\\r\n\\r\n**NOTE:** resizing a text label does not change the font size\nof the text.  We'll learn how to do that later.  \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read the documentation** for `textLabel`<img src=\"https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif\"\nstyle=\"float: right; width: 150px\">.\\r\n* **Modify** the program so that\nyour button is now a text label. Just as before, it should move randomly around\nthe screen when clicked. You can make the text whatever you like.\\r\n* **Tip:**\nIf you reuse your button's ID you'll only need to change a single line of\ncode to make your program work. Once you have your program working **choose\na descriptive and meaningful ID** for your text label and make the appropriate\nchanges in the event handler.\\r\n\\r\n<br>\\r\n<br>\\r\n<br>\\r\n\\r\n"
      CSPU5_U3L16 - textInput getText write_markdown_instruction: "# Text Input Elements\\r\n\\r\nSo\nfar we've been using `promptNum` as a simple way to get a number as input.\nNow that we know a little about strings we are going to create **user interface\nelements that users can use to submit text (i.e. strings) instead**. The first\nand simplest example is `textInput` which you can find in Design Mode.\\r\n\\r\n<img\nsrc=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19\nPM.png\" style=\"width: 100px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Add two text\ninput elements to this program**, one for the name and one for the age of\nthe user.\\r\n* **Give your text input elements descriptive and meaningful\nIDs**.\\r\n* **In Design Mode** set their default text to prompt the user for\ntheir name and age.\\r\n* **Compare your app to the example below**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11\nPM.png\" style=\"float:left; width:200px;\">\\r\n<br>"
      CSPU5_U3L16 - toUpper_markdown_instruction: "# String Capitalization\\r\n\\r\nIf\nyou want to change the capitalization of a string you can do so with two new\nfunctions\\r\n\\r\n![](https://images.code.org/d8523cdae7c07b34baa1c61809bb80d4-image-1445980407200.42.31\nPM.png)\\r\n\\r\nNote that the syntax is similar to `console.log` . This is\nbecause `toUpperCase` really only makes sense as a command when you are using\na **string**, just as `log` only makes sense when you are talking about the\nconsole. This function **evaluates to a new string in which all characters\nhave been made uppercase / lowercase**. If you want to update the value in\nyour original variable you'll have to do so explicitly, as in\\r\n\\r\n```\\r\nvar\nmyString = \"lower case for now\";\\r\nmyString = myString.toUpperCase();\\r\n```\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Update your application so that the user's name is printed\nin UPPERCASE**.\\r\n\\r\n<img src=\"https://images.code.org/26d8ffb7c631c1c510f781b5bf46d494-image-1445980322936.04.55\nPM.png\", style=\"width:250px;\">"
      CSPU5_U3L16 - use images_markdown_instruction: "# New Elements and Events:\nImages\\r\n\\r\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25\nAM.png\" style=\"float: right; width: 120px\">\\r\nImages make applications\nmore visually pleasing and interactive. You can add images to your application\nusing the `image` command. For now, just add an `image` element to your app\n(the default image link is the Code.org logo) and don't worry about choosing\na unique image just yet. We'll do that in the very next exercise!\\r\n\\r\n\\r\n#\nDo This:\\r\n<img src=\"https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif\"\nstyle=\"float: right; width: 250px\">\\r\n\\r\n* **Modify** the program - change\nthe `textLabel` to an `image` so that the image moves randomly around the\nscreen based on the event you chose.\\r\n* **Tip:** If you reuse your text\nlabel's ID you'll only need to change a single line of code to make your\nprogram work! Once you have your program working though, it's probably a\ngood idea to choose a descriptive and meaningful ID for your image and make\nthe appropriate changes in the event handler.\\r\n\\r\n<br>"
      CSPU5_U3L16 Mad Lib Clear Input_markdown_instruction: "# Play It Again and\nAgain!\\r\n\\r\nWhen the user clicks the \"Play again\" button, the first screen\nshould reset and not show the user's previous text.\\r\n\\r\n# Do This:\\r\n-\nWhen the \"Play again\" button is clicked, __clear the text from each text\ninput__ on Screen 1.\\r\n- __Free play:__ Add images, or more How-to steps\nfor your Mad Libs, and invite others to play!\\r\n\\r\n<img src=\"https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14\nMad Libs play again button.gif\" style=\"width:200px\">\\r\n\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nTry\nsetting the text to the empty string: `\"\"`.\\r\n</details>\\r\n"
      CSPU5_U3L16 Mad Lib Demo_markdown_instruction: "# Getting Text from the User\\r\n\\r\nUp\nuntil now, the event-driven apps you have created responded to the user clicking\nan element or typing a number when you used `promptNum`. __What if we want\nthe user to provide _text_ instead of a number?__ You can probably think of\nmany apps and websites that ask you to provide text in order to do something.\\r\n\\r\nIn\nprogramming, we have to represent text in a specific way to distinguish it\nfrom other words in our code, such as variable names. But we'll cover that\nlater...\\r\n\\r\nAt the beginning of class you created a Mad Libs on paper,\nwhich takes user input in the form of nouns, adjectives, and verbs to create\na unique \"How-to\" manual. You'll be translating your own Mad Libs How-to\ninto an app in this lesson.\\r\n\\r\n# Do This:\\r\n\\r\n- __Play with this Mad\nLibs app__ a couple of times to see a digital version of the paper game. \\r\n-\n__Think about how the final text is created__ based on the input from the\nuser. How would you describe in words the algorithm for creating it?"
      CSPU5_U3L16 Mad Lib Student Setup_markdown_instruction: "# Back to Mad Libs:\nDesign Your App\\r\nNow that you've had some practice getting user text and\nmaking new strings with it, you're ready to turn your How-to Mad Libs into\nan app. To get started, you'll set up the layout. There are two main screens:\\r\n\\r\n__Screen\n1: Collect User Input__  \\r\n- On this screen, you'll use __text labels__\nand __text input__ design elements to set up the different words you want\nthe user to provide.\\r\n- A __Next__ button takes you to Screen 2 to view\nthe full Mad Libs.\\r\n\\r\n__Screen 2: View Mad Libs__  \\r\n- On this screen,\nyou'll use the __text area__ design element to create the space where the\nuser's completed Mad Libs will be displayed.\\r\n- A __Play again__ button\ntakes you back to Screen 1.\\r\n<br>\\r\n<br>\\r\n\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<strong>Screen\n1:</strong>\\r\n</td>\\r\n<td>\\r\n<strong>Screen 2:</strong>\\r\n</td>\\r\n</tr>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17\nPM.png\" style=\"width:150px;float:right;\">\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png\"\nstyle=\"width:151px;float:right;\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n#\nDo This:\\r\n\\r\n- Create the two screens for your app, including the design\nelements in each one.\\r\n- Requirement: Request at least 3 separate words\nfrom the user on Screen 1.\\r\n- Create the event handlers for the __Next__\nand __Play again__ buttons to respond to clicks.\\r\n- Use `setScreen` in the\nevent handlers to get the screen navigation working."
      CSPU5_U3L16 Mad Lib getText_markdown_instruction: "# Make It Mad! Add the User's\nText to Your Mad Libs Outline\\r\n\\r\nNow that you have your Mad Libs outline\nappearing in the text area, it's time to __incorporate the user's text__\nto make your Mad Libs come alive.\\r\n\\r\n# Do This:\\r\n\\r\n- Did you pick\ngood ID names for your text input elements? Update them now if you didn't!\\r\n-\nWhen the __Next__ button is clicked, __get the user's text from the text\ninputs on Screen 1 and store each in a separate variable__.\\r\n- Use string\nconcatenation to __incorporate the user's text into your Mad Labs string__\nbefore updating the text area on Screen 2. \\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nUse\n`getText` to get the text from each of the text inputs on Screen 1.\\r\n</details>\\r\n<details>\\r\n<summary>**Should\nI make local or global variables?**</summary>\\r\nRemember that the decision\nto create local variables or global variables is a question of _scope_. Where\nwill you need to access these variables in your program? If you are only using\nthe variables in the click callback function for the \"Next\" button, then\nthey can be _local_ variables in that function. \\r\n</details>"
      CSPU5_U3L16 Mad Lib setText_markdown_instruction: "# Update the Text Area with\nYour Mad Libs Outline\\r\n\\r\nWhen figuring out how to make progress with a\nprogram, it helps to break the problem down into smaller steps and test your\nprogram incrementally. So rather than jumping straight to getting the user\ninput and __concatenating__ it with your Mad Libs outline, start first by\njust making sure that you can get your Mad Libs outline to appear in the text\narea when the __Next__ button is clicked on the first screen. \\r\n\\r\nBut\nwait! If you just use `setText` and pass in the string of your Mad Libs outline,\nit will look like the screen on the left where all the steps are smushed together.\nYou can use one or more newline characters, `\"\\n\"`, in your string to create\na line break in your text.\\r\n\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<strong>Without\nnewlines</strong>\\r\n</td>\\r\n<td>\\r\n<strong>With newlines</strong>\\r\n</td>\\r\n</tr>\\r\n<tr>\\r\n<td>\\r\n\\r\n<img\nsrc=\"https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png\"\nstyle=\"width:201px;float:right;\">\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png\"\nstyle=\"width:200px;float:right;\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n#\nDo This:\\r\n\\r\n- When the __Next__ button is clicked, you already switch\nto Screen 2, but now you should also call `setText` on the text area on Screen\n2 to your Mad Libs outline. See the images above for one way to temporarily\nhandle the word placeholders.\\r\n- Add in newline characters `\"\\n\"` in\nyour Mad Libs string to format it.\\r\n\\r\n<details>\\r\n<summary>**Newline\nExamples**</summary>\\r\n<table style=\"width:100%; margin-left:25px;\">\\r\n<tr>\\r\n<td\nstyle=\"vertical-align: text-top; border-right:1px solid #000\">\\r\n\\t**Example1:**<br/><br/>\\r\n    \\r\n    <samp>console.log(\"How\nto Drive\\nStep 1.\");<br/><br/></samp>\\r\n    \\r\n    *will be displayed\nas...*<br/><br/>\\r\n    \\r\n    <samp>How to Drive<br/>Step 1.<br/><br/></samp>\\r\n    \\r\n    *...on\nyour console.*\\r\n</td>\\r\n<td style=\"padding-left:20px;\">\\r\n<samp>**Example2:**<br/><br/>\\r\n    \\r\n    var\nstep1 = \"Step 1: ...\";<br/>\\r\n    \\r\n    var step2 = \"Step 2: ...\";<br/>\\r\n    \\r\n    console.log(step1\n+ \"\\n\" + step2);<br/><br/></samp>\\r\n    \\r\n    *will be displayed as...*<br/><br/>\\r\n    \\r\n    <samp>Step\n1: ...<br/>Step 2: ...<br/><br/></samp>\\r\n    \\r\n    *...on your console.*\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n</details>"
      CSPU5_U3L16 Mad Lib toUpper_markdown_instruction: "# Why Are You Yelling At\nMe?! *toUpperCase* and *toLowerCase*\\r\n\\r\nThe main functionality of the\nMad Libs app is complete, but there are some finishing touches to add. The\nuser may type input with random letter capitalization, but the Mad Libs output\nstring should be consistently capitalized.\\r\n\\r\n# Do This:\\r\n\\r\n- Pick\none or more pieces of the user's input text to transform into \"yelling\"\nor emphasize by __making it uppercase__ before displaying it.\\r\n- For the\nother pieces of the user's input text, __make it lowercase__ before displaying\nit.\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nRemember the rules\nof updating variables! You can update a variable after first getting its current\nvalue and then doing something with it. <br> Example: `song = song.toUpperCase();`\\r\n</details>"
      CSPU5_U3L18 comparison operators_markdown_instruction: "# Explore Comparison\nOperators with Console.log\\r\n\\r\n**Your task:** Make each expression evaluate\nto **true** by changing only the comparison operator.\\r\n\\r\nWe can easily\ntest the results of comparison operators with `console.log`. \\r\n\\r\n* Run\nthe code provided - see results in the console debug area below.\\r\n* All\nof the Boolean expressions currently evaluate to `false`.\\r\n* **Modify the\ncode** so they all evaluate to `true`\\r\n* **Change only the operator**\\r\n\\r\nExample:\\r\n\\r\n*\n`(3 > 4)` evaluates to **false**...\\r\n* Change it to `(3 < 4)` (*3 is **less\nthan** 4*) to make it **true*\\r\n\\r\n**HINT:** The workspace starts in text\nmode because you might find that doing this in text mode is much easier and\nfaster than dragging out new blocks.  You can flip back to block mode if you\nlike.\\r\n"
      CSPU5_U3L19 - fix the var name syntax error v2_markdown_instruction: "<!---\\r\n#\nDebugging Variables\\r\n<img src=\"https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\\r\n\"\nstyle=\"float: right; border: solid 1px black; width: 350px\">\\r\n\\r\nOne\nof the most common errors that can happen when you try to run a program is\n`Unknown identifer`.\\r\nThis is just the computer trying to tell you that\nit doesn't recognize something you wrote.  Usually it's the name of a variable\nor function that you're trying to write and there is a small misspelling.\\r\n\\r\n**The\ncomputer doesn't hate you :)** It just needs everything to be exact so it\ncan understand what you're trying to get it to do.\\r\n\\r\n**App Lab** alerts\nyou to potential errors in two ways:<img src=\"https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif\"\nstyle=\"width: 350px; float: right; border: solid 1px black\">\\r\n\\r\n* Hover\nyour mouse over the yellow triangles or red squares next to line numbers in\nthe code to see what they say.\\r\n* As usual, the Debug Console will also\ntell you about any errors while your program is running. \\r\n--->\\r\n\\r\n#\nDo This:\\r\nWe've given you some code with some errors in it.  Look at the\nerror messages and try to figure out the problem.\\r\n\\r\n* **Run the program**.\\r\n*\n**Locate and fix the error**.\\r\n\\r\nWhen you get it right the output to the\nconsole should look like this:\\r\n\\r\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\\r\n\\r\nAs\na reminder, App Lab gives you hints about errors in two ways: \\r\n\\r\n* Hover\nyour mouse over the yellow triangles or red squares next to line numbers in\nthe code to see what they say.\\r\n* As usual, the Debug Console will also\ntell you about any errors while your program is running. \\r\n"
      CSPU5_U3L19 - test reassignment of two vars_markdown_instruction: "# Variable\nReassignment - Part 1\\r\n\\r\nSo far we have only set a variable's value once.  But\nit's called a *variable* for a reason - its value can change (or vary) throughout\na program. This is useful and necessary for keeping track of things like a\nscore in a game.\\r\n\\r\nTo re-assign a value to a variable all you have to\ndo is maintain the mental model of what's happening:\\r\n\\r\n * Variables\nare containers for information.\\r\n * The `=` sign is an instruction to set\nthe value.\\r\n * A series of assignment statements (see example to right)\nis a list of instructions to execute one at a time - it's not a series of\nequations that define the state of the world.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\"\nstyle=\"float: right\">\\r\n\\r\n * **Make a prediction.**\\r\n\\r\n The code\non the following screen looks like what is shown at right.  Study it and make\na prediction about what will happen when you run the code. What will the values\nof `a` and `b` be at the end of the program?\\r\n\\r\n* **Add `console.log`\nstatements.** \\r\n\\r\n Prove it to yourself by adding `console.log` statements\nat the end of the program to find out what the value of `a` and  `b` are.\\r\n\n\\r\n* **NOTICE:** in the code above, after the variable `a` has been created\nusing `var`, to change a variable's value, you only need to refer to the\nvariable by its name. The word `var` only needs to be used once - when the\nvariable is created for the first time. \\r\n\\r\n* It's a **common mistake**\nto use `var` everytime you want to *use* a variable but just **remember `var`\nmeans CREATE a new variable**.  When you create a new variable it will lose\nits old value.  We'll look at errors related to this later.\\r\n\\r\n"
      CSPU5_U3L19 - three basic ops of variables_markdown_instruction: "# Variables\nToolbox\\r\nLet's get started with the most basic example of using and controlling\nthe computer's memory with variables. The toolbox has a couple of new commands\nfor working with variables.\\r\n\\r\nWe've given you some starter code that\ndoes three things:\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<ol>\\r\n<li>**Creates** a\nvariable called `score`</li>\\r\n<li> **Assigns** the value *0* to `score`</li>\\r\n<li>**Displays**\nthe value of the `score` to the console (see hint below about quotes) </li>\\r\n</ol>\n\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png\"\nstyle=\"width: 350px\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n# Do This:\\r\nYou're\ngoing to add another variable, assign it a value, and then display it to the\nconsole.\\r\nUse the starting code as a model for what you need to create now.\\r\n<img\nsrc=\"https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif\"\nstyle=\"float: right; width: 350px\">\\r\n* **Create a new variable** by dragging\nout the `var` block.\\r\n* **Change the name of the variable** from the default\n`x` to `lives` (see animation at right).\\r\n* **Set the value of `lives` to\nbe 3**.\\r\n* **Add** `console.log` **messages** to show the value of `lives`.\\r\n\\r\nThe\noutput in the debug console should look like this:\\r\n \\r\n  <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\"\nstyle=\"border: solid 1px gray\">\\r\n<details>\\r\n  <summary>  Debugging Tip:\nDisplaying values of variables [click to expand]</summary>\\r\n   **NOTE: To\nprint the value of a variable you *should not* use quotes.**\\r\n   Notice\nthe difference between these two statements: <br>\\r\n   `console.log(\"score\")`<br>\\r\n   `console.log(score)`<br>\\r\n   It's\nsubtle but important:\\r\n   <br>\\r\n   <li>When `console.log` sees quotation\nmarks it thinks you want to print out the literal characters in the quotes.\\r\n   <li>When\n`console.log` sees something **without quotation marks** it assumes you're\ntrying to print a variable, and it goes to retrieve its value and displays\nthat. </li>\\r\n \\r\n</details>"
      CSPU5_U3L19 - variable reassignment challenge pt2_markdown_instruction: "#\nWrapping Up Variables - This is Not Math Class\\r\n\\r\nHopefully you now understand\nthe gist of working with variables.  The major thing to remember is that every\ntime you see an `=` sign it means that you are instructing the computer to\nset a variable to a new value.  \\r\n\\r\n<img src=\"https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png\"\nstyle=\"float: right\">\\r\nThe example to the right is something that definitely\nwouldn't make sense in math class, but you should be able to reason about\nit as a piece of code.  Because it's code, you can also **insert** statements\nto display the value of variables as they change.  You don't have to guess!\\r\n\\r\n#\nDo This:\\r\n* ** Make a prediction.** \\r\n\\r\n As usual you should **first**\nlook at the code given to you and reason about what it does.  You should try\nto predict what the value of `num` will be after all lines have executed.\\r\n\\r\n*\n** Insert 3 `console.log` statements.**\\r\n\\r\n Insert `console.log` statements\ninto the existing code to display each value of `num` immediately after it's\nchanged. (The animation below shows how to get started.)\\r\n \\r\n ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24\nadd console message.gif)\\r\n \\r\n* **Was your prediction right?**\\r\n \\r\n\nAfter you figure out the answer, if your prediction was off, try to understand\nwhy.  Where was your misunderstanding?\\r\n"
      CSPU5_U3L19 - write var and string with same name v2_markdown_instruction: "#\nDebugging Variables\\r\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\"\nstyle=\"float:right; width: 200px\">There is a simple command called `write`\nin the UI Controls toolbox that is a fast and easy way to display text in\nthe app itself. The way you use it is very similar to `console.log`.  Let's\ndebug another problem only using `write` instead of `console.log`.  \\r\n\\r\nYou\nmay have already run into this problem!  But it's worth mentioning again.\nTo display the value of a variable you *should not* use quotes. Notice the\ndifference between these two statements - the comments next to each line explains\nthe differences:\\r\n``` \\r\n write(\"score\");  // will display the literal\ncharacters s-c-o-r-e\\r\n write(score);    // will retrieve the value of score\nand display it\\r\n```\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\"\nstyle=\"float: right; width: 250px\">To solve these problems you **should\nonly add or remove quotation marks**.\\r\n* **Run the starter code**\\r\n* **Locate\nand fix the problems**\\r\n\\r\n**GOAL:** Make the app display what's shown\nat right by only adding or removing quotation marks from the code given."
      CSPU5_U3L23 Chatbot Conditionals 1_markdown_instruction: "# Adding Intelligence\nUsing Conditionals\\r\n\\r\nSo far the digital assistant you created responds\nwith the same message no matter what the user types. Let's look at how to\nmake the digital assistant smarter. Let's work on creating a Movie Bot example\nbefore returning to your digital assistant.\\r\n\\r\nIn the last lesson we learned\nabout `if`, `else-if`, and `else` statements. These allow us to make decisions.\nIn the digital assistant we want to make decisions based on keywords. **The\nfirst keywords we want the Movie Bot to respond to are the movie genres: comedy,\nromance, action, and horror. **\\r\n\\r\n**Note: ** Check out the flowchart\nbelow to see the logic we are trying to add. The current portions of the diagram\nthat we are creating are <mark>highlighted in yellow</mark>.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the code** to understand what it does.\\r\n\\r\n* **Add `else-if` statements**\nto the `if` to check if the word the user typed matches **action, romance\nand horror**.  **Note:** Movie Bot will only understand input in the form\nof \"comedy\" not \"Comedy\" or \"What is a comedy?\" \\r\n\\r\n* **Add an `else`\nstatement** to print a default answer for any other input.\\r\n\\r\n<img src=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>\\r\n"
      CSPU5_U3L23 Free Response Getting Started_markdown_instruction: "Siri is a\ndigital assistant built into Apple's iOS devices, including iPhones and iPads.\nWatch the advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\"\nsrc=\"https://www.youtube.com/embed/8ciagGASro0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect\non the prompts below:__ \n\n- What types of information does Siri respond\nto in the video?\n- What do you think Siri is paying attention to in order\nto create these answers?\n"
      CSPU5_U3L23 Free Response Wrap Up_markdown_instruction: "Identify a global\nproblem that a NLP (Natural Language Processing) application could be used\nto help solve. \n\n* Describe the problem.\n* Explain how you think a NLP\napp could contribute to a solution.\n* Describe how the app would interact\nwith the user. \n* What would you name the app? \n\n"
      CSPU5_U3L24 Chatbot Basic Conditionals_markdown_instruction: "# Digital Assistant\nProject\\r\n\\r\n**Your Digital Assistant Project is back!** Now that you've\nlearned how to use conditional logic to control your program flow, it's time\nto add functionality to the digital assistant you previously designed.\\r\n\\r\n#\nDo This:\\r\n\\r\n* You should have already created a flowchart to design the\nlogic for your digital assistant. \\r\n* **Use your flowchart to program your\ndigital assistant so that it \"intelligently\" responds to user input.**\\r\n\\t*\nFeel free to make changes to your existing project in Design Mode, if needed.\\r\n*\n**Test your program thoroughly** to make sure your digital assistant responds\nto user input appropriately.\\r\n* Once you're done, **submit your project!**\\r\n"
      CSPU5_U3L24 Nested Conditionals 1_markdown_instruction: "# Adding *includes*\nto the Movie Bot\\r\n\\r\nIf our Movie Bot is asked a question like \"What is\na good comedy movie?\" it currently won't know how to respond, **even though\nthe question includes one of its keywords.** By using `includes` we can allow\nour Movie Bot to sense if a keyword appears anywhere in the question.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Suggestion: Switch to Text Mode.** This will be much easier\nin Text Mode.\\r\n* **Change all your boolean expressions to use `includes`\ninstead of `==`**.\\r\n* **Test out a couple sentences with your keywords**\nto make sure the change worked.\\r\n\\r\n![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to change.\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3L24 Nested Conditionals 2_markdown_instruction: "# Nested Conditionals\\r\n\\r\nThe\nway we left the Movie Bot in the last exercise is a little strange to see\nas a user. **Currently when the input doesn't have a question mark the Movie\nBot says \"I only respond to questions.\" but it still provides a recommendation**.\nWe're going to alter our code so that the movie recommendation is only provided\nif the user asks a question.\\r\n\\r\n# Do This:\\r\n\\r\n* **Nest your movie\ngenre `if` statements** inside the \"?\" `if` statement so that **a recommendation\nis made only if a question was asked**.\\r\n* **Remove the \"That's a good\nquestion.\"** output.\\r\n* Ensure that **if your input is not a question**\nthen the response is **I only respond to questions.**\\r\n* **Test out a couple\nsentences with your keywords** to make sure the change worked.\\r\n\\r\n**Example\nInput --->** | **Output**\\r\n---|---\\r\nWhat's the best action movie? | The\nbest action movie is any James Bond movie.\\r\nI love comedy | I only respond\nto questions.\\r\n<br>\\r\n**Note: ** Check out the flowchart below to see the\nlogic we are trying to change.\\r\n\\r\n<img src=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      CSPU5_U3L24 introIncludes_markdown_instruction: "# *includes*\\r\n<img src=\"https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43\nPM.png\" style=\"width: 250px; float:right\">\\r\n\\r\nWe're going to explore\na new function called `includes`. This function can be used to check if one\nstring appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase`\nthis function is called using **dot notation**.\\r\n\\r\n# *includes* Returns\na Boolean\\r\n**`includes` is a function that returns a boolean.** In other\nwords, when the function runs it will **evaulate to either `true` or `false`**.\nThis function can be used **anywhere you would normally use a boolean expression**.\\r\n\\r\nYou've\nactually **seen a few functions that return a value before this**. `randomNumber`\nis a function that returns a number and `getText` is a function that returns\na string. In every case we've used these functions **as if they were the\ndata type they return (or evaulate to)**. Notice that in block mode these\nfunctions don't have the connectors that other commands do since they will\nbe used as a piece of data within another function.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read the documentation** for `includes`.\\r\n* **Starter code** has been\nprovided which shows one instance where a string does include a `searchValue`\nand one where it does not.\\r\n* **Replicate the style** of these commands\nto check the rest of questions provided.\\r\n* **Create three statements of\nyour own using `includes`** making use of the `console.log` statements provided.\\r\n*\n**Once you're comfortable with this command move on.**"
      CSPU5_U3L25 - drag out key event_markdown_instruction: "# *keypress*\\r\n\\r\nIf\nwe want to add keyboard input to our apps we'll need to learn about how key\nevents work in App Lab. To start let's take a closer look at the `onEvent`\nblock. We already know that event handlers call a function. What we'll see\nnow is that they also **pass a parameter**. The default name for this parameter\nis simply `event` but you can change it to be anything you like. \\r\n\\r\nThe\n`event` parameter is a more complex kind of variable (called an \"Object\")\nthat we'll learn more about later. For now just know that for both mouse\nand keyboard events, the event parameter passes more information about the\nevent. In the case of key events **you can find out the key(s) that were actually\npressed by using `event.key`**.\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out an `onEvent`\nblock.\\r\n* Change the ID to `screen1` and the event type to `keypress`.  \\r\n\\r\n<img\nsrc=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n* Once you hit **Run**, **click on the screen\nso that the keystrokes will register**.\\r\n* **Type different combinations\nof keys** and check out the results in the console. Does every key combination\nprint to the console? Some keys to try:\\r\n    * Letter keys\\r\n    * Number\nkeys\\r\n    * Shift key\\r\n    * Hold shift and letter\\r\n    * Delete key\\r\n    *\nLeft and right arrow keys\\r\n    * Press and hold a key"
      CSPU5_U3L25 - play sound when up key_markdown_instruction: "# Play Sound With\nKeys\\r\n\\r\nYou may have noticed from the last couple of levels that the value\nof `event.key` is just a string which is the name of the key. As a result\nwe can check which key was pressed with a simple conditional statement.  For\nexample to check for the press of the **\"a\"** key we could write `if (event.key\n== \"a\")`.\\r\n\\r\n# Do This:\\r\nThe **starter code provided** plays the sound\nwhenever ANY key is pressed.\\r\n\\r\n* Use `console.log` to **find out the\nvalue of `event.key` when the up arrow is pressed.**\\r\n\\r\n* **Add an `if`\nstatement** so the sound only plays when the when the **up arrow** is pressed."
      CSPU5_U3L25 Free Response 3_markdown_instruction: "What is the output of this\ncode segment?\n\n\\tvar phrase = \"I am so\";\n\\tvar emotion = \"excited\";\n\\tvar\nsentence = phrase + \" \" + emotion.toUpperCase() + \"!\";\n\\tconsole.log(sentence);\n<br/>\n"
      CSPU5_U3L26 AND operator_markdown_instruction: "# AND Operator in Movie Bot\\r\n\\r\nOn\nthe last level you may have noticed that if you typed in a question like \"What\nis an R rated comedy movie?\" It gives two movie suggestions! It would make\nmore sense for it to give one suggestion.\\r\n\\r\nWe could use nested `if`\nstatements to do this by nesting `if` statements about ratings inside of `if`\nstatements about genre. However, you might be getting a sinking feeling that\nthis could become a lot of nested `if` statements very quickly! \\r\n\\r\n**Instead\nlet's use the AND operator (`&&`) to check for a genre and a rating at the\nsame time.** \\r\n\\r\n<img src=\"https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png\"\nstyle=\"width: 200px; float:right\">\\r\n\\r\nBe careful about the order of\nthe `if` statements. As a general principle you want to check the most specific\nconditions before checking more general ones.  For example, you want to have\nan `if` statement that checks for rating AND genre evaluated before one that\njust checks for genre on its own. Having a more general `if` statement checked\nfirst might cut off or prevent more specific conditions from being reached.\\r\n\\r\nYou\nstill want your app to give suggestions when just a rating or just a genre\nis detected, so keep this principle of ordering in mind. (Try them in the\nreverse order if you're interested in seeing what happens :))\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to add.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Try the question \"What is an R rated comedy movie?**\nto see the result.\\r\n\\r\n* **Update the code to give only one movie suggestion\nwhen a genre and a rating are detected in the input.**\\r\n\\t* Make one set\nof `if`, `else-if`, and `else` statements about genre and rating\\r\n    *\nAdd conditional statements to check for a comedy movie AND a rating. You could\ndo this for all the genres but stick to one for now.\\r\n\\r\n* **Test out a\ncouple sentences with your keywords** to make sure the change worked.\\r\n\\r\n<img\nsrc=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      CSPU5_U3L26 OR operator_markdown_instruction: "# OR Operator in Movie Bot\\r\n\\r\nLet's\ntry to check for the keywords related to questions (\"who\", \"what\", \"where\",\n\"when\", \"why\", \"how\", and \"?\") to decide if the user asked a question.\nYou could do this with a chain of `if-else-if` statements, but it would not\nbe very efficient. \\r\n\\r\nInstead let's use a **series of OR operators (`||`)**\nto check whether \"who\", \"what\", \"where\", \"when\", \"why\", \"how\"\nor \"?\" show up in the user input. \\r\n\\r\n**Note: ** We've updated the\nthe flowchart below to show the logic we are trying to add to the initial\nquestion.\\r\n\\r\n# Do This:\\r\n\\r\n* **Update the `if` statement** to check\nif **\"who\" OR \"what\" OR \"where\" OR \"when\" OR \"why\" OR \"how\" OR\n\"?\"** have been typed in by the user.\\r\n\\r\n* **Test out a couple sentences\nwith your keywords** to make sure the change worked.\\r\n\\r\n<img src=\"https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png\"\nstyle=\"width=500px\">\\r\n"
      CSPU5_addDescriptiveIDsToTurtleDriver_markdown_instruction: "# Descriptive\nIDs\\r\n\\r\n**You try it** - give your buttons **descriptive and meaningful\nIDs** rather than the default `button1`, `button2` and so forth.\\r\n\\r\nAfter\nyou change the ID in Design Mode remember to:\\r\n\\r\n* **Change the event\nhandler code** so that it correctly references the new IDs of the buttons\\r\n*\n**Run - Test - Debug ** the program to make sure it works, and debug any problems.\\r\n\\r\n<details><summary><strong>Reminder:</strong>\nRules About IDs [click to expand]</summary>\\r\n\\r\nIn making descriptive and\nmeaningful IDs there **are some rules about IDs** you need to know.  IDs...\\r\n\\r\n<li>\nare case sensitive</li>\\r\n<li> cannot contain spaces.\\r\n<li>  *must* begin\nwith a letter (A-Z or a-z) and may be followed by any number of digits and\nletters.\\r\n<li>  can contain hyphens (\"-\"), underscores (\"_\"), colons\n(\":\"), or periods (\".\").\\r\n\\r\n</details>\\r\n"
      CSPU5_basic if - DIY secret number_markdown_instruction: "# Do it yourself\n- What's the secret number?\\r\n\\r\nInsert lines of code between the \"Welcome\"\nand \"Goodbye\" that do the following:\\r\n\\r\n1. use `promptNum` to ask the\nuser to enter the \"secret number\"\\r\n2. add an `if` statement to check if\nthe number is the secret (you can make up your own secret number)\\r\n3. use\n`console.log` to display a message if the user guessed correctly\\r\n\\r\n**NOTE:**\nDon't go overboard here adding messages. Just get practice adding a prompt\nand an if-statement on your own.  Make sure it works and move on.\\r\n"
      CSPU5_basic if - check driving age_markdown_instruction: "# You try it\\r\n\\r\nThis\nis only *slightly* different from the voting example you just saw.\\r\n\\r\n*\n**Add an if-statement** to the code to check the `age` to see if the person\nis old enough to drive. (In most states you need to be 16 or older).\\r\n*\n**Display a message if the person is old enough drive.**\\r\n\\r\nYou can add\nan if-statement by dragging it out from the toolbox.  We've provided the\nconsole.log message you should use.  Just drag it inside the if-statement.  This\nanimation shows most of what you have to do.\\r\n\\r\n![](https://images.code.org/4ef3562d035ffacf292daac508fea34f-image-1479746969387.gif)"
      CSPU5_basic if - voting examle_markdown_instruction: "# Recreate the voting\nexample\\r\n\\r\n* Replace `condition` with a Boolean expression to check if\nthe person is 18 or older.\\r\n* Run the program a few times, entering different\nages at the prompt\\r\n* Make sure you generate the two outputs that are possible\nfrom this code.\\r\n\\r\n"
      CSPU5_basic if-else - driving age_markdown_instruction: "# You try it\\r\n\\r\nLet's\nmodify the driving age example to add an `else` clause.\\r\n\\r\n* **Add an\n`else` ** to the if-statement.\\r\n* **Add a console.log** message inside the\nelse clause that says something like \"sorry you can't drive yet\".\\r\n\\r\nYou\ncan add an else-statement by clicking on the `+` attached to the if statement.  We've\nprovided some starting code.\\r\n\\r\n**BONUS** - if they are not old enough\nto drive you could do the math and tell them how many years they have to wait."
      CSPU5_moveTurtleOnButtonClick_markdown_instruction: "# onEvent\\r\n\\r\n**You\ntry it!** - Make the turtle move forward when the button is clicked.\\r\n\\r\n*\n**Add an `onEvent` block** \\r\n* Set the **id** of your button\\r\n* Add `moveForward`\nto the function definition\\r\n\\r\n* **Run the program** to make sure it works.\\r\n*\n**Try changing the event type** to something like *\"mouseover\"* and see\nwhat happens.  Not all event types will work with buttons but it's fun to\nplay a little bit.\\r\n\\r\nOnce you've got the program responding to some\nevent, congratulations! You've just made your first interactive app. \\r\n\\r\n**Click\nFinish** to move on to the next problem.\\r\n\\r\n"
      CSPU5_playWithEventTypes_markdown_instruction: "\\r\n# Play with different event\ntypes\\r\n\\r\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06\nAM.png\" style=\"float: right\">\\r\nIf you haven't yet, you should experiment\nwith different event types with your `onEvent` blocks.  The ones that will\nwork best here are mouse-related ones such as:\\r\n  * click\\r\n  * mousemove\\r\n  *\nmousedown\\r\n  * mouseup\\r\n  * mouseover\\r\n\\r\n*There are some events that\ncapture keystrokes from the keyboard. These are interesting, but they do not\nwork easily with buttons. We'll stick to mouse events for now, and get to\nkeys later.*\\r\n\\r\n**Be sure** to experiment with each of the ones that start\nwith \"mouse...\".\\r\n\\r\nOnce you've have played a little bit, click Finish\nto move on.\\r\n"
      CSPU5_predict_applab_onEventWithWrongID_markdown_instruction: "# Debugging\nEvent-Driven Programs: IDs\\r\n\\r\n**You Try it: Checking IDs** -- Your first\ndebugging task will be to verify that the button IDs match the event-handlers.  You'll\nalso see error messages in the **\"Debug Console\"**\\r\n\\r\n![](https://images.code.org/6bb61c1ab1af5c0ce84a8cc4dc9b95cd-image-1476970435861.png)\\r\n\\r\n1.\n**Run the program** and inspect the error messages in the Debug Console.\\r\n  *\n**NOTE:** an error message *only* indicates where the computer ran into trouble.  It\ndoesn't tell you the root cause of the problem, necessarily.\\r\n2. **Investigate**\n-- Use the **error message as a clue** to investigate the possible problem.\\r\n3.\n**Fix it** -- Make a change that you think will fix the problem.\\r\n4. **Run\nthe program** and verify that not only are there no error messages but the\nprogram works as intended (turtle moves forward on button click).\\r\n5. **Didn't\nwork?** - repeat the steps above.  And stick with it!  You'll get it eventually.\\r\n\\r\n**Remember:**\nYou can see the ID of a UI element by just hovering your mouse over it.\\r\n<details><summary>Hint?\n[click here]</summary>\\r\n\\r\n<li>In this case the ID of the button does not\nmatch the ID in the onEvent command</li>\\r\n<li>The error message is saying:\n\"you're telling me to listen to events on a UI Element with id 'button1'\nand no such thing exists!\" </li><br>\\r\nThere are two ways to fix this:<br>\\r\n<li>Change\nthe ID in the event handler code to match the button ID in design mode.</li>\\r\n<li>...or\nChange the button ID in design mode to match the event handler</li></details>\\r\n\\r\n"
      CSPU5_setPosition to fixed location_markdown_instruction: "# Using setPosition\\r\n\\r\n<img\nsrc=\"https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif\"\nstyle=\"width: 150px; float: right;\">\\r\n\\r\n**Now you try it** - use  [setPosition](#triggercallout=setPosHover)\nto **move the button to the middle of the screen when clicked**. \\r\n\\r\nWe've\nset up a small project for you with a button (id: `moveBtn`) already added\nin design mode.\\r\n\\r\n1. Add an `onEvent` block\\r\n2. Drag a `setPosition`\ncommand into the event handler function\\r\n3. Set the x,y coordinate so that\nthe button ends up in the middle of the screen.\\r\n * You'll need to experiment\na little bit to find coordinates that work for you.\\r\n * Hover over the screen\nto find a good starting point.\\r\n\\r\n**Tip**: when you see a command that\nis linked like this: [setPosition](#triggercallout=setPosHover) click it!\n-- it will show you other hints.\\r\n\\r\nOnce you've got the button moving\nto the middle of the screen click Finish to move on to the next challenge.\\r\n"
      CSPU5_turtleDriver_add2ndButton_markdown_instruction: "<img src=\"https://images.code.org/7447f9f6df9a1931297e1f8fa7284f28-image-1481582422206.gif\"\nstyle=\"float: right; width: 200px\">\\r\n\\r\n# Practice! Add another button\\r\n\\r\nNow\nthat you know the pattern try it out.  **Add a 2nd button to the screen that\nturns the turtle to the left when clicked.**  The finished product should\nlook similar to the image shown here.\\r\n\\r\nRemember the steps:\\r\n\\r\n  1.\n**Design Mode**: drag another button onto the screen\\r\n  2. Switch to Code\nMode: **add an onEvent block** to the code\\r\n  3. **Add code** inside the\nfunction to make the turtle turn left\\r\n  4. Run. Test. Debug\\r\n\\r\n<details><summary>Need\nHelp? [Click Here]</summary>\\r\n\\r\n<h3>\\r\nHere is an example of adding other\nbutton to make the turtle turn left\\r\n</h3> \\r\n\\r\n<div style=\"column-count:\n3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count:\n3; width: 100%\">\\r\n\\r\n<p><span style=\"font-weight: bold; color: #00adbc;\nfont-size: 200%;\">1.</span>\\r\nAdd a UI element to the screen in Design Mode</p>\\r\n\\r\n<p><span\nstyle=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\\r\nAdd\nanother onEvent block to the code.  <strong>Note:</strong> you need new onEvent\nblock <em>for every</em> event you want to capture.</p>\\r\n\\r\n<p><span style=\"font-weight:\nbold; color: #00adbc; font-size: 200%;\">3.</span>\\r\nAdd code to the event\nhandler function you want.</p>\\r\n\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/f695b83911560bf628750ed2a134a38c-image-1476818017592.png\"\nstyle=\"display: block; width: 100%\">\\r\n\\r\n<div style=\"column-count: 1;\ncolumn-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3;\nwidth: 33%;\">\\r\n\\r\n<p><span style=\"font-weight: bold; color: #00adbc;\nfont-size: 200%;\">4.</span>\\r\n<strong>Debugging Tip:</strong> if you hover\nyour mouse over a UI element while in code mode, it will show you the ID of\nthe element.  This very useful when you have a lot of elements on the screen.\\r\n\\r\n</div>\\r\n\\r\n<div\nstyle=\"clear: both\">\\r\n&nbsp;\\r\n</div>\\r\n\\r\n\\r\n\\r\n\\r\n</details>\\r\n"
      CSP_U2_Shakespeare_Question_markdown_instruction: "Respond to this prompt or\nto another as directed by your teacher.\\r\n\\r\nShakespeare’s complete works\nhave approximately 3.5 million characters.  Which is bigger in file size:\nShakespeare’s complete works stored in plain ASCII text or a 4 minute song\non mp3?  How much bigger?"
      Calc Circles of Eval .1_markdown_instruction: "You’ll be writing a kind of\ncode called Evaluation Blocks, because each block of code evaluates to a single\nvalue. Change the ??? in this code so that the block evaluates to 5."
      Calc Circles of Eval .2_markdown_instruction: "This Evaluation Block is a multiplication\nfunction which takes two numbers and returns the product of those numbers.\nEdit this block so that it multiplies 2 * 5"
      Calc Circles of Eval .3_markdown_instruction: "Here's a function for addition\nwhich takes two numbers and returns their sum. Use this Addition Block to\nadd 3 + 6."
      Calc Circles of Eval .4_markdown_instruction: "Here we've nested an Addition\nBlock inside a Multiplication Block. Complete this code so it multiplies 3\nby (4 + 1)"
      Calc Circles of Eval 2_markdown_instruction: "Use a Multiplication Block to\ncomplete this code."
      Calc Circles of Eval 3_markdown_instruction: "Complete the Evaluation Blocks\nto match this statement."
      Calc Circles of Eval 4_markdown_instruction: "This code is missing a couple\nof Evaluation Blocks - make sure you put everything in the right order."
      Calc Circles of Eval 7_markdown_instruction: "Complete the Evaluation Blocks\nto match this statement."
      Calc Circles of Eval 8_markdown_instruction: "Complete the Evaluation Blocks\nto match this statement."
      Calc Circles of Eval 9_markdown_instruction: "Complete the Evaluation Blocks\nto match this statement."
      Calc Circles of Eval Free Play_markdown_instruction: "Free Play: Try using\nthe Evaluation Blocks to write some equations of your own. How does nesting\nthe blocks in different ways impact their evaluation?"
      Calc Define Funcs 1_markdown_instruction: "Let's look at some more traditional\nalgebraic functions now. Here's a function translated from the simple algebraic\nfunction `f(x) = x + 1`. What would you expect this function to output if\nprovided an input of 15?"
      Calc Define Funcs 2_markdown_instruction: "Write a function `f` that takes\na parameter `x` and returns `x - 10`. Test your function using `f(15)`."
      Calc Define Funcs 3_markdown_instruction: "We don't have to call our function\n`f` every time; create a function called `times-ten` that should take a parameter\n`x` and return `x * 10`. Once you've created the function, run `times-ten(50)`."
      Calc Define Funcs 4_markdown_instruction: "Write a function called `half` that\ntakes a number `x` and returns half that number. Once you've written the\nfunction, use it to calculate `half(21)`"
      Calc Design Recipe 1_markdown_instruction: "Let's use the Design Recipe to\ncreate a function called `cube` - this function should take in a Number and\nreturn that number to the power of 3. Make sure to write two example cases!\nWhen you're done, use your new function to calculate `cube(7)`."
      Calc Design Recipe 2_markdown_instruction: "Your school is holding a bake sale,\nand you need to track the cost of making each cookie, the money paid, and\nthe total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function `cost`, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies.\\r\n\\r\n_Test your function by\ncalculating the cost of 42 cookies_"
      Calc Design Recipe 3_markdown_instruction: "Write the function `sales` which\ntakes in the number of cookies sold, and produces the amount of money customers\nspent to buy those cookies (each cookie is sold at $1.50).\\r\n\\r\n_Test your\nfunction by calculating the sales for 135 cookies_"
      Calc Design Recipe 4_markdown_instruction: "Using the two functions we just\nwrote, write the function `profit`, which takes in the number of cookies you\nsold, and gives you back the total profit you make from selling your cookies,\naccounting for the cost of baking them.\\r\n\\r\n_Test your function by calculating\nthe total profit for 15 cookies_"
      Calc Rocket 1_markdown_instruction: "In the last puzzle you wrote a contract\nfor the function `rocket-height` that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds."
      Calc Rocket 2_markdown_instruction: "Great, let's do one more example before\nwriting the function - what should the rocket height be after 30 seconds?"
      Calc Vars 1.1_markdown_instruction: "Here we've set the `age` variable to\n17 years. Can you write an expression that calculates `age` in days?"
      Calc Vars 1_markdown_instruction: "Variables allow us to name values so that\nwe can easily refer to them repeatedly throughout our programs. Here's a\nvariable called `age`. Set its value to your age and click run."
      Calc Vars 2.1_markdown_instruction: "Here's a new variable called `age-in-months`.\nUse the variable `age` to set `age-in-months`."
      Calc Vars 2_markdown_instruction: "Can you write an expression that calculates\n`age` in months?"
      'Challenge: Buzzer and LED_markdown_instruction': "# Challenge\\r\n\\r\nCheck\nwith your teacher before starting the challenge.\\r\n\\r\nNow that you know\nhow to use the LED and buzzer, try creating an app that can play a variety\nof different sounds and which uses the LED. You could make a keyboard or synthesizer\nthat plays various sounds when you click different buttons."
      'Challenge: Input and UI_markdown_instruction': "# Stop\\r\n\\r\nYou have reached\nthe end of the lesson. Check in with your teacher to see if you should work\non the challenge level before you start. This is an extra challenge to practice\nyour skills if you have time. If you don't have time for it no big deal!\\r\n\\r\n#\nChallenge\\r\n\\r\nGo to <a href=\"https://studio.code.org/p/applab\" target=\"_blank\">Full\nApp Lab</a> and try to make your own profile creator like the example program\non this level."
      'Challenge: Lights Picker_markdown_instruction': "# Challenge: More Patterns\\r\n\\r\nAdd\nsome more patterns to your app. Find a partner and add their pattern as an\noption. Make sure to put each pattern into its own function."
      'Challenge: List of Notes_markdown_instruction': "# Challenge: \\r\n\\r\nCheck\nwith your teacher before starting the challenge.\\r\n\\r\n**Starter Code:**\nAn array with the name of the 30 buttons on the screen (not including the\nNew Pattern button) is provided for you. \\r\n\\r\n**Write Code:** Each time\nthe New Pattern button is clicked at least one random button from the list\nis set to a random color.\\r\n"
      'Challenge: Random Button Colors_markdown_instruction': "# Challenge: Random\nButton Colors\\r\n\\r\nCheck with your teacher before starting the challenge.\\r\n\\r\n**Starter\nCode:** An array with the name of the 30 buttons on the screen (not including\nthe New Pattern button) is provided for you. \\r\n\\r\n**Write Code:** Each\ntime the New Pattern button is clicked at least one random button from the\nlist is set to a random color.\\r\n"
      'Challenge: Sunset with Counters_markdown_instruction': "# Challenge: Nightfall\\r\n\\r\nThink\nyou've got drawing with counters down? Try this challenge.\\r\n\\r\nThe color\nblock can take a 4th input that controls the opacity of the color. You can\nclick the arrows on the side of the color block to expand this 4th input.\\r\n\\r\n![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\nThis is your same sunset animation from before.\nCan you make the scene slowly change to night?\\r\n\\r\n![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\\r\n\\r\n"
      Classroom Assessment Techniques_markdown_instruction: "The following link is\na resource that presents the process of designing and using classroom assessment\ntechniques:"
      Classroom Management Tips for School Computer Labs_markdown_instruction: "##\nStrategies for Managing a Computer Lab\\r\n\\r\n\\r\nIf you're new to teaching\na computer lab, consider implementing some of the 7 tips for establishing\nstrong instructional routines, outlined in this article by Angela Watson.\n\\r\n\\r\n<br><br>"
      'Collaborative Learning and Group Work: Description and Strategies_markdown_instruction': "The\nfollowing link to Cornell University Center for Teaching Excellence provides\na brief description of group learning along with a handful of specific techniques\nfor designing and implementing group work activities:  "
      Color Blindness Filter_markdown_instruction: "# Color Blindness Filter\\r\n\\r\n\\r\n\\r\n"
      Color Contrast Checker_markdown_instruction: "# Color Contrast\\r\n\\r\nPeople\nneed to be able to see and read the content on your web page for it to be\nuseful. Some people might have bad eye sight, others are color blind. How\ndo you design with these differences in mind? \\r\n\\r\nOne of the easiest ways\nto insure that many people will be able to read the content on your website\nis to make sure their is enough contrast between the different colors you\nare using together on your site.\\r\n\\r\nhttp://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/\\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* Use the color contrast checker to see the difference in contrast\nof the different colors you are using together on your site."
      Considerations for the 1-to-1 Classroom_markdown_instruction: "## 1-1 Classroom\\r\n\\r\nIf\nyou're new to managing a classroom with computers, check out this article\nin Education Week, which outlines some important considerations.\\r\n\\r\n<br><br>"
      Course 4 Artist 1_markdown_instruction: "Help me draw a box.   \\r\n(Each line\nis 200 pixels long) \\r\n\\r\n<br/><br/>\\r\n\\r\n"
      Course 4 Artist 10_markdown_instruction: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"\nwidth=\"150px;\" style=\"mix-blend-mode: multiply;\" />\\r\n\\r\n**Play time:**  Here\nis the code for an interesting shape.   \\r\n\\r\nWhat happens when you repeat\nit multiple times, turning between each iteration?   \\r\n\\r\nNotice that the\nturns in this shape add up to *420 degrees*, which means that when your artist\nis done drawing, it will be facing a different direction than when you started.  That\nnew direction is exactly *60 degrees* to the *right* of where you began.\\r\n\\r\n<hr/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n4</b></summary>\\r\n<br/>\\r\nIf you want to come full circle in just 4 repetitions,\nyou need the artist to turn a total of **360 degrees/4 = 90 degrees** each\ntime.  You can do that by adding an extra `turn right by 30 degrees` block\nto the outer loop (since **60+30 = 90**.)  \\r\n<br/>\\r\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\\r\n<br/><br/>\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n6</b></summary>\\r\n<br/>\\r\nWhen you repeat the shape as-is 6 times, you get\na total rotation of **6x60 degrees** which is a full **360 degree** cycle.  \\r\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"  width=\"500px;\"  style=\"mix-blend-mode:\nmultiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n12</b></summary>\\r\n<br/>\\r\nIf you want to repeat the image 12 times, you\nneed the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.  That\nmeans you will need to adjust the artist back a bit with `turn left by 30\ndegrees` before you repeat the shape again.   <br/><br/>\\r\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\nNow\nit's your turn!  Can you recreate each image by repeating the starting shape?  "
      Course 4 Artist 11_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you have already been shown.  Can you figure out how\nto recreate it?  Feel free to use trial and error. You are not expected to\nget it perfect the first time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the last puzzle, except that the length used in the first\nloop is a little smaller. "
      Course 4 Artist 12_markdown_instruction: "<img src=\"https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png\"\nwidth=\"250px\"/>\\r\n\\r\nFree Play Inspiration: You've now learned everything\nyou need to know to make a pattern like this! If this picture inspires you,\ntry to make something similar. Otherwise, create something all your own. \\r\n\\r\n<br/>"
      Course 4 Artist 13_markdown_instruction: "Still playing?  Here is a blank canvas\nwhere you can design anything you want!"
      Course 4 Artist 2_markdown_instruction: "Can you use a loop to draw the greyed\nout square?  \\r\n(Each side is 300px long)"
      Course 4 Artist 20_markdown_instruction: "Still playing?  \\r\n\\r\nHere is a\nblank canvas where you can create whatever you want!"
      Course 4 Artist 3_markdown_instruction: "Try to figure out what happens if\nyou run this code (or press \"Run\" to test it).  \\r\n\\r\nThen, repeat it\nenough times to complete the drawing."
      Course 4 Artist 4_markdown_instruction: "How many degrees are in a circle?  \\r\nFill\nin the repeat block with that number to create a circle of colors."
      Course 4 Artist 5_markdown_instruction: "Draw the other half of this design\nso it's symmetrical. \\r\nThe triangles are equilateral and are 50 pixels\nlong.  \\r\n\\r\nYou may have to run the code several times to figure out all\nof the blocks that need to be added."
      Course 4 Artist 6_markdown_instruction: "Complete the code to draw these three,\nequilateral triangles."
      Course 4 Artist 7_markdown_instruction: "Now nest this loop inside another\nloop to draw 10 triangles. "
      Course 4 Artist 8_markdown_instruction: "Draw this sun by looping this whole\nblock of code multiple times."
      Course 4 Artist 8a_markdown_instruction: "Remember this shape?  Now we're\ngoing to let you build it without giving you any blocks to start!"
      Course 4 Artist 9_markdown_instruction: "Loop this design 10 times and make\nsure to turn between each shape that's drawn. "
      Course 4 Artist Binary 1_markdown_instruction: "Here's a function that takes\na binary string of 1's and 0's and instructs the artist to follow them from\nleft to right, top to bottom.  \\r\n\\r\nThe artist will fill-in the squares\nwhen it sees a 1 and ignore the square when it sees a 0. \\r\n\\r\n**Run this\ncode to see how the artist uses binary to draw this pattern.**"
      Course 4 Artist Binary 1a_markdown_instruction: "Here's a function that takes\na binary string of 1's and 0's and instructs the artist to follow them from\nleft to right, top to bottom.  The artist will fill-in the squares when it\nsees a 1 and ignore the square when it sees a 0. \\r\n\\r\nRun this code to\nsee how the artist uses binary to draw this pattern."
      Course 4 Artist Binary Free Play 2b_markdown_instruction: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\n\\r\n<br/>"
      Course 4 Artist Binary pre1_markdown_instruction: "Binary is a way of representing\ninformation using only two options. In this case, <b>off</b> and <b>on</b>.\\r\n<br/>\\r\nHere,\nwe're going to use the number <b>0</b> as code for \"off\" and the number\n<b>1</b> as code for \"on\".\\r\n<hr/>\\r\nWe've provided you with a grid of\n\"pixels\" that you can walk through and make designs by turning on only certain\nsquares.\\r\n\\r\n<b>Use the blocks below to have the artist draw \"01010101\"\nin binary in the first row.</b>"
      Course 4 Artist Binary ryan_markdown_instruction: "Binary is a way of representing\ninformation using only two options.  Here, we're going to use the options\n\"off\" (represented by the number 0) and \"on\" (represented by the number\n1).   \\r\n\\r\nWe've provided you with a grid of \"pixels\" that you can walk\nthrough and make designs by turning on only certain squares.  Can you have\nthe artist draw \"01010101\" in binary in the first row?"
      Course 4 Artist For Loops 1_markdown_instruction: "Use a repeat block to draw\nthis triangle that is 50 pixels wide.\\r\n\\r\n"
      Course 4 Artist For Loops 10_markdown_instruction: "Free Play Time! Have fun\ndrawing whatever you like with the blocks you have learned how to use."
      Course 4 Artist For Loops 11_markdown_instruction: "Remember back in a previous\nstage when we used a variable to control the number of sides in a shape? We\nare going to do the same thing with the `counter` variable now.  \\r\n\\r\nThis\npattern starts with a triangle and adds one side at a time until it draws\na decagon (10 sides). Each side should be 100 pixels long. \\r\n\\r\nHow will\nyou use the `counter` variable from the `for` loop to recreate this drawing?"
      Course 4 Artist For Loops 11a_markdown_instruction: "Let's put it all together!   \\r\n\\r\nUsing\nyour knowledge of `for` loops and the `counter` variable, create this drawing\nwhere each shape has two more sides than the last.  Make sure that each side\nis 10 times as long as the number of sides in the polygon.\\r\n\\r\nVery little\nof the code has been provided for you."
      Course 4 Artist For Loops 12_markdown_instruction: "That looked pretty cool,\nbut now I'd like to draw each shape next to the last one. This time each\nside is 20 pixels. Use a jump block to jump forward 40 pixels after each shape."
      Course 4 Artist For Loops 13_markdown_instruction: "Hmmm, those shapes are\ngetting bigger every time! Didn't we already solve this problem with variables?\nHow can we use the counter variable to make the sides smaller as there are\nmore of them? Instead of moving forward by a set amount, try moving forward\n(100 / counter) pixels."
      Course 4 Artist For Loops 14_markdown_instruction: "If you turn a little bit\nmore or less than you normally would for a shape, it creates a neat effect.\n\\r\n\\r\nTry using some of the code from the last level, but turning 89 degrees\nto create this twisted square spiral."
      Course 4 Artist For Loops 15_markdown_instruction: "**Free Play:** Try making\nsome drawings of your own using `for loops`. We've added a few useful variables\nfor you as well."
      Course 4 Artist For Loops 2_markdown_instruction: "I've put the code for drawing\na triangle inside a `for loop` that counts from 50 to 100 by 10. \\r\n\\r\n<br/>\\r\n<strong>NOTE:</strong>\nMake sure you look at the code *before* you hit \"Run\"."
      Course 4 Artist For Loops 3_markdown_instruction: "Use the last puzzle as a\nreference to complete this one.  The smallest triangle has 20 pixel sides,\nthe largest has 200 pixel sides, and each triangle is 20 pixels larger than\nthe last."
      Course 4 Artist For Loops 4_markdown_instruction: "How would you modify what\nyou've learned to draw these squares? They start at 15 pixels long, the largest\nis 300 pixels long, and each square is 15 pixels larger than the last. "
      Course 4 Artist For Loops 5_markdown_instruction: "Good job on the last puzzle!\nLet's use that \"counter\" variable block again to draw this cool picture.\n\\r\n\\r\n"
      Course 4 Artist For Loops 6_markdown_instruction: "Free Play! Try using a for\nloop to draw a growing shape pattern of your own design."
      Course 4 Artist For Loops 6a_markdown_instruction: "Make three small changes\nto the code from the last level to get this!"
      Course 4 Artist For Loops 7_markdown_instruction: "What happens if you remove\nthe \"Repeat 3\" from this algorithm, keeping the \"move\" and \"turn\" blocks\nin the for loop? \\r\n\\r\n<br/>\\r\nIn this spiraling triangle, each side is\n20 pixels longer than the last.\\r\n\\r\n"
      Course 4 Artist For Loops 8_markdown_instruction: "Just one little change to\nthe code from the last image can create this drawing. Can you figure out what\nthat change is?\\r\n\\r\nHint:  You need to remove something!  "
      Course 4 Artist For Loops 8a_markdown_instruction: "Just one little change\nto the code from the last image can create this image. Can you figure out\nwhat that change is?"
      Course 4 Artist For Loops 9_markdown_instruction: "Can you make a spiral? Move\nforward from 1 to 75 pixels, increasing by 1 pixel each time.\\r\n\\r\n"
      Course 4 Artist For Loops Challenge_markdown_instruction: "**Challenge:** Can\nyou figure out how to use all of the things you've learned to create this\nimage of polygons, all with 40 pixel sides?\\r\n\\r\nRemember, in order to create\na spiral, you cannot close the polygon.  This means that each shape will need\nto have one fewer sides than usual."
      Course 4 Artist For Loops Challenge_a_markdown_instruction: "**Challenge:**\nCan you figure out how to use all of the things you've learned to create\nthis image of polygons, all with 40 pixel sides?"
      Course 4 Artist For Loops inspire_markdown_instruction: "<br/><br/>\\r\n<img\nsrc=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\"\nwidth=\"250px\"/>  \\r\n<br/><br/>\\r\n**Free-Play Inspiration:** You've now\nlearned everything you need to know to make a pattern like this! If this picture\ninspires you, try to make something similar. Otherwise, create something all\nyour own."
      Course 4 Artist Functions 12.1_markdown_instruction: "Let's create a function\ncalled `draw an octagon 20` that draws an octagon where each side is 20 pixels\nlong."
      Course 4 Artist Functions 13.1_markdown_instruction: "Now, let's make a function\ncalled `jump to upper right` that moves the artist to the upper-right of the\noctagon that you just drew so we can finish this pattern.  \\r\n<br/>\\r\n*Hint:  To\nget yourself to the upper-right corner, try jumping in a pattern that makes\njust 3/8 of the octagon.*  "
      Course 4 Artist Functions 14.1_markdown_instruction: "Now, let's make a function\ncalled `jump to upper right` that moves the artist to the top-right of the\noctagon that you just drew so we can finish this pattern.  "
      Course 4 Artist Functions Inspiration_markdown_instruction: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\n"
      Course 4 Artist Functions challenge_markdown_instruction: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Challenge Level:** Use what you've learned in\nthis stage and others to figure out how to make the drawing above.  "
      Course 4 Artist Functions inspire_markdown_instruction: "<img src=\"https://images.code.org/6c6ff8e3b5a763926102033a94720f8b-image-1441300952649.19.47.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.  \\r\n<br/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Hints</b></summary>\\r\n\\t<br/><br/>\\r\n\\t<h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#1</b></summary>\\r\n    \\t<br/>\\r\n    \\tUse a `for loop`, then use its counter\nvariable inside of a nested `repeat` loop. \\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#2</b></summary>\\r\n    \\t<br/>\\r\n    \\tEach iteration, you should `draw\na square` then jump forward.\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#3</b></summary>\\r\n    \\t<br/>\\r\n    \\tYou will need to turn left by 90\ndegrees outside of your `repeat`, but still inside the `for loop`.\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Solution</b></summary>\\r\n    \\t<br/>\\r\n    \\t<br/>\\r\n    \\t<img\nsrc=\"https://images.code.org/6b07c5de58a1fa573bef19182105f516-image-1441300922567.14.00.png\"\nwidth=\"450px\"/>\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n</details>\\r\n</h4>\\r\n\\r\n<br/>\\r\nWhat\nhappens if you make the squares a little bigger or smaller?  How about if\nyou turn right instead of left?"
      Course 4 Artist Inspire_markdown_instruction: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! If this picture inspires you,\ntry to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Vars 1_markdown_instruction: "Let's draw an equilateral triangle.\n\\r\n\\r\nIt has to be exactly 100 pixels long on each side.\\r\n\\r\n<br/>\\r\n"
      Course 4 Artist Vars 10_markdown_instruction: "Here's an algorithm that draws\na triangle out of smaller triangles. Can you modify it so that it uses the\n`sides` variable to draw each triangle? \\r\n\\r\n</br>\\r\nLook through the\ncode, and every time you see the number 3, replace it with your `sides` variable.\nRemember to use the `set sides` block."
      Course 4 Artist Vars 11_markdown_instruction: "Here’s some more complicated\ncode using the same concepts from the last puzzle - what should you set the\n`sides` variable to in order to draw this picture made of squares?\\r\n\\r\n<p\nstyle=\"font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;\nborder-radius:10px;\">\\r\n\\tJust for fun: Try using a few different numbers\nto see what happens to the pattern!\\r\n</p>"
      Course 4 Artist Vars 12_markdown_instruction: "Let's set the `sides` variable\nto 5. The more sides we add to this algorithm, the bigger this whole pattern\ngets! \\r\n\\r\n<br/>\\r\nNotice that there is another variable called `length`.\n\\r\nWe can now use that variable wherever we have a `move forward` block.\n\\r\n\\r\nSet the `length` variable to 75 for this shape."
      Course 4 Artist Vars 13_markdown_instruction: "When a shape has lots of sides,\neach side needs to be shorter if you want the whole pattern to fit on the\nscreen. \\r\n\\r\nLet's recreate the algorithm for this amazing pattern, but\ninstead of manually setting the `length` variable, let's use a math block\nwith the `sides` variable inside to make sure that each shape fits correctly.  \\r\n\\r\nThe\nperimeter of each polygon is 300 pixels."
      Course 4 Artist Vars 14_markdown_instruction: "**Free Play**: Check it out!\nNow your algorithm is nested within one more loop. Experiment with changing\nthe values of your two variables to draw cool patterns.\\r\n\\r\nFor even more\neffect, try playing with color!  Use random colors inside loops to see how\nit changes your design."
      Course 4 Artist Vars 2_markdown_instruction: "Instead of using `move forward\nby 150`, the `move` block is now referencing a variable called `length`. Can\nyou set `length` to 150 to draw this new triangle?"
      Course 4 Artist Vars 3_markdown_instruction: "Here's a loop that draws a square,\nbut something's missing. Can you fix it so that it uses the variable \"length\"\nto figure out how long each side should be? "
      Course 4 Artist Vars 4_markdown_instruction: "Now I want to make a rectangle\nthat is twice as tall as it is wide. We've got a variable called `width`\nthat needs to be set to 100. Can you use the math blocks to complete the code?"
      Course 4 Artist Vars 6_markdown_instruction: "Here’s some code that can draw\nany regular polygon. \\r\n\\r\nThere’s a new variable called `sides` that is\nset to 4. \\r\n\\r\nCan you use the `sides` variable (along with the math block)\nto turn the right amount regardless of how many sides are in the polygon?"
      Course 4 Artist Vars 7_markdown_instruction: "Use what you learned in the last\npuzzle to create this hexagon using the `sides` variable.\\r\n\\r\nSee how you\ncould change just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_markdown_instruction: "**Free Play:** Experiment with\nthe number of sides this shape has. Can you change the algorithm so that the\noverall size of the shape stays the same, no matter how many sides it has?\n"
      Course 4 Artist Vars 9_markdown_instruction: "Modify this algorithm so it uses\nthe `sides` variable instead of a fixed number to draw a triangle. Don't\nforget to use the `set sides to` block."
      Course 4 Bee 1_markdown_instruction: "The bee can't tell what's under the\ncloud! \\r\n\\r\nUse the `if` block to check whether there is a flower under\nthe cloud. \\r\n\\r\nGet nectar one time, **ONLY** if there is a flower."
      Course 4 Bee 2_markdown_instruction: "Use the `if/else` block to check each\nobject to see if it's a flower or a honeycomb. \\r\n\\r\nIf it's a flower,\ncollect one nectar...otherwise, make one honey!"
      Course 4 Bee 3_markdown_instruction: "The unknown object is either a flower\nor a honeycomb. \\r\n\\r\nThis time, use the `if/else` block to collect one\nnectar **if** it is a flower, **else** make one honey (because then it would\nbe a honeycomb)."
      Course 4 Bee 4_markdown_instruction: "This purple flower may have either 3,\n2, or 1 nectar. \\r\n\\r\nHere an `if/else` block is combined with another `if/else`\nblock to create an `if/else-if/else` statement. \\r\n\\r\nComplete the solution\nto collect the unknown amount of nectar."
      Course 4 Bee 5_markdown_instruction: "This purple flower may have either 3,\n2, or 1 nectar. Add an `if-else` block to create an `if, else-if, else` block.\nComplete the solution to collect the unknown amount of nectar."
      Course 4 Bee 6_markdown_instruction: "This purple flower may have either 3,\n2, or 1 nectar. Create an `if, else-if, else` block to collect the unknown\namount of nectar."
      Course 4 Bee 7_markdown_instruction: "Use everything you have learned so far\nto collect all the nectar. The purple flower may have either 3, 2, or 1 nectar."
      Course 4 Bee For Loops 11_markdown_instruction: "What's wrong with this loop?\nSee if you can fix it and make the bee collect all the nectar."
      Course 4 Bee Params 1_markdown_instruction: "Write a sequence to collect all\nof the nectar using `get 3 nectar` which turns, moves to collect the nectar,\nand then returns to the original location."
      Course 4 Bee Params 2_markdown_instruction: "Modify the `get 3 nectar` function\nso it makes me turn right instead of left to the flowers."
      Course 4 Bee Params 3_markdown_instruction: "Now there are flowers on both\nsides!  \\r\n\\r\nWe've added variables called `left` and `right` for you to\nuse, and now there is a parameter called `direction` inside `get 3 nectar`.\n\\r\n\\r\n**Edit `get 3 nectar` so that the bee turns the correct direction\nwhen the variables `left` or `right` are passed into the function.**"
      Course 4 Bee Params 5_markdown_instruction: "Let's start from scratch - can\nyou create a new function called `get 5 nectar` with a direction parameter?"
      Course 4 Bee Params 6_markdown_instruction: "Wouldn't it be nice if we could\ncollect all of these nectars with a single function? \\r\n\\r\n<br/>\\r\nTry\nadding a new parameter to your function called `nectar units` to control the\namount of nectar to collect. You'll probably want to rename the function\ntoo!"
      Course 4 Bee Params 7_markdown_instruction: "Try using your new function to\ncollect all of this nectar.\\r\n\\r\n<br/>\\r\n"
      Course 4 Bee Params 8_markdown_instruction: "**Challenge:** Now there's honey\nto deal with too! \\r\n\\r\nRewrite your function to use both the number of\nhoney units and the number of nectar units.  How would you use those numbers\nto decide what you should do?"
      Course 4 EC 1a_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 1b_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 2a_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 2b_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 2c_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 2d_markdown_instruction: "**Extreme Challenge:**  No rules. No\nclues. Just the challenge!"
      Course 4 EC 3_markdown_instruction: "**Functions Super Challenge:** Use what\nyou learned in the previous level to draw an image like this.\\r\n\\r\n*Note:\nThe code becomes more simple if you incorporate parameters.*\\r\n\\r\n<br/>\\r\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>  \\r\n\\r\n\\r\n"
      Course 4 EC 3a_markdown_instruction: "**Extreme Challenge:** No rules. No clues.\nJust the challenge!\\r\n\\r\n<br/>\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>  \\r\n\\r\n\\r\n"
      Course 4 Maze 4_markdown_instruction: "Try the `repeat` block to use fewer\nblocks when solving this puzzle..."
      Course 4 Play Lab Params 1_markdown_instruction: "Here's a function called\n`jump` that causes your main character to jump up 100 pixels. \\r\n\\r\nRun\nthe program and use the jump function to collect all of the flags by moving\nthe dog with the arrow keys."
      Course 4 Play Lab Params 10_markdown_instruction: "We've added one last function\nfor you.\\r\n<hr/>\\r\n\\r\n<h4>\\r\nUse an `if` statement to program your game\nto call the `level_up` function only when `player_score` becomes greater than\na certain number.<br/><br/>\\r\n</h4>\\r\n<i>For example: `player_score` > 6</i>\\r\n\\r\n\\r\n<hr/>\\r\n<i>Play\nthe game, and make it to level 3 to move to the next puzzle.</i>"
      Course 4 Play Lab Params 2_markdown_instruction: "Now we've got flags that\nare too high for our current jump! Let's use both the \"up\" and \"down\"\narrows so that we can have multiple jump heights.  \\r\n\\r\nWe need to add\na parameter to our jump function called `height`.  \\r\n- The up arrow should\ncause the dog to jump 200 pixels \\r\n- The down arrow should make it jump\nonly 100 pixels. \\r\n"
      Course 4 Play Lab Params 3_markdown_instruction: "We have added another parameter\nto the jump function so that we can use it with other actors. Each actor is\nrepresented by a number, starting from one. \\r\n\\r\n<br/>\\r\nEdit the `jump`\nfunction so that it uses the `actor` parameter to make the correct character\njump. "
      Course 4 Play Lab Params 4_markdown_instruction: "Here's a function called\n`patrol`. \\r\n\\r\nEdit `patrol` to move Cat up 400 pixels and then down 400\npixels."
      Course 4 Play Lab Params 5_markdown_instruction: "Edit the the `patrol` function\nto add an `actor` parameter, so that we can call it for each of the actors\non the screen. Remember, the actors correspond to numbers 1, 2, and 3."
      Course 4 Play Lab Params 6_markdown_instruction: "Add another parameter called\n`speed` to the `patrol` function. Try using a `set speed` block with the new\n`speed` parameter to help Penguin get both flags before the other sprites\neven get one."
      Course 4 Play Lab Params 7_markdown_instruction: "Let's have some fun! Look\nat the code provided to see if you can figure out what each block does.  \\r\n\\r\nWhen\nyou're done, use the arrow keys to control Dog and collect all of the flags.\\r\n\\r\n**NOTE:**\nYou don't need to make any changes to the program"
      Course 4 Play Lab Params 8_markdown_instruction: "Use the `when actor touches`\nblock to send Dog back to the top-left ONLY if Dog touches any of the other\nactors."
      Course 4 Play Lab Params 9_markdown_instruction: "Here's our game from an\nearlier stage but most of the code is hidden. We've added a new function\ncalled `score_points.`\\r\n<br/>\\r\n<hr>\\r\n<br/>\\r\n<h4>\\r\nEdit the function\nso that a new parameter called `points` is added to `player_score`.  \\r\n<br/>\\r\nThe\nvariable `player_score` should increase each time Dog tags Cat with pie, and\ndecrease each time that Cat tags Dog with a sandwich.\\r\n</h4>\\r\n<br/>\\r\n<hr>\\r\n*Note:\nWhen you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove on to the next puzzle.*"
      Course 4 Play Lab Vars 1_markdown_instruction: "This time you don't have to\nwrite any code, just hit `Run` to play the game! \\r\n\\r\n<br/>\\r\nIn this\ngame, you're the dog who is trying to collect more flags than the cat. Use\nthe down arrow to control the dog. Press `Finish` when you're done playing."
      Course 4 Play Lab Vars 2_markdown_instruction: "The race in that last puzzle\nwasn't very fair! Change the `dog_speed` variable to make sure you can collect\nmore flags than Cat. The first to collect 10 flags wins!"
      Course 4 Play Lab Vars 3_markdown_instruction: "Here's a new kind of game!\n\\r\n\\r\nYou don't need to change anything on this level.\\r\n\\r\n**Directions:**\nUse the left and right arrows to move, and the up arrow to jump. See if you\ncan collect all of the flags."
      Course 4 Play Lab Vars 4_markdown_instruction: "Now we're using a variable\ncalled `height` to control how high the dog can jump. Update the `height`\nvariable so that the dog can jump high enough to reach all the flags. \\r\n"
      Course 4 Play Lab Vars 6_markdown_instruction: "<h5><b>\\r\nIn our game, how\nshould we score points? \\r\n</b></h5> \\r\n<br/>\\r\n\\r\n1. Add 1 to your `points`\nvariable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \\r\n2.\nUse the `when actor 2 touches anything` event to trigger an update to your\nscore. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>\n\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n<br/><br/>\\r\n<h4>\\r\n**Note:**\nUse the right arrow to throw pie!\\r\n</h4>"
      Course 4 Play Lab Vars 7_markdown_instruction: "Nice, now let's make sure\nthis game isn't too easy to play!  \\r\n\\r\nAny time Dog (actor 1) gets hit\nby a sandwich from Cat (actor 2), you should lose a point. \\r\n\\r\nStart with\n10 points so it's not too hard. Let your score drop down from 10 to 0 to\npass the level."
      Course 4 Play Lab Vars 9_markdown_instruction: "Free Play time! Here are all\nof the variables we've played with so far in this stage, as well as a few\nmore in case you want them. \\r\n\\r\nNotice that there are now so many blocks\nin our toolbox that they need to be organized!  Here, we've put each piece\ninto an appropriate category.  Take some time to explore everything that is\navailable. When you're done browsing, make a game or story using repeats,\nvariables, and events.  \\r\n\\r\n*Hint: scroll down to see all the commands\nin the workspace.*"
      Course 4 Play Labs For Loops 1_markdown_instruction: "Let's make the dog speak\nevery number from 1 to 100. Use a `for` loop and the counter block to speak\nthe counter variable each time the loop is run."
      Course 4 Play Labs For Loops 4_markdown_instruction: "Changing the increment\ncan be helpful, but we're still counting linearly (each number is the same\ndistance from the last) What if I wanted to count exponentially? \\r\n\\r\n<br/>\\r\nWithout\nchanging the settings in this for loop, can you count 1, 4, 9, 16, 25... (counter\nsquared)?"
      Course 4 Play Labs For Loops 4a_markdown_instruction: "Now, let's blend the\nvariables from Stage 7 together with your `counter` variable to make some\nmagic happen.   \\r\n\\r\nIn this puzzle, Dog will count from **0** to **1000**\nby `increment`.  Set the `increment` variable to **10** at the beginning of\nyour code to see what happens."
      Course 4 Play Labs For Loops 5_markdown_instruction: "In the last stage we\ncounted the square of each number. Try changing `counter ^ 2` to `counter\n^ 3` to count the cube of each number (1, 8, 27, 64, 125, 216, 343…)"
      Course 4 Play Labs For Loops 5a_markdown_instruction: "In this puzzle, Dog\nwill be your time keeper.\\r\n\\r\nDog will count from **0** to **30** by `increment`.  The\n`increment` variable will begin with a value of **1**.\\r\n\\r\nCan you make\nit so that each time you click Dog, `increment` increases by **2**?  Click\nthe forward arrow to run the `for loop`.  \\r\n\\r\n**Note:** Run the loop a\ncouple of times, clicking Dog before each one."
      Course 4 Play Labs For Loops 6a_markdown_instruction: "Now that we've seen\nhow to control our `for loop` using variables inside of our program, let's\nmake a game!\\r\n\\r\nDog will still keep time by counting with our `for loop`\nby `increment`, but this time we will add The Wizard into the mix.  Can you\nchange the code so that `increment` goes up by two each time The Wizard is\nclicked?\\r\n\\r\nWatch out!  The Wizard moves quickly!"
      Course 4 Play Labs For Loops 7a_markdown_instruction: "Now we're getting somewhere!  What\nif we start counting how many times we can click The Wizard before Dog gets\nto 30?  \\r\n\\r\nFinish adding blocks to The Wizard so that every time he's\nclicked the variable `clicked` increases by one. You can ignore `increment`\nfor now.\\r\n\\r\n**Note:** Dog will start counting when you click `Run`."
      Course 4 Play Labs For Loops 8_markdown_instruction: "Now, help the actors\nmove as they count.  \\r\n\\r\nDog should move and count by adding 2 (`counter\n+ 2`) each time.  Cat will move and count by multiplying by 2 (`counter *2`)  each\ntime. Penguin will move and count to the power of 2 (`counter ^ 2`) each time.  Who\nwill reach their flag first?"
      Course 4 Play Labs For Loops 8a_markdown_instruction: "To finish our game,\nwe need to bring back the `increment` variable!    Let's tie it to the level\nof the game.\\r\n\\r\n1) Keep track of the number of times The Wizard is clicked.  \\r\n2)\nIf The Wizard is clicked at least 10 times before Dog counts to 30, raise\n`increment` by 1 and start again.  \\r\n3) If The Wizard does not get clicked\nat least 10 times, the game is over.  "
      Course 4 Playlab For Loop Freeplay_markdown_instruction: "**Freeplay:** Use\neverything you've learned so far to make a game that includes a `for` loop!"
      Course 4 Playlab For Loops 4b_markdown_instruction: "Now, these two characters\nare going to race!  \\r\n\\r\nEach of them will move `counter` steps at a time,\nbut their counters will have different values because of the `for` loops.  \\r\n\\r\nCan\nyou change the **increment** in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b_markdown_instruction: "Adjust the interval on\nthese `for` loops so that the two characters end in the exact same place."
      Course 4 Playlab For Loops 6b_markdown_instruction: "Now we're going to use\n`for` loops in a whole different way!\\r\n\\r\nThis game gets hard quickly because\nthe time between disappearances shrinks fast!\\r\n\\r\n<hr/>\\r\n\\r\n**Edit this\n`for` loop to create a game that's fun for you to play!**  \\r\n\\r\n<hr/>\\r\n\\r\nPress\n\"Run\" and click Madame Unicorn as many times as you can.  Can you beat our\nscore of 24? "
      Course 4 SCF 1_markdown_instruction: "**Functions Super Challenge:** Use the\nsuggested functions to draw four rows of hexagons. Notice how our even numbered\nrows are shifted to the right?"
      Course 4 SCF 1a_markdown_instruction: "**Functions Super Challenge:** Can you\nfigure out how to collect all of this nectar with the fewest blocks possible?"
      Course 4 SCF 1b_markdown_instruction: "**Functions Super Challenge:** Can you\nfigure out how to collect all of this honey with the fewest blocks possible?\\r\n"
      Course 4 SCF 2_markdown_instruction: "**Functions Super Challenge:** Use what\nyou learned in the previous level to draw an image like this.\\r\n\\r\n*Note:\nThe code becomes more simple if you incorporate parameters.*  "
      Course 4 SCF 3 Fail 1_markdown_instruction: "**Functions Super Challenge #1:**\n\\r\n\\r\n"
      Course 4 SCF 3 Fail 2_markdown_instruction: "**Functions Super Challenge #1:**\n\\r\n\\r\n"
      Course 4 SCF 3_markdown_instruction: "**Functions Super Challenge:** Use what\nyou learned in the previous level to draw an image like this.\\r\n\\r\n*Note:\nThe code becomes more simple if you incorporate parameters.*\\r\n\\r\n<br/>\\r\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>  "
      Course 4 SCFL 1_markdown_instruction: "**For-Loops Super Challenge:** Solve\nthis puzzle with the fewest number of blocks possible."
      Course 4 SCFL 1a_markdown_instruction: "**For Loops Super Challenge:** Can\nyou get Scrat to his acorn using as few blocks as possible?\\r\n"
      Course 4 SCFL 1b_markdown_instruction: "**For Loops Super Challenge:** Can\nyou get Scrat to his acorn using as few blocks as possible?"
      Course 4 SCFL 2_markdown_instruction: "**For-Loops Super Challenge:** Solve\nthis puzzle with the fewest number of blocks possible.  \\r\n<br/>"
      Course 4 SCFL 3_markdown_instruction: "**For-Loops Super Challenge:** Can you\nfigure out how to re-create this drawing? \\r\n\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>"
      Course 4 SCFL 4_markdown_instruction: "**For-Loops Super Challenge:** Can you\nfigure out how to re-create this drawing? \\r\n\\r\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"\nwidth=\"350px\"/>"
      Course 4 SCFL 5_markdown_instruction: "**For-Loops Super Challenge #5:** Can\nyou figure out how to re-create this drawing? \\r\n\\r\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"\nwidth=\"350px\"/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Hints</b></summary>\\r\n\\t<br/><br/>\\r\n\\t<h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#1</b></summary>\\r\n    \\t<br/>\\r\n    \\tThe color change happens using the\n`set color with red, green, blue` block.  Red is always the value of `counter`,\ngreen is always `255 - counter`, and blue remains constant at 255 exactly.\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#2</b></summary>\\r\n    \\t<br/>\\r\n    \\tEach shape is a square with sides\nthat are `counter` pixels long, starting with 5px, and increasing by 5px all\nthe way up to 200px.\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Hint\n#3</b></summary>\\r\n    \\t<br/>\\r\n    \\tThe artist turns 15 degrees between\neach square.\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n    \\r\n    <h5>\\r\n\\t<details>\\r\n\\t<summary><b>Solution</b></summary>\\r\n    \\t<br/>\\r\n    \\t<br/>\\r\n    \\t<img\nsrc=\"https://images.code.org/0bf4c87e33459f832258939ec53ad595-image-1446002848701.59.15.png\"\nwidth=\"450px\"/>\\r\n    \\t<br/><br/>\\r\n    </details>\\r\n\\t</h5>\\r\n</details>\\r\n</h4>"
      Course 4 SCFL 6_markdown_instruction: "**For-Loops Super Challenge:** Can you\nfigure out how to re-create this drawing with a single loop? \\r\n\\r\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      Course 4 SCFL 7_markdown_instruction: "**For-Loops Super Challenge:** The artist\nwants to catch some waves! Can you figure out how to re-create this drawing?\n\\r\n\\r\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"\nwidth=\"350px\"/>"
      Course 4 SCFP 1_markdown_instruction: "Create a function with parameters that\nallows the artist to jump backward and forward by x pixels, and also up and\ndown by y pixels (using positive and negative numbers)."
      Course 4 SCV 1_markdown_instruction: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Variables Super Challenge:** You've now learned\neverything you need to know to make a pattern like this! This puzzle is meant\nto be difficult.  Can you stick with it until you figure out the solution?"
      Course 4 SCV 2_markdown_instruction: "<img src=\"https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Variables Super Challenge:** You've now learned\neverything you need to know to make a pattern like this! This puzzle is meant\nto be difficult.  Can you stick with it until you figure out the solution?"
      Course 4 SCV 3_markdown_instruction: "**Variables Super Challenge:** You've\nnow learned everything you need to know to solve this puzzle! This game is\nmeant to be difficult.  Can you stick with it until you figure out the solution?\\r\n\\r\n<hr/>\\r\n\\r\nNow\nfor a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get\nexactly 10 points to win!\\r\nBut be careful, when Cat and Penguin tag each\nother, they take points away.\\r\n\\r\n<strong>\\r\nAdd the blocks necessary\nto make this game work the way it's been explained. \\r\n- How will you get\nDog to move in all directions using the arrow keys?  \\r\n- How will you add\npoints when Dog tags Cat or Penguin?  \\r\n- How will you subtract points when\nCat and Penguin touch?\\r\n</strong>\\r\n\\r\n<hr/>"
      Course 4 SCV 4_markdown_instruction: "**Variables Super Challenge:** Solve\nthis puzzle with the fewest number of blocks possible."
      Course 4 SCV 5_markdown_instruction: "**Variables Super Challenge:** Solve\nthis puzzle with the fewest number of blocks possible."
      Course 4 SCV 6_markdown_instruction: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Variables Super Challenge:** You've now learned\neverything you need to know to make a pattern like this! This puzzle is meant\nto be difficult.  Can you stick with it until you figure out the solution?  "
      Course 4 SCVP 1_markdown_instruction: "Create a function with parameters that\nallows the artist to jump backward and forward by x pixels, and also up and\ndown by y pixels (using positive and negative numbers)."
      Course 4 Variables Assessment_markdown_instruction: "Can you create this image\nusing a variable for `sides`? Each line should be 50 pixels long."
      CourseF_PlayLab_vars1_markdown_instruction: "To play this game, you don't\nhave to write any code, just hit \"Run\"! \\r\n<hr/>\\r\nHere, you're the dog\nwho is trying to collect more flags than the cat.  \\r\n_(Use the down arrow\nto move.)_"
      CourseF_PlayLab_vars10_markdown_instruction: "Free Play time! Here are all\nof the variables we've played with so far in this stage, as well as a few\nmore in case you want them. \\r\n\\r\nNotice that there are now so many blocks\nin our toolbox that they need to be organized!  Here, we've put each piece\ninto an appropriate category.  Take some time to explore everything that is\navailable. When you're done browsing, make a game or story using repeats,\nvariables, and events.  \\r\n\\r\n*Hint: scroll down to see all the commands\nin the workspace.*"
      CourseF_PlayLab_vars2_markdown_instruction: "The race in that last puzzle wasn't\nvery fair! Change the `dog_speed` variable to make sure you can collect more\nflags than Cat. The first to collect 10 flags wins!"
      CourseF_PlayLab_vars3_markdown_instruction: "Here's a new kind of game! \\r\n\\r\nYou\ndon't need to change anything on this level.\\r\n\\r\n**Directions:** Use the\nleft and right arrows to move, and the up arrow to jump. See if you can collect\nall of the flags."
      CourseF_PlayLab_vars4_markdown_instruction: "Now we're using a variable called\n`height` to control how high the dog can jump. Update the `height` variable\nso that the dog can jump high enough to reach all the flags. "
      CourseF_PlayLab_vars6_markdown_instruction: "<h5><b>\\r\nIn our game, how should\nwe score points? \\r\n</b></h5> \\r\n<br/>\\r\n\\r\n1. Add 1 to your `points`\nvariable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \\r\n2.\nUse the `when actor 2 touches anything` event to trigger an update to your\nscore. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>\n\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n<br/><br/>\\r\n<h4>\\r\n**Note:**\nUse the right arrow to throw pie!\\r\n</h4>"
      CourseF_PlayLab_vars7_markdown_instruction: "<h5><b>\\r\nIn our game, how should\nwe score points? \\r\n</b></h5> \\r\n<br/>\\r\n\\r\n1. Add 1 to your `points`\nvariable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \\r\n2.\nUse the `when actor 2 touches anything` event to trigger an update to your\nscore. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>\n\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n<br/><br/>\\r\n<h4>\\r\n**Note:**\nUse the right arrow to throw pie!\\r\n</h4>"
      CourseF_PlayLab_vars8_markdown_instruction: "<h5><b>\\r\nIn our game, how should\nwe score points? \\r\n</b></h5> \\r\n<br/>\\r\n\\r\n1. Add 1 to your `points`\nvariable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \\r\n2.\nUse the `when actor 2 touches anything` event to trigger an update to your\nscore. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>\n\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n<br/><br/>\\r\n<h4>\\r\n**Note:**\nUse the right arrow to throw pie!\\r\n</h4>"
      CourseF_PlayLab_vars9_markdown_instruction: "Nice, now let's make sure this\ngame isn't too easy to play!  \\r\n\\r\nAny time Dog (actor 1) gets hit by\na sandwich from Cat (actor 2), you should lose a point. \\r\n\\r\nStart with\n10 points so it's not too hard. Let your score drop down from 10 to 0 to\npass the level."
      Crack Random Substitution_markdown_instruction: "# Break a random substitution\ncipher!\\r\n\\r\nThis version of the tool gives you more information about the\nencrypted text and more options for how to try out different substitutions.\\r\n\\r\n###\nDifferent ways to analyze text\\r\n- Play with some of the sorting options\navailable in the Random substitution cipher tab to get different views on\nthe letter frequencies in the input text as well as standard English text.\\r\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\\r\n\\r\n###\nDifferent ways to substitute\\r\n- To substitute a letter you can drag a blue\nletter of the alphabet directly underneath the orange letter you want changed\nin the original ciphertext.\\r\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\\r\n\\r\n###\nPlay.  Always play.\\r\n- There are other ways to analyze and substitute characters\nthat you can find by clicking on the buttons and trying out whatever you like.\\r\n-\nRemember: you can't break it :)\\r\n\\r\nSee how long it takes you to crack\nthe cipher! Is this a good method of encrypting secret data?\\r\n\\r\n<img src=\"http://code.org/api/hour/finish_encryption.png\">"
      Crack a Caesar Cipher_markdown_instruction: "# Crack a Caesar cipher!\\r\n\\r\nThis\ntool lets you play with text and do Caesar ciphers. You can use this to either\nencrypt a message or decrypt it.\\r\n\\r\n# Do this\\r\n- Load a **Sample message**\nfrom the message dropdown. This will load a message that has been encrypted\nwith a Caesar cipher.\\r\n\\r\n![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)\\r\n\\r\n-\nUsing the buttons in the Caesar substitution tab, you can shift the alphabet\nforwards or backwards to try to unscramble the message.\\r\n\\r\n![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)\\r\n\\r\nSee\nhow long it takes you to crack the cipher! Is this a good method of encrypting\nsecret data?\\r\n\\r\n<img src=\"http://code.org/api/hour/begin_encryption.png\">\\r\n\\r\n"
      D_Frozen_nested3_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s make it into a snowflake.\"_\\r\n\\r\nNext, jump Elsa back to the center\nusing the `jump to 200 over and 200 down` block, and spin her around to draw\nthe line of shapes again and again in a bunch of different directions.   \\r\n\\r\nWhat\namazing snowflakes you can make!\\r\n<hr/>\\r\nTake a look at these examples\nwith polygons:  \\r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\\r\n\\r\nAbstract\nshapes might make a snowflake more like one of these:  \\r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      D_Frozen_nested4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering two different shapes of snowflakes on top of one another with a little\nturn in between - see what you get! "
      D_Frozen_nested5_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Get creative with shapes and angles to see what kind of new snowflakes\nwe can draw!\"_\\r\n"
      D_Frozen_nested6_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s try something new. This time, skate in a zig-zag.\"_\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\\r\nDraw a\nstair-step pattern that uses turns between 75 and 105 degrees -- but make\nsure that your left and right turns use the same angle.  \\r\n(You will see\nwhy later.)"
      D_Frozen_nested7_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Now let’s turn and go back the way we came.\"_\\r\n\\r\nTurn around 180 degrees\nand draw the exact same stair pattern again!  \\r\n\\r\n- The rest of this stage\nwill be easier if you put all of your code inside of a loop to make Elsa  draw,\nturn around 180 degrees, draw, then turn around 180 degrees again.\\r\n\\r\n<hr/>\\r\n\\r\nHere\nis an example of stairs that use a 76 degree turn:\\r\n\\r\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      D_Frozen_nested8_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s spin and make it into a snowflake.\"_\\r\n\\r\nSpin that shape around\n5 or 6 times in a circle.\\r\n- If you choose 5 times,  try a turn of 72 degrees\\r\n-\nIf you choose 6 times,  try a turn of 60 degrees\\r\n<hr/>\\r\n\\r\nHere's an\nexample of Elsa turning a pattern 6 times:\\r\n\\r\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      D_Frozen_nested9_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now,\nwhat should we do? Let’s explore and create our own winter wonderland!\"_\\r\n\\r\nTry\nplaying around with what you've created. Draw whatever you like!\\r\n- What\nhappens if you use two different angles in your stair step pattern?\\r\n- What\nhappens if you make your diamond pattern longer or shorter?\\r\n- What does\nit look like to draw two snowflakes on top of one another?\\r\n"
      Data Visualizations 101_markdown_instruction: "## Data Visualization 101: How\nto design charts and graphs\\r\n\\r\nIn lesson 10, students evaluate a curated\nset of visualizations based on how effective they are at clearly and accurately\ncommunicating what they're representing. After they've done this evaluation\nfor themselves, they explore this resource, which formally introduces the\nnames of the different types of charts they've been seeing and goes into\ndetail about what types of data each chart can represent most appropriately,\nas well as best practices for designing each type of chart.\\r\n\\r\n"
      Designing Assessment Questions_markdown_instruction: "## Designing Test Questions\\r\n\\r\nThe\nfollowing resource is from the University of North Carolina Charlotte's Center\nfor Teaching and Learning. In it you will find a breakdown of the uses and\ntradeoffs for common assessment types, along with tips for writing good items.\\r\n\\r\n\\r\n"
      'Discovery Learning: Definition and History_markdown_instruction': "The following\nlink is a resource that shows some of the history behind discovery learning:\n"
      'Discovery Learning: Principals and Techniques_markdown_instruction': "The\nfollowing link is a resource that shows the principles and techniques of discovery\nlearning: "
      'Discovery Learning: Principles and Techniques_markdown_instruction': "The\nfollowing link is a resource that shows the principles and techniques of discovery\nlearning: "
      Discovery learning definition and history_markdown_instruction: "The following\nlink is a resource that shows some of the history behind discovery learning:\n"
      Discovery learning techniques_markdown_instruction: "The following link is\na resource that shows the principles and techniques of discovery learning:\n"
      ECS Unit 2 Challenge Selection_markdown_instruction: "# Challenge Overview\n> What's your Challenge? \\r\n\\r\n## Enter the lesson you selected for your\nchallenge in the text box below.\\r\n\\r\n- Day 7-9: CSDT Cornrow Braiding\\r\n-\nDay 10-12: Binary\\r\n- Day 13-14: Linear and Binary Search (Tower Building)\n\\r\n- Day 15-16: Sorting \\r\n- Day 17: Minimal Spanning Trees\\r\n- Day 18-21:\nUnit Final Project\\r\n\\r\nNow that you've selected a lesson, head to the\nforum and **share which lesson you plan to complete** for your challenge.\\r\n\\r\n####\n<a href=\"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank>Forums <i\nclass=\"fa fa-external-link\" /></a>"
      ECS Unit 2 Challenge Submission_markdown_instruction: "# Share Out and Submit\n> Submit Link\\r\n\\r\n##  Share your Artifacts and Advice\\r\n**Head to the\nforum** and share: \\r\n\\r\n- Any data visualization or other artifact you\ncreated in doing the \\r\n - Use the “SHARE” button in code studio to get a\nlink to your program:   \\r\n- The assessment question or extending learning\nactivity that you produced for this lesson.\\r\n- Notes for others who are\ngoing to teach this lesson. This should include: \\r\n - Advice for someone\nwho is going to teach this lesson (consider what was challenging about doing\nthe lesson, what you think students will struggle with, etc).\\r\n - What ideas\ndo you have about how to structure and teach this lesson? what modifications\ndo you plan to make to the lesson?\\r\n - What additional resources (if any)\nmight be helpful in teaching this lesson\\r\n\\r\n\\r\n<hr>\\r\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit2\"\ntarget=_blank> Head to the Forum >></a>\\r\n<hr>\\r\n\\r\n## Check out what others\nhave posted! \\r\nOnce you've posted your own challenge results, check out\nwhat others have posted! Be sure to click through the other lessons as well\nand read through their work. Remember, a big goal here is to learn from one\nanother so let people know when your find their suggestions helpful, or provide\nyour own ideas when you come across questions. Be sure to use the **heart**\nfeature on the forum to vote for posts you find particularly useful! \\r\n\\r\n<br/><br/>\\r\n\\r\n##  Submit\nthe Link for your Forum Post for Review\\r\n\\r\nIf you would like to receive\npayment for this online PD, please submit a link to that forum post here so\nwe can review! \\r\n\\r\nIn order to get a dirct link to your post, click the\nlink icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECS Unit 3 Challenge Selection_markdown_instruction: "# Challenge Overview\n> What's your Challenge? \\r\n\\r\n## Enter the lesson you selected for your\nchallenge in the text box below.\\r\n\\r\nHTML Beginners:\\r\n\\r\n- Day 3-4,5:\nBasic HTML - Paragraph, Header, Strong, and EM Tags\\r\n- Day 6--7: HTML -\nImages\\r\n- Day 14: HTML - Links\\r\n\\r\nCSS Beginners:\\r\n\\r\n- Day 8-10:\nBasic CSS \\r\n\\r\nMore Experienced with HTML and CSS:\\r\n\\r\n- Day 11-13:\nHTML and CSS \\r\n- Day 17-19: HTML and CSS: Create Your Own Webpage\\r\n- Day\n22-25: Unit Final Project\\r\n- Day 18-21 Final Unit Project\\r\n\\r\n\\r\nNow\nthat you've selected a lesson, head to the forum and **share which lesson\nyou plan to complete** for your challenge.\\r\n\\r\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit3\"\ntarget=_blank>Forums <i class=\"fa fa-external-link\" /></a>"
      ECS Unit 3 Challenge Submission_markdown_instruction: >
        Submit Link\r\n\r\n##  Share your Artifacts and Advice\r\n**Head to the forum** and share: \r\n\r\n- Any data visualization or other artifact you created in doing the \r\n - Use the “SHARE” button in code studio to get a link to your program:   \r\n- The assessment question or extending learning activity that you produced for this lesson.\r\n- Notes for others who are going to teach this lesson. This should include: \r\n - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\r\n - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\r\n - What additional resources (if any) might be helpful in teaching this lesson\r\n\r\n\r\n<hr>\r\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit3\" target=_blank> Head to the Forum >></a>\r\n<hr>\r\n\r\n## Check out what others have posted! \r\nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \r\n\r\n<br/><br/>\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECS Unit 4 Challenge Selection_markdown_instruction: "# Challenge Overview\n> What's your Challenge? \\r\n\\r\n## Enter the lesson you selected for your\nchallenge in the text box below.\\r\n\\r\nNew to Programming?\\r\n\\r\n- Day 2-3:\nScratch - Name Project\\r\n- Day 4: Scratch - Knock Knock Joke\\r\n- Day 5-6:\nScratch - Moving Sprites \\r\n\\r\nNew to Scratch:\\r\n\\r\n- Day 7-8: Scratch\n- Event Driven Programming\\r\n- Day 9: Scratch - Broadcast Roleplay\\r\n- Day\n10-13: Scratch - Broadcasting\\r\n\\r\nSome Experience with Scratch and Programming:\\r\n\\r\n-\nDay 18, 19: Rock Paper Scissors and Timer\\r\n- Day 20-23: Scratch - Timing\nGame\\r\n- Day 25-30: Unit Final Project\\r\n\\r\n\\r\n\\r\nNow that you've selected\na lesson, head to the forum and **share which lesson you plan to complete**\nfor your challenge.\\r\n\\r\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit4\"\ntarget=_blank>Forums <i class=\"fa fa-external-link\" /></a>"
      ECS Unit 4 Challenge Submission_markdown_instruction: "# Submit a Link\\r\n\\r\n##  Share\nyour Artifacts and Advice\\r\n**Head to the forum** and share: \\r\n\\r\n- Any\ndata visualization or other artifact you created in doing the \\r\n - Use the\n“SHARE” button in code studio to get a link to your program:   \\r\n- The assessment\nquestion or extending learning activity that you produced for this lesson.\\r\n-\nNotes for others who are going to teach this lesson. This should include:\n\\r\n - Advice for someone who is going to teach this lesson (consider what\nwas challenging about doing the lesson, what you think students will struggle\nwith, etc).\\r\n - What ideas do you have about how to structure and teach\nthis lesson? what modifications do you plan to make to the lesson?\\r\n - What\nadditional resources (if any) might be helpful in teaching this lesson\\r\n\\r\n\\r\n<hr>\\r\n###\n<a href= \"http://forum.code.org/c/ecs/ecs-unit4\" target=_blank> Head to\nthe Forum >></a>\\r\n<hr>\\r\n\\r\n## Check out what others have posted! \\r\nOnce\nyou've posted your own challenge results, check out what others have posted!\nBe sure to click through the other lessons as well and read through their\nwork. Remember, a big goal here is to learn from one another so let people\nknow when your find their suggestions helpful, or provide your own ideas when\nyou come across questions. Be sure to use the **heart** feature on the forum\nto vote for posts you find particularly useful! \\r\n\\r\n<br/><br/>\\r\n\\r\n##  Submit\nthe Link for your Forum Post for Review\\r\n\\r\nIf you would like to receive\npayment for this online PD, please submit a link to that forum post here so\nwe can review! \\r\n\\r\nIn order to get a direct link to your post, click the\nlink icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECS Unit 5 Challenge Selection_markdown_instruction: "# What's your Challenge?\n\\r\n\\r\n## Enter the lesson you selected for your challenge in the text box\nbelow.\\r\n\\r\n- Day 1 - 3: Room data project, set up final project\\r\n- Day\n4 - 5: Developing research questions\\r\n- Day 6 - 7: Building group norms\\r\n-\nDay 8: Check in Day\\r\n- Day 9 - 11: Maps, identifying variables, subsetting\ndata, sorting data, frequency of types.\\r\n- Day 12: Bubble Charts\\r\n- Day\n13: Review: Bubble Charts\\r\n- Day 14 - 15: Bar Plots\\r\n- Day 16: Mosaic\nPlots\\r\n- Day 17: Review: Bar and Mosaic Plots\\r\n- Day 18 - 20: Mean, Median,\nMinimum, Maximum, Histograms, Box Plots\\r\n- Day 21: Review: Mean, Median,\nMinimum, Maximum\\r\n- Days 22 - 24: Filtering Text data (remove punctuation,\nremove case, remove stop words, stemming), Analyzing word counts.\\r\n- Day\n25: Review: Text Data\\r\n- Day 26 - 27: Incorporate  data techniques into\nfinal project\\r\n- Day 28 - 29: Build project presentations\\r\n- Day 30: Present\nfinal project\\r\n\\r\nNow that you've selected a lesson, head to the forum\nand **share which lesson you plan to complete** for your challenge.\\r\n\\r\n####\n<a href=\"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank>Forums <i\nclass=\"fa fa-external-link\" /></a>"
      ECS Unit 5 Challenge Submission_markdown_instruction: "# Submit a Link\\r\n\\r\n##  Share\nyour Artifacts and Advice\\r\n**Head to the forum** and share: \\r\n\\r\n- Any\ndata visualization or other artifact you created in doing the \\r\n - Use the\n“SHARE” button in code studio to get a link to your program:   \\r\n- The assessment\nquestion or extending learning activity that you produced for this lesson.\\r\n-\nNotes for others who are going to teach this lesson. This should include:\n\\r\n - Advice for someone who is going to teach this lesson (consider what\nwas challenging about doing the lesson, what you think students will struggle\nwith, etc).\\r\n - What ideas do you have about how to structure and teach\nthis lesson? what modifications do you plan to make to the lesson?\\r\n - What\nadditional resources (if any) might be helpful in teaching this lesson\\r\n\\r\n\\r\n<hr>\\r\n###\n<a href= \"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank> Head to\nthe Forum >></a>\\r\n<hr>\\r\n\\r\n## Check out what others have posted! \\r\nOnce\nyou've posted your own challenge results, check out what others have posted!\nBe sure to click through the other lessons as well and read through their\nwork. Remember, a big goal here is to learn from one another so let people\nknow when your find their suggestions helpful, or provide your own ideas when\nyou come across questions. Be sure to use the **heart** feature on the forum\nto vote for posts you find particularly useful! \\r\n\\r\n<br/><br/>\\r\n\\r\n##  Submit\nthe Link for your Forum Post for Review\\r\n\\r\nIf you would like to receive\npayment for this online PD, please submit a link to that forum post here so\nwe can review! \\r\n\\r\nIn order to get a direct link to your post, click the\nlink icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECS Unit 6 Challenge Selection_markdown_instruction: "# Unit 6 Challenge Selection\\r\n\\r\n##\nEnter the lesson you selected for your challenge in the text box below.\\r\n\n\\r\nFrom the curriculum\\r\n\\r\n- Day: 1 What is a robot / what makes a computer\nrobotic?\\r\n- Days: 2-3 Evaluate robot body designs and  algorithms that control\nrobot behavior\\r\n- Day: 4 Set up the Lego kit\\r\n- Day: 5 Build robot base\\r\n-\nDay: 6-7 Introduce NXT brick features\\r\n- Day: 8-9 Introduce NXT software\\r\n-\nDay: 10-13 Program robot using tutorials (using sensors for input)\\r\n- Day:\n14 Describe RoboCup & RoboCupJunior\\r\n- Day: 15 Human robot tic-tac-toe\\r\n-\nDays: 16-18 Program dancing robot\\r\n- Days 19-23 Program rescue robot\\r\n-\nDays 24-33 Final projects and presentations\\r\n\\r\nAlternative Topics\\r\n\\r\n-\nOnline simulations\\r\n- Physical computing options\\r\n- Projects and portfolios\\r\n\\r\nNow\nthat you've selected a challenge topic, **share what you plan to do** for\nyour challenge.\\r\n\\r\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit6\"\ntarget=_blank>Head to the Forums <i class=\"fa fa-external-link-square\" /></a>"
      ECS Unit 6 Challenge Submission_markdown_instruction: "# Submit a Link\\r\n\\r\n##  Share\nyour Artifacts and Advice\\r\n**Head to the forum** and share: \\r\n\\r\n- Any\ndata visualization or other artifact you created in doing the \\r\n - Use the\n“SHARE” button in code studio to get a link to your program:   \\r\n- The assessment\nquestion or extending learning activity that you produced for this lesson.\\r\n-\nNotes for others who are going to teach this lesson. This should include:\n\\r\n - Advice for someone who is going to teach this lesson (consider what\nwas challenging about doing the lesson, what you think students will struggle\nwith, etc).\\r\n - What ideas do you have about how to structure and teach\nthis lesson? what modifications do you plan to make to the lesson?\\r\n - What\nadditional resources (if any) might be helpful in teaching this lesson\\r\n\\r\n\\r\n<hr>\\r\n###\n<a href= \"http://forum.code.org/c/ecs/ecs-unit6\" target=_blank> Head to\nthe Forum >></a>\\r\n<hr>\\r\n\\r\n## Check out what others have posted! \\r\nOnce\nyou've posted your own challenge results, check out what others have posted!\nBe sure to click through the other lessons as well and read through their\nwork. Remember, a big goal here is to learn from one another so let people\nknow when your find their suggestions helpful, or provide your own ideas when\nyou come across questions. Be sure to use the **heart** feature on the forum\nto vote for posts you find particularly useful! \\r\n\\r\n<br/><br/>\\r\n\\r\n##  Submit\nthe Link for your Forum Post for Review\\r\n\\r\nIf you would like to receive\npayment for this online PD, please submit a link to that forum post here so\nwe can review! \\r\n\\r\nIn order to get a direct link to your post, click the\nlink icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSPD Binary Odometer_markdown_instruction: "# Binary Odometer Widget\\r\n\\r\nThis\nwidget was created as part of the Code.org Computer Science Principles class.\nIt is a great additional resource for teaching binary!\\r\n"
      ECSPD Fence post Q1_markdown_instruction: "## Fence Post Problem:\n\nYou need\nto build one side of a fence that is 12 yards long. This fence will be built\nwith fence posts and rails that connect one fence post to another. If each\nfence post is 1 yard away from the next fence post, how many fence posts will\nbe needed for this side of the fence? How many fence posts will be needed\nfor a side of a fence that is N (where N > 0) yards long?\n"
      ECSPD Handshake Q1_markdown_instruction: "## Handshake Problem #1:\n\nAssume\nthere are 20 people in a room, including you. You must shake hands with everyone\nelse in the room. How many hands will you shake? If there are N (where N>0)\npeople in the room, how many hands will you shake?\n"
      ECSPD Online U1D1-2 Assessment 1_markdown_instruction: "Did you have coffee\nthis morning? If you did, odds are you used a computer. If you made the coffee\nyourself, your coffee maker probably had a digital clock or a programmable\ntimer. If you bought it, the barista likely used a card reader with an electronic\ncash register to take your payment. Think through your day and record how\nmany computers you used before sitting down in front of a desktop or a laptop\n(or whatever device you are using right now). Don't forget the computers\nin your car, your refrigerator, your alarm clock...\n"
      ECSPD Online U1D1-2 Reflection_markdown_instruction: "You have experienced\nthe lesson both online and on the first day of the in-person PD. Additionally,\nyou have watched a video defining computers. What have you learned that you\ncan take back to your classroom? Use this space to record your ideas for this\nlesson. You will have a chance to share your ideas and questions in a forum\nin the following level.\n"
      ECSPD Online U1D10 Reflection_markdown_instruction: "You have experienced the\nlesson both online and on the first day of the in-person PD. Additionally,\nyou have watched a TED talk about the representation of data. What have you\nlearned that you can take back to your classroom? Use this space to record\nyour ideas for this lesson. You will have a chance to share your ideas and\nquestions in a forum in the following level."
      ECSPD Online U1D11-14 Reflection_markdown_instruction: "You have experienced\npart of this lesson online and have investigated other design tools. What\nhave you learned that you can take back to your classroom? How will you tackle\nthis lesson's unique challenges? Use this space to record your ideas for\nthis lesson. You will have a chance to share your ideas and questions in a\nforum in the following level.\n"
      ECSPD Online U1D15-16 Reflection_markdown_instruction: "You have experienced\nthe lesson on the first day of the in-person PD and have watched a TED talk\nabout the extent of the use of algorithms in the world. What have you learned\nthat you can take back to your classroom? Use this space to record your ideas\nfor this lesson. You will have a chance to share your ideas and questions\nin a forum in the following level."
      ECSPD Online U1D17-19 Assessment_markdown_instruction: "Take some time to look\nover the lesson and the unplugged activity. Think about your classroom and\nthe space you have available to run the Turing Test Activity. How are you\nplanning to set up your classroom to best facilitate the Turing Test Activity?"
      ECSPD Online U1D17-19 Reflection_markdown_instruction: "This is the last lesson\nin the unit. How does it combine what was covered previously in the unit?\nNow that you have taken time to examine this lesson, what have you learned\nthat you can take back to your classroom? Use this space to record your ideas\nfor this lesson. You will have a chance to share your ideas and questions\nin a forum in the following level."
      ECSPD Online U1D3-4 Reflection_markdown_instruction: "You have experienced\npart of this lesson online and studied the components of computers. What have\nyou learned that you can take back to your classroom? Use this space to record\nyour ideas for this lesson. You will have a chance to share your ideas and\nquestions in a forum in the following level. "
      ECSPD Online U1D5-7 Reflection_markdown_instruction: "You have experienced\nthis lesson in person and have examined additional resources online. What\nhave you learned that you can take back to your classroom? Use this space\nto record your ideas for this lesson. You will have a chance to share your\nideas and questions in a forum in the following level."
      ECSPD Online U1D8-9 Assessment_markdown_instruction: "List three points either\nfrom the articles or the lesson plan that you would want to discuss with your\nclass. Describe one strategy you plan to use to facilitate discussion."
      ECSPD Online U1D8-9 Reflection_markdown_instruction: "You have experienced\npart of this lesson online and have read a few articles regarding the impact\nof computers and the internet on communication. What have you learned that\nyou can take back to your classroom? Use this space to record your ideas for\nthis lesson. You will have a chance to share your ideas and questions in a\nforum in the following level."
      ECSPD Online U1Reflection_markdown_instruction: "## Telling the story of Unit\n1\n\nNow that you've explored all of the lessons and resources from Unit\n1, how would you describe the learning that happens? \n\nIn a few sentences,\ntell the story of Unit 1, how the lessons relate and build off one another,\nand what students will walk away with.\n"
      ECSPD PD goals_markdown_instruction: "***Now that you've learned more about\nthe ECS Professional Development, let's consider your goals***\n\n<br>\n<br>\n__What\nare your personal goals for your ECS PD experience (what do you hope to accomplish,\nhow do you hope to grow)?__ *NOTE: These goals might change over time, and\nwe'll revisit this your response as we go through the course so we can check\nin on how we're progressing towards those goals.*\n\n\n"
      ECSPD Personal Problem Solving Strategies_markdown_instruction: "# Problem\nSolving Strategies\n### Make a list of Problem Solving Strategies\n\nWe have\nall learned different problem solving strategies through out our lives. Some\nwork all the time and others only in certain situations. Make a list of all\nthe problem solving strategies you can think of. You will continue to add\nto this list over the course of this unit PD. You can also share strategies\nor find new strategies on the forum.\n\n### <strong><a href=\"http://forum.code.org/t/pd-discussion-topic-problem-solving-strategies/2086/1\"\ntarget=\"_blank\">Problem Solving Strategies>></a></strong>\n<br>\n\n**Each\ntime you see this page pop up think about the problem solving strategies you\nand your students will need for the current lesson. Then add to the list if\nyou think of new things.**\n"
      ECSPD course goals_markdown_instruction: "# Documenting Your Course Goals\\r\n\\r\n##\nNow that you know more about the ECS curriculum, let's consider your goals\\r\n\\r\n**What\nare your goals for your ECS class?** *These goals will change over time, and\nwe'll revisit this your response as we go through PD so we can check in on\nhow we're progressing towards those goals.*\\r\n\\r\n**NOTE:** remember you\ncan change the size of the text box by clicking and dragging the bottom-right\ncorner of the box.\\r\n"
      ECSPD impact in program_markdown_instruction: "\n\n#### What connections do\nyou think might exist between the ideas covered in the videos you just watched\nand the units of ECS that you learned about earlier?\n"
      ECSPD program overlap_markdown_instruction: "\n#### Now that you've read more\nabout the ECS program, what relationship do you see between the curriculum\nand Professional Development? What aspects of the two piece of the program\nseem most important or interesting to you?\n"
      ECSPD strategies_markdown_instruction: "# Classroom Strategies Journal\\r\n\\r\nThis\nspace is your **digital journal for documenting strategies** you've picked\nup during Professional Development and while teaching the course. We'll revisit\nthis in online pd for each unit, and you should refer back to it while planning\nlessons to remind yourself of strategies you want to try in class. \\r\n\\r\n\\r\n"
      ECSPD your goals_markdown_instruction: "__What are your goals for your ECS\nclass?__ *These goals will change over time, and we'll revisit this your\nresponse as we go through the course so we can check in on how we're progressing\ntowards those goals.*\n"
      ECSPD3-u5 pick a challenge_markdown_instruction: "# Challenge Overview > What's\nyour Challenge? \\r\n\\r\n## Enter the lesson you selected for your challenge\nin the text box below.\\r\n\\r\n- Day 1 - 3: Room data project, set up final\nproject\\r\n- Day 4 - 5: Developing research questions\\r\n- Day 6 - 7: Building\ngroup norms\\r\n- Day 8: Check in Day\\r\n- Day 9 - 11: Maps, identifying variables,\nsubsetting data, sorting data, frequency of types.\\r\n- Day 12: Bubble Charts\\r\n-\nDay 13: Review: Bubble Charts\\r\n- Day 14 - 15: Bar Plots\\r\n- Day 16: Mosaic\nPlots\\r\n- Day 17: Review: Bar and Mosaic Plots\\r\n- Day 18 - 20: Mean, Median,\nMinimum, Maximum, Histograms, Box Plots\\r\n- Day 21: Review: Mean, Median,\nMinimum, Maximum\\r\n- Days 22 - 24: Filtering Text data (remove punctuation,\nremove case, remove stop words, stemming), Analyzing word counts.\\r\n- Day\n25: Review: Text Data\\r\n- Day 26 - 27: Incorporate  data techniques into\nfinal project\\r\n- Day 28 - 29: Build project presentations\\r\n- Day 30: Present\nfinal project\\r\n\\r\nNow that you've selected a lesson, head to the forum\nand **share which lesson you plan to complete** for your challenge.\\r\n\\r\n####\n<a href=\"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank>Forums <i\nclass=\"fa fa-external-link\" /></a>"
      ECSPD3-u5 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSPD3-u5 submit_markdown_instruction: "# Share Out and Submit > Submit Link\\r\n\\r\n##  Submit\nthe Link for your Forum Post for Review\\r\n\\r\nYou've just shared your Challenge\nwork on the forum. If you would like to receive payment for this online PD,\nplease submit a link to that forum post here so we can review! \\r\n\\r\nIn\norder to get a direct link to your post, click the link icon directly under\nyour post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSPD3-u6 pick a challenge_markdown_instruction: "# Unit 6 Challenge > What's\nyour Challenge?\\r\n\\r\n## Enter the lesson you selected for your challenge\nin the text box below.\\r\n \\r\nFrom the curriculum\\r\n\\r\n- Day: 1 What is\na robot / what makes a computer robotic?\\r\n- Days: 2-3 Evaluate robot body\ndesigns and  algorithms that control robot behavior\\r\n- Day: 4 Set up the\nLego kit\\r\n- Day: 5 Build robot base\\r\n- Day: 6-7 Introduce NXT brick features\\r\n-\nDay: 8-9 Introduce NXT software\\r\n- Day: 10-13 Program robot using tutorials\n(using sensors for input)\\r\n- Day: 14 Describe RoboCup & RoboCupJunior\\r\n-\nDay: 15 Human robot tic-tac-toe\\r\n- Days: 16-18 Program dancing robot\\r\n-\nDays 19-23 Program rescue robot\\r\n- Days 24-33 Final projects and presentations\\r\n\\r\nAlternative\nTopics\\r\n\\r\n- Online simulations\\r\n- Physical computing options\\r\n- Projects\nand portfolios\\r\n\\r\nNow that you've selected a challenge topic, **share\nwhat you plan to do** for your challenge.\\r\n\\r\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit6\"\ntarget=_blank>Head to the Forums <i class=\"fa fa-external-link-square\" /></a>"
      ECSPD3-u6 submit forum link_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link to your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review!\r\n\r\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below): \r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSU2 Challenge Submission_markdown_instruction: >
        Submit Link\r\n\r\n##  Share your Artifacts and Advice\r\n**Head to the forum** and share: \r\n\r\n- Any data visualization or other artifact you created in doing the \r\n - Use the “SHARE” button in code studio to get a link to your program:   \r\n- The assessment question or extending learning activity that you produced for this lesson.\r\n- Notes for others who are going to teach this lesson. This should include: \r\n - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\r\n - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\r\n - What additional resources (if any) might be helpful in teaching this lesson\r\n\r\n\r\n<hr>\r\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank> Head to the Forum >></a>\r\n<hr>\r\n\r\n## Check out what others have posted! \r\nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \r\n\r\n<br/><br/>\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSU3 Challenge Submission_markdown_instruction: >
        Submit Link\r\n\r\n##  Submit the Link for your Forum Post for Review\r\n\r\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \r\n\r\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      ECSU4 Challenge Submission fin_markdown_instruction: "# Share Out and Submit\n> Submit Link\\r\n\\r\n##  Submit the Link for your Forum Post for Review\\r\n\\r\nYou've\njust shared your Challenge work on the forum. If you would like to receive\npayment for this online PD, please submit a link to that forum post here so\nwe can review! \\r\n\\r\nIn order to get a direct link to your post, click the\nlink icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"
      Escape Room Example_markdown_instruction: "# Room Escape\\r\n\\r\nIn today's\nworkshop you are going to be working on making a room escape app!  This level\nhas an example app that you should play around with to get the feel for what\nyou will be creating.\\r\n\\r\n# Do This\\r\n\\r\n* Click RUN to start the app\\r\n*\nTry to find the key that will open the door."
      Eval Booleans 1_markdown_instruction: "Boolean operators (like >, <, =) allow\nus to compare different values, returning either *true* or *false*. Click\n\"Run\" to see how this expression evaluates."
      Eval Booleans 2_markdown_instruction: "Can you set the values so that this\nexpression evaluates as *true*?"
      Eval Booleans 3_markdown_instruction: "The `string-length` function returns\nthe number of characters in a string (including spaces!) - make this code\nevaluate to *true*."
      Eval Booleans 4_markdown_instruction: "Here's an Evaluation Block called `and`\n- it returns *true* if both of its parameters are *true*, otherwise it returns\n*false*. Edit the x variable so that this expression returns *true*."
      Eval Booleans 5_markdown_instruction: "This `or` block returns *true* if either\nof its parameters is *true*. Otherwise, if both parameters are *false* it\nwill return *false*. Set the y variable to a value that will cause this expression\nto return *false*."
      Eval Booleans 6_markdown_instruction: "Here's one more boolean block called\n`not`. This block flips *true* to *false*, or *false* to *true*. If you wrap\nthis block of code in a NOT block, it should return *true* (because we are\nasking if the two expressions do NOT produce equal values)."
      Eval Booleans Free Play_markdown_instruction: "Free Play: Try out some creations\nof your own using Booleans."
      Eval Cond 4_markdown_instruction: "We can use the `string=?` function to make\nconditionals that respond to text input. Here's a function called `green\nshape` that takes a string for the type of shape. Complete the conditions\nso that the correct solid green shape is returned when the function is run\nwith \"circle\", \"triangle\", \"square\", or \"rectangle\"."
      Eval Cond 5_markdown_instruction: "Here's a similar function `red shape` with\nan additional variable for size. Complete the conditionals so the correct\nsolid red image of a given size is drawn for \"circle\", \"triangle\", and\n\"star\"."
      Eval Contracts 4_markdown_instruction: "The `scale` function returns an image\nthat is either larger or smaller than the input image. Try scaling this circle\nby a factor of 10. How is the returned image different than if you'd just\nmade a circle of that size in the first place?"
      Eval Contracts A_markdown_instruction: "Use the `star` function to produce\na solid red star with a 60 pixel radius"
      Eval Contracts C_markdown_instruction: "Check out the `rotate` function - can\nyou use it to rotate this 90 pixel green square by 45 degrees?"
      Eval Contracts E_markdown_instruction: "Try using the `text` function to write\nthis \"Hello, world!\" in teal at size 40."
      Eval Define Funcs 1_markdown_instruction: "Here's a new function called `green-triangle`\nthat takes a single Number for size and produces a green triangle. Use the\nnew function to create a 125 pixel green triangle"
      Eval Define Funcs 2_markdown_instruction: "Let's look inside that `green-triangle`\nfunction to see how it works. Can you modify it so that the `green-triangle`\nfunction always draws outlined green triangles? **Don't forget to change\nthe examples too!**"
      Eval Define Funcs 3_markdown_instruction: "Here's the start of another new\nfunction called `purple-circle` with a domain of one Number (the radius) and\na range of Image. The body of the function is broken though, it always draws\na circle of 50 pixel radius instead of using the radius parameter. Replace\nthe current Number with the `radius` block from the domain.\\r\n\\r\nWhen you've\nfixed the function, test your new function with a 150 pixel radius."
      Eval Define Funcs 4_markdown_instruction: "Create a new function called `aqua-star`\nthat has a Domain of a single Number for radius and returns an aqua star of\nthe given radius. Run your new function with a radius of 75."
      Eval Define Funcs 5_markdown_instruction: "Let's use that `aqua-star` function\nto make a row of different sized stars. From left to right, the stars should\nhave radii of 25, 50, and 75."
      Eval Define Funcs Test_markdown_instruction: "Here's the start of another\nnew function called `purple-circle` with a domain of one Number (the radius)\nand a range of Image. The body of the function is broken though, it always\ndraws a circle of 50 pixel radius instead of using the radius parameter. Replace\nthe current Number with the `radius` block from the domain.\\r\n\\r\nWhen you've\nfixed the function, test your new function with a 150 pixel radius."
      Eval Defining Vars Free Play 1_markdown_instruction: "Free Play: We've provided\na function that fills your screen with `my-image`. Change `my-image` to see\nwhat patterns you can make."
      Eval Design Recipe .1_markdown_instruction: "Here's a Design Recipe for a\nfunction called `square-circle` with domain Number String and range Image.\nClick Edit to write the function definition (you will see two examples provided)."
      Eval Design Recipe 3_markdown_instruction: "The Design Recipe for `wide-rect`\nalready has a contract and one example. Can you write a second example and\nthen complete the definition? The `wide-rect` function should produce a rectangle\nof given color that is twice as wide as it is high."
      Eval Design Recipe 4_markdown_instruction: "Use the Design Recipe to create\na function `starburst`. When given a number of points and an outer radius,\n`starburst` returns a yellow radial star with given points, and an inner radius\nthat is half the outer radius."
      Eval Design Recipe 5_markdown_instruction: "Write a function `striped-flag`\nthat takes two colors and produces a flag that is 250 pixels wide, 150 pixels\ntall, with three even horizontal stripes of given colors, in the order color2,\ncolor1, color2."
      Eval Design Recipe 6_markdown_instruction: "Write a function `large-polygon`\nthat should output a solid polygon of given sides and color that takes up\nmost of the window, regardless of the number of sides. To make sure that the\npolygon doesn't get too large as you increase the number of sides, side length\nshould be inversely proportional to side number, with a length of **(800/sides)**."
      Eval Design Recipe Free Play_markdown_instruction: "Free Play: Use the Design\nRecipe to create some functions of your own design"
      Eval Strings Images .1_markdown_instruction: "So far we've only dealt with\na single type of data, Numbers. Another type of data is a String, which is\nany combination of letters, numbers, or other characters wrapped in quotation\nmarks. Run the String \"Hello, world!\" and see what happens."
      Eval Strings Images .2_markdown_instruction: "The `string-append` function\ntakes two Strings and returns a single combined String. Add a String \"Universe\"\nto the second argument of `string-append`."
      Eval Strings Images 1_markdown_instruction: "The third type of data we're\ngoing to use is an Image. This `star` function takes in a Number and two Strings,\nand it evaluates to an Image. Use this function to make a solid red star with\nradius of 100."
      Eval Strings Images 2_markdown_instruction: "Free Play: Every Evaluation Block\nis color-coded to let you know which data type it returns and which types\nit needs for its parameters. The last parameter of the triangle function takes\na String that controls its color - try some different colors to see what works."
      Eval Strings Images 3_markdown_instruction: "Some functions can only take a\nspecific set of Strings, such as the second argument of this `circle` function,\nwhich controls its style. Draw this orange outline circle using the special\nString block with a dropdown to make sure you only use valid styles."
      Eval Strings Images 4_markdown_instruction: "Try using the `rectangle` block\nto draw this solid, red rectangle - it is 175 pixels wide and 100 pixels tall."
      Eval Strings Images 5_markdown_instruction: "Try using this new Evaluation\nBlock called `overlay` to place a 100 pixel white triangle on top of a 200\npixel red circle."
      Eval Strings Images 6_markdown_instruction: "Use the overlay block to place\na 75 pixel radius yellow star on top of a 150 pixel long blue square."
      Eval Strings Images 7_markdown_instruction: "The `offset` block lets you move\nan image relative to where it would normally be placed. Use this block to\noffset the square by 100 pixels on the y-axis."
      Eval Strings Images 8_markdown_instruction: "Here's a different kind of star\nblock - it's called `radial-star` and it allows you to draw stars with any\nnumber of points! Use it to create a 7 point solid orange star with an inner\nradius of 75 pixels and an outer radius of 175 pixels."
      Eval Strings Images Free Play_markdown_instruction: "Free Play: Explore the\nblocks available to create something interesting. Make sure to share your\nfavorite creations."
      Final Personal Website - OLD_markdown_instruction: "# Personal Website\\r\n\\r\nThis\nis it! You have been working on your Personal Website for the whole unit.\nPut the finishing touches on it and submit it to your teacher! Remember to\nuse the problem solving process as your guide in preparing your final product.\\r\n\\r\n#\nDo This\\r\n\\r\n* Define: Read the rubric so you know what is expected\\r\n*\nPlan: Decide what you still need to work on and put those things in priority\norder\\r\n* Try: Implement your improvements to your personal website.\\r\n*\nReflect: Get feedback from a classmate and decide what of that feedback to\nact on.\\r\n\\r\nDon't forget to take a screenshot of your home page and save\nit somewhere on your computer so you can find it later (*Need help with how\nto screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)"
      Final Personal Website_markdown_instruction: "# Personal Website\\r\n\\r\nThis\nis it! You have been working on your Personal Website for the whole unit.\nPut the finishing touches on it and submit it to your teacher! Remember to\nuse the problem solving process as your guide in preparing your final product.\\r\n\\r\n#\nDo This\\r\n\\r\n* Define: Read the rubric so you know what is expected\\r\n*\nPlan: Decide what you still need to work on and put those things in priority\norder\\r\n* Try: Implement your improvements to your personal website.\\r\n*\nReflect: Get feedback from a classmate and decide what of that feedback to\nact on.\\r\n\\r\nDon't forget to take a screenshot of your home page and save\nit somewhere on your computer so you can find it later (*Need help with how\nto screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)"
      Final Personal Website_2018_markdown_instruction: "# Personal Website\\r\n\\r\nThis\nis it! You have been working on your Personal Website for the whole unit.\nPut the finishing touches on it and submit it to your teacher! Remember to\nuse the problem solving process as your guide in preparing your final product.\\r\n\\r\n#\nDo This\\r\n\\r\n* Define: Read the rubric so you know what is expected\\r\n*\nPlan: Decide what you still need to work on and put those things in priority\norder\\r\n* Try: Implement your improvements to your personal website.\\r\n*\nReflect: Get feedback from a classmate and decide what of that feedback to\nact on.\\r\n\\r\nDon't forget to take a screenshot of your home page and save\nit somewhere on your computer so you can find it later (*Need help with how\nto screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website\n</a>.*)"
      Final Room Escape App_markdown_instruction: "# You've done it!\\r\n\\r\nYou\nmade a room escape! Now its time to customize it. \\r\n\\r\nConsider:\\r\n\\r\n*\nAdd more style to the room\\r\n* Adding more things users can interact with\nin the room\\r\n* Try to make your secret code random\\r\n* Adding more rooms"
      Finalize Your Chaser Game v.1_markdown_instruction: "# Add an Image and Make\na Chaser Game!\\r\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\"\nstyle=\"float: right\">\\r\n\\r\n**Now You Try it** - add an image to your app\nand modify the code so that the image jumps around the screen rather than\nthe button.  Your little game should have:\\r\n\\r\n* **Text** on the top of\nthe screen with a title or instructions for what to do.\\r\n* **An image**\nthat \"runs away\" (moves randomly) based on some mouse event.\\r\n\\r\n**Tips:**\\r\n\n* **Hint** - the easy way to do this is to simply change the IDs in `onEvent`\nand `setPosition` to respond to the image instead of the button.\\r\n * Remove\nthe button from the app after the image is working.  We don't need it anymore.\\r\n\n* Change the label text so that the instructions make sense for your game.\\r\n\n* The game is even more fun if you use  the `mouseover` event instead of `click`\\r\n\\r\n**Optional\nExtensions**:\\r\n * Make the background interesting\\r\n * Add another image\nthat runs away.\\r\n * See what happens with the commands `hideElement` and\n`showElement`\\r\n * Have two UI elements where interacting with one controls\nor does something to the other.\\r\n\\r\n**Finalize your \"Chaser Game v.1\"**\nand click Finish.\\r\n\\r\n * **Note**: We'll revisit this game in the next\nlesson where you can improve it.  This is **just version 1**\\r\n\\r\n"
      Fish Tank 1_markdown_instruction: "**Make a prediction**: What do you think\nwill happen when you run this code?"
      Fish Tank 2_markdown_instruction: "We're going to make a fish tank. Change\nthe Dusty the tumbleweed to a fish."
      Fish Tank 3_markdown_instruction: "All this spinning is going to make our fish\ndizzy! Change the fish's behavior to make it swim around the tank."
      Fish Tank 4_markdown_instruction: "Our fish tank needs some water! Use the\n`set background color` block to make the background blue."
      Fish Tank 5_markdown_instruction: "Our fish is getting a little lonely. Create\na new sprite inside the fish tank."
      Fish Tank 6_markdown_instruction: "What do you want your fish’s friend to do?\nAdd a behavior and watch them go!"
      Fish Tank 7_markdown_instruction: "There are a lot of new blocks in the toolbox.\nPlay with them to make your fish tank special."
      Food Fight!_markdown_instruction: "We've added one last function for you.\\r\n<hr/>\\r\n\\r\n<h4>\\r\nUse\nan `if` statement to program your game to call the `level_up` function only\nwhen `player_score` becomes greater than a certain number.<br/><br/>\\r\n</h4>\\r\n<i>For\nexample: `player_score` > 6</i>\\r\n\\r\n\\r\n<hr/>\\r\n<i>Play the game, and\nmake it to level 3 to move to the next puzzle.</i>"
      Formative versus Summative Assessment_markdown_instruction: "The following\nlink is a resource that provides definitions and examples of formative and\nsummative assessments:"
      Frequency Analysis_markdown_instruction: "# Break a random substitution cipher!\\r\n\\r\nMessages\nencrypted with the **Caesar cipher** are very easy to crack. What if instead\nof shifting the whole alphabet, we mapped every letter of the alphabet to\na random different letter of the alphabet? This is called a **random substitution\ncipher**.\\r\n\\r\nIn this version of the tool, you'll be interacting more\nwith the graphs that show letter frequency. By analyzing the frequency of\nthe letters in the encrypted input message compared to the frequency of letters\nin a typical piece of English prose, you can start to narrow in on what some\nof the letter mappings might be. Did you know that *'E'* is the most common\nletter used in the English language? Maybe the most common letter in your\nencrypted text maps to the letter *'E'*, but maybe not! You'll have to\ndo a bit of guess and check to see if that substitution makes sense.\\r\n\\r\n\\r\n#\nDo this\\r\n- Load the **Sample message (hard)** from the message dropdown.\nThis will load a message that has been encrypted with a random substitution\ncipher.  \\r\n![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)\\r\n\\r\n-\nYou will crack the message by guessing what each letter of the alphabet contained\nin the original ciphertext should be changed to. You can do so by dragging\nthe blue letters of the alphabet directly underneath the orange letter you\nwant changed in the original ciphertext. Letters that have been changed using\nyour guesses will no longer be highlighted orange in the message window on\nthe left.\\r\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\\r\n\\r\n-\nPlay with some of the sorting options available in the Random substitution\ncipher tab to get different views on the letter frequencies in the input text\nas well as standard English text.\\r\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\\r\n\\r\nSee\nhow long it takes you to crack the cipher! Is this a good method of encrypting\nsecret data?\\r\n\\r\n"
      Function intro Ryan_markdown_instruction: "A **function** named `build bridge`\nis in your workspace.  All of the code you need to cross the river is built\nright in! \\r\n \\r\nSnap the small, green block twice into your workspace to\nfix the path and get {currentPlayerName} to the Redstone Torch [redstone_torch]."
      GLJ_Crawl_Exemplar_1_markdown_instruction: "**Free Play**: Try using what you've\nlearned to make something new. Make sure to explore some of the new blocks\nin the toolbox."
      GLJr_Behavior_7_markdown_instruction: "Check out these two new blocks - the\ngreen \"When dog is touching cat\" block will run everything attached to it\nwhen the dog touches the cat, and the \"Remove behavior\" block removes a\nbehavior from a sprite.\\r\n\\r\nSee if you can make both the dog and cat stop\nmoving when they run into each other."
      GLJr_Behavior_8_markdown_instruction: "The cat and dog are so excited to see\neach other that they want to have a dance party. In addition to removing their\nmove behaviors when the two sprites touch, add the \"dance party\" behavior\nso they celebrate!"
      GLJr_Behavior_9_markdown_instruction: "**Free Play**: Try using what you've\nlearned to make something new. Make sure to explore some of the new blocks\nin the toolbox."
      GLJr_Forever_5_markdown_instruction: "Now we have two sprites! Use a loop to\nmake the dog jittery and make the cat wander"
      GLJr_Forever_6_markdown_instruction: "Let's try some more movement blocks\n- make the dog run up and make the cat run right."
      GLJr_Forever_7_markdown_instruction: "Check out this new \"if-else\" block\n- it lets you run one set of code _if_ a condition is true, and a different\nset of code if it's false. Inside it we're using another new block that\ntells you _if_ two sprites are touching.\\r\n\\r\nSee if you can make both the\ndog and cat stop moving when they run into each other."
      GLJr_Forever_8_markdown_instruction: "The cat and dog are so excited to see\neach other that they want to have a dance party. If the two sprites are touching,\nhave each run the \"dance party\" block."
      GLJr_Forever_9_markdown_instruction: "**Free Play**: Try using what you've\nlearned to make something new. Make sure to explore some of the new blocks\nin the toolbox."
      'Game Lab Workshop: Random_markdown_instruction': "# Randomized Shapes\\r\n\\r\nLet's\nsee how we can use randomization in our drawings. Each of the inputs from\nthe shape blocks you've seen can be replaced with calls to `randomNumber()`.\nTry drawing some images that are slightly randomized each time. You might\ntry changing the position randomly by using `randomNumber()` in place of the\nx or y inputs, or you could change the size of the shape itself by randomizing\nthe length or width inputs.\\r\n\\r\n# Do This\\r\n\\r\nPick a shape command (`ellipse()`,\n`rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or\nmore of the inputs. Make sure you run it a few times so you can see the effect\nof randomization.\\r\n"
      GameLab Livecode Demo 1_markdown_instruction: "# Animating Sprites\\r\n\\r\nTo\nstart this demo, we'll do the following:\\r\n\\r\n1. Create a new sprite with\nthe `createSprite()` block\\r\n2. Click on the Animation tab and select an\nimage for the sprite\\r\n3. Set the animation using the `sprite.setAnimation()`\nblock\\r\n4. Move the sprite by incrementing (slowly increasing) its x and\ny value using the draw loop\\r\n"
      GameLab Livecode Demo 2_markdown_instruction: "# Move With Keys\\r\n\\r\nNow\nthat we've got a sprite on the screen, let's make it respond to keyboard\ninput.\\r\n\\r\n1. Read through the blocks at lines 14 and 21 - what is going\non?\\r\n2. Add two more conditionals to respond to the up and left keys\\r\n3.\nExperiment with some of the additional provided blocks, such as `sprite.scale`\nand `sprite.rotation`\\r\n"
      GameLab Livecode Demo 3_markdown_instruction: "# Sprite Interactions\\r\n\\r\nAt\nthis point there's one sprite on screen, and we can move it around with the\narrow keys. Now let's add a second sprite and get the two interacting.\\r\n\\r\n1.\nAdd a new animation in the animation tab\\r\n2. Create a new sprite called\n\"target\" and set its animation\\r\n3. Use the `sprite.isTouching()` block\nin a conditional to make the target sprite react to the player sprite\\r\n\\t*\nMake the target sprite shrink or grow\\r\n    * Make the target move to a random\nlocation\\r\n    * Make the target rotate\\r\n"
      GameLab Livecode Demo 4_markdown_instruction: "# Make it Your Own\\r\n\\r\nNow\nthat we've created a simple game, take some time to explore the environment\non your own and add to your game. You'll notice that there are a bunch of\nnew blocks available to you in the toolbox - take a look around and try some\nout!"
      'GameLab Workshop: Draw Loop Shapes_markdown_instruction': "# Experiment with\nthe Draw Loop\\r\n\\r\nHere's a simple app that we've slowed down by changing\nthe _frame rate_ (the number of times the draw loop is run each second).\\r\n\\r\nWith\na neighbor:\\r\n\\r\n* Read through the code and discuss what you think it will\ndo\\r\n* Run and observe the program\\r\n* Try reordering the blocks to see\nhow it impacts the drawing\\r\n\\t* Can you make the rectangle appear above\nthe circle?\\r\n    * What happens if you place one of the commands before\nor after the draw loop?\\r\n    * Try adding some new shapes to the program"
      Gamelab AllTheThings Embed Level_markdown_instruction: "# How Many Counter\nVariables?\\r\n\\r\nYou can use counter variables (`x = x + 1` , `x = x - 1`\n, `x = x + 0.5`, etc.) to animate a scene. What happens when scenes start\nto get larger and more complicated? \\r\n\\r\nWatch this animation. With a partner:\n\\r\n\\r\n* Decide how many counter variables you would need to create this\nscene\\r\n* Decide what you would name your counter variables\\r\n* **Draw a\nLabels-Values-Connectors** diagram of your variables at the first frame of\nthis scene. Don't worry about getting the values exactly correct.\\r\n* Share\nyour answer with another group **and be ready to share your ideas with the\nclass**"
      Geometric Pattern_markdown_instruction: "**Project Idea:** Create a pattern\nusing geometric ideas like shapes. This requires persistence and planning!"
      Geometric Sun_markdown_instruction: "**Project Idea:** Create a pattern using\ngeometric ideas like shapes. This requires persistence and planning!"
      Geometric Sun_2018_markdown_instruction: "**Project Idea:** Create a pattern\nusing geometric ideas like shapes. This requires persistence and planning!"
      Glossary O_markdown_instruction: "## Vocabulary\n\nEncouraging students to\nlearn and use 'professional' terms enables them to communicate correctly\nand efficiently with others and builds their knowledge such that it can be\nfurther developed without having to relearn terms and concepts at a later\ntime. The terms and concepts used in the unplugged lessons are defined using\nwords that young students can understand.\n\n# TEACHING TIP\nBest practice\nis to introduce the terms with easy-to-understand language, relate the terms\nto previous experiences, use the terms repeatedly beyond the lesson itself\nthroughout the entire course (and in other situations) when appropriate, and\nreinforce students' use in oral and written communication.\n\nThe following\nterms are introduced in an unplugged lesson as either a Vocabulary word or\nas a term related to the online Blockly programming interface. Terms are subsequently\nreinforced in the following online puzzles and activities. Most terms appear\nmultiple times throughout the courses and lessons providing the students with\nmany opportunities to deepen their understanding and assimilate the words\ninto conversations, both in and outside of the classroom.\n\nThe course and\nlesson numbers after each term indicate the unplugged lessons in which the\nterm is emphasized.\n\n# Look through this list of vocabulary words and then\nanswer the prompt at the bottom of the page. You don't have to learn all\nthe vocabulary words all right now, but you they are here so you can refer\nback them during this online course. \n\nabstraction\n\nPulling out specific\ndifferences to make one solution work for multiple problems students.\n\n(Course\n3: Lesson 1)\n\nalgorithm\n\nA list of steps to finish a task. A set of instructions\nthat can be performed with or without a computer. For example, the collection\nof steps to make a peanut butter and jelly sandwich is an algorithm.\n\n(Course\n1: Lessons 1, 6 | Course 2: Lessons 1, 2 | Course 3: Lessons 1, 10)\n\nbinary\n\nA\nway of representing information using only two options.\n\n(Course 2: Lesson\n14)\n\nBlockly\n\nThe visual programming language used in Code.org's online\nlearning system for K-5 students. (Course 1: Lesson 3)\n\nbug\n\nAn error\nin a program that prevents the program from running as expected. (Course 2:\nLesson 9)\n\ncode\n\nOne or more commands or algorithm(s) designed to be carried\nout by a computer. See Program. (Course 1: Lesson 2)\n\ncommand\n\nAn instruction\nfor the computer. Many commands put together make up algorithms and computer\nprograms. (Course 1: Lesson 2)\n\ncomputational thinking\n\nMental processes\nand strategies that include: decomposition, pattern matching, abstraction,\nalgorithms (decomposing problems into smaller, more manageable problems, finding\nrepeating patterns, abstracting specific differences to make one solution\nwork for multiple problems, and creating step-by-step algorithms). (Course\n3: Lesson 1)\n\ncomputer science\n\nA field in which people use the power\nof computers to solve big problems. (Course 1: Lesson 2)\n\nconditionals\n\nStatements\nthat only run under certain conditions or situations. (Course 2: Lesson 12)\n\ncrowdsourcing\n\nGetting\nhelp from a large group of people to finish something faster. (Course 3: Lesson\n19)\n\ndata\n\nQuantities, characters, or symbols that are the inputs and\noutputs of computer programs. (Course 2: Lesson 14 | Course 3: Lessons 1)\n\ndebugging\n\nFinding\nand fixing errors in programs. (Course 2: Lesson 9)\n\ndecompose\n\nBreak\na problem down into smaller pieces. (Course 3: Lesson 1)\n\ndigital citizen\n\nSomeone\nwho acts safely, responsibly, and respectfully online. (Course 3: Lesson 20)\n\ndigital\nfootprint\n\nThe information about someone on the Internet. (Course 2: Lesson\n18)\n\nDNS (domain name service)\n\nThe service that translates URLs to IP\naddresses. (Course 3: Lesson 18)\n\nDSL/cable\n\nA method of sending information\nusing telephone or television cables. (Course 3: Lesson 18)\n\nevent\n\nAn\naction that causes something to happen. (Course 1: Lesson 15 | Course 2: Lesson\n15)\n\nevent-handler\n\nAn action or event that is being constantly monitored\nfor by the computer. When you write code for the computer to perform after\nthat an action occurs, that code, the event-handler, will run every time the\naction is performed without having to put the commands inside of a loop. Many\nevent-handlers are human-initiated. For example: an event handler might respond\nwhen the user clicks the mouse by making the bird flap its wings. \"When the\nmouse is clicked\" is an event-handler. (Course 1: Lesson 15 | Course 2: Lesson\n15)\n\nfiber optic cable\n\nA connection that uses light to transmit information.\n(Course 3: Lesson 18)\n\nfunction\n\nA piece of code that you can easily call\nover and over again. Functions are sometimes called 'procedures.' A function\ndefinition is a segment of code that includes the steps performed in the function.\nA function call is the code segment, typically within the main logic of the\nprogram, which invokes the function. (Course 3: Lesson 4, 9)\n\nInternet\n\nA\ngroup of computers and servers that are connected to each other. (Course 1:\nLesson 17 | Course 3: Lessons 18, 20)\n\nIP address\n\nA number assigned to\nany item that is connected to the Internet. (Course 3: Lesson 18)\n\niteration\n\nA\nrepetitive action or command typically created with programming loops. (Course\n1: Lesson 12 | Course 2: Lesson 5)\n\nloop\n\nThe action of doing something\nover and over again. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\npackets\n\nSmall\nchunks of information that have been carefully formed from larger chunks of\ninformation. (Course 3: Lesson 18)\n\npattern matching\n\nFinding similarities\nbetween things. (Course 3: Lesson 1)\n\npersistence\n\nTrying again and again,\neven when something is very hard. (Course 1: Lesson 9)\n\nprogram\n\nA program\nis an algorithm that has been coded into something that can be run by a machine.\n(Course 1: Lesson 2 | Course 2: Lesson 1 | Course 3: Lesson 10)\n\nrun program\n\nTo\nhave the computer execute the commands you've written in your program. (Course\n1: Lesson 4)\n\nservers\n\nComputers that exist only to provide things to\nothers. (Course 3: Lesson 18)\n\ntoolbox\n\nThe tall grey bar in the middle\nsection of Code.org's online learning system where all the commands you can\nuse to write your program are displayed. (Course 1: Lesson 4)\n\nURL (universal\nresource locator)\n\nAn easy-to-remember address for calling a web page (like\nwww.code.org). (Course 3: Lesson 18)\n\nusername\n\nA name you make up so\nthat you can see or do things on a website, sometimes called a \"screen name.\"\n(Course 1: Lesson 18)\n\nvariable\n\nA placeholder for a piece of information\nthat can change. (Course 3: Lesson 4)\n\nWi-Fi\n\nA wireless method of sending\ninformation using radio waves. (Course 3: Lesson 18)\n\nworkspace\n\nThe white\narea on the right side of Code.org's online learning system where you drag\nand drop commands to build your program. (Course 1: Lesson 4)\n\n### What\nis one way you can include computer science vocabulary terms in your class?\n"
      Hardware Accessibility_markdown_instruction: "# Hardware Accessibility: Screen\nSize\\r\n\\r\nAnother thing to consider about accessibility for different users\nis the size of the device they are using to view the web page. You can do\na basic test for this by resizing the view area to see how the website changes\nwith the changes in size.\\r\n\\r\n# Do This\\r\n\\r\n* Use the dragger to resize\nyour preview area to see how your website adapts.\\r\n* Shrink the size of\nthe instructions area to resize how tall the web page is"
      Harvesting_markdown_instruction: "Uh oh, I lost my map and can't remember\nwhat I planted! Every sprout could grow up to be **corn** ![picture of corn](https://images.code.org/cac3133c40781553a70066a67298b2b5-image-1472493202556.png)\n, **beans** ![picture of beans](https://images.code.org/5e379ff595be17722237d9685b29fd96-image-1472493220871.png)\n, or **pumpkins** ![picture of pumpkin](https://images.code.org/03cf76a978e0788ccb53f14e9d264695-image-1472493237148.png)\n. Can you write some code to pick all the crops, no matter what they are?"
      'How to: Setup your Class Data Tracker_markdown_instruction': "## Setting up\nyour copy of the Class Data Tracker\\r\n\\r\nThe second chapter of unit 2 dives\ninto data collection, analysis, and visualization. Starting in lesson 7 you\nwill set up and use a class data tracker, which students will fill out each\nday until lesson 13, when they start cleaning the data they've been collecting.\\r\n\\r\nLesson\n7 includes the following detailed guide that walks you through setting up\nyour shared data tracker from the template provided in the curriculum. Feel\nfree to check out this instructions and setup your tracker now! "
      'How to: Use Google Trends_markdown_instruction': "## How to Use Google Trends\\r\n\\r\nIn\nlesson 8, students will use Google Trends as a tool to visualize the relationship\nbetween historical google search data. If you're not familiar with Google\nTrends, check out the following How-to guide that details how to explore trends\nusing the tool! "
      If and If-Else part 1_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n*\n**NOTE:** Stop play at 1:37.  \\r\n    It's all you need for the exercises\nthat follow.  You'll watch the remainder of the video after that.\\r\n\\r\n*\nAn IF statement can have an else clause, but an ELSE clause cannot exist on\nits own.\\r\n* With an else clause you are *guaranteeing* that one of two portions\nof code will run.\\r\n\\r\n"
      If and If-Else part 2_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n**Start**\nplay at 1:37 \\r\n**Stop** play at 2:20\\r\n\\r\nIt's all you need for the exercises\nthat follow.  You'll watch the remainder of the video after that.\\r\n\\r\n*\nAn IF statement can have an else clause, but an ELSE clause cannot exist on\nits own.\\r\n* With an else clause you are *guaranteeing* that one of two portions\nof code will run.\\r\n\\r\n"
      Inspirational Artwork_markdown_instruction: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\\r\n\\r\nNotice:\nWe've used the `set alpha` block to make the \"petals\" fade toward the outside."
      InspirationalArtwork_markdown_instruction: "You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own."
      InspirationalArtwork_2018_markdown_instruction: "You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own."
      Internet Accessibility_markdown_instruction: "# Internet Accessibility: Internet\nSpeed\\r\n\\r\nAnother difference in how people will experience your website\nis in the speed of their internet connection as they try to load the content\non your web page. To check this we can use the Google Chrome Developer Tools\nto simulate a slow internet connection.\\r\n\\r\n# Do This\\r\n\\r\n* Open this\npage in the Google Chrome Web Browser\\r\n* From the _View_ menu, find _Developer_\n\\r\n\\r\n<img src=\"https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png\"\nstyle=\"width:200px\">\\r\n\\r\n* In the _Developer_ submenu, select _Developer\nTools_ \\r\n\\r\n<img src=\"https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png\"\nstyle=\"width:200px\">\\r\n\\r\n* The _Developer Tools_ will open as a frame\nat the bottom of your browser window\\r\n\\r\n<img src=\"https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png\"\nstyle=\"width:400px\">\\r\n\\r\n* Click the menu that says \"No throttling\"\nand select \"GPRS\" \\r\n\\r\n<img src=\"https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png\"\nstyle=\"width:200px\">\\r\n\\r\n*  Hold down _Shift_ while reloading the page\n(this will delete cached files so the browser has to re download them while\nthrottled)"
      'Internet Simulator: DNS Mode_markdown_instruction': "## The Need for DNS\\r\n\\r\nIn\nthis version of the Internet Simulator, a Domain Name System (DNS) is provided\nfor you and knows the IP addresses of all connected computers. You can only\nsee the hostnames of other connected computers.   \\r\n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\\r\n\\r\nThe\naddress of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with\nprotocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another\nstudent's address. You can keep track of the responses in the Notes section\nin the DNS tab.  \\r\n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)"
      'Internet Simulator: DNS_markdown_instruction': "## The Need for DNS\\r\n\\r\nIn\nthis version of the Internet Simulator, a Domain Name System (DNS) is provided\nfor you and knows the IP addresses of all connected computers. You can only\nsee the hostnames of other connected computers.   \\r\n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\\r\n\\r\nThe\naddress of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with\nprotocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another\nstudent's address. You can keep track of the responses in the Notes section\nin the DNS tab.  \\r\n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)"
      'Internet Simulator: DNS_2018_markdown_instruction': "## The Need for DNS\\r\n\\r\nIn\nthis version of the Internet Simulator, a Domain Name System (DNS) is provided\nfor you and knows the IP addresses of all connected computers. You can only\nsee the hostnames of other connected computers.   \\r\n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\\r\n\\r\nThe\naddress of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with\nprotocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another\nstudent's address. You can keep track of the responses in the Notes section\nin the DNS tab.  \\r\n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)"
      'Internet Simulator: Packets_markdown_instruction': "## Packets and Making\na Reliable Internet\\r\n\\r\n**Challenge:** Develop a protocol for reliably\nsending a message across an unreliable network\\r\n\\r\n**An Unreliable Internet\nSimulator:** The current version of the Internet Simulator is modeled after\nsome actual constraints of the Internet\\r\n- Messages must be divided into\npackets which may contain <em><strong> at most eight (8) ASCII characters\n</em></strong>\\r\n- Messages should be long enough to require at least 10\npackets\\r\n- Packets may not arrive in the order sent\\r\n- Packets may be\ndropped while in transmission\\r\n\\r\n**Directions:** In a group or individually\njoin a router in the Internet Simulator and practice sending messages given\nthese new constraints. Once you are comfortable with the challenge, iteratively\ndesign a protocol that can reliably send a message to a partner. You and your\npartner should join <em><strong> DIFFERENT </strong></em> routers.\\r\n\\r\n**Protocol\nRequirements:**\\r\n- All communication can only be done through the Internet\nSimulator\\r\n- You must send a message that spans at least 10 packets (i.e.\nan 80 character ASCII message). \\r\n- The protocol should account for the\npossibility that the characters might be entirely random (i.e. not necessarily\nEnglish - do not count on human intuition to reconstruct the message. The\nmessage is not known beforehand.)\\r\n- The sender and receiver must be confident\nthe full message was successfully transmitted and reconstructed."
      'Internet Simulator: Packets_2018_markdown_instruction': "## Packets and Making\na Reliable Internet\\r\n\\r\n**Challenge:** Develop a protocol for reliably\nsending a message across an unreliable network\\r\n\\r\n**An Unreliable Internet\nSimulator:** The current version of the Internet Simulator is modeled after\nsome actual constraints of the Internet\\r\n- Messages must be divided into\npackets which may contain <em><strong> at most eight (8) ASCII characters\n</em></strong>\\r\n- Messages should be long enough to require at least 10\npackets\\r\n- Packets may not arrive in the order sent\\r\n- Packets may be\ndropped while in transmission\\r\n\\r\n**Directions:** In a group or individually\njoin a router in the Internet Simulator and practice sending messages given\nthese new constraints. Once you are comfortable with the challenge, iteratively\ndesign a protocol that can reliably send a message to a partner. You and your\npartner should join <em><strong> DIFFERENT </strong></em> routers.\\r\n\\r\n**Protocol\nRequirements:**\\r\n- All communication can only be done through the Internet\nSimulator\\r\n- You must send a message that spans at least 10 packets (i.e.\nan 80 character ASCII message). \\r\n- The protocol should account for the\npossibility that the characters might be entirely random (i.e. not necessarily\nEnglish - do not count on human intuition to reconstruct the message. The\nmessage is not known beforehand.)\\r\n- The sender and receiver must be confident\nthe full message was successfully transmitted and reconstructed."
      'Internet Simulator: Routers_markdown_instruction': "# An Updated Internet\nSimulator\\r\nMany changes have been made to the Internet Simulator. \\r\n\\r\n**Routers:**\nRather than being connected to your entire class you are now connected to\na single router. You can see who else is on your router in the network diagram.\\r\n\\r\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04\nPM.png)\\r\n\\r\n\\r\n**IP Addresses:** Every user has a unique IP address. The\nfirst portion is the number of your router and the second is your own unique\nnumber. You can figure out the IP addresses of people on the router by looking\nat the network diagram.\\r\n\\r\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59\nPM.png)\\r\n\\r\n**Sending Messages: ** You can now send messages to a single\nother user. Fill in the \"To\" portion of the message with the IP address\n(including the period) of the person you'd like to send your message to.\\r\n\\r\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34\nPM.png)\\r\n\\r\n**Router Statistics: ** You can see useful information about\nthe functioning of your router in the \"Router\" tab.\\r\n\\r\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23\nPM.png)\\r\n\\r\n**Router Logs: ** You can read a log of traffic both at the\nlevel of your router and the entire network by clicking the \"Log Browser\"\nbutton.\\r\n\\r\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48\nPM.png)"
      'Internet Simulator: Routers_2018_markdown_instruction': "# An Updated Internet\nSimulator\\r\nMany changes have been made to the Internet Simulator. \\r\n\\r\n**Routers:**\nRather than being connected to your entire class you are now connected to\na single router. You can see who else is on your router in the network diagram.\\r\n\\r\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04\nPM.png)\\r\n\\r\n\\r\n**IP Addresses:** Every user has a unique IP address. The\nfirst portion is the number of your router and the second is your own unique\nnumber. You can figure out the IP addresses of people on the router by looking\nat the network diagram.\\r\n\\r\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59\nPM.png)\\r\n\\r\n**Sending Messages: ** You can now send messages to a single\nother user. Fill in the \"To\" portion of the message with the IP address\n(including the period) of the person you'd like to send your message to.\\r\n\\r\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34\nPM.png)\\r\n\\r\n**Router Statistics: ** You can see useful information about\nthe functioning of your router in the \"Router\" tab.\\r\n\\r\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23\nPM.png)\\r\n\\r\n**Router Logs: ** You can read a log of traffic both at the\nlevel of your router and the entire network by clicking the \"Log Browser\"\nbutton.\\r\n\\r\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48\nPM.png)"
      'Internet Simulator: Sending Binary Messages 1_markdown_instruction': "## Coordination\nand Binary Messages Activity\\r\n\\r\n**Develop your Protocol**\\r\nDevelop a\nprotocol that allows you to use Internet Simulator to relay a message, i.e.\none member sends a message and the other member sends the same message back.\nYou or a teacher will say “Go” to begin the exchange but otherwise all communication\nmust be through the widget. As you’re working, consider:\\r\n\\r\n- How will\nyou know when the exchange is supposed to begin?\\r\n- How will you know whose\nturn it is to send or receive the message?\\r\n- How will you coordinate your\nactions?\\r\n\\r\nDocument your protocol on the worksheet provided, and test\nyour protocol using the Internet Simulator"
      'Internet Simulator: Sending Binary Messages_markdown_instruction': "## Coordination\nand Binary Messages Activity\\r\n\\r\n**Develop your Protocol**\\r\nDevelop a\nprotocol that allows you to use Internet Simulator to relay a message, i.e.\none member sends a message and the other member sends the same message back.\nYou or a teacher will say “Go” to begin the exchange but otherwise all communication\nmust be through the widget. As you’re working, consider:\\r\n\\r\n- How will\nyou know when the exchange is supposed to begin?\\r\n- How will you know whose\nturn it is to send or receive the message?\\r\n- How will you coordinate your\nactions?\\r\n\\r\nDocument your protocol on the worksheet provided, and test\nyour protocol using the Internet Simulator"
      'Internet Simulator: Sending Binary Messages_2018_markdown_instruction': "##\nCoordination and Binary Messages Activity\\r\n\\r\n**Develop your Protocol**\\r\nDevelop\na protocol that allows you to use Internet Simulator to relay a message, i.e.\none member sends a message and the other member sends the same message back.\nYou or a teacher will say “Go” to begin the exchange but otherwise all communication\nmust be through the widget. As you’re working, consider:\\r\n\\r\n- How will\nyou know when the exchange is supposed to begin?\\r\n- How will you know whose\nturn it is to send or receive the message?\\r\n- How will you coordinate your\nactions?\\r\n\\r\nDocument your protocol on the worksheet provided, and test\nyour protocol using the Internet Simulator"
      'Internet Simulator: Sending Numbers_markdown_instruction': "## Sending Numbers\nActivity\\r\n\\r\n**Challenge:** Develop a protocol or set of rules for communicating\na drawing to your partners using only bits.\\r\n\\r\n**Challenge Rules:**\\r\nThe\nimage will be a line drawing created by connecting points on a grid, like\nthe one seen here.\\r\nYou can discuss and agree on a protocol ahead of time,\nbut the image exchange must happen without communication between the two parties\nother than through using the Internet Simulator.\\r\n\\r\n**Things to Consider:**\\r\n-\nHow will your points be formatted?\\r\n- How does the recipient know when one\nnumber ends and the next begins?\\r\n\\r\n**Your Protocol:** Write the steps\nof your protocol on the worksheet provided by your teacher.\\r\n\\r\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)"
      'Internet Simulator: Sending Numbers_2018_markdown_instruction': "## Sending\nNumbers Activity\\r\n\\r\n**Challenge:** Develop a protocol or set of rules\nfor communicating a drawing to your partners using only bits.\\r\n\\r\n**Challenge\nRules:**\\r\nThe image will be a line drawing created by connecting points\non a grid, like the one seen here.\\r\nYou can discuss and agree on a protocol\nahead of time, but the image exchange must happen without communication between\nthe two parties other than through using the Internet Simulator.\\r\n\\r\n**Things\nto Consider:**\\r\n- How will your points be formatted?\\r\n- How does the recipient\nknow when one number ends and the next begins?\\r\n\\r\n**Your Protocol:** Write\nthe steps of your protocol on the worksheet provided by your teacher.\\r\n\\r\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)"
      'Internet Simulator: Sending Text_markdown_instruction': "## Sending Formatted\nText Activity\\r\n\\r\n**Directions:**  \\r\nWork with a partner or in a small\nteam to develop a protocol that allows you to send formatted text. \\r\n\\r\n**Guidelines:**  \\r\n-\nBoth the text and the formatting instructions must be derived from the printable\nASCII character set (i.e. codes 32-126).\\r\n- Your protocol must encode at\nleast:\\r\n\\t- bold, italics, and underlining\\r\n\\t- three different font sizes\n(large, medium, and small)\\r\n\\t- three different font colors (red, black,\nblue)\\r\n- You will demonstrate that your protocol works by having the recipient\nbe able to faithfully draw (or produce in some fashion) the formatted text\nbased only on the data she received through an ASCII-text version of the Internet\nSimulator. A sample message can be found below.\\r\n\\r\n![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\\r\n\\r\n**Develop\nYour Protocol:**  \\r\nUse the worksheet handed out by your teacher to brainstorm\nideas for your protocol. Iteratively improve your protocol by testing it out\nwith simple sample messages.\\r\n"
      'Internet Simulator: Sending Text_2018_markdown_instruction': "## Sending Formatted\nText Activity\\r\n\\r\n**Directions:**  \\r\nWork with a partner or in a small\nteam to develop a protocol that allows you to send formatted text. \\r\n\\r\n**Guidelines:**  \\r\n-\nBoth the text and the formatting instructions must be derived from the printable\nASCII character set (i.e. codes 32-126).\\r\n- Your protocol must encode at\nleast:\\r\n\\t- bold, italics, and underlining\\r\n\\t- three different font sizes\n(large, medium, and small)\\r\n\\t- three different font colors (red, black,\nblue)\\r\n- You will demonstrate that your protocol works by having the recipient\nbe able to faithfully draw (or produce in some fashion) the formatted text\nbased only on the data she received through an ASCII-text version of the Internet\nSimulator. A sample message can be found below.\\r\n\\r\n![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\\r\n\\r\n**Develop\nYour Protocol:**  \\r\nUse the worksheet handed out by your teacher to brainstorm\nideas for your protocol. Iteratively improve your protocol by testing it out\nwith simple sample messages.\\r\n"
      Internet Speed Test_markdown_instruction: "# Check for Internet Accessibility\\r\n\\r\nAnother\ndifference in how people will experience your website is in the speed of their\ninternet connection as they try to load the content on your web page. To check\nthis we can use the Google Chrome Developer Tools to simulate a slow internet\nconnection.\\r\n\\r\n# Do This\\r\n\\r\n* Open this page in the Google Chrome\nWeb Browser\\r\n* From the _View_ menu, find _Developer_ \\r\n\\r\n<img src=\"https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png\"\nstyle=\"width:200px\">\\r\n\\r\n* In the _Developer_ submenu, select _Developer\nTools_ \\r\n\\r\n<img src=\"https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png\"\nstyle=\"width:200px\">\\r\n\\r\n* The _Developer Tools_ will open as a frame\nat the bottom of your browser window\\r\n\\r\n<img src=\"https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png\"\nstyle=\"width:400px\">\\r\n\\r\n* Click the menu that says \"No throttling\"\nand select \"GPRS\" \\r\n\\r\n<img src=\"https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png\"\nstyle=\"width:200px\">\\r\n\\r\n*  Hold down _Shift_ while reloading the page\n(this will delete cached files so the browser has to re download them while\nthrottled)"
      Introduction to App Lab and Turtle Programming_markdown_instruction: "The video\nbelow is from lesson 4, and introduces App Lab and the Turtle. "
      Introduction to Conditionals - Part 2.2_markdown_instruction: "### Points to\npay attention to:\\r\n\\r\n**Start** play at 1:37 \\r\n**Stop** play at 2:20\\r\n\\r\nIt's\nall you need for the exercises that follow.  You'll watch the remainder of\nthe video after that.\\r\n\\r\n* An IF statement can have an else clause, but\nan ELSE clause cannot exist on its own.\\r\n* With an else clause you are *guaranteeing*\nthat one of two portions of code will run.\\r\n\\r\n"
      'Introduction to Conditionals: Boolean Expressions_markdown_instruction': "###\nPoints to pay attention to:\\r\n\\r\n1. What's a *Boolean Expression?*\\r\n2.\nWhy is it called a \"Boolean\"?\\r\n3. Is this a legal expression?  `10 > 25`?"
      'Introduction to Conditionals: Compound Boolean Expressions_markdown_instruction': "###\nPoints to pay attention to:\\r\n\\r\n* The \"Boolean operators\" are AND and\nOR.  \\r\n* In JavaScript you write them as `&&` for AND and `||` for OR.\\r\n*\nYou use them to combine boolean expressions into a single statement when you\nneed to check multiple conditions before executing a particular segment of\ncode.\\r\n\\r\n"
      'Introduction to Conditionals: if-else Statements_markdown_instruction': "###\nPoints to pay attention to:\\r\n\\r\n* An IF statement can have an else clause,\nbut an ELSE clause cannot exist on its own.\\r\n* With an else clause you are\n*guaranteeing* that one of two portions of code will run.\\r\n\\r\n"
      'Introduction to Conditionals: if-else-if Statements_markdown_instruction': "###\nPoints to pay attention to:\\r\n\\r\n* An if-else-if statement lets you check\nmore than one condition at a time.\\r\n* The **order of conditions matters**.\nSince conditions are checked sequentially from top to bottom, the code that\ngets executed will be the *first* statement to evaluate to true.\\r\n\\r\n"
      Introduction to Design Mode_markdown_instruction: "**You do not need to watch\nthis video** to understand or complete this lesson - it is merely here if\nyou are interested in getting a general overview.  \\r\n\\r\nIn this lesson\nto get started we will only use a few of the features depicted."
      Just for Testing_markdown_instruction: "Other test instructions"
      K-1 Bee Loops 2_markdown_instruction: "Use a `repeat` loop to move and then\nget the nectar and make honey!"
      K-1 Bee Loops 3_markdown_instruction: "Use three `repeat` loops to get the\nnectar and make honey!"
      K-1 Bee Loops 4_markdown_instruction: "Use `repeat` loops to get the nectar,\nmake honey, and to move!"
      K-1 Bee Loops 5_markdown_instruction: "Use `repeat` loops to get the nectar\nand honey!"
      K-1 Bee Loops 6_markdown_instruction: "Use a `repeat` loop to get the nectar,\nget honey, and to move!"
      K-1 Maze Loops 10_markdown_instruction: "Get me to the pig!   \\r\nUsing the\n`repeat` loop will make it much easier."
      K-1 Maze Loops 11_markdown_instruction: "Get me to the pig!  \\r\nThe `repeat`\nloop will make this easier."
      K-1 Maze Loops 12_markdown_instruction: "Get me to the pig!  \\r\nThe `repeat`\nloop will make this easier."
      K-1 Maze Loops 2_markdown_instruction: "Use the `repeat` block to get me to\nthe pig!"
      K-1 Maze Loops 3_markdown_instruction: "Get me to the pig!  \\r\nBe sure to\nuse `repeat` loops."
      K-1 Maze Loops 5_markdown_instruction: "Get me to the pig!  \\r\nBe sure to\nuse `repeat` loops."
      K-1 Maze Loops 6_markdown_instruction: "Get me to the pig!  \\r\nBe sure to\nuse `repeat` loops."
      K-1 Maze Loops 7_markdown_instruction: "Get me to the pig!  \\r\nBe sure to\nuse `repeat` loops."
      K-1 Maze Loops 8_markdown_instruction: "Use `repeat` loops to get me to the\npig."
      K-1 Maze Loops Assessment 1_markdown_instruction: "Look at all we've learned!   \\r\nUse\na `repeat` loop to get me to the pig!"
      K2.0 sequence 1_markdown_instruction: "A bug! Fix the code to get me to the\npig.\\r\n\\r\n![](https://images.code.org/2843193ce2d869ad2f06f0f5b114c9d0-image-1467924400663.gif)"
      K2.0 sequence 10_markdown_instruction: "**Challenge:** Move me around the TNT\nto get to the pig.\\r\n\\r\n![](https://images.code.org/4873075cd34a942f5006d59b05422bd0-image-1467932801138.gif)"
      K2.0 sequence 12_markdown_instruction: "Let's get that pig!\\r\n\\r\n![](https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif)\\r\n"
      K2.0 sequence 2_markdown_instruction: "Fix the code to get me to the pig!\\r\n\\r\n![](https://images.code.org/629cddc754f9ad02929f06fc68462e4d-image-1467924800613.gif)"
      K2.0 sequence 3_markdown_instruction: "Something is not quite right. REMOVE\na block to get me to the pig!\\r\n\\r\n![](https://images.code.org/dd6d92233199ee0f524caa4051b99275-image-1467920800577.gif)"
      K2.0 sequence 4_markdown_instruction: "Time for a shorter puzzle!  Move one\nway, then another to get me to the pig.\\r\n\\r\n![](https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif)\\r\n"
      K2.0 sequence 5_markdown_instruction: "Move one way, then another to get me\nto the pig!\\r\n\\r\n![](https://images.code.org/0b324bc0f684f7a22171acd8b38c8d9f-image-1467931807767.gif)"
      K2.0 sequence 6_markdown_instruction: "Figure out what is missing and then\nadd blocks to get me to the pig!\\r\n\\r\n![](https://images.code.org/b9803e12911694d8bb18bd55304f85d5-image-1467932006704.gif)"
      K2.0 sequence 7_markdown_instruction: "Solve this level and get me to the pig!\\r\n\\r\n![](https://images.code.org/1eb9139e2887083dc80b98d9aeb3bef2-image-1467932105884.gif)"
      K2.0 sequence 8_markdown_instruction: "**Challenge:** Debug this level by adding\nblocks to get me to the pig!\\r\n\\r\n![](https://images.code.org/810d7189bcd0767d37ea82319b4c678c-image-1467932445247.gif)"
      K2.0 sequence 9_markdown_instruction: "**Challenge:** Go around the TNT to\nget me to the pig!\\r\n\\r\n![](https://images.code.org/fa04813e9451e0bc070af50bc01d4a6b-image-1467932582838.gif)"
      KIKI GLJ Test Response_markdown_instruction: "Look carefully at the code below.  What\ndo you think the plane will do when you click \"Run\"?\\r\n"
      LaurelDebugging4Video1_markdown_instruction: "This is Laurel the Adventurer!\\r\n\\r\nMove\nher around and get as much gold as you can."
      'Lesson 7: Teaching and Student Support Plan_markdown_instruction': "> **NOTE:\nbefore you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLesson 7: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lesson, let’s think about the types of\nsupports students will need in order to successfully complete it. Since the\ncurriculum is based on inquiry learning, lessons feature activities that engage\nstudents in discovering core concepts themselves. It’s important to think\nthrough implementation plans and student support. In this task you will make\na plan for teaching and student support that takes into account differentiation\nstrategies and make-up work for absent students. Your teaching and student\nsupport plan should cover the following: \\r\n\\r\n- **Details on how you will\nimplement and differentiate the lesson:**\\r\n\\r\n - An outline of any changes\nyou will need to make to the lesson to fit your local constraints or context\n(for example: pacing and time, dealing with classroom setup, etc). \\r\n -\nAn overview of the types of student needs you’ll likely need to support in\nyour classroom (for example: students who are struggling to understand the\nunderlying concept; students who are already familiar with the concept, but\nstill have room to learn more; etc)\\r\n - Your plan for addressing each of\nthe needs outlined above (for example: integrating extension activities or\nother materials for students who already know something about the topic)\\r\n<br><Br>\\r\n\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n\\r\nYou can type out your teaching\nand student support plan in the box below, or you can upload a word doc or\npdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how the lesson will play out in your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. "
      'Lesson 9: Teaching and Student Support Plan_markdown_instruction': "> **NOTE:\nbefore you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLesson 9 Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lesson, let’s think about the types of\nsupports students will need in order to successfully complete it. Since the\ncurriculum is based on inquiry learning, lessons feature activities that engage\nstudents in discovering core concepts themselves. It’s important to think\nthrough implementation plans and student support. In this task you will make\na plan for teaching and student support that takes into account differentiation\nstrategies and make-up work for absent students. Your teaching and student\nsupport plan should cover the following: \\r\n\\r\n- **Details on how you will\nimplement and differentiate the lesson:**\\r\n\\r\n - An outline of any changes\nyou will need to make to the lesson to fit your local constraints or context\n(for example: pacing and time, dealing with classroom setup, etc). \\r\n -\nAn overview of the types of student needs you’ll likely need to support in\nyour classroom (for example: students who are struggling to understand the\nunderlying concept; students who are already familiar with the concept, but\nstill have room to learn more; etc)\\r\n - Your plan for addressing each of\nthe needs outlined above (for example: integrating extension activities or\nother materials for students who already know something about the topic)\\r\n<br><Br>\\r\n\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n\\r\nYou can type out your teaching\nand student support plan in the box below, or you can upload a word doc or\npdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how the lesson will play out in your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. "
      'Lessons 10 - 11: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 10 - 11: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n<br>\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n - How will you use the fact that\nthe lessons in this sequence are related and build on one another to address\nmake-up work? \\r\n\\r\nYou can type out your teaching and student support plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow the lesson will play out in your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'Lessons 12 - 13: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 12 - 13: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n<br>\\r\n\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n - How will you use the fact that\nthe lessons in this sequence are related and build on one another to address\nmake-up work? \\r\n\\r\nYou can type out your teaching and student support plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow the lesson will play out in your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'Lessons 2 - 3: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 2 - 3: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n<br>\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n - How will you use the fact that\nthe lessons in this sequence are related and build on one another to address\nmake-up work? \\r\n\\r\nYou can type out your teaching and student support plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow the lesson will play out in your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'Lessons 2-3: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nTeaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow that\nyou have a better sense of this lessons in this sequence, let’s think about\nthe types of supports students will need in order to be successful. Since\nthe curriculum is based on inquiry learning, lessons feature activities that\nengage students in discovering core concepts themselves. It’s important to\nthink through implementation plans and student support. In this task you will\nmake a plan for teaching and student support **for one of the lessons in this\nsequence** that takes into account differentiation strategies and make-up\nwork for absent students. Your teaching and student support plan should cover\nthe following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you discussing?**\n\\r\n\\r\n- **Details on how you will implement and differentiate the lesson:**\\r\n\\r\n\n- An outline of any changes you will need to make to the lesson to fit your\nlocal constraints or context (for example: pacing and time, dealing with classroom\nsetup, etc). \\r\n - An overview of the types of student needs you’ll likely\nneed to support in your classroom (for example: students who are struggling\nto understand the underlying concept; students who are already familiar with\nthe concept, but still have room to learn more; etc)\\r\n - Your plan for addressing\neach of the needs outlined above (for example: integrating extension activities\nor other materials for students who already know something about the topic)\\r\n\n- How will you address or emphasize the connection between lessons in this\nsequence? \\r\n\\r\n<br>\\r\n- **Plan for catching up absent students:**\\r\n\\r\n\n- How will absent students catch up on activities they missed? \\r\n - How\nwill you use the fact that the lessons in this sequence are related and build\non one another to address make-up work? \\r\n\\r\nYou can type out your teaching\nand student support plan in the box below, or you can upload a word doc or\npdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how the lesson will play out in your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. \\r\n\\r\n<br><br>"
      'Lessons 4 - 6: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 4 - 6: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n<br>\\r\n-\n**Plan for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch up on activities they missed? \\r\n - How will you use the fact that\nthe lessons in this sequence are related and build on one another to address\nmake-up work? \\r\n\\r\nYou can type out your teaching and student support plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow the lesson will play out in your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      Limited Quantity of Blocks Test_markdown_instruction: "Get me to the pig by\nadding only one block."
      Luigi's Pizza 1_markdown_instruction: "Welcome to Luigi's Pizza! To order\na pizza, type the name of a topping into the `cost` function, and we'll return\nthe price of that pizza. Try ordering a pepperoni pizza to start."
      Luigi's Pizza 2_markdown_instruction: "Right now there are only four choices\navailable at Luigi's pizza - let's fix that! Add a couple of new toppings\nto the conditional block in the `cost` function. Once you've added your toppings,\ntest out the function to make sure it works."
      Luigi's Pizza 3_markdown_instruction: "That's better, everyone loves more\nvariety in their pizza toppings! But you still can't please everyone, and\nfolks are coming in to order toppings that Luigi doesn't have. Instead of\nsaying no to those people, could you update the _else_ clause so that we charge\nthem a premium for toppings that we don't normally offer? Let's charge $10,000\nfor a topping we don't carry."
      Luigi's Pizza 4_markdown_instruction: "Free Play: What can you do to make Luigi's\ncost function even more useful? Try one (or more) of the following:  \\r\n\\r\n-\nCreate a new function to display an image of the chosen pizza\\r\n- Create\na function that allows for ordering multiple pizzas (the same, or with different\ntoppings)\\r\n- Create a function that allows you to add a coupon code for\na 30% discount"
      MC Agent Freeplay_markdown_instruction: "**Freeplay:** Now it's up to you!\nUse the Agent's code to help you explore this world."
      MC_2017_Ryan_02_markdown_instruction: "Code like this can be made even shorter\nusing loops!  \\r\n\\r\nNow get the Agent to the pressure plate using a `repeat`\nloop to help him move forward."
      MC_HOC_2017 Agent Test_markdown_instruction: "Click \"Run\" to move the player\nusing the **arrow keys**.  \\r\n\\r\nTo pass this level, you will need to get\nto the door and open it (using the **space bar**) so you can get to the orange\nsquare inside."
      MC_HOC_2017_01_markdown_instruction: "Click \"Run\" to move the player using\nthe **arrow keys**.  \\r\n\\r\nTo pass this level, you will need to get to the\ndoor and open it (using the **space bar**) so you can get to the orange square\ninside."
      MC_HOC_2017_01_Cole_markdown_instruction: "You need to collect all the tools\non this journey. Move around using the **arrow keys**, and get to the chest\non the path to win"
      MC_HOC_2017_01_Kiki_markdown_instruction: "To play this level, click the orange\n\"Run\" button beneath the play space, then move the player around using the\n**arrow keys**.  "
      MC_HOC_2017_01_RETRY_markdown_instruction: "The door is locked, but the Agent\nis here to help!\\r\n\\r\nSnap a `move forward` block to the bottom of the `when\nrun` block in the workspace to get the Agent to the pressure plate [PressurePlate_Up],\nthen press \"Run\" and use the arrow keys to move out of the house to collect\nthe **chest** [chest]."
      MC_HOC_2017_02_markdown_instruction: "The player needs to get into that secret\ngrove.  Help The Agent open the gate by writing code to get him to the pressure\nplate."
      MC_HOC_2017_02_Cole_markdown_instruction: "{currentPlayerName} is headed on\nan adventure! To help, get the **map** [map_empty] behind the locked door\non the right. \\r\n \\r\nSnap the code into the workspace to move the Agent\nto the pressure plate [PressurePlate_Up] so that {currentPlayerName} can get\nthrough. "
      MC_HOC_2017_02_Kiki_markdown_instruction: "The player is headed out on an adventure,\nbut first they have to get the torch that is hidden on the other side of that\nlocked door. \\r\n\\r\nProgram the Agent to move forward twice to follow the\nwhite path and get to the pressure plate so he can open the door for the player."
      MC_HOC_2017_02_Will_markdown_instruction: "To finish this level, the player\nneeds to get to the orange square inside of the Secret Grove, which is behind\nthe locked door.  \\r\n\\r\nThe code in the workspace will make the Agent move\nforward twice to get to the pressure plate and open the door for Alex or Steve."
      MC_HOC_2017_03_Cole_markdown_instruction: "{currentPlayerName} continues on\nthe adventure and needs the **compass** [compass] to prepare for the trip.  \\r\n   \\r\nCode\nthe Agent to open the gate. "
      MC_HOC_2017_03_Kiki_markdown_instruction: "The player's adventure will begin\nbehind the locked door, in the Secret Grove!  \\r\n\\r\n\\r\nHelp The Agent open\nthe door by writing code to get him to the pressure plate."
      MC_HOC_2017_04_markdown_instruction: "Change the loop from the last puzzle\nto help the Agent make a path over the wider part of this river."
      MC_HOC_2017_04POINT5_Cole_markdown_instruction: "You made it out of the swamp!  Now,\nget the player safely to the orange square.\\r\n\\r\nHelp The Agent clear the\npath by finding a simple pattern and using loops to cross the first two pressure\nplates."
      MC_HOC_2017_04POINT5_RYAN_markdown_instruction: "You made it across! \\r\n\\r\nNow,\nget {currentPlayerName} safely through the maze to collect the **axe** [diamond_axe]"
      MC_HOC_2017_04_Cole_markdown_instruction: "The Agent can move across water!  \\r\n\n\\r\nUse a `repeat` loop to solve this puzzle and help {currentPlayerName}\nget to the **bucket** [bucket_empty] behind the door. "
      MC_HOC_2017_04_Kiki_markdown_instruction: "The entry to the Secret Grove led\nto this beautiful Oasis!  To pass this level, the player needs to get to the\norange square in the cabana.  \\r\n\\r\nUse a `repeat` loop to help the Agent\nget all the way up to the pressure plate, which opens the cabana door."
      MC_HOC_2017_05_markdown_instruction: "Loops are not always helpful.\\r\n\\r\nThese\ncacti are not growing in an obvious pattern, so a loop would not clear them\ncorrectly.  Instead, we've given you a function called `destroy and move`\nthat will do the hard work for you each time the Agent gets to an obstacle."
      MC_HOC_2017_05_Cole_markdown_instruction: "Oh no, the bridge is out! \\r\n\\r\nCode\nthe Agent to rebuild the bridge using the `place` block so that {currentPlayerName}\ncan get to the **shovel** [diamond_shovel]."
      MC_HOC_2017_05_Josh_markdown_instruction: "Oh no, the bridge is out!\\r\n\\r\nHelp\nthe Agent rebuild the bridge so that the player can get to the **shovel**."
      MC_HOC_2017_05_Kiki_markdown_instruction: "It's time for the player to leave\nthe Secret Grove and continue the adventure, but the bridge is out! \\r\n\\r\nHelp\nthe Agent rebuild the bridge, then move to the wooden plank so that the player\ncan get to the orange square."
      MC_HOC_2017_06_Cole_markdown_instruction: "Another river, but this one is much\nwider! \\r\n \\r\nFix this code to help the Agent build a bridge so that {currentPlayerName}\ncan get to the **pickaxe** [diamond_pickaxe]. "
      MC_HOC_2017_06_Josh_markdown_instruction: "Another river, but this one is much\nwider!  \\r\n\\r\nFix this code to help the Agent build a bridge across this\nriver."
      MC_HOC_2017_06_Kiki_markdown_instruction: "Another river, but this one is much\nwider!  \\r\n\\r\nFix this code to help the Agent build a bridge across the\nwater."
      MC_HOC_2017_07_Cole_markdown_instruction: "There's ice in the way!  \\r\n \\r\nThe\n`clear path` function can help you destroy the ice and get {currentPlayerName}\nto the Minecart [minecart_normal]! "
      MC_HOC_2017_07_Kiki_markdown_instruction: "Loops are not the only way to repeat\ncode!  \\r\n\\r\nHere, we've given you a function called `clear cacti` that\nwill do the hard work of clearing three cacti every time you use it.  Use\ntwo `clear cacti` blocks to clear the path to the orange square. "
      MC_HOC_2017_07a_Kiki_markdown_instruction: "Now, edit this loop to help the\nAgent clear a path to the orange square."
      MC_HOC_2017_08_Cole_markdown_instruction: "Now, instead of destroying before\nyou move, you will need to place a block.  \\r\n\\r\nChange the provided function\nto work for the desert."
      MC_HOC_2017_08_Kiki_markdown_instruction: "Now, instead of destroying cacti,\nyou will need to place stone over lava, then destroy standstone.  \\r\n\\r\nChange\nthe function to work for this level."
      MC_HOC_2017_08_RY_markdown_instruction: "Now there are **TWO** functions to\nchoose from!\\r\n\\r\nUse these functions to quickly build a bridge across the\nlava for {currentPlayerName}."
      MC_HOC_2017_08_Will_markdown_instruction: "Now there are **TWO** functions\nto choose from!\\r\n\\r\nUse these functions to quickly build a bridge across\nthe lava for the player."
      MC_HOC_2017_09_Cole_markdown_instruction: "Use functions to help the Agent\ndestroy the giant blocks of dirt that are blocking the player's path to the\npressure plate."
      MC_HOC_2017_09_Kiki_markdown_instruction: "This starting code cannot be removed.\\r\n\\r\nAdd\ncommands to the `create trail` function so that the program in the workspace\nwill get the Agent to the pressure plate. "
      MC_HOC_2017_09_RS_CLONE_markdown_instruction: "Fix this function to fill in\nthe holes, then step on the pressure plate to clear a path to the torch."
      MC_HOC_2017_10_Cole_markdown_instruction: "Use the functions to clear a path\nfor the mine cart, and walk into the Nether Portal."
      MC_HOC_2017_10_Cole_old_markdown_instruction: "Try building a function from\nthe beginning that will make it easier for the Agent to finish this minecart\nand get the player to the orange square."
      MC_HOC_2017_10_Kiki_markdown_instruction: "Try building a function from the\nbeginning that will make it easier for the Agent to finish this minecart and\nget the player to the orange square."
      MC_HOC_2017_10_RETRY_markdown_instruction: "Can you spot the difference between\nthe two functions in your workspace? \\r\n \\r\nUse these functions with other\ncode from the toolbox to clear a path for the Minecart, then collect the **Flint\nand Steel** [flint_and_steel]. \\r\n "
      MC_HOC_2017_10_RYAN_markdown_instruction: "Try building functions from the\nbeginning that will make it easier for the Agent to finish this minecart and\nget the player to the orange square."
      MC_HOC_2017_10_RYAN2_markdown_instruction: "Try building functions from the\nbeginning that will make it easier for the Agent to finish this minecart and\nget the player to the orange square."
      MC_HOC_2017_11_Kiki_markdown_instruction: "Now it's up to you! See what you\ncan create around this frozen lake."
      MC_HOC_2017_13_Cole_markdown_instruction: "**Freeplay:** Now it's up to you!\nUse the Agent's code to help you explore this world."
      MC_HOC_2017_4.5v2_markdown_instruction: "You made it out of the swamp!  Now,\nget the player safely to the orange square.\\r\n\\r\nHelp The Agent clear the\npath by finding a simple pattern and using loops to cross the first two pressure\nplates."
      MC_HOC_2017_Ali_markdown_instruction: "Look at the functions below.  How can\nyou use them to avoid the Ghasts and help {currentPlayerName} make it safely\nto the **Enchanted Book** [book_enchanted]?  "
      MC_HOC_2017_FP10x10_markdown_instruction: "**Freeplay:** Now it's up to you!\nCan you challenge yourself to collect all of the diamonds in this level? "
      MC_HOC_2017_FP10x10_RE_markdown_instruction: "**Freeplay:** Now it's up to\nyou! Can you challenge yourself to collect all of the diamonds in this level?\n"
      MC_HOC_2017_FP20x20_markdown_instruction: "**Freeplay:** Now it's up to you!\nUse the Agent's code to help you explore this world."
      MC_HOC_2017_Ryan_03_markdown_instruction: "Did you know that you can put more\nthan one piece of code into a loop?  \\r\n\\r\nUse a `repeat` loop to help the\nAgent build a bridge over the river by placing blocks in the water."
      MC_HOC_2017_Ryan_05_markdown_instruction: "Sometimes you need to knock down\nthings that get in the way of your player.  \\r\nUse the `destroy` block to\nclear all of the cactii between the Agent and the pressure plate."
      MC_HOC_Kiki_02_markdown_instruction: "Someone needs to be on the pressure plate\nbefore the side door will open.  Help the Agent get to the plate so the player\ncan leave the house."
      MSM Defining Vars 1_markdown_instruction: "Write a program that produces a\n50 pixel solid green triangle."
      MSM Defining Vars 2_markdown_instruction: "If we wanted to make fifty green\ntriangles, it would be a pain to repeat that block of code 50 times. Let's\ncreate a variable called `my-shape` and put the code for a 50 pixel solid\ngreen triangle inside."
      MSM Defining Vars 3_markdown_instruction: "Take your `my-shape` variable and\nuse it with this provided code to draw two identical green triangles that\nare 50 pixels in size."
      MSM Defining Vars 4_markdown_instruction: "Edit your `my-shape` variable so\nthat it draws 75 pixel solid red stars."
      Making Music_markdown_instruction: "Today you’re going to learn how to use\nand create **functions**.\\r\n\\r\nCreating a function lets you make your own\nblocks! There are two parts to a function: \\r\n\\r\nMaking a newly named block\nthat has all of the code you want to run inside of it. \\r\n-xml of function\ndefinition- \\r\n\\r\nThe single green block itself that you use, or call, to\nrun the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare to\nget familiar with functions, learn how to edit them, and create your own!"
      Making Music_2018_markdown_instruction: "Today you’re going to learn how to\nuse and create **functions**.\\r\n\\r\nCreating a function lets you make your\nown blocks! There are two parts to a function: \\r\n\\r\nMaking a newly named\nblock that has all of the code you want to run inside of it. \\r\n-xml of function\ndefinition- \\r\n\\r\nThe single green block itself that you use, or call, to\nrun the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare to\nget familiar with functions, learn how to edit them, and create your own!"
      Matt Test Level_markdown_instruction: "Do 0 bits weigh less than 1 bits?\n"
      Middle School Hackathon Pt 1_markdown_instruction: "# MS Hackathon: Fancy Drawing\\r\n\\r\nThe\nblocks you've been provided are those that a student in CS Discoveries would\nlikely have available after a week or so of using Game Lab. No sprites yet,\nbut you've **just been introduced to some powerful programming constructs\nlike generating random numbers, storing values in a variable, and looping.**\nYou'll also be pretty familiar with the drawing commands at this point.\\r\n\\r\n#\nDo This\\r\n\\r\n* Using only the tools provided to you, **make something awesome!!**\\r\n*\nThe likely project at this point would be an **animated card** but feel free\nto go other directions if you like.\\r\n* **Avoid complex variable arithmetic**\nif you can. You \"don't know it\" yet.\\r\n* **Avoid referencing the iterator\nin your for loops**. At this point it's just a repeat loop."
      Middle School Hackathon Pt 2_markdown_instruction: "# MS Hackathon: Sprites\nand Interactivity\\r\n\\r\nYou now can **create sprites, add images, manipulate\ntheir properties, and perform simple variable arithmetic to update their values\n(e.g. `sprite.scale = sprite.scale + 1;`)**. You've also been introduced\nto conditional statements and know how to use them to get some interactive\nbehavior with the mouse and keyboard.\\r\n\\r\n# Do This\\r\n\\r\n* Using only\nthe tools provided to you **make something awesome!**\\r\n* The likely target\nproject here might be a **simple game** or **interactive visualization**.\\r\n*\nYou don't yet know about **groups, loops, collisions**, or more magical properties\nlike **velocity or rotationSpeed**\\r\n\\r\n**These commands are not in the\nblock palette but feel free to use**\\r\n\\r\n* `mySprite.mouseActive = true;`\nwill make your sprite track mouse events\\r\n* `mySprite.mouseIsOver` and `mySprite.mouseIsPressed`\nare booleans you can now use to sense mouse-to-sprite interactions.\\r\n\\r\n**To\nadd sprites to images follow the pattern below**\\r\n\\r\n```\\r\nvar spriteImage,\nsprite;\\r\n\\r\n//You'll need to create a preload function to load the image.\\r\nfunction\npreload(){\\t\\t\\t\\r\n    spriteImage = loadImage(\"imageURL\");\\r\n}\\r\n\\r\n//Create\nyour sprite and add the image\\r\nfunction setup(){\\r\n    sprite = createSprite(200,200,10,10);\\r\n    sprite.addImage(\"someName\",\nspriteImage);\\r\n}\\r\n\\r\n//Draw your sprites.\\r\nfunction draw(){\\r\n\\tbackground(255,255,255);\\r\n\\tdrawSprites();\\r\n}\\r\n```"
      Mike Pair Programming_markdown_instruction: "Here are markdown instructions"
      Mike Test Bee Conditionals 1_markdown_instruction: "This cloud is blocking\nmy view! \\r\n\\r\nCheck to see if there's a flower under the cloud, and only\nget nectar if there's a flower.   \\r\nBe careful, it can change!"
      Mike Test Bee Conditionals 2_markdown_instruction: "**Assessment:** Collect\nall of the nectar.  \\r\nBe careful not to try to collect nectar from a purple\nflower if it doesn't have any."
      MikeTest1_markdown_instruction: "Markdown"
      Modular Arithmetic_markdown_instruction: "# Modular Arithmetic\\r\n\\r\n\\r\nThe\nmodulo operation (which gives you the remainder of dividing two integers)\nis important in computer science and it turns out to be useful in many contexts\nincluding encryption. It’s actually not computationally intensive to compute\na single modulo on a computer; it’s as fast as dividing two numbers. The commutative\nproperties of modulo and numbers with large exponents were discovered to be\nthe key ingredients for modern day asymmetric encryption.\\r\n\\r\n\\r\nThe link\nbelow introduces the concept of modular arithmetic, and explains the Diffie-Hellman\nkey exchange (described in lesson 7 using an analogy with Alice, Eve, and\nBob)."
      NEW Course 4 Artist Functions 1_markdown_instruction: "Can you draw a square\nthat is 100 pixels in length, using a repeat loop?\\r\n\\r\n"
      NEW Course 4 Artist Functions 10.1_markdown_instruction: "Use the functions\nfrom the previous puzzles to draw this pattern."
      NEW Course 4 Artist Functions 10_markdown_instruction: "Click \"edit\" to fill\nout the blocks in the function definition to make a 40 pixel square.\\r\n\\r\n"
      NEW Course 4 Artist Functions 11_markdown_instruction: "Now we want to create\na new function called `draw a line of squares` that draws six squares all\nin a row.  \\r\n\\r\nCan you build this function using this `draw a square 20`\nfunction that we created for you?\\r\n<br/><br/>\\r\n\\r\n*Note: See that we've\nchanged the pen to be much thinner. Click \"edit\" on the `draw a square 20`\nfunction to see how!*"
      NEW Course 4 Artist Functions 12_markdown_instruction: "Use the `draw a line\nof squares` function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_markdown_instruction: "Can you draw a star\nshape using the `draw a line of squares` function?  \\r\n\\r\n(Be sure to `move\nforward` 60 pixels before you turn 144 degrees!)"
      NEW Course 4 Artist Functions 14_markdown_instruction: "It's free-play time!\nDraw anything you like!"
      NEW Course 4 Artist Functions 2_markdown_instruction: "Can you draw 3 squares\n20 pixels apart from one another? \\r\n\\r\nEach square is 100 pixels in size."
      NEW Course 4 Artist Functions 3_markdown_instruction: "Here is a new type of\nBlock. It is called a `function` block. Click \"edit\" then fill it with the\ncode for drawing a square with 100 pixel sides. \\r\n\\r\nWhen you're done\nediting the function, click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4_markdown_instruction: "Use the `draw a square`\nfunction to draw this pattern. "
      NEW Course 4 Artist Functions 5_markdown_instruction: "How did the `draw a\nsquare` block know what commands to run? Click on \"edit\" in the `draw a\nsquare` function block. The blocks in the function editor are the definition\nthat make up `draw a square`. \\r\n\\r\n<br/>\\r\nWhen you're done looking around,\nclick \"Save and Close\" and then \"Run.\"\\r\n\\r\n"
      NEW Course 4 Artist Functions 6_markdown_instruction: "Using the \"draw a square\"\nfunction block, can you draw this picture? Hint: each square is 20 pixels\napart.\\r\n\\r\n"
      NEW Course 4 Artist Functions 7_markdown_instruction: "Are you getting the\nhang of how to use function blocks? Let's modify `draw a square` so that\nit draws squares that are 200 pixels in size. \\r\n\\r\nClick on \"edit\" to\nenter the `draw a square` function editor.\\r\n\\r\nRemember to click on \"Close\"\nto get out of the function editor. "
      NEW Course 4 Artist Functions 8_markdown_instruction: "We have created a new\nfunction for you called `draw a triangle`.  Can you edit the function definition\nto draw a triangle with 100 pixel sides?"
      NEW Course 4 Artist Functions 9_markdown_instruction: "Can you solve this by\nadding only one block?"
      NEW Course 4 Artist Functions inspire_markdown_instruction: "<img src=\"https://images.code.org/5e50e6ef0cafb40a8b697ea158047412-image-1441260841174.11.12.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\n\\r\n\\r\n"
      NEW Course 4 Artist Params 1_markdown_instruction: "Let's define this function\nto draw a square with 50 pixel sides. Click \"edit\" to get started.\\r\n\\r\n"
      NEW Course 4 Artist Params 10_markdown_instruction: "Create a `draw a hexagon`\nfunction block with a length parameter. \\r\n\\r\nThis hexagon has sides that\nare 100 pixels in length."
      NEW Course 4 Artist Params 11_markdown_instruction: "Can you figure out how\nto draw this shape? \\r\n\\r\nEdit the function to use the `sides` parameter."
      NEW Course 4 Artist Params 12_markdown_instruction: "Can you complete this\ndrawing? \\r\n\\r\nThe sides of all the shapes are 100 pixels long."
      NEW Course 4 Artist Params 12a_markdown_instruction: "This image is similar\nto the last.  \\r\n\\r\nCan you use a `for` loop with your function to make\nthis design?"
      NEW Course 4 Artist Params 13_markdown_instruction: "Let's edit this `draw\na polygon` function. \\r\n\\r\nIt already has a `sides` parameter. Now, let's\nadd a `length` parameter. \\r\n\\r\n<br/>\\r\nThe perimeter of each shape is\n200 pixels. Do you remember the equation to make shapes the same size when\nthey have a different number of sides?"
      NEW Course 4 Artist Params 14_markdown_instruction: "Edit `draw a spiral edge`\nto use `length` and `sides` parameters, then recreate these shapes.\\r\n\\r\n-\nThe smallest side length of the square is 5 pixels.\\r\n- The smallest side\nlength of the triangle is 10 pixels.\\r\n- The smallest side length of the\nhexagon is 2 pixels.\\r\n- All increase to 100 pixels.  "
      NEW Course 4 Artist Params 15_markdown_instruction: "**Freeplay:** Here are\nthe functions you've written, and some more for you to play with. Play with\nthe pen width to see how different your drawings look!"
      NEW Course 4 Artist Params 2_markdown_instruction: "Create a `draw triangle`\nfunction from scratch that makes a triangle with  50 pixel sides."
      NEW Course 4 Artist Params 3_markdown_instruction: "Now let's use the function\nto draw 5 triangles in a row. \\r\n\\r\nEach triangle is 30 pixels apart."
      NEW Course 4 Artist Params 4_markdown_instruction: "Do you notice anything\ndifferent about these function blocks? Click “Run” to see what happens."
      NEW Course 4 Artist Params 5_markdown_instruction: "Replace the `???` in the\n`length` parameter input block. \\r\n\\r\nThe pentagon has 100 pixel sides."
      NEW Course 4 Artist Params 6_markdown_instruction: "Fill in the `length` parameter\nto draw these shapes by replacing the `???` with the right numbers.  \\r\n\\r\nThe\nsquare and triangle have 100 pixel sides.  \\r\nThe hexagon sides are 75 pixels\nlong. "
      NEW Course 4 Artist Params 7_markdown_instruction: "Can you complete this drawing?\n\\r\n\\r\nThe sides of each triangle are 25 pixels larger than the last.  \\r\nThe\nfirst triangle has 25 pixel sides."
      NEW Course 4 Artist Params 8_markdown_instruction: "The code for this triangle\nfunction is broken. \\r\n\\r\nCan you edit the function to fix it, and then\nmake triangles of length 25, 50, and 75?"
      NEW Course 4 Artist Params 9_markdown_instruction: "Click \"edit\" to fill\nin the function definition of `draw a square` and add a parameter.  \\r\nIt\nshould take a length parameter just like the triangle. \\r\n\\r\n**This time,\ndraw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are\neach 100 pixels away from the last."
      NEW Course 4 Artist Params inspire_markdown_instruction: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\\r\n\\r\nNotice:\nWe've used the `set alpha` block to make the \"petals\" fade toward the outside."
      NEW Course 4 Artist Vars 12_markdown_instruction: "Now, recreate the algorithm\nfrom the last level and create a pentagon with sides of length 150."
      NEW Course 4 Artist Vars 2_markdown_instruction: "Drag a number block to the\n`set length` block and to the `repeat _ times` block to draw a set of 50 pixel\ntriangles. "
      NEW Course 4 Artist Vars 4_markdown_instruction: "Let's try it again! \\r\n\\r\nCan\nyou set the `length` variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6_markdown_instruction: "Draw this pattern of pentagons\nwith 100 pixel sides by setting the right value for `length` and dropping\nthe `length` variable into all of the the correct places. \\r\n\\r\nSee how\nyou only have to set the value for `length` once, and the code uses the right\nvalue everywhere?"
      NEW Course 4 Bee For Loops 10a_markdown_instruction: "Ready for a challenge?  Take\nwhat you've learned about loops and try to solve this problem. \\r\n\\r\nRemember:\nYou may have to run through solutions multiple times before you figure out\nall of the steps.\\r\n"
      NEW Course 4 Bee For Loops 2_markdown_instruction: "Add the code necessary\nto make sure the bee collects all the nectar. \\r\n\\r\nLook at how much code\nyou need for this puzzle!   \\r\n(We'll learn a simpler way in the next puzzle.)"
      NEW Course 4 Bee For Loops 3_markdown_instruction: "Ah, the `for loop` makes\nthis much easier! All the code you need is here, take a look at how it is\nput together then click `Run` to see how it works. "
      NEW Course 4 Bee For Loops 4 4_markdown_instruction: "Now we need to `move\nforward` `counter` times, then `get nectar` `counter` times.  Can you use\ntwo `repeat` loops to solve this challenge?"
      NEW Course 4 Bee For Loops 4_markdown_instruction: "Replace the ??? in the\n`for loop` with the largest amount of nectar the bee has to collect. "
      NEW Course 4 Bee For Loops 5 5_markdown_instruction: "Are you getting the hang\nof using the `for loop`? Let's help the bee get the rest of the nectar."
      NEW Course 4 Bee For Loops 5_markdown_instruction: "You can also use a `for\nloop` to count down. Try gathering this nectar by counting down from 5 to\n1 by 1."
      NEW Course 4 Bee For Loops 6_markdown_instruction: "The last number in your\nfor loop is called the `increment`.  Each time the loop is run, the counter\nvariable changes by the value of the increment. \\r\n\\r\nTry collecting these\nflowers using an increment of 2."
      NEW Course 4 Bee For Loops 7_markdown_instruction: "Now, let's combine the\n`counter` variable with a math block! How can you use the `counter` variable\nto navigate this garden with the fewest number of blocks possible? \\r\n\\r\nWhat\ndo you need to do to collect 3, 6, 9, 12, 15 nectar this time?  The secret\nis in the `counter` variable!\\r\n\\r\n<br/>\\r\nRemember: If your loop is counting\nup, the increment is added to your `counter` variable each time through.\\r\n\\r\n"
      NEW Course 4 Bee For Loops 8_markdown_instruction: "You've got this!  \\r\n\\r\nWhat\nshould your increment be to collect 3, 6, 9, 12, 15 nectar?\\r\n\\r\n"
      NEW Course 4 Bee For Loops 95_markdown_instruction: "Take a look at each piece\nof the `for loop` that you have just created.  Can you figure out which numbers\nyou need to double to solve this puzzle? Why does it work?"
      NEW Course 4 Play Lab Params 11_markdown_instruction: "It's free play time!\nHave fun with all the blocks in your tool box.  \\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Tag</strong>\n- Have character 2 patrol and use your arrow keys to make character 1 chase\nuntil they collide. </li>\\r\n            <li><strong>Whack-a-Sprite</strong>\n- Have a character constantly pop up at a random location. Award points for\nclicking the sprite before it disappears. </li>\\r\n            <li><strong>Best\nGuess</strong> - Make both characters disappear, change location to a random\nspot, then reappear as a random character.  Click on the first one and get\na point...but if you click on the second one you LOSE a point! </li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      NEW Course 4 Play Labs For Loops 8a_markdown_instruction: "**Challenge:** How\nwould you use the `for loop` to go from top to bottom and get every character\nto say their actor number, then vanish from the screen? "
      NetSim Standalone Automatic DNS_markdown_instruction: "# Domain Name System\n(DNS)\\r\n\\r\nIn this version of the Internet Simulator, a Domain Name System\n(DNS) is provided for you and knows the IP addresses of all connected computers.\nYou can only see the hostnames of other connected computers.   \\r\n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\\r\n\\r\nThe\naddress of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with\nprotocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another\nstudent's address. You can keep track of the responses in the Notes section\nin the DNS tab.  \\r\n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)\\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim Standalone Broadcast_markdown_instruction: "# Broadcast messages in\nthe Internet Simulator\\r\n\\r\nIn this version of the Internet Simulator, you\ncan connect to up to 5 other people in a room. When you send messages in the\nroom, everyone receives them. What are some of the challenges of this system,\nand how might you solve them?\\r\n\\r\nYour teacher will hand out more specific\ninstructions for this activity."
      NetSim Standalone Classroom Routers_markdown_instruction: "# Routing messages\n\\r\n\\r\nIn this version of the Internet Simulator, everyone connects to a\nrouter and has a specific address. To send messages, you have to address your\nmessage to the specific address of the recipient, and the router will take\ncare of delivering it to the right computer. If there are other routers created\nin your class, ask for the address of one of your classmates and send them\na message! View the Log Router to see the path the messages have taken through\nthe network.\\r\n\\r\nYour teacher will hand out more specific instructions\nfor this activity."
      NetSim Standalone Freeplay_markdown_instruction: "# Internet Simulator Freeplay\\r\n\\r\nIn\nthis version of the Internet Simulator, most of the options are turned on\nand are configurable. Messages can be sent to any router within the class,\nand messages will take different paths to reach their destination.\\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim Standalone Manual DNS_markdown_instruction: "# Introduction to DNS\\r\n\\r\nIn\nthis version of the simulator you can't see the other students' addresses.  Instead,\none of you must act as a name service, to help share addresses with each other.\nFrom the DNS tab in the left column, one person can take over as DNS.\\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim Standalone Packets TCP_markdown_instruction: "# Packets and Making a\nReliable Internet\\r\n\\r\nMessages on the Internet can take many paths to get\nto their destination, and sometimes along the way the message gets dropped.\nIn this version of the Internet Simulator:\\r\n\\r\n- There is a 10% chance\nof a packet being dropped\\r\n- Multiple packets may take different paths to\nthe destination\\r\n- The default max packet size is set to 6 additional characters\\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim Standalone SendAB_markdown_instruction: "# Sending bits with the Internet\nSimulator\\r\n\\r\nYou and your partner share a single wire that can only be\nin state A or state B. You can set the wire to either state at any time, and\nyou can read the state of the wire at any time. Can you figure out a way to\neffectively communicate with just this system?\\r\n\\r\nYour teacher will hand\nout more specific instructions for this activity."
      NetSim Standalone Sending Numbers Ascii_markdown_instruction: "# Sending Text\nwith the Internet Simulator\\r\n\\r\nNow that you've transmitted information\nrepresented as decimal numbers, you can map those numbers to text characters\nto send text-based information back and forth. With a text-based protocol,\nyou can easily represent and communicate all kinds of information. \\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim Standalone Sending Numbers_markdown_instruction: "# Sending Numbers\nwith the Internet Simulator\\r\n\\r\nYou and your partner can now reliably send\nmessages back and forth without extra coordination! While you're always sending\nbits back and forth, you can also represent those bits as decimal numbers.\nWhat kinds of information can you represent with this system? \\r\n\\r\nYour\nteacher will hand out more specific instructions for this activity."
      NetSim_Variant2_markdown_instruction: "## NetSim: Variant 2\\r\n\\r\nStudents\nconnect directly to one another and send entire packets back and forth, exploring\nsystems of encoding data."
      New Minecraft Hero Project_markdown_instruction: "**Freeplay:** Now it's up\nto you! Use the Agent's code to help you explore this world."
      Nike Example Brand Book_markdown_instruction: "# Brand Book\\r\n\\r\nCheck out\nthe example of a brand book\\r\n\\r\n"
      October15 JoL 1_markdown_instruction: "Program the artist to design a face\nfor your jack-o-lantern!\\r\n\\r\n"
      October15 bat_markdown_instruction: "Freeplay: Here are the functions you've\nwritten, and some more for you to play with. Play with the pen width to see\nhow different your drawings look!\\r\n\\r\n"
      October15 ghost 1_markdown_instruction: "Give the ghost eyes, using the `draw\na circle` function.\\r\n\\r\n"
      October15 pumpkin 1_markdown_instruction: "Finish this jack-o-lantern by drawing\nthe eyes and nose in any style you would like.\\r\n\\r\n"
      October15 stars 1_markdown_instruction: "Use loops and the `random integer`\nblock to fill the night sky with stars of different shapes and sizes."
      Open text response example_markdown_instruction: "# Open text response example\n\nThis\nis an example Markdown content header.\n\n## YouTube video\n\n<iframe width=\"560\"\nheight=\"315\" src=\"https://www.youtube.com/embed/nKIu9yen5nc\" frameborder=\"0\"\nallowfullscreen></iframe>\n\nWhat did you think of the video?\n"
      Overworld Chop Tree_markdown_instruction: "Wood is a very important resource.\nMany things are made from it. Walk to the tree and use the `destroy` block\ncommand to chop it down."
      Overworld Chop Tree_2018_markdown_instruction: "Wood is a very important resource.\nMany things are made from it. Walk to the tree and use the `destroy` block\ncommand to chop it down."
      Overworld House Frame Chosen_markdown_instruction: "Build the rest of your\nhouse from any material you'd like. The `repeat` command will come in handy."
      Overworld House Frame Chosen_2018_markdown_instruction: "Build the rest of\nyour house from any material you'd like. The `repeat` command will come in\nhandy."
      Overworld Move to Sheep_markdown_instruction: "Add a second `move forward`\nblock to reach the sheep."
      Overworld Move to Sheep_2018_markdown_instruction: "Add a second `move forward`\nblock to reach the sheep."
      Overworld Place Wall_markdown_instruction: "Every house starts with a wall.\nBuild the first part of your house by putting the `place` and `move forward`\ncommands inside the repeat loop."
      Overworld Place Wall_2018_markdown_instruction: "Every house starts with a\nwall. Build the first part of your house by putting the `place` and `move\nforward` commands inside the repeat loop."
      Overworld Shear Sheep_markdown_instruction: "Sheep-shearing time! Use the `shear`\ncommand to gather wool from both sheep."
      Overworld Shear Sheep_2018_markdown_instruction: "Sheep-shearing time! Use\nthe `shear` command to gather wool from both sheep."
      PDAlg 13-16 Sam Extension Puzzle_markdown_instruction: "Add a second parameter\nto `onscreen?` for Sam's y coordinate and update the function so it keeps\nhim safe on all four sides."
      PDAlg 17-20 Luigi Extension Puzzle_markdown_instruction: "Without modifying\nyour existing `cost` function, create a new `coupon` function that takes a\npizza topping and coupon code and returns the cost of a pizza with that topping.\nIf the coupon code is correct (you get to decide what it is), apply a 30%\ndiscount to the pizza."
      PDAlg 8-12 Rocket Height Puzzle_markdown_instruction: "Let's write a `rocket-height`\nfunction with simple acceleration. Write a function that ensures the rocket\nis at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and\n165 at 4 seconds."
      PDAlg 8-12 ex dr 2_markdown_instruction: "This student has created two examples\nfor the function `apples` but something's not quite right. How would you\ndirect this student to correct their mistake?"
      PDAlg Big Game History_markdown_instruction: "Now that you've played through\na Big Game level you should see a new entry in your history. Click the _Version\nHistory_ button and you should see at least one version. Each time you go\nback to a Big Game level you'll get a new record in your version history\nthat you can revert back to.\\r\n\\r\nMake sure to click _Run_ and _Finish_\nto move on to the next puzzle."
      PDAlg Big Game Remix_markdown_instruction: "Here's your Big Game as you last\nleft it. Try clicking the _Remix_ button to spin off a new remix of your project.\nAny changes you make after you click _Remix_ will be saved on your new remix\nand not on your main Big Game.\\r\n\\r\n**Clicking Remix will take you to a\nnew page** - make sure you come back here and click _Run_ and _Finish_ after\nyou've made a remix."
      PDAlg Classroom Culture 2_markdown_instruction: "### Strategies for facilitating\nan engaged computer science classroom:\n\n- Be open to learning from your\nstudents. This is a very valid way for you to learn something new and if the\nstudents see you learning from others; they'll feel more comfortable to do\nit themselves.\n- Be calm yet persistent when problems arise (which they will)\nbecause your reaction sets the tone for students. If at the first sign of\nan issue, you proclaim \"I'm terrible at technology. I give up,\" your students\nwill think it's okay to do that too. \n- Implement the \"Ask 3 and then me\"\nrule in your classroom, which is when students have to ask 3 classmates for\nhelp before they can ask the teacher that same question. This reduces the\nnumber of students that you have to answer individually and promotes peer\nlearning.\n- Take pride in their programs. Show it off, put it to work, post\nit online. This is a big accomplishment for you and your students that should\nbe celebrated.\n- Your students may not need you in the way you think they\nneed you. You don't need to be the expert. Ask probing questions to a student\n(even if you don't know the answer to the questions). Or ask the class if\nanyone has the answer. Or say \"I don't know; let's figure this out together\"\n-\nAsk probing questions to help a student instead of taking their mouse away\nto solve the puzzle for them. Students will be more engaged if they have to\nmove the mouse themselves. Also, make it a classroom rule that if a student\nis helping another student at a computer, they can't take the mouse from\nthem either. \n- Understanding how to get the help you need is an important\npart of becoming a successful facilitator of a computer science classroom.\nThere are a variety of ways to get questions answered: online groups, the\nperson sitting next to you, email to a mentor or peer, Code.org community\nforums, or other computer science educators in your district.\n\nIt's possible\nthat you might find something that's broken, unusable, or missing on our\nwebsite, which in the computer science world is called a \"bug\". Take a screenshot\nof what happened, and describe the problem in an email to pd@code.org. Also\ninclude what operating system and browser version you're using (example:\nWindows 7, Internet explorer 9). We really appreciate teachers and users sending\nus bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow\nthat you know more about our curriculum, what practices do you want to use\nto promote a healthy atmosphere in your computer science classroom?'\n"
      PDAlg DR Text 1_markdown_instruction: "Here's the same contract from the last\npage. What could you ask this student to help them identify and correct their\nerror?\n\n### Question\n\nIf you have a budget in dollars, can you write a\nfunction `treats` that returns the number of treats you could afford at 50\ncents each?\n\n### Contract\n\n`treats: Number Number -> Number`\n"
      PDAlg Design Recipe Delete_markdown_instruction: "When developing complex programs\nit's not uncommon to end up with functions that you no longer want, which\nused to just crowd your functions drawer, but now you can **delete** them.\nClick the **delete** button to get rid of this function, then try creating\nand deleting a few of your own."
      PDAlg Design Recipe Required_markdown_instruction: "In addition to testing\nexamples, we can also _require_ that students use examples in their functions.\nComplete the Design Recipe for the `eggs` function, making sure to create\nand test your examples. (You can ignore creating examples if you want to see\nthe error message.)"
      PDAlg Prep on Paper_markdown_instruction: "# Lesson Prep > Thinking on Paper\\r\n\\r\nAs\nyou learned in the summer PD, thinking through the Design Recipe on paper\nis an essential step for success, particularly when it comes to solving complex\nor novel problems. Print out a copy of the [Design Recipe worksheet](https://code.org/curriculum/docs/algebra/worksheets/design_recipe.pdf)\nand go through your chosen word problem as if you were a student.\\r\n\\r\n##\nPut on your student hat\\r\n\\r\nViewing these problems as your students will\ncan help you identify potential pain points, lack of clarity, or misconceptions.\nIt's sometimes difficult to drop our teacher assumptions and expectations,\nbut the more authentically you can wear your student hat, the more you will\nlearn about the possible difficulties in your plan.\\r\n\\r\n## What's tough\nabout this problem?\\r\n\\r\nAfter you complete your Design Recipe on paper,\nthink about the difficult elements of your particular word problem. Where\nmight students stumble, and what can you do to support them in that struggle?\nThe goal here is not necessarily to remove the struggle (as that's where\nwe learn the most), but to prepare for it."
      PDAlg Updates Cond_markdown_instruction: "When you went to PD in the summer,\nthe **Conditional** block that you were introduced to was black and allowed\nany data type to be used. This proved to be confusing, given that every other\nfunction we've seen always produces the same type of data. To help make conditionals\nclearer and more consistent we've replaced the single black block with a\nseparate block for each data type.\\r\n\\r\n![conditional blocks](//studio.code.org/script_assets/pd/newcond.png)"
      PDAlg Updates Errors_markdown_instruction: "Few things in programming are as\nfrustrating as ambiguous or unclear error messages. When things go wrong in\na program we rely on helpful error messages for direction, so we've spend\na lot of time creating error messages that help direct students to solve their\nown problems.\\r\n\\r\nRun the provided program and use the error messages to\ntry and track down the bugs."
      PDAlg Updates Space_markdown_instruction: "Making use of limited programming\nspace (especially on small screens) is challenging with a block based language.\nTo help with this we've added a few features:\\r\n\\r\n- A draggable bar (three\nvertical dots) between the programming space and the game space allowing you\nto shrink the game space for more room to code.\\r\n- A handful of redesigned\nblocks that take up less horizontal space (check out the new `overlay` block.)\\r\n-\nThe programming space will scroll vertically when the blocks extend past the\nvisible screen space.\\r\n- Zoom in and out using Cmd +/- (Mac) or Ctrl +/-\n(Windows)\\r\n\\r\nExperiment with this provided code to see how the space can\nbe manipulated to deal with larger programs."
      PDAlg course goals_markdown_instruction: "# Documenting Your Course Goals\\r\n\\r\n**Now\nthat you've learned more about the CS in Algebra Professional Learning Program\nand curriculum, let's consider your goals**\\r\n\\r\n - What are your goals\nfor your CS in Algebra class?\\r\n - How do you you see it integrating into\nyour class, and what do you hope that you and your students get out of the\nexperience?\\r\n\\r\n*These goals will change over time, and we'll revisit\nyour response as we go through the course so we can check in on how we're\nprogressing towards those goals.*\\r\n"
      PDK5 Challenges_markdown_instruction: "What are your biggest challenges to\nimplementing Code.org's curriculum in your classroom?\n"
      PDK5 Classroom Culture 2_markdown_instruction: "### Strategies for facilitating\nan engaged computer science classroom:\n\n- Be open to learning from your\nstudents. This is a very valid way for you to learn something new and if the\nstudents see you learning from others; they'll feel more comfortable to do\nit themselves.\n- Be calm yet persistent when problems arise (which they will)\nbecause your reaction sets the tone for students. If at the first sign of\nan issue, you proclaim \"I'm terrible at technology. I give up,\" your students\nwill think it's okay to do that too. \n- Implement the \"Ask 3 and then me\"\nrule in your classroom, which is when students have to ask 3 classmates for\nhelp before they can ask the teacher that same question. This reduces the\nnumber of students that you have to answer individually and promotes peer\nlearning.\n- Take pride in their programs. Show it off, put it to work, post\nit online. This is a big accomplishment for you and your students that should\nbe celebrated.\n- Your students may not need you in the way you think they\nneed you. You don't need to be the expert. Ask probing questions to a student\n(even if you don't know the answer to the questions). Or ask the class if\nanyone has the answer. Or say \"I don't know; let's figure this out together\"\n-\nAsk probing questions to help a student instead of taking their mouse away\nto solve the puzzle for them. Students will be more engaged if they have to\nmove the mouse themselves. Also, make it a classroom rule that if a student\nis helping another student at a computer, they can't take the mouse from\nthem either. \n- Understanding how to get the help you need is an important\npart of becoming a successful facilitator of a computer science classroom.\nThere are a variety of ways to get questions answered: online groups, the\nperson sitting next to you, email to a mentor or peer, Code.org community\nforums, or other computer science educators in your district.\n\nIt's possible\nthat you might find something that's broken, unusable, or missing on our\nwebsite, which in the computer science world is called a \"bug\". Take a screenshot\nof what happened, and describe the problem in an email to support@code.org.\nAlso include what operating system and browser version you're using (example:\nWindows 7, Internet explorer 9). We really appreciate teachers and users sending\nus bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow\nthat you know more about our curriculum, what practices do you want to use\nto promote a healthy atmosphere in your computer science classroom?'\n"
      PDK5 Course Descriptions_markdown_instruction: "The courses use a spiraling\ncurriculum design, in which concepts and skills are revisited in each course\nwhile delving deeper each time.\n\nEach course experience is a blend of online\nactivities and \"unplugged\" activities, which are lessons where students\nlearn computing concepts without a computer. The online experiences are composed\nof self-guided and self-paced tutorials, which use scaffolded sets of programming\ninstructions to explore and practice algorithmic thinking. The unplugged lessons\ntake a hands-on, often kinesthetic approach, making use of physical manipulatives\nto model computational concepts.\n\nEach course consists of about 18 to 20\nlessons, each lasting between 25 and 45 minutes. They can be taught at a comfortable\npace whether in consecutive days as a sub-unit or one day a week for 18 weeks.\nThe content of each course builds conceptually on the previous course, so\nthat a student can progress through all three experiences learning new concepts\nalong the way.\n\nCode.org's K-5 curriculum aligns to CSTA Computer Science\nStandards and ISTE standards, while some lessons also integrate national Math,\nEnglish Language Arts, and Science standards.\n\nAcross the entire K-5 curriculum,\nthe use of *Computer Science Themes* scaffolds the development of ideas and\nrecognizes the continual construction of knowledge:\n\n- Algorithms\n- Data\n-\nAbstraction\n- Computing Practice and Programming (Use of computational tools)\n-\nComputers and Communication Devices (Elements of computing devices and networks)\n-\nCommunity, Global, and Ethical Impacts\n\nAcross the entire K-5 curriculum,\nstudents will develop the skills of a computer scientist through the development\nof *Computational Thinking Practices*:\n\n- Creativity\n- Collaboration\n-\nCommunication\n- Persistence\n- Problem Solving\n\n### Concepts Learned in\neach Course\n\nBy the end of **Course 1**, students will learn the following\ncomputer science concepts:\n\n- Sequence\n- Loops\n- Events\n- Debugging\n-\nInternet safety\n\nBy the end of **Course 2**, students will learn the following\ncomputer science concepts:\n\n- Sequence\n- Loops and nested loops\n- Conditionals\n-\nIntroductory binary\n- Events\n- Debugging\n- Internet safety\n\nBy the end\nof **Course 3**, *which has a pre-requisite of Course 2*, students will learn\nthe following computer science concepts:\n\n- Steps of computational thinking\n-\nUsing and creating functions\n- Nested conditionals\n- While loops\n- Crowdsourcing\n-\nMethods of Internet data transmission\n- Digital Citizenship\n\n#### Which\ncourse is appropriate for the students you'll be working with?\n"
      PDK5 Difficulty_markdown_instruction: "Was programming as hard as you expected?\nExplain why or why not. How does this impact your teaching of computer science?"
      PDK5 Foundation_markdown_instruction: "Do you see computer science as a foundational\nskill for your students? Why or why not?"
      PDK5 Goals_markdown_instruction: "What are your goals or intentions for integrating\nCode.org in your classroom?\n"
      PDK5 Impact 1_markdown_instruction: "Do you think your students will find the\nonline activities in the K-5 courses fun and engaging? Why or Why not?"
      PDK5 Impact 2_markdown_instruction: "Does computer science connect to other\ntopics or subjects your students are learning about? Explain why or why not."
      PDK5 Impact 3_markdown_instruction: "Does learning about computer science help\nstudents grow into the kind of citizens you are preparing them to be? Explain\nwhy or why not."
      PDK5 Loops 2_markdown_instruction: "In the last puzzle, you used a loop to\nget the bird to the pig with 2 blocks instead of using 5 \"move forward\"\nblocks. Why do you think it's important to write computer programs efficiently?\n"
      PDK5 Problem Solving_markdown_instruction: "<div style=\"width:800px;\">\nCreating\na positive classroom culture before you start writing programs with your class\ngoes a long way. Discuss with your students the strategies they should try,\neither individually or with a partner, to help get themselves unstuck while\ntrying to solve a puzzle or write a program. Having common vocabulary as a\nclass can be very helpful, so that when a student asks you for help, you can\nask them what parts of the puzzle-solving process they have executed. Here\nare the 4 main steps:\n<ul>\n<li>Understand the puzzle</li>\n<li>Create a\nplan</li>\n<li>Perform and perfect the plan</li>\n<li>Check your work</li>\n</ul>\n<br/>\n<a\nhref=\"http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.pdf\" target=\"_new\">This\nworksheet</a> is available in the Teacher Dashboard in the \"Lesson Plans\nand Resources\" tile. \n<br/>\n<br/>\n</div>\n![image](//code.org/images/puzzlesolving.png)\n\n</br>\n\n###\nHow could you integrate this in your classroom? \n\n"
      PDK5 Promo Video 2_markdown_instruction: "<iframe width=\"640\" height=\"390\"\nsrc=\"https://youtubeeducation.com/embed/rNIM1fzJ8u0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br>\n\n**[Can't\nsee the video? Click here.](https://www.dropbox.com/s/q85v0y83rws4yd1/k5-affiliate-video-09032014.mp4?dl=0)**\n\n<br>\n\n\n####\nWhat are your first impressions of Code Studio?\n"
      PDK5 Promo Video_markdown_instruction: "<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/rNIM1fzJ8u0\" frameborder=\"0\" allowfullscreen></iframe>\n\n###\nWhat are your first impressions of Code Studio?\n"
      PDK5 Strategies O_markdown_instruction: "Is teaching _computer science_ different\nthan teaching other subjects like math or reading? Read this list of strategies\nand comment below on some of the differences you think you'll encounter when\nteaching computer science versus other subjects.\n\n[This worksheet](http://code.org/curriculum/docs/k-5/ClassroomStrategies.pdf)\nis also available in the Teacher Dashboard in the \"Lesson Plans and Resources\"\ntile. \n\n![image](//code.org/images/strategiesforteachingcs.png)\n\n</br>\n\n\n\n"
      PDK5 Test5_markdown_instruction: "## What did you think about things?\n\nWhat\nare your thoughts?\n"
      PS - test - pixelation_markdown_instruction: "# Do This\\r\n\\r\nComplete the\n\"X\" shape by typing 0s and 1s. You can always click \"Readable Format\"\nif you want to clean up your work."
      PS FR test 7-25_markdown_instruction: "Here is *some* **markdown**"
      PS Log test - Define and use turnAround_markdown_instruction: "# Do This:\\r\n**Define**\na function called `turnAround` which turns the turtle around. Once you've\ndefined the function **call** it to make sure it works as you expect and then\nmove the turtle forward, as shown below. \\r\n\\r\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)"
      PS copy - CSD U3 Variables Predict Where XY Embed_markdown_instruction: "#\nPredict\\r\n\\r\nIn which corner of the screen will the circle be drawn?\\r\n\\r\n_Hint:\nClick the \"Show grid\" box to help you find the exact coordinates on the\nscreen._ [Show me where](#triggercallout=code_triggered)"
      PS copy - CSD U3 Variables change circle size_markdown_instruction: "\\r\n\\r\n#\nDebug: Using Variables\\r\n\\r\nThis program uses the variable `circleSize`\nto control the width and height of a circle.  If you make the circle big enough,\nit will fill up the entire screen, as in the picture on the right.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the value assigned to `circleSize` so that the circle\ntakes up the entire screen."
      PS copy 2-3 Bee Conditionals 5_markdown_instruction: "These magic purple flowers\nchange!\\r\n\\r\nEach time you try the puzzle, purple flowers can have either\n1 nectar or none at all...but you won't know the number until you run the\ncode! \\r\n\\r\nBe careful not to collect nectar from a purple flower if it\ndoesn't have any. \\r\nYou must first check if the nectar is equal to 1 using\nthe `if nectar` block."
      PS fr prediction q1_markdown_instruction: "What do *you* think will happen?\n"
      Peer Review Level 1 - Tuesday Report_markdown_instruction: "Vacations are really\nfun. Please document a short and amusing story about a recent vacation.\\r\n\\r\nSome\nguidelines\\r\n\\r\n* Pics or it didn't happen\\r\n* Keep it to 4 sentences\nor less please\\r\n* Puns are strictly prohibited"
      Peer Review Level 2 - Wednesday Report_markdown_instruction: "Cats are the\nbest. Dogs are pretty cool as well. What do you like more, and why?\\r\n\\r\nSome\nguidelines\\r\n\\r\n* Cats are awesome\\r\n* Cats don't give a what\\r\n* Cats\nmake for better GIFs\\r\n* Pictures are great"
      'Peer Review: Personal Website_markdown_instruction': "# Peer Review\\r\n\\r\nToday\nyou are going to have other people look at your website and give feedback\non it.\\r\n\\r\n# Do This\\r\n\\r\n* Leave this open on your screen so your peer\nreviewers can look at your work"
      Pixel Filterator_markdown_instruction: "# Free Play\\r\n\\r\nDo as you will,\nmake something awesome"
      Pixelation - AllTheThings 4_markdown_instruction: "# Pixelation: AllTheThings\n4\\r\nThis pixelation level demonstrates the use of the `hide_encoding_controls`\noption.  Notice that the level displays the image data in hexadecimal and\ndoes not let you change it back to binary.\\r\n            "
      Pixelation - AllTheThings 5_markdown_instruction: "# Pixelation: AllTheThings\n5\\r\nThis pixelation level demonstrates the use of the \"Hide sliders\" option.  Notice\nthat the width and height sliders are not available, and the width and height\nfields are not editable."
      Pixelation - Lesson 14 - Fix bit offset v.2_markdown_instruction: "Something\nhappened to the bits in this image! Find the error and fix it! Hint: a few\nextra bits were added. You should only need to remove some bits."
      Pixelation - Lesson 14 - Fix bit offset_markdown_instruction: "# Oh no! An\nimage got messed up during transmission!\n\n<img src = \"https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43\nPM.png\" align=right width=200 hspace=20>\n\n**The problem:** A single extra\nbit was inserted into the stream of bits that make up the C of the Code.org\nlogo. <br>That extra bit bumps all of the other bits down the line which makes\nthe logo look messed up.\n<br>**Your task:** Hunt down the extra bit and remove\nit to fix the Code.org logo. \n<br>**HINT:** One bit early on would make it\nlook like many bits were out of order. \n"
      Pixelation - Lesson 14 - Fix the error_markdown_instruction: "Something happened\nto the bits in this image!  Find error and fix it!  Hint: a few extra bits\nwere added.  You should only need to remove some bits."
      Pixelation - Lesson 14 - Make the Letter A_markdown_instruction: "<img align=\"right\"\nsrc=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\" hspace=\"20\">\\r\n#\nTask 1: Make a 3x5 letter 'A'\\r\nStart by trying to recreate the 3x5 letter\n\"A\" depicted (at right) using the pixelation widget. \\r\n\\r\nThe image is\ninitially setup with the *incorrect* dimensions. Your first task is to set\nthe second byte to the 8-bit binary code for 5: 0000 0101. Then you can start\nentering pixel data to make the A."
      Pixelation - Lesson 14 - Make your own B and W Image_markdown_instruction: "#\nMake your own image of any size\\r\n\\r\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r\n\\r\n\\r\n**Directions:**\\r\n\\r\n*\nEncode an image of anything you like.\\r\n* You might want to do some planning\nand sketching with graph paper first.\\r\n* DO NOT simply make an abstract\npattern, like a checkerboard. \\r\n* Depict something, perhaps your name written\nout, your initials, an icon or logo of some sort.\\r\n* Get creative! The image\ndoesn't have to be a perfect square, it can be long and skinny.\\r\n* Optional:\nfor fun, send your image bits to a friend using the <a href =\"https://studio.code.org/s/cspunit1/stage/11/puzzle/2\"\ntarget=\"_blank\">sending bits widget.</a> *(note: this is just a link to\nthe sending formatted text level from a couple of classes ago)*\\r\n\\r\n\\r\n"
      Pixelation - Lesson 15 - Color Free Play_markdown_instruction: "# Personal\nFavicon\n**Requirements:**\n<img src = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\"\nalign=right hspace=20>\n\n* The icon must be 16x16 pixels. \n* You must use\nthe Pixelation Widget to encode the bits of color information.\n* The image\nmust be encoded with at least 12 bits per pixel.\n\n"
      Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction: "# Pixelation:\nTask 3\\r\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right\nwidth=200 hspace=20>\\r\n**Directions:**\\r\nWe start you out with the 4x4 image\nMaddie created in the video.\\r\n\\r\nYour task is to fill a 4x4 grid with colors\nusing *12-bits per pixel*. The result should look something like (but not\nexactly) the image shown at right.  \\r\n\\r\nHere are the requirements:\\r\n\\r\n\n* Row 1 - fill with shades of red. \\r\n * Row 2 - shades of green. \\r\n *\nRow 3 - shades of blue. \\r\n * Row 4 - shades of gray.\\r\n"
      Pixelation - Lesson 15 - Color Shades_markdown_instruction: "# Color Pixelation:\nTask 2\n**Directions:**\n<img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png'\nstyle=\"width: 150px;\" align=right>We start you out with the row of shades\nof red that Maddie created in the video. Experiment with 6-bit color by filling\nin the bottom row of the image with shades of a different color.  Here is\nan example with some shades of blue.  Try your own color!"
      Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction: "# Color\nPixelation: Task 1\\r\n**Directions:**\\r\n\\r\n* We start you with the 4x2 image\nMaddie was creating, but we've left out the last two squares. \\r\n* Finish\noff the image by figuring out which two colors are missing and encode them.\\r\n"
      Pixelation 2_markdown_instruction: "Something happened to the bits in this\nimage!  Find error and fix it!"
      Pixelation 4x4 Empty_markdown_instruction: "The width and height are now encoded\nin the pixel data. Can you figure out how to adjust the dimensions?"
      Pixelation Bee_markdown_instruction: "# Example of 12 bits per pixel\n* This\nlarger image of a bee encodes color with 12 bits per pixel, but viewing in\nhex makes it easier to see the color of each pixel.\n* If you switch to binary\nmode - hold on to your hat - it's a lot of bits.\n* Here's another mind-blowing\nthing to try: slide the bits per pixel up to 24 bits per pixel. What happens?\nCan you explain this behavior?"
      Pixelation Flappy_markdown_instruction: "# Example of more bits per pixel\nHere\nis a bigger image at 9 bits per pixel. With 9 bits per pixel you can express\n512 different colors. Click through to see the next image which is even more\nsophisticated, but easier to understand."
      Pizza on a Plate_markdown_instruction: "**Project Idea:** Create a picture\nof something familiar from the real world. This requires persistence and planning!"
      Play Lab Rocket 2_markdown_instruction: "We've started the Design Recipe for\n`rocket-height` using the contract and examples you just wrote. Complete the\nfunction definition for `rocket-height` and run your animation."
      Play Lab Rocket 3_markdown_instruction: "Awesome, now can you update that function\nso that our rocket moves more quickly? Make sure to update the purpose statement,\nexamples, and function definition to launch a rocket at 40 meters per second."
      Play Lab Rocket Free Play_markdown_instruction: "Free Play: Experiment with\nyour `rocket-height` function to make the rocket fly in different ways. Click\n\"Finish\" when you are done."
      Poorva copy U3L2 Using Simple Commands_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      Poorva-test_markdown_instruction: "# Header 1\\r\n## Header 2\\r\n### Header\n3\\r\n#### Header 4\\r\n##### Header 5\\r\n\\r\nThis is regular text, **bolded\ntext** and *italicized text*. "
      Practice Create Performance Task_markdown_instruction: "# Practice Create Performance\nTask\\r\n\\r\nYou've finally made it to the end of the Building Apps Unit!\nWe will continue some programming in the next unit, but for now we are going\nto use all the new concepts you have learn to create something of your own\ndesign! \\r\n\\r\n# Do This:\\r\n\\r\n* **Read the Project Overview** to understand\nthe entire project.\\r\n* **Follow the Project Planning Guide**.\\r\n* **Implement\nyour final program in this level**."
      Predict Loop I_markdown_instruction: "# Predict\\r\n\\r\nWhat will print as a\nresult of this loop?"
      Predict Loop I_2018_markdown_instruction: "# Predict\\r\n\\r\nWhat will print\nas a result of this loop?"
      Project - Final Image Scroller_markdown_instruction: "# Final Image Scroller\\r\n\\r\nYou're\nnow ready to add key event functionality to your app! As you are doing so,\nkeep an eye out for places where you need to **refactor** old code in order\nto prevent redundancy. **Create functions** that carry out repeated tasks\nand make other changes to keep your code **readable and consistent**. \\r\n\\r\nIf\nyou want a reminder of how key events work, you can always go back to the\nexample from earlier in this lesson.  You will need to add `if` statements\nto check for which keys were pressed, just as before.\\r\n\\r\n# Do This:\\r\n\\r\n*\nAdd the ability to respond to **key events** to your app.\\r\n\\r\n* **Refactor\nyour old code** to remove redundant portions.\\r\n\\r\n* Keeping adding to your\nprogram. What other features do you want to include?"
      Project - Finish your canvas app_markdown_instruction: "# Create Your Own Effect!\\r\n\\r\nYou've\njust seen several ways that we can process our array `eventList` in order\nto create different effects. Now it's time to make your own! **Extend the\nfunctionality of one of the effects you just created, or create an entirely\nnew one**. What else could you do with the information you've stored in your\narray? How else might you combine the programming tools you've developed?\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Extend the functionality of one of the effects, or create\nan entirely new one of your own!**"
      Project - Make Your Own Clicker Game_markdown_instruction: "# Make Your Own\n\"Clicker\" Game\\r\nYou will be creating your own “clicker” game similar to\nthe Apple Grabber game you worked on in this lesson. \\r\nThe general object\nof the game is to click on an element that jumps around every time you click\nit. You will pick your own theme and decide what the rules are and how to\nkeep score.\\r\n\\r\n** Your Main Tasks Are To:**\\r\n\\r\n * Pick a theme for\nyour game and add appropriate images and styling.\\r\n * Add variables to track\nsome data during gameplay.\\r\n * Add code to event handlers to update the\nvariables and display appropriately.\\r\n \\r\n**See Activity Guide for Requirements**\\r\n\\r\nThere\nis a full activity guide and rubric for this project.  You can find a link\nto it in the student resources section for this lesson. Or ask your teacher\nfor it.\\r\n \\r\n<img src=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\"\nstyle=\"float: right; width: 300px\">\\r\n** Template **\\r\n\\r\nThis level\nis a template for the app. You should **run it to see what it does** right\nnow. You will modify *this* template, both the design elements and the code,\nfor your project.\\r\n\\r\nThe template has 4 screens and some basic navigation\nfunctionality and event handlers set up for you.  The game play screen uses\nthe images from the Apple Grabber game, but you should replace these with\nimages related to your chosen theme.\\r\n\\r\n"
      Project - Your Own Multi Screen App_markdown_instruction: "# Multi Screen App\\r\nYou\nwill be creating your own multi-screen app to practice designing user interfaces\nand writing event-driven programs. \\r\n\\r\n**Look at the Project Guide and\nPlanning Sheets before programming**.\\r\n\\r\n# NOTE: Bigger toolbox\\r\n\\r\n*\nYou may notice that we've included all of the commands you know so far in\nthe coding toolbox **plus a few more**\\r\n* Remember you can hover over a\ncommand to see documentation for it.\\r\n* You can also just try it out to\nsee what it does.\\r\n\\r\n# Requirements Reminder\\r\n* Your app must have a\npurpose\\r\n* Your app will have at least **4 screens**.\\r\n* Your app should\ninclude **text, images, buttons, and sound**.\\r\n* There should be **no “getting\nstuck” on any screen.**  It should always be possible to navigate from a screen\nin your app to some other screen. \\r\n* Your program code should follow **good\nstyle**.\\r\n* Your user interface should be **intuitive to use**."
      'Project: Finish Color Sleuth_markdown_instruction': "# Challenge - Pick a\nway for the game to end and implement it\\r\n\\r\nYour challenge now is to add\nsome code completely on your own.  Use what you've learned so far, and Alexis\nand Michael's discussion to help you.\\r\n\\r\n**This is the last programming\nlevel**\\r\n\\r\n* Make all changes and additions to the program that you want\nhere\\r\n* When you're done hit **Submit**\\r\n\\r\n**Goal:** Add code that\nprovides a way for the game to end which:\\r\n* Switches to the `gameOver_screen`\\r\n*\nShows which player won the game by showing `player1Win_label` or `player2Win_label`\\r\n\\r\n*We've\nprovided `gameOver_screen` as part of the template for this project -- Switch\nto Design Mode to take a look at what's there*\\r\n\\r\n**Suggestions**\\r\n*\nIf you're stuck for ideas, try to implement the end game condition of \"first\nto 10\" - first player to reach a score of 10 wins.\\r\n* You should use the\nsuggestion from the discussion to add a function like `checkGameOver()` and\ncall it from `checkCorrect`\\r\n\\r\n<details><summary><strong>Above and Beyond:\noptional extra options for your project [Click to expand]</strong></summary>\\r\n\\r\n<p>\\r\nHere\nare a bunch of ways you can add to or extend the project:\\r\n\\r\n</p>\\r\n<ul>\\r\n\\r\n\\r\n<li>Add\n\"start over\" button on the last screen, which should reset everything, and\ngo back to the game play screen\\r\n</li>\\r\n<li>Add a welcome screen that\nexplains the rules and invites the player to start the game (make it the default\nscreen)\\r\n</li>\\r\n<li>Make the game more difficult:</li>\\r\n<uL>\\r\n<li>Make\nthe colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\\r\n    <li>Or\nmake the difficulty variable - you can generate a random number between 5\nand 20 and add that to the RGB values. </li>\\r\n    <li>Or make it get progressively\nmore difficult - use a variable to keep track of how much to add to each RGB\nvalue and decrease it over time.</li>\\r\n\\t<li>Or on a welcome screen ask\nif the player wants to play easy, medium, or hard.</li>\\r\n</uL>\\r\n\\r\n<li>Add\na timing element - lookup the documentation for setTimeout which calls a function\nafter a certain amount of time. (Note: you may need to remix the project in\nas a free-play App Lab project to do this).\\r\n</li>\\r\n<li>You can also use\n<code>getTime()</code> at the beginning and end of your code to figure out\nhow long it took for the game to end, which you could use to adjust the score.</li>\\r\n</ul>\\r\n</details>\\r\n"
      'Raw Data Podcast: Data Confidential_markdown_instruction': "## Raw Data Podcast:\nData Confidential <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\\r\n\\r\nRaw\nData is a podcast from the Stanford Cyber Initiative that explores the uses\nand impact of data. This episode explores some of the practical implications\nand needs for having access to secure communication online. \\r\n\\r\nCheck\nout the Episode via the link below: "
      'Raw Data Podcast: Gold or Pyrite_markdown_instruction': "## Raw Data Podcast:\nGold or Pyrite <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\\r\n\\r\nRaw\nData is a podcast from the Stanford Cyber Initiative that explores the uses\nand impact of data. This episode explores some of the ways companies can use\nthe data they collect about us, and guests explore how our future might look.\\r\n\\r\nCheck\nout the Episode via the link below: "
      'Reflection: Create your Own Number System_markdown_instruction': "# Create\na Number System\\r\n\\r\n## Do the Activity\\r\n\\r\nOne of the best ways to prepare\nto teach a lesson is by actually doing the activity yourself.  As you complete\nthe activity, consider the misconceptions that your students may have and\nwhat sorts of questions you can ask to help them overcome these barriers.  \\r\nNotes:\\r\n<ol>\\r\n<li>There\nare many 'correct' answers to this activity. The important part is that\nrules are applied consistently. </li>\\r\n<li> The difficult part of this task\nis not to find all of the shapes, but to create an ordering that does not\never repeat a pattern and articulating that ordering as a set of rules or\na protocol. </li></ol>\\r\n\\r\n<a href= \"http://docs.google.com/document/d/1vFg7GG-kFJGw9MgxQ5g3yW7R5rE6f3udVK3C9Hj9P6E/edit\"\ntarget=_blank> Click here to Access Number Systems Activity</a>\\r\n\\r\n<hr>\\r\n###\n<a href= \"http://forum.code.org/c/csp1/lesson04\" target=_blank> Head to\nthe Forum >></a>\\r\n<hr>\\r\n\\r\n\\r\n## Share Your Protocol and Ideas\\r\nHead\nto the forum and share your ideas about this activity. Specifically, share:\n\\r\n\\r\n- The pattern and rules for your number system\\r\n- Misconceptions\nthat your students may have and what sorts of questions you can ask to help\nthem overcome these barriers.  \\r\n\\r\n##  Submit the Link for your Forum\nPost for Review\\r\n\\r\nOnce you’ve posted in the forum, share a link here.\nIn order to get a direct link to your post, click the link icon directly under\nyour post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\\r\n\\r\n\\r\n\\r\n"
      Repeat Predict Contained_markdown_instruction: "# Predict\\r\n\\r\nHow many times\nwill the for loop below run?"
      Revisiting the Counter Pattern_markdown_instruction: "Today you’re going to\nlearn how to use and create **functions**.\\r\n\\r\nCreating a function lets\nyou make your own blocks! There are two parts to a function: \\r\n\\r\nMaking\na newly named block that has all of the code you want to run inside of it.\n\\r\n-xml of function definition- \\r\n\\r\nThe single green block itself that\nyou use, or call, to run the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare\nto get familiar with functions, learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018_markdown_instruction: "Today you’re going\nto learn how to use and create **functions**.\\r\n\\r\nCreating a function lets\nyou make your own blocks! There are two parts to a function: \\r\n\\r\nMaking\na newly named block that has all of the code you want to run inside of it.\n\\r\n-xml of function definition- \\r\n\\r\nThe single green block itself that\nyou use, or call, to run the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare\nto get familiar with functions, learn how to edit them, and create your own!"
      Robot Doodle_markdown_instruction: "**Project Idea:** Create a picture of something\nfamiliar from the real world. This requires persistence and planning!"
      Robot Doodle_2018_markdown_instruction: "**Project Idea:** Create a picture\nof something familiar from the real world. This requires persistence and planning!"
      Robot Drawing_markdown_instruction: "**Project Idea:** Create a picture of\nsomething familiar from the real world. This requires persistence and planning!"
      Robot_markdown_instruction: "**Project Idea:** Create a picture of something\nfamiliar from the real world. This requires persistence and planning!"
      Rocket Height Course A_markdown_instruction: "Follow the Design Recipe to create\na function `rocket-height` which produces the height of a rocket traveling\nat 15 meters per second."
      Room Escape Workshop - 1_markdown_instruction: "# Setting Up Rooms\\r\n\\r\n<img\nsrc=\"https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44\nAM.png\" style=\"width:200px; float:right\">\\r\n\\r\nIn order to make your\nroom escape you will need to set up the room the user will be able to adventure\naround in. Some of the work has already been done for you.  You just need\nto decide what the different parts of the room will look like by picking pictures!\\r\n\\r\n#\nDo This\\r\n\\r\n* The level starts in Design Mode\\r\n* For each image element\nthat is blank (gray rectangle) add an appropriate image. For example you will\nneed a door image for the image element labeled door.\\r\n* An example of what\nthe room might look like are on the right."
      Room Escape Workshop - 10 - 2_markdown_instruction: "# Door Open\\r\n\\r\n<img\nsrc=\"https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58\nPM.png\" style=\"width:200px;float:right\">\\r\n\\r\nOpen the door if they have\nthe key!\\r\n\\r\n# Do This\\r\n\\r\n* Add an `onEvent` block for clicking on\nthe door\\r\n* Add an `if` statement inside the `onEvent` to check if the key\nposition has moved to the bottom of the screen\\r\n\\t* Add an if statement\\r\n    *\nIn the if statement add the `==`\\r\n    * On one side of the `==` put the\nx position you move the key to when it is clicked\\r\n    * On the other side\nadd the `getXPosition()` block - The ID for that should be the ID of your\nkey!\\r\n* Inside the `if` statement use `showElement` to show the hidden outdoors\nimage if they got the key"
      Room Escape Workshop - 10_markdown_instruction: "# Door Open\\r\n\\r\n<img src=\"https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36\nPM.png\" style=\"width:200px;float:right\">\\r\n\\r\nGetting close! Lets set\nup the door to get ready for opening it.\\r\n\\r\n# Do This\\r\n\\r\n* Add image\nfor the outdoors\\r\n* Give it a good ID (maybe *outside*)\\r\n* Hide the image\nfor the outdoors (It will be shown when door opens)"
      Room Escape Workshop - 11_markdown_instruction: "# Got Key\\r\n\\r\nIn order\nto make sure the user got the key before trying to open the door we will need\na variable to keep track of if they got the key.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a variable at the top of the program called gotKey and set the right side\nof the gotKey variable to the word false\\r\n<img src=\"https://images.code.org/58e88b028ee9190b0288c7fcbabe389f-image-1490371419468.02.50\nPM.png\" style=\"width:300px\">\\r\n\\r\n* Inside the `onEvent` command for\nthe key in the safe set gotKey to true to indicate they got the key.\\r\n\\r\n<img\nsrc=\"https://images.code.org/def02108cabc85383129c5bb29b3af4f-image-1490371463514.04.10\nPM.png\" style=\"width:400px\">\\r\n\\r\n* You will use this to set up the door\non the next level"
      Room Escape Workshop - 2_markdown_instruction: "# Connecting Rooms\\r\n\\r\nLets\nmake it so the user can go between the rooms. There is an arrow button in\neach room which will be used to move between rooms. To make buttons react\nto your click you will need an event handler for each button.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Add an `onEvent` block for each of the arrow buttons\\r\n* Inside\neach `onEvent` block use the `setScreen` command to say which screen to switch\nto"
      Room Escape Workshop - 3-2_markdown_instruction: "# Move Picture\\r\n\\r\nNow\nmake it so the user can find the secret code by clicking the picture. When\nthey click the picture it should move up and out of the way.\\r\n\\r\n# Do This\\r\n\\r\n*\nPull out an `onEvent` block\\r\n* Change the id spot in the `onEvent` block\nto picture (which is the ID of the picture element)\\r\n* Inside the `onEvent`\nblock add the `setPosition` block with the following inputs\\r\n\\t* ID: picture\\r\n    *\nThe next two inputs are x and y values - test out some numbers to try to get\nthe picture to move like in the pictures on the right"
      Room Escape Workshop - 3_markdown_instruction: "# Hide the Code\\r\n\\r\n<img\nsrc=\"https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png\"\nstyle=\"width:400px;float:right\">\\r\n\\r\n1. In Design Mode Click on the white\nsquare where it says \"CODE\". Change it to show a secret code of your choice\\r\n2.\nDrag the picture down to cover the secret code\\r\n\\r\n![]()"
      Room Escape Workshop - 4_markdown_instruction: "# Setting Up the Safe\\r\n\\r\nYou\nhave generated a secret code and made it so users can navigate to the second\nroom. Lets give the user the ability to enter the secret code when they click\non the safe\\r\n\\r\n# Do This\\r\n\\r\n* Add an `onEvent` block\\r\n\\t* Pick the\nID for the safe\\r\n* Inside the `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36\nAM.png\" style=\"width:300px\"> block\\r\n\\t* On the left side change the *x*\n(the name of the variable) to be *guess* \\r\n    * On the right side change\n*\"Enter a value\"* (the prompt to ask the user) to *\"Enter the code\"*"
      Room Escape Workshop - 5_markdown_instruction: "# Checking the Secret Code\\r\n\\r\nNow\nthat you have collected a guess of the secret code from the user you will\nneed to check if it is correct! We can do this using an `if` statement. An\nif statement checks if a condition is true, in this case it will check if\nthe number the user entered is equal to the secret code\\r\n\\r\n# Do This\\r\n\\r\n*\nInside the `onEvent` block for the safe below the prompt command add an <img\nsrc=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01\nAM.png\" style=\"width:100px\"> statement \\r\n* Create the condition by pulling\nout the <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\nAM.png\" style=\"width:100px\"> block which will check if two things are equal\\r\n*\nOn one side of <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\nAM.png\" style=\"width:100px\"> put *guess* (the name of the value we used\nto store the users guess)\\r\n* On the other side put the value for your secret\ncode"
      Room Escape Workshop - 6_markdown_instruction: "# Random Code\\r\n\\r\n<img src=\"https://images.code.org/dfa3a28d30b7a1d2879e3fc95b8f42dc-image-1489603534640.44.51\nPM.png\" style=\"width:200px;float:right\">\\r\n\\r\nOur secret room has a safe\nwith a combination lock. That combination will be hidden behind a picture\nwhere it says \"CODE\" right now in Room 1. To make this more fun we will\ngenerate a random 4 digit number to be the code.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a variable that will hold the secret code.\\r\n\\t* Drag out the variable\nblock\\r\n    * In the space next to var pick a name for your variable such\nas safeCode\\r\n* On the right side of the variable set your secret code to\nbe a random number\\r\n\\t* Add the random number block on the right side of\nthe variable\\r\n    * Random number takes two inputs which set the range of\nnumbers it can randomly generate\\r\n    * You want it to generate numbers\nbetween 1000 and 9999\\r\n* Set the text in the secret code element in room\n1\\r\n\\t* Use the setText block to set the text of the secretCode element"
      Room Escape Workshop - 7_markdown_instruction: "# Showing inside the safe\\r\n\\r\n<img\nsrc=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37\nAM.png\" style=\"width:200px;float:right\">\\r\n\\r\nOnce you have the program\nworking to check the secret code you are going to want to \"open\" the safe\nand show the key inside. First you will need to create these elements in design\nmode.\\r\n\\r\n# Do This\\r\n\\r\n* Go to Design Mode and add a gray square image\\r\n\\t*\nClick and Drag a Image Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\nAM.png\" style=\"width:75px\"> onto the screen\\r\n    * Give it a good ID\n(maybe *insideSafe*)\\r\n    * Find an gray square to use as the picture\\r\n    *\nThis will act as the inside of the safe as it will hide the front of the safe\nwhen shown\\r\n* Add a key image\\r\n\\t* Click and Drag a Image Element <img\nsrc=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\nAM.png\" style=\"width:75px\"> onto the screen\\r\n    * Give it a good ID\n(maybe *key*)\\r\n    * Find an key image to use \\r\n* Click the hidden property\nin Design Mode for the gray square and key. When they are hidden it will look\nsomething like below in Design Mode\\r\n\\r\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55\nPM.png\" style=\"width:200px\">"
      Room Escape Workshop - 8_markdown_instruction: "# Showing inside the safe\\r\n\\r\nNow\nset up the code to show the key and the gray square when the user inputs the\ncorrect code.\\r\n\\r\n# Do This\\r\n\\r\n* Inside the `if` statement you created\nin the `onEvent` command for the safe add:\\r\n    * The `showElement` block\nto show the gray square\\r\n    * The `showElement` block to show the key"
      Room Escape Workshop - 9-2_markdown_instruction: "# Click Key\\r\n\\r\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00\nPM.png\" style=\"width:170px;float:right\">\\r\n\\r\nOnce a user clicks the\nkey you will want to show they are holding it. You can do this by moving the\nkey to the bottom corner of the room. \\r\n\\r\n# Do This\\r\n\\r\n* Add an `onEvent`\nblock for when the user clicks the key. \\r\n* Inside the `onEvent` block:\\r\n\\t*\nUse `setPosition` to move the key to the bottom corner of the screen"
      Room Escape Workshop - 9_markdown_instruction: "# Click Key\\r\n\\r\n<img src=\"https://images.code.org/349cff555af4337118791d84acf1a5b2-image-1490371172781.59.08\nAM.png\" style=\"width:200px;float:right\">\\r\n\\r\nOnce a user clicks the\nkey you will want to show they are holding it. You can do this by adding a\nkey at the bottom corner of the room. \\r\n\\r\n# Do This\\r\n\\r\n* Add a key\nimage at the bottom right corner of the room\\r\n* Set the key to hidden in\nDesign Mode"
      Room Escape Workshop - free play_markdown_instruction: "# You've done it!\\r\n\\r\nYou\nmade a room escape! Now its time to customize it. \\r\n\\r\nConsider:\\r\n\\r\n*\nAdding more rooms\\r\n* Adding more things users can interact with in the rooms\\r\n*\nAdd more style to the rooms"
      Ryan Test Locked Blocks_markdown_instruction: "Here's a function called `patrol`.\nEdit it to move the Cat up 400 pixels and then down 400 pixels."
      Ryan's clone of C4S15P10_markdown_instruction: "We've added one last function\nfor you.\\r\n<hr/>\\r\n\\r\n<h4>\\r\nUse an `if` statement to program your game\nto call the `level_up` function only when `player_score` becomes greater than\na certain number.<br/><br/>\\r\n</h4>\\r\n<i>For example: `player_score` > 6</i>\\r\n\\r\n\\r\n<hr/>\\r\n<i>Play\nthe game, and make it past level 4 to move to the next puzzle.</i>"
      SG Add Subgoals practice_markdown_instruction: "# Now you try adding subgoals!\\r\n\\r\nThis\ntime we have provided you with an empty workspace and new problem. To solve\nit this time you'll **start** by adding subgoals first, *then* adding the\ncode.\\r\n\\r\nThe *benefit* of using subgoals is that you can lay out a solution\nto your problem ahead of time before getting overwhelmed or stuck in the code.  Once\nyou've solved a subgoal, you can move on to the next one.\\r\n\\r\n# Do this\\r\n<img\nsrc=\"https://images.code.org/4bc7896538039f1904699eba35bcd5e3-image-1508447681081.png\"\nstyle=\"float: right\">\\r\n\\r\n**Goal**: make the turtle draw two steps (shown\nat right).\\r\n\\r\nAfter you have understood and thought about the problem\nyou should:\\r\n\\r\n1. **Start by dragging subgoals into the workspace** that\nyou think express a solution to the problem.\\r\n2. **Then** start filling\nit in with turtle blocks\\r\n3. You should **test incrementally** as you go\n- add the commands to complete one goal, run the code, fix if it doesn't\nwork, then add commands to complete the next goal and so on.\\r\n\\r\nWhen you\nthink you're done click `Finish` and move on.\\r\n\\r\n**Stuck?** This animation\nshows a programmer adding goals and then code.\\r\n\\r\n![expandable](https://images.code.org/1805d750cb4e653ebf505f4a8a2c7840-image-1508447936880.gif)"
      SG U3L01 Assessment1_markdown_instruction: "Consider the algorithm you designed\nfor today’s activity. Identify two instances where there may be multiple ways\nto interpret your instructions and suggest improvements that could be made\nto improve their clarity.\\r\n"
      SG U3L01 Assessment3_markdown_instruction: "Describe the features of a programming\nlanguage that make it different from the language you typically use in everyday\nlife. Explain why a programming language must be created in this way.\\r\n"
      SG U3L02 Assessment_markdown_instruction: "This lesson introduced the notion\nof \"efficiency\" in programming, and that it might mean different things\nat different times.  Think of an example *outside* of computer science in\nwhich you have heard the term “efficiency” and compare it to the ways we talked\nabout efficiency in programming.  \\r\n\\r\nIn what ways is the meaning of \"efficiency\"\nthe same? In what ways is it different?"
      SG U3L02 Free Response Getting Started_markdown_instruction: "In this lesson\nwe solved a series of problems with a limited set of commands (only 2). Give\nat least one reason why it's useful to learn how to solve and program solutions\nwith a limited set of commands.\\r\n\\r\nIn this lesson we solved a series of\nproblems using the `Move turtle` and `Orient turtle` subgoals. Give at least\none reason that breaking problems down into subgoals is a good approach to\nsolving problems."
      SG U3L02 Free Response Wrap Up_markdown_instruction: "Summarize your experiences\nwith this first App Lab lesson by answering the following questions:\\r\n\\r\n\\r\n*\nWere you able to be creative with such a limited set of tools?\\r\n* What was\nmost frustrating about this activity? If you could add one additional block,\nwhat would it be and why? What subgoal would that block achieve?"
      SG U3L03 - draw rect function_markdown_instruction: "This is your code from\nthe previous level.  Did you know that you can write functions that call your\nother functions?\\r\n\\r\nTake the code that draws the rectangle and move it\ninto a new function called `drawRectangle()`. The first line of your program\nshould be a single call to `drawRectangle()`. The rest of the code should\njust be function definitions, including your definition for **right**.\\r\n\\r\nYou'll\nonly need one subgoal for this, `//Define function`.\\r\n\\r\nNOTE: your program\nwill still do the same thing.  We are just changing the way it is written\nto demonstrate that you can use functions you've already written as building\nblocks in new functions.\\r\n\\r\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)"
      SG U3L03 - draw step_markdown_instruction: "We are going to walk you through\na process that shows you the benefit of thinking about programming tasks in\nterms of writing functions.\\r\n\\r\n* Over the next 3 levels we are going to\nwrite a program that draws the figure shown at right which sort of looks like\na jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\"\nalign='right'>\\r\n\\r\n* If you look at this image you might recognize elements\nthat repeat: this is a 4-sided figure, and each side is made up of some zig-zag\nsteps.\\r\n\\r\n* We're going to break the programming down into useable parts\nand then use those parts as building blocks to make this more complex drawing.\\r\n\\r\n*\nFirst let's **define** a function that *draws just one of these zig-zag steps.*  We've\nstarted you out with a definition of `right()` that you can use...\\r\n\\r\n#\nDo This:\\r\n\\r\n**Define** and call a function named `drawStep()` which makes\nthe turtle move forward and left as shown. \\r\n\\r\n**Note**: at the end the\nturtle should be facing the same direction it started.\\r\n\\r\n\\r\nYou'll\nuse four subgoals for this. First, you'll **define a function** (`//Define\nfunction`), which will include **moving the turtle** (`//Move turtle`) and\n**orienting the turtle** (`//Orient turtle`). Last, don't forget to **call\nthe function** (`//Call function`). If you get stuck, plan your solution with\nsubgoals.\\r\n\\r\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)"
      SG U3L03 Define and use turnAround_markdown_instruction: "# Do This:\\r\n**Define**\na function called `turnAround()` which turns the turtle around. Once you've\ndefined the function **call** it to make sure it works as you expect and then\nmove the turtle forward, as shown below. \\r\n\\r\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\\r\n\\r\n**Remember**\ntypically, you call a function in lines of code *above* the function definition\n- this might make you  feel like you are working in reverse, since you first\nwrite the code to define the function and *then* add a line to call it.  Here\nis the `moveTwice` example from the video. You should do something similar\nfor turnAround:\\r\n\\r\n![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)\\r\n\\r\nYou'll\nuse four subgoals to solve this problem (sort of). First you'll `//Define\nfunction`, which will include `//Orient turtle`. As you will start to see,\neven subgoals can be broken down into subgoals sometimes. This will be helpful\nwhen you start creating more complex functions. \\r\n\\r\nThen you'll `//Call\nfunction` and `//Move turtle`.\\r\n\\r\nDon't forget to name your functions."
      SG U3L03 Draw a T using turnAround_markdown_instruction: "# Do This:\\r\nGet\nsome more practice **calling** a function by using `turnAround()` along with\nyour old friend the `moveForward()` function to create a plus sign that is\ncentered at the turtle's first position, as shown below. Even though you\njust wrote this function, we've already **defined** `turnAround()` for you.\n\\r\n\\r\nRemember, add lines of code that call the function *above* the definition.\nThe function definition is after the function call to support **abstraction**.\nIf you don't need to know how the function works inside, you never have to\nlook at it, you can just call it.\\r\n\\r\n*NOTE: the turtle should end where\nit started, which is also the middle of the plus sign, as shown below. Each\nof the four segments of the plus sign are one `moveForward()` long.* \\r\n\\r\n![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14\nAM.png)\\r\n\\r\n\\r\nYou'll use three subgoals for this problem: `//call function`,\n`//orient turtle`, and `//move turtle`. Defining the function is already done\nfor you. We've put subgoals for the first few steps in already. Plan the\nrest of the code with subgoal blocks (in the **Goals** tab) to get the most\nefficient path before filling it in with blocks."
      SG U3L03 Free Response Wrap Up_markdown_instruction: "In your own words, explain\nat least one reason why programming languages have functions.  Include an\nexample of something you did in this lesson that demonstrates the reason you\ndescribe.\\r\n"
      SG U3L03 Three Steps_markdown_instruction: "# Do This:\\r\n<img src=\"https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png\"\nalign=right width=200>\\r\nWe are going to continue to build up towards a diamond\nby **defining** a function that draws one side of the diamond.\\r\nIf you look\nat the whole image we are trying to draw, you'll notice that each of the\n4 sides is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown\nin orange).\\r\n\\r\nRight now we'll write the code for one of those sides.\nSo...\\r\n\\r\n**Define** a new function named `drawSide()` which makes three\ncalls in a row to `drawStep()` followed by a `moveForward()` and a `right()`.  \\r\n\\r\n**Replace**\nthe original function call to `drawStep()` with a call to your newly defined\n`drawSide()` function. \\r\n\\r\nThe diagrams below show the intended actions.\\r\n<table>\\r\n<tr>\\r\n<td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png)\n</td>\\r\n<td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif)\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\nTo solve this puzzle, you’ll use three subgoals.\nYou’ll **Define the function** (`//Define function`), which will include **calling**\n2 different functions (`//Call function`) and **moving the turtle** (`//Move\nturtle`). Then you'll **call the function** (`//Call function`) that you\ndefined."
      SG U3L03 define turnRight and draw a rectangle_markdown_instruction: "# Draw\na rectangle with right\\r\n\\r\nAs you know, in order to turn right we have\nto call `turnLeft()` three times.  We've started you out with a stub that\n**defines** a function called `right()`.  Start by adding code inside the\nfunction definition that will turn the turtle to the right (by turning left\nthree times) when called. \\r\n\\r\nThen **use** this function in some code\nto draw a rectangle, as shown below.  Make sure the turtle ends facing the\nsame direction and in the same location it started. The rectangle below is\n2 `moveForward`s tall and 1 `moveForward` wide.\\r\n\\r\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\\r\n\\r\n**Note**:\nYour program will still do the same thing. We are just changing the way it\nis written to demonstrate that you can use functions you've already written\nas building blocks in new functions.\\r\n\\r\nYou'll use three subgoals to\nsolve the problem: `//Orient turtle`, `//Move turtle`, and `//Call function`.\n`//Define function` is already done for you. Notice that we haven't filled\nthe subgoals in for you (for the right function or drawing the rectangle).\nIf you are having trouble finding the solution, plan your approach with subgoals\nbefore filling it in with blocks. If you're not having trouble, feel free\nto skip the subgoals."
      SG U3L03 draw diamond_markdown_instruction: "# Do This:\\r\nWe're finally ready\nto make our diamond! **Define** a function named `function drawDiamond()`\nthat **calls** `drawSide()` multiple times in order to complete the drawing.\nYour final solution should be triggered by **a single call** to `drawDiamond()`.\n\\r\n\\r\n<table>\\r\n<tr>\\r\n<td><img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png\"\nwidth=200></td>\\r\n<td><img src=\"https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif\"\nwidth=200></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n<hr>\\r\n\\r\n**Notes**:\\r\n\\r\nIn\nthe end you will have 4 functions defined:\\r\n\\r\n* drawDiamond()\\r\n* drawSide()\\r\n*\ndrawStep()\\r\n* right()\\r\n\\r\nThese 4 functions work sort of like a hierarchy\nof top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`,\nwhich makes calls to `drawStep()` and `right()`.\\r\n\\r\nFor most programming\nproblems that you face, the problem won't be broken down into pieces like\nit was for this series of puzzles. You'll have to figure out your own hierarchy\nof functions based on which patterns you want to use multiple times. This\nis why planning your solution ahead of time can make your code more efficient.\n\\r\n\\r\nSubgoals will help you do this. Once you recognize that the diamond\ncan be drawn using the same function repeated 4 times, you can note with a\nsubgoal comment that you'll need to define and call a function for `drawSide()`.\nThen you can figure out that one side can be drawn using the same function\n3 times plus a couple of steps, you can make note to define and call `drawStep()`.\nOnce you've planned the solution, you can fill in blocks to complete it."
      SG U3L04 - 3 by 3 with functions_markdown_instruction: "# Do This:\\r\n\\r\nWe're\ngoing to revisit a familiar problem, **drawing the 3x3 square as efficiently\nas possible**. The only difference is that this time you are armed with the\nability to create **layers of functions** to help you design more elegant\nand efficient solutions. Use the techniques you've learned for **breaking\ndown problems into layers of functions** in order to improve upon your previous\nsolution. Think about how to combine functions to use as few blocks as possible.\\r\n\\r\nYou'll\nneed 4 subgoals for this task. Think about how you can `//Define function`\nand `//Call function` to draw most of the square, then fill in the rest using\n`//Move turtle` and `//Orient turtle`.\\r\n\\r\n![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18\nPM.png)"
      SG U3L04 - snowflake_markdown_instruction: "# Do This:\\r\n\\r\nYou should have\nalready worked with a partner to break down the design below into its multiple\nlayers of functions. Now you'll have an opportunity to program your solution.\nHere are a few things to keep in mind:\\r\n\\r\n* Identify useful patterns that\ncan be reused and give them **their own functions**.\\r\n* Remember: The functions\nyou design **can call one another**. This is how you create layers of abstraction.\\r\n*\nFunctions should be given names that are **descriptive and meaningful**.\\r\n*\nYour program should be kicked off with a single call to a function that makes\ncalls to subsequent functions.\\r\n\\r\nYou'll use four subgoals for this:\n`//Define function` and `//Call function` and `//Move turtle` and `//Orient\nturtle`. If you don't already have a plan somewhere else, plan out your program\nwith subgoals first.\\r\n\\r\n\\r\n![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33\nPM.png)"
      SG U3L04 Assessment1_markdown_instruction: "Consider the figure below.  Use\ntop-down thinking to design a solution to the problem.  In the space provided\nwrite a list of **just the names** of the functions that you would write in\na program that draws this figure.  (Assume that the long line segments are\n6 turtle moves long).\\r\n\\r\n![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\\r\n"
      SG U3L04 Free Response Wrap Up_markdown_instruction: "In the Create Performance\nTask, you will be asked to identify an abstraction in your program and explain\nhow it helps manage the complexity of the program. Functions are a form of\nabstraction. Pick a function you wrote in your solution to the 3x3 square\nproblem and explain how it helps manage the complexity of your program."
      SG U3L06 - moveForwardwithParams_markdown_instruction: "# A New Way to Move\nthe Turtle\\r\nThe `moveForward()` turtle command that we've used so far moves\nthe turtle the same amount every time (25 pixels in fact). Similarly, `turnLeft()`\nturns the turtle to the left exactly 90 degrees. Today we are going to see\nhow some functions can **accept input**, such as a number, to be used more\nflexibly. For example, you can write `moveForward(103)` to move the turtle\nforward exactly 103 pixels if you like.\\r\n\\r\n# Do This:\\r\n\\r\n**How far\nis it to the top edge of the screen?**\\r\n\\r\nRun the program to see the new\nversion of `moveForward()` in action. Then **changing only the number supplied\nto `moveForward()`**, move the turtle to the top edge of the screen. Experiment\nto find out the distance in pixels between where the turtle starts and the\ntop edge of the screen.\\r\n\\r\nOnce you've found it, compare with a neighbor\nto see that you're seeing the same thing and click **Finish** to move on.\\r\n\\r\nYou'll\nonly use one subgoal - `//Move turtle` -but now you have more flexibility\nin how this subgoal is achieved.\\r\n\\r\n**Note:** There might be slight differences\ndepending on whether you get the turtle to just touch the edge, or go off\nthe screen entirely."
      SG U3L06 Assessment_markdown_instruction: "It is said that *functions with\nparameters generalize the behavior of a more specific command and allow programmers\nto use functions instead of duplicated code.* Explain what this means to you\nusing the difference between turnLeft() and turnLeft(angle) as an example.\\r\n"
      SG U3L06 Challenge 1 triangle_markdown_instruction: "# Terminology: *Parameter*\\r\n\\r\nWhen\nyou have a command like: `moveForward(100)` we say that the `moveForward()`\ncommand *accepts a **parameter***.  And 100 is the value *given* or *supplied*\nto `moveForward()`'s **parameter**.  Since this value can change, you will\noften see a written description for the command that looks something like\n**`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s\n**parameter** should be the number of pixels you want it move.\\r\n\\r\nThe\ngood old `moveForward()` command still exists.  In fact it's the **same command**\nas `moveForward(pixels)`. The \"parameter-less\" version of `moveForward()`\nsimply supplies a **default value** to the parameter.  We might also say that\nthe `moveForward()` command has an **optional parameter** since you could\ncall either `moveForward()` or `moveForward(50)` and it doesn't cause an\nerror when you run the program.\\r\n\\r\n\\r\n# New Commands!\\r\n\\r\nCheck it\nout.  The turtle toolbox now contains the *parameterized* versions of the\nturtle commands including `turnLeft(angle)` and `turnRight(angle)`.  \\r\n\\r\n#\nDo This:\\r\n\\r\nUse the parameterized versions of the commands to draw a triangle\nwith sides that are 100 pixels long. Don't forget that you can define and\ncall functions to make the code more efficient.\\r\n\\r\nAt a minimum, you'll\nuse `//Move turtle` and `//Orient turtle` to do this. You can also solve the\nproblem by using `//Define function` and `//Call function`.\\r\n\\r\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\"\nwidth=150>"
      SG U3L06 Challenge 2 purple square_markdown_instruction: "# Do This:\\r\n\\r\n**Draw\nthe square:** Use pen color and width functions to draw the thick blue square\nshown below.  The size of the square doesn't matter.\\r\n\\r\nIn addition to\nthe usual `//Move turtle` and `//Orient turtle` (and `//Define function` and\n`//Call function` if you want to be extra efficient), you'll also need to\nuse the new subgoal `//Set pen properties`.\\r\n\\r\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\"\nstyle=\"height: 250px\">\\r\n\\r\n**Remember:** If you get stuck on what a specific\nblock does, you can read through the documentation by **hovering over** `penColor()`\nand `penWidth()` which let you set the color and size of the pen your turtle\nuses to draw. \\r\n\\r\n"
      SG U3L06 Challenge 3 fill pink_markdown_instruction: "# Drawing with Dots\\r\n\\r\nWe've\nadded a new command called `dot()`.  \\r\n\\r\n**Read the documentation** for\nthe `dot()` command.\\r\n\\r\n**Make a \"snowman\"**\\r\n\\r\n1. Set the pen color\nto some new color (we made ours pink)\\r\n\\t* Note: even if you just want the\ndefault dot color - black - explicitly set the color to black here.\\r\n\\r\n2.\nUsing that color, make a dot so big that it fills the screen.\\r\n\\r\n3. In\na different color, make 3 dots in a row, each one smaller than the next. (We\nmade our dots white to look like a snowman)\\r\n\\r\nYou might want to go back\nto the documentation for `penColor()` to look up other colors to use.\\r\n\\r\n![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)\\r\n\\r\nYou'll\nneed two subgoals for this: `//Set pen properties` and `//Move Turtle`. Because\nyou need to make two dots at the beginning without moving the turtle, you're\nreally doing `//Set pen properties` twice in a row. Because this problem will\ntake a little bit of experimentation to get the dots the right size, we've\nalready outlined the problem solution with subgoals."
      SG U3L06 Challenge 4 bullseye_markdown_instruction: "# Hexadecimal Colors\\r\n\\r\nIn\nreading the documentation, you may have noticed that `penColor()` can accept\ncolors in the **hexadecimal format (e.g. \"#AC9100\")**. Colors on websites\nwill often be represented in this format. It's useful to know how to interpret\nand use this format when trying  to duplicate colors in your own images.\\r\n\\r\n**Read\nthe documentation:** Review the documentation for `penColor()` and pay particular\nattention to how to define colors in hexadecimal.\\r\n\\r\n# Do This:\\r\n**Draw\nthe bullseye: ** Draw the bullseye below using a combination of `penColor()`\nand `dot()`.\\r\n\\r\n***Hint:*** *The sample image was created using three\nof the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00.\nCan you recall how hexadecimal color works to select the correct colors on\nyour first try?*\\r\n\\r\nFor each circle in the bullseye, you'll complete\nthe same subgoal: `//Set pen properties`.\\r\n\\r\n<img src=\"https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png\"\nstyle=\"height: 250px\">\\r\n\\r\n**Remember:** The hex colors must have quotes\naround them so penColor(“#FF0099”)  not penColor(#FF0099)."
      SG U3L06 Challenge 5 overlapping circles_markdown_instruction: "# Transparency\n- Red, Green, Blue, Alpha\\r\n\\r\nThere is another command that lets you set\nthe pen color called `penRGB(r,g,b,a)`.\\r\n\\r\n* The first 3 parameters represent\nvalues (in the range 0-255) for the red, green, and blue channels. \\r\n* The\n4th parameter `a` stands for \"alpha\".  The \"alpha channel\" for color lets\nyou set the level of **opacity** as a decimal value between 0 and 1. It is\ninterpreted as a percentage, so 0.5 equates to 50% opaque.  For example: `penRGB(113,\n102, 160, 0.5)`.\\r\n\\r\nSo far, we've always moved the turtle with the pen\ntracing the path. In the original robotic turtle used 50 years ago, this meant\nthat the pen was down so that it would draw on the paper. The turtle can also\nmove with the pen up, or not tracing its path. The commands to switch between\nthese two are `penUp()` and `penDown()`. The pen by default is set to down\nposition, so to stop drawing with the pen use `penUp()`. When you want to\nstart drawing again, use `penDown()`.\\r\n\\r\n# Do This:\\r\n\\r\n**Read the\nDocumentation:** To figure out how to use `penRGB()` go read the documentation,\npaying special attention to the syntax used to give a command **multiple values**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\n**Draw the circles:\n** \\r\n\\r\nUse `penRGB()`,`penUp()` and `dot()` to draw two overlapping circles\nas shown in the image.\\r\n\\r\nAll of these new blocks give you new ways to\nachieve the subgoal `//Set pen properties`. You use this subgoal multiple\ntimes to complete this problem as well as the `//Move turtle` subgoal."
      SG U3L06 Challenge 6 squiggles_markdown_instruction: "# Multiple Parameters\n- Making Arcs\\r\n\\r\nMany commands need more than one parameter to make sense.\nWhen a command needs more than one parameter, the parameters are separated\nby commas. **The order of the parameters matters**.\\r\n\\r\nTwo new commands\nhave been added to the block palette, `arcLeft()` and `arcRight()` which both\naccept two parameters. These two blocks are another way to accomplish the\n`//Move turtle` subgoal.\\r\n\\r\nRead the documentation for `arcLeft()` and\n`arcRight()`. Notice that in the documentation you can see what the order\nof parameters is: first angle, then radius.\\r\n\\r\n\\r\n# Do This:\\r\n<img\nsrc=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\n**Draw a squiggly\nline: ** \\r\n\\r\nUsing `arcLeft` and `arcRight` along with the functions you\nhave already learned to draw a **purple squiggle on a blue background**. Feel\nfree to use any of the methods for choosing colors.\\r\n\\r\n\\r\n\\r\nHints:\\r\n*\nTo make the figure exactly, you need to `//Orient turtle` before calling `arcLeft()`\nor `arcRight()` by turning the turtle first.\\r\n* The parameters to `arcLeft()`\nand `arcRight()` are the same.\\r\n* The colors are \"PowderBlue\" and \"Purple\"\n- though you can use other colors if you like.\\r\n\\r\nThe subgoals for this\nproblem are already in the workspace to help you get started. The first `//Set\npen properties` is for drawing the background. Then you will draw the squiggle.\nNotice that you'll achieve `//Move turtle` using the new arc blocks. As we\nlearn more features of App Lab, you'll have more options for how to complete\nsubgoals. "
      SG U3L06 Challenge 7 smiley face_markdown_instruction: "# Moving Relative to\nthe Screen\\r\n\\r\nThe turtle commands we've seen so far move the turtle **relative\nto the turtle's location and direction**. If you want to get the turtle to\na specific position on the screen using only `moveForward()` or `turnLeft()`,\nyou need to know the turtle's location beforehand.\\r\n\\r\nTwo new commands\nin the toolbox help resolve this issue. `moveTo()` moves the turtle to a location\non the screen based on its X and Y coordinates. `turnTo()` turns the turtle\nin a specific direction. Together these commands can make many drawings easier\nto complete.\\r\n\\r\nJust like `moveForward()`, `moveTo()` achieves the subgoal\n`//Move turtle`. And just like `turnLeft()`, `turnTo()` achieves the subgoal\n`//Orient turtle`.\\r\n\\r\n# Do This:\\r\n\\r\n**Read the documentation: ** Read\nthe documentation for `moveTo()` and `turnTo()`. Pay specific attention to\nhow the coordinate system is arranged in App Lab as it is different from what\nyou might have seen in a math class.\\r\n\\r\n**Draw the smiley: ** Use these\nnew commands to help you draw the smiley face pictured below.\\r\n\\r\n**HINT:\n** Don't forget to use `penUp()` and `penDown()`.\\r\n\\r\nMake sure that you\nplan your program with subgoals before you start filling in the blocks. Especially\nbecause you'll have to do some trial and error with the parameters, planning\nwith subgoals will help keep you organized.\\r\n\\r\n![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)"
      SG U3L06 Challenge 8 make your own_markdown_instruction: "# The Full Turtle\nAPI\\r\n\\r\nWe've added a few more commands to the toolbox. At this point\nyou have access to every turtle command provided by App Lab. As we've already\nseen with our exploration of functions you can combine these commands to create\nmore complex functionality, but at the lowest level all of your code will\nbe making use of the set of commands provided by App Lab.\\r\n\\r\n<img src=\"https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\nCode you write\nwill always be based upon the commands that are provided by the programming\nlanguage you are using. When several commands are provided in a logical chunk,\nlike the set of turtle commands, we refer to them collectively as a **library**\nof functions. The total set of commands that a language provides access to\nis called the **application program interface**, or simply an **API**. \\r\n\\r\nAs\nyou gain more experience you will gain familiarity with the API for the language\nyou are using, but you will still want to return to the **API documentation**\nfrom time to time to remind yourself what functionality a language offers.\\r\n\\r\nCongratulations,\nyou've really come a long way as a turtle artist! \\r\n\\r\n# Do This:\\r\n\\r\n**Draw\nwhatever you like!**  The only requirements are:\\r\n\\r\n* use at least 3 different\ncolors\\r\n* use moveTo\\r\n\\r\nExplore the documentation for any new commands\nyou see and use your skills as both an artist and user of **API documentation**\nto **draw something of your own choosing.** Don't forget to plan it out using\nsubgoal labels.\\r\n\\r\nIf in doubt: try to re-create \"I [heart] CS\" drawing\nshown here."
      SG U3L07 - Free Play Loops and Random_markdown_instruction: "# Free Play!\\r\n(Optional)\\r\n\\r\nMess\naround with your \"Under the Sea\" scene to make it do different things.  \\r\n\\r\n**Ideas:**\\r\n*\nMake different amounts of each component.\\r\n* Play with the ranges of random\nvalues.\\r\n* Add other creatures.\\r\n* Play with color values to give the\nscene a different feel (nighttime? red dawn?).\\r\n* Get creative!\\r\n\\r\n#\nDon't Worry... You Can't Screw It Up\\r\n* Play around as much as you want\n- you can **always go back to a previous version**.\\r\n* Each time you hit\n\"Run\" your code is saved in a way that lets you get back to it.\\r\n* Notice\nthat there is button at the top of the page called **Version History** that\nlets you see and use any previous version of your code.\\r\n\\r\n![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)"
      SG U3L07 - allSeaGrass_markdown_instruction: "# Add Seagrass\\r\n<img src=\"https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42\nPM.png\" style=\"width: 200px; float: right\">\\r\nOur new version of `drawSeagrass`\nnow draws a single piece of seagrass with a random height.  Now let's use\na loop in `drawAllSeagrass` to fill the sea floor with it.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of\nseagrass using your updated `drawSeagrass` function."
      SG U3L07 - bubbles_markdown_instruction: "# Add Bubbles\\r\n<img src=\"https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49\nAM.png\" style=\"width: 200px; float: right\">\\r\nThe first high-level function\nyou will write is `drawAllBubbles`. You may have noticed that the bubbles\nin the image look very similar to the dots example we've already drawn in\nthis lesson. Now we'll use that skill to add to our image.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read** the `drawBubble` function to know how it works and what **parameters**\nit accepts.\\r\n\\r\n* **Modify the code** of `drawAllBubbles`:\\r\n * **Add\na loop** inside the function.\\r\n * **Move the commands that were already\ninside the function *inside the loop* instead** -- In other words \"wrap a\nloop around the existing lines of code that are inside the function. This\nway your code will move the turtle randomly and call `drawBubble` many times.\\r\n\n* **Set the number of iterations** in your loop so that the screen is filled\nwith bubbles. Try starting with 200 and then adjust to whatever number you\nlike."
      SG U3L07 - createTriangleParam_markdown_instruction: "# Defining Functions\nwith Parameters\\r\n\\r\nThis time you're going to write your own function\nwith parameters to complete an image. Two function calls to `drawTriangle()`\nhave been placed at the top of the program but the function itself needs to\nbe defined.  The program should draw this:\\r\n\\r\n![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20\nPM.png)\\r\n\\r\n# Do This:\\r\n**Complete** the function definition for `drawTriangle(sideLength)`\n. Notice that you have already been given a **descriptive and meaningful parameter\nname**, `sideLength`, but you can change it if you wish.\\r\n\\r\n**Hint:**\nyou should put the pen down and pick it up as part of the definition of `drawTriangle()`\n- that way you guarantee that a call to drawTriangle will always actually\ndraw. Picking the pen up as the last act of the function is a nice thing to\ndo for any other code that might not be expecting drawTriangle to have a side\neffect of putting the pen down.\\r\n\\r\nAs a reminder of how to use a parameter\nwithin the function here is a correct version of `drawSquare(size)` for reference.\\r\n\\r\n![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)\\r\n\\r\nWhen\nwe used the subgoal `//Define function` before, we only gave the function\na name and then filled it in with blocks. In this problem the subgoal `//Define\nfunction` includes giving the function a name, defining the parameters, and\nfilling it in with blocks. For this puzzle, we've done the first two steps\nfor you, but you'll be doing it all in the coming puzzles.\\r\n\\r\n"
      SG U3L07 - fish_markdown_instruction: "# Add Fish\\r\n\\r\nThe next high-level\nfunction you will write is `drawAllFish`. A version of `drawFish` with parameters\nhas been provided for you to use.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read** the\n`drawFish` function to know how it works and what **parameters** it accepts.\\r\n\\r\n*\n**Add a loop** to `drawAllFish`.\\r\n\\r\n* **Place the commands already inside\nthe function in your loop.** This way your code will **move the turtle randomly**\naround the **top 360 pixels** of the image and draw **15 fish** of random\nsize between **5 and 20** using `drawFish`.\\r\n\\r\n* Once you have your loop\nworking try calling `drawFish` with random values for its `red`, `green`,\nand `blue` parameters to get differently colored fish.\\r\n\\r\n![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35\nPM.png)"
      SG U3L07 - introSquare_markdown_instruction: "# Getting Started with Loops\\r\n\\r\nA\n**loop** is a block of code that is repeated or \"looped through\" in a program.\nYou will be creating a loop using the `for` loop block.\\r\n\\r\nWe'll start\nby experimenting with a program similar to what you saw in the video.\\r\n\\r\n#\nDo This:\\r\n* **Drag** out a `for` loop block. This serves the subgoal `//Write\na loop`. Much like the subgoal `//Define function`, you will then fill in\nthe loop, which might involve achieving more subgoals, like `//Move turtle`\nand `//Orient turtle`.\\r\n\\r\n* **Inside the loop:**\\r\n\\t* **Add** a call\nto `moveForward()`.\\r\n    * **Add** a call `turnLeft()`. (HINT: try turning\nby 137 degrees to start. You can change after that.)\\r\n    \\r\n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\\r\n\\r\n*\n**Run** the program to see the loop in action.\\r\n* **Experiment:**\\r\n *\n**Change** the number of times the loop runs.\\r\n * **Increase** the run speed\nto see how fast loops can execute.\\r\n * **How many times** can the loop run\nbefore you can no longer tell the difference in the image?\\r\n \\r\n**Move\non** once you feel like you have a decent grasp of using a `for` loop: setting\nthe number of times to repeat, running the program, and setting the run speed.\\r\n"
      SG U3L07 - loopsWithRandom_markdown_instruction: "# Using Multiple Loops\\r\n\\r\nSome\nrepeated tasks can't easily be solved with a single loop. Instead, you'll\nneed to use **one loop after another**, each one solving a part of the problem.\n\\r\n\\r\n# Do This:\\r\n\\r\nAdd a loop to fill the screen with semi-transparent\nwhite dots until the original dots are \"erased\".\\r\n\\r\n<img src=\"https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif\"\nstyle=\"float: right; width: 100px\">\\r\n* **Drag ** a second loop into your\ncode that will run after the first loop.\\r\n* **Add** commands to draw dots\nin random locations that are white with opacity set to 0.5.\\r\n* **Increase\nthe iterations** so that the colored dots are totally erased. How many does\nit take?\\r\n\\r\nHINT: you can copy/paste the original loop and just change\nthe color of the dots and number of iterations."
      SG U3L07 - randomDots1_markdown_instruction: "# Looping with Random Values\\r\n\\r\n<img\nsrc=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\"\nstyle=\"width: 100px; float: right;\">\\r\n\\r\nIf you add some randomness to\nturtle behavior inside a loop, the program will run a little differently every\ntime which can make for some cool effects.\\r\n\\r\nYou're about to see a program\nin which the turtle **moves to a random location** each iteration of the loop,\nand **draws a randomly-sized dot** that also has a **random color**.  We've\nalso made the dot semi-transparent by setting the alpha value to 0.5 (50%\ntransparency).\\r\n\\r\n# Do This:\\r\n\\r\n**Figure out how many iterations**\n(number of times the loop runs) you need to consistently fill the screen entirely\nwith dots so none of the background is showing.  It will be a little different\nevery time so you'll need to experiment.\\r\n\\r\n**Compare what you found**\nwith a neighbor to see how close your results are.  Then **move on**."
      SG U3L07 - randomSquare_markdown_instruction: "# Practice Using Loops - Part\n2\\r\n\\r\nLet's look at the second example from the video. \\r\n\\r\nUse a `for`\nloop to call a function that you wrote.  We've provided the code for the\n`drawSquare()` function for you. \\r\n\\r\n**Drag out** a `for` loop.\\r\n\\r\n**Inside\nthe loop** add a call to `drawSquare()`, and a call to `turnRight()`.\\r\n\\r\n**Run\nthe program** to see what's happening.\\r\n\\r\n# Do This:\\r\nChange the number\nof loop iterations to draw a lot of squares.  Try to create the figure shown\nbelow (or something similar).  HINT: the image below has 72 squares in it.\\r\n\\r\n![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\\r\n\\r\nOnce\nyou've played enough to get the hang of calling a function from inside a\nloop then **move on**.\\r\n\\r\nTo solve the problem, you'll achieve the subgoal\n`//Write a loop` and within your loop, you'll use `//Call function` and `//Orient\nturtle`."
      SG U3L07 - seaGrass_markdown_instruction: "# Controlling Loops with Parameters\\r\n<img\nsrc=\"https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png\"\nstyle=\"width: 200px; float: right\">\\r\nThis time you will modify one of\nthe lower-level functions - `drawSeagrass`. Notice that the current version\nof `drawSeagrass` actually uses a loop. We want to modify this function so\nthat we control the number of times it loops with **a parameter**.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Look at** the `drawSeagrass` function to see how it currently\nworks.\\r\n\\r\n* **Add a parameter ** that will be used to indicate how many\nwaves the seagrass makes.\\r\n\\r\n<img src=\"https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10\ndrawSeagrass add param.gif\" style=\"width:350px;padding-left:22px;\">\\r\n\\r\n*\n**Modify the `'for` loop** so that it uses that **parameter** as the number\nof times to repeat.\\r\n\\r\n ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\\r\n\n\\r\n* Finally, **modify `drawAllSeagrass`** to call this new two-param version\nof `drawSeagrass` supplying a reasonable random value for the second parameter\nas well.\\r\n\\r\n<img src=\"https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG\"\nstyle=\"width:400px;padding-left:22px;\">"
      SG U3L07 - seaStar_markdown_instruction: "# Add Sea Stars\\r\n\\r\nWe're now\nready to add sea stars to our image by writing `drawAllSeaStars`. Recall that\nwe've already written loops to draw much more complex stars. \\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Read** the `drawSeaStar` function to know how it works and\nwhat **parameters** it accepts.\\r\n\\r\n* **First: Update** `drawSeaStar` to\nuse a `for` loop \\r\n\\r\n\\t* `drawSeaStar` has a portion of code that uses\na longer sequence of repetitious single commands.  \\r\n    * Find the pattern\nand \"wrap a loop\" around it so that the repetition is done with a loop rather\nthan many lines of declarative function calls.\\r\n\\r\n* **Second: Add a loop**\nto `drawAllSeaStars`.\\r\n    \\r\n\\t* **Place the commands already inside the\nfunction in your loop.** This way your code will **move the turtle randomly**\naround the **bottom pixels (y values between 360 and 450)** of the image.\\r\n\\r\n*\n**Draw 5 sea stars** of random size between **10 and 30** using `drawSeaStar`.\\r\n\\r\n![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04\nPM.png)"
      SG U3L07 - sunBeams_markdown_instruction: "# Add Sunbeams\\r\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54\nPM.png\" style=\"width: 200px; float: right\">\\r\nFinally, we'll add some\nvisual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes\nthe turtle face a random direction prior to drawing each sun beam.  \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Read** the `drawSunbeam` function to know how it works\nand what **parameters** it accepts.\\r\n\\r\n* **Add a loop** to `drawAllSunbeams`\nto draw about 100 sunbeams. Inside your loop:\\r\n \\r\n* **Place the commands\nalready inside the function in your loop.** This way your code will move the\nturtle to a random x location at the top of the image (y is 0), `turnTo` a\nrandom angle between **165 and 175 degrees**, and call `drawSunbeam`."
      SG U3L07 - topDownDesign_markdown_instruction: "# Top-Down Design\\r\n<img src=\"https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53\nAM.png\" style=\"width: 150px; float: right\">\\r\nLook at this complex version\nof the \"Under the Sea\" scene you drew in the previous lesson. **You now\nhave all the skills you need to recreate this digital scene.**\\r\n\\r\nWe will\nuse **Top-Down Design** to help manage the complexity of drawing this image.\nThe starter code you will be provided already has broken the problem into\nmultiple levels.\\r\n\\r\n# Overview of Program Structure\\r\nYou are about to\nsee that we've provided you with a good amount of starting code.  Here's\na brief tour:\\r\n\\r\n**High-Level Function Calls:** These read almost like\na story of how you will draw the image. There's one function for every major\ncomponent of the scene.\\r\n\\r\n<img src=\"https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG\"\nstyle=\"width:200px;\">\\r\n\\r\n**High-Level Function Definitions:** These\ncurrently draw **a single copy of each component**. You will add code to these\nfunctions to draw many copies of each component in a variety of sizes and\ncolors.\\r\n\\r\n![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20\nAM.png)\\r\n\\r\n**Low-Level Functions:** These draw single elements of the\nscene. Most have been written for you already, but we've left a few for you\nto complete as well.\\r\n\\r\n![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22\nAM.png)\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* Review the structure of the code in\nthis level.\\r\n* Run the code to familiarize yourself with what it currently\ndraws.\\r\n* When you are ready to do so, move on!"
      SG U3L07 Free Response Reflection_markdown_instruction: "When breaking a problem\ndown, you often encounter elements that you want to use repeatedly in your\ncode. Sometimes it's appropriate to write a new function; at other times\nit's appropriate to write a loop.  \\r\n\\r\nThere is no hard-and-fast rule\nas to which is better, but what do you think?  What kinds of circumstances\nwould lead you to writing a function versus using a loop?\\r\n\\r\n"
      SG U3L07 More Subgoals_markdown_instruction: "# More New Commands: Pen Properties\\r\n\\r\nTwo\npowerful new commands have been added to the toolbox, `penColor()` and `penWidth()`.\nThese both serve the new subgoal `//Set pen properties`. By changing the properties\nof the pen, you are no longer limited to just a thin black line. \\r\n\\r\n#\nDocumentation\\r\nAs we move forward you are going to see more and more (and\nmore!) commands added to the toolbox.  What happens if you see a command and\ndon't understand it, or you forget how it works?  Don't worry, this happens\nto professional programmers all the time! No one actually memorizes long lists\nof commands.  Most programming environments have ways to quickly look up documentation\nabout the commands of the language you're using.  **Good news: App Lab has\ndocumentation too!**\\r\n\\r\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\\r\n\\r\nWhen\nyou **hover your mouse over a non-subgoal command** in the block palette a\nbubble pops up with a quick reminder of what a function does, and what its\nparameters are. If you click \"See examples\", you will be taken to more detailed\ndocumentation of the command which includes **code examples** that you can\neven copy and paste.\\r\n\\r\n**Read the documentation:** Read through the documentation\nby **hovering over** `penColor()` and `penWidth()` which let you set the color\nand size of the pen your turtle uses to draw. The documentation for `penColor()`\nhas a lot in it!  For now just look at the **named colors**, things like \"red\",\n\"green\", etc.  Don't worry, you'll get a lot of opportunities to practice\nwith colors in a variety of ways.  We're just getting started!\\r\n\\r\n# Do\nThis\\r\nYou should explore some of the documentation. Then Run the code and\nclick Finish."
      SG U3L08 - createTwoParamTriangle_markdown_instruction: "# Defining Functions\nwith Multiple Parameters\\r\n\\r\nNow it's your turn to define a function that\naccepts multiple parameters. Just like in the previous example make sure you\n**separate your parameters with commas** and give them **descriptive and meaningful**\nnames.\\r\n\\r\n# Do This:\\r\n* **Drag out ** the function block, and **name**\nyour function `drawTriangle()`. \\r\n* **Define `drawTriangle()` to have two\nparameters ** within the parentheses making sure to give them **descriptive\nand meaningful** names separated by commas, such as `(size,width)`. \\r\n    *\nThis animation shows you how (without subgoals in the code) ![expandable](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\\r\n    \\r\n*\nThen **write ** the code inside `drawTriangle(size, width)` that will make\nit work as described.\\r\n* If you get stuck, come up with a top-down plan\nand the subgoals you need for creating a function that draws a triangle.\\r\n*\nTest it out!  **Run ** the code and experiment to create an image similar\nto the one below.\\r\n\\r\nRemember that to achieve the subgoal `//Define function`,\nyou need to give it a name, identify the parameters, and fill it in with blocks.\\r\n\\r\n![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38\nPM.png)"
      SG U3L08 - digitalScene_markdown_instruction: "# Design Your Digital Scene\\r\n\\r\nThis\nis the final project that you will submit.\\r\n\\r\n# Do This:\\r\n\\r\n**Copy**\nall of the individual functions you and your group members have written at\nthe bottom of this program.\\r\n\\r\n**Design your scene** using these functions,\nplacing your calls at the top of the file."
      SG U3L08 - drawSquareWithParam_markdown_instruction: "# Defining and Using\na Function with a Parameter\\r\nFrom the video, you learned that defining multiple\nfunctions to draw different sized squares results in lots of repetitive functions\n- they are essentially the same, with a few numbers changed - and this is\nnot desirable.\\r\nAny time you find yourself effectively copy and pasting\nlarge sections of code, it's usually a sign that there is a better way.\\r\n\\r\n#\nDo This:\\r\nUh oh! Something's wrong! We've set up a program that runs,\nbut doesn't do what it's supposed to do. The program is supposed to make\na drawing with two squares that looks like this:\\r\n\\r\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34\nAM.png\" style=\"width: 150px;\"> \\r\n\\r\nWe've given you the `drawSquare(size)`function\nthat was created in the video, but it's not quite right. **Fix the code inside\nthe `drawSquare()` function so that the program creates the drawing correctly.**\\r\n\\r\n**HINT:**\nYou should only need to change one thing about an existing line of code. You\ndon't need to add or remove any lines of code. Remember: The parameter `size`\nacts like a placeholder for a value that gets plugged into each call to `moveForward()`."
      SG U3L08 - fish_markdown_instruction: "# Adding parameters to functions: *drawFish*\\r\n\\r\nLet's\nupdate our `drawFish()` function to accept a parameter. Currently `drawFish()`\ncan only draw a fish of size 30.\\r\n\\r\n**Add a parameter** to the function\ndefinition for `drawFish()` that allows you to control its size (Note: the\npen width is important here.) Make sure your parameter has a **descriptive\nand meaningful** name.\\r\n\\r\n**Update your function calls** to use your new\nversion of `drawFish()` and change the size of the fish in your image.\\r\n\\r\n![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55\nPM.png)"
      SG U3L08 - freePlay_markdown_instruction: "# Keep Going!\\r\n\\r\nAt this point\nyou've seen how parameters can help **generalize the behavior of a function**\nto perform a variety of tasks, not just one. This will prove to be a very\nuseful skill as we continue to develop as programmers.\\r\n\\r\nFor now, **keep\nadding to your drawing**. Make more function calls and see if you can continue\nto use **random numbers** to add variety to your drawings.\\r\n\\r\n![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11\nPM.png)"
      SG U3L08 - individualCode_markdown_instruction: "# Design Your Component\\r\n\\r\nWith\nyour **group** you should have already identified and assigned the high-level\nfunctions that should be used to create your digital scene. \\r\n\\r\n# Do This:\\r\nUse\nthe space here to design your functions. Once you're done you can **share**\nthis project with your groupmates."
      SG U3L08 - introUnderTheSea - recovery_markdown_instruction: "# Under the Sea!\\r\n\\r\nIn\nthe next several challenges you will be working to improve **one program**\nthat draws an underwater scene.  Each time you  finish a puzzle and move on\nto the next one, your code will be pulled forward and you'll get new instructions\ntelling you what to add.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read through ** the\nprogram provided to get a basic understanding of what it does.\\r\n* **Add\nfunction calls ** to the top of the program so that **two fish, two starfish,\nand two pieces of seagrass** appear somewhere in the scene.You don't need\nto provide values for the parameters at this stage.\\r\n* **Hint:** you need\nto call `moveTo` before drawing a second fish, starfish or seagrass, otherwise\nyou won't see the second one because it will draw exactly over the first\none -- those functions draw based on where the turtle is just before the call.\\r\n*\nTest out your code. If something doesn't work like you expect, consider whether\nyou can add anything to the functions' definitions to make them better.\\r\n*\n**Continue ** to the next level, **where your code will be waiting for you.**\\r\n\\r\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35\nPM.png)"
      SG U3L08 - introUnderTheSea_markdown_instruction: "# Under the Sea!\\r\n\\r\nIn\nthe next several challenges you will be working to improve **one program**\nthat draws an underwater scene.  Each time you  finish a puzzle and move on\nto the next one, your code will be pulled forward and you'll get new instructions\ntelling you what to add.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read through ** the\nprogram provided to get a basic understanding of what it does.\\r\n* **Add\nfunction calls ** to the top of the program so that **two fish, two starfish,\nand two pieces of seagrass** appear somewhere in the scene.You don't need\nto provide values for the parameters at this stage.\\r\n* **Hint:** you need\nto call `moveTo` before drawing a second fish, starfish or seagrass, otherwise\nyou won't see the second one because it will draw exactly over the first\none -- those functions draw based on where the turtle is just before the call.\\r\n*\nTest out your code. If something doesn't work like you expect, consider whether\nyou can add anything to the functions' definitions to make them better.\\r\n*\n**Continue ** to the next level, **where your code will be waiting for you.**\\r\n\\r\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35\nPM.png)"
      SG U3L08 - multiParamFish_markdown_instruction: "# Multiple Parameters\\r\n\\r\nLet's\nmake our drawings even more interesting by adding some variety to the color.\\r\n\\r\n**Add**\nthree more parameters called `red` , `green` , and `blue` to your function\ndefinition for `drawFish` which allow you to set the color of the fish when\nyou call the function. Remember to separate them with commas!\\r\n\\r\n**Note:**\nthis means that drawFish will now have 4 parameters total: size, red, green,\nand blue. Remember that identifying these parameters are all part of the subgoal\n`//Define function`.\\r\n\\r\n**HINT:** inside drawFish just replace the numbers\nof the penRGB values with the parameters of your function.\\r\n\\r\n**Change**\nthe function calls at the top your code to draw different colored fish.\\r\n\\r\n![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30\nPM.png)"
      SG U3L08 - paramsToStarfish_markdown_instruction: "# Adding Parameters to Functions:\n*drawStarfish*\\r\n\\r\nWe want to make our picture more interesting by adding\nsome variety. Currently the `drawStarfish()` function can only draw a starfish\nof size 60.\\r\n\\r\n**Add a parameter** to the function definition for `drawStarfish()`\nthat allows you to control its size - like `drawStarfish(size)`. Make sure\nyour parameter has a **descriptive and meaningful** name. Also make sure to\nchange the blocks within the function to use the parameter name that you chose.\\r\n\\r\n**Update\nyour function calls** to use your new version of `drawStarfish()` and change\nthe size of your starfish.\\r\n\\r\n![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12\nPM.png)"
      SG U3L08 - randomInput_markdown_instruction: "# Random Input\\r\n\\r\nYou have\na new block that allows you to generate a random number. You can use this\ninstead of hard-coding in values every time you call a function.\\r\n\\r\n![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r\n\\r\n**Read\nthe documentation** for the randomNumber block.\\r\n\\r\n# Do This\\r\n**Use\nrandomNumber to provide random input** to *all three* of your drawing functions.  Just\ninsert the call to randomNumber where you would otherwise put numbers.  \\r\n\\r\nLike\nthis:\\r\n![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r\n\\r\nUse\nrandomNumber in calls to all three of your drawing functions:\\r\n\\r\n* drawStarfish\\r\n*\ndrawSeagrass\\r\n* drawFish\\r\n\\r\nThis is a great way to **test** out functions\nand also get some **interesting looking images**. Every time you run the program\nyou can get slightly different looking scenes like the ones below.\\r\n\\r\n![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)"
      SG U3L08 - seaGrass_markdown_instruction: "# Adding Parameters to Functions:\n*drawSeagrass*\\r\n\\r\nTo keep adding variety to our image let's keep adding\nparameters to our functions. Currently the `drawSeagrass()` function can only\ndraw a piece of seagrass with arcs of radius 100.\\r\n\\r\n**Add a parameter**\nto the function definition for `drawSeagrass()` that allows you to control\nits size. (You'll only need to change the radius of each arc.) Make sure\nyour parameter has a **descriptive and meaningful** name.\\r\n\\r\n**Update\nyour function calls** to use your new version of `drawSeagrass()` and change\nthe size of the seagrass in your image.\\r\n\\r\n![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30\nPM.png)"
      SG U3L08 - squareTwoParams_markdown_instruction: "# Calling Functions with\nMultiple Parameters\\r\n\\r\nHere is a new definition for `drawSquare()` that\nhas two parameters: `drawSquare(size, borderWidth)` Notice how **multiple\nparameters are separated by commas**.\\r\n\\r\n![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15\nPM.png)\\r\n\\r\n# Do This:\\r\nAdd to the code to **make two calls** to the\nnew two-parameter version of `drawSquare()` to make an image similar to this\none.\\r\n\\r\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38\nPM.png)\\r\n\\r\nJust like for the subgoal `//Define function`, the subgoal\n`//Call function` used to involve only identifying the function's name. Now\nwhen you call a function, you need to identify the function's name and the\nvalue of the parameters for the function."
      SG U3L08 Assessment2_markdown_instruction: "“Abstraction” is often used to\nfocus on a general case and ignore a specific instance of a problem. \\r\n\\r\nGiven\nthis meaning of the word, how are functions with parameters an example of\nabstraction?"
      SG U3L08 comments_markdown_instruction: "# Commenting code for yourself and\nfor collaboration\\r\n\\r\nProgrammers write comments into their code for two\nmain reasons: (1) sharing code with other programmers (2) remembering their\nown thoughts or plans for code they write.  \\r\n\\r\nFor both cases a programmers\n**write comments into their code to explain their thinking to the reader.**\\r\n\\r\nThe\nsubgoal comments you've seen are a specific type of commenting meant to help\nyou learn.  As you get more experience  programming, comments you write can\nbe in addition to, or simply replace your subgoal comments.\\r\n\\r\n<details><summary\n><b>More: Why write comments?</b></summary>\\r\n<div style=\"background-color:\n#e9f7f7; margin-left: 20px; padding: 10px\">\\r\n<p>\\r\nWhen sharing code with\nothers, comments are useful to point out sections of code you might want help\nwith, or to explain a complicated section of code that's hard to reason about.  It's\nuseful for example to write a comment like: <code>//This function assumes\nthat the fish have already been drawn</code> because it helps the reader understand\nwhen, where, why that section of code might be executed.\\r\n</p>\\r\n<p></p>\\r\n<p>\\r\nWhen\nwriting comments for yourself, it might be a note about how you plan to solve\na problem, or jotting down the reason you did something to remind yourself\nlater when you come back to it.  For example you might write a comment like:\n<code>//to do: make a function to handle this code below</code>\\r\n  </p>\\r\n  <p>\\r\n  Many\nprogrammers, when starting from scratch, like to write out a high level plan\nfor the code they want to write in comments, and then go in starting writing\ncode to fill in the plan. This is particularly useful if you're facing a\nlarge problem that needs to be broken down into parts.  You can think about\nthe big picture to start and write out a strategy in comments so you don't\nforget it later -- which happens -- because once you start writing code you'll\nrun into lots of micro-hurdles that might take time to solve or work out the\nbugs and you need your brain space to work on those.  A plan for drawing an\nunder the sea scene might look like this:\\r\n<pre>\\r\n    // setup for drawing\\r\n    //\ndraw background with color and bubbles\\r\n    // draw all the fish\\r\n    //\ndraw all the seagrass\\r\n    // draw bubbles again\\r\n </pre>\\r\n</p>\\r\n</div>\\r\n</details>\\r\n\\r\n#\nDo This\\r\n\\r\n**Add your own comments** to the code that you've been working\non. Imagine that you are describing the purpose of the code to one of your\nclassmates.  Or find the most complicated part and try to explain it.\\r\n\\r\nThe\nway that you add comments is with the `// Comment` block, which is in the\n**Functions** tab of the toolbox.\\r\n\\r\n**See how:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)"
      SG U3L08 how to add comments_markdown_instruction: "# Now you try it - Add\na comment\\r\n\\r\nThe starting code provided has some comments already in it.\\r\n\\r\n#\nDo This\\r\n\\r\nInsert a comment that says `// Draw a starfish at specific\nlocation` just above the section of code that will draw the starfish. \\r\n\\r\nThe\nway that you add comments is with the `// Comment` block, which is in the\n**Functions** tab of the toolbox ([Show me](#triggercallout=show_comment)).\\r\n\\r\n**See\nhow:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)\\r\n\\r\n**Add\nmore comments** to the code that explain what each section of code is for.\nImagine that you are describing the purpose of the code to one of your classmates.  Or\nfind the most complicated part and try to explain it.\\r\n\\r\n**Click finish**\nonce you've added the comment.  And keep adding comments as you go!!!"
      SG U3L2 Using Simple Commands part 1_markdown_instruction: "# Welcome to App\nLab - Let's get started\\r\n<img src=\"htt\\r\nps://images.code.org/f93dfb56ab00f689dcd5867eb4398fa8-image-1508424086651.png\"\nalign=right>\\r\n\\r\nWe're going to start learning how to program with turtle\ncommands. Given only 2 turtle commands, write code to complete the drawings\nin each of the following challenges. \\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nAdd code to draw a 1 x 1 square to the front\nand left of the turtle as efficiently as possible. The program should stop\nwith turtle in its original position, facing its original direction.\\r\n\\r\nOnce\nyou think you have a solution, click the `Finish` button - it will appear\nafter you run the program once.\\r\n"
      SG U3L2 Using Simple Commands_markdown_instruction: "# Now you try it!\\r\n\\r\nWe'll\nbe learning how to code with subgoals throughout this unit.\\r\n\\r\nTypically,\nyou'll solve problems by dragging blocks from the toolbox to the workspace.\nSometimes we'll put subgoals that solve the problem into the workspace, and\nsometimes you'll have to identify the subgoals yourself.\\r\n\\r\nHere we've\nadded a series of `// Move turtle` and `// Orient turtle` subgoals into the\nworkspace that describe how to solve the 1x1 square problem...but it's incomplete.\\r\n\\r\n#\nDo This: \\r\n\\r\n* Complete the code for the the 1x1 square solution we've\nstarted below.\\r\n* Drag each turtle block beneath the proper subgoal in the\ncode. \\r\n\\r\n**Click here to see how** ![expandable](https://images.code.org/5818d0b6080e3a30dc081a166cfbffcb-image-1508437404576.gif)\\r\n\\r\n<img\nsrc=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n\\r\n* Reminder: the turtle should end up in its original position,\nfacing its original direction.\\r\n\\r\nOnce you think you have a solution,\nclick the `Finish` button."
      SG U3L2_Add-subgoals_markdown_instruction: "# New challenge <img src=\"https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png\"\nstyle=\"float: right\">\\r\n\\r\nDraw a 3x3 grid to the *front* and *right*\nof the turtle *as efficiently* as possible.\\r\n\\r\nWhat does “efficient” mean?\nIn computer science it can actually mean several different things depending\non the situation. For this problem let's say that efficient means: **using\nthe fewest turtle commands possible**\\r\n\\r\n# Do this\\r\n\\r\n1. This problem\npresents some subtle challenges. Before you start creating the program, you\nmight want to test your ideas on paper for faster brainstorming. Work with\nyour partner to discuss possible solutions or strategies. Try more than one.\\r\n\\r\n2.\nOnce you have a solution, **start** by identifying the subgoals and drag them\nfrom the **Goals** tab into the workspace. \\r\n\\r\n3. Then start filling it\nin with turtle blocks, and **testing** it out as you go by adding a few commands,\nthen running the program, adding a few more, run again, and so on.\\r\n\\r\nWhen\nyou think you're done click `Finish` and move on.\\r\n"
      SG U3L2_Turtle3by3Grid_markdown_instruction: "# New challenge <img src=\"https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png\"\nstyle=\"float: right\">\\r\n\\r\nDraw a 3x3 grid to the *front* and *right*\nof the turtle *as efficiently* as possible.\\r\n\\r\nWhat does “efficient” mean?\nIn computer science it can actually mean several different things depending\non the situation. For this problem let's say that efficient means: **using\nthe fewest turtle commands possible**\\r\n\\r\n**note:** From now on, the 4\nturtle commands mentioned in the video will always be in toolbox.  You don't\nnecessarily need `penUp()` and `penDown()` for this challenge, but in the\nfuture you might want to use them. ([Show me where](#triggercallout=show_penup))\\r\n\\r\n#\nDo this\\r\n\\r\n1. This problem presents some subtle challenges. Before you\nstart creating the program, you might want to test your ideas on paper for\nfaster brainstorming. Work with your partner to discuss possible solutions\nor strategies. Try more than one.\\r\n\\r\n2. Once you have a solution, **start**\nby identifying the subgoals and drag them from the **Goals** tab into the\nworkspace. ([Show me where](#triggercallout=show_goals))\\r\n\\r\n3. Then start\nfilling it in with turtle blocks, and **testing** it out as you go by adding\na few commands, then running the program, adding a few more, run again, and\nso on.\\r\n\\r\nWhen you think you're done click `Finish` and move on."
      SG U3L2_TurtleSquare_right_markdown_instruction: "# New problem <img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\"\nalign=right> \\r\n\\r\nThis time, draw a 1 x 1 square, so the square is above\nand to the right of the turtle.  This means you need to draw it by moving\nand *turning right*.  **But there there is no command to turn right!** \\r\n\\r\nHow\ndo you turn right when the only command you have is `turnLeft()`?  You need\nto figure it out.\\r\n\\r\n## One Subgoal - multiple lines of code <img src=\"https://images.code.org/ae8ac9b14b7c016437455d07fdbb6a7c-image-1508440383741.png\"\nstyle=\"float: right\">\\r\nSometimes a single subgoal like `// Orient Turtle`\nmight require several lines of code to accomplish. \\r\n\\r\nFor example in\nthis problem the *goal* of orienting the turtle for each right turn means\nturning left a few times.  So you would add multiple `turnLeft()` commands\nunder a single `//Orient Turtle` subgoal. (shown at right).\\r\n\\r\n<div style=\"clear:\nboth\"> </div>\\r\n\\r\n# Do this\\r\n\\r\n\\r\n* We've again added subgoals to\nsolve this problem into the workspace.  Notice that we still only use `Move\nturtle` and `Orient turtle`.\\r\n* Add code beneath each subgoal, to draw a\n1 x 1 square by moving and *turning right*.\\r\n* Reminder: The program should\nstop with turtle in its original position, facing its original direction.\\r\n\\r\nWhen\nyou're done click the `Finish` button to move onto the next problem.\\r\n\\r\n"
      SG csp_U3_plan_code_FR_markdown_instruction: "<img src=\"https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png\"\nstyle=\"float: right\">\\r\n\\r\n<br>\\r\n\\r\nIn this lesson we talked about\ntop-down design for building up solutions to larger programming problems.  Plan\nthe code that you would use to draw this image (shown at right). Describe\neach of the functions that you would create. You should not write all the\ncode, only the names of the functions that you would create with a brief description\nof what each function would do. \\r\n\\r\nWrite your plan following the format:\\r\n\\r\n<div\nstyle=\"clear: both\"> </div>\\r\n\\r\n    Name of function - description of\nwhat it does\\r\n\\r\n    Name of function 2 - description of what it does\\r\n    ..."
      SG csp_U3_square_v_rect_FR_markdown_instruction: "<img src=\"https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png\"\nstyle=\"float: right\">\\r\n\\r\nIn this lesson you wrote code to make the turtle\ndraw squares. Briefly describe how the code for drawing a rectangle would\nbe different than drawing a square.  (Example rectangle at right)"
      SG subgoals_U3_turtle_prediction_FR_markdown_instruction: "## Code Trace\\r\n\\r\nIn\n1-2 sentences, explain what you think the following code does.\\r\n\\r\n![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)"
      SG subgoals_u3_top_down_FR_markdown_instruction: "# Design a program\\r\n\\r\nDescribe,\nusing a top-down approach, how you would create a program to draw a white\nsnowflake on a blue background that uses random numbers, so the snowflake\nwill be unique every time you run the code. \\r\n\\r\nYou don’t need to write\nthe exact code or blocks that you would use, but you should describe what\nfunctions you would need to create, where you would or would not use loops,\nand where you would or would not use random numbers."
      SGU3L07 - randomDots1_markdown_instruction: "# Looping with Random Values\\r\n\\r\n<img\nsrc=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\"\nstyle=\"width: 100px; float: right;\">\\r\n\\r\nIf you add some randomness to\nturtle behavior inside a loop, the program will run a little differently every\ntime which can make for some cool effects.\\r\n\\r\nYou're about to see a program\nin which the turtle **moves to a random location** each iteration of the loop,\nand **draws a randomly-sized dot** that also has a **random color**.  We've\nalso made the dot semi-transparent by setting the alpha value to 0.5 (50%\ntransparency).\\r\n\\r\n# Do This:\\r\n\\r\n**Figure out how many iterations**\n(number of times the loop runs) you need to consistently fill the screen entirely\nwith dots so none of the background is showing.  It will be a little different\nevery time so you'll need to experiment.\\r\n\\r\n**Compare what you found**\nwith a neighbor to see how close your results are.  Then **move on**."
      SGU3L2A Introducing Subgoals_markdown_instruction: "# Introducing Subgoals\\r\nWriting\ncode is fun, but as you write longer programs that solve more complex problems\nit's useful to think at a higher level about the **series of subgoals** that\nbuild toward the solution.\\r\n\\r\nIn App Lab we have provided special blocks\ncalled [`Goals`](#triggercallout=goals_palette) to help you think about the\n**subgoals** of the problems you're solving. ([Show me](#triggercallout=goals_palette))\\r\n\\r\nThese\nsubgoal blocks are known as \"comments\" which programmers use to make notes\nto themselves or other people who might view the code. You can drag these\nblocks into your code to help label things and stay organized, but they won't\ndo anything when you run the program.  Try it out.\\r\n\\r\n# Do This:\\r\n\\r\n*\nDon't add any code, just click `Run` and notice the following:\\r\n* In the\nworkspace we've added the subgoals `//Move turtle` and `//Orient turtle`\na few places in the code. ([Show me](#triggercallout=show_code)) \\r\n* Underneath\neach subgoal, we've added the blocks to complete the subgoal.\\r\n* The point\nis to simply notice that the subgoals don't change the drawing or what the\nturtle does.\\r\n* The turtle is still only controlled by the blue turtle command\nblocks\\r\n\\r\nAfter running the program, click `Finish` to move on to try\nit yourself.\\r\n\\r\n\\r\n<!--\\r\n\\r\nThis is how we'll be using App Lab throughout\nthis unit. You'll get several puzzles to solve by dragging blocks from the\ntoolbox to the workspace. Sometimes the workspace will tell you the subgoals\nof the puzzle, and sometimes you'll have to identify the subgoals yourself.\\r\n\\r\nThe\nfirst step of every puzzle will be to put the subgoals of the problem in the\nworkspace (if they aren't already there). Then you'll put the blocks that\nsolve the subgoals underneath.\\r\n\\r\nIn the workspace below, we've added\ntwo subgoals, Move turtle and Orient turtle. Underneath each subgoal, we've\nadded the blocks to complete the subgoal.\\r\n\\r\nThe subgoals are described\nin comment blocks. This means that the subgoal comment will be visible in\nyour code, but they won't do anything when you run the code. Comments are\npurely to make notes to yourself or other people who might view the code.\\r\n\\r\nDo\nThis:\\r\n\\r\nPress the Run button to `run` the code. Notice that the subgoals\ndon't show up in the drawing. Only the blocks will make the turtle do something.\\r\n\\r\n-->"
      Sam the Butterfly 2_markdown_instruction: "Sam's mom wants to make sure that\nshe can always see at least a bit of him, so lets write some functions that\nhelp make sure he doesn't go too far out of the yard. Here's a function\ncalled `safe-left?` - it should take a Number for its domain that represents\nSam's x-coordinates and return *true* if he's completely visible on screen.\nIf your function works, Sam shouldn't be able to leave the yard from the\nleft side."
      Sam the Butterfly 3_markdown_instruction: "In the last puzzle we kept Sam from\nleaving on the left, now let's do the same thing on the right. Complete the\n`safe-right?` function to make sure Sam can't go off the right side of the\nscreen."
      Sam the Butterfly 4_markdown_instruction: "Huh, we can keep Sam from leaving\non the left, or we can keep him from leaving on the right, but how can we\nkeep him safe from leaving both directions? Try using the `and` block to program\nthe function `on-screen?` to check if Sam is `safe-left?` and `safe-right?`"
      Sam the Butterfly 5_markdown_instruction: "Free Play: Awesome, we've kept\nSam safe on the left and right! Use this free play stage to experiment with\nyour functions and further improve `onscreen?`"
      Sample Free Response_markdown_instruction: "In this module, you learned about\nhow information gets shuttled from place-to-place on the internet, and the\nmajor steps along the way.  **Write a lesson plan for your students about\nhow packets are constructed.**\\r\n\\r\n### How this task is reviewed\\r\nThis\ntask is peer-reviewed by 2 peers, using the following rubric:\\r\n\\r\n - Lesson\nincludes lecture\\r\n - Lesson includes activity on network simulator"
      Screen Size_markdown_instruction: "# Hardware Accessibility: Screen Size\\r\n\\r\nAnother\nthing to consider about accessibility for different users is the size of the\ndevice they are using to view the web page. You can do a basic test for this\nby resizing the view area to see how the website changes with the changes\nin size.\\r\n\\r\n# Do This\\r\n\\r\n* Use the dragger to resize your preview\narea to see how your website adapts.\\r\n* Shrink the size of the instructions\narea to resize how tall the web page is"
      Search Engine Optimizer_markdown_instruction: "# Search Engine Optimizer (SEO)\\r\n\\r\n**Search\nEngine Optimization** is the process of maximizing the number of visitors\nto a particular website by ensuring that the site appears high on the list\nof results returned by a search engine.  A **Search Engine Optimizer** is\na tool that analyzes a website on different qualities that lead to a higher\nrank on different search engines.\\r\n\\r\n# Do This\\r\n\\r\n* Open the SEO tool\nlinked below in another tab\\r\n* Try each of the websites on your list on\nthe SEO:\\r\n\\t* Look at the score each website receives\\r\n    * Does your\nranking generally correlate to the SEO scores?\\r\n* Take a look at how the\nSEO is rating websites:\\r\n    * Look through the different sections of the\nrating\\r\n    ![](https://images.code.org/dc938c470e578683f788d641c22a2699-image-1476900428201.05.20\nPM.png) \\r\n    * What factors does the SEO use to score websites? \\r\n    *\nAre there new factors you could use in your algorithm that you had not thought\nof before?"
      Software Accessibility_markdown_instruction: "# Software Accessibility: Validator\\r\n\\r\nHTML\nis designed to display the same way on all computers, but sometimes you’ll\nnotice that different web browsers, or even different versions of the same\nbrowser, display a website differently. Often this is because you either missed\na rule of HTML, or didn’t describe your content specifically enough. Fortunately\nthere’s a tool called the Validator that can check your code for errors!\\r\n\\r\n#\nDo This\\r\n\\r\n* Open up the <a href=\"https://validator.w3.org/#validate_by_input\"\ntarget=\"_blank\">Validator - Website</a>\\r\n* For each html file in your\nproject\\r\n\\t* Copy the html into the box\\r\n    * Click check to see if there\nare an error\\r\n\\t* Make a list of all unique errors.\\r\n    * For each error,\nwrite in your own words what you think it means\\r\n    * For each error, search\nto find a potential solution."
      Standalone_Artist_1_markdown_instruction: "Welcome to Artist! First off, let's\ntry to make a simple square using the turn right block and move forward block.\nEach side should be 100 pixels long.\\r\n\\r\n"
      Standalone_Artist_2_markdown_instruction: "Draw this diamond with 120 and 60\ndegree angles and 150 pixel long sides.\\r\n\\r\n"
      Standalone_Artist_3_markdown_instruction: "Can you draw this hexagon with 100\npixel sides and 60 degree turns?\\r\n\\r\n"
      Standalone_Artist_4_markdown_instruction: "Now you've got a new block to play\nwith, the loop. This will repeat a set of commands. What happens if you loop\nthese commands 6 times?\\r\n\\r\n"
      Standalone_Artist_5.5_markdown_instruction: "Notice how we simplified the diamond\ncode by turning it into a loop. You can loop that whole sequence 12 times\nto draw the flower. Hint: You'll need to turn 30 degrees after your diamond\nloop so you don't keep drawing over the same diamond.\\r\n\\r\n"
      Standalone_Artist_5_markdown_instruction: "How many times do you need to loop\nthis diamond to draw the flower?\\r\n\\r\n"
      Standalone_Artist_6_markdown_instruction: "Loop this hexagon code 6 times to\ncreate the design. How many degrees will you need to turn each time? Hint:\ndivide the number of degrees in a circle by the number of times you are looping.\\r\n\\r\n"
      Standalone_Artist_7_markdown_instruction: "A function is another programming\ntool to help you avoid repeating yourself. This function draws a flower, so\nyou can use it any time you want to draw a flower. Use this and the new jump\nblock to draw these flowers. Hint: The flowers are 150 pixels apart\\r\n\\r\n"
      Standalone_Artist_8_markdown_instruction: "Here's a function called `Draw\na shape` that we've programmed to draw hexagons. Run the code to see what\nit does and then experiment with the function to see what happens. Can you\nmake it draw a pattern of squares, triangles, or octagons?\\r\n\\r\n"
      Standalone_Artist_9_markdown_instruction: "Now go ahead and make whatever picture\nyou'd like! You've even got an empty function that you can make do whatever\nyou want!\\r\n\\r\n"
      'Stop: List Review_markdown_instruction': "## Choose: Array or Variable?\\r\n\\r\nYour\napp needs to store the following information. For each type of information,\ndecide whether you would use an array or a variable to store it:\\r\n \\r\n*\nAll the messages a user has sent\\r\n* The highest score a user has ever reached\non the app\\r\n* A username and password to unlock the app\\r\n\\r\n"
      'Stop: Review Getters and Setters_markdown_instruction': "# Reflection\\r\n\\r\nQuestions:\\r\n\\r\n*\nWhat is the difference between getters and setters?\\r\n* Why would you want\nto save the information from a getter in a variable?"
      'Task: ASCII Representation of your Name_markdown_instruction': "# TASK: Write\nyour name in ASCII\\r\n\\r\nUse the ASCII Table below to write your name in\nthe decimal and binary representations: \\r\n<br><br>\\r\n\\r\n![](https://images.code.org/8dc285b920911bdfb8c53db74db5c272-image-1474246518064.54.59\nPM.png)\\r\n\\r\n<br><br>\\r\nThe full ASCII table can be found <a href=\"https://upload.wikimedia.org/wikipedia/commons/d/dd/ASCII-Table.svg\"\ntarget=_blank> here</a>.\\r\n\\r\n"
      'Task: Develop a Battleship Protocol_markdown_instruction': "# Task: Create\na Battleship Protocol\\r\n\\r\nOne of the best ways to prepare to teach a lesson\nis by actually doing the activity yourself.  As you complete the activity,\nconsider the misconceptions that your students may have and what sorts of\nquestions you can ask to help them overcome these barriers.  \\r\n<br>\\r\nWhile\ncompleting this activity, note: \\r\n<ol>\\r\n<li>There are many 'correct'\nanswers as long as the rules are used consistently. </li>\\r\n<li> Challenge\nyourself to develop an *efficient* protocol.  In this case, this means you\nshould consider the fewest number of bits necessary to encode the whole message.\n</li>\\r\n<li> If you have already looked at the exemplar protocol in this\nlesson, try to create your own unique protocol.  This will help you empathize\nwith students as you think about the design process necessary to develop the\nprotocol.</li></ol>\\r\n<br>\\r\n\\r\n><a href=”https://docs.google.com/document/d/1hq1UNK1Q4K0LHqmu0_yeO0a0NQKHzC8W--Q0QaISHVI/edit”\ntarget=_blank> Click here for the Battleship Protocols Activity Guide >> </a>\\r\n<br>\\r\n><a\nhref= \"https://code.org/curriculum/docs/csp/U2L03-battleship-exemplar.png\"\ntarget=_blank > Click here for an exemplar solution >> </a>\\r\n\\r\n<br><br>\\r\n\\r\nUse\nthe space below to share your protocol."
      'Task: Encode an Experience_markdown_instruction': "# Task: Encode an Experience\\r\n\\r\n##\nDo the Activity\\r\nOne of the best ways to prepare to help students with the\nchallenges of this Practice PT is by actually encoding an experience yourself.  As\nyou complete the activity, consider the misconceptions that your students\nmay have and what sorts of questions you can ask to help them overcome these\nbarriers. In order to do this activity, you'll want to access the encode\nan experience activity guide and project template, both linked below. \\r\n\\r\n\\r\n-\nFirst, you'll want to read through the <a href =”https://curriculum.code.org/csp/unit2/6/”\ntarget=_blank> lesson plan <i class=\"fa fa-external-link-square\"/></a> and\nthe <a href=”https://docs.google.com/document/d/1kmIJlEyS4V6kU47vzyZMlENsdgLJoV-ZLyYQ2RIjuN8/edit”\ntarget=_blank> project activity guide <i class=\"fa fa-external-link-square\"/></a>\\r\n-\nThen, encode a real life experience or event in binary! Follow the <a href\n= “https://docs.google.com/document/d/1Qao_Qq5Z4Ta1ns_K3T7wip53MLQvJOouwFHIP2zmKsE/edit”\ntarget=_blank> project tempalte <i class=\"fa fa-external-link-square\"/></a>\nto step through encoding an experience of your own. \\r\n\\r\n\\r\n<hr>\\r\n###\n<a href= \"http://forum.code.org/c/csp2/lesson06\" target=_blank> Head to\nthe Forum >></a>\\r\n<hr>\\r\n\\r\n\\r\n## Share Your Encoding and Ideas\\r\nHead\nto the forum and share your ideas about this activity. Specifically, share:\n\\r\n\\r\n\\r\n- Your encoded experience (feel free to upload and share your\ncompleted template).\\r\n- Misconceptions that your students may have and what\nsorts of questions you can ask to help them overcome these barriers.\\r\n\\r\n\\r\n##  Submit\nthe Link for your Forum Post\\r\nOnce you’ve posted in the forum, share a link\nhere. In order to get a direct link to your post, click the link icon directly\nunder your post (shown in the picture below):\\r\n\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\\r\n\\r\n\\r\n"
      'Task: Explore Google Trends_markdown_instruction': "# Task: Explore Google\nTrends\\r\n\\r\n\\r\nOne of the best ways to prepare to help students with this\nchunk of lessons is to start understanding ways to see trends in data. Here\nwe’ll give some examples of related topics to search in google trends. In\norder to do this activity you’ll first want to review the how to guide for\ngoogle trends (the last resource in this module). \\r\n\\r\n\\r\n- Once you’ve\nread the how to guide, head to <a href = \"https://www.google.com/trends/\"\ntarget=_blank> Google Trends <i class=\"fa fa-external-link-square\"/></a>\\r\n-\nPlay around with different queries that might reveal interesting relationships\nin what people are searching for on Google. For example: \\r\n -  s7 note and  samsung\nstock\\r\n - early voting and voter registration\\r\n - earthquake and  italy\\r\n-\nExplore differences over time and by location \\r\n - Look at different time\nperiods (1 week, 30 days, 90 days, 1 year)\\r\n - Look at different locations\n(different countries, states, cities)\\r\n\\r\n\\r\n<hr>\\r\n### <a href= \"http://forum.code.org/c/csp2/lesson08\"\ntarget=_blank> Head to the Forum >></a>\\r\n<hr>\\r\n\\r\n## Share Your Findings\\r\nHead\nto the forum and share your findings. Specifically, share: \\r\n\\r\n\\r\n- The\ntopics you explored in Google Trends\\r\n- Surprising or interesting relationships\nor trends \\r\n- Misconceptions that your students may have and what sorts\nof questions you can ask to help them overcome these barriers.\\r\n\\r\n\\r\n##  Submit\nthe Link for your Forum Post\\r\nOnce you’ve posted in the forum, share a link\nhere. In order to get a direct link to your post, click the link icon directly\nunder your post (shown in the picture below):\\r\n\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\\r\n"
      'Task: Make your own Favicon_markdown_instruction': "# Task: Make your own\nFavicon\\r\n\\r\n## Do the Activity\\r\n\\r\nOne of the best ways to prepare to\nteach a lesson is by actually doing the activity yourself.  As you complete\nthe activity, consider the misconceptions that your students may have and\nwhat sorts of questions you can ask to help them overcome these barriers.\nIn order to do this activity, you'll want to access the color pixelation\nwidget (which is a bubble in this module) as well as the favicon project description\n(linked below). \\r\n\\r\n\\r\n- First, you'll want to play around with the\ncolor pixelation widget and get a sense of how it works.\\r\n- Then, work to\nmake your own favicon! Follow the instructions which are available in <a href\n= “studio.code.org/s/csp2/stage/4/puzzle/8” target=_blank>unit 2 lesson 4  <i\nclass=\"fa fa-external-link-square\"/></a> \\r\n\\r\n\\r\n<hr>\\r\n### <a href=\n\"http://forum.code.org/c/csp2/lesson04\" target=_blank> Head to the Forum\n>></a>\\r\n<hr>\\r\n\\r\n\\r\n## Share Your Favicon and Ideas\\r\nHead to the forum\nand share your ideas about this activity. Specifically, share: \\r\n\\r\n- A\nscreenshot of your Favicon.\\r\n- Misconceptions that your students may have\nand what sorts of questions you can ask to help them overcome these barriers.\\r\n\\r\n\\r\n##  Submit\nthe Link for your Forum Post\\r\n\\r\nOnce you’ve posted in the forum, share\na link here. In order to get a direct link to your post, click the link icon\ndirectly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\\r\n\\r\n\\r\n\\r\n\\r\n\\r\n\\r\n"
      'Task: Write your own Heuristic_markdown_instruction': "# Task: Write your\nown Heuristic\\r\n\\r\n## Do the Activity\\r\n\\r\nOne of the best ways to prepare\nto teach a lesson is by actually doing the activity yourself.  As you complete\nthe activity, consider the misconceptions that your students may have and\nwhat sorts of questions you can ask to help them overcome these barriers.\nIn order to do this activity, you'll want to access the text compression\nwidget (which is a bubble in this module) as well as the heuristic worksheet\n(linked below). \\r\n\\r\n- First, you'll want to play around with the text\ncompression widget and get a sense of the types of patterns that you can pull\nout. \\r\n- Then, work to develop your own heuristic! Feel free to follow <a\nhref=”https://docs.google.com/document/d/1U1SPSyBYS9tnJmpnQd-xbWnhb6TpwdJ6i82H662hxdM/edit”\ntarget=_blank>this activity guide, from lesson 2.</a>\\r\n\\r\n<hr>\\r\n### <a\nhref= \"http://forum.code.org/c/csp2/lesson02\" target=_blank> Head to the\nForum >></a>\\r\n<hr>\\r\n\\r\n\\r\n## Share Your Heuristic and Ideas\\r\nHead\nto the forum and share your ideas about this activity. Specifically, share:\n\\r\n\\r\n- The heuristic you developed.\\r\n- Misconceptions that your students\nmay have and what sorts of questions you can ask to help them overcome these\nbarriers.\\r\n\\r\n##  Submit the Link for your Forum Post\\r\n\\r\nOnce you’ve\nposted in the forum, share a link here. In order to get a direct link to your\npost, click the link icon directly under your post (shown in the picture below):\\r\n\\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\\r\n\\r\n\\r\n\\r\n"
      'Teaching Practice Plan: Assessing Student Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n# Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 1. Your plan should address the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions (following lesson 7 and lesson 14), practice performance task (lesson 14)\r\n\r\n\r\n- Making your own assessments\r\n\r\n - What types of assessments might you need to create or use on top of those provided in the curriculum? \r\n - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n"
      'Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/cd0612e68d70f40e2fd058fbf55b4abc-image-1474643895905.19.03 AM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 1, as well as a specific plan for one of the technology-dependent lessons highlighted in red on the right. Your plan should be broken into two parts, and address the following things: \r\n\r\n- General strategies that you’ll apply throughout unit 1\r\n - Throughout unit 1, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \r\n\r\n\r\n- Strategies specific to a selected lesson\r\n - Which of the highlighted lessons on the right are you discussing? \r\n - What is your plan for managing transitions between your instruction and students being in the tool? *Note: your response should include specifics about the lesson*\r\n - How do you plan to introduce the lesson challenge and the tool that students will use to complete the challenge? *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n \r\n"
      'Teaching Practice Plan: Discovery Learning_markdown_instruction': "> **NOTE:\nbefore you start this task, make sure you’ve reviewed the resources in this\nmodule, and have a good sense of the connections to unit 1. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nTeaching Practice Plan: Discovery Learning\\r\n\\r\nFor this task, you’re going\nto develop and submit a Teaching Practice Plan, which details your plan for\nbuilding and supporting a culture of discovery learning in your classroom\nthroughout unit 1. Your plan should address the following: \\r\n\\r\n- For lessons\nthat call for students to discover a key computer science concept, how do\nyou plan to balance your time frontloading content instruction with students’\ntime completing the activity and constructing their own knowledge? \\r\n- What\nis your strategy for supporting students who struggle with this model of teaching\nand learning, and look to you to ‘just give them the answer’?\\r\n- How do\nyou plan to make sure students leave a lesson having discovered the underlying\nconcept(s)? \\r\n\\r\nYou can type out your teaching practice plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthis practice will fit into your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n"
      'Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Teaching Practice Plan: Group Work and Peer Learning\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 1. Your plan should address the following things: \r\n\r\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)? \r\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\r\n- How can you help students understand and appreciate the importance of learning through and from one another? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n\r\n\r\n\r\n"
      'Teaching Practice Plan: Group Work and Peer Learning`_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Teaching Practice Plan: Group Work and Peer Learning`\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 1. Your plan should address the following things: \r\n\r\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)? \r\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\r\n- How can you help students understand and appreciate the importance of learning through and from one another? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n\r\n\r\n\r\n"
      Teaching and Student Support Plan_markdown_instruction: "> **NOTE: before you\nstart this task, make sure you’ve reviewed the lesson resources in this module,\nand have a good sense of how the lesson works. If you haven’t already reviewed\nthe materials, do that now and come back to this task later.**\\r\n\\r\n# Teaching\nand Student Support plan\\r\n## Task Description\\r\n\\r\nNow that you have a\nbetter sense of this lesson, let’s think about the types of supports students\nwill need in order to successfully complete it. Since the curriculum is based\non inquiry learning, lessons feature activities that engage students in discovering\ncore concepts themselves. It’s important to think through implementation plans\nand student support. In this task you will make a plan for teaching and student\nsupport that takes into account differentiation strategies and make-up work\nfor absent students. Your teaching and student support plan should cover the\nfollowing: \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n<br><Br>\\r\n\\r\n- **Plan for\ncatching up absent students:**\\r\n\\r\n - How will absent students catch up\non activities they missed? \\r\n\\r\nYou can type out your teaching and student\nsupport plan in the box below, or you can upload a word doc or pdf file. \\r\n\\r\n##\nGetting Credit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow the lesson will play out in your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. "
      Test Contained Free Response_markdown_instruction: "My free response markdown\ninstructions"
      Test Free Response Assessment Question_markdown_instruction: "Imagine that\nyou have to send a list of 10 numbers to friend in binary using the bit-sending\nwidget. The numbers are all between 0 and 100. Describe the issues or problems\nthat you and your friend would encounter in trying to do this. How would you\naddress these problem?\n\n### Hello!\n"
      Test Markdown level_markdown_instruction: "Enter prompt here\n\n# Test Markdown\ntitle\n\nTest Markdown prompt\n\n\n"
      Test embedded K1 Blockly in instructions_markdown_instruction: "Use <xml><block\ntype=\"maze_moveWest\"/></xml> **three** times to get the harvester to the\ncorn! Don't forget to use <xml><block type=\"harvester_corn\"/></xml> to\npick the corn!"
      Test of comment block_markdown_instruction: "## instructions\\r\n\\r\nDrag out\nthe subgoal label block you want."
      Testing Quantum Farmer_markdown_instruction: "Wow, look at that! \\r\n\\r\nI\ndon't know how many shovelfuls of dirt this hole needs.  \\r\nCan you write\na program that keeps using the `fill` block until the ground is even?  "
      Text Compression 1_markdown_instruction: "Look for patterns (repeated words\nor phrases) in the text. Enter the patterns you see into the dictionary on\nthe right. As you type entries into the dictionary, the symbol for the entry\nis inserted into the text in place of the pattern.\\r\n\\r\n<img src=\"http://code.org/api/hour/begin_text_compression.png\">"
      The Accelerometer_markdown_instruction: "Today you’re going to learn how to\nuse and create **functions**.\\r\n\\r\nCreating a function lets you make your\nown blocks! There are two parts to a function: \\r\n\\r\nMaking a newly named\nblock that has all of the code you want to run inside of it. \\r\n-xml of function\ndefinition- \\r\n\\r\nThe single green block itself that you use, or call, to\nrun the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare to\nget familiar with functions, learn how to edit them, and create your own!"
      The Accelerometer_2018_markdown_instruction: "Today you’re going to learn how\nto use and create **functions**.\\r\n\\r\nCreating a function lets you make\nyour own blocks! There are two parts to a function: \\r\n\\r\nMaking a newly\nnamed block that has all of the code you want to run inside of it. \\r\n-xml\nof function definition- \\r\n\\r\nThe single green block itself that you use,\nor call, to run the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare\nto get familiar with functions, learn how to edit them, and create your own!"
      'The Internet: IP Addresses & DNS_markdown_instruction': "[Video guide and\nquestions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)"
      'The Internet: IP Addresses & DNS_2018_markdown_instruction': "[Video guide\nand questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)"
      'The Internet: Wires, Cables, and Wifi_markdown_instruction': "[Video guide\nand questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)"
      'The Internet: Wires, Cables, and Wifi_2018_markdown_instruction': "[Video\nguide and questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)"
      The Official Peer Instruction Blog_markdown_instruction: "The following link\nis to a recent blog post describing the basic approach to and benefits of\npeer learning: "
      The Vigenere Cipher Widget_markdown_instruction: "# Encrypt and decrypt a message\nwith the Vigenère cipher\\r\n\\r\nThis is an interactive version of the Vigenère\ncipher that animates the encryption and decryption as it’s happening, given\na piece of text to encrypt or decrypt and the key.\\r\n\\r\n# Do this\\r\n###\nEncrypt a message\\r\nClick Step several times, and trace what’s happening.\nPay attention to:\\r\n\\r\n- How the ciphertext is being produced\\r\n- What\nhappens when you get to the last character of the key\\r\n- After you’ve stepped\nthrough a few characters click Play to watch the rest animate\\r\n- Hit Restart\nand play the animation again. You can use the speed slider to speed it up\nor slow it down  \\r\n\\r\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\\r\n\\r\n###\nDecrypt a message\\r\nEncrypt a message as above, then:  \\r\n\\r\n- Highlight\nand copy the ciphertext\\r\n- Paste it into the plaintext area. Note: Don’t\nchange the key\\r\n- Change the Encrypt/Decrypt toggle to Decrypt\\r\n- Hit\nStep a few times, and then Play\\r\n\\r\nYou should see the original text emerge.  \\r\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\\r\n\\r\n\\r\nHow\nhard would it be to crack a message encrypted with this cipher? Does the length\nof the key make a difference?"
      The Vigenere Cipher_markdown_instruction: "# Encrypt and decrypt a message\nwith the Vigenère cipher\\r\n\\r\nThis is an interactive version of the Vigenère\ncipher that animates the encryption and decryption as it’s happening, given\na piece of text to encrypt or decrypt and the key.\\r\n\\r\n# Do this\\r\n###\nEncrypt a message\\r\nClick Step several times, and trace what’s happening.\nPay attention to:\\r\n\\r\n- How the ciphertext is being produced\\r\n- What\nhappens when you get to the last character of the key\\r\n- After you’ve stepped\nthrough a few characters click Play to watch the rest animate\\r\n- Hit Restart\nand play the animation again. You can use the speed slider to speed it up\nor slow it down  \\r\n\\r\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\\r\n\\r\n###\nDecrypt a message\\r\nEncrypt a message as above, then:  \\r\n\\r\n- Highlight\nand copy the ciphertext\\r\n- Paste it into the plaintext area. Note: Don’t\nchange the key\\r\n- Change the Encrypt/Decrypt toggle to Decrypt\\r\n- Hit\nStep a few times, and then Play\\r\n\\r\nYou should see the original text emerge.  \\r\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\\r\n\\r\n\\r\nHow\nhard would it be to crack a message encrypted with this cipher? Does the length\nof the key make a difference?"
      Top-Down Design_markdown_instruction: "## What is Top-Down Design? \\r\n\\r\nIn\nlesson 6 students are introduced to the concept of `Top-Down Design` which\nis a planning process we use here to help students break their ideas down\ninto parts. It might sound like a complex idea, but really the focus is just\non starting at a high level and stating the elements you want to put into\nyour program, then grouping concepts that are similar and using abstraction\n(functions) to put a label on those like parts. For example, you might say\nthat you want to create a turtle drawing that has dogs, cats, and bikes. Then\nyou would need to go one step further and describe how each of those components\nof your drawing are composed.\\r\n\\r\nCheck out the resource below for a non-programming\nexample of how this grouping might work. "
      Total Artist Clone Me_markdown_instruction: "Freeplay: Here are the functions\nyou've written, and some more for you to play with. Play with the pen width\nto see how different your drawings look!\\r\n\\r\n"
      Trent Test Level_markdown_instruction: "More questions!\n"
      'Tuesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction': "So\nfar we've seen four lessons from unit 1 — two model lessons delivered by\nfacilitators and two lessons by participants. With your partner, consider:\\r\n\\r\n-\nHow have people wearing teacher hats been balancing their time leading or\nguiding with the student-hat’s time to get into activities and tools?\\r\n-\nWhat strategies have been effective for managing the transition to tools?\nWhat strategies are effective in getting peoples’ attention once they’re lost\nin a tool?\\r\n- What are your  current thoughts about the appropriate balance\nof teacher-guided time VS time in the tools or with the activities?\\r\n\\r\nUse\nthe space below to record any thoughts, recommendations, or commentary."
      'Tuesday Report: Discovery Learning in Unit 1_markdown_instruction': "So far\nwe've seen four lessons from unit 1 — two model lessons delivered by facilitators\nand two lessons by participants. With your partner, consider:\\r\n\\r\n- What\nopportunities have you seen for learners to discover concepts for themselves?\\r\n-\nHow did the process of engaging in discovery activities change the pacing,\nflow, or outcome of the lesson?\\r\n- What benefits and pitfalls did you see\nin discovery activities?\\r\n\\r\nUse the space below to record any thoughts,\nrecommendations, or commentary."
      'Tuesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction': "So\nfar we've seen four lessons from unit 1 — two model lessons delivered by\nfacilitators and two lessons by participants. With your partner, consider:\\r\n\\r\n-\nWhere did you see group work and peer learning in these lessons? \\r\n- What\nare the benefits of using group work and peer learning here? \\r\n- How does\nusing peer learning and group work as a strategy in the lesson impact how\nthe activities run? \\r\n\\r\nUse the space below to record any thoughts, recommendations,\nor commentary."
      'Tuesday Report: Measuring Student Learning in Unit 1_markdown_instruction': "So\nfar we've seen four lessons from unit 1 — two model lessons delivered by\nfacilitators and two lessons by participants. With your partner, consider:\\r\n\\r\n-\nWhat opportunities have you seen for assessing learners’ knowledge (prior\nknowledge, knowledge gained during the lesson, etc)?\\r\n- What assessments\nare available in the curriculum?\\r\n- What strategies would be effective for\nchecking in on what students know?\\r\n\\r\nUse the space below to record any\nthoughts, recommendations, or commentary."
      'Tuesday Report: discovery learning_markdown_instruction': "So far we've seen\nfour lessons from unit 1 -- two model lessons delivered by facilitators and\ntwo lessons by participants. With your partner, consider:\\r\n\\r\n- What opportunities\nhave you seen for learners to discover concepts for themselves? \\r\n- How\ndid the process of engaging in discovery activities change the pacing, flow,\nor outcome of the lesson? \\r\n- What benefits and pitfalls did you see in\ndiscovery activities? \\r\n\\r\nUse the space below to record any thoughts,\nrecommendations, or commentary"
      U1L1 - FR computer science word association_markdown_instruction: "**Directions:**\n\nYou're\nin a class called *Computer Science Principles*.\n\nYou might not know anything\nabout computer science right now.  You might know a few things.  We're going\nto take the pulse of the class to see on the first day what we think computer\nscience involves, and we'll revisit this occasionally.\n\n**Do this:**\n\n**Without\nusing the words _computer_ or *science* write 5 to 10 words or phrases** that\ncome to mind when you hear the term \"computer science\". What do you think\nabout?\n\n\n\n"
      U1L10 Assessment Free Response_markdown_instruction: "Many languages do not\nuse the characters of U.S. English. Suppose you wanted to be able to encode\nthe characters of every language on earth within a single protocol. Guess\nhow many characters would need to be encoded and calculate the number of bits\nthat would be required per character. Then discuss the benefits and drawbacks\nof using this single unified system.\n"
      U1L10 Assessment Free Response_2018_markdown_instruction: "Many languages do\nnot use the characters of U.S. English. Suppose you wanted to be able to encode\nthe characters of every language on earth within a single protocol. Guess\nhow many characters would need to be encoded and calculate the number of bits\nthat would be required per character. Then discuss the benefits and drawbacks\nof using this single unified system.\n"
      U1L10 Journal Free Response_markdown_instruction: "Respond to this prompt or\nto another as directed by your teacher.\n\nDescribe the steps involved in\ngetting a text message from an idea in your head to your friend's computer\nscreen.\n"
      U1L10 NetSim numbers with decimal_markdown_instruction: "**Instructions**:\\r\n\\r\nInvent\nand test a protocol for encoding and sending text messages. Your protocol\nmust include the letters a-z, spaces, and common punctuation marks. You may\nadd additional characters if you wish. See the worksheet handed out by your\nteacher for more detailed instructions!"
      U1L11 Collaboration Reflection_markdown_instruction: "What problems arose in\nyour efforts to create a working protocol? How did you think about the problem(s)\nin order to solve it?\n\nDescribe one instance in which collaboration with\na partner influenced the final protocol your team produced.\n"
      U1L11 Collaboration Reflection_2018_markdown_instruction: "What problems arose\nin your efforts to create a working protocol? How did you think about the\nproblem(s) in order to solve it?\n\nDescribe one instance in which collaboration\nwith a partner influenced the final protocol your team produced.\n"
      U1L11 NetSim numbers with Ascii_markdown_instruction: "## Sending Formatted\nText Activity\\r\n\\r\n**Directions:**  \\r\nWork with a partner or in a small\nteam to develop a protocol that allows you to send formatted text. \\r\n\\r\n**Guidelines:**  \\r\n-\nBoth the text and the formatting instructions must be derived from the printable\nASCII character set (i.e. codes 32-126).\\r\n- Your protocol must encode at\nleast:\\r\n\\t- bold, italics, and underlining\\r\n\\t- three different font sizes\n(large, medium, and small)\\r\n\\t- three different font colors (red, black,\nblue)\\r\n- You will demonstrate that your protocol works by having the recipient\nbe able to faithfully draw (or produce in some fashion) the formatted text\nbased only on the data she received through an ASCII-text version of the Internet\nSimulator. A sample message can be found below.\\r\n\\r\n![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\\r\n\\r\n**Develop\nYour Protocol:**  \\r\nUse the worksheet handed out by your teacher to brainstorm\nideas for your protocol. Iteratively improve your protocol by testing it out\nwith simple sample messages.\\r\n"
      U1L11 Reflection Free Response_markdown_instruction: "Respond to this prompt\nor to another as directed by your teacher.\n\nHow long did it take to send\na formatted text message using your protocol? \n\nHow many extra bits did\nyour encoding scheme need to communicate the text?  Calculate the percentage\nof bits that were used for formatting instead of sending the actual text message.\n\n\npercent = (formatting bits)/(total bits) * 100\n\n\n"
      U1L11 Reflection Free Response_2018_markdown_instruction: "Respond to this\nprompt or to another as directed by your teacher.\n\nHow long did it take\nto send a formatted text message using your protocol? \n\nHow many extra bits\ndid your encoding scheme need to communicate the text?  Calculate the percentage\nof bits that were used for formatting instead of sending the actual text message.\n\n\npercent = (formatting bits)/(total bits) * 100\n\n\n"
      U1L12 Reflection Free Response_markdown_instruction: "Respond to this prompt\nor to another as directed by your teacher.\n\nThe salesperson in a cell phone\nstore is telling me that the phone I'm considering has 8GB of memory, which\nmeans I can save 10,000 photos taken with the phone's camera! \n\nIs the\nsalesperson telling me the truth? Why or why not?\n"
      U1L13 Assess Text Compression amount_markdown_instruction: "Here's the same\ncompressed text that you saw on the last level, but now we also see the size\nof the original, uncompressed text. On the previous level you reconstructed\nthe text by tracing back through the dictionary. Now we're going to think\nabout if this is a \"good\" compression rate.\n\n![](https://images.code.org/ffb941527193cd04c02ff2ce392d02e6-image-1439479301236.20.23\nAM.png)\n\nIn the text box below, answer the following two questions:\n\n-\nWhat is the compression rate, or the compressed text size + dictionary size\ncompared to the original text size? (as a percentage) \n- Is this a \"good\"\ncompression rate? Why or why not? \n\n\n"
      U1L13 Assessment 1_markdown_instruction: "Why do you want to compress anything?\nWhat's the point?\\r\n"
      U1L13 Assessment 2_markdown_instruction: "Why is compression a \"hard problem\"\nfor computers?  Draw on your own experience compressing text with the text\ncompression widget. Is there a way to know when you've compressed it the\nmost? Explain why you can or can't know.\\r\n"
      U1L13 Reflection 1_markdown_instruction: "What made compressing text hard to\ndo?"
      U1L13 Reflection 2_markdown_instruction: "Describe the thinking process you\nused in solving this challenge."
      U1L13 Reflection Free Response_markdown_instruction: "If you send a compressed\nsegment of text would your friend will be able to read it?  \n\nWhy is the\ndictionary important?\n"
      U1L13 Text Compression_markdown_instruction: "Look for patterns (repeated words\nor phrases) in the text. Enter the patterns you see into the dictionary on\nthe right. As you type entries into the dictionary, the symbol for the entry\nis inserted into the text in place of the pattern."
      U1L14 - Assessment 2_markdown_instruction: "What would happen if we didn't\ninclude width and height bits in our protocol?\\r\n\\r\nAssume your friend just\nsent you 32 bits of pixel data (just the 0s and 1s for black and white pixels).\nCould you recover the original image? If so, how? If not, why not?\\r\n\\r\n\\r\n"
      U1L14 Assessment 1_markdown_instruction: "Please answer the following 3 questions\nin the space below.\\r\n\\r\n1. What are the **dimensions** (width and height)\nof the **largest image** we can make with the pixelation widget? \\r\n\\r\n2.\nHow many **total bits** would there be in the the largest possible image we\ncould make with the pixelation widget (assuming 1 bit per pixel)?\\r\n\\r\n3.\nHow many **total bits** bits would it take to represent **the smallest possible\nimage** (i.e. an image with one pixel)?\\r\n"
      U1L16 Reflection Free Response_markdown_instruction: "Respond to this prompt\nor to another as directed by your teacher.\n\nIf you had the opportunity to\nrepeat this lesson, what would you do differently?\n\nDescribe something you\nlearned in this unit that will impact your future work in this class.\n\n\n"
      U1L2 Free response assessment question_markdown_instruction: "Provide an example\nof a question that could NOT be answered with a single binary message. Explain\nwhy this is the case, making reference to the definition of a binary message.\n\\r\n\\r\n"
      U1L2 Free response assessment question_2018_markdown_instruction: "Provide\nan example of a question that could NOT be answered with a single binary message.\nExplain why this is the case, making reference to the definition of a binary\nmessage. \\r\n\\r\n"
      U1L2 Free response reflection question_markdown_instruction: " Modify your\nquestion so that it could be answered with a binary message. Explain why it\ncan now be answered with a binary message.\n\n\n"
      U1L3 Free Response_markdown_instruction: "How did collaboration impact the\ndevelopment of your protocol? What challenges did working in a group present\nand in what ways did it positively impact your final product?"
      U1L3 Free Response_2018_markdown_instruction: "How did collaboration impact\nthe development of your protocol? What challenges did working in a group present\nand in what ways did it positively impact your final product?"
      U1L3 Free response reflection question_markdown_instruction: "Recall when you\nbuilt your binary message sending device. Why did we decide to send a message\nas a sequence of states (A and B) rather than modifying our devices to represent\nmore states (State C, State D, State E, ...)?\\r\n"
      U1L3 Free response reflection question_2018_markdown_instruction: "Recall when\nyou built your binary message sending device. Why did we decide to send a\nmessage as a sequence of states (A and B) rather than modifying our devices\nto represent more states (State C, State D, State E, ...)?\\r\n"
      U1L4 Free Response Reflection_markdown_instruction: "A binary message was recorded\nas a wave as shown in the image below. Can you decode the message? Explain\nwhat information you would need in order to successfully decode the message\ninto A’s and B’s.\n\n![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)\n\n"
      U1L4 Free Response Reflection_2018_markdown_instruction: "A binary message\nwas recorded as a wave as shown in the image below. Can you decode the message?\nExplain what information you would need in order to successfully decode the\nmessage into A’s and B’s.\n\n![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)\n\n"
      U1L4 Free response reflection question_markdown_instruction: "Complete the\nLesson 2 Rubric.\n\nA binary message consisting of four bits was sent to you\nby a friend. The message was supposed to be ABAB. Unfortunately, your friend\nsent the message at 1/2 the bit rate you agreed upon. What message did you\nreceive instead?\n"
      U1L4 NetSim SendAB_markdown_instruction: "## Coordination and Binary Messages\nActivity\\r\n\\r\n**Develop your Protocol**\\r\nDevelop a protocol that allows\nyou to use Internet Simulator to relay a message, i.e. one member sends a\nmessage and the other member sends the same message back. You or a teacher\nwill say “Go” to begin the exchange but otherwise all communication must be\nthrough the widget. As you’re working, consider:\\r\n\\r\n- How will you know\nwhen the exchange is supposed to begin?\\r\n- How will you know whose turn\nit is to send or receive the message?\\r\n- How will you coordinate your actions?\\r\n\\r\nDocument\nyour protocol on the worksheet provided, and test your protocol using the\nInternet Simulator"
      U1L5 Free Response Assessment_markdown_instruction: "Complete the rubric for\nLesson 5. Then respond to this prompt using approximately 100 words.\n\nReflect\non the progress of communication innovations. \n\nWhat do you notice across\nthe variety of systems? \n\nSpeculate on the next phase of communication innovations.\n"
      U1L5 Free Response Lesson Review_markdown_instruction: "Complete these three\nsentences.\n\nThree big ideas from the lesson today are _____ and _____ and\n_____ . \nBut the most important or interesting thing I learned today is _____.\n\n\nAt the beginning of the class, I thought _______ but now i know _______.\n"
      U1L5 How the Internet Works - Video_markdown_instruction: "[Video guide and\nquestions](https://docs.google.com/document/d/1YviZiL1VjpUa9Gbe3j_4lETKyoZqEW14_RG7EEWEwgU/edit)"
      U1L6 Free Response Assessment_markdown_instruction: "If you had to represent\nnumbers with A/B states from sending-bits widget, could you?\n\nWrite a represent\nof the numbers 0 through 15 using only the letters A and B.\n\n\n"
      U1L6 Free Response Reflection_markdown_instruction: " In 50 words or less,\ndescribe the concept of a number system. \n\nWhy are rules required for a\nnumber system to be useful?\n"
      U1L6 Free Response Reflection_2018_markdown_instruction: " In 50 words or less,\ndescribe the concept of a number system. \n\nWhy are rules required for a\nnumber system to be useful?\n"
      U1L7 Free Response Assessment_markdown_instruction: "In 100 words or less describe\nhow place value is used in the binary number system. How is it similar or\ndifferent from the way place value is used in the base 10 number system.\n"
      U1L7 Free Response Assessment_2018_markdown_instruction: "In 100 words or less\ndescribe how place value is used in the binary number system. How is it similar\nor different from the way place value is used in the base 10 number system.\n"
      U1L7 Free Response Reflection_markdown_instruction: "Reflect on your learning\nin this lesson. In the space below, enter:\n\n3 recollections (things you\nremember), \n\n2 observations (things you noticed), and \n\n1 insight (something\nyou fully understand the significance of).\n"
      U1L7 Free Response Reflection_2018_markdown_instruction: "Reflect on your learning\nin this lesson. In the space below, enter:\n\n3 recollections (things you\nremember), \n\n2 observations (things you noticed), and \n\n1 insight (something\nyou fully understand the significance of).\n"
      U1L8 Free Response Getting Started_markdown_instruction: "Respond to the following\nquestion.\n\nList two or three challenges you faced when trying to send multi-bit\nmessages using the bit-sending widget during previous classes?\n"
      U1L8 Free Response Reflection_markdown_instruction: "<strong>Complete the Sending\nNumbers Rubric (on the second page of the <a href= \"https://docs.google.com/document/d/1cSlWYnxOciDQut0OAUcsddmM56bveHely71LUb_CHkM/edit\"\ntarget=\"_blank\">Sending Number activity guide</a>) and then respond to the\nfollowing prompt.</strong>\n\nWhat problems arose in your efforts to create\na working protocol? How did you think about the problem(s) in order to solve\nit?\n"
      U1L8 Free Response Reflection_2018_markdown_instruction: "<strong>Complete\nthe Sending Numbers Rubric (on the second page of the <a href= \"https://docs.google.com/document/d/1cSlWYnxOciDQut0OAUcsddmM56bveHely71LUb_CHkM/edit\"\ntarget=\"_blank\">Sending Number activity guide</a>) and then respond to the\nfollowing prompt.</strong>\n\nWhat problems arose in your efforts to create\na working protocol? How did you think about the problem(s) in order to solve\nit?\n"
      U1L8 Free Response2_markdown_instruction: "How did collaboration play a role\nin the creation of your protocol?"
      U1L8 NetSim numbers with decimal_markdown_instruction: "## Sending Numbers\nActivity\\r\n\\r\n**Challenge:** Develop a protocol or set of rules for communicating\na drawing to your partners using only bits.\\r\n\\r\n**Challenge Rules:**\\r\nThe\nimage will be a line drawing created by connecting points on a grid, like\nthe one seen here.\\r\nYou can discuss and agree on a protocol ahead of time,\nbut the image exchange must happen without communication between the two parties\nother than through using the Internet Simulator.\\r\n\\r\n**Things to Consider:**\\r\n-\nHow will your points be formatted?\\r\n- How does the recipient know when one\nnumber ends and the next begins?\\r\n\\r\n**Your Protocol:** Write the steps\nof your protocol on the worksheet provided by your teacher.\\r\n\\r\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)"
      U1L9 Free Response Assessment_markdown_instruction: "Choose one of the topics\nyou most enjoyed learning about today. Describe what new information you learned\nand how it relates to the way we create and use number systems.\n"
      'U2 L 1 - 2: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 1 - 2: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 L1 - 2: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 1 - 2: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 L11 - 15: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 11 - 15: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 L3 - 4: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 3 - 4: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 L5 - 6: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 5 - 6: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 L7 - 10: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 7 - 10: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U2 The Internet: Cybersecurity and Crime - Video_markdown_instruction': "[Video\nguide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)"
      U2 Vigenere_markdown_instruction: "# Encrypt and decrypt a message with the\nVigenère cipher\\r\n\\r\nThis is an interactive version of the Vigenère cipher\nthat animates the encryption and decryption as it’s happening, given a piece\nof text to encrypt or decrypt and the key.\\r\n\\r\n# Do this\\r\n### Encrypt\na message\\r\nClick Step several times, and trace what’s happening. Pay attention\nto:\\r\n\\r\n- How the ciphertext is being produced\\r\n- What happens when you\nget to the last character of the key\\r\n- After you’ve stepped through a few\ncharacters click Play to watch the rest animate\\r\n- Hit Restart and play\nthe animation again. You can use the speed slider to speed it up or slow it\ndown  \\r\n\\r\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\\r\n\\r\n###\nDecrypt a message\\r\nEncrypt a message as above, then:  \\r\n\\r\n- Highlight\nand copy the ciphertext\\r\n- Paste it into the plaintext area. Note: Don’t\nchange the key\\r\n- Change the Encrypt/Decrypt toggle to Decrypt\\r\n- Hit\nStep a few times, and then Play\\r\n\\r\nYou should see the original text emerge.  \\r\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\\r\n\\r\n\\r\nHow\nhard would it be to crack a message encrypted with this cipher? Does the length\nof the key make a difference?\\r\n"
      U2 frequency caesar_markdown_instruction: "# Break a Caesar cipher!\\r\n\\r\nThis\ntool lets you play with text and do substitution ciphers. It also shows you\na frequency analysis of the input text. (We’ll look at that more in a later\nlesson.) You can use this to either encrypt a message or decrypt it.\\r\n\\r\n#\nDo this\\r\n- Load the **Sample message (easy)** from the message dropdown.\nThis will load a message that has been encrypted with a Caesar cipher.\\r\n\\r\n![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\\r\n\\r\n-\nUsing the buttons in the Caesar substitution tab, you can shift the alphabet\nforwards or backwards to try to unscramble the message.\\r\n\\r\n![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\\r\n\\r\nSee\nhow long it takes you to crack the cipher! Is this a good method of encrypting\nsecret data?\\r\n"
      U2 frequency random sub_markdown_instruction: "# Break a random substitution\ncipher!\\r\n\\r\nThis version of the tool gives you more information about the\nencrypted text and more options for how to try out different substitutions.\\r\n\\r\n###\nDifferent ways analyze text\\r\n- Play with some of the sorting options available\nin the Random substitution cipher tab to get different views on the letter\nfrequencies in the input text as well as standard English text.\\r\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\\r\n\\r\n###\nDifferent ways to substitute\\r\n- To substitute a letter you can drag a blue\nletter of the alphabet directly underneath the orange letter you want changed\nin the original ciphertext.\\r\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\\r\n\\r\n###\nPlay.  Always play.\\r\n- There are other ways to analyze and substitute characters\nthat you can find by clicking on the buttons and trying out whatever you like.\\r\n-\nRemember: you can't break it :)\\r\n\\r\nSee how long it takes you to crack\nthe cipher! Is this a good method of encrypting secret data?"
      U2 vigenere cipher_markdown_instruction: "# Encrypt and decrypt a message with\nthe Vigenère cipher\\r\n\\r\nThis is an interactive version of the Vigenère\ncipher that animates the encryption and decryption as it’s happening, given\na piece of text to encrypt or decrypt and the key.\\r\n\\r\n# Do this\\r\n###\nEncrypt a message\\r\nClick Step several times, and trace what’s happening.\nPay attention to:\\r\n\\r\n- How the ciphertext is being produced\\r\n- What\nhappens when you get to the last character of the key\\r\n- After you’ve stepped\nthrough a few characters click Play to watch the rest animate\\r\n- Hit Restart\nand play the animation again. You can use the speed slider to speed it up\nor slow it down  \\r\n\\r\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\\r\n\\r\n###\nDecrypt a message\\r\nEncrypt a message as above, then:  \\r\n\\r\n- Highlight\nand copy the ciphertext\\r\n- Paste it into the plaintext area. Note: Don’t\nchange the key\\r\n- Change the Encrypt/Decrypt toggle to Decrypt\\r\n- Hit\nStep a few times, and then Play\\r\n\\r\nYou should see the original text emerge.  \\r\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\\r\n\\r\n\\r\nHow\nhard would it be to crack a message encrypted with this cipher? Does the length\nof the key make a difference?"
      U2L01 Assessment 4_markdown_instruction: "## The Internet is for Everyone:\nAssessment 4\n\nExplain one challenge raised by Vint Cerf in “The Internet\nis for Everyone - but it won’t be if….” and give one example of it that you\nknow about.\n"
      U2L01 Assessment 4_2018_markdown_instruction: "## The Internet is for Everyone:\nAssessment 4\n\nExplain one challenge raised by Vint Cerf in “The Internet\nis for Everyone - but it won’t be if….” and give one example of it that you\nknow about.\n"
      U2L02 Assessment 5_markdown_instruction: "Even with a good protocol, what are\nsome privacy and security challenges while playing battleship on the Internet\nSimulator?"
      U2L02 Assessment 5_2018_markdown_instruction: "Even with a good protocol, what\nare some privacy and security challenges while playing battleship on the Internet\nSimulator?"
      U2L02 Assessment1_markdown_instruction: "Why was it necessary to include the\nsender's and recipient's names in the NetSim version of Battleship, but\nnot in the face-to-face game?\n"
      U2L02 Assessment2_markdown_instruction: "\nIf the messaging scheme your group\ndesigned was really used on the internet, what could go wrong in terms of\nsecurity and privacy?\n\n*In your response, think about what a malicious person\ncould do. What if the messages sent weren't about a game but about something\nmore personal like a conversation with a friend, or communicating with a bank?*\n\n\n"
      U2L02 Free Response Getting Started_markdown_instruction: "Have you ever played\nthe game of Battleship? \n\nWhat rules did you follow? \n\nDid you have a\nstrategy for winning?\n"
      U2L02 Free Response Reflection_markdown_instruction: "Describe the addressing\nsystem your group devised.\n\nHow did your group decide upon a system for\nsending messages in the Battleship simulator? \n\nWere there disagreements\nor problems? How were they resolved?\n\n\n"
      U2L02 Free Response Reflection_2018_markdown_instruction: "Describe the addressing\nsystem your group devised.\n\nHow did your group decide upon a system for\nsending messages in the Battleship simulator? \n\nWere there disagreements\nor problems? How were they resolved?\n\n\n"
      U2L04 - NetSim Routers with Addresses_markdown_instruction: "# An Updated Internet\nSimulator\\r\nMany changes have been made to the Internet Simulator. \\r\n\\r\n**Routers:**\nRather than being connected to your entire class you are now connected to\na single router. You can see who else is on your router in the network diagram.\\r\n\\r\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04\nPM.png)\\r\n\\r\n\\r\n**IP Addresses:** Every user has a unique IP address. The\nfirst portion is the number of your router and the second is your own unique\nnumber. You can figure out the IP addresses of people on the router by looking\nat the network diagram.\\r\n\\r\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59\nPM.png)\\r\n\\r\n**Sending Messages: ** You can now send messages to a single\nother user. Fill in the \"To\" portion of the message with the IP address\n(including the period) of the person you'd like to send your message to.\\r\n\\r\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34\nPM.png)\\r\n\\r\n**Router Statistics: ** You can see useful information about\nthe functioning of your router in the \"Router\" tab.\\r\n\\r\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23\nPM.png)\\r\n\\r\n**Router Logs: ** You can read a log of traffic both at the\nlevel of your router and the entire network by clicking the \"Log Browser\"\nbutton.\\r\n\\r\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48\nPM.png)"
      U2L04 Assessment2_markdown_instruction: "Describe the relative benefits of\nrouting over a broadcast style of communication. Is routed traffic more secure\nthan broadcasting? Justify your answer.\n"
      U2L04 Assessment2_2018_markdown_instruction: "Describe the relative benefits\nof routing over a broadcast style of communication. Is routed traffic more\nsecure than broadcasting? Justify your answer.\n"
      U2L04 Assessment3_markdown_instruction: "Can you know in advance the path a\nmessage will take between you and another computer on the Internet? Justify\nyour answer.\n"
      U2L04 Assessment3_2018_markdown_instruction: "Can you know in advance the path\na message will take between you and another computer on the Internet? Justify\nyour answer.\n"
      U2L04 Free Response Wrap Up_markdown_instruction: "How do you think the routers\nare physically connected? Does it matter to you? Why or why not?\n"
      U2L05 - NetSim - Packets and Building TCP_markdown_instruction: "## Packets\nand Making a Reliable Internet\\r\n\\r\n**Challenge:** Develop a protocol for\nreliably sending a message across an unreliable network\\r\n\\r\n**An Unreliable\nInternet Simulator:** The current version of the Internet Simulator is modeled\nafter some actual constraints of the Internet\\r\n- Messages must be divided\ninto packets which may contain <em><strong> at most eight (8) ASCII characters\n</em></strong>\\r\n- Messages should be long enough to require at least 10\npackets\\r\n- Packets may not arrive in the order sent\\r\n- Packets may be\ndropped while in transmission\\r\n\\r\n**Directions:** In a group or individually\njoin a router in the Internet Simulator and practice sending messages given\nthese new constraints. Once you are comfortable with the challenge, iteratively\ndesign a protocol that can reliably send a message to a partner. You and your\npartner should join <em><strong> DIFFERENT </strong></em> routers.\\r\n\\r\n**Protocol\nRequirements:**\\r\n- All communication can only be done through the Internet\nSimulator\\r\n- You must send a message that spans at least 10 packets (i.e.\nan 80 character ASCII message). \\r\n- The protocol should account for the\npossibility that the characters might be entirely random (i.e. not necessarily\nEnglish - do not count on human intuition to reconstruct the message. The\nmessage is not known beforehand.)\\r\n- The sender and receiver must be confident\nthe full message was successfully transmitted and reconstructed."
      U2L05 Reflection 1_markdown_instruction: "In your own words, what were the\nprimary obstacles you needed to overcome in today’s challenge? How do these\nobstacles mirror actual problems encountered on the Internet?\n"
      U2L05 Reflection 1_2018_markdown_instruction: "In your own words, what were\nthe primary obstacles you needed to overcome in today’s challenge? How do\nthese obstacles mirror actual problems encountered on the Internet?\n"
      U2L07 Assessment5_markdown_instruction: "When analyzing algorithms why doesn't\nthe amount of real time (clock time) tell us very much about the algorithm's\n\"efficiency\"?\n"
      U2L08 Assessment 0_markdown_instruction: "## Router Table: Assessment\n\nIn\nthis activity you filled in a routing table by visiting other routers you\nwere directly connected to find out what paths they were using. Why do routers\nneed to use this method of talking to their direct neighbors in order to fill\nin their routing tables?\n"
      U2L08 Free Response 1_markdown_instruction: "How is creating a router table\nsimilar to finding the shortest path in a graph?  How is it different?\n"
      U2L08 Free Response 2_markdown_instruction: "Why do routers store information\nabout neighbors and costs, rather than the whole path from themselves to another\nrouter? \n"
      U2L08 Free Response 3_markdown_instruction: "Why does a router keep track of\nthe cost to a destination through multiple routers instead of only the fastest\none?\n\n"
      U2L09 Assessment2_markdown_instruction: "Why do computers need to periodically\ncheck the DNS for websites you have already visited?\n"
      U2L09 Assessment2_2018_markdown_instruction: "Why do computers need to periodically\ncheck the DNS for websites you have already visited?\n"
      U2L09 Free Response Wrap Up_markdown_instruction: "Why don’t we need to know\nthe IP addresses for our favorite sites?\n"
      U2L09 Free Response Wrap Up_2018_markdown_instruction: "Why don’t we need to\nknow the IP addresses for our favorite sites?\n"
      U2L10 Assessment3_markdown_instruction: "Why do multiple websites at your school\nand the computers in your classroom all have IP addresses that start with\nthe same two sets of numbers?\n"
      U2L10 FR describe what you made from lesson prompt_markdown_instruction: "What\nwas the most interesting visualization you were able to create with the data\nset provided? What did it help you discover about the data?\\r\n\\r\nMake sure\nthat your response includes the following:\\r\n\\r\n1. What type of chart it\nwas\\r\n2. What specific data it plotted\\r\n3. What it helped you discover\nand/or *why* it was the most interesting to you\\r\n\\r\nTry to keep your response\nto 150 words or less (5-7 sentences)."
      U2L10 FR why best worst viz_markdown_instruction: "\\r\nChoose the visualization\nthat you thought was the best or worst (pick one) from the ones you saw in\nclass and do the following:\\r\n\\r\n1. Describe the visualization so the reader\nknows which one you are talking about (example: \"Collection A #2 -- Average\ndivorce rates in America\")\\r\n\\r\n2. Say whether this was the best or worst\nvisualization for you and *and why*.  Justify your opinion by citing principles\nof visualizations that you have learned about.  Use the visualization 101\nguide as a resource. \\r\n\\r\nTry to keep your response to around 100 words\n(about 3-5 sentences).\\r\n"
      U2L10 Free Response Getting Started_markdown_instruction: "Explain the similarities\nbetween DNS and the Postal Service.  Describe their analogous hierarchical\nstructure.\n"
      U2L10 Free Response Wrap Up_markdown_instruction: "Complete this sentence.\n\nI\nlearned three things today about DNS: ______(1)______ , ______(2)______ ,\nand ______(3)______. \n\nHowever, the most important thing I learned is ______(4)______.\n"
      U2L10 NetSim Automatic DNS_markdown_instruction: "## The Need for DNS\\r\n\\r\nIn\nthis version of the Internet Simulator, a Domain Name System (DNS) is provided\nfor you and knows the IP addresses of all connected computers. You can only\nsee the hostnames of other connected computers.   \\r\n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\\r\n\\r\nThe\naddress of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with\nprotocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another\nstudent's address. You can keep track of the responses in the Notes section\nin the DNS tab.  \\r\n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)"
      U2L11 Free Response_markdown_instruction: "The definition of HTTP makes use\nof the ASCII character set without reference to how these characters are encoded.\nExplain why this is an example of abstraction.\n"
      U2L11 Free Response_2018_markdown_instruction: "The definition of HTTP makes\nuse of the ASCII character set without reference to how these characters are\nencoded. Explain why this is an example of abstraction.\n"
      U2L12 FR reflection on collaboration_markdown_instruction: "*NOTE: The following\nis modification of one of the prompts given on the AP Create Performance task.*\\r\n\\r\nDescribe\nthe development process of discovering your data story and creating a visualization.  Describe\nthe difficulties and/or opportunities you encountered along the way, and describe\nthe collaborative process between you and your partner.\\r\n\\r\nPlease limit\nyour response to about 200 words."
      U2L13 Assessment1_markdown_instruction: "What is a Caesar cipher?  As part\nof your answer demonstrate encrypting the plaintext messages: `CS IS COOL`\nwith a caesar cipher.\\r\n"
      U2L13 Assessment2_markdown_instruction: "What makes one encryption better than\nanother?\n"
      U2L13 FR Reflection data analysis objective_markdown_instruction: "In order\nto analyze data with a computer, we need to clean the data first. Based on\nyour experience today, would you say that data analysis is a perfectly objective\nprocess? Why or why not? (Limit to about 100 words)\\r\n"
      U2L13 Free Response Getting Started_markdown_instruction: "In what situations\non the Internet do you typically want to keep information secret? \n\nFrom\nwhom do you want to keep it to be secret? \n\nHow do you think your privacy\nis maintained on the Internet now?\n\n\n"
      U2L13 Free Response Wrap Up_markdown_instruction: "List 3 characteristics of\nthe ideal encryption scheme.\\r\n"
      U2L14 Assessment2_markdown_instruction: "Using the Vigenere cipher, does the\nlength of the key matter? \\r\nFor example, if one key is length 5 and another\nis 20, does one produce a “better” encrypted message than the other, or is\nit basically the same? Yes or no? Explain your reasoning."
      U2L14 Free Response Getting Started_markdown_instruction: "What is the difference\nis between “cracking” a code and “decrypting” a message?\\r\n"
      U2L14 Free Response Wrap Up_markdown_instruction: "Knowing what you know now\nabout frequency analysis, would you feel comfortable sending your password\nover the Internet using a substitution cipher?\\r\n\\r\nWhy or why not?\\r\n"
      U2L14 frequency random_markdown_instruction: "# Break a Caesar cipher!\\r\n\\r\nThis\ntool lets you play with text and do substitution ciphers. It also shows you\na frequency analysis of the input text. (We’ll look at that more in a later\nlesson.) You can use this to either encrypt a message or decrypt it.\\r\n\\r\n#\nDo this\\r\n- Load the \"Sample message (easy)\" from the message dropdown.\nThis will load a message that has been encrypted with a Caesar cipher\\r\n\\r\n![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\\r\n\\r\n-\nUsing the buttons in the Caesar substitution tab, you can shift the alphabet\nforwards or backwards to try to unscramble the message.\\r\n\\r\n![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\\r\n\\r\nSee\nhow long it takes you to crack the cipher! Is this a good method of encrypting\nsecret data?"
      U2L15 Assessment2_markdown_instruction: "What problems exist with encryption\nschemes such as the Vigenere cipher even when strong encryption keys are used?\n"
      U2L15 Free Response Getting Started_markdown_instruction: "Why do you think\nInternet hacking becomes \"really big news\" when it occurs?\n"
      U2L15 Free Response Wrap Up_markdown_instruction: "Companies and organizations\ncommonly require users to change their passwords frequently. Websites have\npassword length and complexity requirements. \n\nIs it better to change your\npassword frequently or to have a longer password? \n\nWhat level of security\nis appropriate to require of end users? Does this change, depending on the\ncontext (for example, employee or customer)?\\t\n"
      U2L16 Free Response Assessment 3_markdown_instruction: "Why are computationally-hard\nproblems important in encryption strategies?"
      U2L16 Free Response assessment 2_markdown_instruction: "What do people do who\nneed solutions to large computationally-hard problems?"
      U2L16 Free response assessment 1_markdown_instruction: "What does \"computationally\nhard\" mean?"
      U2L17 Assessment 1_markdown_instruction: "Describe what it means for a problem\nto be “computationally hard.”"
      U2L17 Assessment 2_markdown_instruction: "What strategies do people use to\nsolve large computationally-hard problems?"
      U2L17 Free Response Getting Started_markdown_instruction: "What kinds of problems\ndo you think are “computationally hard\"?"
      U2L17 Free Response Wrap Up_markdown_instruction: "If the TSP is unsolvable\nfor finding an exact solution, how do you think package delivery companies\noptimize their delivery routes?"
      U2L18 Assessment_markdown_instruction: "How is the Wireless Hotspot problem\ndifferent from another “hard” problem you saw, the Traveling Salesman problem?\n"
      U2L18 FR why is asymmetric encryption useful_markdown_instruction: "* In symmetric\nencryption the same key is used to encrypt and decrypt a message.\n* In **a**symmetric\nencryption different keys are used to encrypt and decrypt.\n\n#### Give at\nleast one reason (more are welcome) why **a**symmetric encryption is useful?\n"
      U2L18 Free Response Assessment 1_markdown_instruction: "In symmetric encryption\nthe same key is used to encrypt and decrypt a message. In asymmetric encryption\ndifferent keys are used to encrypt and decrypt. Give at least one reason why\nasymmetric encryption is useful"
      U2L18 Free Response Assessment 3_markdown_instruction: "List other examples\nof one-way functions. Can you think of a one-way function in real life?"
      U2L18 Free Response Getting Started_markdown_instruction: "Given that the Travelling\nSalesman Problem and the Wireless Hotspot Problem are computationally hard\nto solve, why might the Wireless Hotspot Problem be a more ideal candidate\nfor using an encryption method? Make reference to properties of the two problems\nin your answer.\n"
      U2L18 Free Response Wrap Up_markdown_instruction: "Mixing paint is an easy-to-understand\nexample of a one-way function. The process is clear -- mix together a few\ncolors to get a new color -- but it's difficult to \"un-mix\" the paint to\nget back to the original colors used.\n\nHow is this related to encryption?\n\n\n"
      U2L19 Assessment_markdown_instruction: "Explain how modulo acts as a one-way\nfunction?\n"
      U2L19 Free Response Getting Started_markdown_instruction: "Explain in your\nown words what the modulo operation does.  You may use the analogy of a clock\nin your answer if you like.\\r\n"
      U2L19 Free Response Wrap Up_markdown_instruction: "Describe to a person who\nknows nothing about encryption why public key encryption is secure and is\nhard to crack.\n"
      U2L20 - Free Response - exploited technology_markdown_instruction: "## Security\nand Hacking in the Real World: Written Response\n*Answer this prompt below\nwith 200 words or less.*\n\n**Prompt:** Identify and explain how some Internet\ntechnologies are exploited, circumvented, or allow for the cyber threat. Refer\nto technologies you've learned about in this unit.\n\n"
      U2L20 Free Response Getting Started_markdown_instruction: "Why do you think\nInternet hacking becomes \"really big news\" when it occurs?\n"
      U2L20 Free Response Wrap Up 2_markdown_instruction: "## Security and Hacking\nin the Real World: Written Response\n*Answer this prompt below with 200 words\nor less.*\n\n**Prompt:** Explain how the information covered in your visual\nartifact is related to one of the topics below. Use relevant terminology in\nyour answer. Include specific references to lessons and activities.\n\nEncryption\nand Algorithms <br>\nCracking an Encryption with Heuristics (i.e. Frequency\nAnalysis)<br>\nSymmetric Encryption (i.e. Caesar)<br>\nHarder to Crack Encryption\n(i.e. Vigenere)<br>\nAsymmetric Encryption (Alice and Bob)<br>\nComputationally\nHard Problems<br>\nPublic Key Encryption<br>\nOne-way Functions<br>\nOpen\nStandards<br>\nCertificate Authorities<br>\n\n"
      U2L20 Free Response Wrap Up_markdown_instruction: "## Security and Hacking\nin the Real World: Written Response\n*Answer this prompt below with 200 words\nor less.*\n\n**Prompt:** Clearly describe the computing tools, techniques,\nand development process used to create the artifact such that someone can\nreproduce the artifact.\n"
      U2L3 Assessment 4_markdown_instruction: "Why does it not make sense for users\nto be identified by their real names on the Internet?"
      U2L3 Free Response Getting Started_markdown_instruction: "What are the benefits\nof using a phone number instead of a person's name? How many total phone\nnumbers are there?\n"
      U2L3 Free Response Wrap Up_markdown_instruction: "Why does it make more sense\nto use IP addresses for online accounts instead of users' real names?\n"
      U2L3 NetSim Hub Mode_markdown_instruction: "# Test It Out! (Optional)\\r\n\\r\nAfter\nyou've finished developing your protocol feel free to test it out using the\nInternet Simulator. Does your protocol work as well as you thought?"
      'U2L3: IP DNS Video_markdown_instruction': "[Video guide and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)"
      U2L4 Free Response Getting Started_markdown_instruction: "Imagine that you\nwant to send a postcard to a friend in a city on the far side of the country.\nAfter you write a message, you address it, add a return address, put a stamp\non it, and drop it in the mail.\n\nThen what happens? What is the route that\npostcard takes to get to your friend? \n\nList the steps that you think it\ntakes for a postcard gets from you to your friend. Include each of the potential\nstops along the way and how it gets transported from one place to another.\n\n\n"
      U2L5 FR brighten darken image_markdown_instruction: "Imagine that you have\nan image that is too dark or too bright. Describe how you would alter the\nRGB settings to brighten or darken it. Give an example.\\r\n"
      U2L8 google trends hypothesis_markdown_instruction: "Consider the Google Trends\ngraph of dogs and cats below (same graph as previous question).\\r\n\\r\nGive\na plausible explanation or hypothesis for the spike in dog searches that occurred\nbetween 2014 and 2015 that would lead to further investigation or research.\nGive your explanation and what you would want to investigate next.\\r\n\\r\n<a\nhref=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\"\ntarget=_blank><img src=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\"><br>Click\nto Enlarge</a>"
      U2L9 FR digital divide issue_markdown_instruction: "Consider the following\nstatement from the CS Principles course framework:\\r\n\\r\n```\\r\n7.4.1C The\nglobal distribution of computing resources raises issues of equity, access,\nand power.\\r\n```\\r\n\\r\nBriefly describe one of these issues that you learned\nabout in the lesson and how it affects your life or the lives of people you\nknow.  Keep your response to about 100 words (about 3-5 sentences)."
      U2L9 Free Response Getting Started_markdown_instruction: "On the Internet,\ncomputers can only communicate with each other through IP addresses. Typically,\nyou will know the name (or URL) of a computer you wish to talk to, but not\nits IP address. \n\nList two impacts that would result if you HAD TO KNOW\nIP addresses to get to websites?\n"
      U3 - Arrays - Demo App_markdown_instruction: "# My Favorite Things\\r\n\\r\nCheck\nout this simple app for creating a collection of your favorite things. **We're\ngoing to be working towards building this app** over the next several exercises.\nAs you might expect, this application **uses an array** to store and organize\ninformation.\\r\n\\r\n# Do This:\\r\n\\r\n* Use the \"My Favorite Things\" app\nand try to **predict how arrays are used to create the functionality you observe.**\n\\r\n* Some features to notice:\\r\n\\t* The app keeps track of a **list of your\nfavorite things**.\\r\n    * You may use buttons to **move forward and backward\nthrough your list**.\\r\n    * The **current entry and total number of entries**\nare indicated at the top.\\r\n    * You may **add a new entry** at the current\nlocation in your list."
      U3 - Arrays - Wrap Up 1_markdown_instruction: "## Choose: Array or Variable?\n\nYour\napp needs to store the following information. For each type of information,\ndecide whether you would use an array or a variable to store it:\n \n* All\nthe messages a user has sent\n* The highest score a user has ever reached\non the app\n* A username and password to unlock the app\n\n"
      U3 - Arrays - Wrap Up 2_markdown_instruction: "## Free Response: Choosing Array\nor Variable\n\nIn general, when do you think you should store information\nin an array, and when should you use a variable?\n"
      U3 - Arrays - appendItem_markdown_instruction: "# Adding Items to an Array\\r\n\\r\n<img\nsrc=\"https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06\nPM.png\" style=\"width: 250px; float: right\">\\r\n\\r\nIn our last exercise\nwe created our array and initialized it with some values. Another way to do\nthis is to **add items to your array on separate lines**. The simplest way\nto do this is to add a new item to the end of your array using the `appendItem`\ncommand.\\r\n\\r\n<img src=\"https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50\nPM.png\" style=\"width: 250px; float:right; border: solid 1px black\">\\r\n\\r\nTo\nappend means to add or to join. When you append an item to an array you actually\nadd a new location to the end of the array that contains the new value, so\nthat the total size of the array grows by one.  Since you can always add items\nto an array after creating it, it is very common to  **create an empty array\nand then add values in subsequent portions of your program**.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Read the documentation** for `appendItem`.\\r\n* Create an\n**empty array** called `oddNumbers`.\\r\n* Use `appendItem` to add the odd\nnumbers 1-11 to your array.\\r\n\\r\n![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\\r\n\\r\n*\n**Use `console.log`** to confirm your array is holding the correct values.\nThe output should look like the example below.\\r\n\\r\n<img src=\"https://images.code.org/60d41e3ea1927edbee9cfc1cc408bbb5-image-1447187862124.37.01\nPM.png\" style=\"width: 150px\">\\r\n\\r\n"
      U3 - Arrays - assignment_markdown_instruction: "# Setting Values by Index\\r\n\\r\nEach\nlocation in an array can be treated like its own variable. We've already\nseen how we can use bracket notation to reference values stored at specific\nlocations in an array. Just like with variables, **we can assign the value\nof a specific location in an array using `=`** (the assignment operator).\\r\n\\r\n**Example:**\nThe value at index 0 of this array is set to 10.\\r\n\\r\n![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25\nAM.png)\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11\nPM.png\" style=\"width: 200px; float: right\">\\r\n\\r\nStarter code is provided\nthat creates an array of 0's and 1's. **Set all the values in this array\nto be 0**. \\r\n\\r\n* Use **indexes** and the **assignment operator** `=` to\n**set all the 1's to be 0**.\\r\n* Check the output of the `console.log` to\nconfirm **the array only contains 0's**. Example shown on the right.\\r\n\\r\n"
      U3 - Arrays - assignment2_markdown_instruction: "# Array Values: Arithmetic\\r\n\\r\nYou\ncan reference locations in arrays in arithmetic expressions, just like you\nmight a variable.\\r\n\\r\n![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32\nPM.png)\\r\n\\r\nThe starter code **creates an empty array and adds three random\nvalues to it**. \\r\n\\r\n![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46\nPM.png)\\r\n\\r\nYou will be adding code to your program that calculates the\nsum of the values in the array.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a variable**\nto your program to hold the sum of the array values.\\r\n* Assign the value\nof the variable to **the sum of the three array values**.\\r\n* Use `console.log`\nto confirm that you have correctly calculated the sum of the values. Below\nis sample output from one run of the program.\\r\n\\r\n![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31\nPM.png)"
      U3 - Arrays - assignment3_markdown_instruction: "# Reassigning Array Values\\r\n\\r\nWe've\nalready seen many examples of how **a location in an array can be treated\nidentically to a variable**. The last exercise we'll perform to prove this\npoint is **reassigning array values**. The syntax for reassigning values stored\nin an array is identical to that used when reassigning variables. Even the\n`++` notation to increase a value by one works!\\r\n\\r\n![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\\r\n\\r\nThe\nprogram you're about to see **creates an empty array and adds three random\nvalues to it**. You will be adding code to the program that **increases each\nvalue by one**.\\r\n\\r\n# Do This:\\r\n\\r\n* Add code to the program that **increases\nthe value stored at each location in the array by one**.\\r\n* Use `console.log`\nto confirm that you have correctly increased the values. Below is sample output\nfrom one run of the program.\\r\n\\r\n![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37\nPM.png)\\r\n\\r\n"
      U3 - Arrays - createFirstArray_markdown_instruction: "# Creating an Array\\r\n\\r\nArrays\nhave many features which make them different from variables, but **most of\nwhat you've learned about variables also applies to arrays**. For example,\njust like a variable:\\r\n\\r\n* Arrays should be given a **descriptive and\nmeaningful** name.\\r\n* Arrays are created using `var`.\\r\n* Arrays can be\ninitialized/set using `=`.\\r\n\\r\n**Example: Creating an Array**\\r\n\\r\n![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08\nPM.png)\\r\n\\r\nThis array contains 3 values: 100, 250, 500. Notice that the\nvalues are separated with commas `,` and that the entire array is enclosed\nin brackets `[ ]` . We can use `console.log` to display the contents of an\narray just like we would a variable.\\r\n\\r\n![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* Following the format described above **create\nan array** which contains **the even numbers from 0 to 10**.\\r\n\\r\n<img src=\"https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif\"\nwidth=450px>\\r\n\\r\n* Make sure your array has a **descriptive and meaningful\nname**.\\r\n* Use `console.log` to display the contents of your array. Below\nis an example of the output your program should generate.\\r\n\\r\n![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53\nPM.png)\\r\n\\r\n"
      U3 - Arrays - expressionsAsIndexes_markdown_instruction: "# Expressions as\nIndexes: Using Variables\\r\n\\r\nWe can use **any expression that evaluates\nto a number** as an index in an array. Here are some examples:\\r\n\\r\n![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** has been provided which\ncreates an array of colors.\\r\n* **Write code** that logs **a random color\nfrom this list** to the console by generating a value for a random index.\nTry to write your program using `list.length` rather than hard-coding the\nlength of the list.\\r\n\\r\n![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)"
      U3 - Arrays - favThings Counting Variable_markdown_instruction: "# Current\nIndex\\r\n\\r\nThis app also allows a user to scroll through individual items\nin the array. In order to keep track of which index we are currently viewing,\nour application will need **a global variable that stores the current index**.\nIn coming exercises we'll want our global index to change, so let's **make\nsure that your code references your global index** rather than fixed values.\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43\nAM.png\" style=\"width: 250px; float: right\">\\r\n\\r\n* Create a **global\nvariable** that will be used to keep track of the current index in the array.\nSet this variable to 0.\\r\n* Update `setText` which displays the words to\nshow your first favorite thing using **the global index variable** instead\nof a hard-coded number. \\r\n* Update `setText` which displays the current\nitem number to use **the global index variable** instead of a hard-coded number.\\r\n\\t*\n**Hint:** since arrays are zero-indexed **you will have to add one to your\nindex** to generate the correct value to display.\\r\n* **Note:** neither of\nthese outputs will be able to change yet. Don't worry, we'll be taking care\nof that in coming exercises!"
      U3 - Arrays - favThings Next_markdown_instruction: "# Next Button\\r\n\\r\nNice\nwork! Your application should now have some simple output displaying one of\nyour favorite things and indicating which item of your list you are showing.\nTo make things more interesting, however, **we want to be able to change which\nitem we display**.\\r\n\\r\nTo change the item displayed, the user will use\nthe \"Next\" and \"Last\" buttons. These should **increase or decrease the\nglobal index by one and then you should update the information displayed on\nthe screen**. To start out with, however, we'll just be writing code for\nour Next Button. \\r\n\\r\n# Do This:\\r\n\\r\n* **Add an event handler** to the\n\"Next\" button.\\r\n* Write code in this event handler that **increments your\nglobal index variable** and then **updates the output on the screen**.\\r\n\\t*\n**Note:** If your code from the last exercise was written to reference this\nvariable then you should just be able to reuse it once you've incremented\nyour variable. We'll talk more about this in the next exercise.\\r\n* Run\nyour program to **confirm that the user can move forward through the list\nand that the output displayed is correct**.\\r\n\\t* **Note:** You may notice\nthat your program throws an error if the global index variable goes out of\nbounds. Don't worry about this for now - we'll fix it in a later exercise."
      U3 - Arrays - favThings Prev_markdown_instruction: "# Last Button\\r\n\\r\nOur\nuser can now move forward through our list of favorite things, and we're\nabout to write code that allows them to move backwards as well. If you've\nwritten your code to reference your global index then this should only require\nyou to decrease its value by one and reuse code that updates the screen output.\nBefore we write the code for backwards let's work on cleaning up our code.\\r\n\\r\n**Removing\nRepeated Code:** Once you add the code for moving backwards through your array,\nyour program will have three places where it updates the screen by setting\nthe text of your screen elements. Rather than repeating this code we should\n**create a function** that updates the screen and then call it every time\nwe need to refresh those elements. This will not only make our program easier\nto read and avoids the errors that can arise from redundant code, but it also\nmakes it easier to make changes to how our program runs, since all the code\nthat updates the screen is in a single place.\\r\n\\r\n# Do This:\\r\n\\r\n* **Write\na function** that contains the `setText` commands you have used to update\nthe screen.\\r\n* **Replace** the places in your code where you used to have\nthese commands with **calls to your new function**.\\r\n* **Add an event handler**\nto the \"Last\" button that decreases the **global index variable** by one\nand then updates the screen by calling your new function.\\r\n* Run your program\nto confirm that the user **can move forward AND backward** through the list\nand that the output displayed is correct.\\r\n  * **Note:** You may notice\nthat your program throws an error if the global index variable goes out of\nbounds. Don't worry about this for now - we'll fix it in a later exercise."
      U3 - Arrays - favThings addItem_markdown_instruction: "# Adding New Items\\r\n\\r\nNow\nwe want our user to be able to add items of their own to the list. As you\nmight have guessed, this is as easy as inserting an item into our array at\nthe current index.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an event handler** to\nthe \"Add\" button.\\r\n* **Write code** in your event handler that:\\r\n\\t*\nUses `getText` to access the user's new item.\\r\n    * Uses`insertItem` to\nadd that item to your array at the current index.\\r\n    * Calls your update\nfunction to update the screen (the new item should be displayed).\\r\n* Run\nyour program to confirm that the user **can add items to the list** and that\nthe output displayed is correct."
      U3 - Arrays - favThings bounds_markdown_instruction: "# *if* Statements: Staying\nin Bounds\\r\n\\r\nCurrently the user can increase or decrease the value in\nthe global index **past the bounds of your array**. As a result you've probably\nalready seen that errors are generated.\\r\n\\r\nTo prevent this from happening,\nwe're going to **add `if` statements** to the event handlers on the \"Next\"\nand \"Last\" buttons. They should check the value of the global index variable\nbefore changing it. If the user is about to step out of the bounds of your\narray they should either:\\r\n\\r\n* **Block:** Do not change the index if it\nwill result in a value that is out of bounds.\\r\n* **Wrap:** Set the index\nto be the other end of the array. In other words, going past the end of the\narray moves the index back to 0 and going past the beginning of the array\nsets the index to the last in the array (`list.length` will be helpful here).\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add `if` statements** to the event handlers on the \"Next\"\nand \"Last\" buttons that **prevent the global index from going out of bounds**\nusing one of the two strategies described above.\\r\n* Run your program to\nconfirm that the user **cannot go out of bounds** and that the output displayed\nis correct."
      U3 - Arrays - favThings createArray_markdown_instruction: "# Create Your Array\\r\n\\r\nNow\nthat we've dealt with our design elements we'll need to start writing the\nactual code of our app. This app keeps track of a list of items, so we know\nthat **we'll need to create an array** to store them. \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Create an array** that will hold your list of favorite things.\\r\n* **Add\nthree of your own favorite things to your array.**"
      U3 - Arrays - favThings firstOutput_markdown_instruction: "# Displaying Information\nto the User\\r\n\\r\nBefore we make our application interactive, we'll want\nto practice creating some simple user output. When the app starts up, the\nfirst item in your list should be displayed. Let's write the code that will\ndisplay this information to the screen. \\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43\nAM.png\" style=\"width: 250px; float:right\">\\r\n\\r\n* Using `setText` set\nthe main text area to show your first favorite thing.\\r\n* Using `setText`\nand `list.length` set the text indicating what item of the list the user is\ncurrently viewing.\\r\n\\t* **Hint:** since arrays are zero-indexed **you will\nhave to add one to your index** to generate the correct value to display.\\r\n*\n**Note:** neither of these outputs will be able to change yet. Don't worry,\nwe'll be taking care of that in coming exercises!\\r\n\\r\n"
      U3 - Arrays - favThings giveIDs_markdown_instruction: "# Getting Started: Creating\nIDs\\r\n\\r\nTo get your application off the ground we've provided **the user\ninterface elements that you will use in your application**. Unfortunately\nthey all currently have **default IDs** which don't reflect how the elements\nwill be used.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create a descriptive and meaningful\nID** for each element in your app."
      U3 - Arrays - favThings keepPlaying_markdown_instruction: "# Keeping Going!\\r\n\\r\nYour\napp should now be fully functional - nice job! There are of course plenty\nof new pieces of functionality to add. If you have time feel free to make\nany improvements you wish. Here are some ideas:\\r\n\\r\n* Allow the user to\n**append items** rather than add them at the current location.\\r\n* Give the\nuser the ability to **remove** the item at the current index. This can be\na little tricky if you **remove the item at the end of the list** so see if\nyou can account for that.\\r\n* Only add words **if they are not blank**.\\r\n*\n**Improve the appearance** of the app."
      U3 - Arrays - favThings template_markdown_instruction: "# Getting Started:\nCreating IDs\\r\n\\r\nTo get your application off the ground we've provided\n**the user interface elements that you will use in your application**. Unfortunately\nthey all currently have **default IDs** which don't reflect how the elements\nwill be used.\\r\n\\r\n# Do This\\r\n\\r\n* **Create a descriptive and meaningful**\nfor each element in your app."
      U3 - Arrays - globalVariableIndex_markdown_instruction: "# Getting Started:\nCreating IDs\\r\n\\r\nTo get your application off the ground we've provided\n**the user interface elements that you will use in your application**. Unfortunately\nthey all currently have **default IDs** which don't reflect how the elements\nwill be used.\\r\n\\r\n# Do This\\r\n\\r\n* **Create a descriptive and meaningful**\nfor each element in your app."
      U3 - Arrays - indexPractice_markdown_instruction: "# Index Practice\\r\n\\r\nIt\nwill take some practice to get comfortable using array indexes. We'll do\na couple of exercises to build your confidence.\\r\n\\r\n# Do This:\\r\n\\r\n<img\nsrc=\"https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Starter code** has\nbeen provided that creates an array called `myNumbers`.\\r\n\\r\n* Use `console.log`\nand array indexes to write the contents of `myNumbers` to the screen in order,\nas shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\\r\n\\r\n"
      U3 - Arrays - insertingItems_markdown_instruction: "# Inserting Items: Array\nIndexes\\r\n\\r\nIf you want to add elements in the middle of your array you\ncan use `insertItem` to specify an **index** at which an item should be inserted.\\r\n\\r\n![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24\nAM.png)\\r\n\\r\nJust like `appendItem`, `insertItem` creates a new location\nin the array. However `insertItem` allows you to insert an item anywhere in\nthe array, not just at the end, and it shifts all elements at or after its\nindex one location over.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `insertItem`.\\r\n* **Starter code** has been provided which appends some\nstrings to an array, but right now they don't form a complete sentence.\\r\n*\nUse `insertItem` to **individually insert strings to your array** to form\na complete sentence.\\r\n* Use `console.log` to confirm you succesfully created\nyour sentence.\\r\n\\r\n![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59\nAM.png)"
      U3 - Arrays - insertionErrors_markdown_instruction: "# Out of Bounds\\r\n\\r\nIn\nmany languages trying to access indexes of an array that don't exist will\ncreate an error. **JavaScript allows for some strange behavior** with arrays\nthat it's useful to see, even though **you will likely never use this functionality**.\\r\n\\r\n**Warning:**\nsome of this code will generate errors or work in unexpected ways. Don't\nspend a long time trying to understand weird results. The point to take from\nthis is **referencing indexes that are out of bounds will almost never do\nwhat you intend**, and we'll be learning ways to avoid this as we move forward.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** has been provided which creates an array\nwith three elements.\\r\n* Uncomment the **first command that references indexes\nthat are out of bounds** and run the code.\\r\n* **Examine the output** and\ntry to understand what is happening.\\r\n* Reset and then **recomment** the\nline after you've used it. \\r\n* **Repeat the process for all the lines.**\\r\n\\r\n**Note:**\nWe have used a different style of comment in this program. `/* long block\ncomment */` is used when you want to write a multiple-line comment. "
      U3 - Arrays - introIndex_markdown_instruction: "# Accessing Items in an Array\\r\n\\r\nAn\narray is comprised of many locations. You can individually set or reference\nthe information at each location of your array just like a variable. To tell\nyour locations apart each has a separate number, or **index**, that identifies\nit.\\r\n\\r\nArrays in JavaScript are **zero-indexed** which means the first\nindex is 0. This is similar to binary number systems which begin counting\nat 0. For example an array of 10 items would have indexes 0-9. As a result\n**the last index is always one less than the length of the array**.\\r\n\\r\n**Accessing\nArray Items by Index:** If you know the index of the item you wish to access\nyou can reference it using square brackets `list[index]` . The example below\nprints the value of the 4th element in the array.  \\r\n\\r\n![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n**Starter code** has been provided which\ncreates an array of the numbers 1 through 10\\r\n\\r\n* Use `console.log` to\ndisplay the first item in your array.\\r\n* Use `console.log` to display the\nlast item  in your array.\\r\n* Use `console.log` to display the number 5 from\nthe array."
      U3 - Arrays - length_markdown_instruction: "# *Array.length*\\r\n\\r\nAs we saw\nin the last exercise, there are many strange behaviors that can result from\nreferencing array indexes that are less than 0 or greater than the highest\nindex in your array. **If want to avoid these kinds of errors then it is useful\nto know how long your array is,** especially since we've seen that arrays\ncan grow and shrink during the course of our program.\\r\n\\r\n![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15\nAM.png)\\r\n\\r\nYou can always check the current length of your array using\nthe command `list.length` where \"list\" is the name of your array. It evaluates\nto a number indicating how many items are in your array.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** has been provided which creates several long arrays.\\r\n*\n**Use `list.length` and `console.log`** to determine how many items are in\neach array. An example of the output is below.\\r\n\\r\n<img src=\"https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29\nAM.png\" style=\"width: 250px\">"
      U3 - Arrays - lengthMinus1_markdown_instruction: "# Expressions as Indexes:\n*list.length - 1*\\r\n\\r\nWe have been accessing information in an array by\nusing numbers, but we can actually use **any expression that evaluates to\na number as an index in our array**. The first example of this we will explore\nis accessing the last item in our array.\\r\n\\r\nArrays are **zero-indexed**,\nwhich means that the first index is 0. Therefore an array with a length of\n3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than\nthe length**. This will always be the case, and so we can use this expression\nto access the last element in any array:\\r\n\\r\n![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** has been provided that\nwhich creates several arrays.\\r\n* Use the syntax provided above and `console.log`\nto display the final item in each list.\\r\n"
      U3 - Arrays - remove_markdown_instruction: "# Removing Items\\r\n\\r\nSometimes\nwe want to remove something from an array. In order to do so you'll need\nto specify the **index** of the item that should be removed.\\r\n\\r\n<img src=\"https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40\nPM.png\" style=\"width: 250px\">\\r\n\\r\n**Note:** `removeItem` removes the\nlocation in the array at the index provided. As a result **the array is one\nlocation shorter and all the indexes after the index provided will have their\nindex decreased by one**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `removeItem`.\\r\n* **Starter code** has been provided which creates an\narray of strings.\\r\n* Use `removeItem` to **individually remove all the \"REMOVE\"\nstrings in your array** to form a complete sentence. \\r\n* Use `console.log`\nto confirm you succesfully created your sentence.\\r\n\\r\n**Note:** Keep an\neye out; your indexes will shift as you remove items.\\r\n\\r\n![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17\nPM.png)"
      U3 - Arrays - stringsInArrays_markdown_instruction: "# Arrays Can Hold Strings\\r\n\\r\nSo\nfar we have been using arrays to hold numbers, but each location in an array\ncould hold a string instead.\\r\n\\r\n![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13\nPM.png)\\r\n\\r\n**Note:** It is possible for an array to hold both strings\nand numbers, but **typically you will only want your arrays to hold one type\nof data**.\\r\n\\r\n# Do This:\\r\n\\r\n* Create an **empty array**.\\r\n* Use\n`appendItem` to **individually add strings to your array**, forming a sentence\nof at least **5 words**.\\r\n* Use `console.log` to confirm you succesfully\ncreated your sentence.\\r\n\\r\n![](https://images.code.org/75fc0b55a44d02e2366c60b30aeb28d1-image-1447252397993.33.06\nAM.png)"
      U3 - Basic Conditionals - 1_markdown_instruction: "0-  True and False statement\\r\n\\r\nif\n( 1 < 5) {\\r\n  console.log(\"Hello\");\\r\n}"
      U3 - Basic Conditionals - 2_markdown_instruction: "# Greater and Less Than\\r\nIn\nthe last level we saw a simple if statement. If statements are just simple\nquestions. The answer to questions in if statements are either True or False.\nThis is just another place where we see binary in computer science. If the\nexpressoin inside the if statement is true than the code inside the brackets\nexcutes. If its false then it won't execute.\\r\n\\r\nBelow is an if statement.\nCan you change the expression to be true?\\r\n\\r\n**Remember:** A good trick\nfor remembering how greater than and less than work is to think of it like\na gator with its mouth open. The gator always wants to eat the bigger number.\\r\n\\r\n#\nDo This\\r\n\\r\n* Fix the expression inside the if statement to be true so\nthe message will print"
      U3 - Basic Conditionals - 3_markdown_instruction: "Adding a variable\\r\n\\r\nvar\nx = 8;\\r\nif( 3 < x){\\r\n console.log(“Is this working?”)\\r\n}\\r\n\\r\nits\nthe same thing with a variable just the x stands for the 5!\\r\n"
      U3 - Basic Conditionals - 4_markdown_instruction: "User input\\r\n\\r\nvar x\n= prompt(“Enter number”)\\r\nif( 3 < x){\\r\n console.log(“Bigger”)\\r\n}\\r\n"
      U3 - Basic Conditionals - 5_markdown_instruction: " Random number\\r\nvar dice\n= randomNumber(1,6)\\r\nif( 3 < dice){\\r\n console.log(“Bigger”)\\r\n}"
      U3 - Canvas - 200dots_markdown_instruction: "# Loops on the Canvas\\r\n\\r\nTo\nmake things interesting, we're going to quickly add 200 dots to our canvas\nby using a `for` loop. **Locations on the canvas are relative to the top-left\ncorner of the canvas, not the screen**. Therefore you will need to know the\ndimensions of your canvas in order to randomly place dots throughout it. You\ncan find this information in Design Mode:\\r\n\\r\n![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29\nAM.png)\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif\"\nstyle=\"float: right\">\\r\n* Add a **`for` loop that runs 200 times.**\\r\n*\nPlace the **`circle` command inside the loop** and **decrease the radius**\n(try 20).\\r\n* **Use `randomNumber` to randomize the `x` and `y` values used\nto place your dots**. The ranges you select should be the width and height\nof your canvas.  \\r\n* **COMMON MISTAKE ALERT:** If you test your code before\nsetting the `x` and `y` values of the circle to random numbers, it will look\nlike there's only one dot.  But really you will have just drawn 200 dots\nall at the same (x,&nbsp;y) position.\\r\n\\r\n"
      U3 - Canvas - One Dot sprayPaint_markdown_instruction: "# Making Spray Paint\\r\n\\r\nThe\nnext effect we would like to create is a \"spray paint\" effect. Instead of\ndrawing a single dot for every location stored in `eventList`, we'll draw\nmany small dots randomly placed around each location.\\r\n\\r\nWe are going\nto start off just practicing **drawing a circle whose x and y locations use\n`offsetX` and `offsetY` with a small random value added**. This makes the\nline of code to draw the circle kind of long, but hopefully it's easy to\nunderstand if you read it carefully.\\r\n\\r\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Set the style of another button** in Design Mode, give\na label like \"Spray Paint,\" give it a descriptive ID, and attach a click\nevent handler to it.\\r\n* **Copy the code from the \"Original\"** button into\nthe event handler for spray paint.\\r\n* Change the code for `circle` so that\nit will **draw a dot whose x and y locations use `offsetX` and `offsetY` with\na small random value added. **\\r\n\\r\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\\r\n\\r\n*\n**Run your app** to make sure it is drawing small dots close to the original\nposition. Look at the example below.\\r\n\\r\n![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)"
      U3 - Canvas - appendToArray_markdown_instruction: "# Store Your Dots\\r\n\\r\nNow\nwe're going to get into the core of the activity. We will be **creating a\nrecord of every dot your user draws**.\\r\n\\r\nTo do this, we will append *every*\n`event` parameter to an array as events are generated. When we store every\nmouse location in an array, we can make many interesting effects and redraw\nthe image in different ways, by looping over the array. First let's just\nmake sure we can capture them all.\\r\n\\r\n# Do This:\\r\n\\r\n* Create a new\narray outside the event handler function: `var eventList = []`.\\r\n\\r\n* In\nyour event handler, before you call the `circle` command, use `appendItem`\nto add the `event` parameter to `eventList`.\\r\n![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\\r\n\\r\n*\n**Run the program** and draw some dots.\\r\n\\r\n* In the Debug Console type\n`console.log(eventList)` and inspect the contents. You should have a record\nof every event parameter used to draw a dot! (It might be a lot.)\\r\n![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)"
      U3 - Canvas - changeToMouseMove_markdown_instruction: "# Drawing on *mousemove*\\r\n\\r\nCurrently\nthe user can click to add dots, but we want **to place dots wherever the user\nmoves the mouse on the canvas**.\\r\n\\r\nTo place dots whenever the mouse is\nmoved, we'll be **changing the event type from `click` to `mousemove`**.\\r\n\\r\n#\nDo This:\\r\n<img src=\"https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif\"\nstyle=\"float: right\">\\r\n* Change the event type in your event handler **from\n`click` to `mousemove`**.\\r\n* **Run your program** to confirm that dots are\nbeing drawn anywhere the user moves the mouse.\\r\n\\r\n**Your user is now able\nto draw anywhere they want on the screen!**"
      U3 - Canvas - clickToAdd_markdown_instruction: "# Click to Add Dots\\r\n\\r\nLoops\nare one way of quickly adding dots to our canvas, but now we're going to\nchange our app so that the user can decide when and how many dots to add.\nThe canvas is a UI element, so **you can attach event handlers to it just\nlike you would any other element**. We're going to move the circle command\ninside of a click event handler so that the user can click to add individual\ndots.\\r\n\\r\n![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add an `onEvent` handler**; set its ID to your canvas\nID.\\r\n* **Move the `circle` command out of your `for` loop and into your\nnew event handler**.\\r\n* **Remove the `for` loop from your program.**\\r\n*\n**Run your program** and confirm that a single dot is added everytime a user\nclicks your canvas.\\r\n\\r\n![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)"
      U3 - Canvas - delete_markdown_instruction: "# Delete Button\\r\n\\r\nWe are finally\ngoing to use those buttons! Each one will trigger an event handler that **processes\nthe array `eventList` to create a visual effect** with the mouse data you\nhave stored. **The first effect we are going to create is delete.**\\r\n\\r\nYou\nmay want to provide your user with a way to start over with their drawing.\nIn order to do this, you will need to *both* **clear the canvas** and **delete\nall items from `eventList`.**  The easiest way to delete everything from the\nlist is to simply set the value of `eventList` to be a new empty list.\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n* In Design Mode, set the styling\nand text of one button to indicate it's the \"delete\" or \"start over\"\nbutton. Give your button **a descriptive ID**.\\r\n\\r\n* **Add a click event\nhandler** to your button.\\r\n\\r\n* Within the event handler call `clearCanvas`.\\r\n\\r\n*\nSet `eventList` to the empty array (i.e., `eventList = []`).\\r\n\\r\n**Test\nyour program** to make sure that starting over works the way it should.  \\r\n"
      U3 - Canvas - draw at click point_markdown_instruction: "# Drawing Dots at\nClick\\r\n\\r\nCurrently the user can click to add dots, but they're drawn\nat random locations around the canvas. We're going to use information stored\nin the `event` parameter of the event handler function **to place dots wherever\nthe user clicks the mouse on the canvas**.\\r\n\\r\nThe event parameter has\ntwo critical pieces of information we'll want, which are `event.offsetX`\nand `event.offsetY`. These hold **the location (relative to the top left corner\nof the canvas) that was clicked**. \\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n* **Remove (or comment out) the\n`console.log` statement**.\\r\n* Replace the `x` and `y` parameters of the\n`circle` command with `event.offsetX` and `event.offsetY`.\\r\n* **Run your\nprogram** to confirm that dots are being drawn anywhere the user clicks the\nmouse."
      U3 - Canvas - freePlay_markdown_instruction: "# Create Your Own Effect!\\r\n\\r\nYou've\njust seen several ways that we can process our array `eventList` in order\nto create different effects. Now it's time to make your own! **Extend the\nfunctionality of one of the effects you just created, or create an entirely\nnew one**. What else could you do with the information you've stored in your\narray? How else might you combine the programming tools you've developed?\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Extend the functionality of one of the effects, or create\nan entirely new one of your own!**"
      U3 - Canvas - introCanvas_markdown_instruction: "# Introducing Canvas\\r\n\\r\nToday\nwe are going to be building a drawing app around **a new UI element called\nthe canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25\nPM.png)\\r\n\\r\n![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\\r\n\\r\n**A\ncanvas is simply a transparent rectangle on which you can draw basic shapes**\nlike lines, circles, and rectangles. In fact, at first you might feel like\nwe're going to end this unit in the way we started it, making turtle drawings.\nDon't worry, we'll quickly move into new and exciting things we can do with\nthis new UI element.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33\nPM.png\" style=\"float: right\">\\r\n* **Starter code** is provided which places\nbuttons on the bottom of your screen. **Ignore these for now; we'll be using\nthem later**.\\r\n* **In Design Mode, drag a canvas element into the empty\nspace at the top of your app**, resize it, and give it a descriptive ID.\\r\n*\n**Call `setActiveCanvas` with the ID you assigned to your canvas**, which\nmakes it responsive to canvas commands.\\r\n* **Add a giant circle to the canvas.**\nUse the `circle` command. Make its radius large enough that it goes off the\nedge of your canvas.\\r\n\\r\nYour code will look something like this:\\r\n\\r\n![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59\nPM.png)"
      U3 - Canvas - movementFunction fix Orig_markdown_instruction: "# Fix the \"Original\"\nButton\\r\n\\r\nOur \"Original\" button is now slightly broken because the effect\nit renders doesn't match our new free-form drawing which takes the movement\nof the mouse into account - it just draws fixed-size cricles.\\r\n\\r\nLet's\nfix the \"Original\" button.\\r\n\\r\n# Do This:\\r\n\\r\nIn the event handler\nfunction for the \"Original\" button:\\r\n\\r\n* Change the value used for the\nradius from a fixed value to the same thing calculated for the free-form drawing.\nSince you wrote a function to do this calculation, it should be easy to call\nit from this code as well!\\r\n* The **slight difference will be that you will\nbe looping over the array of events.**  So the line of code that draws the\ncircle might look like the one below. This line of code is certainly a mouthful,\nbut it's basically the same as the line of code in your `mousemove` event\nhandler; **it just references the event in the list instead.** <br><img src=\"https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21\nPM.png\" style=\"width: 600px\">\\r\n* **Test your program** to confirm that\nclicking the \"Original\" button creates the same effect that occurs when\ndoing free-form drawing.\\r\n\\r\n![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)"
      U3 - Canvas - movementFunction_markdown_instruction: "# Adjusting Circle Size\\r\n\\r\nAmong\nthe other pieces of information contained in each `event` parameter are the\nvalues `movementX` and `movementY`. These numbers tell us how far (in pixels)\nthe mouse moved since the last mouse event was triggered, and can be used\nto measure the speed of the mouse. ** If the movement is large, the mouse\nis moving fast; if the movement is small, the mouse is moving slowly.**\\r\n\\r\nLet's\nuse the mouse movement speed to make a cool effect. When we draw with a real\npen or brush, the line usually gets thin when making quick strokes and is\nwider and darker when making slower ones. We can generate this effect by **using\n`movementX` and `movementY` to calculate the radius for the circle.**  Since\nthis calculation might be a little tricky, a smart thing to do would be to\n**write a function** that takes `movementX` and `movementY` as parameters\nand **returns** a value that should be used as the radius.\\r\n\\r\n<img src=\"https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43\nPM.png\" style=\"width: 350px; float: right; border: solid 1px black\">\\r\n\\r\nThere\nare several ways to do this. One possible way to write the function is provided\non the right, which uses some arithmetic tricks. The function to the right\nis actually only three lines of code but is heavily commented to explain what\nit's doing. It makes use of a function called **`Math.abs` which returns\nthe absolute value of a number.** Feel free to use this or another method\nof converting `movementX` and `movementY` into a radius.\\r\n\\r\n<details>\n<summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\\r\n`Math.abs`\ntakes a number as input and returns the positive version of this number. \\r\n\\r\nIn\nmath, absolute value is often written with this | | symbol. So |10| is the\nabsolute value of ten and |-10| is the absolute value of negative ten. Both\nevaluate to 10.\\r\n\\r\nIn Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)`\nand `Math.abs(10)` both evaluate to <strong>10</strong>.\\r\n</details> <br>\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Write a function like the one above** that accepts two\nparameters (one each for `movementX` and `movementY`) and returns a radius.\nA higher speed should lead to a smaller radius.\\r\n* **Inside your `mousemove`\nevent handler,** set the radius of the circle to the value returned by your\nfunction, where the function takes `event.movementX` and `event.movementY`\nas input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22\nPM.png)\\r\n* Run your program and confirm that **when you draw, the speed\nof the mouse affects the radius of the dots**. The effect should look something\nlike what's below \\r\n\\r\n![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)"
      U3 - Canvas - redrawOriginal_markdown_instruction: "# Redraw Original\\r\n\\r\nIf\nyou were able to get that working and understand what you did, congratulations!\nThat was some serious programming! If not, take a moment to go back and talk\nthrough the different components with a classmate. Most of the work we'll\nbe doing for the rest of this lesson uses similar patterns, and you'll want\nto be comfortable with them as we add more complexity to our app.\\r\n\\r\nThe\nfirst thing we are going to do is **create an \"Original\" button that will\nredraw the image with the same circle radius you used before**. The process\nwill be nearly identical to how you added the \"Random\" button.\\r\n\\r\nIn\nfact, the code to redraw the original is *exactly* the same, except instead\nof making the radius of the circle be random, it will just be the fixed value\nyou used originally (probably radius 5 or so).\\r\n\\r\n![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif\"\nstyle=\"width: 200px; float: right\">\\r\n(**NOTE:** The instructions below\nare shown in the code animation above.)\\r\n\\r\n* Style a button, give it label\nlike \"Original,\" give it a meaningful ID, and add a \"click\" event handler.\\r\n*\nInside the event handler for your \"Original\" button...\\r\n\\t* Copy the code\nfrom the \"Random\" button event handler.\\r\n    * Paste it inside the event\nhandler for the \"Original\" button.\\r\n\\t* Set the `radius` parameter to\n**whatever value you used when you originally drew dots**.\\r\n* Test your\nprogram by drawing a figure and then hitting your \"Randomize\" button. Then\nhit the \"Original\" button. Your original drawing should appear."
      U3 - Canvas - redrawRandom_markdown_instruction: "# Redraw Random - Part 1\\r\n\\r\nThe\nnext effect we are going to create is **\"random.\"** We will be redrawing\nthe image but with randomly sized dots.\\r\n\\r\nWe'll be doing this in two\nsteps. For now, all you need to do is **change the first button in the row\nto have the proper styling and attach a click event handler to it**. **In\naddition, clear the canvas from inside the event handler** so we are ready\nto redraw our new image.  We don't want to delete all the items from the\narray though, as we will use them to redraw. Once you've done that, move\non to the next exercise where we'll write the actual code in our event handler.\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05\nPM.png\" style=\"width: 200px; float: right\">\\r\n\\r\n* In Design Mode, **pick\na button to use for Random. Set the styling and text of the button**. The\nimage below shows one possible option, but you can style it however you like.\\r\n\\r\n*\nGive your button **a descriptive ID**.\\r\n\\r\n* **Add a click event handler**\nto your button.\\r\n\\r\n* **Call `clearCanvas`** from inside the event handler\nso the canvas is ready for the redraw."
      U3 - Canvas - redrawRandom2_markdown_instruction: "# Redraw Random - Part 2\\r\n\\r\nNow\nwe're ready to write the code for our \"Random\" effect. To do this, we will\nbe clearing the canvas and then processing the array `eventList` to redraw\nall the dots with a random radius. \\r\n\\r\nYou already set up the clear canvas,\nso next we'll need to process our array in order to find out the event information\nfor each dot. You'll need to create a `for` loop that iterates through every\nindex in `eventList` (recall the `length` command). Within your loop, you\nwill be drawing dots referencing items stored in the array. \\r\n\\r\nAs you\nwrite this code, remember that **you can treat an individual element of an\narray exactly like the kind of data it stores**. Inside a `for` loop, the\nevent at index `i` can be accessed with the notation `eventList[i]` and the\n`offsetX` of that event can be accessed with `eventList[i].offsetX`. Again,\nyou are essentially treating the array element as if it were the data it contains.\\r\n\\r\n![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n<img src=\"https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n(**NOTE:** Everything listed\nbelow is shown in code animation above.)\\r\n\\r\n**Inside the \"Random\" button\nevent handler...**\\r\n* **Add a `for` loop** that runs `i` from 0 up to `eventList.length`\nto process over the array.\\r\n* **Add a `circle`** command inside your loop.\\r\n*\n**Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and\n`eventList[i].offsetY`, respectively.\\r\n* **Set the `radius` parameter**\nto some `randomNumber`. Pick any range you like. You can always change it\nlater.\\r\n* **Test your program** by drawing a figure and then hitting your\n\"Randomize\" button. It should be the same drawing, but now with randomly\nsized dots!"
      U3 - Canvas - shiftKey_markdown_instruction: "# Draw When a Key is Pressed\\r\n\\r\nThis\napp now lets the user draw, but they have no control of whether the pen is\nup or down. Let's give the user the ability to **choose when to put down\nthe pen**. We won't even need to add a new event handler to our app! \\r\n\\r\nYou\nmay have noticed that the **`event` parameter includes information about whether\ncertain keys were pressed when the event fired**. They are stored in variables\nwith names like `shiftKey` or `altKey` and are stored as boolean values (true\n/ false). We are going to use the `shiftKey` variable to decide when we should\ndraw circles. \\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif\"\nstyle=\"float:right\">\\r\n\\r\n* **Add an `if` statement inside your event\nhandler function** where the condition is based on the value stored in `event.shiftKey`:\n**If `shiftKey` is true, then draw the circle.** <img src=\"https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32\nPM.png\" width=\"200\">\\r\n\\r\n* You might want to **decrease the radius of\nyour circle** (for example to 5).\\r\n\\r\n* **Run the program and confirm that\ndots are only drawn when the shift key is pressed.**\\r\n\\t* The effect should\nbe that the user can pick up and put down the pen to draw.\\r\n\\t* Hold the\nshift key down and move the mouse to draw.\\r\n\\t* Release the shift key to\nstop drawing.\\r\n\\r\n(**NOTE:** If you wish, use `console.log` to display\nthe values in `event` again. You'll see `event.shiftKey` is one of the values\nstored.)\\r\n"
      U3 - Canvas - sketch_markdown_instruction: "# Relative Indexes\\r\n\\r\nWhen\nlooping over an array, we use a counter variable (typically `i`) to keep track\nof which index we're at. We can then access the contents at each index with\nthe syntax `list[i]`.\\r\n\\r\nIf we want, however, we could access the contents\nof the next element as well, since its index is just one greater. For example,\nif we are currently focused on the element at index `i`, then `list[i+1]`\ngives us access to the next element in the array. In other words, you can\n**reference indexes relative to your counter variable**.\\r\n\\r\n![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\\r\n\\r\nWe\nare going to use relative indexing to create our final effect, which will\nlook sort of like an etching of the image. The idea is simple:  **for every\n(x,&nbsp;y) location in the event list, draw a straight line between that\nlocation and the location stored 10 spots further down the array.** You will\nuse the **`line` command** to draw a line connecting these points.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Read the documentation for `line`**.\\r\n* **Set the style\nof the final button** in Design Mode, give a label like \"Etch,\" give it\na descriptive ID, and attach a click event handler to it.\\r\n* **Call `clearCanvas`**\nto clear the screen.\\r\n* Create a `for` loop that counts from **0 to `eventList.length\n- 10`**. \\r\n\\t* Why do you think we're not counting over the entire array?\\r\n*\nUse `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]`\nand `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49\nPM.png)\\r\n* **Use `setStrokeColor` and/or `setStrokeWidth` inside the event\nhandler** to make the lines visible; otherwise, they will be transparent,\nsince we set the stroke color to transparent at the beginning of the program.\\r\n*\n**Run your app** and confirm that your new button creates a sketch effect,\nas shown below.\\r\n\\r\n![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)"
      U3 - Canvas - sprayPaint_markdown_instruction: "# Making Spray Paint with Nested\nLoops\\r\n\\r\nIn order to make \"Spray Paint\" look more real you will need\nto draw multiple dots randomly placed around the original x and y locations.\nIn order to do this, you will place one `for` loop inside of another, also\nknown as a **nested loop**. You already have the main loop which visits every\nindex in `eventList`. The inner loop should **draw 5 circles whose x and y\nlocations use `offsetX` and `offsetY` with a small random value added**.   \\r\n\\r\n#\nNested Loops\\r\n\\r\n<img src=\"https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36\nPM.png\" width= 300px ; style=\"float: right\">\\r\n**When nesting loops, it\nis important that you use different variables to count your iterations**.\nLook at the example at right.  These nested loops effectively say: **\"for\nevery possible value in `eventList.length`, run a loop 5 times\".  **\\r\n\\r\nSince\n`i` is used as the counter variable in the outer loop, we need to use a *different\ncounter variable for the inner `for` loop*, or things will go haywire. Why?\n**If both loops used `i` as a counter variable, the inner loop would keep\nchanging `i` and the outer loop wouldn't count properly.** The example uses\n`j` as the inner loop variable, but you could use anything that's *not* `i`.\\r\n\\r\n<img\nsrc=\"https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif\"\nstyle=\"width: 200px; float: right\">\\r\n\\r\n(**Note:** Steps shown in animation\nabove.)\\r\n\\r\n* **Add a `for` loop inside the existing `for` loop** in the\nspray paint event handler. \\r\n* **Change the counter variable** to something\nother than `i` for the inner `for` loop.\\r\n* **Change the boolean condition**\nso the inner loop will run **5 times.**\\r\n* **Move the circle** code inside\nboth `for` loops.\\r\n* **Run your app** and confirm that your new button creates\na spray paint effect, as shown below."
      U3 - Canvas - transparentDots_markdown_instruction: "# Changing Colors in Canvas\\r\n\\r\nWe\nwould like to make our dots transparent so that we can see when they are drawn\non top of each other. To set the color and transparency of shapes you draw\non your canvas, you need to change both the **stroke** or outline color and\nthe **fill** color. The functions `setStrokeColor` and `setFillColor` can\nbe used to set those colors. \\r\n\\r\nThese functions **accept strings of the\nform `\"rgba(100, 200, 100, 0.5)\"` as input**. The first three values in\nthe string are RGB values and the last value is the transparency, as represented\nby a decimal number between 0 and 1.0.  All together it looks like this:\\r\n\\r\n![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\\r\n<img\nsrc=\"https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n# Do This:\\r\n\\r\n**Before the\nloop: ** \\r\n* **Add a `setStrokeColor` command** to set the stroke to **fully\ntransparent**.\\r\n* **Add a `setFillColor` command** to set your dots to full\nblack and mostly transparent **(try a value of 0.2)**."
      U3 - Canvas - usingOffsetXY_markdown_instruction: "# The Event Parameter for\nMouse Events\\r\n\\r\nWe'd like to change the app so that when the user clicks\non the canvas we draw a circle right where they clicked. To do that, we need\nto learn more about the **parameter passed by our event handler function,\nwhich by default is called `event`**.\\r\n\\r\nRecall that when we wanted to\nknow what key the user pressed on a `keyPress` event, we checked the value\nstored in `event.key`. **The event parameter actually stores a great deal\nmore information about each event**. \\r\n\\r\nWhen using the mouse, the event\nparameter carries information like the location of the mouse, how fast it's\nmoving, and some other things as well. \\r\n\\r\nLet's get acquainted with\nthe event parameter and what we can find out about the mouse.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* Add a `console.log` command inside the function of your event\nhandler. Use it to display the `event` parameter.\\r\n* Run your program and\nclick your canvas. **The full contents of the `event` parameter should be\ndisplayed in the console**. \\r\n* **Which values do you think hold the x and\ny coordinates**?  What else is there?\\r\n* We won't use all of these, but\nit's interesting to see just how much is available.\\r\n* Once you have experimented\na little, move to the next level.\\r\n![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30\nAM.png)\\r\n"
      U3 - Conditional Basics - 6_markdown_instruction: "# What happens after an\n*if* ?\\r\n\\r\nYou may have noticed that our flowchart for our game so far\nonly does something if the condition is true. What happens after the `if`\nstatement? Let's find out.\\r\n\\r\n<img src=\"https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png\"\nstyle=\"width: 200px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a `setText` after\nthe `if` statement** to \"Nope. Guess again.\"\\r\n\\r\n<img src=\"https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n* **Run the program** a couple times to **look\nfor a bug**. We will fix this on the next level."
      U3 - Conditionals - Combine AND OR Simple_markdown_instruction: "# Combining\nAND and OR\\r\n\\r\nYou can express more complex conditions by combining **AND**\nand **OR** in one statement.  Here is the example from the previous page which\nyou can use as a reference. This statement will evaluate to **true** if the\nday is Tuesday or Thursday AND their age is 15 or 16.\\r\n\\r\n![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\\r\n\\r\n#  Do\nThis:\\r\nWe've provided you with starting code that prompts the user to enter\na **day** and their **age** and stores the result in variables.\\r\n\\r\n**Add\nan `if` statement that uses both AND and OR operators**\\r\n\\r\n * The app\nshould write \"Sleep in!\" if it's a weekend and the user is a teenager.\\r\n\n* Otherwise it should write \"Uh oh. Have to wake up.\"\\r\n \\r\n\\r\nTry it\nout!\\r\n"
      U3 - Conditionals - Combine AND OR and NOT_markdown_instruction: "# Combining\nAND and OR and NOT\\r\n\\r\nYou can stick a NOT (`!`) in front of any boolean\nexpression to invert its result. This opens the door to express the same logical\nstatements in different ways.  \\r\n\\r\nFor example, let's say you want to\ndetermine if a person, based on his or her age (under 12 or over 65) gets\nto pay a reduced price for a movie ticket.  You might express that like this:\\r\n\\r\n```\\r\n//\nIf your age is less than 12 or greater than 65\\r\nif( (age < 12) || (age >\n65) ){\\r\n\\twrite(\"You qualify for a reduced price!\");\\r\n}\\r\n```\\r\n\\r\nBut\nyou might also figure out a way to determine if a person gets a reduced price\nticket by determining if his or her age is between 12 and 65 (`(age >= 12)\n&& (age <= 65)`) and then taking the inverse of that.  So using the NOT operator\nthis would work as well:\\r\n\\r\n```\\r\n// If your age is NOT between 12 and\n65\\r\nif( !( (age >= 12) && (age <= 65) ) ){\\r\n\\twrite(\"You qualify for\na reduced price!\");\\r\n}\\r\n```\\r\n\\r\n**Why use one over the other?** Personal\npreference.  Use the one that makes the most sense to you, but it should be\na clear expression of what you are trying to say.  \\r\n\\r\n\\r\n# Do This:\\r\nWe've\nprovided you with starting code that prompts the user to enter a **day** and\ntheir **age** and store it in variables.\\r\n\\r\n**Add an `if` statement that\nuses both AND and OR operators**\\r\n\\r\n * The app should write \"Time for\nschool!\" if it's a weekday and the user is under 18.\\r\n \\t* Hint: one way\nto say that it's a weekday is to say that it's NOT a weekend.\\r\n * Otherwise,\nif it's a weekday and the user is 18 or older, it should write \"Time to\ngo to work!\"\\r\n * Otherwise, it should write \"Time to relax for the weekend!\"\\r\n\n\\r\n \\r\n**WARNING** logic can get tricky sometimes.  Make sure to test your\nprogram with inputs that cover every possibility. There are 4 basic cases\nto test for:\\r\n\\r\n * It is a weekday and age is under 18\\r\n * It is a weekday\nand age is not under 18\\r\n * It's not a weekday and age is under 18\\r\n\n* It's not a weekday and age is not under 18\\r\n\\r\nTry it out!"
      U3 - Conditionals - Combine AND and OR_markdown_instruction: "# Combining AND\nand OR and NOT\\r\n\\r\nYou can stick a NOT (`!`) in front of any boolean expression\nto invert it's truthiness.  This is useful if you want to express the inverse\nof a more complex expression.  This opens the door to express the same logical\nstatments in different ways.  \\r\n\\r\nFor example, let's say you want to\ndetermine if a person, based on their age (under 12 or over 65) gets to pay\na reduced price for a movie ticket.  You might express that like this:\\r\n\\r\n```\\r\nif(\n(age < 12) || (age > 65) ){\\r\n\\twrite(\"You qualify for a reduced price!\");\\r\n}\\r\n```\\r\n\\r\nBut\nyou might also figure out a way to determine if the age is between 12 and\n65 (`(age > 5) && (age < 65)`) and then take the inverse of that.  So using\nthe NOT operator this would work as well:\\r\n\\r\n```\\r\nif( !( (age > 5) &&\n(age < 18) ) ){\\r\n\\twrite(\"You qualify for a reduced price!\");\\r\n}\\r\n```\\r\n\\r\n**Why\nuse one over the other?** Personal preference.  Use the one that makes the\nmost sense to you, but it should be a clear expression of what you are trying\nto say.  \\r\n\\r\n\\r\n# Logic Challenge! Do This\\r\nWe've provided you with\nstarting code that prompts the user to enter a **day** and their **age** and\nstore it in variables.\\r\n\\r\n**Add an if statement that uses both AND and\nOR operators**\\r\n\\r\n * The app should write \"Time for school!\" if it's\na weekday and the user is under 18.\\r\n \\t* Hint: one way to say that it's\na weekday is to say that it's NOT a weekend.\\r\n * Otherwise it should write\n\"Time to go to work!\"\\r\n \\r\n \\r\n**WARNING** logic can get tricky sometimes.  Make\nsure to test your program with inputs that cover every possibility. There\nare 4 basic cases to test for:\\r\n\\r\n * It is a weekday and age is under\n18\\r\n * It is a weekday and age is not under 18\\r\n * It's not a weekday\nand age is under 18\\r\n * It's not a weekday and age is not under 18\\r\n\\r\nTry\nit out!"
      U3 - Conditionals - Simple AND_markdown_instruction: "# AND Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nAgain you will see the\nJavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You\ncan drag them out or simply type them.\\r\n\\r\nLet's now try out using an\n**AND** operator. As a reminder: **if both statements are true** then AND\nevaluates to **true**.  **If either (or both) are false** the AND operator\nwill evaluate to **false**.\\r\n\\r\n<img src=\"https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n# Do This:\\r\nWe've provided\nyou with starting code that prompts the user to enter their **age** and stores\nit in a variable.\\r\n\\r\n**Add an `if` statement that uses an AND operator\n(`&&`)**\\r\n\\r\n * The app should write \"You are a teenager.\" if the age\nis between 13 and 19.\\r\n * Otherwise it should write \"You are not a teenager.\"\\r\n"
      U3 - Conditionals - Simple OR_markdown_instruction: "# OR Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nYou will now see the\nJavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You\ncan drag them out or simply type them.\\r\n\\r\nLet's try OR right now.  As\na reminder: the OR operator will evaluate to true if *either or both* statements\nare true. If both are false, the OR operator will evaluate to false. \\r\n\\r\n<img\nsrc=\"https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png\"\nstyle=\"width: 200px; float:right\"> \\r\n\\r\n\\r\n# Do This:\\r\nWe've provided\nyou with starting code that prompts the user to enter a day of the week and\nstores it in a variable.\\r\n\\r\n**Add an `if` statement that uses an OR (`||`)**\n\\r\n\\r\n * The program should write **\"It's the weekend!\"** if the day\nentered by the user is a weekend day.  \\r\n * Otherwise it should write **\"Can't\nwait for the weekend to get here.\"**"
      U3 - Conditionals - intoOr_markdown_instruction: "# OR Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nUp till now we have\nseen the boolean operators ==, >, and <. There are a couple more boolean operators\nthat are very useful to know about. AND(`&&`)  and OR (`||`). Let's take\na look at OR.\\r\n\\r\nOR allows you to check multiple boolean expressions together.\\r\n\\r\n<img\nsrc=\"https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03\nPM.png\" style=\"width: 100px; float:right\"> \\r\n\\r\nIf either or both statements\nare true, the OR operator will evaluate to true. If both are false, the OR\noperator will evaluate to false.  \\r\n\\r\n# Do This\\r\n\\r\n* **Run the code**\nto see what it does.\\r\n\\r\n* **Add another conditional that check if color\nis purple or number is greater than 2**\\r\n\\r\n* **Add another conditional\nthat check if direction is left or animal is zebra or number is 4**"
      U3 - Conditionals - introAND_markdown_instruction: "# OR Operator\\r\n\\r\n<img\nsrc=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nUp till now we have\nseen the boolean operators ==, >, and <. There are a couple more boolean operators\nthat are very useful to know about. AND(`&&`)  and OR (`||`). Let's take\na look at OR.\\r\n\\r\nOR allows you to check multiple boolean expressions together.\\r\n\\r\n<img\nsrc=\"https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03\nPM.png\" style=\"width: 100px; float:right\"> \\r\n\\r\nIf either or both statements\nare true, the OR operator will evaluate to true. If both are false, the OR\noperator will evaluate to false.  \\r\n\\r\n# Do This\\r\n\\r\n* **Run the code**\nto see what it does.\\r\n\\r\n* **Add another conditional that check if color\nis purple or number is greater than 2**\\r\n\\r\n* **Add another conditional\nthat check if direction is left or animal is zebra or number is 4**"
      U3 - Design Mode - Console Log_markdown_instruction: "# Updating IDs and Debugging\nwith Console Log\\r\n\\r\nIn the last level you tested out the new command:\n`console.log`.  In this level we have a couple buttons with event handlers\nand `console.log` statements, but they are switched around!\\r\n\\r\nWe should\nhave given the buttons better ID names so we could tell the difference based\non the ID. **Can you update the ID names and `console.log` messages to match\nthe correct button? **\\r\n\\r\n# Do This\\r\n\\r\n* **Change the IDs** of the\nbuttons in Design Mode to more descriptive names.\\r\n\\r\n* Switch to Code\nMode and notice that the **ID pulldowns have been updated to include the new\nIDs**. (You still need to select the correct ID from the pulldown menu.)\\r\n\\r\n*\n**Update the `console.log` messages** to match the buttons.\\r\n"
      U3 - Design Mode - Layers and Delete_markdown_instruction: "# Layering and\nDeleting\\r\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"\nstyle=\"width: 150px; float: right\">User interface elements can overlap one\nanother, so you'll want the ability to change the order or **depth** at which\neach one is rendered. \\r\n\\r\nIf you **scroll to the bottom of the Properties\ntab** you'll find buttons which allow you to easily **delete or change the\ndepth** of an element.\\r\n* **Delete an Element** by selecting it (clicking\non it) in the design view and then clicking **Delete** in the properties tab.\\r\n*\n**Change the depth** of elements by using the double or single arrows.\\r\n\n* Click the double arrow to send all the way to front or back.\\r\n * Click\nthe single arrow to move up or down one layer.\\r\n    \\r\n# Do This:\\r\n\\r\nUse\nthe **delete** and **depth** tools to **create the \"After\" image**\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n\\t<th\nstyle=\"text-align:center\">Before</th>\\r\n    <th style=\"text-align:center\">After</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td\nalign=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"\nstyle=\"width:200px ; border: solid 1px black\"></td>\\r\n    <td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"\nstyle=\"width:200px; border: solid 1px black\"></td>\\r\n</tr>\\r\n</table>"
      U3 - Design Mode - Multi Screens 2_markdown_instruction: "# Switching Screens\\r\n\\r\nIn\nthe last level you made two screens, a black one and a white one. However\nwhen you ran the app you probably noticed that you had no way to see the second\nscreen. Let's fix that.\\r\n\\r\nIn order to switch between screens we have\nadded a new command: `setScreen`. Read the documentation to figure out how\nthis command works.\\r\n\\r\n<img src=\"https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n**Goal:** Make a 2 screen app\nwhich can switch back and forth between a black screen and a white screen\nusing buttons.\\r\n\\r\n# Do This:\\r\n\\r\n* **Put a button on each screen**.  \\r\n\\r\n*\n**Set up event handlers** for each of your buttons. \\r\n\\r\n* **Use the `setScreen`\nblock to switch screens** when the buttons are clicked.\\r\n\\r\n* Test out\nyour app to make sure you can switch back and forth between the two screens."
      U3 - Design Mode - Multi Screens_markdown_instruction: "# Second Screen\\r\n\\r\nUp\nuntil now our apps have only been able to have one view. With Design Mode\nwe can now make multiple screens and switch between them!\\r\n\\r\n**Goal:**\nMake a 2 screen app with a black screen and a white screen. \\r\n\\r\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\"\nstyle=\"width: 250px; float: right\">\\r\n\\r\n# Do This:\\r\n\\r\nSwitch to Design\nMode and **add a second screen**. There are two ways to add a second screen:\n\\r\n\\r\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39\nPM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen\ndropdown menu at the top right of the app window. You should now have two\nscreens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07\nPM.png\" style=\"width: 75px\"> \\r\n* From the screen dropdown menu at the\ntop right of the app window click *New Screen*. \\r\n\\r\nMake screen1 white\nand screen2 black. **Set the background color for a screen in the Properties\ntab**.  Make sure to rename the screens with appropriate IDs."
      U3 - Design Mode - WTF Console Log_markdown_instruction: "# Console Log\\r\nIn\nthe last level, we saw a new command: `console.log`. You may have noticed\nthat it prints out text in the Debug Console below the code workspace.\\r\n\\r\n<img\nsrc=\"https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33\nPM.png\" style=\"width: 450px; border: solid 1px black\"> \\r\n\\r\nThe Debug\nConsole is an important tool for programmers.  You've seen it display error\nmessages, but you can also send messages that a user cannot see to the Debug\nConsole while a program is running. <img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\"\nstyle=\"width: 250px; float: right; border: solid 1px black\"> The Debug Console\nis really helpful for debugging programs because you can send messages to\nyourself from within your own code!\\r\n\\r\nYou can find `console.log` in the\ncode toolbox under the Variables tab.\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out\n3 `console.log` commands into the workspace.\\r\n\\r\n* Update each `console.log`\nwith your own messages.\\r\n\\r\n* Run the program a couple times to test out\nthis new command."
      U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction: "# Improved\nChaser Game\\r\n\\r\nNow lets improve the \"Chaser Game\".  This is where you\nget to use your creativity. Make it look nice!\\r\n\\r\nIn addition you will\nnotice a new command in the toolbox: `playsound`! Read the documentation about\nhow to add sounds.\\r\n\\r\n**Note:** Your code from before has been provided\nfor you.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create a Welcome Screen** that explains\nthe rules of the game. Include a \"Start Game\" button.\\r\n\\r\n* Update the\nyour code so that the **image jumps to a new location when it is clicked**.\n\\r\n\\r\n* **Play a sound** each time the image is clicked.\\r\n\\r\n* **Add\na Game Over Screen** with a lose message and button to start over. The Start\nOver Button should direct back to the Welcome Screen.\\r\n\\r\n* **Make the\nuser lose**, by sending them to the Game Over Screen, when the background\nis clicked.\\r\n\\r\n\\r\n"
      U3 - Design Mode 1_markdown_instruction: "# Design Mode\\r\n\\r\n<img src=\"https://images.code.org/ec23eb303d31fcd8274fac6c2c0f7b9a-image-1444330773327.32.34\nAM.png\" style=\"width: 150px; float: right\">\\r\n\\r\nYou now have Design\nMode!  Check out the new button at the top of your App window. Design Mode\nwill allow you to easily add UI elements to your projects and style them the\nway you want!\\r\n\\r\n**Goal:** Add a large red button to your app using Design\nMode.\\r\n\\r\n# Do This:\\r\n\\r\n* **Switch to Design Mode:** the switch appears\nabove your app window on the left.\\r\n\\r\n* **Find <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">\nin the Design Toolbox** and drag out a button and resize it. \\r\n\\r\n* **Change\nthe button text** to say \"Click Me\".\\r\n\\r\n* **Set the color for the button**\nto be red.\\r\n\\r\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"\nstyle=\"width: 500px; float: middle\">\\r\n"
      U3 - Dice - Dropdown and Score_markdown_instruction: "# Adding Guess and Score\nto Dice Game\\r\n\\r\nLet's have the user guess the number that will come up\nwhen we roll a single die. \\r\n\\r\nYou can have multiple `if` statements,\none after another, if they have different purposes which are separate. \\r\n\\r\n**\nNote: ** Use the flowchart below to help you figure out the logic of the game.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add a dropdown** to take in the user's guess from 1 to\n6.\\r\n\\r\n* **Add a set of `if` statements to check if the dice roll number\nis equal to the user guess.** Put this set of `if` statements after your set\nof `if` statements for the dice image. It should be completely separate from\nthe other set of `if` statements. \\r\n\\r\n* Create a variable to **keep track\nof score**. Give 10 points if they guess right and take one point away when\nthey guess wrong.\\r\n\\r\n* **Display the score** on the screen and update\nit after each dice roll.\\r\n\\r\n<img src=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - Dice - Dropdown with Strings_markdown_instruction: "# Adding Difficulty\nLevels: Dropdowns with Strings\\r\n\\r\nLet's add another element to our dice\ngame: **difficulty levels**. The user will pick either \"Easy\" or \"Hard.\"  These\nare strings so you might be wondering how to check for equality. **The `==`\nworks on strings as well!** It checks if the first string is exactly the same\nas the second string. **Strings must be the same letters and even have the\nsame case to be equal**! So \"dog\" and \"Dog\" would not be equal. \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Add a dropdown** for difficulty level with the options\nof \"Easy\" or \"Hard.\" \\r\n\\r\n* **Create an `if` statement for difficulty\nlevel** which prints the difficulty level to the console.\\r\n\\r\n<img src=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - Dice - If_markdown_instruction: "# Using `if` to Display Images\\r\n\\r\nWe\nare going to set up a dice game. We want to show a picture of a single die\nfor each random number generated 1 to 6. We've already set up the screen\nin Design Mode, with a button to generate the roll and an image to show a\npicture of the die.\\r\n\\r\n**Note:** The flowchart for the desired behavior\nis below.\\r\n\\r\n# Do This:\\r\n\\r\n* Add an event handler for the Roll! button\nso that when the button is clicked it generates a random number from 1 to\n6. \\r\n\\r\n* Add conditionals (`if`, `else if`, and `else`) to change the\npicture of the image (ID: `dice_image`) to display the correct side of the\ndie depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\"\nstyle=\"width:150px\"> with the URLs below to set the images for the die.\\r\n\\t*\n<img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice\n1 Image URL -  https://code.org/images/dice/1.png\\r\n    * <img src=\"https://code.org/images/dice/2.png\"\nstyle=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\\r\n    *\n<img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice\n3 Image URL - https://code.org/images/dice/3.png\\r\n    * <img src=\"https://code.org/images/dice/4.png\"\nstyle=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\\r\n    *\n<img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice\n5 Image URL - https://code.org/images/dice/5.png\\r\n    * <img src=\"https://code.org/images/dice/6.png\"\nstyle=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\\r\n\\r\n<img\nsrc=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>\\r\n"
      U3 - Dice - Nested_markdown_instruction: "# Nested *if* Statements\\r\n\\r\n<img\nsrc=\"https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\n**Let's change the\nscoring of the game to match the difficulty level.** \\r\n\\r\nNew scoring rules:\\r\n*\n_Easy: +10 points right answer / -1 point for wrong answer_\\r\n* _Hard: +1\npoint right answer / -1 point for wrong answer_\\r\n\\r\nHow do we check _both_\nthe difficulty level and if the user's guess was correct? **We can actually\nput `if` statements inside of other `if` statements!** So we first want to\ncheck what the difficulty level is and then check if the user was right or\nwrong to determine the score.\\r\n\\r\n** Note: ** The flowchart below outlines\nthe logic you are trying to implement.\\r\n\\r\n# Do This:\\r\n\\r\n* Move a copy\nof the score `if` statement inside of the difficulty levels. Be careful with\nindenting. All of the `if` statements for score need to be inside of the difficulty\n`if` statement (i.e. indented 1 level more than the difficulty `if` statement)\\r\n\\r\n<img\nsrc=\"https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n\\r\n* Edit the `if` statements to give the\ncorrect scores\\r\n\\t* Easy level (+10 right, -1 wrong)\\r\n    * Hard level\n(+1 right, -1 wrong)\\r\n\\r\n<img src=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\"\nstyle=\"width: 100%\">\\r\n<a href=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - High Low - Debug_markdown_instruction: "# Debug Conditionals\\r\n\\r\nHelp!\n**I was trying to give the player a hint when their guess was within 2 of\nthe secret number but the code I wrote isn't working.** Can you fix it?\\r\n\\r\nCheck\nout the flow chart for the logic I wanted. **Hint:** The major problem here\nis that **conditional statements run in order from top to bottom**. Remember\nyou have to check the smallest/most narrow case first. Which set of numbers\nis larger/more broad (guess > secret number) or (guess > secret number + 2)\n? Another way to think about this is which case is contained completely in\nthe other case?\\r\n\\r\n# Do This:\\r\n\\r\n* Run the code to identify when the\nprogram is not working correctly.\\r\n\\r\n* Fix the problem with the order\nof the conditionals.\\r\n\\r\n<img src=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\"\nstyle=\"width: 100%; float: right\">\\r\n<a href=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - High Low - Dropdown_markdown_instruction: "# Dropdown\\r\n\\r\nOn the last\nlevel we used `promptNum` to get the user's guess. However, we had no way\nto limit them to the numbers we wanted. They could have typed 11 even though\nwe told them not to. A better way to get input with a limited set of options\nis the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23\nPM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control\nthe list of options users can choose and then use `getText` to get the chosen\nnumber.\\r\n\\r\nWe are going to need an event handler in order to do this.\nThe event handler will detect when the user has changed the value of the dropdown.\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a dropdown** for their guess instead of\n`promptNum`. Make sure to give it a good ID.\\r\n\\r\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Under properties **find the Options** and\nchange it to the **numbers 1 to 10**\\r\n\\r\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\"\nstyle=\"width: 250px\">\\r\n\\r\n* Add an event handler to detect the `change`\nevent on your dropdown.<br><br>\\r\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\"\nstyle=\"width: 150px; float: right\">\\r\n* Move your `if` statement inside\nthe event handler so it will check each time the dropdown is changed.<br><br>\\r\n*\nWhen the dropdown is changed **use `getText` to find out the user's guess**.\nSave the guess using a variable. **Don't forget about scope!**<br><br>\\r\n*\nTest your app -- it should work like the demo."
      U3 - High Low - Else if_markdown_instruction: "# *else-if*\\r\n\\r\nLet's help\nthe user even more by telling them if they were right or if their guess was\nhigh or low. There are **only 3 possible cases:** \\r\n* They were right.\\r\n*\nTheir guess was higher than the number.\\r\n* Their guess was lower than the\nnumber. \\r\n\\r\nTherefore, we can use a conditional set with one `if`, one\n`else-if`, and one `else` to implement this. Check out the flowchart below\nto see the logic. In order to check if something is high remember you can\nuse the greater than `>` symbol.\\r\n\\r\n**Remember:**  You can create an `else-if`\nstatement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first\n<img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> will add an `else`, the second will add an\n`else-if`.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an `else-if` statement to\naccommodate the 3 conditions.**\\r\n\\r\n* **Update the conditions** using `<`,\n`>`, and `==` to tell the user if their guess was correct, high, or low.\\r\n\\r\n*\n**Test out the program** to make sure your updates worked.\\r\n\\r\n<img src=\"https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png\"\nstyle=\"width: 100%\">"
      U3 - High Low - Else_markdown_instruction: "# *else*\\r\n\\r\n<img src=\"https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23\nPM.png\" style=\"width: 150px; float: right\">\\r\n\\r\nLet's add an `else`\nstatement so we can tell the user when they are right and when they are wrong.\\r\n\\r\n**Note:**  You\ncan create an `else` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> at the bottom of an `if` statement.  There\nis also an `if-else` block in the toolbox. \\r\n\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add an `else` statement**\\r\n\\r\n* **Move your `setText` inside the `else`\nstatement.** So it should say \"Nope that's not it. Guess again.\" when the\nuser does not guess the secret number."
      U3 - High Low - If_markdown_instruction: "# *if* Statement\\r\n\\r\n<img src=\"https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\nThe boolean expression\nwe tested on the last level allows us to make decisions. In order to make\nthese decisions we need to use something called a conditional. **Conditionals\ncheck if a boolean expression is true and then will execute the code inside\nof the `if` statement.** \\r\n\\r\n<img src=\"https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\nOver the number couple levels\nwe are going to be creating a **Guess My Number game**. The starter code uses\n`promptNum` to ask the user for a number from 1 to 10. The `if` statement\nchecks if the user guess is equal to the secret number.  Right now nothing\nhappens when they guess the right number. Can you fix that?\\r\n\\r\n# Do This:\\r\n\\r\n*\nRead the code to identify the boolean expression.\\r\n* Add a text label to\nthe screen. Have it start out with \"Guess my secret number!\"\\r\n* **Set\nthe text label to say \"You got it right!\" from inside the `if` statement**.\nThis will tell them they get it right only when that condition is true!\\r\n*\n**Test your code out** to make sure it works.\\r\n\\r\n<img src=\"https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif\"\nstyle=\"width: 350px\">"
      U3 - Keys - Add Image URLs_markdown_instruction: "# Adding Image URLs\\r\n\\r\nWe're\nready to start improving the \"My Favorite Things\" app. \\r\n\\r\nWe'll do\nthis in two steps:\\r\n1. We will change it from scrolling text to scrolling\nimages.\\r\n2. We will add key events to scroll with the keyboard.\\r\n\\r\n**Step\n1:**\\r\n* The default values in your array should be image URLs.\\r\n* The\nlarge **text area** needs to be changed to an **image**.\\r\n* Instead of **setting\nthe text**, you'll now be using `setImageURL` to set the URL of the image.\\r\n\\r\n#\nDo This:\\r\n**NOTE: We've re-loaded the code from the \"My Favorite Things\"\nApp you wrote in the previous lesson.** (If you want to refer to code you\njust wrote, you can go back to look at it.)\\r\n\\r\n* **Set the default values**\nin your array to be image URLs. (You might need to take a minute to go collect\na few if you didn't in preparation for this lesson.)\\r\n* In Design Mode\n**delete the text area** and replace it with an **image**. Make sure your\nimage has a descriptive and meaningful ID.\\r\n* Inside your function that\nupdates the display **replace `setText` with `setImageURL`**. Make sure you\nreference your new image element **by its correct ID**.<br>\\r\n<img src=\"https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif\"\nstyle=\"width: 350px\">\\r\n* ** Test your app** to confirm that it's now\nshowing the images in your array."
      U3 - Keys - Buttons and Keys_markdown_instruction: "# Buttons and Keys\\r\n\\r\nWe\nnow know how to respond to key events, but often we want the user to be able\nto **do the same thing with the app in multiple ways**. For example, we might\nwant the app to exhibit the same behavior if the user clicks a button on the\nscreen or a key on the keyboard. (This is how so-called \"keyboard shortcuts\"\nwork.)\\r\n\\r\nIn the program you're about to see, we've provided event handlers\nfor some buttons on the screen. You're going to **create identical functionality**\nfor the key events.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add conditional statements\ninside the `keydown` event handler** to check for when the **up and down arrows**\nare pressed.\\r\n<img src=\"https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* ** Copy the code for the `upImage` button**,\nand paste into the up arrow `if` statement.\\r\n![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\\r\n\\r\n*\n** Copy the code for the down button**, and paste it into the down arrow `if`\nstatement.\\r\n\\r\n* Confirm your app **responds to key events** by running\nit.  For example, clicking the image of the up arrow in the app should do\nthe same thing as hitting the up arrow on the keyboard.\\r\n\\r\n"
      U3 - Keys - Demo App_markdown_instruction: "# Making our App an Image Scroller\\r\n\\r\nOver\nthe course of this lesson we are going to be working towards improving our\n\"My Favorite Things\" app to add some new features. Our improved app will\nbe able to:\\r\n\\r\n* Respond to **key events**.\\r\n* **Display images** by\nstoring their URLs.\\r\n\\r\nWe'll call this new kind of app an **image scroller**\nbut feel free to call it anything you like.\\r\n\\r\n# Do This:\\r\n\\r\n* Close\nthese instructions.\\r\n* **Experiment with the improved \"My Favorite Things\"\napp** to understand the new features we'll be adding.  \\r\n* Make sure you\ntry clicking the **left and right arrow keys!**\\r\n\\r\nOnce you think you've\nexperimented enough, continue on to the next level."
      U3 - Keys - Final Image Scroller_markdown_instruction: "# Final Image Scroller\\r\n\\r\nYou're\nnow ready to add key event functionality to your app! As you are doing so,\nkeep an eye out for places where you need to **refactor** old code in order\nto prevent redundancy. **Create functions** that carry out repeated tasks\nand make other changes to keep your code **readable and consistent**. \\r\n\\r\nIf\nyou want a reminder of how key events work, you can always go back to the\nexample from earlier in this lesson.  You will need to add `if` statements\nto check for which keys were pressed, just as before.\\r\n\\r\n# Do This:\\r\n\\r\n*\nAdd the ability to respond to **key events** to your app.\\r\n\\r\n* **Refactor\nyour old code** to remove redundant portions.\\r\n\\r\n* Keeping adding to your\nprogram. What other features do you want to include?"
      U3 - Keys - Functions_markdown_instruction: "# Refactoring Code\\r\n\\r\nOn the\nlast level, we copied a few lines of code to a different part of our program.\n**Hopefully warning bells went off in your head!** Any time you are copying\nportions of code from one area of your program to another, it's a good indication\nthat you should write a function to capture that behavior in one place. \\r\n\\r\nWhen\nyou add new features to your code **you will often create redundancies**.\nTo keep your code readable and consistent, you may need to rewrite old pieces\nof code. This process of restructuring existing code without changing its\nexternal behavior is called **refactoring**. It is an important process when\ndeveloping software that improves code readability and reduces complexity.\nAs a result, code is much easier to maintain.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create\na function called `doUpArrow`**. \\r\n* Move the code from the `upArrow` event\nhandler to the function.\\r\n* **Call `doUpArrow`** from both your button and\nkey event handlers. (The animation below shows the steps above.)\\r\n* Repeat\nthe same process for the down arrow / button by creating a function called\n`doDownArrow`.\\r\n* Once you have **removed these redundancies from your code**\ntest your app to make sure it still works!\\r\n\\r\n![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)"
      U3 - Keys - Key Up and Down_markdown_instruction: "# Using *keyup* and *keydown*\\r\n\\r\nOn\nthe last level, we played with the `keypress` event. Let's take a look at\nsome of the other key events. \\r\n\\r\nYou are going to get the chance to play\nwith `keyup` and `keydown` in this level. **Pay attention to the different\nvalues of `event.key` for `keydown` and `keypress`. **\\r\n\\r\n# Do This:\\r\n\\r\n*\nSwitch to the event type to `keydown` or `keyup`. \\r\n\\r\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Try out the event.\\r\n\\t* Press and hold\na key\\r\n    * Try the arrow keys\\r\n    * Shift\\r\n    * Option\\r\n    *\nAlt\\r\n    * Others"
      U3 - Keys - Multiple Keys_markdown_instruction: "# Multiple Keys\\r\n\\r\nIf\nyou want your program to respond differently to a couple different keys, you\nwill need to use chained conditional statements (`if` and `else-if`). \\r\n\\r\nLet's\nset up the program to **play a different sound for the down key.**\\r\n\\r\n#\nDo This:\\r\n**We've added another sound** to the app, but it's just sitting\nat the top of the code.\\r\n\\r\n* Add an `else-if` statement to check if the\n**down arrow** was pressed.\\r\n\\r\n<img src=\"https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* Move the `playSound` command from the top\nof the program inside the `else-if`. (Notice that in the example, we switch\nto block mode to move this line because it's easier to move blocks around\nthat way. You can just copy/paste the text too.)\\r\n\\r\n<img src=\"https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* **Test the program:** it should play one\nsound when the **up** arrow is pressed and a different sound if the **down**\narrow is pressed.  It shouldn't make any sound if any other keys are pressed.\n"
      U3 - Keys - Practice Adding Images with URL_markdown_instruction: "# Adding\nImage URLs\\r\n\\r\nYou are going to be creating your own image scroller! Lets\nset up the array of image URLs. There are a couple different ways to set up\nan array but we are going to use `appendItem` to add all the image URLs. \\r\n\\r\n**Note:**\nAt this point you should have collected image URLs to use for your image scroller.\nIf you have not collected your image URLs yet, go do that now. \\r\n\\r\n# Do\nThis\\r\n\\r\n*  ** Add your image URLs to the images array.**  Pull out an\n`appendItem` command. Change the array name to match the array. Change the\nitem parameter to your image URL.\\r\n\\r\n<img src=\"https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* ** Test the the 'Add' button** to check\nthat it adds a new image at the current index of the array.\\r\n\\r\n<img src=\"https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif\"\nstyle=\"width: 200px\">\\r\n\\r\n* ** Set the colors and theme **of your app\nto personalize it. ** Note: ** You can change the way the screen looks but\nmake sure to keep all the elements currently on the screen or your app might\nnot work."
      U3 - Keys - Words to Images_markdown_instruction: "# Adding Image URLs\\r\n\\r\nYou\nare going to be creating your own image scroller! Lets set up the array of\nimage URLs. There are a couple different ways to set up an array but we are\ngoing to use `appendItem` to add all the image URLs. \\r\n\\r\n**Note:** At\nthis point you should have collected image URLs to use for your image scroller.\nIf you have not collected your image URLs yet, go do that now. \\r\n\\r\n# Do\nThis\\r\n\\r\n*  ** Add your image URLs to the images array.**  Pull out an\n`appendItem` command. Change the array name to match the array. Change the\nitem parameter to your image URL.\\r\n\\r\n<img src=\"https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif\"\nstyle=\"width: 350px\">\\r\n\\r\n* ** Test the the 'Add' button** to check\nthat it adds a new image at the current index of the array.\\r\n\\r\n<img src=\"https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif\"\nstyle=\"width: 200px\">\\r\n\\r\n* ** Set the colors and theme **of your app\nto personalize it. ** Note: ** You can change the way the screen looks but\nmake sure to keep all the elements currently on the screen or your app might\nnot work."
      U3 - Loops -  9 Part 2_markdown_instruction: "# Boolean Operators in While\nLoops Part 2\\r\n\\r\nWe just saw that you can create more complex boolean expressions\nfor our while loops just like our for loops. Lets try something a little more\ncomplex. \\r\n\\r\nRight now this code rolls two dice as long as either one\nof them is less than 3.   Modify the condition so that both dice have to be\ngreater than 3 for the loop to stop.\\r\n\\r\n# Do This\\r\n\\r\n* **Change the\nboolean expression** for the while loop so that it will roll until both dice\nare greater than 3. **Hint:** A NOT( `!`) operator might be helpful for this\none."
      U3 - Loops -  Complex Condition_markdown_instruction: "# Expressing Stopping\nConditions: \"Until Loops\"\\r\nIt is often more natural to think about looping\nin terms of when the loop should end rather than when it should continue.\nFor example you might say \"keep going down the road until you see the gas\nstation\" or \"keep calling until you get through to someone.\" You might\nthink of these as \"until loops\" rather than \"while loops,\" since we want\nthe loop to continue **until a condition is true rather than while a condition\nis true**.\\r\n\\r\n**There is no \"until loop\" in JavaScript** but it is actually\nquite easy to translate \"until loops\" into `while` loops so that you can\nuse them in programs. An \"until loop\" runs *until* a condition is true,\nas opposed to a while loop which runs *as long as* a condition is true.  That\nmeans an until loop is the logical inverse of a while loop - it runs as long\nas the **condition is false**. The table below shows how you can use the **NOT**\n( `!` ) operator to translate stopping conditions into `while` loop conditions.\\r\n\\r\n|\nExpressed as Stopping | Expressed as Until Loop | Expressed as While Loop\n|\\r\n| --- | --- | --- |\\r\n| **Stop** once you reach the gas station | Keep\ngoing **until** you reach the gas station | Keep going **while** you have\n**NOT** reached the gas station|\\r\n| **Stop** calling when you get through\nto someone | Keep calling **until** you get through to someone | Keep calling\n**while** you have **NOT** gotten through to someone|\\r\n| **Stop** when `x\n== y` | `until(x == y){...` | `while(!(x == y)){...`|\\r\n<br>\\r\nNote how\nwe can use the **NOT** operation to find the **logical inverse** (or opposite)\nof the condition from our \"until loop\" to create a `while` loop. Let's\ndo a little practice of that now.\\r\n\\r\n# Do This:\\r\n\\r\n**Starter code**\nis provided that repeatedly rolls two dice and writes their values to the\nscreen. **Careful: ** before you edit this code it creates an infinite loop.\\r\n\\r\n*\nUse the technique above to **modify this code** so that the loop **stops when\nboth dice are 5 or greater**.\\r\n* **Try it out and experiment.** You should\nexit the loop the first time both dice have values greater than or equal to\n5 displayed.\\r\n\\r\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59\nPM.png)"
      U3 - Loops - 1_markdown_instruction: "# *while* Loops\\r\n\\r\n<img src=\"https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28\nPM.png\" style=\"width: 100px; float: right\">\\r\n\\r\n **The `while` loop\nuses a boolean condition to repeatedly run a block of code.**  It checks the\nexpression, and if it is true it runs the block of code contained within it.\nThis process of checking the condition and running the block of code is repeated\nas long as the boolean condition remains true. **Once the boolean expression\nbecomes false it will stop.**\\r\n\\r\nWe are going to start exploring a `while`\nloop by **modifying the condition on which a `while` loop runs and using `console.log`\nto ensure it is correctly evaluating its condition**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** is provided which creates a `while` loop that repeatedly\nmoves the turtle around the screen.\\r\n* **Add a `console.log` command** inside\nthe loop after `num` is assigned a random number. This way you can see the\nvalue the loop is based on.\\r\n![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\\r\n*\n**Run the program a couple times** and look at the results.\\r\n* **Change\nthe condition for the `while` loop** to check if the variable **`num` is less\nthan 90**. Your output might look like the example below.\\r\n\\r\n![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17\nAM.png)"
      U3 - Loops - 10_markdown_instruction: "# Writing a Loop From English\\r\n\\r\nAlright\nit’s your turn. Can you translate the English into code? This problem also\ninvolves an \"until loop\" problem.\\r\n# Do This:\\r\n\\r\nTake this statement\nin English and translate it into code: \\r\n\\r\n**“Write a program that simulates\nthe rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is\neither a 7 OR an 11.\"**  Your program should display the results of each\nroll.  \\r\n\\r\n**NOTE**: this one is a *little* tricky.  Hint: In English\nwe sometimes say \"or\" when in cold hard logic we mean \"and\".\\r\n\\r\nHere\nis a sample output:\\r\n\\r\n![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)"
      U3 - Loops - 11_markdown_instruction: "# Debugging: Complex Logic\\r\n\\r\nIn\nthis challenge you need to find and fix a bug in a program that simulates\nrolling one die.  \\r\n\\r\nThe given code accidentally loops infinitely, so\nsomething must be wrong with the condition. Can you figure out how to fix\nit?\\r\n\\r\n# Do This:\\r\n\\r\n* **Fix the condition** so that it keeps rolling\nthe die as long as the value is **not a 2 or a 3.**\\r\n\\r\n* **Hint:** Think\nabout other ways you can express this idea in English. \\r\n\\r\n"
      U3 - Loops - 12_markdown_instruction: "# Repeat Specific Number of Times\\r\n\\r\nInstead\nof writing code that makes the loop run a random number of times, we can control\nthe `while` loop by changing the variable used in the boolean expression differently.\nLet’s try just printing a string 5 times.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter\nCode:** Right now the code prints a string \"Hi\" twice.\\r\n* **Change the\ncode** so that it prints the string \"Hi\" 5 times.\\r\n* **Notice** how `count`\nis being re-assigned each time through the loop."
      U3 - Loops - 13_markdown_instruction: "# Counting by More Than 1\\r\n\\r\nSometimes\nyou want to count up by something other than 1. In that case we do need to\nuse the form of `count = count + 1` where we can change 1 to be any number\nwe want to count up by. The `++` and `--` operators only work for counting\nby one.\\r\n\\r\nLets try counting by 3. \\r\n\\r\n\\r\n# Do This\\r\n\\r\n* **Starter\nCode: ** The program right now will count from 1 to 30.\\r\n\\r\n* **Update\nthe code to count up by 3 instead of 1.** So it will say 3,6,9,12,15..."
      U3 - Loops - 14_markdown_instruction: "# Defensive Loop Conditions\\r\n\\r\nTake\na look at the starting code. Instead of counting by 3's we had decided to\ncount by 4's. \\r\n\\r\nBut this will run us into a problem. Can you see why?\\r\n\\r\nWe\nwanted to stop counting at 30, but when you count by 4 you will actually never\nhit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop\nwhen the number is **greater than 30**. This is an important defensive programming\nstrategy. Make the condition catch more cases than you think you need so that\nif for some reason something does not go exactly as you planned it will hit\nthe stop condition and not go infinitely.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Change\nthe loop condition** to prevent the infinite loop and stop counting once the\ncount is past 30."
      U3 - Loops - 15_markdown_instruction: "# Using an *if* Statement In a Loop\\r\n\\r\nA\ncommon thing to do is to use variables to keep track of some sort of count.  When\nused in a loop we count things very quickly.\\r\n\\r\n**Scenario:**\\r\nIf you\nroll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If you\nwere to roll a pair of dice 1,000 times, on average, how many times would\nit come up as 12?\\r\n\\r\nTo figure this out, we could write code to run an\nexperiment. It would go something like this:\\r\n* Make a loop that simulates\nrolling a pair of dice 1,000 times.\\r\n* Inside the loop, add an `if` statement:\n**if die1 + die2 == 12, then add 1 to a counter**.\\r\n* After the loop, display\nthe result.\\r\n\\r\n# Do This:\\r\nThe **starter code** sets up the whole experiment\nfor you, except it doesn't count the number of 12's rolled - that's your\njob.\\r\n\\r\n* **Run the code** to see what the experiment does.\\r\n\\r\n* **\nAdd an `if` statement inside the loop** to check if the sum of the dice is\nequal to 12, and add 1 to `twelveCount`.\\r\n\\r\n*  Once the loop has completed,\n**display the number of times the sum was 12.**\\r\n\\r\n**Note:** If you remove\n(or comment out) the `console.log` statement that displays every roll of the\ndice, the experiment will speed up A LOT!  You could do tens of thousands\nof dice rolls in a matter of seconds."
      U3 - Loops - 16_markdown_instruction: "# Changing Loop Conditions\\r\n\\r\nWe\nwant to find out how many times you have to roll to get the sum of 7 100 times.\nIn order to do this we still need to keep track of the number of times we\nget a sum of 7 as well as the number of times we have rolled so far. The code\nwill be similar to what we had before.\\r\n\\r\n# Do This\\r\n\\r\n* Update the\nwhile loop condition to **stop when the sum of 7 has come up 100 times**.\\r\n\\r\n*\nUpdate the code to **print the number of rolls it took to get the sum of 7\n100 times**."
      U3 - Loops - 2_markdown_instruction: "# Infinite *while* Loops\\r\n\\r\n`while`\nloops run until their condition becomes false, which raises an interesting\nquestion.  **What happens if the condition never becomes false**? In these\ncases the program enters what is called an **infinite loop** over the commands\nin the `while` loop, and it never reaches the rest of your program. **We normally\navoid infinite loops in our programs**, but let's try it out to see what\nhappens.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** is provided which creates\na `while` loop to move the turtle around the screen.\\r\n* **Change the `while`\nloop condition to something that will always be true.** The easiest way to\ndo this is to change 50 to be a number that randomNumber will never generate\nsuch as 200. \\r\n* **Run the program.** Notice that it will never stop running.\nYou may even get an error from your browser.\\r\n* **Hit reset to stop it.**\nYour computer may actually stop running as you expect if you let an infinite\nloop run for too long. **It's possible you may even need to close the browser\nwindow and reload the page. If you hit reset early enough you can usually\navoid this problem.**\\r\n* **Find a condition using `<` or `>` that will also\ncause an infinite loop.**"
      U3 - Loops - 3_markdown_instruction: "# Changing *if* to *while*\\r\n\\r\n**\nHow many times would we have to roll a die before it comes up as a 6?** In\nthe program you're about to see, we **simulate rolling a die (generating\na random number between 1 and 6)** in order to answer this question.\\r\n\\r\n#\nDo This:\\r\n\\r\n** Starter code** is provided which re-rolls a die once if\nthe first roll is not a 6. \\r\n* **Change the `if` statement to a `while`\nloop** so the program will keep rolling the die **while the current roll is\nnot a 6.** \\r\n\\t* **Hint:** The easiest way to do this is to change the text\nfrom `if` to `while`.\\r\n<img src=\"https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif\"\nstyle=\"width: 350px; border: solid 1px black \">\\r\n* Run the program to\ntest out the change.\\r\n"
      U3 - Loops - 4_markdown_instruction: "# Debug Commands\\r\n\\r\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34\nAM.png\" style=\"width: 200px; float: right\">\\r\n\\r\nCheck out the new **Debug\nCommands toolbox** that has appeared next to the Debug Console! These powerful\ntools allow us to **pause a program at a certain point** while it’s running\nand then execute lines one at a time. \\r\n\\r\nUsing these tools we can investigate\nthe state of variables and other elements of the program at any point, mid-execution.\nThis makes it much easier to see what’s happening while the programming is\nactually running!\\r\n\\r\nIn order to use the debug commands, you first have\nto indicate which line you want the program to pause at.  This is called adding\na “breakpoint” (see animation below).\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a breakpoint**\non the line where the `while` loop starts. (**Just click the line number.**)\\r\n*\n**Use the <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09\nPM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\\r\n*\nEach time you hit the breakpoint, **use the console to check value of `num`**.\n\\r\n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48\nAM.png\" style=\"width: 75px\"> it will \"continue\" executing the program\nnormally, unless of course it hits another breakpoint. \\r\n\\r\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)"
      U3 - Loops - 5_markdown_instruction: "# Update Condition\\r\n\\r\nIn order for\na `while` loop to stop at some point, the code inside the loop **must change\nsomething about the state of the program** - usually the value of a variable\n- so that eventually the boolean expression becomes false.  Otherwise you'd\nhave an infinite loop!\\r\n\\r\n# Do This:\\r\n**Starter Code:** The starter\ncode runs an infinite loop. \\r\n* **Run the code** to see the problem in action.\nRemember to hit the reset button to stop the infinite loop.\\r\n* **Add code\ninside the `while` loop** which will **update the variable `num` so that the\ncondition will eventually become false.**\\r\n* **TIP:** you can use the debugging\ntools if you think they would be helpful."
      U3 - Loops - 6_markdown_instruction: "# Starting Condition\\r\n\\r\nWe have seen\nthat loops can run infinitely. On the last level we saw that there is also\nthe **chance that the loop never runs at all!** If the condition of the `while`\nloop starts out false then the loop will never run.\\r\n\\r\nWe fixed this problem\nin the last exercise by displaying the value of `num` in two places: before\nthe loop and in the loop. Duplicating code is generally a bad strategy, so\nthe question is: can we be a little clever and get into the loop without missing\nany values?  The answer is yes.\\r\n\\r\n**The solution** is to initialize the\nvalues used in our boolean expression so that we are **certain** it will evaluate\nto true the first time the loop checks it.  **For example, if your loop condition\nis: `while (num != 6)` you could initialize `num` to anything other than 6\nand you'd know that you get into the loop**.  \\r\n\\r\nIf you use this technique\nthough...\\r\n1. You need to make sure you set the value of `num` right away\ninside the loop.\\r\n2. You probably want to use a nonsense value like -1,\nso that if you ever see that displayed it will be obvious something is wrong\nand be easier to debug.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code** is provided\nwhich creates a `while` loop that never runs.\\r\n* **Run the program** once\nto see that the loop is never entered.\\r\n* **Fix** the problem by changing\nthe initial value of `num` to a nonsense value such as -1."
      U3 - Loops - 7_markdown_instruction: "# Printing After Setting Value\\r\n\\r\nWe\nstarted trying to remove the duplicate code we had on the last level by initializing\na variable to a nonsense, or \"dummy,\" value that would still ensure we entered\nthe loop. \\r\n\\r\nIn the code provided, not every number is going to display.\nHowever, this time we want to try **not to add code** to fix the problem,\nsince duplicate code is inefficient. \\r\n\\r\n# Do This:\\r\n\\r\n* **Starter\nCode:** The code is completely functional except that it does not print one\nof the numbers it's supposed to. In addition we don't want it to print the\ndummy variable of -1.** Hint: ** What should be the last number that prints\nevery time this program runs?\\r\n\\r\n* Run the program to see the behavior.\\r\n\\r\n*\nFix the code so that it prints all the values of `num`. **Hint:** You don't\nneed to add any code. Just switch the order of the code you have now!"
      U3 - Loops - 8_markdown_instruction: "# Printing Before the Loop Starts\\r\n\\r\nSometimes\nour code will be doing the right thing but we won't be able to tell because\nof the way we are printing values. We need to make sure we print all the values\nwe are interested in. \\r\n\\r\nThis program *should* write all the values of\n`num` to the screen as it runs; however it misses one - the first one generated.  \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program** a few times and notice that sometimes\nit just prints \"Done.\" and nothing else, even though a number was generated.\nThe first value of `num` never gets displayed.\\r\n* **Add a `write` statement**\nbefore the loop to print the first number. \\r\n* **Hint:** Look at the two\ntimes `num` is assigned a value. Which one isn't being displayed? "
      U3 - Loops - 9_markdown_instruction: "# Boolean Operators in *while* Loops\\r\n\\r\nWe\ncan create compound boolean expressions to control our `while` loops just\nlike our `if` statements. Let's try using boolean operators in our `while`\nloop condition.\\r\n\\r\n# Do This:\\r\n\\r\n* Right now this code rolls two dice\nas long as either one of them is less than 3.  **Modify the condition so that\nit keeps rolling as long as *both* are less than 3.**\\r\n\\r\n* **HINT:** To\nsay that both dice are less than 3 the boolean expression must say: if die1\nless-than 3 AND die2 less-than 3...\\r\n"
      U3 - Loops - Continue_markdown_instruction: "# Debug Commands\\r\n\\r\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34\nAM.png\" style=\"width: 250px; float: right\">\\r\n\\r\nCheck out the new box\nthat has appeared next to the Debug Console! These are the debug commands\nand they are extremely powerful.  These commands allow us to stop a program\nat a certain point in its execution and slowly follow, step-by-step, what\nis happening during the run. \\r\n\\r\nIn order, **to use the debug commands\nyou first have to add a breakpoint**. Breakpoitns tell the computer that when\nyou hit this line of code pause and wait for the programmer to tell you what\nto do next. A breakpoint is marked by <img src=\"https://images.code.org/99c9685af5b15840287b41620cdc82ea-image-1446739738049.08.36\nAM.png\" style=\"width: 35px\">. You can create a breakpoint by clicking on\nthe number next to the line of code your want the computer to stop at.\\r\n\\r\n**Note:**\nYou'll notice that once you hit run the <img src=\"https://images.code.org/4eea3a317da5b0781275493955a2d782-image-1446741391883.36.03\nAM.png\" style=\"width: 75px\"> button becomes the <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48\nAM.png\" style=\"width: 75px\">button.\\r\n\\r\n# Do This\\r\n\\r\n* **Add a breakpoint**\nto your code so the program will pause each time it restarts the while loop.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ae81079677c78d7421b3acc55947fb08-image-1446739414661.gif\"\nstyle=\"width: 250px\">\\r\n<br>\\r\n\\r\n* **Use the Debug Commands to to make\na list of all the values rolled before a 6**.\\r\n\\t* Each time you hit the\nbreakpoint, **use console to check value of num**. \\r\n    * To **move to\nthe next time the value of num changes** use either  <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09\nPM.png\" style=\"width: 75px\"> or  <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48\nAM.png\" style=\"width: 75px\">\\r\n\\t\\t* **Step Over** - Executes the current\nline of code and steps over to the next one.\\r\n\\t\\t* **Continue**  -  Execute\nuntil you hit the next break point\\r\n\\t\\t* ( Note: We will talk about Step\nin and Step out later.)"
      U3 - Loops - Minus Minus_markdown_instruction: "# *++* Has a Friend!  Introducing\n*--*\\r\n\\r\nAs you may have guessed, just as we can write `count = count +\n1` as `count++` we can also write `count = count - 1` as `count--`.\\r\n\\r\nLet’s\nwrite a program that counts **down** from 10 down to 1. \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter Code: ** The current program counts **up** from 1 to 10. \\r\n\\r\n*\n**Change the code to use `count--` to count *down* from 10 to 1.** You will\nneed to:\\r\n\\t* Change the looping condition.\\r\n    * Change `count++` to\n`count--`.\\r\n    * Change the initial value assigned to `count`.\\r\n"
      U3 - Loops - Plus Plus_markdown_instruction: "# *++* Operator\\r\n\\r\nAs programmers\nwe are always looking for more concise ways to write code. It is so common\nto add 1 to a variable such as in `count = count + 1` that there is actually\na shorthand for it. \\r\n\\r\n# Introducing the *++* Operator\\r\n\\r\nYou can\nwrite `count++` to add 1 to `count`. `count++` does the exact same thing as\n`count = count + 1`! \\r\n\\r\nIn fact the computer turns `count++` into `count\n= count + 1` behind the scenes - it really is just a convenient shorthand.\\r\n\\r\n**Note:**\nThis is more of a programmer style choice so if you want to write your code\nusing `count = count + 1` instead there is nothing wrong with that!\\r\n\\r\n#\nDo This:\\r\n\\r\n* Change the code to use `count++` instead of `count = count\n+ 1`. (You'll need to be in text mode to do this.)\\r\n\\r\n** Misconception\nAlert:** You don't need to write `count = count++` - the computer is doing\nthe assignment for you."
      U3 - Loops - Typing in Console_markdown_instruction: "# Debug Console: Variable\nValues\\r\n\\r\nUp until now, if we wanted to find out the value of a variable\nat some point in the execution of a program, we've used `console.log`. That\nis still going to be a great strategy but **the Debug Console can do even\nmore for us!**\\r\n\\r\n**Check this out:** We can check the value of a variable\nin real time (as our program executes) by typing its name into the prompt\nwithin the Debug Console and hitting \"enter\". **This is another powerful\ntool for debugging your programs.** \\r\n\\r\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program.**\\r\n\\r\n* Use the Debug Console to **check\nthe ending value of `num`**. You can do this by typing num in the Debug Console\nand hitting enter!"
      U3 - Loops - minus = operator_markdown_instruction: "# Try Out the *-=* Operator\\r\n\\r\nThe\n`-=` operator works almost identically to `+=`, but instead it subtracts the\nvalue provided from the variable. Let's use this operator to **create a loop\nthat counts down from 30 by 3's**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Change the\ncode to use `-=`** to count from *down* from 30 to 0 by 3's."
      U3 - Loops - plus and minus = operator_markdown_instruction: "# Introducing\n*+=* and *-=* Operators\\r\n\\r\nSometimes you want to add or subtract something\n*other than 1* from the current value of a variable. If you wanted to add\nor subtract 3 for example, such as: `count = count + 3` or `count = count\n- 3`, `++` and `--` wouldn’t help. \\r\n\\r\nIt turns out this is pretty common\nas well so there is actually a shorthand version of `count = count + 3`. \\r\n\\r\n**Introducing\n`+=`  and `-=`**!\\r\n\\r\nWe can use the `+=` or `-=` operator to add or subtract\nany value we want to the current value of a variable. \\r\n\\r\nSo, the shorthand\nversions of `count = count + 3` and `count = count - 3` would be:\\r\n * `count\n+= 3` \\r\n * `count -= 3`\\r\n\\r\n**Notice** that these 3 statements: `count\n= count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\\r\n\\r\nWhich\none you use as a programmer is your choice, and in the future you can use\neither version, but try out the new operator here.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Change the code to use `count += 3`** instead of `count = count + 3` so\nthe program will still count up by 3. (You'll need to be in text mode to\ndo this.) \\r\n\\r\n(You'll get to try out `-=` on the next level.)"
      U3 - Loops And Arrays - Add 5_markdown_instruction: "# Updating Values in an\nArray with a *for* Loop\\r\n\\r\nThe `for` loop you set up on the last level\nis actually so common that we will rarely deviate from this `for` loop setup.\\r\n\\r\n<img\nsrc=\"https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50\nAM.png\">\\r\n\\r\nThis `for` loop basically means **\"for every possible index\nin `myArray`...\"** and we use it as a basic building block for processing\narrays. Common array-processing techniques like searching for a value, updating\nall values, or calculating simple stats on an array will all be completed\nusing a `for` loop written with the syntax above.\\r\n\\r\nIn fact, we're going\nto see that happen right now as we **use a `for` loop to add 5 to every value\nin an array**.\\r\n\\r\n# Do This:\\r\n**Starter code** has been provided that\ncreates an array of random values. You are also given a `for` loop that loops\nover every index in the array.\\r\n\\r\n* Add code inside the loop to **add\n5 to the value at every location in the array**. \\r\n\\t* ** Remember: ** `myArray[i]`\nrefers to the element in the array at the current value of `i`.\\r\n* Confirm\nyour code works by **displaying the values in your array before and after\nyour loop**. Below is a sample result.  Notice how, after the array has been\nprocessed, all of the values are 5 greater than the originals.\\r\n\\r\n![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41\nPM.png)"
      U3 - Loops And Arrays - Challenge 1_markdown_instruction: "# Challenge 1: Loops\nand Arrays\\r\n\\r\nLet's practice loops over arrays and functions.  \\r\n\\r\n**Challenge:**\nWrite a function that finds and returns the minimum value in an array.  \\r\n\\r\n\\r\n#\nDo This\\r\n\\r\n* **Starter Code: ** We have given you an array to use to test\nyour function.\\r\n\\r\n* Write a function that finds and **returns the minimum\nvalue in an array.**   **Hint:** use a variable to keep track of smallest\nvalue you've found so far, and update it when you find a smaller one."
      U3 - Loops And Arrays - Challenge 2_markdown_instruction: "# Challenge 2: Loops\nand Arrays\\r\n\\r\n**Challenge:** Write a function that returns the largest\nvalue in an array.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* **Starter Code: ** We have\ngiven you an array to use to test your function.\\r\n\\r\n* Write a function\nthat finds and **returns the maximum value in an array.**  "
      U3 - Loops And Arrays - Counting Times_markdown_instruction: "# Counting Occurrences\nof a Value\\r\n\\r\nInstead of displaying a true/false value for *every* item\nin the list, let's compute one value and display it.  A common thing to want\nto do is **count** the number of times a value occurs.  We can do this with\na very small change to the code we've already got. \\r\n\\r\n# Do This:\\r\n**Starter\nCode** is similar to past levels.  We've also created a variable called `fiveCount`.\\r\n\\r\n*\n** Add an `if` statement** inside the `for` loop to **increment `fiveCount`\nif the value is equal to 5. **\\r\n (Note: this will be exactly the same as\nthe `if` statement you wrote in the previous level. Just giving you more practice).\\r\n\\r\n*\n**Run and re-run your code** to make sure that it's accurately counting the\nnumber of 5's in the array. Since the array is getting a random set of values\nevery time you run the program, you might have to run it a bunch of times\nto thoroughly test it. Make sure you get it to run at least once when no 5's\nappear in the array.\\r\n\\r\n* Finally, if you'd like to, **change the first\nloop in the program to add 100 items to the array** instead of 10. Your code\nshould still work to count the number of 5's, no matter how big the original\narray is!"
      U3 - Loops And Arrays - Divid by 2_markdown_instruction: "# Divide by 2\\r\n\\r\nIn\nthe last exercise, you updated every element in an array using a `for` loop.\nLet's get a little bit more practice with the pattern you used in the last\nexercise, this time creating the loop yourself.\\r\n\\r\n# Do This:\\r\n**Starter\ncode** is provided which creates an array of random values.\\r\n\\r\n* Create\na `for` loop that **iterates over every index in the array**.\\r\n\\r\n* Within\nyour loop, add code that **divides each value in the array by 2**.\\r\n\\r\n*\nUse the provided `console.log` statements to **confirm your program runs as\nexpected**. Below is an example of the expected outcome.\\r\n![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21\nPM.png)"
      U3 - Loops And Arrays - Find Max_markdown_instruction: "# Reusing a function\npattern: find maximum\\r\n\\r\nLet's use this pattern one more time. This time\nwe'll provide you less guidance, but you can go back and look at old exercise\nif you like. You'll need to **write a function that finds the maximum value\nin an array**.\\r\n\\r\n**Basic Function Pattern**\\r\n* Create a **function\nthat accepts an array** as input\\r\n* **Create a \"flag\" variable** and set\nits default value before looping through the array\\r\n* Loop through your\narray with a `for` loop that **visits every index in the array**\\r\n* **Update\nyour flag** as necessary with every iteration of your loop\\r\n* **Display\nyour flag** at the end of the loop.\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code**\nhas been provided which outlines and calls `findMaxVal` with different inputs.\nYour job will be to finish writing the function.\\r\n* **Finish writing the\nfunction** so that it finds the maximum value in the array. Use the pattern\noutlined above to guide you, or go back to previous exercise if you need.\\r\n*\n**Run the code** to ensure it is working as you intend.\\r\n\\r\n![](https://images.code.org/6abb5efba9b4d179db8aa0d6df471665-image-1447878763623.32.23\nPM.png)"
      U3 - Loops And Arrays - Find Min_markdown_instruction: "# Reusing a Function\nPattern: Find Minimum\\r\n\\r\n**Nice work! You've just written a function\nthat implements an algorithm to process an array!** If you feel comfortable\nwith the basic pattern you used to create this function, you can quickly create\nfunctions for many other useful algorithms that work on arrays.\\r\n\\r\n**Basic\nFunction Pattern**\\r\n\\r\n* Create a **function that accepts an array** as\ninput.\\r\n* **Create a \"flag\" variable** and set its default value before\nlooping through the array.\\r\n* Loop through your array with a `for` loop\nthat **visits every index in the array**.\\r\n* **Update your flag** as necessary\nwith every iteration of your loop.\\r\n* **Display your flag** at the end of\nthe loop.\\r\n\\r\nLet's use this pattern to **write a function that finds\nand displays the smallest value in an array**.\\r\n\\r\nInstead of using a true/false\nflag to indicate whether we found a value, **we'll use a variable to keep\ntrack of the smallest value we've seen in the array so far**.\\r\n\\r\n# Do\nThis:\\r\n\\r\n**Starter code** has been provided which outlines and calls `findMinVal`\nwith different inputs. Your job will be to finish writing the function.\\r\n\\r\n*\nBefore programming, try to **develop an algorithm that you could use to find\nthe minimum value in an array**. Use the pattern outlined above as a guide.\\r\n*\n**Write code** in the places indicated with comments to complete the function.  \\r\n\\t*\nYou'll want to use the `minVal` variable to keep track of the smallest value\nyou've found so far.\\r\n    * You'll need to **write an `if` statement**\nthat checks whether the current value in the array is less than `minVal`.\nIf it is, then update the smallest value.     \\r\n* **Run the code** to ensure\nit is working as you intend.\\r\n\\r\n<details><summary><strong>HINT: pseudocode</strong>\n[click to expand]</summary>\\r\n<p>\\r\nHere is some pseduocode that you should\nbe able to implement.\\r\n</p>\\r\n<pre>\\r\nminVal = first value in array \\r\nfor\nEACH value IN array\\r\n  if value < minVal\\r\n     minVal = value\\r\n\\r\ndisplay(minVal)\\r\n</pre>\\r\n</details>\\r\n\\r\n\\r\n![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03\nPM.png)"
      U3 - Loops And Arrays - Functions that Return Value_markdown_instruction: "#\nUsing functions that return values\\r\n\\r\nWe have used functions that return\nvalues many times before, but in this exercise you will see how they are actually\ncreated by using the `return` command. The function `minVal` accepts two numbers\nas input and returns the minimum of the two as output. You can call this function\njust like any other, and **because it returns a number you can treat the function\ncall as if it were a number**\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code** has\nbeen provided which creates the function `findMin` and generates two random\nvalues.\\r\n* **Inspect the code of `findMin` to understand the logic of this\nfunction**.\\r\n* **Call the function with the values provided** and ensure\nthe minimum value is returned. You should treat the function call **as if\nit were a number** to generate the output shown below.\\r\n\\r\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)"
      U3 - Loops And Arrays - General Search Param_markdown_instruction: "# General\nSearch\\r\n\\r\nIn order to make a general search function, we should be able\nto **search for any value, not just 5**.  We can do this by making the value\nto search for a parameter as well.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a second\nparameter** to your `search` function to represent the item to search for.\nThis example uses the name `searchValue`.\\r\n\\r\n* **Update the code inside\nthe function to check for `searchValue` instead of 5.** \\r\n\\r\n* **Call your\nsearch function** to search for different values inside of each array.\\r\n\\r\n*\nThe `console.log` statement **is now inaccurate**. Change it to say \"Array\nhas searchValue: \" followed by the value in flag.\\r\n\\r\n(These steps are\nshown in the code animation below.)\\r\n\\r\n![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)"
      U3 - Loops And Arrays - Intro For Loop_markdown_instruction: "# *for* Loop\\r\n\\r\nIt's\nvery common to want to repeat a set of commands a particular number of times.\nRecently, we have been using the `while` loop to do this by creating a counting\nvariable, setting the boolean expression, and incrementing the value of the\ncounter by 1 each time. We've also used the `for` loop before, and we'll\nexplain it more in-depth now.  The `for` loop was created to wrap all of those\ncomponents related to counting loops into a single line of code.\\r\n\\r\n<img\nsrc=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\"\nstyle=\"width: 450px\">\\r\n\\r\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\"\nstyle=\"width: 450px\">\\r\n\\r\nProgrammers would typically read a loop `for\n(var i = 0; i < 10; i++)` out like this: <br>\\r\n**\"for variable i starting\nat 0, while i is less than 10, i plus plus (or increment i by 1)\"**\\r\n\\r\nNotice\nthat in reading a `for` loop we still use the word \"while\".\\r\n\\r\nYou may\nnotice that when you drag a `for` loop out from the toolbox that we've set\nit up for you with `i` as the variable. \\r\n\\r\n<details> \\r\n<summary>**Why\nis `i` the variable?** [click to expand]</summary>  \\r\n\\r\nUsing the single\ncharacter `i` as the variable in a `for` loop has become a convention in programming\nfor a variety of reasons. One reason is that `for` loops are often used when\nprocessing arrays - **you can think of `i` as shorthand for index. **   But\nthere is no reason why you have to use `i` if you don't want to.  It's just\na variable.  \\r\n</details>\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out the `for`\nloop.\\r\n\\r\n* Insert a `console.log` statement inside the `for` loop that\ndisplays `i`.\\r\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\\r\n\\r\n*\nTry changing:\\r\n\\t* The condition to stop the loop (make it run longer).\\r\n    *\nThe amount you change `i` by each time (try changing `i++` to something like\n`i += 5`).\\r\n    * The starting value of `i`.\\r\n\\r\n"
      U3 - Loops And Arrays - Linear Search_markdown_instruction: "# Algorithms and\nGeneral-Purpose Functions\\r\n\\r\nOver the next several exercises we will be\n**creating a general-purpose function to determine if a value is contained\nwithin an array**.  Over the course of these exercises, keep an eye out for\nthe general pattern we are using, because you'll get to use it again to create\nfunctions of your own.\\r\n\\r\nTo begin, we'll start simple. We'll write\ncode that **checks whether an array contains a specific value**. At every\nindex, your program should display \"true\" if the value at that index is\na 5 and \"false\" otherwise.\\r\n\\r\n# Do This:\\r\nThe **starter code** is\nsimilar to past levels, but you'll notice that we use a loop to construct\n`myArray` rather than appending items one line at a time.  You are also given\nthe `for` loop you will use.\\r\n\\r\n* Add an `if` statement inside the `for`\nloop to check if the value of the array at the current index is 5. \\r\n *\nIf the value is equal to 5, write **true** to the console. Otherwise write\n**false** to the console.\\r\n* **Test your code** to make sure it is working\nas you intend. An example output is below.\\r\n\\r\n![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45\nPM.png)"
      U3 - Loops And Arrays - Loop Array If_markdown_instruction: "# *for* Loop with\n*if*\\r\n\\r\nSometimes we want to find values in an array that meet certain\nconditions.  We can add an **`if` statement inside the `for` loop** to individually\ncheck every value within the array. To practice this, we will create a `for`\nloop that will **display every value in the array greater than 5**.\\r\n\\r\n#\nDo This:\\r\n** Starter code** has been been provided that creates an array\nof random values.\\r\n\\r\n* Add a `for` loop that references every index in\nthe array.\\r\n\\r\n* Add an `if` statement inside the `for` loop that **displays\nevery value in the array greater than 5** using `console.log`\\r\n\\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\\r\n    \\r\n*\n**Note:** Because the original array is being constructed with random values\nit's *possible* that it might not have any values greater than 5.  Just run\nthe program a few times to make sure it works.  An example of the possible\noutput is below.\\r\n\\r\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26\nPM.png)"
      U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction: "#\nGeneralize *search* by Making It Into a Function - Part 2\\r\n\\r\nRight now,\nour function just searches for a 5 in a global array called `testArray`.  We\nwould like to be able to **use this function to search through any array**,\nso we will be adding a parameter to allow us to specify which array should\nbe searched.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a parameter to the `search`\nfunction called `list`**.\\r\n* **Modify the code inside the function** so\nthat it loops over `list` (the parameter) instead of `testArray` (the global\nvariable).\\r\n* **Call your function** with each of the arrays provided at\nthe top of the program.\\r\n\\r\n(These steps are shown in the code animation\nbelow.)\\r\n\\r\n![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)"
      U3 - Loops And Arrays - Make it a Function_markdown_instruction: "# Generalize\n*search* by Making It Into a Function\\r\n\\r\nYou've just written code to\nsearch for a value in a list!  If we could generalize this behavior, it might\nbe useful to us in the future - it's probably something that we want to do\nover and over again.  \\r\n\\r\nOver the next few levels, we'll build up a\nvery useful, general function for searching for *any* value in *any* list.  But\nwe'll do it one step at a time...\\r\n\\r\n# Do This:\\r\n\\r\n**Note:** We've\nprovided **new starter code** that implements the pseudocode from the last\nexercise. It also **creates two more arrays** that we'll be using later for\ntesting.  For this level just worry about `testArray`. \\r\n\\r\n* **Run the\nstarter** code to verify that it works correctly.\\r\n* **Create a new function**.\nName the function `search`.\\r\n* **Move the code that checks for a 5 inside\nthe function.** **Note:** You must move the boolean variable inside the function\nas well, or it won't reset each time you call the function!\\r\n* **Call the\nfunction** to make sure your code still works.  The actual behavior will be\nthe same as when you ran it the first time.  The difference now is that you're\ncalling a function to do it.\\r\n\\r\n(Steps are shown in code animation below.)\\r\n\\r\n![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)"
      U3 - Loops And Arrays - Multiple Returns_markdown_instruction: "# Multiple\nReturns\\r\n\\r\nYou can actually include multiple return statements in a function.  Our\nfunction for findMax could be written like this:\\r\n\\r\n<img src=\"https://images.code.org/bfc70bf49e97f7aa9354ba867076284c-image-1447380154324.02.17\nPM.png\" style=\"width: 270px; float:right\">\\r\n\\r\nThis functions returns\na value **as soon as it knows the result of the boolean condition**. As a\nresult **some lines of code may never run**. This can lead to some very devious\nerrors in which statements effectively become unreachable because of small\nmistakes in logic. Having many return statements within a larger function\ncan make it very difficult to understand how a function works. Some tips to\navoid these issues are below.\\r\n\\r\n**Best practices when writing Functions\nwith returns:** \\r\n\\r\n* Calculate whatever you need\\r\n* Store it in a variable\\r\n*\nReturn that variable at the end of the function\\r\n\\r\n**Note:** You may sometimes\nbreak the process described above,  but for now this is a way to help you\nthink about what your code needs to do.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Check\nout the example of a function that accepts two numbers and returns the larger\nthe two.\\r\n\\r\n* **Call the function with a couple different sets of numbers.\n`console.log` the results.**"
      U3 - Loops And Arrays - Print Array_markdown_instruction: "# Print an Array\nwith a *for* Loop\\r\n\\r\nAs you know, we can use variables as indexes in an\narray.  We can take advantage of this fact to create a `for` **loop which\nvisits every index in an array**.\\r\n\\r\n![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01\nPM.png)\\r\n\\r\nIn this `for` loop, the `i` eventually gets set to every possible\nindex in the array. You are going to use a loop of this kind to display all\nthe values in an array.\\r\n\\r\n# Do This:\\r\n**Starter code** is provided\nthat adds several random values to an array.\\r\n\\r\n* Create a `for` loop\nthat uses the syntax shown below (and above) to **iterate through every index\nin the array**.\\r\n\\t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\\r\n    \\r\n*\nUse `console.log` to **display the contents of the array at each index**.\\r\n\\t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\\r\n    \\r\n*\nRun the program to **confirm it is displaying all the values**.\\r\n"
      U3 - Loops And Arrays - Printing Single True_markdown_instruction: "# Print\na Single True/False Value\\r\n\\r\nSometimes we don't care about the count\nand just want to know if the array contains a 5 or not. **Let's try to display\na single true/false indicating whether the list contains a 5.** There are\ntwo cases to consider: \\r\n\\r\n1. The list **does not contain any 5's**;\nyou need to display **\"false\"**.  \\r\n2. The list **contains at least one\n5**; you need to display **\"true\"**.\\r\n\\r\n**HINT:** one way to do this\nis to reference your counter variable `fiveCount` after the array has been\nprocessed.\\r\n\\r\n# Do This:\\r\n**We've pulled your code from the previous\nlevel so you can continue to add to it**.\\r\n\\r\n* Add a **`console.log` statement\nto display a single \"true\" or \"false\"** indicating whether there is a\n5 anywhere in the array.\\r\n\\r\n| Example output 1: One or more 5's | Example\noutput 2: No 5's |\\r\n| --- | --- |\\r\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31\nPM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46\nPM.png)|"
      U3 - Loops And Arrays - Return Index_markdown_instruction: "# Search with Return\nValue of Index\\r\n\\r\nThe search function you were working on before is back.\nWe are going to try a new challenge. **Instead of returning true or false,\nreturn the index at which the value was found.**  \\r\n\\r\n**What if the value\ndoesn't exist?** You should return -1.  The reason for returning -1 is that\nwhen you write a function that returns a value it's expected that it will\nreturn one type of data.  So if we're returning a number for the index, we\nshould also return a number that indicates it wasn't found. Since -1 (or\nany negative number) is not a possible index for an array, we can use -1 to\nindicate that whatever we're looking for wasn't found.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Update the function search(list, val) to return the index at which the value\nwas found.** If the value is not found return -1. (**Note:** If the value\nappears more than once you can return any of the indexes at which it appears.)"
      U3 - Loops And Arrays - Return Value_markdown_instruction: "# Use a function\nthat returns a value in an app\\r\n\\r\nWe create functions to **contain blocks\nof code that will be used multiple times within our program**. The same is\ntrue with functions that return values. Let's see an example of how we might\nuse one of the functions we've written.\\r\n\\r\nThis exercise comes with starter\ncode that creates a **simple turtle driver app**. The x and y location of\nthe turtle are stored in the variables `xloc` and `yloc`. An event handler\nis used to update these values when the arrow keys are pressed, and then a\nseparate `updateTurtle` function is called to draw the turtle on the screen.\\r\n\\r\nCurrently\nthe turtle can drive off the screen. If we are clever about how we use our\n`constrain` function, however, we can prevent this from happening.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Starter code** is provided which allows the turtle to move.\nAdditionally a **working version of `constrain`** is provided.\\r\n* **Use\nthe `constrain` function** within the `updateTurtle` function to prevent the\nvalues of `xloc` and `yloc` from going outside the size of the screen. Recall\nthe screen is **320 by 450 pixels**.\\r\n* **Run your app** and confirm the\nturtle cannot leave the screen."
      U3 - Loops And Arrays - Search and Remove_markdown_instruction: "# Search and\nRemove\\r\n\\r\nWhen search returns the index of the item we can use that information\nto do some useful things. One thing we can do is  search for a value and remove\nit. \\r\n\\r\n# Do This\\r\n\\r\n* Use search to **find the index of 5.**\\r\n\\r\n*\n**Save the index in a variable.**\\r\n\\r\n* **Remove the saved item at the\nindex as long as the value is not -1.**"
      U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction: "# Using\na Boolean Variable as a Flag\\r\n\\r\nWe are going to do a **challenge that\nis similar to the last exercise** but, rather than counting the number of\n5's in the array, we're going to use a different **interesting programming\ntechnique for processing arrays** that might prove useful to you in the future.\n\\r\n\\r\n# Using a Boolean Flag\\r\n\\r\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\"\nstyle=\"float: right; width: 250px\">\\r\nThe technique is generally referred\nto as **using a boolean \"flag.\"** To understand this idea, think about how\nsome mailboxes work: the flag starts down, and when a person wants to let\nthe mail carrier know there is something to pick up, she puts the flag up\nto notify the mail carrier that there is outgoing mail in the box.\\r\n\\r\nWe\ncan use a variable to do something similar when programming. Rather than incrementing\na count every time we find a 5 in the array, we will use a variable that acts\nlike a **flag**.  We will create a variable before the loop and assign it\n`false` to start (flag is down). Then, as we process the array, if we find\na 5, set the variable to `true` (put the flag up).  \\r\n\\r\nHere is some pseudocode:\\r\n```\\r\nvar\nflag = FALSE\\r\nFOR EACH item IN list\\r\n  IF (item EQUALS 5)\\r\n    flag\n= TRUE\\r\n    \\r\nDISPLAY (flag)\\r\n```\\r\nNotice that it doesn't matter\nif we find more than one 5.  It will just keep setting the flag to `true`.  However,\nif there are no 5's, the `if` statement in the loop will never execute, and\nso the variable will remain the value it was initialized to, which was `false`.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Implement the pseudocode above** in JavaScript. \\r\n*\nWe've given you code that constructs an array of random values, and the standard\n`for` loop for looping over an array.\\r\n* The output will be no different\nfrom the previous exercise, but you should still **confirm that your program\ncorrectly identifies when a 5 is in the array.**\\r\n\\r\n| One or more 5's\n| No 5's |\\r\n| --- | --- |\\r\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31\nPM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46\nPM.png)|\\r\n\\r\n"
      U3 - Loops And Arrays - useFindMin_markdown_instruction: "# Using functions\nthat return values\\r\n\\r\nWe have used functions that return values many times\nbefore, but in this exercise you will see how they are actually created by\nusing the `return` command. The function `minVal` accepts two numbers as input\nand returns the minimum of the two as output. You can call this function just\nlike any other, and **because it returns a number you can treat the function\ncall as if it were a number**\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code** has\nbeen provided which creates the function `findMin` and generates two random\nvalues.\\r\n* **Inspect the code of `findMin` to understand the logic of this\nfunction**.\\r\n* **Call the function with the values provided** and ensure\nthe minimum value is returned. You should treat the function call **as if\nit were a number** to generate the output shown below.\\r\n\\r\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)"
      U3 - Movie Bot - Multiple If Sequences_markdown_instruction: "# Adding Rating\nto Keywords\\r\n\\r\nUp until now our movie suggestions have just been based\non genre. Let's now also look for keywords related to the movie rating like\n\"G\", \"PG\", \"PG-13\", and \"R\" so we can give movie suggestions based\non both genre and rating.\\r\n \\r\n**Note: ** We've updated the flowchart\nbelow (highlighted in yellow) to see the logic we are trying to add.\\r\n\\r\n**Note\n2: ** The logic of the program right now will yield some odd results - there\nare some things you can type that will give 2 suggestions - this is expected,\nfor now.  We are just taking a small step here.  We'll refine the code again\nin later levels.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add another set of `if`, `else-if`,\nand `else` statements** inside the question `if` statement to **check for\nkeywords for movie ratings (G, PG, PG-13, and R).**\\r\n\\r\n* **Hint:** When\nchecking for \"G\", \"PG\" and \"R\" you need to be a little clever.  R and\nG are letters that will show up in lots of words and PG will get confused\nwith PG-13. We want to check for \"g\" and \"r\" with spaces on either side.\nSo make sure to use `\" g \"` where there is a space on either side of g instead\nof `\"g\"`. For \"pg\" you can just add a space after the pg to look for `\"pg\n\"`\\r\n\\r\n* **Test out a couple sentences with your keywords** to make sure\nthe change worked.\\r\n\\r\n<img src=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      U3 - Movie Bot - Nested Motivation_markdown_instruction: "# Checking for a\nQuestion\\r\n\\r\nWe're going to start adding some \"intelligence\" to our\nMovie Bot. Since we've added `includes` it can now tell if its keywords appear\nanywhere in the input. As a result some inputs may be questions while others\nmight simply be statements. **We'd like the movie bot to respond differently\nto questions and statements.**\\r\n\\r\nIn order to tell when the user is asking\na question **we will be checking whether the input includes a question mark\n**.\\r\n\\r\n# Do This:\\r\n\\r\n* Add a separate statement to **check if the\ninput includes a \"?\"**. \\r\n* If the input includes a question mark **print\n\"That's a good question.\" before the recommendation.**\\r\n* Otherwise print\n**\"I only answer questions.\" before the recommendation.**\\r\n* **Test out\na couple sentences with your keywords** to make sure the change worked.\\r\n\\r\n**Example\nInput --->** | **Output**\\r\n---|---\\r\nWhat's the best action movie? | That's\na good question. The best action movie is any James Bond movie.\\r\nI love\ncomedy | I only respond to questions. The best comedy movie is The Princess\nBride.\\r\n<br>\\r\n**Note:** Check out the flowchart below to see the logic\nwe are trying to change.\\r\n\\r\n<img src=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - Movie Bot - When Multiple If Statements_markdown_instruction: "# Adding\na Separate *if*\\r\n\\r\nIt's still the case that sometimes you want to have\ntwo completely separate groups of `if` statements because there are separate\nconditions you want to check and possibly have responses for both. You don't\nalways just keep adding to a giant `if` statement forever.\\r\n\\r\nIn the Movie\nBot demo you probably saw that if you type \"please\" and \"thank you\" it\nadds something extra to the response (it says something like \"Thanks for\nbeing polite!\"). Let's add this functionality to your movie bot as well.\n\\r\n\\r\n**Note: ** Check out the flowchart below to see the logic we are trying\nto add.\\r\n\\r\n# Do This:\\r\n\\r\n* ** Add an `if` and `else-if` statement\nthat checks for \"please\" and \"thank you\"**. \\r\n\\t* If the string includes\n\"please\" it should say \"Thank you for being so polite!\" before it gives\nits response.\\r\n    * If the string includes \"thank you\" it should say\n\"You are very welcome!\" before it gives its response.\\r\n\\r\n* **Test out\na couple sentences with your keywords** to make sure the change worked.\\r\n\\r\n<img\nsrc=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      U3 - Movie Bot - toLowerCase_markdown_instruction: "# Dealing with Character\nCase\\r\n\\r\nWhat if the user types **ACTION** instead of **action**? These\nare two different strings to the computer and therefore it won't recognize\nthey are the same. We want Movie Bot to treat words the same ignoring the\ncase of the letters. We can do this using the string command `toLowerCase`.\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to add. \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Try typing COMEDY, ACtioN, horroR, and Romance** into\nMovie Bot.\\r\n\\r\n* **Use the `toLowerCase` command** to change all user input\ninto lowercase letters after they enter it.\\r\n\\r\n* **Check that COMEDY,\nACtioN, horroR, and Romance generate the same recommendations** as comedy,\naction, horror, and romance.\\r\n\\r\n<img src=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3 - Practice Create Performance Task_markdown_instruction: "# Practice Create\nPerformance Task\\r\n\\r\nYou've finally made it to the end of the Programming\nUnit! We will continue some programming in the next unit, but for now we are\ngoing to use all the new concepts you have learn to create something of your\nown design! \\r\n\\r\n# Do This:\\r\n\\r\n* **Read the Project Overview** to understand\nthe entire project.\\r\n* **Follow the Project Planning Guide**.\\r\n* **Implement\nyour final program in this level**."
      U3 - Read Record - 1.2_markdown_instruction: "# Callback Functions\\r\n\\r\nIn\nthe last exercise you **read records from a remote database back into your\napp**. There are a few steps that happened in that process.\\r\n\\r\n* Your\nprogram called `readRecords`, **sending a request for data across the Internet**\nto your remote database.\\r\n* The database collects the requested records,\nplaces them in an array of objects, and **sends that array back across the\nInternet**.\\r\n* Your program **receives the array of objects**.\\r\n* Your\nprogram **calls the callback function of the `readRecords` command**, placing\nthat array **in the `records` parameter** of that callback function.\\r\n\\r\nThere's\nactually a **delay between when your program calls `readRecords` and when\nthe callback function is called**. We can even see this delay in App Lab.\\r\n\\r\n#\nDo This\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n*\n**The speed on App Lab has been set to its slowest setting**. This won't\nchange the way your program runs, but it makes it easier to see the order\nin which commands are run.\\r\n* **After your `readRecords` command place another\n`console.log` statement**\\r\n* **Run the program** and pay close attention\nto **the order in which the commands run**. You can **check the Debug Console**\nto see which `console.log` command ran first."
      U3 - Read Record - 1.5_markdown_instruction: "# Data Commands are Slow\\r\n\\r\nTypically\nwe think of programs running one command after the other in the order they\nare written. This makes it easy to keep track of what is happening in your\nprogram. Since commands running locally on your computer happen **essentially\ninstantaneously**, you never get \"stuck\" waiting for one command to finish\nbefore running the next one.\\r\n\\r\n**Data commands take a long time to run**.\nOnce your computer sends a request to your database it needs to wait for the\nresponse to be sent across the Internet. We're going to see **how much slower\nthe data commands are**.\\r\n\\r\nThe `getTime()` block returns the current\ntime on your computer. It is stored as a number which counts **how many milliseconds\nhave passed since January 1st, 1970**. By repeatedly calling this command\nyou can determine how long different commands take to run.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\ncode has been provided** that displays the current time at multiple points\nin your program\\r\n\\r\n* Run the program. Notice that the same information\nfrom the table is printed in the console."
      U3 - Read Record - 1.6_markdown_instruction: "# Data Commands are Slow\\r\n\\r\nTypically\nwe think of programs running one command after the other in the order they\nare written. This makes it easy to keep track of what is happening in your\nprogram. Since commands running locally on your computer happen **essentially\ninstantaneously**, you never get \"stuck\" waiting for one command to finish\nbefore running the next one.\\r\n\\r\n**Data commands take a long time to run**.\nOnce your computer sends a request to your database it needs to wait for the\nresponse to be sent across the Internet. \\r\n\\r\n**Let's have a look at just\nhow much slower the data commands are**.\\r\n\\r\n\\r\n\\r\n**The array of objects\nis passed back as the parameter of the callback function for `readRecords`.\n** A callback function is required for readRecords just like createRecord\nas the request out to the database for records will take varying amounts of\ntime and it is necessary to have a way to notify the program once all the\nrecords have been collected and return. \\r\n\\r\nRemember that because of scope\nfunction **parameters are only accessible inside their function.** Thus we\nmust **use the records from inside the readRecords callback function.**  This\nis also good programming practice as the asyncronous nature of fetching data\nfrom remote locations requires that we **wait for the callback function to\nbe called to know that we have recieved all the information from the data\ntable.**\\r\n\\r\n# Do This\\r\n\\r\n**A set of data has been provided** in a\ntable named 'myTable'\\r\n\\r\n* **Open the Data Viewer** to look at the table\nin 'myTable'\\r\n* **Add a `readRecords` command** to your app.\\r\n* **Add\na `console.log`** inside the callback function of `readRecords` to **print\nthe `records`**\\r\n* Run the program. Notice that the same information from\nthe table is printed in the console.\\r\n\\r\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)"
      U3 - Read Record - 1_markdown_instruction: "# Reading Records\\r\n\\r\nYou have\nlearned how `createRecord` can be used to create permanent copies of your\ndata in a remote database. This allows your app to save information it has\ncollected across multiple runs of your program. **In order to use this data\nyou'll need a way to read it out of your database and back into your app**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37\nAM.png\" style=\"width: 350px; float: right\">\\r\n\\r\nCheck out the new command\n`readRecords`. This command **requests all of the records stored in one of\nthe tables of your database**. Follow the instructions below to try running\nthis command before moving on to learn more about how it works.\\r\n\\r\nWhen\nthe database has collected all the records it responds by the sending an array\nof objects back to your program, one object for every record in the table.\nYour system will then **call the callback function of the `readRecords` command,\nplacing this array of objects in the `records` parameter**.\\r\n\\r\n# Do This\\r\n\\r\n**Your\ndatabase already contains data** in a table named 'myTable'\\r\n\\r\n* **Open\nthe Data Viewer** to look at the data in 'myTable'\\r\n* **Add a `readRecords`\ncommand** to your app.\\r\n* **Add a `console.log` command** inside the callback\nfunction of `readRecords` to **display the `records`**\\r\n* Run the program\nand **confirm that the same information you saw in the Data Viewer is displayed\nin the console**.\\r\n\\r\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)"
      U3 - Read Record - 2_markdown_instruction: "# Changing the Table\\r\n\\r\nThe\nfirst parameter in the `readRecords` command is the name of the table you\nwish to read records from.\\r\n\\r\n![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\\r\n\\r\nYou\nhave been using the name \"myTable\", but just like variables and IDs **your\ntables should be given descriptive and meaningful names**.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\ncode is provided** which calls `readRecords` for a table that does not exist.\n\\r\n**The database already includes a table**\\r\n\\r\n* Open the Data Viewer\nto **find the name of the new tables**\\r\n* **Change the table parameter**\nto pull the records from the new table\\r\n* Run the program.  Your output\nshould look like below.\\r\n\\r\n![](https://images.code.org/adaca79af4c7b521674b58f721eed0c0-image-1449516148398.21.43\nPM.png)"
      U3 - Read Record - 3_markdown_instruction: "# Debugging: Wrong Table Name\\r\n\\r\nWhen\ndebugging programs with data commands it's useful to know some common errors\nyou might be making. Let's see what happens when we try to `readRecords`\nfrom a table that doesn't exist in our database.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\ncode is provided** that calls `readRecords` and displays the `records` parameter\nfrom the callback function.\\r\n\\r\n* **Change the table name** in readRecords\nto a table that does not exist\\r\n* **Run the program** to see what value\nis passed to the `records` parameter.\\r\n* **Did you get an error? Did anything\nelse change? Make a note of the behavior you see for future debugging**\\r\n\\r\n<details><summary>**What\nyou should see (read this after trying it yourself)**</summary>If you read\nfrom a table that doesn't exist you won't get any error messages and the\ndatabase will respond with an empty array. Your database is left as it was\nbefore.</details>"
      U3 - Read Record - 4.1_markdown_instruction: "# Using Your Records\\r\n\\r\nThe\n`records` parameter in your callback function is **an array of objects**,\njust like you have used before in this class. You can use reference **the\nindexes of the array and properties of each object** just like before. Just\nremember, **you only can use the `records` parameter** within the callback\nfunction, and **the callback function is not called immediately**.\\r\n\\r\n#\nDo This\\r\n\\r\n**Starter code is provided** which reads records from a table\ncalled \"myMovies\"\\r\n\\r\n* **Add code** inside the callback function of\n`readRecords` that only displays the first movie in the array\\r\n* **Run the\nprogram** and confirm that you are displaying the correct movie.\\r\n\\r\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38\nPM.png)"
      U3 - Read Record - 4_markdown_instruction: "# Reading Records: Printing Individual\nRecords\\r\n\\r\nUsually we want to pull out each record individually. We have\nalready seen that records is an array of objects. Therefore we can do this\nby using the array notation to access each object by its index.\\r\n\\r\n# Do\nThis\\r\n\\r\nThe data from the last level has been provided. \\r\n\\r\n* Add\na call to `readRecords`\\r\n* Set the table name to the movies table.\\r\n*\nInside the callback function add a `for` loop to loop over the records.\\r\n*\nInside the for loop add a console.log statment to print out the current object\nusing its location in the array.\\r\n* Run the program. Your output should\nlook like below.\\r\n\\r\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38\nPM.png)"
      U3 - Read Record - 5 and half_markdown_instruction: "# Reading Records: Printing\nIndividual Records\\r\n\\r\nSometimes we want to get even more specific than\nprinting out the whole object. We already say we can get each individual object\nusing array notation. So we can then use dot notation to get the value of\na specific property. Let's print out just the names of the movies.\\r\n\\r\n#\nDo This\\r\n\\r\n<img src=\"https://images.code.org/fc419dc05837b049e40e50c04166e0b8-image-1449518323083.58.00\nPM.png\" style=\"width: 250px; float: right\">\\r\n\\r\nStarter code has been\nprovided that prints out each object in the array. The data from the last\nlevel has also been provided. \\r\n\\r\n* Update the console.log inside the\n`for` loop to print out the names of each individual movie.\\r\n* Run the program"
      U3 - Read Record - 5_markdown_instruction: "# Reading Records: Looping over\nthe Array\\r\n\\r\nWe can loop over the `records` array just like any other\narray. This allows us to **perform the same action for every object in the\narray**. Recall that the standard way of doing this is to use a `for` loop,\nas in.\\r\n\\r\n`for(var i = 0; i < records.length; i++)`\\r\n\\r\n# Do This\\r\n**Starter\ncode is provided** which reads records from a table called \"topMovies\"\\r\n\\r\n**Your\ndatabase already includes a table called \"topMovies\"**\\r\n\\r\n* Add a `for`\nloop to the callback function of the `readRecords` command\\r\n* Add code to\nyour `for` loop that displays **only the title of every movie in the list**.\\r\n\\r\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02\nPM.png)"
      U3 - Return Values - constrainTurtle_markdown_instruction: "# Use a Function\nthat Returns a Value in an App\\r\n\\r\nWe create functions to **contain blocks\nof code that will be used multiple times within our program**. The same is\ntrue with functions that return values. Let's see an example of how we might\nuse one of the functions we've written.\\r\n\\r\nThis exercise comes with starter\ncode that creates a **simple turtle driver app**. The x and y location of\nthe turtle are stored in the variables `xloc` and `yloc`. An event handler\nis used to update these values when the **arrow keys are pressed**, and then\na separate `updateTurtle` function is called to draw the turtle on the screen.\\r\n\\r\nCurrently\nthe turtle can drive off the screen. If we are clever about how we use our\n`constrain` function, however, we can prevent this from happening.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** is provided which allows the turtle to\nmove. Additionally a **working version of `constrain`** is provided.\\r\n*\n**Call the `constrain` function twice** within the `updateTurtle` function\nto prevent the turtle from going outside the screen.\\r\n\\t* One call to the\nfunction for `xloc` and one time for `yloc`.\\r\n    * Recall the screen is\n**320 by 450 pixels**.\\r\n* **Run your app** and confirm the turtle cannot\nleave the screen.\\r\n\\r\n![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)"
      U3 - Return Values - debuggingConstrain_markdown_instruction: "# Debugging\nand Multiple Return Statements: *constrain*\\r\n\\r\nWe're going to debug another\nfunction that uses multiple return statements. The function is called `constrain`\nand is used to limit an input number to a certain range. The function accepts\nthree parameters.\\r\n\\r\n* `input` : the number to be constrained.\\r\n* `low`\n: the lower bound of the range. If `input` is below this value, the function\nshould return the value of `low`.\\r\n* `high` : the upper bound of the range.\nIf `input` is above this value, the function should return the value of `high`.\\r\n\\r\n<details>\\r\n<summary>**Click\nfor sample input and output for `constrain`**</summary>\\r\n* `constrain(15,10,20)`\nshould return 15 since it is within the range of 10 to 20.\\r\n* `constrain(5,10,20)`\nshould return 10 since the input is below the range of 10 to 20.\\r\n* `constrain(25,10,20)`\nshould return 20 since the input is above the range of 10 to 20.\\r\n</details>\\r\n<br>\\r\nUnfortunately,\nbecause of the way this function was written, it does not always work as expected.\nIn particular, **because of how `return` was used, some portions of the function\nnever run**. Change the structure of the function to **use the pattern you\nhave been shown in previous exercises, included below**.\\r\n<br> <br>\\r\n**Pattern\nfor Functions that Return Values**\\r\n* Use parameters to provide input.\\r\n*\nDeclare a variable that will be used as output, possibly initializing its\nvalue.\\r\n* Update the value in your output variable throughout your program.\\r\n*\nReturn your output variable on the last line of your function.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Run the program** and identify the errors generated in the\noutput.\\r\n* **Inspect the logic of `constrain`** to identify the logical\nerrors.\\r\n* **Rewrite** `constrain` to make use of the **pattern for functions\nthat return values**, shown above.\\r\n* **Run the program** to ensure it is\nnow running as you expect.\\r\n\\r\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25\nAM.png)"
      U3 - Return Values - debuggingMaxVal_markdown_instruction: "# Debugging and\nMultiple Return Statements\\r\n\\r\n**Having multiple `return` statements in\na program can lead to tricky situations**. You may use multiple return statements,\nbut it makes it easier to introduce logical errors into your program. We're\ngoing to look at some examples of functions with return values that include\nlogical errors and debug them. The goal is to **recognize common errors with\nreturn values now so you can avoid them when writing your own programs**.\\r\n\\r\nThere\nis a logical error somewhere in the version of `maxVal` you are about to see\nwhich uses multiple return statements. As a result the function works correctly\nfor some inputs but not all. You'll need to inspect the code to understand\nwhat the issue is and make changes accordingly.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the program** and identify the errors generated in the output.\\r\n*\n**Inspect the logic of `maxVal`** to identify the logical error.\\r\n* **Correct\nthe logical error** so that the function returns the correct value for all\ninputs."
      U3 - Return Values - debuggingReturns_markdown_instruction: "# Debugging and\nmultiple return values\\r\n\\r\n**It is generally bad form to use multiple `return`\nstatements in a program**. You may do so, but it makes it easier to introduce\nlogical errors into your program. We're going to look at some examples of\nfunctions with return values that include logical errors and debug them. The\ngoal is to **recognize bad patterns early so you don't repeat them**.\\r\n\\r\nThere\nis a logical error somewhere in the version of `maxVal` you are about to see\nwhich uses multiple return values. As a result the function works correctly\nfor some inputs but not all. You'll need to inspect the code to understand\nwhat the issue is and make changes accordingly.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the program** and identify the errors generated in the output.\\r\n*\n**Inspect the logic of `maxVal`** to identify the logical error.\\r\n* **Correct\nthe logical error** so that the function returns the correct value for all\ninputs."
      U3 - Return Values - increase1_markdown_instruction: "# Use a function that\nreturns a value\\r\n\\r\nThe return command allows functions to generate output\nthat you can use elsewhere in your code. You've already used functions that\nreturn values many times, but you've never seen how they're actually made.\nThis exercise includes a simple function that returns a value. For now you're\njust going to practice **using it like the type of value it returns** which\nin this case is a number.\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code** is provided\nwhich creates a function called `increase` that accepts a number as input\nand returns twice that number as output.\\r\n* Call the function within the\n`moveForward`, `write`, `console.log` functions provided.\\r\n* **Run your\nprogram** and confirm the output is what you expected."
      U3 - Return Values - increase2_markdown_instruction: "# Alter a function that\nreturns a value\\r\n\\r\nIn the last exercise you should have used the `increase`\nfunction at multiple places within your code. If we were to change the way\nthat `increase` processes input to generate output, you would immediately\nbe able to make use of this change at every place your function was called.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Alter the `increase` function** so that it now multiplies\ninput values by **3 rather than 2**. \\r\n* **Run your program** and confirm\nthat the change has affected the output from `moveForward` , `write` , and\n`console.log`"
      U3 - Return Values - min1_markdown_instruction: "# Use a function that returns\na value\\r\n\\r\nThe return command allows functions to generate output that\nyou can use elsewhere in your code. You've already used functions that return\nvalues many times, but you've never seen how they're actually made. This\nexercise includes a simple function that returns a value. For now you're\njust going to practice **using it like the type of value it returns** which\nin this case is a number.\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code** is provided\nwhich creates a function called `increase` that accepts a number as input\nand returns twice that number as output.\\r\n* Call the function within the\n`moveForward`, `write`, `console.log` functions provided.\\r\n* **Run your\nprogram** and confirm the output is what you expected."
      U3 - Return Values - useFindMin_markdown_instruction: "# Using functions that\nreturn values\\r\n\\r\nWe have used functions that return values many times\nbefore, but in this exercise you will see how they are actually created by\nusing the `return` command. The function `minVal` accepts two numbers as input\nand returns the minimum of the two as output. You can call this function just\nlike any other, and **because it returns a number you can treat the function\ncall as if it were a number**\\r\n\\r\n# Do This\\r\n\\r\n* **Starter code** has\nbeen provided which creates the function `findMin` and generates two random\nvalues.\\r\n* **Inspect the code of `findMin` to understand the logic of this\nfunction**.\\r\n* **Call the function with the values provided** and ensure\nthe minimum value is returned. You should treat the function call **as if\nit were a number** to generate the output shown below.\\r\n\\r\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)"
      U3 - Return Values - useMinVal_markdown_instruction: "# Using Functions that\nReturn Values\\r\n\\r\nWe have used functions that return values many times\nbefore, but in this exercise you will see how they are actually created by\nusing the `return` command. The function `minVal` accepts two numbers as input\nand returns the minimum of the two as output. You can call this function just\nlike any other, and **because it returns a number, you can treat the function\ncall as if it were a number**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Starter code**\nhas been provided that creates the function `minVal` and generates two random\nvalues.\\r\n* **Inspect the code of `minVal` to understand the logic of this\nfunction**.\\r\n* On the `console.log` line **call the function using `rand1`\nand `rand2` as parameters** and ensure the minimum value is returned. You\nshould treat the function call **as if it were a number**.\\r\n\\r\n<img src=\"https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif\"\nstyle=\"width: 550px\">\\r\n\\r\n* Check that the program generates output similar\nto the output shown below.\\r\n\\r\n<img src=\"https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49\nPM.png\" style=\"width: 350px\">\\r\n"
      U3 - Return Values - wrapTurtle_markdown_instruction: "# Use a Function that\nReturns a Value in an App - Part 2\\r\n\\r\nThis time, you're going to write\na function that returns a value to add functionality to the turtle driver.\nThe `updateTurtle` function now is making a call to a function called `wrap`\nthat has not been written yet. It accepts three parameters and should work\nin the following way:\\r\n\\r\n* `input`: the input value to the function. If\nit is within the range it should just be returned.\\r\n* `low`: the lower bound\nof the range. If `input` is below this value the output should be the value\nof `high`.\\r\n* `high`: the upper bound of the range. If `input` is above\nthis value the output should be the value of `low`.\\r\n\\r\nBy using this function\nyou can create the illusion that the screen \"wraps\" around, so when the\nturtle leaves the top of the screen it appears again at the bottom.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Starter code** is provided which allows the turtle to\nmove.\\r\n* The `updateTurtle` function now makes two calls to `wrap`, but\nthe function is not yet written.\\r\n* **Write the `wrap` function** so that\nit implements the logic described above.\\r\n* **Run your app** and confirm\nthe turtle now \"wraps\" when it leaves the screen.\\r\n\\r\n![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)"
      U3 - Return Values - writeMaxVal_markdown_instruction: "# Writing Functions\nthat Return Values\\r\n\\r\nNow you are going to write your own function that\nreturns a value, `maxVal`. This function should return the maximum of two\nvalues provided as input. The code for `minVal` is provided so that you can\n**replicate the pattern used in this function**.\\r\n\\r\n**Pattern for Functions\nthat Return Values**\\r\n* Use parameters to provide input.\\r\n* Declare a\nvariable that will be used as output, possibly initializing its value.\\r\n*\nUpdate the value in your output variable throughout your program.\\r\n* Return\nyour output variable on the last line of your function.\\r\n\\r\nYou may actually\nrecognize many similarities between how we wrote functions that process arrays\nand functions that return values. **These patterns aren't rules of programming,\nbut they help make your code easy to read and understand**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Starter code** has been provided which stubs out `maxVal` and generates\ntwo random values. `minVal` is still provided **so that you can replicate\nthe pattern used**.\\r\n* **Write `maxVal`**, replicating the pattern used\nto write `minVal`.\\r\n* **Use `maxVal` within the `console.log` statement\nas if it were a number** to generate the output similar to the one shown below.\\r\n\\r\n![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)"
      U3 - Search Terms - 1_markdown_instruction: "# Printing Specific Records\\r\n\\r\nSometimes\nwe want to search through the records in the table to find certain records.\nFor instance let's search through the records for all the movies made in\n2008.\\r\n\\r\nloop over element in the array returned from readRecord and print\nout only the ones that meet a certain criteria - uses if statement and forshadows\nto search terms\\r\n\\r\n# Do This\\r\n\\r\nThe data from the last level has also\nbeen provided. \\r\n\\r\n* Add a call to readRecords to get the most current\nversion of the data table.\\r\n* Make a global array which will hold the movies\nthat match our search\\r\n* Add a for loop to loop over all the records in\nthe array\\r\n* As you loop over the array check each object to see if the\nyear is equal to 2008\\r\n* If the movie was made in 2008 add the whole object\nto our global array.\\r\n* After you have checked all the items in the array\nprint out the array of movies matching the search."
      U3 - Search Terms - 2_markdown_instruction: "# Search Terms\\r\n\\r\nThat was\na lot of work just to find the records which matched 1 search criteria! Well\ngood news! There is an easier way! We haven't talked about the second parameter\nin readRecords, the search terms. Up until now we have given it an empty object.\nThis means it will return all the records beacuse it does not filter records\nbased on any criteria. However if we want to search for something like all\nthe movies made in 2008. We can easily do this by providing an object with\nthose search criteria!\\r\n\\r\nThe object will contain just the key value pairs\nto look for. Any record that contains those key value pairs will be returned\nas part of the records to the readRecords call.  The key of the key value\npair will be the column name to look under for a certain value. For example\nto look for movies made in 2008 in our table we would pass an object that\nlooked like this:\\r\n\\r\n`{year: 2008}`\\r\n\\r\n# Do This\\r\n\\r\nThe data from\nthe last level has also been provided. \\r\n\\r\n* Add a call to readRecords\\r\n*\nChange the table to read from the movies table\\r\n* Change the search terms\nto look for movies with the year 2008\\r\n* Print the records returned as the\nparameter to the callback function.\\r\n* Notice that it is the same list from\nthe last level!"
      U3 - Search Terms - 3_markdown_instruction: "# Are there any results?\\r\n\\r\nOne\nof the easiest things to check when using search terms for readRecords is\nwhether there were records that matched your search. We can check this by\nchecking the length of the array of records returned.\\r\n\\r\n# Do This\\r\n\\r\nThe\ndata from the last level has also been provided. \\r\n\\r\n* Add a call to readRecords\\r\n*\nChange the table to read from the movies table\\r\n* Change the search terms\nto look for movies with the year 2010\\r\n* Add an if else statement inside\nthe callback function to check the length of array\\r\n\\t* If there are greater\nthan 0 records print \"There was a match\"\\r\n    * Otherwise print \"There\nare no records matching that search\""
      U3 - Search Terms - 4_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nWhat\nif we want to search with more specific criteria?  We can add more criteria\nto the search terms object.\\r\n\\r\nFor example we can search for the city\nin California with population of 2,000,000.  We would use: `{state: \"California\",\npopulation: 2,000,000}` as the object for the search criteria.\\r\n\\r\n# Do\nThis\\r\n\\r\nThe data from the last level has also been provided. \\r\n\\r\n*\nAdd a call to readRecords\\r\n* Change the table to read from the cities table\\r\n*\nChange the search terms to look for cities in California with population 2,000,000\\r\n*\nPrint out the records match the search results. "
      U3 - Search Terms - 5_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nOn\nthe last level we search for the criteria that a city was in California AND\nits population was 2,000,000. What if we want to search for cities that are\nin California OR have a population of 2,000,000?  We actually can't put that\nas a search criteria in readRecords so we have to use a different method.\\r\n\\r\nOne\nway to do a search with OR is to do two different readRecord calls. One for\nthe state and one for the population.  Then we can combine the lists.\\r\n\\r\n#\nDo This\\r\n\\r\nThe data from the last level has also been provided. \\r\n\\r\n*\nAdd TWO calls to readRecords\\r\n* Create a global list to hold the combine\nsearch results.\\r\n* Change the table to read from the cities table\\r\n* Change\nthe search terms\\r\n\\t* Set one to search for cities in California\\r\n    *\nSet the other to search cities with a population of 2,000,000\\r\n* Inside\neach callback function loop through the lists of records returned and add\neach element to the global array.\\r\n* Print out the records matching the\nsearch results. "
      U3 - Search Terms - 6_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nOn\nthe last level we search for the criteria that a city was in California AND\nits population was 2,000,000. What if we want to search for cities that are\nin California OR have a population of 2,000,000?  We actually can't put that\nas a search criteria in readRecords so we have to use a different method.\\r\n\\r\nOne\nway to do a search with OR is to do two different readRecord calls. One for\nthe state and one for the population.  Then we can combine the lists.\\r\n\\r\n#\nDo This\\r\n\\r\nThe data from the last level has also been provided. \\r\n\\r\n*\nAdd TWO calls to readRecords\\r\n* Create a global list to hold the combine\nsearch results.\\r\n* Change the table to read from the cities table\\r\n* Change\nthe search terms\\r\n\\t* Set one to search for cities in California\\r\n    *\nSet the other to search cities with a population of 2,000,000\\r\n* Inside\neach callback function loop through the lists of records returned and add\neach element to the global array.\\r\n* Print out the records matching the\nsearch results. "
      U3 - Simple Drawing - Color_markdown_instruction: "# RGB Color\\r\n\\r\nJust\nlike in HTML and CSS we can use RGB values to determine the color.\\r\n\\r\nIn\ngame lab we do this with the color block\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* Make\neach rectangle a different color using the rgb color functions"
      U3 - Simple Drawing - Comments_markdown_instruction: "# Comments and White\nSpace\\r\n\\r\nIn HTML and CSS you learned about commenting and white space\nas important practices. You can comment in Game Lab using `//` before our\ncomment.  For example <img src=\"https://images.code.org/c5e94b8bc9e0160e2c98c3adff2ac53f-image-1461101058517.02.55\nPM.png\" style=\"width:110px\">. You have already seen examples of this in\nsome of the past levels. The comment block can be found in the most tabs.\nHowever it may be easier to switch to text mode and type in comments yourself.\nIf you haven't tried it yet click <img src=\"https://images.code.org/d7811c0d29028daa74ae9e9561e01bee-image-1461101470090.30.45\nPM.png\" style=\"width:110px\"> and try using Game Lab in text mode. It is\nactually impossible to add white space without switching to text mode, so\nin order to group your code using white space, you will have to switch to\ntext mode. \\r\n\\r\n# Do This\\r\nYou are going to practice using comments and\nwhite space in your rainbow program. \\r\n\\r\n* Separate each band of the rainbow\nand the grass into its own block of code\\r\n* Put a comment before the block\nto tell which color band it is\\r\n\\r\nFor example your first couple lines\nof code should look like this:\\r\n\\r\n<img src=\"https://images.code.org/cfd27e7132ab45757713b7234fa06ae0-image-1460643736548.21.24\nAM.png\" style=\"width:250px\">"
      U3 - Simple Drawing - Ellipse and No Fill_markdown_instruction: "# Project\nLevels\\r\n\\r\nAlright, let's start drawing some pictures! You are going to\nwork on drawing a rainbow. You are going to do this in steps broken out over\na series of levels. Don't worry, though; your code will pass from one level\nto the next as you make updates. As a result, you can work on one project\nover a bunch of levels. In the future, you will call this a set of **Project\nLevels**.  Whenever something is part of a set of project levels you will\nsee this warning: \\r\n\\r\n<img src=\"https://images.code.org/f931e61d4b18026d8d615e3ee87a35c4-image-1461785315914.28.23\nPM.png\" style=\"width:600px\">\\r\n\\r\n# Draw Rainbow\\r\n<img src=\"https://images.code.org/028794b8d825d5fa6130582e4271abce-image-1460574974541.15.00\nPM.png\" style=\"width:200px; float:right\"> \\r\n<img src=\"https://images.code.org/1d76fb4c8742648bff07f9edda631f6f-image-1460736028983.59.44\nAM.png\" style=\"width:200px; float:right\">\\r\nIn order to draw a rainbow\nyou are going to use ellipses. You are probably wondering how you can draw\na rainbow with circles. You are going to use a sneaky trick! You can hide\nhalf of the circle under rectangles so it looks like they don't exist. Check\nout the images to the right.\\r\n\\r\n# Do This\\r\nThe starter code contains\n3 of the ellipses for the rainbow. Your final result should look like the\ndrawing above on the right. You will need to:\\r\n\\r\n* Add 4 more ellipses\nall with the same x and y position as the first three\\r\n* Size the ellipses\nappropriately\\r\n\\t* The smallest ellipse has a width of 100 and a height\nof 100\\r\n    * Each ellipse's width and height are 50 bigger than the one\ninside of it\\r\n* Add a rectangle for grass"
      U3 - Simple Drawing - Fill_markdown_instruction: "# Fill\\r\n\\r\nNow, let's\nadd some color to your rectangles! You can do that with the `fill` block.  Setting\nthe `fill` is like picking the color of pen you are going to draw with, and\nusing only that color of pen until you choose a different one.\\r\n\\r\n* When\nyou set `fill`, everything that is drawn after that point will have that fill\ncolor. \\r\n* You need to set `fill` **before** the shape you want it to apply\nto. \\r\n\\r\nThe color of the pen is specified by a lowercase word inside `\"\n\"` and is the name of the color. You can use any color name you have used\nin CSS. For example `fill(\"blue\")` will set the fill color to blue.  A full\nlist of names can be found at <a href=\"http://www.w3schools.com/colors/colors_names.asp\"\ntarget=\"_blank\">W3 Schools - Colors</a>. \\r\n\\r\n# Do This\\r\n\\r\nIf you\nrun the program, you will notice that all the rectangles are set to red. Make\neach rectangle a different color:\\r\n\\r\n* Add 3 more fill statements - one\nbefore each rectangle\\r\n* Change the fill colors so that each rectangle is\na different color"
      U3 - Simple Drawing - Many Rects_markdown_instruction: "# Many Rects\\r\n\\r\nWe\ncan have more than one rect on the screen at a time\\r\n\\r\ncurrently there\nare 4 rectangles on the screen but its hard to tell\\r\n\\r\n\\r\n\\r\n# Do This\\r\n\\r\n*\nMake each rectangle a different color\\r\n* Make the rects each take up one\ncorner of the screen like such\\r\n\\r\n<img src=\"https://images.code.org/8dd4caff4b06c5d0738c47a0601be445-image-1460483873266.57.23\nPM.png\" width=200>"
      U3 - Simple Drawing - No Fill_markdown_instruction: "# Stroke Weight, No Fill\nand No Stroke\\r\n\\r\nAlright, now that you have made the outlines the correct\ncolors, let's remove the gray fill. You can remove the fill with the command\n<img src=\"https://images.code.org/15b0024a999ac91e0be7b45e702cd0da-image-1461100870733.20.55\nPM.png\" style=\"width:110px\">.  This is similar to fill in that it has to\ngo before the things you want to not have fill. \\r\n\\r\nAnother new block\nyou are going to leverage is <img src=\"https://images.code.org/9c872b32bffc3a6cdb5e37f2a678e6eb-image-1461100747419.02.37\nPM.png\" style=\"width:150px\">. This allows you to make the outline you create\nthicker. The value you input is the thickness.\\r\n\\r\nLastly, you can use\n<img src=\"https://images.code.org/377cc0c5890eac0756c46e36cbdf8b2e-image-1461100823984.02.44\nPM.png\" style=\"width:110px\"> to remove the stroke. You are going to want\nthis for the grass as you just want a green rectangle with no outline. \\r\n\\r\n#\nDo This\\r\n\\r\n<img src=\"https://images.code.org/d39b81417cb5e2bd64539e9e21c88395-image-1460642887253.07.50\nAM.png\" style=\"width:150px; float:right\">\\r\n\\r\nThe final product is shown\nto the right. In order to get there:\\r\n\\r\n* Add `noFill` as the first line\nin the program so that the gray middle of all the shapes disappears\\r\n* Make\nthe `strokeWeight` large enough that the bands all touch (25)\\r\n* Notice\nthat the fill disappeared for the grass. Add `fill` for grass\\r\n* Remove\nthe border on the grass by using `noStroke`\\r\n"
      U3 - Simple Drawing - Order of Blocks_markdown_instruction: "# Order of Code\nMatters\\r\n\\r\nThe order of the blocks of code matters. Computer code is read\nfrom top to bottom, in order. The computer will run the step on the first\nline, then the second line, and so on. This means that when you want something\nat the **back of your picture, it should be at the top of the program** and\nwhen you want something at the **front of your picture, it should be at the\nbottom of the program.**\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/ff378579f623f93e36bdd7c66e091e20-image-1480368475986.27.20\nPM.png\" style=\"float:right\">\\r\nThere is another bug in the program. The\nprogram is supposed to look like the picture on the right, but when you run\nit you won't be able to see all the squares. Can you fix it? \\r\n* **DON'T\nchange the values for the rectangles.**\\r\n* **Change the order of the blocks**\nso that the image looks like the one on the right. "
      U3 - Simple Drawing - Oval_markdown_instruction: "# Oval\\r\n\\r\nEllipse is\njust a fancy name for oval.  You can use the `ellipse` block to draw an oval.  The\nvalues for ellipse are very similar to rectangle but have one major difference.\nCan you figure out the difference?\\r\n\\r\n# Do This\\r\n\\r\n* Add a `rect`\ncommand\\r\n* Add an `ellipse` command\\r\n* Give `ellipse` the same input values\nyou give `rect`\\r\n* What do you think might happen?\\r\n* What do you notice?"
      U3 - Simple Drawing - Personal Drawing_markdown_instruction: "# Your Own Drawing\\r\n\\r\nIt\nis your turn to create your own drawing. You should have drawn out your plan\non paper first.\\r\n\\r\n# Do This\\r\nAs a reminder make sure you hit the objectives:\\r\n\\r\n*\nCreates an identifiable and named object or design (i.e. no random splatters\nof shapes)\\r\n* Uses at least 10 shapes or text items (rect, ellipse, regularPolygon,\ntext)\\r\n* Uses at least 4 different color fills\\r\n* Uses at least 2 different\ncolor outlines\\r\n* Contains at least 3 different logical blocks of code with\ncomments\\r\n"
      U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction: "# Drawing\nRules\\r\n\\r\nSo, what did you discover on the last level?\\r\n\\r\n* What do\neach of the four openings control?\\r\n\\r\n\\t* First Opening - controls the\n**location of the rectangle from left to right** - call this the **x position**\\r\n    *\nSecond Opening - controls the **location of the rectangle from top to bottom**\n- call this the **y position**\\r\n    * Third Opening - controls the **width**\nof the rectangle\\r\n    * Fourth Opening - controls the **height** of the\nrectangle\\r\n\\r\n* What is the size of the drawing area?\\r\n\\r\n\\t* Width:\n400\\r\n    * Height: 400\\r\n\\r\n* Where is (0,0) or x = 0 and y = 0?\\r\n\\r\n\\t*\nThe **upper left corner of the grid!**\\r\n\\r\n# Do This\\r\n\\r\nThere is code\nprovided for a rectangle that draws in the upper left corner when you run\nthe program. Using your new knowledge of the workspace and the inputs for\na rectangle:\\r\n\\r\n* **Change the width and height of the rectangle so that\nit fills the whole drawing area**\\r\n* **HINT:** Remember that the rectangle\nblock is `rect(x, y, width, height)`, in that order"
      U3 - Simple Drawing - Rectangle_markdown_instruction: "# Rectangles\\r\n\\r\nWelcome\nto Game Lab.  Game Lab allows you to create interactive games and animations!\nYou are going to start with drawing shapes and build up to games over time.\nIn class you already practiced the basics of drawing shapes. You are just\ngoing to translate that skill to the computer. Check out the game area on\nthe left. This is where you will see the output of your program.\\r\n\\r\nThe\nfirst shape you are going to use is the rectangle. The block for a rectangle\nis `rect()`. As you can see, there are four openings in the rect block. These\nvalues control some aspect of the way the shape is drawn.\\r\n\\r\n# Do This\\r\n\\r\n*\nAdd a `rect()` command to the workspace. \\r\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\nPM.png\" width=100> to run the program and see what happens. \\r\n* Change\nthe numbers in the four different openings, then try running the program again.\n\\r\n* Repeat that process until you can answer:\\r\n\\t* What do each of the\nfour openings control?\\r\n    * What is the size of the drawing area?"
      U3 - Simple Drawing - Road Ellipse_markdown_instruction: "# Clouds and Sun\\r\n\\r\nNext,\nyou are going to add the clouds and sun to our picture. Here is an example\nof what your work could look like at the end of the level, but use some creativity\nas you create your sun and clouds.\\r\n\\r\n<img src=\"https://images.code.org/c3a26070e316d0fda19caba59af710ba-image-1460644884454.41.10\nAM.png\" width=200>\\r\n\\r\n# Do This\\r\n* Add ellipses for clouds and the\nsun.\\r\n* Make sure there is no outline on the clouds and sun\\r\n* Set the\ncolors of the clouds and sun. "
      U3 - Simple Drawing - Road Rects and Color_markdown_instruction: "<img src=\"https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59\nAM.png\" style=\"float:right\" width=150>\\r\n\\r\n# Road Drawing\\r\n\\r\n\\r\n\\r\nLet's\ntry out another example! This is going to be another set of project levels.\nThe final product will look like the image on the right, but we'll start\nby setting up the background, grass, and road.\\r\n\\r\n# Do This\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/fcee25a3bbfea2859e0407b73ef9edd8-image-1460644263112.30.18\nAM.png\" style=\"float:right\" width=150>\\r\nThere are starter comments to\nhelp you out - don't forget to do this as you go!\\r\n* Add rectangles for\nthe background, grass and road\\r\n* Change the colors to appropriate colors\nfor each item used: \\r\n* Remove the black outline\\r\n\\r\nDon't worry about\nfinishing the whole picture right now. You'll do that in the next few levels."
      U3 - Simple Drawing - Simple Shape Drawing_markdown_instruction: "# Simple\nDrawing\\r\n\\r\n<img src=\"https://images.code.org/47dce1fc1ac728bcc523909573812099-image-1461787179482.59.14\nPM.png\" style=\"width:200px; float:right\">\\r\n\\r\nThis is a mess! Can you\nhelp debug this program? All the necessary lines of code are here, but they\nare not in the correct order to draw the picture on the right.\\r\n\\r\n# Do\nThis\\r\n\\r\n* Re-order the code to produce the picture\\r\n\\r\n*Note: You don't\nneed to add any new lines of code*\\r\n\\r\n"
      U3 - Simple Drawing - Stroke and Stroke Weight_markdown_instruction: "# Stroke\\r\n\\r\nLet's\nstart adding color to the rainbow. You may have noticed that all the shapes\nhave a middle color and an outline color. The middle is gray and the outline\nis black by default. **For the rainbow, you are going to change the OUTLINE\ncolor. This will allow you to get the arch shape without the middle fill.**\n\\r\n\\r\nYou can change the look of the outline using `stroke()` which sets\nthe color of the outline.  Stroke takes names of colors ('red', 'orange',\netc) just like fill. However, you will want to be more specific about the\ncolors of the rainbow.\\r\n\\r\n# Color\\r\nYou can set colors using RGB values\njust like you did in HTML and CSS. We do this by using the `rgb()` block in\nplace of the color name. For example `stroke(rgb(255,0,0))`. Like fill, you\nneed to set stroke before drawing the object you want to have that stroke.\\r\n\\r\n#\nDo This\\r\n<img src=\"https://images.code.org/023bd330cc9ccced5c665330c5e997b4-image-1485287796998.56.13\nPM.png\" style=\"width: 250px; float: right\">\\r\n\\r\n* Use `stroke()` to\nmake each ring of the rainbow the appropriate color. \\r\n* The final picture\nshould look like the one shown to the right. You will continue to improve\nit on the next level.\\r\n\\r\n| Color | RGB Values |\\r\n|---|---|\\r\n| red\n| (255,0,0)|\\r\n| orange | (255,127,0) |\\r\n| yellow | (255, 255, 0) |\\r\n|\ngreen | (0,255,0) |\\r\n| blue | (0, 0, 255) |\\r\n| indigo | (75, 0, 130) |\\r\n|\nviolet | (139, 0, 255) | "
      U3 - Simple Drawing - X and Y values_markdown_instruction: "# Bugs\\r\n\\r\nNot\nevery program you write in computer science works perfectly or even well the\nfirst time. The things that go wrong with a computer program are called **bugs**.  The\nprocess of fixing those bugs is called **debugging**. Computer scientists\ndo a lot of debugging, so it is a very valuable skill. Because of this, you\nare going to do many levels that help you practice debugging strategies.\\r\n\\r\n#\nDo This\\r\n\\r\n<img src=\"https://images.code.org/70f4ce3f9362d8dbb361e36906617d32-image-1460733825166.23.26\nAM.png\" style=\"width:200px; float:right\">\\r\n\\r\nYou are going to debug\na problem. In the code there is a rectangle block, but when you run the program\nthe rectangle is nowhere to be found! Can you fix the problem?\\r\n\\r\n* Figure\nout why the rectangle is not showing. **HINT** What are the biggest x and\ny positions that will show on the canvas?\\r\n* **Move the rectangle to the\nlower left corner of the drawing area** as in the example on the right."
      U3 - Simple Drawing - regular polygon_markdown_instruction: "# Regular Polygons\\r\n\\r\nYou\nare now going to add the stop sign.\\r\n\\r\n<img src=\"https://images.code.org/0ea048eca4b3a7f3263cf8e0a9882d2b-image-1460646035610.53.20\nAM.png\" style=\"width:200px\">\\r\n\\r\nIn order to create a stop sign you\nare going to need a new block. The `regularPolygon()` block draws any shape\nwith sides that are all the same length.  Some examples are:\\r\n\\r\ntriangle\n(3 sides) <img src=\"https://images.code.org/9bcbae86518007a3141ae5dbde5f1305-image-1460750039357.52.36\nPM.png\" style=\"width:100px\"> square (4 sides) <img src=\"https://images.code.org/1def6a4326b78b76a5fcf95c6ec33b8b-image-1460750039357.52.53\nPM.png\" style=\"width:100px\"> pentagon (5 sides) <img src=\"https://images.code.org/ba7262caf5ad0f9ec926027a2d281ceb-image-1460750039358.53.05\nPM.png\" style=\"width:100px\"> \\r\n\\r\nThe `regularPolygon` has 4 parameters\nx, y, number of sides, and the radius. x and y specify the center of the shape.\nThe radius is the distance from the center to the end of each of the sides.\\r\n\\r\nTo\nmake a stop sign you are going to need an octagon, which has 8 sides. <img\nsrc=\"https://images.code.org/4e8c23c88e33aa5e06ed3e5ca702e3ab-image-1460750174518.56.05\nPM.png\" style=\"width:100px\">\\r\n\\r\n# Do This\\r\n\\r\n* Add a pole for the\nstop sign\\r\n* Add an octagon (8 sided shape) for the sign. Hint: The center\nof the octagon should be at the top of the pole.\\r\n* Set the color of the\nobjects.\\r\n* Make the stroke white and make the outline thicker"
      U3 - Simple Drawing - text_markdown_instruction: "# Text\\r\n\\r\nThe last step\nis to add text to our stop sign. You can add text with the <img src=\"https://images.code.org/302a9fa63cce41d49ce101df08a378f3-image-1472661577637.39.29.png\"\nstyle=\"width:150px\"> block. The `text()` block has 3 parameters: `text`,\n`x` and `y`. `text` is the string of text you want to print on the screen.  This\ntext needs to go inside `' '` so that the computer knows it's a string.  `x`\nand `y` are the x and y coordinates of the bottom left corner of the text.\\r\n\\r\nAlso,\ndon't forget to comment your code and use white space to block out connected\nlines. \\r\n\\r\n# Do This\\r\n* Add text to the center of the sign\\r\n* Make\nsure the text has no stroke and that the fill is white\\r\n\\r\n<img src=\"https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59\nAM.png\" width=200>"
      U3 - Simulation - 1_markdown_instruction: "# Starting Small\\r\n\\r\nTo start,\nwe're going to simulate flipping a coin 10 times. You might be thinking that\nisn't many coin flips, and that we could just do those flips in real life,\nbut this is actually an important step in developing a simulation. At small\nscales we can make sure our code is working as intended because **we can still\nvisually confirm its output**. Once we're convinced that the logic of our\nprogram is reliable we'll move up to simulating larger numbers of flips.\\r\n\\r\nThe\ncore logic of our program will be focused on **a `while` loop** that simulates\nflipping a coin by repeatedly generating **random 0's or 1's using `randomNumber`**.\nThis is a great opportunity to keep practicing using loops while applying\nyour knowledge of variables, iteration, and `if` statements.\\r\n\\r\n# Do This:\\r\n\\r\n*\nWhen we want to flip a coin with a computer we will instead **generate a random\nnumber between 0 and 1**.\\r\n* Write a program that **uses a `while` loop**\nto **flip a coin 10 times** and writes the value of each flip to the screen.\nThe example below shows how your program should run.\\r\n* **HINT:** you will\nneed to use a counter variable in your `while` loop to keep track of how many\ntimes the coin has been flipped. \\r\n\\r\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)"
      U3 - Simulation - 2.1_markdown_instruction: "# Changing the Loop Condition\\r\n\\r\nCurrently\nour loop condition is based on a counter variable that keeps track of the\ntotal number of flips, but our simulation should only run **while we have\nfewer than the target number of heads**. In this exercise you are going to\nchange the condition used by your `while` loop so that your **simulation terminates\nonce you have flipped 5 total heads**. At the end of the loop we will **write\nthe total number of flips** to know how many flips it took to get 5 heads.\\r\n\\r\n#\nDo This:\\r\n\\r\n* Change the looping condition to use the variable you are\nusing to keep track of the number of heads. **Your loop should run as long\nas you have fewer than 5 total heads**.\\r\n* Add code after your loop that\n**writes the total number of flips**.\\r\n* **Test your program** several times\nto make sure it works as expected. See the example below.\\r\n* **Note:** the\nsimulation is always terminating once it flips its 5th heads. Sometimes this\nmeans the text output runs off the screen. We will address this in the next\nexercise.\\r\n\\r\n![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)"
      U3 - Simulation - 2.5_markdown_instruction: "# 10,000 Heads!\\r\n\\r\nYou're\nready to increase the number of heads your simulation is looking for and **test\nyour first hypothesis**. Before we move up to the full 10,000 heads, however,\nwe're going to perform a quick check of our program logic.  When you make\nchanges to your program **it is possible that some portion of your programming\nlogic will stop working as you expected**. In order to feel more confident\nabout your model you will **first change the number of heads you are looking\nfor to a number that we can still visually verify (7 heads)**. If our code\nstill works after making changes then we should be confident that it should\nwork at 10,000. We will remove the intermediate output and run the full simulation!\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Increase the number of heads you are looking for to 7**\nand **visually confirm** that the code is still working as you expect.\\r\n*\nIf everything seems to be working, **comment out the `write` command that\ndisplays the results of each flip.** You can use `//` to comment out a single\nline of code. Make sure that the total count of flips still prints though!\\r\n*\n**Run your simulation and find out how long it takes to get to 10,000 heads**.\nThen run it a few more times. What patterns are you noticing? Record your\nresults and move on."
      U3 - Simulation - 2_markdown_instruction: "# Counting Heads\\r\n\\r\nLet's say\nthat a **1 is a heads**. If want our simulation to run until we reach a certain\nnumber of heads then **we will need a way to count the number of heads that\nhave been flipped**. In order to do this you will need to add a variable that\nacts **as a counter**. Initialize it to 0, and every time you flip a heads\n(1) **increment your counter by 1**. At the end of your program you should\nwrite the value to the screen.\\r\n\\r\n# Do This:\\r\n\\r\n* Add a variable that\n**counts the number of heads (1's)** and write its value to the screen after\neach flip.\\r\n* Run your program severals times **and validate that the number\nof heads recorded is correct** by visually checking the flips you've printed\nto the screen.\\r\n* **Hint:** you will also need to store your current coin\nflip in a variable to complete this challenge.\\r\n\\r\n![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)"
      U3 - Simulation - 3_markdown_instruction: "# Streaks of Heads\\r\n\\r\nWe are\ngoing to alter our simulation so that it doesn't count the total number of\nheads, but rather the longest **streaks of heads**. This will allow us to\nsimulate **how many flips it takes to get 12 heads in a row**. \\r\n\\r\nTo\nbegin with you will change your looping condition so that **the loop again\nonly runs 10 times**. This will allow us to visually confirm our code is working.\\r\n\\r\n**Keeping\nTrack of Streaks:** We know we need to count streaks of heads, how do we do\nthis in code?  Do we need to keep track of all the previous flips so we know\nthat we're on a streak?\\r\n\\r\nThe answer is: **no**.  We can instead just\n**count in a clever way** that makes our code pretty simple.  Make a variable\nto use as a counter and...\\r\n\\r\n * every time you see heads, add 1 to a\ncounter.\\r\n * every time you see tails, set the counter back to 0.\\r\n\\r\nHere\nis some psuedocode showing how it works.  You might take a minute to study\nand reason about why and how it works.\\r\n\\r\n**Pseudocode**\\r\n```\\r\n//\nOuside loop\\r\nheadsCount <-- 0\\r\n\\r\n// Inside loop\\t\\r\nIF (current flip\nis a heads)\\r\n  headsCount <-- headsCount + 1\\r\nELSE\\r\n  headsCount <--\n0\\r\nDISPLAY (current flip)\\r\nDISPLAY (headsCount)\\r\n```\\r\n# Do This:\\r\n\\r\n*\nChange your `while` loop's condition so that **it only runs 10 times**.\\r\n*\nAdd code to the simulation that **displays the length of each streak of heads**\nfollowing the logic described above.  Note that pseudocode should translate\nto JavaScript pretty easily.\\r\n* The example below shows an example of what\noutput from your program might look like.\\r\n\\r\n![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07\nPM.png)"
      U3 - Simulation - 4_markdown_instruction: "# Changing the Loop Condition: Streaks\nof Heads\\r\n\\r\nWe want our simulation to run** while the streak of heads\nis less than a target length**. In order to do this we'll need to change\nour looping condition to use the variables we've been using to count our\nstreak of heads. To begin with **your simulation should look for a streak\nof 3 heads** so that you can still visually confirm the output.\\r\n\\r\n# Do\nThis:\\r\n\\r\n* **Change the condition** used by your `while` loop so that\nit now runs **while the streak of heads is less than 3**.\\r\n* **Test your\nprogram** by running it and visually confirming that its output is correct.\nIt should run like in the example below.\\r\n* **Note:** As before it's possible\nthat your output will sometimes run off the screen. You can still confirm\nyour code is working as you intend (it should never run after a streak of\n3) and we will address this issue in the next exercise.\\r\n\\r\n![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)"
      U3 - Simulation - 5_markdown_instruction: "# Streaks of Heads: 12 in a Row\\r\n\\r\nWe're\nalmost ready to test **our second hypothesis** and find out how long it takes\nto get **12 heads in a row**. Just as before we're first going to **visually\ntest our code with a different length streak (4)** before removing most of\nthe visual output and running the code for a streak of 12.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Change your simulation to run until you get a streak of 4** and visually\nverify that the values calculated are accurate.\\r\n* **Comment out** the lines\nof code that write the current coin flip and the current streak count. You\ncan use `//` to comment out a single line of code.\\r\n* **Change your simulation\nto run until you get a streak of 12 heads**. \\r\n* **Run your simulation a\nfew times and record your results!**"
      U3 - Simulation - 6_markdown_instruction: "# Keep Experimenting!\\r\n\\r\nYour\nsimulation can be updated or changed however you like. What new questions\ndo you have? Do you want to look for longer streaks of heads? Do you want\nto roll a die instead of flipping a coin? Make any changes and improvements\nto your simulation that you like.\\r\n"
      U3 - Simulation - App_markdown_instruction: "# More Flips\\r\n\\r\nIf your code\nis working well for 10 flips then we should be reasonably confident that it\nwill continue working for more. You will now want to **run your full simulation\non 10,000 flips**.\\r\n\\r\nPrior to this we have been printing our output after\nevery flip. This is a useful form of **debugging** but we will not want our\nprograms to print 10,000 different coins flips. **We only want the final output**.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Change your program to flip 20 coins** and visually verify\nthat the values calculated are accurate\\r\n* **Comment out** the lines of\ncode that print each coin flip and the current streak count. You can use `//`\nto comment out a line of code.\\r\n* **Change your program to flip 10,000 coins,\npredict what the longest streak will be, and run your program**.\\r\n* Rerun\nit a few times. **Does the answer stay fairly consistent? Are you surprised\nby the result?**"
      U3 - Simulation - Template_markdown_instruction: "# Simulating Coin Flips\\r\n\\r\nOver\nthe next several exercises we are going to be building a program that simulates\nflipping 10,000 coins, or even more if you like. Along the way we're going\nto be keeping track of the patterns that develop and hopefully learning something\nabout the patterns that develop.\\r\n\\r\nThis is a great problem to simulate\non a computer. If you wanted to flip 10 coins you'd probably just do it by\nhand. Flipping 10,000 coins would take significantly longer (about 3 hours\nif you flip one per second) and so **we'd much rather use a program to do\nthe work for us.** Not only is it a lot faster to write the program, but once\nyou're done you can run your program over and over, repeating the experiment.\nAs we'll see, **simulations like this make it much easier to quickly notice\npatterns, test hypotheses, and develop new ideas to investigate**.\\r\n\\r\n**Starting\nSmall:** Our simulations are going to start small. We'll actually only be\nflipping 10 coins to begin with, and then developing programs that keep track\nof patterns in this smaller set of data. That way we'll be able to visually\nconfirm that our programs are working as intended. **Once we've verified\nthat our programs work at a smaller scale we'll gradually increaese the number\nof flips our program is working on until we're at the full 10,000.**\\r\n\\r\n#\nDo This\\r\n\\r\n* When we want to flip a coin with a computer we will instead\n**generate a random number between 0 and 1**\\r\n* Write a program that **uses\na while loop** that **flips 10 coins** and writes their values to the screen\\r\n\\r\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)"
      U3 - Sprites - Intro Sprites_markdown_instruction: "# Sprites\\r\n\\r\nYou are\ngoing to start creating animations with **sprites**. A sprite is like a character\nin your animations. Your program will control how your sprite moves and appears\non the screen.\\r\n\\r\n**Creating Sprites:** The first step to using a sprite\nis creating the sprite. In order to do that you'll need to give it a label,\njust like a variable. This block will create a new sprite for you and let\nyou choose its label.\\r\n\\r\n![](https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41\nPM.png)\\r\n\\r\n**Drawing Sprites:** The next step to using a sprite is to\ndraw it on the screen. Whenever you call the ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16\nAM.png) command all the sprites in your animation will be drawn on the screen.\\r\n\\r\n#\nDo This\\r\n\\r\nThis program creates a sprite but it doesn't draw it on the\nscreen\\r\n\\r\n* **Add a ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16\nAM.png) command** after you've created a sprite so it will actually draw\\r\n*\n**Run the code** to draw your first sprite on the screen. Right now sprites\njust look like gray rectangles but soon they'll do a lot more."
      U3 - Sprites -Draw Sprites_markdown_instruction: "# Draw Sprites\\r\n\\r\nThis\nprogram is supposed to draw two sprites but when the program is run they don't\nshow up on screen. `createSprites` only creates the sprite but does not draw\nit on the game area. In order draw your sprite on the display you need another\nblock that was in the draw loop on the last level.\\r\n\\r\nCan you fix it?\n\\r\n\\r\n# Do This\\r\n\\r\n* Run the program and see what happens\\r\n* Take\na look back at the last level to see what is missing\\r\n* Fix the program\nso that both sprites show up"
      U3 - Sprites and Mod - Clone No Draw Sprites_markdown_instruction: "# Random\nShape Color\\r\n\\r\n** Video on Properties**\\r\n\\r\nThe built in variables\nfor sprites are called properties. Properties can be updated with in the draw\nloop to create animations just like variables.\\r\n\\r\nOne thing you need to\nbe careful of as you write programs with sprites is that you keep `drawSprites`\nas the last line inside the draw loop. You don't want to draw the sprties\nuntil after all the updates in the loop have happened.\\r\n\\r\n# Do This\\r\nCreate\na sprite that is set to a new random color every loop of the draw loop.\\r\n\\r\n*\nCreate a new sprite and make sure it draws on the game area\\r\n* Set the `shapeColor`\nof the sprite to a random color inside the draw loop\\r\n* Run the program\nand test that it works"
      U3 - Sprites and Mod - Create  and Draw Sprite_markdown_instruction: "# Sprites\\r\n\\r\n#\nDo This\\r\n* Create spirte\\r\n* Change the name of your sprite\\r\n* call drawsprites\nin draw loop"
      U3 - Sprites and Mod - Debug DrawSprites_markdown_instruction: "# Debug\\r\n\\r\nThis\nprogram is supposed to create a sprite that changes to a random color and\nmoves randomly around the screen. It's not working. Can you figure out why\nits not working?\\r\n\\r\nHint: There are two bugs in this program.  Sometimes\nwhen you fix one problem it may look like you made the initial problem worse.\nDon't worry. Remember the things you have learned so far. How would you write\nthe code for this level?\\r\n\\r\n# Do This\\r\n\\r\n* Run the program to see\nwhat is happening\\r\n* Debug the program. "
      U3 - Sprites and Mod - Debug Name Sprite_markdown_instruction: "# Debug\\r\n\\r\nThis\nprogram is supposed to create a sprite that changes to a random color, width\nand height. It's not working. Can you figure out why its not working?\\r\n\\r\n#\nDo This\\r\n\\r\n* Run the program to see what is happening\\r\n* Debug the program.\nHint: You do not need to add any new commands to make this work."
      U3 - Sprites and Mod - Free Play_markdown_instruction: "# Make Something\\r\n\\r\nYou've\nnow learned a bunch sprites, properties, and objects. What kind of animation\ncan you create with what you have learned?\\r\n\\r\nSprite Properties\\r\n\\r\n*\nx\\r\n* y\\r\n* width\\r\n* height\\r\n* shapeColor\\r\n\\r\n# Do This\\r\n\\r\nUse\nthe properties you have learned in this lesson to create an animation.\\r\n\\r\nStuck\non ideas? Try one of these.\\r\n\\r\n* Create a sprite in the middle of the\nscreen that grows and rotates"
      U3 - Sprites and Mod - Mouse Width and Height_markdown_instruction: "# Random\nAround Point"
      U3 - Sprites and Mod - Mouse X and Y_markdown_instruction: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\r\n\\r\n# Mouse X and Y\\r\n\\r\nSprites are actually\npart of a larger type of item that you will use frequently in computer science.\nThis type of item is called an **object**. An object is **a location in memory\nwith a name and properties**. It **associates a bunch of smaller pieces of\ninformation together**. \\r\n\\r\nAnother type of object is the **Game object**.\nEach game only has one Game object which is set up with initial properties\nfor you and it is called Game.\\r\n\\r\nOne of the coolest properties that the\nGame has are the x and y location of the mouse! **You can get the x and y\nlocation of the mouse using `World.mouseX` and `World.mouseY`.**  This follows\nthe pattern you learned before. `Game` is the name of the object. `mouseX`\nand `mouseY` are the names of the properties.\\r\n\\r\n# Do This\\r\n\\r\nYou\nare going to make a bee sprite follow the mouse around the game area.\\r\n\\r\n*\nThe bee image is already loaded in the animation tab for you.\\r\n* Create\na bee sprite that draws in the center of the window.\\r\n* Inside the draw\nloop update the position of the sprite to the position of the mouse:\\r\n\\t*\nSet the x position of the sprite to the value of `World.mouseX`.\\r\n    *\nSet the y position of the sprite to the value of `World.mouseY`.\\r\n* Run\nthe program to test that it works.\\r\n"
      U3 - Sprites and Mod - Move Across_markdown_instruction: "# Moving Animation\\r\n\\r\nYou\nare going to practice using the x and y properties of a sprite. Don't forget\nthat they designate the center of the rectangle. This may seems strange right\nnow while sprites are just rectangles but in the future sprites will be able\nto be any image you want.  When you use an image with weird edges its a little\nless clear where the upper left corner is. In addition, for things such as\nrotation its much easier to have the x and y at the center because thats the\npoint around which is rotates.\\r\n\\r\n# Do This\\r\n\\r\nCreate two sprites.\nOne that moves from left to right and one that moves from top to bottom. \\r\n\\r\n*\nCreate a sprite that draw on the screen\\r\n* Increment the x property of one\nto get movement from left to right\\r\n* Increment the y property of the other\nto get the movement from top to bottom"
      U3 - Sprites and Mod - Rand Around Mouse_markdown_instruction: "# Random Around\nPoint\\r\n\\r\n<img src=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\r\n\\r\nNow that you can make the bee follow the mouse\nlets make a bunch of bees fly near the mouse like shown in the visual on the\nright.  In order to do this you will need to **add a random amount between\n-50 and 50 to the `mouseX` or `mouseY`.**  \\r\n\\r\n# Do This\\r\nYou already\nhave one bee sprite that follows the mouse.\\r\n\\r\n* **Add 3 more bees** that\nfollow the mouse\\r\n* Update the x and y location to be randomly close to\nthe mouse\\r\n\\t* Add a random number between -50 and 50 to the `mouseX` and\n`mouseY` \\r\n* Use the `frameRate` block to find the best frame rate\\r\n"
      U3 - Sprites and Mod - Rand Shape Color_markdown_instruction: "# Properties\\r\n\\r\nIn\npast levels you created rectangles and then made a bunch of variables to keep\ntrack of different qualities about that rectangles such as its position and\ncolor. Sprites take away the need to make lots of separate variables because\nthose qualities can be controlled by built in variables. The first built in\nvariable we are going to try is `shapeColor`.  In order to access the built\nin variable you need to type something like `sprite.shapeColor` where sprite\nis the name of the sprite you are setting the color of.\\r\n\\r\n# Do This\\r\n\\r\nThe\nshape color of the first sprite is set for you. Can you set the color of the\nsecond sprite?\\r\n\\r\n* Add a command to set the `shapeColor` of the second\nsprite\\r\n* Run the program and test it out."
      U3 - Sprites and Mod - Rotation Direction_markdown_instruction: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:300px; float:right\">\\r\n# Rotation Direction\\r\n\\r\nWhen you\nuse the counter pattern for the `rotation` property with addition, the object\nwill always rotate clockwise. Sometimes however you will want your sprite\nto rotate the other direction. To do this you can just use subtraction!\\r\n\\r\n#\nDo This\\r\n\\r\nThere are three gears set up for you. You need to make the\ngears all look like they are rotating in sync with each other. \\r\n\\r\n* Make\nthe gears rotate so they look like they are working as one system.\\r\n* **Hint:\nThey won't all rotate the same direction**."
      U3 - Sprites and Mod - Shape Color_markdown_instruction: "# Predict\\r\n\\r\nWhat\ndo you think this code will do?\\r\n"
      U3 - Sprites and Mod - Sprite Rotation Command_markdown_instruction: "# Rotation\\r\n\\r\nOne\nof the cool things about properties are there are new things you can control\nabout a sprite that you could not about a shape! \\r\n\\r\nOne of those things\nyou can control about a sprite is its rotation.  The `rotation` property sets\nthe angle in degrees that the sprite should be turned to. With this you can\nangle a sprite to a certain orientation.\\r\n\\r\n# Do This\\r\nRotate the gears\nso they sockets don't overlap.\\r\n\\r\n* Add a command for top and bottom\ngears to set the rotation property of the sprite\\r\n* Play with the value\nof the rotation until you get it to look like the picutre on the right."
      U3 - Sprites and Mod - Sprite Rotation_markdown_instruction: "<img src=\"https://images.code.org/dfdc813b35a6773684e77618cffb04c9-image-1465570394783.gif\"\nalt=\"wheel spinning\" style=\"width:200px;float:right\" >\\r\n\\r\n# Rotation\\r\n\\r\nYou\ncan control sprites in ways you never could with just shapes.\\r\n\\r\nOne of\nthose things you can control about a sprite is its rotation.  The **`rotation`\nproperty sets the angle in degrees that the sprite should be turned to**.\nWith this you can angle a sprite to a certain orientation or make it spin!\\r\n\\r\n#\nDo This\\r\nYou are going to start creating a spinner wheel similar to one\nyou might find at a carnival.\\r\n\\r\n* Create a **new sprite**\\r\n* **Set\nthe image** of the sprite to the provided wheel.png\\r\n* Use the **`rotation`\nproperty as a counter** by 1 to produce a spinning effect\\r\n* Test it out\\r\n*\nPlay with the increment amount to find a speed you like\\r\n\\r\n# Till The\nAnimation Tab Works\\r\n\\r\n* <a href=\"https://images.code.org/60ce4d33daafb50996f53597b4f1547e-image-1466193542771.png\">\nWheel</a>"
      U3 - Sprites and Mod - Width and Height Rand_markdown_instruction: "# Width\nand Height\\r\n\\r\nSprites have other properties. There are properties for\nwidth and height of the sprite. The property names are `width` and `height`.\nSo to access the width of a sprite named `cat` you would say `cat.width`.\\r\n\\r\n#\nDo This\\r\n\\r\nThe provided code draws a sprite that changes colors. Can you\nchange the initial size of the sprite?\\r\n\\r\n* Set the width and height of\nthe sprite before the draw loop using properties"
      U3 - Sprites and Mod - Wrap Many Squares_markdown_instruction: "# Stuff"
      U3 - Sprites and Mod - X and Y Prop_markdown_instruction: "# Predict\\r\n\\r\nWhat\ndo you think this program will do when we run it?"
      U3 - Sprites and Mod - two sprites_markdown_instruction: "# Two Sprites\\r\n\\r\ntwo\nrects - make one move on the left side of the screen and one on the right\nside of the screen\\r\n\\r\n"
      U3 - User Input - Save getText To Variable_markdown_instruction: "# Saving\nText Input in Variables\\r\n\\r\nOften we want to save the information we pull\nin from the user for later use in our program. The best way to do this is\nto save it in a variable.\\r\n\\r\n# Do This:\\r\n\\r\n* **Create two variables\ninside your event handler** to store the **age** and **name** of the user.\\r\n*\n**Use `getText()` to update the values** stored in each of these variables.\\r\n*\n**Change your `console.log` statements to use your variable instead of `getText`**.\\r\n\\r\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13\nPM.png)"
      U3 - User Input - Saving After Input_markdown_instruction: "# Saving After\nInput\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* **Starter Code:**  The starter code has\nalready saved the name to a variable for later use.\\r\n\\r\n* ** Create a variable\nto store age ** and use `getText()` to save age for later use.\\r\n\\r\n* **\nRemember ** you can always check the value of a variable during execution\nby typing the name of the variable in the Debug Console."
      U3 - User Input and String -  Concat_markdown_instruction: "# Concat String\\r\n\\r\nOn\nthe last level we saved the variables as we said we would want to use them\nin the future. We are going to use them now to print nice messages out to\nour user welcoming them and congratulating them on their age. \\r\n\\r\nUp until\nnow we have just printed out different variables on separate lines of code.\nHowever sometimes we want to combine the variable with some text on the same\nline. \\r\n\\r\nFor example what if I want to say \"Welcome to the game, Dani!\".\nI need to be able to combine strings. \\r\n\\r\nThe way we do this is with the\n+ operator. \\r\n\\r\n`var sampleSentence = \"Welcome to my app, \" + name ;`\\r\n\\r\nNote:\nThis may seem a little weird as you can't use any other math symbols on strings\nbut someone decided this was easier than writing out a long method name so\nthey set it up to work nicely for us. \\r\n\\r\n\\r\n\\r\nWe are going to user\nText Area to put text onto the screen as it allows you to put longer blocks\nof text on the screen easily. \\r\n\\r\n\\r\n# Do This\\r\n\\r\n* **Starter Code:**  The\nstarter code looks like your code from the last level expect now we have a\nText Area where we output a welcome message to the user.\\r\n\\r\n* ** Add a\nTextArea ** to put a message about the users age.\\r\n\\r\n* ** Print in the\nTextArea** \"I never would have guess you were ____\" where the blank is the\nage they input. \\r\n"
      U3 - Variables - Clicker Game_markdown_instruction: "### 'Chaser-game' Continued\\r\n\\r\nNow,\nyou'll finally get to modify your 'chaser-game'.  Making the minimum requirement\nmight be pretty easy at this point.  Consider some of the enhancements suggested.\\r\n\\r\n####\nMinimum requirement - Clicker version 1\\r\n\\r\n* Starting from your previous\nclicker app and use a variable to store a click counter. \\r\n* Declare and\ninitialize your counter variable as a global variable\\r\n* update your counter\nvariable within the click event handler. \\r\n* A textLabel can be updated\non each click to output the click counter value along with a message. \\r\n\\r\n####\nEnhancements\\r\n\\r\nThere are lots of ways to enhance this app.  Here are\nsome things you can do in no particular order...\\r\n\\r\n* Add a big image\nwhich can serve as a background image. If the player clicks on the background\nimage they lose a point. \\r\n* Add a button that lets the user start over\n- reset the score.\\r\n* Add another image that jumps around randomly, or appears\nand disappears that the user can click\\r\n* Use arithmetic to change how the\nscore is calculated with each click (e.g. rather than losing a point for doing\nsomething wrong, divide the score by 2).  \\r\n* Add more and different event\nhandlers that alter the score in different ways.\\r\n* Use arithmetic to change\nthe size of the image you need to click based on the score.  For example,\nmake the image smaller and smaller as the score gets higher.\\r\n* Make the\nsize of the image change to a random value each time\\r\n* Make the score go\nup and down by a random value"
      U3 - Variables - Debug Scope_markdown_instruction: "# Debugging Variables:\nPart 4\\r\n\\r\nWe have the same starting code as last time with a few things\nadded to it. I'm trying to change the value of foo to 4. It seems to be 4\nin some places but not others?  Can you fix it?\\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the program**\\r\n\\r\n* **Add console log statements to try to figure\nout the value of the variable at different points**\\r\n\\r\n* Take a guess\nat what the problem is. We will discuss it on the next level."
      U3 - Variables - Debugging with Turtle_markdown_instruction: "# Practice Debugging\\r\n\\r\nOn\nthe last two levels you learned two different common variable problems\\r\n\\r\n1.\nFoo vs foo\\r\n2. \"foo\" vs foo\\r\n\\r\nOn this level there are a bunch of\nerrors you will need trace down to get the program to run correctly.\\r\n\\r\n#\nDo This\\r\n\\r\n<img src=\"https://images.code.org/256c4c3a041b107b4f2a6a743b963bf5-image-1445204671406.44.21\nPM.png\" style=\"width: 150px; float: right; border: solid 1px black\">\\r\n\\r\n*\n**Run the program**\\r\n\\r\n* **Locate the errors**\\r\n\\r\n* **Fix the program**.\nThe final product should look like the image on the right."
      U3 - Variables - Decrement_markdown_instruction: "# Decrementing Variables\\r\n\\r\nIn\nlast level we increased the value of our variable. Now what if we want to\ndecrease it. Well you probably guessed it. Its just subtraction instead of\naddition!\\r\n\\r\nHint: You may find it easier to edit the code in Text Mode\ninstead of Block Mode. Text Mode allows you to type code instead of dragging\nblocks out. It is very helpful for changing certain parts of your code and\nyou should feel free to use it whenever you feel it helps you. You can always\nswitch back to Block Mode at any point! You can find Text Mode by clicking\n<img src=\"https://images.code.org/8020c9f5f3766a2d82c2376d6df1b896-image-1444966181885.04.50\nPM.png\" width=\"100px\"> in the upper right corner of the Code Workspace.\\r\n\\r\n#\nDo This\\r\n\\r\n* Update the program to decrement the value of the variable\ninstead of increment.\\r\n\\r\n* Use console.log statements to check your work."
      U3 - Variables - Identify Variables_markdown_instruction: "# What happened\nin the last level?\\r\n\\r\nIn the last level we saw the difference between\na var name `foo` and one names `Foo`.  Variable names are ** case sensitive**\nmeaning that capital letters are different than lower case letters. \\r\n\\r\n#\nDebugging Variables: Part 3\\r\n\\r\nSometimes you have lots of console log\nstatments going on at once and its very difficult to tell which part of the\ncode is printing each message. One strategy to deal with this is to name messages\nby putting some output in front of them. \\r\n\\r\n# Do This\\r\n\\r\n* **Run\nthe program**. Check out what happens when you click Button 1 in comparison\nto the other buttons.\\r\n\\r\n* **Add `console.log()` statements** for the\nother buttons to identify where the value is coming from."
      U3 - Variables - Increment_markdown_instruction: "# Incrementing Variables\\r\n\\r\nSo\nfar we have seen explicitly changing the value of a variable to a specific\nvalue. What if we want to increase the current value by a certain amount?\nWe can add to the current value. This is called **incrementing** a value.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Run the program** and add `console.log()` statements to\nsee what is happening. \\r\n\\r\n* ** Add another increment of the current variable**\\r\n\\r\n*\n**Create another variable**\\r\n\\r\n* **Increment the value of the new variable**."
      U3 - Variables - Incrementing Variables_markdown_instruction: "# Incrementing\nVariables\\r\n\\r\nWe have brought back the turtle level we looked at before.\nYou may notice that we repeat a lot of the same code in this example and the\nonly thing that changes during the programm is the value of the variables.\nYour mind should be scream loop.  That would be a great thing but how do we\ndeal with updating the variables?\\r\n\\r\nWell take a look at the variable.\\r\n\\r\nmoveAmount\ngoes up by 25 each time. So we could use incrementing!\\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the code** and to see what it does. We want to recreate the same behavior\nwith the loop\\r\n\\r\n* **Create a repeat loop for the repeated code**\\r\n\\r\n*\n**Increment moveAmount by 25 to create the same program you started with but\nwith less code!**"
      U3 - Variables - Read Using Turtle_markdown_instruction: "# Multiple Ways to\nRead\\r\n\\r\nReading the value of a variable doesnt just have to be console.log\\r\nBring\nback turtle\\r\n\\r\n# Do This\\r\nxPosition\\r\nyPosition\\r\nmoveTo for Turtle\\r\n"
      U3 - Variables - Reassigning Variables with Console.log_markdown_instruction: "#\nVariable Reassignment\\r\n\\r\nSo far we have seen a bunch of programs that\ncreate one variable and keep the value of that variable the same through out\nthe program. However somtimes we want to change the value of the variable\nas the program executes. The rest of the levels in this progression are all\nabout different ways we can change the variable as the program is running.\n\\r\n\\r\nThe first and most important thing about variable reassignment is\nthat when you want to change the value of the variable you don't say var\nin front of the name. This tells the computer \"Go look for this variable\nin your memory because I already made it\".   The computer will go look for\nthe variable in memory and update its value for you.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Starter Code:** We have started you off with a variable that changes value\nand a couple `console.log()` statements. \\r\n\\r\n* **Run the program** to\nsee how variable reassignment works.\\r\n\\r\n* ** Change the values of the\nvariable** to see how that changes the program.\\r\n\\r\n* ** Add another reassignment\nstatement** at the end of the program in order to change the value a second\ntime."
      U3 - Variables - Set to Expression with Other Variables and Turtle_markdown_instruction: "#\nTurtle Level for Expressions with variables"
      U3 - Variables - Set to Expression with Other Variables_markdown_instruction: "#\nExpressions with Variables\\r\nArithmetic becomes much more interesting when\nwe use other variables in our expressions. For example you can do this:\\r\n\\r\n<table  style=\"margin-left:\nauto;\\r\n  margin-right: auto; align: center\">\\r\n<tr>\\r\n<td>\\r\n<img src=\"https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png\"\nstyle=\"width: 400px;\">\\r\n</td></tr>\\r\n<tr> <td>\\r\n <h3>\\r\n Mental Model\\r\n![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\\r\n</td></tr>\\r\n<tr><td><img\nsrc=\"https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif\"\nstyle=\"width: 400px;\"></td>\\r\n</tr>\\r\n</table>\\r\n\\r\nThe end result of\nan expression with variables is the same as one without.  The major difference\nis that values are retrieved from memory in order to do the calculation rather\nthan simply hard-coded.\\r\n\\r\n# Mental Model Check\\r\nWatch the animation\nabove. To compute the expression the computer will: **first** retrieve each\nof the values of the variables used in the expression; **then** the arithmetic\nexpression can be evaluated; **finally** the computed value can be stored\nin memory.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png\"\nstyle=\"float: right; width: 300px\">\\r\n* **Scenario:** In the starting code\nwe have provided you with variables that might be the kinds of things you\nwould keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\\r\n\\r\n*\nRight now the `totalScore` is just set to 0.  We want you to compute a final\nscore so that the person is rewarded for having a lot of points and lives,\nbut penalized for taking a lot of time.\\r\n\\r\n* **Write an expression** that\ncalculates the player's total score and stores it in the `totalScore` variable.  The\ncalculation is: **the player's points *times* lives *divided* by the total\ntime.**\\r\n\\r\n* For the values provided the app display should look like\nthis:\\r\n \\r\n<img src=\"https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png\"\nstyle=\"width: 250px\">\\r\n"
      U3 - Variables - Set to Expression with Turtle_markdown_instruction: "** @Baker\nnote: not sure what this level should be... was just playing around**\\r\n\\r\n#\nVariable Expression Assignment Practice\\r\n\\r\nOn the last level we saw how\nvariables can be set to the value of an expression. A good thing to remember\nis that expressions can contain more than one symbol in them so we are going\nto practice some of that on this level with turle. \\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the current program**\\r\n\\r\n* \\r\n\\r\n* "
      U3 - Variables - Set to Expression_markdown_instruction: "# Variables and Arithmetic\nExpressions\\r\nA common thing to want to do is store the result of an arithmetic\nexpression.  The 4 basic arithmetic operations `+ - * /` are available. \\r\n\\r\n<details><summary><strong>Here\nis a quick table that shows the arithmetic operators with code examples</strong>\n[click to expand]</summary>\\r\n<table>\\r\n<thead>\\r\n<tr>\\r\n<th style=\"text-align:center\">operation</th>\\r\n<th\nstyle=\"text-align:center\">block</th>\\r\n<th style=\"text-align:center\">text</th>\\r\n<th\nstyle=\"text-align:center\">example</th>\\r\n<th style=\"text-align:center\">result</th>\\r\n</tr>\\r\n</thead>\\r\n<tbody>\\r\n<tr>\\r\n<td\nstyle=\"text-align:center\">add</td>\\r\n<td style=\"text-align:center\"><img\nsrc=\"https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`+`</td>\\r\n<td style=\"text-align:center\">`result\n= 7 + 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>10</strong>\nin <em>result</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">subtract</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`-`</td>\\r\n<td style=\"text-align:center\">`value\n= 7 - 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>4</strong>\nin <em>value</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">multiply</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`*`</td>\\r\n<td style=\"text-align:center\">`score\n= 7 * 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>21</strong>\nin <em>score</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">divide</td>\\r\n<td\nstyle=\"text-align:center\"><img src=\"https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png\"\nalt=\"\"></td>\\r\n<td style=\"text-align:center\">`/`</td>\\r\n<td style=\"text-align:center\">`bonus\n= 7 / 3;`</td>\\r\n<td style=\"text-align:center\">stores <strong>2.3333</strong>\nin <em>bonus</em></td>\\r\n</tr>\\r\n<tr>\\r\n<td style=\"text-align:center\">parentheses</td>\\r\n<td\nstyle=\"text-align:center\">none</td>\\r\n<td style=\"text-align:center\">`()`</td>\\r\n<td\nstyle=\"text-align:center\">`avg = (99 + 85 + 93) / 3;`</td>\\r\n<td style=\"text-align:center\">stores\n<strong>92.3333</strong> in <em>avg</em></td>\\r\n</tr>\\r\n</tbody>\\r\n</table>\\r\n</details>\\r\n<br>\\r\n#\nMisconception Alert \\r\n\\r\n<img src=\"https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif\"\nstyle=\"float: right\">\\r\nWhen you have a statement like `result = 5 + 7;`\nrealize that this **does NOT store a mathematical expression in the variable.**  \\r\n\\r\nRather,\nwith this instruction you are asking to compute 5 + 7 and **THEN** store the\nanswer (a single number) in the variable.\\r\n\\r\n# Do This:\\r\n\\r\n**GOAL:**\nthe goal here is mostly to acquaint yourself with typing arithmetic expressions\n- the answers to the questions below are less important, and should be used\nas interesting things to investigate.  \\r\n\\r\nWe've given you some **starting\ncode** with 5 statements similar to ones in the table above.\\r\n* **Add `console.log`\nor `write` statements** to display the values of each of the variables.\\r\n*\nExperiment with arithmetic expressions, try to make really big and really\nsmall numbers.\\r\n\\r\n<hr>\\r\n\\r\n**Things to Try:**\\r\n* Using **multiplication:\nwhat's the biggest a number you can store** in a variable?\\r\n * How many\ndigits are in the biggest number before it starts using scientific notation?\\r\n*\nUsing **subtraction (or multiplication with negative numbers): what's the\nlowest number you store?** (low means a negative number with a lot of digits)\\r\n*\nUsing **parentheses** make a crazy-big arithmetic expression.  \\r\n * NOTE:\ncomposing arithmetic expressions is ***much* easier in text mode**, and is\nactually almost unreadable in block mode.  Try doing this in text mode.\\r\n\n\\r\n"
      U3 - image - Rotation Random Amount_markdown_instruction: "<img src=\"https://images.code.org/a7697b89e2c6ea67ae453410a1da6d47-image-1465572156435.gif\"\nalt=\"wheel spinning\" style=\"width:200px;float:right\" >\\r\n\\r\n# Random\nRotation\\r\n\\r\nUsing random numbers with rotation can add interesting animation\neffects. One effect you can use rotation for is shaking. **An object can look\nlike its shaking a little when you set its rotation to a small random number\nrepeatedly.**\\r\n\\r\n# Do This\\r\nYou are going to start creating a spinner\nwheel similar to one you might find at a carnival. You set up the wheel on\nthe last level so you are just adding the clicker at the top.\\r\n\\r\n* Create\na clicker sprite.\\r\n* Set the sprite to the provided clicker image.\\r\n*\nSet the rotation to a random number between -5 and 5.\\r\n* Test it out."
      U3 - image - wheel free play_markdown_instruction: "# Wheel Free Play\\r\n\\r\nHere\nis the spinning wheel you created so far. Continue to improve it.\\r\n\\r\n#\nDo This\\r\n\\r\n* Create a background scene for the wheel to go in.\\r\n* Resize\nthe wheel to fit the scene.\\r\n* Add at least 1 other sprite to the scene\nand give it some movement.\\r\n* Add your own ideas!"
      U3 - images - bee free play_markdown_instruction: "# Bee Free Play\\r\n\\r\nHere\nis the swarm of bees you have been working on. Continue to improve the animation!\\r\n\\r\n#\nDo This\\r\n* Add a background.\\r\n* Add a flower or hive sprite.\\r\n* Make\nthe flower or hive sprite move.\\r\n* Add more ideas of your own!"
      U3 - images - gears conditionals_markdown_instruction: "# Gears Conditionals\\r\n\\r\nThe\ngears are back! Lets change the direction of spinning based on some conditions!\\r\n\\r\n#\nDo This\\r\n\\r\n"
      U3 - images - gears free play_markdown_instruction: "# Gears Free Play\\r\n\\r\nHere\nare the spinning gears you have been working on. Continue to improve the animation!\\r\n\\r\n#\nDo This\\r\n\\r\n* Add more gears of different sizes.\\r\n* Make the gears line\nup and spin with the existing ones.\\r\n* Create a background for the gears.\\r\n*\nAdd more ideas of your own!"
      U3 AnimationsMulti Play Defender_markdown_instruction: "# Defend Your Cake!\\r\n\\r\nIn\nthis lesson you will be learning to make a \"Defender\" style game. Push the\nladybugs out of the way to prevent them from getting the cake. Once you lose\n3 candles the game is over!"
      U3 Digital Assistant Design_markdown_instruction: "# Getting Started with Your\nDigital Assistant\\r\n\\r\n<img src=\"https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png\"\nstyle=\"width:200px;float:right;\">\\r\nOver the course of the next few lessons,\nyou'll be __developing your own digital assistant__. To make your digital\nassistant more useful, it needs to be able to make __decisions__ based on\nquestions the user asks it, and respond intelligently.\\r\n\\r\nTo get started,\n__choose a topic__ you want your digital assistant to specialize in. It should\nbe something you are interested in and know a lot about. Examples: Country\nMusic, Sushi, College Football, Comedy Movies.\\r\n\\r\nYou'll next set up\nthe layout for your app. __The basic layout contains just two primary design\nelements:__ a text input and a text area.\\r\n\\r\n# Do This:\\r\n\\r\n- __Choose\na topic__ for your digital assistant to specialize in.\\r\n- __Create the layout__\nfor your app. Your digital assistant should have:\\r\n    - A name\\r\n    -\nA text input for the user to ask a question\\r\n    - A text area for the digital\nassistant to respond\\r\n    - The text area should have a greeting for the\nuser (e.g. Ask me a question about movies!)\\r\n"
      U3 Digital Assistant Set Text_markdown_instruction: "# Respond to Basic User\nInput\\r\n\\r\n<img src=\"https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif\"\nstyle=\"width:200px;float:right;\">\\r\nNow you can have your digital assistant\nrepeat what the user typed and add a __default response__. It's not the most\nintelligent response, but you'll build up to that over the next couple of\nlessons and it's important to build this program in pieces.  \\r\n\\r\n# Looking\nBack to Move Forward\\r\nYou're going to now add to your program without as\nmuch guidance as usual. Keep in mind that __this is very similar to programs\nyou've already built__, so look back at your work for a refresher.\\r\n- __Mad\nLibs:__ In Mad Libs you got a user's text when the 'Next' button was clicked,\nfilled in the outline with the responses, and displayed the completed Mad\nLib\\r\n- __Introducing the 'change' event:__ You just learned about the\n'change' event that triggers when the user hits 'enter' on a text input.\\r\n\\r\n#\nDo This:\\r\n- __Take the user's question and output it to the text area__\nwhen the 'enter' key is pressed in the text input\\r\n- The response should\nalso __include a default phrase__ such as _\"I don't know about that yet!\"_\\r\n-\n__Format the response with newline characters__ to separate the user's response\nfrom the assistant's response.: `\\n`\\r\n- The __text input should clear__\nafter the user hits 'enter'"
      U3 Digital Assistant Target - Mehal_markdown_instruction: "# Introduction to\nthe Digital Assistant\\r\n\\r\n__While digital assistants may seem like magic,\nthey are just elaborate computer programs that parse, or process, text__ looking\nfor combinations of words to make decisions about what to reply.\\r\n\\r\nOver\nthe next few lessons, __you're going to build up your own digital assistant\nthat responds \"intelligently\" to a user's question__, by making a decision\nabout what to reply based on the contents.\\r\n\\r\nYou'll now __explore a\ndemo digital assistant__, Movie Bot, that represents the kind of program that\nyou'll build up to. Try out some of the prompts below and also try your own.\nYou'll quickly find the limits of what this program can and can't do.\\r\n\\r\n#\nDo this\\r\n__Run Movie Bot. In the _'enter your question here'_ input, type\neach of the following prompts and hit 'enter' __\\r\n- 'help'\\r\n- 'What\nis the best PG comedy movie ever?'\\r\n- 'What PG comedy movie should I watch\nnext?'\\r\n- 'Could you please tell me the best romance movie?'\\r\n- 'I\nwaNT To WatCH a MovIE!!!'\\r\n- 'What is the capital of Kentucky?'\\r\n-\nPlay around! Ask more questions of Movie Bot and make a prediction about what\nlogic it's using to reply\\r\n"
      U3 Digital Assistant Target_markdown_instruction: "# Introduction to the Digital\nAssistant\\r\n\\r\n__While digital assistants may seem like magic, they are\njust elaborate computer programs that parse, or process, text__ looking for\ncombinations of words to make decisions about what to reply.\\r\n\\r\nOver the\nnext few lessons, __you're going to build up your own digital assistant that\nresponds \"intelligently\" to a user's question__, by making a decision about\nwhat to reply based on the contents.\\r\n\\r\nYou'll now __explore a demo digital\nassistant__, Movie Bot, that represents the kind of program that you'll build\nup to. Try out some of the prompts below and also try your own. You'll quickly\nfind the limits of what this program can and can't do.\\r\n\\r\n# Do This:\\r\n__Run\nMovie Bot. In the _'enter your question here'_ input, type each of the following\nprompts and hit 'enter.' __\\r\n- 'help'\\r\n- 'What is the best PG comedy\nmovie ever?'\\r\n- 'What PG comedy movie should I watch next?'\\r\n- 'Could\nyou please tell me the best romance movie?'\\r\n- 'I waNT To WatCH a MovIE!!!'\\r\n-\n'What is the capital of Kentucky?'\\r\n- Play around! Ask more questions\nof Movie Bot and make a prediction about what logic it's using to reply.\\r\n"
      U3 Digital_markdown_instruction: "Time to make your own specialized digital\nassistant! We'll be working with this a lot, so make it personalized and\nfun!\\r\n\\r\n### Instructions:\\r\n\\r\n* Choose a topic you want your digital\nassistant to specialize in. It should be something you are interested in and\nknow a lot about. Examples: Country Music, Sushi, College Football, Comedy\nMovies\\r\n\\r\n* Create your digital assistant\\r\n\\r\n\\t* Your digital assistant\nshould read the user's input and display it back to them along with some\ndefault response.\\r\n    \\r\n    * Anyone should be able to easily distinguish\nbetween the text that the user typed and the response from the digital assistant.\\r\n"
      'U3 L1 - 3: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 1 - 3: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U3 L4 - 6: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 4 - 6: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U3 L7 - 9: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 7 - 9: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      U3 Variables consolelog_markdown_instruction: "# Console.log\\r\n\\r\nThe **Debug\nConsole** is an area below your code. Your user will never see the debug console.\nIt is useful for **displaying information only you want to see, especially\nwhile debugging your program**.\\r\n\\r\nThe `console.log` command can be used\nwith **numbers, text, and the labels of a variable**, and will display the\ninformation provided on a new line in the Debug Console.\\r\n\\r\n```\\r\nvar\nsize = 100;\\r\nconsole.log(\"The value of size is\"); //displays this text\non a line\\r\nconsole.log(size);                   //displays the value of\nsize (100)\\r\n```\\r\n\\r\n# Do This\\r\n\\r\n* **Use the `console.log` command**\nto display the random value currently stored in `size`"
      U3 Variables flower example_markdown_instruction: "# Drawing with Variables\\r\n\\r\n**Get\nexcited because you're about to see your first variable used in a program!**\nYou won't need to write any new lines of code. Instead run the program and\nthen try changing the number assigned to the variable `petalSize` in line\n3. Be ready to discuss the changes you see and why you think they're happening.\\r\n\\r\n#\nDo This\\r\n\\r\n* Change the value assigned to `petalSize` and rerun the program.\\r\n*\n**Turn to a neighbor and discuss:**\\r\n\\t* What changes in your program when\nyou change this value?\\r\n    * Where in the code can you see the value of\n`petalSize` being used?"
      U3 Variables gray square_markdown_instruction: "# Drawing with Variables\\r\n\\r\n**Get\nexcited because you're about to see your first variable used in a program!**\nThis program uses a variable in three separate ways.\\r\n\\r\n* `var size;`\nCreates a new variable with the label size\\r\n* `size = 50;` Assigns the value\n50 to size\\r\n* `rect(200, 200, size, size);` Uses the value in size to draw\na rectangle with equal width and height.\\r\n\\r\n# Do This\\r\n\\r\n* Run the\nprogram once to see how it works\\r\n* **Change the value assigned to size\nin line 2** and rerun the program to see what changed."
      U3 Variables make a square_markdown_instruction: "# Drawing with Variables\\r\n\\r\nYou're\ngoing to start using **variables** in your programs. Variables are like **containers\nthat can store a single piece of information**. There are only three ways\nto use a variable:\\r\n\\r\n* **Create** a new variable\\r\n* **Assign a value**\nto a variable (Assign is just a fancy word for \"give\")\\r\n* **Use the value**\ncurrently assigned to a variable \\r\n\\r\nYou'll be learning how to use each\ntype of command, but first have a look at a program that makes use of all\nthree.\\r\n\\r\n# Do This\\r\n\\r\n* **Run the program once** to see how it works\\r\n*\n**Change the number in line 2** and rerun the program\\r\n* **Discuss / Reflect:**\n\\r\n\\t* What changed when you ran the program? Why do you think this happened?\\r\n\\t*\nOn each line do you think you are **creating**, **assigning**, or **using**\nthe variable?\\r\n    * Don't worry if you're confused, we're just exploring\nfor now."
      U3 Variables misconceptions 1_markdown_instruction: "# Test Your Predictions\\r\n\\r\nIf\nyou haven't already, **make a prediction for the output of each of the 4\nprograms**.\\r\n\\r\n# Do This\\r\n\\r\n* Put your predictions in the answer box\nbelow.\\r\n* Run this program and examine the results.\\r\n* Compare the results\nto your predictions.\\r\n\\r\n**With a partner talk through:**\\r\n\\r\n* Whether\nyour predictions matched the output\\r\n* Why you think you see the output\nyou do\\r\n* Any misconceptions you might need to avoid in the future."
      U3 Variables misconceptions 2_markdown_instruction: "What will Program 2 output?"
      U3 Variables misconceptions 3_markdown_instruction: "What will Program 3 output?"
      U3 Variables misconceptions 4_markdown_instruction: "What will Program 4 output?"
      U3 Variables misconceptions try it_markdown_instruction: "# Test Your Predictions\\r\n\\r\nIf\nyou haven't already, **make a prediction for the output of each of the 4\nprograms**.\\r\n\\r\n# Do This\\r\n\\r\n* Run this program and examine the results\\r\n*\nCompare the results to your predictions\\r\n\\r\n**With a partner talk through:**\\r\n*\nWhether your predictions matched the output\\r\n* Why you think you see the\noutput you do\\r\n* Any misconceptions you might need to avoid in the future."
      U3 Variables randomize your square_markdown_instruction: "# Multiple Assignments\\r\n\\r\nA\nvariable contains a single piece of information called its **value**. To use\nthat value in a program you need an easy way to tell your program which variable\nto use. Each variable has a **label** or name to let you refer to it. In your\nlast program, the variable had the label `size` and originally had a **value**\nof `10`. **Here's a summary of what each command does**\\r\n\\r\n![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32\nPM.png) **Create a new variable** with the label `size`\\r\n\\r\n![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43\nPM.png) **Assign the value `10`** to the variable `size`\\r\n\\r\n![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53\nPM.png) **Use the value in `size`** to determine the width and height of the\nrectangle.\\r\n\\r\n# Do This\\r\n\\r\nThis program is similar to the first but\nit assigns multiple values to `size` before drawing the rectangle.\\r\n\\r\n*\n**Run the program once** to see how it works\\r\n* **Change the values in each\nof the assignments commands ![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43\nPM.png) to something new**\\r\n* **Run the program again**. Which of your assignments\nis being used? How can you tell?"
      U3 Variables write_markdown_instruction: "# Displaying a Variable's Value\\r\n\\r\nOften\nyou want to see the exact value contained in a variable, especially if it\nwas randomly generated. Both `console.log` and `text` can be used with variables\nto specifically see their values. This is an important skill when **debugging**\nyour programs.\\r\n\\r\n# Do This\\r\n\\r\nThis program uses a variable `size`\nto draw a square with a randomly generated value.\\r\n\\r\n* **Use the `text`\ncommand** to display the value of `size` on the screen.\\r\n* **Use the `console.log`\ncommand** to display the value of `size` in the debug console."
      U3 full clicker demo_markdown_instruction: "# Clicker Game Demo\\r\n\\r\nTry\nout this clicker game! You'll be building your own version (with a theme\nyou choose) at the end of the lesson.\\r\n\\r\n# Things That Are Familiar\\r\nYou\nknow how to build many of the components of this game already:\\r\n- Multiple\nscreens.\\r\n- Buttons that change the screen when clicked.\\r\n- Image that\nmoves when you click it.\\r\n\\r\n# Things That Are New\\r\n- Keeping track of\nand displaying the __changing score__.\\r\n- Keeping track of and displaying\nthe __changing lives__.\\r\n- Changing to the __win screen if the score is\n25__.\\r\n- Changing to the __lose screen if the lives is 0__.\\r\n"
      U3 mehal's clone_markdown_instruction: "# Introduction to the Digital Assistant\\r\n\\r\n__While\ndigital assistants may seem like magic, they are just elaborate computer programs\nthat parse, or process, text__ looking for combinations of words to make decisions\nabout what to reply.\\r\n\\r\nOver the next few lessons, __you're going to\nbuild up your own digital assistant that responds \"intelligently\" to a user's\nquestion__, by making a decision about what to reply based on the contents.\\r\n\\r\nYou'll\nnow __explore a demo digital assistant__, Movie Bot, that represents the kind\nof program that you'll build up to. Try out some of the prompts below and\nalso try your own. You'll quickly find the limits of what this program can\nand can't do.\\r\n\\r\n# Do this\\r\n__Run Movie Bot. In the _'enter your question\nhere'_ input, type each of the following prompts and hit 'enter' __\\r\n-\n'help'\\r\n- 'What is the best PG comedy movie ever?'\\r\n- 'What PG comedy\nmovie should I watch next?'\\r\n- 'Could you please tell me the best romance\nmovie?'\\r\n- 'I waNT To WatCH a MovIE!!!'\\r\n- 'What is the capital of\nKentucky?'\\r\n- Play around! Ask more questions of Movie Bot and make a prediction\nabout what logic it's using to reply\\r\n"
      U3- Keys - Code Refactoring Exit Ticket_markdown_instruction: "# Free Response:\nWhy Refactor?\n\nWhy is refactoring your code important?\n"
      U3- Variables - Assign Random For Turtle Draw_markdown_instruction: "# Putting\nrandom numbers into variables\\r\nWe can also store things in variables besides\nhard-coded numbers. The whole point of variables is to use them as placeholders\nfor values that might be different each time you run the program.\\r\n\\r\nLet's\nassign a random nubmer to a variable.  Sometimes you want to generate a randomNumber\nbut then use that same number repeatedly - so you need to store the number\nthat was generated and use it several times in the code.\\r\n\\r\nWe can assign\na variable the result of an expression, or in the case where a function returns\na value, like randomNUmber.  For example:\\r\n\\r\nvar randSize = randomNumber(5,30);\\r\n\\r\n"
      U3- Variables - Changing the Value_markdown_instruction: "# Variable Reassignment\\r\n\\r\nOur\nold friend Turtle is back! Turtle is going to allow us to easily play with\nsome variables. \\r\n\\r\nIn the programs we have seen so far the value of the\nvariable stays the same through the whole program. You don't have to keep\na variable the same value for the whole program. We can change its value as\nthe program runs.\\r\n\\r\n# Do This\\r\n\\r\n* ** Run the code** and see what\nhappens.\\r\n\\r\n* ** Update the value of 'turnAmount' before each moveForward**\nso the turtle turns a different amount each time."
      U3- Variables - Create And Assign_markdown_instruction: "# Create and Assign\nAt Once\\r\n\\r\nIt's so common to want to create a variable and give it an\ninitial value, that JavaScript has a shortcut that lets you create and assign\nwith one line of code like this:\\r\n\\r\n<img src=\"https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png\"\nstyle=\"width:120px\">\\r\n\\r\n\\r\nYou'll also see a new block in the toolbox\nfor this (see right).<img src=\"https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif\"\nstyle=\"float: right; width: 350px\">\\r\n\\r\n# Do This:\\r\nWe'll just quickly\npractice using this form of variable creation and assignment.  The code you\nwrite will achieve the same thing as the previous level in fewer lines of\ncode. \\r\n\\r\n* **Create a variable called `lives`** and **assign it the value\n3** using the new one-line version of this command. (See animation at right.)\\r\n\\r\n*\n**Add** `console.log` statements to display the value of `lives` just as before.  \\r\n\\r\n*\nThe output in the console should (again) look like this:\\r\n \\r\n <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\"\nstyle=\"border: solid 1px gray\">\\r\n\\r\n"
      U3- Variables - Text Mode_markdown_instruction: "# Give Text Mode a Try!\\r\nThe\nblock-based mode of programming is useful for getting code into your app fast\nand error free.  But sometimes those little tiny edits are a pain. **Use text\nmode instead!**  Text mode is designed to make typing code fast and easy,\nand it also gives a lot of help to make your code error free. \\r\n\\r\nLet's\nre-create these variables again, but explore some features of text mode this\ntime.\\r\n\\r\n# Try Each of These 3 Things\\r\nWe've given you the first two\nlines of code in a program. \\r\nExpand each box below and try what's suggested\n- each builds on the previous one, so you might want to go in order.\\r\n\\r\n<details>\\r\n<summary>1.\n**Switch to text mode and try to type.** [click to expand]</summary>\\r\n \\r\n\nSwitch to text mode and **type out a `console.log` statement** to display\nthe value of `score`.<br>\\r\n <img src=\"https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif\"\nstyle=\"width: 500px\">\\r\n</details><br>\\r\n\\r\n<details>\\r\n<summary>2.\n**Drag blocks into text mode.** [click to expand]</summary>\\r\n\\r\n If you\ndon't want to type *everything* you can drag a block from the toolbox into\ntext mode and it will show you the text version of it. **Add code to create\nthe `lives` variable and a `console.log` message**.<br>\\r\n \\r\n <img src=\"https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif\"\nstyle=\"width: 500px\">\\r\n\\r\n</details><br>\\r\n\\r\n<details>\\r\n<summary>3.\n**Check out code completion.** [click to expand]\\r\n</summary>\\r\n When you\ntype commands a tool tip pops up that tries to guess what you're trying to\ntype. If you see what you want in the box, **highlight it** (you can use arrow\nkeys) and then **hit the tab key**. It will auto-complete the code for you!<br>\\r\n\n\\r\n <img src=\"https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif\"\nstyle=\"width: 500px\">\\r\n </details>"
      U3-AP-Practice-Choose-The-Abstraction_markdown_instruction: "# AP Practice\n- Identify the Abstraction\\r\n\\r\nOne component of the **AP Create Performance\nTask** is selecting an abstraction that you developed.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>3. Program Code</b>\\r\n<ul>\\r\n<li>Mark\nwith a <b>rectangle</b> the segment of program code that represents an abstraction\nyou developed.</li>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's the scoring\nguide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img src=\"https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59\nPM.png\">\\r\n</div>\\r\n\\r\n# Choose the Student-Created Abstraction\\r\n\\r\nThe\nprogram code below is from a program a student developed. \\r\n\\r\n![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48\nPM.png)\\r\n\\r\n**Write which of the rectangles (A, B, C, or D) is placed around\na student-developed abstraction.**\\r\n\\r\n**Then explain your answer using\nthe criteria in the scoring guide.**"
      U3-AP-Practice-FR-design-process_markdown_instruction: "# AP Practice - Performance\nTask Response\\r\n\\r\nTop-down design is design process and strategy for breaking\ndown complex things.  The AP Create Peformance task asks you to write about\nyour development process when writing code.  \\r\n\\r\nLet's take a minute\nto understand this writing prompt and how it is scored. Here is the actual\nwriting prompt **2b** from the AP Create Task guidelines:\\r\n\\r\n<div style=\"width:\n70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3;\nbackground-color: #EEEEEE; padding: 10px\">\\r\n\\r\n<b>2b.</b> Describe the\nincremental and iterative development process of your program, focusing on\ntwo distinct points in that process. Describe the difficulties and/or opportunities\nyou encountered and how they were resolved or incorporated. In your description\nclearly indicate whether the development described was collaborative or independent.\nAt least one of these points must refer to independent program development.\n<i>(Must not exceed 200 words)</i>\\r\n</div>\\r\n<br>\\r\nYour response to this\nprompt can get up to 2 points, and is scored looking at two major things:\\r\n\\r\n1.\n(1 point) Do you describe a real *iterative* process for writing the *whole*\nprogram - \"Incremental and iterative\" means that you continuously improved\nyour program based on testing, reflection, or feedback from a partner.\\r\n\\r\n2.\n(1 point) Do you actually describe *two* points in time while writing your\ncode, what the specific issue was, and how you got past it by *reflecting*\nor *incorporating feedback* from a collaborative partner.\\r\n\\r\nHere are\nthe actual scoring guidelines:\\r\n\\r\n![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\\r\n\\r\n##\nNow you try it\\r\n\\r\nTry to write a response to this AP Prompt thinking about\neither how you developed the idea for the snowflake drawing program, or how\nyou resolved to make the 3x3 grid program.  You might have to use a little\nbit of imagination to assume that it's part of a larger program you created\nyourself.  The point is to *practice writing* about your development process.\\r\n\\r\nNOTE:\nWriting a response like this will take some time to think about and compose."
      U3-AP-Practice-FR-manage-complexity_markdown_instruction: "# AP Practice -\nPerformance Task Response\\r\n\\r\nThe AP Create Performance task asks you to\nwrite about an abstraction that you developed and wrote into your code. Most\nof the time that means identifying a function or procedure you wrote to help\n\"manage complexity\" in your program.\\r\n\\r\nHere is the actual prompt from\nthe Create Performance Task:\\r\n\\r\n<div style=\"width: 70%; margin: auto;\nbackground-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2d.</b>\nCapture and paste a program code segment that contains an abstraction you\ndeveloped individually on your own (marked with a <b>rectangle</b>). This\nabstraction must integrate mathematical and logical concepts. Explain how\nyour abstraction helped manage the complexity of your program.\\r\n<br>\\r\n<i>(Must\nnot exceed 200 words)</i>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\nBelow is a segment\nof code from an \"under the sea\" program with a rectangle drawn around a\nportion of the code identifying an abstraction. Imagine that you wrote this\nand are composing an AP response about how this abstraction manages complexity.  (Note:\nignore the requirement that the abstraction integrate \"mathematical and logical\nconcepts\" for this practice response.  Just write about managing complexity).\\r\n\\r\n![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\\r\n\\r\nExplain\nhow the abstraction marked with the rectangle in the code above helps manage\ncomplexity of this program."
      U3-AP-Practice-FR-score-abstraction-response_markdown_instruction: "# AP Practice\n- Scoring a PT Response\\r\n\\r\nIn this scenario imagine that **you are scoring\nan AP Performance Task response.**  Below we show the student's submitted\ncode as well as their written response for writing prompt **2d**.\\r\n\\r\nAs\na reminder, here is that prompt:\\r\n\\r\n<div style=\"width: 80%; margin: auto;\nbackground-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2d.</b>\nCapture and paste a program code segment that contains an abstraction you\ndeveloped individually on your own (marked with a <b>rectangle</b>). The abstraction\nmust integrate mathematical and logical concepts. Explain how your abstraction\nhelped manage the complexity of your program. \\r\n<br>\\r\n<i>(Must not exceed\n200 words)</i>\\r\n</div>\\r\n<br>\\r\n\\r\nAnd here is the student written response\nthat goes with the code shown at right:\\r\n\\r\n<div style=\"width: 80%; margin:\nauto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size:\n12pt; line-height: 18pt; display: inline-block\">\\r\n\\r\n<img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\"\nstyle=\"float: right; margin-right: 40px\">\\r\n<strong>Student response:</strong><br>\\r\n2d).\\r\nThe\nabstraction I have identified draws a heart in the program.  The whole program\ndraws a picture with turtle graphics that says \"I [heart] CS\" where the\n[heart] is actually a drawing of a heart shape. Because I am using the parameterized\nversions of these turtle functions it helps manage the complexity of the code.\nWithout the parameters the drawing is achieve-able but would require many\nmany more lines of code.  For example: the command to <code>arcRight(220,\n30)</code>  - which moves the turtle in a 220-degree arc with a 30-pixel radius\n- is possible to do with a long series of repeated <code>moveForward</code>,\nand <code>turnRight</code> commands, possibly hundreds. By using the <code>arcRight</code>\ncommand I encapsulate in one line what the code should be doing rather than\nhaving to reason about hundreds of lines of code.\\r\n</div>\\r\n<div style=\"clear:\nboth\"></div>\\r\n<br>\\r\nUse the scoring guide (shown below) to determine\nif the student should be awarded the point for each of the two criteria about\nabstractions (row 7 and 8)\\r\n\\r\n![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\\r\n\\r\n#\nYou score it\\r\nEach row of the scoring guide one is worth one point, so response\n2d is worth up to 2 points total.  Should the student get 0, 1 or 2 points\ntotal?\\r\n\\r\nBelow explain how you would score it, and why you would or wouldn't\naward the point for each row. Cite the specific criteria in the scoring guide\nto justify your response."
      U3-Design Mode-ID and Event Handler_markdown_instruction: "# Activate Your\nButton\\r\nOn the last level you added a button using Design Mode. If you click\nit, nothing happens. Let's make the button work. \\r\nYour button has been\nbrought over to this level.  \\r\n\\r\n**Goal:** Add code using Design Mode\nto make the button respond to a click.\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif\"  style=\"width:\n250px; float: right\">\\r\n\\r\n* **Change ID of button** from “button1” to\n“redButton”.\\r\n\\r\n* **Insert `onEvent` from Design Mode** by clicking *Insert\nand show code* under the **Events Tab**.\\r\n\\r\n* Run the program and **look\nfor the output in the *Debug Console* **below the workspace instead of the\napp window. We will discuss the *Debug Console* on the next level."
      U3-Design Mode-ID_markdown_instruction: "# Baker note: we might not need this\nlevel, or the message about IDs being important might be able to shift to\nanother level (stays here for now...pending).\\r\n\\r\n# IDs Are Still Important\\r\n\\r\n\\r\n#\nDo This\\r\n\\r\nTry updating the ID name and then update the code to match.\n\\r\n\\r\n**Switch to Design Mode** and **edit the ID** to be more descriptive.\nYou can edit it from either the Properties tab or the Events tab.\\r\n\\r\n**Switch\nto Code Mode** and check out the **dropdown ID menu**. Your new ID should\nbe in the dropdown list!\\r\n\\r\n**Test it out** to make sure it works.\\r\n<img\nsrc=\"https://images.code.org/43e3536af5af3ff17b0972a1c6c2a300-image-1444333589342.gif\"\nstyle=\"width: 500px;\">\\r\n"
      U3-Design Mode-Image_markdown_instruction: "# Adding Images\\r\n\\r\nTo practice\nusing images in Design Mode we are going to **recreate the \"Chaser Game\"**\nfrom the last lesson.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an Image element**\n![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14\nAM.png)\\r\n* **Choose your image** ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42\nAM.png)\\r\n\\t* **URLs** can be added directly into the \"picture\" field.  \\r\n\\t*\n**Upload images** by clicking \"Choose\".\\r\n\\t* **Note:** You can always\nsee all the files you've uploaded by clicking the gear at the top of the\ntoolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10\nAM.png)\\r\n* **Insert an event handler** for the image.\\r\n* From here you\ncan **work in Code Mode** to complete the remainder of your application. Recall\nthat in the \"Chaser Game\" you just need an image that runs away from the\nmouse.\\r\n* If you have time **use Design Mode** to quickly improve some of\nthe visual components of your game."
      U313 Two Buttons with Ids_markdown_instruction: "# Make a Prediction - Learning\nto Code Better, Faster\\r\nResearch has shown that when you encounter a new\npiece of code you learn faster by simply **making a prediction about what\nwill happen before you run the program**. It's not actually important if\nyour prediction is correct, but the act of predicting allows you to construct\na stronger mental model for how code works and then test your understanding\nwhen you run the code.\\r\n\\r\nGood programmers do this all the time. **They\ndon't expect their code is correct the first time they write it.** Instead\nthey get in the habit of running their code, checking their assumptions, and\nmaking changes as needed. Programming isn't a fixed set of steps. It's a\ncreative and continuous cycle of writing, testing, and improving code.\\r\n\\r\n#\nPredict - Observe - Reflect\\r\n<img src=\"https://images.code.org/5fc24f3f3e1ceae4bb196f1005d9e866-image-1444083405061.png\"\nalign=right>This program creates a button and **two event handlers** which\nlisten for a click on that button. \\r\n\\r\n**Predict:** What will happen when\nthe \"Forward\" button is clicked? Force yourself to make a prediction about\nwhat the turtle will do! **\"I don't know\" is not a prediction**. Think\nabout the options and talk about it with a classmate: Will it..\\r\n* move\nforward?\\r\n* turn left?\\r\n* turn left *and* move forward?\\r\n* do nothing?\\r\n*\nmove forward *and* turn left?\\r\n* cause an error?\\r\n* something else? \\r\n\\r\n**Observe:**\nOnce you've made a prediction, close these instructions and **run the program**\nto observe what happens.\\r\n\\r\n**Reflect:** Was your prediction correct?\nIf not what about your mental model might need to change? Talk about it with\na classmate and experiment with the code to make sure you understand what\nis happening.\\r\n"
      U313 drag Two Buttons_markdown_instruction: "# Buttons and Unique IDs\\r\nYou\nmay have noticed that the button command has two parameters: `button(id, text)`.  The\n`text` is the text that actually shows up on the button display, and the `id`\n(we'll typically write **ID**) is a **unique identifier** for that element\nin the app.\\r\n\\r\nEach element that appears in the app must have a **unique\nID**. In fact, if you try to run a program that has two buttons with same\nID you will get a warning message in the console. Watch:\\r\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\"\nstyle=\"border: solid 1px black; width:500px\">\\r\n\\r\nNotice that even though\nthe text on the buttons was different, the IDs were the same, which caused\nthe error message to show up. To get rid of that error message you will have\nto change the ID of the button from the default `id` to something else.\\r\n\\r\n**Error\nmessages happen to everyone and they are helpful!**: getting an error or warning\nmessage when you run your program is *not a big deal*. Programmers actually\nrely on error messages to tell them where and how to fix their code.\\r\nSometimes\nerror messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers\nto an id (id) which already exists.` But a warning like this contains helpful\ninformation and clues such as the line the error occured on, or some word\nor command it didn't recognize. \\r\n\\r\n# Do This:\\r\nThe goal here is to\nexperience an error message in a program, study it, and fix it.\\r\n* **Drag**\ntwo buttons into the workspace (same as shown above) with the default IDs.\\r\n*\n**Run** the program to see the warning message in the console.\\r\n* **Read**\nthe warning message to see what it says.\\r\n* **Change** the IDs of the buttons\nto make them unique. An ID must be specified in quotes. You can use double-quotes:\n`\"myId\"`, or single quotes: `'myId'`\\r\n* **Re-run the program** to make\nsure you don't get the error.\\r\n\\r\nOnce you've got two buttons on the\nscreen with different IDs and the program can run without generating the warning,\nmove on to the next level.\\r\n"
      U313 eventsDetails_markdown_instruction: "# Buttons and Unique Ids\\r\nYou may\nhave noticed that the button command has two parameters: `button(id, text)`.  The\n'text' is the text that actually shows up on the button display, and the\n'id' (which is shorthand for I.D.) is a **unique identifier** for that element\nin the app.\\r\n\\r\nEach element that appears in the app must have a **unique\nid**. In fact, if you try to run a program that has two buttons with same\nid you will get a warning message in the console. Watch:\\r\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\"\nstyle=\"border: solid 1px black; width:500px\">\\r\n\\r\nNotice that even though\nthe text on the buttons was different, the ids were the same, which caused\nthe error message to show up. To get rid of that error message you will have\nto change the default button ID of `\"id\"`.\\r\n\\r\n# Do This\\r\nThe only\ngoal here is to experience this kind of warning message. It's not a big deal\nif it happens to you. It's a very common thing to happen and the computer\nis trying to tell you how to fix your code.\\r\n\\r\n* **Drag** two buttons\ninto the workspace (same as shown above)\\r\n* **Run** the program with the\ndefault values to see the warning message in the console.\\r\n* **Read** the\nwarning message to see what it says.\\r\n* **Change** the ids of the buttons\nto make them unique, and re-run the program to make sure you don't get the\nerror.\\r\n* **NOTE:** an id must be specified in quotes. You can use double-quotes:\n`\"myId\"`, or single quotes: `'myId'` \\r\n\\r\n\\r\n"
      U3L01 Assessment1_markdown_instruction: "Consider the algorithm you designed\nfor today’s activity. Identify two instances where there may be multiple ways\nto interpret your instructions and suggest improvements that could be made\nto improve their clarity.\n\n"
      U3L01 Assessment3_markdown_instruction: "Describe the features of a programming\nlanguage that make it different from the language you typically use in everyday\nlife. Explain why a programming language must be created in this way.\n\n"
      U3L01 Free Response Getting Started_markdown_instruction: "Complete the \"thinking\"\nportion of a Think-Pair-Share activity here. \n\nPlay the part of a \"lazy\nworker.\" \n\n* What task do you dislike doing that you can imagine a computer\nprogram could take over for you? \n* List a few important steps that a computer\nprogram would have to complete. \n* Do you think this would be an easy or\nhard task to program? Why?\n"
      U3L01 Free Response Wrap Up_markdown_instruction: "* Describe the instructions\nyou followed in the block sculpture algorithm that were the most helpful?\n*\nWhat do you think is the hardest part of writing a useful algorithm? \n* If\nyou were to repeat this activity, how would you improve the algorithm you\nwrote? \n\n\n"
      U3L02 Assessment_markdown_instruction: "This lesson introduced the notion of\n\"efficiency\" in programming, and that it might mean different things at\ndifferent times.  Think of an example *outside* of computer science in which\nyou have heard the term “efficiency” and compare it to the ways we talked\nabout efficiency in programming.  \n\nIn what ways is the meaning of \"efficiency\"\nthe same? In what ways is it different?\n"
      U3L02 Free Response Getting Started_markdown_instruction: "Today we solved\na series of problems with a limited set of commands (only 4). Give at least\none reason why it's useful to learn how to solve and program solutions with\na limited set of commands.  \n"
      U3L02 Free Response Wrap Up_markdown_instruction: "Summarize your experiences\nwith this first App Lab lesson by answering the following questions:\n\n*\nWhat surprised you about programming with such a small set of basic commands?\n*\nWere you able to be creative with such a limited set of tools?\n* What was\nmost frustrating about this activity? If you could add one additional simple\ncommand, what would it be and why?\n\n\n"
      U3L03 - draw rect function_markdown_instruction: "This is your code from the\nprevious level.  Did you know that you can write functions that call your\nown functions?\\r\n\\r\nTake the code that draws the rectangle and move into\na new function called `drawRectangle()`. The first line of your program should\nbe a single call to `drawRectangle()`. The rest of the code should just be\nfunction definitions. \\r\n\\r\nNOTE: your program will still do the same thing.  We\nare just changing the way it is written to demonstrate that you can use functions\nyou've already written as building blocks in new functions.\\r\n\\r\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)"
      U3L03 - draw step_markdown_instruction: "We are going to walk you through a\nprocess that shows you the benefit of thinking about programming tasks in\nterms of writing functions.\\r\n\\r\n* Over the next 3 levels we are going to\nwrite a program that draws the figure shown at right which sort of looks like\na jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\"\nalign='right'>\\r\n\\r\n* If you look at this image you might recognize elements\nthat repeat: this is a 4-sided figure, and each side is made up of some zig-zag\nsteps.\\r\n\\r\n* We're going to break the programming down into useable parts\nand then use those parts as building blocks to make this more complex drawing.\\r\n\\r\n*\nFirst let's **define** a function that *draws just one of these zig-zag steps.*  We've\nstarted you out with a definition of `right()` that you can use...\\r\n\\r\n#\nDo This:\\r\n\\r\n**Define** a function named `function drawStep()` which makes\nthe turtle move forward and left as shown. \\r\n\\r\n**Note**: at the end the\nturtle should be facing the same direction it started.\\r\n\\r\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)"
      U3L03 Define and use turnAround_markdown_instruction: "# Do This:\\r\n**Define**\na function called `turnAround` which turns the turtle around. Once you've\ndefined the function **call** it to make sure it works as you expect and then\nmove the turtle forward, as shown below. \\r\n\\r\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\\r\n\\r\n**Remember**\ntypically, you call a function in lines of code *above* the function definition\n- this might make you  feel like you are working in reverse, since you first\nwrite the code to define the function and *then* add a line to call it.  Here\nis the `moveTwice` example from the video. You should do something similar\nfor turnAround:\\r\n\\r\n![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)"
      U3L03 Draw a T using turnAround_markdown_instruction: "# Do This:\\r\nGet some\nmore practice **calling** a function by using `turnAround()` along with your\nold friend the `moveForward()` function to create a plus sign that is centered\nat the turtle's first position, as shown below. Even though you just wrote\nthis function, we've already **defined** `turnAround()` for you. Remember,\nadd lines of code that call the function *above* the definition.\\r\n\\r\n*NOTE:\nthe turtle should end where it started, which is also the middle of the plus\nsign, as shown below. Each of the four segments of the plus sign are one `moveForward()`\nlong.* \\r\n\\r\n![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14\nAM.png)"
      U3L03 Free Response Getting Started_markdown_instruction: "In the previous\nlesson we created simple turtle drawings using only four commands. At some\npoint you probably wished that more commands were available to you. Describe\na command you wanted to be able to use and explain why you wanted to use it.\nIf you have time try to brainstorm additional commands as well.\n"
      U3L03 Free Response Reflection_markdown_instruction: "Respond to your teacher's\nprompt in the space below.\n"
      U3L03 Free Response Wrap Up_markdown_instruction: "In your own words, explain\nat least one reason why programming languages have functions.  Include an\nexample of something you did in this lesson that demonstrates the reason you\ndescribe.\n\n"
      U3L03 Three Steps_markdown_instruction: "# Do This:\\r\n<img src=\"https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png\"\nalign=right width=200>\\r\nWe are going to continue to build up towards a diamond\nby **defining** a function that draws one side of the diamond.\\r\nIf you look\nat the whole image we are trying to draw, you'll notice that each of 4 sides\nis comprised of 3 calls to `drawStep()`, plus a few extra moves (shown in\norange).\\r\n\\r\nRight now we'll write the code for one of those sides. So...\\r\n\\r\n**Define**\na new function named `drawSide()` which makes three calls in a row to `drawStep()`\nfollowed by a `moveForward()` and `right()`.  \\r\n\\r\n**Replace** the original\nfunction call to `drawStep()` with a call to your newly defined `drawSide()`\nfunction. \\r\n\\r\nThe diagrams below show the intended actions.\\r\n<table>\\r\n<tr>\\r\n<td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png)\n</td>\\r\n<td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif)\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n"
      U3L03 define turnRight and draw a rectangle_markdown_instruction: "# Draw a\nrectangle with right\\r\n\\r\nAs you know, in order to turn right we have to\ncall `turnLeft()` three times.  We've started you out with a stub that **defines**\na function called `right()`.  Start by adding code inside the function definition\nthat will turn the turtle to the right (by turning left three times) when\ncalled. \\r\n\\r\nThen **use** this function in some code to draw a rectangle,\nas shown below.  Make sure the turtle ends facing the same direction and in\nthe same location it started. *Note that the rectangle below is 2 moveForwards\ntall and 1 moveForward wide*\\r\n\\r\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\\r\n\\r\n**Note**:\nYour program will still do the same thing. We are just changing the way it\nis written to demonstrate that you can use functions you've already written\nas building blocks in new functions."
      U3L03 draw diamond_markdown_instruction: "# Do This:\\r\nWe're finally ready\nto make our diamond! **Define** a function named `function drawDiamond()`\nthat **calls** `drawSide()` multiple times in order to complete the drawing.\nYour final solution should be triggered by **a single call** to `drawDiamond()`.\n\\r\n\\r\n<table>\\r\n<tr>\\r\n<td><img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png\"\nwidth=200></td>\\r\n<td><img src=\"https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif\"\nwidth=200></td>\\r\n</tr>\\r\n</table>\\r\n\\r\n<hr>\\r\n\\r\n**Notes**:\\r\n\\r\nIn\nthe end you will have 4 functions defined:\\r\n\\r\n* drawDiamond()\\r\n* drawSide()\\r\n*\ndrawStep()\\r\n* right()\\r\n\\r\nThese 4 functions work sort of like a hierarchy\nof top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`,\nwhich makes calls to `drawStep()` and `right()`.\\r\n\\r\n\\r\n"
      U3L04 - 3 by 3 with functions_markdown_instruction: "# Do This:\\r\n\\r\nWe're\ngoing to revisit a familiar problem, **drawing the 3x3 square as efficiently\nas possible**. The only difference is that this time you are armed with the\nability to create **layers of functions** to help you design more elegant\nand efficient solutions. Use the techniques you've learned for **breaking\ndown problems into layers of functions** in order to improve upon your previous\nsolution.\\r\n\\r\n![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18\nPM.png)"
      U3L04 - six by six lines_markdown_instruction: "Code a solution to the highway\nlines problem.  Your solution should use functions to reduce clutter and improve\nreadability of your solution.\\r\n\\r\n![](https://images.code.org/23a714face9925e1eb8dfe3c133eb22d-image-1441815998620.png)"
      U3L04 - snowflake_markdown_instruction: "# Do This:\\r\n\\r\nYou should have\nalready worked with a partner to break down the design below into its multiple\nlayers of functions. Now you'll have an opportunity to program your solution.\nHere are a few things to keep in mind:\\r\n\\r\n* Identify useful patterns that\ncan be reused and give them **their own functions**.\\r\n* Remember: The functions\nyou design **can call one another**. This is how you create layers of abstraction.\\r\n*\nFunctions should be given names that are **descriptive and meaningful**.\\r\n*\nYour program should be kicked off with a single call to a function that makes\ncalls to subsequent functions.\\r\n\\r\n\\r\n![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33\nPM.png)"
      U3L04 Assessment1_markdown_instruction: "Consider the figure below.  Use top-down\nthinking to design a solution to the problem.  In the space provided write\na list of **just the names** of the functions that you would write in a program\nthat draws this figure.  (Assume that the long line segments are 6 turtle\nmoves long).\n\n![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\n\n"
      U3L04 Free Response Getting Started_markdown_instruction: "Define the term\n\"abstraction.\" \n\nWhy is abstraction an important concept in computer science?\n"
      U3L04 Free Response Reflection_markdown_instruction: "Respond to your teacher's\nprompt below.\n"
      U3L04 Free Response Wrap Up_markdown_instruction: "In the Create Performance\nTask, you will be asked to identify an abstraction in your program and explain\nhow it helps manage the complexity of the program. Functions are a form of\nabstraction. Pick a function you wrote in your solution to the 3x3 square\nproblem and explain how it helps manage the complexity of your program.\n"
      U3L05 Assessment2_markdown_instruction: "Describe the trade-offs of writing\nhighly efficient code. Give an example.\n"
      U3L05 Assessment3_markdown_instruction: "How can functions be used to make\ncode more readable?\n"
      U3L05 Assessment4_markdown_instruction: "How can functions be used to make\ncode more efficient in effort, space, or time?\n"
      U3L05 Free Response Getting Started_markdown_instruction: "Efficiency means\ndifferent things depending upon the activity. What does it mean to be efficient\nin these activities?\n\n* Doing homework\n* Packing a bag \n* Getting from\none place to another \n* Doing household chores \n* Driving a car \n* Managing\na budget \n\n\n"
      U3L05 Free Response Reflection_markdown_instruction: "In less than 50 words,\nsummarize what efficiency means in programming.\n"
      U3L06 - moveForwardwithParams_markdown_instruction: "# A New Way to Move\\r\nThe\n`moveForward()` turtle command that we've used so far moves the turtle the\nsame amount every time (25 pixels in fact). Similarly, `turnLeft()` turns\nthe turtle to the left exactly 90 degrees. Today we are going to see how some\nfunctions can **accept input**, such as a number, to more exactly control\nbehavior. For example, you can write `moveForward(103)` to move the turtle\nexactly 103 pixels if you like.\\r\n\\r\n# Do This:\\r\n\\r\n**How far is it to\nthe top edge of the screen?**\\r\n\\r\nRun the program to see the new version\nof `moveForward()` in action. Then **changing only the number supplied to\n`moveForward()`**, move the turtle to the top edge of the screen. Experiment\nto find out the distance in pixels between where the turtle starts and the\ntop edge of the screen.\\r\n\\r\nOnce you've found it, compare with a neighbor\nto see that you're seeing the same thing and click **Finish** to move on.  \\r\n\\r\n**Note:**\nThere might be slight differences depending on whether you get the turtle\nto just touch the edge, or go off the screen entirely."
      U3L06 Assessment_markdown_instruction: "It is said that *functions with parameters\ngeneralize the behavior of a more specific command and allow programmers to\nuse functions instead of duplicated code.* Explain what this means to you\nusing the difference between turnLeft() and turnLeft(angle) as an example.\n\n"
      U3L06 Challenge 1 triangle_markdown_instruction: "# Terminology: *Parameter*\\r\n\\r\nWhen\nyou have a command like: `moveForward(100)` we say that the `moveForward()`\ncommand *accepts a **parameter***.  And 100 is the value *given* or *supplied*\nto `moveForward()`'s **parameter**.  Since this value can change, you will\noften see a written description for the command that looks something like\n**`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s\n**parameter** should be the number of pixels you want it move.\\r\n\\r\nThe\ngood old `moveForward()` command still exists.  In fact it's the **same command**\nas `moveForward(pixels)`. The \"parameter-less\" version of `moveForward()`\nsimply supplies a **default value** to the parameter.  We might also say that\nthe `moveForward()` command has an **optional parameter** since you could\ncall either `moveForward()` or `moveForward(50)` and it doesn't cause an\nerror when you run the program.\\r\n\\r\nNOTE: you can write your own functions\nthat accept parameters, too!  But we'll get to that in later lessons.\\r\n\\r\n#\nNew Commands!\\r\n\\r\nCheck it out.  The turtle toolbox now contains the *parameterized*\nversions of the turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  Notice\nthat `penUp()` and `penDown()` don't have parameters.  \\r\n\\r\n# Do This:\\r\n\\r\nUse\nthe parameterized versions of the commands to draw a triangle with sides that\nare 100 pixels long.\\r\n\\r\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\"\nwidth=150>"
      U3L06 Challenge 2 purple square_markdown_instruction: "# Documentation\\r\nAs\nwe move forward you are going to see more and more (and more!) commands added\nto the toolbox.  What happens if you see a command and don't understand it,\nor you forget how it works?  Don't worry, this happens to professional programmers\nall the time! No one actually memorizes long lists of commands.  Most programming\nenvironments have ways to quickly look up documentation about the commands\nof the language you're using.  **Good news: App Lab has documentation too!**\\r\n\\r\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\\r\n\\r\nWhen\nyou **hover your mouse over a command** in the block palette a bubble pops\nup with a quick reminder of what a function does, and what its parameters\nare. If you click \"See examples\", you will be taken to more detailed documentation\nof the command which includes **code examples** that you can even copy and\npaste.\\r\n\\r\n# More New Commands: Color and Width\\r\n\\r\nTwo powerful new\ncommands have been added to the toolbox, `penColor()` and `penWidth()`. \\r\n\\r\n**Read\nthe documentation:** Read through the documentation for `penColor()` and `penWidth()`\nwhich let you set the color and size of the pen your turtle uses to draw.\nThe documentation for `penColor()` has a lot in it!  For now just look at\nthe **named colors**, things like \"red\", \"green\", etc.  Don't worry,\nyou'll get a lot of opportunities to practice with colors in a variety of\nways.  We're just getting started!\\r\n\\r\n# Do This:\\r\n\\r\n**Draw the square:**\nUse pen color and width functions to draw the thick blue square shown below.  The\nsize of the square doesn't matter.\\r\n\\r\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\"\nstyle=\"height: 250px\">\\r\n"
      U3L06 Challenge 3 fill pink_markdown_instruction: "# Drawing with Dots\\r\n\\r\nWe've\nadded a new command called `dot()`.  \\r\n\\r\n**Read the documentation** for\nthe `dot()` command.\\r\n\\r\n**Make a \"snowman\"**\\r\n\\r\n1. Set the pen color\nto some new color (we made ours pink)\\r\n\\t* Note: even if you just want the\ndefault dot color - black - explicitly set the color to black here.\\r\n\\r\n2.\nUsing that color, make a dot so big that it fills the screen.\\r\n\\r\n3. In\na different color, make 3 dots in a row, each one smaller than the next. (We\nmade our dots white to look like a snowman)\\r\n\\r\nYou might want to go back\nto the documentation for `penColor()` to look up other colors to use.\\r\n\\r\n![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)"
      U3L06 Challenge 4 bullseye_markdown_instruction: "# Hexadecimal Colors\\r\n\\r\nIn\nreading the documentation, you may have noticed that `penColor()` can accept\ncolors in the **hexadecimal format (e.g. \"#AC9100\")**. Colors on websites\nwill often be represented in this format. It's useful to know how to interpret\nand use this format when trying  to duplicate colors in your own images.\\r\n\\r\n**Read\nthe documentation:** Review the documentation for `penColor()` and pay particular\nattention to how to define colors in hexadecimal.\\r\n\\r\n# Do This:\\r\n**Draw\nthe bullseye: ** Draw the bullseye below using a combination of `penColor()`\nand `dot()`.\\r\n\\r\n***Hint:*** *The sample image was created using three\nof the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00.\nCan you recall how hexadecimal color works to select the correct colors on\nyour first try?*\\r\n\\r\n<img src=\"https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png\"\nstyle=\"height: 250px\">\\r\n\\r\n**Remember:** The hex colors must have quotes\naround them so penColor(“#FF0099”)  not penColor(#FF0099)."
      U3L06 Challenge 5 overlapping circles_markdown_instruction: "# Transparency\n- Red, Green, Blue, Alpha\\r\n\\r\nThere is another command that lets you set\nthe pen color called `penRGB(r,g,b,a)`.\\r\n\\r\n* The first 3 parameters are\nfor values (in the range 0-255) for the red, green, and blue channels. \\r\n*\nThe 4th parameter `a` stands for \"alpha\".  The \"alpha channel\" for color\nlets you set the level of **opacity** as a decimal value between 0 and 1 -\nit is interpreted as a percentage, so 0.5 equates to 50% opaque.  For example:\n`penRGB(113, 102, 160, 0.5)`.\\r\n\\r\n# Do This:\\r\n\\r\n**Read the Documentation:**\nTo figure out how to use `penRGB()` go read the documentation, paying special\nattention to the syntax used to give a command **multiple values**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\n**Draw the circles:\n** \\r\n\\r\nUse `penRGB()` and `dot()` to draw two overlapping circles as shown\nin the image.\\r\n"
      U3L06 Challenge 6 squiggles_markdown_instruction: "# Multiple Parameters -\nMaking Arcs\\r\n\\r\nMany commands need more than one parameter to make sense.\nWhen a command needs more than one parameter, the parameters are separated\nby commas and the **order of the parameters matters**.\\r\n\\r\nTwo new commands\nhave been added to the block palette, `arcLeft()` and `arcRight()` which both\naccept two parameters.\\r\n\\r\n**Read the documentation: ** Read the documentation\nfor `arcLeft()` and `arcRight()` .\\r\n\\r\n<img src=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\n# Do This:\\r\n\\r\n**Draw\na squiggly line: ** \\r\n\\r\nUsing `arcLeft` and `arcRight` along with the\nones you have already learned draw a **purple squiggle on a blue background**.\nFeel free to use any of the methods for choosing colors you have already learned.\\r\n\\r\n\\r\n\\r\nHints:\\r\n*\nTo make the figure exactly, you need to turn before calling arcLeft or arcRight\nto orient the turtle first.\\r\n* The parameters to arcLeft and arcRight are\nthe same and they are multiples of 10\\r\n* The colors are \"PowderBlue\" and\n\"Purple\" - though you can use other colors if you like."
      U3L06 Challenge 7 smiley face_markdown_instruction: "# Moving Relative to the\nScreen\\r\n\\r\nThe turtle commands we've seen so far move the turtle **relative\nto the turtle's location and direction**. If you want to get the turtle to\na specific position on the screen using only `moveForward()` or `turnLeft()`,\nyou need to know the turtle's location beforehand.\\r\n\\r\nTwo new commands\nin the toolbox help resolve this issue. `moveTo()` moves the turtle to a location\non the screen based on its X and Y coordinates. `turnTo()` turns the turtle\nin a specific direction. Together these commands can make many drawings easier\nto complete.\\r\n\\r\n# Do This:\\r\n\\r\n**Read the documentation: ** Read the\ndocumentation for `moveTo()` and `turnTo()`. Pay specific attention to how\nthe coordinate system is arranged in App Lab as it is different from what\nyou might have seen in a math class.\\r\n\\r\n**Draw the smiley: ** Use these\nnew commands to help you draw the smiley face pictured below.\\r\n\\r\n**HINT:\n** You can't really do this one without using `penUp()` and `penDown()`.\\r\n\\r\n![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)"
      U3L06 Challenge 8 make your own_markdown_instruction: "# The Full Turtle API\\r\n\\r\nWe've\nadded a few more commands to the toolbox. At this point you have access to\nevery turtle command provided by App Lab. As we've already seen with our\nexploration of functions you can combine these commands to create more complex\nfunctionality, but at the lowest level all of your code will be making use\nof the set of commands provided by App Lab.\\r\n\\r\n<img src=\"https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png\"\nstyle=\"height: 250px; float: left; margin: 10px\">\\r\n\\r\nCode you write\nwill always be based upon the commands that are provided by the programming\nlanguage you are using. When several commands are provided in a logical chunk,\nlike the set of turtle commands, we refer to them collectively as a **library**\nof functions. The total set of commands that a language provides access to\nis called the **application program interface**, or simply an **API**. \\r\n\\r\nAs\nyou gain more experience you will gain familiarity with the API for the language\nyou are using, but you will still want to return to the **API documentation**\nfrom time to time to remind yourself what functionality a language offers.\\r\n\\r\nCongratulations,\nyou've really come a long way as a turtle artist! \\r\n\\r\n# Do This:\\r\n\\r\n**Draw\nwhatever you like!**  The only requirements are:\\r\n\\r\n* use at least 3 different\ncolors\\r\n* use moveTo\\r\n\\r\nExplore the documentation for any new commands\nyou see and use your skills as both an artist and user of **API documentation**\nto **draw something of your own choosing.**\\r\n\\r\nIf in doubt: try to re-create\n\"I [heart] CS\" drawing shown here."
      U3L06 Free Response Getting Started_markdown_instruction: "Brainstorm a new\ncommand you would like to include in a turtle drawing program. \n\n* Would\nyou choose to improve a commands you have already used or something entirely\nnew? \n* How would it work? \n* Would the command need any additional information\nto successfully execute the instructions?\n"
      U3L06 Free Response Reflection_markdown_instruction: "Respond to your teacher's\nprompt in the space below.\n"
      U3L06 Free Response Wrap Up_markdown_instruction: "List 3 interesting functions\nyou discovered in the AppLab API. \n\nSelect one of them and describe how\nyou think you might want to use it in a future programming project.\n"
      U3L07 - Free Play Loops and Random_markdown_instruction: "# Free Play!\\r\n(Optional)\\r\n\\r\nMess\naround with your \"Under the Sea\" scene to make it do different things.  \\r\n\\r\n**Ideas:**\\r\n*\nMake different amounts of each component.\\r\n* Play with the ranges of random\nvalues.\\r\n* Add other creatures.\\r\n* Play with color values to give the\nscene a different feel (nighttime? red dawn?).\\r\n* Get creative!\\r\n\\r\n#\nDon't Worry... You Can't Screw It Up\\r\n* Play around as much as you want\n- you can **always go back to a previous version**.\\r\n* Each time you hit\n\"Run\" your code is saved in a way that lets you get back to it.\\r\n* Notice\nthat there is button at the top of the page called **Version History** that\nlets you see and use any previous version of your code.\\r\n\\r\n![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)"
      U3L07 - Starry Night Starter Code_markdown_instruction: "You are going to use\nloops and random numbers to generate an image of starry night sky similar\nto one shown here.  We have given you some starter code to generate the ground\nand sky (just two giant dots), you will add code to this project to make the\nstars, grass, and moon.  All of the effects are clever applications of turtle\ndots, lines, and colors.  To get started, follow the series of steps suggested\nin the accompanying worksheet. \\r\n\\r\n<img src=\"https://images.code.org/0f42e475e7600ac33d31bdf5dee70726-image-1459547325746.gif\"\nstyle=\"width: 250px\">"
      U3L07 - allSeaGrass_markdown_instruction: "# Add Seagrass\\r\n<img src=\"https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42\nPM.png\" style=\"width: 200px; float: right\">\\r\nOur new version of `drawSeagrass`\nnow draws a single piece of seagrass with a random height.  Now let's use\na loop in `drawAllSeagrass` to fill the sea floor with it.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of\nseagrass using your updated `drawSeagrass` function.\\r\n\\r\n"
      U3L07 - bubbles_markdown_instruction: "# Add Bubbles\\r\n<img src=\"https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49\nAM.png\" style=\"width: 200px; float: right\">\\r\nThe first high-level function\nyou will write is `drawAllBubbles`. You may have noticed that the bubbles\nin the image look very similar to the dots example we've already drawn in\nthis lesson. Now we'll use that skill to add to our image.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read** the `drawBubble` function to know how it works and what **parameters**\nit accepts.\\r\n\\r\n* **Modify the code** of `drawAllBubbles`:\\r\n * **Add\na loop** inside the function.\\r\n * **Move the commands that were already\ninside the function *inside the loop* instead** -- In other words \"wrap a\nloop around the existing lines of code that are inside the function. This\nway your code will move the turtle randomly and call `drawBubble` many times.\\r\n\n* **Set the number of iterations** in your loop so that the screen is filled\nwith bubbles. Try starting with 200 and then adjust to whatever number you\nlike."
      U3L07 - callingFunctionsInLoops_markdown_instruction: "# Calling functions\nin loops\\r\n\\r\nFor more complex drawings with repeated sections **combining\nloops and functions** can make your code efficient to write and easy to read.\\r\n\\r\nYou're\nabout to see a program in which a function called `forwardAndLoop()` has been\ndefined. \\r\n\\r\n**Call ** the function without a loop to see how it runs.\\r\n\\r\n**Use**\na loop to **call the function multiple times** and complete the figure below.\\r\n\\r\n![](https://images.code.org/ac935a93a639d6608d91afbcee0aebb1-image-1442850398315.46.27\nAM.png)"
      U3L07 - createTriangleParam_markdown_instruction: "# Defining Functions with\nParameters\\r\n\\r\nThis time you're going to write your own function with\nparameters to complete an image. Two function calls to `drawTriangle` have\nbeen placed at the top of the program but the function itself needs to be\ndefined.  The program should draw this:\\r\n\\r\n![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20\nPM.png)\\r\n\\r\n# Do This:\\r\n**Complete** the function definition for `drawTriangle(sideLength)`\n. Notice that you have already been given a **descriptive and meaningful parameter\nname**, `sideLength`, but you can change it if you wish.\\r\n\\r\n**Hint:**\nyou should put the pen down and pick it up as part of the definition of `drawTriangle`\n- that way you guarantee that a call to drawTriangle will always actually\ndraw. Picking the pen up as the last act of the function is a nice thing to\ndo for any other code that might not be expecting drawTriangle to have a side\neffect of putting the pen down.\\r\n\\r\nAs a reminder of how to use a parameter\nwithin the function here is a correct version of `drawSquare(size)` for reference.\\r\n\\r\n![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)"
      U3L07 - fish_markdown_instruction: "# Add Fish\\r\n\\r\nThe next high-level function\nyou will write is `drawAllFish`. A version of `drawFish` with parameters has\nbeen provided for you to use.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read** the `drawFish`\nfunction to know how it works and what **parameters** it accepts.\\r\n\\r\n*\n**Add a loop** to `drawAllFish`.\\r\n\\r\n* **Place the commands already inside\nthe function in your loop.** This way your code will **move the turtle randomly**\naround the **top 360 pixels** of the image and draw **15 fish** of random\nsize between **5 and 20** using `drawFish`.\\r\n\\r\n* Once you have your loop\nworking try calling `drawFish` with random values for its `red`, `green`,\nand `blue` parameters to get differently colored fish.\\r\n\\r\n![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35\nPM.png)"
      U3L07 - introSquare_markdown_instruction: "# Getting Started with Loops\\r\n\\r\nA\n**loop** is a block of code that is repeated or \"looped through\" in a program.\nYou will be creating a loop using the `for` loop block.\\r\n\\r\nWe'll start\nby experimenting with a program similar to what you saw in the video.\\r\n\\r\n#\nDo This:\\r\n* **Drag** out a `for` loop block.\\r\n* **Inside the loop:**\\r\n\\t*\n**Add** a call to `moveForward`.\\r\n    * **Add** a call `turnLeft`. (HINT:\ntry turning by 137 degrees to start. You can change after that.)\\r\n    \\r\n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\\r\n\\r\n*\n**Run** the program to see the loop in action.\\r\n* **Experiment:**\\r\n *\n**Change** the number of times the loop runs.\\r\n * **Increase** the run speed\nto see how fast loops can execute.\\r\n * **How many times** can the loop run\nbefore you can no longer tell the difference in the image?\\r\n \\r\n**Move\non** once you feel like you have a decent grasp of using a `for` loop: setting\nthe number of times to repeat, running the program, and setting the run speed.\\r\n\\r\n"
      U3L07 - loopsWithRandom_markdown_instruction: "# Using Multiple Loops\\r\n\\r\nSome\nrepeated tasks can't easily be solved with a single loop. Instead, you'll\nneed to use **one loop after another**, each one solving a part of the problem.\n\\r\n\\r\n# Do This:\\r\n\\r\nAdd a loop to fill the screen with semi-transparent\nwhite dots until the original dots are \"erased\".\\r\n\\r\n<img src=\"https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif\"\nstyle=\"float: right; width: 100px\">\\r\n* **Drag ** a second loop into your\ncode that will run after the first loop.\\r\n* **Add** commands to draw dots\nin random locations that are white with opacity set to 0.5.\\r\n* **Increase\nthe iterations** so that the colored dots are totally erased. How many does\nit take?\\r\n\\r\nHINT: you can copy/paste the original loop and just change\nthe color of the dots and number of iterations.\\r\n\\r\n"
      U3L07 - randomDots1_markdown_instruction: "# Now try it: Looping with Random\nValues\\r\n\\r\n<img src=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\"\nstyle=\"width: 100px; float: right;\">\\r\n\\r\nIf you add some randomness to\nturtle behavior inside a loop, the program will run a little differently every\ntime which can make for some cool effects.\\r\n\\r\nYou're about to see a program\nin which the turtle **moves to a random location** each iteration of the loop,\nand **draws a randomly-sized dot** that also has a **random color**.  We've\nalso made the dot semi-transparent by setting the alpha value to 0.5 (50%\ntransparency).\\r\n\\r\n# Do This:\\r\n\\r\n**Figure out how many iterations**\n(number of times the loop runs) you need to consistently fill the screen entirely\nwith dots so none of the background is showing.  It will be a little different\nevery time so you'll need to experiment.\\r\n\\r\n**Compare what you found**\nwith a neighbor to see how close your results are.  Then **move on**."
      U3L07 - randomSquare_markdown_instruction: "# Practice Using Loops - Part 2\\r\n\\r\nLet's\nlook at the second example from the video. \\r\n\\r\nUse a `for` loop to call\na function that you wrote.  We've provided the code for the `drawSquare`\nfunction for you. \\r\n\\r\n**Drag out** a `for` loop.\\r\n\\r\n**Inside the loop**\nadd a call to `drawSquare`, and a call to `turnRight`.\\r\n\\r\n![](https://images.code.org/c4037292ac237ac60919fae2c24790db-image-1443104130552.gif)\\r\n\\r\n**Run\nthe program** to see what's happening.\\r\n\\r\n# Do This:\\r\nChange the number\nof loop iterations to draw a lot of squares.  Try to create the figure shown\nbelow (or something similar).  HINT: the image below has 72 squares in it.\\r\n\\r\n![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\\r\n\\r\nOnce\nyou've played enough to get the hang of calling a function from inside a\nloop then **move on**."
      U3L07 - seaGrass_markdown_instruction: "# Controlling Loops with Parameters\\r\n<img\nsrc=\"https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png\"\nstyle=\"width: 200px; float: right\">\\r\nThis time you will modify one of\nthe lower-level functions - `drawSeagrass`. Notice that the current version\nof `drawSeagrass` actually uses a loop. We want to modify this function so\nthat we control the number of times it loops with **a parameter**.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Look at** the `drawSeagrass` function to see how it currently\nworks.\\r\n\\r\n* **Add a parameter ** that will be used to indicate how many\nwaves the seagrass makes.\\r\n\\r\n<img src=\"https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10\ndrawSeagrass add param.gif\" style=\"width:350px;padding-left:22px;\">\\r\n\\r\n*\n**Modify the `'for` loop** so that it uses that **parameter** as the number\nof times to repeat.\\r\n\\r\n ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\\r\n\n\\r\n* Finally, **modify `drawAllSeagrass`** to call this new two-param version\nof `drawSeagrass` supplying a reasonable random value for the second parameter\nas well.\\r\n\\r\n<img src=\"https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG\"\nstyle=\"width:400px;padding-left:22px;\">"
      U3L07 - seaStar_markdown_instruction: "# Add Sea Stars\\r\n\\r\nWe're now ready\nto add sea stars to our image by writing `drawAllSeaStars`. Recall that we've\nalready written loops to draw much more complex stars. \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read** the `drawSeaStar` function to know how it works and what **parameters**\nit accepts.\\r\n\\r\n* **First: Update** `drawSeaStar` to use a `for` loop \\r\n\\r\n\\t*\n`drawSeaStar` has a portion of code that uses a longer sequence of repetitious\nsingle commands.  \\r\n    * Find the pattern and \"wrap a loop\" around it\nso that the repetition is done with a loop rather than many lines of declarative\nfunction calls.\\r\n\\r\n* **Second: Add a loop** to `drawAllSeaStars`.\\r\n    \\r\n\\t*\n**Place the commands already inside the function in your loop.** This way\nyour code will **move the turtle randomly** around the **bottom pixels (y\nvalues between 360 and 450)** of the image.\\r\n\\r\n* **Draw 5 sea stars**\nof random size between **10 and 30** using `drawSeaStar`.\\r\n\\r\n![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04\nPM.png)"
      U3L07 - sunBeams_markdown_instruction: "# Add Sunbeams\\r\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54\nPM.png\" style=\"width: 200px; float: right\">\\r\nFinally, we'll add some\nvisual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes\nthe turtle face a random direction prior to drawing each sun beam.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Read** the `drawSunbeam` function to know how it works\nand what **parameters** it accepts.\\r\n\\r\n* **Add a loop** to `drawAllSunbeams`\nto draw about 100 sunbeams. Inside your loop:\\r\n \\r\n* **Place the commands\nalready inside the function in your loop.** This way your code will move the\nturtle to a random x location at the top of the image (y is 0), `turnTo` a\nrandom angle between **165 and 175 degrees**, and call `drawSunbeam`.\\r\n"
      U3L07 - topDownDesign_markdown_instruction: "# Top-Down Design\\r\n<img src=\"https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53\nAM.png\" style=\"width: 150px; float: right\">\\r\nLook at this complex version\nof the \"Under the Sea\" scene you drew in the previous lesson. **You now\nhave all the skills you need to recreate this digital scene.**\\r\n\\r\nWe will\nuse **Top-Down Design** to help manage the complexity of drawing this image.\nThe starter code you will be provided already has broken the problem into\nmultiple levels.\\r\n\\r\n# Overview of Program Structure\\r\nYou are about to\nsee that we've provided you with a good amount of starting code.  Here's\na brief tour:\\r\n\\r\n**High-Level Function Calls:** These read almost like\na story of how you will draw the image. There's one function for every major\ncomponent of the scene.\\r\n\\r\n<img src=\"https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG\"\nstyle=\"width:200px;\">\\r\n\\r\n**High-Level Function Definitions:** These\ncurrently draw **a single copy of each component**. You will add code to these\nfunctions to draw many copies of each component in a variety of sizes and\ncolors.\\r\n\\r\n![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20\nAM.png)\\r\n\\r\n**Low-Level Functions:** These draw single elements of the\nscene. Most have been written for you already, but we've left a few for you\nto complete as well.\\r\n\\r\n![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22\nAM.png)\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* Review the structure of the code in\nthis level.\\r\n* Run the code to familiarize yourself with what it currently\ndraws.\\r\n* When you are ready to do so, move on!"
      U3L07 Free Response Getting Started_markdown_instruction: "Run the program:\n<a href=\"http://studio.code.org/p/applab#eUmMCRRJNxJk9EheYznD6w\" target=\"_blank\">\n\nStarry Night </a> several times. \n \n* What's \"weird\" or \"different\"\nabout this program from previous ones we've seen?\n* How do you think this\neffect is produced?\n\n\n"
      U3L07 Free Response Reflection_markdown_instruction: "When breaking a problem\ndown, you often encounter elements that you want to use repeatedly in your\ncode. Sometimes it's appropriate to write a new function; at other times\nit's appropriate to write a loop.  \n\nThere is no hard-and-fast rule as\nto which is better, but what do you think?  What kinds of circumstances would\nlead you to writing a function versus using a loop?\n\n\n"
      U3L08 - Enchantment Under the Sea_markdown_instruction: "You have been provided\nwith starter code for an “Under the Sea” scene which includes three functions,\none each for the starfish, seagrass, and fish. Create versions of these functions\nwhich accept parameters to allow you to add more variation to your scene.  The\nstudent worksheet provides more details and guidance.\\r\n\\r\n<img src=\"https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L08%20-%20Under%20the%20sea.gif\"\nstyle=\"width: 250px\">"
      U3L08 - createTwoParamTriangle_markdown_instruction: "# Defining Functions\nwith Multiple Parameters\\r\n\\r\nNow it's your turn to define a function that\naccepts multiple parameters. Just like in the previous example make sure you\n**separate your parameters with commas** and give them **descriptive and meaningful**\nnames.\\r\n\\r\n# Do This:\\r\n* **Drag out ** the function block, and **name**\nyour function `drawTriangle`. \\r\n* **Define `drawTriangle` to have two parameters\n** within the parentheses making sure to give them **descriptive and meaningful**\nnames separated by commas. \\r\n* The example below uses *size* and *width*\nfor parameter names but you can use whatever you like.\\r\n\\r\n![](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\\r\n\\r\n*  Then\n**write ** the code inside `function drawTriangle(size, width)` that will\nmake it work as described.\\r\n* Test it out!  **Run ** the code and experiment\nto create an image similar to the one below.\\r\n\\r\n![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38\nPM.png)\\r\n\\r\n"
      U3L08 - digitalScene_markdown_instruction: "# Design Your Digital Scene\\r\n\\r\nThis\nis the final project that you will submit.\\r\n\\r\n# Do This:\\r\n\\r\n**Copy**\nall of the individual functions you and your group members have written at\nthe bottom of this program.\\r\n\\r\n**Design your scene** using these functions,\nplacing your calls at the top of the file."
      U3L08 - drawSquareWithParam - for video_markdown_instruction: "# Defining and\nusing a function with a parameter\\r\nFrom the video, you learned that defining\nmultiple functions to draw different sized squares results in lots of repetitive\nfunctions - they are essentially the same, with a few numbers changed - and\nthis is not desirable.\\r\nAny time you find yourself effectively copy and\npasting large sections of code, it's usually a sign that there is a better\nway.\\r\n\\r\n# Do This\\r\nUh oh! Something's wrong! We've set up a program\nthat runs, but doesn't do what it's supposed to do. The program is supposed\nto make a drawing with two squares that looks like this:\\r\n\\r\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34\nAM.png\" style=\"width: 150px;\"> \\r\n\\r\nWe've given you the `drawSquare(size)`function\nthat was created in the video, but it's not quite right. Fix the code inside\nthe function so that the program creates the drawing correctly.\\r\n\\r\n**HINT:**\nYou should only need to change one thing about an existing line of code. You\ndon't need to add or remove any lines of code. Remember: The parameter `size`\nacts like a placeholder for a value that gets plugged into each call to `moveForward()`.\\r\n\\r\n"
      U3L08 - drawSquareWithParam_markdown_instruction: "# Defining and Using a Function\nwith a Parameter\\r\nFrom the video, you learned that defining multiple functions\nto draw different sized squares results in lots of repetitive functions -\nthey are essentially the same, with a few numbers changed - and this is not\ndesirable.\\r\nAny time you find yourself effectively copy and pasting large\nsections of code, it's usually a sign that there is a better way.\\r\n\\r\n#\nDo This:\\r\nUh oh! Something's wrong! We've set up a program that runs,\nbut doesn't do what it's supposed to do. The program is supposed to make\na drawing with two squares that looks like this:\\r\n\\r\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34\nAM.png\" style=\"width: 150px;\"> \\r\n\\r\nWe've given you the `drawSquare(size)`function\nthat was created in the video, but it's not quite right. **Fix the code inside\nthe `drawSquare` function so that the program creates the drawing correctly.**\\r\n\\r\n**HINT:**\nYou should only need to change one thing about an existing line of code. You\ndon't need to add or remove any lines of code. Remember: The parameter `size`\nacts like a placeholder for a value that gets plugged into each call to `moveForward()`.\\r\n\\r\n"
      U3L08 - drawSquaresWithParams_markdown_instruction: "# Duplicating functions\\r\n\\r\nThis\nprogram is supposed to draw two squares, a big one and a small one. The function\ndefinition for `drawBigSquare()` is written but `drawSmallSquare()` is empty.\\r\n\\r\n**Write**\n`drawSmallSquare()` to draw a square with sides 25 pixels long.\\r\n\\r\n**Run\nthe code** to match the image below\\r\n\\r\n**Hint:** Copy-Paste might be a\nuseful approach here!\\r\n\\r\n![](https://images.code.org/b1cf1767df98f6b7eacdc8a10c5674a7-image-1442417274907.26.34\nAM.png)"
      U3L08 - fish_markdown_instruction: "# Adding parameters to functions: *drawFish*\\r\n\\r\nLet's\nupdate our `drawFish` function to accept a parameter. Currently `drawFish`\ncan only draw a fish of size 30.\\r\n\\r\n**Add a parameter** to the function\ndefinition for `drawFish` that allows you to control its size (Note: the pen\nwidth is important here.) Make sure your parameter has a **descriptive and\nmeaningful** name.\\r\n\\r\n**Update your function calls** to use your new version\nof `drawFish` and change the size of the fish in your image.\\r\n\\r\n![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55\nPM.png)"
      U3L08 - freePlay_markdown_instruction: "# Keep Going!\\r\n\\r\nAt this point\nyou've seen how parameters can help **generalize the behavior of a function**\nto perform a variety of tasks, not just one. This will prove to be a very\nuseful skill as we continue to develop as programmers.\\r\n\\r\nFor now, **keep\nadding to your drawing**. Make more function calls and see if you can continue\nto use **random numbers** to add variety to your drawings.\\r\n\\r\n![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11\nPM.png)"
      U3L08 - individualCode_markdown_instruction: "# Design Your Component\\r\n\\r\nWith\nyour **group** you should have already identified and assigned the high-level\nfunctions that should be used to create your digital scene. \\r\n\\r\n# Do This:\\r\nUse\nthe space here to design your functions. Once you're done you can **share**\nthis project with your groupmates."
      U3L08 - introUnderTheSea - clone for recovery_markdown_instruction: "# Recover\nyour Under the Sea project code!\\r\n\\r\nBelow you should see your code for\nthe Under the Sea project from CSP Unit 3 - Lesson 8 in the state it was in\naround 3pm ET, Monday Oct. 30, 2017.\\r\n\\r\n**Students:** To get the code\nbelow back into Unit 3 - Lesson 8...\\r\n* Select all your code from the workspace\nbelow (Highlight with mouse, or ctrl+A)\\r\n* Copy it (Edit -> Copy, or ctrl+C)\\r\n*\nPaste it (Edit -> Paste, or ctrl+V) into the project in Unit 3\\r\n    * Here\nis a link to the project that will open in a new window: <a href=\"https://studio.code.org/s/csp3/stage/8/puzzle/17\"\ntarget=_blank>https://studio.code.org/s/csp3/stage/8/puzzle/17</a>\\r\n\\r\n**Teachers:**\nYou can view your students' work here using the blue teacher tray.  Alternatively,\nyou can ask students to use the process above.\\r\n\\r\n**Details:**\\r\n* The\nUnder the Sea code is a \"project\" that sat behind eight levels (\"bubbles\")\n10-17 in Unit 3, Lesson 8.  \\r\n* On Oct. 30, 2017 we updated that project\nin a way that caused code to appear missing for those who had done work prior\nto the change.\\r\n* Your code still exists! It's just associated with the\nold project, which is what we have provided below.\\r\n* You can copy and paste\nyour code from below into any of the current Unit 3, Lesson 8, levels 10-17\nand it will work for all. (In other words, the code for level 17 is actually\nreferring to the same project as levels 10-17)\\r\n\\r\nWe're sorry about this\nmistake and for the inconvenience and disappointment it may have caused. Hopefully,\nyou were able to recover the code you worked so hard on.\\r\n\\r\nIf you have\nfurther questions please submit a bug report (option in the top-right menu)\nor send email to support@code.org\\r\n\\r\nThanks,\\r\n\\r\nCSP Team"
      U3L08 - introUnderTheSea with comments_markdown_instruction: "# Under the Sea!\\r\n\\r\nIn\nthe next several challenges you will be working to improve **one program**\nthat draws an underwater scene.  Each time you  finish a puzzle and move on\nto the next one, your code will be pulled forward and you'll get new instructions\ntelling you what to add. **Read through ** the program provided to get a basic\nunderstanding of what it does.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add function calls\n** to the top of the program so that **two fish, two starfish, and two pieces\nof seagrass** appear somewhere in the scene. You don't need to provide values\nfor the parameters at this stage.\\r\n\\r\n* **Hint:** you need to call `moveTo`\nbefore drawing a second fish, starfish or seagrass, otherwise you won't see\nthe second one because it will draw exactly over the first one -- those functions\ndraw based on where the turtle is just before the call.\\r\n\\r\n* **Test out\nyour code**. If something doesn’t work like you expect, consider whether you\ncan add anything to the functions’ definitions to make them better.\\r\n\\r\n*\n**Continue ** to the next level, **where your code will be waiting for you.**\\r\n\\r\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35\nPM.png)"
      U3L08 - introUnderTheSea_markdown_instruction: "# Under the Sea!\\r\n\\r\nIn\nthe next several challenges you will be working to improve **one program**\nthat draws an underwater scene.  Each time you  finish a puzzle and move on\nto the next one, your code will be pulled forward and you'll get new instructions\ntelling you what to add.\\r\n\\r\n# Do This:\\r\n\\r\n* **Read through ** the\nprogram provided to get a basic understanding of what it does.\\r\n* **Add\nfunction calls ** in the early lines of the program (somewhere after the background\nis drawn) so that **two fish, two starfish, and two pieces of seagrass** appear\nsomewhere in the scene. You don't need to provide values for the parameters\nat this stage.\\r\n* **Hint:** you need to call `moveTo` before drawing a second\nfish, starfish or seagrass, otherwise you won't see the second one because\nit will draw exactly over the first one -- those functions draw based on where\nthe turtle is just before the call.\\r\n* Test out your code. If something\ndoesn’t work like you expect, consider whether you can add anything to the\nfunctions’ definitions to make them better.\\r\n* **Continue ** to the next\nlevel, **where your code will be waiting for you.**\\r\n\\r\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35\nPM.png)"
      U3L08 - multiParamFish_markdown_instruction: "# Multiple Parameters\\r\n\\r\nLet's\nmake our drawings even more interesting by adding some variety to the color.\\r\n\\r\n**Add**\nthree more parameters called `red` , `green` , and `blue` to your function\ndefinition for `drawFish` which allow you to set the color of the fish when\nyou call the function. Remember to separate them with commas!\\r\n\\r\n**Note:**\nthis means that drawFish will now have 4 parameters total: size, red, green,\nand blue.\\r\n\\r\n**HINT:** inside drawFish just replace the numbers of the\npenRGB values with the parameters of your function.\\r\n\\r\n**Change** the\nfunction calls at the top your code to draw different colored fish.\\r\n\\r\n![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30\nPM.png)"
      U3L08 - multipleLayersofParams_markdown_instruction: "# Multiple levels of\nfunctions\\r\n\\r\nIn this example pay very close attention to how the functions\nhave been declared. `drawPlusSign()` accepts a parameter called `size`.\\r\n\\r\n![](https://images.code.org/aec14185c20a890db6023ebf8ee214b0-image-1442583027015.30.10\nAM.png)\\r\n\\r\nInside of the function this value is used to make a call to\n`drawSingleSide()` \\r\n\\r\n![](https://images.code.org/d74c79f74c2f1b0721d014580f69233f-image-1442583086099.31.17\nAM.png)\\r\n\\r\n`drawSingleSide()` is defined in the code below and also accepts\na parameter called `lengthOfSide`\\r\n\\r\n![](https://images.code.org/52320237a7c952bafef31635a8581f7d-image-1442583208640.33.21\nAM.png)\\r\n\\r\nNotice that these functions accept the same **value** when\nthey're called but they give them **different names**. Each function can\ndecide what it will call its parameters. Even if one function calls another,\n**each function is treated as a separate logical unit of code.** In fact,\nyou **could name their parameters** the same, but they would still be separate\nblocks of code.\\r\n\\r\nIn programming we call these blocks of code the **scope**\nof the function. It is a complex concept but one that will eventually make\nprogramming a much simpler process. The benefit of each function being able\nto name its own parameters is that you only need to look at that function\nto know which parameters it is using and what they are called.\\r\n\\r\n**Call\n`drawplusSign()`** twice in the spaces provided to draw the image below.\\r\n\\r\n"
      U3L08 - paramsToStarfish_markdown_instruction: "# Adding Parameters to Functions:\n*drawStarfish*\\r\n\\r\nWe want to make our picture more interesting by adding\nsome variety. Currently the `drawStarfish` function can only draw a starfish\nof size 60.\\r\n\\r\n**Add a parameter** to the function definition for drawStarfish\nthat allows you to control its size - like `drawStarfish(size)`. Make sure\nyour parameter has a **descriptive and meaningful** name.\\r\n\\r\n**Update\nyour function calls** to use your new version of `drawStarfish` and change\nthe size of your starfish.\\r\n\\r\n![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12\nPM.png)"
      U3L08 - randomInput_markdown_instruction: "# Random Input\\r\n\\r\nYou have a\nnew block that allows you to generate a random number. You can use this instead\nof hard-coding in values every time you call a function.\\r\n\\r\n![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r\n\\r\n**Read\nthe documentation** for the randomNumber block.\\r\n\\r\n# Do This\\r\n**Use\nrandomNumber to provide random input** to *all three* of your drawing functions.  Just\ninsert the call to randomNumber where you would otherwise put numbers.  \\r\n\\r\nLike\nthis:\\r\n![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r\n\\r\nUse\nrandomNumber in calls to all three of your drawing functions:\\r\n\\r\n* drawStarfish\\r\n*\ndrawSeagrass\\r\n* drawFish\\r\n\\r\nThis is a great way to **test** out functions\nand also get some **interesting looking images**. Every time you run the program\nyou can get slightly different looking scenes like the ones below.\\r\n\\r\n![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)"
      U3L08 - seaGrass_markdown_instruction: "# Adding Parameters to Functions: *drawSeagrass*\\r\n\\r\nTo\nkeep adding variety to our image let's keep adding parameters to our functions.\nCurrently the `drawSeagrass` function can only draw a piece of seagrass with\narcs of radius 100.\\r\n\\r\n**Add a parameter** to the function definition\nfor `drawSeagrass` that allows you to control its size. (You'll only need\nto change the radius of each arc.) Make sure your parameter has a **descriptive\nand meaningful** name.\\r\n\\r\n**Update your function calls** to use your new\nversion of `drawSeagrass` and change the size of the seagrass in your image.\\r\n\\r\n![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30\nPM.png)"
      U3L08 - squareTwoParams_markdown_instruction: "# Calling Functions with Multiple\nParameters\\r\n\\r\nYou're about to see a new definition for `drawSquare` that\nhas two parameters: `drawSquare(size, borderWidth)` Notice how **multiple\nparameters are separated by commas**.\\r\n\\r\n![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15\nPM.png)\\r\n\\r\n# Do This:\\r\nAdd to the code to **make two calls** to the\nnew two-parameter version of `drawSquare` to make an image similar to this\none.\\r\n\\r\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38\nPM.png)\\r\n\\r\n"
      U3L08 - starFish_markdown_instruction: "# Under the Sea\\r\n\\r\nIn the next\nseveral levels you will be working to improve the **same program** that draws\nan under the sea image. Your code will be pulled forward as you receive new\ninstructions.\\r\n\\r\n**Read through ** the program here to understand what\nit does.\\r\n\\r\n**Add function calls ** to the top of the program so that\nthere are now **two fish, two starfish, and two pieces of seagrass** in the\nimage. Place them wherever you like.\\r\n\\r\n**Continue ** to the next level,\n**where your code will be waiting for you.**\\r\n\\r\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35\nPM.png)"
      U3L08 - triangleTwoParams_markdown_instruction: "# Calling functions with multiple\nparameters\\r\n\\r\nWe've already called many functions with multiple parameters\nbut it can still be helpful to see an example of how it will look when you've\ndefined those functions yourself.\\r\n\\r\n**Look at the function definition**\nfor `drawSquare()` . Notice in particular how **multiple parameters are separated\nby commas** in the definition.\\r\n\\r\n![](https://images.code.org/a9c29d49444af73851d34445c686e3ba-image-1442526639409.50.19\nPM.png)\\r\n\\r\n**Call** `drawSquare()` in the spaces above to complete the\nimage. Don't worry about exact value, but the larger square should have thinner\nlines.\\r\n\\r\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38\nPM.png)"
      U3L08 Assessment2_markdown_instruction: "“Abstraction” is often used to focus\non a general case and ignore a specific instance of a problem. \n\nGiven this\nmeaning of the word, how are functions with parameters an example of abstraction?\n"
      U3L08 Free Response Getting Started_markdown_instruction: "In previous lessons,\nyou used parameterized functions. \n\n* In what situations are parameterized\nfunctions useful? \n* What problems do parameterized functions solve?\n"
      U3L08 Free Response Wrap Up_markdown_instruction: "How are parameterized functions\ninvolved in the children's game \"Simon Says?\"\n"
      U3L08 how to add comments_markdown_instruction: "# Now you try it - Add a comment\\r\n\\r\nThe\nstarting code provided has some comments already in it.\\r\n\\r\n# Do This\\r\n\\r\nInsert\na comment that says `// Draw all the starfish` just above the first call to\n`drawStarfish()`. \\r\n\\r\n* The `// Comment` block is in the Functions toolbox\n([Show me](#triggercallout=show_comment))\\r\n* **See how:**\\r\n![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\\r\n\\r\n**Click\nfinish** once you've added the comment.  And keep adding comments as you\ngo!!!"
      U3L09 Free Response Getting Started_markdown_instruction: "In computer science,\nwhen programmers break a big job into several smaller jobs, it's called decomposition.\n\nWhen\nprogrammers think about tasks in the general terms about what is going to\nbe accomplished (not specifically about how every step will be accomplished),\nit's called abstraction. \n\nWhat non-CS task have you worked on lately that\ninvolved decomposition? Explain.\n\nWhat non-CS task have you worked on lately\nthat involved abstraction? Explain.\n\n\n"
      U3L09 Free Response Wrap Up_markdown_instruction: "Describe how your team \"decomposed\"\nthe design of the digital scene project.\n\nDescribe the \"levels of abstraction\"\nthat were included in the component you were responsible for.\n\n\n"
      U3L1 - Simulation - Template_markdown_instruction: "# Simulating Coin Flips\\r\n\\r\nOver\nthe next several exercises we are going to be building a program that simulates\nflipping 10,000 coins, or even more if you like. Along the way we're going\nto be keeping track of the patterns that develop and hopefully learning something\nabout the patterns that develop.\\r\n\\r\nThis is a great problem to simulate\non a computer. If you wanted to flip 10 coins you'd probably just do it by\nhand. Flipping 10,000 coins would take significantly longer (about 3 hours\nif you flip one per second) and so **we'd much rather use a program to do\nthe work for us.** Not only is it a lot faster to write the program, but once\nyou're done you can run your program over and over, repeating the experiment.\nAs we'll see, **simulations like this make it much easier to quickly notice\npatterns, test hypotheses, and develop new ideas to investigate**.\\r\n\\r\n**Starting\nSmall:** Our simulations are going to start small. We'll actually only be\nflipping 10 coins to begin with, and then developing programs that keep track\nof patterns in this smaller set of data. That way we'll be able to visually\nconfirm that our programs are working as intended. **Once we've verified\nthat our programs work at a smaller scale we'll gradually increaese the number\nof flips our program is working on until we're at the full 10,000.**\\r\n\\r\n#\nDo This\\r\n\\r\n* When we want to flip a coin with a computer we will instead\n**generate a random number between 0 and 1**\\r\n* Write a program that **uses\na while loop** that **flips 10 coins** and writes their values to the screen\\r\n\\r\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)"
      U3L10 Free Response Getting Started_markdown_instruction: "* What is your personal\ngoal for this project? \n\n* How will your personal goal impact the larger\ncollaborative project?\n\n\n"
      U3L10 Free Response Wrap Up_markdown_instruction: "What issues have arisen\nduring this collaborative project? \n\nHow were they resolved?\n"
      U3L11 Free Response Getting Started_markdown_instruction: "What can you learn\nby reflecting on your independent work in this project and on your contributions\nto an effective team effort?\n"
      U3L11 Free Response Reflection_markdown_instruction: "What was the most important\nskill you developed in this project?\n\nHow will you be able to apply that\nskill to future projects both in and out of computer science?\n\n\n"
      U3L12 - Reflection - Mission Unsortable_markdown_instruction: "Activity Reflection\n\n**Prompt:**\n\nThinking back on the \"Mission Unsortable\" activity, describe a time when\none person's mission conflicted with another person's mission. \n\nWhat\nhappened? Describe how you might modify the missions so that the problem occur.\n"
      U3L12 Free Response Getting Started_markdown_instruction: "Respond to the following\nprompt\n\nIn the programs you have written so far, lines of code and functions\nexecute in a predictable order - the order in which you program them to execute.\n\n\nWhat if someone came along and said, \"This is hard to read. I'm going\nto re-arrange the lines of code so that they are ordered by length from shortest\nto longest.\" \n\nIs that a good idea or a bad idea? Explain your reasoning.\n\n\n"
      U3L12 Free Response Reflection_markdown_instruction: "How did your personal\nmission contribute and/or detract from the overall goal of sorting the cards?\n\n\nHow could your group have sorted the cards more efficiently, assuming\nthat everyone still needed to execute the actions as prescribed in their missions?\n\n\nIf your group was not the first to finish, what slowed your progress?\n\n\n"
      U3L13 - Debug Id Problem_markdown_instruction: "# Choosing Good IDs\\r\n\\r\n<img\nsrc=\"https://images.code.org/f968ce4b09d2500b224af1bf9bacbacd-image-1444155536105.png\"\nstyle=\"float: right\">**Good IDs** are **meaningful and descriptive**.\\r\nJust\nlike good names for functions, you will want an ID to describe the intended\npurpose of the element.  For example, if you have many buttons in your program,\nyou will want to give each an ID that describes what the button does. For\nexample \"forwardButton\", \"leftButton\", etc.\\r\n\\r\n**IDs are also case-sensitive**\nwhich means you'll want to develop a style for capitalizing IDs. A common\nstrategy is to use a style called **camelcase**.  In camelcase style, words\nare combined together with no spaces and each new word, after the first, is\ncapitalized. itTypicallyLooksLikeThis.  \\r\n\\r\n**Why?** Many computer systems\ndo not allow keywords like function names and IDs to contain spaces.  You've\nalready seen several examples like this: `moveForward`, `onEvent`, `turnLeft`,\netc.  It's important to realize that camelcase is a style convention, not\na hard and fast rule. Sometimes you'll see other styles such as using underscores:\n`move_forward`, `turn_left`.  But in App Lab we typically use camelcase.\\r\n\\r\n#\nRules About IDs\\r\nIn making descriptive and meaningful IDs there **are some\nrules about IDs** you need to know.  IDs...\\r\n* cannot contain spaces.\\r\n*\n*must* begin with a letter (A-Z or a-z) and may be followed by any number\nof digits and letters.\\r\n* can contain hyphens (\"-\"), underscores (\"_\"),\ncolons (\":\"), or periods (\".\").\\r\n\\r\n# Do This:\\r\nThe code you will\nbegin with has an error. If you run it, you'll see that the ID of the button\nand the event handler don't match.\\r\n\\r\n* **Improve ** the button ID by\nchoosing a **descriptive and meaningful** ID.\\r\n* **Change ** the event handler\nso that it correctly references the button by its new ID.\\r\n* **Run ** the\nprogram to make sure it works.\\r\n"
      U3L13 - Debug Id plus logic problem_markdown_instruction: "# Debugging 1"
      U3L13 - Debugging 1_markdown_instruction: "# Debugging Event-Driven Programs:\nIDs\\r\n\\r\n**Debugging:** As you write more complex event-driven programs,\nyou'll need to polish your **debugging** skills. Debugging involves locating\nand correcting errors within a program. It is a critical (and generally unavoidable)\nstep when writing code.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 200px\">\\r\n\\r\n**Target Application:** In the\nnext three exercises, you'll debug this application (shown at right) which\nhas two buttons, one for moving forward and one for turning left.\\r\n\\r\n**Debug\nthe problem**:\\r\nIn each problem, we've added various errors into the program\nand it does not work as intended. You will need to find the errors, debug\nthe problems, and make corrections such that the program works correctly.\\r\n\\r\n**Checking\nIDs:** Your first debugging task will be to verify that the button IDs match\nthe event-handlers. **Remember that IDs are case-sensitive**.\\r\n\\r\n# Do\nThis:\\r\n**Run the program** and inspect the warnings to find the error.\\r\n\\r\n**Debug\n** the program and correct the errors so that it works as intended.\\r\n\\r\n**Run\nthe program** and verify that both buttons have the intended functionality.\\r\n"
      U3L13 - Debugging 2_markdown_instruction: "# Debugging Event-Driven Programs:\nOrdering Event Handlers\\r\n\\r\n**Ordering Event Handlers: ** Event handlers\nmust come **after the object they reference in the code**. If your event handler\ncomes before your object (in this case a button) your computer would be looking\nfor an event on an object that does not yet exist. You will get an error message\nand your code will not work as you intend.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n**Target Application:** Just\nlike the last exercise, you'll again try to make an app that has two buttons,\none for moving forward and one for turning left.  \\r\n\\r\nOnce again, we've\nintroduced a new error.\\r\n\\r\n# Do This:\\r\n**Run the Existing program**\nto see the error that gets generated.\\r\n\\r\n**Debug ** this program so that\nit works as intended.\\r\n\\r\n**Run the program ** and try both buttons to\nmake sure they have the intended functionality."
      U3L13 - Debugging 3_markdown_instruction: "# Debugging Event-Driven Programs:\nLogical Errors\\r\nYou're getting good at debugging now!\\r\n\\r\n**Logical\nErrors: ** Sometimes you can write a program that generates no errors but\ndoes not work as you intend. This is the result of **logical errors** in your\ncode. These can be tricky to catch without knowing what your program is supposed\nto do in the first place, and usually are only found with careful testing\nof your app's functionality.\\r\n<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\"\nstyle=\"float: right; width: 150px\">\\r\n\\r\n**Target Application:** Just\nas in the last exercise, you'll try to make an app that has two buttons,\none for moving forward and one for turning left.\\r\n\\r\nOnce again we've\nintroduced an error or two (a logical error this time) for you to debug.\\r\n\\r\n#\nDo This:\\r\n**Run the program ** and experiment to see what's wrong.\\r\n\\r\n**Debug\n** this program so that it works as intended.\\r\n\\r\n**Run the program **\nand try both buttons to make sure they have the intended functionality."
      U3L13 - Project_markdown_instruction: "# Multi Screen App\\r\nYou will be creating\nyour own multi-screen app to practice designing user interfaces and writing\nevent-driven programs. \\r\n\\r\n**Look at the Project Guide and Planning Sheets\nbefore programming**.\\r\n\\r\n# Requirements Reminder\\r\n* Your app will have\nat least **4 screens**.\\r\n* Your app should include **text, images, buttons,\nand sound**.\\r\n* There should be **no “getting stuck” on any screen.**  It\nshould always be possible to navigate from a screen in your app to some other\nscreen. \\r\n* Your program code should follow **good style**.\\r\n* Your user\ninterface should be **intuitive to use**."
      U3L13 - Turtle Driver Project_markdown_instruction: "# Create a Turtle Driver\nApp!\\r\n\\r\nAt this point you know enough about buttons and event handlers,\nand how to debug some common issues that arise to be able to **build your\nown \"turtle-driver\" app** from scratch. \\r\n\\r\n**Build up the program bit\nby bit**. Don't try to write all the code at once.  Add a button with an\nevent handler, make sure it works, debug any problems, and then move on to\nthe next part.\\r\n\\r\n# Do This:\\r\n\\r\n**Create ** an application with **four\nbuttons**, one for moving the turtle forward and one each for turning left\nand right.  The fourth button should do whatever you like.\\r\n\\r\n**Use descriptive\nand meaningful IDs** for your buttons and ensure your event handlers work\nas you intend.\\r\n\\r\n**If you have extra time** add more buttons that use\nother turtle commands you'd like to include.  You can also use colors, and\ndifferent line widths, dots, etc. "
      U3L13 - Turtle move with button_markdown_instruction: "# Your First Interactive\nApp!\\r\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'\nstyle='float: right; width: 250px'> A new group of commands has been added\nto the toolbox called **UI Controls** (User Interface Controls) which are\ncommands that let you interact with, and respond to, the user of your app.\nTo keep it simple, we'll start with just two commands: \\r\n* `onEvent` which\nlets you run a function in response to some event occuring (such as a button\nclick).\\r\n* `button` which puts a button on the screen.\\r\n\\r\n# Do This:\\r\nYou\nwill replicate the small app shown below, which makes the turtle move with\na button click. You will do three things:\\r\n* Add a `button`.\\r\n* Add an\n`onEvent` block.\\r\n* Add `moveForward` inside the onEvent function block.\\r\n\\r\nHere's\nwhat you should do - you can come back to watch this as many times as you\nneed to get it right.\\r\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\"\nstyle=\"border: solid 1px black; width: 500px; margin: auto\">\\r\n\\r\nOnce\nyou've created the program and gotten it to run, click **Finish** to move\nonto the next level."
      U3L13 Free Response Getting Started_markdown_instruction: "Give three examples\nof familiar applications that respond to you, the user. \n\nFor each, describe\nthe actions (means of input) you use to \"talk to the program.\" \n\nIf directed\nby your teacher, work with a partner to sketch a mock-up of an app with multiple\nmeans of input.\n\n\n"
      U3L13 Free Response Reflection_markdown_instruction: "Elements in your app\nare required to have **unique IDs**. Given what you now know about how event\nhandlers work, why is it important for the IDs of page elements to be unique?\n\n"
      U3L13 eventsDetails_markdown_instruction: "# How Do Events Work?\\r\nEvent-driven\napps are made up of elements that can trigger events (such as buttons) and\npieces of code called **event handlers**. Event handlers are commands that\n\"watch\" for certain events to occur in your program, and then run some function\nwhen an event occurs.\\r\n\\r\n<img src=\"https://images.code.org/96abf7d54a0be221a8b8eda80c696bf4-image-1444142010683.png\"\nstyle=\"float: right; width: 250px\">The `onEvent(id, type, callback)` command\ncreates an **event handler** in your app. The three parameters are:\\r\n* **id**\n- the ID of the element in the app you want to \"watch\", one that might trigger\nan event\\r\n* **type** - the type of event to \"watch\" for (e.g. a click,\na key press, a mousemove, etc.)\\r\n* **callback** - a **callback function**\nis only different from a normal function in that you don't call it directly\nfrom your code. Instead it gets *called by the system at the time the specified\nevent occurs*. You put the code into this function just like you would any\nother, and it will run when the event occurs.\\r\n\\r\nOnce created, the event\nhandler will always \"watch\" that element as long as it exists. \\r\n\\r\n#\nDo This:\\r\nThe program you are going to see has a button with a new ID but\nno event handler that is attached to it.\\r\n* **Add an `onEvent` handler**\nthat watches for a click on the button and *moves the turtle forward* when\nit happens. \\r\n* **Run the program** to make sure it works.\\r\n* **Try changing\nthe event type** to something like \"mouseover\" and see what happens.  Not\nall event types will work with buttons but it's fun to play a little bit.\\r\n\\r\nOnce\nyou've got the program responding to some event, move on to the next problem.\\r\n\\r\n"
      U3L14 - Assigning Random Value_markdown_instruction: "# Other Ways to Assign\nValues to Variables\\r\nPrograms become much more interesting when the values\nin variables change while the program is running. We can also assign to a\nvariable the value returned by a function. For example:\\r\n\\r\n![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\\r\n\\r\nBecause\nthe `randomNumber` function *evaluates to a number* it means we can treat\nit *as though it were a number*. We've used it before by just \"plugging\nit in\" to some function that needed a number as a parameter like:\\r\n![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\\r\n\\r\nBecause\nthe `randomNumber` function generates a new and different number each time\nyou call it, one thing we *could not* do before we had variables was generate\na random number, and use that *same number* for two different things in a\nprogram. Now we can.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png\"\nstyle=\"float: right; width: 350px\">Write a program that simulates the rolling\nof two dice and reports their individual values as well as the sum. \\r\nThe\nprogram should:\\r\n* Generate two random numbers between 1 and 6 and store\neach result in its own variable.\\r\n* Display the individual values of the\ntwo dice.\\r\n* Display the sum of the two dice (see right).\\r\n* Every time\nyou run the program the result will be a little different.\\r\n\\r\nWe have\ngiven you starting code that shows what to do for the first die. The *rest\nof the code is up to you!*  When you're done the output in the app display\nshould look like what's above.\\r\n\\r\n"
      U3L14 - Assigning User Input_markdown_instruction: "# Assigning user input\nto variables\\r\nPrograms become *even more interesting* when we can interact\nwith the user. A short way to ask a user for a number is with the `promptNum`\ncommand.\\r\n\\r\n`var userInput = promptNum(\"Enter a number?\")`\\r\n\\r\n`promptNum`\nis similar to `randomNumber` in that it is a function that *evaluates to a\nnumber*. The difference here is that promptNum pops up an input dialog box\nand waits for the user to type a number.  Once they do and hit 'Ok' the\nnumber they typed is returned and we can store it in a variable to use in\nour our programs.\\r\n\\r\n\\r\n# Do This:\\r\nWrite a program that acts as a\nsimple calculator.\\r\n* Ask the user to enter one number\\r\n* Then ask for\na second number\\r\n* Display the result of some calculation.\\r\n* An example\noutput is shown at right.\\r\n\\r\nWe have given you starting code that shows\nyou how to get the first number.  The rest of the code is up to you.\\r\n\\r\n"
      U3L14 - Journal Favorite Event_markdown_instruction: "Pick one of the two prompts\nbelow to answer.  Start by copy/pasting the prompt you're responding to.\n\n**Pick\none:**\n\n* Think back a few lessons to the \"Mission: Unsortable\" card sorting\nactivity. Relate something that happened in that activity to something you\nfound with event-driven programming in this lesson. Were there any \"unfortunate\nevents\" in the card sorting activity that were similar to \"unfortunate events\"\nwhile programming in this lesson?  \n\n* What was your favorite event type?\nExplain what the event type is and how you might use it in an app that you\nwant to write.  \n\nWrite your response below in 100 words or less.\n"
      U3L14 - Mini Calculator embed_markdown_instruction: "# Getting User Input -\nA Simple Calculator\\r\nPrograms become *even more interesting* when we can\ninteract with the user. A short way to ask a user for a number is with the\n`promptNum` command, which pops up a dialog box asking the user to enter a\nnumber.\\r\n\\r\nThis very simple app demonstrates a new behavior: getting input\nfrom the user.\\r\n**You will write code to re-create this program** on the\nnext page.\\r\n\\r\n# Do This:\\r\n* Click \"Run\" on the app.\\r\n* You will\nbe prompted for two numbers, one right after the other.  \\r\n\\t* If you don't\nenter a number it will simply re-prompt you until you do.\\r\n* See what happens.  \\r\n*\nRe-run the program and enter different numbers until you get the idea.\\r\n\\r\nClick\n**Finish** to move on."
      U3L14 - User Input Division calculator_markdown_instruction: "# Assigning User\nInput to Variables\\r\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\"\nstyle=\"width: 350px; float:right\">\\r\nLet's use `promptNum` to make a simple\ncalculator. The `promptNum` command appears in the variables toolbox because\nit's typically used as a way to get a value from the user that you want to\nhold on to while the program runs.\\r\n\\r\n`promptNum` is similar to `randomNumber`\nin that it is a function whose return value *evaluates to a number*. The difference\nhere is that `promptNum` pops up an input dialog box and waits for the user\nto type a number.  Once they do and hit \"OK\" the number they typed is returned\nand we can store it in a variable to use in our programs.\\r\n\\r\n\\r\n# Do\nThis:\\r\nWrite a program that acts as a simple calculator. (An animation of\nthe end result is shown at right.) <img src=\"https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif\"\nstyle=\"width: 250px; float: right\">\\r\n* Ask the user to **enter a number**.\\r\n*\nThen ask the user to **enter a second number**.\\r\n* **Display the result**\nof *some* calculation.\\r\n * The example shows division but you may choose\nsomething else if you like.\\r\n\\r\nWe have given you starting code that shows\nyou how to get the first number.  The rest of the code is up to you.\\r\n\\r\n"
      U3L14 - Variable ReAssignment pt2_markdown_instruction: "# Variable Re-assignment\n- Part 2: Updating Values\\r\n\\r\nAll of our examples so far have shown how\nto set the value of a variable by using combinations of numbers and other\nvariables.  But what if you wanted to do something like **add 10 to the *current*\nvalue of a variable**? \\r\n\\r\nBecause updating the value in a variable is\njust moving memory around, the process has to go something like this:\\r\n*\nRead the current value of a variable.\\r\n* Add 10 to it.\\r\n* Store the new\nvalue back into the same variable.\\r\n\\r\nThe technical term for this is called\n**variable re-assignment** - when you change the value of a variable based\non its current contents.   To increase the value of `num1` by 10 you actually\nneed to do this:\\r\n\\r\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\"\nstyle=\"float:right\">\\r\n```\\r\nnum1 = num1 + 10;\\r\n```\\r\nThe diagram at\nright shows a picture of what's happening (it assumes the value of `num1`\nis 7 before the line is executed).  It's actually very similar to what happens\nwith plain old arithmetic: compute a value, then store it in a variable.  Because\nthe computation has to happen before storing the result in a variable, there\nis no contradiction here.\\r\n\\r\n<details>\\r\n<Summary><strong>Common Mistakes\n& Tips</strong> [click to expand]</Summary>\\r\n\\r\n<h3>\\r\nMistake 1\\r\n</h3>\\r\n<p>To\nincrease the value of variable by 10 (for example) a common mistake is to\nthink that this statement alone will do the trick.\\r\n</p><p>\\r\n\\r\n```\\r\nnum1\n+ 10;\\r\n```\\r\n</p><p>\\r\nIt doesn't. This tells the computer to add 10\nto whatever the value of `num1` is.  And the computer will do that, and the\nresult will go....nowhere.  It will be lost.\\r\n</p><p>\\r\nBecause you are\ntrying assign a new value to a variable it should make sense that **the =\nsign must be involved somehow**.  \\r\n</p>\\r\n<h3>\\r\nMistake 2\\r\n</h3>\\r\n<p>\\r\nIf\nyou were in math class this statment would make no sense:\\r\n```\\r\nnum1 =\nnum1 + 10;\\r\n```\\r\n</p><p>\\r\nBut **remember to read = as \"gets.\"** If\nyou read the statement above as: \"num1 *gets* the value of num1's current\nvalue plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\\r\n</p>\\r\n</details>\\r\n\\r\n#\nDo This:\\r\n\\r\n * **Make a prediction.**\\r\n We start you out with some code\nagain (see below). \\r\n\\r\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\"\nstyle=\"width: 500px;\"> \\r\n\\r\n Trace the code and predict what you think\nwill be printed to the console.  (NOTE: We're serious about this \"make a\nprediction\" stuff. When you force yourself to make a prediction about what\ncode will do you will learn faster since it triggers you to apply your mental\nmodel of what's happening.)\\r\n  \\r\n * **Run the program** to see if you\nwere right.\\r\n \\r\n * **Add a `console.log` statement**.\\r\n \\r\n  We've\nleft you with a *little bit* of programming to do: add a `console.log` statement\nat the end of the program to see the last value of `someNum` to see if your\nfull prediction is correct.\\r\n"
      U3L14 - concatenate simple_markdown_instruction: "# Text and Variables Living\nTogether!\\r\n\\r\nSometimes it’s useful to display text along with the value\nof a variable in the same line of output. To do this you use `+` to attach\na variable onto a literal string of characters.  Here is an example:\\r\n\\r\n<img\nsrc=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\">\\r\n\\r\nNotice that the\n`+` operator has **two different meanings in JavaScript depending on what\ntype of data you're applying it to**. Click the explanations below for more\ndetails.\\r\n\\r\n<details>\\r\n<summary>If **both operands are numbers** `+`\nmeans to add those two numbers together.</summary>\\r\n\\r\nThis is standard\naddition.  It works both with numbers and with variables that contain numbers,\nas shown below.<br>\\r\n\\r\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n\\r\nBecause `num1`\nis a variable that holds a number, and 10 itself is obviously a number, in\nthis case `+` will do addition like you would expect.\\r\n\\r\n</details>\\r\n<br>\\r\n<details>\\r\n<summary>If\n**either of the operands is a string** `+` treats both as if they were strings\nand combines them to create a single string.</summary>\\r\nThis is potentially\nconfusing behavior and can get pretty weird if the text *looks* like numbers.  For\nexample, this code will display **16100** to the screen.<br>\\r\n\\r\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n\\r\nWhy? Because\nJavaScript sees you trying to display a mix of text and variable values. \"16\"\n(in quotes) is a string of ASCII characters not a number.  And so JavaScript\nconverts everything to text, and the characters in the result of \"16\"+\"100\"\ncomes out to \"16100\". \\r\n\\r\n</details>\\r\n<br>\\r\n \\r\n**TIP:** It's\ncommon to want to sandwich a variable between some text when displaying it.  You\ncan string together multiple pieces of text and variables using the `+` operator.  For\nexample, you can do this:\\r\n<br> \\r\n\\r\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\"\nstyle=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\\r\n \\r\n<br>\\r\n<details>\\r\n<summary>**Misconception\nAlert**</summary>\\r\n\\r\nThe **key thing to understand** about the `+` symbol\nis that it can _only_ do actual arithmetic addition if the values on either\nside of the `+` are actually numbers or variables that contain numbers. \\r\n\\r\n**And**\nif the `+` symbol cannot determine whether the value is a number then it **assumes\nit's a string**, and converts everything to a string and tries to concatenate\nit.  \\r\n \\r\nThe computer relies on you - the programmer - to make sure that\nthe **type of data** stored in a variable is appropriate for the task at hand.\\r\n</details><br>\\r\n\\r\nOn\nthe next screen we'll have you play with this a little bit, but you'll write\nstatements to display a mix of text and strings from here on out.\\r\n\\r\n#\nDo This:\\r\nWe have given you the starting code shown below.  You should **modify**\nthe `write` statement on **line 3** to combine text and variables together\nto make the app display a single line of text as shown.\\r\n\\r\n|starting code|output|\\r\n|--|--|\\r\n|<img\nsrc=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\"\nstyle=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\"\nstyle=\"width: 250px\">|"
      U3L14 - moving memory challenge1_markdown_instruction: "# Moving Memory - Challenge\n1\\r\n\\r\nThe next several levels all present challenges related to \"moving\nmemory\" around in your program.  \\r\n\\r\n**GOAL:** Set the value of the variable(s)\nto make the `console.log` statement display what it's supposed to.\\r\n\\r\n**Rules**:\\r\n\\r\n\n* You may **only** add lines of code that re-assign values of variables provided.\\r\n\n* You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n * You **MAY NOT** type or introduce any numbers.\\r\n * You **MAY\nNOT** add or create any new variables.\\r\n * You **MAY NOT** change or alter\nthe `console.log` statement at all.\\r\n\\r\n \\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code\nProvided</th>\\r\n</tr>\\r\n<tr>\\r\n <td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n<br><br>\\r\n### Try this example yourself...\\r\n\\r\n"
      U3L14 - moving memory challenge2_markdown_instruction: "# Moving Memory - Challenge\n2\\r\n\\r\n# Try another one!! \\r\n* Click through to see a new problem provided\nin the starter code.  \\r\n* A reminder of the rules and example are below\nif you need to sneak a peek.\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      U3L14 - moving memory challenge3_markdown_instruction: "# Moving Memory - Challenge\n3\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar x\n= 2;\\r\nvar y = 3;\\r\n// your code here\\r\n\\r\nconsole.log(\"The value of\nx is: \" + x + \" (x should be 7)\");\\r\n```\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      U3L14 - moving memory challenge4_markdown_instruction: "# Moving Memory - Challenge\n4\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar x\n= 2;\\r\n// your code here\\r\n\\r\nconsole.log(\"The value of x is: \" + x +\n\" (x should be 8)\");\\r\n```\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      U3L14 - moving memory challenge5_markdown_instruction: "# Moving Memory - Challenge\n5\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar x\n= 2;\\r\nvar y = 3;\\r\nvar z = 0;\\r\n// your code here\\r\n\\r\nconsole.log(\"The\nvalue of x is: \" + x + \" (x should be 3)\");\\r\nconsole.log(\"The value\nof y is: \" + y + \" (y should be 2)\");\\r\n```\\r\n</p><p>\\r\n<details>\\r\n<summary><strong><big>HINT:</big></strong>(click\nto expand)</summary>\\r\nSince this one requires you to change the value of\ntwo variables you need to be careful about which one you change first, since\nits new value will affect the next lines of code.\\r\n<p></p>\\r\nYou can also\ntake advantage of the fact that since `z` is not used as a display value,\nyou can use it as a temporary holding ground for one value while you change\nanother.\\r\n\\r\n</details>\\r\n</p><p>\\r\n</p><p>\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      U3L14 - moving memory challenge6_markdown_instruction: "# Moving Memory - Challenge\n5\\r\n\\r\nTry another one.  Here is the starting code:\\r\n\\r\n```\\r\nvar x\n= 5;\\r\nvar y = 11;\\r\nvar z = 4;\\r\n// your code here\\r\n\\r\nconsole.log(\"The\nvalue of x is: \" + x + \" (x should be 2)\");\\r\nconsole.log(\"The value\nof y is: \" + y + \" (y should be 6)\");\\r\nconsole.log(\"The value of z is:\n\" + z + \" (z should be 8)\");\\r\n```\\r\n</p><p>\\r\n<details>\\r\n<summary><strong><big>HINT:</big></strong>\n(click to expand)</summary>\\r\nThis one requires you to be a little clever.  Think\nabout setting the value of one variable that you could then use to easily\nset the value of the other variables.  Then the trick is to figure out how\nto use the variables you've been given to make that useful value.\\r\n\\r\n</details>\\r\n</p><p>\\r\n</p><p>\\r\n\\r\n<details>\\r\n<summary><strong>Reminder\nof the rules</strong> (click to expand)</summary>\\r\n\\r\n<p>\\r\n**GOAL:**\nSet the value of the variable(s) to make the `console.log` statement display\nwhat it's supposed to.\\r\n</p><p>\\r\n\\r\n**Rules**:\\r\n</p><p>\\r\n <li>You\nmay **only** add lines of code that re-assign values of variables provided.\\r\n\n<li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`\n`*` `/`).\\r\n <li> You **MAY NOT** type or introduce any numbers.\\r\n <li>\nYou **MAY NOT** change or alter the `console.log` statement at all.\\r\n</p><p>\\r\n\n\\r\nExample:\\r\n<table>\\r\n<tr>\\r\n\\t<th>Code Provided</th>\\r\n</tr>\\r\n<tr>\\r\n\n<td >\\r\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\\r\n        <br>The\ncode you're given will have a few variables initialized to some values.  The\nlast line will be one or more `console.log` statements with a comment indicating\nwhat the expected value to display should be.\\r\n        <hr>\\r\n    </td>\\r\n</tr>\\r\n<tr>\\r\n\\t<th>A\nPossible Solution</th>\\r\n</tr>\\r\n<tr>\\r\n\\t<td valign=top >\\r\n    <img\nsrc=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\"\n>\\r\n    <br><br>You need to add a line (or multiple lines) of code to re-assign\nthe values in variables so the `console.log` statement displays what's expected.  In\nthis example we show a solution on line 5.  Please note that there are several\ndifferent things you could do. For example, you could go crazy and do something\nlike: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\\r\n    </td>\n\\r\n</tr>\\r\n</table>\\r\n\\r\n</details>\\r\n\\r\n<br><br>\\r\n### Try it yourself...\\r\n"
      U3L15 - Add reset button to UpDown app_markdown_instruction: "# Add a Reset\nButton\\r\nIn most apps you want to provide a way to start over. \\r\n\\r\nTo\ndo this without having the user quit and restart your app, you need to add\ncode to **reset variables and text displays to initial values** so the app\ncan effectively start over.\\r\n\\r\nWe've **added a button** to the \"gameOverScreen\"\nin the *Count Up/Down App* and **added an empty event handler** for it.  \\r\n\\r\nRight\nnow clicking the \"start over\" button does nothing. You will write code to\nmake it work.\\r\n\\r\n\\r\n# Do This:\\r\n**Add code to the startOverButton event\nhandler to reset the app**.  <img src=\"https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif\"\nstyle=\"width: 150px; float: right;\">\\r\n\\r\nThe app should work like the\nanimation shown to the right. **Notice** that when the \"start over\" button\nis clicked it goes back to the main screen and  the count has been reset to\n0. \\r\n\\r\nThe code should:\\r\n\\r\n* Set the screen to the gamePlayScreen.\\r\n*\nSet the count variable to 0.\\r\n* Set the correct text label on the gamePlayScreen\nto show the count is 0.\\r\n\\r\nOnce you get it to work, move on."
      U3L15 - DEMO up down count practice app_markdown_instruction: "# All the Basics\nYou Need\\r\n\\r\n<img src=\"https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif\"\nstyle=\"float:right; width: 150px\"> When you close these instructions, you'll\nget to play a little bit with the very simple app (shown at right) to demonstrate\nthe basics of concepts involved in making the clicker game.  We'll call it\nthe **Count Up/Down App**.  Yes, it's a boring \"game,\" but it has all the\npieces of a more sophisticated game.\\r\n\\r\nThis app demontrates a few new\nconcepts.  We'll step through each one, one at a time, explaining how each\nthing works.  Along the way, we'll also encounter some common challenges,\nand learn how to solve them.\\r\n\\r\n# Do This:\\r\n* Keeping clicking the up\narrow until something happens (something besides the number increasing).\\r\n*\nStart over.\\r\n* Click the down arrow until something happens (something besides\nthe number decreasing).\\r\n* Start over.\\r\n\\r\nOnce you think you've seen\nall the behavior click Finish to see the first part of how this is done.\\r\n\\r\n"
      U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThe *Count Up/Down App* has a bug! \\r\n\\r\nA ** common\nmistake** has been introduced into the code.\\r\n\\r\nIt's a tricky one to\nfind because at first it looks like everything is okay.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the program.**\\r\n\\r\n* **To see the bug:**\\r\n * Click the up or down\narrow until you get to the \"gameOverScreen.\"\\r\n * Click \"start over.\"\\r\n\n* Click the up or down arrow again... what the?\\r\n \\r\n* **Look at the code\nand fix the problem.**\\r\n\\r\n* **Read about the common mistake** by expanding\nthe area below.\\r\n\\r\n* **Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...forgetting\nto reset <i>everything</i> you need to actually start over.</big></strong><br><br>\\r\nFrequently\nto actually reset you need to set a few variables back to initial values <i>and</i>\nupdate all the UI components, especially those that rely on those variables,\nso they reflect the new values.<br><br>\\r\n\\r\nAnother common mistake shown\nhere is setting the text of a label to \"0\" rather than the value of the\ncount variable.  For example, these two lines of code are a little dangerous:<br><br>\\r\n<pre>\\r\ncount\n= 0;\\r\nsetText(\"countDisplayLabel\", 0);\\r\n</pre>\\r\n\\r\nTo be safe, if\na label is supposed to display the value of a variable, you should always\nuse the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The\ngeneral rule of thumb is: never hard-code a value instead of using a variable\nthat holds the value you need to show.<br><br>\\r\n\\r\n<b>A common strategy</b>\nfor handling this is to put everything you need to reset the app into a function\nwhich you can call at both the beginning of your program, and from other screens\nlater on.  For example:<br><br>\\r\n\\r\n<pre>\\r\nfunction resetAll(){\\r\n  count\n= 0;\\r\n  setText(\"countDisplayLabel\", count);\\r\n  setScreen(\"gamePlayScreen\");\\r\n}\\r\n</pre>\\r\n\\r\nThen\nin some other code like a button event handler you can just call your reset\n\\r\nfunction:<br><br>\\r\n\\r\n<pre>\\r\nonEvent(\"startOverButton\", \"click\",\n\\r\nfunction() {\\r\n  <span style=\"background-color:yellow\">resetAll();</span>\\r\n});\\r\n</pre>\\r\n\\r\n</details>"
      U3L15 - Debug if never triggers in UpDown app_markdown_instruction: "# Bug\nSquash!\\r\n\\r\nThe *Count Up/Down App* has a bug! \\r\n\\r\nA ** common mistake**\nhas been introduced into the code.\\r\n\\r\nWe've changed the app so that it\ncounts up and down by 3 rather than by 1.\\r\n\\r\n# Do This:\\r\n\\r\n* **Run\nthe program.**\\r\n\\r\n* **To see the bug:**\\r\n * Click the up or down arrow\ntrying to get to the game over screen.\\r\n * It should be impossible to get\nto the game over screen.\\r\n \\r\n* **Look at the code and fix the problem.**\\r\n\\r\n*\n**Read about the common mistake** by expanding the area below.\\r\n\\r\n* **Once\nyou've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...the\ncondition you're checking in your `if` statement is actually impossible to\nreach.</big></strong>\\r\n<p>\\r\nThis problem was probably easy to see here,\nbut in practice <b>logic errors</b> like this can be devilish to track down.\nIt's especially hard because the program gives you no hints that anything\nis wrong - it is syntactially a correct program. The computer cannot tell\nahead of time whether your `if` statements will ever be true. So you need\nto trace through the logic of your program step by step to try to figure out\nwhy something's not happening that you expect should have happened.\\r\n</p>\\r\n\\r\n</details>"
      U3L15 - Debugging Simple If-statements =v==_markdown_instruction: "# Bug Squash!\\r\n\\r\nThe\n*Count Up/Down App* has a bug! \\r\n\\r\nA **very common mistake** has been\nintroduced into the code.  It's one that vexes early programmers, but we're\nsure you'll find it.\\r\n\\r\n# Do This:\\r\n\\r\n* **Run the program.**\\r\n\\r\n*\n**To see the bug:**\\r\n * Click the up arrow just once.\\r\n * Restart the\nprogram.\\r\n * Click the down arrow just once.\\r\n \\r\n* **Look at the code\nand fix the problem.**\\r\n\\r\n* **Read about the common mistake** by expanding\nthe area below.\\r\n\\r\n* **Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<br><br>\\r\n<strong><big>...using\n`=` instead of `==`</big></strong>\\r\n<p>\\r\n<b>Yup,</b> we told you this\nis a common mistake!  And it's an easy one to make.\\r\n</p>\\r\n<p>\\r\nRemember\nthat the single `=` sign does assignment and it actually *also* evaluates\nto true.  This means that if you stick it in an `if` statement, that `if`\nstatement will <i>always</i> be true.\\r\n</p>\\r\n<p>\\r\nOne strategy to avoid\nthis mistake is to **read code aloud in your head** and don't even use the\nsingle word \"equal\":\\r\n<li> think **\"gets\"** every time you see `=`</li>\\r\n<li>\nthink **\"equal-equal\"** every time you see `==` </li>\\r\n</p>\\r\n<p>\\r\nIf\nyou get in the habit of thinking that way, these mistakes are easier to catch.  For\nexample you'd see this:<br>\\r\n`if (count = 20)`<br>\\r\nand read:<br>\\r\n<i>\"if\ncount gets 20\"</i> ...and know that that doesn't make sense.\\r\n</p>\\r\n\\r\n<p></p>\\r\n</details>\\r\n\\r\n"
      U3L15 - Simple If-statements in UpDown App_markdown_instruction: "# Add Your\nOwn *if* Statement\\r\n\\r\nIn most apps you want to make decisions based on\nthe state of some data you're keeping track of in the app.  \\r\n\\r\nWe've\n**modified** the *Count Up/Down App* to add another screen.  When the count\nreaches certain values, we'll switch screens.  In the code you'll see an\n`if` statement has been added to the event handler for up arrow that states:\\r\n\\r\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\\r\n\\r\n\n* **If** the value of `count` is equal to **20, then** set the screen to *\"gameOverScreen\"*.\\r\n<img\nsrc=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\n# Do This:\\r\n**Add an `if` statement\nso that when counting down the app changes screens when the count reaches\n-5. **\\r\n\\r\n* **Run the app** and click the up arrow 20 times to see what\nhappens when the `if` statement is triggered.\\r\n* **Study the `if` statement**\nfor the up arrow button to see how it works.\\r\n* **Add an `if` statement**\nto the down arrow event handler:\\r\n\\t* **If** `count` is equal to **-5, then**\nset the screen to the \"gameOverScreen.\"\\r\n* **Goal:** Once you're finished,\nclicking the down arrow in the app should work like the animation shown to\nthe right.\\r\n\\r\n<details><summary><strong><big>HINT:</big></strong> [click\nto expand]</summary>\\r\nThere is a subtle challenge here that you need to\nset the text of the label on the <i>gameOverScreen</i> when you change screens.\\r\n<p>\\r\n</p>\\r\n<b>NOTE:</b>\nYour code can call `setText` for any UI element, on any screen, at any time\n- even if the element isn't on the screen that's currently showing.\\r\n</details>\\r\n\\r\n"
      U3L15 - add code to make count down work_markdown_instruction: "# Make Count\nDown Work\\r\n\\r\n<img src=\"https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif\"\nstyle=\"float: right; width: 200px\">You now know enough about using global\nvariables (and some of the problems you might run into) to try it yourself.\\r\n\\r\nLet's\nstart with an easy task. Right now clicking the up arrow works as expected;\n**clicking the down arrow does not**. So...\\r\n\\r\n# Do This:\\r\n**Make the\ncount go down by 1 every time the down arrow is clicked**\\r\n\\r\n* Study how\nthe up arrow works, and use it as an example for writing the code for the\ndown arrow.\\r\n* Add and modify the code so that when the down arrow is clicked\nthe count goes down.\\r\n* When you're done the app should work like the animation\nshown to the right.\\r\n* HINT: Don't forget to set the text of the label.\\r\n\\r\n"
      U3L15 - clicker update score_markdown_instruction: "# Using global variables\\r\n\\r\nYou'll\nnow look at a version of the clicker game. We've set up the basic functionality\nto move the apple around the screen, and have __created a global variable\nto keep track of the score.__\\r\n\\r\n# Do this\\r\n__Add code to update the\nscore when the apple is clicked.__ Remember that you'll have to update both\nthe global variable _and_ the label text!\\r\n\\r\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\"\nstyle=\"width:200px\">"
      U3L15 - count upDown bug forget to set text_markdown_instruction: "# Bug Squash!\\r\n\\r\nThis\nprogram has a bug that doesn't produce an error. It just doesn't do what's\nexpected.  The reason is a common mistake that all programmers make.\\r\n\\r\n#\nDo This:\\r\n* **Run the program.**\\r\n* **To see the bug:**\\r\n * Click the\nup arrow about 5 times.\\r\n * Click the down arrow about 10 times.\\r\n * Click\nthe up arrow again.\\r\n* **Look at the code and fix the problem.**\\r\n* **Read\nabout the common mistake** by expanding the area below.\\r\n* **Once you've\nfixed the issue, move on.**\\r\n <p>\\r\n\\r\n</p>\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...forgetting\nto update the display after changing something in the program</big>\\r\n\\r\n\\r\n<h1>\nMisconception Alert - Changing a Variable Doesn't Change the Display</h1>\\r\n\\r\nA\ncommon misunderstanding about variables and displaying them is to think that\na text label that's displaying a variable will change when the variable changes.\nNO.  A text label is just \"dumb\" container for text.  It's similar to a\nvariable itself in that it won't change unless you explicitly tell it to.\\r\n<p></p>\\r\n<h1>Concept:\nSeparation of Program Data from How It's Viewed</h1>\\r\nMaintaining variables\nand program data is a **different task** from maintaining the display of the\napp.  Your program could actually run without updating the display at all\n- it would still be working behind the scenes; it just wouldn't be very fun\nor interesting to use.\\r\n<p></p>\\r\n</details>\\r\n\\r\n\\r\n"
      U3L15 - count upDown bug logic error wrong update_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThis program has a few different bugs. Find them and squash\nthem!\\r\n\\r\n# Do This:\\r\n* **Run the program.**\\r\n* **To see the bug:**\\r\n\n* Click the up arrow exactly twice.\\r\n \\t* Restart the program and do this\na few times - you'll notice nothing happens the first time you click.\\r\n\n* Click the down arrow several times.\\r\n* **Look at the code and fix the\nproblem.**\\r\n* **Read about the common mistake** by expanding the area below.\\r\n*\n**Once you've fixed the issue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read\nabout the common mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...updating\nthe wrong thing in the wrong event handler.</big>\\r\n<p></p>\\r\nThere are\ntwo common mistakes here:\\r\n<p></p>\\r\n1. Mixing up which event handler should\ndo what.\\r\n<p></p>\\r\n2. Updating the display **before** any change is made\nto the underlying data of the program. \\r\n\\tThis can make the app seem oddly\nout of sync where each event triggers an update to the display that reflects\nthe **last** thing done, not the current thing.\\r\n<p></p>\\r\n</details>"
      U3L15 - count upDown bug var not created globally_markdown_instruction: "#\nBug Squash!\\r\n\\r\nThis program has a few different bugs that are related\nto the same problem.\\r\n\\r\n# Do This:\\r\n* **Run the program.**\\r\n* **To\nsee the bug:**\\r\n * Click the up arrow several times.\\r\n * Click the down\narrow.\\r\n* **Look at the code and fix the problem.**\\r\n* **Read about the\ncommon mistake** by expanding the area below.\\r\n* **Once you've fixed the\nissue, move on.**\\r\n\\r\n<details>\\r\n<summary><big><strong>Read about the\ncommon mistake here...</strong></big> [click to expand]</summary>\\r\n<big>...thinking\nyou're referencing a global variable when you're not.</big><br>\\r\n\\r\nA\ncommon mistake is basically a syntax/spelling error. These mistakes can be\nreally tricky to work out because you *think* you know what you wrote, but\nthe computer doesn't see it that way :)\\r\n<p></p>\\r\n</details>\\r\n\\r\n\\r\n"
      U3L15 - global var example count up_markdown_instruction: "# Using Variables\nin Apps!\\r\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\"\nstyle=\"float: right; width: 200px;\">\\r\nThe example program here has a small\nportion of the *Count Up/Down App* written.  Right now, what the app should\ndo is  shown in the animation to the right.\\r\n\\r\n# Important Concept!\\r\n\\r\nThis\nsmall functionality **demonstrates an important concept** - how to create\na variable in the app and update it when an event occurs. It may seem fairly\nstraightforward but there are some common misconceptions that we want to alert\nyou to.\\r\n\\r\n# Do This: Misconception Investigation\\r\nOver the next few\nlevels you are going to do a small investigation of two apps that do almost\nthe same thing but *one  works as expected* and *one with a bug* that demonstrates\nan important concept about using variables in apps.  Here is what you'll\ndo:\\r\n\\r\n1. **Run this app, which works properly.**\\r\n * Study the code\nuntil you think you understand what's happening.\\r\n * Pay attention to the\ncode that handles the up arrow being clicked.\\r\n\\r\n2. **Run the app on the\nnext screen, which has a bug.**\\r\n * On the next screen we show you almost\nthe same app, but with a subtle problem.\\r\n * See if you can spot the difference\nand fix it.\\r\n\\r\n3. **Report what you found!**\\r\n * We'll ask you to report\nwhat you found.  It's not a quiz.  You can go back and forth until you spot\nthe problem, but you should find it and be able to write what it is.\\r\n\\r\n![]()"
      U3L15 - mini clicker update score_markdown_instruction: "# Using Global Variables\\r\n\\r\nYou'll\nnow look at a version of the clicker game. We've set up the basic functionality\nto move the apple around the screen, and have __created a global variable\nto keep track of the score.__\\r\n\\r\n# Do This:\\r\n__Add code to update the\nscore when the apple is clicked.__ Remember that you'll have to update both\nthe global variable _and_ the label text!\\r\n\\r\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\"\nstyle=\"width:200px\">"
      U3L15 - practice with setText_markdown_instruction: "# Changing Elements on\nScreen \\r\n\\r\nThere's another way to display text in your app besides `console.log`\nand `write`.  \\r\n\\r\nThere is a command called `setText` which will **change\nthe text of a component on screen** given its id. This is a very powerful\ntechnique and one that you will use a lot. Here's what it looks like in action....\\r\n\\r\n<img\nsrc=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\"\nstyle=\"width: 500px\">\\r\n\\r\nLet's do a **very simple** example of using\n`setText`.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\"\nstyle=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\\r\n* **Run\nthe code** in the app.\\r\n \\r\n Look at the code for the \"upArrow\" event\nhandler and how it sets the text of the label.\\r\n \\r\n* **Modify the code.**\\r\n\n\\r\n When the down arrow is clicked, set the text of the label to something\nelse.\\r\n\\r\n* **GOAL:**\\r\n * Your only goal is to successfully use `setText`\nin this example app.\\r\n * The app should do something similar to the animated\nexample at right.\\r\n\\r\nOnce you've got it functional, click Finish to move\non.\\r\n \\r\n\\r\n"
      U3L15 - variable scoping problem debugging_markdown_instruction: "# Debugging\nProblem!\\r\n\\r\n**Uh oh!** The code here is subtly different from the one\nin the previous example and **now there is a problem**.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the app** and try it to see the problem. \\r\n* **See the error.**\\r\n\n* Note that **NaN** stands for \"Not a Number\" - why would it say this?\\r\n*\n**Note the difference** between this broken version and the previous one that\nworked.\\r\n* **Fix the problem** so that it works as before."
      U3L15 click add lives_markdown_instruction: "# Tracking Lives\\r\n\\r\nIn the\ngame, the number of lives starts at 3 and decrements by 1 every time the background\nimage is clicked. Add this functionality to your game!\\r\n\\r\n# Do This:\\r\n-\n__Add your variable to keep track of lives.__\\r\n- __Add a click handler for\nthe background image.__ _ID: \"background\"_\\r\n- __When the background is\nclicked, decrement the number of lives by 1.__\\r\n\\r\n<img src=\"https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif\"\nstyle=\"width:200px;\">"
      U3L15 full clicker app_markdown_instruction: "# Make Your Own \"Clicker\" Game\\r\nYou\nwill be creating your own “clicker” game similar to the Apple Grabber game\nyou worked on in this lesson. \\r\nThe general object of the game is to click\non an element that jumps around every time you click it. You will pick your\nown theme and decide what the rules are and how to keep score.\\r\n\\r\n** Your\nMain Tasks Are To:**\\r\n\\r\n * Pick a theme for your game and add appropriate\nimages and styling.\\r\n * Add variables to track some data during gameplay.\\r\n\n* Add code to event handlers to update the variables and display appropriately.\\r\n\n\\r\n**See Activity Guide for Requirements**\\r\n\\r\nThere is a full activity\nguide and rubric for this project.  You can find a link to it in the student\nresources section for this lesson. Or ask your teacher for it.\\r\n \\r\n<img\nsrc=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\"\nstyle=\"float: right; width: 300px\">\\r\n** Template **\\r\n\\r\nThis level\nis a template for the app. You should **run it to see what it does** right\nnow. You will modify *this* template, both the design elements and the code,\nfor your project.\\r\n\\r\nThe template has 4 screens and some basic navigation\nfunctionality and event handlers set up for you.  The game play screen uses\nthe images from the Apple Grabber game, but you should replace these with\nimages related to your chosen theme.\\r\n\\r\n"
      U3L15 spot the difference variable debugging_markdown_instruction: "Respond\nto the following questions about your investigation into the bug with the\ncounting game. Feel free to go back and look at the game again (but do so\nin another tab or be sure to click \"Submit\" to save your work!):\n\n- From\nthe user's perspective, what was the difference between the first version\nof the game and the one with the bug?\n- From looking at the code, what specifically\nwas the difference between the two, and why is that an issue?\n- How did you\nfix the bug?\n"
      U3L16 - challenge say hi app_markdown_instruction: "# Introducing the  *change*\nEvent\\r\n\\r\nDid you notice with the demo digital assistant that you could\njust __type a question, hit 'enter', and the assistant would respond__?\nUp until now you've been using the click of a button to trigger getting the\ntext from an input or text area.\\r\n\\r\nYou can use a new event type to get\nthis behavior: The __'change' event__ is triggered when the user hits 'enter'\nin a text input after typing.\\r\n\\r\n\\r\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\"\nstyle=\"width:350px;\">\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\"\nstyle=\"width:250px;\">\\r\n- A __text input__ has been created for you that\nasks for a user's name.\\r\n- Attach a __'change'__ event handler to the\ntext input.\\r\n- When the 'change' event triggers, __write the user's name\nand a greeting__."
      U3L16 - chaserApp_markdown_instruction: "# Chaser Game\\r\n\\r\nYou now have\nall the skills you need to make a simple \"chaser\" game. A chaser game is\njust a game where an image runs away from your mouse.\\r\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\"\nstyle=\"float: right\">\\r\n\\r\n# Do This:\\r\n\\r\n**Create a \"Chaser Game\"**\nwhich includes the following components:\\r\n\\r\n* **Text** on the top of the\nscreen with a title or instructions for what to do.\\r\n* **An image** that\n\"runs away\" (moves randomly) based on some mouse event.\\r\n\\r\nOnce you\nhave the basic functionality down feel free to spend time adding more features\nto your application.\\r\n<br><br><br>\\r\n\\r\n"
      U3L16 - chooseImages_markdown_instruction: "# Choosing Your Own Images\\r\n\\r\nThe\nsecond parameter of the `image` command allows you to set the image to be\ndisplayed.  There are two ways to do this:\\r\n1. Provide the URL of an image\non the web.\\r\n2. Upload an image from your computer (by clicking \"choose...\").\\r\n\\r\n![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49\nPM.png)\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation for `image`**\nfor tips on how to find an image's URL and how to upload.\\r\n* **Change the\nimage** to one you've found online or from your own computer.\\r\n\\r\n**NOTE:**\nmany images are bigger than the screen of your app, so it's likely you'll\nneed to add a `setPosition` command to get it on the screen sized the way\nyou want."
      U3L16 - doubleQuotes_markdown_instruction: "# Importance of Double Quotes\\r\n\\r\nYou\nmay have noticed that the strings we've seen are **wrapped in double quotes**.\nThese double quotes **are not part of the string**. Instead this is how you\nindicate that a sequence of characters **is a string and not the name of a\nvariable**.\\r\n\\r\nAs you start writing programs with strings **it is common\nto generate errors from forgetting to place them in double quotes**. We're\ngoing to generate some of those errors now so that we can recognize them more\neasily later.\\r\n\\r\n![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **This program generates many errors**\nbecause strings were not placed in quotes.\\r\n* **Run the program** before\nyou change it to see the errors that are generated.\\r\n* **Add double quotes**\naround all the strings so that the program runs without errors.\\r\n\\r\n"
      U3L16 - intro getText_markdown_instruction: "# Getting Text Input\\r\n\\r\nAs\nwe saw a user can now type inside of a text input whenever they want, **but\nnow we'll need a way to access that text**. In order to do that you'll need\nto use the `getText` command, which you can now find in the **UI Controls**\ntab.\\r\n\\r\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24\nPM.png\" style=\"width: 150px;\">\\r\n\\r\nYou can use a `getText` command just\nlike a string within a `console.log` or `write` command. Just like with `setText`\nyou will refer to the UI element by its ID.\\r\n\\r\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54\nPM.png)\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation **  for `getText`.\\r\n*\n**Add an event handler to the Submit button** that fires when your button\nis clicked.\\r\n* **Inside the event handler** place code that will **log the\nname your user input to the console**.\\r\n\\r\n"
      U3L16 - introSetPosition_markdown_instruction: "# How to Organize the Code\\r\nAs\nyour apps get more complex you'll have to think about how to organize your\ncode so it remains readable and easy for you to locate things when debugging\nany problems.  We suggest the following convention which breaks the code into\n3 major sections:\\r\n* **Top**:  code for UI elements **and** any code for\npositioning them.\\r\n* **Middle**: code for event handlers.\\r\n* **Bottom**:\ncode for any other other functions you've written. (We don't have any of\nthese yet.)\\r\n\\r\nSo if you have some existing code and want to insert a\n`setPosition` command, you should place it after `button` but before `onEvent`\nin the code, like this:\\r\n\\r\n<img src=\"https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif\"\nstyle=\"width: 500px\">\\r\n\\r\n# Do This:\\r\n\\r\n<img src=\"https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png\"\nstyle=\"float: right; width: 175px\">\\r\n\\r\n* **Starter code** has been provided\nwhich creates two buttons and event handlers.\\r\n* **Insert** `setPosition`\ncommands for each button so they appear at the bottom of the screen (as shown).\\r\n  *\n**Remember:** in an app screen 0,0 is the top left corner and you specify\na location by how many pixels from the left and how many down from the top\nof the screen it is.  The screen is **320 by 450 pixels**."
      U3L16 - introStrings_markdown_instruction: "# Strings\\r\n\\r\nThe primary data\ntype we have used so far is **Numbers**. If we want to interact with user-submitted\ntext, however, we'll need to learn about a new data type called a **String**.  A\nstring is a **sequence of ASCII characters**.\\r\n\\r\n**Example** | **Rule**\\r\n---|---\\r\n`\"aString\"`\n| Strings **might** look a lot like a variable name but there are **many differences**.\\r\n`\"look\nat all these spaces\"` | Strings can **contain spaces**.\\r\n`\"$2 bills are\nthe coolest\"` | Strings can **contain special characters** (and even start\nwith them).\\r\n`\"11\"` | Strings might **contain only digits**. This looks\nlike a number but it is really 2 ASCII characters.\\r\n`\"\"` | Strings might\n**contain no characters**.\\r\n<br>\\r\nYou can **store strings in a variable\njust like a number**. In this example the variable name is `str` but you should\nchoose a name that is **descriptive and meaningful**.\\r\n\\r\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40\nPM.png)\\r\n\\r\n**Combining Strings:** often you will want to combine multiple\nstrings to create one longer string. You can do this with the `+` operator.\nThe formal name of this process is **concatenation**.\\r\n\\r\nThe program you're\nabout to see is a very simple Mad Libs app that uses strings that are created\ninside the program and  saved inside of variables. These strings are then\n**concatenated** with other strings to create a Mad Lib.\\r\n\\r\n# Do This:\\r\n\\r\n*\nThe input words of this Mad Lib are **currently set to the empty string**.\\r\n*\n**Add your own input words** and run the program to generate the Mad Lib."
      U3L16 - nameAgeTemplate_markdown_instruction: "# Text Input Elements\\r\n\\r\nSo\nfar we've been using `promptNum` as a simple way to get a number as input.\nNow that we know a little about strings were are going to create **user interface\nelements that users can use to submit text (i.e. strings) instead**. The first\nand simplest example is `textInput` which you can find in Design Mode.\\r\n\\r\n<img\nsrc=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19\nPM.png\" style=\"width: 100px\">\\r\n\\r\n# Do This\\r\n\\r\n* **Add two text\ninput elements to this program**, one for the name and one for the age of\nthe user.\\r\n* **Give your text input elements descriptive and meaningful\nIDs**\\r\n* **In Design Mode** set their default text to prompt the user for\ntheir name in age\\r\n* **Compare your app to the example below**\\r\n\\r\n<img\nsrc=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11\nPM.png\" style=\"float:left; width:200px;\">\\r\n<br>"
      U3L16 - newEventTypes_markdown_instruction: "# New Elements and Events: New\nEvent Types\\r\nYou just wrote your first program that **does not include the\nturtle**! Moving forward we're going to focus much more on programming apps\nthat use User Interface (UI) elements, but we'll keep the turtle library\naround in case you want to use it.\\r\n\\r\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06\nAM.png\" style=\"float: right\">\\r\n\\r\n**New Events**: You may have noticed\nthat the `onEvent` block has a pull-down menu for the event **type** (see\nright).\\r\n\\r\n# Do This:\\r\n\\r\n* **Experiment** with **each of the different\ntypes of mouse events** by selecting from the list. You can also read about\nthem in the documentation.\\r\n\\t* click\\r\n    * mousemove\\r\n    * movedown\\r\n    *\nmouseup\\r\n    * mouseover\\r\n* **Choose** the mouse event type you like most\nand change your event handler to use it.\\r\n* **Note:** There are some events\nthat capture keystroke events. These are interesting, but they do not work\neasily with buttons.  We'll stick to mouse events for now, and get to keys\nlater.\\r\n\\r\n**Be sure** to experiment with each one.  The next exercise\nwill quiz you on which one is which.\\r\n\\r\n"
      U3L16 - outputWithTextArea_markdown_instruction: "# Generating Text Output\\r\n\\r\nSo\nfar we've been outputting our messages to the console, but now we'd like\nto display them in the app. In order to do so we're going to be using a new\nUI element called a `textArea`. You can use `setText` with a `textArea` just\nlike you would with a `textLabel`.\\r\n\\r\n![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43\nPM.png)\\r\n\\r\nIf we want to combine user input with default text we can do\nso with **string concatenation**. Together with a `textArea` we can use this\nability to compose longer messages based on user input.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Add a `textArea`** to your app and give it a descriptive and meaningful\nID.\\r\n* **Create a variable inside your event handler** called `userMessage`\nto hold the full message that will be sent to the user.\\r\n* **Use string\nconcatenation** to compose a message from the user input.\\r\n* **Use `setText`**\nto place your `userMessage` inside the `textArea` you created.\\r\n\\r\n<img\nsrc=\"https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08\nPM.png\", style=\"width:250px;\">"
      U3L16 - setPosition to move button_markdown_instruction: "# New Elements and\nEvents: Moving Buttons with Events\\r\n\\r\nOver the next few exerises we will\nbe exploring several new user interface elements and event types. Your code\nwill be pulled forward as you progress through the exercises.\\r\n\\r\n**Moving\nPast Turtle:** We've been using buttons to move the turtle. For example,\nin the program you're about to see a button that moves the turtle to a random\nlocation on the screen. We're going to alter this program ** so that the\nbutton itself moves every time you click it**.\\r\n\\r\n**Notice** that this\nmeans that event handlers can affect the elements they are attached to, not\njust other elements!  This is an interesting technique for apps.  Now you're\ngoing to try it...\\r\n\\r\n# Do This:\\r\n* **Change the ID** of the button\nto something descriptive and meaningful.\\r\n* **Modify** your event handler\nso that **it no longer moves the turtle** but instead sets the position of\nthe button itself to a random location on the screen.\\r\n\\t* TIP: add `setPosition`\nto the event handler, and just move the `randomNumber` calls from the turtle.\\r\n\\t*\nRecall the screen is **320 by 450 pixels**.\\r\n\\r\n**Before** | **After**\\r\n---|---\\r\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)\n| <img src=\"https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif\"\nstyle=\"width: 150px\">\\r\n\\r\n\\r\n"
      U3L16 - setupMoveToRandom_markdown_instruction: "# New Elements and Events:\nRandom Movement\\r\n\\r\nOver the next several exerises we will be exploring\nseveral new user interface elements and event types. Your code will be pulled\nforward as you progress through the exercises.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\nCode:** To begin you have been provided a single button and event handler\nwhich moves the turtle forward.\\r\n\\r\n**Modify** the program so that when\nthe button is clicked the turtle moves to a random location on the screen.\\r\n\\r\n**Change\nthe ID** of the button to something descriptive and meaningful.\\r\n\\r\n**Note:**\nRecall the screen is **320 by 450 pixels**. You'll likely want to use `moveTo`\nand `randomNumber`\\r\n\\r\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)"
      U3L16 - singleSetPosition_markdown_instruction: "# Moving and Sizing Buttons\\r\n\\r\nAn\nimportant component of designing intuitive and visually appealing user interfaces\nis the location of the elements on the screen. Using the `setPosition` command\n(now added to the Toolbox) you can move and set the size of user interface\nelements.\\r\n\\r\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48\nAM.png)\\r\n\\r\n**NOTE:**\\r\n * If you only want to set the size you can use\nthe `setSize` function which looks like this:\\r\n\\r\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\\r\n\\r\n\n* If you *only* want to set the position *without* changing the size of the\nelement, you can omit the *width* and *height* parameters from the `setPosition`\nfunction.  To do that, you need to switch into text mode, like this:\\r\n\\r\n\n<img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'\nstyle=\"width: 400px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Read the documentation**\nfor `setPosition`.\\r\n* **Starter code** has been provided which creates a\nsingle button.\\r\n* **Move the button to the middle of the screen** using\n`setPosition`, as in the image below. (You may need to experiment a little\nbit with the x,y location to get it right).\\r\n* **Remember:** in an app screen\n0,0 is the top left corner and you specify a location by how many pixels from\nthe left and how many down from the top of the screen it is.  The screen is\n**320 by 450 pixels**.\\r\n\\r\n![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05\nAM.png)\\r\n\\r\n"
      U3L16 - stringsVsNumbers_markdown_instruction: "# Strings vs. Numbers\\r\n\\r\nSome\nstrings only contain numeric digits (e.g. `\"512\"`) in which case they look\na lot like numbers. In some languages strings cannot be treated as numbers,\nbut there are instances in JavaScript where **a number will be treated like\na string or a string will be treated like a number**. This can cause unexpected\nbehavior, so it's good to see these instance beforehand.\\r\n\\r\nThe most\nfrequent instances you will see number or strings treated like the other type\nis when using **arithmetic operators** (addition, substraction, multiplication,\ndivision).\\r\n\\r\n* **Addition:** If either of the values is a string then\nthis will be treated as **string concatenation**. Only when both values are\nnumbers will it be treated as normal addition.\\r\n    * \"2\" + 3 --> \"23\"\\r\n    *\n2 + 3 --> 5\\r\n    * 2 + \"a\" --> \"2a\"\\r\n* **Multiplication/Division/Subtraction:**\nSince this operation does not exist for strings then **all values with these\noperations will be converted to numbers** if possible.\\r\n\\t* \"8\" * \"2\"\n--> 16\\r\n    * \"8\" / 2 --> 4\\r\n    * 8 - \"a\" --> NaN (an error)\\r\n  \\r\n**Note:\nIn almost all instances you will not want to use the functionality we are\nexploring here. It is important to be aware of it for debugging purposes**\\r\n\\r\n#\nDo This\\r\n\\r\n* **This exercise includes some examples of strings and numbers\nbeing combined with arithmetic operators**\\r\n* Use this level to **practice\nwith this behavior ** and then move on to complete the matching assessment\nin the next level."
      U3L16 - text labels_markdown_instruction: "# New Elements and Events: Text\nLabels\\r\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\"\nstyle=\"float: right\">\\r\nThe UI controls toolbox contains an element called\n`textLabel`. A text label is what it sounds like: plain text that you can\nput in your app. Even though it's just plain text you can still move and\nresize it using `setPosition`, and you can attach event handlers to it as\nwell.\\r\n\\r\n**NOTE:** resizing a text label does not change the font size\nof the text.  We'll learn how to do that later.  \\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read the documentation** for `textLabel`<img src=\"https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif\"\nstyle=\"float: right; width: 150px\">.\\r\n* **Modify** the program so that\nyour button is now a text label. Just as before, it should move randomly around\nthe screen when clicked. You can make the text whatever you like.\\r\n* **Tip:**\nIf you reuse your button's ID you'll only need to change a single line of\ncode to make your program work. Once you have your program working **choose\na descriptive and meaningful ID** for your text label and make the appropriate\nchanges in the event handler.\\r\n\\r\n<br>\\r\n<br>\\r\n<br>\\r\n\\r\n"
      U3L16 - textInput getText write_markdown_instruction: "# Text Input Elements\\r\n\\r\nSo\nfar we've been using `promptNum` as a simple way to get a number as input.\nNow that we know a little about strings we are going to create **user interface\nelements that users can use to submit text (i.e. strings) instead**. The first\nand simplest example is `textInput` which you can find in Design Mode.\\r\n\\r\n<img\nsrc=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19\nPM.png\" style=\"width: 100px\">\\r\n\\r\n# Do This:\\r\n\\r\n* **Add two text\ninput elements to this program**, one for the name and one for the age of\nthe user.\\r\n* **Give your text input elements descriptive and meaningful\nIDs**.\\r\n* **In Design Mode** set their default text to prompt the user for\ntheir name and age.\\r\n* **Compare your app to the example below**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11\nPM.png\" style=\"float:left; width:200px;\">\\r\n<br>"
      U3L16 - toUpper_markdown_instruction: "# String Capitalization\\r\n\\r\nIf you\nwant to change the capitalization of a string you can do so with two new functions\\r\n\\r\n![](https://images.code.org/d8523cdae7c07b34baa1c61809bb80d4-image-1445980407200.42.31\nPM.png)\\r\n\\r\nNote that the syntax is similar to `console.log` . This is\nbecause `toUpperCase` really only makes sense as a command when you are using\na **string**, just as `log` only makes sense when you are talking about the\nconsole. This function **evaluates to a new string in which all characters\nhave been made uppercase / lowercase**. If you want to update the value in\nyour original variable you'll have to do so explicitly, as in\\r\n\\r\n```\\r\nvar\nmyString = \"lower case for now\";\\r\nmyString = myString.toUpperCase();\\r\n```\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Update your application so that the user's name is printed\nin UPPERCASE**.\\r\n\\r\n<img src=\"https://images.code.org/26d8ffb7c631c1c510f781b5bf46d494-image-1445980322936.04.55\nPM.png\", style=\"width:250px;\">"
      U3L16 - use images_markdown_instruction: "# New Elements and Events: Images\\r\n\\r\n<img\nsrc=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25\nAM.png\" style=\"float: right; width: 120px\">\\r\nImages make applications\nmore visually pleasing and interactive. You can add images to your application\nusing the `image` command. For now, just add an `image` element to your app\n(the default image link is the Code.org logo) and don't worry about choosing\na unique image just yet. We'll do that in the very next exercise!\\r\n\\r\n\\r\n#\nDo This:\\r\n<img src=\"https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif\"\nstyle=\"float: right; width: 250px\">\\r\n\\r\n* **Modify** the program - change\nthe `textLabel` to an `image` so that the image moves randomly around the\nscreen based on the event you chose.\\r\n* **Tip:** If you reuse your text\nlabel's ID you'll only need to change a single line of code to make your\nprogram work! Once you have your program working though, it's probably a\ngood idea to choose a descriptive and meaningful ID for your image and make\nthe appropriate changes in the event handler.\\r\n\\r\n<br>"
      U3L16 Assessment Free Response_markdown_instruction: "Self-assess your clicker\ngame project using the rubric, then respond to this prompt:\n\nIn 100 words,\nsummarize what you learned in this activity and how you might be able to use\nyour new knowledge in future projects.\n\n\n"
      U3L16 Free Response Getting Started_markdown_instruction: "Until today, you\nhave only learned how to add buttons to a program. \n\nWhat other elements,\nin addition to buttons, do you interact with in familiar applications? \n\nBesides\nclicking on buttons, in what other ways can you get information to the program\nor tell the computer to do things?\n\n\n"
      U3L16 Free Response Wrap Up_markdown_instruction: "In the next lesson, you\nwill enhance the clicker game to make it more interesting and more fun.\n\nWhat\nfeatures would you like to add to your program?\n"
      U3L16 Mad Lib Clear Input_markdown_instruction: "# Play It Again and Again!\\r\n\\r\nWhen\nthe user clicks the \"Play again\" button, the first screen should reset and\nnot show the user's previous text.\\r\n\\r\n# Do This:\\r\n- When the \"Play\nagain\" button is clicked, __clear the text from each text input__ on Screen\n1.\\r\n- __Free play:__ Add images, or more How-to steps for your Mad Libs,\nand invite others to play!\\r\n\\r\n<img src=\"https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14\nMad Libs play again button.gif\" style=\"width:200px\">\\r\n\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nTry\nsetting the text to the empty string: `\"\"`.\\r\n</details>\\r\n"
      U3L16 Mad Lib Demo_markdown_instruction: "# Getting Text from the User\\r\n\\r\nUp\nuntil now, the event-driven apps you have created responded to the user clicking\nan element or typing a number when you used `promptNum`. __What if we want\nthe user to provide _text_ instead of a number?__ You can probably think of\nmany apps and websites that ask you to provide text in order to do something.\\r\n\\r\nIn\nprogramming, we have to represent text in a specific way to distinguish it\nfrom other words in our code, such as variable names. But we'll cover that\nlater...\\r\n\\r\nAt the beginning of class you created a Mad Libs on paper,\nwhich takes user input in the form of nouns, adjectives, and verbs to create\na unique \"How-to\" manual. You'll be translating your own Mad Libs How-to\ninto an app in this lesson.\\r\n\\r\n# Do This:\\r\n\\r\n- __Play with this Mad\nLibs app__ a couple of times to see a digital version of the paper game. \\r\n-\n__Think about how the final text is created__ based on the input from the\nuser. How would you describe in words the algorithm for creating it?"
      U3L16 Mad Lib Student Setup_markdown_instruction: "# Back to Mad Libs: Design\nYour App\\r\nNow that you've had some practice getting user text and making\nnew strings with it, you're ready to turn your How-to Mad Libs into an app.\nTo get started, you'll set up the layout. There are two main screens:\\r\n\\r\n__Screen\n1: Collect User Input__  \\r\n- On this screen, you'll use __text labels__\nand __text input__ design elements to set up the different words you want\nthe user to provide.\\r\n- A __Next__ button takes you to Screen 2 to view\nthe full Mad Libs.\\r\n\\r\n__Screen 2: View Mad Libs__  \\r\n- On this screen,\nyou'll use the __text area__ design element to create the space where the\nuser's completed Mad Libs will be displayed.\\r\n- A __Play again__ button\ntakes you to back Screen 1.\\r\n<br>\\r\n<br>\\r\n\\r\n\\r\n\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<strong>Screen\n1:</strong>\\r\n</td>\\r\n<td>\\r\n<strong>Screen 2:</strong>\\r\n</td>\\r\n</tr>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17\nPM.png\" style=\"width:150px;float:right;\">\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png\"\nstyle=\"width:151px;float:right;\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n#\nDo This:\\r\n\\r\n- Create the two screens for your app, including the design\nelements in each one.\\r\n- Requirement: Request at least 3 separate words\nfrom the user on Screen 1.\\r\n- Create the event handlers for the __Next__\nand __Play again__ buttons to respond to clicks.\\r\n- Use `setScreen` in the\nevent handlers to get the screen navigation working.\\r\n"
      U3L16 Mad Lib getText_markdown_instruction: "# Make It Mad! Add the User's\nText to Your Mad Libs Outline\\r\n\\r\nNow that you have your Mad Libs outline\nappearing in the text area, it's time to __incorporate the user's text__\nto make your Mad Libs come alive.\\r\n\\r\n# Do This:\\r\n\\r\n- Did you pick\ngood ID names for your text input elements? Update them now if you didn't!\\r\n-\nWhen the __Next__ button is clicked, __get the user's text from the text\ninputs on Screen 1 and store each in a separate variable__.\\r\n- Use string\nconcatenation to __incorporate the user's text into your Mad Labs string__\nbefore updating the text area on Screen 2. \\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nUse\n`getText` to get the text from each of the text inputs on Screen 1.\\r\n</details>\\r\n<details>\\r\n<summary>**Should\nI make local or global variables?**</summary>\\r\nRemember that the decision\nto create local variables or global variables is a question of _scope_. Where\nwill you need to access these variables in your program? If you are only using\nthe variables in the click callback function for the \"Next\" button, then\nthey can be _local_ variables in that function. \\r\n</details>"
      U3L16 Mad Lib setText_markdown_instruction: "# Update the Text Area with Your\nMad Libs Outline\\r\n\\r\nWhen figuring out how to make progress with a program,\nit helps to break the problem down into smaller steps and test your program\nincrementally. So rather than jumping straight to getting the user input and\n__concatenating__ it with your Mad Libs outline, start first by just making\nsure that you can get your Mad Libs outline to appear in the text area when\nthe __Next__ button is clicked on the first screen. \\r\n\\r\nBut wait! If you\njust use `setText` and pass in the string of your Mad Libs outline, it will\nlook like the screen on the left where all the steps are smushed together.\nYou can use one or more newline characters, `\"\\n\"`, in your string to create\na line break in your text.\\r\n\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<strong>Without\nnewlines</strong>\\r\n</td>\\r\n<td>\\r\n<strong>With newlines</strong>\\r\n</td>\\r\n</tr>\\r\n<tr>\\r\n<td>\\r\n\\r\n<img\nsrc=\"https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png\"\nstyle=\"width:201px;float:right;\">\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png\"\nstyle=\"width:200px;float:right;\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n#\nDo This:\\r\n\\r\n- When the __Next__ button is clicked, you already switch\nto Screen 2, but now you should also call `setText` on the text area on Screen\n2 to your Mad Libs outline. See the images above for one way to temporarily\nhandle the word placeholders.\\r\n- Add in newline characters `\"\\n\"` in\nyour Mad Libs string to format it.\\r\n\\r\n<details>\\r\n<summary>**Newline\nExamples**</summary>\\r\n<table style=\"width:100%; margin-left:25px;\">\\r\n<tr>\\r\n<td\nstyle=\"vertical-align: text-top; border-right:1px solid #000\">\\r\n\\t**Example1:**<br/><br/>\\r\n    \\r\n    <samp>console.log(\"How\nto Drive\\nStep 1.\");<br/><br/></samp>\\r\n    \\r\n    *will be displayed\nas...*<br/><br/>\\r\n    \\r\n    <samp>How to Drive<br/>Step 1.<br/><br/></samp>\\r\n    \\r\n    *...on\nyour console.*\\r\n</td>\\r\n<td style=\"padding-left:20px;\">\\r\n<samp>**Example2:**<br/><br/>\\r\n    \\r\n    var\nstep1 = \"Step 1: ...\";<br/>\\r\n    \\r\n    var step2 = \"Step 2: ...\";<br/>\\r\n    \\r\n    console.log(step1\n+ \"\\n\" + step2);<br/><br/></samp>\\r\n    \\r\n    *will be displayed as...*<br/><br/>\\r\n    \\r\n    <samp>Step\n1: ...<br/>Step 2: ...<br/><br/></samp>\\r\n    \\r\n    *...on your console.*\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n</details>"
      U3L16 Mad Lib toUpper_markdown_instruction: "# Why Are You Yelling At Me?!\n*toUpperCase* and *toLowerCase*\\r\n\\r\nThe main functionality of the Mad Libs\napp is complete, but there are some finishing touches to add. The user may\ntype input with random letter capitalization, but the Mad Libs output string\nshould be consistently capitalized.\\r\n\\r\n# Do This:\\r\n\\r\n- Pick one or\nmore pieces of the user's input text to transform into \"yelling\" or emphasize\nby __making it uppercase__ before displaying it.\\r\n- For the other pieces\nof the user's input text, __make it lowercase__ before displaying it.\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nRemember\nthe rules of updating variables! You can update a variable after first getting\nits current value and then doing something with it. <br> Example: `song =\nsong.toUpperCase();`\\r\n</details>"
      U3L17 - getAndSetKeyValue_markdown_instruction: "# Incrementing a Key Value\nPair\\r\n\\r\nIn order to increment a key value pair you must first know what\nvalue it contains. In other words, you will need to **first read from and\nthen write to** the same key value pair. \\r\n\\r\nYou are going to build a\nsimple app in which users can like a photo on the screen. **The number of\nlikes the image has received** will be stored in a key value pair so that\nit is persistent and **multiple users can like the image**.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Choose an image** for your app by changing the URL in design mode\\r\n* A\nkey value pair called **totalLikes** is already added to the app\\r\n* **Add\nan event handler** to the **Like** button that increments **totalLikes**.\nNote you'll need to use `getKeyValue` , `setKeyValue` , and **callback functions**\nin order to make this properly work."
      U3L17 - getKeyValue_markdown_instruction: "# Reading from Key Value Pairs\\r\n\\r\nSo\nfar we have focused on how to create and update key value pairs. Now we will\nlearn how to read from them.\\r\n\\r\n`getKeyValue` can be used to read the\nvalue stored in a key value pair. The value is actually returned to your program\nas **a parameter of the callback function**. This actually makes sense since\nyou should only be able to use the value retrieved from the server once you've\nactually received a response. As a result **any code that uses the value read\nfrom a key value pair must appear in the callback function**.\\r\n\\r\n![](https://images.code.org/c6457cacaa9fdba39fe28da5353547d9-image-1445368281726.10.05\nPM.png)\\r\n\\r\nIn the example you are about to see `getKeyValue` is used to\nread from two key value pairs. The first demonstrates how to use the parameter\nfrom the callback function to access the returned value. **You can name the\nvalue returned in the callback function anything you want**.\\r\n\\r\n# Do This\\r\n\\r\n*\nUsing the starter code to guide you, **add code to the callback function**\nof the second `getKeyValue` command to log the value stored in `userScore`,\nas in the example below.\\r\n\\r\n![](https://images.code.org/b253ed77df628cceab40474a12893dd9-image-1445368291498.11.07\nPM.png)"
      U3L17 - introCallbacks_markdown_instruction: "# Callback Functions\\r\n\\r\nMaking\nrequests to a remote server makes sequencing a set of commands more challenging,\nif not impossible. In order to address this issue the data commands include\n**an optional third parameter** called a **callback function**. A callback\nfunction is a function which **will run only after you've received confirmation\nfrom the server that it has received a request.**\\r\n\\r\n![](https://images.code.org/f82d29612f31ca3ec90353b8bc804f0a-image-1445364087348.01.13\nPM.png)\\r\n\\r\n# Ordering setKeyValue Commands\\r\n\\r\nThe program you are\nabout to see contains two `setKeyValue` commands which update the same key\nvalue pair, called `predictableBit`. Currently we cannot predict the sequence\nin which the commands will run, but if we use the **callback functions** each\nnow includes we can. \\r\n\\r\n# Do This\\r\n\\r\n* **Alter the program** so that\nthe second `setKeyValue` command appears within the **callback function**\nof the first, as in the image below.\\r\n* **Run the program multiple times**\nand check the results in the **Data Viewer** to ensure that the requests are\nnow consistently arriving in the correct order.\\r\n* **Alter the program**\nso that instead of always setting `predictableBit` to **0 and then 1** it\nalways sets it to **1 and then 0**\\r\n\\r\nBefore | After\\r\n---|---\\r\n![](https://images.code.org/b3b56f9070fdb9d5f7e6b57aa09bfdf3-image-1445365075454.17.42\nPM.png) | ![](https://images.code.org/04ad6f1a70df9ef01b3b826eb265035b-image-1445363861130.57.13\nPM.png)"
      U3L17 - introKeyValue_markdown_instruction: "# What are Key Value Pairs?\\r\n\\r\n**Key\nvalue pairs** are how you will permanently store information within your apps.\nJust like a variable a key value pair is referred to by a name (\"key\") and\nholds one piece of information (\"value\"). That said, there are some important\ndifferences between variables and key value pairs.\\r\n\\r\n# Key Value Pairs\nvs. Variables\\r\n | Key Value Pair | Variable\\r\n---|---|---\\r\n**Storage**\n| Stored on a remote server (i.e. \"in the cloud\") | Stored in your computer's\nworking memory\\r\n**Persistence** | Permanent, even if you close your app\n| Deleted when your program terminates\\r\n**Speed** | Accessed by making a\nrequest over the Internet, takes time | Accessed immediately\\r\n**Sharing**\n| All users of your app read and write to the same key value pairs | Each\nuser has their own copy of a variable\\r\n\\r\n# Data Viewer\\r\n\\r\nThe **Data\nViewer** (shown below) lets you visually explore the permanent data associated\nwith your app. You can access the Data Viewer by clicking **View Data** and\nthen **view key/value pairs**.\\r\n\\r\n![](https://images.code.org/19b2012027d8f197821e48eb9ba4647d-image-1445283825747.43.26\nPM.png)\\r\n\\r\n# Do This\\r\n\\r\n* **Access the Data Viewer** by clicking **View\nData** and then **view key/value pairs**\\r\n* A key value pair called `permanentNumber`\nhas already been added to your app\\r\n* **Change the value** stored in `permanentNumber`\nusing the **Edit** button\\r\n* **Create your own key value pair** by clicking\n**Add**. Give your key value pair any key and value you wish.\\r\n* **Reload**\nthe app (you can just refresh the tab) and confirm the data is still there\\r\n\\r\n![](https://images.code.org/e3fe8c5f10042d0ddd7f1dfe0c2a48c8-image-1445283727281.41.19\nPM.png)"
      U3L17 - readKeyValue_markdown_instruction: "# What are Key Value Pairs?\\r\n\\r\n**Key\nvalue pairs** are how you will store information permanently within your apps.\nIn some ways key value pairs act a lot like a variable. They are referred\nto by a name (their \"key\") and hold one piece of information (their \"value\").\nThat said, there are some important differences between variables and key\nvalue pairs.\\r\n\\r\n# Key Value Pairs vs. Variables\\r\n | Key Value Pair |\nVariable\\r\n---|---|---\\r\n**Storage** | Stored on a remote server (i.e. \"in\nthe cloud\") | Stored in your computer's working memory\\r\n**Persistence**\n| Permanent, even if you close your app | Deleted when your program terminates\\r\n**Speed**\n| Accessed by making a request over the Internet, takes time | Accessed immediately\\r\n**Sharing**\n| All users of your app read and write to the same key value pairs | Each\nuser has their own copy of a variable\\r\n\\r\nDon't worry about memorizing\nall of these features now as we'll be exploring them in the coming exercises.\n\\r\n\\r\n# Data Viewer\\r\n\\r\nFor now we're not even going to write any code\nwith our key value pairs. Instead you'll be using the **Data Viewer** to\nvisually explore the permanent data associated with your app. You can access\nthe Data Viewer by clicking **View Data** and then **view key/value pairs**.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Access the Data Viewer** by clicking **View Data** and\nthen **view key/value pairs**\\r\n* A key value pair called `permanentNumber`\nhas already been added to your app\\r\n* **Change the value** stored in `permanentNumber`\nusing the **Edit** button\\r\n* **Create your own key value pair** by clicking\n**Add**. Give your pair any key and value you wish.\\r\n* **Reload** the app\n(you can just refresh the tab) and confirm the data is still there"
      U3L17 - setKeyValue_markdown_instruction: "# Creating and Updating Key Value\nPairs\\r\n\\r\nThe Data Viewer is a useful way to check and interact with the\nkey value pairs in your app, but you'll also want to control them with code.\nThe commands to control the remote data in your app can be found in the **Data**\ntab which has been added to your toolbox.\\r\n\\r\nThe first command we are\ngoing to explore is the `setKeyValue`. This command is used both to **create**\nand **update** a key value pair. \\r\n\\r\n![](https://images.code.org/0d1055cf3a5c707e6a4ebcf49bbb359d-image-1445361975963.26.00\nPM.png)\\r\n\\r\nThe **key parameter** indicates the key of the key value pair\nyou wish to update (make sure you put the name in quotes). The **value parameter**\nis used to indicate what value should be stored.\\r\n\\r\n# Do This\\r\n\\r\n*\nThis app **already contains** a key value pair called `myFavoriteNumber` with\na value of **10**. You can use the **Data Viewer** to confirm this.\\r\n* **Update**\nthe key value pair `myFavoriteNumber` to have a value of **20**\\r\n* **Create\na key value pair** called `mySecondFavoriteNumber` with a value of **100**\\r\n*\n**Confirm your code worked** by checking in the **Data Viewer**\\r\n\\r\n![](https://images.code.org/1dfaff43c28185b44dd014fed0cdb8f4-image-1445288326270.58.13\nPM.png)"
      U3L17 - twoSetKeyValue_markdown_instruction: "# Unpredictability with setKeyValue\\r\n\\r\nKey\nvalue pairs are **stored remotely** on a network of servers. When you set\na key value you are actually **sending data across the Internet**, a process\nwhich **takes an unpredictable amount of time**. We actually cannot assume\nthat requests will arrive in the order they are sent.\\r\n\\r\nThe program you\nare about to see contains two `setKeyValue` commands which update the same\nkey value pair, called `unpredictableBit`.\\r\n\\r\n![](https://images.code.org/0343bc61aab6e14940a6af559074a35a-image-1445353609544.06.13\nAM.png)\\r\n\\r\nGiven the order of the commands you'd expect `unpredictableBit`\nwould be set to 0 and then 1. That said, it is possible that the requests\narrive **out of order**, leaving the value as 0 instead.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the program**\\r\n* **Open the Data Viewer** to see what value `unpredictableBit`\nwas set to.\\r\n* **Record** what value `unpredictableBit` was set to (0 or\n1)\\r\n* **Repeat the experiment** a few more times (5-10). You'll need to\n**refresh the Data Viewer** each time by reloading the tab it is in.\\r\n*\n**About what percent of the time do the `setKeyValue` requests arrive out\nof order?**"
      U3L18 Free Response Wrap Up_markdown_instruction: "Over the next few lessons,\nyou will be gathering skills and knowledge to create a clicker game of your\nown design. \nYou probably have some very cool ideas about what you want to\ndesign. And obviously, you will gather new ideas and will need to learn some\nnew programming skills. \n\nGet ready for the tasks ahead of you by assessing\nwhat you already know, and thinking about what you want to know. \nIn the\nspace below:\n\n1.  List at least 3 things you already know that will be useful\nin designing your clicker game.\n\n2.  Based upon the initial ideas of your\ngame design, list at least 3 things you want to know.\n\n\n"
      U3L18 comparison operators_markdown_instruction: "# Explore Comparison Operators\\r\n\\r\nTrue/false\ndecisions are made using boolean expressions. A __boolean expression__ is\nan expression that only evaluates to TRUE or FALSE, and you can use __comparison\noperators__ to craft boolean expressions.  \\r\n\\r\n# Do This:\\r\n\\r\nUse `console.log`\nto **print out the different boolean expressions below to see what information\nthey return**.\\r\n\\r\n| Boolean Expressions |\\r\n| --- |\\r\n| 3 > 2 |\\r\n|\n2 > 3 |\\r\n| 5 + 3 < 10 |\\r\n| ‘a’ < ‘b’ |\\r\n| ‘j’ > ‘c’ |\\r\n| 2 == 2 |\\r\n|\n2 != 2 |\\r\n| true == false |\\r\n| \"x\" == x |\\r\n| \"Blue\" == \"blue\"\n|\\r\n| x < 10 |"
      U3L18 comparison operators_for_video_markdown_instruction: "# Explore Comparison\nOperators\\r\n\\r\nTrue/false decisions are made using boolean expressions.\nA __boolean expression__ is an expression that only evaluates to TRUE or FALSE,\nand you can use __comparison operators__ to craft boolean expressions.  \\r\n\\r\n#\nDo This\\r\n\\r\nUse `console.log` to **print out the different boolean expressions\nbelow to see what information they return**.\\r\n\\r\n| Boolean Expressions\n|\\r\n| --- |\\r\n| 3 > 2 |\\r\n| 2 > 3 |\\r\n| 5 + 3 < 10 |\\r\n| ‘a’ < ‘b’ |\\r\n|\n‘j’ > ‘c’ |\\r\n| 2 == 2 |\\r\n| 2 != 2 |\\r\n| true == false |\\r\n| \"blue\"\n== blue |\\r\n| \"Blue\" == \"blue\" |\\r\n| x < 10 |"
      U3L19 - DEMO up down count practice app_markdown_instruction: "# All the basics\nyou need\\r\n\\r\nWe're going to use this very simple app to demonstrate the\nbasics of concepts involved in making the clicker game.  Yes, it's a dumb\n\"game\", but it has all the pieces of a more sophisticated game.\\r\n\\r\nThis\napp demontrates a few new concepts.  We'll step through each one, one at\na time, explaining how each thing works.  Along the way, we'll also encounter\nsome common challenges, and learn how to solve them.\\r\n\\r\n# Do This\\r\n*\nClick the up arrow until something happens\\r\n* Start over\\r\n* Click the\ndown arrow until something happens\\r\n* Start over\\r\n\\r\nOnce you think you've\nseen all the behavior click Finish to see the first part of how this is done.\\r\n\\r\n"
      U3L19 - Debugging with consoleLog_markdown_instruction: "# Debugging Variables:\nPart 4\\r\n\\r\n`console.log()` is not just useful at the end of programs. It\nis really helpful when we want to check the value of variables part way through\nthe running of a program. Since we can't see the value of the variable change\non the screen we need to find another way to get that information.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Starter Code:** We started you off with the same problem\nfrom the last level with `console.log()` statements at the beginning and end\nof the program to check the starting and ending values\\r\n\\r\n* **Add `console.log()`\nstatements** to find out the value of a and b after the first reassignment\nstatement `a = b;`"
      U3L19 - Simple If-statements in UpDown App_markdown_instruction: "# Add your\nown if statement\\r\n\\r\nIn most apps you want to make decisions based on the\nstate of some data you're keeping track of in the app.  \\r\n\\r\nWe've **modified**\nthe *Count Up/Down App* to add another screen.  When the count reaches certain\nvalues we'll switch screens.  In the code you'll see an if statment has\nbeen added to the event handler for up arrow that states:\\r\n\\r\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\\r\n\\r\n\n* **If** the value of *count* is equal to **20, then** set the screen to *\"gameOverScreen\"*.\\r\n<img\nsrc=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\"\nstyle=\"width: 150px; float: right\">\\r\n\\r\n# Do This\\r\n**Add an if statement\nso that when counting down the app changes screens when the count reaches\n-5. **\\r\n\\r\n* **Run the app** and click the up arrow 20 times to see what\nhappens when the if statement is triggered\\r\n* **Study the if statement**\nfor the up arrow button to see how it works\\r\n* **Add an if statement** to\nthe down arrow event handler:\\r\n\\t* **if** the count is equal to **-5, then**\nset the screen to the \"gameOverScreen\"\\r\n* **Goal:** Once you're done,\nclicking the down arrow in the app should work like the animation shown to\nthe right.\\r\n\\r\n<details><summary><strong><big>HINT:</big></strong> [click\nto expand]</summary>\\r\nThere is a subtle challenge here that you need to\nset the text of of the label on the <i>gameOverScreen</i> when you change\nscreens.\\r\n<p>\\r\n</p>\\r\n<b>NOTE:</b> Your code can call `setText` for any\nUI element, on any screen, at any time - even if the element isn't on the\nscreen that's currently showing.\\r\n</details>\\r\n\\r\n"
      U3L19 - Target Clicker App_markdown_instruction: "# The Goal\\r\n\\r\nWe have\nseen a couple different versions of this app before. At the end of the design\nmode lesson we made something very similar to this app. There are a couple\nnew elements in the app now. Study how those new elements work. \\r\n\\r\n#\nDo This\\r\n* Run the example program\\r\n* Investigate: What happens when you\n**click on the Code.org logo**? \\r\n* Investigate: What happens when you **click\nsomewhere else**? \\r\n* Investigate: What happens when you hit the **reset\nbutton**.   "
      U3L19 - final prompt_markdown_instruction: "Respond to your teacher's prompt\nbelow"
      U3L19 - fix the var name syntax error v2_markdown_instruction: "# Debugging\nVariables\\r\n<img src=\"https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\\r\n\"\nstyle=\"float: right; border: solid 1px black; width: 350px\">\\r\n\\r\nOne\nof the most common errors that can happen when you try to run a program is\n`Unknown identifer`.\\r\nThis is just the computer trying to tell you that\nit doesn't recognize something you wrote.  Usually it's the name of a variable\nor function that you're trying to write and there is a small misspelling.\\r\n\\r\n**The\ncomputer doesn't hate you :)** It just needs everything to be exact so it\ncan understand what you're trying to get it to do.\\r\n\\r\n**App Lab** alerts\nyou to potential errors in two ways:<img src=\"https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif\"\nstyle=\"width: 350px; float: right; border: solid 1px black\">\\r\n\\r\n* Hover\nyour mouse over the yellow triangles or red squares next to line numbers in\nthe code to see what they say.\\r\n* As usual, the Debug Console will also\ntell you about any errors while your program is running. \\r\n\\r\n# Do This:\\r\nWe've\ngiven you some code with some errors in it.  Look at the error messages and\ntry to figure out the problem.\\r\n\\r\n* **Run the program**.\\r\n* **Locate\nand fix the error**.\\r\n\\r\nWhen you get it right the output to the console\nshould look like this:\\r\n\\r\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\\r\n"
      U3L19 - fix the var name syntax error_markdown_instruction: "# Debugging Variables:\\r\n<img\nsrc=\"https://images.code.org/e65caa6cd2f3572dc38d09d6caaeb067-image-1445477367690.png\\r\n\"\nstyle=\"float: right; border: solid 1px black\">\\r\n\\r\nOne of the most common\nerrors that can happen when you try to run a program is `Unkonwn identifer`.\\r\nThis\nis just the computer trying to tell you that it doesn't recognize something\nyou wrote.  Usually it's the name of a variable or function that you're\ntrying to write and there is a small misspelling.\\r\n\\r\n**The computer doesn't\nhate you :)** It just needs everything to be exact so it can understand what\nyou're trying to get it to do.\\r\n\\r\n**App Lab** alerts you to potential\nerrors in two ways:<img src=\"https://images.code.org/f8cb1bb7d4c8989d67faa3e72e6d1d15-image-1445477022928.gif\"\nstyle=\"width: 350px; float: right; border: solid 1px black\">\\r\n\\r\n* Hover\nyour mouse over the yellow triangles or red squares next to line numbers in\nthe code to see what they say.\\r\n* As usual, the Debug Console will also\ntell you about any errors while your program is running. \\r\n\\r\n# Do This\\r\nWe've\ngiven you some code with some errors in it.  Look at the error messages snd\ntry to figure out the problem\\r\n\\r\n* **Run the program**\\r\n* **Locate and\nfix the error**\\r\n* When you get it right the output to console should look\nlike this:\\r\n\\r\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)"
      U3L19 - global var example count up_markdown_instruction: "# Using Variables\nin Apps!\\r\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\"\nstyle=\"float: right; width: 200px;\">\\r\nThe example program here has a small\nportion of the *Count Up/Down App* written.  Right now, what the app should\ndo is  shown in the animation to the right.\\r\n\\r\n# Important Concept!\\r\n\\r\nThis\nsmall functionality **demonstrates an important concept** -- how to create\na variable in the app and update it when an event occurs. It may seem fairly\nstraightforward but there are some common misconceptions that we want to alert\nyou to.\\r\n\\r\n# Do This: Misconception Investigation\\r\nOver the next few\nlevels you are going to do a small investigation of two apps that do almost\nthe same thing but *one  works as expected* and *one has with a bug* that\ndemonstrates an important concept about using variables in apps.  Here is\nwhat you'll do:\\r\n\\r\n1. **Run this app which works properly**\\r\n * Study\nthe code until you think you understand what's happening\\r\n * Pay attention\nto the code that handles the up arrow being clicked\\r\n\\r\n2. **Run the app\non the next screen which has a bug**\\r\n * On the next screen we show you\nalmost the same app, but with a subtle problem\\r\n * See if you can spot the\ndifference and fix it\\r\n\\r\n3. **Report what you found!**\\r\n * We'll ask\nyou to report what you found.  It's not a quiz.  You can go back and forth\nuntil you spot the problem, but you should find it and be able to write what\nit is.\\r\n\\r\n![]()"
      U3L19 - practice with setText_markdown_instruction: "# Changing elements on\nscreen \\r\n\\r\nThere's another way to display text in your app besides `console.log`\nand `write`.  \\r\n\\r\nThere is a command called **setText** which will **change\nthe text of a component on screen** given its id. This is a very powerful\ntechnique and one that you will use a lot. Here's what it looks like in action....\\r\n\\r\n<img\nsrc=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\"\nstyle=\"width: 500px\">\\r\n\\r\nLet's do a **very simple** example of using\n**setText**...\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\"\nstyle=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\\r\n* **Run\nthe code** in the app\\r\n \\r\n Look at the code for the 'upArrow' event\nhandler and how it sets the text of the label.\\r\n \\r\n* **Modify the code**\\r\n\n\\r\n When the down arrow is clicked, set the text of the label to something\nelse.\\r\n\\r\n* **GOAL**\\r\n * Your only goal is to successfully use `setText`\nin this example app\\r\n * The app should do something similar the animated\nexample at right.\\r\n\\r\nOnce you've got it functional, click Finish to move\non.\\r\n \\r\n\\r\n"
      U3L19 - test reassignment of two vars_markdown_instruction: "# Variable Reassignment\n- Part 1\\r\n\\r\nSo far we have only set a variable's value once.  But it's\ncalled a *variable* for a reason - its value can change (or vary) throughout\na program. This is useful and necessary for keeping track of things like a\nscore in a game.\\r\n\\r\nTo re-assign a value to a variable all you have to\ndo is maintain the mental model of what's happening:\\r\n\\r\n * Variables\nare containers for information.\\r\n * The `=` sign is an instruction to set\nthe value.\\r\n * A series of assignment statements (see example to right)\nis a list of instructions to execute one at a time - it's not a series of\nequations that define the state of the world.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\"\nstyle=\"float: right\">\\r\n\\r\n * **Make a prediction.**\\r\n\\r\n The code\non the following screen looks like what is shown at right.  Study it and make\na prediction about what will happen when you run the code. What will the values\nof `a` and `b` be at the end of the program?\\r\n\\r\n* **Add `console.log`\nstatements.** \\r\n\\r\n Prove it to yourself by adding `console.log` statements\nat the end of the program to find out what the value of `a` and  `b` are.\\r\n\n\\r\n* **NOTICE:** in the code above, after the variable `a` has been created\nusing `var`, to change a variable's value, you only need to refer to the\nvariable by its name. The word `var` only needs to be used once - when the\nvariable is created for the first time. \\r\n\\r\n* It's a **common mistake**\nto use `var` everytime you want to *use* a variable but just **remember `var`\nmeans CREATE a new variable**.  When you create a new variable it will lose\nits old value.  We'll look at errors related to this later.\\r\n\\r\n"
      U3L19 - three basic ops of variables_markdown_instruction: "# Variables Toolbox\\r\nLet's\nget started with the most basic example of using and controlling the computer's\nmemory with variables. The toolbox has a couple of new commands for working\nwith variables.\\r\n\\r\nWe've given you some starter code that does three\nthings:\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<ol>\\r\n<li>**Creates** a variable called\n`score`</li>\\r\n<li> **Assigns** the value *0* to `score`</li>\\r\n<li>**Displays**\nthe value of the `score` to the console (see hint below about quotes) </li>\\r\n</ol>\n\\r\n</td>\\r\n<td>\\r\n<img src=\"https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png\"\nstyle=\"width: 350px\">\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n# Do This:\\r\nYou're\ngoing to add another variable, assign it a value, and then display it to the\nconsole.\\r\nUse the starting code as a model for what you need to create now.\\r\n<img\nsrc=\"https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif\"\nstyle=\"float: right; width: 350px\">\\r\n* **Create a new variable** by dragging\nout the `var` block.\\r\n* **Change the name of the variable** from the default\n`x` to `lives` (see animation at right).\\r\n* **Set the value of `lives` to\nbe 3**.\\r\n* **Add** `console.log` **messages** to show the value of `lives`.\\r\n\\r\nThe\noutput in the debug console should look like this:\\r\n \\r\n  <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\"\nstyle=\"border: solid 1px gray\">\\r\n<details>\\r\n  <summary>  Debugging Tip:\nDisplaying values of variables [click to expand]</summary>\\r\n   **NOTE: To\nprint the value of a variable you *should not* use quotes.**\\r\n   Notice\nthe difference between these two statements: <br>\\r\n   `console.log(\"score\")`<br>\\r\n   `console.log(score)`<br>\\r\n   It's\nsubtle but important:\\r\n   <br>\\r\n   <li>When `console.log` sees quotation\nmarks it thinks you want to print out the literal characters in the quotes.\\r\n   <li>When\n`console.log` sees something **without quotation marks** it assumes you're\ntrying to print a variable, and it goes to retrieve its value and displays\nthat. </li>\\r\n \\r\n</details>\\r\n\\r\n![]()\\r\n\\r\n![]()"
      U3L19 - up down count practice app_markdown_instruction: "# What happened last\nlevel?\\r\n\\r\nIn JavaScript you should just think of the word var as shorthand\nfor \"create a variable\". In fact in the case of the last level the program\nthinks you want another variable names foo. This is the result of **scope**.\n\\r\n\\r\nThere are two types of variables:\\r\n\\r\n1. **Gloabl Variables** -\nCreated outside of all functions and can be seen and updated by any code.\\r\n1.\n**Local Variables** - Create inside of a function and can't be seen by any\nother code. They get created when the function is run, and they get destroyed\n(seriously) when last line of code in the function has executed. If the function\ngets run again, then the variable is created again.\\r\n\\r\nSo if you say `var`\nin front of a variable with the same name as a global variable it actually\nthinks you want another variable named foo just for this function!\\r\n\\r\n\\r\n#\nIncrementing with buttons\\r\n\\r\nCheck it out. We have started using increment\nwith a button!  Can you figure out how to set up the Down button to decrement\nthe value of count each time it is clicked?\\r\n\\r\n# Do This\\r\n\\r\n* **Try\nthe starter code.** See how the UP button works.\\r\n\\r\n* ** Set up the DOWN\nbutton** to decrease the value of count by 1 each time it is clicked.\\r\n\\r\n*\nYour app should look like the example when done."
      U3L19 - variable reassignment challenge pt2_markdown_instruction: "# Wrapping\nUp Variables - This is Not Math Class\\r\n\\r\nHopefully you now understand\nthe gist of working with variables.  The major thing to remember is that every\ntime you see an `=` sign it means that you are instructing the computer to\nset a variable to a new value.  \\r\n\\r\n<img src=\"https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png\"\nstyle=\"float: right\">\\r\nThe example to the right is something that definitely\nwouldn't make sense in math class, but you should be able to reason about\nit as a piece of code.  Because it's code, you can also **insert** statements\nto display the value of variables as they change.  You don't have to guess!\\r\n\\r\n#\nDo This:\\r\n* ** Make a prediction.** \\r\n\\r\n As usual you should **first**\nlook at the code given to you and reason about what it does.  You should try\nto predict what the value of `num` will be after all lines have executed.\\r\n\\r\n*\n** Insert 3 `console.log` statements.**\\r\n\\r\n Insert `console.log` statements\ninto the existing code to display each value of `num` immediately after it's\nchanged. (The animation below shows how to get started.)\\r\n \\r\n ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24\nadd console message.gif)\\r\n \\r\n* **Was your prediction right?**\\r\n \\r\n\nAfter you figure out the answer, if your prediction was off, try to understand\nwhy.  Where was your misunderstanding?\\r\n"
      U3L19 - variable reassignment part 1_markdown_instruction: "# Variable Reassignment\npart 1\\r\n\\r\nSo far we have only set a variable's value once.  But it's\ncalled a *variable* for a reason - its value can change (or vary) throughout\na program. This is useful and necessary for keeping track of things like a\nscore in a game.\\r\n\\r\nTo re-assign a value to a variable all you have to\ndo is maintain the mental model of what's happening:\\r\n\\r\n * Variables\nare containers for information\\r\n * The '=' sign is an instruction to set\nthe value.\\r\n * A series of assignment statements (see example to right)\nis a list of instructions to execute one at a time - it's not a series of\nequations that define the state of the world.\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\"\nstyle=\"float: right\">\\r\n\\r\n * **Make a prediction**\\r\n\\r\n The code on\nthe following screen looks like what is shown at right.  Study it rigth and\nnow and make a prediction about what will happen when you run the code. What\nwill the values of `a` and `b` be at the end of the program?\\r\n\\r\n* **Add\nconsole.log statements** \\r\n\\r\n Prove it to yourself by adding `console.log`\nstatements at the end of the program to find out what the value of a and b\nare.\\r\n \\r\n* **NOTICE:** in the code above, after the variable `a` has been\ncreated using `var`, to change  only need to refer to the variable by its\nname.  The word `var` only needs to be used once - when the variable is created\nfor the first time. \\r\n\\r\n* It's a **common mistake** to use `var` everytime\nyou want to *use* a variable but just **remember `var` means CREATE a new\nvariable**.  When you create a new variable it will lose its old value.  We'll\nlook at errors related to this later.\\r\n\\r\n"
      U3L19 - variable scope problem 2_markdown_instruction: "# Debugging Variables:\nPart 5\\r\n\\r\n\\r\n# Do This\\r\n* First run the program to see the problem.  \\r\n\\r\n*\nYou don't need to write code to solve any problem here. But you do need to\ninvestigate the code and come up with an explanation for WHY what's happening\nis happening. \\r\n\\t* Why aren't 3 things being written to the screen?  \\r\n    *\nWhy does the variable foo seem to exist once but not the other times?  \\r\n    *\nIf you switch to code mode you'll see some warning messages next to two lines\nof code -- why do you get those messages? \\r\n    \\r\n* Once you think you\nhave a good answer, continue to the next page."
      U3L19 - variable scoping problem debugging_markdown_instruction: "# Debugging\nProblem!\\r\n\\r\n**Uh oh!** The code here is subtly different from the one\nin the previous example and **now there is a problem**.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Run the app** and try it to see the problem. \\r\n* **See the error**....\\r\n\n* Note that **NaN** stands for \"Not a Number\" - why would it say this?\\r\n*\n**Note the difference** between this broken version and the previous one that\nworked\\r\n* **Fix the problem** so that it works as before"
      U3L19 - write var and string with same name v2_markdown_instruction: "# Debugging\nVariables\\r\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\"\nstyle=\"float:right; width: 200px\">There is a simple command called `write`\nin the UI Controls toolbox that is a fast and easy way to display text in\nthe app itself. The way you use it is very similar to `console.log`.  Let's\ndebug another problem only using `write` instead of `console.log`.  \\r\n\\r\nYou\nmay have already run into this problem!  But it's worth mentioning again.\nTo display the value of a variable you *should not* use quotes. Notice the\ndifference between these two statements - the comments next to each line explains\nthe differences:\\r\n``` \\r\n write(\"score\");  // will display the literal\ncharacters s-c-o-r-e\\r\n write(score);    // will retrieve the value of score\nand display it\\r\n```\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\"\nstyle=\"float: right; width: 250px\">To solve these problems you **should\nonly add or remove quotation marks**.\\r\n* **Run the starter code**\\r\n* **Locate\nand fix the problems**\\r\n\\r\n**GOAL:** Make the app display what's shown\nat right by only adding or removing quotation marks from the code given.\\r\n\\r\n![]()"
      U3L19 - write var and string with same name_markdown_instruction: "# Debugging\nVariables\\r\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\"\nstyle=\"float:right; width: 200px\">There is a simple command called `write`\nin the UI Controls toolbox that is a fast and easy way to display text in\nthe app itself. The way you use it is very similar to `console.log`.  Let's\ndebug another problem only using `write` instead of `console.log`.  \\r\n\\r\nYou\nmay have already run into this problem!  But it's worth mentioning again.\nTo display the value of a variable you *should not* use quotes. Notice the\ndifference between these two statements - the comments next each line explains\nthe differnece:\\r\n``` \\r\n write(\"score\");  // will display the literal\ncharacters s-c-o-r-e\\r\n write(score);    // will retrieve the value of score\nand display it\\r\n```\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\"\nstyle=\"float: right; width: 250px\">To solve these problems you **should\nonly add or remove quotation marks**\\r\n* **Run the starter code**\\r\n* **Locate\nand Fix the problems**\\r\n\\r\n**GOAL:** Make the app display what's shown\nat right by only adding or removing quotation marks from the code given.\\r\n\\r\n![]()"
      U3L2 Free Response Reflection_markdown_instruction: "Respond to your teacher's\nprompt in the space below.\n"
      U3L2 Using Simple Commands (no tooltips)_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>**Directions:** Given only 4 turtle commands, write code in App\nLab to complete the drawings in each of the challenges below.  Your goal is\nto write code that solves the problem as efficiently as possible using only\nthe commands provided.  \\r\n\\r\nWhat does “efficient” mean?  In computer science\nit can actually mean several different things depending on what you’re talking\nabout.  Work on these challenges, try to solve them in a way that you think\nis best and we’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L02-leftSquare.gif\"\nalign=right>**Warm up 1:** Draw a 1 x 1 square to the front and left of the\nturtle as efficiently as possible. The program should stop with turtle in\nits original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      U3L2 Using Simple Commands_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      U3L20 Assessment4_markdown_instruction: "How do you know if a program needs\na conditional statement?\n"
      U3L20 Assessment5_markdown_instruction: "How do you decide when to use an \"if\"\nstatement or \"if-else\" statement?\n"
      U3L20 Assessment6_markdown_instruction: "When using an \"if\" statement, what\nline of code is executed if the condition is false?\n"
      U3L20 Assessment7_markdown_instruction: "How do you know if the conditionals\nin your code are working correctly?\n"
      U3L20 Assessment8_markdown_instruction: "What is the result of a Boolean expression?\n\n\n"
      U3L20 Free Response Getting Started_markdown_instruction: "Think about these\nstatements. Are they true or false?\n\n    There are 7 days in the week. \n    Candy\nCrush is a fun app.\n    2 + 1 = 4\n    A beach vacation is the best.\n\nIn\n50 words, speculate on what you think it means to be true or false in a computer\ncompared to true or false in life.\n\n\n"
      U3L20 Free Response Wrap Up_markdown_instruction: "Share your game with a partner.\n\nExamine the conditional and help each other resolve any problems.\n\nWhat\nhelp or suggestions did you provide to your partner? \n\nWhat suggestions\ndid your partner offer to you that improved the decision making in your game?\n\n\n"
      U3L21 Assessment Wrap Up_markdown_instruction: "Revisit and examine the Clicker\nGame Enhancement list from Lesson 18 - Controlling Memory and Program Flow.\n\n\nWhat enhancements do you now have the knowledge and skills - related to\nvariables and conditionals - necessary to implement?\n\n\n"
      U3L22 Assessment_markdown_instruction: "Why is an inline function used in your\nclicker game to get or set a key/value pair?\n"
      U3L22 Free Response Getting Started_markdown_instruction: "In the previous\nlesson, you added a \"best score\" feature to your clicker game. It worked\nfine for multiple plays in one game-playing session. \n\nWhy doesn't it save\nyour best score from one session to the next?\"\n"
      U3L22 Reflection_markdown_instruction: "Use the rubric to assess your Clicker\nGame project. Then, reflect on your learning by answering the following questions.\n\nAnswer\nin 100 words:\n\n* What are you most proud of in this project? Why?\n\n* What\nproblems did you have?\n\n* How did you resolve them? \n\n* What did you learn\nfrom the problems? \n\n* Were some of the problems avoidable? How? \n\n* If\nyou were to do this activity again, what would you do differently?\n"
      U3L23 Chatbot Conditionals 1_markdown_instruction: "# Adding Intelligence Using\nConditionals\\r\n\\r\nSo far the digital assistant you created responds with\nthe same message no matter what the user types. Let's look at how to make\nthe digital assistant smarter. Let's work on creating a Movie Bot example\nbefore returning to your digital assistant.\\r\n\\r\nIn the last lesson we learned\nabout `if`, `else-if`, and `else` statements. These allow us to make decisions.\nIn the digital assistant we want to make decisions based on keywords. **The\nfirst keywords we want the Movie Bot to respond to are the movie genres: comedy,\nromance, action, and horror. **\\r\n\\r\n**Note: ** Check out the flowchart\nbelow to see the logic we are trying to add. The current portions of the diagram\nthat we are creating are <mark>highlighted in yellow</mark>.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Run the code** to understand what it does.\\r\n\\r\n* **Add `else-if` statements**\nto the `if` to check if the word the user typed matches **action, romance\nand horror**.  **Note:** Movie Bot will only understand input in the form\nof \"comedy\" not \"Comedy\" or \"What is a comedy?\" \\r\n\\r\n* **Add an `else`\nstatement** to print a default answer for any other input.\\r\n\\r\n<img src=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>\\r\n"
      U3L23 Chatbot Intro 1a_markdown_instruction: "So far, the digital assisant\ndoesn't do much. We'll need to start building up a conversation between\nthe user and the digital assistant. Do the tasks for the next several levels\ninside the `generateResponse` function.\\r\n\\r\n<details>\\r\n<summary>**Tips\nof the trade (click)**</summary>\\r\nThe event handler should only handle an\nevent and the actions directly related to it. Everything that is involved\nin the running of the application (such as storing the user's input inside\na variable), should be abstracted into a different function (i.e. `generateResponse`).\nIf that function starts to get complicated, you should create a *helper function*\nto help abstract some of the complexity.\\r\n</details>\\r\n\\r\n### Instructions:\\r\nThe\nfollowing instructions should be carried out within the `generateResponse`\nfunction\\r\n\\r\n* First store the user's input inside a variable (let's\ncall it `userInput`).\\r\n\\r\n* Make sure the input is correctly stored - log\nthe variable to the console\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\nIf\nI type \"What is a function?\" into the input box of my digital assistant,\nthe following lines should be logged to the console.\\r\n<br/><br/>\\r\n&nbsp;&nbsp;&nbsp;text_input\nentered text: What is a function?<br/>\\r\n&nbsp;&nbsp;&nbsp;generating response<br/>\\r\n&nbsp;&nbsp;&nbsp;What\nis a function?\\r\n</details>\\r\n<br/>\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nYou\nmay need the getText block.\\r\n</details>\\r\n\\r\n<br/>\\r\nThe next level will\ndeal with building the conversation variable"
      U3L23 Chatbot Intro 2_markdown_instruction: "Just like Siri and Cortana, you\nwill want your digital assistant to display both the user's question as well\nas its own response. How can we build a question-answer conversation?\\r\n\\r\n###\nInstructions\\r\n\\r\n* Use string concatenation to build up the conversation\nvariable\\r\n* The user's input should be stored as `User: <input>`\\r\n* The\nassistant's answer should be stored as `<name>: <default response>`\\r\n*\nOnce these phrases have been added to the conversation variable, log the variable\nto the console\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\nIf the\nuser asks \"What color is the sky?\" and my assistant's name is \"Bot\" and\nits default response is \"I don't know.\", the conversation variable should\nlog<br/><br/>\\r\n&nbsp;&nbsp;&nbsp;User: What color is the sky?Bot: I don't\nknow.\\r\n<br/><br/>\\r\n</details>\\r\n\\r\n\\r\n<details>\\r\n<summary>**String\nconcatenation review**</summary>\\r\n<ul>\\r\n<li>You can join two strings together\nby typing `var newString = str1 + str2;` if str1 and str2 are pre-existing\nvariables.</li>\\r\n<li>If you want to *append* a string to another string,\nyou can type `existingString = existingString + \"appended string\";`</li>\\r\n<li>To\nshorten things up, you can type `existingString += \"appended string\";`</li>\\r\n</ul><br/>\\r\n</details>\\r\n\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nThe\nvariables `NAME`, `conversation`, `DEFAULT_RESPONSE`, and `userInput` already\nexist\\r\n</details>\\r\n\\r\n<br/>\\r\nIn the next level, we will look at printing\nthe conversation onto the screen."
      U3L23 Chatbot Intro 2a_markdown_instruction: "Now we need to control what gets\ndisplayed onto the screen.\\r\n\\r\n### Instructions\\r\n\\r\n* Display the conversation\nonto the `text_area` element\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nYou\nmay need the `setText` block\\r\n</details>\\r\n\\r\n<br/>\\r\n**Going Further**\\r\n\\r\nAfter\nthe use types a prompt and hits \"enter/return\", the prompt should disappear\nfrom the `text_input` element; otherwise, the user will have to erase the\ninput every time s/he types a prompt.\\r\n\\r\n* Add one block to the end of\nyour event handler that will clear the `text_input`\\r\n\\r\n<br/>"
      U3L23 Chatbot Intro 3_markdown_instruction: "You have now displayed the user's\ninput on the screen, but it is all scrunched together. In this level, we will\nadd some nicer formatting by using the newline character.\\r\n\\r\n### Instructions\\r\n\\r\n*\nAdd newline characters: Your user's input and your chatbot's response should\nbe on separate lines. The character `\\n` will add a new line to your message.\nYour newline character needs to live between quotes! \\r\n\\r\n<table style=\"width:100%;\nmargin-left:25px;\">\\r\n<tr>\\r\n<td style=\"vertical-align: text-top; border-right:1px\nsolid #000\">\\r\n\\t**Example1:**<br/><br/>\\r\n    \\r\n    `write(\"Hi!\\nuh\nhuh\");`<br/><br/>\\r\n    \\r\n    *will be displayed as...*<br/><br/>\\r\n    \\r\n    Hi!<br/>uh\nhuh<br/><br/>\\r\n    \\r\n    *...on your screen.*\\r\n</td>\\r\n<td style=\"padding-left:20px;\">\\r\n    **Example2:**<br/><br/>\\r\n    \\r\n    `var\nfirstName = \"Jessica\";`<br/>\\r\n    \\r\n    `var lastName = \"Programmer\";`<br/>\\r\n    \\r\n    `write(firstName\n+ \"\\n\" + lastName);`<br/><br/>\\r\n    \\r\n    *will be displayed as...*<br/><br/>\\r\n    \\r\n    Jessica<br/>Programmer<br/><br/>\\r\n    \\r\n    *...on\nyour screen.*\\r\n</td>\\r\n</tr>\\r\n</table>"
      U3L23 Chatbot Intro 4_markdown_instruction: "Congrats! You've made a basic\npersonal assistant!\\r\n\\r\nUse this level to continue to make your personal\nassistant look and work better. \\r\n\\r\n#### Some things you can do\\r\n\\r\n*\nRequired: Add a comment before each of your functions describing what they\ndo\\r\n* Change the coloring of each object\\r\n* Change the text color\\r\n*\nUpdate the prompt and default response to seem more conversational\\r\n\\r\nIn\nthe next lesson, we will start to make your personal assistant smarter."
      U3L23 Chatbot Intro_markdown_instruction: "Time to make your own specialized\ndigital assistant! We'll be working with this a lot, so make it personalized\nand fun!\\r\n\\r\n### Instructions:\\r\n\\r\n* Choose a topic you want your digital\nassistant to specialize in. It should be something you are interested in and\nknow a lot about. Examples: Country Music, Sushi, College Football, Comedy\nMovies\\r\n\\r\n* Create your digital assistant\\r\n\\r\n\\t* Your digital assistant\nshould read the user's input and display it back to them along with some\ndefault response.\\r\n    \\r\n    * Anyone should be able to easily distinguish\nbetween the text that the user typed and the response from the digital assistant.\\r\n"
      U3L23 Digital Assistant 1_markdown_instruction: "To make a digital assistant,\nyou'll need to start by reading and displaying the user's input.\\r\n\\r\n###\nInstructions:\\r\n\\r\n* Get the user's input from the <samp>text_input</samp>\nelement.\\r\n* Set the <samp>text_area</samp> element to display the user's\ninput.\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/77d5e6fe9805bd012207db53ddc7c7d3-image-1439502867128.gif)\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nYou\nmay need to use the <samp>get_text</samp> and <samp>set_text</samp> blocks\\r\n</details>"
      U3L23 Digital Assistant 2_markdown_instruction: "Next, you need to add a response\nfrom the digital assistant. For now, just make the digital assistant say \"I\ndon't know.\"\\r\n\\r\n### Instructions:\\r\n\\r\n* After each of the user's\ninputs, print the response \"I don't know.\"\\r\n * Both the input and the\nresponse should be visible in the <samp>text_area</samp>\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/df27a7694d7fdb6b62085a9f1cd19088-image-1439503950645.gif)\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nUse\nstring concatenation! i.e. var string = \"Hello\" + \" World\";\\r\n</details>\\r\n"
      U3L23 Digital Assistant 3_markdown_instruction: "It can get annoying to have\nto delete the input every time you type a prompt for the digital assistant.\\r\n\\r\n###\nInstructions:\\r\n\\r\n* Every time the user's input is displayed in the <samp>text_area</samp>,\nclear the input from the <samp>text_input</samp>\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/fdc3c64fec527ac9d96a01d90ce71389-image-1439504453388.gif)\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nTry\nsetting the text to the empty string: \"\".\\r\n</details>"
      U3L23 Digital Assistant 4_markdown_instruction: "It makes more sense for the\nuser's prompt and the digital assistant's response to be on different lines.\nYou can use the newline character, <samp>\"\\n\"</samp>, to split a line.\\r\n\\r\n###\nInstructions:\\r\n\\r\n* Display the user's input and the digital assistant's\nresponse on different lines.\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/f00e629f9a448c975b4c5c276a191a9d-image-1439504923043.gif)</details>\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\n<table\nstyle=\"width:100%; margin-left:25px;\">\\r\n<tr>\\r\n<td style=\"vertical-align:\ntext-top; border-right:1px solid #000\">\\r\n\\t**Example1:**<br/><br/>\\r\n    \\r\n    <samp>console.log(\"Hi!\\nuh\nhuh\");<br/><br/></samp>\\r\n    \\r\n    *will be displayed as...*<br/><br/>\\r\n    \\r\n    <samp>Hi!<br/>uh\nhuh<br/><br/></samp>\\r\n    \\r\n    *...on your console.*\\r\n</td>\\r\n<td\nstyle=\"padding-left:20px;\">\\r\n<samp>**Example2:**<br/><br/>\\r\n    \\r\n    var\nfirstName = \"Jessica\";<br/>\\r\n    \\r\n    var lastName = \"Programmer\";<br/>\\r\n    \\r\n    console.log(firstName\n+ \"\\n\" + lastName);<br/><br/></samp>\\r\n    \\r\n    *will be displayed\nas...*<br/><br/>\\r\n    \\r\n    <samp>Jessica<br/>Programmer<br/><br/></samp>\\r\n    \\r\n    *...on\nyour console.*\\r\n</td>\\r\n</tr>\\r\n</table>\\r\n</details>\\r\n\\r\n"
      U3L23 Digital Assistant 5_markdown_instruction: "It's a little difficult to\ntell which line is the user's command and which line is the digital assistant's\nresponse.\\r\n\\r\n### Instructions:\\r\n\\r\n* Start the user's command with\nthe phrase \"User:\"\\r\n* Start the digital assistant's response with the\nphrase \"Bot:\"\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/0ead464a371ef792a5b5acea88b416ae-image-1439506843163.gif)\\r\n</details>\\r\n"
      U3L23 Digital Assistant 6_markdown_instruction: "Now we need to add a starting\nprompt so the user knows how the digital assistant works.\\r\n\\r\n### Instructions:\\r\n\\r\n*\nWhen the user hits Run, display the text \"I'm a generic digital assistant.\nAsk me anything!\"\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n![](https://images.code.org/255cb1cb52f04d9f8a2d2064ad599a1e-image-1439507318188.gif)\\r\n</details>\\r\n\\r\n"
      U3L23 Free Response Getting Started_markdown_instruction: "Siri is a digital\nassistant built into Apple's iOS devices, including iPhones and iPads. Watch\nthe advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\"\nsrc=\"https://www.youtube.com/embed/8ciagGASro0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect\non the prompts below:__ \n\n- What types of information does Siri respond\nto in the video?\n- What do you think Siri is paying attention to in order\nto create these answers?\n"
      U3L23 Free Response Wrap Up 2_markdown_instruction: "\"Age Bot\" is a personal\nassistant that gives information about age-related milestones in a person's\nlife. Write an algorithm so Age Bot can answer the question \"What is the\nvoting age in the United States?\"\n"
      U3L23 Free Response Wrap Up_markdown_instruction: "Identify a global problem\nthat a NLP (Natural Language Processing) application could be used to help\nsolve. \n\n* Describe the problem.\n* Explain how you think a NLP app could\ncontribute to a solution.\n* Describe how the app would interact with the\nuser. \n* What would you name the app? \n\n"
      U3L24 Assessment 3_markdown_instruction: "\nHow do you prove that your digital\nassistant works the way you want it to work? You need to provide a series\nof test cases that will allow anyone to test your digital assistant and verify\nthat it works correctly. \n\n<strong>This is a required section for your digital\nassistant</strong>\n\nIn the space below, record all keywords and keyword\ncombinations that will cause your digital assistant to produce a unique output.\nUse the following format:\n\n<br/>\n<table style=\"width:100%;\">\n  <tr>\n    <th>Format</th>\n    <th>Example</th>\n\n  </tr>\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid\n#000; width:40%;\">\nSpecialty = &lt;digital assistant's specialty here><br/><br/>\n&lt;keyword>:\n&lt;output sentence here><br/><br/>\n&lt;keyword1 AND keyword2>: &lt;output\nsentence here><br/><br/>\n&lt;\"key word phrase 3\">: &lt;output sentence\nhere><br/><br/>\n&lt;keyword5 OR keyword6>: &lt;output sentence here><br/><br/>\nDefault\nresponse: &lt;my default response here><br/><br/>\n</td>\n<td style=\"padding-left:20px;\">\nSpecialty\n= Revolutionary War<br/><br/>\nWashington: General George Washington was commander\nin chief of the Continental Army and became our first president.<br/><br/>\n\"Fourth\nof July\" OR \"4th of July\":  In July 1776, the Continental Congress officially\ndeclared independence from Britain.<br/><br/>\nsoldiers AND train: General\nFriedrich Wilhelm von Steuben trained many of the soldiers in the Continental\nArmy.<br/><br/>\nsoldiers AND hardship: Soldiers fought through cold weather,\npoor supplies, and diseases.<br/><br/>\nDefault response: I don't know much\nabout that. Try asking about George Washington or the soldiers.<br/><br/>\n</td>\n</tr>\n</table>\n\n<br/>\n\n*You\nwill be given several opportunities update this section as you add more features\nto your digital assistant.*\n\n<br/>\n\n"
      U3L24 Basic String Parsing 1_markdown_instruction: "## String Parsing\\r\n\\r\nYour\npersonal assistant can now respond to many key words. Unfortunately, it doesn't\nunderstand any keyword if it is in the middle of a sentence. We can solve\nthis problem by using the <samp>str.indexOf(searchValue)</samp> function.\n\\r\n\\r\n<samp>str.indexOf(searchValue)</samp> will return a non-negative number\nif the searchValue is somewhere in str. Otherwise, it will return -1. You\ncan use this property to set the condition in an if statement.\\r\n\\r\n<details>\\r\n<summary>**Example**\n</summary>\\r\n<pre>`\\tif (sentence.indexOf(\"word\") >= 0) {\\r\n    \\tsetText(textArea,\n\"'word' is in the sentence!\");\\r\n    }`</pre>\\r\n</details>\\r\n\\r\n###\nInstructions\\r\n\\r\n* Adjust the chained conditional to use <samp>indexOf()</samp>\ninstead of <samp>str == \"word\"</samp>\\r\n* The chef's assistant should\nrespond to a sentence that contains the word pizza or the word soup"
      U3L24 Chatbot Basic Conditionals_markdown_instruction: "# Digital Assistant\nProject\\r\n\\r\n**Your Digital Assistant Project is back!** Now that you've\nlearned how to use conditional logic to control your program flow, it's time\nto add functionality to the digital assistant you previously designed.\\r\n\\r\n#\nDo This:\\r\n\\r\n* You should have already created a flowchart to design the\nlogic for your digital assistant. \\r\n* **Use your flowchart to program your\ndigital assistant so that it \"intelligently\" responds to user input.**\\r\n\\t*\nFeel free to make changes to your existing project in Design Mode, if needed.\\r\n*\n**Test your program thoroughly** to make sure your digital assistant responds\nto user input appropriately.\\r\n* Once you're done, **submit your project!**\\r\n"
      U3L24 Chatbot Conditionals 2_markdown_instruction: "## If/else statement warm-up\\r\n\\r\nNow\nthe Color Bot only responds to the input blue! This isn't really an improvement\nfrom the bot that always had a default response for anything. Luckily, we\ncan add that default response back in by using an `else` statement.\\r\n\\r\n###\nInstructions\\r\n\\r\n* Turn the `if` statement into an `if/else` statement\nto make the bot respond \"I don't know that color.\" if the user types anything\nbesides blue."
      U3L24 Chatbot Conditionals 3_markdown_instruction: "## Chained Conditionals\\r\n\\r\nNow\nwe have a bot that responds to anything and has a special response to the\ncolor blue. How can we add a special response for more colors? By using an\n`if`/`else if`/`else` statement (read \"if\" ... \"else if\" ... \"else\").\nBy adding an `else if` statement, we create a chained conditional. \\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n<pre>`\\tif\n(yourResponse == myResponse) {\\r\n    \\tsetText(\"text_area\", \"We agree!\");\\r\n    }\nelse if (yourResponse == mySecondResponse) {\\r\n    \\tsetText(\"text_area\",\n\"We agree again!\");\\r\n    } else {\\r\n    \\tsetText(\"text_area\", \"We\ndon't agree :(\");\\r\n    }`</pre>\\r\n</details> \\r\n\\r\n### Instructions\\r\n\\r\n*\nAdjust the `if`/`else` statement to make an `if`/`else if`/`else` statement.\\r\n*\nChain multiple `else if` statements together to create unique responses for\nat least 5 different colors.\\r\n\\t* Your color bot must have a unique response\nfor the colors blue, red, and green, and for two additional colors of your\nchoice.\\r\n    \\r\n<details>\\r\n<summary>**Chaining Conditionals**</summary>\\r\nWe\ncan chain as many `else if`'s together as we want. A chained conditional\ncould look like `if`/`else if`/`else if`/.../`else if`/`else`. The chain always\nstarts with an `if`, ends with and `else`, and has only `else if`'s in between.\\r\n</details>\\r\n    \\r\n<br/>\\r\n"
      U3L24 Chatbot Keyword Record_markdown_instruction: "Now it's time to catch\nthe bugs in your own digital assistant. Your code might be working correctly\nright now, but you have to be able to **prove** it. Use the next level to\nrecord the keywords/phrases that your digital assistant responds to. \\r\n\\r\nYou\nwill have many chances to add to this record over the next few days. Remember,\nyou will not be able to earn full credit on the digital assistant project\nwithout a comprehensive record of your keywords."
      U3L24 Chatbot Nested Conditionals_markdown_instruction: "Here's your digital\nassistant again! Time to make it a little smarter.\\r\n\\r\n### Instructions\\r\n\\r\n*\nAdd the `contains` function to your digital assistant\\r\n* Add a nested conditional\nto your digital assistant so it can respond to at least two subtopics\\r\n*\nYour nested conditional should include at least 3 `else if` statements.\\r\n\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n<pre><code>if\n(contains(input, \"subtopic_1\")) {\\r\n\\tif (contains(input, \"detail_A\"))\n{\\r\n    \\tsetText(\"text_area\", \"The input contains detail_A and subtopic_1\");\\r\n    }\nelse if (contains(input, \"detail_B\")) {\\r\n    \\tsetText(\"text_area\",\n\"The input contains detail_B and subtopic_1\");\\r\n    } else if (contains(input,\n\"detail_C\")) {\\r\n    \\tsetText(\"text_area\", \"The input contains detail_c\nand subtopic_1\");\\r\n    }\\r\n} else if (contains(input, \"subtopic_2\"))\n{\\r\n\\tif (contains(input, \"detail_Z\")) {\\r\n    \\tsetText(\"text_area\",\n\"The input contains detail_Z and subtopic_2\"));\\r\n    } else if (contains(input,\n\"detail_Y\")) {\\r\n    \\tsetText(\"text_area\", \"The input contains detail_Y\nand subtopic_2\"));\\r\n    } else {\\r\n    \\tsetText(\"text_area\", \"The\ninput contains subtopic_2, but no details\"));\\r\n    }\\r\n} else {\\r\n\\tsetText(\"text_area\",\n\"The input doesn't contain any subtopics I know about\");\\r\n}</code></pre>\\r\n</details>"
      U3L24 Nested Conditionals 1_markdown_instruction: "# Adding *includes* to the\nMovie Bot\\r\n\\r\nIf our Movie Bot is asked a question like \"What is a good\ncomedy movie?\" it currently won't know how to respond, **even though the\nquestion includes one of its keywords.** By using `includes` we can allow\nour Movie Bot to sense if a keyword appears anywhere in the question.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Suggestion: Switch to Text Mode.** This will be much easier\nin Text Mode.\\r\n* **Change all your boolean expressions to use `includes`\ninstead of `==`**.\\r\n* **Test out a couple sentences with your keywords**\nto make sure the change worked.\\r\n\\r\n![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to change.\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3L24 Nested Conditionals 2_markdown_instruction: "# Nested Conditionals\\r\n\\r\nThe\nway we left the Movie Bot in the last exercise is a little strange to see\nas a user. **Currently when the input doesn't have a question mark the Movie\nBot says \"I only respond to questions.\" but it still provides a recommendation**.\nWe're going to alter our code so that the movie recommendation is only provided\nif the user asks a question.\\r\n\\r\n# Do This:\\r\n\\r\n* **Nest your movie\ngenre `if` statements** inside the \"?\" `if` statement so that **a recommendation\nis made only if a question was asked**.\\r\n* **Remove the \"That's a good\nquestion.\"** output.\\r\n* Ensure that **if your input is not a question**\nthen the response is **I only respond to questions.**\\r\n* **Test out a couple\nsentences with your keywords** to make sure the change worked.\\r\n\\r\n**Example\nInput --->** | **Output**\\r\n---|---\\r\nWhat's the best action movie? | The\nbest action movie is any James Bond movie.\\r\nI love comedy | I only respond\nto questions.\\r\n<br>\\r\n**Note: ** Check out the flowchart below to see the\nlogic we are trying to change.\\r\n\\r\n<img src=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\"\ntarget=\"_blank\">Open diagram in a new tab</a>"
      U3L24 Nested Conditionals Bugs 2_markdown_instruction: "# Debugging: Order\nof Conditionals\\r\n\\r\nHere is a simplified Movie Bot with just some logic\nto detect when the user inputs \"action\" and the different rating types.\nThere is a problem though. I can't get some of the recommendations. Can you\nhelp?\\r\n\\r\n# Do This\\r\n\\r\n* **Try out the different combinations of \"action\"\nand the movie ratings (G, PG, PG-13, and R)**.  You'll see some recommendations\ncannot be reached.  Can you figure out why?\\r\n\\r\n* ** Fix the problem with\nthe code so that all the conditions can be reached**  "
      U3L24 Nested Conditionals Bugs 3_markdown_instruction: "## #3: Nested Conditional\nRemix\\r\n\\r\nWe've updated \"Synonym Bot\" to \"Word Bot.\" It now recognizes\nthe subtopics \"synonym\" and \"define\"! Unfortunately, Word Bot doesn't\nwork correctly just yet.\\r\n\\r\n### Instructions\\r\n\\r\n* Use the \"Activity\nGuide - Debugging Conditionals\"\\r\n* Expose the bugs that still exist in\nthis program by typing inputs into the user-input box. \\r\n* Track which inputs\ncause unexpected outputs.\\r\n* Fix these bugs and prove that the program now\nworks as expected."
      U3L24 Nested Conditionals Bugs_markdown_instruction: "## #1: Why use \"else\"\nat all?\\r\n\\r\nYou may have noticed that you can simply use multiple `if`\nstatements in a row and get the same functionality that you would get by using\nchained or nested conditionals. Why not just use `if` statements?\\r\n\\r\n<br/>\\r\nThe\nshort answer is that `else if` and `else` make your life easier. \\r\n\\r\n###\nInstructions\\r\nWe've removed all the chained and nested conditionals from\nthis level. \\r\n\\r\n* Use the \"Activity Guide - Debugging Conditionals\"\\r\n*\nExpose the bugs in this problem by typing inputs into the user-input box.\n\\r\n* Track which inputs cause unexpected outputs."
      U3L24 introIncludes_markdown_instruction: "# *includes*\\r\n<img src=\"https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43\nPM.png\" style=\"width: 250px; float:right\">\\r\n\\r\nWe're going to explore\na new function called `includes`. This function can be used to check if one\nstring appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase`\nthis function is called using **dot notation**.\\r\n\\r\n# *includes* Returns\na Boolean\\r\n**`includes` is a function that returns a boolean.** In other\nwords, when the function runs it will **evaulate to either `true` or `false`**.\nThis function can be used **anywhere you would normally use a boolean expression**.\\r\n\\r\nYou've\nactually **seen a few functions that return a value before this**. `randomNumber`\nis a function that returns a number and `getText` is a function that returns\na string. In every case we've used these functions **as if they were the\ndata type they return (or evaulate to)**. Notice that in block mode these\nfunctions don't have the connectors that other commands do since they will\nbe used as a piece of data within another function.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Read the documentation** for `includes`.\\r\n* **Starter code** has been\nprovided which shows one instance where a string does include a `searchValue`\nand one where it does not.\\r\n* **Replicate the style** of these commands\nto check the rest of questions provided.\\r\n* **Create three statements of\nyour own using `includes`** making use of the `console.log` statements provided.\\r\n*\n**Once you're comfortable with this command move on.**"
      U3L25 - drag out key event_markdown_instruction: "# *keypress*\\r\n\\r\nIf we\nwant to add keyboard input to our apps we'll need to learn about how key\nevents work in App Lab. To start let's take a closer look at the `onEvent`\nblock. We already know that event handlers call a function. What we'll see\nnow is that they also **pass a parameter**. The default name for this parameter\nis simply `event` but you can change it to be anything you like. \\r\n\\r\nThe\n`event` parameter is a more complex kind of variable (called an \"Object\")\nthat we'll learn more about later. For now just know that for both mouse\nand keyboard events, the event parameter passes more information about the\nevent. In the case of key events **you can find out the key(s) that were actually\npressed by using `event.key`**.\\r\n\\r\n# Do This:\\r\n\\r\n* Drag out an `onEvent`\nblock.\\r\n* Change the ID to `screen1` and the event type to `keypress`.  \\r\n\\r\n<img\nsrc=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\"\nstyle=\"width: 450px\">\\r\n\\r\n* Once you hit **Run**, **click on the screen\nso that the keystrokes will register**.\\r\n* **Type different combinations\nof keys** and check out the results in the console. Does every key combination\nprint to the console? Some keys to try:\\r\n    * Letter keys\\r\n    * Number\nkeys\\r\n    * Shift key\\r\n    * Hold shift and letter\\r\n    * Delete key\\r\n    *\nLeft and right arrow keys\\r\n    * Press and hold a key"
      U3L25 - play sound when up key_markdown_instruction: "# Play Sound With Keys\\r\n\\r\nYou\nmay have noticed from the last couple of levels that the value of `event.key`\nis just a string which is the name of the key. As a result we can check which\nkey was pressed with a simple conditional statement.  For example to check\nfor the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\\r\n\\r\n#\nDo This:\\r\nThe **starter code provided** plays the sound whenever ANY key\nis pressed.\\r\n\\r\n* Use `console.log` to **find out the value of `event.key`\nwhen the up arrow is pressed.**\\r\n\\r\n* **Add an `if` statement** so the\nsound only plays when the when the **up arrow** is pressed."
      U3L25 Assessment_markdown_instruction: "Write a compound conditional/nested\nif statement to fit the situation:\n\nHenry and Milton flip a coin twice.\n\n\nIf the coin lands on the same side twice, Henry wins. \n\nIf the coin\nlands on different sides for each flip, Milton wins.\n"
      U3L25 Chatbot Strings_markdown_instruction: "## Adding String Manipulation\\r\n\\r\nWelcome\nback to your digital assistant! Update your digital assistant to use the things\nyou have learned about string manipulation.\\r\n\\r\n### Instructions\\r\n\\r\n**Required**:\nAdjust your digital assistant to read inputs the same way regardless of capitalization\\r\n\\r\n*\nExample: <samp>\"input\"</samp> should be evaluated the same way as <samp>\"Input\"</samp>,\n<samp>\"INPUT\"</samp>, and <samp>\"inPUt\"</samp>\\r\n    \\r\n\\t<details><summary>**Hint**</summary>You\nmay need `str.toLower()`.</details>\\r\n\\r\n<br/>\\r\n**Required**: If a user\nasks about a keyword that your digital assistant does not understand, make\nyour digital assistant respond <samp>\"I don't know what &lt;keyword> is.\"</samp>\\r\n*\n&lt;keyword> in this case represents any keyword unknown to your digital assistant.\\r\n*\nYou may assume that the user will ask in the format <samp>\"What is &lt;keyword>?\"</samp>\\r\n\\r\n\\t<details><summary>**Hint**</summary>Use\n`str.substring()`\\r\n\\t<details><summary>**Big Hint 1**</summary>The first\ninput should be `\"What is \".length`\\r\n\\t<details><summary>**Big Hint 2**</summary>The\nsecond input should be `str.length - 1`</details></details></details>"
      U3L25 Free Response 1_markdown_instruction: "What is the output of this code\nsegment?\n\n\\tvar sentence = \"This sentence contains five words?\";\n\\tvar\nspaceIndex = sentence.indexOf(\" \");\n\\tvar smallerSentence = sentence.substring(spaceIndex\n+ 1, sentence.length);\n\\tconsole.log(smallerSentence);\n\n<br/>\n"
      U3L25 Free Response 2_markdown_instruction: "What is the output of this code\nsegment?\n\n    var str = \"Hello World\";\n\\tvar worldIndex = str.indexOf(\"World\");\n\\tvar\nanswer = str.substring(worldIndex, worldIndex + \"World\".length);\n\\tconsole.log(answer);\n\n<br/>\n"
      U3L25 Free Response 3_markdown_instruction: "What is the output of this code\nsegment?\n\n\\tvar phrase = \"I am so\";\n\\tvar emotion = \"excited\";\n\\tvar\nsentence = phrase + \" \" + emotion.toUpperCase() + \"!\";\n\\tconsole.log(sentence);\n<br/>\n"
      U3L25 Free Response Getting Started_markdown_instruction: "Examine these three\nsentences.\n\n1. If you have the letter S in your name, please stand.\n\n2.\nIf you play an instrument or sing in the choir, please put your head down\non your desk.\n\n3. If the number of your home address is an even number please\nstand, otherwise please put your head down on your desk.\n\nDescribe how they\nare logically different.\n\n\n"
      U3L25 Free Response Wrap Up_markdown_instruction: "Give 2 reasons why Boolean\nstatements are important in writing efficient programs.\n"
      U3L25 String Parsing 1_markdown_instruction: "## Challenge 1\\r\n\\r\nGiven the\nstring <samp>\"Wisdom begins with wonder.\"</samp> what is the index of the\nfollowing characters <samp>W</samp>, <samp>t</samp>, <samp>w</samp>, <samp>.</samp>,\n<samp>d</samp>, and <samp>k</samp>? Confirm your expectation using the <samp>string.indexOf()</samp>\nfunction."
      U3L25 String Parsing 2_markdown_instruction: "## Challenge 2.1\\r\n\\r\nUse <samp>str.length</samp>\nto find the length of the following strings:\\r\n\\r\n1. <samp>“Hello World”</samp>\\r\n\\r\n1.\n<samp>“Computer science rocks!\"</samp>\\r\n\\r\n1. <samp>“I promise to do my\nhomework every day.”</samp>\\r\n"
      U3L25 String Parsing 3_markdown_instruction: "## Challenge 2.2\\r\n\\r\nWrite\na password length checker that writes “yes” to the console if a string has\na length greater than 10, or “no” if its length is less than or equal to 10.\\r\n\\r\nTest\nyour function using two strings, one that will satisfy each conditional option."
      U3L25 String Parsing 4_markdown_instruction: "## Challenge 3\\r\n\\r\nYou are\ngiven the string <samp>\"Wisdom begins with wonder.\"</samp> Use the <samp>string.substring(begin,\nend)</samp> function to print \"begin\" and \"nder\" to the console."
      U3L25 String Parsing 5_markdown_instruction: "## Challenge 3.1\\r\n\\r\nWhat\nif somebody changes the string from <samp>\"Wisdom begins with wonder.\"</samp>\nto <samp>\"Does wisdom begin with wonder?\"</samp>? Even though \"begin\"\nand \"nder\" still exist in the string, the solution to the last level will\nno longer work. \\r\n\\r\n### Instructions\\r\n\\r\n* Fill in the function, <samp>findBeginNder()</samp>\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\n* This function should print the strings *and*\ntheir index to the console. \\r\n* Test the function on all of the sample inputs.\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nYou\nmay need <samp>string.indexOf(substring)</samp> and <samp>substring.length</samp><br/>\\r\n<details>\\r\n<summary>**Big\nHint**</summary>\\r\nTry using <samp>string.indexOf(\"word\")</samp> and <samp>(str.indexOf(\"word\")\n+ \"word\".length)</samp> as your inputs into <samp>string.substring()</samp>\\r\n</details>\\r\n<br/>\\r\n</details>\\r\n\\r\n"
      U3L25 String Parsing 6_markdown_instruction: "## Challenge 4\\r\n\\r\nSometimes\nwe want to reorder information in strings. Write a function that takes a name\n(first last) and reorders it (last, first).\\r\n\\r\n\\tExample: “Ada Lovelace”\n-> “Lovelace, Ada”\\r\n\\r\nYour function should work for all the given sample\ninputs.\\r\n\\r\n<details>\\r\n<summary>**Hint**</summary>\\r\nUse substrings,\nlength, index of, and your prior knowledge of concatenation.<br/>\\r\n<details>\\r\n<summary>**Big\nHint**</summary>\\r\n1. Grab the first name, store it in a variable<br/>\\r\n2.\nGrab the last name, store it in a variable<br/>\\r\n3. Concatenate the last\nname, a comma, and the first name (use the \"+\" operator)\\r\n</details>\\r\n</details>\\r\n<br/>\\r\n\\r\n\\r\n<br/>"
      U3L25 String Parsing 7_markdown_instruction: "## Challenge 5: \\r\n\\r\nOther\nstring functions include <samp>str.toUpperCase()</samp> and <samp>str.toLowerCase()</samp>.\n\\r\n\\r\n### Instructions\\r\nYou are given the string <samp>var shakespeare\n= \"The earth has music for those who listen\";</samp>. \\r\n* Use each of\nthe above functions on the string <samp>shakespeare</samp>\\r\n* Output the\nresult to the console\\r\n* Record the result on your activity guide"
      U3L26 AND operator_markdown_instruction: "# AND Operator in Movie Bot\\r\n\\r\nOn\nthe last level you may have noticed that if you typed in a question like \"What\nis an R rated comedy movie?\" It gives two movie suggestions! It would make\nmore sense for it to give one suggestion.\\r\n\\r\nWe could use nested `if`\nstatements to do this by nesting `if` statements about ratings inside of `if`\nstatements about genre. However, you might be getting a sinking feeling that\nthis could become a lot of nested `if` statements very quickly! \\r\n\\r\n**Instead\nlet's use the AND operator (`&&`) to check for a genre and a rating at the\nsame time.** \\r\n\\r\n<img src=\"https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png\"\nstyle=\"width: 200px; float:right\">\\r\n\\r\nBe careful about the order of\nthe `if` statements. As a general principle you want to check the most specific\nconditions before checking more general ones.  For example, you want to have\nan `if` statement that checks for rating AND genre evaluated before one that\njust checks for genre on its own. Having a more general `if` statement checked\nfirst might cut off or prevent more specific conditions from being reached.\\r\n\\r\nYou\nstill want your app to give suggestions when just a rating or just a genre\nis detected, so keep this principle of ordering in mind. (Try them in the\nreverse order if you're interested in seeing what happens :))\\r\n\\r\n**Note:\n** Check out the flowchart below to see the logic we are trying to add.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Try the question \"What is an R rated comedy movie?**\nto see the result.\\r\n\\r\n* **Update the code to give only one movie suggestion\nwhen a genre and a rating are detected in the input.**\\r\n\\t* Make one set\nof `if`, `else-if`, and `else` statements about genre and rating\\r\n    *\nAdd conditional statements to check for a comedy movie AND a rating. You could\ndo this for all the genres but stick to one for now.\\r\n\\r\n* **Test out a\ncouple sentences with your keywords** to make sure the change worked.\\r\n\\r\n<img\nsrc=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\"\nstyle=\"width: 100%\">\\r\n\\r\n<a href=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\"\ntarget=\"_blank\">Click to open in separate window.</a>"
      U3L26 Chatbot Compound Conditionals_markdown_instruction: "Here's your digital\nassistant again! Time to make it a little smarter.\\r\n\\r\n### Instructions\\r\n\\r\n*\nAdd a compound conditional to your digital assistant\\r\n* Your digital assistant\nshould include at least one each of AND, OR, and NOT\\r\n* As you make updates\nin your digital assistant, record those changes on the next level\\r\n\\r\nDon't\nstay here too long. We still have lots to do!"
      U3L26 Chatbot Final_markdown_instruction: "Here's your digital assistant again!\nTime to make it a little smarter.\\r\n\\r\n### Instructions\\r\n\\r\n* Add a compound\nconditional to your digital assistant\\r\n* Your digital assistant should include\nat least one each of AND, OR, and NOT\\r\n\\r\nDon't stay here too long. We\nstill have lots to do!"
      U3L26 Compound Logic_markdown_instruction: "## Multiple Operators\\r\n\\r\nThe\nlogical operators AND, OR, and NOT can be combined to make more complicated\nlogic sentences. Generally, if you use more than one type of logical operator,\nyou should put them between parentheses.\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n<pre>`var\naccurate = true, correct = true, inaccurate = false, incorrect = false;\\r\nif\n(!(inaccurate || incorrect) && (accurate && correct)) {\\r\n\\tsetText(\"text_area\",\n\"It must be true!\");\\r\n} else {\\r\n\\tsetText(\"text_area\", \"Saddly, it's\nfalse.\");\\r\n}`</pre>\\r\n</details>\\r\n\\r\n### Instructions\\r\n\\r\nIn the\nlast level, we detected if a command contained the word \"bad.\" That was\nhelpful, but there are lots of other words for bad movies that we need to\ncatch.\\r\n\\r\n* Write a function called isBad that detects the words \"bad,\"\n\"worst,\" and \"terrible.\"\\r\n* If all these phrases are detected, make\nMovie Bot respond \"The top grossing animated and G-rated film in the 2000\ndecade was Finding Nemo.\"\\r\n"
      U3L26 Free Response Getting Started_markdown_instruction: "Think about interactions\nyou have experienced in conversations.\n\nHow do you know when someone you're\ntalking to is engaged in the conversation? \n\nWhat do they say that indicates\nthat they are paying attention?\n\n\n"
      U3L26 Free Response Wrap Up_markdown_instruction: "What is the output of this\ncode segment?\n\n\\tvar str = \"Hello World\";\n\\tvar worldIndex = str.indexOf(\"World\");\n\\tconsole.log(worldIndex);\n\n<br/>\n"
      U3L26 NOT operator_markdown_instruction: "## NOT Operator\\r\n\\r\nThe NOT operator\ncan be used to reverse a boolean statement. If a statements true, the NOT\noperator will evaluate to false. If the statement is false, the NOT operator\nwill evaluate to true. The NOT operator looks like \"!\" in JavaScript.\\r\n\\r\n<details>\\r\n<summary>**Example**</summary>\\r\n<pre>`if\n(!contains(sentence, \"word1\")) {\\r\n\\tsetText(\"text_area\", \"Word1 is\nnot in the sentence!\");\\r\n} else {\\r\n\\tsetText(\"text_area\", \"Word1 is\nin the sentence!\");\\r\n}`</pre>\\r\n</details>\\r\n\\r\n<details>\\r\n<summary>**Where\nis the NOT block?**</summary>\\r\n![](https://images.code.org/85c2de713a94c930611c0fd6afeaf3d6-image-1438876242202.gif)\\r\n</details>\\r\n\\r\n###\nInstructions\\r\n\\r\nMovie Bot helps people find the most popular movies.\\r\n\\r\n*\nWrite a conditional statement that detects if a command does not contain the\nphrase \"bad\"\\r\n* If \"bad\" is not detected, make Movie Bot respond normally.\nOtherwise, make Movie Bot say \"Sorry, I don't know about bad movies.\" \\r\n\\r\n"
      U3L26 OR operator_markdown_instruction: "# OR Operator in Movie Bot\\r\n\\r\nLet's\ntry to check for the keywords related to questions (\"who\", \"what\", \"where\",\n\"when\", \"why\", \"how\", and \"?\") to decide if the user asked a question.\nYou could do this with a chain of `if-else-if` statements, but it would not\nbe very efficient. \\r\n\\r\nInstead let's use a **series of OR operators (`||`)**\nto check whether \"who\", \"what\", \"where\", \"when\", \"why\", \"how\"\nor \"?\" show up in the user input. \\r\n\\r\n**Note: ** We've updated the\nthe flowchart below to show the logic we are trying to add to the initial\nquestion.\\r\n\\r\n# Do This:\\r\n\\r\n* **Update the `if` statement** to check\nif **\"who\" OR \"what\" OR \"where\" OR \"when\" OR \"why\" OR \"how\" OR\n\"?\"** have been typed in by the user.\\r\n\\r\n* **Test out a couple sentences\nwith your keywords** to make sure the change worked.\\r\n\\r\n<img src=\"https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png\"\nstyle=\"width=500px\">\\r\n"
      U3L27 Assessment1_markdown_instruction: "Assess your digital assistant using\nthe rubric.\n\nDiscuss how you incrementally developed your program. What\ndid you create first? What came next? What problems did you encounter and\nsolve? (100 words max)\n"
      U3L27 Assessment2_markdown_instruction: "What was the most significant feedback\nyou provided that helped other students review and revise their programs?\n(100 words max)\n\n"
      U3L27 Assessment3_markdown_instruction: "What was the most significant feedback\nanother student provided that helped you review and revise your program? (100\nwords max)\n"
      U3L27 Chatbot Final_markdown_instruction: "Here's your digital assistant one\nlast time.\\r\n\\r\n### Instructions\\r\n\\r\n* Make your digital assistant awesome!\\r\n*\nWhen you are finished, ask one of your classmates to test it for you using\nthe activity guide.\\r\n* Remember: as you add features to your digital assistant,\ntrack them on the next level"
      U3L27 Free Response Getting Started_markdown_instruction: "Record the first\nstep in the Think-Pair-Share activity here. \n\nThink of three ways to use\nstrings within your chatbot to make it respond more ‘intelligently’ or expand\nits ‘personality.’\n\nRecord your ideas here and then share with another classmate.\n"
      U3L28 Free Response Getting Started_markdown_instruction: "A while loop is\na process that continues as long as some condition is true. \nWe experience\nmany of them every day in our normal activities. \n\nDescribe a real-world\nexample of a while loop that you personally experience in your daily life.\n\n\nWhat is the condition that causes the loop to continue?\n"
      U3L28 Free Response Wrap Up_markdown_instruction: "In your own words, describe\nhow a while loop works. \n\nExplain two things to pay attention to when creating\nwhile loops.  \n\nIn your response justify why the name \"while loop\" accurately\ndescribes the behavior of this new programming construct.\n"
      U3L29 Free Response Getting Started_markdown_instruction: "***Think about gathering\ndata from a coin flip game.*** In addition to the number of heads and tails,\nwhat other data might be interesting to gather?\n"
      U3L29 Free Response Wrap Up_markdown_instruction: "***Describe another game\nthat depends upon random numbers.*** List three statistics that might be interesting\nto collect from 10,000 plays of that game?\n"
      U3L2_Turtle3by3Grid_markdown_instruction: "# Do This: \\r\nDraw a 3x3 grid to\nthe *front* and *right* of the turtle as efficiently as possible. The turtle\nshould end at its original location, facing its original direction.\\r\n\\r\n![](https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png)\\r\n\\r\n**HINT:**\nThis problem presents some subtle challenges. Work with your partner to discuss\npossible solutions. Try more than one path. Testing your ideas on paper might\nbe a faster way to brainstorm.\\r\n\\r\n"
      U3L2_TurtleSquare_right_markdown_instruction: "<img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\"\nalign=right> \\r\n# Do This:\\r\nThis time, draw a 1 x 1 square to the *front\nand right* of the turtle as efficiently as possible.  Notice that there is\nno command to turn right! You need to figure out how to draw this by only\nturning left and moving forward.  The program should stop with turtle in its\noriginal position, facing its original direction.\\r\n\\r\nWhen you're done\nclick the Finish button to move onto the next problem.\\r\n\\r\n"
      U3L30 Free Response Getting Started_markdown_instruction: "Why do you think\nhuman beings create lists? \n\nWhat types of lists have you created? \n\nHow\ndo you use lists?\n"
      U3L30 Free Response Wrap Up_markdown_instruction: "Complete the following sentence:\n\nToday\nI learned three things about coding arrays __________, ____________, and __________.\n\n \nBut the most important thing I learned about planning an arrays is _____________________.\n"
      U3L31 Assessment1_markdown_instruction: "Assess your photo album project with\nthe rubric. Then answer the following questions.\n\nDiscuss how you incrementally\ndeveloped your program. (100 words max)\n\n* What did you create first? \n*\nWhat came next? \n* What problems did you encounter and solve?\n"
      U3L31 Assessment2_markdown_instruction: "Describe how the feedback you gave\nto another student was helpful.(100 words max)\n\n* What was the most significant\nfeedback you provided that helped a peer review, revise and improve the program?\n\n* How did your suggestions contribute to the improvement?\n"
      U3L31 Assessment3_markdown_instruction: "What was the most significant feedback\nanother student provided to your project that helped you review, revise, and\nimprove your program? (100 words max)\n"
      U3L31 Free Response Getting Started_markdown_instruction: "List three reasons\nwhy you think that electronic photo albums are so popular.\n"
      U3L32 Free Response Getting Started_markdown_instruction: "Did you ever own\na \"lite-brite\" toy as a child? Describe how an image is created with this\ntoy. What would you have to do to change everything that is red to blue?\n"
      U3L33 Free Response Getting Started_markdown_instruction: "Describe the visual\nimpact of each of the following effects. What do you have to do to the image\nto create the desired effect?\n\n* Make an image \"warmer\"\n* Make an image\n\"cooler\"\n* Make an image \"brighter\"\n* Make an image \"darker\"\n* Make\nan image \"gray scale\"\n\n\n"
      U3L34 Free Response Getting Started_markdown_instruction: "Have you ever seen\nhidden-image stereograms...an image hidden within what appears to be a colorful\ngeometric pattern? See an example <a href=\"http://www.vision3d.com/sghidden.html\"\ntarget=\"_blank\"> here.\n\n</a>How do you think stereograms are created?\n"
      U4 - Add Row By Hand_markdown_instruction: "# Add a Record by Hand\\r\n\\r\nYou\ncan also add new records in the data table itself by clicking the \"Add row\"\nbutton.\\r\n\\r\n# Do This:\\r\n * Go to the \"mySongs\" data table.\\r\n * Click\nthe \"Add row\" button. <img src=\"https://images.code.org/403521f908a9055f4597f649deb3cfab-image-1449260729474.png\"\nstyle=\"width: 70px\">\\r\n * Enter the information for a song of your choosing.\\r\n\n\\t* If you can't think of a song use: **Don't Stop Believin'** by *Journey*.  It's\n250 seconds long.\\r\n * Once you've added a record in the data table come\nback here and continue to the next level.\\r\n\\r\n"
      U4 - Charts - Export Data_markdown_instruction: "# Exporting Data\\r\n\\r\nIn\nthe last level, you saw that **remixing a project doesn’t copy over the data**\nfrom the original project’s database. But what happens if you want to keep\nthat data and use it in your remixed app? To do that, you need to **export\nthe data** from your original app.\\r\n\\r\n**Exporting data is the opposite\nprocess of importing data.** Remember that when you imported data, you provided\nApp Lab with a CSV file of the records you wanted to add to your database.\nInversely, when you export data, **App Lab will collect all the records that\nare already in your database and put them in a CSV file** which then downloads\nto your computer.\\r\n\\r\nOnce you have the CSV file, you can import it into\nyour new project using the method you learned previously.\\r\n\\r\n# Do This:\\r\n\\r\n*\n**Open the data viewer** for the “ages” table.\\r\n* **Click the “Export” button**\nabove the table. This will download the data from your table as a CSV file.\\r\n\\r\n<img\nsrc=\"https://images.code.org/a613c249b75af817ed2468b97ee06b1f-image-1450391880690.27.00.png\"\nstyle=\"display:block; margin-left:auto; margin-right: auto;\">\\r\n\\r\n* **Remix\nthe app** again, and then **import the CSV file** you just downloaded.\\r\n*\nRun the app and **verify that the data was successfully loaded** into your\ntable. Then **come back here.**\\r\n\\r\n"
      U4 - Charts - Import Data - 1_markdown_instruction: "We can import data\\r\n\\r\nGiven\na csv file, have students import it and then go look at in the data viewer"
      U4 - Charts - Import Data 1_markdown_instruction: "# Importing Data\\r\n\\r\nYou\nalready know how to individually add new records to the tables in your database\nby using the `createRecord` command or by individually adding rows in the\nApp Lab data viewer. But **adding new records one by one can quickly become\ntedious** if you want to create several new records.\\r\n\\r\nLuckily, the data\nviewer allows you to **import data** that you’ve already collected in a **CSV\nfile**.\\r\n\\r\n<details>\\r\n<summary>What’s a CSV file? [click to expand]</summary>\\r\n\\r\nA\nCSV file is a comma-separated values file, which is a plain ASCII text file\nthat stores information from a table. Each row in the CSV file corresponds\nto a row in a table of data. The cells in each row are stored as text fields\nseparated by commas (hence the name). Because it’s a plain ASCII text document,\nCSV files are a universally-used format for sharing data. Almost all tools\nand programs for working with data - for example, Excel or Google Sheets -\nwill allow you to import and export data tables as CSV files.\\r\n</details>\\r\n<br>\\r\n\\r\nFor\neach row in your CSV file, App Lab will create a new record and populate it\nwith the information from that row.\\r\n\\r\n**Note:** Make sure that **the\nfirst row in your CSV file lists the names for each column in your table**.\nWhen you import your file, App Lab will use this row to automatically name\nthe columns in your table.\\r\n\\r\n# Do This:\\r\n\\r\nWe’ve provided you with\na CSV file of some sample data <a href=\"https://docs.google.com/spreadsheets/d/1SkbOS1SNbDpRVouU20it_QlOAF_ndtTPGqgQ6smHXJo/edit?usp=sharing\"\ntarget=\"_blank\">here</a>.\\r\n\\r\n* **Download the file to your computer.**\nMake sure you remember where you saved it!\\r\n* Open the data viewer and **view\nthe data for the table named “mytable.”**\\r\n* Click the **“Import”** button,\nthen click the **“Choose File”** button that appears.\\r\n* **Select the correct\nfile** from your directory, then click the **“Overwrite & Import”** button.\\r\n\\t*\n**Note:** When you press this button, any data that you currently have in\nyour table will be deleted and overwritten! Make sure you really want to overwrite\nyour existing data.\\r\n* When your page reloads, **your table should be populated\nwith the data from the CSV file!**\\r\n\\r\nThe animation below shows how to\nimport a CSV file using the data viewer:\\r\n\\r\n![](https://images.code.org/db9523cebd1512bee55037e4774822a0-image-1450231058543.gif)"
      U4 - Charts - Import Data 2_markdown_instruction: "# Using Imported Data\\r\nOnce\nyou’ve imported a CSV file, **you can use the data in your app using the data\ncommands you already learned.**\\r\n\\r\n# Do This:\\r\n\\r\n* Practice using\nyour newly-imported data by **calling `readRecords` on “mytable.\"**\\r\n*\nIn the callback function for `readRecords`, **print each record to the console.**"
      U4 - Charts - Line Chart 1_markdown_instruction: "You’ve seen a few examples\nof scatter charts already, but **there are other chart types that may be better-suited\nto create a visualization** from your data set. In the next few levels, you\nwill learn about one of these chart types: the **line chart.**\\r\n\\r\n# Line\nCharts\\r\n\\r\nYour database has been populated with records about the **popularity\nof different hashtags** over time. In this level, you will use this data to\n**create a line chart that shows how the popularity of “#tbt” has changed\nover time.**\\r\n\\r\n# Do This:\\r\n\\r\n* **Open the data viewer** and look\nat the data you’ve been provided.\\r\n* **Add a chart UI element** to your\napp.\\r\n* Use the `drawChartFromRecords` block to create a line chart.\\r\n\\t*\n**Make sure `chartID` matches** the ID of your UI chart.\\r\n\\t* **Change `chartType`**\nto “line.”\\r\n\\t* **Change `tableName`** to match the name of the table in\nyour database.\\r\n\\t* **Fill in the `columns` array.** For this chart, you’ll\nwant the **months since January 2012 on your x-axis** and the **#tbt popularity\non your y-axis.**\\r\n* **Run the app** and see the results.\\r\n\\t* Now that\nyour chart has meaningful labels, **what conclusions can you draw about the\ndata set?** What trends do you notice in the popularity of #tbt over time?\nWhen was the hashtag most popular? Least popular? How might this information\nbe utilized by people who use hashtags to publicize their posts?\\r\n"
      U4 - Charts - Line Chart 2_markdown_instruction: "In the last level, you may\nhave noticed that **the “hashtags” table also has a column of information\nabout a second hashtag, “#nofilter”.** Ideally, it would be helpful if your\nchart could show lines for **both** hashtags, so you could **compare the relationship**\nbetween the two.\\r\n\\r\n# Plotting Additional Columns\\r\n\\r\nFortunately,\nthe `columns` parameter allows you to add additional elements to the array.\nYou already learned that the first element in `columns` specifies which table\ncolumn to use for the x-axis of your chart. It turns out that ***each additional\nelement* will be plotted as a separate line on the y-axis.** This means that,\nif there are three elements total in `columns`, then there will be *two* separate\nlines plotted on your line chart.\\r\n\\r\nLet’s try an example of this now.\n\\r\n\\r\n# Do This:\\r\n\\r\n* Your code with the line chart from the previous\nlevel has been provided.\\r\n* **Add a third element to the `columns` array**,\nto display another line that shows the change in popularity of #nofilter over\ntime. Your code should look something like this (click image to enlarge):\\r\n\\r\n<a\nhref=\"https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png\"\ntarget=\"_blank\">![](https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png)</a>\\r\n\\r\n*\n**Run the app** and see the results.\\r\n\\t* What relationships do you notice\nbetween the two lines? What conclusions can you draw from this? Which hashtag\nwould you want to use if you were trying to publicize your post to the most\npeople?\\r\n\\r\n"
      U4 - Charts - Remixing Apps with Data_markdown_instruction: "# Remixing Apps\nThat Use Data\\r\n\\r\nLet’s say you want to **remix** a classmate’s app to\nadd some cool new features. You can do this by clicking the “Remix” button\nat the top of your screen.\\r\n\\r\n<img src=\"https://images.code.org/71f299efc9b95ab85471f6a66450af26-image-1450299352596.55.40.png\">\\r\n\\r\n**Clicking\nthe “Remix” button creates your own copy of the app**, so that you can make\nchanges and add things without affecting the original app. Remixing an app\ncopies over all the **code** and **design elements** of the original app,\nbut what happens to the **data**?\\r\n\\r\n# Do This:\\r\n* **Run this app**\nand see what it prints to the console. Open the data viewer and **see what\nrecords are stored**.\\r\n* **Remix the app** by clicking the “Remix” button\nat the top of your screen.\\r\n\\t* **Note:** This will take you out of this\nstage and bring you to a more free-form version of App Lab.\\r\n* Go **run\nthe remixed version** of the app. See what it prints to the console, look\naround in the data viewer, and then **come back here**. We’ll talk about what\nhappened in the next level.\\r\n\\r\n"
      U4 - Charts - Scatter Chart_markdown_instruction: "**Congratulations**, you\nmade a chart in your app!<br>\\r\n\\r\n<details><summary><strong>What does it\nall mean?</strong> (Click to expand)</summary><br>\\r\n\\r\nAlthough the chart\nyou created is pretty, you may have noticed that it’s still difficult to really\nunderstand what the data set represents, since neither the table nor the columns\nhave descriptive and meaningful names.<br>\\r\n\\r\nIn this level, your database\nhas been updated so that the **table and column names are more meaningful**.\nNow when you look at the data viewer, you can see that the table actually\nrepresents **Rotten Tomatoes movie ratings**, and the columns represent the\n**Tomatometer and Audience ratings**. You’re going to have to make some slight\nchanges to incorporate these new names, but first you’ll need to learn about\na few more parameters in the `drawChartFromRecords` block.\\r\n</details><br>\\r\n\\r\n#\n*drawChartFromRecords* Parameters\\r\n\\r\nYou may have noticed in the last\nlevel that the `drawChartFromRecords` block has a number of different parameters.\nYou already used the first two parameters, `chartID` and `chartType`, in the\nlast level. In this level, you will learn how to use the next two parameters:\n`tableName` and `columns`.\\r\n\\r\n![](https://images.code.org/72fe5a628ad5f4d78489863f6e1db251-image-1450395111592.png)\\r\n\\r\n\\r\nThe\n`tableName` parameter lets you specify **which table** from your database\nyou want to use to make your chart. This parameter becomes especially important\nif you have more than one table in your database.\\r\n\\r\n<img src=\"https://images.code.org/0844592b1473862203c0aeef01d2e83a-image-1450395192097.gif\"\nstyle=\"width: 200px; float: right\">\\r\nThe `columns` parameter lets you\nspecify **which columns** from your table to use when making your chart. `columns`\nis actually an **array of strings**, and **each string specifies the name\nof a column** to be used in your chart. In most cases, the **first element**\nin `columns` will represent which table column you want to use as the **x-axis**\nfor your chart. For your scatter chart, the **second element** in `columns`\nwill represent which table column you want to plot on the **y-axis**.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Open the data viewer** and look at the data you’ve been\nprovided.\\r\n* **Add a chart UI element** to your app.\\r\n* Use the `drawChartFromRecords`\nblock to **create a scatter plot.**\\r\n\\t* **Make sure `chartID` matches**\nthe ID of your UI chart.\\r\n\\t* **Change `chartType`** to “scatter.”\\r\n\\t*\n**Change `tableName`** to match the name of the table in your database. Check\nthe data viewer if you need to be reminded what your table is named.\\r\n\\t*\n**Fill in the `columns` array.** For this chart, you’ll want the **Tomatometer\nrating on your x-axis** and the **Audience rating on your y-axis.**\\r\n* **Run\nthe app** and see the results.\\r\n\\t* Now that your chart has meaningful labels,\n**what conclusions can you draw about the data set?** What relationships do\nyou see between the Tomatometer rating and the Audience rating?\\r\n\\r\n\\r\n"
      U4 - Charts - drawChartFromRecords 1_markdown_instruction: "# Visualizing Data\\r\n\\r\nSo\nfar, you’ve been able to visualize the data you collected by using `readRecords`\nand **printing out your table to the console**. But you may have found that\n**it’s hard to draw meaningful conclusions from your data** by looking at\na long list of text.\\r\n\\r\nAnother way that people visualize data is by **creating\ngraphs or charts**. When you plot information on a chart, you can more easily\nsee patterns and trends in your data, which allows you to **understand and\ndraw conclusions from your data**. In App Lab, the block that lets you chart\ndata is `drawChartFromRecords`.\\r\n\\r\n![](https://images.code.org/d03c13264c127088e6b505a30c83fde2-image-1450388738029.18.40.png)\\r\n\\r\n#\n*drawChartFromRecords*\\r\n\\r\nIn the next several levels, you will learn how\nto use a new block called `drawChartFromRecords`. This block allows you to\n**construct charts from records in your database** to create your own data\nvisualizations.\\r\n\\r\n# Do This:\\r\n\\r\n* **Open the data viewer** and see\nwhat records are stored in “mytable.”\\r\n* In Design Mode, drag a **chart**\nfrom the toolbox into your app.\\r\n\\t* Make sure you give your chart a **meaningful\nand descriptive ID**!\\r\n\\r\n![](https://images.code.org/419d63a96da5eac9989fa0cb62f0c6f3-image-1450468649142.gif)\\r\n\\r\n*\n**Drag out the `drawChartFromRecords` block.** It has some default code provided.\\r\n*\n**Change the ID** in the `drawChartFromRecords` block to match the ID of the\nchart UI element you created. **Change the chart type** from “bar” to “scatter.”\\r\n\\r\n![](https://images.code.org/3d6d79a716afb9a25e81269974615b98-image-1450389317947.gif)\\r\n\\r\n*\n**Run the program** and see the results.\\r\n\\t* **Note:** After you hit “Run,”\nit might take a moment for your chart to load the data from the database."
      U4 - Charts - drawChartFromRecords Options 1_markdown_instruction: "# Customizing\nYour Charts\\r\n\\r\nYou now have a chart that allows you to **see relationships\nand trends in your data!**\\r\n\\r\nYou may find that you want **greater control\nover the appearance of your chart**. Luckily, `drawChartFromRecords` block\nactually has another parameter that lets you customize different components\nof your chart! Let’s take advantage of that ability now to manipulate some\ncomponents of your chart.\\r\n\\r\n# The *options* Object\\r\n\\r\nIf you look\nat the `drawChartFromRecords` block, you will see that **there is an additional\nparameter after the `columns` array, called `options`**. This parameter is\nactually an object whose properties correspond to different parts of your\nchart. There are many different properties that you can set for your chart,\nbut for this level you’ll only be working with the `title` and `colors` properties.\\r\n\\r\n#\nDo This:\\r\n\\r\n* At the beginning of your program, **create a new object\ncalled `options`.**\\r\n* By default, your chart is not labeled with a title,\nbut a descriptive title will help others understand your chart more clearly.\\r\n  *\n**Set the `title` property** to “Popularity of Hashtags Over Time.”\\r\n* **Change\nthe colors of the lines for each hashtag** by setting the `colors` property.\n`colors` expects an array of strings, where each string is a color name like\n“purple” or “yellow”.\\r\n\\t* **Note:** When you set `colors`, make sure the\n**number of elements in the array matches the number of columns you’re plotting.**\nFor example, if you’re plotting two lines, you’ll need to make sure `colors`\nhas two strings - one color for each line.\\r\n* **Add your `options` object\nas an additional parameter to `drawChartFromRecords`.** Your code should now\nlook something like this (click image to enlarge):<br><a href=\"https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png\"\ntarget=\"_blank\">![](https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png)</a>\\r\n*\nRun the app and verify that your title appears above the chart and that your\nlines have new colors.\\r\n"
      U4 - Charts - drawChartFromRecords Options 2_markdown_instruction: "There are\nstill **several other chart properties that you can manipulate** using the\n`options` parameter of `drawChartFromRecords`. You can use these properties\nto change the colors in your chart, hide the legend, and much more! **Remember,\nwhen customizing your chart, it’s less about making a pretty chart and more\nabout manipulating your data so that it’s easier for others to read and understand.**\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Open the API** for the `drawChartFromRecords` block.\\r\n*\nRead through and **pick some of the other interesting options properties to\ncustomize** for your chart."
      U4 - Charts - drawChartsFromRecords 1_markdown_instruction: "Instead of using\nthe table to read out the entire table, let's visualize it by using a chart.\nHere's a new block called drawChartsFromRecords [insert image]. We're going\nto use this new block to create a scatter plot [how do they choose those options?]\\r\n\\r\nLOADING\nDATA: (just use default table name, column names, so all they have to do is\ndrag and drop the block, w/o messing with the parameters)\\r\n\\r\n# Do This:\\r\n\\r\nAdd\na screen element for charts\\r\n\\r\nPull out the drawCharts block\\r\n\\r\nMake\nthe ID match the ID they gave the screen element\\r\n\\r\nRun the program to\nsee what happens!\\r\n"
      U4 - CreateRecord - 1_markdown_instruction: "# Permanent Data Storage\\r\n\\r\nUp\nto now, all the data created in our app disappears or gets lost each time\nwe re-run the app.  You were probably frustrated, for example, that a new\ncontact added by the user didn't save permanently to the list.  We can change\nthat!\\r\n\\r\n# App Lab's Data Tools\\r\n<img src=\"https://images.code.org/5d596107387e3edcb35aa3d317b0e9f5-image-1448992686641.46.54\nPM.png\" style=\"width: 100px; float: right\"> App Lab has a set of commands\nfor storing data permanently in a database! You can write code to save data\nand then retrieve it later, even if the app has been stopped and re-started.\nAll together we call this set of commands **App Lab's Data Tools**, and they\nhave their own toolbox category called \"Data\".\\r\n\\r\n\"What's a database?\nWhere is it? How do I use it?\" It's easier to show you these things than\nexplain it all at once.  So let's get started, and we'll explain everything\nyou need to know along the way.\\r\n\\r\n# Do This:\\r\n\\r\n* **Drag out the\n`createRecord` command**. It has some default code provided.\\r\n* **Run the\nprogram**. After a brief pause, you should see the message in the console:\n**\"Success! Created record.\"**\\r\n* **What happened? What was created? Where\nis it?** After you've seen the \"success\" message, click finish to move\nto the next level.  We'll explain there.\\r\n\\r\n![](https://images.code.org/fa1c0d6f399ba181d4179838205b93e3-image-1449164742176.gif)"
      U4 - CreateRecord - 2.5_markdown_instruction: "# Databases and Tables\\r\n\\r\nA\n**database** is an organized collection of data that you access and modify.  \\r\nA\n**table** is one collection of data in a database made up of rows and columns.\\r\n\\r\n<img\nsrc=\"https://images.code.org/7d5b39f1e9d718ae8274ecf2f12941de-image-1449503932339.58.24\nAM.png\" style=\"block:left; width: 300px\">\\r\n\\r\nA table is very similar\nto a spreadsheet (like the one show above) in which individual pieces of information\ncan be referenced by a row and column. **A database in App Lab is just a collection\nof many tables**. Using App Lab's data commands you can add to and modify\nthe tables in your database.\\r\n\\r\nThe **first parameter** of `createRecord`\nspecifies the name of the table you want to add a record to.\\r\n\\r\n * If\nyou give a table name that **already exists** - App Lab will **add the data\nto that table**.\\r\n * If you give a table name that **does not exist** -\nApp Lab will **create a new table** with that name and add data to it.\\r\n\n\\r\nYou can see this in your own app by changing the name of the table in\nyour createRecord command.\\r\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/a8aff3906ed413464f6f224a163f7325-image-1449176473237.gif\"\nstyle=\"float: right; width: 300px\">\\r\n\\r\n**Your code from the previous\nexcercise** is provided.\\r\n\\r\n* **Change the name of \"mytable\"** to something\nelse.\\r\n* **Run the app.**\\r\n* **Check the Data Viewer** to see the new\ntable has been added to your database.\\r\n* **Note:** If the Data Viewer was\nalready open you will need to refresh the page to see the changes."
      U4 - CreateRecord - 2_markdown_instruction: "# Data Viewer\\r\n\\r\n**Where did\nthat data go?** App Lab's database is \"remote\" which means the data is\nstored separately from the app code on a server. A common term for this is\n\"cloud storage\".\\r\n\\r\nTo see the data you have to use the **Data Viewer**.\nYou may have noticed a button right above the app display that looks like\nthis. <img src=\"https://images.code.org/a816694aad344a14dd44fb14b26a5c64-image-1497459608411.50.42\nPM.png\" style=\"width: 80px\">\\r\n \\r\n* Click **View Data** to see all of\nthe \"tables\" in your database (We'll explain what a table is later).\\r\n*\nYou should see one table called **mytable**.  \\r\n* Click **view** to see\nall of the data stored in that table.\\r\n* **Notice** that an **id number\nwas automatically generated** for every row in the table.\\r\n![](https://images.code.org/48994996542a35a3473a14d2f99d45e2-image-1449168371760.gif)\\r\n\n\\r\n# Do This:\\r\n<img src=\"https://images.code.org/dffe4d9d3b8541189242aa95913ecfee-image-1449168144127.gif\"\nstyle=\"width: 300px; float: right\">\\r\n\\r\n* In the code, **change \"Alice\"\nto a different name** in the call to `createRecord`.\\r\n* **Run the app**\na few times by repeatedly clicking \"Run\" and \"Reset.\"\\r\n* **Check the\nData Viewer** to make sure it worked! \\r\n* **Note:** If you already had the\nData Viewer open you will need to **refresh the page** to see the changes."
      U4 - CreateRecord - 3_markdown_instruction: "# Records are Objects\\r\n\\r\n**What's\na record?**\\r\nIn database terminology, each item that is stored in table\nis called a **record**.  This is why the command is called `createRecord`.\nIn App Lab, a **record is an object**, and a data table is essentially a collection\nof JavaScript objects stored in the cloud.\\r\n\\r\n**The second parameter**\nof `createRecord` is the object you are storing in the database.\\r\n\\r\n*\nAs you have seen you can specify the object using notation like this: `{name:\"Alice\"}`\\r\n*\nBut you can **also provide an object variable** and the whole object will\nbe stored.\\r\n* App Lab **creates a column for each property of the object.**\\r\n\\r\n#\nDo This:\\r\n\\r\n**Starter code is provided** that creates a simple JavaScript\nobject representing a song.\\r\n\\r\n* Drag out the `createRecord` command.  \\r\n*\n**Set the table name** (the first parameter) to something descriptive like\n\"mySongs\".\\r\n* **Set the second parameter** to the name of the object you\nwant to store, in this case `song`.\\r\n* **Run the program.**\\r\n* In the\nData Viewer **verify that a new table was created and that the `song` object\nwas added as a record**.\\r\n\\r\n![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)"
      U4 - CreateRecord - 4_markdown_instruction: "# Messing Around with Data\\r\n\\r\n**The\nthird parameter** of `createRecord` is a callback function.  **What does it\ndo?**\\r\n\\r\n![](https://images.code.org/9a89cca8257b7dc807a1637efe121442-image-1449245629915.png)\\r\n\\r\n*\nData commands **must be sent across the Internet to a remote server**.\\r\n*\nThe database follows a **protocol** in which it **responds to every data command\nwith a message**. This message might be a piece of data you requested, or\nit could be an error message.\\r\n* You might need to use the contents of this\nresponse in your program, but because of **delays caused by sending information\nback and forth across the Internet** you don't know when you will receive\nit.\\r\n* Therefore, you create a **callback function that will be called by\nthe system when the response comes back** (in other words when the database\n\"calls back\"). The parameter of the **callback function** contains the data\nbeing sent back.\\r\n\\r\nFor `createRecord` the database **responds by sending\nback a copy of the object that was stored**. The `record` parameter of the\ncallback function contains that object.\\r\n\\r\n**Analogy**: When you made\nan event handler using `onEvent`, you also specified a callback function.  That\nfunction got called **when the user triggered the specific event you were\nwatching for**.  The callback function of a database command like `createRecord`\ngets triggered **when the database sends a message back**.  \\r\n \\r\n# Do\nThis:\\r\n\\r\n**Starter code is provided** that adds a song object to the database.\\r\n\\r\n*\n**Run the program.**\\r\n* **Look at the Data Viewer** to verify that the object\nyou just stored is actually in the database (along with a few extra songs\nwe added to start you out).\\r\n* **Notice:** The callback function now displays\nthe copy of the record that was returned by the database.\\r\n\\r\n"
      U4 - CreateRecord - 5_markdown_instruction: "# What Happens When You Change\nthe Object?\\r\n\\r\nLet's experiment by adding a property to the object and\nstoring it again.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add a property** to the song\nobject: `song.artist = \"Beyonce\"`. It should now have 3 properties: title,\nseconds, and artist.\\r\n* **Run the program** so that your updated object\nis added to the database. You shouldn't need to change anything about the\ncall to `createRecord`.\\r\n* In the Data Viewer, **confirm the new record\nwas added to the table**. You'll learn more about the changes you see in\nthe next exercise."
      U4 - Edit Data Table by Hand_markdown_instruction: "# Editing the Data Table\nby Hand\\r\n\\r\nIn the previous level, you noticed that **a new column was\nadded to the table** when you added an object that had a new property called\n\"artist\". This property is empty for the other objects in the table, since\nthey were created without it.\\r\n\\r\n![](https://images.code.org/c9bdf5a4b44f5824d083376b011b43e2-image-1449249071321.png)\\r\n\\r\n\\r\n#\nDo This:\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n*\nGo to the \"mySongs\" data table.\\r\n* Click the **Edit** button next to each\nrow and add the artist for each song already in the database.  \\r\n* For reference:\\r\n\\t*\nThriller - Michael Jackson\\r\n    * Wonderwall - Oasis\\r\n    * I Will Survive\n- Gloria Gaynor\\r\n* Since you re-added \"Single Ladies\" you can **Delete**\nthe earlier, incomplete one.\\r\n* Move on where your database has **4 songs,\neach with a title, seconds, and artist**."
      U4 - Import Data - 1_markdown_instruction: "We can import data\\r\n\\r\nGiven\na csv file, have students import it and then go look at in the data viewer"
      U4 - Objects - Template Contacts_markdown_instruction: "![](https://images.code.org/53a5bdfb7f4ec83174756c8e094558fd-image-1449518131328.png)"
      U4 - Objects - accessingPropertiesInArray_markdown_instruction: "# Manipulating\nObjects in an Array\\r\n\\r\nWhen objects are in an array, we can still **access\nthe individual properties of each object**. In order to do so, you will need\nto combine the bracket notation used with arrays and the dot notation we've\njust practiced with objects.\\r\n\\r\n**Example:** `students[2].name` would\naccess the name of the student at index 2 of the \"students\" array.\\r\n\\r\n#\nDo This:\\r\n\\r\n**You code from the previous exercise** is provided.\\r\n\\r\n*\nUse the syntax shown above **to display the `name` and `grade` of the first\nstudent in your students array.**\\r\n* Use the syntax shown above **to display\nthe `name` and `onTimeToClass` for the last student in your students array.**\\r\n\\r\n\\r\n![](https://images.code.org/2ef563646d857aa975c7970e83bf054f-image-1449517968011.52.36\nPM.png)"
      U4 - Objects - appendObject_markdown_instruction: "# Append Object\\r\n\\r\n#\nDo This"
      U4 - Objects - arraysOfObjects_markdown_instruction: "# Arrays of Objects\\r\n\\r\nOnce\nyou have a collection of objects with the same properties you'll want to\ndo more interesting things to process that data.  In this case, an easy structure\nto use is an array.  You can make **arrays of objects**.\\r\n\\r\n<img src='https://images.code.org/46bf33a97d4c6c89191bc15864891477-image-1449087125215.11.52\nPM.png'>\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous exercise**\nis provided.\\r\n\\r\n* Create an **empty array** called `students` to hold\nyour student objects.\\r\n* **Use `appendItem`** to add your student objects\nto the array.\\r\n* **Display** the `students` array with a single `console.log`\nstatement.\\r\n\\r\n![](https://images.code.org/b0e08217f5c87194feda9d48cee89090-image-1449152727737.22.28\nAM.png)"
      U4 - Objects - createContactObject_markdown_instruction: "# Create an Object\nand Add To Your Array\\r\n\\r\nNow that you have the values provided by the\nuser, you'll need to actually need to save them in your app. Within your\nevent handler for the \"Save Contact\" button, you'll need to write code\nthat creates that object and then appends it to your `contacts` array.\\r\n\\r\n#\nDo This:\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n*\nWithin the event handler you created for the \"Save Contact\" button, **add\ncode that creates a new object using the values you have pulled from the user\ninterface elements**.\\r\n* Append this newly created object to the `contacts`\narray.\\r\n* **Run your code** and try to **add a new contact**. When you go\nback to your `showContactsScreen` you should be able to scroll to your newly\nadded contact.\\r\n* **Debug your program** if there are any errors you observe.\\r\n\\r\n![](https://images.code.org/b226e1559dbeeb23aece57e78c3ecfa8-image-1449529119829.gif)"
      U4 - Objects - createContactsData_markdown_instruction: "# Create Data\\r\n\\r\nThis\napp will need sample data for you to use while you're building the rest of\nits functionality. At the top of the starter code, three objects for holding\ncontact information are created. The first one is filled in with some dummy\nvalues, and the other two are left for you to fill in.\\r\n\\r\n![](https://images.code.org/6cbf53690c40d94d8cb12dbd0f143df1-image-1449519452051.png)\\r\n\\r\n**Note:**\nThe `imageURL` property should use a link to an actual image you upload to\nthe app or find online.\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous\nexercise** is provided.\\r\n\\r\n* **Provide values** for the three contact\nobjects at the top of the starter code.\\r\n* Make sure you are using **the\nsame properties** in all three contacts.\\r\n* Use `appendItem` to **add these\ncontacts to the `contacts` array** (the first one is done for you).\\r\n* Display\nthe `contacts` array with `console.log` to verify all values are in the array.\\r\n\\r\n"
      U4 - Objects - createDotNotation_markdown_instruction: "# Creating Objects\nwith Dot Notation\\r\n\\r\nWe've used dot notation to reference values in an\nobject, but **you can also use dot notation to set the values in an object**.\nThe example below shows how you might use this ability to build an object.\\r\n\\r\n![](https://images.code.org/1f7e0d6b6696d4c6a4b1bfe8b4b5b8a5-image-1449085564719.45.40\nPM.png)\\r\n\\r\nThis pattern works because **setting the value of a new property\nwill automatically add it to the object**. This will typically be our preferred\nway of creating and referencing objects. \\r\n\\r\n<details>\\r\n<summary>**Alternate\nMethod of Creating Objects** (click to expand)</summary>\\r\nYou can create\nan object in a single line using the syntax below. **For large objects this\nmethod can quickly become difficult to read and write**. It will not be used\nin examples but you can use it if you wish.\\r\n<ul>\\r\n<li>Curly braces are\nplaced around the contents of an object `{}`</li>\\r\n<li>Properties of the\nobject are given a name and a value which are separated by a colon `:`</li>\\r\n<li>Properties\nare separated from one another by commas `,`</li>\\r\n<li>Property names should\nbe strings but do not need to be placed in double quotes. If they are not\nstrings they will be coerced to strings, possibly creating unpredictable behavior.</li>\\r\n<li>\n**Example:** `var user = {userName:\"Ada\", password:\"csIsAwesome\", yearBorn:1815};`</li>\\r\n</ul>\\r\n</details>\\r\n\\r\n#\nDo This:\\r\n\\r\n**Starter code** is provided which creates several student\nobjects using the pattern shown above. The last student object is currently\nempty.\\r\n\\r\n* Use the pattern shown above to **complete the final student\nobject for yourself.**\\r\n* Make sure your object **has the same property\nnames as the other 4**.\\r\n* Run the program to **display the contents of\nyour objects**. Confirm the values you expected appear there.\\r\n\\r\n![](https://images.code.org/304a8cb6ef242292f4e818d40a257dc6-image-1449516213225.23.07\nPM.png)"
      U4 - Objects - createEventHandlers_markdown_instruction: "# Create Event Handlers\\r\n\\r\n#\nDo This"
      U4 - Objects - createObject_markdown_instruction: "# Creating Your Own Objects\\r\n\\r\nWe've\nbeen using objects in our programs, but now we're going to start making objects\nof our own.\\r\n\\r\n**Syntax for Creating Objects**\\r\n\\r\n* Curly braces are\nplaced around the contents of an object `{}`\\r\n* Properties of the object\nare given a name and a value which are separated by a colon `:`\\r\n* Properties\nare separated from one another by commas `,`\\r\n* Names must be strings and\nshould be written in double quotes `\"`. If they are not they will be coerced\nto strings, possibly creating unpredictable behavior.\\r\n* **Example:** `var\nuser = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\\r\n\\r\n#\nDo This\\r\n\\r\n**Starter code** is provided which creates an empty object\nand displays its value.\\r\n\\r\n* Modify the code **using the syntax above**\nto create an object of your own. Experiment with including **value of different\ntypes (string, number, and boolean)**.\\r\n* **Run the program** and confirm\nall values in your object appear as you expected.\\r\n\\r\n![](https://images.code.org/f3812eb1ff896a1876d2f2abdf021ba4-image-1449080488321.21.14\nPM.png)"
      U4 - Objects - dotNotation_markdown_instruction: "# Objects\\r\n\\r\nFor our\npurposes, you can **think of an object as a collection of variables**.\\r\n\\r\n#\nProperties and Dot Notation\\r\n\\r\nThe variables contained in an object are\ncalled its **properties.**  Just like a variable, a property has a **descriptive\nname and contains a value**.\\r\n\\r\nIn JavaScript we use **dot notation**\nto access individual **properties** of an object. You have seen this before\nwith the event object, when you wrote something like `event.offsetX` or `event.key`.\\r\n\\r\n#\nDo This:\\r\n\\r\n**Starter code** is provided which has event handlers for\nboth \"click\" and \"keydown\" events. You will need to use **dot notation**\nto display individual properties of the event object.\\r\n\\r\n * **Add code**\nto the \"click\" event handler that uses `console.log` to display the `offsetX`\nand `offsetY` properties of the event object.\\r\n * **Add code** to the \"keydown\"\nevent handler that displays the `key` property of the event object.\\r\n *\n**Run your program** and confirm the correct information is being displayed\nin the console.  It should look something like the picture below.\\r\n\\r\n![](https://images.code.org/b56d0370a35d11918c754c7132f57ba1-image-1449072748156.12.13\nAM.png)"
      U4 - Objects - eventHandlersToSwitchScreen_markdown_instruction: "# Switching\nScreens\\r\n\\r\nYour Contacts App now lets you view and scroll through your\ncontacts, but you can't add any new ones. A second screen in your app called\n`addContactsScreen` was included as part of the starter code you were provided,\nas are some UI elements. You will be writing the code that pulls values from\nthe text inputs provided here in order to add contacts to your app. The first\nstep will be allowing the user to switch between these screens.\\r\n\\r\n# Do\nThis\\r\n\\r\n**Your code from the previous exercise** is provided here.\\r\n\\r\n*\nIn Design Mode **give meaningful IDs** to the \"Add Contact\" and \"Go Back\"\nbuttons that can be found on each screen.\\r\n* Use these IDs **to attach event\nhandlers to each button that switch the current screen**, as shown below."
      U4 - Objects - eventParameter_markdown_instruction: "# We've Seen Objects\nBefore\\r\n\\r\n**The object that we've used most frequently is the `event`\nparameter of our event handlers**.\\r\n\\r\n![](https://images.code.org/81b5d14af7f7a81d796627d74990cdfb-image-1449511907664.11.28\nPM.png)\\r\n\\r\nBefore we move on to creating objects of our own, let's take\nanother look at this `event` parameter (or as we'll call it now, the \"event\nobject\") and recall how they were used.\\r\n\\r\n# Do This:\\r\n\\r\n**Starter\ncode** is provided which creates event handlers for both a \"click\" and \"keydown\"\nevent and displays the contents of the event object they create.\\r\n\\r\n*\n**Run the program** and trigger both a keyboard event and a mouse event.\\r\n*\n**Examine the objects displayed in the Debug Console** to recall the different\npieces of information they contain.\\r\n* **Reflect: ** Why wouldn't we want\nthis information stored in many variables? Why wouldn't we want this information\nstored in an array?\\r\n\\r\n"
      U4 - Objects - exemplarContactsApp_markdown_instruction: "# Contacts App\\r\nOnce\nyou close the instructions you'll see an app we call the *Contacts App* which\ndemonstrates where we are headed over the next few lessons.\\r\n\\r\nThis app\nmight remind you of the Photo Album project you completed earlier in this\ncourse. This is because **both apps follow a pattern that is useful and very\ncommon**: you have a list of information and the user wants to look at each\nitem individually, maybe even update or modify it. \\r\n\\r\nThe main difference\nbetween the Photo Album and the Contacts App is that before, you simply had\nan array of strings, and **now your array will contain objects with multiple\npieces of information in each object**.\\r\n\\r\n# Do This:\\r\n\\r\n* **Use the\nexample Contacts App.**\\r\n\\t* **Left and right arrow keys** change the current\ncontact shown.\\r\n    * **Click \"Add Contacts\"** and add a contact for yourself.\\r\n*\n**Once you are comfortable with the app's functionality move on to begin\nbuilding it yourself!**"
      U4 - Objects - loopingArray_markdown_instruction: "# Looping with Arrays of\nObjects\\r\n\\r\nThe benefit of placing objects in an array is that we can easily\nloop over them and perform the same action with each. This is also why it\nis important that we used the same names for each property. The more standardized\nour data is, the easier it is process with a computer.\\r\n\\r\nThe first way\nwe will process our array of students is to display only the names of every\nstudent. In order to do this we will need to loop over the array using a `for`\nloop, and then access the name property of each student.\\r\n\\r\n![](https://images.code.org/4d3851cf4dc30afb44e8713d232946b6-image-1449156157996.22.30\nAM.png)\\r\n\\r\n# Do This\\r\n\\r\n**You code from the previous exercise** is\nprovided.\\r\n\\r\n* **Remove** your `console.log` command from the previous\nexercise.\\r\n* Use a `for` loop to display **only the names** of every student\nin your array.\\r\n\\r\n![](https://images.code.org/2e9e5cd620471161e2d0118e1a03ca23-image-1449156697004.31.21\nAM.png)"
      U4 - Objects - loopingArray2_markdown_instruction: "# Looping with Arrays of\nObjects: Multiple Properties\\r\n\\r\nLet's display more information about\nour students. This time when you loop through you should display both the\nname and the grade of each student. Use the syntax from the previous exercise\nas reference.\\r\n\\r\n# Do This\\r\n\\r\n**You code from the previous exercise**\nis provided.\\r\n\\r\n* Add code to the `for` loop from the previous exercise\nso that both the name and grade of each student is displayed.\\r\n\\r\n![](https://images.code.org/82d42710c76e556c20e82e598c09866c-image-1449157086594.37.46\nAM.png)"
      U4 - Objects - loopingCompoundConditions_markdown_instruction: "# Looping with\nCompound Conditionals\\r\n\\r\nLet's do one final exercise looping over our\narray of objects. You'll need to use compound conditional statements to print\nthe information of students who are present in class and in the 11th grade.\\r\n\\r\n#\nDo This\\r\n\\r\n**You code from the previous exercise** is provided.\\r\n\\r\n*\n**Modify** your `if` statement so that only students who are present in class\nAND in the 11th grade have their information displayed.\\r\n* **Run your program**\nand confirm only the students who are in class AND in the 11th grade have\ntheir information displayed.\\r\n\\r\n![](https://images.code.org/31c6cdf55587a533d98a28b4889a089d-image-1449161272150.47.12\nAM.png)"
      U4 - Objects - loopingConditions_markdown_instruction: "# Looping with Conditionals\\r\n\\r\nLet's\nstart doing some more complex processing of our array of students. Suppose\nwe only wanted to display the names of students who are present in class that\nday. We can reference the properties of each student within a conditional\nstatement to only display the names of students whose `inClass` property is\n\"true\".\\r\n\\r\n![](https://images.code.org/da0a7645805675f77cf1fec04cad4c4c-image-1449157900984.51.34\nAM.png)\\r\n\\r\nSince **`inClass` is stored as a boolean** we can directly\nreference its value without doing a boolean comparison.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n**You\ncode from the previous exercise** is provided.\\r\n\\r\n* **Add an `if` statement**\nto your `for` loop that checks whether the student is in class before displaying\ntheir information.\\r\n* **Run your program** and confirm only the students\nwho are in class have their information displayed.\\r\n\\r\n![](https://images.code.org/e4dc84243a97f393d2cfde0f6258b67a-image-1449160488833.34.42\nAM.png)"
      U4 - Objects - pullValues_markdown_instruction: "# Getting Data From the User\\r\n\\r\nThe\n`addContactsScreen` is where the user can input information about a new contact.\nWe'll treat building its functionality as a three-step process. The first\nstep is to make sure you can access the values in each input by displaying\nthem in the console.\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous\nexercise** is provided.\\r\n\\r\n* In Design Mode, **go look at the IDs already\ngiven to the 4 text inputs**.\\r\n* Add a \"click\" event handler for the \"Save\nContact\" button.\\r\n* Write code within your event handler that **displays\nthe contents of all 4 text inputs using `console.log`**. This will let you\nknow that you are properly accessing each value.\\r\n\\r\n<img src=\"https://images.code.org/1bf71fcf3d2f5978618536527acad710-image-1449528040863.39.22\nPM.png\" style=\"float:left; width:200px\">\\r\n\\r\n<img src=\"https://images.code.org/e8f6c1838f2d5c596b2dce275ee1becc-image-1449528044430.39.35\nPM.png\" style=\"float:left; width:150px\">"
      U4 - Objects - readStarterCode_markdown_instruction: "# Getting Started\\r\nYou've\nlearned a little bit about objects, and now you're going to practice using\nthem in an app.\\r\n\\r\nYou've been provided some starter code and the UI\nelements needed to make this app. Your primary focus will be on integrating\nwhat you've learned about objects to create the functionality you saw in\nthe Contacts App.\\r\n\\r\n# Do This:\\r\n\\r\n**Starter code** is provided, including\nthe UI elements of your app and useful code for creating some of the familiar\nfunctionality we've designed in previous projects.\\r\n\\r\n* **Run the progam**\nto see what it does right now. (Answer: **Not much** - you'll be adding the\nrest of the functionality.)\\r\n* **Look through the starter code** to understand\nwhat you already have available.\\r\n* **Go into Design Mode** as well and\nlook at the different UI elements and their IDs. \\r\n\\t* **Notice that there\nare 2 screens** with descriptive IDs already given.\\r\n* Once you're comfortable\nwith the starter code, move on to the next exercise."
      U4 - Objects - resetIndexAndShow_markdown_instruction: "# Showing the New Contact\\r\n\\r\nWhen\na user adds a contact, they should be **automatically taken to the `showContactsScreen`,\nand the newly added contact should be shown**. Additionally, when they return\nto the `addContactsScreen`, the fields should be cleared out.\\r\n\\r\n# Do\nThis:\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n*\n**Add code** to the event handler for the \"Save Contact\" button that:\\r\n\n* **Clears the text** from the inputs on that page.\\r\n * **Switches the screen**\nback to `showContactsScreen`.\\r\n * **Sets the `currentIndex`** and calls\n`showCurrentContact` so that the newly-added contact is shown.\\r\n\\r\n![](https://images.code.org/734a4db82d61680bc4064eee5509d9c5-image-1449529424169.gif)\\r\n\\r\n"
      U4 - Objects - showContact1_markdown_instruction: "# Displaying Contacts\\r\n\\r\nIn\norder to keep track of the current contact to display, a variable called `currentIndex`\nhas been created. \\r\n\\r\n![](https://images.code.org/a116bfa6fdac0b9c4077c076089599ba-image-1449242207423.15.17\nAM.png)\\r\n\\r\nAn event handler has been added, which changes this variable\nwhen you press the \"Left\" and \"Right\" arrow keys and makes sure the index\nis between 0 and the length of the contacts array (similar to the photo album\nproject from before). Then it calls `showCurrentContact`.\\r\n\\r\n![](https://images.code.org/37cc2e3f0555cd0eb4c683d04a8712f4-image-1449520773029.png)\\r\n\\r\n**Recall**\nthat if you have an array, you can treat any index of the array like a variable.  To\nget at a property of an object in the array at the current index, we can do\nthis:\\r\n\\r\n![](https://images.code.org/7c5926550471ef8a368e7cd7e4c8d172-image-1449521254405.png)\\r\n\\r\n#\nDo This:\\r\n<img src=\"https://images.code.org/fa99b8cf8084910b1a4086e06385f9c2-image-1449243444865.37.13\nAM.png\" style=\"float: right; width: 200px\">\\r\nLet's make `showCurrentContact`\nwork. **Your code from the previous exercise** is provided.\\r\n\\r\n* **Add\ncode to the `showCurrentContact` function** that sets the text of the \"contactInfo\"\nto `contacts[currentIndex].name`.\\r\n\\r\n* **Run your program** and you should\nbe able to use the left and right arrow keys to cycle through the names of\nyour contacts."
      U4 - Objects - showContact2_markdown_instruction: "# Show Full Contact Information\\r\n\\r\nNow\nwe'll want to show the full contact information. You'll need to reference\neach property of the contact using the same notation you used in the last\nexercise.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous exercise**\nis provided.\\r\n\\r\n* **Add code to your `showCurrentContact` function** so\nthat the `phone` and `birthday` information is also displayed. Give each piece\nof information a descriptive header, as shown below.\\r\n* **Reminder: ** You\ncan concatenate strings with the `+` operator. `\\n` will place text on a\nnew line.\\r\n\\r\n![](https://images.code.org/3aec850ad2c5ce21b1288dbec6fff711-image-1449246407070.26.34\nAM.png)"
      U4 - Objects - showContact3_markdown_instruction: "# Show Contact Image\\r\n\\r\nThe\nlast piece of information to display for each contact is their image, which\nshould be saved in the `imageURL` property of each contact.\\r\n\\r\n# Do This:\\r\n\\r\n**Your\ncode from the previous exercise** is provided.\\r\n\\r\n* The main image on\nthe \"showContactsScreen\" has the ID \"contactImage\".\\r\n* **Add code**\nto the `showCurrentContact` function that sets the URL of \"contactImage\"\nto the `imageURL` property of the contact being displayed. You can use the\n`setImageURL` command.\\r\n\\r\n![](https://images.code.org/a606d057df3e5c34fc2908d598c3a9ff-image-1449526996613.23.06\nPM.png)"
      U4 - Objects - showSampleImage_markdown_instruction: "# Show Sample Image\\r\n\\r\nIn\nDesign Mode, you'll notice that an image called \"previewImage\" is included\non the \"addContactsScreen\". This is there so that the user can see what\nthe image will look like before adding it to the contacts list.\\r\n\\r\n# Do\nThis:\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n*\n**Add an event handler** for `URLinput` that responds to a new event type\ncalled **\"input\"**. This event is triggered every time the input text changes.\\r\n*\nUse `setImageURL` within the event handler to change the URL of the image\nto whatever is currently in `URLinput`.\\r\n* Run the app and confirm that\n**the image updates when a valid image URL is given**.\\r\n\\r\n![](https://images.code.org/955fa56473d949ed7bd326aa87c96e0f-image-1449525666366.gif)"
      U4 - Objects - writeWrap_markdown_instruction: "# Wrapping Indexes\\r\n\\r\nCurrently\nyou can press the left and right arrow key to change the index of the contact\nyou'd like to show. When `showCurrentContact` is called that contact is then\nshown on the screen. Unfortunately right now it is possible to set `currentIndex`\nto a value that is out of bounds. As a result your program will generate an\nerror and stop running.\\r\n\\r\n# Do This\\r\n\\r\n**Your code from the previous\nexercise** is provided.\\r\n\\r\n* **Use the wrap function** provided in the\nstarter code within `showCurrentContact` to reset `currentIndex` to a value\nthat is \"in bounds\" before showing the contact.\\r\n* **Run your program**\nand confirm that you can now scroll through every contact and that the contacts\nlist \"wraps around\""
      U4 - Read Record - 1.2_markdown_instruction: "# Callback Functions\\r\n\\r\nIn\nthe last exercise, you **read records from a remote database back into your\napp**. There are a few steps that happened in that process.  When you `readRecords`\nyou can think of it as triggering a 4-step process as shown in the diagram\nbelow.\\r\n\\r\n![](https://images.code.org/b8c366da4d02776920cfbb229b108c40-image-1450104325687.png)\\r\n\\r\nBecause\nthe Internet is involved, there's actually a **delay between when your program\ncalls `readRecords` and when the callback function is called**. We can even\nsee this delay in App Lab.\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous\nexercise** is provided.\\r\n\\r\n**NOTE:** The speed on App Lab has been set\nto its slowest setting; this will make it easier to see the sequence of events\nin the program.  You can set the speed to the fastest setting and it will\nfunction the same.\\r\n\\r\n* **Add another `console.log` statement after your\n`readRecords` command**.\\r\n* **Run the program** and pay close attention\nto **the sequence of events**. \\r\n* **Check the Debug Console** to see which\n`console.log` command ran first.\\r\n\\r\n![](https://images.code.org/7c2a7362736e0796aa191b03760552c3-image-1449687909231.gif)\\r\n\\r\n"
      U4 - Read Record - 1.3_markdown_instruction: "# Asynchronous Commands\\r\nAs\nyou just saw, **the callback function for a `readRecords` command does not\nrun immediately**. In fact, **commands outside of the callback function will\nrun**. \\r\n\\r\nWe say that the callback function of `readRecords` is **asynchronous**,\nbecause the rest of your program will not wait for the response from the database;\nit will continue executing, and eventually the callback function will be triggered\nonce the data has arrived from the database.  \\r\n\\r\n<details><summary><strong>Terminology:\nSynchronous vs. Asynchronous</strong> [Click to expand]</summary>\\r\n<P>\\r\n\"Asynchronous\"\nis the opposite of \"synchronous\".  In programming, we talk about whether\n<strong>functions are synchronous or asynchronous</strong>.\\r\n</P>\\r\n<p>\\r\n<strong>Synchronous</strong>\n(or \"in sync\") - things happening at the same time.  \"The dance moves were\nin sync with the music.\" \\r\n<ul><li>When functions are \"synchronous\",\nif Function A calls or triggers Function B, Function B will execute immediately,\nat the moment it's called, and A will wait for B to complete before continuing\non.\\r\n</li>\\r\n</ul>\\r\n</p>\\r\n<p>\\r\n<strong>Asynchronous</strong> (or\n\"NOT in sync\") - things happening at different times or not in a prescribed\nsequence. \\r\n<ul>\\r\n<li>When functions are asynchronous, if Function A calls\nor triggers Function B, Function B will execute at some <strong>later time\nin the future, and A will continue without waiting for B.</strong> </li>\\r\n<li>Asynchronous\nfunctions are used especially when the Internet is involved, because sending\na request for data and getting it back can take time. The setup is common:\nsend a request for data, and as part of the request specify what <i>should\nhappen when the data eventually comes back.  This is what the callback function\nis for.</i></li>\\r\n</ul>\\r\n</p>\\r\n</details>\\r\n\\r\n<br>\\r\nThis allows\nyour program to keep running while you wait for responses from the database,\nbut **asynchronous commands can make it challenging to keep track of the order\nyour program will run in**.\\r\n\\r\nYou typically think of programs waiting\nfor one command to finish before running the next. This style of programming\nis referred to as **synchronous** and is generally much easier to read and\nwrite.\\r\n\\r\n# Callback Functions are like Event Handlers\\r\n\\r\n**Event\nhandlers** for UI elements can be triggered at any time. You cannot know ahead\nof time when the event will be triggered, **so all the code that should run\nwhen the event is triggered needs to go in the event handler**.\\r\n\\r\n![](https://images.code.org/a6303ef07bf90ddf22f77950dd29a971-image-1449691163707.gif)\\r\n\\r\nThe\nsame thing is true with the callback function for data commands. **If a piece\nof code should run after a response has been received from the database it\nmust be placed in the callback function**.\\r\n\\r\n![](https://images.code.org/7908fa39f133ec1ce374f8e9943c5257-image-1449692589680.gif)\\r\n\\r\n**Tip:\nTreat the callback function of a data command like an event handler. It gets\ntriggered when you receive the response from the database**\\r\n\\r\n# Do This:\\r\n\\r\n**Your\ncode from the previous exercise** is provided.\\r\n\\r\n* **Move your second\n`console.log` command inside the callback function**.\\r\n* **Run the program**\nand pay close attention to **the order in which the commands run**. You can\n**check the Debug Console** to see which `console.log` command ran first."
      U4 - Read Record - 1_markdown_instruction: "# Reading Records\\r\nYou have learned\nhow `createRecord` can be used to create permanent copies of your data in\na remote database. \\r\n\\r\n**In order to use this data, you'll need a way\nto read it out of your database and back into your app**.\\r\n\\r\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37\nAM.png\" style=\"width: 350px; float: right\">\\r\n\\r\nCheck out the new command\n`readRecords`. This command **requests from the database *all* the records\nstored in one table.**. \\r\n\\r\nThe database responds by the sending an **array\nof objects** back to your program - one object for every record in the table.  As\nwith `createRecord`, the data sent back by the database will come through\n**callback function in the `records` parameter**.\\r\n\\r\n# Do This:\\r\n\\r\n**NOTE**:\nthe database with a table called \"myTable\" already contains some data.\\r\n\\r\n*\n**Open the Data Viewer** to look at the data in \"myTable.\"\\r\n* **Add a\n`readRecords` command** to your app.\\r\n* **Add a `console.log` command**\ninside the callback function of `readRecords` to **display the `records`**.\\r\n*\nRun the program and **confirm that the data from the database is being displayed\nin the console log.**\\r\n\\r\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)"
      U4 - Read Record - 2_markdown_instruction: "# Changing the Table\\r\n\\r\nThe\nfirst parameter in the `readRecords` command is the name of the table you\nwish to read records from.\\r\n\\r\n![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\\r\n\\r\nYou\nhave been using the name \"myTable,\" but - just like variables and IDs -\n**your tables should be given descriptive and meaningful names**.\\r\n\\r\n#\nDo This:\\r\n**Note:** We've given you a new database that already includes\na table with some data in it.\\r\n\\r\n * Open the Data Viewer to **find the\nname of the table.**\\r\n * Drag out `readRecords` and **change the table name\nparameter** to pull the records from the new table.\\r\n * Run the program.  Your\noutput should look like below.\\r\n\\r\n![](https://images.code.org/ba9812734a1d82fc6866841c3dab0f58-image-1449871040409.png)"
      U4 - Read Record - 3_markdown_instruction: "# Debugging: Wrong Table Name\\r\n\\r\nYou\nmay have run into this in the previous level already, but let's see what\nhappens when we try to `readRecords` from a table that doesn't exist in our\ndatabase.\\r\n\\r\n# Do This\\r\n\\r\n\\r\n* **Drag out `readRecords`** and leave\nthe table name as \"myTable\"\\r\n* **Run the program** to see what value is\npassed to the `records` parameter.\\r\n* **Did you get an error? Did anything\nelse change? Make a note of the behavior you see for future debugging**\\r\n\\r\n<details><summary>**What\nyou should see (read this after trying it yourself)**</summary>\\r\n<br>\\r\n<p>\\r\n\\r\nIf\nyou read from a table that doesn't exist you won't get any error messages\nand the database will respond by <strong>sending back an empty array of records</strong>.  An\nempty array looks like [] in the console.  Any other tables in the database\nare left unchanged.\\r\n</p>\\r\n<p>\\r\nAs a <strong>debugging tip:</strong>\nif your requests for reading records from the database are coming up empty,\ndouble check that the code and the actual table name are spelled the table\nname <i>exactly the same</i> - capitalization and spaces matter!\\r\n</p>\\r\n\\r\n</details>"
      U4 - Read Record - 4.1_markdown_instruction: "# Using Your Records\\r\n\\r\nThe\n`records` parameter in your callback function is **an array of objects**.\n\\r\n\\r\nIt can be used exactly the same as other arrays of objects you have\nseen before.\\r\n\\r\n| You can... | code|\\r\n|:-- |:--|\\r\n|**refence each\nobject (record) by an index**| `records[5]`|\\r\n|**reference each property\nof an object using dot notation**| `records[5].title`|\\r\n|**find out the\nnumber of objects in the array** | `records.length`|\\r\n\\r\n# Do This:\\r\n\\r\n**Starter\ncode is provided** which reads records from the same **\"topMovies\" table**\nyou saw in the previous level.\\r\n\\r\n**Add code** inside the callback function\nof `readRecords` that:\\r\n\\r\n * Displays the **first movie in the array**\n(i.e. displays `records[0]`).\\r\n * Displays the **last movie in the array.**\\r\n\n\\t* Try using `records.length-1` rather than a hard-coded number.\\r\n * Displays\nthe `title` of the **third movie in the array**.\\r\n\\r\n**Run the program**\nand confirm that you are displaying the correct movie.  Your output should\nlook like this:\\r\n\\r\n![](https://images.code.org/d3c0f6bd73b637828f0057fa91d6f56f-image-1524524661772.03.55\nPM.png)"
      U4 - Read Record - 4_markdown_instruction: "# Reading Records: Printing Individual\nRecords\\r\n\\r\nUsually we want to pull out each record individually. We have\nalready seen that records is an array of objects. Therefore we can do this\nby using the array notation to access each object by its index.\\r\n\\r\n# Do\nThis\\r\n\\r\nThe data from the last level has been provided. \\r\n\\r\n* Add\na call to `readRecords`\\r\n* Set the table name to the movies table.\\r\n*\nInside the callback function add a `for` loop to loop over the records.\\r\n*\nInside the for loop add a console.log statment to print out the current object\nusing its location in the array.\\r\n* Run the program. Your output should\nlook like below.\\r\n\\r\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38\nPM.png)"
      U4 - Read Record - 5_markdown_instruction: "# Reading Records: Looping over\nthe Array\\r\n\\r\nWe can loop over the `records` array just like any other\narray to **perform the an action for every object in the array**. Recall that\nthe standard way of doing this is to use a `for` loop.  \\r\n\\r\nFor example,\nif you had an array called `records` and each object in the array had a property\ncalled `name` you could display every name in your array like this:\\r\n\\r\n![](https://images.code.org/baf9aa7c93c78ad5992e29ebc7baacb8-image-1449872724581.png)\\r\n\\r\n#\nDo This:\\r\n**Starter code is provided** which reads records from the \"topMovies\"\ntable.\\r\n\\r\n* Add a `for` loop to the callback function of the `readRecords`\ncommand.\\r\n* Add code to your `for` loop that displays **only the title of\nevery movie in the list**.\\r\n\\t* HINT: to display the title of a movie inside\nthe for loop use `records[i].title`.\\r\n* Your output should look like this:\\r\n\\r\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02\nPM.png) "
      U4 - Read Record - part 1 - template_markdown_instruction: "# Reading Records\\r\nYou\nhave learned how `createRecord` can be used to create permanent copies of\nyour data in a remote database. \\r\n\\r\n**In order to use this data you'll\nneed a way to read it out of your database and back into your app**.\\r\n\\r\n<img\nsrc=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37\nAM.png\" style=\"width: 350px; float: right\">\\r\n\\r\nCheck out the new command\n`readRecords`. This command **requests from the database *all* the records\nstored in one table.**. \\r\n\\r\nThe database responds by the sending an **array\nof objects** back to your program -- one object for every record in the table.  As\nwith createRecord, the data sent back by the database will come through **callback\nfunction of the `readRecords`, with array of objects in the `records` parameter**.\\r\n\\r\n#\nDo This\\r\n\\r\n**NOTE**: the database with at table called 'myTable' already\ncontains some data.\\r\n\\r\n* **Open the Data Viewer** to look at the data\nin 'myTable'\\r\n* **Add a `readRecords` command** to your app.\\r\n* **Add\na `console.log` command** inside the callback function of `readRecords` to\n**display the `records`**\\r\n* Run the program and **confirm that the same\ninformation you saw in the Data Viewer is displayed in the console**.\\r\n\\r\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)"
      U4 - ReadRecords - Contacts App 1_markdown_instruction: "# Contacts App: Loading\nYour Contacts From the Database\\r\n\\r\nThe way you left your Contacts App\nin the last lesson, **your app had stored data in a remote database but could\nnot read it back**. Now that you know how to use `readRecords`, you will be\nable to read that data into your app at the start of the program.\\r\n\\r\nRather\nthan constructing and adding objects one-by-one to the `contacts` array, you\ncan simply get the array of records from the database and use that as the\nglobal variable in our app.  Let's do it.\\r\n\\r\n# Do This:\\r\n\\r\n**Your\ncode from the \"Contacts App\" is provided.**\\r\n\\r\n* Go to the Data Viewer\nfor your app and confirm that your contacts data is stored there.\\r\n* **Remove\nany code** from your program that:\\r\n\\t* Constructed an object for a contact,\n(e.g. `contact1`, `contact2`, etc.\\r\n    * Appended an object to the `contacts`\narray. \\r\n    \\r\n* Drag out a `readRecords` command and place it after the\ncommand `contacts = [];`\\r\n\\r\n* In the **callback function** of `readRecords`:\\r\n  *\nSet `contacts = records`.\\r\n  * Call `showCurrentContact`.\\r\n\\r\n<details>\\r\n<summary><strong>What\nyour code should look like</strong> (click to expand)</summary>\\r\n<p>\\r\nThe\nfirst few lines of your contacts app should now look like this.  \\r\n</p>\\r\n![](https://images.code.org/d0c426401a35ff99ab9eb86128bc7be5-image-1449949740702.48.41\nPM.png)\\r\n\\r\n<p>Notice that this actually makes the program simpler: rather\nthan constructing and adding objects one-by-one to the `contacts` array, we\nsimply get the array of records from the database and <strong>assign it to\n`contacts`</strong>.  \\r\n</p>\\r\n<p>\\r\nSince `contacts` is a global variable\nin our app, the rest of the code can use it.  \\r\n</p>\\r\n\\r\n</details>"
      U4 - ReadRecords - Contacts App 2_markdown_instruction: "# Refreshing Local\nData\\r\n\\r\nYour app is still running off of an array called `contacts` that\nis stored in your app. You can think of this as a **local copy of your database**.\nIn order to prevent it from getting out of sync with your actual database,\nyou should **refresh the contents of this array every time you make changes\nto the database**.\\r\n\\r\nSince you will need to refresh your app many times\nin your program, **you will create a single function that refreshes the data\nin your app and displays the results**.\\r\n\\r\n# Do This:\\r\n\\r\n**Your code\nand database for the Contacts App is provided.**\\r\n\\r\n**Goal: Move the code\nthat loads the data from the database into a function called `refreshLocalData`**.\\r\n\\r\n\n* Create a function called `refreshLocalData`. <img src=\"https://images.code.org/e0e29e916e63bc8c914ee1387729c86b-image-1450115424518.gif\"\nstyle=\"width: 350px; float: right\">\\r\n\\r\n * Move the call to `readRecords`\nfrom the top of you code into the function. (See animation).\\r\n\\r\n * Make\na call to `refreshLocalData` at the beginning of your program.\\r\n\\t* You\nneed this now to trigger the initial loading of the data.\\r\n    * <details><summary><strong>The\ntop of your program should now look like this.</strong> (click to expand)</summary>![](https://images.code.org/89f5a3a70d66d2fe5b382b79a6aef347-image-1455908393952.PNG)</details>\\r\n\\r\n*\nRun the program and confirm that **it still copies the data from your database\ninto the `contacts` array**.\\r\n\\r\n"
      U4 - ReadRecords - Contacts App 3_markdown_instruction: "# Updating Your Contacts:\nAdding a Contact\\r\n\\r\nWhen you add a new contact to your app, it currently\ngets added to your database by calling `createRecord`. Once this happens,\n**your local copy of `contacts` is no longer up to date**. \\r\n\\r\nWe can\naddress this by calling `refreshLocalData` any time we add anything to the\ndatabase. For example, any time we `createRecord`, we can refresh the local\ndata as soon as we know the new record was successfully added to the database\n(i.e. when the callback function is triggered).\\r\n\\r\n# Do This:\\r\n\\r\n**Your\ncode and database for the Contacts App is provided.**\\r\n\\r\n * Your app currently\n**adds a new contact to the database** when you click the \"Save Contact\"\nbutton.\\r\n \\r\n * **Add a call to `refreshLocalData` inside the callback\nfunction of `createRecord`**.\\r\n \\r\n * Move the line to update `currentIndex`\nfrom the event handler for the \"Save Contact\" button into `refreshLocalData`.\\r\n\n\\r\n  * <details><summary><strong>Your code should look like this.</strong>\n(click to expand)</summary>![](https://images.code.org/a24b562559cbec49df721908de6969fe-image-1455911309789.PNG)![](https://images.code.org/f969b8e71578ff1cace8a57620b1ba7e-image-1455911311856.PNG)</details>\\r\n\\r\n*\nRun the program, and **confirm that when you add a contact to your database,\nyou can also see it in your app**.\\r\n\\r\n * <details><summary><strong>Now\nwhen you run your program, a different contact gets displayed first. Why?</strong>\n(click to expand)</summary>\\r\nSince you moved the line to update `currentIndex`,\nnow every time you call `refreshLocalData`, the current index gets set to\nthe newest contact in your database, which means `showCurrentContact` will\ndisplay the most recently added contact. So when you call `refreshLocalData`\nat the beginning of your program to load your contacts into the `contacts`\narray, it will also make sure the newest contact is displayed first.</details>\\r\n\\r\n\\r\n\\r\n"
      U4 - ReadRecords - Contacts App 4_markdown_instruction: "# Create a Delete\nButton\\r\n\\r\nNow that you can add new contacts to your app, you might want\nto add functionality to remove them. Let's **create a new button the user\ncan click to delete the current contact.**\\r\n\\r\n# Do This:\\r\n**Your code\nand database for the Contacts App are provided.**\\r\n\\r\n * In Design Mode,\n**shrink the \"Add Contact\" button** on the \"showContactsScreen\".\\r\n \\r\n\n* **Add a new button for delete** in the space you created.\\r\n \\r\n * Set\nthe style of the button, change its text, and give it a descriptive ID.\\r\n\\r\n![](https://images.code.org/e390ba49c28b447279bc20dd2b7eef91-image-1449865822878.14.31\nPM.png)"
      U4 - ReadRecords - Contacts App 5 make delete work_markdown_instruction: "#\nMaking the Delete Button Work\\r\n\\r\nYou are keeping the index of the current\nobject as a global variable called `currentIndex`.\\r\n\\r\nThus, the **current\nobject on the \"showContactsScreen\"** is found at `records[currentIndex]`.\\r\n\\r\nTo\nmake the delete button work, we can simply send the object we want to delete\nto `deleteRecord`. \\r\n * Notice that because `records[currentIndex]` **contains\nthe \"id\" of the object you hope to delete, you don't need to make any changes\nto the object before sending it**.\\r\n\\r\n# Do This:\\r\n**Your code should\nend up looking similar to the code depicted in the image**. \\r\n\\r\nHere are\nthe steps: <img src=\"https://images.code.org/c2b534a6178801a829d62fd7f99690d5-image-1455914106048.png\"\nstyle=\"width: 350px; float: right\">\\r\n * **Add an event handler** for the\ndelete button.\\r\n * **Make a variable called `objToDelete` that's a copy\nof the object at the current index**.\\r\n * **Add a call to `deleteRecord`**\nin the event handler. \\r\n  * First Parameter: Make sure to set the table\nname to your contacts table.\\r\n  * Second Parameter: Set to `objToDelete`.\\r\n\n* **Add a call to `refreshLocalData`** in the callback function of `deleteRecord`.\\r\n\n* **Run your app**.\\r\n  * Confirm you can now delete contacts and that your\nlocal and remote data agree.\\r\n"
      U4 - add createRecord to contacts App_markdown_instruction: "# Save Your Contacts\nin the Cloud!\\r\n\\r\nNow that you know how to save objects to the database,\nyou can make your contacts app save things permanently.\\r\n\\r\nRight now you'll\nadd the ability for the app to save contacts to the database. In the next\nlesson, you'll learn how to pull data from the database back into the app.\\r\n\\r\n#\nDo This:\\r\n\\r\n**The contacts app you created in the previous lesson** is\nprovided.\\r\n\\r\n * Drag the `createRecord` block into the event handler code\nfor the \"createContactButton\" and add it as the last lines of the function.\\r\n\n* Set the **first parameter** to be a descriptive table name like \"myContacts.\"\\r\n\n* Set the **second parameter** to object you created for the new contact (in\nthe example the variable is called `newContact`.\\r\n * Run the app and **add\na new contact**.\\r\n * In the Data Viewer, **confirm a new table was created\nand that it contains the contact you created**.\\r\n\\r\n![](https://images.code.org/36dd0fc06e93b1988a9df72a62c3f99f-image-1449266720880.gif)"
      U4 - debug column names are case sensitive_markdown_instruction: "# Are Properties\nCase-Sensitive?\\r\n\\r\nYou saw that if you add a property to an object and\nthen store it in the database, the database will add a column to accommodate\nthe new data value.  \\r\n\\r\nIf you end up with columns in your table that\nyou don't want, you can delete them\\r\n![](https://images.code.org/baecadc168954c794212b419d441679b-image-1449262524542.gif)\\r\n\\r\nLet's\ndo another quick experiment to test the behavior of the data table. **What\nhappens if you change how a property is spelled?**\\r\n\\r\n# Do This:\\r\n\\r\n**Your\ncode from the previous exercise** is provided.\\r\n\\r\n* Change `song.title`\nto `song.Title` (capital T) where you create your song object.\\r\n* **Run\nthe program**, then go to the Data Viewer to see what happened.\\r\n* If there\nare problems created by the change in spelling, **delete unnecessary columns\nand change your code back**."
      U4 - deleteRecords 0_markdown_instruction: "# Deleting Records with Code\\r\n\\r\nYou\ncan delete a record \"by hand\" in the Data Viewer by clicking the <img src=\"https://images.code.org/b45cebe6d06d8c2d45a233bd3c472a62-image-1449850229074.png\"\nstyle=\"width: 50px\"> button.\\r\n\\r\nTo delete a record with code you use\nthe `deleteRecord` command.  It works similarly to the other data tools in\nthat it has 3 parameters:\\r\n\\r\n * The **name of the table** you want to\ndelete from.\\r\n * The **object** you want to delete.\\r\n * A **callback**\nfunction.\\r\n\\r\n`deleteRecord` is **different from the other data commands**\nin one critical way. The object you send to the database ***only* needs to\ncontain the id of the record** you want to delete.  \\r\n \\r\n\\r\n# Do This:\\r\n\\r\n**Your\ndatabase already includes a table called \"mytable\"**\\r\n\\r\n * Go to the\nData Viewer and **look at the data in \"mytable\"**.\\r\n * **Drag out** the\n`deleteRecord` block.\\r\n \\t* It includes **default code** to delete the record\nwith id:1 in \"mytable\".\\r\n * Run the code and **confirm that the record\nwith id:1 (\"Greg\") is deleted from the database**.\\r\n\\r\n![](https://images.code.org/f1168e1793f646575f26d86e66ddcae4-image-1457470120824.gif)"
      U4 - deleteRecords 1_markdown_instruction: "# Deleting Records Continued...\\r\n\\r\nThe\nother difference with `deleteRecord` is that the database **sends back a boolean\ncalled `success`.** \\r\n\\r\nUsing the `success` boolean, you can write a callback\nfunction that will behave differently based on whether or not `deleteRecord`\nran successfully.\\r\n\\r\n* If the database was able to successfully delete\nthe specified record, `success` will be set to **true** in the callback function.\n\\r\n* If the database was **not** able to delete the record, `success` will\nbe **false.**\\r\n\\r\nLet's do a little more experimentation with `deleteRecord`\non a sample database.  **We've given you a new database that has about 40\nsongs in it.** You have a few different things to try so don't miss them.\\r\n\\r\n#\nDo This:\\r\n\\r\n* **Click View Data.** Look at the \"mySongs\" table and **find\nthe ID of the song \"Little Bunny Foo Foo.\"** \\r\n* **Drag out the `deleteRecord`\nblock.**\\r\n  * Set the table name to \"mySongs.\"\\r\n  * Set the `id` of\nthe object to delete to the ID of \"Little Bunny Foo Foo.\"\\r\n* **Add an\n`if` statement to the callback function.**\\r\n  * If `success` is true, print\n\"Record deleted successfully\" to the console.\\r\n  * Otherwise, print \"Could\nnot delete record\" to the console.\\r\n* **Run the code.**\\r\n  * Verify that\nyou deleted \"Little Bunny Foo Foo\" from the list of songs.\\r\n* **Run the\nexact same code again.**\\r\n  * This will attempt to delete a record with\nthe ID you just deleted. See what happens..."
      U4 - deleteRecords 2 delete object_markdown_instruction: "# Using Objects to\nSpecify What to Delete\\r\n\\r\nWhen deleting an object in the database **the\nonly property the database checks is `id` - *everything else* in the object\nis ignorned by `deleteRecord`**.\\r\n\\r\nThe **key takeway** is that you can\npass *any* object to `deleteRecord`. As long as it has a property called `id`\nthe database will try to delete a record with that ID.\\r\n\\r\nLet's look\nat an example. \\r\n\\r\n# Do This:\\r\n <img src=\"https://images.code.org/0af097cf5062c49743275f2c3df21bf7-image-1449864027240.gif\"\nstyle=\"float: right; width: 350px\">\\r\n \\r\n**Starter code is provided**\nthat constructs an object called `song` and sets `song.id = 9` (the ID of\n\"Little Bunny Foo Foo\"). Additional \"junk\" properties are added as well.\nThe \"mySongs\" table in the database has been restored to its original state.\\r\n\n\\r\n* **Replace the second parameter of deleteRecord to use the `song` object**\ninstead of `{id:1}` (see animation at right).\\r\n* Run your program and **confirm\nthat the record with id 9 is deleted** by checking in the Data Viewer.\\r\n*\n**Change the ID in the `song` object** to the ID of a different record in\nyour database.\\r\n* Run your program and **confirm another record in \"mySongs\"\nwas deleted.**"
      U4 - deleteRecords 2_markdown_instruction: "# Deleting Records\\r\n\\r\nGo look\nat the data.  See the ids.  When you try to edit you can't.  Why? Because\nid's are unique, but for all time.  Each record that gets  added gets assigned\na unique id.  That id will never be used again, even if you delete it. ![](https://images.code.org/352bbbd91c14aa8a4a37fcc309f29d93-image-1449782149871.gif)\\r\n\\r\nYou\ncan delete a record using the data viewer by clicking the delete button (duh).\\r\n\\r\nTo\ndo it with code you use the delete record block.  It works similarly to the\nother data tools.\\r\n\\r\n[screen cap diagram - table name, object, callback]\\r\n\\r\nHowever,\ndeleteRecord is different because the object *only* needs to contain the id\nof the record you want to delete. You can \\r\n\\r\n# Do This\\r\n * Drag out\nthe delete records block - set the id to the one you found.\\r\n * Run the\ncode - verify that you deleted the right record\\r\n\\r\n"
      U4 - fix contacts by hand in data table_markdown_instruction: "# Add Contacts\nto the Data Table by Hand\\r\n\\r\nWhen you originally created this app, you\nhard-coded at least **three contacts\"** that were added to your contacts\nlist every time the program started running. You'll want to move their information\ninto the database as well.\\r\n\\r\n# Do This:\\r\n\\r\n**Your code from the previous\nexercise** is provided.\\r\n\\r\n* In the Data Viewer, go to the table you are\nusing to store your contacts.\\r\n* Add rows to the table and copy in the url,\nname, phone number, etc. for each of the hard-coded contacts in your app.\\r\n*\n**Don't actually delete your hard-coded contacts from your code.**"
      U4 - last stage test adding contcts_markdown_instruction: "# Test the App\\r\n\\r\nIf\nyou run your app now, you can add contacts and they will be saved to the database,\nbut they will also show up \"locally\" in your app.  That is, until you restart\nit.\\r\n\\r\n**When you restart the app, it only reloads the hard-coded contacts.\nThis is okay for now.**  In the **next lesson** you'll learn how to pull\ndata from the database back into the app.\\r\n\\r\nAs a final step for now...\\r\n\\r\n#\nDo This:\\r\n\\r\n**Your code from the previous exercise** is provided.\\r\n\\r\n\n* **Add a few new contacts to your app and confirm you can scroll through\nthem**.\\r\n * In the Data Viewer, **confirm those contacts were added to your\ndatabase**.\\r\n * Restart your app. Confirm that **the newly added contacts\nare no longer stored locally in your app, but they still exist in the database**.\\r\n\n* In the Data Viewer confirm those **\"lost\" contacts are still stored in\nyour database**."
      'U4 L1 - 4: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 1 - 4: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U4 L5 - 7: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 5 - 7: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U4 L8 - 9: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 8 - 9: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      U4 Model App_markdown_instruction: "# This is the template for the U4 model\napp"
      U4 Model Design 1_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://curriculum.code.org/media/screen_model.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Creating a digital prototype\\r\n\\r\nUsing\nthe prototype to the right (click the image to enlarge it) you're going to\ncreate a digital prototype of the example app \"Recycling Finder\". We've\nalready added a few of the elements for you, including the title, but it doesn't\nlook quite right yet. We'll go over each element of this as we go, but for\nnow let's **just focus on the title**.\\r\n\\r\n<!--<img src=\"https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png\"\nstyle=\"width: 300px; float: right; clear: both;\">-->\\r\n\\r\n# Do This\\r\n\\r\n*\n**Make sure you are in Design Mode,** the switch appears above your app window\non the left.\\r\n* **Click on the title text** to view its properties.\\r\n*\n**Change the property \"text\"** to \"Recycling Finder\".\\r\n* **Change the\n\"font size\"** to make the title larger.\\r\n* **Change the \"text alignment\"**\nso the title is centered on the screen.\\r\n\\r\n_Note: Make sure you click\n**\"Run\"** before moving on to save your progress._"
      U4 Model Design 2_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Adding more text\\r\n\\r\nEach screen of your\napp is composed of multiple design _elements_. You can drag out elements from\nthe \"Design Toolbox\" on the left side of the workspace. To add more blocks\nof text, just drag out additional \"label\" elements.\\r\n\\r\n# Do This\\r\n\\r\n*\n**Drag out a new \"label\" element** and place it where the \"home_description\"\ntext should be.\\r\n* **Change the id** to match the prototype (home_description)\\r\n*\n**Change the field \"text\"** to match the prototype.\\r\n* **Resize** the\ntext area by clicking and dragging the bottom right corner.\\r\n* **Change\nany other properties** to make the text look like you want it to."
      U4 Model Design 3_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Adding images\\r\n\\r\nThe prototype just has\na plain black square where the logo should be - let's add an image to spice\nit up. The \"image\" element allows you to either upload an image from your\ncomputer or select from a library of graphic icons.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n*\n**Drag out a new \"image\" element** and place between the description and\nthe title.\\r\n* **Change the id** to match the prototype.\\r\n* **Click the\n\"Choose...\" link** next to the \"image\" field.\\r\n* **Select the \"Icons\"\ntab** and choose an icon for your logo.\\r\n* **Change the color** of the icon\nusing the \"icon color\" field."
      U4 Model Design 4_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Adding buttons\\r\n\\r\nButtons allow your\nuser to interact with your app. This prototype screen will need three buttons\n(each shaded gray on the prototype.) We've already added the Search button,\nso you just need to add Contact and About.\\r\n\\r\n# Do This\\r\n\\r\n* **Drag\nout a new \"button\" element** for each of the two remaining buttons.\\r\n*\n**Change the ids** to match the prototype.\\r\n* **Change the text** to match\nthe prototype.\\r\n* **Modify other properties** to make the screen look like\nyou'd like.\\r\n\\r\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"\nstyle=\"width: 500px;\">"
      U4 Model Design 5_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Making a Search Box\\r\n\\r\nThe search box\nin our prototype can be created using a \"Text Input\" element. This is a\nbox that your user can type into, and later your software can read what was\nentered and do something with it.\\r\n\\r\n# Do This\\r\n\\r\n* **Add a Text Input**\nelement.\\r\n* **Change the id** to match the prototype.\\r\n* **Add a Label**\nwith the text \"Location\" next to your text input."
      U4 Model Design 6_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Checkboxes\\r\n\\r\nThe type of recyclables\nyou're searching for can be set using \"Checkbox\" elements. We already added\na checkbox and label for glass, so you just need to add ones for paper and\nplastic.\\r\n\\r\n# Do This\\r\n\\r\n* **Add a Checkbox** for each of the options.\\r\n*\n**Change the ids** to match the prototype.\\r\n* **Add labels** to describe\neach checkbox."
      U4 Model Design 7_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://curriculum.code.org/media/screen_model.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Finishing Touches\\r\n\\r\nBy now you should\nhave a fairly complete (though non-functional) digital version of the paper\nprototype we started with. All that's left to do is check back over your\npaper prototype and add any final touches you might have missed.\\r\n\\r\n#\nDo This\\r\n\\r\n* **Check over the prototype** to make sure you've included\neverything.\\r\n* **Read through your IDs** and fix any that aren't descriptive.\\r\n*\n**Clean up** any rough edges by resizing or moving around elements."
      U4 Model Program 1.5_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://curriculum.code.org/media/screen_model_about.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Design the About Screen\\r\n\\r\nTo add elements\nto your new About screen, you'll need to first select it from the screens\ndropdown.\\r\n\\r\n# Do This\\r\n\\r\n* **Complete the About screen** using the\nprototype to the right.\\r\n* **Use the screens dropdown** to switch between\nyour Home and About screens."
      U4 Model Program 1_markdown_instruction: "# Adding a New Screen\\r\n\\r\nTo complete\nyour app, you're going to need more than than just a home screen. Each card\nthat you created in your paper prototype is represented by a \"screen\" in\nApp Lab. To create more screens, just click the dropdown at the top of the\napp display and select \"New Screen...\"\\r\n\\r\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\"\nstyle=\"width: 200px\">\\r\n\\r\n# Do This\\r\n\\r\n* **Create a New Screen**\nand give it the ID \"about\"."
      U4 Model Program 2.5_markdown_instruction: "# Contact Screen Import\\r\n\\r\nYet\nanother student created a Contact screen that you can import into your app.\nTheir share link is **<a href =\"https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/\"\ntarget=\"_blank\">https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\\r\n\\r\n#\nDo This\\r\n\\r\n* **Select \"Import Screen...** from the screens dropdown.\\r\n*\n**Copy and paste the above url** into the import screens dialog.\\r\n* **Select\nthe screen** you wish to import.\\r\n* **Click Import** to import the screen.\\r\n*\n**Use the screens dropdown** to make sure your app has Home, About, Contact,\nand Search screens."
      U4 Model Program 2_markdown_instruction: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\\r\n\\r\n<br/>\\r\n\\r\nClick\nto expand\\r\n\\r\n</div>\\r\n\\r\n# Screen Import\\r\n\\r\nIn addition to adding\nnew blank screens, you can import screens from \"Import Screen...\" To import\na screen from someone else, you'll need them to give you the sharing URL.\\r\n\\r\n**Note:**\nScreens you import _must not_ share any IDs with elements already in your\napp!\\r\n\\r\n# Do This\\r\n\\r\nAnother student has created a search results\nscreen that you can import into your app. Their app's share link is **<a\nhref=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\\r\n\\r\n*\n**Select \"Import Screen...** from the screens dropdown.\\r\n* **Copy and paste\nthe above url** into the import screens dialog.\\r\n* **Select the screen**\nyou wish to import.\\r\n* **Click Import** to import the screen.\\r\n* **Use\nthe screens dropdown** to switch between your Home, About, and Search screens."
      U4 Model Program 3_markdown_instruction: "# Button Events\\r\n\\r\nWith our screens\nin place, it's time to start actually _programming_ the app so that it responds\nto button clicks. For each button on each screen, you'll want to add an `onEvent`\nblock that watches for that button to be clicked and responds appropriately.\nTo start off with we'll just watch the \"home_search_btn\" button and print\nsomething to the console when it's clicked\\r\n\\r\n# Do This\\r\n\\r\nYou're\nnow in Code Mode (you can use the buttons above your app to switch between\nCode Mode and Design Mode). This is where you can write the code that will\nrespond to users interacting with your app.\\r\n\\r\n![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\\r\n\\r\n*\n**Drag out an `onEvent` block** from the code toolbox.\\r\n* **Select \"home_search_btn\"**\nfrom the \"id\" dropdown.\\r\n* **Drag out a `console.log` block** from the\nvariables drawer.\\r\n* **Run your app**.\\r\n* **Click the Search button**\nand look for messages in the console."
      U4 Model Program 4_markdown_instruction: "# Changing Screens On Click\\r\n\\r\nThe\n`setScreen` block will change your app to whichever screen you specify. If\nyou place a `setScreen` block _inside_ an `onEvent` block, you can program\nyour buttons to change to the correct screen.\\r\n\\r\n# Do This\\r\n\\r\nUsing\nthe `onEvent` block that you've created, make your program change to the\n\"search\" screen when the \"home_search_btn\" is clicked.\\r\n\\r\n* **Drag\nout a `setScreen` block** an put it inside the `onEvent` block.\\r\n* **Select\n\"search\"** from the `setScreen` dropdown.\\r\n* **Run your app** and test\nthe \"home_search_btn\" button."
      U4 Model Program 5_markdown_instruction: "# Wire Up the Other Buttons\\r\n\\r\nNow\nthat you've made one button work, just follow the same pattern for all of\nyour others.\\r\n\\r\n# Do This\\r\n\\r\n* **Add an `onEvent` block** for each\nbutton.\\r\n* **Select the button ID** from the \"id\" dropdown.\\r\n* **Add\na `setScreen` block** inside each `onEvent` block.\\r\n* **Select the screen\nID** from each `setScreen` dropdown.\\r\n* **Run your app** and test that all\nof the buttons work."
      U4 vigenere cipher 2_markdown_instruction: "# Simple Markdown?"
      U4-AP-Practice-Choose-The-Data-Concern_markdown_instruction: "# AP Practice\n- Identify the Data Concern\\r\n\\r\nOne component of the **AP Explore Performance\nTask** is describing a data concern related to a computing innovation.\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>Computing Innovation</b>\\r\n<br>\\r\n<br>\\r\n2d.  Using\nspecific details, describe\\r\n<br>\\r\n<br>\\r\n\\r\n<li>at least one data storage\nconcern, data privacy concern, or data security concern directly related to\nthe computing innovation.</li>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n## Sample Responses\\r\n\\r\nTwo\nof the responses below qualify as a data storage, privacy or security concern\nand two do not.  Can you identify the two that do?\\r\n\\r\n---\\r\n\\r\n**Response\nA:** *Facial recognition technology stores data mapping a user's face, for\nexample to unlock a phone. A privacy concern for this technology is that governments\ncould force technology companies to turn over this data allowing them to passively\nand continuously monitor the movements of its citizens without their knowledge\nor consent.*\\r\n\\r\n**Response B:** *Software that tracks soccer player movements\non the field can be used to generate new statistics that help value contributions\nof individual players. A data concern is that this information may be used\nto justify getting rid of less productive players.*\\r\n\\r\n**Response C:**\n*Social networks allow users to share vast amounts of private information\nabout their lives. A security concern of this technology is that this publicly\navailable data may enable stalkers or other criminals to identify potential\ntargets.*\\r\n\\r\n**Response D:** *Self-driving vehicles store vast amounts\nof information about their location and the world around them. A data concern\nfor the trucking industry is that all of this information could be coordinated\nto make trucks more efficient causing many people who drive trucks for a living\nto lose their jobs.*\\r\n\\r\n---\\r\n\\r\nHere's the scoring guide for this\npart of the question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n\\r\n## Choose the two (2) responses\nthat are data concerns\\r\n\\r\n**Choose the two responses (A, B, C, or D) that\nwould earn the point as data storage, security or privacy concern. Then justify\nwhy you chose them.**"
      U4-AP-Practice-Choose-The-Harmful-Effect_markdown_instruction: "# AP Practice\n- Justify the Score\\r\n\\r\nOne component of the **AP Explore Performance Task**\nis describing a data concern related to a computing innovation.\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>Computing Innovation</b>\\r\n<br>\\r\n<br>\\r\n2d.  Using\nspecific details, describe\\r\n<br>\\r\n<br>\\r\n<ul>\\r\n<li>at least one data\nstorage concern, data privacy concern, or data security concern directly related\nto the computing innovation.</li>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\n**Sample\nStudent Response:** A student submitted the following response as part of\nthis question.\\r\n\\r\n*\"FaceApp has permission to use many devices on your\nsmartphone, including the camera. A data concern that arises from this is\nthat the company could use this permission to see what you're doing.\"*\\r\n\\r\n\\r\n**Scoring\nGuide:** Here's the scoring guide for this part of the question\\r\n\\r\n<div\nstyle=\"magin:auto\">\\r\n\\t<img src=\"https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n# Justify the Score\\r\n\\r\nBased on\nthe scoring guidelines listed above, the student would NOT get Row 6 of the\nresponse and would likely not be awarded Row 7.\\r\n\\r\n**Explain why the student\nwould not be awarded either row. Make a suggestion(s) for ways this response\ncould be improved**\\r\n\\r\n\\r\n"
      U4-AP-Practice-Device-or-Data?_markdown_instruction: "# AP Practice - Justify\nthe Score\\r\n\\r\n**Written Prompt** -- Here is a portion of the AP Explore\nPerformance Task written response prompt 2d:\\r\n\\r\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>Computing Innovation</b>\\r\n<br>\\r\n<br>\\r\n2d.  Using\nspecific details, describe\\r\n<br><br>\\r\n<li>at least one data storage concern,\ndata privacy concern, or data security concern directly related to the computing\ninnovation.</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**Sample Student Response** -- here\nis a snippet of a sample student response addressing a data concern:\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> The\nFaceSnap app has permission to use many devices on your smartphone, including\nthe camera. A data privacy concern that arises from this is that the company\ncould access the camera to see what you're doing without your knowledge.</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n**Zero\npoints!!!** -- based on the scoring guidelines listed below the student would\n**NOT** get a point for Row 6 and would likely **NOT** be awarded a point\nfor Row 7 either.\\r\n\\r\n**Why?** Here are the scoring guidelines for rows\n6 and 7.\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n## Justify the score\\r\n\\r\nIn the space provided below explain:\\r\n\\r\n1.\nWhy the student would not be awarded either row based on the scoring guidelines.\n\\r\n2. Make a suggestion(s) for how to modify the response so the student\nwould get the point."
      U4-AP-Practice-Justify-the-Score_markdown_instruction: "# AP Practice - Justify\nthe Score\\r\n\\r\n**Written Prompt** -- Here is a portion of the AP Explore\nPerformance Task written response prompt 2d:\\r\n\\r\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>Computing Innovation</b>\\r\n<br>\\r\n<br>\\r\n2d.  Using\nspecific details, describe\\r\n<br><br>\\r\n<li>at least one data storage concern,\ndata privacy concern, or data security concern directly related to the computing\ninnovation.</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**Sample Student Response** -- here\nis a snippet of a sample student response addressing a data concern:\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> The\nFaceSnap app has permission to use many devices on your smartphone, including\nthe camera. A data privacy concern that arises from this is that the company\ncould access the camera to see what you're doing without your knowledge.</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n**Zero\npoints!!!** -- based on the scoring guidelines listed below the student would\n**NOT** get a point for Row 6 and would likely **NOT** be awarded a point\nfor Row 7 either.\\r\n\\r\n**Why?** Here are the scoring guidelines for rows\n6 and 7.\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n## Justify the score\\r\n\\r\nIn the space provided below explain:\\r\n\\r\n1.\nWhy the student would not be awarded either row based on the scoring guidelines.\n\\r\n2. Make a suggestion(s) for how to modify the response so the student\nwould get the point."
      U4L01 Free Response_markdown_instruction: "This is the free response question\ntext.\n"
      U4L02 - Objects - Template1_markdown_instruction: "# Template"
      U4L02 - Objects - createObject_markdown_instruction: "# Creating Your Own Objects\\r\n\\r\n**Objects\nare unordered collections of name value pairs**. Like an array they can hold\nmany pieces of information, but where arrays use a numeric index to reference\nspecific pieces of information, objects use a descriptive name. We lose the\n\"ordered\" nature of our data, but we gain the ability to describe the purpose\nof each piece of data within a collection.\\r\n\\r\nConsider the event objects\nyou just looked at. An array can just as easily store all the information\nthey contain, but it would be difficult to determine what any of the values\nrepresent.\\r\n\\r\n**The syntax for creating objects of your own is shown below**\\r\n\\r\n*\nCurly braces are placed around the contents of an object `{}`\\r\n* Names are\nseparated from values with a colon `:`\\r\n* Name value pairs are separated\nby commas `,`\\r\n* Names must be strings. If they are not they will be coerced\nto strings, possibly creating unpredictable behavior.\\r\n* **Example:** `var\nuser = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\\r\n\\r\n#\nDo This\\r\n\\r\n**Starter code** is provided which creates an empty object\nand displays its value.\\r\n\\r\n* Modify the code **using the syntax above**\nto create an object of your own. Your object should contain **at least 5 pieces\nof information including both strings and numbers**.\\r\n* **Run the program**\nand confirm all values in your object appear as you expected."
      U4L02 - Objects - eventParameter_markdown_instruction: "# We've Seen Objects\nBefore\\r\n\\r\nWe're going to see how we can use objects to organize data\nin our own apps, but this actually isn't the first time we've used objects\nin our programs. **The object that we've used most frequently is the event\nparameter of our event handlers**. This single object contains many pieces\nof information about the event which can be accessed to determine how to respond\nto the event. For example `event.key` contains the key that was pressed for\nkey events, and `event.offsetX` and `event.offsetY` contain the location of\nthe mouse for mouse events.\\r\n\\r\nBefore we move on to creating objects of\nour own, let's take another look at this event parameter (or as we'll call\nit now event object) and recall how they were used.\\r\n\\r\n# Do This\\r\n\\r\n**Starter\ncode** is provided which creates event handlers for both a \"click\" and \"keydown\"\nevent and displays the contents of the event object they create.\\r\n\\r\n*\n**Run the program** and trigger both a keyboard event and a mouse event.\\r\n*\n**Examine the objects displayed in the Debug Console** to recall the different\npieces of information they contain.\\r\n* **Reflect: ** Why wouldn't we want\nthis information stored in many variables? Why wouldn't we want this information\nstored in an array?"
      U4L02 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L03 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L04 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L05 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L06 Data Storage 1_markdown_instruction: "## Create Record\\r\n\\r\n#### Fill\nin your name instead of \"Enter Your Name\", run the app and click the button.\nRun it multiple times with different names! Watch the console and use the\n‘View Data” button to see how the table is updated. *As you play around make\nsure you can explain the purpose of each of the circled parts of the diagram.*\\r\n\\r\n![](https://images.code.org/2768f0e65aa2167da70d24aa3975588a-image-1441998331790.52.01\nPM.png)"
      U4L06 Data Storage 2_markdown_instruction: "## User Input Data\\r\n\\r\nThe app\nis a continuation of the previous one we started. Add a text label to collect\nthe users name and use that as the data input for the record. Instead of creating\nthe JSON object and updating the values when the button is click try updating\nthe JSON object whenever the value in the textbox is changed. \\r\n\\r\n**Run\nthe app and click the button multiple times and see what happens. Is there\na problem you notice? **"
      U4L06 Data Storage 3_markdown_instruction: "## Clear the Textbox\\r\n\\r\nWe\nwant to improve the user experience. Once they have submitted their data for\nstorage, it would be nice to clear the textbox.  Update your app to clear\nthe textbox after the data is stored."
      U4L06 Data Storage 4_markdown_instruction: "## Data From Dropdowns\\r\n\\r\nYour\napp may need other types of user data to be saved other than just text boxes.\n\\r\n\\r\n** Add a label and drop down box to your app and save the data to\nyour JSON object and add it to your table. **\\r\n\\r\nDon't forget about the\nuser experience! How can you reset the dropdown after the user information\nhas been stored?"
      U4L06 Data Storage 5_markdown_instruction: "## Data Collection From Other Design\nElements\\r\nThere are other design elements we could use to collect data from\na user. Check out radio buttons and checkboxes. Lets add a couple radio buttons\nor checkboxes to our app. Then find a way to collect the data from those.\n**Hint** This may take a few more steps than the data we have collected before.\n"
      U4L06 Data Storage 6_markdown_instruction: "## Non-User Provided Data\\r\n\\r\nThere\nare ways to collect data without having a user enter data. Two ways to collect\ndata not provided by the user are the getTime() and getUserId() blocks. Use\none of these blocks to collect additional data. "
      U4L06 Data Storage 7_markdown_instruction: "For your data collection app you\nmay need to collect data over multiple screens. Add a second screen to the\nsample app we have been building to capture an image from a user. Return to\nscreen 1 after the JSON object has been stored in the table."
      U4L06 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L07 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L08 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L09 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L10 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L11 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L12 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L13 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L14 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L15 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L15 Read Data 1_markdown_instruction: "## Reading Data\\r\n\\r\nWe have looked\nclosely at createRecord. Now we are going to to learn how to readRecords out\nof a table. This can be useful for instances where you want to display stored\ndata back to your user.\\r\n\\r\n1. Look at the code and write down on paper\nwhat you think it will do.  Think back to createRecord as you make your guess.\\r\n1.\nRun the level\\r\n1. Open the data view\\r\n1. Take a look at the outcome and\nsee if you connect the code to the output.\\r\n1. Make it print a different\ncolumn of information.\\r\n"
      U4L15 Read Data 2_markdown_instruction: "Student should create a sentence which\nputs together all the pieces from a record\\r\n\\r\n**Name** is **Age** years\nold and like **Food**"
      U4L15 Read Data 3_markdown_instruction: "Print the sentence using the first\nJSON object in the array.\\r\n\\r\n** Hint: ** Delete the for loop - dont forget\nthe closing brace! See what happens."
      U4L15 Read Data 4_markdown_instruction: "Now instead of the first record, we\nwant a random record from the list of records.  Can you figure out how to\nmake this happen?\\r\n\\r\n**HINT**\\r\n1. Find out the length of the records\\r\n1.\nMake a variable that holds a random number\\r\n1. Use it to get a random record"
      U4L16 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L17 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L18 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L19 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L2 - FR Practice AP response about data_markdown_instruction: "## AP Practice\\r\n\\r\nThe\nAP *Explore Performance task* requires you to provide short written responses\nabout an innovation that you research.  Here are portions of the AP writing\nprompts to consider:\\r\n\\r\n\\tUsing specific details, describe:\\r\n    • the\ndata your innovation uses;\\r\n    • how the innovation consumes (as input),\nproduces (as output), and/or transforms data\\r\n\\r\nPractice an AP response\nby responding the prompt above, summarizing the data innovation you researched\nfor this lesson. Your first sentence should name the innovation you are writing\nabout.\\r\n"
      U4L20 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L21 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L22 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L23 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L24 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L3 - FR Identifying people_markdown_instruction: "Consider the following\nscenario:\\r\n\\r\n*In order to dampen the effect of a potential data breach\nor accidental release of records a health care company has decided to remove\na lot of personally identifiable information in its health records, like names,\nphone numbers and so on.  In its place, along with all medical information,\nthey plan to store ONLY the gender, age, and zip code of the patient.*\\r\n\\r\n**Give\nyour opinion**: Is this health care company doing enough to protect the personal\ninformation of patients? If yes, explain why this is the best they can do.\nIf no, explain what they should do instead.  (Limit your response to a few\nsentences)."
      U4L4 - FR cost of free_markdown_instruction: "## AP Practice\\r\n\\r\nThe AP\n*Explore Performance task* requires you to provide short written responses\nabout an innovation that you research.  Here are portions of the prompts to\nconsider:\\r\n\\r\n\\r\n1. *Explain at least one beneficial effect and at least\none harmful effect the computing innovation has had, or has the potential\nto have, on society, economy, or culture.*\\r\n\\r\n2. *Using specific details,\ndescribe: at least one data storage concern, data privacy concern, or data\nsecurity concern directly related to the computing innovation.*\\r\n\\r\n\\r\nRespond\nto both of those prompts in light of what you learned about data privacy policies\nin this lesson. The \"innovation\" you choose could be narrow, like a specific\napp, or if it makes sense broad, like an entire company.  \\r\n\\r\nThe main\nobjectives of your response are to:\\r\n\\r\n* Name one benefit (or potential\nbenefit)\\r\n* Name one harmful effect (or potentially harmful)\\r\n* Be specific\nabout the data that (presumably) leads to the harmful effect.\\r\n\\r\nLimit\nyour response to a few sentences for each point above."
      U4LXX Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U5 AP Create Practice onEvent Doesnt Count_markdown_instruction: "# AP Practice\n- Create PT - Choosing an Abstraction\\r\n\\r\nOne component of the **AP Create\nPerformance Task** is creating and describing an abstraction in your program.\nHere's the actual prompt.\\r\n\\r\n<div style=\"width: 80%; margin: auto; background-color:\n#EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.\nWritten Responses</b>\\r\n<ul>\\r\n2d. Capture and paste a program code segment\nthat contains an abstraction you developed individually on your own (marked\nwith a <b>rectangle</b> in <b>section 3</b> below). This abstraction must\nintegrate mathematical and logical concepts.\\r\nExplain how your abstraction\nhelped manage the complexity of your program.\\r\n<i>(Must not exceed 200 words)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's\none row of the scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n# Grade the Response\\r\n\\r\nBelow is\na segment of code from a \"clicker\" program with a rectangle drawn around\na portion of the code identifying an abstraction.\\r\n\\r\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18\nPM.png)\\r\n\\r\nEach row is worth one point that either can or cannot be awarded.\n**Explain why you would or would NOT award the point for Row 7 based on the\ncriteria given above.**"
      U5 AP Practice Create Abstraction Color Sleuth_markdown_instruction: "# AP\nPractice - Create PT - Abstraction\\r\n\\r\nOne component of the **AP Create\nPerformance Task** is describing an abstraction within your program.\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2. Written Responses</b>\\r\n<ul>\\r\n2d.\nCapture and paste a program code segment that contains an abstraction you\ndeveloped individually on your own (marked with a <b>rectangle</b> in <b>section\n3</b> below). This abstraction must integrate mathematical and logical concepts.\nExplain how your abstraction helped manage the complexity of your program.\\r\n<i>(Must\nnot exceed 200 words)</i></ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's one row of\nthe scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40\nPM.png\">\\r\n</div>\\r\n\\r\n# Write the Response\\r\n\\r\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40\nPM.png)\\r\n\\r\n<div style=\"clear:both\"></div>\\r\n\\r\n<br>\\r\n\\r\nThe code\nselection above is taken from the Color Sleuth activity you just completed.\nThis selection **would count as an abstraction** on the Create PT, but to\nearn Row 8 **you will need to describe how this abstraction manages complexity**.\n\\r\n\\r\n**Write response 2d describing the abstraction above. Use the writing\nprompt and scoring guidelines as a guide.**"
      U5 AP Practice Create Algorithm Color Sleuth_markdown_instruction: "# AP Practice\n- Create PT - Algorithm\\r\n\\r\nOne component of the **AP Create Performance\nTask** is describing an algorithm within your program.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>2. Written Responses</b>\\r\n<ul>\\r\n2c.\nCapture and paste a program code segment that implements an algorithm (marked\nwith an <b>oval</b> in <b>section 3</b> below) and that is fundamental for\nyour program to achieve its intended purpose. This code segment must be an\nalgorithm you developed individually on your own, must include two or more\nalgorithms, and must integrate mathematical and/or logical concepts. Describe\nhow each algorithm within your selected algorithm functions independently,\nas well as in combination with others, to form a new algorithm that helps\nto achieve the intended purpose of the program. <i>(Must not exceed 200 words)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's\ntwo rows of the scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31\nAM.png\">\\r\n</div>\\r\n\\r\n# Write the Response\\r\n\\r\n<img src=\"https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22\nPM.png\" style=\"float:right\">\\r\n\\r\nThis code selection is taken from the\nColor Sleuth activity you just completed and **would count as an algorithm**\non the Create PT.\\r\n\\r\n**Write response 2c describing the algorithm above.\nUse the writing prompt and scoring guidelines as a guide.** Here are the main\npoints to make sure you include.\\r\n\\r\n* Name your main algorithm and each\nof the two sub-algorithms\\r\n* Explain *what* each sub-algorithm does and\n*how* the code of each actually works\\r\n* Explain how the main algorithm\nworks and how it helps achieve the purpose of the program"
      U5 AP Practice Create Algorithm How vs What_markdown_instruction: "# AP Practice\n- Create PT - Process\\r\n\\r\nOne component of the **AP Create Performance\nTask** is describing the development process used for your program.\\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2. Written Responses</b>\\r\n<ul>\\r\n2b.\nDescribe the incremental and iterative development process of your program,\nfocusing on two distinct points in that process. Describe the difficulties\nand/or opportunities you encountered and how they were resolved or incorporated.\nIn your description clearly indicate whether the development described was\ncollaborative or independent. At least one of these points must refer to independent\nprogram development. <i>(Must not exceed 200 words)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's\ntwo rows of the scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32\nAM.png\">\\r\n</div>\\r\n\\r\n# Grade the Response\\r\n\\r\nA student wrote the\nfollowing response.\\r\n\\r\n*\"In developing my program I encountered two major\nproblems. The first one was early in programming when sometimes the apple\nwould disappear from the screen. By debugging my program I was able to recognize\nthat the ranges of my random X values went from 0-3200, not 0-320. I was easily\nable to correct this issue in my code. A second issue occurred when I realized\nthat classmates using the game often didn't know how to start it. In order\nto fix this problem I made the button significantly larger and a different\ncolor than the background. Afterwards I no longer saw this problem.\"*\\r\n\\r\n\\r\nEach\nrow is worth one point that either can or cannot be awarded. **Explain why\nyou would or would not award the points for Row 2 and Row 3 based on the criteria\ngiven above**"
      U5 AP Practice Create Process_markdown_instruction: "# AP Practice - Create\nPT - Process\\r\n\\r\nOne component of the **AP Create Performance Task** is\ndescribing the development process used for your program.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>2. Written Responses</b>\\r\n<ul>\\r\n2b.\nDescribe the incremental and iterative development process of your program,\nfocusing on two distinct points in that process. Describe the difficulties\nand/or opportunities you encountered and how they were resolved or incorporated.\nIn your description clearly indicate whether the development described was\ncollaborative or independent. At least one of these points must refer to independent\nprogram development. <i>(Must not exceed 200 words)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's\ntwo rows of the scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32\nAM.png\">\\r\n</div>\\r\n\\r\n# Grade the Response\\r\n\\r\nA student wrote the\nfollowing response.\\r\n\\r\n*\"In developing my program I encountered two major\nproblems. The first one was early in programming when sometimes the apple\nwould disappear from the screen. By debugging my program I was able to recognize\nthat the ranges of my random X values went from 0-3200, not 0-320. I was easily\nable to correct this issue in my code. A second issue occurred when I realized\nthat classmates using the game often didn't know how to start it. In order\nto fix this problem I made the button significantly larger and a different\ncolor than the background. Afterwards I no longer saw this problem.\"*\\r\n\\r\n\\r\nEach\nrow is worth one point that either can or cannot be awarded. **Explain why\nyou would or would not award the points for Row 2 and Row 3**.\\r\n\\r\nHint:\nPay particular attention to the last column of the scoring guidelines and\nthe checklists entitled \"Do NOT award a point if...\""
      U5 Booleans_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n1.\nWhat's a *Boolean Expression?*\\r\n2. Why is it called a \"Boolean\"?\\r\n3.\nIs this a legal expression?  `10 > 25`?"
      U5 Check Password if statement lock image_markdown_instruction: "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\"\nstyle=\"float: right; width: 150px\">\\r\n## You try it -- Text Password Checker\\r\n\\r\n**Key\nidea**: You can use `==` to compare strings as well as numbers.  \\r\n\\r\n*\nLet's use an if-statement in an event handler to compare text that a user\ninputs in a UI element.\\r\n\\r\n**The setup:**\\r\n* Note the setup in Design\nMode\\r\n* There are two images: a red lock, and a green \"unlock\".\\r\n* The\ngreen \"unlock\" is *hidden* at the start.\\r\n\\r\n## Do this:\\r\n\\r\n**Add\nan if-statement to the event handler to check the password and display the\n\"unlock\" only if the password is correct** \\r\n\\r\n* You can use `==` to\ncompare the text you get from the *password_input* text box and a string you\nwant to use as the password. The boolean expression you should use should\nlook like this:\\r\n\\r\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\\r\n\\r\n*\nIf the user entered the correct password then **show** the green \"unlock\"\nand **hide** the red lock.\\r\n\\t* We've provide the code to hide and show\nthe images. You just need to add the if-statement.\\r\n* Otherwise do nothing.  They\ncan try again.\\r\n\\r\n"
      U5 Check Password if-else string_markdown_instruction: "<img src=\"https://images.code.org/e878b414d7f8ce4fd96a2c160602e07e-image-1479830181568.gif\"\nstyle=\"float: right\">\\r\n\\r\n## You try it - adding else to the password\nchecker\\r\n\\r\nIf we add an else clause to the password checker we can make\nit act a little fancier - study the animation at right.\\r\n\\r\n**Add an `if-else`\nstatement to the *login_btn* event handler that:**\\r\n\\r\n * Shows the unlock\nand displays \"Access Granted\" if the user enters the password correctly.  \\r\n\n* Otherwise, show the lock and display \"Access Denied\"\\r\n\\r\nNote the setup:\\r\n\\r\n*\nAgain we have two images - a lock and an unlock - but this time *both* are\nhidden at the start.\\r\n* There is also a text label at the bottom where we'll\ndisplay a message, but it starts empty as well\\r\n\\r\nThere are **two event\nhandlers**\\r\n\\r\n* The first event handler - on *login_btn* \"click\" - is\nwhere you should add your `if-else` statement\\r\n\\t* We've provided the statements\nyou need to add into the appropriate clause\\r\n\\r\n* The second event handler\n- on password_input \"click\" -- acts as a reset\\r\n\\t* You do not need to\nmodify anything in this event handler\\r\n    * It simply hides all images\nand sets the message text to `\"\"`\\r\n\\r\n\\r\n<details><summary>HINT: [click\nto expand]</summary>\\r\n<br>\\r\nYour if-else statement is going to use the\nsame boolean expression as before.  The structure of it should look like this:\\r\n<pre>\\r\nif(\ngetText(\"password_input\") == \"some secret\" ){\\r\n   // show green unlock\\r\n   //\ndisplay \"Access Granted\"\\r\n} else {\\r\n\\t// show red lock\\r\n   // display\n\"Access DENIED\"\\r\n}\\r\n</pre>\\r\n</details>"
      U5 ColorSleuth add global var correct plus console.log_markdown_instruction: "##\nNext: display which button was chosen in the console\\r\n\\r\nIn the game the\n\"correct\" button is the one we randomly chose to make a different color.  Let's\nadd a console.log message to display its ID - it will make future work easier.\\r\n\\r\n*\nadd a console.log message like `console.log(\"correct one is: \" + randButtonId)`\nat the end of the `setBoard` function.\\r\n* overall the setBoard function\nwill look like this:\\r\n\\r\n\\t\\tfunction setBoard(){\\r\n        \\t\\r\n            //\ngenerate random color\\r\n            // make all 4 buttons have same color\\r\n            //\npick a random Button Id\\r\n            // set its color to something different\\r\n            \\r\n            console.log(\"correct\none is: \" + randButtonId);  <-- Add this line\\r\n\\t\\t}"
      U5 ColorSleuth add score variables and update with console_markdown_instruction: "Fun\npart - hide/show player highlight in app.\\r\n\\r\nDO THIS:\\r\n\\r\n* in nextTurn()\nhide both player highlights\\r\n* in if statement show the correct one in \\r\n\\r\n[anigif\nshowing functionality]\\r\n\\r\n"
      U5 ColorSleuth checkCorrect make global var_markdown_instruction: "## Step\n1 - Make randButtonId a global variable\\r\n\\r\nMaking `randButtonId` global\nmeans modifying the code to declare/create it *outside* of any function and\nthen setting its value *inside* setBoard().\\r\n\\r\n* Create a new variable\non line 1: `var randButtonId`;\\r\n* **Switch to text-mode** \\r\n* Inside the\nsetBoard() function, delete the `var` in front of `randButtonId` so that rather\nthan re-creating the variable, we set the value of the global one.\\r\n\\r\nUpdated\ncode should look like this (new or updated lines have `<--` arrows)\\r\n\\r\n\\tvar\nrandButtonId;     <-- declare as global variable\\r\n    setBoard();\\r\n    function\nsetBoard(){\\r\n    \\t\\r\n        //...set board code...\\r\n        \\r\n        randButtonId\n= \"button\"+randomNumber(1,4);    <-- remove \"var\" from assignment\\r\n        \\r\n    }\\r\n\\r\n**Testing\nit out**\\r\n\\r\nUnfortunately, there is not much to test here other than to\ndetermine your code still functions.  This is just a step that doesn't really\nchange any functionality.\\r\n\\r\n* If it works the same as before, it's probably\nright, move on.\\r\n* If it's broken or doesn't run double-check the changes\nyou made.\\r\n"
      U5 ColorSleuth checkCorrect part1 link to event handlers_markdown_instruction: "##\nSteps 2 and 3 - Add checkCorrect(buttonId) and Event Handlers\\r\n\\r\nThis\nfeels like a big step, but it's actually just a few small ones.  We'll see\nsome new functionality at the end.\\r\n\\r\n1. **Add a function definition for\n`checkCorrect(buttonId)` that:**\\r\n\\t* Contains a console.log message to\ndisplay the parameter\\r\n    * Calls setBoard()\\r\n\\r\n            function\ncheckCorrect(buttonId){\\r\n                console.log(\"Checking: \"+buttonId);\\r\n                setBoard();\\r\n            }\\r\n\\r\n2.\n**Add 4 \"click\" event handlers - one for each button - that call checkCorrect**\\r\n\\t*\nThe event handling functions should call `checkCorrect(...)` with its button\nid.\\r\n\\t* So for *button1* it should look something like:\\r\n\\r\n\\t\\t\\tonEvent(\"button1\",\n\"click\", function(){\\r\n        \\t\\tcheckCorrect(\"button1\");\\r\n        \\t});\\r\n        \\r\n\\r\n**TESTING**\\r\n\\r\nOnce\nyou've added this code you should really see some changes.  When you click\non buttons you should see:\\r\n1. Console messages showing what was clicked\\r\n2.\nThe board should change each time you click a button\\r\n3. Console messages\nshowing the correct answer for each new board.\\r\n\\r\n![](https://images.code.org/2941465a60c0f61c83979192c1de29ce-image-1481146240419.gif)"
      U5 ColorSleuth checkCorrect part2 add if statement to check correct_markdown_instruction: "##\nStep 4 - add an if-statement in *checkCorrect*\\r\n\\r\n**Add a simple `if-else`\nstatement inside the function `checkCorrect` that:**\\r\n\\r\n* Compares `buttonId`\nand `randButtonId` and\\r\n* Displays a message to console that they got right\nor wrong\\r\n\\r\nInsert something like this *between* your existing console.log\nstatement and the call to setBoard()\\r\n\\r\n\\t\\tif( buttonId == randButtonId\n) {\\r\n        \\tconsole.log(\"You got it right!\");\\r\n        } else {\\r\n        \\tconsole.log(\"WRONG\");\\r\n        }\\r\n\\r\n**TEST\nIT: Verify that the if-statement is giving correct results**\\r\n<img src=\"https://images.code.org/8fd0d14a4c32a6e36299251a2edb56bb-image-1481148748359.png\"\nstyle=\"float: right\">\\r\n\\r\n* You should be able to click on buttons and\nsee messages that verify your if-statement is working\\r\n* Be sure to click\non all the buttons to test the scenarios\\r\n\\t* Is it detecting correct or\nincorrect button clicks properly?\\r\n    * Is it changing the board every\ntime?\\r\n* Your console output might look something like what's shown at\nright.\\r\n\\r\n**TIP:** It might be useful to temporarily remove or comment\nout the call to `setBoard()` so the board doesn't change every time when\nyou click.  This would let you verify that every button works right for a\nsingle board setup.  Then add it back in once you're done."
      U5 ColorSleuth implement end game_markdown_instruction: "# Challenge - Pick\na way for the game to end and implement it\\r\n\\r\nYour challenge now is to\nadd some code completely on your own.  Use what you've learned so far, and\nAlexis and Michael's discussion to help you.\\r\n\\r\n**This is the last programming\nlevel**\\r\n\\r\n* Make all changes and additions to the program that you want\nhere\\r\n* When you're done hit **Submit**\\r\n\\r\n**Goal:** Add code that\nprovides a way for the game to end which:\\r\n* Switches to the `gameOver_screen`\\r\n*\nShows which player won the game by showing `player1Win_label` or `player2Win_label`\\r\n\\r\n*We've\nprovided `gameOver_screen` as part of the template for this project -- Switch\nto Design Mode to take a look at what's there*\\r\n\\r\n**Suggestions**\\r\n*\nIf you're stuck for ideas, try to implement the end game condition of \"first\nto 10\" - first player to reach a score of 10 wins.\\r\n* You should use the\nsuggestion from the discussion to add a function like `checkGameOver()` and\ncall it from `checkCorrect`\\r\n\\r\n<details><summary><strong>Above and Beyond:\noptional extra options for your project [Click to expand]</strong></summary>\\r\n\\r\n<p>\\r\nHere\nare a bunch of ways you can add to or extend the project:\\r\n\\r\n</p>\\r\n<ul>\\r\n\\r\n\\r\n<li>Add\n\"start over\" button on the last screen, which should reset everything, and\ngo back to the game play screen\\r\n</li>\\r\n<li>Add a welcome screen that\nexplains the rules and invites the player to start the game (make it the default\nscreen)\\r\n</li>\\r\n<li>Make the game more difficult:</li>\\r\n<uL>\\r\n<li>Make\nthe colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\\r\n    <li>Or\nmake the difficulty variable - you can generate a random number between 5\nand 20 and add that to the RGB values. </li>\\r\n    <li>Or make it get progressively\nmore difficult - use a variable to keep track of how much to add to each RGB\nvalue and decrease it over time.</li>\\r\n\\t<li>Or on a welcome screen ask\nif the player wants to play easy, medium, or hard.</li>\\r\n</uL>\\r\n\\r\n<li>Add\na timing element - lookup the documentation for setTimeout which calls a function\nafter a certain amount of time. (Note: you may need to remix the project in\nas a free-play App Lab project to do this).\\r\n</li>\\r\n<li>You can also use\n<code>getTime()</code> at the beginning and end of your code to figure out\nhow long it took for the game to end, which you could use to adjust the score.</li>\\r\n</ul>\\r\n</details>\\r\n"
      U5 ColorSleuth nextTurn pt1 add var and function and console.log_markdown_instruction: "#\nNext Step - Alternating Turns\\r\n\\r\nThis is another step that requires 3\nparts.  But **notice there is a pattern** to what we're starting to do, and\nit is a common one:\\r\n\\r\n1. Add a global variable\\r\n2. Add a new function\ndefinition (that updates that variable in some way)\\r\n3. Add a call to the\nnew function you just made.\\r\n\\r\nAnd that's exactly what you're going\nto do right now.\\r\n\\r\n1. Add global `var currentPlayer = 1` to the top of\nthe program.\\r\n2. Add a new function definition in your code for `switchPlayer()`\nwith an if-statement and console.log message.  It should look something like\nthis:\\r\n\\r\n\\t\\tfunction switchPlayer(){\\r\n        \\tif(currentPlayer==1){\\r\n            \\tcurrentPlayer=2;\\r\n            }\nelse {\\r\n            \\tcurrentPlayer=1;\\r\n            }\\r\n            console.log(\"current\nplayer is: \"+currentPlayer);\\r\n        }\\r\n\\r\n3. Add a call `switchPlayer()`\nas the last line inside the `checkCorrect` function\\r\n\\r\n**TEST IT OUT**\\r\n<img\nsrc=\"https://images.code.org/e0cbd1d16fa43842d2352df55caa2959-image-1481210618149.png\"\nstyle=\"float: right\">\\r\n\\r\n* After you add this code, you should see a\nnew message in the console amongst the others indicating whose turn it is.  The\noutput might look something like the output shown at right (look for lines\nthat say **current player is: 2**)\\r\n* Note: right now most of our output\nis in the console because it's easy and fast to verify that things are working.  We'll\nstart updating the UI next!\\r\n"
      U5 ColorSleuth nextTurn pt1 update UI to indicate turn_markdown_instruction: "Fun\npart - hide/show player highlight in app.\\r\n\\r\nDO THIS:\\r\n\\r\n* in nextTurn()\nhide both player highlights\\r\n* in if statement show the correct one in \\r\n\\r\n[anigif\nshowing functionality]\\r\n\\r\n"
      U5 ColorSleuth nextTurn pt2 update UI to indicate turn_markdown_instruction: "##\nUpdate the UI to indicate whose turn it is\\r\n\\r\n<img src=\"https://images.code.org/214101a637c0100af7dd17ff9ec5250e-image-1481211801440.gif\"\nstyle=\"float: right\">\\r\n\\r\nA choice has been made for you in the design\nof the app to indicate whose turn it is in the UI.\\r\n\\r\n* Notice in the\ndesign that there are two gray rectangles behind the player scores with ids\n`player1_highlight` and `player2_highlight`.  `player2_highlight` starts out\nhidden.\\r\n\\r\nDo this:\\r\n* Add code to the `if` statement in `switchPlayer`\\r\n*\nUse the `hideElement` and `showElement` commands (found in the UI controls\ntoolbox) to show and hide these rectangles as a way of indicating whose turn\nit is.\\r\n* For example if it's player 1's turn, then show `player1_highlight`\nand hide `player2_highlight`\\r\n\\r\nWhen you're done you should see the player\nhighlight alternate like the graphic above.\\r\n\\r\n**TIP**: Make the `player2_highlight`\nstart out hidden by checking the \"hidden\" box for it in design mode.\\r\n\\r\n\\r\n\\r\n"
      U5 ColorSleuth part 1_markdown_instruction: "# You try it -- use setProperty\\r\n\\r\nTime\nto get coding!  This is the starting point for a whole new project. \\r\n\\r\n*\nWe've started you out with **all of the UI elements in place**.  You'll\nwork with this design and layout for now.\\r\n* We've also started you out\nwith some code that sets the color of one of the buttons.\\r\n* Use setProperty\n3 more times to set the color of the other 3 buttons so all 4 are orange.\\r\n    *\nWe've chosen an orange color `rgb(230,155,0)` for now, but this will change\nlater.\\r\n\\r\n"
      U5 ColorSleuth part 2 small color change_markdown_instruction: "# Let's make\none square slightly different\\r\n\\r\nAdd two lines to the bottom of the code\nyou have that look like something like this.\\r\n\\r\n![](https://images.code.org/abec0079a632f5e6ad7be28beb30763a-image-1490105722035.png)\\r\n\\r\nWhat\ndoes this do? We're doing two things...\\r\n\\r\n1. Creating a variable to\nhold the RGB string of a different color, and \\r\n2. Overwriting the background\ncolor of one of the buttons after having just set it a few lines earlier\\r\n\\r\nYes,\nthis means your code will change the background color of one of the buttons\na few lines after you just set the color in the first place but it will happen\nso fast you won't notice, and doing it this way will be useful later on.\\r\n\\r\n"
      U5 ColorSleuth part 3 pick random button_markdown_instruction: "# You try it\n- Pick a button at random to make a different color\\r\n\\r\nWe've included\nthe code discussed on the previous page below. \\r\n\\r\nThe last lines of your\ncode should look something like this:\\r\n\\r\n\\r\n    var diffColor = rgb(250,\n175, 20);\\r\n    var randButtonId = \"button\"+randomNumber(1,4);   // create\na random button Id\\r\n    setProperty(randButtonId, \"background-color\",\ndiffColor);  // set its color to diffColor\\r\n\\r\n\\r\nNotice that there is\nreally only one new line - to make the `randButtonID` variable.  \\r\nThe other\nchange is to replace *\"button3\"* as the id in setProperty with *randButtonID*.\\r\n\\r\nSuggestion:\\r\nAdd\n`console.log(randButtonId)` somewhere after you generate the button ID so\nyou can see which button is supposed to have the different color.  It might\nbe hard to spot!"
      U5 ColorSleuth part 4 make random RGB string_markdown_instruction: "## You\ntry it - make a random color\\r\n<img src=\"https://images.code.org/b4910df16847c1b74034f884dc21a528-image-1481043331643.gif\"\nstyle=\"float: right\">\\r\n**First:** Make the base `color` be a string with\nrandom values in it rather than hard-coded.\\r\n\\r\n**Second:** Add 20 to each\nof the R, G, B values to make `diffColor`\\r\n\\r\n**This means** you will have\nto insert several lines of code in two different places in your program: just\nbefore you create `var color` and just before `var diffColor`.\\r\n\\r\n**Run\nmultiple times to test!** - Each time you run the program you should see randomly\nchosen colors with a randomly chosen button that's slightly different.\\r\n\\r\n<details><summary>Code\nReference from Alexis and Michael's discussion [click to expand] </summary>\\r\n\\r\n<p>\\r\nHere\nis the code they discussed for creating an RGB string with random values:\n\\r\n</p>\\r\n\\r\n\\r\n<pre style=\"width: 400px\"><code>var R = randomNumber(0,235);\\r\nvar\nG = randomNumber(0,235);\\r\nvar B = randomNumber(0,235);\\r\n\\r\nvar color\n= rgb(R, G, B);\\r\n</code></pre>\\r\n\\r\n<br>\\r\n<p>\\r\nAnd here is the code\nthey discussed to make <code>diffColor</code>:\\r\n</p>\\r\n<pre style=\"width:\n400px\"><code>R = R+20;  //add 20 to current value of R\\r\nG = G+20;\\r\nB\n= B+20;\\r\n\\r\nvar diffColor = rgb(R, G, B);\\r\n</code></pre>\\r\n\\r\n</details>\\r\n\\r\n"
      U5 ColorSleuth part 4 make setBoard function_markdown_instruction: "You should\nnow have code that sets the color of the buttons and picks one at random to\nmake a slightly different color.  \\r\n\\r\nThis is good functionality that,\nnow that it's working means we can move onto the next problem. But for the\ngame we're going to want to do this multiple times so that's a clue we should\nmake a function\\r\n\\r\nDO THIS:\\r\n\\r\n* Define a new function called `setBoard`.\\r\n*\nMove all of the code that sets the colors of the buttons inside the function\n[licecap]\\r\n* add a call to `setBoard` to verify that it works"
      U5 ColorSleuth part 5 make random RGB string_markdown_instruction: "We can\nuse the *same technique* to generate a random color.\\r\n\\r\nall colors are\ndefined as strings with only difference being the numbers that are used.\\r\n\\r\nWe\njust learned how to do this for ids.  Same principle for colors it just gets\nnasty looking.\\r\n\\r\n\"rgb(\"+random=\", \"+random..."
      U5 ColorSleuth part 5 make setBoard function_markdown_instruction: "## Next\nStep - encapsulate \"game board\" creation in a function\\r\n\\r\nLet's call\nthe 4 buttons with random colors the **\"Game Board.\"** Assuming that your\nprogram now creates a new randomly generated game board each time you run,\nlet's take the next step.\\r\n\\r\nWhen playing the game we need to create\na new game board repeatedly, not just when the program starts.  Since we have\na chunk of code that we want to use repeatedly, **that's a clue we should\ntake that code and put it in a function**.\\r\n\\r\n## DO THIS:\\r\n\\r\n* Define\na new function called `setBoard`.\\r\n* Move all of the code that sets the\ncolors of the buttons inside the function - this is actually **all** the code\nyou have so far.\\r\n* Add a call to `setBoard()` as the first line of code\nin the program to verify that it works\\r\n* When you're done the code should\nlook like this:\\r\n\\r\n    \\tsetBoard();  \\t\\t\\t\\r\n    \\tfunction setBoard(){\\r\n\\r\n\\t\\t\\t<\nall the button color setting code \\r\n            you wrote from previous\nexercises >\\r\n            \\r\n\\t\\t}\\r\n    \\r\n    \\r\n<details><summary><strong>TIP:</strong>\nThis is easy in text-mode [click to expand]</summary>\\r\n\\r\n<p>\\r\nBecause\nthis is a relatively large chunk of code to move inside a function, it might\nbe easier to do in text mode.\\r\n</p>\\r\n<li>Add the function definition at\nthe top including the opening curly-brace</li>\\r\n<li>Type a closing curly-brace\nat the bottom</li>\\r\n<li>Optional: indent all the code inside the function\nso it looks cleaner - select all and hit TAB</li>\\r\n\\r\n<img src=\"https://images.code.org/ba0de530ca89174bae5fa1be455eb048-image-1481047960566.gif\">\\r\n\\r\n</details>\\r\n<br>\\r\n**NOTE:**\nThe program should not behave any differently after this step - we're just\norganizing the code to make it more useful. In the next step will make more\nuse of `setBoard()`.  For now, just make the function and call it once.\\r\n\\r\n"
      U5 ColorSleuth scoring pt1 vars function stub console_markdown_instruction: "##\nNext Step - add function updateScoreBy \\r\n\\r\nWe're going to follow the\nsame pattern we used when adding switch player.  We'll add variables, a function,\ncalls to the function, and for now just use `console.log` statements to verify\nwe've got things working.\\r\n\\r\n1. Add global variables to the top of the\ncode: `var p1Score=0;` and `var p2Score=0;`\\r\n2. Add a new function definition\n`updateScoreBy` with an if-statement and console.log to verify.  Something\nlike this:\\r\n\\r\n\\t\\tfunction updateScoreBy(amt){\\r\n        \\tif(currentPlayer\n== 1){\\r\n            \\tp1Score = p1Score + amt;\\r\n            } else {\\r\n            \\tp2Score\n= p2Score + amt;\\r\n            }\\r\n            console.log(\"P1 score: \"\n+ p1Score);\\r\n            console.log(\"P2 score: \" + p2Score);\\r\n        }\\r\n\\r\n3.\nAdd calls to `updateScoreBy(1)` and `updateScoreBy(-3)` to the appropriate\nplace inside the if statement in the `checkCorrect` function.\\r\n\\t* You can\nleave your console.log statements in there for now as well.  Just add calls\nto `updateScoreBy` along with them.\\r\n\\r\n**TEST IT OUT**\\r\n\\r\nWhen you\nrun the program now you should be able to verify in the console that the player's\nscores are updating.  Study the console output to make sure and verify that:\\r\n\\r\n*\nupdateScoreBy is being called from checkCorrect with each click\\r\n\\t* if\nyou have console.log statements in `updateScoreBy` then you should at least\nsee that it's being called with each click\\r\n* The correct player's score\nis being updated\\r\n* The scores are being updated by the correct amount\\r\n\\r\nA\nsample of the output might look like this:\\r\n\\r\n![](https://images.code.org/eb33f7d6d634e4f98e613bc13b231601-image-1481219318239.png)"
      U5 ColorSleuth scoring pt2 add scoring if statement console_markdown_instruction: "\\r\nDO\nTHIS:\\r\n\\r\n* add an if statement to updateScore\\r\n* if currentPlayer ==\nplayer1\\r\n      player1Score += amt\\r\n* else\\r\n       player2score += amt\\r\n       \\r\nNote:\ncleverness of `amt` var.  Means we don't need to decide whether to add or\nsubtract.  \\r\n\\r\n"
      U5 ColorSleuth scoring pt3 update UI for scoring_markdown_instruction: "##\nNext step - update the UI to show the score.\\r\n<img src=\"https://images.code.org/2614d8d57f91d9a29d86a0223ec35d63-image-1481221332835.gif\"\nstyle=\"float: right\">\\r\nThis is pretty easy at this point.\\r\n\\r\nThere\nare UI text labels for the player's scores called `score1_label` and `score2_label`.\\r\n\\r\nAdd\n`setText` statements at the end of the function (either replace the console.log\nstatements, or just add after them).  The label for player 1 would look like\nthis:\\r\n\\r\n\\t\\tsetText(\"score1_label\", p1Score);\\r\n\\r\n**TEST IT OUT**\\r\n\\r\n*\nAfter adding the `setText` statements you should see the score being updated\nwith each click (see animation).\\r\n* You can actually play the game a little\nbit now!\\r\n\\r\n<details><summary>Why set both text labels each time? [click\nto expand]</summary>\\r\n\\r\nYou might be wondering why we set <em>both</em>\ntext labels each time <code>updateScoreBy</code> is called, rather than putting\nit inside the if-statement to set the text of the appropriate label.  After\nall, only one score is changing every time.<br>\\r\n<li>The reason is basically:\nlaziness.  Even though only one score will change with each click, it really\ndoesn't hurt to set both text labels just to be safe.</li>\\r\n<li>In the\nfuture, maybe you might change the app so that both player1 and player2's\nscores might change with a single click. Maybe, maybe not.</li>\\r\n<li>But\nwe can be lazy and just set both score text labels every time and not have\nto worry about it.</li>\\r\n</details>\\r\n\\r\n"
      'U5 L1 - 3: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lessons work. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 1 - 3: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U5 L11 - 14: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lessons work. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 11 - 14: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U5 L15 - 17: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lessons work. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 15 - 17: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U5 L4 - 6: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lessons work. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 4 - 6: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      'U5 L7 - 10: Teaching and Student Support Plan_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lessons work. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLessons 7 - 10: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat you have a better sense of this lessons in this sequence, let’s think\nabout the types of supports students will need in order to be successful.\nSince the curriculum is based on inquiry learning, lessons feature activities\nthat engage students in discovering core concepts themselves. It’s important\nto think through implementation plans and student support. In this task you\nwill make a plan for teaching and student support **for one of the lessons\nin this sequence** that takes into account differentiation strategies and\nmake-up work for absent students. Your teaching and student support plan should\ncover the following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you\ndiscussing?** \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n - An outline of any changes you will need to make to\nthe lesson to fit your local constraints or context (for example: pacing and\ntime, dealing with classroom setup, etc). \\r\n - An overview of the types\nof student needs you’ll likely need to support in your classroom (for example:\nstudents who are struggling to understand the underlying concept; students\nwho are already familiar with the concept, but still have room to learn more;\netc)\\r\n - Your plan for addressing each of the needs outlined above (for\nexample: integrating extension activities or other materials for students\nwho already know something about the topic)\\r\n - How will you address or\nemphasize the connection between lessons in this sequence? \\r\n\\r\n- **Plan\nfor catching up absent students:**\\r\n\\r\n - How will absent students catch\nup on activities they missed? \\r\n - How will you use the fact that the lessons\nin this sequence are related and build on one another to address make-up work?\n\\r\n\\r\nYou can type out your teaching and student support plan in the box\nbelow, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting Credit\nfor Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf this module\nis listed as  your “focus area”, then your response to the prompt above will\nbe shared anonymously and reviewed by your peers, and you will review the\nwork done by other teachers. Reviewers will be looking for thoughtful and\nthorough answers that demonstrate that you have spent time considering how\nthe lesson will play out in your own classroom. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit. \\r\n\\r\nIn order to get credit for completing this task, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to a facilitator to review. You will always have a chance to address\nfeedback from your reviewers and resubmit your task! Reviewer feedback will\nshow up at the bottom of this page, once it’s available. \\r\n\\r\n<br><br>"
      U5 Video compound booleans_markdown_instruction: "### Points to pay attention\nto:\\r\n\\r\n* The \"Boolean operators\" are AND and OR.  \\r\n* In JavaScript\nyou write them as `&&` for AND and `||` for OR.\\r\n* You use them to combine\nboolean expressions into a single statement when you need to check multiple\nconditions before executing a particular segment of code.\\r\n\\r\n"
      U5 Video if-else-if_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n*\n**START at 2:20**  \\r\n    This is the second half of the video you watched\nearlier. \\r\n\\r\n* An If-else-if statement let's you check more than one\ncondition at a time.\\r\n* The **order of conditions matters**. Since conditions\nare checked sequentially from top to bottom, the code that gets executed will\nbe the *first* statement to evaluate to true.\\r\n\\r\n"
      U5 compound boolean museum example_markdown_instruction: "## You Try It\\r\n\\r\n**Recreate\nthe museum price example from the video.**\\r\n\\r\n* We've setup everything\nfor you **except the boolean expression in the *if* statement is incomplete**\\r\n\\r\n**Modify\nthe boolean expression** (it just says `age < 21` right now) to use combinations\nof `&&` and `||` to reflect the following condition:\\r\n\\r\n* IF *It's Tuesday\nor Thursday or the age is between 12 and 21* they get a discount\\r\n* ELSE\nthey pay full price\\r\n\\r\n**TIP:** switching to text mode might make this\neasier to compose."
      U5 if-else dropdown guess dice_markdown_instruction: "<img src=\"https://images.code.org/bd3094161d7d58800b1a6a981383fc6c-image-1479848098180.gif\"\nstyle=\"float: right\">\\r\n\\r\n## You try it \\r\n\\r\nThis is a slightly more\ninvolved example.  You'll need to study the starting design and code a little\nbit, but you only have to insert a single if-else statement and move some\nlines of code into the appropriate if or else clause to make it work.\\r\n\\r\n##\nDo this\\r\n\\r\n**Study the starting code first to see what it does**\\r\n\\r\n*\nYou *can* run it to see what happens before doing anything - it just won't\nwork right\\r\n* **Notice** the function `reset()` - which hides the images.  \\r\n\\t*\nWe made a function because we want to run this code from two different event\nhandlers.\\r\n\\r\n**Add an if-else statement in the *roll_btn* event handler**\nto check if the random number that represents a dice roll matches the user's\nguess in the dropdown\\r\n\\r\nIf they guessed correctly\\r\n* Show the trophy\nimage\\r\n* Add 6 to the score\\r\n\\r\nOtherwise:\\r\n* Show the frowny face\nimage\\r\n* Subtract 1 from the score\\r\n\\r\n**Setup Notes:**\\r\n* All UI elements\nare added for you (images are hidden) - flip to Design Mode to see.\\r\n* All\nlines of code *except* for the if-else statement and condition are also provided\n- you'll need to move them around once you've added the if-else statement.\\r\n*\nNotice the global `score` variable which will keep track of the score between\nclicks\\r\n* We've added comments in the code to help you out - you can remove\nthem if you like.\\r\n\\r\n<details><summary>Hint: [click to expand]</summary>\\r\n<br>\\r\nThe\ncondition needs to us <code>==</code> compare <code>dieVal</code> with the\nvalue in the dropdown.  To get the value out of the dropdown you use <code>getNumber(\"guess_dropdown\")</code>.<br><br>(You\ncould use <code>getText(\"guess_dropdown\")</code> and it would still work,\nbecause <code>==</code> tries to convert text to a number for comparison so\n<code>\"6\"==6</code> is true.  But since we're expecting a number in the\ndropdown we should use <code>getNumber</code> so it makes sense when reading\nthe code.)\\r\n</details>"
      U5 if-else dropdown movie checker_markdown_instruction: "<img src=\"https://images.code.org/38b037a468dd7a9df53ce29b5b720a03-image-1479852997408.gif\"\nstyle=\"float: right\">\\r\n\\r\n## You Try It\\r\n\\r\nThis example is very similar\nto the worked example on the previous page - it is a version of the movie\nage checker that uses a dropdown.\\r\n\\r\nWe've provided the starting UI elements,\nincluding the dropdown - but none of the code.\\r\n\\r\n**Do this:**\\r\nUsing\nthe examples on the previous page as a guide...\\r\n\\r\n* Add an event handler\nfor the *dropdown menu that triggers on *\"change\"*.\\r\n* Add an if statement\nto check if the age chosen in the dropdown is `>=` to 13 and set the text\nin the *result_label*\\r\n\\t* if the age is 13 or over set the text to \"You\nare old enough to see a PG-13 movie alone\"\\r\n    * Otherwise, set the text\nto \"You are not old enough to see a PG-13 movie alone\"\\r\n\\r\n**Tip:** Use\n`getNumber(id)` instead of `getText(id)` to get the value out of the dropdown\\r\n\\r\n*\nOne major difference from the example is that we want to compare the value\nof the dropdown to a number using `>=` rather than with `==`\\r\n* You should\nto use `getNumber(\"age_dropdown\")` to extract the value *as a number rather\nthan text*. \\r\n* This is the same reason we use `promptNum` instead of `prompt`\nfor simple console examples.\\r\n* It will still work if you use `getText`\nbut isn't good form."
      U5 if-else simple movie ratings example_markdown_instruction: "## You Try It\\r\n\\r\n**Recreate\nthe simple movie age example from the video.**\\r\n\\r\n* We've provided the\nfirst line to prompt the user to enter their age.\\r\n* Add and `if-else` statement\nthat checks to see if the age is `>=` 13 and \\r\n* Use `console.log` to display\nappropriate messages\\r\n\\r\nHere is pseudocode for what you should add\\r\n\\r\n```\\r\nIF\nage >= 13\\r\n    DISPLAY \"You can see a PG-13 movie alone\"\\r\nELSE\\r\n    DISPLAY\n\"You are not old enough to see a PG-13 movie alone\"\\r\n```\\r\n\\r\n\\r\n"
      U5 if-else weeekend challenge_markdown_instruction: "<img src=\"https://images.code.org/42591321cf2bf9e4b90e89e0ea613c9f-image-1479909970655.gif\"\nstyle=\"float: right\">\\r\n\\r\n## Challenge: It's the weekend!\\r\n\\r\n**Make\nan app tells you whether to stay home or go to school based on what day of\nthe week it is.**\\r\n\\r\n\\r\nIn this challenge you will:\\r\n\\r\n* Add your\nown dropdown menu in design mode\\r\n* Add an event handler for the dropdown\\r\n*\nWrite an if-statement that's slightly tricky\\r\n\\r\n## Do this:\\r\n\\r\n*\nIn Design Mode **add a dropdown** menu and fill it with the days of the week:\n*Monday, Tuesday,...,Sunday*\\r\n* **Add an event handler** for that dropdown\nthat activates on *\"change\"*\\r\n* **Add an `if-else` statement** to the\nevent handler that checks which day was selected and...\\r\n\\r\n\\t* **If**\nthe day selected was a weekend day (*Saturday* or *Sunday*) then display a\nmessage that says \"It's the weekend! Stay home!\"\\r\n\\r\n\\t* **Otherwise**\n(the day is a weekday) display a message that says \"It's a weekday. Go to\nschool\".\\r\n* Your message should be displayed by setting the text of the\n*msg_label* provided in design mode.\\r\n\\r\n## Testing:\\r\n\\r\n* Once you\nhave something functional, make sure you test *every* day of the week to verify\nthe output is correct\\r\n* The if-statement here is trickier than before.\\r\n\\r\n<details><summary>HINT:\n[click to expand]</summary>\\r\n<br>\\r\n\\r\n<li>The trick here is that, unless\nyou want to check all seven days with individual if-statements, you need to\n<strong>nest</strong> one if-statement inside another.</li>\\r\n<li>The reason\nis that in order to know it's a weekday you need to know <em>both</em> that\nit's NOT Sunday <em>and</em> that it's not Saturday either.  That's two\nboolean conditions.</li>\\r\n<li>Here is the skeleton of an if-else structure\nthat will work.  Notice that the the if-statement that checks for Sunday is\n<em>inside</em> the else clause of the statement that checks for Saturday</li>\\r\n\\r\n\\r\n<pre>\\r\n\\r\nIF\nit's saturday\\r\n   ...\\r\nELSE\\r\n   IF it's sunday\\r\n      ...\\r\n   ELSE\\r\n      ...\\r\n\\r\n</pre>\\r\n\\r\n</details>\\r\n\\r\n"
      U5 if-else-if movie example_markdown_instruction: "# *if-else-if*\\r\n\\r\nLet's\nrecreate the movie ratings example from the previous page (and video).\\r\n\\r\nAdd\nan `if-else-if` statement with a series of `else-if`s to display the right\nmessage based on the user's age.\\r\n\\r\nWe've started you out with code\nthat prompts the user for her age.  We've also provided all the console.log\nstatements you need.\\r\n\\r\n**Your task:** Add an `if-else-if` statement with\nthe appropriate *Boolean expressions*, and move the `console.log` statements\ninto the right clause so the correct message gets displayed.  Here is a reminder\nof what is supposed to happen.\\r\n\\r\n* **If** the user's age is 17 or over,\nthey can see an R-rated movie\\r\n* **else if** the user's age is 13 or over,\nthey can see a PG-13 movie\\r\n* **else if** the user's age is 5 or over they\ncan see a PG movie\\r\n* **else** display a message about the user being too\nyoung\\r\n\\r\n* **Test out the program** to make sure your updates worked.\\r\n\\r\n##\nCoding Tips\\r\n\\r\n**Create an `else-if`** by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first\n<img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12\nPM.png\" style=\"width: 40px\"> will add an `else`, the second will add an\n`else-if`.\\r\n\\r\n**Remove an `else-if`** -- if you add an extra `else-if`\nby accident, you can remove it by switching into text mode and deleting the\ntext.  Don't forget to delete the curly-braces `{` and `}` that go with it.\\r\n\\r\n\\r\n"
      U5 if-else-if quiz grade_markdown_instruction: "# Quiz Grade\\r\n\\r\n**Prompt\nthe user for their quiz score (0-100) and tell them what letter grade (A-F)\nthey got.**\\r\n\\r\n**Example:** if the user enters `84` at the prompt your\nprogram should output: `Your quiz grade is a B.` Here's the score-to-grade\nbreakdown:\\r\n```\\r\nLetter Grade:   A       B      C      D      F\\r\n Score\nRange: 90-100  80-89  70-79  60-69  0-59\\r\n```\\r\n\\r\n\\r\n\\r\nWe've started\nyou out with the prompt and the `console.log` statements you need.  **Your\ntask is to add the *if-else-if* statements to make it work.\\r\n\\r\n**Remember:**\nthe order in which you check the boolean conditions *matters*.\\r\n\\r\n\\r\n\\r\n"
      U5 video Booleans_markdown_instruction: "### Points to pay attention to:\\r\n\\r\n1.\nWhat's a *Boolean Expression?*\\r\n2. Why is it called a \"Boolean\"?\\r\n3.\nIs this a legal expression?  `10 > 25`?"
      U5-AP-Algorithm-Does-It-Count_markdown_instruction: "# AP Practice - Algorithm\n- Score the Response\\r\n\\r\nOne component of the **AP Create Performance Task**\nis selecting and describing an algorithm that you developed.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>2. Written Responses</b>\\r\n<ul>\\r\n2c.\nCapture and paste a program code segment that implements an algorithm (marked\nwith an <b>oval</b> in <b>section 3</b> below) and that is fundamental for\nyour program to achieve its intended purpose. This code segment must be an\nalgorithm you developed individually on your own, must include two or more\nalgorithms, and must integrate mathematical and/or logical concepts. Describe\nhow each algorithm within your selected algorithm functions independently,\nas well as in combination with others, to form a new algorithm that helps\nto achieve the intended purpose of the program. (Must not exceed 200 words)\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's\nthe scoring guide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22\nPM.png\">\\r\n</div>\\r\n\\r\n# Score the Response\\r\n\\r\n**Written Response:**\n*\"My algorithm controls the log-in for the app. This piece of my program\nis important because the data included in my app needs to be secure. The algorithm\nmakes sure only users with the correct password get in to the app to use it.\"*\\r\n\\r\n**Program\nCode:** \\r\n\\r\n<img src=\"https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png\"\nstyle=\"height:300px\">\\r\n\\r\n**Explain why you would or would not award\nthe point for Row 5 based on the criteria given above**\\r\n"
      U5-AP-Practice-Choose-The-Algorithm_markdown_instruction: "# AP Practice -\nIdentify the Abstraction\\r\n\\r\nOne component of the **AP Create Performance\nTask** is selecting an abstraction that you developed.\\r\n\\r\n<div style=\"width:\n80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:\nserif; font-size: 12pt\">\\r\n\\r\n<b>3. Program Code</b>\\r\n<ul>\\r\n<li>Mark\nwith a <b>rectangle</b> the segment of program code that represents an abstraction\nyou developed.</li>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\nHere's the scoring\nguide for this question\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img src=\"https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59\nPM.png\">\\r\n</div>\\r\n\\r\n# Choose the Student-Created Abstraction\\r\n\\r\nThe\nprogram code below is from a program a student developed. \\r\n\\r\n![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48\nPM.png)\\r\n\\r\n**Write which of the rectangles (A, B, C, or D) is placed around\na student-developed abstraction.**\\r\n\\r\n**Then explain your answer using\nthe criteria in the scoring guide.**"
      U5-AP-Practice-FR-manage-complexity_markdown_instruction: "# AP Practice -\nPerformance Task Response\\r\n\\r\nThe AP Create Performance task asks you to\nwrite about an abstraction that you developed and wrote into your code. Most\nof the time that means identifying a function or procedure you wrote to help\n\"manage complexity\" in your program.\\r\n\\r\nHere is the actual prompt from\nthe Create Performance Task:\\r\n\\r\n<div style=\"width: 70%; margin: auto;\nbackground-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2d.</b>\nCapture and paste a program code segment that contains an abstraction you\ndeveloped individually on your own (marked with a <b>rectangle</b>). This\nabstraction must integrate mathematical and logical concepts. Explain how\nyour abstraction helped manage the complexity of your program.\\r\n<br>\\r\n<i>(Must\nnot exceed 200 words)</i>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\nBelow is a segment\nof code from an \"under the sea\" program with a rectangle drawn around a\nportion of the code identifying an abstraction. Imagine that you wrote this\nand are composing an AP response about how this abstraction manages complexity.  (Note:\nignore the requirement that the abstraction integrate \"mathematical and logical\nconcepts\" for this practice response.  Just write about managing complexity).\\r\n\\r\n![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\\r\n\\r\nExplain\nhow the abstraction marked with the rectangle in the code above helps manage\ncomplexity of this program."
      U6 - Final Project - Project Level_markdown_instruction: "# Congratulations!\\r\n\\r\nYou've\nreached the end of the year! Now it's time to show off everything you've\nlearned by creating a final project.\\r\n\\r\n# Do This:\\r\n\\r\n* Use this level\nto create and submit your final app.\\r\n * Alternatively, if you want to remix\na previous project and add new features, you can copy the \"Share\" link for\nyour remixed project and paste it into a comment in this level.\\r\n* **Have\nfun!**"
      U6 - updateRecord - Callback Success Parameter_markdown_instruction: "#*updateRecord*\nCallback Function\\r\n\\r\nYou may have noticed that the callback function for\n`updateRecord` has an additional parameter: `success`. When `updateRecord`\nfinishes, it returns the updated record as well as a boolean called `success`,\nwhich is `true` if the record was successfully updated and `false` otherwise.\\r\n\\r\nThe\n`success` parameter is useful in altering how your program behaves based on\nwhether an error occurred when your program tried to update a record.\\r\n\\r\n**Your\ncode from the previous exercise has been provided.**\\r\n\\r\n# Do This: \\r\n\\r\n*\nAdd a line to the beginning of `updateSong` that sets `songToUpdate.seconds`.\\r\n\\t*\n**Hint:** \"Eye of the Tiger\" is 244 seconds long.\\r\n* Add an `if-else`\nblock inside the callback function for `updateRecord`.\\r\n\\t* If `updateRecord`\nfinishes successfully, print out the updated record’s title and artist.\\r\n\\t*\nOtherwise, if `updateRecord` does not finish successfully, print out an error\nmessage.\\r\n* Run the program and verify that the updated song title and artist\nare still printed to the console.\\r\n* Open the Data Viewer and check that\nthe record for \"Eye of the Tiger\" is now fully filled in.\\r\n\\r\n**Your\ncode should end up looking similar to the code depicted in the image.**\\r\n\\r\n![](https://images.code.org/b95ac5c5c45942b3eef85823dee48c42-image-1455666651198.PNG)"
      U6 - updateRecord - Contacts - Edit UI_markdown_instruction: "# Editing Contacts\nin the Contacts App\\r\n\\r\nNow that you’re familiar with how `updateRecord`\nworks, it’s time to add in functionality to the Contacts App so you can edit\ncontacts in your database. First, you’ll need to do some work in Design Mode\nto set up the UI elements you’ll need.\\r\n\\r\n# Do This:\\r\n\\r\n** Your code\nand database from the Contacts App are provided.**\\r\n\\r\n* **Change the “Delete”\nbutton on the “viewContactsScreen” to an “Edit” button.** Make sure you **change\nthe button text and ID to something descriptive**. You might also want to\nchange the style of the button.\\r\n\\t* **Note:** Leave the event handler for\nthe old “Delete” button as is. You’ll still use it  later.\\r\n* **Add a new\nscreen called “editContactsScreen”** and add UI elements that look similar\nto the ones in the image. Don’t forget to give your UI elements **descriptive\nand meaningful names**.\\r\n\\t* **Note:** Make sure the ID for your new “Delete”\nbutton matches the ID in your event handler for the old delete button. If\nyou do this, your new “Delete” button should work without needing to change\nanything in your event handler.\\r\n\\r\n| Updated \"viewContactsScreen\": |\nNew \"editContactsScreen\": |\\r\n|------|------|\\r\n| ![](https://images.code.org/aef7efbfea4493037d127ca97d83fcc6-image-1455919502578.png)\n| ![](https://images.code.org/ee5ce040dd52239719c2b4c790134d08-image-1455919496715.png)\n|\\r\n\\r\n"
      U6 - updateRecord - Contacts - Edit event handler_markdown_instruction: "#\nEvent Handlers for “Edit” and “Go Back” Buttons\\r\n\\r\nNow that you have all\nthe UI elements you need, it’s time to set up the event handlers. In this\nlevel, you’ll write the event handlers for the **“Edit” button** and the **new\n“Go Back” button**. (You’ll write the event handler for “Update Contact” in\nthe next level.)\\r\n\\r\n# Do This:\\r\n\\r\n* **Add an event handler for the\n“Go Back” button** on the screen for editing contacts. In the event handler:\\r\n\\t*\nSet the screen to `viewContactsScreen`.\\r\n* **Add an event handler for the\n“Edit” button.** In the event handler:\\r\n\\t* Use `setText` to populate each\nof the text inputs with the appropriate information from the current contact\n(which you can access using `contacts[currentIndex]`).\\r\n\\t* Set the screen\nto `editContactsScreen`.\\r\n* **Add an event handler to update the preview\nimage** on the “Edit” screen when the user changes the image URL.\\r\n\\t* This\nevent handler should be analogous to the one you wrote for `editURLinput`.\\r\n*\nIf you haven’t already, **move the `setScreen` line from your “Save Contact”\nbutton event handler into `showCurrentContact`.** This way, when you delete\na contact and reload your local copy of `contacts`, your app will redirect\nto the “View Contacts” screen.\\r\n* **Run your program** and verify that the\n“Edit,” “Go Back,” and “Delete” buttons all work and that your preview image\nupdates when you change the URL text.\\r\n\\r\n\\r\n<details><summary><strong>Your\ncode should look similar to this.</strong> (click to expand)</summary>\\r\n![](https://images.code.org/74b697567fae902cad13d7df9e695b2b-image-1455921921229.png)\\r\n</details>\\r\n\\r\n"
      U6 - updateRecord - Contacts - Save edited contact_markdown_instruction: "#\nSaving an Updated Contact in the Database\\r\n\\r\nThe last step for your Contacts\nApp is to save the updated information from the user in the database. You\ncan accomplish this by using `updateRecord`.\\r\n\\r\n# Do This:\\r\n\\r\n* **Add\nan event handler for the “Update Contact” button.** In the event handler:\\r\n\\t*\nCreate a new object called `objToUpdate` and set it to a copy of the current\ncontact.\\r\n\\t* Call `updateRecord`, and make sure to set the first and second\nparameters.\\r\n\\t* In the callback function for `updateRecord`, call `refreshLocalData`\nto update your local copy of the database.\\r\n* **Run your program** and verify\nthat when you edit the information for a contact, the changes are reflected\nwhen you return to the \"View Contacts\" screen.\\r\n\\r\n<details><summary><strong>Your\ncode should look similar to this.</strong> (click to expand)</summary>![](https://images.code.org/8f1c01a434934ee3bfdc4941f657b4dc-image-1455924274767.png)</details><br>\\r\n\\r\n**Congratulations!**\nYou now have a fully-functioning Contacts App!\\r\n\\r\nYou can use this same\npattern of **create, read, update, and delete** commands (a.k.a. “**CRUD**\ncommands”) to store permanent data in many different types of apps.\\r\n\\r\n"
      U6 - updateRecord - Default Block_markdown_instruction: "# Updating Records\\r\n\\r\nSometimes\nin your program, you may want to make edits to a record that already exists\nin your database. You can do this using the `updateRecord` block.\\r\n\\r\n![](https://images.code.org/c62e74c0fff801bb59a024894f7e8caf-image-1455576434177.PNG)\\r\n\\r\n`updateRecord`\nhas three parameters:\\r\n\\r\n* The **name of the table** which contains the\nrecord you want to update\\r\n* The **object** you want to update.\\r\n* A **callback\nfunction**\\r\n\\r\nThe object in the second parameter needs to have an ID property.\nAs with `deleteRecord`, this object’s ID is used to determine which record\nin the database should be updated.\\r\n\\r\n\\r\n# Do This:\\r\n\\r\n**Your database\nalready includes a table called “mySongs”.**\\r\n\\r\n* Open the Data Viewer\nfor mySongs and note that the record for **“Eye of the Tiger” is missing information**\nfor the artist and seconds columns.<br>![](https://images.code.org/3e7f6503480eaeeea2be6eedc51fa5bd-image-1455666147565.PNG)\\r\n*\n**Run the starter code provided and take note of what prints to the console.**\\r\n*\n**Drag out the `updateRecord` block.**\\r\n\\t* Set the table name to **“mySongs”**.\\r\n\\t*\nSet the object  to `songToUpdate`.\\r\n\\t* In the callback function, add a\n`console.log` statement to **print out the updated record’s title and artist.**\\r\n*\n**Run the program again.**\\r\n\\t* Look at the output to the console.\\r\n    *\nRefresh the Data Viewer and **verify that the record for “Eye of the Tiger”\nhas been updated.**\\r\n\\r\n"
      U6 - updateRecord - Update Nonexistent Record_markdown_instruction: "# What\nIf *updateRecord* Fails?\\r\n\\r\nIn the previous exercise, you added functionality\nthat should print an error message if `updateRecord` returns without successfully\nupdating the record in the database. But when should `updateRecord` fail?\\r\n\\r\nRemember,\nthe object parameter needs to have an ID property that matches the ID of a\nrecord in the specified table. If the object doesn’t have an ID property or\nif the ID property doesn’t exist in the table, `updateRecord` won’t be able\nto successfully update the record.\\r\n\\r\nTo see this behavior, you’re going\nto add some code that will force `updateRecord` to fail.\\r\n\\r\n**Your code\nfrom the previous exercise has been provided.**\\r\n\\r\n# Do This:\\r\n\\r\n*\nAt the beginning of the `updateSong` function, set `songToUpdate.artist` to\na different string.\\r\n* Add another line to set `songToUpdate.id` to an ID\nthat isn’t in the **mySongs** table (e.g., **8**).\\r\n* Run the program. Take\nnote of what gets printed to the console, then check the \"Eye of the Tiger\"\nrecord in the Data Viewer.\\r\n\\r\n![](https://images.code.org/db411452ec8b319452395c3383b3dd66-image-1455667133974.gif)\\r\n\\r\n<details>\\r\n<summary><strong>What\nhappened?</strong> (click to expand)</summary>\\r\n\\r\nWhen the record ID doesn’t\nmatch any in the specified table, `updateRecord` can’t find a record to update,\nso it sets the `success` parameter in the callback function to `false` and\nfinishes without changing any records. Be careful to always make sure the\nobject you pass `updateRecord` has an ID that matches a record in the table.\\r\n</details>\\r\n\\r\n"
      Underground Avoiding Lava_markdown_instruction: "Lava is hiding beneath some\nof these blocks, which you'll need to cover up before moving forward. An\n`if` command will come in handy here. Add a `move forward` command in the\ncorrect place to mine these blocks."
      Underground Avoiding Lava_2018_markdown_instruction: "Lava is hiding beneath\nsome of these blocks, which you'll need to cover up before moving forward.\nAn `if` command will come in handy here. Add a `move forward` command in the\ncorrect place to mine these blocks."
      Underground If Statements_markdown_instruction: "Now things are getting tricky.\nMine 3 redstone, but don’t fall in the lava. Use an `if` command to place\ncobblestone over any lava you uncover."
      Underground If Statements_2018_markdown_instruction: "Now things are getting\ntricky. Mine 3 redstone, but don’t fall in the lava. Use an `if` command to\nplace cobblestone over any lava you uncover."
      Unit 2 RGB Mapping_markdown_instruction: "# RGB Colors\\r\n\\r\nAll colors, whether\nthey have names or not, can be described by the level of red, green, and blue\nlight it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You\ncan use the widget on your left to try out different RGB values and see what\ncolors they make.\\r\n\\r\n* **Click \"Run\" to start the widget on the left,**\nand use the sliders to adjust the levels of red, green, and blue light.\\r\n*\nFor each of the colors below, match it to its RGB value. Type your response\nin the box below.\\r\n\\r\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\\r\n\\r\nB)\nred: 255, green: 239, blue: 213 - rgb(255,239,213)\\r\n\\r\nC) red: 255, green:\n140, blue: 105 - rgb(255,140,105)\\r\n\\r\nD) red: 123, green: 104, blue: 238\n- rgb(123,104,238)\\r\n\\r\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\\r\n\\r\n\\r\n<div\nstyle=\"font-size: 16px\">\\r\n<br />\\r\n<details>\\r\n<summary>**Why do red\nand green make yellow?**</summary>\\r\n<p>When you mix paint, red and green\nmake brown, but RGB color mixing uses light instead of paint, so the colors\nmix differently.  RGB uses _additive color mixing_.  In additive color mixing,\nred and green make yellow, red and blue make magenta, and blue and green make\ncyan.  When you mix the three primary colors together (red, green, and blue),\nthey make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia\n- Additive Color</a>\\r\n</p> </details>\\r\n<details>\\r\n<summary>**How many\ncolors can I make with RGB color mixing?**</summary>\\r\n<p>\\r\nYou can make\nmake over sixteen million different colors with RGB color mixing.\\r\n</p></details>\\r\n</div>\\r\n"
      'Unit 2 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 2. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n# Unit 2 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 2. Your plan should address the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions (following lesson 6 and lesson 17), practice performance tasks (lessons 6 and 15)\r\n\r\n\r\n- Making your own assessments\r\n\r\n - What types of assessments might you need to create or use on top of those provided in the curriculum? \r\n - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n"
      'Unit 2 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 2. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Unit 2 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/96277a718d83c091b701cf64a816c1ec-image-1477933390543.00.02 PM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 2, as well as a specific plan for one of the technology-dependent lessons highlighted in unit overview on the right. Note that the lessons with a `red solid rectangle` all require the use of computers, but for the purpose of students looking at existing information. In lessons with the `dashed purple rectangle` students are creating computational artifacts with spreadsheet tools. Lessons indicated with the `solid dark blue oval` use a widget in Code Studio. \r\n\r\nYour plan should be broken into two parts, and address the following things: \r\n\r\n- General strategies that you’ll apply throughout unit 2\r\n - Throughout unit 2, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \r\n\r\n\r\n- Strategies specific to a selected lesson\r\n - Which of the highlighted lessons on the right are you discussing? \r\n - What is your plan for managing transitions between your instruction and students being in the tool? *Note: your response should include specifics about the lesson*\r\n - How do you plan to introduce the lesson challenge and the tool that students will use to complete the challenge? *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n \r\n\r\n"
      'Unit 2 Teaching Practice Plan: Discovery Learning_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 2. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n# Unit 2 Teaching Practice Plan: Discovery Learning\\r\n\\r\nFor\nthis task, you’re going to develop and submit a Teaching Practice Plan, which\ndetails your plan for building and supporting a culture of discovery learning\nin your classroom throughout unit 2. Your plan should address the following:\n\\r\n\\r\n- For lessons that call for students to discover a key computer science\nconcept, how do you plan to balance your time frontloading content instruction\nwith students’ time completing the activity and constructing their own knowledge?\n\\r\n- What is your strategy for supporting students who struggle with this\nmodel of teaching and learning, and look to you to ‘just give them the answer’?\\r\n-\nHow do you plan to make sure students leave a lesson having discovered the\nunderlying concept(s)? \\r\n\\r\nYou can type out your teaching practice plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow this practice will fit into your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n"
      'Unit 2 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': "<br><br>\\r\n\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 2. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n\\r\n# Unit 2 Teaching Practice Plan: Group Work and Peer\nLearning\\r\n\\r\nFor this task, you’re going to develop and submit a Teaching\nPractice Plan, which details your plan for supporting group work throughout\nunit 2. Your plan should address the following things: \\r\n\\r\n- What is your\nplan for supporting students who are struggling to engage in group work, either\nbecause they prefer to work alone, or because they are having issues collaborating\nwith their partner(s)?\\r\n- How do you plan to help make sure all members\nof the team have a voice in their groups’ discussions?\\r\n- How can you help\nstudents understand and appreciate the importance of learning through and\nfrom one another? \\r\n\\r\nYou can type out your teaching practice plan in\nthe box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow this practice will fit into your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n\\r\n"
      'Unit 3 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 3. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n# Unit 3 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 3. Your plan should address the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions, practice performance tasks (lesson 10).\r\n\r\n\r\n- Making your own assessments\r\n\r\n - What types of assessments might you need to create or use on top of those provided in the curriculum? \r\n - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n"
      'Unit 3 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 3. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Unit 3 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 3, as well as a specific plan for one of the technology-dependent lessons (which are lessons 4 - 10). \r\n\r\nYour plan should be broken into two parts, and address the following things: \r\n\r\n- General strategies that you’ll apply throughout unit 3\r\n - Throughout unit 3, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \r\n\r\n\r\n- Strategies specific to a selected lesson\r\n - Which of the plugged-in lessons are you discussing? \r\n - What is your plan for managing transitions between your instruction and students being in the tool? *Note: your response should include specifics about the lesson*\r\n - How do you plan to introduce the lesson challenge and the tool that students will use to complete the challenge? *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n \r\n\r\n"
      'Unit 3 Teaching Practice Plan: Discovery Learning_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 3. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n# Unit 3 Teaching Practice Plan: Discovery Learning\\r\n\\r\nFor\nthis task, you’re going to develop and submit a Teaching Practice Plan, which\ndetails your plan for building and supporting a culture of discovery learning\nin your classroom throughout unit 3. Your plan should address the following:\n\\r\n\\r\n- For lessons that call for students to discover a key computer science\nconcept, how do you plan to balance your time frontloading content instruction\nwith students’ time completing the activity and constructing their own knowledge?\n\\r\n- What is your strategy for supporting students who struggle with this\nmodel of teaching and learning, and look to you to ‘just give them the answer’?\\r\n-\nHow do you plan to make sure students leave a lesson having discovered the\nunderlying concept(s)? \\r\n\\r\nYou can type out your teaching practice plan\nin the box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow this practice will fit into your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n"
      'Unit 3 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': "<br><br>\\r\n\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 3. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n\\r\n# Unit 3 Teaching Practice Plan: Group Work and Peer\nLearning\\r\n\\r\nFor this task, you’re going to develop and submit a Teaching\nPractice Plan, which details your plan for supporting group work throughout\nunit 3. Your plan should address the following things: \\r\n\\r\n- What is your\nplan for supporting students who are struggling to engage in group work, either\nbecause they prefer to work alone, or because they are having issues collaborating\nwith their partner(s)?\\r\n- How do you plan to help make sure all members\nof the team have a voice in their groups’ discussions?\\r\n- How can you help\nstudents understand and appreciate the importance of learning through and\nfrom one another? \\r\n\\r\nYou can type out your teaching practice plan in\nthe box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow this practice will fit into your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n\\r\n"
      'Unit 4 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n# Unit 4 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 4. Your plan should address the following: \r\n\r\n- **Using what’s in the curriculum** How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use:\r\n - formative lessons questions (blue bubbles in code studio), \r\n - project rubrics, \r\n - AP-style questions (following lesson 9), \r\n - practice performance tasks (lesson 9).\r\n\r\n- **Making your own assessments**\r\n - What types of assessments might you need to create or use on top of those provided in the curriculum? \r\n - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n"
      'Unit 4 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Unit 4 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/1cc3effc2c7fbd1003ecb8a8561f893e-image-1481692026401.38.35 PM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 4, as well as a specific plan for one of the technology-dependent lessons highlighted in unit overview on the right. Note that lessons with a solid red boarder leverage primarily external tools, while lessons with the dashed line use custom-made widgets and tools that are housed within Code Studio. \r\n\r\n\r\nYour plan should be broken into two parts, and address the following things: \r\n\r\n- General strategies that you’ll apply throughout unit 4\r\n - Throughout unit 4, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \r\n\r\n- Strategies specific to a selected lesson\r\n - Which of the highlighted lessons on the right are you discussing? \r\n - What is your plan for managing transitions between your instruction and students being in the tool? *Note: your response should include specifics about the lesson*\r\n - How do you plan to introduce the lesson challenge and the tool that students will use to complete the challenge? *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n \r\n\r\n"
      'Unit 4 Teaching Practice Plan: Discovery Learning_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 4. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n# Unit 4 Teaching Practice Plan: Discovery Learning\\r\n\\r\nFor\nthis task, you’re going to develop and submit a Teaching Practice Plan, which\ndetails your plan for building and supporting a culture of discovery learning\nin your classroom throughout unit 4. **While students will do a lot of hands\non discovery work throughout unit 4, lessons 5 - 7 are particularly dependent\non discovery as the mechanism that students use to explore concepts.**  Your\nplan should address the following: \\r\n\\r\n- For lessons that call for students\nto discover a key computer science concept, how do you plan to balance your\ntime frontloading content instruction with students’ time completing the activity\nand constructing their own knowledge? \\r\n- What is your strategy for supporting\nstudents who struggle with this model of teaching and learning, and look to\nyou to ‘just give them the answer’?\\r\n- How do you plan to make sure students\nleave a lesson having discovered the underlying concept(s)? \\r\n\\r\nYou can\ntype out your teaching practice plan in the box below, or you can upload a\nword doc or pdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n####\nTask Review Details\\r\n\\r\nIf this module is listed as  your “focus area”,\nthen your response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how this practice will fit into your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. \\r\n\\r\n\\r\n\\r\n"
      'Unit 4 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': "<br><br>\\r\n\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 4. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n\\r\n# Unit 4 Teaching Practice Plan: Group Work and Peer\nLearning\\r\n\\r\nFor this task, you’re going to develop and submit a Teaching\nPractice Plan, which details your plan for supporting group work throughout\nunit 4. Your plan should address the following things: \\r\n\\r\n- What is your\nplan for supporting students who are struggling to engage in group work, either\nbecause they prefer to work alone, or because they are having issues collaborating\nwith their partner(s)?\\r\n- How do you plan to help make sure all members\nof the team have a voice in their groups’ discussions?\\r\n- How can you help\nstudents understand and appreciate the importance of learning through and\nfrom one another? \\r\n\\r\nYou can type out your teaching practice plan in\nthe box below, or you can upload a word doc or pdf file. \\r\n\\r\n## Getting\nCredit for Completing this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed as  your “focus area”, then your response to the prompt\nabove will be shared anonymously and reviewed by your peers, and you will\nreview the work done by other teachers. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nhow this practice will fit into your own classroom. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to a facilitator to review. You will always have a chance\nto address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill show up at the bottom of this page, once it’s available. \\r\n\\r\n\\r\n\\r\n\\r\n"
      'Unit 5 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n# Unit 5 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 5. Your plan should address the following: \r\n\r\n- **Using what’s in the curriculum** How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use:\r\n - code students write while learning about a concept (not the final projects that they build towards)\r\n - submittable projects (which typically come after a set of 2-3 lessons and pull together multiple concepts)\r\n - AP-style questions (following lessons 5, 10, 14, and 17), \r\n - practice performance tasks (lesson 18).\r\n\r\n- **Making your own assessments**\r\n - What types of assessments might you need to create or use on top of those provided in the curriculum? \r\n - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n\r\n"
      'Unit 5 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': >
        **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n# Unit 5 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 4, as well as a specific plan for a computer-based lesson (which for unit 5, is almost every lesson).\r\n\r\nYour plan should be broken into two parts, and address the following: \r\n\r\n- General strategies that you’ll apply throughout unit 5\r\n - Throughout unit 4, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \r\n\r\n- Strategies specific to a selected lesson\r\n - Which lesson are you discussing? \r\n - What is your plan for managing transitions between your instruction and students being in App Lab? *Note: your response should include specifics about the lesson*\r\n - How do you plan to introduce the lesson challenge as well as any new features or programming concepts that have been added to App Lab since the last lesson? *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \r\n \r\n\r\n"
      'Unit 5 Teaching Practice Plan: Discovery Learning_markdown_instruction': "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 5. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n# Unit 5 Teaching Practice Plan: Discovery Learning\\r\n\\r\nFor\nthis task, you’re going to develop and submit a Teaching Practice Plan, which\ndetails your plan for building and supporting a culture of discovery learning\nin your classroom throughout unit 5. Your plan should address the following:\n\\r\n\\r\n- How do you plan to balance your time frontloading content instruction\nwith students’ time experimenting with new programming concepts introduced\nin the unit? \\r\n- How do you plan to evaluate students' understanding of\nthe programming concepts they're supposed to leran in the unit? \\r\n\\r\nYou\ncan type out your teaching practice plan in the box below, or you can upload\na word doc or pdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n####\nTask Review Details\\r\n\\r\nIf this module is listed as  your “focus area”,\nthen your response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how this practice will fit into your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. \\r\n\\r\n\\r\n\\r\n"
      'Unit 5 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': "<br><br>\\r\n\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the resources\nin this module, and have a good sense of the connections to unit 5. If you\nhaven’t already reviewed the materials, do that now and come back to this\ntask later.**\\r\n\\r\n\\r\n# Unit 5 Teaching Practice Plan: Group Work and Peer\nLearning\\r\n\\r\nFor this task, you’re going to develop and submit a Teaching\nPractice Plan, which details your plan for supporting group work throughout\nunit 5. Your plan should address the following things: \\r\n\\r\n- What is your\nplan for supporting students who are struggling to engage in group work, either\nbecause they prefer to work alone, or because they are having issues collaborating\nwith their partner(s)?\\r\n- How do you plan to help make sure all members\nof the team have a voice in their groups’ discussions?\\r\n- How can you help\nstudents understand and appreciate the importance of learning through and\nfrom one another? \\r\n- What recommendations will you give students about\ncollaboration on their Create Performance Task? \\r\n\\r\nYou can type out your\nteaching practice plan in the box below, or you can upload a word doc or pdf\nfile. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how this practice will fit into your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. \\r\n\\r\n\\r\n\\r\n\\r\n"
      Using Accelerometer Events_markdown_instruction: "Today you’re going to learn\nhow to use and create **functions**.\\r\n\\r\nCreating a function lets you make\nyour own blocks! There are two parts to a function: \\r\n\\r\nMaking a newly\nnamed block that has all of the code you want to run inside of it. \\r\n-xml\nof function definition- \\r\n\\r\nThe single green block itself that you use,\nor call, to run the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare\nto get familiar with functions, learn how to edit them, and create your own!"
      Using Accelerometer Events_2018_markdown_instruction: "Today you’re going to\nlearn how to use and create **functions**.\\r\n\\r\nCreating a function lets\nyou make your own blocks! There are two parts to a function: \\r\n\\r\nMaking\na newly named block that has all of the code you want to run inside of it.\n\\r\n-xml of function definition- \\r\n\\r\nThe single green block itself that\nyou use, or call, to run the function you created.\\r\n-xml of function call-\\r\n\\r\nPrepare\nto get familiar with functions, learn how to edit them, and create your own!"
      Valentine_artist_01_markdown_instruction: "Help the artist finish his llama\nheart to change it from llame to llovely! How many llamas does the artist\nstill need to draw?"
      Valentine_playlab_01_markdown_instruction: "Kiki the Soccer Girl wants to make\nsure her friends are loved on Valentine's Day! Program Kiki (Actor 1) to\nmove left and right when the left and right arrows are pressed. When Kiki\nis clicked, she should throw hearts towards her friends. \\r\n\\r\n---\\r\nClick\n\"Run\" and play the game to find out how many friends she has to send love\nto in order to win!"
      Validator_markdown_instruction: "# Software Accessibility: Validator\\r\n\\r\nThe\nHTML is designed to display the same way on all computers, but sometimes you’ll\nnotice that different web browsers, or even different versions of the same\nbrowser, display a website differently. Often this is because you either missed\na rule of HTML, or didn’t describe your content specifically enough. Fortunately\nthere’s a tool called the Validator that can check your code for errors!\\r\n\\r\n#\nDo This\\r\n\\r\n* Open up the <a href=\"https://validator.w3.org/#validate_by_input\"\ntarget=\"_blank\">Validator - Website</a>\\r\n* For each html file in your\nproject\\r\n\\t* Copy the html into the box\\r\n    * Click check to see if there\nare an error\\r\n\\t* Make a list of all unique errors.\\r\n    * For each error,\nwrite in your own words what you think it means\\r\n    * For each error, search\nto find a potential solution."
      Video - Cybersecurity and Crime - Video_markdown_instruction: "[Video guide\nand questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)"
      Video - Cybersecurity and Crime_markdown_instruction: "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)"
      Video. Introduction to Conditionals - Part 1_markdown_instruction: "### Points\nto pay attention to:\\r\n\\r\n1. What's a *Boolean Expression?*\\r\n2. Why is\nit called a \"Boolean\"?\\r\n3. Is this a legal expression?  `10 > 25`?"
      Video. Introduction to Conditionals - Part 2.2_markdown_instruction: "### Points\nto pay attention to:\\r\n\\r\n**Start** play at 1:37 \\r\n**Stop** play at 2:20\\r\n\\r\nIt's\nall you need for the exercises that follow.  You'll watch the remainder of\nthe video after that.\\r\n\\r\n* An IF statement can have an else clause, but\nan ELSE clause cannot exist on its own.\\r\n* With an else clause you are *guaranteeing*\nthat one of two portions of code will run.\\r\n\\r\n"
      Video. Introduction to Conditionals - Part 2.3_markdown_instruction: "### Points\nto pay attention to:\\r\n\\r\n* **START at 2:20**  \\r\n    This is the second\nhalf of the video you watched earlier. \\r\n\\r\n* An If-else-if statement let's\nyou check more than one condition at a time.\\r\n* The **order of conditions\nmatters**. Since conditions are checked sequentially from top to bottom, the\ncode that gets executed will be the *first* statement to evaluate to true.\\r\n\\r\n"
      Video. Introduction to Conditionals - Part 2_markdown_instruction: "### Points\nto pay attention to:\\r\n\\r\n* **NOTE:** Stop play at 1:37.  \\r\n    It's\nall you need for the exercises that follow.  You'll watch the remainder of\nthe video after that.\\r\n\\r\n* An IF statement can have an else clause, but\nan ELSE clause cannot exist on its own.\\r\n* With an else clause you are *guaranteeing*\nthat one of two portions of code will run.\\r\n\\r\n"
      Vigenere_markdown_instruction: "# Encrypt and decrypt a message with the Vigenère\ncipher\\r\n\\r\nThis is an interactive version of the Vigenère cipher that animates\nthe encryption and decryption as it’s happening, given a piece of text to\nencrypt or decrypt and the key.\\r\n\\r\n# Do this\\r\n### Encrypt a message\\r\nClick\nStep several times, and trace what’s happening. Pay attention to:\\r\n\\r\n-\nHow the ciphertext is being produced\\r\n- What happens when you get to the\nlast character of the key\\r\n- After you’ve stepped through a few characters\nclick Play to watch the rest animate\\r\n- Hit Restart and play the animation\nagain. You can use the speed slider to speed it up or slow it down  \\r\n\\r\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\\r\n\\r\n###\nDecrypt a message\\r\nEncrypt a message as above, then:  \\r\n\\r\n- Highlight\nand copy the ciphertext\\r\n- Paste it into the plaintext area. Note: Don’t\nchange the key\\r\n- Change the Encrypt/Decrypt toggle to Decrypt\\r\n- Hit\nStep a few times, and then Play\\r\n\\r\nYou should see the original text emerge.  \\r\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\\r\n\\r\n\\r\nHow\nhard would it be to crack a message encrypted with this cipher? Does the length\nof the key make a difference?\\r\n"
      Visual Accessibility_markdown_instruction: "# Visual Accessibility: Color Contrast\\r\n\\r\nPeople\nneed to be able to see and read the content on your web page for it to be\nuseful. Not everyone will see your website the same way you do. Some people\nmight have bad eye sight, others are color blind. How do you design with these\ndifferences in mind?\\r\n\\r\nOne of the easiest ways to insure that many people\nwill be able to read the content on your website is to make sure their is\nenough contrast between the different colors you are using together on your\nsite. Contrast is the state of being strikingly different from something else.\nCheck out the below example of contrasting colors.\\r\n\\r\n| Example 1 | Example\n2 |\\r\n| --------- | --------- |\\r\n|<img src=\"https://images.code.org/f4f8acab4c8fe45cddef0436c52084cf-image-1476231852248.jpg\"\nstyle=\"width:200px\"> | <img src=\"https://images.code.org/76ea7aba97b7a9717f8b784b0987a055-image-1476231855350.jpg\"\nstyle=\"width:200px\"> |\\r\n\\r\nStare at example 1 for a few seconds. You\nmight notice that the edges of the text blur with the background or it feels\nlike the image is pulsing. This is because the value of the colors is too\nclose together. The second is definitely easier to look at because one color\nis dark and one is light.\\r\n\\r\nA way to test this is convert everything\nto grayscale. Notice how in the example below the example with contrasting\ncolors is easier to view in grayscale.\\r\n\\r\n<img src=\"https://images.code.org/40be05f66945d5cf0fda69be95986a4a-image-1476232151166.jpg\"\nstyle=\"width:300px\">\\r\n\\r\nContrast can be a powerful tool to use in your\nwebsite. You can direct a users eye to a certain part of the page using contrast.\nCheck out this page. Where is your eye drawn?\\r\n\\r\n<img src=\"https://images.code.org/63af145760dc94d66dfff8791c1dfe65-image-1476232407521.32.15\nPM.jpg\" style=\"width:500px\">\\r\n\\r\nYour answer is probably the orange\nbuttons. Thats because those buttons have contrasting colors to the rest of\nthe page which are lighter.\\r\n\\r\n# Do This\\r\n\\r\n* Use the <a href=\"http://contrastchecker.com/\">\ncolor contrast checker </a> to see the difference in contrast of the different\ncolors you are using together on your site. This website uses hex codes for\ncolors. Remember that you can find the hex codes for your colors in your color\ninformation from lesson 10.\\r\n* Click the \"See Grayscale\" button to see\nhow well you can read the different text and background colors\\r\n* Consider\nmaking changes to your color choices by darkening or lightening up certain\ncolors to make them easier to read.\\r\n\\r\n** Images and examples from http://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/\n**"
      Web Lab 1_markdown_instruction: "Make an awesome web page!\\r\n\\r\n1. Look at\nthe web page we gave you to start with. Look how lame it is. 1996 just called\nand wants its web page back. But don't get depressed - YOU can fix it!\\r\n2.\nAdd a background-color attribute in the body style in style.css to make the\npage background color 'darkcyan'\\r\n3. Add a text-align attribute to the\nbody style in style.css to center the image and text horizontally\\r\n4. Change\nindex.html to include an inspiring hashtag\\r\n5. Add a color attribute to\nthe p style in style.css to make the inspiring hashtag white\\r\n6. Add a font-size\nattribute to the p style in style.css to make your inspiring hashtag REALLY\nBIG! (Try 24px and 3em and see what happens.)"
      Website Comparison_markdown_instruction: "# Comparing Websites\\r\n\\r\n**Prompt:**\nImagine you have a new puppy at home who has chewed through her old leash.\nDecide between which of these two websites you would ultimately decide to\nbuy your puppy’s new leash. Why?\\r\n\\r\n* Website 1: <a href=\"https://thimbleprojects.org/nickianselmo/84613/\">\nUncle Joe's Pet Store</a>\\r\n* Website 2: <a href=\"http://www.petsmart.com/\">\nPetSmart</a>\\r\n\\r\nWrite your answer in the box below. When you are done\nwait for directions from your teacher before moving on."
      'Website: Data Breaches_markdown_instruction': "## Website: Data Breaches\\r\n\\r\nIn\nlesson 3 students begin to explore the types of security breakdowns that have\nhappened over time, and consider what information is actually out there about\nthem. The lessons starts with an exploration of an interactive data visualization\nwebsite, linked below: "
      'Wednesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction': "At\nthis point you've seen 7 of the 14 lessons from unit 1. Thinking about those\nlessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\"\ntarget=_blank>unit 1</a>. Again, consider the following questions with your\npartner:\\r\n\\r\n- How have people wearing teacher hats been balancing their\ntime leading or guiding with the student-hat’s time to get into activities\nand tools?\\r\n- What strategies have been effective for managing the transition\nto tools? What strategies are effective in getting peoples’ attention once\nthey’re lost in a tool?\\r\n- What are your current thoughts about the appropriate\nbalance of teacher-guided time VS time in the tools or with the activities?\\r\n\\r\n<br>\\r\n\\r\nOnce\nyou've had a chance to think about what you've seen today,  work with your\npartner to develop a set of recommendations about balancing the teacher and\nthe tools in Unit 1. Your recommendations might include:\\r\n\\r\n- Which lessons\nor activities present the biggest challenges with balancing teachers and tools?\n\\r\n- What recommendations do you have related to balancing teachers and tools\nin Unit 1?  \\r\n\\r\n<br>\\r\n\\r\nUse the space below to record your recommendations\n(you'll share them tomorrow). "
      'Wednesday Report: Discovery Learning in Unit 1_markdown_instruction': "At\nthis point you've seen 7 of the 14 lessons from unit 1. Think about those\nlessons, and look across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\"\ntarget=_blank>unit 1</a>. Again, consider the following questions with your\npartner:\\r\n\\r\n- What opportunities have you seen for learners to discover\nconcepts for themselves? \\r\n- How did the process of engaging in discovery\nactivities change the pacing, flow, or outcome of the lesson? \\r\n- What benefits\nand pitfalls did you see in discovery activities? \\r\n\\r\n<br>\\r\n\\r\nOnce\nyou've had a chance to think about what you've seen today,  work with your\npartner to develop a set of recommendations about balancing the teacher and\nthe tools in Unit 1. Your recommendations should include:\\r\n\\r\n- Which lessons\nor activities provide opportunities for discovery learning? \\r\n- What recommendations\ndo you have for using discovery learning in Unit 1?  \\r\n\\r\n<br><br>\\r\nUse\nthe space below to record your recommendations (you'll share them tomorrow).\n"
      'Wednesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction': "At\nthis point you've seen 7 of the 14 lessons from unit 1. Thinking about those\nlessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\"\ntarget=_blank>unit 1</a> Again, consider the following questions with your\npartner:\\r\n\\r\n- Where did you see group work and peer learning in these\nlessons?\\r\n- What are the benefits of using group work and peer learning\nhere?\\r\n- How does using peer learning and group work as a strategy in the\nlesson impact how the activities run?\\r\n\\r\n<br>\\r\n\\r\nOnce you've had\na chance to think about what you've seen today,  work with your partner to\ndevelop a set of recommendations about group work and peer learning in Unit\n1. Your recommendations might include:\\r\n\\r\n- Which lessons or activities\nprovide opportunities for group work and peer learning?\\r\n- What recommendations\ndo you have for using group work and peer learning in Unit 1 lessons?\\r\n\\r\n<br>\\r\n\\r\nUse\nthe space below to record any recommendations or commentary you have for others."
      'Wednesday Report: Measuring Student Learning in Unit 1_markdown_instruction': "At\nthis point you've seen 7 of the 14 lessons from unit 1. Thinking about those\nlessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\"\ntarget=_blank>unit 1</a>. Again, consider the following questions with your\npartner:\\r\n\\r\n- What opportunities have you seen for assessing learners’\nknowledge (prior knowledge, knowledge gained during the lesson, etc)? \\r\n-\nWhat assessments are available in the curriculum? \\r\n- What strategies would\nbe effective for checking in on what students know? \\r\n\\r\n<br>\\r\n\\r\nOnce\nyou've had a chance to think about what you've seen today,  work with your\npartner to develop a set of recommendations about balancing the teacher and\nthe tools in Unit 1. Your recommendations should include:\\r\n\\r\n- Which lessons\nor activities present the biggest challenge with assessing student learning?\\r\n-\nWhat recommendations do you have for assessing student learning in Unit 1?  \\r\n\\r\n<br>\\r\n\\r\nUse\nthe space below to record your recommendations (you'll share them tomorrow).\n"
      What is a Heuristic?_markdown_instruction: "## What is a Heuristic? \\r\n\\r\nIn\nlesson 2 students will take on the challenge of compressing various pieces\nof text. Over time, they will see that different types of text require different\napproaches to compression. The lesson ends with an activity where students\ndevelop a heuristic, or a rule of thumb, that can be applied to different\npieces of text in order to compress them. \\r\n\\r\nThere are three Essential\nKnowledge Statements and one Exclusion Statement in the Framework dealing\nwith Heuristics: \\r\n\\r\n>- 4.2.1D Some problems can be solved but not in\na reasonable time. In these cases, heuristic approaches may be helpful to\nfind solutions in reasonable time. \\r\n- 4.2.2A A heuristic is a technique\nthat may allow us to find an approximate solution when typical methods fail\nto find an exact solution. \\r\n- 4.2.2B Heuristics may be helpful for finding\nan approximate solution more quickly when exact methods are too slow. \\r\n-\nExclusion Statement (4.2.2B): Specific heuristic solutions are beyond the\nscope of this course and the AP Exam.\\r\n\\r\nMany people are confused by the\ndifference between *algorithms* and *heuristics*. Check out the following\nresource for some clarification about the overlaps and differences between\nthe two. "
      What is the difference between formative and summative assessment?_markdown_instruction: "The\nfollowing link is a resource that provides definitions and examples of formative\nand summative assessments:"
      WhileAdventure_markdown_instruction: "Our adventurer wants to collect coins.  But\nshe can only use 4 blocks to get them.  \\r\n\\r\nCan you help her grab as many\nas she can using just 4 blocks?"
      'Widget: Black and White Pixelation_markdown_instruction': "# Make your own\nimage of any size\\r\n\\r\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r\n\\r\n\\r\n**Directions:**\\r\n\\r\n*\nEncode an image of anything you like.\\r\n* You might want to do some planning\nand sketching with graph paper first.\\r\n* DO NOT simply make an abstract\npattern, like a checkerboard. \\r\n* Depict something, perhaps your name written\nout, your initials, an icon or logo of some sort.\\r\n* Get creative! The image\ndoesn't have to be a perfect square, it can be long and skinny.\\r\n* Optional:\nfor fun, send your image bits to a friend using the <a href =\"https://studio.code.org/s/cspunit1/stage/11/puzzle/2\"\ntarget=\"_blank\">sending bits widget.</a> *(note: this is just a link to\nthe sending formatted text level from a couple of classes ago)*\\r\n\\r\n\\r\n"
      'Widget: Color Pixelation_markdown_instruction': "# Personal Favicon\\r\n**Requirements:**\\r\n<img\nsrc = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\"\nalign=right hspace=20>\\r\n\\r\n* The icon must be 16x16 pixels. \\r\n* You must\nuse the Pixelation Widget to encode the bits of color information.\\r\n* The\nimage must be encoded with at least 12 bits per pixel.\\r\n\\r\n"
      'Widget: Text Compression_markdown_instruction': "Look for patterns (repeated\nwords or phrases) in the text. Enter the patterns you see into the dictionary\non the right. As you type entries into the dictionary, the symbol for the\nentry is inserted into the text in place of the pattern."
      aE1_markdown_instruction: "<img src=\"https://images.code.org/fa3c416b74ff9071455535955bc4df35-image-1465507662295.gif\"\nstyle=\"float:left; width:100px; margin: 0 20px 80px 100px;\"/>\\r\n\\r\n<div\nstyle=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\">\\r\nFirst,\nwe need napkins!\\r\n\\r\nChoose your favorite shape:\\r\n - Square (Easy)\\r\n\n- Triangle (Medium)\\r\n - Pentagon (Hard)\\r\n\\r\n</div>\\r\n<br/>\\r\n\\r\n"
      aE2_markdown_instruction: "<img src=\"https://images.code.org/2a67ea28a0fb9f674fd764b350b297da-image-1465514320176.gif\"\nstyle=\"width:400px; margin: 0 20px 20px 10px;\"/>\\r\n\\r\n<div style=\"color:\n#7665a0; font-size: 1.6em; line-height: 1.4em;\" >Now we need enough for everyone!\\r\n<br/><br/>\\r\n\\r\nLet's\ntake the shape we just made and line up a row of 14 napkins.  \\r\n<br/>\\r\nIf\nyou place one loop inside another loop, we call that a nested loop. \\r\n\\r\nHow\ncan you loop all of the code from your last stage to make sure all 14 napkins\nline up next to each other?</div>\\r\n"
      aE3_markdown_instruction: "<img src=\"https://images.code.org/e9fe83556eec68be9ebd7de9a16267b1-image-1465516277348.gif\"\nstyle=\"width:400px; margin: 0 20px 20px 100px;\" loop=\"infinite\"/>\\r\n\\r\n<div\nstyle=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\\r\nWe've\ngot to have a tablecloth!  <br/></br>\\r\n\\r\nTake your row of 14 napkins and\nsew 14 of those together with another **outer loop** to make a cover for our\ntable.\\r\n</div>\\r\n\\r\n"
      aE3alternate_markdown_instruction: "\\r\n<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nThis alternate shows what the image would\nlook like if the user chose pentagon napkins and modified line weight/color.\\r\n</div>\\r\n\\r\n"
      aE3alternateB_markdown_instruction: "\\r\n<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nThis alternate shows what the image would\nlook like if the user chose triangle napkins and got bold with the code.\\r\n</div>\\r\n\\r\n"
      aE4_markdown_instruction: "\\r\n<div style=\"color: #7665a0; font-size: 1.6em;\nline-height: 1.4em;\" >\\r\nOh No! Our napkins are too small! \\r\n<br/><br/>\\r\nWe\nneed to have the napkins twice as big and still keep the tablecloth the same\nsize. What numbers can you change to make that happen?\\r\n<br/><br/>\\r\n(as\nshown in triangles)\\r\n</div>\\r\n\\r\n"
      aE5_markdown_instruction: "\\r\n<div style=\"color: #7665a0; font-size: 1.6em;\nline-height: 1.4em;\" >\\r\nLet's pull the look together with some window\ndecorations!\\r\n<br/><br/>\\r\nHere is your original code for drawing a line\nof napkins. Piece 4 lines together to make a pattern that goes around your\nwindow frame.\\r\n</div>\\r\n\\r\n"
      aE6_markdown_instruction: "<div style=\"color: #7665a0; font-size: 1.6em; line-height:\n1.4em;\" >\\r\nThe guests are going to need something to sit on!\\r\n<br/><br/>\\r\nThe\nartist has an idea to make some fun chairs. How many times do you need to\nloop this to draw half of a circle?\\r\n</div>"
      aE7_markdown_instruction: "<div style=\"color: #7665a0; font-size: 1.6em; line-height:\n1.4em;\" >\\r\nHow about some streamers?\\r\n<br/><br/>\\r\nIf you create another\nloop like this one, but turn left instead of right, what happens? \\r\n\\r\nCan\nyou repeat all of that to draw this wave?\\r\n</div>"
      aE8_markdown_instruction: "<div style=\"color: #7665a0; font-size: 1.6em; line-height:\n1.4em;\" >\\r\nThe artist wants to give picture frames as party favors!\\r\n<br/><br/>\\r\nLet's\nloop the code from our streamers four times to create this frame. \\r\n<br/><br/>We've\nadded a special block called `curvy corner` to give you fancy round corners!\\r\n</div>"
      aEfreeplay_markdown_instruction: "<div style=\"color: #7665a0; font-size: 1.6em;\nline-height: 1.4em;\" >\\r\n<b>Free Play:</b>\\r\nFor a final touch, we need\nsome ornaments to hang around the house.\\r\n<br/><br/>\\r\nCan you design a\ndecoration to spice up the party?\\r\n</div>\\r\n<br/>\\r\n<h4>\\r\n<details>\\r\n<summary>Need\nIdeas?</summary>\\r\n<br/>\\r\n<br/>\\r\nTry making a tablecloth full of diamond\nnapkins!  \\r\n<img src=\"https://images.code.org/2c092ea5edbb33405c019110df3f5710-image-1466095499984.43.56.png\"\nwidth=\"200px\"/>  \\r\n<hr/>\\r\n<br/>\\r\nMake an ornament!   \\r\n<img src=\"https://images.code.org/361d2ad667853418a040ec9383505169-image-1466096394561.56.12.png\"\nwidth=\"200px\"/>  \\r\n<hr/>\\r\n\\r\n<br/>Make something completely new!  \\r\n<img\nsrc=\"https://images.code.org/6809a1bd2a364ae7e0ff42745ec1fe1b-image-1466097871045.23.44.png\"\nwidth=\"200px\"/>  \\r\n<hr/>\\r\n\\r\n\\r\n</details>\\r\n</h4>\\r\n\\r\n"
      allthethings data blocks test_markdown_instruction: "Please sign in to test\napplab levels (By design, applab levels only work if signed in. Normally,\nwe make people sign in, but this is only enforceable for a whole script and\nwould be annoying to do for the allthethings script)."
      allthethings design mode elements_markdown_instruction: "Please sign in to\ntest applab levels (By design, applab levels only work if signed in. Normally,\nwe make people sign in, but this is only enforceable for a whole script and\nwould be annoying to do for the allthethings script).\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\n.\\r\n\\r\nEnd\nof instructions that are long."
      allthethings level dataTables_markdown_instruction: "Please sign in to test\napplab levels (By design, applab levels only work if signed in. Normally,\nwe make people sign in, but this is only enforceable for a whole script and\nwould be annoying to do for the allthethings script)."
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction: "#\nDrawing Rules\\r\n\\r\nSo what did you discover on the last level?\\r\n\\r\n*\nWhat do each of the 4 openings control?\\r\n\\r\n\\t* First Opening - controls\nthe **location of the rectangle from left to right** - we call this the **x\nposition**\\r\n    * Second Opening - controls the **location of the rectangle\nfrom top to bottom** - we call this the **y position**\\r\n    * Third Opening\n- controls the **width** of the rectangle\\r\n    * Fourth Opening - controls\nthe **height** of the rectangle\\r\n\\r\n* What is the size of the drawing area?\\r\n\\r\n\\t*\nWidth - 400\\r\n    * Height - 400\\r\n\\r\n* So where is (0,0) or x = 0 and\ny = 0?\\r\n\\r\n\\t* The **upper left corner of the grid!**\\r\n\\r\n# Do This\\r\n\\r\nWe\nhave provided you with code for a rectangle that draws in the upper left corner\nwhen you run the program. Using your new knowledge of the workspace and the\ninputs for a rectangle:\\r\n\\r\n* **Change the width and height of the rectangle\nso that it fills the whole drawing area**\\r\n* **HINT:** Remember that the\nrectangle block is `rect(x, y, width, height)` in that order"
      allthethings_embed_video_markdown_instruction: "Siri is a digital assistant\nbuilt into Apple's iOS devices, including iPhones and iPads. Watch the advertisement\nfor Siri, below. \n\n<iframe width=\"637px\" height=\"375px\" src=\"https://www.youtube.com/embed/8ciagGASro0\"\nframeborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect on the prompts\nbelow:__ \n\n- What types of information does Siri respond to in the video?\n-\nWhat do you think Siri is paying attention to in order to create these answers?\n"
      allthethings_moviebot_markdown_instruction: "# Please sign in to test applab\nlevels (By design, applab levels only work if signed in. Normally, we make\npeople sign in, but this is only enforceable for a whole script and would\nbe annoying to do for the allthethings script).\n# Introduction to the Digital\nAssistant\\r\n\\r\n__While digital assistants may seem like magic, they are\njust elaborate computer programs that parse, or process, text__ looking for\ncombinations of words to make decisions about what to reply.\\r\n\\r\nOver the\nnext few lessons, __you're going to build up your own digital assistant that\nresponds \"intelligently\" to a user's question__, by making a decision about\nwhat to reply based on the contents.\\r\n\\r\nYou'll now __explore a demo digital\nassistant__, Movie Bot, that represents the kind of program that you'll build\nup to. Try out some of the prompts below and also try your own. You'll quickly\nfind the limits of what this program can and can't do.\\r\n\\r\n# Do this\\r\n__Run\nMovie Bot. In the _'enter your question here'_ input, type each of the following\nprompts and hit 'enter' __\\r\n- 'help'\\r\n- 'What is the best PG comedy\nmovie ever?'\\r\n- 'What PG comedy movie should I watch next?'\\r\n- 'Could\nyou please tell me the best romance movie?'\\r\n- 'I waNT To WatCH a MovIE!!!'\\r\n-\n'What is the capital of Kentucky?'\\r\n- Play around! Ask more questions\nof Movie Bot and make a prediction about what logic it's using to reply\\r\n"
      allthethings_template_backed1_markdown_instruction: "Backed by a template #1.\nPlease sign in to test applab levels (By design, applab levels only work if\nsigned in. Normally, we make people sign in, but this is only enforceable\nfor a whole script and would be annoying to do for the allthethings script).\n"
      allthethings_template_backed2_markdown_instruction: "Backed by a template #2.\nPlease sign in to test applab levels (By design, applab levels only work if\nsigned in. Normally, we make people sign in, but this is only enforceable\nfor a whole script and would be annoying to do for the allthethings script)."
      allthethings_ttscsd_markdown_instruction: "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10\nPM.png\" style=\"float:right;height:150px\">\\r\n\\r\n# Do This\\r\n\\r\n* Write\ncode that makes an orange ellipse behind the green one.\\r\n* Don't worry\nabout the exact size as long as the green ellipse is entirely inside the orange\none."
      allthethings_ttscsp_markdown_instruction: "\\r\n# Play with different event\ntypes\\r\n\\r\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06\nAM.png\" style=\"float: right\">\\r\nIf you haven't yet, you should experiment\nwith different event types with your `onEvent` blocks.  The ones that will\nwork best here are mouse-related ones such as:\\r\n  * click\\r\n  * mousemove\\r\n  *\nmovedown\\r\n  * mouseup\\r\n  * mouseover\\r\n\\r\n*There are some events that\ncapture keystrokes from the keyboard. These are interesting, but they do not\nwork easily with buttons. We'll stick to mouse events for now, and get to\nkeys later.*\\r\n\\r\n**Be sure** to experiment with each of the ones that start\nwith \"mouse...\".\\r\n\\r\nOnce you've have played a little bit, click Finish\nto move on.\\r\n\\r\n"
      artistDebugVideo1_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nUse the `repeat` loop to add waves to the\nwater.<br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK2_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nNow, use a `repeat` loop to draw this line\nfive times!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK2gradek_artist_loops3_markdown_instruction: "<div style=\"color:\n#7665a0; font-size: 1.6em; line-height: 1.4em;\" >\\r\nNow, use a `repeat`\nloop to draw this line five times!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK3_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nDraw a line eight steps long. This will\nbecome the land for our kingdom!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK4_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nNow we need a castle with a draw bridge.  Fix\nthe code so that the bridge lays straight instead of falling down.<br/><br/>\\r\n</div>\\r\n\\r\n<img\nsrc=\"https://images.code.org/84b93e1b9dad3ee52a46c767524d3558-image-1467935697224.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK5_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nNow we need to fix the top of the castle.\nCan you loop the code three times?<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/f418ccba20b7230baba1328143bd0092-image-1467935762464.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK6_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nSomeone is stuck in the tower!  Fix the\nstairs to set them free.<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/1efb95ca15f66b46145725769d3d279c-image-1467935856461.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK7_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nThis tower is lovely, what is downstairs?\nBuild another staircase to find out!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/af040c27be11c3a639e18c440c8a047c-image-1467936046481.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK8_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nWow! There's a garden over there!  Help\nfix these stairs so I can get to it.<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/bf368872da36217b0d19261fc6b84bf6-image-1467936147116.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsK9_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\n**Challenge:**  Lovely! Let's take a walk\naround the garden.<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/cb5646ef57f68b47fa6c2762253a7044-image-1467936260174.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsKA_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nThese stones are in the wrong place.  Help\nme move them so I don't fall in!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsKB_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nLook!  It's a theater.  Help me set up\nthe chairs so we can all see the stage.<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/c4263306ebb0ad1d99fe6f200a790d0c-image-1467936424533.gif\"\nwidth=\"300\"/>\\r\n"
      artistLoopsKFP_markdown_instruction: "Picture time!  Use what you have learned\nto draw a picture of what you think the Artist saw on stage.\\r\n\\r\n<hr/>\\r\n<h3>Ideas</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Singing Snail</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Big City</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Concert</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Birthday Cake</h4><br/><br/>\\r\n</td>\\r\n\\r\n</tr>\\r\n</table>\\r\n"
      beeDebugVideo1_markdown_instruction: "Collect all of the nectar."
      collector example_markdown_instruction: "Collect all the gold using the `collect`\nblock:\\r\n\\r\n<xml>\\r\n  <block type=\"collector_collect\"/></xml>"
      collectorDebugVideo2_markdown_instruction: "*\"Sequence matters!\"*\\r\n\\r\nThe\nblocks you need are already in the workspace, but not connected.  \\r\n\\r\nPut\nthese blocks in order to collect all of the gold and solve the puzzle."
      collectorSkinVideo1_markdown_instruction: "Move Laurel to the treasure, then\nuse `collect` to pick it up.\\r\n\\r\nCollect one pile of treasure to pass this\nlevel."
      collectorSkinVideo2_markdown_instruction: "Move Laurel to the treasure, then\nuse `collect` to pick it up.\\r\n\\r\nCollect one pile of treasure to pass this\nlevel."
      comment_intro_maze_2018_markdown_instruction: "*\"I'm confused. Help me remember\nhow to solve this maze.\"* \\r\n\\r\nUse the new `comment` block to leave yourself\nquick reminders. They can help you remember what you were doing and why!\\r\n\\r\nComments\nare only used for **you**. Your Play Area won't look different because of\na comment."
      conditionals_forvideo_harvester_markdown_instruction: "Collect all of the corn\nand lettuce, then pick the pumpkin."
      course1_artist_loops_challenge2_markdown_instruction: "Let's play a game!\nDraw as many X's as you can! Can you get 3 in a row?"
      course1_artist_loops_challenge3_markdown_instruction: "**Tweet!**\\r\n\\r\n*\"Can\nyou help me make two bird houses?\"*"
      course1_artist_loops_challenge4_markdown_instruction: "*\"It's time to toss\nthe dice! Can you help me draw these?\"*"
      course1_maze_debugging_challenge1_markdown_instruction: "Debug this level.\nRemove the extra blocks, and add the missing blocks. Get the bird to the pig!"
      course1_maze_debugging_challenge2_markdown_instruction: "Debug this level.\nThese are the right blocks, but they're in the wrong order!"
      course1_maze_seq_challenge2_markdown_instruction: "You can only move up to\nfour times in each direction. Can you find a path before you run out of blocks?"
      course1_playlab_events_challenge1_markdown_instruction: "*\"Where are my friends\nhiding? In this game, clicking on me will show my friend Olive the cat!\"*\\r\n\\r\nClicking\nOlive will make Robin appear! Can you write code to show the rest of the characters\ntoo?\\r\n\\r\nIn this puzzle, make sure to click for hints! The hints will help\nyou do this project step-by-step!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      course1_playlab_events_challenge2_markdown_instruction: "*\"Let's have a party!\nGive my friends something to do when you click or tap them.\"*\\r\n\\r\nWhat\nwill the animals say? What else will happen?\\r\n\\r\n\\r\n\\r\nIn this puzzle,\nmake sure to click for hints! The hints will give you fun things to try!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      course2_artist_nestedLoops_challenge1_markdown_instruction: "Can you figure\nout how to make a picture like this?\\r\n\\r\n- Both shapes have **50 pixel\nsides.**\\r\n- The *octagons* are made with **45 degree** turns.\\r\n- The *triangles*\nare made with **120 degree** turns."
      course2_artist_nestedLoops_challenge2_markdown_instruction: "Can you figure\nout how to make a picture like this?\\r\n\\r\n- The first inner loop should\nmake an octagon.\\r\n- The second inner loop should make a hexagon.\\r\n- The\nthird inner loop should make a square."
      course2_artist_prog_challenge1_markdown_instruction: "Draw rooms for each of\nthe animals. There are many different ways to solve this puzzle, so have some\nfun!"
      course2_artist_prog_challenge2_markdown_instruction: "*Help me paint the yellow\nlines on this road!*"
      course2_bee_conditionals_challenge1_markdown_instruction: "Collect all of the\nnectar or make all the honey. You can only collect nectar from flowers and\nmake honey from honeycombs. Check any space to see if there is a flower or\nhoneycomb."
      course2_bee_conditionals_challenge2_markdown_instruction: "Collect all of the\nnectar and make all the honey. You can collect all of the nectar in one flower\nby using the `while nectar > 0` loop."
      course2_collector_loops_challenge2_markdown_instruction: "*\"Let's hunt for\ntreasure - using loops!\"*\\r\n\\r\nHelp the collector by debugging this code.\nGet all of the treasure!"
      course2_collector_prog_challenge1_markdown_instruction: "Look carefully! Can\nyou collect all **10** pieces of treasure?"
      course2_collector_prog_challenge2_markdown_instruction: "There are **20** pieces\nof treasure in this cave. Collect at least half to finish the challenge!"
      course2_harvester_loops_challenge1_markdown_instruction: "Collect all of the\ncorn."
      course2_harvester_loops_challenge2_markdown_instruction: "Collect all of the\nlettuce. Avoid the trees and fields!"
      course2_maze_programming_challenge1_markdown_instruction: "*\"The pig is hiding!\nCan you help me find a way around?\"*"
      course2_maze_programming_challenge2_markdown_instruction: "Sometimes there\nis more than one way to solve the same problem. Sometimes it's faster to\ngo backwards than it is to go forwards!"
      course2_maze_seq_challenge2_markdown_instruction: "You can only move up to\nfour times in each direction. Can you find a path before you run out of blocks?"
      course2_playlab_stage17_11_markdown_instruction: "Create your own story. When\nyou're done, click Finish to let friends try your story on their phones.\\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Who's\nthere?</strong> - Make characters appear with random images, so no one knows\nwho's showing up next.</li>\\r\n            <li><strong>Going on an Adventure</strong>\n- Change the background, then have the characters talk about where they are\nnow. </li>\\r\n            <li><strong>Pinball</strong> - Make one character\nmove using the arrow keys (use `when up arrow`, `when down arrow` blocks),\nthen play random sounds when it collides with other characters on the screen.\n</li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      course3_artist_concept_challenge1_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you have already been shown.  Can you figure out how\nto recreate it?  Feel free to use trial and error. You are not expected to\nget it perfect the first time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the last puzzle, except that the length used in the first\nloop is a little smaller. "
      course3_artist_functions_challenge1_markdown_instruction: "Once you define\na function, you can call it over and over again - whenever and wherever you\nwant! Try this code to see how it works, then change it to make your own impressive\ndesign!"
      course3_artist_functions_challenge2_markdown_instruction: "Not only can you\njump to some pre-set locations, like the corners of the canvas, you can also\nuse a `jump to` command to get to absolutely any spot you like! Try this code\nto see how it works, then make the program your own!\\r\n<xml>\\r\n  <block\ntype=\"jump_to_xy\">\\r\n    <title name=\"XPOS\">???</title>\\r\n    <title\nname=\"YPOS\">???</title>\\r\n    </block></xml>"
      course3_bee_debugging_challenge1_markdown_instruction: "Watch how the bee gets\nthe nectar. Can you use the same kind of pattern to help the bee make all\nof the honey?"
      course3_bee_functions_challenge1_markdown_instruction: "You are on your own\nfor this challenge.  This could \"bee\" harder than it looks!"
      course3_bee_functions_challenge2_markdown_instruction: "You are on your own\nfor this challenge!"
      course3_bee_functions_challenge3_markdown_instruction: "Create a new function\nto collect all the nectar and honey while there is a path ahead. Use it to\ncomplete the puzzle!"
      course3_bee_functions_challenge4_markdown_instruction: "Use everything you\nhave learned to complete this puzzle!"
      course3_collector_debugging_challenge2_markdown_instruction: "Are you an expert\nof nested loops? Use what you have learned so far to collect all of the treasure!"
      course3_farmer_condLoops_challenge1_markdown_instruction: "The pumpkins mark\nthe place where you should turn. *Turn right at the pumpkins.* Otherwise keep\ngoing forward, but remember to collect all of the lettuce or corn along the\nway. \\r\n\\r\n**Each hidden crop has only one corn or lettuce.**"
      course3_farmer_condLoops_challenge2_markdown_instruction: "*\"It's a vegetable\nmaze!\"* \\r\n\\r\nTurn right at pumpkins, turn left at the lettuce. Collect\neverything to complete the level."
      course3_farmer_until_challenge2_markdown_instruction: "Use If/Else blocks to\nfollow the curvy path. At each corner, use the `remove 1` command in a loop\nto clear the piles."
      course3_maze_debugging_challenge1_markdown_instruction: "*\"Am I just going\naround in circles?\"*"
      course3_maze_debugging_challenge2_markdown_instruction: "*\"If I turn too often,\nI might get dizzy! Help me reach the pig with only four `turn` commands.\"*"
      course3_maze_until_challenge1_markdown_instruction: "No hints, just challenge.\nGet the zombie to the sunflower."
      course3_playLab_challenge1_markdown_instruction: "*The **squirrels** are terrified\nto see that a **dinosaur** has come to town! Can the brave **knight** keep\nthem all from panicking?*\\r\n\\r\nRules:\\r\n1. *Touching the squirrels scores\nyou points.*\\r\n2. *Touching the dinosaur takes many points away.*\\r\n\\r\nHere\nis a different kind of game that has already been started for you! Play it\nto see how it works. \\r\n\\r\n\\r\nSomething should happen when you get enough\npoints or when you run out of points. Add some code to the `win game` and\n`lose game` functions to make the game work the way it should. \\r\nClick the\nhints for ideas!"
      course3_playlab_challenge2_markdown_instruction: "Can you figure out how this\n\"Fortune Teller\" app works? Try adding some of the following features to\nthis game:\\r\n\\r\n* Change the \"yes\" and \"no\" answers to something more\ninteresting.\\r\n* Let the player ask another question after the actor says\nthe fortune.\\r\n* Give the witch two more things to say when she is in an\n`angry` or `normal` mood.\\r\n* Give the wizard his own set of fortunes.\\r\n*\nMake each actor change mood randomly.\\r\n\\r\nCheck the hints if you need help\nwith these challenges!"
      course4_artist_binary_challenge1_markdown_instruction: "You can only use each\nbinary value (0 or 1) once each in this puzzle. Try using nested loops to\ncomplete this drawing."
      course4_artist_binary_challenge2_markdown_instruction: "There are 256 bits\nrepresented on this grid - that means it's easy for a small change to cause\nbig problems. Are you persistent enough to restore this logo back to normal?\\r\n\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      course4_artist_concept_challenge2_markdown_instruction: "Create five pinwheel\ndesigns using the code below."
      course4_artist_functions_challenge2_markdown_instruction: "Not only can you\njump to some pre-set locations, like the corners of the canvas, you can also\nuse a `jump to` command to get to absolutely any spot you like! Try this code\nto see how it works, then make the program your own!\\r\n<xml>\\r\n  <block\ntype=\"jump_to_xy\">\\r\n    <title name=\"XPOS\">???</title>\\r\n    <title\nname=\"YPOS\">???</title>\\r\n    </block></xml>"
      course4_artist_fwp_challenge1_markdown_instruction: "Try running this program,\nand make changes to see what happens. Can you figure out how it works? (Or\ndelete it and replace it with something totally different)"
      course4_artist_variables_challenge1_markdown_instruction: "Can you create a\n`length` variable and use it to create this interesting pattern?"
      course4_artist_variables_challenge2_markdown_instruction: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\r\n\\r\nYou've now learned everything you need to know to\nmake a pattern like this! This puzzle is meant to be difficult.  Can you stick\nwith it until you figure out the solution?"
      course4_bee_for_challenge1_markdown_instruction: "Use this for loop to collect\nall of the nectar. There are a few actions that you will want to `repeat 'counter'\ntimes`."
      course4_bee_fwp_challenge1_markdown_instruction: "Use one `for loop` in a function\nto collect all of the corn. The same `for loop` can count to different maximum\nvalues by using the `length` parameter."
      course4_bee_fwp_challenge2_markdown_instruction: "Let's see if you can handle\nthis one final test! Give it everything you've got!\\r\n\\r\nUse one `for loop`\nin a function to collect all of the vegetables in the row. Make the `for loop`\ncount to different maximum values by using the `length` parameter. Make your\nprogram as short as possible by using a second `for loop` outside the function.\\r\n\\r\nGood\nluck!"
      course4_collector_nested_loops_challenge2_markdown_instruction: "*\"Let's\nhunt for treasure - using loops!\"* \\r\n\\r\nHelp the collector reach at least\ntwo piles of treasure using only the blocks in your toolbox. It is possible\nto collect all 4."
      course4_harvester_nested_loops_challenge1_markdown_instruction: "*\"I need\nsome help on the farm! Help me harvest this corn using only the blocks in\nyour toolbox.\"*"
      course4_playlab_variables_challenge1_markdown_instruction: "Use these blocks\nto make the actors share a knock-knock joke. Change the punchline and setup\nto tell your own joke!"
      course4_playlab_variables_challenge3_markdown_instruction: "Can you figure\nout how this \"Fortune Teller\" app works? Try adding some of the following\nfeatures to this game:\\r\n\\r\n* Change the \"yes\" and \"no\" answers to something\nmore interesting.\\r\n* Let the player ask another question after the actor\nsays the fortune.\\r\n* Give the witch two more things to say when she is in\nan `angry` or `normal` mood.\\r\n* Give the wizard his own set of fortunes.\\r\n*\nMake each actor change mood randomly.\\r\n\\r\nCheck the hints if you need help\nwith these challenges!"
      courseA_artist_loops10_markdown_instruction: "## Time to head back to land.\nHelp me put down stones so I don't fall in!\\r\n\\r\n![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)"
      courseA_artist_loops10_2018_markdown_instruction: "## Time to head back to\nland. Help me put down stones so I don't fall in!\\r\n\\r\n![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)"
      courseA_artist_loops11_markdown_instruction: "## Help me build steps to watch\nthe ship sail away.\\r\n\\r\n![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)"
      courseA_artist_loops11_2018_markdown_instruction: "## Help me build steps to\nwatch the ship sail away.\\r\n\\r\n![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)"
      courseA_artist_loops12_markdown_instruction: "The artist saw something funny\nin the distance.  Draw what you think he saw.\\r\n\\r\n___\\r\n### Ideas\\r\n\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseA_artist_loops12_2018_markdown_instruction: "The artist saw something\nfunny in the distance.  Draw what you think he saw.\\r\n\\r\n___\\r\n### Ideas\\r\n\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseA_artist_loops2_markdown_instruction: "Help the artist draw this line\ntwo times forward.\\r\n\\r\n![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)"
      courseA_artist_loops2_2018_markdown_instruction: "Help the artist draw this\nline two times forward.\\r\n\\r\n![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)"
      courseA_artist_loops3_markdown_instruction: "Our artist is trying to draw a\nline five times, but can't get it right. Can you help?\\r\n\\r\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)"
      courseA_artist_loops3_2018_markdown_instruction: "Our artist is trying to draw\na line five times, but can't get it right. Can you help?\\r\n\\r\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)"
      courseA_artist_loops4_markdown_instruction: "Now, use a <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\" config=\"2-6\">5</title></block></xml> loop to draw this line\nfive times!\\r\n\\r\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)"
      courseA_artist_loops4_2018_markdown_instruction: "Now, use a <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\" config=\"2-6\">5</title></block></xml> loop to draw this line\nfive times!\\r\n\\r\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)"
      courseA_artist_loops5_markdown_instruction: "## Draw a line seven steps long.\nThis will become our horizon.\\r\n\\r\n![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)"
      courseA_artist_loops5_2018_markdown_instruction: "## Draw a line seven steps\nlong. This will become our horizon.\\r\n\\r\n![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)"
      courseA_artist_loops6_markdown_instruction: "## Let's put a nice hill in the\nback.\\r\n\\r\n![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)"
      courseA_artist_loops6_2018_markdown_instruction: "## Let's put a nice hill\nin the back.\\r\n\\r\n![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)"
      courseA_artist_loops7_markdown_instruction: "## Use the <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\" config=\"3-10\">???</title></block></xml> loop to add waves\nto the water.\\r\n\\r\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops7_2018_markdown_instruction: "## Use the <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\" config=\"3-10\">???</title></block></xml> loop to add waves\nto the water.\\r\n\\r\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops7_forVideo_markdown_instruction: "## Use the <xml><block\ntype=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>\nloop to add waves to the water.\\r\n\\r\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops8_markdown_instruction: "## We need a ladder up to the\nboat.\\r\n\\r\n![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)"
      courseA_artist_loops8_2018_markdown_instruction: "## We need a ladder up to\nthe boat.\\r\n\\r\n![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)"
      courseA_artist_loops9_markdown_instruction: "##**Challenge:** The stairs down\nto the dock are broken.  Help me fix them.\\r\n\\r\n![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)"
      courseA_artist_loops9_2018_markdown_instruction: "##**Challenge:** The stairs\ndown to the dock are broken.  Help me fix them.\\r\n\\r\n![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)"
      courseA_artist_loops_challenge1_markdown_instruction: "You can use a loop to\ndraw many lines in a row.\\r\n\\r\nCan you draw a house? Make it look just the\nway you like it!  Try looking for patterns that repeat!\\r\n\\r\nHere are some\nideas:\\r\n\\r\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge1_2018_markdown_instruction: "You can use a loop\nto draw many lines in a row.\\r\n\\r\nCan you draw a house? Make it look just\nthe way you like it!  Try looking for patterns that repeat!\\r\n\\r\nHere are\nsome ideas:\\r\n\\r\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge2_markdown_instruction: "**Tweet!**\\r\n\\r\n*\"Can\nyou help me make two bird houses?\"*"
      courseA_artist_loops_challenge2a_markdown_instruction: "*\"Help me get the\ncamp site ready!\"*\\r\n\\r\nUse the blocks in the toolbox to draw these three\ntents."
      courseA_artist_loops_challenge2a_2018_markdown_instruction: "*\"Help me get\nthe camp site ready!\"*\\r\n\\r\nUse the blocks in the toolbox to draw these\nthree tents."
      courseA_bee_seq1_markdown_instruction: "Help the bee get one nectar!"
      courseA_bee_seq10_markdown_instruction: "Try it by yourself! Get all the nectar."
      courseA_bee_seq11_markdown_instruction: "You've been a busy bee! Get all the\nnectar."
      courseA_bee_seq12_markdown_instruction: "Help the bee get one nectar!"
      courseA_bee_seq13_markdown_instruction: "*Buzz buzz!*\\r\n\\r\nUse <xml><block\ntype=\"maze_moveWest\"/></xml> **three** times to get the bee to the flower!\nDon't forget to use <xml><block type=\"maze_nectar\"/></xml> to get nectar!"
      courseA_bee_seq14_markdown_instruction: "*Buzz buzz!*\\r\n\\r\nUse <xml><block\ntype=\"maze_moveNorth\"/></xml> **three** times to get the bee to the flower!\nDon't forget to get nectar at the end."
      courseA_bee_seq2_markdown_instruction: "Add *one* block to help the bee get\nnectar from the flower."
      courseA_bee_seq3_markdown_instruction: "Can you figure out what is wrong with\nthis code? Help the bee get to the flower!"
      courseA_bee_seq4_markdown_instruction: "Try it yourself!"
      courseA_bee_seq5_markdown_instruction: "You have to move in two directions\nto get to the flower! Help the bee pick the right direction."
      courseA_bee_seq6_markdown_instruction: "Now the bee needs to get nectar from\ntwo flowers!"
      courseA_bee_seq7_markdown_instruction: "Add two blocks to finish this puzzle!"
      courseA_bee_seq8_markdown_instruction: "This maze looks familiar... can you\nfigure out what looks different?"
      courseA_bee_seq9_markdown_instruction: "This bee needs nectar! Do you see a\npattern?"
      courseA_collector_loops1_markdown_instruction: "**Free Play:** This is Laurel\nthe Adventurer! Move her around and get as much treasure as you can.\\r\n\\r\nDrag\nblocks into the workspace and try to figure out how to get treasure.  Get\nat least one item to pass this level."
      courseA_collector_loops12_markdown_instruction: "*\"Eureka!  Get as much treasure\nas you can!\"*  \\r\n(You do not have to get it all.)"
      courseA_collector_loops12_2018_markdown_instruction: "*\"Eureka!  Get as much\ntreasure as you can!\"*  \\r\n(You do not have to get it all.)"
      courseA_collector_loops1_2018_markdown_instruction: "**Free Play:** This is\nLaurel the Adventurer! Move her around and get as much treasure as you can.\\r\n\\r\nDrag\nblocks into the workspace and try to figure out how to get treasure.  Get\nat least one item to pass this level."
      courseA_collector_loops2_markdown_instruction: "Get all three piles! Move Laurel\nto each piece of treasure, then use this block:\\r\n  <xml><block type=\"collector_collect\"/></xml>"
      courseA_collector_loops2_2018_markdown_instruction: "Get all three piles! Move\nLaurel to each piece of treasure, then use this block:\\r\n  <xml><block type=\"collector_collect\"/></xml>"
      courseA_collector_loops3_markdown_instruction: "How can Laurel get all five\npiles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml>\nblock?"
      courseA_collector_loops3_2018_markdown_instruction: "How can Laurel get all\nfive piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml>\nblock?"
      courseA_collector_loops_challenge1_markdown_instruction: "*\"Can you help me\nspot some bugs? I know which way I want to go, but I'm not sure how many\nsteps to take.\"*"
      courseA_collector_loops_challenge1_2018_markdown_instruction: "*\"Can you help\nme spot some bugs? I know which way I want to go, but I'm not sure how many\nsteps to take.\"*"
      courseA_collector_preLoops1_markdown_instruction: "This is Laurel the Adventurer!\n\\r\n\\r\nPress \"Run\" to see her walk up to the treasure and grab it."
      courseA_collector_preLoops2_markdown_instruction: "Great!  Now you get to add\ncode yourself!  \\r\n\\r\nSnap a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)\nblock to the bottom of the program and click \"Run\"!"
      courseA_collector_preLoops3_markdown_instruction: "To grab the treasure, snap\ntwo ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)\nblocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)\nblock to the bottom of the program and click \"Run\"!"
      courseA_collector_preLoops7_markdown_instruction: "Get all three piles! Move\nLaurel to each piece of treasure, then use this block:\\r\n  <xml><block type=\"collector_collect\"/></xml>"
      courseA_forVideoTest_artist_markdown_instruction: "Repeat loops work for Artist,\ntoo!"
      courseA_harvester_forVideo_markdown_instruction: "Can you pick all the corn\nusing only **one** move block?"
      courseA_harvester_loops1_markdown_instruction: "Help the harvester pick all\nthe corn!"
      courseA_harvester_loops10_markdown_instruction: "Help the harvester pick all\nfive ears of corn!"
      courseA_harvester_loops11_markdown_instruction: "Try one more on your own!\n"
      courseA_harvester_loops2_markdown_instruction: "The harvester needs to pick\nall the corn! Do you see a pattern?"
      courseA_harvester_loops3_markdown_instruction: "Can you pick all the corn using\nonly **one** move block?"
      courseA_harvester_loops4_markdown_instruction: "*\"I need help to find what's\nwrong!\"*\\r\n\\r\nCan you help the harvester find the bug in her code?"
      courseA_harvester_loops5_markdown_instruction: "Try it yourself! Can you pick\nthe corn at the end too?"
      courseA_harvester_loops5a_markdown_instruction: "Look at all this corn? Can\nyou pick it all by yourself?"
      courseA_harvester_loops5b_markdown_instruction: "Can you change your code to\nmake the harvester pick all the corn?"
      courseA_harvester_loops6_markdown_instruction: "You will need **one** <xml><block\ntype=\"maze_moveWest\"></block></xml> block and **one** <xml><block type=\"maze_moveNorth\"></block></xml>\nblock to finish this puzzle!"
      courseA_harvester_loops7_markdown_instruction: "Try it on your own! "
      courseA_harvester_loops8_markdown_instruction: "This is the same puzzle, but\nnow you have to repeat **three** times instead of two! Use this block:\\r\n\\r\n<xml><block\ntype=\"controls_repeat_simplified_dropdown\">\\r\n    <title name=\"TIMES\"\nconfig=\"2-10\">3</title>\\r\n  </block></xml>"
      courseA_harvester_loops9_markdown_instruction: "Can you figure out how to pick\n*all* this corn?"
      courseA_harvester_seq1_markdown_instruction: "Help the harvester pick the piece\nof corn!"
      courseA_harvester_seq10_markdown_instruction: "The harvester needs to pick\nall the corn! Do you see a pattern?"
      courseA_harvester_seq11_markdown_instruction: "Try it by yourself! Pick all\nthe corn."
      courseA_harvester_seq12_markdown_instruction: "*Thank you for helping me!*\n\\r\n\\r\nPick all the corn."
      courseA_harvester_seq13_markdown_instruction: "Help the harvester pick **one**\ncorn!"
      courseA_harvester_seq2_markdown_instruction: "Use <xml><block type=\"maze_moveWest\"/></xml>\n**three** times to get the harvester to the corn! "
      courseA_harvester_seq3_markdown_instruction: "Use <xml><block type=\"maze_moveNorth\"/></xml>\n**three** times to get the harvester to the corn! Don't forget to pick the\ncorn at the end."
      courseA_harvester_seq4_markdown_instruction: "Add *one* block to help the harvester\npick the corn."
      courseA_harvester_seq5_markdown_instruction: "Can you figure out what is wrong\nwith this code? Help the harvester pick the corn!"
      courseA_harvester_seq6_markdown_instruction: "Try it yourself!"
      courseA_harvester_seq7_markdown_instruction: "You have to move in two directions\nto get to the corn! Help the harvester pick the right direction."
      courseA_harvester_seq8_markdown_instruction: "Now the harvester needs to pick\ncorn two times!"
      courseA_harvester_seq9_markdown_instruction: "Add two blocks to finish this\npuzzle!"
      courseA_maze_ramp2_2018_markdown_instruction: "Attach both <xml><block type=\"maze_moveEast\"/></xml>\nblocks to <xml><block type=\"when_run\"/></xml> to finish your code, then\nclick ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)."
      courseA_maze_ramp2a_2018_markdown_instruction: "Attach both <xml><block type=\"maze_moveEast\"/></xml>\nblocks to <xml><block type=\"when_run\"/></xml> to finish your code, then\nclick ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)."
      courseA_maze_ramp3_2018_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by removing it from the other blocks and dragging it back to the toolbox."
      courseA_maze_ramp3a_2018_markdown_instruction: "Grab a <xml><block type=\"maze_moveNorth\"/></xml>\nfrom the toolbox and add it to the bottom of the other blocks to finish this\ncode, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)."
      courseA_maze_ramp4_2018_markdown_instruction: "*\"Trace the path and lead me\nto the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseA_maze_ramp4a_2018_markdown_instruction: "Can you figure out which block\nyou need to add to the bottom of the other blocks to finish this code?"
      courseA_maze_ramp5_2018_markdown_instruction: "*\"Follow this path to get me\nto the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseA_maze_ramp5a_2018_markdown_instruction: "Try this one all by yourself!"
      courseA_maze_seq1_markdown_instruction: "*\"Play with these blocks and try\nto get me to the bad pig!\"*"
      courseA_maze_seq10_markdown_instruction: "**Challenge:** Go around the TNT\nto get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)"
      courseA_maze_seq10_2018_markdown_instruction: "**Challenge:** Avoid the TNT\nto get the bird to the pig!"
      courseA_maze_seq11_markdown_instruction: "Time for a shorter puzzle!  Move\none way, then another to get the bird to the pig.\\r\n\\r\n![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)"
      courseA_maze_seq11_2018_markdown_instruction: "Time for a shorter puzzle!  Move\none way, then another to get the bird to the pig.\\r\n"
      courseA_maze_seq12_markdown_instruction: "Get that pig!\\r\n\\r\n![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)"
      courseA_maze_seq12_2018_markdown_instruction: "Get that pig!"
      courseA_maze_seq1_2018_markdown_instruction: "*\"Play with these blocks and\ntry to get me to the bad pig!\"*"
      courseA_maze_seq2_markdown_instruction: "*\"A bug! Fix the code to get me to\nthe pig.\"*\\r\n\\r\n\\r\n![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)"
      courseA_maze_seq2_2018_markdown_instruction: "*\"A bug! Fix the code to get\nme to the pig.\"*\\r\n\\r\n\\r\n![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)"
      courseA_maze_seq3_markdown_instruction: "*\"Fix the code to get me to the pig!\"*\\r\n\\r\n![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)"
      courseA_maze_seq3_2018_markdown_instruction: "*\"Fix the code to get me to\nthe pig!\"*\\r\n\\r\n![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)"
      courseA_maze_seq4_markdown_instruction: "*\"Something is not quite right.\"*\n\\r\n\\r\nREMOVE a block to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)"
      courseA_maze_seq4_2018_markdown_instruction: "*\"Something is not quite right.\"*\n\\r\n\\r\nREMOVE a block to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)"
      courseA_maze_seq5_markdown_instruction: "Try this one yourself from the beginning.\\r\n\\r\n![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)"
      courseA_maze_seq5_2018_markdown_instruction: "Give this one a try."
      courseA_maze_seq5a_2018_markdown_instruction: "*\"Here piggy, piggy!\"*\\r\n\\r\nWhat\ncan you add to the end of this code to get the bird to the pig?"
      courseA_maze_seq6_markdown_instruction: "Move one way, then another to get\nthe bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)"
      courseA_maze_seq6_2018_markdown_instruction: "Move one way, then another to\nget the bird to the pig!"
      courseA_maze_seq7_markdown_instruction: "Figure out what is missing and then\nadd blocks to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)"
      courseA_maze_seq7_2018_markdown_instruction: "Figure out what is missing and\nthen add blocks to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)"
      courseA_maze_seq8_markdown_instruction: "Solve this level and get the bird\nto the pig!\\r\n\\r\n![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)"
      courseA_maze_seq8_2018_markdown_instruction: "Solve this level and get the\nbird to the pig!"
      courseA_maze_seq9_markdown_instruction: "**Challenge:** Debug this level by\nadding blocks to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)"
      courseA_maze_seq9_2018_markdown_instruction: "**Challenge:** Debug this level\nby adding blocks to get the bird to the pig!\\r\n\\r\n![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)"
      courseA_maze_seq_challenge1_markdown_instruction: "Debug this level. Remove\nthe extra blocks, and add the missing blocks. Get the bird to the pig!"
      courseA_maze_seq_challenge1_2018_markdown_instruction: "Debug this level. Remove\nthe extra blocks, and add the missing blocks. Get the bird to the pig!"
      courseA_playLab_events3_markdown_instruction: "Help Jorge the Dog get moving\nby connecting the <xml><block type=\"studio_move\">\\r\n    <title name=\"SPRITE\">1</title>\\r\n    <title\nname=\"DIR\">8</title>\\r\n  </block></xml> block to the <xml><block type=\"studio_whenArrow\">\\r\n    <title\nname=\"VALUE\">left</title>\\r\n  </block></xml> event block that is already\nin the workspace.\\r\n\\r\nGet Jorge to the flag to finish this level!"
      courseA_playLab_events3_2018_markdown_instruction: "Help Jorge the Dog get\nmoving by connecting the <xml><block type=\"studio_move\">\\r\n    <title name=\"SPRITE\">1</title>\\r\n    <title\nname=\"DIR\">8</title>\\r\n  </block></xml> block to the <xml><block type=\"studio_whenArrow\">\\r\n    <title\nname=\"VALUE\">left</title>\\r\n  </block></xml> event block that is already\nin the workspace.\\r\n\\r\nGet Jorge to the flag to finish this level!"
      courseA_playLab_events4_markdown_instruction: "Now, get Jorge to move right\nwhen the right arrow button is clicked."
      courseA_playLab_events4_2018_markdown_instruction: "Now, get Jorge to move\nright when the right arrow button is clicked."
      courseA_playLab_events5_markdown_instruction: "Add events to have Jorge move\nup and down when the up arrow and down arrow buttons are pressed."
      courseA_playLab_events5_2018_markdown_instruction: "Add events to have Jorge\nmove up and down when the up arrow and down arrow buttons are pressed."
      courseA_playlab_events_challenge1_markdown_instruction: "Clicking Olive will\nmake Robin appear! Can you write code to show the rest of the characters too?\\r\n\\r\nIn\nthis puzzle, make sure to click for hints! The hints will help you do this\nproject step-by-step!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseA_playlab_events_challenge1_2018_markdown_instruction: "Clicking Olive\nwill make Robin appear! Can you write code to show the rest of the characters\ntoo?\\r\n\\r\nIn this puzzle, make sure to click for hints! The hints will help\nyou do this project step-by-step!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseA_playlab_events_challenge1a_markdown_instruction: "Where are my friends\nhiding? In this game, clicking on me will show my friend Olive the cat! Clicking\nOlive will make Robin appear! Can you write code to show the rest of my friends\ntoo?\\r\n\\r\n\\r\nIn this puzzle, make sure to click for hints! The hints will\nhelp you do this project step-by-step!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseA_playlab_events_challenge2_markdown_instruction: "Give everyone something\nto do when you click on them. What will the animals say? What else will happen?\\r\n\\r\nIn\nthis puzzle, make sure to click for hints. The hints will give you fun things\nto try!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseA_playlab_events_challenge2_2018_markdown_instruction: "Give everyone\nsomething to do when you click on them. What will the animals say? What else\nwill happen?\\r\n\\r\nIn this puzzle, make sure to click for hints. The hints\nwill give you fun things to try!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseA_playlab_events_challengeClone_markdown_instruction: "Where are my friends\nhiding? In this game, clicking on me will show my friend Olive the cat! Clicking\nOlive will make Robin appear! Can you write code to show the rest of my friends\ntoo?\\r\n\\r\n\\r\nIn this puzzle, make sure to click for hints! The hints will\nhelp you do this project step-by-step!\\r\n\\r\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png)"
      courseB_Scrat_ramp1_2018_markdown_instruction: "To get Scrat to the acorn,\nsnap the <xml><block type=\"maze_moveEast\"/></xml> block to the bottom of\nthe <xml><block type=\"when_run\"/></xml> block, then press ![](https://images.code.org/473d3e1e4a05104502a99048338a45df-image-1522887336604.11.32.png)!"
      courseB_Scrat_ramp2_2018_markdown_instruction: "Snap both <xml><block type=\"maze_moveEast\"/></xml>\nblocks to the bottom of the <xml><block type=\"when_run\"/></xml> block to\nfinish your code, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)."
      courseB_Scrat_ramp3a_2018_markdown_instruction: "Grab a <xml><block type=\"maze_moveNorth\"/></xml>\nfrom the toolbox and add it to the bottom of the other blocks to finish this\ncode, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)."
      courseB_Scrat_ramp4a_2018_markdown_instruction: "Can you figure out which block\nyou need to add to the bottom of the other blocks to finish this code?"
      courseB_Scrat_ramp5a_2018_markdown_instruction: "Try this one all by yourself!"
      courseB_artist_loops10_markdown_instruction: "Use what you have learned to\ndraw a picture of what you think the artist saw when he got home.\\r\n\\r\n___\\r\n###\nIdeas\\r\n\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops10_2018_markdown_instruction: "Use what you have learned\nto draw a picture of what you think the artist saw when he got home.\\r\n\\r\n___\\r\n###\nIdeas\\r\n\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops6_markdown_instruction: "Behind the bushes there is a beautiful\nvine full of flowers.  Can you climb the vine and see where it goes?"
      courseB_artist_loops6_2018_markdown_instruction: "Behind the bushes there is\na beautiful vine full of flowers.  Can you climb the vine and see where it\ngoes?"
      courseB_artist_loops7_markdown_instruction: "**Challenge:**  It's a hidden\ngarden! Let's walk around."
      courseB_artist_loops7_2018_markdown_instruction: "**Challenge:**  It's a hidden\ngarden! Let's walk around."
      courseB_artist_loops_challenge1_markdown_instruction: "*\"It's time to toss\nthe dice! Can you help me draw these?\"*"
      courseB_artist_loops_challenge1_2018_markdown_instruction: "*\"It's time to\ntoss the dice! Can you help me draw these?\"*"
      courseB_artist_loops_challenge2_markdown_instruction: "Draw as many X's as\nyou can. Can you get 3 in a row?"
      courseB_artist_loops_challenge2_2018_markdown_instruction: "Draw as many X's\nas you can. Can you get 3 in a row?"
      courseB_collector_loops1_markdown_instruction: "**Free Play:** This is Laurel\nthe Adventurer! Move her around and get as much treasure as you can.\\r\n\\r\nDrag\nblocks into the workspace and try to figure out how to get treasure.  Get\nat least one item to pass this level."
      courseB_collector_loops1_2018_markdown_instruction: "**Free Play:** This is\nLaurel the Adventurer! Move her around and get as much treasure as you can.\\r\n\\r\nDrag\nblocks into the workspace and try to figure out how to get treasure.  Get\nat least one item to pass this level."
      courseB_collector_loops2_markdown_instruction: "Move Laurel to the treasure,\nthen use the<xml><block type=\"collector_collect\"/></xml>block to pick it\nup.\\r\n\\r\n\\r\nGet all four piles to pass this level."
      courseB_collector_loops2_2018_markdown_instruction: "Move Laurel to the treasure,\nthen use the<xml><block type=\"collector_collect\"/></xml>block to pick it\nup.\\r\n\\r\n\\r\nGet all four piles to pass this level."
      courseB_collector_loops3_markdown_instruction: "How can Laurel get all five\npiles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml>\nblock?"
      courseB_collector_loops3_2018_markdown_instruction: "How can Laurel get all\nfive piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml>\nblock?"
      courseB_collector_loops3_predict1_markdown_instruction: "How can Laurel collect\nall five piles of gold using only one `E -->` block?"
      courseB_collector_loops_challenge2a_markdown_instruction: "*\"Let's get the\ntreasure!\"*\\r\n\\r\nHelp Laurel get at least **5** pieces of treasure to finish\nthis puzzle."
      courseB_collector_loops_challenge2a_2018_markdown_instruction: "*\"Let's get\nthe treasure!\"*\\r\n\\r\nHelp Laurel get at least **5** pieces of treasure\nto finish this puzzle."
      courseB_collector_prog3_markdown_instruction: "How can Laurel collect all five\npiles of gold using only one `E -->` block?"
      courseB_iceage_loops1_markdown_instruction: "Help Scrat across the slippery\nice to get to the acorn!"
      courseB_iceage_loops10_markdown_instruction: "Help Scrat get all the way over\nto the acorn!"
      courseB_iceage_loops11_markdown_instruction: "Help Scrat get to the acorn!"
      courseB_iceage_loops12_markdown_instruction: "Get to the acorn any way you\ncan!"
      courseB_iceage_loops2_markdown_instruction: "Use both <xml><block type=\"maze_moveWest\"/></xml>\nand <xml><block type=\"maze_moveSouth\"/></xml> blocks to get to the acorn!"
      courseB_iceage_loops3_markdown_instruction: "Can you get to the acorn with\njust one <xml><block type=\"maze_moveWest\"/></xml> block? Try using a loop!"
      courseB_iceage_loops4_markdown_instruction: "Add one more block to get Scrat\nall the way to the acorn!"
      courseB_iceage_loops5_markdown_instruction: "Can you add one more loop to get\nto the acorn?"
      courseB_iceage_loops6_markdown_instruction: "Can you add a loop to get to the\nacorn?"
      courseB_iceage_loops7_markdown_instruction: "Scrat really wants that acorn!\n"
      courseB_iceage_loops8_markdown_instruction: "Can you fix this code? "
      courseB_iceage_loops9_markdown_instruction: "The acorn is so far away! Can\nyou use loops to help Scrat get there?"
      courseB_maze_seq3_markdown_instruction: "*\"Fix the code to get me to the pig!\"*"
      courseB_maze_seq3_2018_markdown_instruction: "*\"Fix the code to get me to\nthe acorn!\"*"
      courseB_maze_seq9_markdown_instruction: "**Challenge:** Move around the TNT\nto get the bird to the pig."
      courseB_maze_seq9_2018_markdown_instruction: "**Challenge:** Move around the\nbroken ice to get Scrat to the acorn."
      courseB_maze_seq9_challenge1_markdown_instruction: "*Where's that pig hiding\nnow?*"
      courseB_maze_seqCold_markdown_instruction: "**Challenge:** Debug this level\nby adding blocks to get the bird to the pig!"
      courseB_maze_seq_challenge1_markdown_instruction: "You only have four of each\nmove block. Can you find a path before you run out of blocks?"
      courseB_maze_seq_challenge1_2018_markdown_instruction: "You only have four\nof each move block. Can you find a path before you run out of blocks?"
      courseB_playLab_events1_markdown_instruction: "This game is called \"Play Lab\".  \\r\n\\r\nSee\nif you can figure out what each block does."
      courseB_playLab_events1_2018_markdown_instruction: "This game is called \"Play\nLab\".  \\r\n\\r\nSee if you can figure out what each block does."
      courseB_playlab_events3_markdown_instruction: "Use an event to make Daisy the\nDragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)\nmood when you click on her."
      courseB_playlab_events3_2018_markdown_instruction: "Use an event to make Daisy\nthe Dragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)\nmood when you click on her."
      courseB_playlab_events4_markdown_instruction: "Knight time!  \\r\n\\r\nAdd an\nevent so that the knight moves toward the dragon when the left arrow is clicked."
      courseB_playlab_events4_2018_markdown_instruction: "Knight time!  \\r\n\\r\nAdd\nan event so that the knight moves toward the dragon when the left arrow is\nclicked."
      courseB_playlab_events6_markdown_instruction: "Help your knight get all of\nthe flags!\\r\n\\r\nTo do this, you'll need to add events to help the knight\nmove up, down, left, and right."
      courseB_playlab_events6_2018_markdown_instruction: "Help your knight get all\nof the flags!\\r\n\\r\nTo do this, you'll need to add events to help the knight\nmove up, down, left, and right."
      courseB_playlab_events7_markdown_instruction: "Make this game fun by setting\nthe knight to vanish when he runs into the dragon on his way to get the flags!\n\\r\n\\r\nPlay a sound when they collide to make it feel more real.\\r\n\\r\nVisit\nall of the goals, then run into the dragon to pass the level."
      courseB_playlab_events7_2018_markdown_instruction: "Make this game fun by setting\nthe knight to vanish when he runs into the dragon on his way to get the flags!\n\\r\n\\r\nPlay a sound when they collide to make it feel more real.\\r\n\\r\nVisit\nall of the goals, then run into the dragon to pass the level."
      courseB_playlab_events_challenge1_markdown_instruction: "It's time for the\nGreat Animal Race! Make the animals move down when you press `▼`. \\r\n\\r\nWho\nwill run the fastest?"
      courseB_playlab_events_challenge1_2018_markdown_instruction: "It's time for\nthe Great Animal Race! Make the animals move down when you press `▼`. \\r\n\\r\nWho\nwill run the fastest?"
      courseB_playlab_events_challenge2_markdown_instruction: "Let's make the animals\ndisappear when you click on them.\\r\nTry playing with the dog now, then help\nthe other animals join in the fun. You can also add sounds and score points\nto create a game of Animal Tag!\\r\n\\r\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_playlab_events_challenge2_2018_markdown_instruction: "Let's make the\nanimals disappear when you click on them.\\r\nTry playing with the dog now,\nthen help the other animals join in the fun. You can also add sounds and score\npoints to create a game of Animal Tag!\\r\n\\r\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_starWars_prog1_markdown_instruction: "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_\"Go\nget the scrap metal, BB-8!\"_\\r\n\\r\nWatch out for walls and crates. Scrap\nmetal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseB_starWars_prog10_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_"
      courseB_starWars_prog10_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_"
      courseB_starWars_prog11_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going!\"_"
      courseB_starWars_prog11_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going!\"_"
      courseB_starWars_prog1_2018_markdown_instruction: "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_\"Go\nget the scrap metal, BB-8!\"_\\r\n\\r\nWatch out for walls and crates. Scrap\nmetal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseB_starWars_prog2_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Get all the metal.\"_"
      courseB_starWars_prog2_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Get all the metal.\"_"
      courseB_starWars_prog3_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going, BB-8!\"_"
      courseB_starWars_prog3_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going, BB-8!\"_"
      courseB_starWars_prog4_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Get it, BB-8!\"_"
      courseB_starWars_prog4_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Get it, BB-8!\"_"
      courseB_starWars_prog5_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_"
      courseB_starWars_prog5_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_"
      courseB_starWars_prog6_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_"
      courseB_starWars_prog6_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_"
      courseB_starWars_prog7_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go get it!\"_"
      courseB_starWars_prog7_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go get it!\"_"
      courseB_starWars_prog8_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\n**Challenge**: Gather all the scrap metal."
      courseB_starWars_prog8_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\n**Challenge**: Gather all the scrap metal."
      courseB_starWars_prog9_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_"
      courseB_starWars_prog9_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_"
      courseC_PlayLab_events7_markdown_instruction: "The `repeat forever` block allows\nyou to run code over and over forever.  Use this block to move Chomp the Dino\n(actor 2) up and down by 400 pixels forever.\\r\n\\r\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)"
      courseC_PlayLab_events7_2018_markdown_instruction: "The `repeat forever` block\nallows you to run code over and over forever.  Use this block to move Chomp\nthe Dino (actor 2) up and down by 400 pixels forever.\\r\n\\r\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)"
      courseC_PlayLab_events8_markdown_instruction: "Can you have Waddles (actor\n1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \\r\n\\r\nWhen\nyou're done, play the game to make that happen.\\r\n\\r\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2018_markdown_instruction: "Can you have Waddles (actor\n1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \\r\n\\r\nWhen\nyou're done, play the game to make that happen.\\r\n\\r\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events_challenge1_markdown_instruction: "Use a new block to\nmake Waddles automatically move back to the start when he runs into the Dinosaur\nand when he scores a point. This will make your game more challenging and\nfun!\\r\n\\r\nPlay the game and move Waddles with the arrows until you score\nenough points. Waddles must be moved to the `middle left` position of the\nscreen to complete this challenge."
      courseC_PlayLab_events_challenge1_2018_markdown_instruction: "Use a new block\nto make Waddles automatically move back to the start when he runs into the\nDinosaur and when he scores a point. This will make your game more challenging\nand fun!\\r\n\\r\nPlay the game and move Waddles with the arrows until you score\nenough points. Waddles must be moved to the `middle left` position of the\nscreen to complete this challenge."
      courseC_artist_loop1_markdown_instruction: "Fantastic!  \\r\n\\r\nLet's add\nsome style by changing the brush using the `set pattern` block before our\nloop starts."
      courseC_artist_loop1_2018_markdown_instruction: "Fantastic!  \\r\n\\r\nLet's\nadd some style by changing the brush using the `set pattern` block before\nour loop starts."
      courseC_artist_loops1a_markdown_instruction: "**Free Play:** Let's build something\nbigger, one step at a time!  You can make anything you want, but we're going\nto show you how to make something like this!\\r\n\\r\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\\r\n\\r\nUse\nthe `jump to 200 over 200 down` to get the artist to the center of the play\narea, then use the `draw a sticker` block to make a bird appear.  \\r\n\\r\n---\\r\n\\r\nPress\n\"Finish\" when you are happy with what you've made."
      courseC_artist_loops1a_2018_markdown_instruction: "**Free Play:** Let's build\nsomething bigger, one step at a time!  \\r\n\\r\nUse the `jump to 200 over 200\ndown` to get the artist to the center of the play area, then use the `draw\na sticker` block to make a bird appear.  \\r\n\\r\n---\\r\n\\r\nPress \"Finish\"\nwhen you are happy with what you've made."
      courseC_artist_loops2_markdown_instruction: "Now that the zombie knows his\nway, help him dig **25 pixel long** holes along the path to plant more flowers!\\r\n-\nEach hole should be 25 pixels long\\r\n- Each hole has 25 pixels of space before\nthe next hole"
      courseC_artist_loops2a_markdown_instruction: "Now, use a loop to spin your\nbird around 12 times with a 30 degree turn."
      courseC_artist_loops2a_2018_markdown_instruction: "Now, use a loop to spin\nyour bird around 12 times with a 30 degree turn."
      courseC_artist_loops3a_markdown_instruction: "So much fun!  \\r\n\\r\nNow, add\na bat sticker right after the bird to make an image like the one below.\\r\n___\\r\n\\r\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018_markdown_instruction: "So much fun!  \\r\n\\r\nNow,\nadd a bat sticker right after the bird to make an image like the one below.\\r\n___\\r\n\\r\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops4a_markdown_instruction: "Add a block to your code so that\nthe artist jumps forward by 75 pixels between stamping the bird and the bat.\nIn this puzzle, make sure you have `jump to 200 over 200 down` inside of your\nloop, so you stay in the center!\\r\n___\\r\n\\r\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)"
      courseC_artist_loops4a_2018_markdown_instruction: "Edit your code so that you\njump forward by 75 pixels between stamping the bird and the bat. In this puzzle,\nmake sure you have `jump to 200 over 200 down` inside of your loop, so you\nstay in the center!\\r\n___\\r\n\\r\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)"
      courseC_artist_loops5_markdown_instruction: "Great!  Now it's time to make\na fence inside to keep the animals out.   \\r\nMake any kind of fence that\nyou want!\\r\n\\r\n"
      courseC_artist_loops5a_markdown_instruction: "What happens when you replace\none or both of the stickers with a different creature?\\r\n___\\r\n![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5a_2018_markdown_instruction: "What happens when you replace\none or both of the stickers with a different creature?\\r\n___\\r\n![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5b_markdown_instruction: "What happens when you `move forward`\nthen `move backward` by 100, 200, or 400 pixels somewhere inside the loop?  \\r\n-\nTry using the `set pattern` block before you start your loop to make a work\nof art!\\r\n___\\r\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018_markdown_instruction: "What happens when you `move\nforward` then `move backward` by 100, 200, or 400 pixels somewhere inside\nthe loop?  \\r\n- Try using the `set pattern` block before you start your loop\nto make a work of art!\\r\n___\\r\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops6_markdown_instruction: "What should the zombie put inside\nof the garden?  \\r\n\\r\nDraw anything you'd like inside of the fence.  Would\nyou like some flowers or a few bugs? \\r\n*(See hints for more suggestions.)*\\r\n\\r\n\\r\n"
      courseC_artist_loops6a_markdown_instruction: "Add a third sticker anywhere\nin the loop that you want! What does it look like now?\\r\n- Change the pattern\non your brush for more variety!\\r\n\\r\n___\\r\n\\r\n![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops6a_2018_markdown_instruction: "Add a third sticker anywhere\nin the loop that you want! What does it look like now?\\r\n- Change the pattern\non your brush for more variety!\\r\n\\r\n___\\r\n\\r\n![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops7a_markdown_instruction: "Try changing the `repeat` loop\nto run a different number of times.  How far do you have to turn to go around\nin a full circle?\\r\n- Try changing how many times you spin\\r\n  - Try a 60\ndegree turn for 6 times around\\r\n  - Try a 20 degree turn for 18 times around\\r\n___\\r\nThis\nimage uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20\ndegree turn.\\r\n\\r\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2018_markdown_instruction: "Try changing the `repeat`\nloop to run a different number of times.  How far do you have to turn to go\naround in a full circle?\\r\n- Try changing how many times you spin\\r\n  -\nTry a 60 degree turn for 6 times around\\r\n  - Try a 20 degree turn for 18\ntimes around\\r\n___\\r\nThis image uses a pirate, a ninja, and a giraffe. They\nloop 18 times with a 20 degree turn.\\r\n\\r\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops8a_markdown_instruction: "Now make something on your own.  What\nhappens when you make two separate circles of different stickers?\\r\n___\\r\nNeed\nan idea? Try making a design like this one.\\r\n\\r\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018_markdown_instruction: "Now make something on your\nown.  What happens when you make two separate circles of different stickers?\\r\n___\\r\nNeed\nan idea? Try making a design like this one.\\r\n\\r\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a_markdown_instruction: "Now, put this code into  a\n`repeat` block and loop it **6** times.\\r\n- Notice that we have added a 60\ndegree turn at the end of the looped code to get a full rotation."
      courseC_artist_loopsPre1a_2018_markdown_instruction: "Now, put this code into  a\n`repeat` block and loop it **6** times.\\r\n- Notice that we have added a 60\ndegree turn at the end of the looped code to get a full rotation."
      courseC_artist_loopsPrePre1a_markdown_instruction: "Use the <xml><block type=\"jump_to_xy\"\nid=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>\nblock to get the artist to the center of the play area.  \\r\nThen draw a line\n50 pixels long with the <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">moveForward</title><title name=\"VALUE\">50</title></block></xml>\nblock."
      courseC_artist_loopsPrePre1a_2018_markdown_instruction: "Use the <xml><block\ntype=\"jump_to_xy\" id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>\nblock to get the artist to the center of the play area.  \\r\nThen draw a line\n50 pixels long with the <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">moveForward</title><title name=\"VALUE\">50</title></block></xml>\nblock."
      courseC_artist_loopsTemplateA_markdown_instruction: "Use the `jump to 200 over\n200 down` to get the artist to the center of the play area, then use the `draw\na sticker` block to make a bird appear. "
      courseC_artist_loopsTemplateA_2018_markdown_instruction: "Use the `jump to\n200 over 200 down` to get the artist to the center of the play area, then\nuse the `draw a sticker` block to make a bird appear. "
      courseC_artist_prog1_markdown_instruction: "*\"Hi, I'm an artist. You can\nwrite code to make me draw almost anything.\"*\\r\n\\r\nPlay with the blocks\nin the toolbox to see what they do!"
      courseC_artist_prog1_2018_markdown_instruction: "*\"Hi, I'm an artist. You\ncan write code to make me draw almost anything.\"*\\r\n\\r\nPlay with the blocks\nin the toolbox to see what they do!"
      courseC_artist_prog2_markdown_instruction: "*\"Let's make a cage for my pet\nmonster!\"*\\r\n\\r\nDrag blocks onto the screen to have the artist draw over\nthe grey lines in the picture.  \\r\n(Each line is 100 pixels long)"
      courseC_artist_prog2_2018_markdown_instruction: "*\"Let's make a cage for\nmy pet monster!\"*\\r\n\\r\nDrag blocks onto the screen to have the artist draw\nover the grey lines in the picture.  \\r\n(Each line is 100 pixels long)"
      courseC_artist_prog3_markdown_instruction: "*\"This spaceship needs a window!\"*\\r\n\\r\nEach\nside of the inner square is 100 pixels and all of the angles are 90 degrees."
      courseC_artist_prog3_2018_markdown_instruction: "*\"This spaceship needs a\nwindow!\"*\\r\n\\r\nEach side of the inner square is 100 pixels and all of the\nangles are 90 degrees."
      courseC_artist_prog4_markdown_instruction: "*\"Oh no!  Starla's pet alien\njust flew away! Let's help the spacewoman!\"*\\r\n\\r\nFinish Starla's rocket\nso she can chase her pet.  \\r\n(Each side of the triangle is 100 pixels long\nand has 120 degree outer angles.)"
      courseC_artist_prog4_2018_markdown_instruction: "*\"Oh no!  Starla's pet alien\njust flew away! Let's help the spacewoman!\"*\\r\n\\r\nFinish Starla's rocket\nso she can chase her pet.  \\r\n(Each side of the triangle is 100 pixels long\nand has 120 degree outer angles.)"
      courseC_artist_prog5_markdown_instruction: "*\"Maybe we should make a tag for\neach of our pets in case they get lost!\"*\\r\n\\r\nFinish this tag by drawing\na rectangle around the outside.  \\r\n(The long sides are 200 pixels each and\nthe short sides are each 100 pixels)"
      courseC_artist_prog5_2018_markdown_instruction: "*\"Maybe we should make a\ntag for each of our pets in case they get lost!\"*\\r\n\\r\nFinish this tag\nby drawing a rectangle around the outside.  \\r\n(The long sides are 200 pixels\neach and the short sides are each 100 pixels)"
      courseC_artist_prog6_markdown_instruction: "*\"Now a tag for Belle!\"*\\r\n\\r\nDraw\nthis diamond with 200 pixel sides."
      courseC_artist_prog6_2018_markdown_instruction: "*\"Now a tag for Belle!\"*\\r\n\\r\nDraw\nthis diamond with 200 pixel sides."
      courseC_artist_prog7_markdown_instruction: "**Challenge:** This tag is a special\none!  \\r\n\\r\nCan you figure out how to draw the outline?  \\r\n(The long side\nis 150 pixels and each of the short sides are 75 pixels.)"
      courseC_artist_prog7_2018_markdown_instruction: "**Challenge:** This tag is\na special one!  \\r\n\\r\nCan you figure out how to draw the outline?  \\r\n(The\nlong side is 150 pixels and each of the short sides are 75 pixels.)"
      courseC_artist_prog8_markdown_instruction: "One more tag.  This is a triangle\nfor Pi.  \\r\n(Each side is 150 pixels)"
      courseC_artist_prog8_2018_markdown_instruction: "One more tag.  This is a triangle\nfor Pi.  \\r\n(Each side is 150 pixels)"
      courseC_artist_prog_challenge1-doghouse_markdown_instruction: "Let's build\na dog house for Jorge!"
      courseC_artist_prog_challenge1_markdown_instruction: "Draw rooms for each of\nthe animals. There are many different ways to solve this puzzle, so have some\nfun! Each square has a side length of 100 pixels."
      courseC_artist_prog_challenge1_2018_markdown_instruction: "Draw rooms for each\nof the animals. There are many different ways to solve this puzzle, so have\nsome fun! Each square has a side length of 100 pixels."
      courseC_artist_prog_challenge2_markdown_instruction: "*Help me paint the yellow\nlines on this road!*"
      courseC_artist_prog_challenge2a_markdown_instruction: "*\"Help me paint the\nyellow lines on this road!\"*\\r\n\\r\nThe three line segments have lengths\nof 150, 100, and 200 pixels!"
      courseC_artist_prog_challenge2a_2018_markdown_instruction: "*\"Help me paint\nthe yellow lines on this road!\"*\\r\n\\r\nThe three line segments have lengths\nof 150, 100, and 200 pixels!"
      courseC_collector_loops_challenge2_markdown_instruction: "*\"Let's hunt for\ntreasure!\"*\\r\n\\r\nHelp the collector get at least **5** pieces of treasure."
      courseC_collector_loops_challenge2_2018_markdown_instruction: "*\"Let's hunt\nfor treasure!\"*\\r\n\\r\nHelp the collector get at least **5** pieces of treasure."
      courseC_collector_prog1_markdown_instruction: "**Free Play:** This is Laurel\nthe Adventurer! Move her around and get as much treasure as you can. Use the\n`collect` block to pick up the treasure!\\r\n\\r\nDrag blocks into the workspace\nand try to figure out how to get treasure.  Get at least one item to pass\nthis level."
      courseC_collector_prog1_2018_markdown_instruction: "**Free Play:** This is\nLaurel the Adventurer! Move her around and get as much treasure as you can.\nUse the `collect` block to pick up the treasure!\\r\n\\r\nDrag blocks into the\nworkspace and try to figure out how to get treasure.  Get at least one item\nto pass this level."
      courseC_collector_prog2_markdown_instruction: "Move Laurel to the treasure,\nthen use <xml><block type=\"collector_collect\"/></xml> to pick it up."
      courseC_collector_prog2_2018_markdown_instruction: "Move Laurel to the treasure,\nthen use <xml><block type=\"collector_collect\"/></xml> to pick it up."
      courseC_collector_prog3_markdown_instruction: "*\"Sequence matters!\"* \\r\n\\r\nThe\nblocks you need are already in the workspace, but not connected.  \\r\nOrder\nthese blocks to collect the treasure and solve the puzzle."
      courseC_collector_prog3_2018_markdown_instruction: "*\"Sequence matters!\"*\n\\r\n\\r\nThe blocks you need are already in the workspace, but not connected.  \\r\nOrder\nthese blocks to collect the treasure and solve the puzzle."
      courseC_collector_prog4_markdown_instruction: "*\"Sequence matters!\"*\\r\n\\r\nThe\nblocks you need are already in the workspace, but not connected.  \\r\n\\r\nPut\nthese blocks in order to collect all of the treasure and solve the puzzle."
      courseC_collector_prog4_2018_markdown_instruction: "*\"Sequence matters!\"*\\r\n\\r\nThe\nblocks you need are already in the workspace, but not connected.  \\r\n\\r\nPut\nthese blocks in order to collect all of the treasure and solve the puzzle."
      courseC_collector_prog5_markdown_instruction: "*\"Help me collect each bit\nof treasure!\"*\\r\n\\r\nThese blocks are in the wrong order. Can you fix them?"
      courseC_collector_prog5_2018_markdown_instruction: "*\"Help me collect each\nbit of treasure!\"*\\r\n\\r\nThese blocks are in the wrong order. Can you fix\nthem?"
      courseC_collector_prog6_markdown_instruction: "*\"Help me collect all of the\ntreasure!\"*\\r\n\\r\nThese blocks are in the wrong order. Reorder them to collect\nall of the treasure."
      courseC_collector_prog6_2018_markdown_instruction: "*\"Help me collect all\nof the treasure!\"*\\r\n\\r\nThese blocks are in the wrong order. Reorder them\nto collect all of the treasure."
      courseC_collector_prog7_markdown_instruction: "**Challenge:** *\"What is going\non here?\"*\\r\n\\r\nEven if we put these in the right order, there will still\nbe some missing.  \\r\nUse blocks from the toolbox to collect all of the treasure."
      courseC_collector_prog7_2018_markdown_instruction: "**Challenge:** *\"What\nis going on here?\"*\\r\n\\r\nEven if we put these in the right order, there\nwill still be some missing.  \\r\nUse blocks from the toolbox to collect all\nof the treasure."
      courseC_collector_prog8_markdown_instruction: "*\"Keep up the good work! Help\nme collect all of the treasure.\"*"
      courseC_collector_prog8_2018_markdown_instruction: "*\"Keep up the good work!\nHelp me collect all of the treasure.\"*"
      courseC_collector_prog9_markdown_instruction: "*\"Let's get all of the treasure!\"*"
      courseC_collector_prog9_2018_markdown_instruction: "*\"Let's get all of the\ntreasure!\"*"
      courseC_collector_progA_markdown_instruction: "Help Laurel collect all of the\ntreasure."
      courseC_collector_progB_markdown_instruction: "You're almost done!  \\r\n\\r\nCollect\nas many coins as you can to finish the stage!"
      courseC_collector_prog_challenge2_markdown_instruction: "There are 20 pieces\nof treasure in this cave. Collect at least **10** to finish the challenge!"
      courseC_collector_prog_challenge2_2018_markdown_instruction: "There are 20\npieces of treasure in this cave. Collect at least **10** to finish the challenge!"
      courseC_flappy_events1_markdown_instruction: "Attach the `flap a normal amount`\nblock to the `when click` event, then press \"Run\".   \\r\n\\r\n---\\r\n\\r\nClick\nor tap on the play space to move Flappy to the target."
      courseC_flappy_events10_markdown_instruction: "Create your own Flappy game!\n\\r\n\\r\nYou can change the visuals and the rules...even the gravity! \\r\nWhen\nyou're done, click \"Finish\" to share with friends on their phones."
      courseC_flappy_events10_2018_markdown_instruction: "Create your own Flappy\ngame! \\r\n\\r\nYou can change the visuals and the rules...even the gravity!\n\\r\nWhen you're done, click \"Finish\" to share with friends on their phones."
      courseC_flappy_events1_2018_markdown_instruction: "Attach the `flap a normal\namount` block to the `when click` event, then press \"Run\".   \\r\n\\r\n---\\r\n\\r\nClick\nor tap on the play space to move Flappy to the target."
      courseC_flappy_events2_markdown_instruction: "The `when run` event allows you\nto run code as soon as your game starts.  \\r\n\\r\nTry adding a block that\nsets the level speed when the \"Run\" button is pressed. \\r\n\\r\n---\\r\n\\r\nPlay\nthe game and flap to the target to continue."
      courseC_flappy_events2_2018_markdown_instruction: "The `when run` event allows\nyou to run code as soon as your game starts.  \\r\n\\r\nTry adding a block that\nsets the level speed when the \"Run\" button is pressed. \\r\n\\r\n---\\r\n\\r\nPlay\nthe game and flap to the target to continue."
      courseC_flappy_events3_markdown_instruction: "Now we've added the ground.\n\\r\n\\r\nAttach the `end game` block to the `when hit the ground` event. \\r\n\\r\n---\\r\n\\r\nPlay\nthe game and crash the bird into the ground to continue."
      courseC_flappy_events3_2018_markdown_instruction: "Now we've added the ground.\n\\r\n\\r\nAttach the `end game` block to the `when hit the ground` event. \\r\n\\r\n---\\r\n\\r\nPlay\nthe game and crash the bird into the ground to continue."
      courseC_flappy_events4_markdown_instruction: "Flappy will fly right through\nobstacles unless you write code to make him crash. \\r\n\\r\nAttach a block\nto the `when hit an obstacle` event so that the game ends when Flappy crashes\ninto the first set of pipes."
      courseC_flappy_events4_2018_markdown_instruction: "Flappy will fly right through\nobstacles unless you write code to make him crash. \\r\n\\r\nAttach a block\nto the `when hit an obstacle` event so that the game ends when Flappy crashes\ninto the first set of pipes."
      courseC_flappy_events5_markdown_instruction: "We've added a scoreboard to\ncount points when Flappy passes obstacles.  \\r\n\\r\nAdd a block to the `when\npass an obstacle` event that scores a point, then press \"Run\" to fly Flappy\nthrough the first set of pipes."
      courseC_flappy_events5_2018_markdown_instruction: "We've added a scoreboard\nto count points when Flappy passes obstacles.  \\r\n\\r\nAdd a block to the\n`when pass an obstacle` event that scores a point, then press \"Run\" to fly\nFlappy through the first set of pipes."
      courseC_flappy_events6_markdown_instruction: "Click the down arrow inside of\nthe `flap a normal amount` block to pick a different flapping power.  \\r\n\\r\nSee\nif you can still score a point after making Flappy flap either a smaller or\nlarger amount each time you click."
      courseC_flappy_events6_2018_markdown_instruction: "Click the down arrow inside\nof the `flap a normal amount` block to pick a different flapping power.  \\r\n\\r\nSee\nif you can still score a point after making Flappy flap either a smaller or\nlarger amount each time you click."
      courseC_flappy_events7_markdown_instruction: "Next, try changing the scene\nby attaching a block to the `when run` event."
      courseC_flappy_events7_2018_markdown_instruction: "Next, try changing the scene\nby attaching a block to the `when run` event."
      courseC_flappy_events8_markdown_instruction: "You can set the background under\nany event, not just when the game starts. \\r\n\\r\nTry setting a **random**\nscene when other events happen...for example, when passing an obstacle."
      courseC_flappy_events8_2018_markdown_instruction: "You can set the background\nunder any event, not just when the game starts. \\r\n\\r\nTry setting a **random**\nscene when other events happen...for example, when passing an obstacle."
      courseC_flappy_events9_markdown_instruction: "To mix things up, instead of\nending the game when Flappy hits an obstacle, try setting the score back to\n0."
      courseC_flappy_events9_2018_markdown_instruction: "To mix things up, instead\nof ending the game when Flappy hits an obstacle, try setting the score back\nto 0."
      courseC_harvester_loops1_markdown_instruction: "Loops can be used to repeat\nmore than moves.  \\r\n\\r\nUse loops to collect all four of the pumpkins."
      courseC_harvester_loops10_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops10_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops11_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops11_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops1_2018_markdown_instruction: "Loops can be used to repeat\nmore than moves.  \\r\n\\r\nUse loops to collect all four of the pumpkins."
      courseC_harvester_loops2_markdown_instruction: "Can you combine two different\nloops to move toward the pumpkins, then collect them all?"
      courseC_harvester_loops2_2018_markdown_instruction: "Can you combine two different\nloops to move toward the pumpkins, then collect them all?"
      courseC_harvester_loops3_markdown_instruction: "Collect all of the pumpkins."
      courseC_harvester_loops3_2018_markdown_instruction: "Collect all of the pumpkins."
      courseC_harvester_loops4_markdown_instruction: "Now there is corn growing,\ntoo!\\r\n\\r\nCollect all of the corn and all of the pumpkins."
      courseC_harvester_loops4_2018_markdown_instruction: "Now there is corn growing,\ntoo!\\r\n\\r\nCollect all of the corn and all of the pumpkins."
      courseC_harvester_loops5_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops5_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops6_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops6_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops7_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops7_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops8_markdown_instruction: "**Challenge:** Collect all\nof the corn and all of the pumpkins.\\r\n\\r\nYou can complete this challenge\nany way you want, but it will either take a lot of work or a lot of thinking!"
      courseC_harvester_loops8_2018_markdown_instruction: "**Challenge:** Collect\nall of the corn and all of the pumpkins.\\r\n\\r\nYou can complete this challenge\nany way you want, but it will either take a lot of work or a lot of thinking!"
      courseC_harvester_loops9_markdown_instruction: "Collect all of the corn and\nall of the pumpkins."
      courseC_harvester_loops9_2018_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_harvester_loops_challenge1_markdown_instruction: "Collect all of the\ncorn."
      courseC_harvester_loops_challenge2_markdown_instruction: "Collect all of the\nlettuce. Avoid the trees and fields!"
      courseC_harvester_loops_challenge2_2018_markdown_instruction: "Collect all\nof the lettuce. Avoid the trees and fields!"
      courseC_harvester_loops_forVid_markdown_instruction: "Collect all of the corn\nand all of the pumpkins."
      courseC_maze_debugging1_markdown_instruction: "This code isn't quite right!  \\r\n\\r\nFix\nthe code to help Scrat get to the acorn."
      courseC_maze_debugging1_2018_markdown_instruction: "This code isn't quite\nright!  \\r\n\\r\nFix the code to help Scrat get to the acorn."
      courseC_maze_debugging3_markdown_instruction: "Something is not quite right.\n\\r\n\\r\nRemove blocks to get Scrat to the acorn!"
      courseC_maze_debugging3_2018_markdown_instruction: "Something is not quite\nright. \\r\n\\r\nRemove blocks to get Scrat to the acorn!"
      courseC_maze_debugging_challenge2_markdown_instruction: "If Scrat turns too\noften, he might get dizzy! Help him reach the acorn with only four `turn`\ncommands."
      courseC_maze_debugging_challenge2_2018_markdown_instruction: "If Scrat turns\ntoo often, he might get dizzy! Help him reach the acorn with only four `turn`\ncommands."
      courseC_maze_loops2_markdown_instruction: "With the `repeat` block, you can\nloop code over and over.\\r\n\\r\nCan you get the bird to the pig by creating\na loop that uses only one `move forward` block inside of a `repeat`?"
      courseC_maze_loops2_predict1_markdown_instruction: "Suddenly, a magical block\nappears!  \\r\nWith the `repeat` block, you can loop code over and over.\\r\n\\r\nCan\nyou get the bird to the pig by creating a loop that uses only one `move forward`\nblock inside of a `repeat`?"
      courseC_maze_loops3_markdown_instruction: "*\"Get me to the pig!\"*\\r\n\\r\nSolve\nthis puzzle by creating a loop!"
      courseC_maze_loops4_markdown_instruction: "In this puzzle, two `repeat` loops\nwill help you get the bird to the pig with the fewest number of blocks!"
      courseC_maze_loops5_markdown_instruction: "*\"Get me to the pig as quickly\nas possible!\"*"
      courseC_maze_loops6_markdown_instruction: "*\"This pig is ruffling my feathers!\"*\\r\n\\r\nLoops\neven work with more than one block inside!  Can you loop this sequence?"
      courseC_maze_loops7_markdown_instruction: "*\"Get me to the pig!\"*\\r\n\\r\nUse\nwhat you learned in other puzzles!"
      courseC_maze_loops8_markdown_instruction: "**Challenge:** Combine ideas from\nthe last few puzzles to complete this level."
      courseC_maze_loops_challenge2_markdown_instruction: "Let's hunt for treasure\n- using loops! Help the collector by debugging this code. Get all of the treasure!"
      courseC_maze_programming1_markdown_instruction: "For this puzzle, drag all\nof the blocks together and click \"Run\" to watch it go!"
      courseC_maze_programming1_2018_markdown_instruction: "For this puzzle, drag\nall of the blocks together and click \"Run\" to watch it go!"
      courseC_maze_programming2_markdown_instruction: "Drag an extra <xml><block\ntype=\"maze_moveForward\"/></xml> block out of the toolbox to finish your\ncode."
      courseC_maze_programming2_2018_markdown_instruction: "Drag an extra <xml><block\ntype=\"maze_moveForward\"/></xml> block out of the toolbox to finish your\ncode."
      courseC_maze_programming3_markdown_instruction: "*\"This pig is ruffling my\nfeathers.\"*\\r\n\\r\nThere is one extra block that is going to cause the bird\nto crash.  \\r\nThrow it away by unhooking it from the grey blocks and dragging\nit back to the toolbox."
      courseC_maze_programming3_2018_markdown_instruction: "*\"This pig is ruffling\nmy feathers.\"*\\r\n\\r\nThere is one extra block that is going to cause the\nbird to crash.  \\r\nThrow it away by unhooking it from the grey blocks and\ndragging it back to the toolbox."
      courseC_maze_programming4_markdown_instruction: "*\"Trace the path and lead\nme to the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseC_maze_programming4_2018_markdown_instruction: "*\"Trace the path and\nlead me to the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseC_maze_programming5_markdown_instruction: "*\"Follow this path to get\nme to the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseC_maze_programming5_2018_markdown_instruction: "*\"Follow this path to\nget me to the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseC_maze_programming6_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig. Otherwise I might get angry!\"*\\r\n\\r\nGet the bird to the pig\nand avoid the TNT."
      courseC_maze_programming6_2018_markdown_instruction: "*\"Keep calm and help\nme find the bad pig. Otherwise I might get angry!\"*\\r\n\\r\nGet the bird to\nthe pig and avoid the TNT."
      courseC_maze_programming7_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nThis code has a lot of bugs. You'll need to remove some blocks and add others."
      courseC_maze_programming7_2018_markdown_instruction: "*\"It's time to get\nangry!\"*\\r\n\\r\n**Challenge:** This code has a lot of bugs. You'll need\nto remove some blocks and add others."
      courseC_maze_programming8_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig.\"*"
      courseC_maze_programming8_2018_markdown_instruction: "*\"Keep calm and help\nme find the bad pig.\"*"
      courseC_maze_programming8_predict1_markdown_instruction: "*\"Keep calm and\nhelp me find the bad pig.\"*"
      courseC_maze_programming8_predict1_2018_markdown_instruction: "*\"Keep calm\nand help me find the bad pig.\"*"
      courseC_maze_programming9_markdown_instruction: "*\"Now, help me sneak up on\nthe pig any way you want to!\"*"
      courseC_maze_programming9_2018_markdown_instruction: "*\"Now, help me sneak\nup on the pig any way you want to!\"*"
      courseC_maze_programming_challenge1_markdown_instruction: "The bird needs your\nhelp! The pig is hiding, and the goal is to find it. "
      courseC_maze_programming_challenge1_2018_markdown_instruction: "The bird needs\nyour help! The pig is hiding, and the goal is to find it. "
      courseC_maze_programming_challenge2_markdown_instruction: "Sometimes there\nis more than one way to solve the same problem. Sometimes it's faster to\ngo backwards than it is to go forwards!"
      courseC_maze_programming_challenge2_2018_markdown_instruction: "Sometimes there\nis more than one way to solve the same problem. Sometimes it's faster to\ngo backwards than it is to go forwards!"
      courseC_playLab_embedded_markdown_instruction: "##Here's a game for you to\nplay! \\r\nTo win, get the penguin to run into the octopus. Use your arrow\nkeys to move the penguin around.\\r\n\\r\nOnce you are done, you will learn\nhow to make this game!"
      courseC_puppy_loops8_markdown_instruction: "**Challenge:** Combine ideas from\nthe last few puzzles to complete this level."
      courseC_puppy_loops8courseC_maze_loops8_markdown_instruction: "**Challenge:**\nCombine ideas from the last few puzzles to complete this level."
      courseC_starWars_loops1_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go get the scrap metal, BB-8!\"_ \\r\n\\r\nUse five of the same blocks to\nget the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops10_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\r\n\n_\"Go BB-8!\"_\\r\n\\r\nYou are doing great! Keep it up!"
      courseC_starWars_loops10_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\r\n\n_\"Go BB-8!\"_\\r\n\\r\nYou are doing great! Keep it up!"
      courseC_starWars_loops11_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going, BB-8!\"_\\r\n\\r\nYou are almost there! This time, choose any\npath you like!"
      courseC_starWars_loops11_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going, BB-8!\"_\\r\n\\r\nYou are almost there! This time, choose any\npath you like!"
      courseC_starWars_loops1_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go get the scrap metal, BB-8!\"_ \\r\n\\r\nUse five of the same blocks to\nget the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops2_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go BB-8!\"_\\r\n\\r\nTo get all the scrap metal, try creating a loop that\nuses only one block inside of a `repeat` block."
      courseC_starWars_loops2_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go BB-8!\"_\\r\n\\r\nTo get all the scrap metal, try creating a loop that\nuses only one block inside of a `repeat` block."
      courseC_starWars_loops4_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\nIn this puzzle, two `repeat` loops will help\nyou get BB-8 to all of the scrap metal with the fewest number of blocks!"
      courseC_starWars_loops4_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\nIn this puzzle, two `repeat` loops will help\nyou get BB-8 to all of the scrap metal with the fewest number of blocks!"
      courseC_starWars_loops5_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go BB-8!\"_"
      courseC_starWars_loops5_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Go BB-8!\"_"
      courseC_starWars_loops6_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_\\r\n\\r\nLoops even work with more than one block\ninside!  Can you loop this sequence?"
      courseC_starWars_loops6_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Can you get it all?\"_\\r\n\\r\nLoops even work with more than one block\ninside!  Can you loop this sequence?"
      courseC_starWars_loops7_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_\\r\n\\r\nCan you try to get all the scrap metal using just\none loop? Try programming it all out then finding the repeating code to put\nin a loop."
      courseC_starWars_loops7_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"You can do it!\"_\\r\n\\r\nCan you try to get all the scrap metal using just\none loop? Try programming it all out then finding the repeating code to put\nin a loop."
      courseC_starWars_loops8_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\n**Challenge:** Combine ideas from the last\nfew puzzles to complete this level."
      courseC_starWars_loops8_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep it up, BB-8.\"_\\r\n\\r\n**Challenge:** Combine ideas from the last\nfew puzzles to complete this level."
      courseC_starWars_loops9_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going!\"_\\r\n\\r\nUse what you have learned to pick up all of the scrap\nmetal!"
      courseC_starWars_loops9_2018_markdown_instruction: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Keep going!\"_\\r\n\\r\nUse what you have learned to pick up all of the scrap\nmetal!"
      courseD_Frozen_nested1_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\\r\n\\r\nDraw a small shape,\nbetween **20 and 50** pixels wide.  It can be any shape that you like.  \\r\n<hr/>\\r\n\\r\nYou\ncan try making a polygon, like one of these:  \\r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \\r\n\\r\n  \\r\n  \\r\nOr\neven an abstract shape, like one of these:  \\r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\\r\n"
      courseD_Frozen_nested2_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Now, let’s draw more than one.”_\\r\n\\r\nNow take your shape and draw two\nor three in a row by jumping forward some number of pixels.  \\r\n\\r\n- If\nyou jump forward by **less** than the width of your shape, they might overlap\\r\n-\nIf you jump forward by **more** than the width of your shape, you will get\na gap\\r\n\\r\n<hr/>\\r\n\\r\nYour row might end up straight like with these:\\r\n\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\r\n<br/>  <br/>\\r\n\\r\n\\r\nOr,\nyour shapes might move around like one of these: \\r\n\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_Frozen_nested3_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s make it into a snowflake.\"_\\r\n\\r\nNext, jump Elsa back to the center\nusing the `jump to 200 over and 200 down` block, and spin her around to draw\nthe line of shapes again and again in a bunch of different directions.   \\r\n\\r\nWhat\namazing snowflakes you can make!\\r\n<hr/>\\r\nTake a look at these examples\nwith polygons:  \\r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\\r\n\\r\nAbstract\nshapes might make a snowflake more like one of these:  \\r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_Frozen_nested4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering two different shapes of snowflakes on top of one another with a little\nturn in between - see what you get! "
      courseD_Frozen_nested5_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Get creative with shapes and angles to see what kind of new snowflakes\nwe can draw!\"_\\r\n"
      courseD_Frozen_nested6_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s try something new. This time, skate in a zig-zag.\"_\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\\r\nDraw a\nstair-step pattern that uses turns between 75 and 105 degrees -- but make\nsure that your left and right turns use the same angle.  \\r\n(You will see\nwhy later.)"
      courseD_Frozen_nested7_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Now let’s turn and go back the way we came.\"_\\r\n\\r\nTurn around 180 degrees\nand draw the exact same stair pattern again!  \\r\n\\r\n- The rest of this stage\nwill be easier if you put all of your code inside of a loop to make Elsa  draw,\nturn around 180 degrees, draw, then turn around 180 degrees again.\\r\n\\r\n<hr/>\\r\n\\r\nHere\nis an example of stairs that use a 76 degree turn:\\r\n\\r\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_Frozen_nested8_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s spin and make it into a snowflake.\"_\\r\n\\r\nSpin that shape around\n5 or 6 times in a circle.\\r\n- If you choose 5 times,  try a turn of 72 degrees\\r\n-\nIf you choose 6 times,  try a turn of 60 degrees\\r\n<hr/>\\r\n\\r\nHere's an\nexample of Elsa turning a pattern 6 times:\\r\n\\r\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_Frozen_nested9_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now,\nwhat should we do? Let’s explore and create our own winter wonderland!\"_\\r\n\\r\nTry\nplaying around with what you've created. Draw whatever you like!\\r\n- What\nhappens if you use two different angles in your stair step pattern?\\r\n- What\nhappens if you make your diamond pattern longer or shorter?\\r\n- What does\nit look like to draw two snowflakes on top of one another?\\r\n"
      courseD_artist_1_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\\r\n\\r\nDraw a hexagon\nwith 50 pixel long sides.  \\r\n\\r\n---\\r\n\\r\nTo draw a hexagon, you will\nneed to: \\r\n- move forward by **50** pixels\\r\n- turn right by **60** degrees\\r\n-\nrepeat a total of **6** times\\r\n\\r\n"
      courseD_artist_2_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Good job!”_\\r\n\\r\nAfter your hexagon, turn right by **60** degrees, then\ndraw a line that is **150** pixels long.   \\r\n\\r\nFinish by putting Elsa\nback to the center of the play area, using the <xml><block type=\"jump_to\"><title\nname=\"VALUE\">middle center</title></block></xml> block.\\r\n\\r\n\\r\n"
      courseD_artist_3_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Let’s make a snowflake.”_\\r\n\\r\nTo turn this code into a snowflake, nest\nall of the code inside of another `repeat` loop and run it a total of **6**\ntimes.  You should only need to add one block.\\r\n\\r\n"
      courseD_artist_4_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let's make our snowflakes special!\"_\\r\n\\r\n**Inspiration:** Where do\nyou need to add code if you want to draw a tiny square at the tip of each\nlong line?\\r\n\\r\n---\\r\nYou can try whatever you want in this puzzle, but\nhere is an idea:\\r\n\\r\nTry making a tiny square at the end of each line\\r\n-\nEach side should be 15 pixels long\\r\n- You should turn by 90 degrees\\r\n-\nRepeat those actions a total of 4 times"
      courseD_artist_5_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Try changing the shapes or the lengths of the lines to make this your own!\"_\\r\n\\r\n<br/>  \\r\n\\r\n**Inspiration:**\nYou can change your drawing in any way you want, but here is an idea:\\r\n\\r\n-\nTry switching the types of shape in the middle of the snowflake with the one\nat the end of each line!"
      courseD_artist_6_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s try something new. This time, skate in a zig-zag.\"_\\r\n\\r\n<br/>  \\r\n\\r\n**Inspiration:**\nTry changing your long 150 pixel line into 6 short lines of **25** pixels\\r\n\\r\n-\nTurn by **45** degrees in alternate directions after each short line to get\na zig-zag look\\r\n- Where do you need to put a new `repeat` block to make\nthis happen?\\r\n- How many times do you have to repeat your pattern of 2 short\nlines to get 6 total?"
      courseD_artist_7_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Now let’s turn and go back the way we came.\"_\\r\n\\r\nTurn around 180 degrees\nand draw the exact same stair pattern again!  \\r\n\\r\n- The rest of this stage\nwill be easier if you put all of your code inside of a loop to make Elsa  draw,\nturn around 180 degrees, draw, then turn around 180 degrees again.\\r\n\\r\n<hr/>\\r\n\\r\nHere\nis an example of stairs that use a 76 degree turn:\\r\n\\r\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_8_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s spin and make it into a snowflake.\"_\\r\n\\r\nSpin that shape around\n5 or 6 times in a circle.\\r\n- If you choose 5 times,  try a turn of 72 degrees\\r\n-\nIf you choose 6 times,  try a turn of 60 degrees\\r\n<hr/>\\r\n\\r\nHere's an\nexample of Elsa turning a pattern 6 times:\\r\n\\r\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_9_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now,\nwhat should we do? Let’s explore and create our own winter wonderland!\"_\\r\n\\r\nTry\nplaying around with what you've created. Draw whatever you like!\\r\n- What\nhappens if you use two different angles in your stair step pattern?\\r\n- What\nhappens if you make your diamond pattern longer or shorter?\\r\n- What does\nit look like to draw two snowflakes on top of one another?\\r\n"
      courseD_artist_binary1_markdown_instruction: "We've provided you with a grid\nof \"pixels\" that you can walk through and make designs by turning on only\ncertain squares.\\r\n\\r\nUse the blocks below to have the artist draw \"01010101\"\nin binary in the first row."
      courseD_artist_binary1_2018_markdown_instruction: "We've provided you with\na grid of \"pixels\" that you can walk through and make designs by turning\non only certain squares.\\r\n\\r\nUse the blocks below to have the artist draw\n\"01010101\" in binary in the first row."
      courseD_artist_binary2_markdown_instruction: "Here's a function that takes\na binary string of 1's and 0's and instructs the artist to follow them from\nleft to right, top to bottom.  \\r\n___\\r\nThe artist will fill-in the squares\nwhen it sees a 1 and ignore the square when it sees a 0. \\r\n___\\r\n**Run\nthis code to see how the artist uses binary to draw this pattern.**"
      courseD_artist_binary2_2018_markdown_instruction: "Here's a function that\ntakes a binary string of 1's and 0's and instructs the artist to follow\nthem from left to right, top to bottom.  \\r\n___\\r\nThe artist will fill-in\nthe squares when it sees a 1 and ignore the square when it sees a 0. \\r\n___\\r\n**Run\nthis code to see how the artist uses binary to draw this pattern.**"
      courseD_artist_binary_challenge1_markdown_instruction: "You can only use each\nbinary value (0 or 1) once each in this puzzle. Try using nested loops to\ncomplete this drawing."
      courseD_artist_binary_challenge1_2018_markdown_instruction: "You can only use\neach binary value (0 or 1) once each in this puzzle. Try using nested loops\nto complete this drawing."
      courseD_artist_binary_challenge2_markdown_instruction: "There are 256 bits\nrepresented on this grid - that means it's easy for a small change to cause\nbig problems. Are you persistent enough to restore this logo back to normal?\\r\n\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_binary_challenge2_2018_markdown_instruction: "There are 256\nbits represented on this grid - that means it's easy for a small change to\ncause big problems. Are you persistent enough to restore this logo back to\nnormal?\\r\n\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_binary_challenge3_markdown_instruction: "There are 256 bits\nrepresented on this grid - that means it's easy for a small change to cause\nbig problems. Are you persistent enough to restore this logo back to normal?\\r\n\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_functions10_markdown_instruction: "This time, use lines of 8\nhexagons with 25 pixel sides.\\r\n\\r\n- To make each hexagon, repeat the 6\ntimes, turning 60 degrees.\\r\n- To draw a diamond, you will need to alternate\nbetween turning 60 degrees and 120 degrees."
      courseD_artist_functions2_markdown_instruction: "Functions let you define new\nblocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into a\nfunction called `draw a square`. This time, use the `draw a square` function\nto create the glasses. \\r\n<hr/>\\r\n\\r\nThe squares are 75 pixels apart."
      courseD_artist_functions3_markdown_instruction: "We will come back to functions\nshortly. Let's take a break to practice making this star. \\r\n\\r\nYou can\nmake this drawing by adding a repeat block."
      courseD_artist_functions4_markdown_instruction: "Now that you can draw a star,\ntry drawing four stars!\\r\n\\r\n- Each branch of the star is 25 pixels long\\r\n-\nTurn 45 degrees between branches\\r\n- Jump 100 pixels between each star"
      courseD_artist_functions5_markdown_instruction: "When is drawing three stars\nharder than drawing four? When you also have to jump over the moon!\\r\n\\r\nDraw\nonly those three stars to finish this puzzle."
      courseD_artist_functions6_markdown_instruction: "You are doing great! \\r\n\\r\nMake\nthis window by drawing a square, then turning 90 degrees before drawing another,\nand so on."
      courseD_artist_functions7_markdown_instruction: "Let's take the code for the\nwindow and add it to function `draw a window`. Now, we can call the function\nany time we need to draw a window without having to write the code again.\n\\r\n\\r\n<img src=\"https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif\"\nwidth=\"450px\"/>\\r\n<br/> \\r\n\\r\nTry solving this puzzle by creating `draw\na window` and calling it five times. Watch out for the door!\\r\n\\r\n- The\ntop windows are 50 pixels away from each other.  \\r\n- The bottom windows\nare 100 pixels below the top set."
      courseD_artist_functions8_markdown_instruction: "**Challenge:** Create as many\nfunctions as you think you need to make this drawing of 50 pixel squares."
      courseD_artist_functions9_markdown_instruction: "Create this image using only\nthe blocks provided.\\r\n\\r\n- To draw a diamond, you will need to alternate\nbetween turning 60 degrees and 120 degrees."
      courseD_artist_nestedLoops1a_markdown_instruction: "Now loop the triangle 6\ntimes. \\r\n\\r\nAfter each triangle, you'll need to turn 60 degrees before\ndrawing the next. "
      courseD_artist_nestedLoops1a_2018_markdown_instruction: "Now loop the triangle\n6 times. \\r\n\\r\nAfter each triangle, you'll need to turn 60 degrees before\ndrawing the next. "
      courseD_artist_nestedLoops2_markdown_instruction: "This time, complete the\npuzzle with the fewest number of blocks possible.\\r\n\\r\nAfter each triangle,\nyou'll need to turn 60 degrees before drawing the next.\\r\nSee how much easier\nthis is with **nested loops**?"
      courseD_artist_nestedLoops2_2018_markdown_instruction: "This time, complete\nthe puzzle with the fewest number of blocks possible.\\r\n\\r\nAfter each triangle,\nyou'll need to turn 60 degrees before drawing the next.\\r\nSee how much easier\nthis is with **nested loops**?"
      courseD_artist_nestedLoops4_markdown_instruction: "Great!  Do the same thing\nwith these circles. \\r\n\\r\n- Each circle is made by moving 1 pixel before\nturning 1 degree, 360 times.\\r\n- Each circle begins just 50 pixels from where\nthe last one ended"
      courseD_artist_nestedLoops4_2018_markdown_instruction: "Great!  Do the same\nthing with these circles. \\r\n\\r\n- Each circle is made by moving 1 pixel\nbefore turning 1 degree, 360 times.\\r\n- Each circle begins just 50 pixels\nfrom where the last one ended"
      courseD_artist_nestedLoops5_markdown_instruction: "What happens if you also\nturn 90 degrees between circles?\\r\n\\r\n(To get this image, you still need\nto jump 50 pixels between circles)"
      courseD_artist_nestedLoops5_2018_markdown_instruction: "What happens if you\nalso turn 90 degrees between circles?\\r\n\\r\n(To get this image, you still\nneed to jump 50 pixels between circles)"
      courseD_artist_nestedLoops7_markdown_instruction: "Use what you've learned\nto make this drawing.\\r\n\\r\n- The squares each have **100 pixel sides** and\n**90 degree angles**\\r\n- You will need to turn **60 degrees between each\nsquare**. Why? Because there are 6 squares, and 360 degrees (a full turn around)\ndivided by 6 is 60 degrees.\\r\n- Make sure you jump **50 pixels to get to\nthe next square**"
      courseD_artist_nestedLoops7_2018_markdown_instruction: "Use what you've learned\nto make this drawing.\\r\n\\r\n- The squares each have **100 pixel sides** and\n**90 degree angles**\\r\n- You will need to turn **60 degrees between each\nsquare**. Why? Because there are 6 squares, and 360 degrees (a full turn around)\ndivided by 6 is 60 degrees.\\r\n- Make sure you jump **50 pixels to get to\nthe next square**"
      courseD_artist_nestedLoops8_markdown_instruction: "Using what you have learned\nin the last couple of puzzles, build this image from the beginning.\\r\n\\r\n-\nEach hexagon has **50 pixel sides** and **60 degree turns**"
      courseD_artist_nestedLoops8_2018_markdown_instruction: "Using what you have\nlearned in the last couple of puzzles, build this image from the beginning.\\r\n\\r\n-\nEach hexagon has **50 pixel sides** and **60 degree turns**"
      courseD_artist_nestedLoops9_markdown_instruction: "**Challenge:** Can you figure\nout how to make a picture like this?\\r\n\\r\n- Both shapes have **50 pixel\nsides**\\r\n- Between each pair of shapes, you will need to jump forward the\nlength of a side, and turn 45 degrees."
      courseD_artist_nestedLoops9_2018_markdown_instruction: "**Challenge:** Can\nyou figure out how to make a picture like this?\\r\n\\r\n- Both shapes have\n**50 pixel sides**\\r\n- Between each pair of shapes, you will need to jump\nforward the length of a side, and turn 45 degrees."
      courseD_artist_nestedLoops9_predict1_markdown_instruction: "**Challenge:**\nCan you figure out how to make a picture like this?\\r\n\\r\n- Both shapes have\n50 pixel sides"
      courseD_artist_nestedLoops9_predict1_2018_markdown_instruction: "**Challenge:**\nCan you figure out how to make a picture like this?\\r\n\\r\n- Both shapes have\n50 pixel sides"
      courseD_artist_nestedLoopsFP_markdown_instruction: "Now it's your turn.  Take\nthe skills you have learned and make something that you love!\\r\n\\r\nNeed\nan idea?  Try to make one of these:\\r\n\\r\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\\r\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\\r\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)"
      courseD_artist_nestedLoopsFP_2018_markdown_instruction: "Now it's your turn.  Take\nthe skills you have learned and make something that you love!\\r\n\\r\nNeed\nan idea?  Try to make one of these:\\r\n\\r\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\\r\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\\r\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)"
      courseD_artist_nestedLoops_challenge1_markdown_instruction: "Can you figure\nout how to make a picture like this?\\r\n\\r\n- Both shapes have **50 pixel\nsides.**\\r\n- The *octagons* are made with **45 degree** turns.\\r\n- The *triangles*\nare made with **120 degree** turns."
      courseD_artist_nestedLoops_challenge1_2018_markdown_instruction: "Can you figure\nout how to make a picture like this?\\r\n\\r\n- Both shapes have **50 pixel\nsides.**\\r\n- The *octagons* are made with **45 degree** turns.\\r\n- The *triangles*\nare made with **120 degree** turns."
      courseD_artist_nestedLoops_challenge2_markdown_instruction: "This code is just\na little bit off!  Can you fix it to make the correct drawing in the workspace?\\r\n\\r\n-\nThe first inner loop should make an octagon.\\r\n- The second inner loop should\nmake a hexagon.\\r\n- The third inner loop should make a square."
      courseD_artist_nestedLoops_challenge2_2018_markdown_instruction: "This code\nis just a little bit off!  Can you fix it to make the correct drawing in the\nworkspace?\\r\n\\r\n- The first inner loop should make an octagon.\\r\n- The\nsecond inner loop should make a hexagon.\\r\n- The third inner loop should\nmake a square."
      courseD_artist_project1_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\\r\n\\r\nDraw a small shape,\nbetween **20 and 50** pixels wide.  It can be any shape that you like.  \\r\n<hr/>\\r\n\\r\nYou\ncan try making a polygon, like one of these:  \\r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \\r\n\\r\n  \\r\n  \\r\nOr\neven an abstract shape, like one of these:  \\r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\\r\n"
      courseD_artist_project1_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\\r\n\\r\nDraw a small shape,\nbetween **20 and 50** pixels wide.  It can be any shape that you like.  \\r\n<hr/>\\r\n\\r\nYou\ncan try making a polygon, like one of these:  \\r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \\r\n\\r\n  \\r\n  \\r\nOr\neven an abstract shape, like one of these:  \\r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s try something new. This time, skate in a zig-zag.\"_\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\\r\nDraw a\nstair-step pattern that uses turns between 75 and 105 degrees -- but make\nsure that your left and right turns use the same angle.  \\r\n(You will see\nwhy later.)"
      courseD_artist_project1a_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s try something new. This time, skate in a zig-zag.\"_\\r\n\\r\n\\r\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\\r\nDraw a\nstair-step pattern that uses turns between 75 and 105 degrees -- but make\nsure that your left and right turns use the same angle.  \\r\n(You will see\nwhy later.)"
      courseD_artist_project2_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Now, let’s draw more than one.”_\\r\n\\r\nNow take your shape and draw two\nor three in a row by jumping forward some number of pixels.  \\r\n\\r\n- If\nyou jump forward by **less** than the width of your shape, they might overlap\\r\n-\nIf you jump forward by **more** than the width of your shape, you will get\na gap\\r\n\\r\n<hr/>\\r\n\\r\nYour row might end up straight like with these:\\r\n\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\r\n<br/>  <br/>\\r\n\\r\n\\r\nOr,\nyour shapes might move around like one of these: \\r\n\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“Now, let’s draw more than one.”_\\r\n\\r\nNow take your shape and draw two\nor three in a row by jumping forward some number of pixels.  \\r\n\\r\n- If\nyou jump forward by **less** than the width of your shape, they might overlap\\r\n-\nIf you jump forward by **more** than the width of your shape, you will get\na gap\\r\n\\r\n<hr/>\\r\n\\r\nYour row might end up straight like with these:\\r\n\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\r\n<br/>  <br/>\\r\n\\r\n\\r\nOr,\nyour shapes might move around like one of these: \\r\n\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Now let’s turn and go back the way we came.\"_\\r\n\\r\nTurn around 180 degrees\nand draw the exact same stair pattern again!  \\r\n\\r\n- The rest of this stage\nwill be easier if you put all of your code inside of a loop to make Elsa  draw,\nturn around 180 degrees, draw, then turn around 180 degrees again.\\r\n\\r\n<hr/>\\r\n\\r\nHere\nis an example of stairs that use a 76 degree turn:\\r\n\\r\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Now let’s turn and go back the way we came.\"_\\r\n\\r\nTurn around 180 degrees\nand draw the exact same stair pattern again!  \\r\n\\r\n- The rest of this stage\nwill be easier if you put all of your code inside of a loop to make Elsa  draw,\nturn around 180 degrees, draw, then turn around 180 degrees again.\\r\n\\r\n<hr/>\\r\n\\r\nHere\nis an example of stairs that use a 76 degree turn:\\r\n\\r\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s make it into a snowflake.\"_\\r\n\\r\nNext, jump Elsa back to the center\nusing the `jump to 200 over and 200 down` block, and spin her around to draw\nthe line of shapes again and again in a bunch of different directions.   \\r\n\\r\nWhat\namazing snowflakes you can make!\\r\n<hr/>\\r\nTake a look at these examples\nwith polygons:  \\r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\\r\n\\r\nAbstract\nshapes might make a snowflake more like one of these:  \\r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s make it into a snowflake.\"_\\r\n\\r\nNext, jump Elsa back to the center\nusing the `jump to 200 over and 200 down` block, and spin her around to draw\nthe line of shapes again and again in a bunch of different directions.   \\r\n\\r\nWhat\namazing snowflakes you can make!\\r\n<hr/>\\r\nTake a look at these examples\nwith polygons:  \\r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\\r\n\\r\nAbstract\nshapes might make a snowflake more like one of these:  \\r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3a_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s spin and make it into a snowflake.\"_\\r\n\\r\nSpin that shape around\n5 or 6 times in a circle.\\r\n- If you choose 5 times,  try a turn of 72 degrees\\r\n-\nIf you choose 6 times,  try a turn of 60 degrees\\r\n<hr/>\\r\n\\r\nHere's an\nexample of Elsa turning a pattern 6 times:\\r\n\\r\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project3a_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Let’s spin and make it into a snowflake.\"_\\r\n\\r\nSpin that shape around\n5 or 6 times in a circle.\\r\n- If you choose 5 times,  try a turn of 72 degrees\\r\n-\nIf you choose 6 times,  try a turn of 60 degrees\\r\n<hr/>\\r\n\\r\nHere's an\nexample of Elsa turning a pattern 6 times:\\r\n\\r\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering two different shapes of snowflakes on top of one another with a little\nturn in between - see what you get! "
      courseD_artist_project4_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering two different shapes of snowflakes on top of one another with a little\nturn in between - see what you get! "
      courseD_artist_project4a_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now,\nwhat should we do? Let’s explore and create our own winter wonderland!\"_\\r\n\\r\nTry\nplaying around with what you've created. Draw whatever you like!\\r\n- What\nhappens if you use two different angles in your stair step pattern?\\r\n- What\nhappens if you make your diamond pattern longer or shorter?\\r\n- What does\nit look like to draw two snowflakes on top of one another?\\r\n"
      courseD_artist_project4a_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now,\nwhat should we do? Let’s explore and create our own winter wonderland!\"_\\r\n\\r\nTry\nplaying around with what you've created. Draw whatever you like!\\r\n- What\nhappens if you use two different angles in your stair step pattern?\\r\n- What\nhappens if you make your diamond pattern longer or shorter?\\r\n- What does\nit look like to draw two snowflakes on top of one another?"
      courseD_artist_project5_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Get creative with shapes and angles to see what kind of new snowflakes\nwe can draw!\"_\\r\n"
      courseD_artist_project5_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"Get creative with shapes and angles to see what kind of new snowflakes\nwe can draw!\"_"
      courseD_artist_project_embedded_markdown_instruction: "Here's what you will\nsoon be making!"
      courseD_artist_ramp11_markdown_instruction: "Great!  Now let's make a square\nusing Artist!  The blocks are a little different, but the idea is the same.\\r\n___\\r\nEach\nside of the square has a length of 200 pixels, and you will need to turn 90\ndegrees to make each angle."
      courseD_artist_ramp12_markdown_instruction: "Use what you've learned to draw\nthis triangle inside of a square.\\r\n___\\r\n##### The sides are each 200 pixels\nlong. You will need to turn 90 degrees to make the square and 120 degrees\nto make the triangle."
      courseD_bee_conditionals1_markdown_instruction: "*\"This cloud is blocking\nmy view!\"*\\r\n\\r\nCheck to see if there's a flower under the cloud. If there's\na flower, get nectar."
      courseD_bee_conditionals10_markdown_instruction: "Conditionals can be helpful,\neven when you know exactly what is in each spot!\\r\n\\r\nCollect all of the\nnectar and make all of the honey."
      courseD_bee_conditionals10_2018_markdown_instruction: "Conditionals can be\nhelpful, even when you know exactly what is in each spot!\\r\n\\r\nCollect all\nof the nectar and make all of the honey."
      courseD_bee_conditionals1_predict1_markdown_instruction: "*\"This cloud is\nblocking my view!\"*\\r\n\\r\nCheck to see if there's a flower under the cloud.\nIf there's a flower, get nectar."
      courseD_bee_conditionals1_predict1_2018_markdown_instruction: "*\"This cloud\nis blocking my view!\"*\\r\n\\r\nCheck to see if there's a flower under the\ncloud. If there's a flower, get nectar."
      courseD_bee_conditionals2_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.\nIf there is a flower underneath the cloud, the bee will need to get nectar\n*once*.  \\r\n\\r\nRemember: Not all clouds hide the same thing!"
      courseD_bee_conditionals2_2018_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.\nIf there is a flower underneath the cloud, the bee will need to get nectar\n*once*.  \\r\n\\r\nRemember: Not all clouds hide the same thing!"
      courseD_bee_conditionals2_test_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.\nIf there is a flower underneath the cloud, the bee will need to get nectar\n*once*.  \\r\n\\r\nRemember: Not all clouds hide the same thing!"
      courseD_bee_conditionals3_markdown_instruction: "You can only collect nectar\nfrom flowers, but you can check any space to see if there is a flower. If\nthere is a flower under any of these clouds, the bee will need to collect\nnectar *once*."
      courseD_bee_conditionals3_2018_markdown_instruction: "You can only collect\nnectar from flowers, but you can check any space to see if there is a flower.\nIf there is a flower under any of these clouds, the bee will need to collect\nnectar *once*."
      courseD_bee_conditionals4_markdown_instruction: "In this puzzle, we know that\nevery flower has exactly one nectar, but the flowers aren't spaced evenly.\\r\n\\r\nGet\nall of the nectar using as few blocks as possible."
      courseD_bee_conditionals4_2018_markdown_instruction: "In this puzzle, we know\nthat every flower has exactly one nectar, but the flowers aren't spaced evenly.\\r\n\\r\nGet\nall of the nectar using as few blocks as possible."
      courseD_bee_conditionals6_markdown_instruction: "*\"Now I just want to make\nhoney.\"*\\r\n\\r\nSome of these clouds might have honeycombs under them.  Be\nsure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb,\nthe bee will only need to make honey *once*."
      courseD_bee_conditionals6_2018_markdown_instruction: "*\"Now I just want to\nmake honey.\"*\\r\n\\r\nSome of these clouds might have honeycombs under them.  Be\nsure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb,\nthe bee will only need to make honey *once*."
      courseD_bee_conditionals7_markdown_instruction: "Sometimes a cloud covers a\nflower, sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else` block to\ncollect nectar at flowers and make honey at honeycomb. Remember: if there\nis a flower, the bee only needs to get nectar *once*. If there is a honeycomb,\nthe bee only needs to make honey *once*."
      courseD_bee_conditionals7_2018_markdown_instruction: "Sometimes a cloud covers\na flower, sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else` block\nto collect nectar at flowers and make honey at honeycomb. Remember: if there\nis a flower, the bee only needs to get nectar *once*. If there is a honeycomb,\nthe bee only needs to make honey *once*."
      courseD_bee_conditionals7_predict2_markdown_instruction: "Sometimes a cloud\ncovers a flower, sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else`\nblock to collect nectar at flowers and make honey at honeycomb. Remember:\nthere will only ever **bee** *one* honeycomb or *one* flower behind each cloud."
      courseD_bee_conditionals7_predict2_2018_markdown_instruction: "Sometimes a\ncloud covers a flower, sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else`\nblock to collect nectar at flowers and make honey at honeycomb. Remember:\nthere will only ever **bee** *one* honeycomb or *one* flower behind each cloud."
      courseD_bee_conditionals8_markdown_instruction: "**Challenge:** There will\nbe either a flower or a honeycomb under each of those clouds!\\r\n\\r\nCollect\nnectar once if there is a flower.\\r\nOtherwise, make honey once (because there\nis a honeycomb)."
      courseD_bee_conditionals8_2018_markdown_instruction: "**Challenge:** There\nwill be either a flower or a honeycomb under each of those clouds!\\r\n\\r\nCollect\nnectar once if there is a flower.\\r\nOtherwise, make honey once (because there\nis a honeycomb)."
      courseD_bee_conditionals9_markdown_instruction: "Collect all of the nectar\nor make all the honey. You can only collect nectar from flowers and make honey\nfrom honeycombs. Check any space to see if there is a flower or honeycomb.\nThere will only ever be one flower or one honeycomb behind each cloud."
      courseD_bee_conditionals9_2018_markdown_instruction: "Collect all of the nectar\nor make all the honey. You can only collect nectar from flowers and make honey\nfrom honeycombs. Check any space to see if there is a flower or honeycomb.\nThere will only ever be one flower or one honeycomb behind each cloud."
      courseD_bee_conditionals_challenge1_markdown_instruction: "Collect all of the\nnectar and make all of the honey. You can only collect nectar from flowers\nand make honey from honeycombs. Check every space to see if there is a flower\nor honeycomb."
      courseD_bee_conditionals_challenge1_2018_markdown_instruction: "Collect all\nof the nectar and make all of the honey. You can only collect nectar from\nflowers and make honey from honeycombs. Check every space to see if there\nis a flower or honeycomb."
      courseD_bee_conditionals_challenge2_markdown_instruction: "Collect all of the\nnectar and make all the honey. You can collect all of the nectar in one flower\nby using the `while nectar > 0` loop."
      courseD_bee_conditionals_challenge2_2018_markdown_instruction: "Collect all\nof the nectar and make all the honey. You can collect all of the nectar in\none flower by using the `while nectar > 0` loop."
      courseD_bee_conditionals_challenge3_markdown_instruction: "Collect all of the\nnectar and make all the honey. You can collect all of the nectar in one flower\nby using the `while nectar > 0` loop."
      courseD_bee_debugging1_markdown_instruction: "*\"These blocks are really bugging\nme!\"*\\r\n\\r\nFix the error(s) to collect all of the nectar."
      courseD_bee_debugging2_markdown_instruction: "*\"Ooh, this one stings!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      courseD_bee_debugging3_markdown_instruction: "*\"This puzzle is a bit sticky.\"*\\r\n\\r\nFix\nthe error(s) to collect all of the nectar and make all of the honey."
      courseD_bee_debugging4_markdown_instruction: "*\"This could be sweet!\"*\\r\n\\r\nFix\nthe error(s) to make all of the honey."
      courseD_bee_debugging5_markdown_instruction: "**Challenge:** *\"This puzzle\nis making me loopy!\"*\\r\n\\r\nAll of the commands that you need are already\nhere...now use your debugging skills to figure out how to solve this puzzle."
      courseD_bee_debugging6_markdown_instruction: "**Challenge:**  Fix the errors\nto collect all of the nectar and make all of the honey."
      courseD_bee_debugging7_markdown_instruction: "*\"Such a sticky situation!\"*\\r\n\\r\nHelp\nthe bee find his mistakes."
      courseD_bee_debugging8_markdown_instruction: "*\"So many lovely flowers!\"*\\r\n\\r\nHelp\nthe bee fix the code to get all the nectar."
      courseD_bee_debugging9_markdown_instruction: "*\"It's nectar-topia!\"*\\r\n\\r\nHelp\nthe bee fix the code to get all the nectar."
      courseD_bee_debugging_challenge1_markdown_instruction: "Watch how the bees\ngets the nectar. Can you use the same kind of pattern to help the bee make\nall of the honey?"
      courseD_bee_debugging_challenge1_2018_markdown_instruction: "Watch how the\nbees gets the nectar. Can you use the same kind of pattern to help the bee\nmake all of the honey?"
      courseD_bee_debugging_challenge1a_markdown_instruction: "*\"Buzz buzz! I know\nhow to get nectar, now help me make honey!\"*\\r\n\\r\nWatch how the bee gets\nthe nectar. Can you use the same kind of pattern to help the bee make all\nof the honey?"
      courseD_bee_debugging_challenge2_markdown_instruction: "Watch how the bees\ngets the nectar. Can you use the same kind of pattern to help the bee make\nall of honey?"
      courseD_bee_nestedLoops1_markdown_instruction: "*\"This is going to **BEE**\ngreat!\"*\\r\n\\r\nHelp the bee collect all of the nectar."
      courseD_bee_nestedLoops1_2018_markdown_instruction: "*\"This is going to **BEE**\ngreat!\"*\\r\n\\r\nHelp the bee collect all of the nectar."
      courseD_bee_nestedLoops1a_markdown_instruction: "*\"This is going to **BEE**\ngreat!\"*\\r\n\\r\nHelp the bee collect all of the nectar."
      courseD_bee_nestedLoops1a_2018_markdown_instruction: "*\"This is going to **BEE**\ngreat!\"*\\r\n\\r\nHelp the bee collect all of the nectar."
      courseD_bee_nestedLoops2_markdown_instruction: "This time, help the bee collect\nall of the nectar using as few blocks as possible."
      courseD_bee_nestedLoops2_2018_markdown_instruction: "This time, help the bee\ncollect all of the nectar using as few blocks as possible."
      courseD_bee_nestedLoops2_predict1_markdown_instruction: "This time, help the\nbee collect all of the nectar using as few blocks as possible."
      courseD_bee_nestedLoops2_predict1_2018_markdown_instruction: "This time, help\nthe bee collect all of the nectar using as few blocks as possible."
      courseD_bee_nestedLoops3_markdown_instruction: "*\"Can you BEE-lieve all of\nthese flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      courseD_bee_nestedLoops5_markdown_instruction: "Collect all of the nectar from\neach flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_markdown_instruction: "Make all of the nectar."
      courseD_bee_nestedLoops6_2018_markdown_instruction: "*\"Must eat sunflower!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using only the blocks available."
      courseD_bee_nestedLoops7_markdown_instruction: "**Challenge:** Figure out how\nto get all of the nectar using only the blocks available."
      courseD_bee_nestedLoops7_2018_markdown_instruction: "**Challenge:** Figure\nout how to get all of the nectar using only the blocks available."
      courseD_bee_nestedLoops8_markdown_instruction: "Collect all of the nectar from\neach flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_markdown_instruction: "Collect all of the nectar\nfrom each flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_markdown_instruction: "Make all of the honey."
      courseD_bee_nestedLoops9_2018_markdown_instruction: "Make all of the honey."
      courseD_bee_nestedLoops9_predict2_markdown_instruction: "Make all of the honey."
      courseD_bee_nestedLoops9_predict2_2018_markdown_instruction: "Make all of the\nhoney."
      courseD_bee_nested_loops_challenge1_markdown_instruction: "Let's hunt for\ntreasure - using loops! Help the collector reach at least two piles of treasure\nusing only the blocks in your toolbox."
      courseD_bee_nested_loops_challenge2_markdown_instruction: "Let's hunt for\ntreasure - using loops! Help the collector reach at least two piles of treasure\nusing only the blocks in your toolbox."
      courseD_bounce_events1_markdown_instruction: "Get to the flag! Attach a block\nto the \"when left arrow\" block and press \"Run\" to move the player to the\nflag."
      courseD_bounce_events10s_markdown_instruction: "There is now a hoop at the\ntop.  \\r\n\\r\nAttach the `score point` block to the `when ball in goal` event\nand the `score opponent point` block to the `when ball misses hand` event\nto make a game. \\r\n\\r\n---\\r\n\\r\nSee how many points you can score before\nyour opponent scores twice."
      courseD_bounce_events10s_2018_markdown_instruction: "There is now a hoop at\nthe top.  \\r\n\\r\nAttach the `score point` block to the `when ball in goal`\nevent and the `score opponent point` block to the `when ball misses hand`\nevent to make a game. \\r\n\\r\n---\\r\n\\r\nSee how many points you can score\nbefore your opponent scores twice."
      courseD_bounce_events11s_markdown_instruction: "Now, you are in control of\nthe ball!  Attach the `throw new ball` block in all of the places where the\ngame needs a new ball.\\r\n\\r\n---\\r\n\\r\nSee how many points you can score\nbefore your opponent scores twice!"
      courseD_bounce_events11s_2018_markdown_instruction: "Now, you are in control\nof the ball!  Attach the `throw new ball` block in all of the places where\nthe game needs a new ball.\\r\n\\r\n---\\r\n\\r\nSee how many points you can score\nbefore your opponent scores twice!"
      courseD_bounce_events1s_markdown_instruction: "Get the ball to the hoop!   \\r\nAttach\na block to the `when left arrow` event and press \"Run\" to move the player\nto the net."
      courseD_bounce_events1s_2018_markdown_instruction: "Get the ball to the hoop!   \\r\nAttach\na block to the `when left arrow` event and press \"Run\" to move the player\nto the net."
      courseD_bounce_events2s_markdown_instruction: "Now, attach a block to the `when\nright event` so that the hand can get to both baskets."
      courseD_bounce_events2s_2018_markdown_instruction: "Now, attach a block to\nthe `when right event` so that the hand can get to both baskets."
      courseD_bounce_events5s_markdown_instruction: "We're going to send a basketball\nflying down towards the hand.  Attach a block to the `when ball hits hand`\nevent to ensure the ball reaches the basket."
      courseD_bounce_events5s_2018_markdown_instruction: "We're going to send a\nbasketball flying down towards the hand.  Attach a block to the `when ball\nhits hand` event to ensure the ball reaches the basket."
      courseD_bounce_events6s_markdown_instruction: "Now the basket is at the top.  \\r\n\\r\nAttach\ncode to make the ball bounce when it hits the wall so you can solve this puzzle."
      courseD_bounce_events6s_2018_markdown_instruction: "Now the basket is at the\ntop.  \\r\n\\r\nAttach code to make the ball bounce when it hits the wall so\nyou can solve this puzzle."
      courseD_bounce_events7s_markdown_instruction: "Attach sound blocks to make\nthe net swish when you hit the basket and have the whistle blow when the ball\nmisses your hand.  \\r\n\\r\n---\\r\n\\r\nBounce the ball until it hits the finish\ntarget."
      courseD_bounce_events7s_2018_markdown_instruction: "Attach sound blocks to\nmake the net swish when you hit the basket and have the whistle blow when\nthe ball misses your hand.  \\r\n\\r\n---\\r\n\\r\nBounce the ball until it hits\nthe finish target."
      courseD_collector_debugging1_markdown_instruction: "*\"Oh no! I see a problem.\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging10_predict1_markdown_instruction: "*\"It's treasure\nisland!\"*\\r\n\\r\nHelp Laurel fix the code to get all the treasure."
      courseD_collector_debugging10_predict1_2018_markdown_instruction: "*\"It's\ntreasure island!\"*\\r\n\\r\nHelp Laurel fix the code to get all the treasure."
      courseD_collector_debugging1_2018_markdown_instruction: "*\"Oh no! I see a\nproblem.\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging1a_markdown_instruction: "*\"Oh no! I see a problem.\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging1a_2018_markdown_instruction: "*\"Oh no! I see a\nproblem.\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging2_markdown_instruction: "*\"You can do this!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging2_2018_markdown_instruction: "*\"You can do this!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging2a_markdown_instruction: "*\"You can do this!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging2a_2018_markdown_instruction: "*\"You can do this!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the treasure."
      courseD_collector_debugging3_markdown_instruction: "*\"Be persistent and you\nwill figure this out.\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging3_2018_markdown_instruction: "*\"Be persistent and\nyou will figure this out.\"*\\r\n\\r\nFix the error(s) to collect all of the\ntreasure."
      courseD_collector_debugging3a_markdown_instruction: "*\"Be persistent and you\nwill figure this out.\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging3a_2018_markdown_instruction: "*\"Be persistent\nand you will figure this out.\"*\\r\n\\r\nFix the error(s) to collect all of\nthe treasure."
      courseD_collector_debugging4_markdown_instruction: "*\"Don't get frustrated.\nYou can do it!\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging4_2018_markdown_instruction: "*\"Don't get frustrated.\nYou can do it!\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging4a_markdown_instruction: "*\"Don't get frustrated.\nYou can do it!\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging4a_2018_markdown_instruction: "*\"Don't get frustrated.\nYou can do it!\"*\\r\n\\r\nFix the error(s) to collect all of the treasure."
      courseD_collector_debugging5_markdown_instruction: "*\"This puzzle is making\nme loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      courseD_collector_debugging5_2018_markdown_instruction: "*\"This puzzle is\nmaking me loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      courseD_collector_debugging5a_markdown_instruction: "*\"This puzzle is making\nme loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      courseD_collector_debugging5a_2018_markdown_instruction: "*\"This puzzle is\nmaking me loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      courseD_collector_debugging6_markdown_instruction: "**Challenge:**  All of\nthe blocks that you need are already here...Now use your debugging skills\nto fix the errors and collect all of the treasure."
      courseD_collector_debugging6_2018_markdown_instruction: "**Challenge:**  All\nof the blocks that you need are already here...Now use your debugging skills\nto fix the errors and collect all of the treasure."
      courseD_collector_debugging6a_markdown_instruction: "Challenge: Use the code\nin the work area to get at least **6** pieces of treasure!"
      courseD_collector_debugging6a_2018_markdown_instruction: "Challenge: Use the\ncode in the work area to get at least **6** pieces of treasure!"
      courseD_collector_debugging7_markdown_instruction: "**Challenge**: All of the\ncommands that you need are already here...now use your debugging skills to\nfigure out how to solve this puzzle."
      courseD_collector_debugging8_markdown_instruction: "*\"So much treasure!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging8_2018_markdown_instruction: "*\"So much treasure!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging8a_markdown_instruction: "*\"So much treasure!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging8a_2018_markdown_instruction: "*\"So much treasure!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging9_markdown_instruction: "*\"It's treasure island!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging9_2018_markdown_instruction: "*\"It's treasure\nisland!\"*\\r\n\\r\nHelp Laurel fix the code to get all the treasure."
      courseD_collector_debugging9a_markdown_instruction: "*\"It's treasure island!\"*\\r\n\\r\nHelp\nLaurel fix the code to get all the treasure."
      courseD_collector_debugging9a_2018_markdown_instruction: "*\"It's treasure\nisland!\"*\\r\n\\r\nHelp Laurel fix the code to get all the treasure."
      courseD_collector_nested_loops_challenge2_markdown_instruction: "*\"Let's\nhunt for treasure - using loops!\"* \\r\n\\r\nHelp the collector reach at least\ntwo piles of treasure using only the blocks in your toolbox. It is possible\nto collect all 4."
      courseD_collector_nested_loops_challenge2_2018_markdown_instruction: "*\"Let's\nhunt for treasure - using loops!\"* \\r\n\\r\nHelp the collector reach at least\ntwo piles of treasure using only the blocks in your toolbox. It is possible\nto collect all 4."
      courseD_collector_nested_loops_challenge2a_markdown_instruction: "*\"Let's\nhunt for treasure - using loops!\"* \\r\n\\r\nHelp Laurel collect at least two\npiles of treasure using only the blocks in your toolbox. It is possible to\ncollect all 4."
      courseD_collector_ramp10_markdown_instruction: "Walk Laurel around this square\ncollecting the treasure as you find it."
      courseD_collector_ramp8_markdown_instruction: "This puzzle is a lot like the\nlast one, but now it stars Laurel the Adventurer!\\r\n___\\r\n\\r\nTake the same\npath as before, but this time, use a repeat loop to collect treasure when\nyou get to it.\\r\n"
      courseD_collector_ramp9_markdown_instruction: "Now there's more treasure.  Can\nyou help Laurel collect it all?"
      courseD_collector_until_challenge1_markdown_instruction: "Watch how the bees\ngets the nectar. Can you use the same kind of pattern to help the bee make\nall of honey?"
      courseD_debugging_1_markdown_instruction: "*\"These blocks are really bugging\nme!\"*\\r\n\\r\nFix the error(s) to collect all of the nectar."
      courseD_debugging_2_markdown_instruction: "*\"Ooh, this one stings!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      courseD_debugging_3_markdown_instruction: "*\"These blocks are really bugging\nme.\"*\\r\n\\r\nFix the error(s) to collect all of the nectar and make all of\nthe honey."
      courseD_debugging_4_markdown_instruction: "*\"This could be sweet!\"*\\r\n\\r\nFix\nthe error(s) to make all of the honey."
      courseD_debugging_5_markdown_instruction: "**Challenge:** *\"This puzzle is\nmaking me loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      courseD_debugging_6_markdown_instruction: "**Challenge:**  Fix the errors to\ncollect all of the nectar and make all of the honey."
      courseD_farmer_condLoops1_markdown_instruction: "*\"Corn you help me harvest\ntoday?\"*\\r\n\\r\nHelp the harvester check her row of corn to see if anything\nis ready to pick.  Use conditionals to look at each sprout.  Every stalk will\nhave either **0 or 1** pieces of corn ready to harvest."
      courseD_farmer_condLoops1_2018_markdown_instruction: "*\"Corn you help me harvest\ntoday?\"*\\r\n\\r\nHelp the harvester check her row of corn to see if anything\nis ready to pick.  Use conditionals to look at each sprout.  Every stalk will\nhave either **0 or 1** pieces of corn ready to harvest."
      courseD_farmer_condLoops2_markdown_instruction: "*\"Lettuce collect both crops\nfrom this row!\"*\\r\n\\r\nThis garden is all mixed up, it has both **corn and\nlettuce**!  \\r\n\\r\nHelp the harvester pick the items that are ready for harvesting.  Each\nplant will have either **one** corn or **one** lettuce."
      courseD_farmer_condLoops2_2018_markdown_instruction: "*\"Lettuce collect both\ncrops from this row!\"*\\r\n\\r\nThis garden is all mixed up, it has both **corn\nand lettuce**!  \\r\n\\r\nHelp the harvester pick the items that are ready for\nharvesting.  Each plant will have either **one** corn or **one** lettuce."
      courseD_farmer_condLoops3_markdown_instruction: "*\"Corn, lettuce, AND pumpkins!\nHelp me harvest them all.\"*\\r\n\\r\nEach plant will have either one piece\nof corn, one head of lettuce, or one pumpkin."
      courseD_farmer_condLoops3_2018_markdown_instruction: "*\"Corn, lettuce, AND\npumpkins! Help me harvest them all.\"*\\r\n\\r\nEach plant will have either\none piece of corn, one head of lettuce, or one pumpkin."
      courseD_farmer_condLoops4_markdown_instruction: "*\"Gosh! Now the lettuce is\ngrowing in clusters!\"*  \\r\n\\r\nThe harvester wants to pick everything from\nher lettuce garden. Each plant will now have more than one head of lettuce\non it, so the farmer will need to keep picking while there is still lettuce\ngrowing.  \\r\n\\r\n##### (Remember: This garden only has lettuce!)"
      courseD_farmer_condLoops4_2018_markdown_instruction: "*\"Gosh! Now the lettuce\nis growing in clusters!\"*  \\r\n\\r\nThe harvester wants to pick everything\nfrom her lettuce garden. Each plant will now have more than one head of lettuce\non it, so the harvester will need to keep picking while there is still lettuce\ngrowing.  \\r\n\\r\n##### (Remember: This garden only has lettuce!)"
      courseD_farmer_condLoops4a_markdown_instruction: "*\"Gosh! Now the crops are\ngrowing in clusters!\"*  \\r\n\\r\nHelp the farmer pick all of the lettuce in\neach cluster before moving on to the next bunch. Keep it up until you get\nto the pumpkin!"
      courseD_farmer_condLoops5_markdown_instruction: "*\"What a bountiful crop!\"*\\r\n\\r\nThis\nfield has clusters of corn and lettuce growing together -- with one pumpkin\nat the end.  Can you harvest everything?"
      courseD_farmer_condLoops5_2018_markdown_instruction: "*\"What a bountiful crop!\"*\\r\n\\r\nThis\nfield has clusters of corn and lettuce growing together -- with one pumpkin\nat the end.  Can you harvest everything?"
      courseD_farmer_condLoops6_markdown_instruction: "*\"Let's take this one step\nfurther!\"*\\r\n\\r\nCan you figure out how to pick the pumpkin?  Make sure\nto collect all of the corn along the way!"
      courseD_farmer_condLoops6_2018_markdown_instruction: "*\"Let's take this one\nstep further!\"*\\r\n\\r\nCan you figure out how to pick the pumpkin?  Make\nsure to collect all of the corn along the way!"
      courseD_farmer_condLoops7_markdown_instruction: "**Challenge:** Collect all\nof the corn and lettuce, then pick the pumpkin."
      courseD_farmer_condLoops7_2018_markdown_instruction: "**Challenge:** Collect\nall of the corn and lettuce, then pick the pumpkin."
      courseD_farmer_condLoops8_markdown_instruction: "Collect all of the corn and\nlettuce, then pick the pumpkin."
      courseD_farmer_condLoops8_2018_markdown_instruction: "Collect all of the corn\nand lettuce, then pick the pumpkin."
      courseD_farmer_condLoops9_markdown_instruction: "Collect all of the corn and\nlettuce, then pick the pumpkin."
      courseD_farmer_condLoops9_2018_markdown_instruction: "Collect all of the corn\nand lettuce, then pick the pumpkin."
      courseD_farmer_condLoops9_predict1_markdown_instruction: "Collect all of the\ncorn and lettuce, then pick the pumpkin."
      courseD_farmer_condLoops9_predict1_2018_markdown_instruction: "Collect all\nof the corn and lettuce, then pick the pumpkin."
      courseD_farmer_condLoops_challenge1_markdown_instruction: "The pumpkins mark\nthe place where you should `turn right`. Otherwise keep going forward, but\nremember to collect all of the lettuce or corn along the way. \\r\n\\r\n**Each\nhidden crop has only one corn or lettuce.**"
      courseD_farmer_condLoops_challenge1_2018_markdown_instruction: "The pumpkins\nmark the place where you should `turn right`. Otherwise keep going forward,\nbut remember to collect all of the lettuce or corn along the way. \\r\n\\r\n**Each\nhidden crop has only one corn or lettuce.**"
      courseD_farmer_condLoops_challenge2_markdown_instruction: "*\"It's a very\nvaried vegetable maze!\"* \\r\n\\r\nTurn right at pumpkins, turn left at lettuce.\nCollect everything to complete the level."
      courseD_farmer_condLoops_challenge2_2018_markdown_instruction: "*\"It's a\nvery varied vegetable maze!\"* \\r\n\\r\nTurn right at pumpkins, turn left at\nlettuce. Collect everything to complete the level."
      courseD_farmer_condLoops_challenge2_clone_markdown_instruction: "It's a vegetable\nmaze. Turn right at pumpkins, turn left at the lettuce. Collect everything\nto complete the level."
      courseD_farmer_conditionals1_markdown_instruction: "*\"Hi, I'm a farmer. I\nneed your help to flatten the field on my farm so it's ready for planting!\"*  \\r\n\\r\nMove\nto the pile of dirt and use the `remove` block to remove it."
      courseD_farmer_conditionals3_markdown_instruction: "*\"Move to the pile of\ndirt and tell me how many shovelfuls to remove.\"*\\r\n\\r\nUse as few blocks\nas possible to solve this puzzle."
      courseD_farmer_conditionals4_markdown_instruction: "*\"I don't know how much\ndirt is in this pile!\"*\\r\n\\r\nHelp the farmer remove this entire pile using\na `while` loop."
      courseD_farmer_conditionals6_markdown_instruction: "Look at all of those holes!  Each\none needs a different amount of dirt.   \\r\n\\r\nYou can use the `while` loop\nto easily fill them all!"
      courseD_farmer_conditionals8_markdown_instruction: "**Challenge:** Fill all\nof these holes using as few blocks as possible. "
      courseD_farmer_until_challenge2_markdown_instruction: "Use `If/Else` blocks\nto follow the curvy path. At each corner, use the `remove 1` block in a loop\nto clear the piles."
      courseD_farmer_until_challenge2_2018_markdown_instruction: "Use `If/Else` blocks\nto follow the curvy path. At each corner, use the `remove 1` block in a loop\nto clear the piles."
      courseD_farmer_while1_markdown_instruction: "*\"Hi, I'm a farmer. I need your\nhelp to flatten the field on my farm so it's ready for planting!\"*  \\r\n\\r\nMove\nto the pile of dirt and use the `remove` block to remove it."
      courseD_farmer_while1_2018_markdown_instruction: "*\"Hi, I'm a farmer. I need\nyour help to flatten the field on my farm so it's ready for planting!\"*  \\r\n\\r\nMove\nto the pile of dirt and use the `remove` block to remove it."
      courseD_farmer_while3_markdown_instruction: "*\"Move to the pile of dirt and\ntell me how many shovelfuls to remove.\"*\\r\n\\r\nUse as few blocks as possible\nto solve this puzzle."
      courseD_farmer_while3_2018_markdown_instruction: "*\"Move to the pile of dirt\nand tell me how many shovelfuls to remove.\"*\\r\n\\r\nUse as few blocks as\npossible to solve this puzzle."
      courseD_farmer_while4_markdown_instruction: "*\"I don't know how much dirt\nis in this pile!\"*\\r\n\\r\nHelp the farmer remove this entire pile using a\n`while` loop."
      courseD_farmer_while4_2018_markdown_instruction: "*\"I don't know how much\ndirt is in this pile!\"*\\r\n\\r\nHelp the farmer remove this entire pile using\na `while` loop."
      courseD_farmer_while4_predict1_markdown_instruction: "*\"I don't know how\nmuch dirt is in this pile!\"*\\r\n\\r\nHelp the farmer remove this entire pile\nusing a `while` loop."
      courseD_farmer_while4_predict1_2018_markdown_instruction: "*\"I don't know\nhow much dirt is in this pile!\"*\\r\n\\r\nHelp the farmer remove this entire\npile using a `while` loop."
      courseD_farmer_while6_markdown_instruction: "Look at all of those holes!  Each\none needs a different amount of dirt.   \\r\n\\r\nYou can use the `while` loop\nto easily fill them all!"
      courseD_farmer_while6_2018_markdown_instruction: "Look at all of those holes!  Each\none needs a different amount of dirt.   \\r\n\\r\nYou can use the `while` loop\nto easily fill them all!"
      courseD_farmer_while8_markdown_instruction: "**Challenge:** Fill all of these\nholes using as few blocks as possible. "
      courseD_farmer_while8_2018_markdown_instruction: "**Challenge:** Fill all of\nthese holes using as few blocks as possible. "
      courseD_farmer_while_challenge1_markdown_instruction: "Fill all of the holes\nand remove all of the piles."
      courseD_farmer_while_challenge1_2018_markdown_instruction: "Fill all of the\nholes and remove all of the piles."
      courseD_farmer_while_challenge2_markdown_instruction: "Fill all of the holes\nand remove all of the piles."
      courseD_farmer_while_challenge2_2018_markdown_instruction: "Fill all of the\nholes and remove all of the piles."
      courseD_harvester_nested_loops_challenge1-broken_markdown_instruction: "*\"I\nneed some help on the farm! Help me harvest this corn using only the blocks\nin your toolbox.\"*"
      courseD_harvester_nested_loops_challenge1_markdown_instruction: "*\"I need\nsome help on the farm! Help me harvest this corn using only the blocks in\nyour toolbox.\"*"
      courseD_harvester_nested_loops_challenge1_2018_markdown_instruction: "*\"I\nneed some help on the farm! Help me harvest this corn using only the blocks\nin your toolbox.\"*"
      courseD_iceage_loops1_markdown_instruction: "Help Scrat across the slippery\nice to get to the acorn!"
      courseD_iceage_loops10_markdown_instruction: "Help Scrat get all the way over\nto the acorn!"
      courseD_iceage_loops11_markdown_instruction: "Help Scrat get to the acorn!"
      courseD_iceage_loops12_markdown_instruction: "Get to the acorn any way you\ncan!"
      courseD_iceage_loops2_markdown_instruction: "Use a <xml><block type=\"maze_turn\">\\r\n    <title\nname=\"DIR\">turnLeft</title>\\r\n  </block></xml> block to get to the acorn!"
      courseD_iceage_loops3_markdown_instruction: "Can you get to the acorn with\njust one <xml><block type=\"maze_moveForward\"/></xml> block? Try using a\nloop!"
      courseD_iceage_loops4_markdown_instruction: "Add one more block to get Scrat\nall the way to the acorn!"
      courseD_iceage_loops6_markdown_instruction: "Can you add a loop to get to the\nacorn?"
      courseD_iceage_loops7_markdown_instruction: "Scrat really wants that acorn!\n"
      courseD_iceage_loops8_markdown_instruction: "Can you fix this code? "
      courseD_iceage_loops9_markdown_instruction: "The acorn is so far away! Can\nyou use loops to help Scrat get there?"
      courseD_maze_loops_challenge1_markdown_instruction: "Let's hunt for treasure\n- using loops! Help the collector reach at least two piles of treasure using\nonly the blocks in your toolbox."
      courseD_maze_nestedLoops3_markdown_instruction: "*\"Zombie hungry!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using the fewest number of blocks possible."
      courseD_maze_nestedLoops3_2018_markdown_instruction: "*\"Zombie hungry!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using the fewest number of blocks possible."
      courseD_maze_nestedLoops4_markdown_instruction: "Get the zombie to the sunflower\nusing the fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_markdown_instruction: "Get the zombie to the\nsunflower using the fewest blocks possible!  "
      courseD_maze_nestedLoops6_markdown_instruction: "*\"Must eat sunflower!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using only the blocks available."
      courseD_maze_nestedLoops6_2018_markdown_instruction: "*\"Must eat sunflower!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using only the blocks available."
      courseD_maze_ramp1_markdown_instruction: "For this puzzle, snap all of the\nblocks together and click \"Run\" to watch it go!"
      courseD_maze_ramp1_2018_markdown_instruction: "For this puzzle, snap all of\nthe blocks together and click \"Run\" to watch it go!"
      courseD_maze_ramp2_markdown_instruction: "Drag an extra `move forward` block\nout of the toolbox, then attach all blocks to `when run` to finish your code."
      courseD_maze_ramp2_2018_markdown_instruction: "Drag an extra `move forward`\nblock out of the toolbox, then attach all blocks to `when run` to finish your\ncode."
      courseD_maze_ramp3_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by removing it from the other blocks and dragging it back to the toolbox."
      courseD_maze_ramp3_2018_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by removing it from the other blocks and dragging it back to the toolbox."
      courseD_maze_ramp4_markdown_instruction: "*\"Trace the path and lead me to\nthe silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseD_maze_ramp4_2018_markdown_instruction: "*\"Trace the path and lead me\nto the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseD_maze_ramp5_markdown_instruction: "*\"Follow this path to get me to\nthe pig!\"*\\r\n\\r\nAvoid the TNT."
      courseD_maze_ramp5_2018_markdown_instruction: "*\"Follow this path to get me\nto the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseD_maze_ramp5a_markdown_instruction: "Pay attention to the sequence and\nsee if you can figure out how to get to that pig!"
      courseD_maze_ramp5a_2018_markdown_instruction: "Pay attention to the sequence\nand see if you can figure out how to get to that pig!"
      courseD_maze_ramp5b_markdown_instruction: "**Challenge:** Navigate this maze\nto help the bird find the pig!"
      courseD_maze_ramp5b_2018_markdown_instruction: "**Challenge:** Navigate this\nmaze to help the bird find the pig!"
      courseD_maze_ramp5c_markdown_instruction: "Help the bird get to the pig."
      courseD_maze_ramp5c_2018_markdown_instruction: "Help the bird get to the pig."
      courseD_maze_ramp5d_markdown_instruction: "Get the bird to the pig."
      courseD_maze_ramp5d_2018_markdown_instruction: "Get the bird to the pig."
      courseD_maze_ramp6_markdown_instruction: "*\"Keep calm and help me find the\nbad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several of the\nsame block in a row, try using a `repeat` loop, instead.  This will do the\nsame thing with less code!"
      courseD_maze_ramp6a_markdown_instruction: "*\"Keep calm and help me find the\nbad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several of the\nsame blocks in a row, try using a `repeat` loop, instead.  This will do the\nsame thing with less code!"
      courseD_maze_ramp7_markdown_instruction: "*\"It's time to get angry!\"*  \\r\n\\r\n\\r\nUse\nwhat you've learned to get the bird to the pig!"
      courseD_maze_until10_markdown_instruction: "Help the zombie get to the sunflower."
      courseD_maze_until10_2018_markdown_instruction: "Help the zombie get to the\nsunflower."
      courseD_maze_until10_predict2_markdown_instruction: "Help the zombie get to\nthe sunflower."
      courseD_maze_until10_predict2_2018_markdown_instruction: "Help the zombie get\nto the sunflower."
      courseD_maze_until2_markdown_instruction: "Now, use the `repeat until` loop\nto do the same thing without specifying how many times to move forward and\nturn."
      courseD_maze_until4_markdown_instruction: "*\"Dear person. Me zombie. Me hungry.\nMust... get... to sunflower...\"*\\r\n\\r\nCan you get the zombie to the sunflower\nusing only the blocks that are available?"
      courseD_maze_until4_2018_markdown_instruction: "*\"Dear person. Me zombie.\nMe hungry. Must... get... to sunflower...\"*\\r\n\\r\nCan you get the zombie\nto the sunflower using only the blocks that are available?"
      courseD_maze_until5_markdown_instruction: "Use the `if` block to help the zombie\ndecide when to turn, then get the zombie to the sunflower."
      courseD_maze_until5_2018_markdown_instruction: "Use the `if` block to help\nthe zombie decide when to turn, then get the zombie to the sunflower."
      courseD_maze_until6_markdown_instruction: "Help the zombie get to the sunflower."
      courseD_maze_until6_2018_markdown_instruction: "Help the zombie get to the\nsunflower."
      courseD_maze_until7_markdown_instruction: "Help the zombie get to the sunflower."
      courseD_maze_until7_2018_markdown_instruction: "Help the zombie get to the\nsunflower."
      courseD_maze_until8_markdown_instruction: "Help the zombie get to the sunflower."
      courseD_maze_until8_2018_markdown_instruction: "Help the zombie get to the\nsunflower."
      courseD_maze_until9_markdown_instruction: "**Challenge:** Avoid the chompers\nand help the zombie get to the sunflower."
      courseD_maze_until9_2018_markdown_instruction: "**Challenge:** Avoid the chompers\nand help the zombie get to the sunflower."
      courseD_maze_until_challenge_markdown_instruction: "No hints, just challenge.\nGet the zombie to the sunflower.\\r\nMarkdown instructions"
      courseD_maze_until_challenge1-delete-this-copy_markdown_instruction: "No hints,\njust challenge. Get the zombie to the sunflower.\\r\nMarkdown instructions"
      courseD_maze_until_challenge1_markdown_instruction: "No hints, just challenge.\nGet the zombie to the sunflower."
      courseD_maze_until_challenge1_2018_markdown_instruction: "No hints, just challenge.\nGet the zombie to the sunflower."
      courseD_maze_until_challenge2_markdown_instruction: "No hints, just challenge.\nGet the zombie to the sunflower.\\r\nMarkdown instructions"
      courseD_pixelation_markdown_instruction: "# Make your own image of any size\\r\n\\r\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r\n\\r\n\\r\n**Directions:**\\r\n\\r\n*\nEncode an image of anything you like using `binary`. Type 0s and 1s below\nto create an image.\\r\n* You might want to do some planning and sketching\nwith graph paper first.\\r\n* Get creative! What kind of drawing can you create?"
      courseD_playLab_cond1_markdown_instruction: "To start our game, Pirate Pegleg\n(actor 1) needs to be able to get around in all directions.   Connect the\nblocks to the correct events to get Pegleg moving.  \\r\n\\r\n---\\r\nHelp Pegleg\ngather the flags to solve this puzzle."
      courseD_playLab_cond1_2018_markdown_instruction: "To start our game, Pirate\nPegleg (actor 1) needs to be able to get around in all directions.   Connect\nthe blocks to the correct events to get Pegleg moving.  \\r\n\\r\n---\\r\nHelp\nPegleg gather the flags to solve this puzzle."
      courseD_playLab_cond2_markdown_instruction: "Time to add points!  \\r\n\\r\nEdit\nthe code to give Pegleg (actor 1) a point when he makes it to the dragon (actor\n2). "
      courseD_playLab_cond2_2018_markdown_instruction: "Time to add points!  \\r\n\\r\nEdit\nthe code to give Pegleg (actor 1) a point when he makes it to the dragon (actor\n2). "
      courseD_playLab_cond3_markdown_instruction: "Use a `repeat forever` loop to\nmake the dragon (actor 2) change between random emotions every second.  "
      courseD_playLab_cond3_2018_markdown_instruction: "Use a `repeat forever` loop\nto make the dragon (actor 2) change between random emotions every second.  "
      courseD_playLab_cond3a_markdown_instruction: "It's time to use what we've\nlearned about conditionals to make this game amazing. \\r\n\\r\nAdd code so\nthat when Pegleg gets to the dragon, he gets two points *if* the dragon is\nhappy. Otherwise, he should get only one point added to his score."
      courseD_playLab_cond3a_2018_markdown_instruction: "It's time to use what we've\nlearned about conditionals to make this game amazing. \\r\n\\r\nAdd code so\nthat when Pegleg gets to the dragon, he gets two points *if* the dragon is\nhappy. Otherwise, he should get only one point added to his score."
      courseD_playLab_cond3b_markdown_instruction: "Use a `repeat forever` loop to\nmake the dragon (actor 2) move up and down forever! Add a `wait for 1 second`\nblock in between the `move up` and `move down` blocks for the dragon."
      courseD_playLab_cond4_markdown_instruction: "This is about to get interesting!\\r\n\\r\nAdd\nsome code so that the ninja (actor 3) starts chasing Pegleg as soon as the\ngame begins.  End the game as a loss if the ninja catches him."
      courseD_playLab_cond4_2018_markdown_instruction: "This is about to get interesting!\\r\n\\r\nAdd\nsome code so that the ninja (actor 3) starts chasing Pegleg as soon as the\ngame begins.  End the game as a loss if the ninja catches him."
      courseD_playLab_cond5_markdown_instruction: "Now we need a way to win.\\r\n\\r\nAdd\na `repeat forever` loop that continuously checks **if** the score is greater\nthan 5, then ends the game as a **win** when it is."
      courseD_playLab_cond5_2018_markdown_instruction: "Now we need a way to win.\\r\n\\r\nAdd\na `repeat forever` loop that continuously checks **if** the score is greater\nthan 5, then ends the game as a **win** when it is."
      courseD_playLab_cond6_markdown_instruction: "Wow, this game is hard to win!\\r\n\\r\nLet's\ncustomize this game to make it more fun.  This challenge has two parts:\\r\n___\\r\n\\r\n1)  Slow\ndown the ninja (actor 3) before you set him to chase the pirate (actor 1).  \\r\n\\r\n2)  Use\na `repeat forever` loop to check to see if the pirate is in the \"safe zone\"\nbeneath the line of octopuses (greater than 225 pixels down).  If he is, set\nthe ninja to **flee** the pirate.  Otherwise, set the ninja to **chase** the\npirate.  "
      courseD_playLab_cond6_2018_markdown_instruction: "Wow, this game is hard to\nwin!\\r\n\\r\nLet's customize this game to make it more fun.  This challenge\nhas two parts:\\r\n___\\r\n\\r\n1)  Slow down the ninja (actor 3) before you\nset him to chase the pirate (actor 1).  \\r\n\\r\n2)  Use a `repeat forever`\nloop to check to see if the pirate is in the \"safe zone\" beneath the line\nof octopuses (greater than 225 pixels down).  If he is, set the ninja to **flee**\nthe pirate.  Otherwise, set the ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_markdown_instruction: "We don't want the pirate to\nstay in the \"safe zone\" too long!  \\r\n\\r\nAdd code to the `if` statement\nbelow so that if the pirate (actor 1) is in the safe zone, the program will\nwait one second, then deduct a point as long as he stays beneath the octopus\nline."
      courseD_playLab_cond6a_2018_markdown_instruction: "We don't want the pirate\nto stay in the \"safe zone\" too long!  \\r\n\\r\nAdd code to the `if` statement\nbelow so that if the pirate (actor 1) is in the safe zone, the program will\nwait one second, then deduct a point as long as he stays beneath the octopus\nline."
      courseD_playLab_cond6cloneForTest_markdown_instruction: "Can we make this work?"
      courseD_scrat_ramp1_markdown_instruction: "For this puzzle, snap all of the\nblocks together and click \"Run\" to watch it go!"
      courseD_scrat_ramp1_2018_markdown_instruction: "For this puzzle, snap all of\nthe blocks together and click \"Run\" to watch it go!"
      courseD_scrat_ramp2_markdown_instruction: "Drag an extra `move forward` block\nout of the toolbox, then attach all blocks to `when run` to finish your code."
      courseD_scrat_ramp2_2018_markdown_instruction: "Drag an extra `move forward`\nblock out of the toolbox, then attach all blocks to `when run` to finish your\ncode."
      courseD_scrat_ramp3_markdown_instruction: "There is one extra block that is\ngoing to cause Scrat to crash.  \\r\nThrow it away by disconnecting it from\nthe other blocks and dragging it back to the toolbox."
      courseD_scrat_ramp3_2018_markdown_instruction: "There is one extra block that\nis going to cause Scrat to crash.  \\r\nThrow it away by disconnecting it from\nthe other blocks and dragging it back to the toolbox."
      courseD_scrat_ramp4_markdown_instruction: "Avoid the cracked ice to keep Scrat\nsafe!"
      courseD_scrat_ramp4_2018_markdown_instruction: "Avoid the cracked ice to keep\nScrat safe!"
      courseD_scrat_ramp5_markdown_instruction: "Avoid the cracked ice!"
      courseD_scrat_ramp5_2018_markdown_instruction: "Avoid the cracked ice!"
      courseD_scrat_ramp6_markdown_instruction: "Help Scrat get to the acorn using\na loop!"
      courseD_scrat_ramp6_2018_markdown_instruction: "Help Scrat get to the acorn\nusing a loop!"
      courseD_scrat_ramp7_markdown_instruction: "Help Scrat get to the acorn!"
      courseD_scrat_ramp7_2018_markdown_instruction: "Help Scrat get to the acorn!"
      courseD_scrat_ramp8_markdown_instruction: "**Challenge:** Use what you've\nlearned to get Scrat to the acorn!"
      courseD_scrat_ramp8_2018_markdown_instruction: "**Challenge:** Use what you've\nlearned to get Scrat to the acorn!"
      courseE_artist_concept1_markdown_instruction: "Recreate this image. \\r\n\\r\n-\nThe hexagons have sides of 50 pixels\\r\n- The hexagons are 100 pixels apart\\r\n-\nThe pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels."
      courseE_artist_concept1_2018_markdown_instruction: "Recreate this image. \\r\n\\r\n-\nThe hexagons have sides of 50 pixels\\r\n- The hexagons are 100 pixels apart\\r\n-\nThe pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels."
      courseE_artist_concept4_markdown_instruction: "Recreate this drawing. \\r\n\\r\nEach\nsquare has a side length of **20 pixels** and there are **15 squares per row**."
      courseE_artist_concept4_2018_markdown_instruction: "Recreate this drawing.\n\\r\n\\r\nEach square has a side length of **20 pixels** and there are **15\nsquares per row**."
      courseE_artist_concept_challenge1_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow for a challenge!\\r\n\\r\nHere is a design that\nuses only blocks that you have already been shown.  Can you figure out how\nto recreate it?  Feel free to use trial and error. You don't have to draw\nit perfectly the first time."
      courseE_artist_concept_challenge1_2018_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow for a challenge!\\r\n\\r\nHere is a design that\nuses only blocks that you have already been shown.  Can you figure out how\nto recreate it?  Feel free to use trial and error. You don't have to draw\nit perfectly the first time."
      courseE_artist_concept_challenge2_markdown_instruction: "Create five pinwheel\ndesigns using the code below."
      courseE_artist_concept_challenge2_2018_markdown_instruction: "Create five pinwheel\ndesigns using the code below."
      courseE_artist_functions1_markdown_instruction: "*\"Me zombie artist. Me love\ndrawing!\"*\\r\n\\r\nHelp the zombie draw glasses using squares with sides of\n100 pixels.  \\r\nThe bridge between the glasses is 75 pixels long.\\r\n\\r\n"
      courseE_artist_functions10_markdown_instruction: "This time, use lines of 8\nhexagons with 25 pixel sides.\\r\n\\r\n- To make each hexagon, repeat the side\n6 times, turning 60 degrees.\\r\n- Jump 25 pixels between each hexagon.\\r\n-\nTo draw a diamond, you will need to alternate between turning 60 degrees and\n120 degrees."
      courseE_artist_functions10_2018_markdown_instruction: "This time, use lines\nof 8 hexagons with 25 pixel sides.\\r\n\\r\n- To make each hexagon, repeat the\nside 6 times, turning 60 degrees.\\r\n- Jump 25 pixels between each hexagon.\\r\n-\nTo draw a diamond, you will need to alternate between turning 60 degrees and\n120 degrees."
      courseE_artist_functions1_2018_markdown_instruction: "*\"Me zombie artist.\nMe love drawing!\"*\\r\n\\r\nHelp the zombie draw glasses using squares with\nsides of 100 pixels.  \\r\nThe bridge between the glasses is 75 pixels long.\\r\n\\r\n"
      courseE_artist_functions2_markdown_instruction: "Functions let you define new\nblocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into a\nfunction called `draw a square`. This time, use the `draw a square` function\nto create the glasses. \\r\n___\\r\n\\r\nThe squares are 75 pixels apart."
      courseE_artist_functions2_2018_markdown_instruction: "Functions let you define\nnew blocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into\na function called `draw a square`. This time, use the `draw a square` function\nto create the glasses. \\r\n___\\r\n\\r\nThe squares are 75 pixels apart."
      courseE_artist_functions3_markdown_instruction: "We will come back to functions\nshortly. Let's take a break to practice making this star. \\r\n\\r\nYou can\nmake this drawing by adding a repeat block."
      courseE_artist_functions3_2018_markdown_instruction: "We will come back to\nfunctions shortly. Let's take a break to practice making this star. \\r\n\\r\nYou\ncan make this drawing by adding a repeat block."
      courseE_artist_functions4_markdown_instruction: "Now that you can draw a star,\ntry drawing four stars!\\r\n\\r\n- Each branch of the star is 25 pixels long\\r\n-\nTurn 45 degrees between branches\\r\n- Jump 100 pixels between each star"
      courseE_artist_functions4_2018_markdown_instruction: "Now that you can draw\na star, try drawing four stars!\\r\n\\r\n- Each branch of the star is 25 pixels\nlong\\r\n- Turn 45 degrees between branches\\r\n- Jump 100 pixels between each\nstar"
      courseE_artist_functions5_markdown_instruction: "When is drawing three stars\nharder than drawing four? When you also have to jump over the moon!\\r\n\\r\nDraw\nonly those three stars to finish this puzzle."
      courseE_artist_functions5_2018_markdown_instruction: "When is drawing three\nstars harder than drawing four? When you also have to jump over the moon!\\r\n\\r\nDraw\nonly those three stars to finish this puzzle."
      courseE_artist_functions6_markdown_instruction: "You are doing great! \\r\n\\r\nMake\nthis window by drawing a square, then turning 90 degrees before drawing another,\nand so on."
      courseE_artist_functions6_2018_markdown_instruction: "You are doing great!\n\\r\n\\r\nMake this window by drawing a square, then turning 90 degrees before\ndrawing another, and so on."
      courseE_artist_functions7_markdown_instruction: "Let's take the code for the\nwindow and add it to function `draw a window`. Now, we can call the function\nany time we need to draw a window without having to write the code again.\n\\r\n\\r\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\\r\n\\r\nTry\nsolving this puzzle by creating `draw a window` and calling it five times.\nWatch out for the door!\\r\n\\r\n- The top windows are 50 pixels away from each\nother.  \\r\n- The bottom windows are 100 pixels below the top set."
      courseE_artist_functions7_2018_markdown_instruction: "Let's take the code\nfor the window and add it to function `draw a window`. Now, we can call the\nfunction any time we need to draw a window without having to write the code\nagain. \\r\n\\r\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\\r\n\\r\nTry\nsolving this puzzle by creating `draw a window` and calling it five times.\nWatch out for the door!\\r\n\\r\n- The top windows are 50 pixels away from each\nother.  \\r\n- The bottom windows are 100 pixels below the top set."
      courseE_artist_functions8_markdown_instruction: "**Challenge:** Did you know\nthat you can call functions from *inside* other functions?!\\r\n\\r\nCreate\nas many functions as you think you need to make this drawing of 50 pixel squares."
      courseE_artist_functions8_2018_markdown_instruction: "**Challenge:** Did you\nknow that you can call functions from *inside* other functions?!\\r\n\\r\nCreate\nas many functions as you think you need to make this drawing of 50 pixel squares."
      courseE_artist_functions9_markdown_instruction: "Create this image using the\nlimited blocks provided. \\r\n\\r\n- Each triangle has sides of **50 pixels**  \\r\n-\nTo draw a diamond, you will need to alternate between turning **60 degrees\nand 120 degrees**."
      courseE_artist_functions9_2018_markdown_instruction: "Create this image using\nthe limited blocks provided. \\r\n\\r\n- Each triangle has sides of **50 pixels**  \\r\n-\nTo draw a diamond, you will need to alternate between turning **60 degrees\nand 120 degrees**."
      courseE_artist_functions_challenge_markdown_instruction: "Once you define a\nfunction, you can call it over and over again - whenever and wherever you\nwant! Try this code to see how it works, then change it to make your own impressive\ndesign!"
      courseE_artist_functions_challenge1_markdown_instruction: "Once you define\na function, you can call it over and over again - whenever and wherever you\nwant! Try this code to see how it works, then change it to make your own impressive\ndesign!"
      courseE_artist_functions_challenge1_2018_markdown_instruction: "Once you define\na function, you can call it over and over again - whenever and wherever you\nwant! Try this code to see how it works, then change it to make your own impressive\ndesign!"
      courseE_artist_functions_challenge2_markdown_instruction: "Not only can you\njump to some pre-set locations, like the corners of the canvas, you can also\nuse a `jump to` command to get to absolutely any spot you like! Try this code\nto see how it works, then make the program your own!\\r\n<xml>\\r\n  <block\ntype=\"jump_to_xy\">\\r\n    <title name=\"XPOS\">???</title>\\r\n    <title\nname=\"YPOS\">???</title>\\r\n    </block></xml>"
      courseE_artist_functions_challenge2_2018_markdown_instruction: "Not only can\nyou jump to some pre-set locations, like the corners of the canvas, you can\nalso use a `jump to` command to get to absolutely any spot you like! Try this\ncode to see how it works, then make the program your own!\\r\n<xml>\\r\n  <block\ntype=\"jump_to_xy\">\\r\n    <title name=\"XPOS\">???</title>\\r\n    <title\nname=\"YPOS\">???</title>\\r\n    </block></xml>"
      courseE_artist_functions_predict1_markdown_instruction: "Here is a puzzle that\nuses a function that we have defined. \\r\n"
      courseE_artist_functions_predict1_2018_markdown_instruction: "Here is a puzzle\nthat uses a function that we have defined. "
      courseE_artist_ramp10_markdown_instruction: "Did you know you can put loops\ninside of other loops to make them more powerful?  That's called making a\n\"nested loop\".\\r\n\\r\n___\\r\n\\r\nDrag the code for the last triangle into\na new loop to spin it around and make a snowflake!\\r\n\\r\n*(You will need\nto spin it 6 times, turning 60 degrees each time, to get this pattern.)*"
      courseE_artist_ramp11_markdown_instruction: "Great!  Now let's make a square\nusing Artist!  The blocks are a little different, but the idea is the same.\\r\n<hr/>\\r\nEach\nside of the square has a length of 200 pixels, and you will need to turn 90\ndegrees to make each angle."
      courseE_artist_ramp12_markdown_instruction: "Use what you've learned to draw\nthis triangle inside of a square.\\r\n<hr/>\\r\nThe sides are each 200 pixels\nlong. You will need to turn 90 degrees to make the square and 120 degrees\nto make the triangle."
      courseE_artist_ramp8_markdown_instruction: "Great!  Now let's use that `repeat`\nloop to make a square using Artist!  The blocks for artist are a little different\nthan other puzzles, but the idea is the same.\\r\n___\\r\n##### Each side of\nthe square has a length of 200 pixels, and you will need to turn 90 degrees\nto make each angle."
      courseE_artist_ramp8_2_markdown_instruction: "Great!  Now let's use that `repeat`\nloop to make a square using Artist!  The blocks for artist are a little different\nthan other puzzles, but the idea is the same.\\r\n___\\r\n##### Each side of\nthe square has a length of 200 pixels, and you will need to turn 90 degrees\nto make each angle."
      courseE_artist_ramp8_2018_markdown_instruction: "Great!  Now let's use that\n`repeat` loop to make a square using Artist!  The blocks for artist are a\nlittle different than other puzzles, but the idea is the same.\\r\n___\\r\n#####\nEach side of the square has a length of 200 pixels, and you will need to turn\n90 degrees to make each angle."
      courseE_artist_ramp8_2_2018_markdown_instruction: "Great!  Now let's use that\n`repeat` loop to make a square using Artist!  The blocks for artist are a\nlittle different than other puzzles, but the idea is the same.\\r\n___\\r\n#####\nEach side of the square has a length of 200 pixels, and you will need to turn\n90 degrees to make each angle."
      courseE_artist_ramp9_markdown_instruction: "Use what you've learned to draw\nthis triangle.\\r\n___\\r\n##### The sides are each 100 pixels long. You will\nneed to turn 120 degrees at each corner."
      courseE_artist_ramp9_2_markdown_instruction: "Use what you've learned to draw\nthis triangle.\\r\n___\\r\n##### The sides are each 100 pixels long. You will\nneed to turn 120 degrees at each corner."
      courseE_artist_ramp9_2018_markdown_instruction: "Use what you've learned to\ndraw this triangle.\\r\n___\\r\n##### The sides are each 100 pixels long. You\nwill need to turn 120 degrees at each corner."
      courseE_artist_ramp9_2_2018_markdown_instruction: "Use what you've learned\nto draw this triangle.\\r\n___\\r\n##### The sides are each 100 pixels long.\nYou will need to turn 120 degrees at each corner."
      courseE_bee_concept1_markdown_instruction: "*\"Can you BEE-lieve all of these\nflowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      courseE_bee_concept1_2018_markdown_instruction: "*\"Can you BEE-lieve all of\nthese flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      courseE_bee_concept2_markdown_instruction: "Help the bee make all of the honey.  \\r\n\\r\nYou\ncan only make honey at a honeycomb, but you can check any space to see if\nthere is a honeycomb."
      courseE_bee_concept2_2018_markdown_instruction: "Help the bee make all of the\nhoney.  \\r\n\\r\nYou can only make honey at a honeycomb, but you can check\nany space to see if there is a honeycomb."
      courseE_bee_concept5_markdown_instruction: "Can you help the bee collect the\nnectar from the flowers? \\r\n\\r\nYou can only collect nectar from flowers,\nbut you can check any space to see if there is a flower."
      courseE_bee_concept5_2018_markdown_instruction: "Can you help the bee collect\nthe nectar from the flowers? \\r\n\\r\nYou can only collect nectar from flowers,\nbut you can check any space to see if there is a flower."
      courseE_bee_functions10_markdown_instruction: "*\"Show me the HONEY!\"*\\r\n\\r\nSolve\nthis puzzle by creating a function that causes the bee to: \\r\n- turn toward\nthe branch in the path\\r\n- move forward\\r\n- make all of the honey\\r\n- return\nto the main path \\r\n- turn back to the original direction"
      courseE_bee_functions10_2018_markdown_instruction: "*\"Show me the HONEY!\"*\\r\n\\r\nSolve\nthis puzzle by creating a function that causes the bee to: \\r\n- turn toward\nthe branch in the path\\r\n- move forward\\r\n- make all of the honey\\r\n- return\nto the main path \\r\n- turn back to the original direction"
      courseE_bee_functions2_markdown_instruction: "Functions are blocks of code\nthat perform a task.  \\r\n\\r\nUse the `get 2 nectar` function to collect the\nnectar from each flower."
      courseE_bee_functions2_2018_markdown_instruction: "Functions are blocks of\ncode that perform a task.  \\r\n\\r\nUse the `get 2 nectar` function to collect\nthe nectar from each flower."
      courseE_bee_functions3_markdown_instruction: "Build the `get 5` function to\nuse in this puzzle."
      courseE_bee_functions3_2018_markdown_instruction: "Build the `get 5` function\nto use in this puzzle."
      courseE_bee_functions4_markdown_instruction: "The `move and get nectar` function\nturns the bee, collects nectar, and then returns the bee to where it started.  \\r\n\\r\nUse\nthe `move and get nectar` function to collect all of the nectar."
      courseE_bee_functions4_2018_markdown_instruction: "The `move and get nectar`\nfunction turns the bee, collects nectar, and then returns the bee to where\nit started.  \\r\n\\r\nUse the `move and get nectar` function to collect all\nof the nectar."
      courseE_bee_functions8_markdown_instruction: "**Challenge:** These flowers\ncan have a different amount of nectar each time you run the puzzle.   \\r\n\\r\nCreate\na function that collects all of the nectar from each flower."
      courseE_bee_functions8_2018_markdown_instruction: "**Challenge:** These flowers\ncan have a different amount of nectar each time you run the puzzle.   \\r\n\\r\nCreate\na function that collects all of the nectar from each flower."
      courseE_bee_functions9b_markdown_instruction: "*\"I can't BEE-lieve how full\nthis field is!\"*\\r\n\\r\nLook very carefully at this puzzle to see if you\ncan use what you learned to solve it."
      courseE_bee_functions_challenge1_markdown_instruction: "You are on your own\nfor this challenge.  This could \"bee\" harder than it looks!"
      courseE_bee_functions_challenge1_2018_markdown_instruction: "You are on your\nown for this challenge.  This could \"bee\" harder than it looks!"
      courseE_bee_ramp14_markdown_instruction: "The same technique works with nectar\nand honey!  \\r\n\\r\nLook at all of these clouds. Some of them will turn into\nhoney, and others into nectar.   \\r\nHelp the bee follow the path and solve\nthis puzzle.\\r\n\\r\n\\r\n\\r\n"
      courseE_bee_ramp14_2018_markdown_instruction: "The same technique works with\nnectar and honey!  \\r\n\\r\nLook at all of these clouds. Some of them will\nturn into honey, and others into nectar.   \\r\nHelp the bee follow the path\nand solve this puzzle.\\r\n\\r\n\\r\n\\r\n"
      courseE_bee_ramp17_markdown_instruction: "For the final puzzle in this stage,\nuse what you have learned to collect all of the nectar and make all of the\nhoney.  "
      courseE_collector_ramp10_markdown_instruction: "Take the same path as before,\nbut this time collect all of the treasure as you find it.\\r\n"
      courseE_collector_ramp8_markdown_instruction: "This puzzle is a lot like the\nlast one, but now it stars Laurel the Adventurer!\\r\n<hr/>\\r\n\\r\nTake the\nsame path as before, but this time, use a repeat loop to collect treasure\nwhen you get to it.\\r\n"
      courseE_collector_ramp9_markdown_instruction: "Take the same path as before,\nbut this time collect all of the treasure as you find it.\\r\n"
      courseE_farmer_concept4_markdown_instruction: "Now let's go one level deeper!\nWe've nested that whole block of code into another loop, but you need to\nget the artist back in place to draw the next line. Which of these code blocks\ncan you place at the end of the outermost loop to draw the whole grid?"
      courseE_farmer_functions1_markdown_instruction: "*\"Have we met before? I'm\nthe harvester!\"*\\r\n\\r\nHelp the harvester get to the pumpkin and pick it."
      courseE_farmer_functions10b_markdown_instruction: "Use your new function twice\nto solve this puzzle."
      courseE_farmer_functions10b_2018_markdown_instruction: "Use your new function\ntwice to solve this puzzle."
      courseE_farmer_functions11_predict_markdown_instruction: "Figure out which\nfunction to use and which one to delete, then solve this puzzle!"
      courseE_farmer_functions11_predict_2018_markdown_instruction: "Figure out which\nfunction to use and which one to delete, then solve this puzzle!"
      courseE_farmer_functions1_2018_markdown_instruction: "*\"Have we met before?\nI'm the harvester!\"*\\r\n\\r\nHelp the harvester get to the pumpkin and pick\nit."
      courseE_farmer_functions1a_markdown_instruction: "*\"Oooh, veggies are cropping\nup everywhere!\"*\\r\n\\r\nNow help the harvester pick all of the corn on the\nway to the pumpkin at the end.\\r\n___\\r\n##### Note: Every square on the path\nthat leads to the pumpkin will either have *one* corn or nothing.  You will\nneed to use an `if` statement to check whether there is corn before you try\nto pick it!"
      courseE_farmer_functions1a_2018_markdown_instruction: "*\"Oooh, veggies are\ncropping up everywhere!\"*\\r\n\\r\nNow help the harvester pick all of the corn\non the way to the pumpkin at the end.\\r\n___\\r\n##### Note: Every square on\nthe path that leads to the pumpkin will either have *one* corn nothing.  You\nwill need to use an `if` statement to check whether there is corn before you\ntry to pick it!"
      courseE_farmer_functions2a_markdown_instruction: "*\"I feel so functional!\"*\\r\n\\r\nWe're\ngoing to check lots of squares for crops in the next few puzzles.  Let's\nmove everything into a function to make it easier."
      courseE_farmer_functions2aALT_markdown_instruction: "*\"I feel so functional!\"*\\r\n\\r\nWe're\ngoing to check lots of squares for crops in the next few puzzles.  Let's\nmove everything into a function to make it easier."
      courseE_farmer_functions2b_markdown_instruction: "Help the harvester pick the\ncorn and pumpkins.\\r\n___\\r\n##### Each sprout will either grow *one* corn\nor nothing."
      courseE_farmer_functions2b_2018_markdown_instruction: "Help the harvester pick\nthe corn and pumpkins.\\r\n___\\r\n##### Each sprout will either grow *one*\ncorn or nothing."
      courseE_farmer_functions2ba_markdown_instruction: "*\"I feel so functional!\"*\\r\n\\r\nDid\nyou notice that there was repeated code in the last puzzle?  It doesn't work\nto put it all inside of a loop, but we **can** use functions.  \\r\n\\r\nFor\nthis puzzle, we have moved the repeated code into a function called `corn\nand pumpkin`. Now, all you need to do is put the small `corn and pumpkin`\n**function call block** into the code where you need it.\\r\n\\r\n___\\r\n#####\nEach sprout will either grow *one* corn or nothing."
      courseE_farmer_functions2ba_2018_markdown_instruction: "*\"I feel so functional!\"*\\r\n\\r\nDid\nyou notice that there was repeated code in the last puzzle?  It doesn't work\nto put it all inside of a loop, but we **can** use functions.  \\r\n\\r\nFor\nthis puzzle, we have moved the repeated code into a function called `corn\nand pumpkin`. Now, all you need to do is put the small `corn and pumpkin`\n**function call block** into the code where you need it.\\r\n\\r\n___\\r\n#####\nEach sprout will either grow *one* corn or nothing."
      courseE_farmer_functions3b_markdown_instruction: "*\"Oooh, veggies are cropping\nup everywhere!\"*\\r\n\\r\nNow help the farmer pick the corn, lettuce, **and**\npumpkin."
      courseE_farmer_functions3c_markdown_instruction: "Now, fill-in the function\nyourself by pulling the blocks from the code and dropping them into the **function\ndefinition**.  \\r\n\\r\nDon't forget to add the little **function call** blocks\nto use the function in your program when you're done."
      courseE_farmer_functions3c_2018_markdown_instruction: "Now, fill-in the function\nyourself by pulling the blocks from the code and dropping them into the **function\ndefinition**.  \\r\n\\r\nDon't forget to add the little **function call** blocks\nto use the function in your program when you're done."
      courseE_farmer_functions4b_markdown_instruction: "Use your new function to\nsolve this puzzle."
      courseE_farmer_functions4b_2018_markdown_instruction: "Use your new function\nto solve this puzzle."
      courseE_farmer_functions5b_markdown_instruction: "*\"They're multiplying!\"*\\r\n\\r\nThe\ncrops are now growing in clusters.  Add some new `while` loops to your function\nto make sure you get all of the produce."
      courseE_farmer_functions5c_markdown_instruction: "Your function will come in\nhandy here."
      courseE_farmer_functions5c_2018_markdown_instruction: "Your function will come\nin handy here."
      courseE_farmer_functions6b_markdown_instruction: "Pick all of the produce."
      courseE_farmer_functions6c_markdown_instruction: "*\"Lettuce pick all of the\nproduce!\"*\\r\n\\r\nNow the sprouts can be either corn **or** lettuce.  What\ndo you need to add to this program to check each sprout before you pick?\\r\n___\\r\n#####\nNote: Each sprout will turn into either **one** corn or **one** lettuce."
      courseE_farmer_functions6c_2018_markdown_instruction: "*\"Lettuce pick all\nof the produce!\"*\\r\n\\r\nNow the sprouts can be either corn **or** lettuce.  What\ndo you need to add to this program to check each sprout before you pick?\\r\n___\\r\n#####\nNote: Each sprout will turn into either **one** corn or **one** lettuce."
      courseE_farmer_functions7b_markdown_instruction: "*\"This harvest is a-MAZE-ing!\"*\\r\n\\r\nHelp\nthe harvester find her way down this confusing path and to the pumpkin by\nturning **left** at the corn and **right** at the lettuce.  \\r\n\\r\n*(Don't\nforget to collect all of the produce along the way!)*"
      courseE_farmer_functions7b_2018_markdown_instruction: "*\"This harvest is a-MAZE-ing!\"*\\r\n\\r\nHelp\nthe harvester find her way down this confusing path and to the pumpkin by\nturning **left** at the corn and **right** at the lettuce.  \\r\n\\r\n*(Don't\nforget to collect all of the produce along the way!)*"
      courseE_farmer_functions8b_markdown_instruction: "**Challenge:** Not all corners\nare marked in this maze, that means that you will need to use your navigation\ncode more than once to get where you need to go.  \\r\n\\r\nCan you figure out\nwhat you need to do?"
      courseE_farmer_functions8b_2018_markdown_instruction: "**Challenge:** Not all\ncorners are marked in this maze, that means that you will need to use your\nnavigation code more than once to get where you need to go.  \\r\n\\r\nCan you\nfigure out what you need to do?"
      courseE_farmer_functions9b_markdown_instruction: "Take a good look at this\npuzzle.  Can you figure out the pattern?"
      courseE_farmer_functions9b_2018_markdown_instruction: "Take a good look at\nthis puzzle.  Can you figure out the pattern?"
      courseE_farmer_functions9b_clone_markdown_instruction: "Take a good look at\nthis puzzle.  Can you figure out the pattern?"
      courseE_farmer_predict1_markdown_instruction: "Help the farmer walk the path\nto find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing at the\nend of every path.  If there is a path in front of her, the farmer can keep\nmoving forward.  Otherwise, she needs to pick all of the lettuce, then turn\nto stay on the path. \\r\n\\r\n\\r\n\\r\n"
      courseE_farmer_predict1_2018_markdown_instruction: "Help the farmer walk the\npath to find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing\nat the end of every path.  If there is a path in front of her, the farmer\ncan keep moving forward.  Otherwise, she needs to pick all of the lettuce,\nthen turn to stay on the path. \\r\n\\r\n\\r\n\\r\n"
      courseE_farmer_ramp11a_markdown_instruction: "Oh my!  This pile is so big that\nit's hard to guess how much dirt is in it.  \\r\n\\r\n___\\r\n\\r\nWe've added\na new block to the toolbox called the `while there is a pile` block.  Use\nthis to remove dirt only while there is still some to scoop! "
      courseE_farmer_ramp11a_2018_markdown_instruction: "Oh my!  This pile is so\nbig that it's hard to guess how much dirt is in it.  \\r\n\\r\n___\\r\n\\r\nWe've\nadded a new block to the toolbox called the `while there is a pile` block.  Use\nthis to remove dirt only while there is still some to scoop! "
      courseE_farmer_ramp11b_markdown_instruction: "Let's try that again, but with\nmore piles!"
      courseE_farmer_ramp11b_2018_markdown_instruction: "Let's try that again, but\nwith more piles!"
      courseE_farmer_ramp12_markdown_instruction: "Pick all of the lettuce."
      courseE_farmer_ramp12_2018_markdown_instruction: "Pick all of the lettuce."
      courseE_farmer_ramp12_forswap_markdown_instruction: "Pick all of the lettuce."
      courseE_farmer_ramp12_forswap_2018_markdown_instruction: "Pick all of the lettuce."
      courseE_farmer_ramp12a_markdown_instruction: "Help the farmer walk the path\nto find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing at the\nend of every path.  If there is a path in front of her, the farmer can keep\nmoving forward.  Otherwise, she needs to pick all of the lettuce, then turn\nto stay on the path. "
      courseE_farmer_ramp12a_2018_markdown_instruction: "Help the farmer walk the\npath to find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing\nat the end of every path.  If there is a path in front of her, the farmer\ncan keep moving forward.  Otherwise, she needs to pick all of the lettuce,\nthen turn to stay on the path. "
      courseE_farmer_ramp12b_markdown_instruction: "Now the harvester needs to pick\nall of the lettuce.  Use `while there is lettuce` inside of a `repeat` loop\nto get it all!"
      courseE_farmer_ramp12b_2018_markdown_instruction: "Now the harvester needs\nto pick all of the lettuce.  Use `while there is lettuce` inside of a `repeat`\nloop to get it all!"
      courseE_farmer_ramp12c_markdown_instruction: "The lettuce is now only at the\nend of the path.  \\r\nTravel down the path **until** you reach a head of lettuce,\nthen continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12c_2018_markdown_instruction: "The lettuce is now only\nat the end of the path.  \\r\nTravel down the path **until** you reach a head\nof lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12d_markdown_instruction: "The lettuce is scattered all\nover the garden.  \\r\nTravel down each path **until** you reach a head of\nlettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12d_2018_markdown_instruction: "The lettuce is scattered\nall over the garden.  \\r\nTravel down each path **until** you reach a head\nof lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12e_markdown_instruction: "The lettuce is scattered all\nover the garden.  \\r\nTravel down each path **until** you reach a head of\nlettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12e_2018_markdown_instruction: "The lettuce is scattered\nall over the garden.  \\r\nTravel down each path **until** you reach a head\nof lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12f_markdown_instruction: "**Challenge**: The only way to\nget all of the crops is to move forward until you get to the lettuce, then\nturn left **if** there is a path to the left.  Otherwise, turn right."
      courseE_farmer_ramp12f_2018_markdown_instruction: "**Challenge**: The only\nway to get all of the crops is to move forward until you get to the lettuce,\nthen turn left **if** there is a path to the left.  Otherwise, turn right."
      courseE_farmer_ramp12g_markdown_instruction: "Move forward until you get to\nthe lettuce, then turn left **if** there is a path to the left.  Otherwise,\nturn right."
      courseE_farmer_ramp12g_2018_markdown_instruction: "Move forward until you get\nto the lettuce, then turn left **if** there is a path to the left.  Otherwise,\nturn right."
      courseE_farmer_ramp13_markdown_instruction: "Goodness!  Look at all of these\nsprouts. Some of them will turn into corn, and others into lettuce.  \\r\n\\r\nTravel\nto the ends of the path to pick lettuce while there is lettuce, and pick corn\nwhile there is corn. \\r\n\\r\n"
      courseE_farmer_ramp13_2018_markdown_instruction: "Goodness!  Look at all of\nthese sprouts. Some of them will turn into corn, and others into lettuce.  \\r\n\\r\nTravel\nto the ends of the path to pick lettuce while there is lettuce, and pick corn\nwhile there is corn. \\r\n\\r\n"
      courseE_farmer_ramp15_markdown_instruction: "Solve this puzzle using only the\nblocks available.\\r\n\\r\nThis level will help give you practice with the `repeat\nuntil` block.  Collect all of the corn and lettuce until you get to the pumpkin.\n(Don't forget to collect the pumpkin, too!)"
      courseE_farmer_ramp15_2018_markdown_instruction: "Solve this puzzle using only\nthe blocks available.\\r\n\\r\nThis level will help give you practice with the\n`repeat until` block.  Collect all of the corn and lettuce until you get to\nthe pumpkin. (Don't forget to collect the pumpkin, too!)"
      courseE_farmer_ramp16_markdown_instruction: "**Challenge:** Solve this puzzle\nwith the fewest number of blocks."
      courseE_maze_ramp1_markdown_instruction: "For this puzzle, drag all of the\nblocks together and click \"Run\" to watch it go!"
      courseE_maze_ramp13_markdown_instruction: "Time for one last puzzle to pull\nit all together!\\r\n\\r\nUse nested loops to get the bird to the pig."
      courseE_maze_ramp1_2018_markdown_instruction: "For this puzzle, drag all of\nthe blocks together and click \"Run\" to watch it go!"
      courseE_maze_ramp2_markdown_instruction: "Drag an extra `move forward` block\nout of the toolbox, then attach all blocks to `when run` to finish your code."
      courseE_maze_ramp2_2018_markdown_instruction: "Drag an extra `move forward`\nblock out of the toolbox, then attach all blocks to `when run` to finish your\ncode."
      courseE_maze_ramp3_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by dragging it back to the toolbox."
      courseE_maze_ramp3_2018_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by dragging it back to the toolbox."
      courseE_maze_ramp4_markdown_instruction: "*\"Trace the path and lead me to\nthe silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseE_maze_ramp4_2018_markdown_instruction: "*\"Trace the path and lead me\nto the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseE_maze_ramp5_markdown_instruction: "*\"Follow this path to get me to\nthe pig!\"*\\r\n\\r\nAvoid the TNT."
      courseE_maze_ramp5_2018_markdown_instruction: "*\"Follow this path to get me\nto the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseE_maze_ramp6_markdown_instruction: "*\"Keep calm and help me find the\nbad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several blocks\nin a row, try moving them inside of a `repeat` loop.  This will do the same\nthing with less code!"
      courseE_maze_ramp6_2018_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several\nblocks in a row, try moving them inside of a `repeat` loop.  This will do\nthe same thing with less code!"
      courseE_maze_ramp7_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nUse what you've learned to get the bird to the pig!"
      courseE_maze_ramp7_2018_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nUse what you've learned to get the bird to the pig!"
      courseE_multi_maze_ramp5_markdown_instruction: "*\"Follow this path to get\nme to the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseE_playLab_challenge1_markdown_instruction: "*The **squirrels** are terrified\nto see that a **dinosaur** has come to town! Can the brave **knight** keep\nthem all from panicking?*\\r\n\\r\nRules:\\r\n1. *Touching the squirrels scores\nyou points.*\\r\n2. *Touching the dinosaur takes many points away.*\\r\n\\r\nHere\nis a different kind of game that has already been started for you! Play it\nto see how it works. \\r\n\\r\n\\r\nSomething should happen when you get enough\npoints or when you run out of points. Add some code to the `win game` and\n`lose game` functions to make the game work the way it should. \\r\nClick the\nhints for ideas!"
      courseE_playLab_challenge1_2018_markdown_instruction: "*The **squirrels** are\nterrified to see that a **dinosaur** has come to town! Can the brave **knight**\nkeep them all from panicking?*\\r\n\\r\nRules:\\r\n1. *Touching the squirrels\nscores you points.*\\r\n2. *Touching the dinosaur takes many points away.*\\r\n\\r\nHere\nis a different kind of game that has already been started for you! Play it\nto see how it works. \\r\n\\r\n\\r\nSomething should happen when you get enough\npoints or when you run out of points. Add some code to the `win game` and\n`lose game` functions to make the game work the way it should. \\r\nClick the\nhints for ideas!"
      courseE_playLab_scaffold1_markdown_instruction: "It is amazing how much you\nhave learned! Let's make a game step by step.\\r\n\\r\nUsing new blocks in\nyour toolbox, choose a new background, then pick an actor to be in your game."
      courseE_playLab_scaffold1_2018_markdown_instruction: "It is amazing how much\nyou have learned! Let's make a game step by step.\\r\n\\r\nUsing new blocks\nin your toolbox, choose a new background, then pick an actor to be in your\ngame."
      courseE_playLab_scaffold2_markdown_instruction: "Use  blocks like event handlers\nand actions to make your player move according to the arrows on your keyboard.  \\r\n\\r\nGet\nthe player to the targets to complete this puzzle."
      courseE_playLab_scaffold2_2018_markdown_instruction: "Use  blocks like event\nhandlers and actions to make your player move according to the arrows on your\nkeyboard.  \\r\n\\r\nGet the player to the targets to complete this puzzle."
      courseE_playLab_scaffold3_markdown_instruction: "Let's add some more characters\nto your game!\\r\n\\r\nUse the `set actor` block to add more characters then\nmove to the goal to complete this puzzle."
      courseE_playLab_scaffold3_2018_markdown_instruction: "Let's add some more\ncharacters to your game!\\r\n\\r\nUse the `set actor` block to add more characters\nthen move to the goal to complete this puzzle."
      courseE_playLab_scaffold4_markdown_instruction: "Multiple characters and getting\nthe actors moving is a great start to a game, but we need to do more to make\nthis feel like a real game. Let's add a score!\\r\n\\r\nUse event blocks like\nthe `when actor touches` to change the score. Score 10 points to complete\nthis puzzle."
      courseE_playLab_scaffold4_2018_markdown_instruction: "Multiple characters and\ngetting the actors moving is a great start to a game, but we need to do more\nto make this feel like a real game. Let's add a score!\\r\n\\r\nUse event blocks\nlike the `when actor touches` to change the score. Score 10 points to complete\nthis puzzle."
      courseE_playLab_scaffold5_markdown_instruction: "Great job! You have all the\nbasic components of a working game. Now spend some time making sure the game\nworks the way you want. Include a way to win or lose your game, then play\nuntil you meet one of those conditions."
      courseE_playLab_scaffold5_2018_markdown_instruction: "Great job! You have all\nthe basic components of a working game. Now spend some time making sure the\ngame works the way you want. Include a way to win or lose your game, then\nplay until you meet one of those conditions."
      courseE_playLab_scaffold6_markdown_instruction: "You've finished! Now you\ncan play your game or share it with your friends and classmates!"
      courseE_playLab_scaffold6_2018_markdown_instruction: "You've finished! Now\nyou can play your game or share it with your friends and classmates!"
      courseE_playlab_challenge2_markdown_instruction: "Can you figure out how this\n\"Fortune Teller\" app works? Try adding some of the following features to\nthis game:\\r\n\\r\n* Change the \"yes\" and \"no\" answers to something more\ninteresting.\\r\n* Let the player ask another question after the actor says\nthe fortune.\\r\n* Give the witch two more things to say when she is in an\n`angry` or `normal` mood.\\r\n* Give the wizard his own set of fortunes.\\r\n*\nMake each actor change mood randomly.\\r\n\\r\nCheck the hints if you need help\nwith these challenges!"
      courseE_playlab_variables_challenge2_markdown_instruction: "Can you figure\nout how this \"Fortune Teller\" app works? Try adding some of the following\nfeatures to this game:\\r\n\\r\n* Change the \"yes\" and \"no\" answers to something\nmore interesting.\\r\n* Let the player ask another question after the actor\nsays the fortune.\\r\n* Give the witch two more things to say when she is in\nan `angry` or `normal` mood.\\r\n* Give the wizard his own set of fortunes.\\r\n*\nMake each actor change mood randomly.\\r\n\\r\nCheck the hints if you need help\nwith these challenges!"
      courseF_IceAge_1_markdown_instruction: "Sid (actor 1) wants to gather everyone\nfor a new adventure. Can you help him say \"Hello!\" by dragging the `actor\n1 say` block out and connecting it to the bottom of the `when run` event?   \\r\n\\r\nDon't\nforget to type \"Hello!\" inside!"
      courseF_IceAge_10_markdown_instruction: "Sid wants to let his grandmother,\nGranny, know that he loves her.   \\r\n\\r\nUse the `actor __ throw` command\nto have Sid (actor 1) throw hearts at Granny (actor 2)! \\r\nSet Granny's\nmood to happy when she gets hit with the hearts."
      courseF_IceAge_11_markdown_instruction: "Time to create your own game or story!  \\r\n\\r\nWhen\nyou're done, click \"Finish\" to let friends try your game on their phones,\ntablets, or computers!\\r\nDon't know what to make? Click the hints for details."
      courseF_IceAge_2_markdown_instruction: "Manny (actor 2) found Sid (actor 1)\nand wants to invite him on an adventure. Help them greet each other by using\nthe the `actor ___ say` block twice."
      courseF_IceAge_3_markdown_instruction: "Scrat is looking for his acorn! Can\nyou help him move the last 200 pixels?"
      courseF_IceAge_4_markdown_instruction: "Diego (actor 1) is searching for Manny\n(actor 2). Can you help bring the two together? Connect a block to the `when\nactor touches` event to play a sound when they find each other."
      courseF_IceAge_5_markdown_instruction: "The `repeat forever` block allows you\nto run code continuously. Can you put blocks inside of it to help Granny get\nsome exercise by moving left and right repeatedly?"
      courseF_IceAge_6_markdown_instruction: "Can you help Sid call for his friends\nwhen you click on him?  \\r\n\\r\nOnce you're done, press \"Run\" to play.  Click\non Sid to see your code work!"
      courseF_IceAge_7_markdown_instruction: "Scrat is still looking for acorns!\n\\r\nHelp him scamper around by attaching a `move actor 1` block to each of\nthe events and changing the direction to work for each arrow key. \\r\nWhen\nyou’re done, click \"Run\" and try to collect all of the acorns."
      courseF_IceAge_8_markdown_instruction: "Here is your code from the last puzzle,\nas well as the code to move Granny left and right. \\r\nCan you finish the\nprogram to make it so that you both **play a sound** and **score a point**\nwhen Sid and Granny collide? \\r\nPress \"Run\" to play the game."
      courseF_IceAge_9_markdown_instruction: "Everyone needs to move faster because\nan ice storm is coming! \\r\nChange the scene to an icy background and set\nSid’s (actor 1) speed to fast.\\r\nPress \"Run\" and move Sid to Diego to warn\nhim."
      courseF_IceAge_template_markdown_instruction: "Scrat is still looking for acorns!\n\\r\nHelp him scamper around by attaching a `move actor 1` block to each of\nthe events and changing the direction to work for each arrow key. \\r\nWhen\nyou’re done, click \"Run\" and try to collect all of the acorns."
      courseF_artist_for1_markdown_instruction: "**Free Play:** Experiment with the\n`for` loop and the `counter` variable.  \\r\n\\r\nDrag out a few blocks and\nsee what happens.  \\r\n"
      courseF_artist_for10_markdown_instruction: "**Free Play:** Try using the `counter`\nvariable with other drawing elements to make magical images like this one.\\r\n\\r\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)"
      courseF_artist_for10_2018_markdown_instruction: "**Free Play:** Try using the\n`counter` variable with other drawing elements to make magical images like\nthis one.\\r\n\\r\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)"
      courseF_artist_for1_2018_markdown_instruction: "**Free Play:** Experiment with\nthe `for` loop and the `counter` variable.  \\r\n\\r\nDrag out a few blocks\nand see what happens.  \\r\n"
      courseF_artist_for2_markdown_instruction: "Use a `repeat` loop inside of a\n`for` loop to create this stack of triangles that goes from 50 pixel to 100\npixel sides."
      courseF_artist_for2_2018_markdown_instruction: "Use a `repeat` loop inside\nof a `for` loop to create this stack of triangles that goes from 50 pixel\nto 100 pixel sides."
      courseF_artist_for3_markdown_instruction: "Create these triangles that go from\n20 pixel sides to 200 pixel sides, where each triangle is 20 pixels larger\nthan the last."
      courseF_artist_for3_2018_markdown_instruction: "Create these triangles that\ngo from 20 pixel sides to 200 pixel sides, where each triangle is 20 pixels\nlarger than the last."
      courseF_artist_for5_markdown_instruction: "Just one little change to the code\nfrom the last image can create this drawing. Can you figure out what that\nchange is?\\r\n___\\r\nHint:  You need to remove something!"
      courseF_artist_for5_2018_markdown_instruction: "Just one little change to the\ncode from the last image can create this drawing. Can you figure out what\nthat change is?\\r\n___\\r\nHint:  You need to remove something!"
      courseF_artist_for6_markdown_instruction: "If you turn a little bit more or\nless than you normally would for a shape, it creates a neat effect.\\r\n\\r\nRecreate\nyour code from the last level, but turn 89 degrees to create this twisted\nsquare spiral."
      courseF_artist_for6_2018_markdown_instruction: "If you turn a little bit more\nor less than you normally would for a shape, it creates a neat effect.\\r\n\\r\nRecreate\nyour code from the last level, but turn 89 degrees to create this twisted\nsquare spiral."
      courseF_artist_for7_markdown_instruction: "Make three small changes to the\ncode from the last level to get this!  "
      courseF_artist_for7_2018_markdown_instruction: "Make three small changes to\nthe code from the last level to get this!  "
      courseF_artist_for9_markdown_instruction: "**Inspiration:** Use the counter\ninside the `set alpha` block to get something like this faded center.  \\r\n(This\nhexagon pattern was made using a 60 degree turn.)"
      courseF_artist_for9_2018_markdown_instruction: "**Inspiration:** Use the counter\ninside the `set alpha` block to get something like this faded center.  \\r\n(This\nhexagon pattern was made using a 60 degree turn.)"
      courseF_artist_for_Template_markdown_instruction: "If you turn a little bit\nmore or less than you normally would for a shape, it creates a neat effect.\\r\n\\r\nTry\nusing some of the code from the last level, but turning 89 degrees to create\nthis twisted square spiral."
      courseF_artist_for_Template_2018_markdown_instruction: "If you turn a little\nbit more or less than you normally would for a shape, it creates a neat effect.\\r\n\\r\nTry\nusing some of the code from the last level, but turning 89 degrees to create\nthis twisted square spiral."
      courseF_artist_for_challenge1_markdown_instruction: "Can you figure out how\nto re-create this drawing? \\r\n\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge1_2018_markdown_instruction: "Can you figure out\nhow to re-create this drawing? \\r\n\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_markdown_instruction: "Can you figure out how\nto re-create this drawing with a single loop? \\r\n\\r\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2018_markdown_instruction: "Can you figure out\nhow to re-create this drawing with a single loop? \\r\n\\r\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_fwp1_markdown_instruction: "Today, we're going to keep using\nthe powerful function editor. See if you remember how to edit the `draw a\nsquare` function to find the bugs."
      courseF_artist_fwp1_2018_markdown_instruction: "Today, we're going to keep\nusing the powerful function editor. See if you remember how to edit the `draw\na square` function to find the bugs."
      courseF_artist_fwp2_markdown_instruction: "Edit the function to accept a parameter\ncalled `length`.  \\r\n\\r\nThe sides of each square should be 25 pixels larger\nthan the last.  The first square has 25 pixel sides."
      courseF_artist_fwp2_2018_markdown_instruction: "Edit the function to accept\na parameter called `length`.  \\r\n\\r\nThe sides of each square should be 25\npixels larger than the last.  The first square has 25 pixel sides."
      courseF_artist_fwp2_predict1_markdown_instruction: "Edit the function to accept\na parameter called `length`.  \\r\n\\r\nThe sides of each square should be 25\npixels larger than the last.  The first square has 25 pixel sides. Replace\nthe '???' with the correct values to draw the picture."
      courseF_artist_fwp2_predict1_2018_markdown_instruction: "Edit the function\nto accept a parameter called `length`.  \\r\n\\r\nThe sides of each square should\nbe 25 pixels larger than the last.  The first square has 25 pixel sides. Replace\nthe '???' with the correct values to draw the picture."
      courseF_artist_fwp3_markdown_instruction: "Now try creating the function from\nscratch!  \\r\n\\r\nCreate a function called `draw a square` and use it to outline\nthese four boxes.  \\r\nMake sure to add a parameter for `length`!\\r\n\\r\n___\\r\nStarting\nfrom the upper right, the box widths are 50, 100, 150, and 200."
      courseF_artist_fwp3_2018_markdown_instruction: "Now try creating the function\nfrom scratch!  \\r\n\\r\nCreate a function called `draw a square` and use it\nto outline these four boxes.  \\r\nMake sure to add a parameter for `length`!\\r\n\\r\n___\\r\nStarting\nfrom the upper right, the box widths are 50, 100, 150, and 200."
      courseF_artist_fwp4_markdown_instruction: "Great job!  Now edit this function\nto add a parameter for the number of sides in your polygon.\\r\n\\r\nThe sides\nof all the shapes are 100 pixels long."
      courseF_artist_fwp4_2018_markdown_instruction: "Great job!  Now edit this function\nto add a parameter for the number of sides in your polygon.\\r\n\\r\nThe sides\nof all the shapes are 100 pixels long."
      courseF_artist_fwp5_markdown_instruction: "Use the function from the last puzzle\nto draw this series of shapes.  \\r\n\\r\n\\r\nThe triangle has 21 pixel sides,\nand the sides in each following shape are 7 pixels longer than the last.   \\r\nUse\nthe `multiplication` block to make this all happen with just one function\ncall.\\r\n___\\r\nThe `multipication` block looks like this <xml><block type=\"math_arithmetic\"\ninline=\"true\">\\r\n      <title name=\"OP\">MULTIPLY</title>\\r\n    </block></xml>"
      courseF_artist_fwp5_2018_markdown_instruction: "Use the function from the last\npuzzle to draw this series of shapes.  \\r\n\\r\n\\r\nThe triangle has 21 pixel\nsides, and the sides in each following shape are 7 pixels longer than the\nlast.   \\r\nUse the `multiplication` block to make this all happen with just\none function call.\\r\n___\\r\nThe `multipication` block looks like this <xml><block\ntype=\"math_arithmetic\" inline=\"true\">\\r\n      <title name=\"OP\">MULTIPLY</title>\\r\n    </block></xml>"
      courseF_artist_fwp6_markdown_instruction: "**Challenge:** Edit `draw a spiral\nedge` to use `length` and `sides` parameters, then recreate these shapes.\\r\n\\r\n-\nThe square goes from 3 pixels to 90 pixels.\\r\n- The hexagon goes from 3 pixels\nto 100 pixels.\\r\n- The triangle goes from 3 pixels to 95 pixels."
      courseF_artist_fwp6_2018_markdown_instruction: "**Challenge:** Edit `draw a\nspiral edge` to use `length` and `sides` parameters, then recreate these shapes.\\r\n\\r\n-\nThe square goes from 3 pixels to 90 pixels.\\r\n- The hexagon goes from 3 pixels\nto 100 pixels.\\r\n- The triangle goes from 3 pixels to 95 pixels."
      courseF_artist_fwp7_markdown_instruction: "Finish off the `draw a spiral edge`\nfunction to also ask for a minimum length for the center of the spiral.\\r\n\\r\n-\nThe smallest side in the center of this square is 50 pixels long\\r\n- The\nlongest side at the outside of this spiral is 200 pixels long"
      courseF_artist_fwp7_2018_markdown_instruction: "Finish off the `draw a spiral\nedge` function to also ask for a minimum length for the center of the spiral.\\r\n\\r\n-\nThe smallest side in the center of this square is 50 pixels long\\r\n- The\nlongest side at the outside of this spiral is 200 pixels long"
      courseF_artist_fwp8_markdown_instruction: "Freeplay! Can you figure out how\nto make this drawing using the function that you just created?\\r\n\\r\n- The\nred spiral goes from 50 to 200 pixels\\r\n- The blue spiral goes from 25 to\n150 pixels\\r\n- The green spiral goes from 100 to 350 pixels"
      courseF_artist_fwp8_2018_markdown_instruction: "Freeplay! Can you figure out\nhow to make this drawing using the function that you just created?\\r\n\\r\n-\nThe red spiral goes from 50 to 200 pixels\\r\n- The blue spiral goes from 25\nto 150 pixels\\r\n- The green spiral goes from 100 to 350 pixels"
      courseF_artist_fwp9_markdown_instruction: "**Freeplay:** Below there are functions\nyou've written, and more for you to play with. Play with the pen width to\nsee how different your drawings look! Suggestions are in the hints!"
      courseF_artist_fwp9_2018_markdown_instruction: "**Freeplay:** Below there are\nfunctions you've written, and more for you to play with. Play with the pen\nwidth to see how different your drawings look! Suggestions are in the hints!"
      courseF_artist_fwp_challenge1_markdown_instruction: "Try running this program.\nMake changes to see what happens. Can you figure out how it works? You can\nalso delete it and replace it with something totally different."
      courseF_artist_fwp_challenge1_2018_markdown_instruction: "Try running this\nprogram. Make changes to see what happens. Can you figure out how it works?\nYou can also delete it and replace it with something totally different."
      courseF_artist_fwp_challenge2_markdown_instruction: "Wow! Use what you learned\nin the previous level to draw an image like this.\\r\n\\r\n*Hint: Use parameters\nto make your code simpler.*\\r\n\\r\n<br/>\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>  "
      courseF_artist_fwp_challenge2_2018_markdown_instruction: "Wow! Use what you\nlearned in the previous level to draw an image like this.\\r\n\\r\n*Hint: Use\nparameters to make your code simpler.*\\r\n\\r\n<br/>\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>  "
      courseF_artist_ramp10_markdown_instruction: "Did you know you can put loops\ninside of other loops to make them more powerful?  That's called making a\n\"nested loop\".\\r\n\\r\n___\\r\n\\r\nDrag the code for the last triangle into\na new loop to spin it around and make a snowflake!\\r\n\\r\n*(You will need\nto spin it 6 times at 60 degrees to get this pattern.)*"
      courseF_artist_ramp10_2018_markdown_instruction: "Did you know you can put\nloops inside of other loops to make them more powerful?  That's called making\na \"nested loop\".\\r\n\\r\n___\\r\n\\r\nDrag the code for the last triangle into\na new loop to spin it around and make a snowflake!\\r\n\\r\n*(You will need\nto spin it 6 times at 60 degrees to get this pattern.)*"
      courseF_artist_ramp8_markdown_instruction: "Great!  Now let's make a square\nusing Artist!  The blocks for artist are a little different than other puzzles,\nbut the idea is the same.\\r\n___\\r\nEach side of the square has a length of\n200 pixels, and you will need to turn 90 degrees to make each angle."
      courseF_artist_ramp8_2018_markdown_instruction: "Great!  Now let's make a\nsquare using Artist!  The blocks for artist are a little different than other\npuzzles, but the idea is the same.\\r\n___\\r\nEach side of the square has a\nlength of 200 pixels, and you will need to turn 90 degrees to make each angle."
      courseF_artist_ramp9_markdown_instruction: "Use what you've learned to draw\nthis triangle.\\r\n___\\r\n##### The sides are each 100 pixels long. You will\nneed to turn 120 degrees at each corner."
      courseF_artist_ramp9_2018_markdown_instruction: "Use what you've learned to\ndraw this triangle.\\r\n___\\r\n##### The sides are each 100 pixels long. You\nwill need to turn 120 degrees at each corner."
      courseF_artist_variables10_markdown_instruction: "Here's your code from the\nlast puzzle.  Try editing the variable in other ways.  \\r\n-  What happens\nif you start out with `length` less than 150? \\r\n-  What if you multiply\nyour variable by 1.25 each time through?\\r\n-  What will your code do if you\nturn 119 degrees?"
      courseF_artist_variables10_2018_markdown_instruction: "Here's your code from\nthe last puzzle.  Try editing the variable in other ways.  \\r\n-  What happens\nif you start out with `length` less than 150? \\r\n-  What if you multiply\nyour variable by 1.25 each time through?\\r\n-  What will your code do if you\nturn 119 degrees?"
      courseF_artist_variables2_markdown_instruction: "Now use another loop to draw\nthree of those triangles right next to each other.   \\r\n\\r\nYou can nest\nthe code from your last puzzle inside."
      courseF_artist_variables2_2018_markdown_instruction: "Now use another loop\nto draw three of those triangles right next to each other.   \\r\n\\r\nYou can\nnest the code from your last puzzle inside."
      courseF_artist_variables3_markdown_instruction: "Before things get tricky,\ncan you move the length of 50 into a variable so we can use it in the next\nfew puzzles?  \\r\n\\r\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2018_markdown_instruction: "Before things get tricky,\ncan you move the length of 50 into a variable so we can use it in the next\nfew puzzles?  \\r\n\\r\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables4_markdown_instruction: "Now, use the `length` variable\nto have the artist jump forward and down by `length` pixels between triangles."
      courseF_artist_variables4_2018_markdown_instruction: "Now, use the `length`\nvariable to have the artist jump forward and down by `length` pixels between\ntriangles."
      courseF_artist_variables6_markdown_instruction: "**OOPS!**  \\r\n\\r\nWe actually\nneed the triangles to be 60 pixels wide, with 60 pixel jumps.  \\r\n\\r\nAren't\nyou glad you're using a variable?"
      courseF_artist_variables6_2018_markdown_instruction: "**OOPS!**  \\r\n\\r\nWe\nactually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \\r\n\\r\nAren't\nyou glad you're using a variable?"
      courseF_artist_variables6a_markdown_instruction: "Use what you've learned\nto build this design where the squares have 80 pixel sides and the artist\njumps 80 pixels over and down between each one."
      courseF_artist_variables6a_2018_markdown_instruction: "Use what you've learned\nto build this design where the squares have 80 pixel sides and the artist\njumps 80 pixels over and down between each one."
      courseF_artist_variables7_markdown_instruction: "Let's start this section\nby drawing a triangle with 150 pixel sides. \\r\n\\r\nBe sure to use the `length`\nvariable and a repeat loop."
      courseF_artist_variables7_2018_markdown_instruction: "Let's start this section\nby drawing a triangle with 150 pixel sides. \\r\n\\r\nBe sure to use the `length`\nvariable and a repeat loop."
      courseF_artist_variables8_markdown_instruction: "Rebuild the triangle code\nfrom the last puzzle, but this time use the `set length to` block to reset\nthe `length` variable to `length`+10 at the end of each loop iteration.\\r\n\\r\n<xml>\\r\n<block\ntype=\"variables_set\" inline=\"false\">\\r\n                        <title\nname=\"VAR\">length</title>\\r\n                        <value name=\"VALUE\">\\r\n                          <block\ntype=\"math_arithmetic\" inline=\"true\">\\r\n                            <title\nname=\"OP\">ADD</title>\\r\n                            <value name=\"A\">\\r\n                              <block\ntype=\"variables_get\">\\r\n                                <title name=\"VAR\">length</title>\\r\n                              </block>\\r\n                            </value>\\r\n                            <value\nname=\"B\">\\r\n                              <block type=\"math_number\">\\r\n                                <title\nname=\"NUM\">10</title>\\r\n                              </block>\\r\n                            </value>\\r\n                          </block>\\r\n                        </value>\\r\n                      </block>\\r\n</xml>\\r\n\\r\nThe\nlength of the first side of the triangle is 150 pixels."
      courseF_artist_variables8_2018_markdown_instruction: "Rebuild the triangle\ncode from the last puzzle, but this time use the `set length to` block to\nreset the `length` variable to `length`+10 at the end of each loop iteration.\\r\n\\r\n<xml>\\r\n<block\ntype=\"variables_set\" inline=\"false\">\\r\n                        <title\nname=\"VAR\">length</title>\\r\n                        <value name=\"VALUE\">\\r\n                          <block\ntype=\"math_arithmetic\" inline=\"true\">\\r\n                            <title\nname=\"OP\">ADD</title>\\r\n                            <value name=\"A\">\\r\n                              <block\ntype=\"variables_get\">\\r\n                                <title name=\"VAR\">length</title>\\r\n                              </block>\\r\n                            </value>\\r\n                            <value\nname=\"B\">\\r\n                              <block type=\"math_number\">\\r\n                                <title\nname=\"NUM\">10</title>\\r\n                              </block>\\r\n                            </value>\\r\n                          </block>\\r\n                        </value>\\r\n                      </block>\\r\n</xml>\\r\n\\r\nThe\nlength of the first side of the triangle is 150 pixels."
      courseF_artist_variables9_markdown_instruction: "Time to make some art!  \\r\n\\r\nSee\nwhat happens when you repeat the code from the last puzzle **30** times instead\nof only 3!\\r\n\\r\nFeel free to make your lines any color or pattern for some\nextra zest."
      courseF_artist_variables9_2018_markdown_instruction: "Time to make some art!  \\r\n\\r\nSee\nwhat happens when you repeat the code from the last puzzle **30** times instead\nof only 3!\\r\n\\r\nFeel free to make your lines any color or pattern for some\nextra zest."
      courseF_artist_variablesFP_markdown_instruction: "**Freeplay:** Take what you've\nlearned and make your own drawing. \\r\n\\r\nHow can you use variables with\nsquares, pentagons, or hexagons?"
      courseF_artist_variablesFP_2018_markdown_instruction: "**Freeplay:** Take what\nyou've learned and make your own drawing. \\r\n\\r\nHow can you use variables\nwith squares, pentagons, or hexagons?"
      courseF_artist_variables_10_markdown_instruction: "Here's your code from the\nlast puzzle.  Try editing the variable in other ways.  \\r\n-  What happens\nif you start out with `length` less than 150? \\r\n-  What if you multiply\nyour variable by 1.25 each time through?\\r\n-  What will your code do if you\nturn 119 degrees?"
      courseF_artist_variables_2_markdown_instruction: "Now use another loop to draw\nthree of those triangles right next to each other.   \\r\n\\r\nYou can nest\nthe code from your last puzzle inside."
      courseF_artist_variables_3_markdown_instruction: "Before things get tricky,\ncan you move the length of 50 into a variable so we can use it in the next\nfew puzzles?  \\r\n<br/>\\r\n\\r\n<img src=\"https://images.code.org/e6eac1f6aeb68a9a7584516e28663c14-image-1477533059853.gif\"\nwidth=\"65%\"/>"
      courseF_artist_variables_4_markdown_instruction: "Now, use the `length` variable\nto have the artist jump forward and down by `length` pixels between triangles."
      courseF_artist_variables_5_markdown_instruction: "Add another set of loops\nat the end of your code to add three more triangles. This time, move forward\nand up!"
      courseF_artist_variables_6_markdown_instruction: "OOPS! We actually need the\ntriangles to be 60 pixels wide, with 60 pixel jumps.  \\r\nAren't you glad\nyou're using a variable?"
      courseF_artist_variables_6a_markdown_instruction: "Use what you've learned\nto build this design where the squares have 80 pixel sides and the artist\njumps 80 pixels over and down between each one."
      courseF_artist_variables_7_markdown_instruction: "Let's start this section\nby drawing a triangle with 150 pixels sides. \\r\n\\r\nBe sure to use the `length`\nvariable and a repeat loop."
      courseF_artist_variables_8_markdown_instruction: "Rebuild the triangle code\nfrom the last puzzle, but this time use the `set length to` block to reset\nthe `length` variable to `length`+10 at the end of each loop iteration.\\r\n\\r\n![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)"
      courseF_artist_variables_9_markdown_instruction: "Time to make some art!  \\r\nSee\nwhat happens when you repeat the code from the last puzzle 30 times instead\nof only 3!\\r\n\\r\nFeel free to make your lines any color or pattern for some\nextra zest."
      courseF_artist_variables_FP_markdown_instruction: "**Freeplay:** Take what\nyou've learned and make your own drawing. \\r\n\\r\nHow can you use variables\nwith squares, pentagons, or hexagons?"
      courseF_artist_variables_challenge1_markdown_instruction: "Challenge alert!\nCan you create a `length` variable and use it to create this interesting pattern?"
      courseF_artist_variables_challenge1_2018_markdown_instruction: "Challenge alert!\nCan you create a `length` variable and use it to create this interesting pattern?"
      courseF_artist_variables_challenge1a_markdown_instruction: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\r\n\\r\nYou've now learned everything you need to know to\nmake a pattern like this! This puzzle is meant to be difficult.  Can you stick\nwith it until you figure out the solution?"
      courseF_artist_variables_challenge2_markdown_instruction: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\r\n\\r\nYou've now learned everything you need to know to\nmake a pattern like this! This puzzle is meant to be difficult.  Can you stick\nwith it until you figure out the solution?"
      courseF_artist_variables_challenge2_2018_markdown_instruction: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\r\n\\r\nYou've now learned everything you need to know to\nmake a pattern like this! This puzzle is meant to be difficult.  Can you stick\nwith it until you figure out the solution?"
      courseF_artistembed_variables9_markdown_instruction: "Time to make some art!  \\r\n\\r\nSee\nwhat happens when you repeat the code from the last puzzle **30** times instead\nof only 3!\\r\n\\r\nFeel free to make your lines any color or pattern for some\nextra zest."
      courseF_bee_conditionals10_markdown_instruction: "Conditionals can be helpful,\neven when you know exactly what is in each spot!\\r\n\\r\nCollect all of the\nnectar and make all of the honey."
      courseF_bee_conditionals10_2018_markdown_instruction: "Conditionals can be\nhelpful, even when you know exactly what is in each spot!\\r\n\\r\nCollect all\nof the nectar and make all of the honey."
      courseF_bee_conditionals1_predict1_markdown_instruction: "*\"This cloud is\nblocking my view!\"*\\r\n\\r\nCheck to see if there's a flower under the cloud.\nIf there's a flower, get nectar."
      courseF_bee_conditionals1_predict1_2018_markdown_instruction: "*\"This cloud\nis blocking my view!\"*\\r\n\\r\nCheck to see if there's a flower under the\ncloud. If there's a flower, get nectar."
      courseF_bee_conditionals2_markdown_instruction: "*\"It's too cloudy to see\nany flowers!\"*\\r\n\\r\nCheck underneath every cloud to see if it is hiding\na flower before you get nectar. If there is a flower underneath the cloud,\nthe bee will need to get nectar **once**.  \\r\n\\r\nRemember: Not all clouds\nhide the same thing!"
      courseF_bee_conditionals2_2018_markdown_instruction: "*\"It's too cloudy to\nsee any flowers!\"*\\r\n\\r\nCheck underneath every cloud to see if it is hiding\na flower before you get nectar. If there is a flower underneath the cloud,\nthe bee will need to get nectar **once**.  \\r\n\\r\nRemember: Not all clouds\nhide the same thing!"
      courseF_bee_conditionals3_markdown_instruction: "You can only collect nectar\nfrom flowers, but you can check any space to see if there is a flower. If\nthere is a flower under any of these clouds, the bee will need to collect\nnectar **once**."
      courseF_bee_conditionals3_2018_markdown_instruction: "You can only collect\nnectar from flowers, but you can check any space to see if there is a flower.\nIf there is a flower under any of these clouds, the bee will need to collect\nnectar **once**."
      courseF_bee_conditionals4_markdown_instruction: "In this puzzle, we know that\nevery flower has exactly one nectar, but the flowers aren't spaced evenly.\\r\n\\r\nGet\nall of the nectar using as few blocks as possible."
      courseF_bee_conditionals4_2018_markdown_instruction: "In this puzzle, we know\nthat every flower has exactly one nectar, but the flowers aren't spaced evenly.\\r\n\\r\nGet\nall of the nectar using as few blocks as possible."
      courseF_bee_conditionals7_predict2_markdown_instruction: "Sometimes a cloud\ncovers a flower, sometimes it covers a honeycomb!\\r\n\\r\nUse the `if/else`\nblock to collect nectar at flowers and make honey at honeycomb."
      courseF_bee_conditionals7_predict2_2018_markdown_instruction: "Sometimes a\ncloud covers a flower, sometimes it covers a honeycomb!\\r\n\\r\nUse the `if/else`\nblock to collect nectar at flowers and make honey at honeycomb."
      courseF_bee_conditionals8_markdown_instruction: "**Challenge:** There will\nbe either a flower or a honeycomb under each of those clouds!\\r\n\\r\nCollect\nnectar once if there is a flower. Otherwise, make honey once (because there\nis a honeycomb)."
      courseF_bee_conditionals8_2018_markdown_instruction: "**Challenge:** There\nwill be either a flower or a honeycomb under each of those clouds!\\r\n\\r\nCollect\nnectar once if there is a flower. Otherwise, make honey once (because there\nis a honeycomb)."
      courseF_bee_for10_markdown_instruction: "**Challenge:** Take what you've learned\nabout `for` loops and try to solve this problem. \\r\n\\r\nRemember: You may\nhave to run through solutions multiple times before you figure out all of\nthe steps."
      courseF_bee_for10_2018_markdown_instruction: "**Challenge:** Take what you've\nlearned about `for` loops and try to solve this problem. \\r\n\\r\nRemember:\nYou may have to run through solutions multiple times before you figure out\nall of the steps."
      courseF_bee_for11_markdown_instruction: "If your loop is counting down, the\nincrement is **subtracted** from your counter variable each time through.\n\\r\n\\r\nWhat should your increment be to collect 15, then 12, then 9, 6, 3\nnectar?"
      courseF_bee_for11_2018_markdown_instruction: "If your loop is counting down,\nthe increment is **subtracted** from your counter variable each time through.\n\\r\n\\r\nWhat should your increment be to collect 15, then 12, then 9, 6, 3\nnectar?"
      courseF_bee_for2_markdown_instruction: "Write the code to help the bee collect\nall of the nectar.\\r\n\\r\nYou will need lots of blocks for this challenge,\nbut we'll learn an easier way in the next puzzle."
      courseF_bee_for2_2018_markdown_instruction: "Write the code to help the bee\ncollect all of the nectar.\\r\n\\r\nYou will need lots of blocks for this challenge,\nbut we'll learn an easier way in the next puzzle."
      courseF_bee_for3_markdown_instruction: "Ah, the `for` loop makes this much\neasier!  \\r\n\\r\nTry this puzzle using the `for` loop and the `counter` variable\nto see how much shorter your code becomes."
      courseF_bee_for6_markdown_instruction: "You can also use a `for` loop to count\ndown. \\r\n\\r\nTry gathering this nectar by counting down from **5** to **1**\nby **1**."
      courseF_bee_for6_2018_markdown_instruction: "You can also use a `for` loop\nto count down. \\r\n\\r\nTry gathering this nectar by counting down from **5**\nto **1** by **1**."
      courseF_bee_for7_markdown_instruction: "The last number in your `for` loop\nis called the **\"increment\"**.  Each time the loop is run, the counter variable\nchanges by the value of the **increment**.\\r\n\\r\nTry collecting these flowers\nusing an **increment** of 2."
      courseF_bee_for7_2018_markdown_instruction: "The last number in your `for`\nloop is called the **\"increment\"**.  Each time the loop is run, the counter\nvariable changes by the value of the **increment**.\\r\n\\r\nTry collecting\nthese flowers using an **increment** of 2."
      courseF_bee_for8_markdown_instruction: "You've got this!  \\r\n\\r\nWhat should\nyour **increment** be to collect 3, 6, 9, 12, 15 nectar?\\r\n"
      courseF_bee_for8_2018_markdown_instruction: "You've got this!  \\r\n\\r\nWhat\nshould your **increment** be to collect 3, 6, 9, 12, 15 nectar?\\r\n"
      courseF_bee_for9_markdown_instruction: "Now, let's combine the `counter` variable\nwith a `math` block! \\r\n\\r\nHow can you use the `counter` variable to navigate\nthis garden with the fewest number of blocks possible?"
      courseF_bee_for9_2018_markdown_instruction: "Now, let's combine the `counter`\nvariable with a `math` block! \\r\n\\r\nHow can you use the `counter` variable\nto navigate this garden with the fewest number of blocks possible?"
      courseF_bee_for_challenge1_markdown_instruction: "You can use this `for loop`\nto collect all of the nectar. Un-bee-lievable!\\r\n\\r\nThere are a few actions\nthat you will want to `repeat 'counter' times`."
      courseF_bee_for_challenge1_2018_markdown_instruction: "You can use this `for\nloop` to collect all of the nectar. Un-bee-lievable!\\r\n\\r\nThere are a few\nactions that you will want to `repeat 'counter' times`."
      courseF_bee_for_challenge2_markdown_instruction: "Solve this puzzle with the\nfewest number of blocks possible."
      courseF_bee_for_challenge2_2018_markdown_instruction: "Solve this puzzle with\nthe fewest number of blocks possible."
      courseF_bee_for_challenge3_markdown_instruction: "**For-Loops Super Challenge:**\nSolve this puzzle with the fewest number of blocks possible."
      courseF_bee_functions2_markdown_instruction: "To make things easier, it's\ntime to learn about functions!\\r\n\\r\nFrom here on out, you will be using\na new *function editor*.  This editor is a separate window that will appear\nwhen you go to edit a function.  You won't see all of the code from your\nfunction while you're coding in the workspace, but don't worry...it's still\nthere!  \\r\n___\\r\n\\r\nLet's practice with this function that gets nectar\nonly if the bee is at a flower.  To see the code inside, click the blue \"edit\"\nbutton!\\r\n\\r\nUse the `get only nectar` function to collect the nectar from\neach flower."
      courseF_bee_functions2_2018_markdown_instruction: "To make things easier, it's\ntime to learn about functions!\\r\n\\r\nFrom here on out, you will be using\na new *function editor*.  This editor is a separate window that will appear\nwhen you go to edit a function.  You won't see all of the code from your\nfunction while you're coding in the workspace, but don't worry...it's still\nthere!  \\r\n___\\r\n\\r\nLet's practice with this function that gets nectar\nonly if the bee is at a flower.  To see the code inside, click the blue \"edit\"\nbutton!\\r\n\\r\nUse the `get only nectar` function to collect the nectar from\neach flower."
      courseF_bee_functions3_markdown_instruction: "Now it's your turn to make a\nfunction to get some honey **only** if there is a honeycomb!  Click \"edit\"\nto build the `only make honey` function, then use it to solve this puzzle."
      courseF_bee_functions3_2018_markdown_instruction: "Now it's your turn to make\na function to get some honey **only** if there is a honeycomb!  Click \"edit\"\nto build the `only make honey` function, then use it to solve this puzzle."
      courseF_bee_functions3a_markdown_instruction: "Each cloud could be hiding either\none flower or one honeycomb!  Write a function that gets nectar if the bee\nis at a flower, otherwise it gets honey.\\r\n\\r\nUse your function to solve\nthe puzzle!"
      courseF_bee_functions3a_2018_markdown_instruction: "Each cloud could be hiding\neither one flower or one honeycomb!  Write a function that gets nectar if\nthe bee is at a flower, otherwise it gets honey.\\r\n\\r\nUse your function\nto solve the puzzle!"
      courseF_bee_functions4_markdown_instruction: "Did you know that you can call\na function from *inside* another function?  \\r\n\\r\nUse your `check nectar\nor honey` function inside the new `move and check` function to help the bee\nturn, go get what's under the cloud, then back-up and turn back around!"
      courseF_bee_functions4_2018_markdown_instruction: "Did you know that you can\ncall a function from *inside* another function?  \\r\n\\r\nUse your `check nectar\nor honey` function inside the new `move and check` function to help the bee\nturn, go get what's under the cloud, then back-up and turn back around!"
      courseF_bee_functions5a_markdown_instruction: "Now, build `move and check`\nso that it takes the bee to the cloud whenever there is a path to the right,\nthen use it to solve this puzzle!"
      courseF_bee_functions5a_2018_markdown_instruction: "Now, build `move and check`\nso that it takes the bee to the cloud whenever there is a path to the right,\nthen use it to solve this puzzle!"
      courseF_bee_functions6_markdown_instruction: "*\"This field is a-MAZE-ing!\"*\\r\n\\r\nBuild\nyour own function to help the bee through the maze by turning left at flowers\nand right at honeycomb.  Don't forget to collect nectar and make honey along\nthe way!"
      courseF_bee_functions6_2018_markdown_instruction: "*\"This field is a-MAZE-ing!\"*\\r\n\\r\nBuild\nyour own function to help the bee through the maze by turning left at flowers\nand right at honeycomb.  Don't forget to collect nectar and make honey along\nthe way!"
      courseF_bee_functions7_markdown_instruction: "Rebuild your function from the\nlast puzzle to solve this maze.\\r\n\\r\nTurn left at the honeycomb and right\nat the flowers.  \\r\n**Note:** Some corners are unmarked!"
      courseF_bee_functions7_2018_markdown_instruction: "Rebuild your function from\nthe last puzzle to solve this maze.\\r\n\\r\nTurn left at the honeycomb and\nright at the flowers.  \\r\n**Note:** Some corners are unmarked!"
      courseF_bee_functions8a_markdown_instruction: "Underneath this cloud, there\nmight be a flower with an unknown amount of nectar, or a honeycomb with an\nunknown amount of honey.  \\r\n\\r\nCan you write a program that can handle\neither?"
      courseF_bee_functions8a_2018_markdown_instruction: "Underneath this cloud,\nthere might be a flower with an unknown amount of nectar, or a honeycomb with\nan unknown amount of honey.  \\r\n\\r\nCan you write a program that can handle\neither?"
      courseF_bee_functionsPre7_markdown_instruction: "Now try building a function\nto solve this maze.  How is it different from last time?  \\r\n\\r\nTurn left\nat the honeycomb and right at the flowers.  \\r\n**Note:** Some corners are\nunmarked!"
      courseF_bee_functionsPre7_2018_markdown_instruction: "Now try building a function\nto solve this maze.  How is it different from last time?  \\r\n\\r\nTurn left\nat the honeycomb and right at the flowers.  \\r\n**Note:** Some corners are\nunmarked!"
      courseF_bee_functions_challenge1_markdown_instruction: "Create a new function\nto collect all the nectar and honey while there is a path ahead. Use it to\ncomplete the puzzle!"
      courseF_bee_functions_challenge1_2018_markdown_instruction: "Create a new function\nto collect all the nectar and honey while there is a path ahead. Use it to\ncomplete the puzzle!"
      courseF_bee_functions_challenge2_markdown_instruction: "Use everything you\nhave learned to complete this puzzle!"
      courseF_bee_functions_challenge2_2018_markdown_instruction: "Use everything\nyou have learned to complete this puzzle!"
      courseF_bee_functions_challenge2_recursion_markdown_instruction: "Underneath\nthis cloud, there might be a flower with an unknown amount of nectar, or a\nhoneycomb with an unknown amount of honey.  \\r\n\\r\nCan you write a program\nthat can handle either?"
      courseF_bee_fwp1_markdown_instruction: "Check beneath the clouds to see if\nthe flowers have any nectar.  \\r\n\\r\nFor this whole stage, each flower will\nhave exactly **one** unit of nectar, and each honeycomb will need exactly\n**one** unit of honey. \\r\n\\r\n\\r\n"
      courseF_bee_fwp1_2018_markdown_instruction: "Check beneath the clouds to see\nif the flowers have any nectar.  \\r\n\\r\nFor this whole stage, each flower\nwill have exactly **one** unit of nectar, and each honeycomb will need exactly\n**one** unit of honey. \\r\n\\r\n\\r\n"
      courseF_bee_fwp2_markdown_instruction: "Here's some code that solves the last\npuzzle.  \\r\nLet's pull it into a function, then call the function to check\nthis row for nectar.  \\r\n___\\r\nThis may seem like a strange step now, but\nit will be really helpful soon!"
      courseF_bee_fwp2_2018_markdown_instruction: "Here's some code that solves\nthe last puzzle.  \\r\nLet's pull it into a function, then call the function\nto check this row for nectar.  \\r\n___\\r\nThis may seem like a strange step\nnow, but it will be really helpful soon!"
      courseF_bee_fwp3_markdown_instruction: "Time to put the function to the test!\n\\r\n\\r\nLet's see if it makes collecting these three rows of nectar any easier."
      courseF_bee_fwp3_2018_markdown_instruction: "Time to put the function to the\ntest! \\r\n\\r\nLet's see if it makes collecting these three rows of nectar\nany easier."
      courseF_bee_fwp4_markdown_instruction: "*\"How is your function holding up?\"*   \\r\n\\r\nWe\nneed to make some adjustments here. Click \"edit\" to add a `length` parameter\nto the function so that it will still work when the row is a different length."
      courseF_bee_fwp4_2018_markdown_instruction: "*\"How is your function holding\nup?\"*   \\r\n\\r\nWe need to make some adjustments here. Click \"edit\" to\nadd a `length` parameter to the function so that it will still work when the\nrow is a different length."
      courseF_bee_fwp5_markdown_instruction: "*\"You're doing great so far!\"*\\r\n\\r\nLet's\nuse this function to collect the nectar."
      courseF_bee_fwp5_2018_markdown_instruction: "*\"You're doing great so far!\"*\\r\n\\r\nLet's\nuse this function to collect the nectar."
      courseF_bee_fwp6_markdown_instruction: "You can make code shorter and more\nefficient when you combine functions with other programming elements.  \\r\n___\\r\nWhat\nblocks can you use with your function to build a short and sweet solution\nto this puzzle?"
      courseF_bee_fwp6_2018_markdown_instruction: "You can make code shorter and\nmore efficient when you combine functions with other programming elements.  \\r\n___\\r\nWhat\nblocks can you use with your function to build a short and sweet solution\nto this puzzle?"
      courseF_bee_fwp7_markdown_instruction: "**Challenge:** Something looks a little\ndifferent. Modify your function to make honey as well."
      courseF_bee_fwp7_2018_markdown_instruction: "**Challenge:** Something looks\na little different. Modify your function to make honey as well."
      courseF_bee_fwp_challenge1_markdown_instruction: "Use one `for loop` in a function\nto collect all of the corn. The same `for loop` can count to different maximum\nvalues by using the `length` parameter."
      courseF_bee_fwp_challenge1_2018_markdown_instruction: "Use one `for loop` in\na function to collect all of the corn. The same `for loop` can count to different\nmaximum values by using the `length` parameter."
      courseF_bee_fwp_challenge2_markdown_instruction: "*\"**Lettuce** see if you\ncan handle this one final test! Give it everything you've got!\"*\\r\n\\r\nUse\none `for loop` in a function to collect all of the vegetables in the row.\nMake the `for loop` count to different maximum values by using the `length`\nparameter. Make your program as short as possible by using a second `for loop`\noutside the function.\\r\n\\r\nGood luck!"
      courseF_bee_fwp_challenge2_2018_markdown_instruction: "*\"**Lettuce** see if\nyou can handle this one final test! Give it everything you've got!\"*\\r\n\\r\nUse\none `for loop` in a function to collect all of the vegetables in the row.\nMake the `for loop` count to different maximum values by using the `length`\nparameter. Make your program as short as possible by using a second `for loop`\noutside the function.\\r\n\\r\nGood luck!"
      courseF_maze_ramp1_markdown_instruction: "For this puzzle, connect all of the\nblocks from the workspace together below the <xml><block type=\"when_run\"/></xml>\nblock and click \"Run\" to watch it go!"
      courseF_maze_ramp13_markdown_instruction: "Time for another Angry Birds puzzle\nto pull it all together!\\r\n\\r\nUse nested loops to get the bird to the pig."
      courseF_maze_ramp15_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nUse what you've learned to get the bird to the pig!"
      courseF_maze_ramp1_2018_markdown_instruction: "For this puzzle, connect all\nof the blocks from the workspace together below the <xml><block type=\"when_run\"/></xml>\nblock and click \"Run\" to watch it go!"
      courseF_maze_ramp2_markdown_instruction: "Drag a <xml><block type=\"controls_repeat\"><title\nname=\"TIMES\">7</title></block></xml> block out of the toolbox and attach\nit to the <xml><block type=\"when_run\"/></xml> event.\\r\n\\r\nPlace the <xml><block\ntype=\"maze_moveForward\"/></xml> block inside the loop to finish your code."
      courseF_maze_ramp2_2018_markdown_instruction: "Drag a <xml><block type=\"controls_repeat\"><title\nname=\"TIMES\">7</title></block></xml> block out of the toolbox and attach\nit to the <xml><block type=\"when_run\"/></xml> event.\\r\n\\r\nPlace the <xml><block\ntype=\"maze_moveForward\"/></xml> block inside the loop to finish your code."
      courseF_maze_ramp4_markdown_instruction: "*\"Trace the path and lead me to\nthe silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseF_maze_ramp4_2018_markdown_instruction: "*\"Trace the path and lead me\nto the silly pig.\"* \\r\n\\r\nAvoid TNT or feathers will fly!"
      courseF_maze_ramp5_markdown_instruction: "*\"Follow this path to get me to\nthe pig!\"*\\r\n\\r\nAvoid the TNT."
      courseF_maze_ramp5_2018_markdown_instruction: "*\"Follow this path to get me\nto the pig!\"*\\r\n\\r\nAvoid the TNT."
      courseF_maze_ramp6_markdown_instruction: "*\"Keep calm and help me find the\nbad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several blocks\nin a row, try moving them inside of a <xml><block type=\"controls_repeat\"><title\nname=\"TIMES\">???</title></block></xml> loop.  This will do the same thing\nwith less code!"
      courseF_maze_ramp6_2018_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig. Otherwise I might get angry!\"*\\r\n\\r\nWhen you have several\nblocks in a row, try moving them inside of a <xml><block type=\"controls_repeat\"><title\nname=\"TIMES\">???</title></block></xml> loop.  This will do the same thing\nwith less code!"
      courseF_maze_ramp7_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nUse what you've learned to get the bird to the pig!"
      courseF_playlab_variables0_markdown_instruction: "This is Pirate Pegleg.  He's\nawfully hard to understand these days!  \\r\n\\r\nDecode his speech by changing\nthese pieces of text in the code:\\r\n- \"arrrg\" should be \"a\" \\r\n- \"ye\"\nshould be \"e\"\\r\n\\r\n"
      courseF_playlab_variables1_markdown_instruction: "This is Pirate Pegleg.  He's\nawfully hard to understand these days!  \\r\n\\r\nDecode his speech by changing\nthese pieces of text in the code:\\r\n- \"arrrg\" should be \"a\" \\r\n- \"ye\"\nshould be \"e\"\\r\n\\r\n"
      courseF_playlab_variables1a_markdown_instruction: "Variables can be used to\nstore text that you want to use later.  \\r\n\\r\nHave Kiki, the soccer player,  scream\n\"Goal!\" by assigning that text to the `shout` variable."
      courseF_playlab_variables1a_2018_markdown_instruction: "Variables can be used\nto store text that you want to use later.  \\r\n\\r\nHave Kiki, the soccer player,  scream\n\"Goal!\" by assigning that text to the `shout` variable."
      courseF_playlab_variables2_markdown_instruction: "Now, decode Pirate Pegleg's\nspeech by changing the value of the variables in just two places!   \\r\n-\n\"arrrg\" should be \"a\" \\r\n- \"ye\" should be \"e\"\\r\n\\r\n"
      courseF_playlab_variables2a_markdown_instruction: "Now, decode Pirate Pegleg's\nspeech by changing the value of the variables in just two places!   \\r\n-\n\"arrrg\" should be \"a\" \\r\n- \"ye\" should be \"e\"\\r\n\\r\n"
      courseF_playlab_variables2b RYAN CLONE_markdown_instruction: "We can make sentences\nmore interesting by mixing pieces of text with variables.\\r\n\\r\nInsert the\nvariable `color` into the middle of a sentence by putting it into the empty\nslot in the `join` block."
      courseF_playlab_variables2b_markdown_instruction: "We can make sentences more\ninteresting by mixing pieces of text with variables.\\r\n\\r\nInsert the variable\n`color` into the middle of a sentence by putting it into the empty slot in\nthe `join` block."
      courseF_playlab_variables2b_2018_markdown_instruction: "We can make sentences\nmore interesting by mixing pieces of text with variables.\\r\n\\r\nInsert the\nvariable `color` into the middle of a sentence by putting it into the empty\nslot in the `join` block."
      courseF_playlab_variables3_markdown_instruction: "Great!  Now that you understand\nhow to have a character use a variable to speak, we can introduce the `ask`\nblock.  \\r\n\\r\nThe `ask` block will automatically store whatever the user\nanswers into the variable of your choice.  \\r\n\\r\nRun this program and enter\nsomething for Pegleg to say.\\r\n\\r\n"
      courseF_playlab_variables3b_markdown_instruction: "Help Kiki have a conversation\nwith Brian by using the variable `age` in all of the places where age `12`\nshould be used. "
      courseF_playlab_variables3bEdit_markdown_instruction: "Help Kiki have a conversation\nwith Brian by using the variable `A1` in all of the places where age `12`\nshould be used. "
      courseF_playlab_variables3b_josh_markdown_instruction: "Help Kiki have a conversation\nwith Brian by using the variable `age` in all of the places where age `12`\nshould be used. "
      courseF_playlab_variables3b_josh_2018_markdown_instruction: "Help Kiki have\na conversation with Brian by using the variable `age` in all of the places\nwhere age `12` should be used. "
      courseF_playlab_variables4_markdown_instruction: "Now we're going to join\na variable to the beginning of Pegleg's next sentence using the `create text\nwith` block. \\r\n\\r\nCan you find the correct variable in the toolbox to fill\nin the slot?\\r\n\\r\n"
      courseF_playlab_variables4b_markdown_instruction: "Now, Pirate Pegleg has some\nquestions for Brian.\\r\n\\r\nThis code uses an `ask` block, so you can type\nBrian's answers after you click \"Run\". \\r\n\\r\nPut the variables in the\ncorrect places to create this conversation."
      courseF_playlab_variables4b_2018_markdown_instruction: "Now, Pirate Pegleg\nhas some questions for Brian.\\r\n\\r\nThis code uses an `ask` block, so you\ncan type Brian's answers after you click \"Run\". \\r\n\\r\nPut the variables\nin the correct places to create this conversation."
      courseF_playlab_variables5_markdown_instruction: "Now we're going to add a\nvariable into the middle of Pegleg's sentence using more than one `create\ntext with` block. \\r\n\\r\nHere is how you link `create text with` blocks together\nto form longer sentences:\\r\n\\r\n![](https://images.code.org/1c9bdc9e73d60b5ed053c3c4e9e1dcd4-image-1476993588379.gif)"
      courseF_playlab_variables5b_markdown_instruction: "Pirate Pegleg is going to\nask **you** some questions.\\r\n\\r\nPut all of the variables in the correct\nplace so that his story makes sense."
      courseF_playlab_variables5c RYAN Copy_markdown_instruction: "Let's combine\nthe `ask` block with an `if/else` statement to make a game!\\r\n\\r\nPirate\nPegleg is going to ask you a question.  Drag a copy of the `answer` variable\ninto the conditional for the `if` statement to check whether or not you entered\nthe correct color."
      courseF_playlab_variables5c_markdown_instruction: "Let's combine the `ask`\nblock with an `if/else` statement to have some fun!\\r\n\\r\nPirate Pegleg is\ngoing to ask you a question.  Drag a copy of the `answer` variable into the\nconditional for the `if` statement to check whether or not you entered the\ncorrect color."
      courseF_playlab_variables5c_2018_markdown_instruction: "Let's combine the\n`ask` block with an `if/else` statement to have some fun!\\r\n\\r\nPirate Pegleg\nis going to ask you a question.  Drag a copy of the `answer` variable into\nthe conditional for the `if` statement to check whether or not you entered\nthe correct color."
      courseF_playlab_variables6b_markdown_instruction: "You cannot fit much text\nin an actor's speech bubble, so sometimes you need to make the actor say\nsomething more than once.  \\r\n\\r\nWe have provided some starter questions\nand variables for you. Join them together to make a fun story that takes more\nthan one speech bubble to tell."
      courseF_playlab_variables6c_markdown_instruction: "In the rest of this stage,\nwe will use multiple `ask` blocks and multiple `if/else` statements to create\na game that **you** control!\\r\n\\r\nStart by setting the \"codename\" variable\nto a word that you can remember.  Then, use an `ask` block to get a codename\nfrom the users.  You will need an `if/else` block to see if the codename entered\nmatches the codename that you have set."
      courseF_playlab_variables6c_2018_markdown_instruction: "In the rest of this\nstage, we will use multiple `ask` blocks and multiple `if/else` statements\nto create a game that **you** control!\\r\n\\r\nStart by setting the \"codename\"\nvariable to a word that you can remember.  Then, use an `ask` block to get\na codename from the users.  You will need an `if/else` block to see if the\ncodename entered matches the codename that you have set."
      courseF_playlab_variables7b_markdown_instruction: "Time to make your own project!  \\r\n\\r\nCreate\nsome questions and weave the answers together into your very own story.\\r\n\\r\nIf\nyou need ideas, click the hints icon."
      courseF_playlab_variables7b_2018_markdown_instruction: "Time to make your own\nproject!  \\r\n\\r\nCreate some questions and weave the answers together into\nyour very own story.\\r\n\\r\nIf you need ideas, click the hints icon."
      courseF_playlab_variables7c_markdown_instruction: "Add another `ask` block\nto ask the user to guess a color.  \\r\n\\r\nKeep your `if/else` statement such\nthat your codename always wins the game, but every other codename always loses."
      courseF_playlab_variables7c_2018_markdown_instruction: "Add another `ask` block\nto ask the user to guess a color.  \\r\n\\r\nKeep your `if/else` statement such\nthat your codename always wins the game, but every other codename always loses."
      courseF_playlab_variables8b_markdown_instruction: "Use what you've learned\nto create an improv scene between the actors.\\r\n\\r\n**Improv:** *A scene\nthat actors make up on stage using information from the audience.*"
      courseF_playlab_variables8c_markdown_instruction: "Use the `join` block (in\nthe toolbox under \"Text\") to make the win/lose messages more personal by\nincorporating both the `codename` and the `color` variables into the responses."
      courseF_playlab_variables8c_2018_markdown_instruction: "Use the `join` block\n(in the toolbox under \"Text\") to make the win/lose messages more personal\nby incorporating both the `codename` and the `color` variables into the responses."
      courseF_playlab_variables_challenge1_markdown_instruction: "Use these blocks\nto make the actors share a knock-knock joke. Change the punchline and setup\nto tell your own joke!"
      courseF_playlab_variables_challenge1_2018_markdown_instruction: "Use these\nblocks to make the actors share a knock-knock joke. Change the punchline and\nsetup to tell your own joke!"
      courseF_playlab_variables_challenge2_markdown_instruction: "Now for a game\nof tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get 3\npoints.  Get exactly 10 points to win!  \\r\n \\r\nBut be careful, when Cat\nand Penguin tag each other, they take points away.\\r\n\\r\n---\\r\n\\r\nAdd the\nblocks necessary to make this game work the way it's been explained.\\r\n-\nHow will you get Dog to move in all directions using the arrow keys?\\r\n-\nHow will you add points when Dog tags Cat or Penguin?\\r\n- How will you subtract\npoints when Cat and Penguin touch?"
      courseF_playlab_variables_challenge2_2018_markdown_instruction: "Now for a\ngame of tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get\n3 points.  Get exactly 10 points to win!  \\r\n \\r\nBut be careful, when Cat\nand Penguin tag each other, they take points away.\\r\n\\r\n---\\r\n\\r\nAdd the\nblocks necessary to make this game work the way it's been explained.\\r\n-\nHow will you get Dog to move in all directions using the arrow keys?\\r\n-\nHow will you add points when Dog tags Cat or Penguin?\\r\n- How will you subtract\npoints when Cat and Penguin touch?"
      courseF_playlab_variables_challenge3_markdown_instruction: "Can you figure\nout how this \"Fortune Teller\" app works? Try adding some of the following\nfeatures to this game:\\r\n\\r\n* Change the \"yes\" and \"no\" answers to something\nmore interesting.\\r\n* Let the player ask another question after the actor\nsays the fortune.\\r\n* Give the witch two more things to say when she is in\nan `angry` or `normal` mood.\\r\n* Give the wizard his own set of fortunes.\\r\n*\nMake each actor change mood randomly.\\r\n\\r\nCheck the hints if you need help\nwith these challenges!"
      course_playlab_variables1_markdown_instruction: "This is Pirate Pegleg.  He's\nawfully hard to understand these days!  \\r\n\\r\nDecode his speech by changing\nthese pieces of text in the code:\\r\n- \"arrrg\" should be \"a\" \\r\n- \"ye\"\nshould be \"e\"\\r\n\\r\n"
      course_playlab_variables2_markdown_instruction: "Now, decode Pirate Pegleg's\nspeech by changing the value of the variables in just two places!   \\r\n-\n\"arrrg\" should be \"a\" \\r\n- \"ye\" should be \"e\"\\r\n\\r\n"
      course_playlab_variables3_markdown_instruction: "Now, decode Pirate Pegleg's\nspeech by changing the value of the variables in just two places!   \\r\n-\n\"arrrg\" should be \"a\" \\r\n- \"ye\" should be \"e\"\\r\n\\r\n"
      coursea_maze_ramp1_2018_markdown_instruction: "To get the bird to the pig,\nsnap the <xml><block type=\"maze_moveEast\"/></xml> block to the bottom of\nthe <xml><block type=\"when_run\"/></xml> block, then press ![](https://images.code.org/473d3e1e4a05104502a99048338a45df-image-1522887336604.11.32.png)!"
      coursef_maze_ramp3_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by dragging it back to the toolbox."
      coursef_maze_ramp3_2018_markdown_instruction: "*\"This pig is ruffling my feathers.\"*\\r\n\\r\nThere\nis one extra block that is going to cause the bird to crash.  \\r\nThrow it\naway by dragging it back to the toolbox."
      csd-post-survey-2017-FR_markdown_instruction: "Anything else you'd like to\nsay about your experience in the course?"
      csd-pulse-check-survey-1-free-response U1Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U2Ch1_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U2Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U3Ch1_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U3Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U4Ch1_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U4Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U5Ch1_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U5Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U6Ch1_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U6Ch1_2018_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U6Ch2_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response U6Ch2_2018_markdown_instruction: "Anything\nelse you’d like your teacher to know?"
      csd-pulse-check-survey-1-free-response_markdown_instruction: "Anything else\nyou’d like your teacher to know?"
      csd-thursday-facilitation_markdown_instruction: "# Thursday Facilitation Reflection\\r\n\\r\n##\nDiscussion-Based Sessions\\r\n\\r\nYou have now seen a couple discussion heavy\nsessions. Some specific examples include the Community (Wednesday), and Recruitment/Student\nNeeds (Thursday) sessions. What common facilitator strategies were used in\nthese sessions?\\r\n\\r\n* What are facilitators doing?\\r\n* What are teachers\ndoing?\\r\n"
      csd-thursday-pedagogy_markdown_instruction: "# Thursday Pedagogy Reflection\nPart 1\\r\n\\r\n## Differentiating Instruction\\r\n\\r\nWhat strategies have you\nlearned about for differentiating instruction to meet diverse learning needs\nof students in CS Discoveries? List at least two ideas. "
      csd-thursday-pedagogy2_markdown_instruction: "# Thursday Pedagogy Reflection\nPart 2\\r\n\\r\n## Recruiting and Student Needs\\r\n\\r\nIn the community session\nthis morning you talked about recruiting students and meeting students needs\nin the region where you work. (If you were not with your region think about\nwhat you experienced in this sessions that might apply to your region.)\\r\n\\r\n*\nWhat were common recruiting pain points teachers in your region shared?\\r\n*\nWhat were common student support needs teachers in your region shared?\\r\n*\nWhat things did you see today that you want to check in on throughout the\nyear?\\r\n* What recruiting goals do you hope to help accomplish in your region\nby the end of the year?\\r\n"
      csd-thursday-unit_markdown_instruction: "# Thursday Unit Reflection Part 1\n\\r\n\\r\n## Game Lab\\r\n\\r\nHow would you explain programming in Game Lab to\na new teacher who is interested in using it? \\r\n\\r\n* In what ways is Game\nLab an educational rather than professional tool? \\r\n* What kind of supports\nexist for students using Game Lab?\\r\n"
      csd-thursday-unit2_markdown_instruction: "# Thursday Unit Reflection Part 2\\r\n\\r\n##\nTeachers in Plugged Unit\\r\n\\r\nWhat’s the role of the teacher in this unit,\nwhere much of the computer science content is embedded in the levels?"
      csd-tuesday-facilitation_markdown_instruction: "# Facilitation Reflection\\r\n\\r\n##\nTLOs\\r\n\\r\nYou have seen 3 Model TLOs (taught by facilitators) and 2 Participant\nTLOs (taught by teachers). What patterns do you notice about what facilitators\ndo during these sessions (consider the lessons themselves and the debriefs)?\\r\n\\r\n*\nWhat are facilitators doing during lessons?\\r\n* What are facilitators doing\nduring debriefs?\\r\n* How much time is split between time when facilitators\nare talking and time when teachers are doing? \\r\n"
      csd-tuesday-pedagogy_markdown_instruction: "# Tuesday Pedagogy Reflection\\r\n\\r\n##\nClassroom Practices\\r\n\\r\nName two <a href=\"https://docs.google.com/document/d/1FhHPqlC6dU_z9retuBYb-duUwyKpnjwuEgjF4zfdhvI/edit#heading=h.xbvgs2732c34\">\nClassroom Practices</a> you saw modeled in the 5 TLOs you’ve seen in the past\ncouple of days? \\r\n\\r\n* When were they successful?\\r\n* What were characteristics\nof situations where was their room for improvement?"
      csd-tuesday-unit_markdown_instruction: "# Tuesday Unit Reflection Part 1\\r\n\\r\n##\nUnit 1 Unplugged\\r\n\\r\nHow would you respond to a teacher who asks why the\nfirst unit does not use computers?"
      csd-tuesday-unit2_markdown_instruction: "# Tuesday Unit Reflection Part 2\\r\n\\r\n##\nPositive Classroom Community\\r\n\\r\nIn what ways does the curriculum support\nbuilding a positive classroom community?"
      csd-wednesday-facilitation_markdown_instruction: "# Wednesday Facilitation\nReflection\\r\n\\r\n## Facilitator Presentations\\r\n\\r\nYou have now seen 3\nmorning kick off sessions and 3 afternoon wrap up sessions. What common facilitator\nstrategies were used in these sessions?\\r\n\\r\n* What are facilitators doing?\\r\n*\nWhat are teachers doing?\\r\n* What strategies did you see facilitators use\nto keep teachers engaged?\\r\n"
      csd-wednesday-pedagogy_markdown_instruction: "# Wednesday Pedagogy Reflection\\r\n\\r\n##\nBuilding Community & Dealing with Barriers\\r\n\\r\nIn the community session\nthis morning you talked about building community and dealing with barriers\nto growing your CS education community locally. (If you were not with your\nregion think about what you experienced in this sessions that might apply\nto your region.)\\r\n\\r\n* What were common barriers teachers in your region\nshared?\\r\n* What barriers do you personally experience that were shared by\nteachers? \\r\n* What can you do to help in your local community?\\r\n* What\nthings did you see today that you want to check in on throughout the year?\\r\n*\nWhat community development goals do you hope to help accomplish in your region\nby the end of the year?\\r\n"
      csd-wednesday-unit_markdown_instruction: "# Wednesday Unit Reflection Part\n1\\r\n\\r\n## Unit 1 and Unit 2 Connections\\r\n\\r\nWhat connections or hooks\ninto Unit 1 can be used to motivate early lessons in Unit 2?"
      csd-wednesday-unit2_markdown_instruction: "# Wednesday Unit Reflection Part\n2\\r\n\\r\n## Web Lab\\r\n\\r\nHow would you explain Web Lab to a new teacher\nwho is interested in using it?\\r\n\\r\n* In what ways is Web Lab an educational\nrather than professional tool? \\r\n* What kind of supports exist for students\nworking Web Lab?\\r\n"
      csd1dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 1,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 1\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 1. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What summative\nand formative assessment opportunities are built into the unit? \\r\n\\t* What’s\nthe role of the project(s) in the unit? \\r\n\\t* How does the project(s) apply\ncontent and skills that were developed during the unit? \\r\n2. Which student\npractices (PPCCC) are honed the most in this unit through the activities and\nprojects? \\r\n3. What are the core 2017 CSTA standards or threads of the K-12\nframework in this unit?\\r\n\\r\n\\r\n>## Getting Credit for Completing this\nReflection \\r\n\\r\n>- Once you submit your reflection, your response to the\nprompt above will be shared anonymously and reviewed by your peers, and you\nwill review the work done by other facilitators. Reviewers will be looking\nfor thoughtful and thorough answers that demonstrate that you have spent time\nconsidering the reflection questions listed above. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit.\\r\n- In order to get credit for completing this prompt,\ntwo reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to an instructor for review. You will always have a chance\nto address feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n"
      csd1dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: Before you\nstart this reflection, make sure you’ve reviewed the lessons in Unit 1 and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 1 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 1. Your response should\nclearly address each of the items below: \\r\n\\r\n1. What does a typical lesson\nin this unit look like? \\r\n\\r\n2. What is the connection between early lessons\nand later lessons?\\r\n\\r\n3. Where do you see the Curriculum Values and philosophy\nemphasized in this unit?\\r\n\\t- In what ways does the curriculum support building\na positive classroom community?\\r\n\\r\n4. How does the Input-Output-Store-Process\nmodel help prepare a student to think more deeply about the way computers\nhelp us to solve problems?\\r\n\\r\n\\r\n>## Getting Credit for Completing this\nReflection \\r\n\\r\n>- Once you submit your reflection, your response to the\nprompt above will be shared anonymously and reviewed by your peers, and you\nwill review the work done by other facilitators. Reviewers will be looking\nfor thoughtful and thorough answers that demonstrate that you have spent time\nconsidering the reflection questions listed above. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit.\\r\n- In order to get credit for completing this prompt,\ntwo reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to an instructor for review. You will always have a chance\nto address feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n"
      csd1dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 1,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 1 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 1. Your response\nshould clearly address each of the items below: \\r\n\\r\n- How would you respond\nto a teacher who asks why is the first unit does not use computers?\\r\n\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csd2dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 2,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 2\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 2. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What summative\nand formative assessment opportunities are built into the unit? \\r\n\\t* What’s\nthe role of the project(s) in the unit? \\r\n\\t* How does the project(s) apply\ncontent and skills that were developed during the unit? \\r\n\\t* What kinds\nof special considerations come with the unit long project in this unit?\\r\n2.\nWhat skills and knowledge should students leave the unit with?\\r\n3. What\nare the core 2017 CSTA standards or threads of the K-12 framework in this\nunit?\\r\n\\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection \\r\n\\r\n>-\nOnce you submit your reflection, your response to the prompt above will be\nshared anonymously and reviewed by your peers, and you will review the work\ndone by other facilitators. Reviewers will be looking for thoughtful and thorough\nanswers that demonstrate that you have spent time considering the reflection\nquestions listed above. Reviewers will have an opportunity to give feedback\non your submission, and you can respond to that feedback and resubmit.\\r\n-\nIn order to get credit for completing this prompt, two reviewers need to agree\nthat you have responded to the prompts fully. If reviewers don’t feel comfortable\nmaking a decision about your task submission, they can elevate to an instructor\nfor review. You will always have a chance to address feedback from your reviewers\nand resubmit your reflections! Reviewer feedback will show up at the bottom\nof this page, once it’s available. \\r\n \\r\n\\r\n"
      csd2dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 2, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 2 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 2. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which lessons are particularly\ntricky to teach in this unit and why? \\r\n2. How is the content spiraled or\nscaffolded within the unit? \\r\n3. What connections or hooks into Unit 1 can\nbe used to motivate early lessons in unit 2?\\r\n4. Why teach HTML and CSS\nbefore starting with JavaScript in Game Lab? \\r\n5. What two Classroom Practices\ndo you feel are most important in this unit? Why?\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n\\r\n"
      csd2dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 2,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 2 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 2. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. How would you respond\nto a teacher who says they are just going to put students on the computer\nand let them go at their own pace?\\r\n2. What’s the philosophy of using Web\nLab in this unit? \\r\n\\t* In what ways is Web Lab educational rather than\nprofessional? \\r\n\\t* What kind of supports exist for students working Web\nLab?\\r\n\\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection \\r\n\\r\n>-\nOnce you submit your reflection, your response to the prompt above will be\nshared anonymously and reviewed by your peers, and you will review the work\ndone by other facilitators. Reviewers will be looking for thoughtful and thorough\nanswers that demonstrate that you have spent time considering the reflection\nquestions listed above. Reviewers will have an opportunity to give feedback\non your submission, and you can respond to that feedback and resubmit.\\r\n-\nIn order to get credit for completing this prompt, two reviewers need to agree\nthat you have responded to the prompts fully. If reviewers don’t feel comfortable\nmaking a decision about your task submission, they can elevate to an instructor\nfor review. You will always have a chance to address feedback from your reviewers\nand resubmit your reflections! Reviewer feedback will show up at the bottom\nof this page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csd3dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 3,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 3\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 3. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What summative\nand formative assessment opportunities are built into the unit? \\r\n\\t* What’s\nthe role of the project(s) in the unit? \\r\n\\t* How does the project(s) apply\ncontent and skills that were developed during the unit? \\r\n2. Which student\npractices (PPCCC) are honed the most in this unit through the activities and\nprojects? \\r\n3. What are the core 2017 CSTA standards concepts (algorithms\n& programming, computing systems, data analysis, impacts of computing, and\nnetworks & the internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating Around Computing, Recognizing and Defining Computational\nProblems, Developing and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining Computational Artifacts, and Communicating About Computing)\nemphasized in this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n"
      csd3dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 3, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 3 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 3. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which lessons are particularly\ntricky to teach in this unit and why?\\r\n2. Which lessons are particularly\nfoundational in the unit and why?\\r\n3. How is the content spiraled or scaffolded\nwithin the unit? \\r\n4. How would you recommend a teacher differentiate instruction\nin this unit if their students had a wide range of background with programming?\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csd3dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 3,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 3 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 3. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What’s the role\nof the teacher in this unit, where much of the computer science content is\nembedded in the levels?\\r\n\\t* What’s the philosophy of programming in Game\nLab? \\r\n\\t* In what ways is Game Lab educational rather than professional?\n\\r\n\\t* What kind of supports exist for students using Game Lab?\\r\n2. What\ndoes a teacher need to keep in mind to help their students transition from\nWeb Lab to Game Lab?\\r\n\\r\n\\r\n\\r\n>## Getting Credit for Completing this\nReflection \\r\n\\r\n>- Once you submit your reflection, your response to the\nprompt above will be shared anonymously and reviewed by your peers, and you\nwill review the work done by other facilitators. Reviewers will be looking\nfor thoughtful and thorough answers that demonstrate that you have spent time\nconsidering the reflection questions listed above. Reviewers will have an\nopportunity to give feedback on your submission, and you can respond to that\nfeedback and resubmit.\\r\n- In order to get credit for completing this prompt,\ntwo reviewers need to agree that you have responded to the prompts fully.\nIf reviewers don’t feel comfortable making a decision about your task submission,\nthey can elevate to an instructor for review. You will always have a chance\nto address feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n\\r\n"
      csd4dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 4,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 4\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 4. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge should students leave the unit with? What summative and formative\nassessment opportunities are built into the unit to assess those skills and\nknowledge?\\r\n2. What kinds of special considerations come with the group\nproject in this unit?\\r\n3. What are the core 2017 CSTA standards concepts\n(algorithms & programming, computing systems, data analysis, impacts of computing,\nand networks & the internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating Around Computing, Recognizing and Defining Computational\nProblems, Developing and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining Computational Artifacts, and Communicating About Computing)\nemphasized in this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd4dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 4, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 4 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 4. Your response should\nclearly address each of the items below: \\r\n\\r\n1. CS Discoveries is set\nup to allow for the class to be taught as two separate semesters where Unit\n4 may be the first unit of a new course. What is the role of this unit in\nkicking off semester 2 of the curriculum?\\r\n2. How is the problem solving\nprocess used in this unit? How it is connected to how they used the problem\nsolving process in Units 1 to 3?\\r\n4. Where do you see the Curriculum Values\nand philosophy emphasized in this unit?\\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n"
      csd4dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 4,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 4 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 4. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. App Lab is used\nin later lessons in this unit. What is the role of App Lab in this unit? How\nis it different from other times in the curriculum a tool is present?\\r\n\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csd5dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 5,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 5\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 5. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge should students leave the unit with? What summative and formative\nassessment opportunities are built into the unit to assess those skills and\nknowledge?\\r\n3. What are the core 2017 CSTA standards concepts (algorithms\n& programming, computing systems, data analysis, impacts of computing, and\nnetworks & the internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating Around Computing, Recognizing and Defining Computational\nProblems, Developing and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining Computational Artifacts, and Communicating About Computing)\nemphasized in this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd5dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 5, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 5 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 5. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which lessons are particularly\ntricky to teach in this unit and why? \\r\n2. What is the connection between\nthe first chapter and second chapter of this unit?\\r\n3. To what depth are\nstudents expected to understand binary representation systems? How does the\norder and structure of the lessons support this understanding?\\r\n\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n"
      csd5dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 5,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 5 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 5. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. This unit makes\nuse of a tool optional (teachers can use a spreadsheet tool if they want).\nIf a teacher asked about whether to use a tool or not what kind of things\nwould say/ask in response to support them?\\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n"
      csd6dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 6,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 6\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 6. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge should students leave this unit with? What summative and formative\nassessment opportunities are built into the unit to assess those skills and\nknowledge?\\r\n2. What are the core 2017 CSTA standards concepts (algorithms\n& programming, computing systems, data analysis, impacts of computing, and\nnetworks & the internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating Around Computing, Recognizing and Defining Computational\nProblems, Developing and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining Computational Artifacts, and Communicating About Computing)\nemphasized in this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd6dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 6, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 6 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 6. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which lessons are particularly\ntricky to teach in this unit and why?\\r\n2. Which lessons are particularly\nfoundational in the unit?\\r\n3. Which programming skills from Unit 3 does\nthis unit rely upon? What new skills are introduced?\\r\n4. How does the way\nstudents program with the Circuit Playground connect back to the Input-Output-Store-Process\nmodel from Unit 1?\\r\n\\r\n>## Getting Credit for Completing this Reflection\n\\r\n\\r\n>- Once you submit your reflection, your response to the prompt above\nwill be shared anonymously and reviewed by your peers, and you will review\nthe work done by other facilitators. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nthe reflection questions listed above. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit.\\r\n- In order to get credit for completing this prompt, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to an instructor for review. You will always have a chance to\naddress feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n"
      csd6dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 6,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 6 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 6. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What advice do\nyou have for teachers about how to handle the transition from programming\nin Game Lab to programming in App Lab? \\r\n\\t* What’s the philosophy of programming\nin App Lab with Maker Toolkit? \\r\n2. In what ways are the tools in the unit\neducational rather than professional? \\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n"
      csp-post-survey-2017-FR_markdown_instruction: "Anything else you'd like to\nsay about your experience in the course?"
      csp-post-survey-2017-q36-e_markdown_instruction: "I worry because of another\nreason:"
      csp-pre-survey-2017-q36-e_markdown_instruction: "I worry because of another\nreason:"
      csp-pre-survey-2017-q36-e_2018_markdown_instruction: "I worry because of another\nreason:"
      csp-pre-survey-2017-q38_markdown_instruction: "If yes, what computer science\ncourse(s) had you taken before your current computer science class?"
      csp-pre-survey-2017-q38_2018_markdown_instruction: "If yes, what computer science\ncourse(s) had you taken before your current computer science class?"
      csp-pulse-check-survey-1-q6-FR-U1Ch2_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-1-q6-FR-U1Ch2_2018_markdown_instruction: "Anything else\nyou’d like your teacher to know?"
      csp-pulse-check-survey-2-q6-FR-U2Ch1_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-3-q6-FR-U2Ch2_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-4-q6-FR-U3Ch1_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-5-q6-FR-U4Ch1_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-6-q6-FR-U4Ch2_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-6-q6-FR-U5Ch1_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-7-q6-FR-U5Ch1_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-7-q6-FR-U5Ch2_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-pulse-check-survey-8-q6-FR-U5Ch2_markdown_instruction: "Anything else you’d\nlike your teacher to know?"
      csp-thursday-facilitation_markdown_instruction: "# Thursday Facilitation Reflection\\r\n\\r\n##\nDiscussion-Based Sessions\\r\n\\r\nYou have now seen a couple discussion heavy\nsessions. Some specific examples include the Community (Wednesday), and Recruitment/Student\nNeeds (Thursday) sessions. What common facilitator strategies were used in\nthese sessions?\\r\n\\r\n* What are facilitators doing?\\r\n* What are teachers\ndoing?"
      csp-thursday-pedagogy_markdown_instruction: "# Thursday Pedagogy Reflection\\r\n\\r\n##\nDifferentiation\\r\n\\r\nWhat strategies have you learned about for differentiating\ninstruction to meet diverse learning needs of students in CS Principles? List\nat least two ideas."
      csp-thursday-pedagogy2_markdown_instruction: "# Tuesday Pedagogy Reflection\nPart 1\\r\n\\r\n## Recruiting and Student Needs\\r\n\\r\nIn the community session\nthis morning you talked about recruiting students and meeting students needs\nin the region where you work. (If you were not with your region think about\nwhat you experienced in this sessions that might apply to your region.)\\r\n\\r\n*\nWhat were common recruiting pain points teachers in your region shared?\\r\n*\nWhat were common student support needs teachers in your region shared?\\r\n*\nWhat things did you see today that you want to check in on throughout the\nyear?\\r\n* What recruiting goals do you hope to help accomplish in your region\nby the end of the year?\\r\n"
      csp-thursday-unit_markdown_instruction: "# Thursday Unit Reflection\\r\n\\r\n##\nUnit 1 and Unit 2 Connections\\r\n\\r\nWhat connections or hooks into unit 1\nthat can be used to motivate early lessons in unit 2?\\r\n"
      csp-thursday-unit2_markdown_instruction: "# Thursday Unit Reflection Part 2\\r\n\\r\n##\nPlugged Unit\\r\n\\r\nWhat’s the role of the teacher in this unit, where much\nof the computer science content is embedded in the levels?\\r\n"
      csp-tuesday-facilitation_markdown_instruction: "# Tuesday Facilitation Practice\\r\n\\r\n##\nTLO\\r\n\\r\nYou have seen 2 Model TLOs (taught by facilitators) and 2 Participant\nTLOs (taught by teachers). What patterns do you notice about what facilitators\ndo during these sessions (consider the delivery of the lessons and the debriefs\nseparately)?\\r\n\\r\n* What are facilitators doing during lessons?\\r\n* What\nare facilitators doing during debriefs? What are teachers doing?\\r\n* In model\nlessons, how much time is split between time when facilitators are talking\nand time when teachers are doing during the lesson? "
      csp-tuesday-pedagogy_markdown_instruction: "# Tuesday Pedagogy Reflection\\r\n\\r\n##\nClassroom Practices\\r\n\\r\nName two <a href=\"https://docs.google.com/document/d/1trq3FeCBaq2G-CFugZP4ElkJapAqAtoBfl4zf7DbW48/edit#heading=h.f8m5xr9s44e2\">\npedagogical approaches</a> you saw modeled in the 5 TLOs you’ve seen in the\npast couple of days? \\r\n\\r\n* When were they successful?\\r\n* What were characteristics\nof situations where was their room for improvement?"
      csp-tuesday-unit_markdown_instruction: "# Tuesday Unit Reflection Part 1\\r\n\\r\n##\nLesson 4\\r\n\\r\nHow would you respond to a teacher who says ‘what’s the point’\nof lesson 4?\\r\n"
      csp-tuesday-unit2_markdown_instruction: "# Tuesday Unit Reflection\\r\n\\r\n##\nTechnology Issues\\r\n\\r\nMany classes have technology issues at the start\nof the year (computers are not ready yet, etc). How would you recommend a\nteacher approaches the first unit if they are having issues with technology\naccess?\\r\n"
      csp-wednesday-facilitation_markdown_instruction: "# Wednesday Facilitation\nReflection\\r\n\\r\n## Facilitator Presentations\\r\n\\r\nYou have now seen 3\nmorning kick off sessions and 3 afternoon wrap up sessions. What common facilitator\nstrategies were used in these sessions?\\r\n\\r\n* What are facilitators doing?\\r\n*\nWhat are teachers doing?\\r\n* What strategies did you see facilitators use\nto keep teachers engaged?\\r\n"
      csp-wednesday-pedagogy_markdown_instruction: "# Wednesday Pedagogy Reflection\\r\n\\r\n##\nBuilding Community & Dealing with Barriers\\r\n\\r\nIn the community session\nthis morning you talked about building community and dealing with barriers\nto growing your CS education community locally.(If you were not with your\nregion think about what you experienced in this sessions that might apply\nto your region.)\\r\n\\r\n* What were common barriers teachers in your region\nshared?\\r\n* What barriers do you personally experience that were shared by\nteachers?\\r\n* What can you do to help in your local community?\\r\n* What\nthings did you see today that you want to check in on throughout the year?\\r\n*\nWhat community development goals do you hope to help accomplish in your region\nby the end of the year?\\r\n"
      csp-wednesday-unit_markdown_instruction: "# Wednesday Unit Reflection\\r\n\\r\n##\nInternet Simulator Fatigue\\r\n\\r\nThis is a very Internet Simulator heavy\nunit. What are strategies for dealing with students who are getting fatigued\nby the end of the unit?\\r\n\\r\n"
      csp-wednesday-unit2_markdown_instruction: "# Wednesday Unit Reflection Part\n2\\r\n\\r\n## Explaining Internet Simulator\\r\n\\r\nHow would you explain the\nInternet Simulator to a new teacher who is interested in using it?\\r\n\\r\n*\nIn what ways is Internet Simulator an educational rather than professional\ntool? \\r\n* What teaching philosophy seems most effective with the Internet\nSimulator? \\r\n"
      csp1dlp-assessment_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE:\nbefore you start this reflection, make sure you’ve reviewed the lesson in\nUnit 1, and have a good sense of the the role of assessment across the unit.\nIf you haven’t already reviewed the materials, do that now and come back to\nthis reflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 1\\r\n\\r\nFor this\nreflection, you’re going to consider each of the prompts below and craft a\nwritten response that demonstrates your understanding of the lessons in Unit\n1. Your response should clearly address each of the items below: \\r\n\\r\n1.\nWhat’s the role of the practice Performance Task(s), or PTs, in the unit?\n\\r\n - Which PTs are being practiced?\\r\n - How does the practice PT build\non what content and skills were developed during the unit? \\r\n2. What summative\nand formative assessment opportunities are built into the unit? \\r\n\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csp1dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 1, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 1 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 1. Your response should\nclearly address each of the items below: \\r\n\\r\n1. What skills and knowledge\nshould students leave the unit with?\\r\n - Which Big Idea(s) are students\nlearning the most about? Where and how are those BI(s) addressed? \\r\n - Which\nskills or Computational Practices are honed through the activities and projects?\n\\r\n\\r\n2. What is the connection between early lessons and later lessons?\\r\n\n- How is the content spiraled or scaffolded within the unit? \\r\n - What foundation\nis being laid early on and how is it leveraged throughout the unit? Why? \\r\n\n- How would you respond to a teacher who says ‘what’s the point’ of lesson\n4? \\r\n\\r\n3. Which lessons are particularly tricky to teach in this unit\nand why? \\r\n\\r\n>## Getting Credit for Completing this Reflection \\r\n\\r\n>-\nOnce you submit your reflection, your response to the prompt above will be\nshared anonymously and reviewed by your peers, and you will review the work\ndone by other facilitators. Reviewers will be looking for thoughtful and thorough\nanswers that demonstrate that you have spent time considering the reflection\nquestions listed above. Reviewers will have an opportunity to give feedback\non your submission, and you can respond to that feedback and resubmit.\\r\n-\nIn order to get credit for completing this prompt, two reviewers need to agree\nthat you have responded to the prompts fully. If reviewers don’t feel comfortable\nmaking a decision about your task submission, they can elevate to an instructor\nfor review. You will always have a chance to address feedback from your reviewers\nand resubmit your reflections! Reviewer feedback will show up at the bottom\nof this page, once it’s available. \\r\n \\r\n\\r\n\\r\n"
      csp1dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 1,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 1 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 1. Your response\nshould clearly address each of the items below: \\r\n\\r\n- Why are we using\nthe Internet Simulator rather than teaching without it? \\r\n- In what ways\nis the Internet Simulator educational rather than professional? \\r\n- What’s\nthe philosophy of teaching with the Internet Simulator? \\r\n- This is a very\nInternet Simulator heavy unit. What are strategies for dealing with students\nwho are getting fatigued by the end of the unit? \\r\n- Many classes have technology\nissues at the start of the year (computers are not ready yet, etc). How would\nyou recommend a teacher approaches the first unit if she’s having issues with\ntechnology access?\\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection\n\\r\n\\r\n>- Once you submit your reflection, your response to the prompt above\nwill be shared anonymously and reviewed by your peers, and you will review\nthe work done by other facilitators. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nthe reflection questions listed above. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit.\\r\n- In order to get credit for completing this prompt, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to an instructor for review. You will always have a chance to\naddress feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n\\r\n"
      csp2dlp-assessment_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE:\nbefore you start this reflection, make sure you’ve reviewed the lesson in\nUnit 2, and have a good sense of the the role of assessment across the unit.\nIf you haven’t already reviewed the materials, do that now and come back to\nthis reflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 2 \\r\n\\r\nFor this\nreflection, you’re going to consider each of the prompts below and craft a\nwritten response that demonstrates your understanding of the lessons in Unit\n2. Your response should clearly address each of the items below: \\r\n\\r\n1.\nWhat’s the role of the practice Performance Task(s), or PTs, in the unit?\n\\r\n - How does the practice Explore PT build on what content and skills were\ndeveloped during the unit? \\r\n2. What summative and formative assessment\nopportunities are built into the unit? \\r\n\\r\n\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n\\r\n"
      csp2dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 2, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 2 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 2. Your response should\nclearly address each of the items below:\\r\n\\r\n1. What skills and knowledge\nshould students leave the unit with?\\r\n - Which Learning Objectives (LOs)\nunder the Big Idea of data are explored in the second chapter of unit 2? These\ndata-related LOs are in the interest of preparing for the Explore Task. How\nwould you explain the lens used to look at data in chapter 2 and the connection\nto the Explore Task?\\r\n - Which skills or Computational Practices are honed\nthrough the activities and projects? \\r\n2. What is the connection between\nearly lessons and later lessons?\\r\n - What connections or hooks into unit\n1 that can be used to motivate early lessons in unit 2? \\r\n - How would you\ndescribed the connection between chapter 1 and chapter 2 to a teacher? \\r\n\n- What foundation is being laid early on and how is it leveraged throughout\nthe unit? Why? \\r\n3. Which lessons are particularly tricky to teach in this\nunit and why? \\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection\n\\r\n\\r\n>- Once you submit your reflection, your response to the prompt above\nwill be shared anonymously and reviewed by your peers, and you will review\nthe work done by other facilitators. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nthe reflection questions listed above. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit.\\r\n- In order to get credit for completing this prompt, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to an instructor for review. You will always have a chance to\naddress feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n\\r\n\\r\n"
      csp2dlp-tools_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you start\nthis reflection, make sure you’ve reviewed the lesson in Unit 2, and have\na good sense of the the role of tools in the lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 2 Tool Philosophy and Use\\r\n\\r\nFor this reflection, you’re going to\nconsider each of the prompts below and craft a written response that demonstrates\nyour understanding of the lessons in Unit 2. Your response should clearly\naddress each of the items below: \\r\n\\r\n- Why are we using whatever tools\nare present in the unit rather than teaching without them? \\r\n- In what ways\nare the tools in the unit educational rather than professional? \\r\n- What’s\nthe philosophy of teaching with these tools? \\r\n\\r\n\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n"
      csp3dlp-assessment_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE:\nbefore you start this reflection, make sure you’ve reviewed the lesson in\nUnit 3, and have a good sense of the the role of assessment across the unit.\nIf you haven’t already reviewed the materials, do that now and come back to\nthis reflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 3 \\r\n\\r\nFor this\nreflection, you’re going to consider each of the prompts below and craft a\nwritten response that demonstrates your understanding of the lessons in Unit\n3. Your response should clearly address each of the items below: \\r\n\\r\n1.\nWhat’s the role of the practice Performance Task(s), or PTs, in the unit?\n\\r\n - How does the practice Create PT build on what content and skills were\ndeveloped during the unit? \\r\n2. What summative and formative assessment\nopportunities are built into the unit? \\r\n\\r\n\\r\n\\r\n\\r\n>## Getting Credit\nfor Completing this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n\\r\n"
      csp3dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 3, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 3 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 3. Your response should\nclearly address each of the items below: \\r\n\\r\n1. What skills and knowledge\nshould students leave the unit with?\\r\n - Which Big Idea(s) are students\nlearning the most about? Where and how are those BI(s) addressed? \\r\n - Which\nskills or Computational Practices are honed through the activities and projects?\n\\r\n2. What is the connection between early lessons and later lessons?\\r\n\n- How is the content spiraled or scaffolded within the unit? \\r\n - How would\nyou respond to a teacher who says ‘what’s the point’ of lessons 1 - 3? \\r\n\n- Unit 3 starts with sequencing, functions, and functions with parameters,\nwhich is not a typical way of starting a unit on programming (many lead with\nvariables, for example). What are some of the potential reasons and benefits\nof doing it this way?\\r\n - What foundation is being laid early on and how\nis it leveraged throughout the unit? Why? \\r\n - Which lessons are particularly\ntricky to teach in this unit and why? \\r\n3. How would you recommend a teacher\ndifferentiate instruction in this unit if her students had a wide range of\nbackground with programming?\\r\n\\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n\\r\n\\r\n"
      csp3dlp-tools_markdown_instruction: "\\r\n<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 3, and\nhave a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 3 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 3. Your response\nshould clearly address each of the items below:\\r\n\\r\n- Why are we using\nApplab in Code Studio rather than teaching with another tool? \\r\n- In what\nways is Applab educational rather than professional? \\r\n- What’s the role\nof the teacher in this unit, where much of the cs content is embedded in the\nlevels?\\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection \\r\n\\r\n>-\nOnce you submit your reflection, your response to the prompt above will be\nshared anonymously and reviewed by your peers, and you will review the work\ndone by other facilitators. Reviewers will be looking for thoughtful and thorough\nanswers that demonstrate that you have spent time considering the reflection\nquestions listed above. Reviewers will have an opportunity to give feedback\non your submission, and you can respond to that feedback and resubmit.\\r\n-\nIn order to get credit for completing this prompt, two reviewers need to agree\nthat you have responded to the prompts fully. If reviewers don’t feel comfortable\nmaking a decision about your task submission, they can elevate to an instructor\nfor review. You will always have a chance to address feedback from your reviewers\nand resubmit your reflections! Reviewer feedback will show up at the bottom\nof this page, once it’s available. \\r\n \\r\n"
      csp4dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 4,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 4 \\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 4. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What’s the role\nof the practice Performance Task(s), or PTs, in the unit? \\r\n2. What summative\nand formative assessment opportunities are built into the unit? \\r\n\\r\n\\r\n\\r\n>##\nGetting Credit for Completing this Reflection \\r\n\\r\n>- Once you submit your\nreflection, your response to the prompt above will be shared anonymously and\nreviewed by your peers, and you will review the work done by other facilitators.\nReviewers will be looking for thoughtful and thorough answers that demonstrate\nthat you have spent time considering the reflection questions listed above.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit.\\r\n- In order to get credit\nfor completing this prompt, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to an instructor for review.\nYou will always have a chance to address feedback from your reviewers and\nresubmit your reflections! Reviewer feedback will show up at the bottom of\nthis page, once it’s available. \\r\n \\r\n\\r\n"
      csp4dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 4, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 4 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 4. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which Big Idea(s) are\nstudents learning the most about? Where and how are those BI(s) addressed?\n\\r\n2. Which skills or Computational Practices are honed through the activities\nand projects? \\r\n3. What recommendations do you have about the optional lessons\nin this unit? (when and why would a teacher choose to use them?)\\r\n4. How\ncan the material covered in the earlier units be connected to Unit 4 topics?\n(specifically the internet and data) \\r\n5. Which lessons are particularly\ntricky to teach in this unit and why? \\r\n \\r\n\\r\n>## Getting Credit for\nCompleting this Reflection \\r\n\\r\n>- Once you submit your reflection, your\nresponse to the prompt above will be shared anonymously and reviewed by your\npeers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csp4dlp-tools_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you start\nthis reflection, make sure you’ve reviewed the lesson in Unit 4, and have\na good sense of the the role of tools in the lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 4 Tool Philosophy and Use\\r\n\\r\nFor this reflection, you’re going to\nconsider each of the prompts below and craft a written response that demonstrates\nyour understanding of the lessons in Unit 4. Your response should clearly\naddress each of the items below:\\r\n\\r\n- Why are we using whatever tools\nare present in the unit rather than teaching without them? \\r\n- What’s the\nphilosophy of teaching with these tools? \\r\n\\r\n\\r\n>## Getting Credit for\nCompleting this Reflection \\r\n\\r\n>- Once you submit your reflection, your\nresponse to the prompt above will be shared anonymously and reviewed by your\npeers, and you will review the work done by other facilitators. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering the reflection questions listed above. Reviewers\nwill have an opportunity to give feedback on your submission, and you can\nrespond to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csp5dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 5,\nand have a good sense of the the role of assessment across the unit. If you\nhaven’t already reviewed the materials, do that now and come back to this\nreflection later.**\\r\n\\r\n\\r\n# Assessment in Unit 5\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 5. Your response\nshould clearly address each of the items below: \\r\n\\r\n1. What content that’s\ncovered in unit 5 is required for the create PT? What content is going to\nbe on the fixed-response exam (as shown in the exam reference guide in the\ncourse and exam description) but isn’t required for the performance task?\n\\r\n2. What summative and formative assessment opportunities are built into\nthe unit? \\r\n\\r\n\\r\n\\r\n\\r\n>## Getting Credit for Completing this Reflection\n\\r\n\\r\n>- Once you submit your reflection, your response to the prompt above\nwill be shared anonymously and reviewed by your peers, and you will review\nthe work done by other facilitators. Reviewers will be looking for thoughtful\nand thorough answers that demonstrate that you have spent time considering\nthe reflection questions listed above. Reviewers will have an opportunity\nto give feedback on your submission, and you can respond to that feedback\nand resubmit.\\r\n- In order to get credit for completing this prompt, two\nreviewers need to agree that you have responded to the prompts fully. If reviewers\ndon’t feel comfortable making a decision about your task submission, they\ncan elevate to an instructor for review. You will always have a chance to\naddress feedback from your reviewers and resubmit your reflections! Reviewer\nfeedback will show up at the bottom of this page, once it’s available. \\r\n\n\\r\n\\r\n\\r\n"
      csp5dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart this reflection, make sure you’ve reviewed the lesson in Unit 5, and\nhave a good sense of the connections between lessons. If you haven’t already\nreviewed the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit 5 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing to consider each of the prompts below and craft a written response that\ndemonstrates your understanding of the lessons in Unit 5. Your response should\nclearly address each of the items below: \\r\n\\r\n1. Which Big Idea(s) are\nstudents learning the most about? Where and how are those BI(s) addressed?\n\\r\n2. Which skills or Computational Practices are honed through the activities\nand projects? \\r\n3. What advice do you have for teachers about how to handle\nthe transition from turtle (back in unit 3)  to event-driven programming (here\nin unit 5)?  \\r\n4. What lessons are foundational to this unit? How are they\nimportant to success in later lessons?\\r\n5. Which lessons are particularly\ntricky to teach in this unit and why? \\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n\\r\n \\r\n"
      csp5dlp-tools_markdown_instruction: "\\r\n\\r\n<br><br>\\r\n\\r\n> **NOTE: before\nyou start this reflection, make sure you’ve reviewed the lesson in Unit 5,\nand have a good sense of the the role of tools in the lessons. If you haven’t\nalready reviewed the materials, do that now and come back to this reflection\nlater.**\\r\n\\r\n\\r\n# Unit 5 Tool Philosophy and Use\\r\n\\r\nFor this reflection,\nyou’re going to consider each of the prompts below and craft a written response\nthat demonstrates your understanding of the lessons in Unit 5. Your response\nshould clearly address each of the items below:\\r\n\\r\n1. What’s the philosophy\nof teaching with Applab? \\r\n2. What’s the general cadence and structure of\na lesson in unit 5? *(how are the levels in a typical lesson paced out, and\nwhat’s the general progression)*\\r\n\\r\n\\r\n\\r\n>## Getting Credit for Completing\nthis Reflection \\r\n\\r\n>- Once you submit your reflection, your response\nto the prompt above will be shared anonymously and reviewed by your peers,\nand you will review the work done by other facilitators. Reviewers will be\nlooking for thoughtful and thorough answers that demonstrate that you have\nspent time considering the reflection questions listed above. Reviewers will\nhave an opportunity to give feedback on your submission, and you can respond\nto that feedback and resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers need to agree that you have responded to the prompts\nfully. If reviewers don’t feel comfortable making a decision about your task\nsubmission, they can elevate to an instructor for review. You will always\nhave a chance to address feedback from your reviewers and resubmit your reflections!\nReviewer feedback will show up at the bottom of this page, once it’s available.\n"
      csp_U3_plan_code_FR_markdown_instruction: "<img src=\"https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png\"\nstyle=\"float: right\">\\r\n\\r\n<br>\\r\n\\r\nIn this lesson we talked about\nhow to build up solutions to larger programming problems with functions.  Plan\nthe code that you would use to draw this image (shown at right). Describe\neach of the functions that you would create. You should not write all the\ncode, only the names of the functions that you would create with a brief description\nof what each function would do. \\r\n\\r\nWrite your plan following the format:\\r\n\\r\n<div\nstyle=\"clear: both\"> </div>\\r\n\\r\n    Name of function - description of\nwhat it does\\r\n\\r\n    Name of function 2 - description of what it does\\r\n    ..."
      csp_U3_square_v_rect_FR_markdown_instruction: "<img src=\"https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png\"\nstyle=\"float: right\">\\r\n\\r\nIn this lesson you wrote code to make the turtle\ndraw squares. Briefly describe how the code for drawing a rectangle would\nbe different than drawing a square.  (Example rectangle at right)"
      csp_affirmation_control_markdown_instruction: "This brief activity allows you\nto reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_control_2_markdown_instruction: "This brief activity allows\nyou to reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_control_2018_markdown_instruction: "This brief activity allows\nyou to reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_control_3_markdown_instruction: "This brief activity allows\nyou to reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_control_4_markdown_instruction: "This brief activity allows\nyou to reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_control_5_markdown_instruction: "This brief activity allows\nyou to reflect about what you have learned in this course so far. It is provided\nto you by your teacher, but *you will not be graded on this.*\\r\n\\r\nSome\ntopics in the course may be interesting to you, others may be less interesting.\\r\n\\r\n<strong>\\r\n&#49;.\nWrite down 1 or 2 topics that are most interesting to you:\\r\n\\r\n</strong>\\r\n\\r\n<input\ntype=text><br>\\r\n<input type=text>\\r\n<br><br>\\r\n\\r\n<strong>\\r\n&#50;.\nHow did you prepare for taking this test? Do you feel more or less prepared\nto answer questions about the topics that interest you?\\r\n</strong>\\r\n\\r\n*Write\na few sentences, focusing on your thoughts and feelings, don't worry about\nhow well written it is.*"
      csp_affirmation_intervention_markdown_instruction: "This brief activity allows\nyou to reflect about what’s most important to you. It is provided to you by\nyour teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is a list\nof values and qualities. Some of them may be important to you, others may\nbe unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_affirmation_intervention_2_markdown_instruction: "This brief activity allows\nyou to reflect about what’s most important to you. It is provided to you by\nyour teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is a list\nof values and qualities. Some of them may be important to you, others may\nbe unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_affirmation_intervention_2018_markdown_instruction: "This brief activity\nallows you to reflect about what’s most important to you. It is provided to\nyou by your teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is\na list of values and qualities. Some of them may be important to you, others\nmay be unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_affirmation_intervention_3_markdown_instruction: "This brief activity allows\nyou to reflect about what’s most important to you. It is provided to you by\nyour teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is a list\nof values and qualities. Some of them may be important to you, others may\nbe unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_affirmation_intervention_4_markdown_instruction: "This brief activity allows\nyou to reflect about what’s most important to you. It is provided to you by\nyour teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is a list\nof values and qualities. Some of them may be important to you, others may\nbe unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_affirmation_intervention_5_markdown_instruction: "This brief activity allows\nyou to reflect about what’s most important to you. It is provided to you by\nyour teacher, but *you will not be graded on this.*\\r\n\\r\nBelow is a list\nof values and qualities. Some of them may be important to you, others may\nbe unimportant. \\r\n\\r\n<strong>\\r\n&#49;. What's most important to you?</strong>\n(select one or more)\\r\n\\r\n\\r\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5\ncellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color:\n#FFFFFF\">\\r\n  <tr style=\"border: 5px solid white\">\\r\n    <td width=25%\nstyle=\"border: 5px solid white;\">\\r\n    <label><input type=\"checkbox\">\nRelationships with friends and family\\r\n    </label></td>\\r\n    <td width=25%\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSports and athletics\\r\n    </label></td>\\r\n    <td width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Relationships with\nfriends or family\\r\n    </label></td>\\r\n    <td  width=25% style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Creativity\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpirituality or religion\\r\n    </label></td>\\r\n    <td style=\"border: 5px\nsolid white\">\\r\n    <label><input type=\"checkbox\"> Sense of humor\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nHealth and fitness\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Physical attractiveness\\r\n    </label></td>\\r\n  </tr>\\r\n  <tr>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nRomantic values\\r\n    </label></td>\\r\n    <td style=\"border: 5px solid\nwhite\">\\r\n    <label><input type=\"checkbox\"> Kindness\\r\n    </label></td>\\r\n    <td\nstyle=\"border: 5px solid white\">\\r\n    <label><input type=\"checkbox\">\nSpontaneity, living life in the moment\\r\n    </label></td>\\r\n    <td style=\"border:\n5px solid white\">\\r\n    <label><input type=\"checkbox\"> Independence\\r\n    </label></td>\\r\n  </tr>\\r\n</table>\\r\n<br>\\r\n<br>\\r\n\\r\n<strong>\\r\n&#50;.\nWhy are these values important to you? Describe a time in your life when they\nwere really important.\\r\n</strong>\\r\n\\r\n*Write a few sentences. Focus on\nyour thoughts and feelings, don't worry about how well written it is.*"
      csp_socialBelonging_control_markdown_instruction: "\\r\n## Starting out in Computer\nScience\\r\n\\r\nComputer science has changed the way we communicate with each\nother, make art and movies, grow food, and even treat illnesses. Everyone\ncan learn computer science and make a difference.\\r\n\\r\n***\\r\n\\r\n## Quotes\nfrom students\\r\n\\r\nStill, we understand that taking a computer science course\ncan be difficult at first. Here are a few student quotes describing their\nstrategies and tips for taking this course. **Please read the quotes carefully\nand respond to the prompt below**. \\r\n\\r\n<div style=\"background-color:\n#d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:\n0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size: 70px; margin-bottom:\n-10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p style=\"line-height:\n1.5; margin-left: 10px; margin-right: 30px; \">\\r\nIn the first week of this\nclass I was falling behind quickly. There was a lot of new information to\nlearn. To keep up, I had to find a better way to study. I tried to find connections\nbetween the material and what I already know. That really helped me remember\nthings. I also tried to not overdo it. I started taking small breaks in-between\nlessons and when I came back I checked if I still remembered what I was studying\nbefore. It helped a lot\\r\n </p>\\r\n<p style=\"font-size: 70px; text-align:\nright; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%; font-style: italic; margin-right:\n70px; margin-top: -20px; \">\\r\nSofia P. (age 16)\\r\n</p>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:\n#000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px;\">Some days I felt tired and would drift away in my thoughts. It was\na real problem because I would miss so much of what we were learning. So I\nstarted going to bed a bit earlier and I tried my best to pay attention. At\nthe end of every class our teacher summarized\\r\n what we learned that day\nand that was really helpful. I started taking more notes because that also\nkept my mind from wandering. These little tricks got me through the class\nand I learned more.</p>\\r\n<p style=\"font-size: 70px; text-align: right;\nopacity: 0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size: 125%;  font-style:\nitalic; margin-right: 30px; margin-top: -20px\">\\r\nJasmin D. (age 17)\\r\n</p>\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:\n#000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size:\n70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p\nstyle=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I\\r\n\ncan be pretty forgetful sometimes and it was a problem in this class. I think\nit's because we did so much on the computer. For my other classes I take\nnotes on paper and read through them again at home. So the trick that I found\nhelpful in this class was to take notes on paper anyway and to test myself\nabout the concepts. I wasn't sure if it would work at first, but I think\nit ended up being a big help.</p>\\r\n\\r\n<p style=\"font-size: 70px; text-align:\nright; opacity: 0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size:\n125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\\r\nSam\nJ. (age 17)\\r\n</p>\\r\n</div>\\r\n\\r\n***\\r\n<p style=\"font-size: 125%\">Now\nconsider the strategies and insights for how to learn best that you just read.\n</p>\\r\n\\r\n## Reflect and Summarize: \\r\n\\r\n<p style=\"font-size: 150%;\ncolor: black; font-weight: bolder; line-height: 1.5\">What are your own strategies\nand insights about how to learn best? And, how are they similar or different\nto the ones that you just heard about from other students? </p>\\r\n\\r\n*Please\nwrite a short paragraph. Don't worry about spelling, grammar, or how well\nwritten it is.*"
      csp_socialBelonging_control_2018_markdown_instruction: "\\r\n## Starting out\nin Computer Science\\r\n\\r\nComputer science has changed the way we communicate\nwith each other, make art and movies, grow food, and even treat illnesses.\nEveryone can learn computer science and make a difference.\\r\n\\r\n***\\r\n\\r\n##\nQuotes from students\\r\n\\r\nStill, we understand that taking a computer science\ncourse can be difficult at first. Here are a few student quotes describing\ntheir strategies and tips for taking this course. **Please read the quotes\ncarefully and respond to the prompt below**. \\r\n\\r\n<div style=\"background-color:\n#d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:\n0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size: 70px; margin-bottom:\n-10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p style=\"line-height:\n1.5; margin-left: 10px; margin-right: 30px; \">\\r\nIn the first week of this\nclass I was falling behind quickly. There was a lot of new information to\nlearn. To keep up, I had to find a better way to study. I tried to find connections\nbetween the material and what I already know. That really helped me remember\nthings. I also tried to not overdo it. I started taking small breaks in-between\nlessons and when I came back I checked if I still remembered what I was studying\nbefore. It helped a lot\\r\n </p>\\r\n<p style=\"font-size: 70px; text-align:\nright; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%; font-style: italic; margin-right:\n70px; margin-top: -20px; \">\\r\nSofia P. (age 16)\\r\n</p>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:\n#000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px;\">Some days I felt tired and would drift away in my thoughts. It was\na real problem because I would miss so much of what we were learning. So I\nstarted going to bed a bit earlier and I tried my best to pay attention. At\nthe end of every class our teacher summarized\\r\n what we learned that day\nand that was really helpful. I started taking more notes because that also\nkept my mind from wandering. These little tricks got me through the class\nand I learned more.</p>\\r\n<p style=\"font-size: 70px; text-align: right;\nopacity: 0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size: 125%;  font-style:\nitalic; margin-right: 30px; margin-top: -20px\">\\r\nJasmin D. (age 17)\\r\n</p>\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:\n#000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size:\n70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p\nstyle=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I\\r\n\ncan be pretty forgetful sometimes and it was a problem in this class. I think\nit's because we did so much on the computer. For my other classes I take\nnotes on paper and read through them again at home. So the trick that I found\nhelpful in this class was to take notes on paper anyway and to test myself\nabout the concepts. I wasn't sure if it would work at first, but I think\nit ended up being a big help.</p>\\r\n\\r\n<p style=\"font-size: 70px; text-align:\nright; opacity: 0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size:\n125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\\r\nSam\nJ. (age 17)\\r\n</p>\\r\n</div>\\r\n\\r\n***\\r\n<p style=\"font-size: 125%\">Now\nconsider the strategies and insights for how to learn best that you just read.\n</p>\\r\n\\r\n## Reflect and Summarize: \\r\n\\r\n<p style=\"font-size: 150%;\ncolor: black; font-weight: bolder; line-height: 1.5\">What are your own strategies\nand insights about how to learn best? And, how are they similar or different\nto the ones that you just heard about from other students? </p>\\r\n\\r\n*Please\nwrite a short paragraph. Don't worry about spelling, grammar, or how well\nwritten it is.*"
      csp_socialBelonging_intervention_markdown_instruction: "## Starting out in\nComputer Science\\r\n\\r\nComputer science has changed the way we communicate\nwith each other, make art and movies, grow food, and even treat illnesses.\n**Everyone can learn computer science and make a difference:** It really does\nnot matter how much or little experience you have with computer science already,\nor what age, gender, or skin color you have.\\r\n\\r\n***\\r\n\\r\n## Quotes from\nstudents\\r\n\\r\nStill, we understand that it can be daunting at first to take\na computer science course. So here are a few student quotes describing their\nexperiences. **Please read the quotes carefully and respond to the prompt\nbelow**. \\r\n\\r\n\\r\n<div style=\"background-color: #d9eff7; border-radius:\n40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px; \">\\r\nAt the start of the class I worried that I was different from\nthe other students. I wasn't sure I fit in – I \\tworried that I couldn’t\ndo it and that the teacher and other students would look down on me. A few\ndays after I started, I realized that almost everyone who takes the class\nisn’t sure if they fit in at first. It's something everyone goes through.\nNow it seems ironic – everybody feels different at first, when really we're\nall going through the same thing.</p>\\r\n<p style=\"font-size: 70px; text-align:\nright; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%; font-style: italic; margin-right:\n70px; margin-top: -20px; \">\\r\nSofia P. (age 16)\\r\n</p>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:\n#000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px;\">I loved this computer science class! I've met some cool people and\nlearned a lot. But it was a difficult transition. The first few days I was\nintimidated and not sure why I should learn computer science. Why would I\nneed it? But then we talked in class about things I’m interested in, like\nmusic and design, and I realized that I can learn how to do cool new things.\nI had the wrong picture in my head about CS, it’s actually very creative!\nI just had to be patient and find ways to connect the class to what I really\ncare about.</p>\\r\n<p style=\"font-size: 70px; text-align: right; opacity:\n0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size: 125%;  font-style:\nitalic; margin-right: 30px; margin-top: -20px\">\\r\nJasmin D. (age 17)\\r\n</p>\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:\n#000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size:\n70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p\nstyle=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I didn’t\nhave any experience with code, and I worried that I was not prepared for this\nclass. Other students did some programming at home or in summer camps. On\nmy first day, I was so nervous about getting bad grades and looking stupid.\nBut then, I started to feel better – I talked with other students and enjoyed\nthe class more. I became more comfortable asking for help when I had a problem.\nIt turned out that the students with CS experience had the same issues as\nme! Hah, it took some time, but now I really feel like I belong in CS class.</p>\\r\n\\r\n<p\nstyle=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%;  font-style: italic; margin-right:\n30px; margin-top: -20px\">\\r\nSam J. (age 17)\\r\n</p>\\r\n</div>\\r\n\\r\n***\\r\n<p\nstyle=\"font-size: 125%\"> Each of these students had similar experiences\nand realizations. </p>\\r\n\\r\n## Reflect and Summarize: \\r\n\\r\n\\r\n<p style=\"font-size:\n150%; color: black; font-weight: bolder; line-height: 1.5\">Why do you think\nthe students worry at first about whether they belong in the class? How did\nthey become comfortable with it over time?</p>\\r\n\\r\n*Please write a short\nparagraph. Don't worry about spelling, grammar, or how well written it is.*"
      csp_socialBelonging_intervention_2018_markdown_instruction: "## Starting out\nin Computer Science\\r\n\\r\nComputer science has changed the way we communicate\nwith each other, make art and movies, grow food, and even treat illnesses.\n**Everyone can learn computer science and make a difference:** It really does\nnot matter how much or little experience you have with computer science already,\nor what age, gender, or skin color you have.\\r\n\\r\n***\\r\n\\r\n## Quotes from\nstudents\\r\n\\r\nStill, we understand that it can be daunting at first to take\na computer science course. So here are a few student quotes describing their\nexperiences. **Please read the quotes carefully and respond to the prompt\nbelow**. \\r\n\\r\n\\r\n<div style=\"background-color: #d9eff7; border-radius:\n40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px; \">\\r\nAt the start of the class I worried that I was different from\nthe other students. I wasn't sure I fit in – I \\tworried that I couldn’t\ndo it and that the teacher and other students would look down on me. A few\ndays after I started, I realized that almost everyone who takes the class\nisn’t sure if they fit in at first. It's something everyone goes through.\nNow it seems ironic – everybody feels different at first, when really we're\nall going through the same thing.</p>\\r\n<p style=\"font-size: 70px; text-align:\nright; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%; font-style: italic; margin-right:\n70px; margin-top: -20px; \">\\r\nSofia P. (age 16)\\r\n</p>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:\n#000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n\\r\n<p\nstyle=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:\n0.5\">&ldquo;</p>\\r\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right:\n30px;\">I loved this computer science class! I've met some cool people and\nlearned a lot. But it was a difficult transition. The first few days I was\nintimidated and not sure why I should learn computer science. Why would I\nneed it? But then we talked in class about things I’m interested in, like\nmusic and design, and I realized that I can learn how to do cool new things.\nI had the wrong picture in my head about CS, it’s actually very creative!\nI just had to be patient and find ways to connect the class to what I really\ncare about.</p>\\r\n<p style=\"font-size: 70px; text-align: right; opacity:\n0.5\">&rdquo;</p>\\r\n<p style=\"text-align: right; font-size: 125%;  font-style:\nitalic; margin-right: 30px; margin-top: -20px\">\\r\nJasmin D. (age 17)\\r\n</p>\\r\n</div>\\r\n<br>\\r\n\\r\n<div\nstyle=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:\n#000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\\r\n\\r\n<p style=\"font-size:\n70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\\r\n<p\nstyle=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I didn’t\nhave any experience with code, and I worried that I was not prepared for this\nclass. Other students did some programming at home or in summer camps. On\nmy first day, I was so nervous about getting bad grades and looking stupid.\nBut then, I started to feel better – I talked with other students and enjoyed\nthe class more. I became more comfortable asking for help when I had a problem.\nIt turned out that the students with CS experience had the same issues as\nme! Hah, it took some time, but now I really feel like I belong in CS class.</p>\\r\n\\r\n<p\nstyle=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\\r\n<p\nstyle=\"text-align: right; font-size: 125%;  font-style: italic; margin-right:\n30px; margin-top: -20px\">\\r\nSam J. (age 17)\\r\n</p>\\r\n</div>\\r\n\\r\n***\\r\n<p\nstyle=\"font-size: 125%\"> Each of these students had similar experiences\nand realizations. </p>\\r\n\\r\n## Reflect and Summarize: \\r\n\\r\n\\r\n<p style=\"font-size:\n150%; color: black; font-weight: bolder; line-height: 1.5\">Why do you think\nthe students worry at first about whether they belong in the class? How did\nthey become comfortable with it over time?</p>\\r\n\\r\n*Please write a short\nparagraph. Don't worry about spelling, grammar, or how well written it is.*"
      cspu3_assess1_filltable_markdown_instruction: "Use Top-Down Design strategy\nto fill in the table below. The first line is given to you. You may use as\nmany or as few rows in the table as you see fit.\\r\n\\r\n_NOTE: Use a new line\nfor each entry to the table. Write each line in the format of \"Function Name\n: Description\"_\\r\n\\r\n**Top-Down Design Strategy:**\\r\n\\r\n* Look at the\nbig picture…\\r\n* Identify a sub-task…\\r\n* Break down that sub-task into\nsmaller sub-task(s)...\\r\n* Keep going until you’re down to the commands you\nalready have access to.\\r\n\\r\n| Function Name   | Description / Justification\n|\\r\n|-----------------|-----------------------------|\\r\n| drawSnowflake()\n| Draw a 6 pointed snowflake  |\\r\n| (Your answer)   | (Your answer)               |\\r\n\\r\n\\r\n"
      cspu3_assess1_filltable_exam_prep_markdown_instruction: "Use Top-Down Design\nstrategy to fill in the table below. The first line is given to you. You may\nuse as many or as few rows in the table as you see fit.\\r\n\\r\n_NOTE: Use\na new line for each entry to the table. Write each line in the format of \"Function\nName : Description\"_\\r\n\\r\n**Top-Down Design Strategy:**\\r\n\\r\n* Look at\nthe big picture…\\r\n* Identify a sub-task…\\r\n* Break down that sub-task into\nsmaller sub-task(s)...\\r\n* Keep going until you’re down to the commands you\nalready have access to.\\r\n\\r\n| Function Name   | Description / Justification\n|\\r\n|-----------------|-----------------------------|\\r\n| drawSnowflake()\n| Draw a 6 pointed snowflake  |\\r\n| (Your answer)   | (Your answer)               |\\r\n\\r\n\\r\n"
      cspu3_assess1_freeresponse_markdown_instruction: "Explain how abstraction allows\nfor the creation of increasingly complex systems.  Reference top-down design\nstrategy in your response."
      cspu3_assess1_freeresponse_exam_prep_markdown_instruction: "Explain how abstraction\nallows for the creation of increasingly complex systems.  Reference top-down\ndesign strategy in your response."
      cspu5_assess1_shortresponse_markdown_instruction: "**Short Response:** \\r\n\\r\nTwo\nstudents, Kaleb and Hunter, are arguing in class about an App Lab project.\nKaleb states, “Huh, a button and an image are basically the same thing!”.  Hunter\nreplies, “That doesn’t make any sense at all!”.\\r\n\\tExplain what Kaleb may\nhave meant by that statement."
      cspu5_assess1_shortresponse_exam_prep_markdown_instruction: "**Short Response:**\n\\r\n\\r\nTwo students, Kaleb and Hunter, are arguing in class about an App\nLab project. Kaleb states, “Huh, a button and an image are basically the same\nthing!”.  Hunter replies, “That doesn’t make any sense at all!”.\\r\n\\tExplain\nwhat Kaleb may have meant by that statement."
      cspu5_assess2_flowChart_markdown_instruction: "The human question below has\na yes/no answer. Create a flowchart that shows the logical progression of\nthe questions that need to be answered to arrive at yes or no. Your diagram\nshould consider the day of the week, time of day, and account for both possible\noutcomes.\\r\n\\r\n| Question                         | Question |\\r\n|----------------------------------|----------|\\r\n|\nShould I be at school right now? |   (Input your flowchart here)     |"
      cspu5_assess2_match_markdown_instruction: "The following statements are true\nabout event handlers, if-statements, or both in App Lab.  Place the letter\nnext to each statement into the appropriate area of the table below.\\r\n\\r\n**Statements:**\\r\n\\r\n*\nA. Runs code in response to a user action\\r\n* B. Runs code in response to\nstatement being evaluated to True\\r\n* C. Evaluated sequentially once execution\nis “inside” the statement\\r\n* D. Can be triggered at any time\\r\n* E. Used\nto run a block of code\\r\n\\r\n_Note: Make a new line for each box._\\r\n\\r\n    Event\nHandlers: x, x\\r\n    if Statements: x, x\\r\n    Both: x, x\\r\n"
      cspu5_assess2_pseudocode2_markdown_instruction: "A _pseudocode_ program is\nstarted below that asks the user for input and stores the value in a variable.  Continue\nwriting pseudocode to accomplish this task: \\r\n\\r\nIf the hour is within\nthe school day (8 to 15) then display  “Nice to see you!”, Otherwise, display\n“It’s time to go home!\\r\n\\r\n    DISPLAY (“Enter the hour of day (0-23)”)\\r\n    hour\n<- INPUT ()"
      cspu5_assess2_pseudocode2_exam_prep_markdown_instruction: "A _pseudocode_ program\nis started below that asks the user for input and stores the value in a variable.  Continue\nwriting pseudocode to accomplish this task: \\r\n\\r\nIf the hour is within\nthe school day (8 to 15) then display  “Nice to see you!”, Otherwise, display\n“It’s time to go home!\\r\n\\r\n    DISPLAY (“Enter the hour of day (0-23)”)\\r\n    hour\n<- INPUT ()"
      cspu5_assess2_shortAnswer_markdown_instruction: "**Short answer:** When might\na programmer create a global variable instead of a local variable?"
      cspu5_assess2_shortAnswer2_markdown_instruction: "**Short Answer:**\\r\n\\r\nIn\nthe previous class periods, you developed a digital assistant that is able\nto “intelligently” respond to a limited set of questions and statements.  Assume\nyou have created a much more robust digital assistant with capabilities similar\nto those of Siri.  Describe two possible user inputs:  one question that a\ndigital assistant could “intelligently” answer easily, and another that it\ncould not. Explain what makes the first easy and the second difficult for\na digital assistant. (Consider the code used to develop your digital assistant.)"
      cspu5_assess2_shortAnswer_exam_prep_markdown_instruction: "**Short answer:**\nWhen might a programmer create a global variable instead of a local variable?"
      cspu5_assess2_trueFalse_markdown_instruction: "For each expression below, circle\nwhether it evaluates to true or false. The variable temperature is initialized\nas shown.\\r\n\\r\n    var temperature = 30;\\r\n\\r\nExpressions:\\r\n\\r\n* (temperature\n> 0) && (temperature < 32)\\r\n* (temperature > 0) || (temperature < 32)\\r\n*\n(temperature != 0) && (temperature < 32)\\r\n* (temperature == 0) || (temperature\n> 32)\\r\n* (temperature < 0) || (temperature > 32)\\r\n\\r\n_Note: Write \"true\"\nor \"false\" on a new line for each expression._"
      cspu5_assess3_shortAnswer_markdown_instruction: "**Short Answer:**  Computer\nmodels and simulations are used to formulate, refine, and test hypotheses.  Describe\na scenario that could be modeled by a computer and explain one benefit and\none drawback of doing the simulation on a computer instead of real world.\n\\r\n"
      cspu5_assess3_shortAnswer_exam_prep_markdown_instruction: "**Short Answer:**  Computer\nmodels and simulations are used to formulate, refine, and test hypotheses.  Describe\na scenario that could be modeled by a computer and explain one benefit and\none drawback of doing the simulation on a computer instead of real world.\n\\r\n"
      cspu5_assess4_challenge_markdown_instruction: "**Challenge Question:** Imagine\na list that represents the height in feet of equidistant points along a mountainous\npath.  Here is an example of the data with a diagram that reflects the data.\nFor example: \\r\n\\r\n![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r\n\\r\nA\nprogrammer wants to write a procedure that calculates the net elevation -  total\nnumber of feet a traveler goes up and down. For example, looking at the first\n3 segments of travel, the net elevation is 7 feet (up 3, up 1, down 3).  \\r\n\\r\nWrite\nprocedure (in either JavaScript or pseudocode) called processPath(data) that:\\r\n\\r\n*\nAccepts a list of elevation data as a parameter\\r\n* For every value in the\nlist\\r\n\\t* Compute the absolute difference between that value and the value\nnext to it on the path\\r\n\\t* Add the difference to a running total\\r\n* Return\nthe total elevation traveled\\r\n\\r\nIn writing your procedure you should assume\nthat you can call a function called _absDiff(a,b)_.\\r\n\\r\n![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r\n\\r\nWrite\nthe full procedure below."
      cspu5_assess4_challenge_exam_prep_markdown_instruction: "**Challenge Question:**\nImagine a list that represents the height in feet of equidistant points along\na mountainous path.  Here is an example of the data with a diagram that reflects\nthe data. For example: \\r\n\\r\n![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r\n\\r\nA\nprogrammer wants to write a procedure that calculates the net elevation -  total\nnumber of feet a traveler goes up and down. For example, looking at the first\n3 segments of travel, the net elevation is 7 feet (up 3, up 1, down 3).  \\r\n\\r\nWrite\nprocedure (in either JavaScript or pseudocode) called processPath(data) that:\\r\n\\r\n*\nAccepts a list of elevation data as a parameter\\r\n* For every value in the\nlist\\r\n\\t* Compute the absolute difference between that value and the value\nnext to it on the path\\r\n\\t* Add the difference to a running total\\r\n* Return\nthe total elevation traveled\\r\n\\r\nIn writing your procedure you should assume\nthat you can call a function called _absDiff(a,b)_.\\r\n\\r\n![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r\n\\r\nWrite\nthe full procedure below."
      cspu5_assess4_scoreToGrade_markdown_instruction: "**Short Answer:** Jimmy wrote\nthe procedure scoreToGrade which accepts as a parameter score - a quiz score\nin the range 0-100.  The procedure is supposed to return a letter grade. He\nfeels confident his program is correct because he has tested it using the\nscores 3, 29, and 67. Sally believes the program is incorrect because she\ntested the values 73 and 86.  The code is syntactically correct, and the programs\nruns without generating an error, but the results are sometimes wrong.  Why\ndoes the procedure return the correct values for Jimmy’s tests but not Sally’s?\n\\r\n\\r\n    PROCEDURE scoreToGrade (percent)\\r\n    {\\r\n        IF (percent\n< 60)\\r\n        {\\r\n            RETURN (\"F\")\\r\n        }\\r\n        ELSE\nIF (percent >= 60)\\r\n        {\\r\n        \\tRETURN (\"D\")\\r\n        }\\r\n        ELSE\nIF (percent >= 70)\\r\n        {\\r\n            RETURN (\"C\")\\r\n        }\\r\n        ELSE\nIF (percent >= 80)\\r\n        {\\r\n            RETURN (\"B\")\\r\n        }\\r\n        ELSE\\r\n        {\\r\n        \\tRETURN\n(\"A\")\\r\n        }\\r\n    }"
      cspu5_assess4_scoreToGrade_exam_prep_markdown_instruction: "**Short Answer:**\nJimmy wrote the procedure scoreToGrade which accepts as a parameter score\n- a quiz score in the range 0-100.  The procedure is supposed to return a\nletter grade. He feels confident his program is correct because he has tested\nit using the scores 3, 29, and 67. Sally believes the program is incorrect\nbecause she tested the values 73 and 86.  The code is syntactically correct,\nand the programs runs without generating an error, but the results are sometimes\nwrong.  Why does the procedure return the correct values for Jimmy’s tests\nbut not Sally’s? \\r\n\\r\n    PROCEDURE scoreToGrade (percent)\\r\n    {\\r\n        IF\n(percent < 60)\\r\n        {\\r\n            RETURN (\"F\")\\r\n        }\\r\n        ELSE\nIF (percent >= 60)\\r\n        {\\r\n        \\tRETURN (\"D\")\\r\n        }\\r\n        ELSE\nIF (percent >= 70)\\r\n        {\\r\n            RETURN (\"C\")\\r\n        }\\r\n        ELSE\nIF (percent >= 80)\\r\n        {\\r\n            RETURN (\"B\")\\r\n        }\\r\n        ELSE\\r\n        {\\r\n        \\tRETURN\n(\"A\")\\r\n        }\\r\n    }"
      cspu5_assess4_shortAnswerShopping_markdown_instruction: "**Short Answer:**\nCecelia would like to write an app to help manage a trip to the grocery store.  The\napp will maintain a shopping list (a list of words) of all the items to buy.  Describe\nhow Cecelia might use a second list in the app.  What else might be tracked?\nDescribe how the list would be used and updated in the app.\\r\n"
      cspu5_assess4_shortAnswerShopping_exam_prep_markdown_instruction: "**Short\nAnswer:** Cecelia would like to write an app to help manage a trip to the\ngrocery store.  The app will maintain a shopping list (a list of words) of\nall the items to buy.  Describe how Cecelia might use a second list in the\napp.  What else might be tracked? Describe how the list would be used and\nupdated in the app.\\r\n"
      expresslink_markdown_instruction: "<a href=\"https://studio.code.org/s/express\"><img\nsrc=\"https://images.code.org/32b135ea9a16684b30f89ffe0f6606b1-image-1507039514762.05.01\nAM.png\"/><img src=\"https://images.code.org/cfea3adf1aec120e23e039ed06856f6f-image-1507039555039.05.48\nAM.png\"/></a>"
      frozen circle function in circle_markdown_instruction: "Now let's create 20\noverlapping circles, turning 18 degrees between each circle."
      frozen circle function with parameter_markdown_instruction: "Here's a ”Create\ncircle” block that can make circles of different sizes. Can you use this to\ncreate a small circle of size 5 and a larger circle of size 10?"
      frozen circle function_markdown_instruction: "Use the new “Create a circle”\nblock to create 10 overlapping circles. Don't forget to jump forward between\ncircles."
      frozen circle_markdown_instruction: "A circle is a special shape. Can you figure\nout what number to replace the question marks with to draw a circle?"
      frozen cross rotate dense_markdown_instruction: "Let's repeat it 90 times!\nHow many times does 90 go into 360? Hint: It's a really small number."
      frozen cross rotate_markdown_instruction: "Now try repeating it 10 times. How\nmany degrees do you need to turn between each line?"
      frozen cross_markdown_instruction: "Wrap a “Repeat” block around these commands\nto create a plus sign. Did you notice Elsa can move forward and backward?"
      frozen diamond mini snowflake_markdown_instruction: "Did you know every snowflake\nis a different shape? Let's create a new snowflake by using another “Repeat\"\nblock to repeat a parallelogram 4 times, turning right by 90 degrees between\neach parallelogram."
      frozen diamond snowflake_markdown_instruction: "Now, let's create a new snowflake\nby using the repeat block to repeat a parallelogram 10 times, turning right\nby 36 degrees between each one."
      frozen diamond_markdown_instruction: "Use a repeat around these blocks to create\na parallelogram. It's just like a rectangle but has different angles. This\none has 60 degree and 120 degree angles instead of all 90 degree angles."
      frozen freeplay_markdown_instruction: "You've officially become a master artist!\nCreate a winter wonderland."
      frozen perpendicular_markdown_instruction: "Now let's see if we can create\ntwo lines that are at a 90 degree angle to each other. You will need to use\nthe \"Turn\" block as well as the \"Move\" block."
      frozen snowflake branch_markdown_instruction: "Try using the ”Create a snowflake\nbranch” block to create three branches, which starts to look like a snowflake."
      frozen snowflake full_markdown_instruction: "Now let's repeat it 8 times to\nmake a beautiful snowflake!"
      frozen snowflower_markdown_instruction: "Intricate snow patterns can be created\nwith very simple shapes. Can you make a pattern by repeating 5 circles of\nsize 5 and 5 circles of size 10?"
      frozen square iterative_markdown_instruction: "It seems like we're halfway\nto making a square. Let's put 4 lines together to create a square."
      frozen square loop 3x_markdown_instruction: "Let's create three squares, turning\nafter each square. Be sure to turn by 120 degrees before each new square."
      frozen square loop_markdown_instruction: "Hi, I’m Anna of Arendelle! Let’s\nmake a square with the “Repeat” block, which uses fewer blocks. How many times\n(???) should the “Repeat” block loop the blocks inside it to make a square?"
      frozen square snowflake_markdown_instruction: "Can you create a snowflake using\nthe “Repeat” block to make a square 10 times, and the “Turn” block to turn\n36 degrees between each square?"
      gl jr clone me ram2_markdown_instruction: "Clone this level, and then make\nyour own programs!"
      gl jr clone me_markdown_instruction: "Clone this level, and then make your\nown programs!"
      grade1_adventurer_loops2_markdown_instruction: "How can Laurel collect all\nfive piles of gold using only one `E -->` block?"
      grade1_artist_loops6_markdown_instruction: "**Challenge:**  It's a hidden\ngarden! Let's walk around."
      grade1_artist_loops7a_markdown_instruction: "**Challenge:**  Lovely! Let's\ntake a walk around the garden."
      grade1_artist_loopsFP_markdown_instruction: "Use what you have learned to draw\na picture of what you think the artist saw when he got home.\\r\n\\r\n<hr/>\\r\n<h3>Ideas</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Singing Snail</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Big City</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Concert</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Birthday Cake</h4><br/><br/>\\r\n</td>\\r\n\\r\n</tr>\\r\n</table>\\r\n"
      grade1_maze_sequence8_markdown_instruction: "**Challenge:** Debug this level\nby adding blocks to get me to the pig!"
      grade1_maze_sequenceA_markdown_instruction: "**Challenge:** Move me around\nthe TNT to get to the pig."
      grade1_playlab_events1_markdown_instruction: "This game is called \"Play Lab\".  \\r\n\\r\n<br/>\\r\nSee\nif you can figure out what each block does."
      grade1_playlab_eventsFP_markdown_instruction: "Use your imagination. What can\nyou do to make this game more fun?\\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Conversation</strong>\n- Add blocks so that the characters say \"Hello!\" when they run into each\nother. </li>\\r\n            <li><strong>Where's the Dragon?</strong> - Have\nthe dragon dissapear when the up arrow key is pressed.</li>\\r\n            <li><strong>Super\nDragon</strong> - Make the dragon move at a faster speed and then try to catch\nhim with the knight. </li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>"
      grade2_CaringForNewPet_0_markdown_instruction: "For this puzzle, drag all of\nthe blocks together and click \"Run\" to watch it go!"
      grade2_CaringForNewPet_1_markdown_instruction: "Drag an extra `move forward`\nblock out of the toolbox to finish your code."
      grade2_CaringForNewPet_11_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig.\"*"
      grade2_CaringForNewPet_2_markdown_instruction: "*\"This pig is ruffling my\nfeathers.\"*\\r\n\\r\nThere is one extra block that is going to cause the bird\nto crash.  \\r\nThrow it away by dragging it back to the toolbox."
      grade2_CaringForNewPet_2courseC_maze_programming3_markdown_instruction: "*\"This\npig is ruffling my feathers.\"*\\r\n\\r\nThere is one extra block that is going\nto cause the bird to crash.  \\r\nThrow it away by dragging it back to the\ntoolbox."
      grade2_CaringForNewPet_3_markdown_instruction: "*\"Trace the path and lead\nme to the silly pig. Avoid TNT or feathers will fly!\"*"
      grade2_CaringForNewPet_3D_markdown_instruction: "*\"Follow this path to get\nme to the pig!\"*"
      grade2_CaringForNewPet_4_markdown_instruction: "*\"Keep calm and help me find\nthe bad pig. Otherwise I might get angry!\"*"
      grade2_CaringForNewPet_6_markdown_instruction: "**Challenge:** Guide me to\nthe green evilness! (Watch out for TNT)"
      grade2_CaringForNewPet_7D_markdown_instruction: "*\"It's time to get angry!\"*\\r\n\\r\n**Challenge:**\nThis code has a lot of bugs. You'll need to remove blocks and add blocks."
      grade2_MakeDogTag_1_markdown_instruction: "*\"Let's make a cage for my pet\nmonster!\"*\\r\n\\r\nDrag blocks onto the screen to have the artist draw over\nthe grey lines in the picture.  \\r\n(Each line is 100 pixels long)"
      grade2_MakeDogTag_10_markdown_instruction: "Now, draw anything you like!\\r\n<br/><br/>\\r\nHere\nare some ideas you could try if you get stuck (the last one is a challenge):\\r\n<br/>\\r\n<hr/>\\r\n<h3>Ideas</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/c8748bea36ec8ea92ceb13d86cd862d2-image-1471033427162.13.51\nPM.png\" width=\"150\"/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img src=\"https://images.code.org/57c582dca6126e30de36b5bef5517f78-image-1471033432715.03.46\nPM.png\" width=\"150\"/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img src=\"https://images.code.org/9df13dec95da560686472580304d9ee3-image-1471033275008.55.15\nPM.png\" width=\"150\"/><br/>\\r\n</td>\\r\n\\r\n</tr>\\r\n</table>\\r\n\\r\n\\r\n"
      grade2_MakeDogTag_2_markdown_instruction: "*\"This spaceship needs a window!\"*\\r\n\\r\nEach\nside of the inner square is 100 pixels and all of the angles are 90 degrees."
      grade2_MakeDogTag_3_markdown_instruction: "*\"Oh no!  Starla's pet alien just\nflew away! Let's help the spacewoman!\"*\\r\n\\r\nFinish Starla's rocket so\nshe can chase her pet.  \\r\n(Each side of the triangle is 100 pixels long\nand has 120 degree outer angles)"
      grade2_MakeDogTag_4_markdown_instruction: "*\"Maybe we should make a tag for\neach of our pets in case they get lost!\"*\\r\n\\r\nFinish this tag by drawing\na rectangle around the outside.  \\r\n(The long sides are 200 pixels each and\nthe short sides are each 100 pixels)"
      grade2_MakeDogTag_5_markdown_instruction: "*\"Now a tag for Belle!\"*\\r\n\\r\nDraw\nthis diamond with 200 pixel sides."
      grade2_MakeDogTag_6_markdown_instruction: "**Challenge:** This tag is a special\none!  Can you figure out how to draw the outline?  \\r\n(The long side is 150\npixels and each of the short sides are 75 pixels.)"
      grade2_MakeDogTag_7_markdown_instruction: "One more tag.  This is a triangle\nfor Pi.  \\r\n(Each side is 150 pixels)"
      grade2_MakeDogTag_8_markdown_instruction: "Now let's connect a bunch of V's\ntogether in a loop."
      grade2_MakeDogTag_9_markdown_instruction: "Time to make something snazzy! \\r\n\\r\nRebuild\nthe code from the last puzzle, but this time, add a left turn of 30 degrees\ninside the loop. Now, repeat it 24 times instead of 8."
      grade2_MakeDogTag_BFP_markdown_instruction: "*\"Hi, I'm an artist. You can\nwrite code to make me draw almost anything.\"*\\r\n\\r\nPlay with the blocks\nin the toolbox to see what they do!"
      grade2_MakeDogTag_FP_markdown_instruction: "**Freeplay:** What shape will you\nmake the tag for your pet?\\r\n<br/><br/>\\r\n\\r\n\\r\nHere are some ideas you\ncould try if you get stuck:\\r\n![](https://images.code.org/e36330061c21807fac24d804e301e572-image-1475814869558.26.01.png)"
      grade2_PuppyLoops_10_markdown_instruction: "My teacher says that I should finish\nwhat I start!\\r\n\\r\nHelp me finish my pinwheel. Can you figure out what's\nwrong?"
      grade2_PuppyLoops_2_markdown_instruction: "Suddenly, a magical block appears!  With\nthe `repeat` block, you can loop code over and over.\\r\n\\r\nCan you get to\nthe pig by creating a loop that uses only one `move forward` block inside\nof a `repeat`?"
      grade2_PuppyLoops_3_markdown_instruction: "Get me to the pig! Solve this puzzle\nby creating a loop!"
      grade2_PuppyLoops_4_markdown_instruction: "In this puzzle, two `repeat` loops\nwill help you get to the pig with the fewest number of blocks!"
      grade2_PuppyLoops_8_markdown_instruction: "This code for the cat's whiskers\nis wrong. \\r\n\\r\nFix this code to draw whiskers that are all the same length."
      grade2_PuppyLoops_9_markdown_instruction: "Looks like the C in code is drawn\nbackwards!\\r\n\\r\nCan you make it look like a C again?"
      grade2_collector_10_markdown_instruction: "You're almost done!  \\r\n\\r\nCollect\nas many pieces of treasure as you can to finish the stage!"
      grade2_collector_10_2018_markdown_instruction: "You're almost done!  \\r\n\\r\nCollect\nas many pieces of treasure as you can to finish the stage!"
      grade2_collector_2_markdown_instruction: "Move Laurel to the gold, then use\n`collect` to pick it up."
      grade2_collector_3_markdown_instruction: "*\"Sequence matters!\"*\\r\n\\r\nThe\nblocks you need are already in the workspace, but not connected.  Put these\nblocks in order to collect all of the gold and solve the puzzle."
      grade2_collector_4_markdown_instruction: "Sequence matters! The blocks you\nneed are already in the workspace, but not connected.  Order these blocks\nto solve the puzzle."
      grade2_collector_5_markdown_instruction: "*\"Help me collect each gold coin!\"*\\r\n\\r\nThese\nblocks are in the wrong order. Can you fix them?"
      grade2_collector_6_markdown_instruction: "\"Help me collect all of the treasure!\"\\r\n\\r\nThese\nblocks are in the wrong order. Reorder them to collect all of the treasure."
      grade2_collector_7_markdown_instruction: "**Challenge:** What is going on here?   \\r\n\\r\nEven\nif we put these in the right order, there will still be some missing.  \\r\nUse\nblocks from the toolbox to collect all of the treasure."
      grade2_collector_8_markdown_instruction: "*\"Keep up the good work! Help me\ncollect all of the coins.\"*"
      grade2_collector_9_markdown_instruction: "*\"Let's get all of the coins!\"*"
      grade2_collector_9a_markdown_instruction: "**Challenge:** Grab all of the coins."
      grade2_collector_A_markdown_instruction: "Help Laurel collect all of the treasure."
      grade2_collector_A_2018_markdown_instruction: "Help Laurel collect all of the\ntreasure."
      grade2_collector_pre1_markdown_instruction: "*\"Hi, I'm Laurel. Today I'm\nsearching for treasure at the dog park!\"*  \\r\n\\r\nPlay around with the blocks\nto see if you can help Laurel collect some gold."
      grade2_link_RunMarco_partner_markdown_instruction: "<a href=\"https://www.allcancode.com/runmarco\"></a><img\nsrc=\"https://images.code.org/c754e82a395ab69e5c1e3b2dfe8bf9ff-image-1486603338831.22.10.png\"\nwidth=\"400px\"/></a>"
      grade2_maze_debuggingFP_markdown_instruction: "*\"Now, help me sneak up on\nthe pig any way you want to!\"*"
      grade2_maze_intro10_markdown_instruction: "Solve this puzzle."
      grade2_maze_intro2_markdown_instruction: "Welcome to Code Studio! Here you\nwill learn to use blocks to build programs. Press `Ok`, then find the `Run`\nbutton to run your first program."
      grade2_maze_intro3_markdown_instruction: "The `workspace` is where you will\ncreate all of your programs. Find the workspace, then see what the program\ndoes."
      grade2_maze_intro4_markdown_instruction: "The `toolbox` is where blocks are\nstored. You can drag them into the `workspace` to create programs."
      grade2_maze_intro6_markdown_instruction: "That’s it!  Now we’re ready to try\nto solve a few puzzles."
      grade2_maze_intro7_markdown_instruction: "This time, try something a bit more\nchallenging."
      grade2_maze_intro8_markdown_instruction: "This is a challenge puzzle.  It is\nmeant to be hard and will probably take you a couple of tries to solve.  If\nyou don’t solve it after several tries, don’t worry!  It will be in the Play\nZone at the end of the stage and you can try it again when you’ve had more\npractice."
      grade2_maze_intro9_markdown_instruction: "Solve this puzzle."
      grade2_playlab_project_3_markdown_instruction: "Can you have Waddles (actor\n1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \\r\n\\r\nWhen\nyou're done, play the game to make that happen.\\r\n\\r\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      grade2_playlab_project_6_markdown_instruction: "<style>\\r\n.hint{\\r\n\\tpadding:\n15px 15px 15px 40px; \\r\n    background-color:#eeeeee; \\r\n    border-radius:10px;\\r\n}\\r\n.hintInner{\\r\n\\tpadding:\n15px 15px 15px 15px;  \\r\n    background-color:#FFFFFF; \\r\n    border-radius:10px;\\r\n}\\r\n\\r\nimg{\\r\n\\tborder-radius:\n10px;\\r\n    mix-blend-mode: multiply;\\r\n}\\r\n\\r\n</style>\\r\n\\r\nCreate\nyour own story. When you're done, click \"Finish\" to share with friends.\\r\n<br/>\\r\n\\r\n<h5\nclass=\"hint\">\\r\n<details>\\r\n<summary><b>Need some ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5\nclass=\"hintInner\">\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Who's there?</strong>\n- Make characters appear with random images, so no one knows who's showing\nup next.</li>\\r\n            <li><strong>Going on an Adventure</strong> -\nChange the background, then have the characters talk about where they are\nnow. </li>\\r\n            <li><strong>Pinball</strong> - Make one character\nmove using the arrow keys (use `when up arrow`, `when down arrow` blocks),\nthen play random sounds when it collides with other characters on the screen.\n</li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      grade2_puppy_loops2_markdown_instruction: "Suddenly, a magical block appears!  With\nthe `repeat` block, you can loop code over and over.\\r\n\\r\nCan you get to\nthe pig by creating a loop that uses only one `move forward` block inside\nof a `repeat`?"
      grade2_puppy_loops3_markdown_instruction: "*\"Get me to the pig!\"*\\r\n\\r\nSolve\nthis puzzle by creating a loop!"
      grade2_puppy_loops4_markdown_instruction: "In this puzzle, two `repeat` loops\nwill help you get to the pig with the fewest number of blocks!"
      grade2_puppy_loops5_markdown_instruction: "*\"Get me to the pig as quickly\nas possible!\"*"
      grade2_puppy_loops6_markdown_instruction: "*\"This pig is ruffling my feathers!\"*\\r\n\\r\nLoops\neven work with more than one block inside!  Can you loop this sequence?"
      grade2_puppy_loops7_markdown_instruction: "*\"Get me to the pig!\"*\\r\n\\r\nUse\nwhat you learned in other puzzles!"
      grade3_ConditionalsElse_1_markdown_instruction: "This cloud is blocking my\nview! \\r\n\\r\nCheck to see if there's a flower under the cloud, and only\nget nectar if there's a flower.   \\r\nBe careful, it can change!"
      grade3_ConditionalsElse_2_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.  \\r\n\\r\nRemember:\nNot all clouds hide the same thing!"
      grade3_ConditionalsElse_4_markdown_instruction: "Sometimes this cloud covers\na flower, and sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else` block\nto collect nectar only if it is a flower.  \\r\nElse, make honey (because it\nis a honeycomb)."
      grade3_ConditionalsElse_5_markdown_instruction: "There will be either a flower\nor a honeycomb under each of those clouds!\\r\n\\r\nUse the `if/else` block\nto collect nectar if there is a flower.\\r\nOtherwise, make honey (because\nthere is a honeycomb)."
      grade3_ConditionalsElse_6_markdown_instruction: "I am not sure how much nectar\nthis flower has, but I know it has either 1, 2, or 3 nectar. \\r\n\\r\nCombine\nthe conditional blocks (`if` and/or `if/else`) to only get as much nectar\nas the flower has. \\r\n\\r\nRemember, the amount of nectar can change each\ntime you run the puzzle!"
      grade3_ConditionalsElse_7_markdown_instruction: "These flowers can have 3,\n2, or 1 nectar. \\r\n\\r\nComplete the `check purple flower` function and use\nit to collect all of the nectar at the flowers."
      grade3_ConditionalsElse_8_markdown_instruction: "Write the function for `check\nflower make honey`. \\r\n\\r\nYour function should check if the purple flower\nhas 3, 2, or 1 nectar and get all of the nectar. \\r\nThen, move forward and\nmake honey."
      grade3_ConditionalsElse_9_markdown_instruction: "**Assessment:** This cloud\nis either hiding a flower with one nectar or a honeycomb that needs one honey.  \\r\n\\r\nComplete\nthe `get nectar or make honey` function, then call it to collect the nectar\nor honey. \\r\n"
      grade3_ConditionalsElse_TeacherIDo_markdown_instruction: "There will be either\na flower or a honeycomb under each of those clouds!\\r\n\\r\nUse the `if/else`\nblock to collect nectar if there is a flower.\\r\nOtherwise, make honey (because\nthere is a honeycomb)."
      grade3_Conditionals_1_markdown_instruction: "I'm a hungry bee! \\r\n\\r\n\\r\nHelp\nme collect all of the nectar from the flowers using the fewest number of blocks."
      grade3_Conditionals_10_markdown_instruction: "There's a lot happening here!\\r\n\\r\nUse\nwhat you've learned to collect all of the nectar and then make the honey."
      grade3_Conditionals_11 BAD_markdown_instruction: "**Assessment:** Use a `while`\nloop to collect all of the nectar from these flowers."
      grade3_Conditionals_11_markdown_instruction: "Let's put everything together!\\r\n\\r\nUse\nwhat you've learned to help me collect nectar only from flowers that have\nit, using as few blocks as possible.  \\r\n\\r\nDon't forget to make honey\nat the end."
      grade3_Conditionals_12_markdown_instruction: "This stair step pattern should\nlook familiar.  \\r\n\\r\nCan you collect nectar only from the flowers that\nhave some, using as few blocks as possible?"
      grade3_Conditionals_13_markdown_instruction: "**Assessment:** Collect all of\nthe nectar.  \\r\nBe careful not to try to collect nectar from a purple flower\nif it doesn't have any."
      grade3_Conditionals_2_markdown_instruction: "Look at all of that nectar!\\r\n\\r\nHelp\nme collect the nectar and make the honey using as few blocks as you can.  "
      grade3_Conditionals_3_markdown_instruction: "These magic purple flowers change!\\r\n\\r\nEach\ntime you try the puzzle, purple flowers can have either 1 nectar or none at\nall...but you won't know the number until you run the code! \\r\n\\r\nBe careful\nnot to collect nectar from a purple flower if it doesn't have any. \\r\nYou\nmust first check if the nectar is equal to 1 using the `if nectar` block."
      grade3_Conditionals_8_markdown_instruction: "I wonder what's out there!\\r\n\\r\nHelp\nme fly around the yard and collect nectar only from the flowers that have\nsome. "
      grade3_Debugging_1_markdown_instruction: "These blocks are really bugging me!\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      grade3_Debugging_10_markdown_instruction: "**Challenge:** *\"This puzzle is\nmaking me loopy!\"*\\r\n\\r\nAll of the commands that you need are already here...now\nuse your debugging skills to figure out how to solve this puzzle."
      grade3_Debugging_11_markdown_instruction: "**Challenge:**  Fix the errors to\ncollect all of the nectar and make all of the honey."
      grade3_Debugging_2_markdown_instruction: "*\"These blocks are really bugging\nme!\"*\\r\n\\r\nFix the error(s) to collect all of the nectar."
      grade3_Debugging_3_markdown_instruction: "*\"Ooh, this one stings!\"*\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      grade3_Debugging_4_markdown_instruction: "*\"These blocks are really bugging\nme.\"*\\r\n\\r\nFix the error(s) to collect all of the nectar and make all of\nthe honey."
      grade3_Debugging_5_markdown_instruction: "That flower looks tasty! \\r\n\\r\nFix\nthe error(s) to collect all of the nectar.  \\r\nYou can now use both run and\nstep."
      grade3_Debugging_6_markdown_instruction: "What a sweet challenge!\\r\n\\r\nFix\nthe error(s) to collect all of the nectar."
      grade3_Debugging_8_markdown_instruction: "*\"This could be sweet!\"*\\r\n\\r\nFix\nthe error(s) to make all of the honey."
      grade3_Debugging_9_markdown_instruction: "\"Bee\" patient with this one!\\r\n\\r\nYou\nwill need to fix a couple of things in this program to collect all of the\nnectar and make all of the honey."
      grade3_Loops_10_markdown_instruction: "Such a busy bee!\\r\n\\r\nHelp Bee collect\nall of the nectar and make all of the honey with the fewest blocks possible."
      grade3_Loops_11_markdown_instruction: "The shape of this path is different\nfrom the others. \\r\n\\r\nCan you collect all of the nectar using as few blocks\nas possible?"
      grade3_Loops_3_markdown_instruction: "Use a `repeat` loop to collect all of\nthe nectar."
      grade3_Loops_4_markdown_instruction: "Now use the `repeat` block to collect\nall of the nectar and make all of the honey."
      grade3_Loops_5_markdown_instruction: "What a beautiful field of flowers!\\r\n\\r\nHelp\nthe bee visit each one.\\r\n\\r\nCan you find a way to do it with fewer than\n7 blocks?"
      grade3_Loops_6_markdown_instruction: "How many times can loops help you in\nthis puzzle?  \\r\n\\r\nLoops are your friend! Use a few of them to complete\nthis puzzle with the fewest blocks possible."
      grade3_Loops_7_markdown_instruction: "Those flowers look tasty!\\r\n\\r\nCollect\nnectar from each of the flowers using the fewest blocks possible."
      grade3_Loops_TeacherIDo_markdown_instruction: "Those flowers look tasty!\\r\n\\r\nCollect\nnectar from each of the flowers using the fewest blocks possible."
      grade3_RunningFarm_1_markdown_instruction: "*\"Corn you help me harvest today?\"*\\r\n\\r\nUse\nconditionals to make sure that you pick all of the corn, but don't disturb\nthe stalks where nothing is growing yet."
      grade3_RunningFarm_10_markdown_instruction: "Collect all of the corn and lettuce,\nthen pick the pumpkin."
      grade3_RunningFarm_11a_markdown_instruction: "Collect all of the corn and lettuce,\nthen pick the pumpkin."
      grade3_RunningFarm_2_markdown_instruction: "*\"Lettuce collect both crops from\nthis row!\"*\\r\n\\r\nHelp the farmer collect both corn and lettuce from the\nfield."
      grade3_RunningFarm_4_markdown_instruction: "*\"Gosh! Now the crops are growing\nin clusters!\"*  \\r\n\\r\nHelp the farmer pick all of the lettuce in each cluster\nbefore moving on to the next bunch."
      grade3_RunningFarm_5_markdown_instruction: "*\"What a bountiful crop!\"*\\r\n\\r\nThis\nfield has clusters of corn, lettuce, and pumpkins all growing together.  Can\nyou collect them all?"
      grade3_RunningFarm_6_markdown_instruction: "*\"Let's take this one step further!\"*\\r\n\\r\nCan\nyou figure out how to pick the pumpkin?  Make sure to collect all of the corn\nalong the way!"
      grade3_RunningFarm_7_markdown_instruction: "**Challenge:** Collect all of the\ncorn and lettuce, then pick the pumpkin."
      grade3_RunningFarm_8_markdown_instruction: "Harvesting one type of crop at\na time takes too long. Can you help me harvest both wheat and potatoes in\none run? I wonder if you can stack another While There is... loop on top of\nanother one?"
      grade3_RunningFarm_9_markdown_instruction: "Can you help me one last time?\nI want to collect as many crops as I can before the weeds take over this field.\nHow many do you think we can get?"
      grade3_bee_conditionals_new1a_markdown_instruction: "You can only collect nectar\nfrom flowers, but you can check any space to see if there is a flower."
      grade3_bee_conditionals_new2a_markdown_instruction: "In this puzzle, we know\nthat every flower has exactly one nectar, but the flowers aren't spaced evenly.\\r\n\\r\nGet\nall of the nectar using as few blocks as possible."
      grade3_bee_conditionals_new3b_markdown_instruction: "Conditionals can be helpful,\neven when you know exactly what is in each spot!\\r\n\\r\nCollect all of the\nnectar and make all of the honey."
      grade3_bee_conditionals_quantum1_markdown_instruction: "*\"This cloud is blocking\nmy view!\"*\\r\n\\r\nCheck to see if there's a flower under the cloud. If there's\na flower, get nectar."
      grade3_bee_conditionals_quantum2_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.  \\r\n\\r\nRemember:\nNot all clouds hide the same thing!"
      grade3_bee_conditionals_quantum3_markdown_instruction: "*\"Now I just want\nto make honey.\"*\\r\n\\r\nSome of these clouds might have honeycombs under\nthem.  Be sure to check if a honeycomb is hiding behind each cloud!"
      grade3_bee_conditionals_quantum4_markdown_instruction: "Sometimes a cloud covers\na flower, sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else` block\nto collect nectar at flowers and make honey at honeycomb."
      grade3_bee_conditionals_quantum5_markdown_instruction: "**Challenge:** There\nwill be either a flower or a honeycomb under each of those clouds!\\r\n\\r\nUse\nthe `if/else` block to collect nectar if there is a flower.\\r\nOtherwise,\nmake honey (because there is a honeycomb)."
      grade3_maze_Loop1_markdown_instruction: "**Assessment:**  Get me to the sunflower\nusing only 5 blocks! "
      grade3_maze_loops1_markdown_instruction: "*\"Must...eat...sunflower!\"*\\r\n\\r\nGet\nthe zombie to the sunflower."
      grade3_maze_loops2_markdown_instruction: "Get the zombie to the sunflower using\nthe fewest blocks possible!  "
      grade3_maze_loops2a_markdown_instruction: "*\"Zombie hungry!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using the fewest number of blocks possible."
      grade3_maze_loops3_markdown_instruction: "*\"Must eat sunflower!\"*\\r\n\\r\nGet\nthe zombie to the sunflower using only the blocks available."
      grade3_maze_nestedLoops2_markdown_instruction: "Suddenly, a magical block appears!  With\nthe `repeat` block, you can loop code over and over.\\r\n\\r\nCan you get to\nthe pig by creating a loop that uses only one `move forward` block inside\nof a `repeat`?"
      grade3_maze_nestedLoops3_markdown_instruction: "Get me to the pig! You can\nonly use one `move forward` block this time"
      grade3_maze_nestedLoops4_markdown_instruction: "In this puzzle, two `repeat`\nloops will help you get to the pig with the fewest number of blocks!"
      grade4_arist_functions_star0_markdown_instruction: "Have you drawn something\nlike this star before? Practice making it one more time by adding a `turn`\nand a `repeat` block."
      grade4_arist_nested_loop_circles1_markdown_instruction: "**Assessment:** Use\na nested loop to complete the design."
      grade4_arist_nested_loop_flags1_markdown_instruction: "Loop the given code\nto create a windmill."
      grade4_arist_nested_loop_polygons1_markdown_instruction: "Loop this design\n10 times. \\r\n\\r\nHow much do you have to turn each time you loop?"
      grade4_arist_nested_loop_polygons2_markdown_instruction: "Loop this shape 6\ntimes. \\r\n\\r\nHow much do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_markdown_instruction: "Can you draw these\n10 squares of this sidewalk using a nested loop? \\r\n\\r\nEach square is 30\npixels."
      grade4_arist_nested_loop_triangles2_markdown_instruction: "Now nest this loop\ninside another loop to draw 10 triangles.  \\r\nThis is called a \"nested\"\nloop.  "
      grade4_arist_nested_loop_triangles3_markdown_instruction: "Can you draw a hexagon\nby looping the triangle code?"
      grade4_arist_nested_loop_triangles4_markdown_instruction: "Draw the teeth in\nthe alligator's mouth!"
      grade4_arist_nested_loop_triangles5_markdown_instruction: "Create a sun by\nnesting the starter code in another loop.\\r\n\\r\nTo get this cool design with\na hollow center, you'll need to jump forward by the length of the triangle\nbefore turning."
      grade4_arist_nested_loop_triangles6_markdown_instruction: "Can you draw these\n36 triangles using a nested loop?"
      grade4_artist_freeplay_markdown_instruction: "Create your own project! This\ncreation will be saved to your Projects dashboard so that you can easily edit\nit any time!"
      grade4_artist_functions1_markdown_instruction: "*\"Me zombie artist. Me love\ndrawing!\"*\\r\n\\r\nHelp the zombie draw glasses using squares with sides of\n100 pixels.  \\r\nThe bridge between the glasses is 75 pixels long.\\r\n\\r\n"
      grade4_artist_functions2_markdown_instruction: "Functions let you define new\nblocks! \\r\n\\r\nWe've moved the blocks needed for drawing a square into a\nfunction called `draw a square`. This time, use the `draw a square` function\nto create the glasses. \\r\n\\r\nThe squares are 75 pixels apart."
      grade4_artist_functions2a_markdown_instruction: "Create this image using only\nthe blocks provided.\\r\n\\r\n- To draw a diamond, you will need to alternate\nbetween turning 60 degrees and 120 degrees."
      grade4_artist_functions3a_markdown_instruction: "Create this image using only\nthe blocks provided.\\r\n\\r\n- To draw a diamond, you will need to alternate\nbetween turning 60 degrees and 120 degrees."
      grade4_artist_functions3b_markdown_instruction: "This time, use lines of 8\nhexagons with 25 pixel sides.\\r\n\\r\n- To make each hexagon, repeat the 6\ntimes, turning 60 degrees.\\r\n- To draw a diamond, you will need to alternate\nbetween turning 60 degrees and 120 degrees."
      grade4_artist_functionsChallenge0_markdown_instruction: "**Challenge:** Create\nas many functions as you think you need to make this drawing of 50 pixel squares."
      grade4_artist_functions_challenge_markdown_instruction: "**Functions Super\nChallenge:** Use the suggested functions to draw four rows of hexagons. Notice\nhow our even numbered rows are shifted to the right?"
      grade4_artist_functions_challenge2_markdown_instruction: "**Functions Super\nChallenge:** Use the suggested functions to draw four rows of hexagons. Notice\nhow our even numbered rows are shifted to the right?"
      grade4_artist_functions_freeplay_markdown_instruction: "Create your own project!\nThis creation will be saved to your Projects dashboard so that you can easily\nedit it any time!\\r\n<hr/>\\r\n<h3>Here are some ideas if you are looking for\ninspiration, or make your own function!</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/7e85601182e37a5331a17c0e29cf504d-image-1471042674372.42.08\nPM.png\" width=\"200\"/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img src=\"https://images.code.org/6ae7664d92a706e852d92dc419836557-image-1471042678266.55.48\nPM.png\" width=\"200\"/><br/>\\r\n</td>\\r\n\\r\n\\r\n</tr>\\r\n</table>"
      grade4_artist_functions_stars0_markdown_instruction: "We will come back to\nfunctions shortly. Let's take a break to practice making this star. \\r\n\\r\nYou\ncan make this drawing by adding a repeat block."
      grade4_artist_functions_stars1_markdown_instruction: "Now that you can draw\na star, try drawing four stars!\\r\n\\r\n- Each branch of the star is 25 pixels\nlong\\r\n- Turn 45 degrees between branches\\r\n- Jump 100 pixels between each\nstar"
      grade4_artist_functions_stars2_markdown_instruction: "When is drawing three\nstars harder than drawing four? When you also have to jump over the moon!\\r\n\\r\nDraw\nonly those three stars to finish this puzzle."
      grade4_artist_functions_stars3_markdown_instruction: "That last one is tough\nif you only use loops. Let's try one more time and see if this new 'function'\nmakes it easier to **draw a star**."
      grade4_artist_functions_windows0_markdown_instruction: "You are doing great!\n\\r\n\\r\nMake this window by drawing a square, then turning 90 degrees before\ndrawing another, and so on."
      grade4_artist_functions_windows1_markdown_instruction: "You just created a\nnested loop! Let's repeat all of these commands with **another** `repeat`\nblock to draw windows on this house. Don't forget to `jump`!"
      grade4_artist_functions_windows2_markdown_instruction: "Let's take the code\nfor the window and add it to function `draw a window`. Now, we can call the\nfunction any time we need to draw a window without having to write the code\nagain. \\r\n\\r\n<img src=\"https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif\"\nwidth=\"450px\"/>\\r\n<br/> \\r\n\\r\nTry solving this puzzle by creating `draw\na window` and calling it five times. Watch out for the door!\\r\n\\r\n- The\ntop windows are 50 pixels away from each other.  \\r\n- The bottom windows\nare 100 pixels below the top set."
      grade4_artist_nestedLoops_challenge_markdown_instruction: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"\nwidth=\"150px;\" style=\"mix-blend-mode: multiply;\" />\\r\n\\r\n**Play time:**  Here\nis the code for an interesting shape.   \\r\n\\r\nWhat happens when you repeat\nit multiple times, turning between each iteration?   \\r\n\\r\nNotice that the\nturns in this shape add up to *420 degrees*, which means that when your artist\nis done drawing, it will be facing a different direction than when you started.  That\nnew direction is exactly *60 degrees* to the *right* of where you began.\\r\n\\r\n<hr/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n4</b></summary>\\r\n<br/>\\r\nIf you want to come full circle in just 4 repetitions,\nyou need the artist to turn a total of **360 degrees/4 = 90 degrees** each\ntime.  You can do that by adding an extra `turn right by 30 degrees` block\nto the outer loop (since **60+30 = 90**.)  \\r\n<br/>\\r\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\\r\n<br/><br/>\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n6</b></summary>\\r\n<br/>\\r\nWhen you repeat the shape as-is 6 times, you get\na total rotation of **6x60 degrees** which is a full **360 degree** cycle.  \\r\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"  width=\"500px;\"  style=\"mix-blend-mode:\nmultiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n12</b></summary>\\r\n<br/>\\r\nIf you want to repeat the image 12 times, you\nneed the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.  That\nmeans you will need to adjust the artist back a bit with `turn left by 30\ndegrees` before you repeat the shape again.   <br/><br/>\\r\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\nNow\nit's your turn!  Can you recreate each image by repeating the starting shape?  "
      grade4_artist_nestedLoops_challenge2_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you have already been shown.  Can you figure out how\nto recreate it?  Feel free to use trial and error. You are not expected to\nget it perfect the first time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the last puzzle, except that the length used in the first\nloop is a little smaller. "
      grade4_artist_nested_loop_circles1_markdown_instruction: "**Assessment:** Use\na nested loop to complete the design."
      grade4_artist_nested_loop_flags1_markdown_instruction: "Loop the given code\nto create a windmill."
      grade4_artist_nested_loop_polygons1_markdown_instruction: "Loop this design\n10 times. \\r\n\\r\nHow much do you have to turn each time you loop?"
      grade4_artist_nested_loop_polygons2_markdown_instruction: "Hi, I'm the Artist!\nLet's create some drawings together! For starters, try repeating this shape\n6 times. \\r\n\\r\nHow much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_markdown_instruction: "Can you draw these\n10 squares of this sidewalk using a nested loop? \\r\n\\r\nEach square is 30\npixels."
      grade4_artist_nested_loop_triangles1_markdown_instruction: "Complete the code\nto draw these triangles.  The first one is done for you.  Hint:  3 triangles\nin a 360 degree rotation.\\r\n\\r\n"
      grade4_artist_nested_loop_triangles2_markdown_instruction: "Let's make a quick\nadjustment to get completely different image!  \\r\n<b>Hint:</b> ? × 10 = 360"
      grade4_artist_nested_loop_triangles3_markdown_instruction: "Can you draw a\nhexagon by looping the triangle code?\\r\nHint: 6 × ? = 360"
      grade4_artist_nested_loop_triangles4_markdown_instruction: "Let's try something\na little different! Can you help me draw the bottom teeth in the alligator's\nmouth?"
      grade4_artist_nested_loop_triangles5_markdown_instruction: "Create a sun by\nnesting the starter code in another loop.\\r\n\\r\nTo get this cool design with\na hollow center, you'll need to jump forward by the length of the triangle\nbefore turning."
      grade4_artist_nested_loop_triangles6_markdown_instruction: "Can you draw these\n36 triangles using a nested loop?"
      grade4_artist_parameters_squares1_markdown_instruction: "Click \"edit\" to\nfill in the function definition of `draw a square` and add a parameter.  \\r\nIt\nshould take a length parameter just like the triangle. \\r\n\\r\n**This time,\ndraw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are\neach 100 pixels away from the last."
      grade4_artist_parameters_triangles1_markdown_instruction: "Today, we're going\nto try out a different, more powerful function editor. See if you can figure\nout how to edit the `draw a triangle` function to find the bugs."
      grade4_artist_parameters_triangles2_markdown_instruction: "Do you notice anything\ndifferent about these function blocks? Click “Run” to see what happens."
      grade4_artist_parameters_triangles2b_markdown_instruction: "Can you complete\nthis drawing? \\r\n\\r\nThe sides of each triangle are 25 pixels larger than\nthe last.  \\r\nThe first triangle has 25 pixel sides."
      grade4_artist_parameters_triangles3_markdown_instruction: "Can you complete\nthis drawing? \\r\n\\r\nThe sides of each triangle are 25 pixels larger than\nthe last.  \\r\nThe first triangle has 25 pixel sides."
      grade4_artist_parameters_triangles4_markdown_instruction: "The code for this\ntriangle function is broken. \\r\n\\r\nCan you edit the function to fix it,\nand then make triangles of length 25, 50, and 75?"
      grade4_artist_parameters_trianglesx_markdown_instruction: "Can you complete\nthis drawing? \\r\n\\r\nThe sides of each triangle are 25 pixels larger than\nthe last.  \\r\nThe first triangle has 25 pixel sides."
      grade4_bee_conditionals_nested_loops_markdown_instruction: "**Assessment:**\nCollect all of the nectar.  \\r\nBe careful not to try to collect nectar from\na purple flower if it doesn't have any."
      grade4_bee_conditionals_new1_markdown_instruction: "**Assessment:** Collect\nall of the nectar.  \\r\nBe careful not to try to collect nectar from a purple\nflower if it doesn't have any."
      grade4_bee_conditionals_quantum1_markdown_instruction: "This cloud is blocking\nmy view! \\r\n\\r\nCheck to see if there's a flower under the cloud, and only\nget nectar if there's a flower.   \\r\nBe careful, it can change!"
      grade4_bee_conditionals_quantum2_markdown_instruction: "More clouds! \\r\n\\r\nCheck\nunderneath every cloud to see if it is hiding a flower before you get nectar.  \\r\n\\r\nRemember:\nNot all clouds hide the same thing!"
      grade4_bee_conditionals_quantum4_markdown_instruction: "Sometimes this cloud\ncovers a flower, and sometimes it covers a honeycomb! \\r\n\\r\nUse the `if/else`\nblock to collect nectar only if it is a flower.  \\r\nElse, make honey (because\nit is a honeycomb)."
      grade4_bee_conditionals_quantum5_markdown_instruction: "There will be either\na flower or a honeycomb under each of those clouds!\\r\n\\r\nUse the `if/else`\nblock to collect nectar if there is a flower.\\r\nOtherwise, make honey (because\nthere is a honeycomb)."
      grade4_bee_functions2_markdown_instruction: "Functions are blocks of code that\nperform a task.  \\r\n\\r\nUse the `get 2 nectar` function to collect the nectar\nfrom each flower."
      grade4_bee_functions3_markdown_instruction: "Build the `get 5` function to\nuse in this puzzle."
      grade4_bee_functions4_markdown_instruction: "The `move and get nectar` function\nturns the bee, collects nectar, and then returns the bee to where it started.  \\r\n\\r\nUse\nthe `move and get nectar` function to collect all of the nectar."
      grade4_bee_functions9_markdown_instruction: "**Challenge:** These flowers can\nhave a different amount of nectar each time you run the puzzle.   \\r\n\\r\nCreate\na function that collects all of the nectar from each flower."
      grade4_bee_nestedLoops1_markdown_instruction: "*\"Can you BEE-lieve all of\nthese flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      grade4_bee_nestedLoops2_markdown_instruction: "**Challenge:** Figure out how\nto get all of the nectar using only the blocks available."
      grade4_bee_nestedLoops4_markdown_instruction: "Collect all of the nectar from\neach flower and make honey at the honeycomb. "
      grade4_bee_nestedLoops5_markdown_instruction: "**Challenge:** Collect all of\nthe nectar from each flower and make honey at each honeycomb. \\r\n"
      grade4_bee_nestedLoops_assess_markdown_instruction: "**Assessment:** Collect\nall of the nectar and make all of the honey using loops.\\r\n\\r\n**Hint:**\n*There are several possible solutions!*"
      grade4_frozen_freeplay_markdown_instruction: "You've officially become a master\nartist! Create a winter wonderland."
      grade4_frozen_functions0_markdown_instruction: "A circle is a special shape.\nCan you figure out what number to replace the question marks with to draw\na circle?"
      grade4_frozen_functions1_markdown_instruction: "Use the new “dreate a circle”\n`function` to create 10 overlapping circles. Don't forget to `jump` forward\nbetween circles."
      grade4_frozen_functions1a_markdown_instruction: "Use the new “Create a circle”\nblock to create 10 overlapping circles. Don't forget to jump forward between\ncircles."
      grade4_frozen_functions2_markdown_instruction: "Now let's create 20 overlapping\ncircles, turning 18 degrees between each circle."
      grade4_frozen_functions3_markdown_instruction: "Here's a ”Create circle” block\nthat can make circles of different sizes. Can you use this to create a small\ncircle of size 5 and a larger circle of size 10?"
      grade4_frozen_functions4_markdown_instruction: "Intricate snow patterns can\nbe created with very simple shapes. Can you make a pattern by repeating 5\ncircles of size 5 and 5 circles of size 10?"
      grade4_frozen_nested_loop_diamonds1_markdown_instruction: "Let’s use a repeat\nblock to create a rhombus. Like a square, all sides are equal length, but\nthe angles are different. This one has 60 degree and 120 degree angles instead\nof all 90 degree angles."
      grade4_frozen_nested_loop_diamonds2_markdown_instruction: "Did you know every\nsnowflake is a different shape? Let's create a new snowflake by using another\n“Repeat\" block to repeat a parallelogram 4 times, turning right by 90 degrees\nbetween each parallelogram."
      grade4_frozen_nested_loop_diamonds3_markdown_instruction: "Now, let's create\na new snowflake by using the repeat block to repeat a parallelogram 10 times,\nturning right by 36 degrees between each one."
      grade4_frozen_nested_loop_rectangle1_markdown_instruction: "Hi, I’m Anna of\nArendelle! Let’s use a repeat block to create a rectangle. This one is  200\npixels long and 100 pixels tall. All of the corners are 90 degree angles."
      grade4_frozen_square_markdown_instruction: "Hi, I’m Anna of Arendelle! Let’s\nmake a square with the “Repeat” block, which uses fewer blocks. How many times\n(???) should the “Repeat” block loop the blocks inside it to make a square?"
      grade4_frozen_square_loop1_markdown_instruction: "Hi, I’m Anna of Arendelle!\nLet’s make a square with the “Repeat” block, which uses fewer blocks. How\nmany times (???) should the “Repeat” block loop the blocks inside it to make\na square?"
      grade4_frozen_square_loop2_markdown_instruction: "Let's create three squares,\nturning after each square. Be sure to turn by 120 degrees before each new\nsquare."
      grade4_frozen_square_loop3_markdown_instruction: "Can you create a snowflake\nusing the “Repeat” block to make a square 10 times, and the “Turn” block to\nturn 36 degrees between each square?"
      grade4_playlab_freeplay_markdown_instruction: "It's free play time! Have fun\nwith all the blocks in your tool box.  \\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Tag</strong>\n- Have character 2 patrol and use your arrow keys to make character 1 chase\nuntil they collide. </li>\\r\n            <li><strong>Whack-a-Sprite</strong>\n- Have a character constantly pop up at a random location. Award points for\nclicking the sprite before it disappears. </li>\\r\n            <li><strong>Best\nGuess</strong> - Make both characters disappear, change location to a random\nspot, then reappear as a random character.  Click on the first one and get\na point...but if you click on the second one you LOSE a point! </li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      grade4_playlab_test_markdown_instruction: "<h5><b>\\r\nIn our game, how should\nwe score points? \\r\n</b></h5> \\r\n<br/>\\r\n\\r\n1. Add 1 to your `points`\nvariable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \\r\n2.\nUse the `when actor 2 touches anything` event to trigger an update to your\nscore. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>\n\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n<br/><br/>\\r\n<h4>\\r\n**Note:**\nUse the right arrow to throw pie!\\r\n</h4>"
      grade4_playlab_test2_markdown_instruction: "Here's a function called `jump`\nthat causes your main character to jump up 100 pixels. \\r\n\\r\nRun the program\nand use the jump function to collect all of the flags by moving the dog with\nthe arrow keys."
      grade4_review_artist1_markdown_instruction: "Hi, I'm an artist. You can write\ncode to make me draw almost anything. Use a few blocks to make me draw over\nthe grey lines in the picture. (Each line is 100 pixels long)\\r\n\\r\n<br>  \\r\n"
      grade4_review_artist2_markdown_instruction: "This house needs a roof! Draw\nthe triangle.  \\r\n\\r\nHint: all three sides are the same length.\\r\n\\r\n<img\nsrc=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"\nwidth=\"300\"/>"
      grade4_review_artist3_markdown_instruction: "The jump block moves the artist\nwithout drawing. Draw the dashed line using both the `jump forward` and `move\nforward` blocks. Each line is 50 pixels long."
      grade4_review_bee1_markdown_instruction: "Now use the `repeat` block to collect\nall of the nectar and make all of the honey."
      grade4_review_bee3_markdown_instruction: "Such a busy bee!\\r\n\\r\nHelp Bee\ncollect all of the nectar and make all of the honey with the fewest blocks\npossible."
      grade4_scaffolded_project1_markdown_instruction: "It is amazing how much you\nhave learned! Let's put them together to make a game, step by step.\\r\nTo\nstart, let's set up your game's space and actor. We've put these blocks\nin your tool box. Choose a background and map, and pick an actor to be your\ngame's hero.\\r\n\\r\n![](https://images.code.org/745931ce34b3c47de19c36009e4a9c48-image-1471464938470.14.47\nPM.png)"
      grade4_scaffolded_project2_markdown_instruction: "Now let's get things moving!\nUse event handlers and actions to make your hero move.\\r\n\\r\nWe've added\nthese blocks to your tool box to help you.\\r\n\\r\n![](https://images.code.org/6216c0559cfae16005ffb53e6532473b-image-1471472994205.23.54\nPM.png)"
      grade4_scaffolded_project3_markdown_instruction: "Now that your game has a\nhero, it's time to start adding other actors and assigning them behaviors.\n\\r\n\\r\nAdd two or more additional actors to your game and make them move.\nDo you want to have an actor patrol back and forth? Try using a these new\nblocks to bring these other components of your game to life!\\r\n\\r\n![](https://images.code.org/4cfffd476c6129891eb8bde246a711a8-image-1472065288448.00.42\nPM.png)\\r\n\\r\n**NOTE:** Chasing and fleeing behavior commands are coming\nsoon!"
      grade4_scaffolded_project4_markdown_instruction: "Just getting the actors moving\nis a great step, but we need to program some interactions to make this really\nfeel like a game. A simple way to do this is to add or remove points when\nactors collide with projectiles or each other. Find some interesting ways\nto change the score in your game.\\r\n\\r\n*Don't expect to get this right\non the first try. Keep testing your game as you code. You'll not only want\na game that works, but one that is fun to play!*\\r\n\\r\nWe've added these\nblocks to your toolbox:\\r\n\\r\n![](https://images.code.org/ad0df96aa91c89e3d903dce2fe19517f-image-1472070105051.20.55\nPM.png)"
      grade4_scaffolded_project4a_markdown_instruction: "Just getting the actors\nmoving is a great step, but we need to program some interactions to make this\nreally feel like a game. A simple way to do this is to add or remove points\nwhen actors collide with projectiles or each other. Find some interesting\nways to change the score in your game.\\r\n\\r\n*Don't expect to get this right\non the first try. Keep testing your game as you code. You'll not only want\na game that works, but one that is fun to play!*\\r\n\\r\n![](https://images.code.org/876b13abf8a7984f94342dd9a5c8a8f0-image-1472069578010.42.30\nPM.png)"
      grade4_scaffolded_project5_markdown_instruction: "Great job! You have all the\nbasic components of a working game. Now spend some time making sure the game\nworks the way you want. Try including a way to win or lose your game.\\r\n\\r\n*Don't\nforget: Keep testing your game as you code. You'll not only want a game that\nworks, but one that is fun to play!*\\r\n\\r\nYour toolbox has been re-organized\nto make it easier to find what you need. We've also added these blocks:\\r\n\\r\n![](https://images.code.org/59b92b4c288bd5fc0c3be355c968f3d1-image-1472074578380.27.57\nPM.png)"
      grade4_scaffolded_project6_markdown_instruction: "You've finished! Now you\ncan play your game or share it with your friends and classmates!"
      grade5_artist_binary1_markdown_instruction: "Binary is a way of representing\ninformation using only two options.  Here, we're going to use the options\n\"off\" (represented by the number 0) and \"on\" (represented by the number\n1).   \\r\n\\r\nWe've provided you with a grid of \"pixels\" that you can walk\nthrough and make designs by turning on only certain squares.  \\r\n\\r\n**Can\nyou have the artist draw \"01010101\" in binary in the first row?**"
      grade5_artist_binary10_markdown_instruction: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\n\\r\n<br/>\\r\n"
      grade5_artist_binary2_markdown_instruction: "Here's a function that takes\na binary string of 1's and 0's and instructs the artist to follow them from\nleft to right, top to bottom.  \\r\n\\r\nThe artist will fill-in the squares\nwhen it sees a 1 and ignore the square when it sees a 0. \\r\n\\r\n**Run this\ncode to see how the artist uses binary to draw this pattern.**"
      grade5_artist_for_loops1_markdown_instruction: "Use a `for` loop to draw this\ntriangle that is 50 pixels wide. If you count from 1 to 3 by 1s, you can use\nthis just like a `repeat` loop."
      grade5_artist_for_loops10_markdown_instruction: "**Challenge:** Can you figure\nout how to use all of the things you've learned to create this image of polygons,\nall with 40 pixel sides?"
      grade5_artist_for_loops1a_markdown_instruction: "Try using a `for loop`to create\nthis triangular design. Don't worry that the numbers are different than the\nlast puzzle. As long as you turn by the right number of degrees, the artist\nwill make the correct shape!\\r\n\\r\n"
      grade5_artist_for_loops1b_markdown_instruction: "**Free Play:** Experiment\nwith the `for` loop and the `counter` variable.  \\r\n\\r\nDrag out a few blocks\nand see what happens.  \\r\n\\r\n<br/><br/>\\r\n"
      grade5_artist_for_loops2_markdown_instruction: "Use a `repeat` inside of a\n`for` loop to create this stack of triangles that goes from 50 pixels to 100\npixels."
      grade5_artist_for_loops3_markdown_instruction: "These triangles go from 20\npixel sides to 200 pixel sides, and each triangle is 20 pixels larger than\nthe last."
      grade5_artist_for_loops4_markdown_instruction: "These squares start at 15 pixels\nlong, the largest is 300 pixels long, and each square is 15 pixels larger\nthan the last."
      grade5_artist_for_loops5_markdown_instruction: "Just one little change to the\ncode from the last image can create this drawing. Can you figure out what\nthat change is?\\r\n\\r\nHint:  You need to remove something!"
      grade5_artist_for_loops6_markdown_instruction: "If you turn a little bit more\nor less than you normally would for a shape, it creates a neat effect.\\r\n\\r\nTry\nusing some of the code from the last level, but turning 89 degrees to create\nthis twisted square spiral."
      grade5_artist_for_loops7_markdown_instruction: "Make three small changes to\nthe code from the last level to get this!  \\r\n(This time, the `for` loop\nincrements by 2)"
      grade5_artist_for_loops7a_markdown_instruction: "Take the angle down to 72\ndegrees to get a spiraled pentagon."
      grade5_artist_for_loops7b_markdown_instruction: "Use the counter inside the\n`set alpha` block to get this faded center.  \\r\n(This hexagon pattern was\nmade using a 60 degree turn.)"
      grade5_artist_for_loops8_markdown_instruction: "Remember back in a previous\nstage when we used a variable to control the number of sides in a shape? We\nare going to do the same thing with the `counter` variable now.  \\r\n\\r\nThis\npattern starts with a triangle and adds one side at a time until it draws\na decagon (10 sides). Each side should be 100 pixels long. \\r\n\\r\nHow will\nyou use the `counter` variable from the `for` loop to recreate this drawing?"
      grade5_artist_for_loops9_markdown_instruction: "Let's put it all together!   \\r\n\\r\nUsing\nyour knowledge of `for` loops and the `counter` variable, create this drawing\nwhere each shape has two more sides than the last.  Make sure that each side\nis 10 times as long as the number of sides in the polygon.\\r\n\\r\nVery little\nof the code has been provided for you."
      grade5_artist_for_loopsfreeplay11_markdown_instruction: "<br/><br/>\\r\n<img\nsrc=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\"\nwidth=\"250px\"/>  \\r\n<br/><br/>\\r\n**Free-Play Inspiration:** You've now\nlearned everything you need to know to make a pattern like this! If this picture\ninspires you, try to make something similar. Otherwise, create something all\nyour own."
      grade5_artist_for_loopsfreeplay12_markdown_instruction: "**Free Play:** Try\nusing the `counter` variable with other drawing elements to make magical images\nlike this one.\\r\n\\r\n<img src=\"https://images.code.org/7910db8adf2ec7e4c5fdad0101c68368-image-1475911466143.24.03.png\"\nwidth=\"400px\"/>"
      grade5_artist_freeplay_markdown_instruction: "Create your own project! This\ncreation will be saved to your Projects dashboard so that you can easily edit\nit any time!"
      grade5_artist_functionparameters10_markdown_instruction: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! \\r\n\\r\nIf this picture inspires\nyou, try to make something similar. Otherwise, create something all your own.\\r\n\\r\nNotice:\nWe've used the `set alpha` block to make the \"petals\" fade toward the outside."
      grade5_artist_functionparameters11_markdown_instruction: "**Freeplay:** Below\nthere are functions you've written, and more for you to play with. Play with\nthe pen width to see how different your drawings look!"
      grade5_artist_functionparameters7_markdown_instruction: "This image is similar\nto the last.  \\r\n\\r\nCan you use a `for` loop with your function to make\nthis design?"
      grade5_artist_functionparameters8_markdown_instruction: "Use the function from\nthe last puzzle to draw this series of shapes.  \\r\n\\r\n\\r\nThe triangle has\n21 pixel sides, and the sides in each following shape are 7 pixels longer\nthan the last.   \\r\nUse the `multiplication`block to make this all happen\nwith just one function call.\\r\n<hr/>\\r\nBe sure to jump 100 pixels between\npolygons. <br>\\r\nThe multipication block looks like this ![](https://images.code.org/55e293447c6b26bbbcf29cda2036706b-image-1481322763779.png)\\r\n\\r\n"
      grade5_artist_functionparameters9_markdown_instruction: "**Challenge:** Edit\n`draw a spiral edge` to use `length` and `sides` parameters, then recreate\nthese shapes.\\r\n\\r\n- The square goes from 3 pixels to 90 pixels.\\r\n- The\nhexagon goes from 3 pixels to 100 pixels.\\r\n- The triangle goes from 3 pixels\nto 105 pixels."
      grade5_artist_functionparameters9a_markdown_instruction: "Finish off the `draw\na spiral edge` function to also ask for a minimum length for the center of\nthe spiral.\\r\n\\r\n- The smallest side in the center of this square is 50\npixels long\\r\n- The longest side at the outside of this spiral is 200 pixels\nlong\\r\n"
      grade5_artist_functionparameters9b_markdown_instruction: "Can you figure out\nhow to make this drawing using the function that you just created?\\r\n\\r\n-\nThe red spiral goes from 50 to 200 pixels\\r\n- The blue spiral goes from 25\nto 125 pixels\\r\n- The green spiral goes from 100 to 300 pixels\\r\n"
      grade5_artist_functionparameters_6_markdown_instruction: "Great job!  Now edit\nthis function to add a parameter for the number of sides in your polygon.\\r\n\\r\nThe\nsides of all the shapes are 100 pixels long."
      grade5_artist_parameters_squares1_markdown_instruction: "Click \"edit\" to\nfill in the function definition of `draw a square` and add a parameter.  \\r\nIt\nshould take a length parameter just like the triangle. \\r\n\\r\n**This time,\ndraw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are\neach 100 pixels away from the last."
      grade5_artist_parameters_squares1a_markdown_instruction: "Today, we're going\nto try out a different, more powerful function editor. See if you can figure\nout how to edit the `draw a square` function to find the bugs."
      grade5_artist_parameters_squares2_markdown_instruction: "Now try creating the\nfunction from scratch!  \\r\n\\r\nCreate a function called `draw a square` and\nuse it to outline these four boxes.  \\r\nMake sure to add a parameter for\n`length`!\\r\n\\r\n<hr/>\\r\nStarting from the upper right, the box widths are\n50, 100, 150, and 200."
      grade5_artist_parameters_squares2a_markdown_instruction: "Edit the function\nto accept a parameter called `length`.  \\r\n\\r\nThe sides of each square should\nbe 25 pixels larger than the last.  The first square has 25 pixel sides. Replace\nthe '???' with the correct values to draw the picture."
      grade5_artist_parameters_stars1_markdown_instruction: "That last one is tough\nif you only use loops. Let's try one more time and see if this new 'function'\nmakes it easier to **draw a star**."
      grade5_artist_parameters_triangles1_markdown_instruction: "Today, we're going\nto try out a different, more powerful function editor. See if you can figure\nout how to edit the `draw a square` function to find the bugs."
      grade5_artist_parameters_triangles1a_markdown_instruction: "Today, we're going\nto try out a different, more powerful function editor. See if you can figure\nout how to edit the `draw a triangle` function to find the bugs."
      grade5_artist_parameters_triangles1aa_markdown_instruction: "Click \"edit\"\nto fill in the function definition of `draw a triangle` and add a parameter.  \\r\nIt\nshould take a length parameter just like the triangle. \\r\n\\r\n**This time,\ndraw 3 triangles:** 25, 50 and 75 pixels in length. The lefthand corners are\neach 100 pixels away from the last."
      grade5_artist_parameters_triangles2_markdown_instruction: "Can you complete\nthis drawing? \\r\n\\r\nThe sides of each triangle are 25 pixels larger than\nthe last.  \\r\nThe first triangle has 25 pixel sides."
      grade5_artist_parameters_triangles2a_markdown_instruction: "Do you notice anything\ndifferent about these function blocks? Click “Run” to see what happens."
      grade5_artist_parameters_triangles3_markdown_instruction: "The code for this\ntriangle function is broken.\\r\n\\r\nCan you edit the function to fix it, and\nthen make triangles of length 25, 50, and 75?"
      grade5_artist_parameters_triangles4_markdown_instruction: "The code for this\ntriangle function is broken. \\r\n\\r\nCan you edit the function to fix it,\nand then make triangles of length 25, 50, and 75?"
      grade5_artist_parameters_trianglesy_markdown_instruction: "The code for this\ntriangle function is broken.\\r\n\\r\nCan you edit the function to fix it, and\nthen make triangles of length 25, 50, and 75?"
      grade5_artist_variables_freeplay10_markdown_instruction: "**Free Play:** Experiment\nwith the number of sides this shape has. Can you change the algorithm so that\nthe overall size of the shape stays the same, no matter how many sides it\nhas? "
      grade5_artist_variables_freeplay14_markdown_instruction: "**Free Play**: Check\nit out! Now your algorithm is nested within one more loop. Experiment with\nchanging the values of your two variables to draw cool patterns.\\r\n\\r\nFor\neven more effect, try playing with color!  Use random colors inside loops\nto see how it changes your design."
      grade5_artist_variables_freeplay15_markdown_instruction: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play Inspiration:** You've now learned everything\nyou need to know to make a pattern like this! If this picture inspires you,\ntry to make something similar. Otherwise, create something all your own. "
      grade5_artist_variables_freeplay16_markdown_instruction: "Still playing?  \\r\n\\r\nHere\nis a blank canvas where you can create whatever you want!\\r\n\\r\n<hr/>\\r\n<h3>If\nyou're looking for ideas, try one of these:</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/2e8a6853ccb3ffe9bc6d25aaeea75514-image-1471047821651.10.45\nPM.png\" width=\"200\"/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img src=\"https://images.code.org/0b63705c28ac282637a3a5b3cede8608-image-1471047826162.18.02\nPM.png\" width=\"200\"/><br/>\\r\n</td>\\r\n\\r\n</tr>\\r\n</table>"
      grade5_artist_variables_hexagons1_markdown_instruction: "Let's try it again!\n\\r\n\\r\nCan you set the `length` variable to 60 to make this cool design with\nhexagons?"
      grade5_artist_variables_letterT11_markdown_instruction: "Here’s some more complicated\ncode using the same concepts from the last puzzle - what should you set the\n`sides` variable to in order to draw this picture made of squares?\\r\n\\r\n<p\nstyle=\"font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;\nborder-radius:10px;\">\\r\n\\tJust for fun: Try using a few different numbers\nto see what happens to the pattern!\\r\n</p>"
      grade5_artist_variables_octagons13_markdown_instruction: "When a shape has\nlots of sides, each side needs to be shorter if you want the whole pattern\nto fit on the screen. \\r\n\\r\nLet's recreate the algorithm for this amazing\npattern, but instead of manually setting the `length` variable, let's use\na math block with the `sides` variable inside to make sure that each shape\nfits correctly.  \\r\n\\r\nThe perimeter of each polygon is 300 pixels."
      grade5_artist_variables_pentagon8_markdown_instruction: "Use what you learned\nin the last puzzle to create this hexagon using the `sides` variable.\\r\n\\r\nSee\nhow you could change just one value to draw a triangle,  square, pentagon,\nor octagon?"
      grade5_artist_variables_pentagon9_markdown_instruction: "Now, recreate the\nalgorithm from the last level and create a pentagon with sides of length 150."
      grade5_artist_variables_pentagons1_markdown_instruction: "Draw this pattern\nof pentagons with 100 pixel sides by setting the right value for `length`\nand dropping the `length` variable into all of the the correct places. \\r\n\\r\nSee\nhow you only have to set the value for `length` once, and the code uses the\nright value everywhere?"
      grade5_artist_variables_pentagons12_markdown_instruction: "Let's set the `sides`\nvariable to 5. The more sides we add to this algorithm, the bigger this whole\npattern gets! \\r\n\\r\n<br/>\\r\nNotice that there is another variable called\n`length`. \\r\nWe can now use that variable wherever we have a `move forward`\nblock. \\r\n\\r\nSet the `length` variable to 75 for this shape."
      grade5_artist_variables_rectangle6_markdown_instruction: "Now I want to make\na rectangle that is twice as tall as it is wide. We've got a variable called\n`width` that needs to be set to 100. Can you use the math blocks to complete\nthe code?"
      grade5_artist_variables_square7_markdown_instruction: "Here’s some code that\ncan draw any regular polygon. \\r\n\\r\nThere’s a new variable called `sides`\nthat is set to 4. \\r\n\\r\nCan you use the `sides` variable (along with the\nmath block) to turn the right amount regardless of how many sides are in the\npolygon?"
      grade5_artist_variables_triangles1_markdown_instruction: "Let's draw an equilateral\ntriangle. \\r\n\\r\nIt has to be exactly 50 pixels long on each side.\\r\n\\r\n"
      grade5_artist_variables_triangles1_2018_markdown_instruction: "Let's draw\nan equilateral triangle. \\r\n\\r\nIt has to be exactly 50 pixels long on each\nside.\\r\n\\r\n"
      grade5_artist_variables_triangles2_markdown_instruction: "Instead of using\n`move forward by 150`, the `move` block is now referencing a variable called\n`length`. Can you set `length` to 150 to draw this new triangle?"
      grade5_artist_variables_triangles3_markdown_instruction: "Drag a number block\nto the `set length` block and to the `repeat _ times` block to draw a set\nof 50 pixel triangles. "
      grade5_bee_for_loops10_markdown_instruction: "If your loop is counting down,\nthe increment is **subtracted** from your counter variable each time through.\n\\r\n\\r\nWhat should your increment be to collect 15, then 12, then 9, 6, 3\nnectar?"
      grade5_bee_for_loops11_markdown_instruction: "**Challenge:** Take what you've\nlearned about `for` loops and try to solve this problem. \\r\n\\r\nRemember:\nYou may have to run through solutions multiple times before you figure out\nall of the steps.\\r\n"
      grade5_bee_for_loops2_markdown_instruction: "Add the code necessary to make\nsure the bee collects all the nectar.\\r\n\\r\nLook at how much code you need\nfor this puzzle! (We'll learn a simpler way in the next puzzle.)"
      grade5_bee_for_loops3_markdown_instruction: "Ah, the `for` loop makes this\nmuch easier!  \\r\n\\r\nTry this puzzle using the `for` loop with `counter`\nvariable and see how much shorter your code becomes."
      grade5_bee_for_loops4_markdown_instruction: "Help the bee collect all of the\nnectar."
      grade5_bee_for_loops5_markdown_instruction: "Now we need to `move forward`\n`counter` times, then `get nectar` `counter` times.  Can you use two `repeat`\nloops to solve this challenge?"
      grade5_bee_for_loops6_markdown_instruction: "You can also use a `for loop`\nto count down. Try gathering this nectar by counting down from 5 to 1 by 1."
      grade5_bee_for_loops7_markdown_instruction: "The last number in your `for`\nloop is called the **\"increment\"**.  Each time the loop is run, the counter\nvariable changes by the value of the increment.\\r\n\\r\nTry collecting these\nflowers using an increment of 2."
      grade5_bee_for_loops8_markdown_instruction: "You've got this!  \\r\n\\r\nWhat\nshould your increment be to collect 3, 6, 9, 12, 15 nectar?\\r\n\\r\n"
      grade5_bee_for_loops9_markdown_instruction: "Now, let's combine the `counter`\nvariable with a math block! \\r\n\\r\nHow can you use the `counter` variable\nto navigate this garden with the fewest number of blocks possible?"
      grade5_bee_parameters_new1_markdown_instruction: "Check beneath the clouds\nto see if the flowers have any nectar."
      grade5_bee_parameters_new2_markdown_instruction: "Here's some code that solves\nthe last puzzle.  \\r\nLet's turn it into a function, then call the function\nto check this row for nectar.  \\r\n<hr/>\\r\nThis may seem like a strange step\nnow, but it will be really helpful soon!"
      grade5_bee_parameters_new3_markdown_instruction: "Time to put the function\nto the test! \\r\n\\r\nLet's see if it makes collecting these three rows of\nnectar any easier."
      grade5_bee_parameters_new4_markdown_instruction: "*\"How is your function holding\nup?\"*   \\r\n\\r\nWe need to make some adjustments here. Click \"edit\" to\nadd a `length` parameter to the function so that it will still work when the\nrow is a different length."
      grade5_bee_parameters_new5_markdown_instruction: "*\"You're doing great so\nfar!\"*\\r\n\\r\nLet's use this function to collect a lot of nectar."
      grade5_bee_parameters_new6_markdown_instruction: "You can make code shorter\nand more efficient when you combine functions with other programming elements.  \\r\n<hr/>\\r\n<h3>What\nblocks can you use with your function to build a short and sweet solution\nto this puzzle?</h3>"
      grade5_bee_parameters_new7_markdown_instruction: "**Challenge:** Something\nlooks a little different. Can you modify your function to make honey as well?"
      grade5_bee_parameters_new8a_markdown_instruction: "Use your new function to\nsolve this spiral."
      grade5_bee_parameters_new9a_markdown_instruction: "Use your new function to\nsolve this spiral."
      grade5_pixelation_markdown_instruction: "# Make your own image of any size\\r\n\\r\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r\n\\r\n\\r\n**Directions:**\\r\n\\r\n*\nEncode an image of anything you like using `binary`.\\r\n* The binary language\nwill be represented with `0` and `1` only.\\r\n* You might want to do some\nplanning and sketching with graph paper first. \\r\n* Depict something, perhaps\nyour name written out, your initials, an icon or logo of some sort.\\r\n* Get\ncreative! The image doesn't have to be a perfect square, it can be long and\nskinny."
      grade5_playlab_freeplay_markdown_instruction: "It's free play time! Have fun\nwith all the blocks in your tool box.  \\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Tag</strong>\n- Have character 2 patrol and use your arrow keys to make character 1 chase\nuntil they collide. </li>\\r\n            <li><strong>Whack-a-Sprite</strong>\n- Have a character constantly pop up at a random location. Award points for\nclicking the sprite before it disappears. </li>\\r\n            <li><strong>Best\nGuess</strong> - Make both characters disappear, change location to a random\nspot, then reappear as a random character.  Click on the first one and get\na point...but if you click on the second one you LOSE a point! </li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      grade5_playlab_parameters_points1_markdown_instruction: "Here's the same game\nbut most of the code is hidden. We've added a new function called `score_points.`\\r\n<br/>\\r\n<hr>\\r\n<br/>\\r\n<h4>\\r\nAdd\na new parameter called `points` to the `player_score` function. \\r\n<br/>\\r\nThe\n`score_points` function should be able to both add and remove points from\n`player_score` depending on which actor is hit.<br>\\r\nChanging the score\nby 1 will add a point, while changing the score by -1 will subtract a point.\\r\n</h4>\\r\n<br/>\\r\n<hr>\\r\n*Note:  When\nyou're done, click \"Run\" to play.  When Dog scores 6 points, you will move\non to the next puzzle.*"
      grade5_playlab_variables1_markdown_instruction: "This time you don't have\nto write any code, just hit `Run` to play the game! \\r\n\\r\n<br/>\\r\nIn this\ngame, you're the dog who is trying to collect more flags than the cat. Use\nthe down arrow to control the dog. Press `Finish` when you're done playing."
      grade5_playlab_variables10_markdown_instruction: "Edit the the `patrol` function\nto add an `actor` parameter, so that we can call it for each of the actors\non the screen. Remember, the actors correspond to numbers 1, 2, and 3."
      grade5_playlab_variables11_markdown_instruction: "Add another parameter called\n`speed` to the `patrol` function. Try using a `set speed` block with the new\n`speed` parameter to help Penguin get both flags before the other sprites\neven get one."
      grade5_playlab_variables12_markdown_instruction: "Let's have some fun! Look\nat the code provided to see if you can figure out what each block does.  \\r\n\\r\nWhen\nyou're done, use the arrow keys to control Dog and collect all of the flags.\\r\n\\r\n**NOTE:**\nYou don't need to make any changes to the program"
      grade5_playlab_variables13_markdown_instruction: "Use the `when actor touches`\nblock to send Dog back to the top-left ONLY if Dog touches any of the other\nactors."
      grade5_playlab_variables14_markdown_instruction: "It's free play time! Have\nfun with all the blocks in your tool box.  \\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Tag</strong>\n- Have character 2 patrol and use your arrow keys to make character 1 chase\nuntil they collide. </li>\\r\n            <li><strong>Whack-a-Sprite</strong>\n- Have a character constantly pop up at a random location. Award points for\nclicking the sprite before it disappears. </li>\\r\n            <li><strong>Best\nGuess</strong> - Make both characters disappear, change location to a random\nspot, then reappear as a random character.  Click on the first one and get\na point...but if you click on the second one you LOSE a point! </li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>\\r\n"
      grade5_playlab_variables1ask_markdown_instruction: "This time, when you press\n'run', you will see a 'prompt' asking you for a number. This number will\nbe stored in a variable used to set the dog's speed.\\r\n\\r\n\\r\nPay attention\nto how this program is written!"
      grade5_playlab_variables2_markdown_instruction: "The race in that last puzzle\nwasn't very fair! Change the `dog_speed` variable to make sure you can collect\nmore flags than Cat. The first to collect 10 flags wins!"
      grade5_playlab_variables3_markdown_instruction: "Here's a new kind of game!\n\\r\n\\r\nYou don't need to change anything on this level.\\r\n\\r\n**Directions:**\nUse the left and right arrows to move, and the up arrow to jump. See if you\ncan collect all of the flags."
      grade5_playlab_variables4_markdown_instruction: "Now we're using a variable\ncalled `height` to control how high the dog can jump. Update the `height`\nvariable so that the dog can jump high enough to reach all the flags. \\r\n"
      grade5_playlab_variables6_markdown_instruction: "In our game, how should we\nscore points?\\r\n\\r\n1. Add 1 to your `points` variable each time Dog hits\nCat with a piece of pie.\\r\n2. Use the `when actor 2 touches anything` event\nto trigger an update to your score. You can increment your variable by setting\n`points = points + 1.`\\r\n3. Get your score up to 10 to pass the level.\\r\n\\r\n**Note:**\nUse the right arrow to throw pie!"
      grade5_playlab_variables6ask_markdown_instruction: "This time, you need 100\npoints to win!  Don't worry though, you can choose how many points you earn\neach time you score a hit!\\r\nTry adding the `ask` block and changing the\nnumber 1 out for the variable `value`.\\r\n\\r\n**Note:** Use the right arrow\nto throw pie!"
      grade5_playlab_variables7_markdown_instruction: "Nice, now let's make sure\nthis game isn't too easy to play!\\r\n\\r\nAny time Dog (actor 1) gets hit\nby a sandwich from Cat (actor 2), you should lose a point.\\r\n\\r\nStart with\n10 points so it's not too hard. Let your score drop down from 10 to 0 to\npass the level."
      grade5_playlab_variables71_markdown_instruction: "Here's our game from an\nearlier stage but most of the code is hidden. We've added a new function\ncalled `score_points.`\\r\n<br/>\\r\n<hr>\\r\n<br/>\\r\n<h4>\\r\nEdit the function\nso that a new parameter called `points` is added to `player_score`.  \\r\n<br/>\\r\nThe\nvariable `player_score` should increase each time Dog tags Cat with pie, and\ndecrease each time that Cat tags Dog with a sandwich.\\r\n</h4>\\r\n<br/>\\r\n<hr>\\r\n*Note:\nWhen you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove on to the next puzzle.*"
      grade5_playlab_variables81_markdown_instruction: "We've added one last function\nfor you.\\r\n<hr/>\\r\n\\r\n<h4>\\r\nUse an `if` statement to program your game\nto call the `level_up` function only when `player_score` becomes greater than\na certain number.<br/><br/>\\r\n</h4>\\r\n<i>For example: `player_score` > 6</i>\\r\n\\r\n\\r\n<hr/>\\r\n<i>Play\nthe game, and make it to level 3 to move to the next puzzle.</i>"
      grade5_playlab_variables9_markdown_instruction: "Here's a function called\n`patrol`. \\r\n\\r\nEdit `patrol` to move Cat up 400 pixels and then down 400\npixels."
      grade5_playlab_variables_freeplay_markdown_instruction: "Free Play time! Here\nare all of the variables we've played with so far in this stage, as well\nas a few more in case you want them. \\r\n\\r\nNotice that there are now so\nmany blocks in our toolbox that they need to be organized!  Here, we've put\neach piece into an appropriate category.  Take some time to explore everything\nthat is available. When you're done browsing, make a game or story using\nrepeats, variables, and events.  \\r\n\\r\n*Hint: scroll down to see all the\ncommands in the workspace.*"
      grade5_playlab_variables_jump1_markdown_instruction: "This puzzle uses a hidden\nfunction that makes the dog jump when the `up` arrow is pressed. The height\nof the jumps can be set at the start of the game using the `jumpPower` variable.\nTry to touch all of the flags!"
      grade5_prompt_test_markdown_instruction: "Variables aren't always numbers.\nWhat if you wanted to store a word or text? Experiment with the new `ask`\nblock."
      gradeK_sequence_4_markdown_instruction: "Try this one yourself from the beginning.\\r\n\\r\n![](https://images.code.org/43001078c4df6feea1a6edf025192d85-image-1467929743355.gif)"
      gradek_artist_loops1_markdown_instruction: "Help the artist draw this line\ntwo times forward.\\r\n\\r\n![](https://images.code.org/7ddc7b43ef27197559c7defb0af56d03-image-1470776934855.gif)"
      gradek_artist_loops2_markdown_instruction: "Our artist is trying to draw a\nline five times, but can't get it right. Can you help?\\r\n\\r\n![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)"
      gradek_artist_loops3_markdown_instruction: "Now, use a `repeat` loop to draw\nthis line five times!\\r\n\\r\n![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)"
      gradek_artist_loops4_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nDraw a line seven steps long. This will\nbecome our horizon.<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loops5_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nLet's put a nice hill in the back.<br/><br/>\\r\n</div>\\r\n\\r\n<img\nsrc=\"https://images.code.org/bbbd114642d829029fc3b0566a4437e3-image-1477107329933.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loops6_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nUse the `repeat` loop to add waves to the\nwater.<br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loops7_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nWe need a ladder up to the boat.<br/>\\r\n</div>\\r\n\\r\n<img\nsrc=\"https://images.code.org/6e4dc767e55d11400f35c6680bbfe1e3-image-1470788284437.gif\"\nwidth=\"300\"/>"
      gradek_artist_loops8_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\n**Challenge:** The stairs down to the dock\nare broken.  Help me fix them.<br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/53c68133f897895caa0369b4afa3ec3b-image-1470789463684.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loops9_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nTime to head back to land. Help me put down\nstones so I don't fall in!<br/><br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loopsA_markdown_instruction: "<div style=\"color: #7665a0; font-size:\n1.6em; line-height: 1.4em;\" >\\r\nHelp me build steps to watch the ship sail\naway.<br/>\\r\n</div>\\r\n\\r\n<img src=\"https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif\"\nwidth=\"300\"/>\\r\n"
      gradek_artist_loopsFP_markdown_instruction: "The artist saw something funny\nin the distance.  Draw what you think he saw.\\r\n\\r\n<hr/>\\r\n<h3>Ideas</h3>\\r\n<table>\\r\n<tr>\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Singing Snail</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Big City</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Concert</h4><br/><br/>\\r\n</td>\\r\n\\r\n<td>\\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\\r\n<h4>A Birthday Cake</h4><br/><br/>\\r\n</td>\\r\n\\r\n</tr>\\r\n</table>\\r\n"
      gradek_playlab_events1c_markdown_instruction: "Jorge the Dog wants to say \"Hi\nthere.\"  Can you help him?"
      gradek_playlab_events2c_markdown_instruction: "Help Jorge the Dog get moving\nby connecting the ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png)\nblock to the ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)\nevent block that is already in the workspace."
      gradek_playlab_events3c_markdown_instruction: "Now, get Jorge to move right\nwhen the ![](https://images.code.org/b99365eb23280f158e6ef570fe1c8a76-image-1478145132820.png)\nbutton is clicked."
      gradek_playlab_events4c_markdown_instruction: "Add events to have Jorge move\nup and down when the ![](https://images.code.org/379493b95d158b273f1424538b1c635a-image-1478145402316.png)\nand ![](https://images.code.org/f490d78efd81c21ab74286aefe7af097-image-1478145385132.png)\nbuttons are pressed."
      harvester_Kahoot_markdown_instruction: "*\"Oooh, veggies are cropping up everywhere!\"*\\r\n\\r\nNow\nhelp the farmer pick all of the corn on the way to the pumpkin at the end.\\r\n___\\r\n#####\nNote: Every square on the path that leads to the pumpkin will either have\n*one* corn or nothing.  You will need to use an `if` statement to check whether\nthere is corn before you try to pick it!"
      harvey_pixelation_markdown_instruction: "# Make your own image of any size\\r\n\\r\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r\n\\r\n\\r\n**Directions:**\\r\n\\r\n*\nEncode an image of anything you like using `binary`.\\r\n* The binary language\nwill be represented with `0` and `1` only.\\r\n* You might want to do some\nplanning and sketching with graph paper first. \\r\n* Depict something, perhaps\nyour name written out, your initials, an icon or logo of some sort.\\r\n* Get\ncreative! The image doesn't have to be a perfect square, it can be long and\nskinny."
      harvey_snowflake_artist1_markdown_instruction: "*It's time to get your snowflake\nready for 3d printing!*\\r\n\\r\n![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08\nPM.png)In order for your image to print correctly, follow these rules:\\r\n\\r\n*\nMake sure your image is all **one piece**! Separate pieces will print separately.\\r\n*\nMake sure your image **fits** entirely on the canvas\\r\n* Use just **black\nlines** on a white background.\\r\n* Jump the artist off the top left corner\n(-10 over, -10 down) at the end of your program:\\r\n<xml>    <block type=\"jump_to_xy\"><title\nname=\"XPOS\">-10</title><title name=\"YPOS\">-10</title>\\r\n    </block>\\r\n    <block\ntype=\"jump_to\"><title name=\"VALUE\">7</title>\\r\n    </block></xml>\\r\n    When\nyou are finished, right-click to save the image, then send it to me on <a\nhref=\"https://classroom.google.com\">Google Classroom</a>."
      harvey_snowflake_artist2_markdown_instruction: "*It's time to get your snowflake\nready for 3d printing!*\\r\n\\r\n![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08\nPM.png)In order for your image to print correctly, follow these rules:\\r\n\\r\n*\nMake sure your image is all **one piece**! Separate pieces will print separately.\\r\n*\nMake sure your image **fits** entirely on the canvas\\r\n* Use just **black\nlines** on a white background.\\r\n* Jump the artist off the top left corner\n(-10 over, -10 down) at the end of your program:\\r\n<xml>    <block type=\"jump_to_xy\"><title\nname=\"XPOS\">-10</title><title name=\"YPOS\">-10</title>\\r\n    </block>\\r\n    <block\ntype=\"jump_to\"><title name=\"VALUE\">7</title>\\r\n    </block></xml>\\r\nWhen\nyou are finished, right-click to save the image, then send it to me on <a\nhref=\"https://classroom.google.com\">Google Classroom</a>."
      iceAgeLoopsforVideo_markdown_instruction: "Can you get to the acorn with just\none <xml><block type=\"maze_moveForward\"/></xml> block? Try using a loop!"
      iceage_click_hello_markdown_instruction: "Can you help Sid call for his friends\nwhen you click on him? \\r\nOnce you're done, press \"Run\" to play.  Click\non Sid to see your code work!"
      iceage_click_hello_2018_markdown_instruction: "Can you help Sid call for his\nfriends when you click on him? \\r\nOnce you're done, press \"Run\" to play.  Click\non Sid to see your code work!"
      iceage_free_play_markdown_instruction: "Time to create your own game or story!  \\r\n\\r\nWhen\nyou're done, click \"Finish\" to let friends try your game on their phones,\ntablets, or computers!\\r\nDon't know what to make? Click the hints for details."
      iceage_free_play_2018_markdown_instruction: "Time to create your own game or\nstory!  \\r\n\\r\nWhen you're done, click \"Finish\" to let friends try your\ngame on their phones, tablets, or computers!\\r\nDon't know what to make?\nClick the hints for details."
      iceage_free_playcourseF_IceAge_11_markdown_instruction: "Time to create your\nown game or story!  \\r\n\\r\nWhen you're done, click \"Finish\" to let friends\ntry your game on their phones, tablets, or computers!\\r\nDon't know what\nto make? Click the hints for details."
      iceage_hello1_markdown_instruction: "Sid (actor 1) wants to gather everyone\nfor a new adventure. Can you help him say \"Hello!\" by dragging the `say`\nblock out and connecting it to the bottom of the `when run` event?   \\r\n\\r\nDon't\nforget to type \"Hello!\" inside!"
      iceage_hello1_2018_markdown_instruction: "Sid (actor 1) wants to gather everyone\nfor a new adventure. Can you help him say \"Hello!\" by dragging the `say`\nblock out and connecting it to the bottom of the `when run` event?   \\r\n\\r\nDon't\nforget to type \"Hello!\" inside!"
      iceage_hello2_markdown_instruction: "Manny (actor 2) found Sid (actor 1) and\nwants to invite him on an adventure. Help them greet each other by using the\nthe `actor ___ say` block twice."
      iceage_hello2_2018_markdown_instruction: "Manny (actor 2) found Sid (actor\n1) and wants to invite him on an adventure. Help them greet each other by\nusing the the `actor ___ say` block twice."
      iceage_move_events_markdown_instruction: "Scrat is still looking for acorns!\n\\r\nHelp him scamper around by attaching a `move actor 1` block to each of\nthe events and changing the direction to work for each arrow key. \\r\nWhen\nyou’re done, click \"Run\" and try to collect all of the acorns."
      iceage_move_events_2018_markdown_instruction: "Scrat is still looking for acorns!\n\\r\nHelp him scamper around by attaching a `move actor 1` block to each of\nthe events and changing the direction to work for each arrow key. \\r\nWhen\nyou’re done, click \"Run\" and try to collect all of the acorns."
      iceage_move_to_actor_markdown_instruction: "Diego (actor 1) is searching for\nManny (actor 2). Can you help bring the two together? Connect a block to the\n`when actor touches` event to play a sound when they find each other."
      iceage_move_to_actor_2018_markdown_instruction: "Diego (actor 1) is searching\nfor Manny (actor 2). Can you help bring the two together? Connect a block\nto the `when actor touches` event to play a sound when they find each other."
      iceage_move_to_flag_markdown_instruction: "Scrat is looking for his acorn!\nCan you help him move the last 200 pixels?"
      iceage_move_to_flag_2018_markdown_instruction: "Scrat is looking for his acorn!\nCan you help him move the last 200 pixels?"
      iceage_repeat_markdown_instruction: "The `repeat forever` block allows you\nto run code continuously. Can you put blocks inside of it to help Granny get\nsome exercise by moving left and right repeatedly?"
      iceage_repeat_2018_markdown_instruction: "The `repeat forever` block allows\nyou to run code continuously. Can you put blocks inside of it to help Granny\nget some exercise by moving left and right repeatedly?"
      iceage_sound_and_points_markdown_instruction: "Here is your code from the last\npuzzle, as well as the code to move Granny left and right. \\r\nCan you finish\nthe program to make it so that you both **play a sound** and **score a point**\nwhen Sid and Granny collide? \\r\nPress \"Run\" to play the game."
      iceage_sound_and_points_2018_markdown_instruction: "Here is your code from\nthe last puzzle, as well as the code to move Granny left and right. \\r\nCan\nyou finish the program to make it so that you both **play a sound** and **score\na point** when Sid and Granny collide? \\r\nPress \"Run\" to play the game."
      iceage_throw_hearts_markdown_instruction: "Sid wants to let his grandmother,\nGranny, know that he loves her.   \\r\n\\r\nUse the `actor __ throw` command\nto have Sid (actor 1) throw hearts at Granny (actor 2)! \\r\nSet Granny's\nmood to happy when she gets hit with the hearts."
      iceage_throw_hearts_2018_markdown_instruction: "Sid wants to let his grandmother,\nGranny, know that he loves her.   \\r\n\\r\nUse the `actor __ throw` command\nto have Sid (actor 1) throw hearts at Granny (actor 2)! \\r\nSet Granny's\nmood to happy when she gets hit with the hearts."
      iceage_warn_ice_age_markdown_instruction: "Everyone needs to move faster because\nan ice storm is coming! \\r\nChange the scene to an icy background and set\nSid’s (actor 1) speed to fast.\\r\nPress \"Run\" and move Sid to Diego to warn\nhim."
      iceage_warn_ice_age_2018_markdown_instruction: "Everyone needs to move faster\nbecause an ice storm is coming! \\r\nChange the scene to an icy background\nand set Sid’s (actor 1) speed to fast.\\r\nPress \"Run\" and move Sid to Diego\nto warn him."
      jessie-test_markdown_instruction: "# Cool\\r\n\\r\n## Markdown\\r\n\\r\n### Instructions\\r\n\\r\n####\nhere\\r\n\\r\n##### now\\r\n\\r\n###### forever"
      kikiTesta_markdown_instruction: "Our adventurer wants to collect coins.  But\nshe can only use 4 blocks to get them.  \\r\n\\r\nCan you help her grab as many\nas she can using just 4 blocks?"
      level 'grade3_Loops_10_markdown_instruction: "Such a busy bee!\\r\n\\r\nHelp\nBee collect all of the nectar and make all of the honey with the fewest blocks\npossible."
      level 'grade3_Loops_11_markdown_instruction: "The shape of this path is different\nfrom the others. \\r\n\\r\nCan you collect all of the nectar using as few blocks\nas possible?"
      level 'grade3_Loops_3_markdown_instruction: "Use a `repeat` loop to collect\nall of the nectar."
      level 'grade3_Loops_4_markdown_instruction: "Now use the `repeat` block to\ncollect all of the nectar and make all of the honey."
      level 'grade3_Loops_5_markdown_instruction: "What a beautiful field of flowers!   \\r\n\\r\nHelp\nthe bee visit each one.\\r\n\\r\nCan you find a way to do it with fewer than\n7 blocks?"
      level 'grade3_Loops_6_markdown_instruction: "How many times can loops help\nyou in this puzzle?  \\r\n\\r\nLoops are your friend! Use a few of them to complete\nthis puzzle with the fewest blocks possible."
      level 'grade3_Loops_7_markdown_instruction: "Those flowers look tasty!\\r\n\\r\nCollect\nnectar from each of the flowers using the fewest blocks possible."
      loop pet test 2_markdown_instruction: "**CHALLENGE!** When Daisy gets a carrot,\nshe gets excited. Can you make Daisy start doing a dance party? She should\nnever stop, even after you take the carrot away.\\r\n\\r\nYou will have to use\nall these blocks:\\r\n![](https://images.code.org/83c295bd00536dffed3c93a40bba75ae-image-1523562330282.41.06\nPM.png)"
      loop pet test 3_markdown_instruction: "**Make Predictions!** Write down your\nanswers to these questions before clicking \"Run\". Then try the code and\nsee what happens!\\r\n\\r\n* What will Daisy the dog do after you drag the carrot\nto her?\\r\n* What will Daisy the dog do after you press the Up arrow key?\\r\n"
      loop pet test 4_markdown_instruction: "**It's time to make your own virtual\npet!** You can change whatever code you want to to make your own pet. Here\nare some ideas:\\r\n\\r\n* Can you make your pet start something new when you\nclick on it?\\r\n* Can you make your pet run away when you drag the vacuum\nto it?\\r\n* Can you add other animal friends to your pet's area?"
      love_spring_1_markdown_instruction: "Let's celebrate Spring!  \\r\n\\r\nWe have\nput some seeds in the ground to prepare for the season's flowers.  Can you\ncover them up so that the birds don't eat them?"
      love_spring_2_markdown_instruction: "Our flowers are in full bloom!  \\r\n\\r\nNow\nwe need the bee to grab nectar from each one so he can make plenty of honey\nback at his hive!"
      love_spring_3_markdown_instruction: "<b>The sun is shining, the birds are chirping,\nand now it's time to play!</b>  <br/><br/>\\r\n\\r\nRobin has chosen a number\nbetween 10 and 30.  \\r\nUse the up and down arrows to make a guess about what\nit is.  \\r\nClick Robin to submit your guess.\\r\n\\r\n- Robin will move up\nwhen your guess is too high\\r\n- Robin will move down when your guess is too\nlow\\r\n- Where do you change how far Robin moves each time?\\r\n- Where would\nyou change the range of numbers to choose from?\\r\n- Can you change the code\nso that Robin chooses a number between 1 & 20?\\r\n\\r\n<br/>\\r\n<b>When you're\nready, press \"Run\" and play until you guess Robin's number!</b>"
      maker workshop final_markdown_instruction: "# Challenge: Explore!\\r\n\\r\nNow\nthat you've tested the waters a bit, go explore the full extent of this tool.\nOn this level you'll see lots of new blocks and even some completely new\nareas of functionality (like a database backend!). Feel free to go back to\nprevious levels for inspiration, or go off and building something completely\nyour own."
      mike3bit_markdown_instruction: "# 3-Bit Color\\r\n**Directions:**\\r\n\\r\n* We\nstart you with the 4x2 image Maddie was creating, but we've left out the\nlast few pixels. \\r\n* Finish off the image by figuring out which colors are\nmissing and encoding them.\\r\n"
      mike3bitbird_markdown_instruction: "# 3-Bit Color\\r\nHere's an example of\nan image made with 3-bit color. Try changing it to understand how it works.\n\\r\n\\r\n*If you want to reset the image, press \"Start Over\".*\\r\n"
      mike3bitfreeplay_markdown_instruction: "# 3-Bit Color\\r\n\\r\nYou have one last\nchance to experiment and get creative with the pixelation widget. Make something\nawesome and share it with your classmates!\\r\n\\r\n* *Hint:* You can copy and\npaste the value of a pixel to use it repeatedly."
      mike3bitmario_markdown_instruction: "# 3-Bit Color\\r\n \\r\n**Challenge:** \\r\n\\r\nA\ncareless binary coder typed in ONE extra 0 or 1 somewhere within this image's\ndata. The extra bit that is causing Mario to glitch out! \\r\n\\r\nDelete the\nextra bit to restore Mario back to normal!\\r\n\\r\n![](https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57\nAM.png)"
      multi-lesson Teaching and Student Support Plan_markdown_instruction: "<br><br>\\r\n>\n**NOTE: before you start this task, make sure you’ve reviewed the lesson resources\nin this module, and have a good sense of how the lesson works. If you haven’t\nalready reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nTeaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow that\nyou have a better sense of this lessons in this sequence, let’s think about\nthe types of supports students will need in order to be successful. Since\nthe curriculum is based on inquiry learning, lessons feature activities that\nengage students in discovering core concepts themselves. It’s important to\nthink through implementation plans and student support. In this task you will\nmake a plan for teaching and student support **for one of the lessons in this\nsequence** that takes into account differentiation strategies and make-up\nwork for absent students. Your teaching and student support plan should cover\nthe following: \\r\n\\r\n\\r\n- **Which lesson in the sequence are you discussing?**\n\\r\n\\r\n- **Details on how you will implement and differentiate the lesson:**\\r\n\\r\n\n- An outline of any changes you will need to make to the lesson to fit your\nlocal constraints or context (for example: pacing and time, dealing with classroom\nsetup, etc). \\r\n - An overview of the types of student needs you’ll likely\nneed to support in your classroom (for example: students who are struggling\nto understand the underlying concept; students who are already familiar with\nthe concept, but still have room to learn more; etc)\\r\n - Your plan for addressing\neach of the needs outlined above (for example: integrating extension activities\nor other materials for students who already know something about the topic)\\r\n\n- How will you address or emphasize the connection between lessons in this\nsequence? \\r\n\\r\n<br>\\r\n- **Plan for catching up absent students:**\\r\n\\r\n\n- How will absent students catch up on activities they missed? \\r\n - How\nwill you use the fact that the lessons in this sequence are related and build\non one another to address make-up work? \\r\n\\r\nYou can type out your teaching\nand student support plan in the box below, or you can upload a word doc or\npdf file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour response to the prompt above will be shared anonymously and reviewed\nby your peers, and you will review the work done by other teachers. Reviewers\nwill be looking for thoughtful and thorough answers that demonstrate that\nyou have spent time considering how the lesson will play out in your own classroom.\nReviewers will have an opportunity to give feedback on your submission, and\nyou can respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor completing this task, two reviewers need to agree that you have responded\nto the prompts fully. If reviewers don’t feel comfortable making a decision\nabout your task submission, they can elevate to a facilitator to review. You\nwill always have a chance to address feedback from your reviewers and resubmit\nyour task! Reviewer feedback will show up at the bottom of this page, once\nit’s available. \\r\n\\r\n<br><br>"
      name 'CSD U3 Keypress Boolean Predict'_markdown_instruction: "# Make a Prediction:\nkeyDown()\\r\nThe `keyDown()` block is the first of a new set of blocks that\nwill let us get input from the user. This is the first step on our road to\nactually making games! See if you can figure out how the `keyDown()` block\nworks.\\r\n\\r\nWhat do you think will happen when you run the program and press\nthe \"up\" arrow? Write your prediction below and then run the program to\nsee if your prediction was accurate."
      playEventsK1_markdown_instruction: "This game is called \"Play Lab\".\\r\n\\r\nSee\nif you can figure out what each block does."
      playEventsK2_markdown_instruction: "Jorge wants to say \"Hi there.\"\\r\n\\r\nCan\nyou help?\\r\n\\r\n![](https://images.code.org/f32d285fa6f45e1f8d042c04c55f32c8-image-1467988839292.gif)"
      playEventsK3_markdown_instruction: "Jorge wants to be scratched behind the\nears!\\r\n\\r\nCan you make it so that when you click Jorge he is happy?\\r\n\\r\n![](https://images.code.org/04fb37990455b215e0f20884363092d0-image-1467988943134.gif)"
      playEventsK4_markdown_instruction: "Can you make it so that Jorge the dog chases\nRobin the bird when you click the up arrow?\\r\n\\r\n![](https://images.code.org/2fbf6c793bb77a961fa7a52f27e4c59d-image-1467989013878.gif)"
      playEventsK5_markdown_instruction: "Now add code so that Robin flies away when\nyou click the forward arrow.\\r\n\\r\n![](https://images.code.org/a7e224c5f13e39e5342011f8a76d3b6b-image-1467989101328.gif)"
      playEventsK6_markdown_instruction: "Have Robin talk back to Jorge when you\nclick on her.\\r\n\\r\n![](https://images.code.org/fc80b1febbb7a472026b6bf2c535b2f4-image-1467989171517.gif)"
      playEventsK7_markdown_instruction: "What else can you do in this fun scene?\\r\n<br/>\\r\n\\r\n<h5>\\r\n<details>\\r\n<summary><b>Need\nsome ideas?</b></summary>\\r\n\\t<br/>\\r\n\\t<h5>\\r\n\\t\\t<ul>\\r\n        \\t<li><strong>Conversation</strong>\n- Have the sprites talk to eachother when you click on them.</li>\\r\n            <li><strong>Pinball</strong>\n- Make one sprite play a noise when the other runs into it.</li>\\r\n            <li><strong>Arrows</strong>\n- Write a program so when each arrow key is pressed, the sprite moves in that\ndirection!</li>\\r\n        </ul>\\r\n\\t</h5>\\r\n</details>\\r\n</h5>"
      post-assessment survey q32_markdown_instruction: "(Optional): Please explain\nwhy you would/would not recommend this computer science course to another\nstudent."
      post-assessment survey q37_markdown_instruction: "(Optional) If you did not\ntake the AP exam, what, if anything, would have made the difference for you\nto take it?"
      pre-assessment survey q24A_markdown_instruction: "What computer science skills\ndo you use in your everyday life? "
      pre-assessment survey q25A_markdown_instruction: "If yes, what computer science\ncourse(s) had you taken before your current computer science  class? "
      ramp_artist_loops1_markdown_instruction: "What a lovely day!  \\r\n\\r\nHelp\nthe Artist cover his flowers before the winter by moving forward by 60 pixels."
      ramp_artist_loops1_2018_markdown_instruction: "What a lovely day!  \\r\n\\r\nHelp\nthe Artist cover his flowers before the winter by moving forward by 60 pixels."
      ramp_artist_loops2_markdown_instruction: "Add some beauty by repeating that\nstep five times, changing to a random color between each move."
      ramp_artist_loops2_2018_markdown_instruction: "Add some beauty by repeating\nthat step five times, changing to a random color between each move."
      ramp_artist_loops3_markdown_instruction: "Draw the colorful line 5 times again,\nthis time using a `repeat` loop."
      ramp_artist_loops3_2018_markdown_instruction: "Draw the colorful line 5 times\nagain, this time using a `repeat` loop."
      ramp_artist_loops4_markdown_instruction: "What happens when you add a 72 degree\nright turn after everything else inside your loop?"
      ramp_artist_loops4_2018_markdown_instruction: "What happens when you add a\n72 degree right turn after everything else inside your loop?"
      ramp_artist_loops5_markdown_instruction: "Loops sure make writing code easier!\\r\n\\r\nUse\nloops to draw this staircase.\\r\n- Each stairstep is 50 pixels long and 50\npixels tall\\r\n- You will need to turn 90 degrees in each direction"
      ramp_artist_loops5_2018_markdown_instruction: "Loops sure make writing code\neasier!\\r\n\\r\nUse loops to draw this staircase.\\r\n- Each stairstep is 50\npixels long and 50 pixels tall\\r\n- You will need to turn 90 degrees in each\ndirection"
      ramp_artist_loops6_markdown_instruction: "This staircase is much bigger, but\nit takes the same amount of code as the last puzzle!\\r\n\\r\nFix this loop\nto complete the puzzle."
      ramp_artist_loops6_2018_markdown_instruction: "This staircase is much bigger,\nbut it takes the same amount of code as the last puzzle!\\r\n\\r\nFix this loop\nto complete the puzzle."
      ramp_artist_loops7_markdown_instruction: "Look for a pattern and make this\ncode shorter using loops!"
      ramp_artist_loops7_2018_markdown_instruction: "Look for a pattern and make\nthis code shorter using loops!"
      ramp_artist_loops8_markdown_instruction: "**Challenge:** Look for a pattern\nand make this code shorter using loops."
      ramp_artist_loops8_2018_markdown_instruction: "**Challenge:** Look for a pattern\nand make this code shorter using loops."
      ramp_artist_loops8_clone_markdown_instruction: "**Challenge:** Look for a pattern\nand make this code shorter using loops."
      ramp_artist_loops9_markdown_instruction: "Solve this puzzle by drawing a square\nwith 200 pixel sides."
      ramp_artist_loops9_2018_markdown_instruction: "Solve this puzzle by drawing\na square with 200 pixel sides."
      sample1_markdown_instruction: "Our adventurer wants to collect coins.  But\nshe can only use 4 blocks to get them.  \\r\n\\r\nCan you help her grab as many\nas she can using just 4 blocks?"
      sample10a_markdown_instruction: "<h4>You have helped the adventurer and her\nbee!  \\r\nAs a reward, please stay and play around in my magical village.  \\r\n<br/>\\r\n\\r\nYou\nshould have everything you need to create a game of your own.</h4>"
      sample4_markdown_instruction: "Our adventurer has found a stash of coins in\nthis cave.\\r\n\\r\nCan you help her grab as many as she can using just 7 blocks?"
      sample6_markdown_instruction: "**Challenge:** Help bee get all of the nectar.\\r\n\\r\nThis\npuzzle is meant to be hard.  You may need to try lots of times."
      sample8_markdown_instruction: "Look at this trove of coins! \\r\n\\r\nHow many\ncan you get the adventurer to grab?"
      subgoal U3 L4 introducing subgoal labels_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      subgoal U3L2 Using Simple Commands_markdown_instruction: "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\"\nalign=right>\\r\n\\r\nGiven only 4 turtle commands, write code in App Lab to\ncomplete the drawings in each of the challenges below.  Your goal is to write\ncode that solves the problem as efficiently as possible using only the commands\nprovided.\\r\n\\r\nWhat does “efficient” mean?  In computer science it can actually\nmean several different things depending on what you’re talking about.  Work\non these challenges, try to solve them in a way that you think is best and\nwe’ll ask about efficiency at the end.\\r\n\\r\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\nalign=right>\\r\n# Do This: \\r\nDraw a 1 x 1 square to the front and left of\nthe turtle as efficiently as possible. The program should stop with turtle\nin its original position, facing its original direction.\\r\n\\r\nOnce you think\nyou have a solution, click the Finish button - it will appear once you run\nthe program."
      subgoal-test-clone_markdown_instruction: "### use goal labels to structure\nyour solution.\\r\n\\r\nThe turtle should draw a square moving clockwise.\\r\n\\r\nDrag\nout \"move turtle\" subgoal label into the workspace."
      subgoal-test_markdown_instruction: "### use goal labels to structure your solution.\\r\n\\r\nThe\nturtle should draw a square moving clockwise.\\r\n\\r\nDrag out [\"move turtle\"\nsubgoal label](#triggercallout=trigger_move_subgoal) into the workspace."
      subgoalU3L2_TurtleSquare_right_markdown_instruction: "<img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\"\nalign=right> \\r\n# Do This:\\r\nThis time, draw a 1 x 1 square to the *front\nand right* of the turtle as efficiently as possible.  Notice that there is\nno command to turn right! You need to figure out how to draw this by only\nturning left and moving forward.  The program should stop with turtle in its\noriginal position, facing its original direction.\\r\n\\r\nWhen you're done\nclick the Finish button to move onto the next problem.\\r\n"
      subgoals_U3_turtle_prediction_FR_markdown_instruction: "## Code Trace\\r\n\\r\nIn\n1-2 sentences, explain what you think the following code does.\\r\n\\r\n![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)"
      subgoals_u3_top_down_FR_markdown_instruction: "# Design a program\\r\n\\r\nDescribe,\nusing a top-down approach, how you would create a program to draw a white\nsnowflake on a blue background that uses random numbers, so the snowflake\nwill be unique every time you run the code. \\r\n\\r\nYou don’t need to write\nthe exact code or blocks that you would use, but you should describe what\nfunctions you would need to create, where you would or would not use loops,\nand where you would or would not use random numbers."
      test externallink_markdown_instruction: "# Creative Commons\\r\n\\r\nHead to\nthe Creative Commons website to learn more about CC licensing models."
      test peer review_markdown_instruction: "At this point you've seen 7 of the\n14 lessons from unit 1. Thinking about those lessons, and looking across the\nother lessons in <a href=\"curriculum.code.org/csp/unit1/\" target=_blank>unit\n1</a> work with your partner to develop a set of recommendations for using\ngroup work and peer learning in Unit 1. Your recommendations should include:\\r\n\\r\n-\nWhich lessons or activities provide opportunities for group work and peer\nlearning? \\r\n- What recommendations do you have for using group work and\npeer learning in Unit 1 lessons?  \\r\n\\r\nUse the space below to record any\nrecommendations or commentary you have for others. Once you  submit, another\nparticipant will review chance to send you feedback! \\r\n\\r\n"
      test_anonymous_student_survey_next_class_markdown_instruction: "What you will\ndo next after this class?"
      test_anonymous_student_survey_why_class_markdown_instruction: "Why are you\ndoing this class?  Give at least two reasons."
      test_sarah_markdown_instruction: "hi"
      test_sarah_freeresponse_markdown_instruction: "This is the question at hand...."
      testing code callout_markdown_instruction: "# Click the link!\\r\n[Show me where\nthe sprite moves](#triggercallout=code_triggered)\\r\n"
      the Journal of Peer Learning_markdown_instruction: "The following link is to\na journal out of Australia that focuses on publishing scholarly research that\ninvestigates innovations in peer learning and the implementation and evaluations\nof peer learning programs:"
      u3-old-drawing-view_markdown_instruction: "# Your Own Drawing\\r\n\\r\nIt is\nyour turn to create your own drawing. You should have drawn out your plan\non paper first.\\r\n\\r\n# Do This\\r\nAs a reminder make sure you hit the objectives:\\r\n\\r\n*\nCreates an identifiable and named object or design (i.e. no random splatters\nof shapes)\\r\n* Uses at least 10 shapes or text items (rect, ellipse, regularPolygon,\ntext)\\r\n* Uses at least 4 different color fills\\r\n* Uses at least 2 different\ncolor outlines\\r\n* Contains at least 3 different logical blocks of code with\ncomments\\r\n"
      valentine_artist_03_markdown_instruction: "Now make a valentine to share with\nsomeone special!  It can be anything that you want."
