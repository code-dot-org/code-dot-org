lt:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Sveiki, aš esu menininkas. Tau parašius kodą, aš galiu nupiešti beveik viską. Panaudok keletą blokų, kad aš pieščiau per pilkas linijas paveikslėlyje. (Kiekviena linija yra 100 pikselių ilgio)
      2-3 Artist 11_instruction: 'Padaryk STOP ženklui sieneles, nupiešdamas aštuonkampį, kurio kiekviena kraštinė būtų 100 pikselių ilgio. Kiek laipsnių turėtum jas pasukti? (Užuomina: padalink 360 iš 8) '
      2-3 Artist 12_instruction: Pasirink kartojimo blokelį, kad sukurtum apskritimą, kuris užbaigtų akies obuolį. Jei kiekvienu judesiu pasisuksi dešinėn po vieną laipsnį, kiek judesių prireiks pakartoti, kad užbaigtum apskritimą? 180? 360? 500?
      2-3 Artist 2 new_instruction: 'Šis namas turi nepabaigtą sieną. Abi pusės yra 100, bet nepabaigta yra tik 50. Užbaik sieną. '
      2-3 Artist 2_instruction: |
        This house has a half-finished wall. Each side is
        100, but the half-finished wall is only 50. Complete the wall. 
      2-3 Artist 3.4_instruction: Naudodamas naują peršokimo blokelį, gali padaryti taip, kad menininkas judėtų nepiešdamas. Nubrėžk punktyrinę liniją naudodamas peršokimo ir piešimo mygtukus.
      2-3 Artist 3_instruction: Ši skrybėlė yra 100 pikselių aukščio. Nupiešk kepurę, kuri būtų 70 pikselių mažesnė.
      2-3 Artist 3new_instruction: Raudona skrybėlė yra 100 pikselių aukščio. Baik piešti juodą skrybėlę, kuri yra 70 pikselių mažesnė. Juodos skrybėlės plotis yra 50 pikselių.
      2-3 Artist 4_instruction: Padėk man užbaigti namą šiai katei.
      2-3 Artist 5_instruction: |
        Pakeisk šį kodą su "kartoti kartų" bloku,
        kad nupieštum tą patį namą naudodamas tik 3 blokus.
      2-3 Artist 6_instruction: 'Šiam namui trūksta stogo! Nupiešk trikampį. Sufleris: visos trys kraštinės yra tokio pat ilgio.'
      2-3 Artist 7_instruction: |
        Pabaik piešti paskutinio lango dešinės pusės pusę.
        Kiekvienas kvadratinis lango dydis yra 25 pikseliai. 
      2-3 Artist 8_instruction: |
        Užbaik kambarius kiekvienam gyvūnui padalindamas
        stačiakampį į 2 vienodo dydžio kvadratus. Stačiakampis yra 200 pikselių pločio
        ir 100 pikselių aukščio.
      2-3 Artist 9_instruction: Užbaik šį aitvarą
      2-3 Artist Assessment 1_instruction: 'Įvertink duotą situaciją: užbaik piešti dantį, kurio plotis ir aukštis yra po 25 pikselius.'
      2-3 Artist Debugging 1_instruction: Ar gali padaryti šią kepurę 100 pikselių ilgio?
      2-3 Artist Debugging 10_instruction: |
        Pliuso mygtukai yra per siauri.
        Patarimas: Padaryk ji platesnį 10 pikselių
      2-3 Artist Debugging 11_instruction: |
        Padėk man pabaigti šią gražią snaigę.
        Kiek kartų turiu aš "kartoti", kad ją pabaigčiau?
      2-3 Artist Debugging 12_instruction: |
        Aš turėčiau įtraukti jūros bangą
        šiai scenai. Ar gali man padėti?
      2-3 Artist Debugging 2_instruction: |
        Kodas trims ūsams, kurį
        dabar matai yra blogas. Patarimas: kiekvienas ūsas yra 75 pikselių ilgumo.
        Pataisyk šį kodą, kad nupieštum ūsus.
      2-3 Artist Debugging 3_instruction: |
        Mano valtyje yra skylė! Ar galėtum ją sutaisyti
        pakeisdamas linijos kryptį? Patarimas: paskutinis kampas buvo 15 laipsnių.
      2-3 Artist Debugging 4_instruction: |
        Koks yra vaizdas, kurį mes bandom
        nupiešti? Pabaik tai sujungdamas taškus naudodamas tam tikras linijas ir kampus.
      2-3 Artist Debugging 5_instruction: |
        Kodas kojai ir pėdai, kurią tu matai
        yra blogas. Patarimas: pėda yra per ilga, mums derėtų ištrinti žingsnį
      2-3 Artist Debugging 6_instruction: |
        Man atrodo, kad aš sėdžiu ant kėdės,
        kuriai trūksta kojos. Pakeisk blokus, kad nupieštum koją.
      2-3 Artist Debugging 7_instruction: |
        Atrodo, kad šiame kode C raidė yra nupiešta priešingai.
        Ar gali ją pakeisti, kad ji būtų panaši į C?
      2-3 Artist Debugging 8_instruction: |
        Mano suktukas nėra pabaigtas. Kiek kartų
        aš turiu kartoti, kad jį pabaigčiau?
      2-3 Artist Debugging 9_instruction: |
        Kodas šiam kotui yra neteisingas.
        Patarimas: Kampas yra 60 laipsnių
      2-3 Artist Debugging Assessment 1_instruction: |
        Ši forma yra per maža. Ar
        gali ją padaryti didesnę? Patarimas: ant kiekvienos pusės ji turėtų būti
        75 pikseliais ilgesnė.
      2-3 Artist Free Play_instruction: O dabar gali nupiešti ką tik nori.
      2-3 Artist Functions 1_instruction: |
        Labas. Aš zombis menininkas. Aš mėgstu piešti!
        Padėk man nupiešti kvadratinius akinius. Sufleris: atstumas tarp stiklų yra 25 pikseliais trumpesnis nei kvadrato kraštinės ilgis.
      2-3 Artist Functions 10_instruction: Štai dvi komandos – viena piešia didelį dantratį, o kita – mažą. Panaudok jas savo piešiniui. Gali pamėginti jas perprasti!
      2-3 Artist Functions 11.5_instruction: Štai tau ta pati komanda „nubrėžk šešiakampį“. Kas nutiks, jei kiekvieną kartą pasisuksi po 60 laipsnių, nubrėžęs kiekvieną šešiakampį?
      2-3 Artist Functions 11_instruction: Aš pervadinau komandą „nubrėžk kvadratą“ į „nubrėžk šešiakampį“, bet ji vis vien piešia kvadratus! Ar gali pataisyti komandą „nubrėžk šešiakampį“, kad ji nubrėžtų šešiakampį, kurio kraštinės yra po 50 pikselių? Panaudok savo pataisytą komandą ir nupiešk pavaizduotą piešinį.
      2-3 Artist Functions 12_instruction: 'Sudėtinės komandos labai praverčia, jei norime nupiešti daug sudėtingų objektų. Panaudok komandą „nupiešk gėlę“ ir užbaik piešinį. (Sufleris: tarp kiekvienos gėlės yra 100 pikselių atstumai)  '
      2-3 Artist Functions 13_instruction: |
        Tau duotos keturios sudėtinės komandos.
        Panaudok jas kaip tik nori ir gauk piešinius,
        kuriuos galėsi parodyti savo draugams. Paspausk „Paleisti“, kad pamatytum pavyzdį.
      2-3 Artist Functions 2_instruction: Sudėtinės komandos (arba funkcijos) leidžia susikurti naujus blokelius pačiam! Aš sukūriau komandą ir pavadinau ją „nubrėžk kvadratą“. Ar gali nupiešti tuos pačius akinius naudodamas tą naują komandą? Tarp kvadratų yra 75 pikselių atstumas.
      2-3 Artist Functions 3_instruction: Pataisyk komandą, kad piešiamo kvadrato kraštinės ilgis būtų 115 ir nupiešk didesnius akinius. Atstumas tarp stiklų dabar yra 45 pikseliai.
      2-3 Artist Functions 4_instruction: Panaudok kartojimo blokelį ir nupiešk tris kvadratus.
      2-3 Artist Functions 7_instruction: 'Panaudok komandą „namas“, kad nupieštum du namus su dviem skirtingais parametrais. (Sufleris: pirmojo namo dydis yra 100 pikselių).'
      2-3 Artist Functions 9_instruction: Štai nauja komanda „nupiešk snaigę“. Paeksperimentuok su ja ir nupiešk gražų žieminį paveikslą. Čia ne galvosūkis, o kūrybinė užduotis. Pasismagink!
      2-3 Artist Loops 1_instruction: |
        Can you make a hexagon with sides that are
        100 pixels long to finish the cell? Remember, that means that you will only
        need to turn 60 degrees!
      2-3 Artist Loops 10_instruction: |
        What happens to the design when we make our
        final step forward half as long?
      2-3 Artist Loops 11_instruction: |
        Now let's put *another* loop around our
        whole creation!  Don't forget to add an angle at the end of the outer loop.
      2-3 Artist Loops 2_instruction: |
        Now use a repeat block to make the cell a
        shell.
      2-3 Artist Loops 4_instruction: |
        Want to see what happens when we repeat that
        shape over and over again using a loop?
      2-3 Artist Loops 5_instruction: |
        Now let's make a small change to the loop
        and see how different our picture becomes.
      2-3 Artist Loops 6_instruction: |
        Add one more move and another turn inside
        the loop and see how your design changes.
      2-3 Artist Loops 7_instruction: |
        We can use loops to make all kinds of polygons.  Can
        you create a rhombus inside this hexagon?
      2-3 Artist Loops 8_instruction: "Let's put both elements inside a loop."
      2-3 Artist Loops 9_instruction: "We're going to loop the same elements, but\nnow we're going to add some distance between them.\\r\nUse the same code as\nbefore, but add a step forward at the end of the outer loop."
      2-3 Artist Loops New 1_instruction: |
        Let's draw this robot's head! Can you
        make a square with sides that are 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Now let's connect a bunch of V's together
        in a loop.
      2-3 Artist Loops New 11_instruction: |
        Rebuild the code from the last puzzle,
        but this time, add a left turn of 30 degrees inside the loop. Now, repeat
        it 24 times instead of 7.
      2-3 Artist Loops New 12_instruction: |
        Draw a diamond with sides of 100 pixels.
        
      2-3 Artist Loops New 13_instruction: "We are going to start you with some code\n(in grey) to make one diamond. \\r\n\\r\nLoop the grey code to create a fun\npattern!"
      2-3 Artist Loops New 14_instruction: |
        Play around with the code for the diamond
        and see what other patterns you can make. Try changing how many degrees you
        turn and how many times you loop.
      2-3 Artist Loops New 15_instruction: Nupiešk ką nors smagaus.
      2-3 Artist Loops New 2_instruction: |
        Here is the same puzzle that we just solved,
        but this time, we have to use loops to pass it.  Can you put a `repeat` around
        the starter code to finish the robot head?
      2-3 Artist Loops New 9_instruction: |
        Draw a simple V (where both sides are
        50 pixels) to complete the arrow.
      2-3 Artist Match Hex Pic_instruction: 'Match:  Help finish the Hexagon.'
      2-3 Artist Match Rho Pic_instruction: 'Match:  Finish the missing code.'
      2-3 Artist Match Sq Pic_instruction: 'Match: Complete the missing code'
      2-3 Artist Match Tri pic_instruction: 'Matching:  Fill in the missing code.'
      2-3 Artist Nested Loops 1_instruction: |
        Put a `repeat` block around this whole
        stack of code to draw the pattern.
      2-3 Artist Nested Loops 10_instruction: |
        Loop this code 12 times to complete
        the pattern.
      2-3 Artist Nested Loops 11_instruction: |
        Loop this code 4 times to complete
        the pattern, turn 90 degrees after each circle.
      2-3 Artist Nested Loops 12_instruction: |
        Loop this code 12 times to complete
        the curls.
      2-3 Artist Nested Loops 2_instruction: "Now loop the triangle 6 times. \\r\n\\r\nAfter\neach triangle, you'll need to turn 60 degrees before drawing the next."
      2-3 Artist Nested Loops 3_instruction: "You'll need to loop the triangle 12\ntimes to draw this pattern. \\r\n\\r\nDivide the number of degrees in a circle\n(360) by the number of shapes you're drawing (12) to figure out how far to\nturn after each shape."
      2-3 Artist Nested Loops 4_instruction: "Loop this diamond 12 times to draw\na flower!\\r\n\\r\nNote: We'll use the same angle to loop 12 diamonds as we\ndid for 12 triangles.  \\r\nHow much do you need to turn after each shape?"
      2-3 Artist Nested Loops 5_instruction: "Fill in this building's windows using\na nested loop. \\r\n\\r\nThe windows are 20 pixels long and 20 pixels apart."
      2-3 Artist Nested Loops 6_instruction: "This dinosaur has 8 spikes running\nup its tail.\\r\nEach spike is 30 pixels long. Loop the triangle 8 times, but\nmake sure to jump forward after each one!"
      2-3 Artist Nested Loops 7_instruction: "Loop this triangle 10 times to draw\nthe sun. \\r\n\\r\nYou'll need to move and turn after each triangle. \\r\n\\r\nYou\ncan figure out how much to turn by dividing the number of degrees in a circle\nby the number of triangles that make it up."
      2-3 Artist Nested Loops 8_instruction: "Now let's add some grass to our picture.\n\\r\n\\r\nEach tuft of grass is 50 pixels apart."
      2-3 Artist Nested Loops 9_instruction: "We'll finish this picture by adding\nour flower. \\r\n\\r\nLoop the diamond 12 times to draw the flower."
      2-3 Artist Nested Loops Free Play_instruction: Nupiešk ką nors įdomaus, naudodamas kartojimą kartojime.
      2-3 Bee Conditionals 1_instruction: Labas! Aš esu bitė. Padėk man surinkti nektarą iš gėlės.
      2-3 Bee Conditionals 10_instruction: "Purple flowers may have either 1 or 0\nnectar. Be careful not to collect nectar from a purple flower if it doesn't\nhave any.\\r\n"
      2-3 Bee Conditionals 11_instruction: Rinkti nektarą, kur gėlės turi nektaro.
      2-3 Bee Conditionals 12_instruction: |
        Help me find all of the nectar using
        as few blocks as possible!
      2-3 Bee Conditionals 13_instruction: "There's a lot happening here!\\r\n\\r\nUse\nwhat you've learned to collect all of the nectar and then make the honey."
      2-3 Bee Conditionals 14_instruction: "Let's put everything together!\\r\n\\r\nUse\nwhat you've learned to help me collect nectar only from flowers that have\nit, using as few blocks as possible.  Don't forget to make honey at the end."
      2-3 Bee Conditionals 15_instruction: Surink nektarą iš visų keturių gėlių.
      2-3 Bee Conditionals 2_instruction: "I'm a hungry bee! \\r\nHelp me collect\nall of the nectar from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3_instruction: "Look at all of that nectar!\\r\n\\r\nHelp\nme collect the nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 4_instruction: |
        Help me collect all of the nectar from
        the flowers and make all the honey.
      2-3 Bee Conditionals 5_instruction: "Be careful not to collect nectar from\na purple flower if it doesn't have any. \\r\nYou must first check if the nectar\nis equal to 1 using the `if nectar` block."
      2-3 Bee Conditionals 6_instruction: |
        Check this flower with an "if" block
        to see if there is any nectar available.
      2-3 Bee Conditionals 7_instruction: |
        Collect nectar from each flower only if
        it has any.
      2-3 Bee Conditionals 8_instruction: |
        This field has red and purple flowers.
        Red flowers have a known nectar amount, but purple flower nectar is unknown.
        Collect all the nectar.
      2-3 Bee Conditionals 9_instruction: Surink visą nektarą iš kiekvienos gėlės.
      2-3 Bee Conditionals Assessment 1_instruction: 'Iššūkis: surink visą nektarą. Atsargiai, neimk nektaro iš violetinių gėlių, jei nektaro jos neturi.'
      2-3 Bee Debugging 1_instruction: |
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar.
      2-3 Bee Debugging 10_instruction: "This puzzle is making me loopy! \\r\nFix\nthe error(s) to collect all of the nectar and make all of the honey."
      2-3 Bee Debugging 2_instruction: "Can you find the problem here?\\r\nFix the\nerror(s) to collect all of the nectar."
      2-3 Bee Debugging 3_instruction: "Ooh, this one stings!\\r\n\\r\nFix the error(s)\nto collect all of the nectar."
      2-3 Bee Debugging 4_instruction: |
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar and make all of the honey.
      2-3 Bee Debugging 5_instruction: "That flower looks tasty! \\r\n\\r\nFix the\nerror(s) to collect all of the nectar.  You can now use both run and step."
      2-3 Bee Debugging 6_instruction: "What a sweet challenge!\\r\n\\r\nFix the error(s)\nto collect all of the nectar."
      2-3 Bee Debugging 7_instruction: |
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      2-3 Bee Debugging 8_instruction: "So many beautiful flowers!\\r\n\\r\nFix the\nerror(s) to collect all of the nectar."
      2-3 Bee Debugging 9_instruction: "\"Bee\" patient with this one!\\r\n\\r\nYou\nwill need to fix a couple of things in this program to collect all of the\nnectar and make all of the honey."
      2-3 Bee Debugging Assessment 1_instruction: "Assessment:  Now it's time to\nshow what you know!\\r\n\\r\nFix the error(s) to collect all of the nectar and\nmake all of the honey."
      2-3 Bee Functions 1_instruction: 'Funkcijos yra kodo blokeliai kurie vykdo užduotį. Panaudok "paimk 2 nektarus" funkciją ir surink nektarą iš kiekvienos gėlės.'
      2-3 Bee Functions 10_instruction: "Purple flowers change between either 1 or\n0 nectar each time you run the puzzle.   \\r\n\\r\nCreate a function that collects\nnectar only from purple flowers that have nectar."
      2-3 Bee Functions 2_instruction: "Functions are blocks of code that perform\na task.  \\r\n\\r\nUse the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 3_instruction: Surink visą nektarą iš kiekvienos gėlės.
      2-3 Bee Functions 4_instruction: "The `move and get nectar` function turns\nthe bee, collects nectar, and then returns the bee to where it started.  \\r\n\\r\nUse\nthe function to collect all of the nectar."
      2-3 Bee Functions 5_instruction: |
        There is now more nectar at the flowers.
        Edit the given function so that it collects 4 nectars and use it to collect
        all of the nectar from the flowers.
      2-3 Bee Functions 6_instruction: |
        Now use the same function to collect nectar
        from the three flowers.
      2-3 Bee Functions 7_instruction: |
        The flowers are now further away. Edit the
        given function and use it to collect all of the nectar from the flowers.
      2-3 Bee Functions 8_instruction: |
        Create your own function that gets 7 nectar,
        moves forward, and makes 7 honey. Use the function to collect nectar at each
        flower and make honey at each honeycomb.
      2-3 Bee Functions 9_instruction: |
        Create your own function that goes down a
        path, gets nectar, makes honey, and then returns the bee to the top of the
        path.
      2-3 Bee Functions Assessment 1_instruction: |
        Assessment: Use the given function
        to collect nectar from each flower.
      2-3 Bee Functions Assessment 2_instruction: |
        Assessment: Create a function
        to move forward and make 3 honey, then return the bee to where it started.
      2-3 Bee Loops 1_instruction: "Those flowers look tasty!\\r\n\\r\nCollect nectar\nfrom each of the flowers using the fewest blocks possible."
      2-3 Bee Loops 10_instruction: |
        Can you use a while loop inside of two other
        loops to collect all of the nectar?
      2-3 Bee Loops 11_instruction: |
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 12_instruction: |
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 13_instruction: 'Iššūkis: panaudok kartojimo blokelį ir surink visą nektarą.'
      2-3 Bee Loops 1A_instruction: Labas, aš esu bitė. Ar padėsi man surinkti nektarą iš šių gėlių?
      2-3 Bee Loops 2_instruction: |
        Collect all the nectar and make all of the honey
        using the fewest blocks possible.
      2-3 Bee Loops 2A_instruction: This time, use a loop to gather all of the nectar.
      2-3 Bee Loops 3_instruction: |
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      2-3 Bee Loops 3A_instruction: Use a `repeat` loop to collect all of the nectar.
      2-3 Bee Loops 3B_instruction: |
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      2-3 Bee Loops 4_instruction: "Such a busy bee!\\r\n\\r\nHelp bee collect all\nof the nectar and make all of the honey with the fewest blocks possible."
      2-3 Bee Loops 4A_instruction: "How many times can loops help you in this puzzle?  \\r\n\\r\nLoops\nare your friend! Use a few of them to complete this puzzle with the fewest\nblocks possible."
      2-3 Bee Loops 5_instruction: "The shape of this path is different than the\nothers. \\r\n\\r\nCan you collect all of the nectar using as few blocks as possible?"
      2-3 Bee Loops 6_instruction: |
        Can you find the quickest way for the bee to
        collect all of the nectar and make all of the honey?
      2-3 Bee Loops 7_instruction: |
        What a beautiful field of flowers!   Help the
        bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      2-3 Bee Loops 8_instruction: "These purple flowers have different amount of\nnectar each time you run the puzzle. \\r\n\\r\nUse the `while nectar` loop to\ncollect all of the nectar. \\r\n\\r\nThis loop will run as long as the condition\nis true, in this case `nectar > 0`."
      2-3 Bee Loops 9_instruction: |
        The while loop can perform the same action as
        an if statement in a loop. Add a while loop to this code to perform the same
        task.
      2-3 Bee Loops Assessment 1_instruction: |
        Assessment: Use a `while` loop to
        collect all of the nectar from these flowers.
      2-3 Maze 1_instruction: |
        Can you help me catch the naughty pig? Stack a couple
        of `move forward` blocks below the `when run` block and press "Run". 
      2-3 Maze 10_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze 11_instruction: |
        Get me to the flower I'm hungry! How many times
        do you have to repeat a block?
      2-3 Maze 12 (copy 1)_instruction: |
        Can you replace the previous answer with
        only two blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze 12 (copy 2)_instruction: |
        Can you replace the previous answer with
        only two blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze 12 (old)_instruction: |
        Get me to the pig, now with the Repeat times
        block!
      2-3 Maze 12_instruction: |
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      2-3 Maze 13 (old)_instruction: |
        Get me to the pig, now with the Repeat until
        block!
      2-3 Maze 13_instruction: Get me to the pig by adding only one block
      2-3 Maze 14 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 14_instruction: |
        Get me to the sunflower! (Where is that "repeat
        times" block when I need it?)
      2-3 Maze 15 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 15_instruction: |
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      2-3 Maze 16 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 16 before_instruction: Nuvesk mane pas kiaulę.
      2-3 Maze 16_instruction: |
        Loops even work with more than one block inside!  Can
        you loop this sequence to get the zombie to the sunflower?
      2-3 Maze 2_instruction: This pig is ruffling my feathers. Help me get to him!
      2-3 Maze 3_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or feathers will fly!
      2-3 Maze 4_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze 5_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze 6_instruction: |
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze 7_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze 8_instruction: Nuvesk mane pas kiaulę!
      2-3 Maze 9_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze Loops 1_instruction: Ar gali nuvesti mane pas kiaulę naudodamas 5 blokelius?
      2-3 Maze Loops 17_instruction: Nuvesk mane prie saulėgrąžų!
      2-3 Maze Loops 18_instruction: "Get me to the sunflower using the fewest blocks\npossible!  \\r\n\\r\nTry using one `repeat` loop inside of another to cut down\non the amount of code you need."
      2-3 Maze Loops 19_instruction: Nuvesk mane prie saulėgrąžų!
      2-3 Maze Loops 20_instruction: Nuvesk mane prie saulėgrąžų!
      2-3 Maze Loops 21_instruction: Nuvesk mane prie saulėgrąžų!
      2-3 Maze Loops Assessment 1_instruction: 'Iššūkis: nuvesk mane pas saulėgrąžą naudodamas tik 5 blokelius! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Nuvesk mane pas kiaulę! Kokie blokeliai yra pasikartojantys?
      2-3 Maze sq10v2_instruction: Nuvesk mane pas kiaulę! Kokie blokeliai yra pasikartojantys?
      2-3 maze sq11_instruction: Nuvesk mane pas kiaulę! Kokie blokeliai yra pasikartojantys?
      2-3 maze sq12_instruction: |
        Can you replace the previous answer with a loop
        by using a "repeat times" block?
      2-3 maze sq13_instruction: |
        Dear person. Me zombie. Must... get... to sunflower.
        Create loop with "repeat until" block.
      2-3 maze sq14_instruction: Ar gali nuvesti prie saulėgrąžos naudpdamas tik 4 blokelius?
      2-3 maze sq15_instruction: Ar gali nuvesti iki saulėgrąžos naudodamas tik 5 blokelius?
      2-3 maze sq16_instruction: Puiku, šis bus panašus, tačiau šiek tiek kitoks. Ar gali įveikti naudodamas tik 5 blokelius?
      2-3 Maze sq2_instruction: |
        Trace the path and lead me to the silly pig.  Avoid
        the TNT or the feathers will fly!
      2-3 Maze sq3_instruction: Nuvesk mane pas tą žalią daiktą! (Saugokis TNT)
      2-3 Maze sq4_instruction: |
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze sq5_instruction: Nuvesk mane pas kiaulę! Kiek kartų tau reikės pakartoti veiksmą (bloką)?
      2-3 Maze sq6_instruction: |
        Can you replace the previous answer with only two
        blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze sq7_instruction: Get me to the green intruder using only three blocks.
      2-3 Maze sq8_instruction: |
        Get me to the pig! (Where is that "repeat times"
        block when I need it?)
      2-3 Maze sq9_instruction: Create loops to get to the pig using less blocks.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Help the bird catch the naughty pig by moving it forward
      4-5 Artist 1_instruction: 'Padėk man nupiešti dėžę. (Kiekvienos linijos ilgis yra 300 pikselių) '
      4-5 Artist 10_instruction: |
        Press "Run" to try the code. Then, repeat it
        enough times to complete the drawing. The colors will be different every time.
      4-5 Artist 11_instruction: Nupiešk šias žalias linijas. Kiekvienos jų ilgis yra 300 pikselių, o tarpai tarp jų yra po 15 pikselių.
      4-5 Artist 2_instruction: Ar gali panaudodamas kartojimo blokelį nubrėžti kvadratą?
      4-5 Artist 3.5_instruction: Pamėgink išsiaiškinti, ką daro duotas kodas, nuspaudus mygtuką „Paleisti“. Pakartok jį pakankamai kartų, kad užbaigtum piešinį. Spalvos turėtų būti vis kitokios.
      4-5 Artist 3_instruction: Šis gėlynas yra stačiakampio formos. Jo perimetras yra 600. Vienos kraštinės ilgis 200. Nupiešk šį stačiakampį.
      4-5 Artist 4_instruction: Kiek laipsnių turi vienas apskritimas? Pamėgink atspėti ir gauk apskritimą su daug skirtingų spalvų.
      4-5 Artist 5_instruction: Kokį kampą reikėtų įrašyti?
      4-5 Artist 6_instruction: Štai lygiakraštis trikampis. Kiekvienas jo kampas yra po 60 laipsnių, o kiekviena jo kraštinė po 200 pikselių. Užbaik piešinį.
      4-5 Artist 7_instruction: Šio stačiojo trikampio kampų dydžiai yra 30, 60 ir 90 laipsnių. Trūkstamos linijos ilgis yra dvigubai didesnis už 100 pikselių. Užbaik piešinį.
      4-5 Artist 8_instruction: Futbolo aikštės vidurio linija yra lygiagreti kraštinėms linijoms. Aikštės perimetras yra 800, o ilgis 240 pikselių. Koks jo plotis? Nupiešk trūkstamas linijas.
      4-5 Artist 9_instruction: Nupiešk likusią piešinio dalį, kad piešinys būtų simetriškas. Visi trikampiai yra lygiakraščiai, o jų kraštinės yra po 50 pikselių ilgio.
      4-5 Artist Assessment 1_instruction: 'Iššūkis: panaudodamas kartojimo komandą nubrėžk lygiakraštį trikampį. Kiekviena jo kraštinė lygi 300 pikselių.'
      4-5 Artist For Loops 1_instruction: |
        Put the numbers 1 through 10 into the
        width blocks and run the code.
      4-5 Artist For Loops 11_instruction: |
        Complete the "for" block so that it
        counts 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: |
        What happens if you reverse the "from"
        and "to" numbers? Complete the "for" block so that it counts 200, 180,
        160, 140, 120...0. 
      4-5 Artist For Loops 13_instruction: |
        This design got started without a "for"
        loop and is taking too many blocks!  Use a "for" block to complete the spiral.  Hint:
        the last line length is 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the triangular spiral. (Hint: the last line length is 300 pixels.)
      4-5 Artist For Loops 15_instruction: |
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the hexagonal spiral. (Hint: the last line length is 200 pixels.)
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: |
        How can we count from 1 to 50? Edit the
        "for" block.
      4-5 Artist For Loops 4_instruction: |
        Complete the "for" block so that it
        counts from 1 to 10 by 1.
      4-5 Artist For Loops 6_instruction: |
        Draw squares with sides of 50, 60, 70,
        80, and 90 pixels. You'll need to use the "draw a square" function five
        times.
      4-5 Artist For Loops 7_instruction: |
        Draw the same squares but use a "count
        with" block to change the sizes. Place the "counter" block in the "draw
        a square" function. Hint: It's in the Variables category.
      4-5 Artist For Loops 8_instruction: |
        Can you complete the program by placing
        the blocks inside a "for" block that counts from 10 to 200 by 10? You can
        find the "for" block in the Loops category.
      4-5 Artist For Loops 9_instruction: |
        These circles are size 5, 10, 15, 20,
        25, 30, and 35. Draw the circles using a "for" block.
      4-5 Artist Free Draw 1_instruction: |
        Free Draw!  Draw whatever you are inspired
        to create.
      4-5 Artist Functions 1_instruction: Use a repeat loop to draw this triangle.
      4-5 Artist Functions 10a_instruction: |
        Put this code into the 'draw a snowflake'
        function and replace the 50 with the parameter 'size'. The function is already
        called on to make a snowflake that is 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use the 'draw a snowflake' function
        to create different size flakes.  Hint: the first snowflake is 25 in length
        and each snowflake is twice the size of the one before.
      4-5 Artist Functions 11_instruction: |
        This "draw a hexagon" function uses
        the "draw a triangle" function. Complete the hexagon function. (Hint: A
        hexagon has 6 sides, each 100 pixels long)
      4-5 Artist Functions 12_instruction: |
        Complete the 'draw waves' function.  Each
        wave is made up of one Upper wave and one Lower wave.   Hint: Draw 5 blue
        waves.
      4-5 Artist Functions 13 Free play_instruction: |
        Here are some functions to
        draw planets, stars, rockets, and robots. Use them any way you like to make
        pictures that you can share with your friends.
      4-5 Artist Functions 14 Free play_instruction: |
        Here, we've provided you with
        several functions.  Use them any way you like inside of one or more loops
        to make pictures that you can share with your friends. Click 'Run' to see
        an example.
      4-5 Artist Functions 15 Assessment_instruction: |
        Assessment:  Use the "draw
        a square" function to create the squares.  The squares are 50, 100, and 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Now put these blocks into a new function
        called "draw a small triangle" and call on it.
      4-5 Artist Functions 2b_instruction: |
        Now create a function called "draw a
        small triangle" using the provided blocks.
      4-5 Artist Functions 3_instruction: |
        Now create the functions "draw a medium
        triangle" and "draw a large triangle". The "draw a small triangle" function
        is done for you. The triangles have side lengths of 50 (small), 100 (medium),
        and 150 (large). 
      4-5 Artist Functions 4_instruction: |
        This new "draw a triangle" function
        has a parameter and can do the work of all three functions before. Draw the
        same triangles using this new function.
      4-5 Artist Functions 5_instruction: |
        Can you modify the "draw a triangle"
        function into a "draw a square" function to change the drawing?
      4-5 Artist Functions 6_instruction: |
        Use the "draw a square" and "draw a
        triangle functions" to draw a house. (Hint: The square's sides are 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use the draw a square and triangle functions
        along with other blocks to create a house by adding them to the 'draw a house"
        function and calling it.
      4-5 Artist Functions 7_instruction: |
        Use the "draw a house" function to draw
        houses that are 100 pixels and 50 pixels. The two houses are separated by
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        The "draw a flower" function has a parameter
        that allows you to set the stem height.  Set it to 200 and see what happens.
      4-5 Artist Functions 9_instruction: |
        Draw these 3 flowers. The first one's
        height is 100 and the next flower is always 50 pixels more than the height
        of the previous one. The flowers are also 100 pixels apart.
      4-5 Artist Patterns 1_instruction: "Draw this square using a loop.\\r\n\\r\nEach\nside is 20 pixels long."
      4-5 Artist Patterns 10_instruction: "This code draws two rows of hexagons -\nloop the whole thing 4 times to draw the whole honeycomb. \\r\n\\r\nYou'll\nneed to jump back 120 pixels in your outermost loop to make sure the artist\ndoesn't draw off the screen.\\r\n"
      4-5 Artist Patterns 11_instruction: |
        How many times do you need to loop this
        to draw a half circle? 
      4-5 Artist Patterns 12_instruction: "If you create another loop like this one,\nbut turn left instead of right, what happens? \\r\n\\r\nCan you repeat all of\nthat to draw this wave?"
      4-5 Artist Patterns 13_instruction: "Now let's loop that whole thing four\ntimes to create this picture frame. Watch out for the corners - you can't\njust turn 90 degrees! \\r\n\\r\nIf looping a 3 degree turn 60 times makes a\nhalf circle, which of these blocks of code will make an additional quarter\ncircle for the corners?"
      4-5 Artist Patterns 2_instruction: |
        If you place your square loop inside another
        loop, we call that a nested loop. What do you need to add as an outer loop
        to make sure all 15 squares line up next to each other?
      4-5 Artist Patterns 3_instruction: |
        Now let's go one level deeper! We've
        nested that whole block of code into another loop, but you need to get the
        artist back in place to draw the next line. Which of these code blocks can
        you place at the end of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4_instruction: |
        This diamond has 50 pixel sides and angles
        of 120 and 60 degrees. Use a loop to draw it.
      4-5 Artist Patterns 5.5_instruction: |
        How many times do you need to repeat
        this block to draw the full grid of diamonds?
      4-5 Artist Patterns 5_instruction: "Repeat this code to make a row of 6 diamonds.\n\\r\n\\r\nNotice that we changed our diamond code to repeat 3 times instead\nof 2 - why do you think that is?\\r\n"
      4-5 Artist Patterns 6_instruction: |
        How many times do you need to repeat this
        block to draw the full grid of diamonds?
      4-5 Artist Patterns 7_instruction: |
        Let's modify the code from the last puzzle
        to make this more complex pattern. Notice how the diamonds overlap now, try
        changing the first "jump backwards" from 100 to 50 (half as far) - now how
        far should the artist go in the second "jump backwards"?
      4-5 Artist Patterns 8_instruction: |
        Use a loop to draw this hexagon with 40
        pixel sides and 60 degree angles.
      4-5 Artist Patterns 9.5_instruction: |
        Let's loop this code to draw two rows
        of hexagons. Notice how our second row is shifted to the right.
      4-5 Artist Patterns 9_instruction: "Now repeat this code 3 times and draw the\nwhole row. \\r\n\\r\nEach hexagon is 80 pixels wide from the furthest points\nleft to right."
      4-5 Artist Patterns Free Play_instruction: Pamėgink sukurti savo ornamentą!
      4-5 Bee Conditionals - FC Test_instruction: |
        The bee only wants nectar right
        now. Not all objects are flowers, so check underneath EVERY CLOUD to see if
        it is hiding a flower. If it is, then you can gather nectar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "More clouds! \\r\n\\r\nCheck underneath\nevery cloud to see if it is hiding a flower before you get nectar.  \\r\n\\r\nRemember:\nNot all clouds hide the same thing!"
      4-5 Bee Conditionals 3_instruction: |
        Now I just want to make honey. Some of
        these clouds might have honeycombs under them. Be sure to check each cloud!
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |
        Sometimes this cloud covers a flower,
        and sometimes it covers a honeycomb! Use the if/else block to collect nectar
        if it is a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 5_instruction: "There will be either a flower or a honeycomb\nunder each of those clouds!\\r\n\\r\nUse the `if/else` block to collect nectar\nif there is a flower.\\r\nOtherwise, make honey (because there is a honeycomb)."
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: "I am not sure how much nectar this flower\nhas, but I know it has either 1, 2, or 3 nectar. \\r\n\\r\nCombine the conditional\nblocks (`if` and/or `if/else`) to only get as much nectar as the flower has.\n\\r\n\\r\nRemember, the amount of nectar can change each time you run the puzzle!"
      4-5 Bee Conditionals 7_instruction: "These flowers can have 3, 2, or 1 nectar.\n\\r\n\\r\nComplete the `check purple flower` function and use it to collect\nall of the nectar at the flowers."
      4-5 Bee Conditionals 8_instruction: "Write the function for `check flower make\nhoney`. \\r\n\\r\nYour function should check if the purple flower has 3, 2,\nor 1 nectar and get all of the nectar. \\r\nThen, move forward and make honey."
      4-5 Bee Conditionals Assessment 1_instruction: "**Assessment:** This cloud\nis either hiding a flower with one nectar or a honeycomb that needs one honey.  \\r\n\\r\nComplete\nthe `get nectar or make honey` function, then call it to collect the nectar\nor honey. \\r\n"
      4-5 Bee Debugging 1_instruction: "These blocks are really bugging me. \\r\n\\r\nCan\nyou fix them?"
      4-5 Bee Debugging 10_instruction: Find the errors and fix them.
      4-5 Bee Debugging 11_instruction: Does this count correctly?
      4-5 Bee Debugging 2_instruction: Help the bee get the nectar and make honey.
      4-5 Bee Debugging 3_instruction: Find the errors and fix them.
      4-5 Bee Debugging 4_instruction: "These blocks don't work. What's the pattern?"
      4-5 Bee Debugging 5_instruction: "Something isn't right here..."
      4-5 Bee Debugging 6_instruction: "The purple flower has a different amount\nof nectar each time you run the puzzle. \\r\n\\r\nFix the blocks to get all\nof the nectar from the flower each time."
      4-5 Bee Debugging 7_instruction: The function is missing something...
      4-5 Bee Debugging 8_instruction: |
        This function is fine, but it isn't used
        properly.
      4-5 Bee Debugging 9_instruction: "Why isn't the bee making enough honey?"
      4-5 Bee Debugging Assessment 1_instruction: 'Iššūkis: pataisyk kodą.'
      4-5 Bee Nested Loops 1_instruction: Use a loop to collect all of the nectar.
      4-5 Bee Nested Loops 2_instruction: |
        Collect all of the nectar from each flower.
        Use a nested loop. 
      4-5 Bee Nested Loops 3_instruction: |
        Collect all of the nectar by putting the
        starter code inside another loop.
      4-5 Bee Nested Loops 4_instruction: "Collect all of the nectar from each flower\nand make honey at the honeycomb. \\r\n\\r\nUse a nested loop. "
      4-5 Bee Nested Loops 5_instruction: |
        Collect all of the nectar by creating
        a nested loop.
      4-5 Bee Nested Loops 6_instruction: Collect all the nectar.
      4-5 Bee Nested Loops 7_instruction: |
        Put this loop inside another loop to create
        a nested loop and collect all of the nectar from the flowers.
      4-5 Bee Nested Loops 8_instruction: |
        Collect all of the nectar from these flowers
        by nesting a while loop. Replace the inner repeat times block with a while
        block. 
      4-5 Bee Nested Loops 9_instruction: |
        Collect all of the nectar from these flowers
        by nesting a while loop inside a repeat.
      4-5 Bee Nested Loops Assessment 1_instruction: Iššūkis – surink visą nektarą ir pagamink medų visuose koriuose naudodamas kartojimą.
      4-5 Bee Nested Loops Rows_instruction: |
        Gather nectar from the rows of flowers!
        Use a nested loop.
      4-5 Maze 1 (copy 1)_instruction: |
        Dear person. Me zombie. Must... get... to
        sunflower.
      4-5 Maze 1_instruction: Dear person. Me zombie. Must... get... to sunflower.
      4-5 Maze 10_instruction: Ar gali nuvesti prie saulėgrąžos naudpdamas tik 4 blokelius?
      4-5 Maze 11_instruction: Can you get to the sunflower using only six blocks?
      4-5 Maze 12_instruction: |
        Ok, this is slightly different. Can you do it in
        only six blocks?
      4-5 Maze 13_instruction: Nuvesk mane pas kiaulę!
      4-5 Maze 14_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      4-5 Maze 2 (copy 1)_instruction: |
        Get the zombie to the sunflower, but avoid
        the chomper!
      4-5 Maze 2_instruction: Get the zombie to the sunflower, but avoid the chomper!
      4-5 Maze 3 (copy 1)_instruction: Must... get... to sunflower.
      4-5 Maze 3_instruction: Must... get... to sunflower.
      4-5 Maze 4 (copy 1)_instruction: 'Try the "repeat" block to use fewer blocks...'
      4-5 Maze 4_instruction: 'Use the "repeat" block to solve the puzzle quickly...'
      4-5 Maze 5 (copy 1)_instruction: |
        Can you solve this puzzle using the fewest
        number of blocks possible?
      4-5 Maze 5_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 6 (copy 1)_instruction: |
        Can you solve this puzzle using the fewest
        number of blocks possible?
      4-5 Maze 6_instruction: |
        Get me to the sunflower using the fewest number of
        blocks possible!
      4-5 Maze 7_instruction: |
        Get the zombie to the sunflower quickly!  Can you
        solve the puzzle in fewer than 11 blocks?
      4-5 Maze 8_instruction: "Get the zombie to the sunflower using as few blocks\nas you can.  \\r\n(Avoid the chompers!)"
      4-5 Maze 9_instruction: "Now we have a new block called `repeat until`.  \\r\nThis\nwill let us keep looping commands until the zombie gets the sunflower.  \\r\n\\r\nUse\nthe new `repeat until` block to solve this puzzle in as few commands as possible."
      4-5 Maze Assessment 1_instruction: 'Iššūkis: nueik pas saulėgrąžą.'
      4-5 Maze Conditionals 1_instruction: |
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 2_instruction: |
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 3_instruction: "Use the `if` block to help me decide\nwhen to turn. \\r\n"
      4-5 Maze Conditionals 4_instruction: |
        Ok, solve this one just like the last
        puzzle, but you need to remember how you used the `if` and `repeat until`
        blocks together.
      4-5 Maze Conditionals 5_instruction: "\"Me want sunflower!\"  \\r\n\\r\nUse an\n`if` statement to get the zombie to the sunflower with the fewest number of\nblocks."
      4-5 Maze Conditionals 6_instruction: "\"Eat sunflower!\"\\r\n\\r\nUse an `if`\nstatement to get the zombie to the sunflower with the fewest number of blocks."
      4-5 Maze Conditionals 7_instruction: Pamėginkime dar kartą – užduotis labai panaši, bet šį kartą saugokis piktų gėlių!
      4-5 Maze Conditionals 8_instruction: Blokelis „jei-kitu atveju“ tikrina sąlygą, o po to atlieka vieną ARBA kitą veiksmą. Padėk man pasiekti saulėgrąžą, panaudodamas šį blokelį.
      4-5 Maze Conditionals 9_instruction: Pamėgink dar kartą panaudoti blokelį „jei-kitu atveju“. Ar sugebėsi išspręsti užduotį iš pirmo karto?
      4-5 Maze Conditionals Assessment 1_instruction: |
        **Assessment:** Use a `repeat
        until` and an `if/else` block to get me to the sunflower in as few blocks
        as possible.
      4-5 Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      4-5 Nested Loops 10_instruction: |
        Draw the last row of stars on this flag by
        looping the provided blocks. The stars are 50 pixels apart, but remember that
        the stars themselves are 30 pixels wide.
      4-5 Nested Loops 11_instruction: |
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Can you draw these 36 triangles using a nested
        loop?
      4-5 Nested Loops 2_instruction: |
        Now nest this loop inside another loop to
        draw 10 triangles.  This is called a "nested" loop.  
      4-5 Nested Loops 3_instruction: "Create a sun by nesting the starter code in\nanother loop.\\r\n\\r\nTo get this cool design with a hollow center, you'll\nneed to jump forward by the length of the triangle before turning."
      4-5 Nested Loops 5_instruction: Loop the given code to create a windmill.
      4-5 Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the triangle
        code?
      4-5 Nested Loops 7_instruction: "Loop this design 10 times. \\r\n\\r\nHow much\ndo you have to turn each time you loop?"
      4-5 Nested Loops 8_instruction: "Loop this shape 6 times. \\r\n\\r\nHow much\ndo you have to turn each time you loop? "
      4-5 Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      4-5 Nested Loops Assessment 1_instruction: |
        Assessment: Use a nested loop to
        complete the design.
      4-5 While Loops 1_instruction: |
        Move me to the hole and fill it with two shovelfuls
        of dirt, using the `fill` block.
      4-5 While Loops 2_instruction: |
        Move me to the pile of dirt and remove it with
        5 shovel scoops, using the `remove 1` block.
      4-5 While Loops 3_instruction: "Use as few blocks as possible to complete this\npuzzle!  \\r\n\\r\nMove me to the pile and remove all the dirt, then move to\nthe hole and fill it completely."
      4-5 While Loops 4_instruction: "Wow, look at that! \\r\n\\r\nI don't know how\nmany shovelfuls of dirt this hole needs.  \\r\nCan you write a program that\nkeeps using the `fill` block until the ground is even?  "
      4-5 While Loops 5_instruction: |
        Wow, now there are two deep holes! Can you
        write a program that fills them both until the ground is even?
      4-5 While Loops 6_instruction: |
        Wow, now there is a large pile of dirt! Can
        you write a program that removes all of it so the ground is even?
      4-5 While Loops 7_instruction: |
        Wow, now there are three piles of dirt! Can
        you write a program that removes each of them until the ground is even?
      4-5 While Loops 8_instruction: |2
         There is a really deep hole and a really large
        pile of dirt.  How many shovelfuls of dirt need to be moved around to make
        the ground flat?
      4-5 While Loops Assessment 1_instruction: Lauke yra daug duobių ir žemių. Padėk man išlyginti lauką.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |
        Do
        This
      App Lab test_instruction: sąlyga
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: |
        Use a nested loop to complete
        the design.
      Auto Open Function Editor_instruction: |
        You can call functions from inside
        other functions! Using your "shape" function as a base, create 3 house shapes
        each 20 pixels larger than the last starting at 50 pixels in length. Using
        a counter loop might be helpful. 
      Bee Recommended Blocks test_instruction: |
        Purple flowers may have either 1
        or 0 nectar, but you don't know which one! Be careful not to collect nectar
        from a purple flower if it doesn't have any. Check if the nectar is equal
        to 1 by using the if block.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: |
        This bee has a lot of work to do! Do you notice any
        patterns that you can use to simplify your code?
      Busy Bee_instruction: |
        This bee has a lot of work to do! Do you notice any
        patterns that you can use to simplify your code?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: 'Iššūkis: panaudok kartojimo blokelį ir surink visą nektarą.'
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Ar gali nuvesti mane pas kiaulę naudodamas 5 blokelius?
      Course 4 2_instruction: |
        The bee only wants nectar right now. Remember, not
        all objects are flowers, so check to gather nectar only at flowers.
      Course 4 Artist 1_instruction: |
        Help me draw a box. (Each line is 200 pixels
        long) 
      Course 4 Artist 10_instruction: "Click here to see the full instructions again!\\r\n\\r\nHere\nis the code for an interesting shape.  What happens when you repeat it multiple\ntimes, turning between each iteration?   Notice that the turns in this shape\nadd up to 420 degrees, which means that when your artist is done drawing,\nit will be facing a different direction than when you started.  That new direction\nis exactly 60 degrees to the right of where you began."
      Course 4 Artist 11_instruction: |
        Now for a challenge!  Feel free to use trial
        and error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      Course 4 Artist 12_instruction: "Want a second peek at the inspiration design\nor the hints?  Click here!\\r\n\\r\nOtherwise, make a design all your own!"
      Course 4 Artist 13_instruction: |
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2_instruction: |
        Can you use a loop to draw the greyed out square?  (Each
        side is 300px long)
      Course 4 Artist 20_instruction: |
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3_instruction: |
        Try to figure out what happens if you run this
        code (or press "Run" to test it). Then, repeat it enough times to complete
        the drawing.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Draw the other half of this design so it's
        symmetrical. The triangles are equilateral and are 50 pixels long. Hint: You
        may have to run the code several times to figure out all of the blocks that
        need to be added.
      Course 4 Artist 6_instruction: "Complete the code to draw these triangles.  \\r\n\\r\nEach\nequilateral triangle has sides of 100 pixels. "
      Course 4 Artist 7_instruction: |
        Now nest this loop inside another loop to draw
        10 triangles. This is called a nested loop. Hint: All 10 triangles complete
        a 360 degree rotation.  
      Course 4 Artist 8_instruction: |
        Draw this sun by looping this whole block of
        code multiple times.
      Course 4 Artist 8a_instruction: |
        Remember this shape?  Now we're going to
        let you build it without giving you any blocks to start!
      Course 4 Artist 9_instruction: "Loop this design 10 times and make sure to\nturn between each shape that's drawn. \\r\n"
      Course 4 Artist Binary 1_instruction: "Here's a function that takes a binary\nstring of 1's and 0's and instructs the artist to follow them from left\nto right, top to bottom.  The artist will fill-in the squares when it sees\na 1 and ignore the square when it sees a 0. \\r\n\\r\nRun this code to see how\nthe artist uses binary to draw this pattern."
      Course 4 Artist Binary 1a_instruction: "Here's a function that takes a binary\nstring of 1's and 0's and instructs the artist to follow them from left\nto right, top to bottom.  The artist will fill-in the squares when it sees\na 1 and ignore the square when it sees a 0. \\r\n\\r\nRun this code to see how\nthe artist uses binary to draw this pattern."
      Course 4 Artist Binary 2_instruction: |
        Which of these binary strings could
        you loop 8 times to draw this image?
      Course 4 Artist Binary 3_instruction: |
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      Course 4 Artist Binary 4_instruction: |
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      Course 4 Artist Binary 5_instruction: |
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      Course 4 Artist Binary 6_instruction: |
        What is the shortest binary string that
        you can repeat to draw this image?
      Course 4 Artist Binary 7_instruction: Finish this drawing.
      Course 4 Artist Binary Free Play 2_instruction: |
        Free Play: Here's a blank
        canvas for you to draw on.  Have fun!
      Course 4 Artist Binary Free Play 2a_instruction: "Here's a higher resolution\ncanvas to draw on - 16 pixels by 16 pixels!\\r\n\\r\nSee what happens when we\nstart to get creative with the bits?"
      Course 4 Artist Binary Free Play 2b_instruction: Click here to see hints.
      Course 4 Artist Binary Free Play_instruction: |
        Free Play: Draw whatever you
        like with binary!
      Course 4 Artist Binary pre1_instruction: "Binary is a way of representing information\nusing only two options.  Here, we're going to use the options \"off\" (represented\nby the number 0) and \"on\" (represented by the number 1).  \\r\n\\r\nWe've\nprovided you with a grid of \"pixels\" that you can walk through and make\ndesigns by turning on only certain squares.  Can you have the artist draw\n\"01010101\" in binary in the first row?"
      Course 4 Artist Binary ryan_instruction: "Binary is a way of representing information\nusing only two options.  Here, we're going to use the options \"off\" (represented\nby the number 0) and \"on\" (represented by the number 1).  \\r\n\\r\nWe've\nprovided you with a grid of \"pixels\" that you can walk through and make\ndesigns by turning on only certain squares.  Can you have the artist draw\n\"01010101\" in binary in the first row?"
      Course 4 Artist For  Functions 10_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For  Functions 11_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For Loops 1_instruction: |
        Use a repeat block to draw this triangle
        that is 50 pixels wide.
      Course 4 Artist For Loops 10_instruction: |
        Free Play Time! Have fun drawing
        whatever you like with the blocks you have learned how to use
      Course 4 Artist For Loops 11_instruction: |
        Remember back in a previous stage
        when we used a variable to control the number of sides in a shape? We are
        going to do the same thing with the `counter` variable now. This pattern starts
        with a triangle and adds one side at a time until it draws a decagon (10 sides).
        Each side should be 100 pixels long. 
      Course 4 Artist For Loops 11a_instruction: "Let's put it all together!  Using\nyour knowledge of `for` loops and the `counter` variable, create this drawing\nwhere each shape has two more sides than the last.  Make sure that each side\nis 10 times as long as the number of sides in the polygon.\\r\n\\r\nVery little\nof the code has been provided for you."
      Course 4 Artist For Loops 12_instruction: |
        That looked pretty cool, but now
        I'd like to draw each shape next to the last one. This time each side is
        20 pixels. Use a jump block to jump forward 40 pixels after each shape. 
      Course 4 Artist For Loops 13_instruction: |
        Hmmm, those shapes are getting bigger
        every time! Didn't we already solve this problem with variables? How can
        we use the counter variable to make the sides smaller as there are more of
        them? Instead of moving forward by a set amount, try moving forward (100 /
        counter) pixels.
      Course 4 Artist For Loops 14_instruction: |
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try using
        some of the code from the last level, but turning 89 degrees to create this
        twisted square spiral.
      Course 4 Artist For Loops 15_instruction: |
        Free Play: Try making some drawings
        of your own using "for loops". We've added a few useful variables for you
        as well.
      Course 4 Artist For Loops 2_instruction: |
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure
        you look at the code before you hit "Run".
      Course 4 Artist For Loops 3_instruction: |
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
        
      Course 4 Artist For Loops 4_instruction: |
        How would you modify what you've
        learned to draw these squares? They start at 15 pixels long, the largest is
        300 pixels long, and each square is 15 pixels larger than the last. 
      Course 4 Artist For Loops 5_instruction: |
        Good job on the last puzzle! Let's
        use that "counter" variable block again to draw this cool picture. 
      Course 4 Artist For Loops 6_instruction: |
        Free Play! Try using a for loop to
        draw a growing shape pattern of your own design.
      Course 4 Artist For Loops 6a_instruction: |
        Make three small changes to the
        code from the last level to get this!
      Course 4 Artist For Loops 7_instruction: |
        What happens if you remove the "Repeat
        3" from this algorithm, keeping the "move" and "turn" blocks in the for
        loop? In this spiraling triangle, each side is 20 pixels longer than the last.
      Course 4 Artist For Loops 8_instruction: "Just one little change to the code\nfrom the last image can create this drawing. Can you figure out what that\nchange is?\\r\n\\r\nHint:  You need to remove something!"
      Course 4 Artist For Loops 8a_instruction: |
        Just one little change to the code
        from the last image can create this image. Can you figure out what that change
        is?
      Course 4 Artist For Loops 9_instruction: |
        Can you make a spiral? Move forward
        from 1 to 75 pixels, increasing by 1 pixel each time.
      Course 4 Artist For Loops Challenge_instruction: "Can you figure out how to\nuse all of the things you've learned to create this image?\\r\n\\r\nNeed a\nhint? Click here."
      Course 4 Artist For Loops inspire_instruction: "Free-Play Inspiration: You've\nnow learned everything you need to know to make a pattern like this! If this\npicture inspires you, try to make something similar. Otherwise, create something\nall your own.\\r\n\\r\nNeed a hint? Click here."
      Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is 100
        pixels in length, using a loop?
      Course 4 Artist Functions 10_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 11_instruction: |
        Check out this code that draws a
        cube - can you move it into a function called "Draw a Cube"
      Course 4 Artist Functions 12.1_instruction: |
        Let's create a function called
        "draw an octagon 20" that draws an octagon where each side is 20 pixels
        long.
      Course 4 Artist Functions 12_instruction: Loop square function to draw a line
      Course 4 Artist Functions 13.1_instruction: "Now, let's make a function called\n\"jump to upper right\" that moves the artist to the upper-right of the octagon\nthat you just drew so we can finish this pattern.\\r\n\\r\nHint:  To get yourself\nto the upper-right corner, try jumping in a pattern that makes just 3/8 of\nthe octagon."
      Course 4 Artist Functions 13_instruction: |
        Check it out we have a new function
        called "draw a line of squares". Feel free to take a look inside the function
        block to see how we built it. Click on "Run" when your are ready for the
        next puzzle.
      Course 4 Artist Functions 14.1_instruction: |
        Now, let's make a function called
        "jump to upper right" that moves the artist to the top-right of the octagon
        that you just drew so we can finish this pattern.
      Course 4 Artist Functions 14_instruction: |
        You're doing great! Let's use
        your new "Draw a line of squares" function to draw a Square shape. Remember
        each square is 40 pixels in length.
      Course 4 Artist Functions 15_instruction: |
        Let's Step it up a little, can
        you draw a star shape using the "draw a line of squares" function? Good
        luck! Hint: you may have to turn 144 degrees
      Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      Course 4 Artist Functions 3_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 120 pixels apart.\\r\n"
      Course 4 Artist Functions 4_instruction: |
        Are you ready to create your own
        "Function Block"? Click on the "Functions" block in the tool box, name
        it "draw a triangle", then create a triangle as you have done before with
        the Action and Loops blocks. Then click on the Save and Close in the upper
        right hand corner. Hint: Create a triangle that is 100 pixels in length. Good
        luck!
      Course 4 Artist Functions 5 OLD_instruction: |
        Let's try to use our two functions
        to draw a house - what needs to be fixed in this code to draw the house properly?
      Course 4 Artist Functions 5_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 120 pixels apart.\\r\n"
      Course 4 Artist Functions 6_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 7_instruction: |
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: |
        Are you getting the hang of how to
        use function blocks? Let's modify this square so that it is 200 pixels in
        size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor. 
      Course 4 Artist Functions 9_instruction: |
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Functions challenge_instruction: |
        Click here to see the hints
        again.
      Course 4 Artist Functions Inspiration_instruction: |
        Click here to see the hints
        again.
      Course 4 Artist Functions inspire_instruction: |
        Click here to see the inspiration
        picture again.
      Course 4 Artist Inspire_instruction: "Want a second peek at the inspiration\ndesign or the hints?  Click here!\\r\n\\r\nOtherwise, make a design all your\nown!"
      Course 4 Artist Params 1_instruction: |
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: |
        You can call functions from inside
        other functions! Using your "shape" function as a base, create 3 house shapes
        each 20 pixels larger than the last starting at 50 pixels in length. Using
        a counter loop might be helpful. 
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Awesome, can you draw each of these
        triangles with that new function? The first is 25 pixels long, the second
        is 50, and the third is 75. 
      Course 4 Artist Params 4_instruction: |
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
        
      Course 4 Artist Params 6_instruction: |
        Let's edit this "draw a shape" function.
        It already has a "length" parameter. Now, let's edit the function to also
        add a "sides" parameter. Remember the angle to turn for a given shape is
        360 divided by the sides it has. Hint: lengths for each shape are the triangle
        is 100 pixels, the hexagon is 25 pixels and the square is 50 pixels. 
      Course 4 Artist Params 7_instruction: |
        Can you draw these shapes by filling
        in the "???" The square and triangle are 100 pixels in size while the hexagon
        is 75 pixels in size. 
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
        
      Course 4 Artist Params 9_instruction: |
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: "Let's draw an equilateral triangle. \\r\n\\r\nIt\nhas to be exactly 100 pixels long on each side."
      Course 4 Artist Vars 10_instruction: |
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: |
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      Course 4 Artist Vars 12_instruction: |
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside needs to be shorter if you want the whole pattern to fit on the screen.\n\\r\nLet's recreate the algorithm for this amazing pattern, but instead of\nmanually setting the `length` variable, let's use a math block with the `sides`\nvariable inside to make sure that each shape fits correctly. The perimeter\nof each polygon is 300 pixels.\\r\nNeed some hints?  Click here."
      Course 4 Artist Vars 14_instruction: "Free Play: Check it out! Now your algorithm\nis nested within one more loop. Experiment with changing the values of your\ntwo variables to draw cool patterns.\\r\n\\r\nFor even more effect, try playing\nwith color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2_instruction: |
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 3_instruction: |
        Here's a loop that draws a square, but
        something's missing. Can you fix it so that it uses the variable "length"
        to figure out how long each side should be? 
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: "Here’s some code that can draw any regular\npolygon. There’s a new variable called sides that is set to 4. Can you use\nthe sides variable (along with the math block) to turn the right amount regardless\nof how many sides there are in the polygon?\\r\n\\r\nClick here to go back to\nthe hint!"
      Course 4 Artist Vars 7_instruction: "Use what you learned in the last puzzle\nto create this hexagon using the \"sides\" variable.\\r\n\\r\nSee how you could\nchange just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_instruction: |
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: If
        you divide your starting length by the number of sides, the length of each
        side will get shorter as the number of sides gets higher.
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Don't forget to use
        the "set sides to" block.
      Course 4 Bee 1_instruction: "The bee can't tell what's under the cloud! \\r\n\\r\nUse\nthe `if` block to check whether there is a flower under the cloud. \\r\n\\r\nGet\nnectar one time, ONLY if there is a flower."
      Course 4 Bee 2_instruction: |
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect one nectar...otherwise,
        make one honey!
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect one nectar if it is a flower,
        else make one honey (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if/else block is combined with another if/else block to create
        an "if/else-if/else" statement. Complete the solution to collect the unknown
        amount of nectar.
      Course 4 Bee 5_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 11_instruction: |
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: |
        Ah, the for loop makes this much easier!
        Using the "counter" variable from the for loop to loop the "get nectar"
        block the same number of times as the loop. Whew! That's a lot of loops.
        All the code you need it there, take a look at how it is put together then
        click on Run and see how it works. 
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW_instruction: |
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1_instruction: |
        Write a sequence to collect all of the
        nectar using `get 3 nectar` which turns, moves to collect the nectar, and
        then returns to the original location.
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! We've
        added variables called "left" and "right" for you to use, and added a
        parameter called "direction" to "get 3 nectar". Edit "get 3 nectar"
        so that the bee turns the correct direction when the variables "left" or
        "right" are passed into the function.  
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Try using your new function
        to collect all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        nectar from all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectar units" to control the amount of nectar to
        collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8 Clone 2_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 clone 3_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 Clone_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 new_instruction: |
        Oooh, now there's honey to deal with
        too! How could you update your function to either get nectar or make honey.
      Course 4 Bee Params 8_instruction: |
        Challenge: Now there's honey to deal with
        too! Rewrite your function to use both the number of honey units and the number
        of nectar units.  How would you use those numbers to decide what you should
        do?
      Course 4 Bee Params Ex_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 EC 1a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 1b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2c_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2d_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 3_instruction: |
        Use what you learned in the previous level to draw
        an image like this. Note: The code becomes more simple if you incorporate
        parameters. 
      Course 4 EC 3a_instruction: |
        Extreme Challenge: No rules. No clues. Just the
        challenge!
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Saugokis TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: |
        Try the "repeat" block to use fewer blocks
        when solving this puzzle...
      Course 4 Maze 5_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Maze 6_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called `jump` that
        causes your main character to jump up 100 pixels. Run the program and use
        the jump function to collect all of the flags by moving the dog with the arrow
        keys.
      Course 4 Play Lab Params 10_instruction: "We've added one last function for\nyou. \\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it to level 3\nto move to the next puzzle. "
      Course 4 Play Lab Params 2_instruction: "Now we've got flags that are too\nhigh for our current jump! Let's use both the \"up\" and \"down\" arrows\nso that we can have multiple jump heights.  \\r\n\\r\nWe need to add a parameter\nto our jump function called \"height\".  The up arrow should cause the dog\nto jump 200 pixels and the down arrow should make it jump only 100 pixels.\n"
      Course 4 Play Lab Params 3_instruction: |
        We have added another parameter to
        the jump function so that we can use it with other actors. Each actor is represented
        by a number, starting from one. Edit the "jump" function so that it uses
        the "actor" parameter to make the correct character jump. 
      Course 4 Play Lab Params 4_instruction: "Here's a function called `patrol`.\n\\r\n\\r\nEdit `patrol` to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5_instruction: |
        Edit the the "patrol" function to
        add an "actor" parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      Course 4 Play Lab Params 7_instruction: "Let's have some fun! Look at the\ncode provided to see if you can figure out what each block does.  \\r\nWhen\nyou're done, use the arrow keys to control Dog and collect all of the flags.\\r\nNOTE:\nYou don't need to make any changes to the program"
      Course 4 Play Lab Params 8_instruction: |
        Use the `when actor touches` block
        to send Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "Here's our game from an earlier stage,\nbut most of the code is hidden. There’s a new function `score_points.`\\r\n\\r\nEdit\nthe function so that a new parameter called `points` can be added to `player_score`.\n\\r\n\\r\nThe variable `player_score` should increase each time Dog tags Cat\nwith hearts, and decrease each time that Cat tags Dog with hearts.\\r\n\\r\nNote:\nWhen you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove on to the next puzzle. "
      Course 4 Play Lab Vars 1_instruction: |
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |
        Use the left and right arrows to move,
        and the up arrow to jump. See if you can collect all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5_instruction: |
        Let's build a game! First we'll need
        a score. Rebuild the code that you saw in the last level to set the score
        to 10. 
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to shoot hearts.\\r\n\\r\nIn\nour game, how should we score points? Add 1 to your \"points\" variable each\ntime Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent to trigger an update to your score. You can increment your variable\nby setting \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to pass the level."
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by yellow hearts
        from Cat (actor 2), you should lose a point. Start with 10 points so it's
        not too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables we've played with so far in this stage, as well as a few more in\ncase you want them. \\r\n\\r\nNotice that there are now so many blocks in our\ntoolbox that they need to be organized!  Here, we've put each piece into\nan appropriate category.  Take some time to explore everything that is available.\nWhen you're done browsing, make a game or story using repeats, variables,\nand events.  \\r\n\\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a `for` loop and the counter block to speak the
        counter variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        only the odd numbers from 1 to 101.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making Pirate Pegleg
        count from 10 up to 1000, adding 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 4a_instruction: "Now, let's blend the variables\nfrom Stage 7 together with your \"counter\" variable to make some magic happen.   \\r\n\\r\nIn\nthis puzzle, Dog will count from 0 to 1000 by \"increment\".  Set the \"increment\"\nvariable to 10 at the beginning of your code to see what happens."
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime keeper.\\r\n\\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable will begin with a value of 1.\\r\n\\r\nCan you make it so that each\ntime you click Dog, the increment increases by 2?  Click the forward arrow\nto run the for loop.\\r\n\\r\nRun the loop a couple of times, clicking Dog before\neach one."
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 6a_instruction: "Dog will still keep time by counting\nwith our \"for loop\" by \"increment\", but this time, we will add The Wizard\ninto the mix.  Can you change the code so that \"increment\" goes up by two\neach time The Wizard is clicked?\\r\n\\r\nWatch out!  The Wizard moves quickly!"
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Now we're getting somewhere!  What\nif we start counting how many times we can click The Wizard before Dog gets\nto 30?  \\r\n\\r\nFinish adding blocks to The Wizard so that every time he's\nclicked the variable \"clicked\" increases by one. You can ignore \"increment\"\nfor now.\\r\n\\r\nDog will start counting when you click \"Run\"."
      Course 4 Play Labs For Loops 8_instruction: "Now, help the actors move as they\ncount.  \\r\n\\r\nDog should move and count by adding 2 (counter + 2) each time.  Cat\nwill move and count by multiplying by 2 (counter * 2)  each time. Penguin\nwill move and count to the power of 2 (counter ^ 2) each time.  Who will reach\ntheir flag first?"
      Course 4 Play Labs For Loops 8a_instruction: "To finish our game, we need to\nbring back the \"increment\" variable!    Let's tie it to the level of the\ngame.\\r\n\\r\n1) Keep track of the number of times The Wizard is clicked.\\r\n2)\nIf The Wizard is clicked at least 10 times before Dog counts to 30, raise\n\"increment\" by 1 and start again.\\r\n3) If The Wizard does not get clicked\nat least 10 times, the game is over."
      Course 4 Playlab For Loop Freeplay_instruction: |
        Freeplay: Use everything you've
        learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b_instruction: "Now, these two characters are going\nto race!  \\r\n\\r\nEach of them will move `counter` steps at a time, but their\ncounters will have different values because of the `for` loops.  \\r\n\\r\nCan\nyou change the increment in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b_instruction: |
        Adjust the interval on these `for`
        loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b_instruction: "Edit this `for` loop to create\na game that's fun for you to play!\\r\n\\r\nPress \"Run\" and click Madame\nUnicorn four times to win. "
      Course 4 SCF 1_instruction: |
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      Course 4 SCF 1a_instruction: |
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 1b_instruction: |
        Can you figure out how to collect all of this
        honey with the fewest blocks possible?
      Course 4 SCF 2_instruction: |
        Use what you learned in the previous level to
        draw an image like this. Note: The code becomes more simple if you incorporate
        parameters. 
      Course 4 SCF 3 Fail 1_instruction: Can you figure out how to...
      Course 4 SCF 3 Fail 2_instruction: Can you figure out how to...
      Course 4 SCF 3_instruction: |
        Use what you learned in the previous level to
        draw an image like this. Note: The code becomes more simple if you incorporate
        parameters. 
      Course 4 SCFL 1_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 1a_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 1b_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 2_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 3_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 4_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 5_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 6_instruction: |
        Can you figure out how to re-create this drawing
        with a single loop?
      Course 4 SCFL 7_instruction: |
        The artist wants to catch some waves! Can you
        figure out how to re-create this drawing?
      Course 4 SCFP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 SCV 1_instruction: Click here to view the instructions again.
      Course 4 SCV 2_instruction: Click here to view the instructions again.
      Course 4 SCV 3_instruction: "Now for a game of tag!  Tag Cat to get 2 points.\nTag Penguin to get 3 points.  Get exactly 10 points to win!\\r\nBut be careful,\nwhen Cat and Penguin tag each other, they take points away.\\r\n\\r\nAdd the\nblocks necessary to make this game work the way it's been explained.  How\nwill you get Dog to move in all directions using the arrow keys?  How will\nyou add points when Dog tags Cat or Penguin?  How will you subtract points\nwhen Cat and Penguin touch?"
      Course 4 SCV 4_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 5_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 6_instruction: Click here to view the instructions again.
      Course 4 SCVP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Gauk tris nektarus ir pagamink du korius medaus
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSD Hackathon Pt 1_instruction: (Click to see full instructions)
      CSD Hackathon Pt 2_instruction: (Click to see full instructions)
      CSD Hackathon Week 1_instruction: (Click to see full instructions)
      CSD Hackathon Week 2_instruction: (Click to see full instructions)
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Predict_instruction: |
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Frame Rate_instruction: "Slow down Gamelab Gary's animation with frameRate()"
      CSD U3 Keypress Boolean_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables create and assign_instruction: |
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: 'Create your own variable '
      CSD U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |
        Use console.log to display the
        results of each expression. Then create your own.
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: O dabar sukurkime 20 persidengiančių apskritimų. Tarp kiekvieno apskritimo turi būti 18 laipsnių kampas.
      frozen circle function with parameter_instruction: Štai tau naujas blokelis „sukurk apskritimą“, su kuriuo galima nubrėžti skirtingų dydžių apskritimus. Pamėgink jį panaudoti ir sukurti apskritimus, kurių dydžiai yra 5 ir 10.
      frozen circle function_instruction: Panaudok naują blokelį „sukurk apskritimą“. Iš viso bus 10 apskritimų, o tarp jų reikės šuoliuoti su blokeliu „peršok“.
      frozen circle_instruction: Apskritimas yra įdomi figūra. Ar sugalvosi, kiek kartų reikės pakartoti veiksmus, kad nupieštum apskritimą?
      frozen cross rotate dense_instruction: Pakartokime tą patį 90 kartų! 360 laipsnių apskritime turės įtilpti 90 linijų. Koks kampas tarp jų turės būti?
      frozen cross rotate_instruction: O dabar pamėgink pakartoti tą patį 10 kartų. Sugalvok, kiek laipsnių reikės pasisukti piešiant linijas.
      frozen cross_instruction: Panaudok kartojimo blokelį piešdamas pliuso ženklą. Ar pastebėjai, kad Elsa gali judėti ne tik į priekį, bet ir atgal?
      frozen diamond mini snowflake_instruction: Ar žinojai, kad visos snaigės turi kitokią formą? Pamėginkime sukurti snaigę, sudarytą iš lygiagretainių. Tarp kiekvieno lygiagretainio bus 90 laipsnių kampas, o kadangi jų bus 4, turėsime savo veiksmus kartoti keturis kartus.
      frozen diamond snowflake_instruction: O dabar pamėginkime nupiešti snaigę kartodami 10 kartų ir pasisukdami po 36 laipsnius po kiekvieno lygiagretainio.
      frozen diamond_instruction: Naudokite pakartoti aplink šie blokai sukurti lygiagretainį. Jis yra toks pat kaip stačiakampis bet turi skirtingų kampų. Tai vienas buvo 60 laipsnių ir 120 laipsnių kampais vietoj visus 90 laipsnių kampu.
      frozen freeplay_instruction: Sveikinu! Tu tapai meistriškas menininkas! O dabar gali nupiešti ką tik nori.
      frozen line_instruction: Labas! Aš Elzė iš Arendelės. Padėk man nubrėžti liniją.
      frozen perpendicular_instruction: O dabar pabandykime nubrėžti dvi linijas, kurios sudaro 90 laipsnių kampą. Tau reikės panaudoti blokelį „pasisuk“ bei blokelius „eik į priekį“.
      frozen snowflake branch_instruction: Panaudok naują blokelį „sukurk snaigės šaką“ ir nupiešk tris snaigės šakas.
      frozen snowflake full_instruction: O dabar pakartokime tai 8 kartus ir gaukime nuostabią snaigę!
      frozen snowflower_instruction: Ši gėlytė gali būti sukurta iš įvairių apskritimų, kurių dydžiai yra 5 ir 10. Kiekvieno iš jų yra po penkis.
      frozen square iterative_instruction: Dvi linijas nubrėžti jau moki. O dabar nubrėžk keturias, kad sukurtum kvadratą.
      frozen square loop 3x_instruction: Pamėginkime nubrėžti tris kvadratus. Po kiekvieno jų reikės pasisukti po 120 laipsnių.
      frozen square loop_instruction: Labas! Aš Anna iš Arendelės! Dabar panaudosime naują blokelį „kartok“ tam pačiam kvadratui nupiešti. Jis padės panaudoti mažiau blokelių. Sugalvok, kiek kartų reikės kartoti tuos pačius veiksmus, kad pavyktų nubrėžti kvadratą.
      frozen square snowflake_instruction: Pamėginkime sukurti snaigę. Reikės nupiešti 10 kvadratų, o pasisukti po 36 laipsnius nupiešus kiekvieną kvadratą.
      Infinity_catch_instruction: |
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: |
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say_instruction: 'Make Anna say "Hi there." by using the Say block.'
      Infinity_shoot_instruction: Baymax yra veikėjas 2. Padaryk, kad Baymax mestų raketą į Hiro.
      Infinity_shoot_directions_instruction: Hiro yra veikėjas 3. Padaryk, kad Hiro mestų sviedinį į kiekvieną iš keturių veikėjų. Tarp kiekvieno metimo padaryk po sekundės pertrauką.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: Nupiešk punktyrinę liniją naudodamas piešimo ir šokinėjimo blokelius
      K-1 artist 1 level 9_instruction: Nupiešk šį piešinį panaudodamas tris linijas
      K-1 Artist Loops 1_instruction: Nupiešk šią liniją judėdamas į rytus 4 kartus.
      K-1 Artist Loops 2_instruction: Ar sugebėsi nupiešti tą pačią liniją panaudodamas kartojimo blokelį?
      K-1 Artist Loops 3_instruction: Ar gali naudodamas kartojimą nupiešti 6 linijas?
      K-1 Artist Loops 4_instruction: Ar veiksmų kartojimas padėtų pabaigti piešti šią pilį?
      K-1 Artist Loops 5_instruction: Kokius veiksmus galėtum pakartoti 4 kartus, kad nupieštum šiuos laiptus?
      K-1 Artist Loops 6_instruction: 'Čia reikės dviejų kartojimo blokelių: vieno keliaujant aukštyn, o antro – keliaujant žemyn.'
      K-1 Artist Loops 7_instruction: Ar gali užbaigti piešinį naudodamas du kartojimo blokelius?
      K-1 Artist Loops 8_instruction: Šie laiptai turi didesnius laiptelius.
      K-1 Artist Loops 9_instruction: 'Iššūkis: naudodamas kartojimą nupiešk laiptus'
      K-1 Artist Loops Free Play_instruction: Nupiešk ką nors linksmo!
      K-1 Artist1 1_instruction: Nupiešk šitam žmogeliukui pėdą
      K-1 Artist1 10_instruction: Šokinėdamas ir piešdamas nueik iki lobio, pažymėto X
      K-1 Artist1 2_instruction: Nupiešk katinui ūsus iš dviejų linijų!
      K-1 Artist1 3_instruction: Nupiešk po dvi linijas į rytus ir į šiaurę ir namas bus užbaigtas!
      K-1 Artist1 4_instruction: Nubrėžk reikalingas linijas ir užbaik piešti pilį!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Nupiešk šiai gėlei stiebą iš dviejų linijų!
      K-1 Artist1 6_instruction: Užbaik piešinį naudodamas šokimo blokelį!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: Nupiešk punktyrinę liniją naudodamas piešimo ir šokinėjimo blokelius
      K-1 Artist1 9_instruction: Piešk ir šokinėk, kad gautum punktyrinę liniją
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Nupiešk kvadratą po trikampiu.
      K-1 Artist2 2_instruction: Peršok į reikiamą vietą ir nupiešk kvadratą.
      K-1 Artist2 3_instruction: Nupiešk kvadratą virš kito kvadrato
      K-1 Artist2 4_instruction: Nupiešk stačiakampį, ir tiltas bus užbaigtas.
      K-1 Artist2 5_instruction: Nupiešk stačiakampį, ir tiltas galės stabiliai stovėti
      K-1 Artist2 6_instruction: Nupiešk stačiakampį iš dviejų kvadratų!
      K-1 Artist2 Assessment1_instruction: 'Iššūkis: nupiešk žmogeliukui antrą kvadratinę akį.'
      K-1 Artist2 Free Draw_instruction: Nupiešk ką tik nori!
      K-1 Artist2_7_instruction: Nupiešk stačiakampį, ir ši komoda turės dar vieną stalčių!
      K-1 Bee 1_instruction: Pajudink mane prie gėlės, paimk iš jos nektarą, o tada pajudink mane iki korio ir pagamink medų
      K-1 Bee 10_instruction: Surink keturis nektarus ir pagamink du korius medaus!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Gauk tris nektarus ir pagamink vieną korį medaus
      K-1 Bee 12_instruction: Gauk tris nektarus ir pagamink du korius medaus!
      K-1 Bee 13_instruction: Gauk tris nektarus ir pagamink vieną korį medaus!
      K-1 Bee 14_instruction: Nuvesk mane prie nektaro, paimk jį, nuvesk mane prie korio ir pagamink medų
      K-1 Bee 15_instruction: Gauk du nektarus ir pagamink du korius medaus!
      K-1 Bee 2_instruction: Pajudink mane prie gėlės, paimk iš jos nektarą, o tada pajudink mane iki korio ir pagamink medų
      K-1 Bee 3_instruction: Pajudink mane prie gėlės, paimk iš jos nektarą, o tada pajudink mane iki korio ir pagamink medų
      K-1 Bee 4_instruction: Gauk du nektarus ir pagamink du korius medaus!
      K-1 Bee 5_instruction: Gauk tris nektarus ir pagamink tris korius medaus!
      K-1 Bee 6_instruction: Gauk du nektarus ir pagamink du korius medaus!
      K-1 Bee 7_instruction: Gauk tris nektarus ir pagamink du korius medaus!
      K-1 Bee 8_instruction: Gauk du nektarus ir pagamink du korius medaus!
      K-1 Bee 9_instruction: Gauk du nektarus ir pagamink du korius medaus!
      K-1 Bee Assessment 1_instruction: Gauk nektarą, kad pagaminčiau medų!
      K-1 Bee Assessment 2_instruction: Gauk nektarą, kad pagaminčiau medų!
      K-1 Bee Loops 1_instruction: Surink nektarą medaus gamybai!
      K-1 Bee Loops 10_instruction: Get all of the nectar and make all of the honey.
      K-1 Bee Loops 11_instruction: Surink visą nektarą ir medų!
      K-1 Bee Loops 12_instruction: 'Iššūkis: naudok kartojimo blokelius paimti nektarui, pagaminti medui ir judėjimui!'
      K-1 Bee Loops 2_instruction: Judėjimui panaudok kartojimo blokelį, o po to paimk nektarą ir pagamink medų!
      K-1 Bee Loops 3_instruction: |
        Use three `repeat` loops to get the nectar and
        make honey!
      K-1 Bee Loops 4_instruction: Naudok kartojimą nektaro gavimui, medaus gamybai ir judėjimui!
      K-1 Bee Loops 5_instruction: Use `repeat` loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Naudok kartojimą nektaro gavimui, medaus gamybai ir judėjimui!
      K-1 Bee Loops 7_instruction: Get the nectar and make honey!
      K-1 Bee Loops 8_instruction: Get the nectar and make honey!
      K-1 Bee Loops 9_instruction: Naudok kartojimą nektaro gavimui, medaus gamybai ir judėjimui!
      K-1 Bee Loops Assessment 1_instruction: Surink nektarą medaus gamybai ir naudok ciklus (kartojimus) judėjimui!
      K-1 Bee Loops Assessment 2_instruction: Surink nektarą medui naudodamas ciklus (kartojimo blokelius)!
      K-1 Bee Puzzle 12_instruction: Gauk tris nektarus ir pagamink du korius medaus
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Padėk man žingsniuoti į vakarus, kad pasiekčiau kiaulę.
      K-1 Maze 10_instruction: 'Apeik aplink sprogmenų dėžę (TNT) ir nuvesk mane pas kiaulę! '
      K-1 Maze 11_instruction: Atsek kelią iki kiaulės ir saugokis TNT dežių. Jei paliesiu jas, susprogsiu!
      K-1 Maze 2_instruction: Pajudink mane į rytus, kad pasiekčiau kiaulę!
      K-1 Maze 3_instruction: Pajudink mane į pietus, kad pagaučiau kiaulę!
      K-1 Maze 4_instruction: Pajudink mane į šiaurę, kad pagaučiau kiaulę!
      K-1 Maze 5_instruction: Pajudink mane į rytus, kad pasiekčiau kiaulę!
      K-1 Maze 6_instruction: Iš pradžių pajudink mane į vieną pusę, o po to – į kitą!
      K-1 Maze 7_instruction: Iš pradžių pajudink mane į vieną pusę, o po to – į kitą!
      K-1 Maze 8_instruction: Iš pradžių pajudink mane į vieną pusę, o po to – į kitą!
      K-1 Maze 9_instruction: Iš pradžių pajudink mane į vieną pusę, o po to – į kitą!
      K-1 Maze Assessment 1_instruction: Iššūkis – nuvesk mane pas kiaulę!
      K-1 Maze Assessment 12_instruction: Iššūkis
      K-1 Maze Assessment 13_instruction: Iššūkis
      K-1 Maze Assessment 2_instruction: Iššūkis – nuvesk mane pas kiaulę!
      K-1 maze debug 1_instruction: Pakeisk blokelių seką, kad pasiekčiau kiaulę!
      K-1 maze debug 10_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 maze debug 11_instruction: "Iššūkis tau!\\r\nSurask ir ištaisyk klaidas, \nkad galėčiau pasiekti kiaulę"
      K-1 maze debug 2_instruction: Išsiaiškink, kokių blokelių trūksta ir juos pridėk!
      K-1 maze debug 3_instruction: Išsiaiškink, kurie blokeliai NETINKA ir pašalink juos!
      K-1 maze debug 4_instruction: Pataisyk, kurie blokeliai netinka. Man atrodo, kad aš judėsiu visai ne į tą pusę.
      K-1 maze debug 5_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 maze debug 6_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 maze debug 7_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 maze debug 8_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 maze debug 9_instruction: Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 Maze debug Assessment 1_instruction: Įvertink situaciją – Surask ir ištaisyk klaidas, kad galėčiau pasiekti kiaulę!
      K-1 Maze Loops 1_instruction: Nuvesk mane pas kiaulę!
      K-1 Maze Loops 10_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 11_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 12_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 2_instruction: Naudok kartojimo blokelį ir nuvesk mane pas kiaulę!
      K-1 Maze Loops 3_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 4_instruction: Nuvesk mane pas kiaulę!
      K-1 Maze Loops 5_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 6_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 7_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 8_instruction: Nuvesk mane pas kiaulę! Naudok kartojimo blokelį.
      K-1 Maze Loops 9_instruction: Nuvesk mane pas kiaulę!
      K-1 Maze Loops Assessment 1_instruction: Iššūkis – panaudok kartojimo blokelį ir nuvesk mane pas kiaulę!
      K-1 Maze Loops Assessment 2_instruction: Iššūkis – panaudok kartojimo blokelį ir nuvesk mane pas kiaulę!
      K-1 Maze Multi 14_instruction: Iššūkis
      K-1 Maze Multi 15_instruction: Iššūkis
      K-1 Maze Sequence Assessment 1_instruction: "Metu tau iššūkį!\\r\nPajudink mane į vieną, \no po to į kitą pusę, kad pasiekčiau kiaulę"
      K-1 Maze Sequence Assessment 2_instruction: "Metu tau iššūkį!\\r\nPajudink mane į vieną, \no po to į kitą pusę, kad pasiekčiau kiaulę."
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: (Click to see full instructions)
      Middle School Hackathon Pt 2_instruction: (Click to see full instructions)
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a repeat loop?
      NEW Course 4 Artist Functions 10.1_instruction: |
        Use the functions from the
        previous puzzles to draw this pattern.
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        Now we want to create a new
        function called `draw a line of squares` that draws six squares all in a row.  Can
        you build this function using this `draw a square 20` function that we created
        for you?
      NEW Course 4 Artist Functions 12_instruction: |
        Use the `draw a line of squares`
        function from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the `draw a line of squares` function?  
      NEW Course 4 Artist Functions 14_instruction: 'Free-play time! '
      NEW Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Each square is 100 pixels in size.
      NEW Course 4 Artist Functions 3_instruction: "Here is a new type of Block.\nIt is called a `function` block. Click \"edit\" then fill it with the code\nfor drawing a square with 100 pixel sides. \\r\n\\r\nWhen you're done editing\nthe function, click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4_instruction: |
        Use the `draw a square` function
        to draw this pattern.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 20 pixels apart.\\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Are you getting the hang of how
        to use function blocks? Let's modify this square so that it is 200 pixels
        in size. Click on "edit" to enter the `draw a square` function editor. Remember
        to click on "Close" to get out of the function editor. 
      NEW Course 4 Artist Functions 8_instruction: |
        We have created a new function
        for you called "draw a triangle".  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9_instruction: |
        Can you solve this by adding
        only one block?
      NEW Course 4 Artist Functions inspire_instruction: |
        Click here to see the inspiration
        picture again.
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: |
        Create a `draw a hexagon` function
        block with a length parameter. This hexagon has sides that are 100 pixels
        in length. 
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a `for` loop with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: "Let's edit this \"draw a polygon\"\nfunction. It already has a \"sides\" parameter. Now, let's add a \"length\"\nparameter. \\r\nThe perimeter of each shape is 200 pixels long. Do you remember\nthe equation to make shapes the same size when they have a different number\nof sides?"
      NEW Course 4 Artist Params 14_instruction: |
        Edit "draw a spiral edge" to
        use "length" and "sides" parameters, then recreate these shapes.
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 2_instruction: |
        Create a `draw a triangle` function
        from scratch that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n5 triangles in a row. Each triangle is 30 pixels apart.\\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: |
        Replace the `???` in the `length`
        parameter input block. The pentagon has 100 pixel sides. 
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle have 100 pixels sides while each side of the hexagon is
        75 pixels long.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow learned everything you need to know to make a pattern like this! If this\npicture inspires you, try to make something similar. Otherwise, create something\nall your own.\\r\n \\r\nWant to know how our inspiration pattern was made? "
      NEW Course 4 Artist Vars 1.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 12_instruction: |
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 2_instruction: |
        Drag a number block to both the `set
        length` block and the `repeat _ times` block to draw a set of 50 pixel triangles.
        
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: "Let's try it again! \\r\n\\r\nCan you\nset the `length` variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern of pentagons with\n100 pixel sides by setting the right value for `length` and dropping the `length`\nvariable into all of the the correct places. \\r\n\\r\nSee how you only have\nto set the value for `length` once, and the code uses the right value everywhere?"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run through solutions multiple times before you figure out all of
        the steps.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, the "for loop" makes this
        much easier! All the code you need is here, take a look at how it is put together
        then click "Run" to see how it works. 
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 4_instruction: |
        Replace the ??? in the "for loop"
        with the largest amount of nectar the bee has to collect. 
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable with a math block! How can you use the \"counter\" variable to navigate\nthis garden with the fewest number of blocks possible? What do you need to\ndo to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\\r\n\\r\nRemember: If your loop is counting up, the increment is added\nto your \"counter\" variable each time through."
      NEW Course 4 Bee For Loops 8_instruction: |
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: |
        It's free play time! Have fun
        with all the blocks in your tool box. 
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        It's Free Play
        time, have fun with all the blocks in your tool box. 
      NEW Course 4 Play Labs For Loops 8a_instruction: |
        Challenge: How would you
        use the "for loop" to get every actor to go around and say their actor number,
        then vanish from the screen? 
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: "Atsitrenkti į Creeper'į - bloga idėja. Atsargiai judėk tarp Crepper'ių ir saugiai pasiek namus."
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: 'Mediena - labai svarbus išteklius, iš jos pagaminta labai daug daiktų. Eik iki medžio ir naudok "sunaikinti bloką" komandą tam, kad jį nukirstum.'
      Overworld Chop Trees_instruction: 'Mums reikia pastatyti namą prieš nusileidžiant saulei. Namui reikia labai daug medienos - nukirsk visus 3 medžius.'
      Overworld Free Play 20x20_instruction: Sveikinu! Tu išsprendei visus galvosūkius! Dabar gali kasti, statyti ir kurti ką nors ypatingo, panaudodamas viską, ką išmokai.
      Overworld Free Play_instruction: 'Šis kraštovaizdis - tavo žaidimų aikštelė. Pasirink, ką statysi.'
      Overworld House Frame - A_instruction: Pastatykime savo namą! Ši vieta atrodo tinkama. Pastatyk rėmus iš purvo blokų.
      Overworld House Frame - C_instruction: Pastatykime savo namą! Ši vieta atrodo tinkama. Pastatyk rėmus iš purvo blokų.
      Overworld House Frame B_instruction: Viena siena jau baigta, pastatykime likusią namo dalį pagal tavo grindų planą. Reikės kartoti tuos pačius veiksmus keletą kartų.
      Overworld House Frame B2_instruction: Viena siena jau baigta, pastatykime likusią namo dalį pagal tavo grindų planą. Reikės kartoti tuos pačius veiksmus keletą kartų.
      Overworld House Frame C_instruction: Viena siena jau baigta, pastatykime likusią namo dalį pagal tavo grindų planą. Reikės kartoti tuos pačius veiksmus keletą kartų.
      Overworld House Frame Chosen_instruction: 'Pastatyk likusią namo dalį iš kokios tik nori medžiagos. Tau pravers "kartok" komanda.'
      Overworld House Frame_instruction: Pastatykime savo namą! Ši vieta atrodo tinkama. Pastatyk rėmus iš purvo blokų.
      Overworld Minecart Track_instruction: 'Sugrįžai į paviršių, kuris turi labai daug išteklių po žeme. Dabar pastatysime taką išilgai purvo kelio prie tavo namų. Pirmiausia reikia jį išvalyti - eik keliu ir išvalyk medžius.'
      Overworld Move to Sheep_instruction: 'Pridėk antrą "ženk į priekį" komandą, kad pasiektum avį.'
      Overworld Place Wall_instruction: 'Kiekvieno namo statyba prasideda nuo sienos. Pastatyk pirmąją savo namo dalį naudodamas "ženk į priekį" ir "padėti" komandas į "kartok" blokelio vidų.'
      Overworld Plant Crops_instruction: Yra svarbu planuoti į priekį. Pasodink pasėlius iš abiejų vandens telkinio pusių, kad nereikėtų būti alkanam.
      Overworld Powered Minecart_instruction: |
        Puikiai padirbėta! Tu surinkai daugybę
        išteklių ir pastatei nedidelį namą. Dabar patiesk geležinkelį nuo žemėlapio krašto iki
        savo namo durų.
      Overworld Shear Sheep_instruction: |
        Avių kirpimo metas! Naudokis "kirpti" komanda,
        kad surinktum vilną iš abiejų avių.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Sudėtinės komandos (arba funkcijos) leidžia susikurti naujus blokelius pačiam! Aš sukūriau komandą ir pavadinau ją „nubrėžk kvadratą“. Ar gali nupiešti tuos pačius akinius naudodamas tą naują komandą? Tarp kvadratų yra 75 pikselių atstumas.
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Rocket Height Course A_instruction: |
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: |
        The bee only wants nectar right
        now. Not all objects are flowers, so check underneath EVERY CLOUD to see if
        it is hiding a flower. If it is, then you can gather nectar.
      Ryan - Bee Conditionals_instruction: |
        The bee only wants nectar right now.
        Not all objects are flowers, so check underneath EVERY CLOUD to see if it
        is hiding a flower. If it is, then you can gather nectar.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: |
        Here's a function called "patrol."
        Edit it to move Cat up 400 pixels and then down 400 pixels.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      sample1_instruction: "Our adventurer wants to collect gems.  But she can only\nuse 4 blocks to get them.\\r\n\\r\nCan you help her grab as many as she can\nusing just 4 blocks?"
      sample2_instruction: |
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: Now you can help bee make all of the honey.
      sample4_instruction: "Our adventurer has found a stash of coins in this cave.\\r\n\\r\nCan\nyou help her grab as many as she can using just 7 blocks?"
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Gilė! Gilė! Gilė! Panaudok blokelį „jei“, kad galėčiau ją pasiekti. Pamėgink panaudoti kuo mažiau blokelių.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Pamėginkime dar kartą – užduotis labai panaši, bet reikia stengtis neatsitrenkti į sieną!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Blokelis „jei-kitu atveju“ tikrina sąlygą, o po to atlieka vieną ARBA kitą veiksmą. Padėk man pasiekti gilę, panaudodamas šį blokelį.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 20_instruction: Ar gali pridėti tik 3 blokelius, kad galėčiau pereiti per šį labirintą? Jei užduotį išspręsi teisingai, aš galėsiu eiti vingiuotu keliu, kad ir koks ilgas jis bebūtų. Paskubėk, arba ledas ištirps!
      SpecialFrozenLevel_instruction: Sveikinu! Tu tapai meistriškas menininkas! O dabar gali nupiešti ką tik nori.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instrukcijos
      U2 frequency random sub_instruction: Instrukcijos
      U2 vigenere cipher_instruction: Instrukcijos
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Template
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 'Po kai kuriais blokais slepiasi lava. Tau reikės ją uždengti prieš einant toliau. Tau pravers "jei" komanda. Pridėk "ženk į priekį" komandą teisingoje vietoje, kad galėtum sunaikinti šiuos blokus.'
      Underground If Statements_instruction: 'Darosi sudėtinga. Sunaikink 3 raudonus akmenis, tačiau neįkrisk į lavą. Naudok "jei" komandą, kad padengtum grindiniu lavą, kurią atrasi.'
      Underground Iron_instruction: 'Vaikščioti per lavą - bloga idėja. Padėk grindinį, kad sukurtum tiltelį, tada sunaikink bent 2 geležies blokus.'
      Underground Mine in a Circle_instruction: |
        Rask būdą gauti 5 deimantus ir 7 raudonus akmenis! 
        Pabandyk naudoti "kartok" komandą "kartok" komandos viduje, kad vaikščiotum kvadratu.
        
        
      Underground Mining Coal_instruction: Vertingiausius išteklius rasi po žeme, bet gali sutemti. Padėk bent 2 deglus ir iškask bent 2 anglis.
      Underground Test Level_instruction: Surink visus mineralus!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
