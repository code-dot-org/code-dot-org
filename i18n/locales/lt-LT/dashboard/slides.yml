lt:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Sveiki atvykę į savo pirmąją „Programavimo valandą“ (Hour of Code)! Pažiūrėkime, kaip atrodo programavimas.
      2:
        image: notes/hoc1_2.jpg
        text: Naudosime Blockly, vizualią programavimo kalbą, kurioje reikia vilkti ir sujungti blokelius, kad parašyti programos kodą.
      3:
        image: notes/hoc1_3.jpg
        text: Dažniausiai kodas yra rašomas ranka, tačiau Blockly turi vizualią aplinką. Kiekvienas blokelis atitinką vieną eilutę tikro rašomo kodo.
      4:
        image: notes/hoc1_4.jpg
        text: 'Susipažinsite su programavimo pagrindais, kurie yra naudojami visur: nuo programėlių kūrimo iki robotų valdymo.'
      5:
        image: notes/hoc1_5.jpg
        text: Programa yra instrukcijų sąrašas, kurias turi įvykdyti Jūsų kompiuteris.
      6:
        image: notes/hoc1_6.jpg
        text: Jūsų pirmosios programos tikslas yra nuvesti paukštį per labirintą iki žalios kiaulės.
      7:
        image: notes/hoc1_7.jpg
        text: Kairėje yra labirintas, kuriame veikia Jūsų programa. Kiekvienos užduoties instrukcijos yra matomos labirinto apačioje.
      8:
        image: notes/hoc1_8.jpg
        text: Labirinto dešinėje yra priemonės, su kuriomis galima valdyti paukštį. Jomis reikės naudotis rašant savo programas.
      9:
        image: notes/hoc1_9.jpg
        text: Dešinėje yra baltas darbo laukas, į kurį reikės nuvilkti blokelius, kad sudėlioti programą. Jeigu norite pašalinti blokelį, jį reikia nuvilkti į šiukšlinę kampe.
      10:
        image: notes/hoc1_10.jpg
        text: Kiekvienas blokelis yra viena instrukcija. Jeigu baltame lauke bus vienas blokelis „ženk į priekį“ ir nuspausite mygtuką „Paleisti programą“, paukštis pajudės per vieną laukelį į priekį.
      11:
        image: notes/hoc1_11.jpg
        text: Norėdami, kad paukštis atliktų kelis veiksmus, sujunkite blokelius vieną paskui kitą.
      12:
        image: notes/hoc1_12.jpg
        text: Jeigu jau paleidote programą vieną kartą, galite ją pataisyti ir paspausti mygtuką „Iš naujo“.
      13:
        image: notes/hoc1_13.jpg
        text: Einam ir pagaudykim kiaules!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Labas, aš esu JR! Kiekvienai lenktyninių automobilių komandai reikia bent vieno kompiuteristo, kad laimėtų lenktynes. Jis analizuoja automobilio duomenis ir gali padaryti, kad ji veiktų greičiau.
      2:
        image: notes/stage5_2.jpg
        text: Šiose užduotyse reikės valdyti menininką, kuris piešia liniją ten, kur jis eina.
      3:
        image: notes/stage5_3.jpg
        text: Šis blokelis yra pavadintas „eik į priekį per 100 pikselių.“ Pikselis yra mažytis taškelis tavo ekrane.
      4:
        image: notes/stage5_4.jpg
        text: Šis blokelis yra pavadintas „Pasisuk į dešinę per 90 laipsnių“. Jis pasuks menininką tokiu pat kampu kaip ir paukštis labirinto užduotyse.
      5:
        image: notes/stage5_5.jpg
        text: Nuspaudus rodyklėlę ant bet kurio iš šių blokelių, galima pakeisti skaičių, per kiek pikselių menininkas pajudės į priekį arba kiek laipsnių pasisuks. Siūlau šiek tiek pažaisti su šiais blokais, kol taps aišku, kaip jie veikia.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Labas, aš esu Paola! Šiose užduotyse tu valdysi ūkininkę, kuriai reikia paruošti lauką, kad galėtų pradėti sodinti augalus.
      2:
        image: notes/stage9_2.jpg
        text: Jai reikės padėti nukasti visas purvo krūvas lauke arba užpildyti duobes žemėmis.
      3:
        image: notes/stage9_3.jpg
        text: 'Nauji blokeliai veikia štai taip: vienas nukasa vieną kastuvą, pilną purvo, jei tai yra purvo krūva, o kitas suverčia vieną kastuvą, pilną žemių, į duobę, jeigu tai yra duobė.'
      4:
        image: notes/stage9_4.jpg
        text: Krūvos ir duobės yra skirtingų dydžių. Ūkininkei reikia nurodyti, kiek kastuvų reikės panaudoti.
    flappy_intro:
      1:
        image: pastabos/flappy01.jpg
        text: Labas, aš esu Katie! Vienas smagiausių dalykų informatikoje yra tai, kad kompiuterio programa gali būti interaktyvi.
      2:
        image: pastabos/flappy02.jpg
        text: Kiekvieną kartą, kai žmogus nuspaudžia, baksteli pirštu ar ką nors parašo kompiuteryje ar telefone, nutinka koks nors veiksmas. Koks veiksmas yra atliekamas, priklauso nuo kodo, koks yra parašytas programoje.
      3:
        image: pastabos/flappy03.jpg
        text: 'Pavyzdžiui, gali būti suprogramuotas toks įvykis: „kai bus nuspaustas pelės klavišas, grok garsą“ '
      4:
        image: pastabos/flappy04.jpg
        text: Ar kada nors teko girdėti apie žaidimą FlappyBird? Naudodami įvykius, išmoksime suprogramuoti savo asmeninę FlappyBird žaidimo versiją!
      5:
        image: pastabos/flappy05.jpg
        text: 'Jūs kursite programas, jungdami komandų blokelius. '
      6:
        image: pastabos/flappy06.jpg
        text: 'Darbo lauke pamatysi žalių blokelių - tai yra įvykių blokeliai. '
      7:
        image: pastabos/flappy07.jpg
        text: Jeigu nori, kad paukštis suplasnotų, kai nuspausi pelės klavišą, tai gali padaryti prikabinęs blokelį „plasnok“ prie reikalingo blokelio. Tai atlikus, žaisdamas Flappy žaidimą ir kaskart nuspaudęs pelės klavišą, priversi paukštį suplasnoti.
      8:
        image: pastabos/flappy08.jpg
        text: 'Kiekvienoje šio etapo užduotyje mes pateiksime po naują įvykio (angl. "event") blokelį (žalios spalvos). Jums reikės sugalvoti, kokias komandas jame reikės vykdyti.'
      9:
        image: pastabos/flappy09.jpg
        text: 'Kai pamatysi rodyklę ant blokelio, tai reiškia, kad gali pakeisti nustatymus - pavyzdžiui, kokį garsą groti, kai Flappy atsitrenks į žemę.'
      10:
        image: pastabos/flappy10.jpg
        text: Paskutinėje užduotyje galėsite sukurti savo žaidimą ir pasidalinti jį su draugais. Linkime smagiai praleisti laiką!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Labas, aš esu Markas! Pasimokykime apie ciklus. Naudojant ciklus, galima nurodyti kompiuteriui, kad jis pakartotų bet kurias pasirinktas komandas iš naujo ir iš naujo, tūkstančius ar net milijonus kartų.
      2:
        image: notes/hoc2_2.jpg
        text: Šioje užduotyje reikia pajudinti paukštį per 5 laukelius, kad jis pagautų kiaulę.
      3:
        image: notes/hoc2_3.jpg
        text: Panaudokime naują blokelį „Kartok“.
      4:
        image: notes/hoc2_4.jpg
        text: Užduot sulipdę 5 blokelius „ženk į priekį“...
      5:
        image: notes/hoc2_5.jpg
        text: Mes galime įdėti blokelį „ženk į priekį“ į blokelio „kartok“ vidų. Taip pat reikia nurodyti skaičių kartojimo blokelyje, kad paukštis žinotų, kiek kartų kartoti šį veiksmą.
      6:
        image: notes/hoc2_6.jpg
        text: 'Dar vienas svarbus dalykas: į blokelio „kartok“ vidų galima įdėti daugiau nei vieną komandą.'
      7:
        image: notes/hoc2_7.jpg
        text: Sėkmės naudojant kartojimo blokelį!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Labas, aš esu Chris. Gruzijoje aš studijavau informatiką. Išmėginkime kartu naują blokelį „Kartok, kol“.
      2:
        image: notes/hoc3_2.jpg
        text: O jeigu mes nežinotume, kiek toli reikia skristi paukščiui, kad jis pasiektų kiaulę?
      3:
        image: notes/hoc3_3.jpg
        text: Jeigu į „kartok, kol“ blokelio vidų įdėsime blokelį „ženk į priekį“, paukštis eis į priekį TOL, KOL pasieks kiaulę (arba atsitrenks į sieną).
      4:
        image: notes/hoc3_4.jpg
        text: 'Dar vienas svarbus dalykas: į blokelio „kartok, kol“ vidų, taip pat kaip ir į „kartok“ blokelio vidų, galima įdėti daugiau nei vieną komandą.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Labas, aš esu Bilas! Dabar išmoksime naują labai svarbų dalyką: sąlygos sakinį su žodeliu „jei“. Su juo kompiuteris nusprendžia, kaip elgtis.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Tokius sakinius tu naudoji kasdien. Pavyzdžiui, prieš išeidamas į lauką, tu nusprendi: „jeigu lyja, užsivilksiu lietpaltį“.'
      3:
        image: notes/hoc4_3.jpg
        text: Tu gali nurodyti zombiui, kad jis tikrintų, ar egzistuoja kelias į kairę. Jei tas kelias egzistuoja, zombis turi pasukti į kairę.
      4:
        image: notes/hoc4_4.jpg
        text: Kad galėtume tai atlikti, panaudokime blokelį „jei“ ir į jo vidų įdėkime blokelį „pasisuk į kairę“.
      5:
        image: notes/hoc4_5.jpg
        text: 'Jeigu mes padėsime blokelį „ženk į priekį“ virš jo ir viską įdėsime į kartojimą:  zombis visada paėjęs patikrins, ar yra kelias į kairę (ir pasisuks, jei yra). Kartojimo komanda yra būtina, kad tikrintų kiekviename žingsnyje.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Sakinai su žodžiu „jei“ yra labai svarbūs informatikoje. Viena iš pirmųjų programų, kurią aš parašiau, buvo žaidimas kryžiukai-nuliukai. Ten buvo sąlygos sakinys su žodeliu „jei“, kuris darė štai ką: jeigu sekančiu ėjimu žmogus gali laimėti, kompiuteris turi užblokuoti tą laukelį, su kuriuo žmogus galėtų laimėti.'
      7:
        image: notes/hoc4_7.jpg
        text: Sėkmės naudojant „jei“ blokelį!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Labas, mano vardas Brina, aš esu programuotoja ir dirbu prie Instagram programos. Susipažinsime su funkcijomis. Funkciją sudaro keletas komandų, įdėtų į ją. Norint tas komandas atlikti, mums tereikės panaudoti vieną funkcijos blokelį.
      2:
        image: notes/stage13_2.jpg
        text: Taip pat išmoksite sukurti savo funkcijas. Funkcijos blokelis kampe turi žvaigždę, o šalia žvaigždės yra tos funkcijos pavadinimas.
      3:
        image: notes/stage13_3.jpg
        text: Blokeliai, kurie yra įdėti po funkcijos pavadinimu, pasako, ką ši funkcija atliks. Šiame pavyzdyje funkcijos pavadinimas yra „užpildyk 5“, ir ji susideda iš vieno kartojimo blokelio bei blokelio „užpildyk 1“.
      4:
        image: notes/stage13_4.jpg
        text: Nors funkcija jau yra baltame darbo lauke, ūkininkė tos funkcijos neatliks. Kad ji ją atliktų, mes turime ištraukti ir padėti blokelį į darbo lauką su reikalingos funkcijos pavadinimu, šiuo atveju „užpildyk 5“.
      5:
        image: notes/stage13_5.jpg
        text: 'Pasismaginkime su funkcijomis! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Labas, mano vardas Makinde. Susipažinkime su blokeliu „kol“. '
      2:
        image: notes/stage9_6.jpg
        text: '„Kol“ blokelis veikia štai taip: bus atliekamas tas veiksmas, kuris yra į jį įdėtas. Jis vyks TOL, KOL aprašytas veiksmas šalia žodžio „KOL“ bus teisingas.'
      3:
        image: notes/stage9_7.jpg
        text: Pavyzdžiui, jeigu ūkininkė stovi ant purvo krūvos, ji ją tol nukasinės, kol ta purvo krūva bus nukasta.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Labas, mano vardas Trina, aš dirbu Pixar kompanijoje. Prisidėjau prie daugelio animacinių filmų kūrimo, pavyzdžiui „Šrekas“.
      2:
        image: notes/stage11_2.jpg
        text: Susipažinsime su nauju skaičiavimo blokeliu. Jis kartos ir kartos tuos pačius veiksmus, tačiau jie gali šiek tiek skirtis vienas nuo kito kiekvieną kartą.
      3:
        image: notes/stage11_3.jpg
        text: 'Šiame pavyzdyje ant naujo blokelio bus parašyta štai taip: „skaičiuok su skaitikliu nuo 50 iki 90 per 10“. Jo viduje bus blokelis „nubrėžk kvadratą“. Kvadrato kraštinės ilgis turės būti skaitiklis iš kategorijos „Kintamieji“.'
      4:
        image: notes/stage11_4.jpg
        text: Tai reiškia, kad mūsų menininkas iš pradžių nubrėš kvadratą su 50 pikselių ilgio kraštinėmis. Po to jis prie kraštinės ilgio pridės 10 ir vėl brėš kvadratą. Po to jis vis pridės po 10 prie dabartinės kraštinės, kol skaičius pasieks 90 pikselių. Taigi, bus nubrėžti kvadratai su kraštinėmis 50, 60, 70, 80 ir 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Labas, mano vardas Janete, aš dirbu su programa Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Tarkime, kad mums reikia nupiešti krūvą skirtingų dydžių trikampių.
      3:
        image: notes/stage15_3.jpg
        text: Mes galėtume viską sudėlioti rankomis (kas užimtų labai daug laiko) arba tiesiog panaudoti funkciją su gaunamais duomenimis.
      4:
        image: notes/stage15_4.jpg
        text: Kad funkcijai uždėtumėme parametrą, reikia nuspausti ant mėlynos žvaigždės šalia funkcijos vardo, o tada nutempti „parametro pavadinimą“ į „parametro“ blokelį.
      5:
        image: notes/stage15_5.jpg
        text: Jeigu įrašysi žodį „ilgis“ ten, kur yra parašyta raidė x ir nuspausi klavišą ENTER, sukursi ilgio parametrą savo funkcijai.
      6:
        image: notes/stage15_6.jpg
        text: 'Kai viską atliksi, nuspausk ant žvaigždės, kad parametrai pasislėptų. Dabar galima pasirinkti kategoriją „Kintamieji“ - ten bus atsiradęs tavo sukurtas blokelis „ilgis“. Jį galima įdėti į blokelį „eik į priekį“, vietoj skaičiaus.'
      7:
        image: notes/stage15_7.jpg
        text: Kad būtų galima panaudoti funkciją su parametru, pasirink kategoriją „Funkcijos“ ir pasirink savo sukurtą funkciją „nubrėžk trikampį“, kuri apačioje turės sukurtą parametrą „ilgis“.
      8:
        image: notes/stage15_8.jpg
        text: 'Šalia parametro reikia prikabinti skaičių - kokio ilgio nori, kad būtų trikampio kraštinė. Tą skaičių galima rasti kategorijoje „Matematika“.'
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Sveikinu! Išspręsdamas paskutinę užduotį, tu parašei kodą, kurį perskaitęs BET KURIS robotas galės rasti kelią bet kokio ilgio labirinte, tunelyje, kas jis bebūtų – zombis, paukštis, robotas marse ar savarankiškai vairuojantis automobilis.
      2:
        image: notes/hoc6_2.jpg
        text: Pagrindiniai dalykai, kokius čia panaudojai, yra naudojami kiekvienoje programoje, kokią tik esi išbandęs ar dar išbandysi. Tu mokeisi ir išmokai kartojimo komandas, kartojimą, kol įvyks koks nors įvykis, sąlyginius sakinius „jei-tai“ ir „jei-priešingu atveju“.
      3:
        image: notes/hoc6_3.jpg
        text: Jeigu Jums patiko „Programavimo valandos“ kursas, apsilankykite code.org svetainėje ir toliau mokykitės informatikos! Kai užbaigsite mūsų pateiktą 20-ties valandų kursą, būsite įgijęs programavimo pagrindus ir galėsite mokytis, kaip galima sukurti programėles telefonams, valdyti robotus, kurti žaidimus ir t. t.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologijos keičia viską, ką mes darome ir visiškai nesvarbu, ar esate jaunas ar senas: programuoti yra smagu, tai kūrybinga ir tai išmokti gali kiekvienas!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Jau greitai bus galima pamatyti pastabas!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: Čiuoždami galėsite sukurti snaigių raštus ir šiomis žiemos grožybėmis pasidalinti su draugais.
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
