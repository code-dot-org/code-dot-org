es-MX:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: ¡Bienvenido a tu primera hora de código! Vamos a sumergirnos bien en tu primera experiencia de programación.
      2:
        image: notes/hoc1_2.jpg
        text: Usaremos Blockly, un lenguaje de programación visual donde puedes arrastrar y soltar bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: 'La mayoría del código se escribe a mano, en cambio Blockly es visual. Cada bloque corresponde a una línea de código "real".'
      4:
        image: notes/hoc1_4.jpg
        text: Aprenderás los fundamentos de la informática, los conceptos que se utilizan en cualquier lugar, desde hacer aplicaciones hasta controlar el Mars rover.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa es un conjunto de instrucciones que tu ordenador sigue.
      6:
        image: notes/hoc1_6.jpg
        text: El objetivo de tu primer programa es guiar un Angry Bird a través de un laberinto para golpear al cerdo verde.
      7:
        image: notes/hoc1_7.jpg
        text: El lado izquierdo es el laberinto donde se ejecuta tu programa. Las instrucciones para cada rompecabezas están debajo del laberinto.
      8:
        image: notes/hoc1_8.jpg
        text: La barra de herramientas del medio contiene los comandos para el Angry Bird. Puedes usarlos para construir tu código.
      9:
        image: notes/hoc1_9.jpg
        text: A la derecha está tu área de trabajo donde podrás arrastrar los bloques del cuadro de herramientas para construir tu programa. Para eliminar un bloque, arrástralo a la papelera que se encuentra en la esquina.
      10:
        image: notes/hoc1_10.jpg
        text: 'Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se mueve una casilla en el laberinto.'
      11:
        image: notes/hoc1_11.jpg
        text: Para hacer más de una acción, puedes arrastrar muchos bloques en tu espacio de trabajo y adjuntarlos juntos. El pájaro hará las acciones de arriba hacia abajo.
      12:
        image: notes/hoc1_12.jpg
        text: 'Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona el botón "Reiniciar".'
      13:
        image: notes/hoc1_13.jpg
        text: ¡Vamos por esos cerdos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hola, me llamo JR! Cada equipo de coches de carrera necesita programadores de computadoras para ganar. Ellos analizan datos del coche para hacerlo más rápido.
      2:
        image: notes/stage5_2.jpg
        text: En estos rompecabezas, serás un artista que dibuja una línea detrás de ellos dondequiera que vayan.
      3:
        image: notes/stage5_3.jpg
        text: 'Este bloque dice "avanzar 100 pixeles". Los pixeles son pequeños puntos en tu pantalla.'
      4:
        image: notes/stage5_4.jpg
        text: 'Este bloque dice "girar a la derecha 90 grados". Esto girará a tu artista la misma cantidad como los bloques "girar" en los rompecabezas laberinto.'
      5:
        image: notes/stage5_5.jpg
        text: Haga clic en la flecha en cualquiera de estos bloques para cambiar la cantidad que el artista se mueve hacia adelante o gira. Juega para familiarizarte con estos nuevos bloques.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hola, soy Paola! En estos rompecabezas, tu eres una granjera que tiene que aplanar completamente su campo para iniciar la siembra de cultivos.
      2:
        image: notes/stage9_2.jpg
        text: Tienes que ayudarla a quitar todos los montones de tierra y rellenar todos los huecos.
      3:
        image: notes/stage9_3.jpg
        text: 'Los nuevos bloques eliminan una palada llena de tierra de un montón y rellanan  con una palada de tierra un hueco.'
      4:
        image: notes/stage9_4.jpg
        text: Los montones y los huecos son de diferente tamaño así que tienes que decir al granjero cuantas palas debe usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hola, ¡Soy Katie! Una de las cosas más excitantes de la computación es que un programa de ordenador puede ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Siempre que alguien hace click, pulsa o teclea en un ordenador o teléfono genera un EVENTO, y hay un código que decide qué ejecutar cuando ocurre un EVENTO.
      3:
        image: notes/flappy03.jpg
        text: 'Por ejemplo, tienes un CONTROLADOR DE EVENTOS que dice "cuando se hace clic en el ratón, reproduce un sonido" '
      4:
        image: notes/flappy04.jpg
        text: ¿Has oído del juego FlappyBird? Mediante el uso de controladores de eventos, vamos a aprender a programar nuestra propia versión personalizada de FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: El código que escribirás consiste de arrastrar y soltar bloques que representan los comandos de la computadora. Sin que puedas verlo, cada uno de estos bloques está representado por código real.
      6:
        image: notes/flappy06.jpg
        text: 'Si echas un vistazo en el espacio de trabajo, hay algunos bloques verdes que son rellenados por ti - son "los controladores de eventos" '
      7:
        image: notes/flappy07.jpg
        text: 'Si deseas que el pájaro ALETEE cuando haces CLIC en el ratón, puedes hacerlo uniendo el bloque "ALETEAR" al manejador de eventos adecuado, y ahora en tu juego cada vez que haces clic en el ratón, el pájaro aleteará.'
      8:
        image: notes/flappy08.jpg
        text: En cada puzzle de esta actividad te presentamos nuevos tipos de eventos como bloques verdes en el espacio de trabajo, tu puedes decidir los bloques apropiados para agregar en respuesta a esos eventos.
      9:
        image: notes/flappy09.jpg
        text: 'Cuando ves un menú desplegable como este, significa que puedes cambiar los ajustes - como qué sonido usar cuando flappy caiga al suelo.'
      10:
        image: notes/flappy10.jpg
        text: En el puzzle final serás capaz de crear tu propio juego y compartirlo con tus amigos. ¡Que te diviertas!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones puedes decirle a una computadora que repita una y otra vez cualquier conjunto de acciones, miles o incluso millones de veces.
      2:
        image: notes/hoc2_2.jpg
        text: En este puzzle, queremos que el pájaro se mueva hacia adelante 5 espacios para llegar al cerdo.
      3:
        image: notes/hoc2_3.jpg
        text: 'Podemos usar el nuevo bloque "repetir" para ayudarnos.'
      4:
        image: notes/hoc2_4.jpg
        text: 'En lugar arrastrar 5 bloques "avanzar"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir un número en el bloque para decirle cuántas veces repetirlo.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: '¡Disfruta usando tu nuevo bloque "repetir"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque, el bloque "repetir hasta".'
      2:
        image: notes/hoc3_2.jpg
        text: ¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para llegar al cerdo?
      3:
        image: notes/hoc3_3.jpg
        text: 'Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta" , el pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Y esto es importante; así como antes, podemos poner múltiples bloques dentro del bloque "repetir hasta" y todo ello se repetirá.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones "si". A través de ellas las computadoras toman decisiones.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Tu mismo usas declaraciones "sí", "If", diariamente.  Antes de salir afuera cada mañana, dices "sí", "IF", lloviera afuera, yo me pondría una chubasquero.'
      3:
        image: notes/hoc4_3.jpg
        text: Podemos decirle al zombie que compruebe si hay un camino a la izquierda, y si encuentra un camino a la izquierda, podemos hacerlo girar en esa dirección.
      4:
        image: notes/hoc4_4.jpg
        text: 'Para escribir el código para esto, vamos a sacar nuestro bloque "si" y colocaremos un bloque "gira a la izquierda" en su interior.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Ahora, si ponemos un bloque "avanzar" encima de este, y un bloque "repetir" alrededor de todo, cada vez que el zombie se mueva, el comprobará si hay un camino a la izquierda y girará. El comando "repetir" es crítico, para comprobar si tiene que girar en cada paso.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Las declaraciones "si" son muy importantes en las ciencias de la computación. Uno de los primeros programas que escribí era un juego de tic-tac-toe, y había una declaración "Si" que decía que si la otra persona está a punto de ganar, bloquea el lugar que le permite ganar.'
      7:
        image: notes/hoc4_7.jpg
        text: '¡Diviértete cuando uses el bloque "if" (si)!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hola, mi nombre es Saloni. Yo uso la informática para ayudar a resolver problemas en salud y medicina. Vamos a aprender acerca del bloque "si sino". Se parece al bloque "si", pero tiene una parte extra al final que dice "sino".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Si pongo el bloque "avanzar" en el lugar donde dice "hacer" y un bloque "girar a la izquierda" donde dice "sino" el zombie va a elegir entre dos opciones. Si hay un camino adelante, el zombie va a avanzar, y SINO (si no hay un camino adelante), el zombie va a girar hacia la izquierda.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Al igual que el bloque "si", podemos poner el bloque "si sino" dentro de un bloque "repetir" para que el zombie siga moviéndose y el bloque "si sino" seguirá comprobando si hay espacio para girar.'
      4:
        image: notes/hoc5_4.jpg
        text: ¡Ahora llevemos a esos zombies a donde pertenecen!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Una instrucción si-sino es una decisión entre dos cosas. Vamos a ver cómo podemos utilizar una instrucción si-sino con nuestro amigo Scrat la ardilla.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Este bloque se ve igual que el bloque "si", pero hay una pieza extra en la parte inferior que dice "sino". Si ponemos un bloque "avanzar" donde dice "hacer" y un bloque "girar a la izquierda" donde dice "sino", eso significa que la ardilla Scrat avanzará si hay un camino delante. Si no hay un camino a seguir, Scrat girará a la izquierda.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Es tomar una decisión y hacer una de las dos acciones en base a esa decisión. Y al igual que los bloques "si", puedes poner bloques "si-sino" dentro de bloques "repetir".'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: ¡Ahora vamos a ayudar a la ardilla Scrat a conseguir esa bellota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: '!Hola! soy Brina, una ingeniera de Instagram. Una función es un conjunto de líneas de código que quieres usar una y otra vez, así que en vez de escribir ese código cada vez, puedes usar solo un bloque.'
      2:
        image: notes/stage13_2.jpg
        text: Vamos a aprender cómo definir funciones. Las definiciones de funciones tienen una estrella en la esquina. El nombre de la función está escrito en la línea superior.
      3:
        image: notes/stage13_3.jpg
        text: 'Los bloques que se encuentran dentro de la definición nos dicen qué hace. Así que esta definición de función se llama "rellena 5" y está formada por un bloque "repetir" y un bloque "rellenar".'
      4:
        image: notes/stage13_4.jpg
        text: 'La definición se encuentra en el espacio de trabajo, pero nuestro agricultor no ejecutará la función hasta que arrastremos el bloque "llenar 5" desde la categoría de funciones.'
      5:
        image: notes/stage13_5.jpg
        text: '¡Volvamos a hacer divertidas las funciones! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '¡Hola! soy Makinde. Vamos a aprender acerca del bloque "mientras". '
      2:
        image: notes/stage9_6.jpg
        text: 'El "bloque mientras que (While)" hará todo lo que pones en su interior mientras la declaración en la parte superior es verdadera.'
      3:
        image: notes/stage9_7.jpg
        text: Por ejemplo, si la granjera está sobre un montón, continuará eliminando una palada llena mientras(WHILE) quede tierra debajo de ella.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: '!Hola! soy Trina y trabajo para Pixar. He trabajado en un montón de películas incluyendo Shrek.'
      2:
        image: notes/stage11_2.jpg
        text: 'Esta es nuestra nueva iteración "contador". Realizará acciones una y otra ves y puedes hacer que las acciones cambien un poco cada vez.'
      3:
        image: notes/stage11_3.jpg
        text: 'En este ejemplo, nuestra iteración "contador" dice "cuenta con un contador de 50 a 90 de 10 en 10" y dentro de ella tenemos un bloque "dibuja un cuadrado". Arrastra el bloque "contador" desde la sección "Variables" al sitio "longitud".'
      4:
        image: notes/stage11_4.jpg
        text: Esto significa que nuestro artista dibujará un cuadrado que tiene lados de 50 píxeles de longitud, luego agregará 10 para dibujar un cuadrado con lados de 60 píxeles de longitud, Después continuará agregando 10 para dibujar cuadrados hasta que alcance 90. Así que tendremos cuadrados de 50, 60, 70, 80 y 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: ¡Hola! soy Janete y soy ingeniera en Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ¿Qué pasa si queremos dibujar un montón de triángulos y sus lados tienen que ser de longitudes diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir a mano ese código o podemos usar una función con parámetros.
      4:
        image: notes/stage15_4.jpg
        text: 'Para hacer esto, haz clic en la estrella azul sobre la definición de la función "dibuja un triángulo". Después arrastra "nombre de entrada" en el bloque "entrada".'
      5:
        image: notes/stage15_5.jpg
        text: 'Después si escribes "longitud" en el lugar que dice "x" y presionas "Enter" crearás una entrada longitud para tu función.'
      6:
        image: notes/stage15_6.jpg
        text: 'Después haz clic en la estrella. Ahora, haz clic en la categoría de las variables y arrastrar el bloque "longitud" dentro del bloque "avanzar" de la definición de tu función. Y arrastra hacia afuera el antiguo bloque número.'
      7:
        image: notes/stage15_7.jpg
        text: 'Para usar tu función con parámetros, haz clic en la categoría funciones y arrastra tu función "dibuja un triángulo con longitud".'
      8:
        image: notes/stage15_8.jpg
        text: Ahora puedes usar el bloque matemáticas para introducir diferentes números para dibujar triángulos de diferente tamaño.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: ¡Felicidades! Con el último puzzle resuelto, acabas de escribir código que puede decir a cualquier robot cómo encontrar su camino a través de un laberinto sin ramificación o túnel de cualquier longitud, no importa si es un zombie, un pájaro, un rover de Marte o incluso un coche sin conductor.
      2:
        image: notes/hoc6_2.jpg
        text: 'Los conceptos básicos que utilizaste son el corazón de cualquier programa o aplicación que encuentres.  Aprendimos acerca de iteraciones, las declaraciones "repetir hasta", las declaraciones "si" y las "si sí no".'
      3:
        image: notes/hoc6_3.jpg
        text: Si te gustó tu primera hora del código, visita code.org para continuar tu educación en Ciencias de la Computación. Una vez que completes nuestro curso de 20 horas, habrás dominado los fundamentos de la programación y podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones para robots, juegos, o lo que quieras.
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnología está cambiando todo lo que hacemos y no importa si eres joven o viejo: la programación es divertida, es creativa, y cualquier persona puede aprenderla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: ¡Mostrar notas estará disponible pronto!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hola, mi nombre es Lindsey. Modelo, actúo y escribo mis propias aplicaciones. Vamos a usar código para unirnos a Ana y Elsa en la exploración de la magia y la belleza del hielo.
      2:
        image: notes/frozen1_2.jpg
        text: Vas a crear copos de nieve y patrones, mientras patinas sobre hielo realizas un paisaje invernal que luego puedes compartir con tus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: En la próxima hora, vas a aprender lo básico para poder programar. La programación tradicional es generalmente en texto escrito, pero usaremos Blockly, que utiliza bloques visuales que puedes arrastrar y soltar para escribir programas. De esta forma incluso aprenden las bases los estudiantes universitarios. Pero en realidad, todavía estás generando código.
      4:
        image: notes/frozen1_4.jpg
        text: Un programa es un conjunto de instrucciones que le dice una computadora qué hacer. Vamos a construir un código o un programa que ayudará a Elsa a crear una línea simple. Más tarde utilizaremos esto para crear patrones más complejos.
      5:
        image: notes/frozen1_5.jpg
        text: La pantalla se divide en tres partes principales. A la izquierda, está la superficie de hielo donde se ejecutará tu programa. Las instrucciones para cada nivel se escriben justo debajo de la superficie.
      6:
        image: notes/frozen1_6.jpg
        text: Esta zona media es la caja de herramientas, y cada uno de estos bloques es una acción que pueden hacer Elsa y Anna.
      7:
        image: notes/frozen1_7.jpg
        text: 'El espacio en blanco a la derecha se conoce como "área de trabajo", y es ahí dónde crearemos nuestro programa. Para poder movernos alrededor de la superficie de hielo necesitarás utilizar el bloque de "Mover hacia adelante".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Aquí, el bloque de "Moverse hacia adelante" dice: "Moverse hacia adelante 100 pixeles". Cuando oprimimos el botón "Ejecutar/Run". ¿Qué ocurre? Elsa se mueve hacia adelante una cierta distancia en la pantalla. ¡De hecho se mueve 100 pixeles! Los pixeles son básicamente cuadros muy pequeños que se encuentran en la pantalla de la computadora.'
      9:
        image: notes/frozen1_9.jpg
        text: 'El otro bloque que tenemos en este rompecabezas dice "girar a la derecha de 90 grados". Y cuando usamos este bloque "girar a la derecha", hace girar a Elsa una cierta cantidad de grados. Puedes probar cuánto quieres hacer girar a Elsa. El ángulo se mide desde el camino delante de Elsa. Entonces, esto es un giro de 90 grados. Y esto es un giro de 120 grados.'
      10:
        image: notes/frozen1_10.jpg
        text: Recuerda, puedes cambiar el número de píxeles y grados haciendo clic en las flechas junto a ellos.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: '¡Hola, soy Paola! Las computadoras son muy buenas repitiendo acciones. Puedes contar hasta 10, 20 o 100. Pero una computadora puede contar hasta 1 mil millones o 1 billón. No se aburrirá y sólo le costará unos pocos segundos. Ya sea contando, o dibujando, o haciendo cualquier otra cosa -- las computadoras pueden repetir acciones cientos o incluso miles de millones de veces.'
      2:
        image: notes/frozen2_2.jpg
        text: 'En programación, esto se llama bucle. Un bucle es la forma en la que repites una y otra vez tu código. Para el siguiente desafío, tu objetivo es ayudar a Anna a crear un cuadrado con el bloque "repetir".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Cualquier bloque de código que pones dentro del bloque "repetir" se repetirá en secuencia, tantas veces como quieras.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Para dibujar un cuadrado, puedes utilizar el bloque de "mover hacia adelante" y "girar a la derecha" 4 veces. Pero la forma más fácil es decirle a la computadora "mover hacia adelante" y "girar a la derecha 90 grados" una sola vez y luego repetir este par de acciones 4 veces. Para hacer eso, tienes que poner el bloque "mover hacia adelante" y el bloque "girar a la derecha" dentro de un bloque "repetir".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Recuerda que puedes cambiar el número del bloque "repetir" por cualquier otro, y va a repetir lo que está dentro del bloque cuantas veces le hayas indicado.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hola, soy Chris Bosh. Soy un jugador de baloncesto profesional, y programé en la Universidad.
      2:
        image: notes/frozen3_2.jpg
        text: Uno de los conceptos más importantes en Ciencias de la computación trata sobre cómo definir nuevos comandos. La mayoría de lenguajes de programación tienen solamente cerca de 100 palabras o comandos. Y en realidad, el arte y la magia está en definir tus propias nuevas palabras utilizando estos bloques de construcción.
      3:
        image: notes/frozen3_3.jpg
        text: Una vez que has enseñado una computadora cómo realizar una acción una vez, con esta secuencia de comandos, puedes ponerle un nombre para que la acción sea fácil de repetir más adelante. Definir tu propio comando y darle un nombre, se conoce como definir una función.
      4:
        image: notes/frozen3_4.jpg
        text: Hola, soy Jess. Al programar con bloques, utilizarías funciones cuando hay un conjunto de acciones que te gustaría hacer muchas veces. Por ejemplo, has escrito código para crear un cuadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Puedes definir esto como una función llamada "crear un cuadrado" '
      6:
        image: notes/frozen3_6.jpg
        text: Ahora tienes un nuevo bloque que puedes utilizar varias veces para crear múltiples cuadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Un montón de figuras sencillas pueden utilizarse para crear patrones más complejos. En el siguiente desafío, el código que has escrito recientemente para hacer un círculo está disponible como una nueva función que puede hacer círculos de diferentes tamaños. ¿Lo puedes usar para ayudar a Elsa crear patrones intrincados y hermosos en la nieve?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vamos a crear juegos usando Play Lab. Los buenos juegos tienen una historia y cada historia tiene actores. Aprenderemos cómo hacer que nuestros actores sean como brujas, alienígenas, y animales que hablan, se mueven e interactúan con los demás. Al final de este tutorial, puedes crear un juego desde cero y compartirlo con tus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: La pantalla se divide en tres partes principales. A la izquierda es el espacio de juego donde se ejecutará el programa. Las instrucciones para cada nivel están escritas abajo.
      3:
        image: notes/playlab_intro_3.png
        text: La zona media es la caja de herramientas, y cada uno de estos bloques es un fragmento de código. El espacio en blanco a la derecha se llama el espacio de trabajo y es donde construiremos nuestro programa.
      4:
        image: notes/playlab_intro_4.png
        text: 'Para empezar, necesitarás unir tus bloques al bloque naranja llamado "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.'
      5:
        image: notes/playlab_intro_5.png
        text: 'En este primer rompecabezas, el actor es un pingüino y haremos que diga "¡Hola!" arrastrando el bloque "decir", uniéndolo al bloque "cuando se ejecuta" y escribiendo dentro "Hola". También podemos hacer que el pingüino se mueva mediante los bloques mover a la derecha y mover a la izquierda. Una vez que tienes puestos tus bloques, presiona el botón ejecutar para ver lo que has programado.'
      6:
        image: notes/playlab_intro_6.png
        text: Comienza, y al final podrás crear tu propio juego con toda clase de jugadores, que pueden interactuar, volverse felices o tristes, aumentar la puntuación, o lanzar bolas de fuego, o incluso desaparecer unos a otros. Es cuestión de ti y del juego que quieres hacer.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Ahora vamos a aprender acerca de algo que todos los programadores de juegos usan todos los días. Se llaman eventos. Un evento indica a tu programa que atienda cuando algo ocurra. Cuando eso sucede, se realiza una acción.
      2:
        image: notes/playlab_events_2.png
        text: Algunos ejemplos de eventos son esperar a un clic en el ratón, un botón de flecha o pulsar en la pantalla.
      3:
        image: notes/playlab_events_3.png
        text: 'Aquí vamos a hacer que el robot espacial salude a los terrícolas cuando un jugador haga clic en él. Utilizaremos el bloque "cuando hace clic en" y únele el bloque "decir". Cuando el jugador hace clic en el robot espacial, todo lo que esté unido al bloque de evento "cuando hace clic en" se ejecutará. ¿Qué dice tu alienígena?'
      4:
        image: notes/playlab_events_4.png
        text: 'También hay bloques "cuando tecla de flecha". Si se unen con los bloques "mover", puedes empezar a mover tus actores para arriba, abajo, izquierda o derecha. Paso a paso, tu juego se está volviendo más interactivo.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Este es el bloque "repetir para siempre". Todo lo que haya dentro de este bloque se repetirá para siempre en el juego.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Si queremos que un actor haga algo en varias ocasiones, sin que el jugador tenga que hacer nada, pondremos esos bloques dentro del bloque "repetir para siempre".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: En el siguiente rompecabezas, nuestro objetivo es ayudar a que el asistente patrulle continuamente los límites del reino, a izquierda y derecha. Aprender cómo funciona el comando repetir, te ahorrará mucho tiempo después cuando construyas tu propio juego.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you persist, it's just going to get nothing but better and more exciting for you. Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the Internet. The Internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the Internet had smellorama!" I can talk to different people on the Internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego interactivo con el que de verdad puedes jugar.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner estos bloques juntos  para mover a los actores con las teclas de flecha.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C3_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C3_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C3_debugging_bee_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego interactivo con el que de verdad puedes jugar.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner estos bloques juntos  para mover a los actores con las teclas de flecha.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
