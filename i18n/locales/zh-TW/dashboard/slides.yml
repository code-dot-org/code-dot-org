zh:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: 歡迎參加一小時的程式設計課程！讓我們立刻開啟您的程式設計初體驗吧。
      2:
        image: notes/hoc1_2.jpg
        text: 我們將使用 Blockly，一個視覺化讓你拖放式操作來編寫程式碼積木的程式設計語言。
      3:
        image: notes/hoc1_3.jpg
        text: '大多數程式是類型的，但 Blockly 是視覺的。每個積木對應於一行"真正的"程式碼。'
      4:
        image: notes/hoc1_4.jpg
        text: 您將學習的是電腦科學的基礎，從製作應用程式到控制火星車都有用到這些概念。
      5:
        image: notes/hoc1_5.jpg
        text: 一個程式是一組讓您的電腦遵循的指令。
      6:
        image: notes/hoc1_6.jpg
        text: 您第一個程式的目標是要讓憤怒鳥通過一個迷宮打綠豬。
      7:
        image: notes/hoc1_7.jpg
        text: 左側是運行您程式的迷宮。每個謎題的說明在迷宮下面。
      8:
        image: notes/hoc1_8.jpg
        text: 中間的工具箱有對憤怒鳥的指令。你會使用這些來生成您的程式。
      9:
        image: notes/hoc1_9.jpg
        text: 右邊是您的工作區，在那裡，您會從工具箱中拖動塊來生成程式。若要刪除一個塊，請將其拖動到到角落裡的垃圾桶。
      10:
        image: notes/hoc1_10.jpg
        text: '每個塊是一條指令。如果您將一個"向前"塊拖動到您的工作區，然後按"運行程式"，這只鳥將在迷宮上移動一個空格。'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: '如果您運行一個程式，並且想要修正它，然後再試，按"重置"按鈕。'
      13:
        image: notes/hoc1_13.jpg
        text: 讓我們去拿下那些豬!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hi，我是 JR！ 每一個車隊都需要電腦科學協助他們贏得比賽。透過賽程中車體的資料分析，將可以使車子跑得更快。
      2:
        image: notes/stage5_2.jpg
        text: 在這些關卡中，你將扮演一名四處走動並留下繪畫線條的藝術家。
      3:
        image: notes/stage5_3.jpg
        text: '這個程式積木的意思是"向前移動100個像素"。像素指的是電腦螢幕上的小點點。'
      4:
        image: notes/stage5_4.jpg
        text: '這個程式積木說的是"向右轉90度"。這個動作就像你在"迷宮"關卡中，使用"轉動"程式積木來轉動藝術家是同樣的效果喔。'
      5:
        image: notes/stage5_5.jpg
        text: 點選程式積木中的箭頭來改變藝術家的動作，使他向前遺動或是轉彎。試著隨意玩玩並熟悉這些新的程式積木的功能。
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: 你好，我是 Paola ！在這些關卡中，你是一個必需將田地整平，好用來種植農作物的農夫。。
      2:
        image: notes/stage9_2.jpg
        text: 你必需幫助她將所有小土堆移除，並將所有的坑洞填滿。
      3:
        image: notes/stage9_3.jpg
        text: '新的程式積木"移除1"將從小土堆移除一鏟的泥土，"填滿1"將往坑洞中填入一鏟的泥土。'
      4:
        image: notes/stage9_4.jpg
        text: 每一個小土堆和坑洞的大小都不相同，所以你必需告訴農夫她要使用幾鏟來完成工作。
    flappy_intro:
      1:
        image: 標記/flappy01.jpg
        text: 你好，我是凱蒂 ！關於電腦科學最令人興奮的事情之一，是一個電腦程式可以做到互動。
      2:
        image: 標記/flappy02.jpg
        text: '某個人於任何時間，在電腦或手機上，點擊或敲擊或輸入，都會產生一個"事件"，而當一個"事件"發生時，就會有一些程式碼決定(接下來)做甚麼。'
      3:
        image: 標記/flappy03.jpg
        text: '例如，您可能有一個 事件處理常式 ，如："當滑鼠按一下時播放聲音"'
      4:
        image: 標記/flappy04.jpg
        text: 你曾聽說過 FlappyBird 遊戲嗎？通過使用事件處理常式，我們將學習編製我們自己客製版的 FlappyBird ！
      5:
        image: 標記/flappy05.jpg
        text: 你將要寫的程式碼涉及到代表 電腦 命令的拖動和刪除區塊。在此遮蓋下, 這些每個區塊都代表真正的程式碼。
      6:
        image: 標記/flappy06.jpg
        text: '如果你看看工作區中，那兒有一些已經為您填寫好的綠色區塊-這些都是"事件處理常式"'
      7:
        image: 標記/flappy07.jpg
        text: '如果您想要，當您點擊滑鼠時， 鳥 拍打，你可以透過將"拍打"區塊附加到適當的事件處理常式中，那麼，在你的遊戲中，只要你點擊滑鼠，鳥 就會拍打了。'
      8:
        image: 標記/flappy08.jpg
        text: 在這項活動中的每個關卡，我們將會在工作區中介紹新類型的事件-用綠色區塊表示，而您可以決定添加適當的區塊來回應這些事件。
      9:
        image: 標記/flappy09.jpg
        text: 當你看到一個像這樣的下拉箭頭時，這意味著您可以更改的設置-比如 flappy 撞到地面時所播放的聲音。
      10:
        image: 標記/flappy10.jpg
        text: 在最後的關卡，你將能夠創建自己的遊戲並將它分享給你的朋友。祝玩得愉快！
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: 你好，我是馬克 ！讓我們學習迴圈。使用迴圈可以告訴電腦反復重複任何一組的行動、 數千或甚至幾十億倍。
      2:
        image: notes/hoc2_2.jpg
        text: 在這個謎題，我們想要向前移動鳥 5 個空格去抓豬。
      3:
        image: notes/hoc2_3.jpg
        text: '我們可以使用新的"重複"塊來幫助我們。'
      4:
        image: notes/hoc2_4.jpg
        text: '而不是拖動"向前"塊 5 次 ......'
      5:
        image: notes/hoc2_5.jpg
        text: '我們可以把"前進"塊放在"重複"塊內，並給個數字告訴它重複多少次。'
      6:
        image: notes/hoc2_6.jpg
        text: '這一點很重要： 你可以把多個命令放在"重複"塊內。'
      7:
        image: notes/hoc2_7.jpg
        text: '享受使用您新的"重複"塊 ！'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: '你好，我是克裡斯。在加入邁阿密熱火之前，我去了喬治亞理工學院學習電腦科學。讓我們試試我們的新塊，"重複直到"塊。'
      2:
        image: notes/hoc3_2.jpg
        text: 如果我們不知道鳥需要移動多遠去抓豬嗎？
      3:
        image: notes/hoc3_3.jpg
        text: '如果我們把一個"向前"塊放在"重複直到"塊中，這只鳥將向前移動，直到它抓到豬 （或撞上一堵牆）。'
      4:
        image: notes/hoc3_4.jpg
        text: '這一點很重要： 就像之前，我們可以把多個塊放在"重複直到"塊內，他們都將會重複。'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '你好，我是比爾 ！讓我們學習一個新的基本概念："If"語句。這是讓電腦如何做出決定。'
      2:
        image: notes/hoc4_2.jpg
        text: '您自己每天使用"If"語句。你每個早晨去外面之前，你說如果外面在下雨，我需要穿我的外套。'
      3:
        image: notes/hoc4_3.jpg
        text: 我們可以告訴僵屍檢查是否有到左邊的路徑，而且如果他發現到左邊的路徑，我們可以把他轉向這一方向。
      4:
        image: notes/hoc4_4.jpg
        text: '為此編寫的程式，讓我們拖出我們的"如果"塊，並在裡面放"向左轉"的塊。'
      5:
        image: notes/hoc4_5.jpg
        text: '現在，如果我們在它上面放"向前"塊並放"重複"塊在周圍一切，僵屍每次移動，他會檢查是否有一個向左的路徑並轉向。"重複"命令是檢查每一步是否轉向的關鍵。'
      6:
        image: notes/hoc4_6.jpg
        text: 如果語句是在電腦科學中很重要的。我寫的第一個程式之一是正面圖遊戲，有一個如果說：如果有其他人要贏了，阻擋要讓他們贏的地點。
      7:
        image: notes/hoc4_7.jpg
        text: '好好享受使用"如果"程式積木的樂趣吧 ！'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hi, 我是 Brina 來是 Instagram的工程師。函數指的是會重覆使用到的程式碼，因此你可以使用函數類別的程式積木來取代重覆出現的大量程式碼。
      2:
        image: notes/stage13_2.jpg
        text: 接下來我們要學習如何定義一個函數。你可以點選函數中的星型符號來新增變數。在上方的空格中填入函數的名稱。
      3:
        image: notes/stage13_3.jpg
        text: '在函數內定義的程式積木可以讓我們知道這個函數的功能。所以這個名叫"填充5"的函數是由"重覆"程式積木及"填充"程式積木所組合而成的。 '
      4:
        image: notes/stage13_4.jpg
        text: '我們的農夫並不會執行待在工作區的函數定義，除非我們將"填充5"從函數類別中拖拉出來。'
      5:
        image: notes/stage13_5.jpg
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: '在使用"當"程式積木時，只要上方的敘述是對的，它就會不斷的執行積木內部的內容。'
      3:
        image: notes/stage9_7.jpg
        text: '舉例來說，如果農夫站在小土堆上，只要還有泥土在她腳底下，她就會持續進行"移除1"鏟土的動作。'
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: 嗨，我是在皮克斯工作的Trina。我曾經參加過包含史瑞克在內的電影的製作。
      2:
        image: notes/stage11_2.jpg
        text: '這是新的"計數器"迴圈。它會不斷反覆執行你所指定的動作，你可以在每次執行時對特定動作的數值做小量的變動。'
      3:
        image: notes/stage11_3.jpg
        text: '在這個例子中，"計數器"迴圈的內容為"將計數器值以10的間隔從50增加到90"，在迴圈內部有一個"畫正方形"的程式積木，試著將"變數類別"中的"計數"程式積木拖拉到"長度"的位置。'
      4:
        image: notes/stage11_4.jpg
        text: 這表示我們的藝術家會先畫出一個邊長為50像素的正方形，然後將計數增加10再畫出一個邊長為60像素的正方形。然後計數會持續的增加10再畫正方形直到邊長到達90為止。這樣我們就會有邊長分別為50, 60, 70, 80 及90的正方形了。
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: 嗨，我是 Janete，我是 Zynga 的工程師。
      2:
        image: notes/stage15_2.jpg
        text: |
          如果我們想要畫出一大堆有著不同邊長的三角型，你認為應該怎麼做才好呢？
          
      3:
        image: notes/stage15_3.jpg
        text: 我們可以一行一行慢慢的寫出所有的程式碼，或是使用帶有參數的函數來完成它。
      4:
        image: notes/stage15_4.jpg
        text: '請用滑鼠左鍵點一下"畫三角形"函數上的藍色星星，然後將"輸入名稱"程式積木拖拉到"輸入"程式積木中，來完成此操作。'
      5:
        image: notes/stage15_5.jpg
        text: '接下來，如果你在寫著"x"的區域輸入"長度"然後按下鍵盤上的"Enter"鍵，就可以替你的函數建立一個名為"長度"的輸入區域。'
      6:
        image: notes/stage15_6.jpg
        text: '然後按一下左上角的星星。現在你可以用滑鼠左鍵點選"變數"類別，在將"長度"程式積木拖拉到你定義的函數中的"向前移動"程式積木中。最後在將原有的"數值"程式積木拖拉到垃圾桶丟掉。'
      7:
        image: notes/stage15_7.jpg
        text: '要使用具有參數的函數功能，只需點選函數類別，然後將函數"畫一個長度為...的三角形"程式積木拖拉到出來就行了。'
      8:
        image: notes/stage15_8.jpg
        text: 現在您可以使用數學類別的程式積木，輸入不同的數值來畫出不同大小的三角形。
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 恭喜 ！隨著你解決了最後一個關卡，你剛才也寫出了一個程式，它可以告訴任何機器人如何找到自己的路來通過非分支迷宮或任何長度隧道，無論對象是一個僵屍，一隻鳥、 火星車或甚至是可自動駕駛的汽車。
      2:
        image: notes/hoc6_2.jpg
        text: 你剛剛使用過的基本概念是在任何你會嘗試的程式或app中最核心的概念。我們學到的概念有：重複迴圈、重複...直到...、如果、如果...否則...。
      3:
        image: notes/hoc6_3.jpg
        text: 如果你喜歡你寫程式的第一個小時，訪問 code.org，繼續你在電腦科學的教育 ！一旦你完成我們 20 小時課程，你就會掌握程式設計的基礎知識和可以開始學習如何編寫手機應用程式，機器人說明，遊戲，隨便你。
      4:
        image: notes/hoc6_4.jpg
        text: 科技正在改變我們所做的一切，無論年齡，老少皆宜：程式設計很好玩、 很有創意，而且任何人都可以學習 ！
    20_wrapup:
      1:
        image: notes/bird.png
        text: 顯示備註即將出現 ！
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
