"no":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hei, jeg er en kunstner. Du kan skrive kode for å få meg til å tegne nesten hva som helst. Bruk noen blokker for å få meg til å tegne over de grå linjene på bildet. (Hver linje er 100 piksler lange)
      2-3 Artist 11_instruction: 'Gi stopp skiltet en kant ved å lage en åttekant med åtte sider, 100 piksler lange. Hvor mange grader må du dreie? (Hint: Hva er 360 delt på 8?) '
      2-3 Artist 12_instruction: 'Sett "Gjenta" blokken slik at den lager en sirkel til å fullføre øyet. Hvis hver bevegelse blir dreid men en grad, hvor mange ganger må du repetere for å fullføre sirkelen? 180? 360? 500?'
      2-3 Artist 2 new_instruction: 'Dette huset har en halvferdig vegg. Hver side er 100, men den halvferdige veggen er bare 50. Fullfør veggen. '
      2-3 Artist 2_instruction: 'Dette huset har en halv ferdig vegg. Hver side er 100, men den halvferdige veggen er bare 50. Fullfør veggen. '
      2-3 Artist 3.4_instruction: 'Hoppe blokken beveger kunstneren uten å tegne. Tegn den stiplede linjen ved hjelp av både hoppe- og tegne blokker.'
      2-3 Artist 3_instruction: Denne hatten er 100 pixler høy. Tegn en hatt som er 70 piksler lavere.
      2-3 Artist 3new_instruction: Den røde hatten er 100 pixler høy. Fullfør tegningen av en svart hatt som et 70 pixler kortere. Bredden på den svarte hatten er 50 pixler.
      2-3 Artist 4_instruction: Hjelp meg å fullføre juset til denne katten.
      2-3 Artist 5_instruction: 'Erstatt denne koden med en "gjenta" blokk for å tegne det samme huset med bare 3 blokker.'
      2-3 Artist 6_instruction: 'Dette huset trenger ett tak. Tegn trekanten. Hint: alle de tre sidene skal være like lange.'
      2-3 Artist 7_instruction: 'Fullfør å tegne den høyre siden av det siste vinduet. Hver firkant i vinduet er 25 piksler. '
      2-3 Artist 8_instruction: Fullfør rommene for alle dyrene ved å dele rektangelet inn i 2 like firkanter. Rektangelet er 200 piksler brede, og 100 piksler høye.
      2-3 Artist 9_instruction: Fullfør denne dragen
      2-3 Artist Assessment 1_instruction: 'Lekse: Fullfør å tegne den siste tannen, 25 piksler bred og 25 piksler høy.'
      2-3 Artist Debugging 1_instruction: Kan du lage denne luen med en topp lengde 100?
      2-3 Artist Debugging 10_instruction: 'Retnings kontrolleren er for smal. Hint: Gjør den bredere med 10 piksler'
      2-3 Artist Debugging 11_instruction: Hjelp meg å fullføre det vidunderlige snøflaket mitt. Hvor mange ganger må jeg repetere for å fullføre det?
      2-3 Artist Debugging 12_instruction: Jeg skal legge til en bølge i denne scenen. Kan du hjelpe meg?
      2-3 Artist Debugging 2_instruction: 'Koden for tre kinnskjeggsom du ser er feil. Hint: Hvert kinnskjegg er 75 piksler langt. Fiks koden som tegner kinnskjegget.'
      2-3 Artist Debugging 3_instruction: 'Båten min har ett hull! Kan du fikse det ved å endre vinkelen til linjen? Hint: Den siste vinkelen er feil med 15 grader.'
      2-3 Artist Debugging 4_instruction: Hva er bildet som vi prøver å tegne? Fullfør å koble prikkene sammen med riktige linjer og vinkler.
      2-3 Artist Debugging 5_instruction: 'Denne koden for benet og foten som du ser er feil. Hint: Foten er for lang. Vi må kansje slette et steg (ordspill ment)'
      2-3 Artist Debugging 6_instruction: Ser ut som om jeg sitter på en stol som mangler ett ben. Refiger blokker fpr å få benet.
      2-3 Artist Debugging 7_instruction: 'Ser ut som om C-en i "Code" er tegnet feil vei. Kan du får den til å se ut som en C?'
      2-3 Artist Debugging 8_instruction: Hjulet mitt er ikke fullført. Hvor mange ganger må jeg repetere for å fullføre det?
      2-3 Artist Debugging 9_instruction: 'Koden for denne stammen er feil. Hint: Vinkelen er feil med 60 grader'
      2-3 Artist Debugging Assessment 1_instruction: 'Denne formen er for liten. Kan du gjøre den større? Hint: Den skal være 75 piksler større på hver side.'
      2-3 Artist Free Play_instruction: Åpent brett! Tegn det du vil.
      2-3 Artist Functions 1_instruction: 'Hallo. Meg zombie artist. Meg tegne elsker! Hjelp meg med å tegne de firkantete brillene. Hint: mellomrommet mellom brilleglassene er 25 piksler kortere enn lengden på firkantene.'
      2-3 Artist Functions 10_instruction: Her er ti funksjoner, en til å tegne en stor del og en til å tegne en liten del. Bruk den til å tegne innsiden av en maskin!
      2-3 Artist Functions 11.5_instruction: 'Her er den samme "Tegn en sekskant" funksjonen. Hva skjer hvis du bare snur 60 grader hver gang du gjentar?'
      2-3 Artist Functions 11_instruction: 'Vi har omdøpt funksjonen "tegn en firkant" til "tegn en sekskant", men den tegner fortsatt bare firkanter! Kan du endre funksjonen "tegn en sekskant" til å tegne en sekskant med sider som er 50 piksler lange, og tegner bildet ved hjelp av funksjonen?'
      2-3 Artist Functions 12_instruction: 'Funksjoner er virkelig flott for å tegne komplekse ting flere ganger. Kan du bruke funksjonen "tegne en blomst" til å fylle resten av planteboksen? (Hint: planter er atskilt med 100 pikslers avstand)  '
      2-3 Artist Functions 13_instruction: Vi har gitt deg fire funksjoner. Bruk dem slik du vil i ett eller flere ledd for å lage bilder som du kan dele med vennene dine. Trykk Kjør for å se et eksempel.
      2-3 Artist Functions 2_instruction: 'Funksjoner lar deg definere nye blokker! Vi har flyttet blokker for å tegne et kvadrat i en funksjon kalt "tegne en firkant". Kan du bruke funksjonen "tegne en firkant" for å opprette vinduer? kvadratene er 75 piksler fra hverandre.'
      2-3 Artist Functions 3_instruction: Rediger funksjonen for å tegne en firkant med sider som er 115 piksler lange og tegn i stedet større ruter. Rutene er nå 45 piksler fra hverandre.
      2-3 Artist Functions 4_instruction: 'Bruk "gjenta" blokken til å tegne disse 3 rutene.'
      2-3 Artist Functions 7_instruction: 'Bruk funksjonen "tegn et hus" for å tegne to hus med to forskjellige parametere. (Hint: det første huset er 100 piksler).'
      2-3 Artist Functions 9_instruction: Her er funksjon for snøflak. Prøv deg frem med den for å lage en vinterscene. Dette er et åpent nivå så det er ingen oppgaver å løse. Ha det gøy!
      2-3 Artist Loops 1_instruction: Kan du lage en sekskant med sider som er 100 piksler lange for å fullføre cellen. Husk at det betyr at du da kun trenger å snu 60 grader.
      2-3 Artist Loops 10_instruction: Hva skjer med designet dersom vi halverer lengden av det siste steget?
      2-3 Artist Loops 11_instruction: 'Nå skal vi lage *enda en* løkke rundt hele skapelsen! Ikke glem å legge til en vinkel på slutten av den ytre sløyfen.'
      2-3 Artist Loops 2_instruction: Bruk en gjenta-blokk for å få cellen til et skall.
      2-3 Artist Loops 4_instruction: Vil du se hva som skjer når vi gjentar figuren igjen og igjen med en løkke?
      2-3 Artist Loops 5_instruction: Nå skal vi gjøre en liten endring i løkken og se hvor ulikt bildet blir.
      2-3 Artist Loops 6_instruction: Legg til en flytt-bevegelse og en snu-bevegelse til inne i løkka og se hvordan designet endrer seg.
      2-3 Artist Loops 7_instruction: Vi kan bruke løkker til å lage alle slags mangekanter. Kan du lage en firkant inni denne sekskanten?
      2-3 Artist Loops 8_instruction: La oss sette begge elementene inn i en løkke.
      2-3 Artist Loops 9_instruction: "Vi skal opprette de samme elementene, men nå skal vi legge til litt avstand mellom dem.\\r Bruk den samme koden som tidligere, men legg til et steg for å gå fram i slutten av den ytre løkka."
      2-3 Artist Loops New 1_instruction: La oss tegne hodet til denne roboten! Kan du lage et rektangel med sider som er 100 pixler lange?
      2-3 Artist Loops New 10_instruction: "Nå skal vi koble sammen en haug med V'er ved å tegne de i en løkke."
      2-3 Artist Loops New 11_instruction: Denne gangen skal vi tegne det 24 ganger. Legg til en 30 graders venstresving i koden og legg alt sammen inn i en gjenta-blokk.
      2-3 Artist Loops New 12_instruction: |
        Tegn en diamant der hver av sidene er 100 piksler.
        
      2-3 Artist Loops New 13_instruction: Nå tegner du diamanten 3 ganger inni en løkke.
      2-3 Artist Loops New 14_instruction: Nå skal vi tegne diamanten ti ganger men rotere den 90 ganger for hver diamant.
      2-3 Artist Loops New 15_instruction: Tegn noe morsomt.
      2-3 Artist Loops New 2_instruction: 'Her er litt av koden du brukte for å tegne kvadratet. Hva skjer dersom du bruker en "Gjenta" blokk for å kjøre denne koden fire ganger?'
      2-3 Artist Loops New 9_instruction: Tegn en enkel V der hver av sidene er 50 pixler for å fullføre pilen.
      2-3 Artist Match Hex Pic_instruction: 'Match: Hjelp til med å fullføre sekskanten.'
      2-3 Artist Match Rho Pic_instruction: 'Match: Fullfør koden.'
      2-3 Artist Match Sq Pic_instruction: 'Match: Fullfør koden'
      2-3 Artist Match Tri pic_instruction: 'Match: Fyll inn den koden som mangler.'
      2-3 Artist Nested Loops 1_instruction: "Du har brukt løkker til å tegne figurer før, men visste du at du kan putte en løkke inni en annen løkke?\\r Kjør en løkke 3 ganger over hele denne blokken av kode for å tegne mønsteret."
      2-3 Artist Nested Loops 10_instruction: Repeter dette mønsteret 12 ganger for å fullføre mønsteret.
      2-3 Artist Nested Loops 11_instruction: Repeter denne koden 4 ganger for å fullføre mønsteret. Snu 90 grader etter hver sirkel.
      2-3 Artist Nested Loops 12_instruction: Repeter denne koden 12 ganger for å fullføre svingene.
      2-3 Artist Nested Loops 2_instruction: Nå skal vi kjøre triangelblokken gjennom løkken 6 ganger. Etter hvert triangel må du snu 60 grader før du tegner det neste.
      2-3 Artist Nested Loops 3_instruction: For å tegne dette mønsteret må du repetere triangelet 12 ganger. Del antall grader i en sirkel (360)
      2-3 Artist Nested Loops 4_instruction: 'Repeter denne diamanten 12 ganger for å tegne en blomst. Tips: 12 diamanter er akkurat likt de 12 triangelen du laget sist. Hvor mye må du snu etter hver figur?'
      2-3 Artist Nested Loops 5_instruction: Tegn inn vinduene i denne bygningen med løkke i løkke. Vinduene er 20 pixler brede og med 20 pixler mellom hvert vindu.
      2-3 Artist Nested Loops 6_instruction: Dinosauren har 8 tagger langs halen sin; hver tagg er 30 pixler lang. Gjenta triangelet 8 ganger men pass på å beveg deg fremover etter hver.
      2-3 Artist Nested Loops 7_instruction: 'Gjenta dette triangelet 10 ganger for å tegne solen. Du må bevege deg og snu deg etter hvert triangel.  Du finner ut hvor mye du må snu deg ved å dele antall grader i en sirkel på antallet figurer som den består av.'
      2-3 Artist Nested Loops 8_instruction: 'Nå skal vi legge til litt gress på bildet.  Det er 50 pixler mellom hver gresstust.'
      2-3 Artist Nested Loops 9_instruction: Vi avslutter dette bildet ved å legge til en blomst. Repeter diamanten 12 ganger for å tegne blomsten.
      2-3 Artist Nested Loops Free Play_instruction: Frilek, tegn noe kul med løkker i løkker.
      2-3 Bee Conditionals 1_instruction: Hei! Jeg er en bie. Kan du hjelpe meg å samle nektar fra blomstene?
      2-3 Bee Conditionals 10_instruction: |
        Lilla blomster har enten 1 eller 0 nektar. Pass på at du ikke samler inn nektar fra en lilla blomst som ikke har nektar. 
        
      2-3 Bee Conditionals 11_instruction: Samle inn nektar dersom blomsten har nektar.
      2-3 Bee Conditionals 12_instruction: bruk en løkke for å sjekke og hente inn nektar fra alle disse blomstene.
      2-3 Bee Conditionals 13_instruction: 'Samle inn nektar og lag honning. Tips: hva skjer dersom du bruker "hvis nektar" på en rød blomst? Kan du fullføre dette med en løkke?'
      2-3 Bee Conditionals 14_instruction: 'Samle inn nektar og lag honning.  Pass på å ikke samle inn nektar fra de lilla blomstene som ikke har nektar.'
      2-3 Bee Conditionals 15_instruction: Samle inn nektar fra alle fire blomstene.
      2-3 Bee Conditionals 2_instruction: Hei, jeg er en bie! Hjelp meg å samle nektar fra alle blomstene. Bruk en løkke.
      2-3 Bee Conditionals 3_instruction: Hjelp meg å samle inn nektaren fra alle blomstene og lag honning. Bruk en løkke.
      2-3 Bee Conditionals 4_instruction: Hjelp meg å samle inn nektar fra blomstene og lag all honningen.
      2-3 Bee Conditionals 5_instruction: 'Lilla blomster har enten 1 eller 0 nektar, men du vet ikke hvilken! Pass på at du ikke prøver å samle inn nektar fra blomster som ikke har mer nektar. Sjekk om nektar er lik 1 ved å bruke en "hvis"-blokk.'
      2-3 Bee Conditionals 6_instruction: 'Bruk en "hvis"-blokk for å sjekke om det er nektar i blomsten.'
      2-3 Bee Conditionals 7_instruction: Samle inn nektar fra alle blomstene dersom de har nektar.
      2-3 Bee Conditionals 8_instruction: |
        Dette jordet har både røde og lilla blomster.
        Røde blomster har en kjent mengde med nektar, mens lilla har en ukjent mengde nektar.
        Samle inn all nektaren.
      2-3 Bee Conditionals 9_instruction: Samle inn nektar fra alle blomstene.
      2-3 Bee Conditionals Assessment 1_instruction: 'Lekse: Samle alle nektarene. Vær forsiktig så du ikke samler nektar fra en lilla blomst hvis den ikke har noen.'
      2-3 Bee Debugging 1_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 10_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 2_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 3_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 4_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 5_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. Du kan nå bruke "Kjør" og "Trinn".'
      2-3 Bee Debugging 6_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 7_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 8_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 9_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging Assessment 1_instruction: 'Lekse: Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Functions 1_instruction: 'Funksjoner er kodeblokker som utfører en bestemt oppgave. Bruk blokken "hent 2 nektar" til å samle inn nektar fra hver blomst.'
      2-3 Bee Functions 10_instruction: Lilla blomster har enten 1 eller 0 nektar. Lag en funksjon som samler bare samler inn nektar fra de blomstene som har nektar i seg.
      2-3 Bee Functions 2_instruction: 'Funksjoner er kodeblokker som utfører en bestemt oppgave. Bruk blokken "hent 5" til å samle inn 5 nektar om gangen. Pass på å bruk en løkke for å bruke ideelt antall blokker.'
      2-3 Bee Functions 3_instruction: Samle inn nektar fra alle blomstene.
      2-3 Bee Functions 4_instruction: 'Funksjonen "flytt og hent nektar" snur bien, samleren inn nektar og returnerer til der den startet. Bruk denne funksjonen til å samle inn all nektaren.'
      2-3 Bee Functions 5_instruction: Det er nå mer nektar i blomstene. Redigere funksjonen slik at den samler 4 nektar og bruk den til å samle alle nektar fra blomstene.
      2-3 Bee Functions 6_instruction: Bruk nå samme funksjonen til å samle nektar fra tre blomster.
      2-3 Bee Functions 7_instruction: Blomstene er nå lenger unna. Rediger funksjonen og bruk den til å samle alle nektar fra blomstene.
      2-3 Bee Functions 8_instruction: Lag din egen funksjon for å samle inn 7 nektar, beveger seg fremover og lager 7 med honning. Bruk funksjonen til samle nektar fra alle blomster og lag honning ved alle bikubene.
      2-3 Bee Functions 9_instruction: Lag din egen funksjon som går nedover stien, henter nektar, lager honning og får bien tilbake til toppen av stien.
      2-3 Bee Functions Assessment 1_instruction: 'Lekse: bruk funksjonen til å samle inn nektar fra alle blomstene.'
      2-3 Bee Functions Assessment 2_instruction: 'Lekse: Lag en funksjon som lager 3 honning om gangen.'
      2-3 Bee Loops 1_instruction: 'Hver blomst inneholder en enhet med nektar. Samle inn nektar fra alle blomstene. '
      2-3 Bee Loops 10_instruction: Får du til å bruke en mens-løkke inni to andre løkker for å samle inn all nektaren?
      2-3 Bee Loops 11_instruction: Bruk en mens-løkke til å samle alle nektarene fra blomstene i dette feltet.
      2-3 Bee Loops 12_instruction: Bruk en mens-løkke til å samle alle nektarene fra blomstene i dette feltet.
      2-3 Bee Loops 13_instruction: 'Lekse: Bruk repeter-blokken for å samle alle nektarene.'
      2-3 Bee Loops 1A_instruction: 'Hei, jeg er en bie. Kan du hjelpe meg med å samle alle nektarene fra disse blomstene? '
      2-3 Bee Loops 2_instruction: Bruk en løkke for å samle alle nektarene og å lage honningen.
      2-3 Bee Loops 2A_instruction: Klarer du å løse oppgaven lettere ved å bruke en løkke?
      2-3 Bee Loops 3_instruction: Samle inn nektar fra alle blomstene og lag honning i hver av bikubene.
      2-3 Bee Loops 3A_instruction: Kan du bruke en løkke til å samle inn all nektaren?
      2-3 Bee Loops 3B_instruction: Nå kan du bruke den nye gjenta-blokken for å samle inn nektar og lage honning.
      2-3 Bee Loops 4_instruction: 'Bruk en løkke som i forrige oppgave men ta med en "snu"-blokk.'
      2-3 Bee Loops 4A_instruction: |
        Hva skjer dersom du gjentar dette 3 ganger? 
        Ikke glem å lage honning til slutt!
      2-3 Bee Loops 5_instruction: Bruk en loop får å gå ned trinnene og samle inn nektaren.
      2-3 Bee Loops 6_instruction: Bruk en loop for å samle inn nektar fra alle blomstene og lag honing i alle bikubene.
      2-3 Bee Loops 7_instruction: Sett disse blokkene i en loop for å samle inn nektar fra alle blomstene.
      2-3 Bee Loops 8_instruction: 'De lilla blomstene har en ukjent mengde nektar. Bruk løkken "mens nektar" til å samle inn all nektaren. Denne løkken vil kjøre så lenge betingelsen er sann. I dette tilfellet er det dersom Nektar > 0'
      2-3 Bee Loops 9_instruction: Mens-løkken kan utføre de samme operasjonene som en hvis-setning.
      2-3 Bee Loops Assessment 1_instruction: Lekse – Bruke en mens-løkke til å samle inn all nektaren fra denne blomsten.
      2-3 Maze 1_instruction: 'Kan du hjelpe meg å fange den slemme grisen? Sett sammen et par «gå fremover» blokker og trykk "Kjør Program" '
      2-3 Maze 10_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze 11_instruction: Få meg bort til blomsten, jeg er sulten! Hvor mange ganger er du nødt til å repetere en blokk?
      2-3 Maze 12 (copy 1)_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hint: Lag en løkke ved å bruke "repeter ganger" blokk.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hint: Lag en løkke ved å bruke "repeter ganger" blokk.)'
      2-3 Maze 12 (old)_instruction: 'Få meg til grisen ved å bruk "Gjenga ganger" blokken!'
      2-3 Maze 12_instruction: |
        Klarer du å bytte ut disse fem blokkene med bare to blokker?
        (Tips: Lag en løkke ved å bruke en "gjenta ganger" blokk)
      2-3 Maze 13 (old)_instruction: 'Få meg til grisen ved å bruke "Gjenta til" blokken!'
      2-3 Maze 13_instruction: Få meg til grisen ved å bare bruke to blokker.
      2-3 Maze 14 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 14_instruction: 'Få meg til solsikken! (Hvor er "Gjenta ganger" blokken når jeg trenger den?)'
      2-3 Maze 15 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 15_instruction: Bruk to løkker for å bruke færre blokker for å komme frem til grisen.
      2-3 Maze 16 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 16 before_instruction: Få meg til grisen.
      2-3 Maze 16_instruction: Få meg til solsikken. Gjenta bevegelsene!
      2-3 Maze 2_instruction: Denne grisen har røsket i fjærene mine. Hjelp meg å få tak i han!
      2-3 Maze 3_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær!
      2-3 Maze 4_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze 5_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze 6_instruction: Hold deg i ro og hjelp meg med å finne den slemme grisen. Ellers blir jeg kanskje sinna!
      2-3 Maze 7_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze 8_instruction: Få meg til grisen!
      2-3 Maze 9_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze Loops 1_instruction: Kan du få meg bort til grisen ved å bruke kun 5 blokker?
      2-3 Maze Loops 17_instruction: Få meg til solsikken!
      2-3 Maze Loops 18_instruction: Få meg til solsikken!
      2-3 Maze Loops 19_instruction: Få meg til solsikken!
      2-3 Maze Loops 20_instruction: Få meg til solsikken!
      2-3 Maze Loops 21_instruction: Få meg til solsikken!
      2-3 Maze Loops Assessment 1_instruction: 'Lekse: Få meg til solsikken med bare 5 blokker!'
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 Maze sq10v2_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 maze sq11_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 maze sq12_instruction: 'Kan du erstatte det forrige svaret med en løkke ved å bruke en "repeter ganger"-blokk?'
      2-3 maze sq13_instruction: 'Kjære person. Meg zombie.. Må.... gå... til solsikken. Lage en løkke med "gjenta til" blokk.'
      2-3 maze sq14_instruction: Klarer du å komme deg til solsikken med bare fire blokker?
      2-3 maze sq15_instruction: Klarer du å komme deg til solsikken med bare fem blokker?
      2-3 maze sq16_instruction: Ok, dette ligner, men er litt annerledes. Kan du gjøre det med kun fem blokker?
      2-3 Maze sq2_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær!
      2-3 Maze sq3_instruction: Før meg til den grønne ondskapen! (Se opp for dynamitt)
      2-3 Maze sq4_instruction: Hold deg i ro og hjelp meg med å finne den slemme grisen. Ellers blir jeg kanskje sinna!
      2-3 Maze sq5_instruction: Få meg bort til grisen! Hvor mange ganger må du repetere en blokk?
      2-3 Maze sq6_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hing: Lag en løkke ved å bruke "repeter ganger"-blokk.)'
      2-3 Maze sq7_instruction: Få meg bort til den grønne inntrengeren ved å kun bruke tre blokker.
      2-3 Maze sq8_instruction: 'Få meg bort til grisen! (Hvor er den "repeter ganger"-blokken når jeg trenger den?)'
      2-3 Maze sq9_instruction: Opprett løkker for å komme bort til grisen ved bruk av færre blokker.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Hjelp fuglen å fange den slemme grisen ved å flytte den framover
      4-5 Artist 1_instruction: Hjelp meg å tegne ferdig boksen. (Hver linje er 300 pixler lang)
      4-5 Artist 10_instruction: 'Trykk på "Kjør" for å teste koden. Deretter, repeter det mange nok ganger til å fullføre tegningen. Fargene vil være forskjellig hver gang.'
      4-5 Artist 11_instruction: Fullføre grønne linjene. Linjene er 300 piksler lange og 15 piksler fra hverandre.
      4-5 Artist 2_instruction: Kan du fullføre kvadratet ved å repetere koden?
      4-5 Artist 3.5_instruction: 'Ok, prøv å se hva som kommer til å skje hvis du kjører denne koden (eller kjør den ved å trykke "Kjør"). Deretter, gjentar du dette helt til bildet er ferdig. Fargene vil mest sannsynlig bli forskjellig hver gang.'
      4-5 Artist 3_instruction: Dette rektangulære blomsterbedet har en omkrets på 600. Langsiden har en lengde på 200. Tegn rektangelet.
      4-5 Artist 4_instruction: Hvor mange grader er det i en sirkel? Gjenta blokkene for å lage en sirkel av farger.
      4-5 Artist 5_instruction: Hvilken vinkel bruker du?
      4-5 Artist 6_instruction: I et likesidig triangel er alle tre vinklene 60 grader. Hver side er 200 pixler. Fullfør tegningen.
      4-5 Artist 7_instruction: Denne rettvinklede trekanten har vinkler på 30, 60 og 90 grader. Den skrå linjen er dobbel så lang som høyden som er 100 pixler. Fullfør tegningen.
      4-5 Artist 8_instruction: Midtlinjen på en fotballbane er vinkelrett på sidelinjene. Denne banen har en omkrets på 800 pixler og er 240 pixler lang. Hvor bred er den? Tegn sidelinjene og midtlinjen.
      4-5 Artist 9_instruction: Tegn den andre halvparten slik at designet blir symmetrisk. Trekantene er likesidede og hver side er 50 pixler lange.
      4-5 Artist Assessment 1_instruction: 'Lekse: Bruk en løkke for å tegne en likesidig trekant. Hver side er 300 pixler.'
      4-5 Artist For Loops 1_instruction: Sett tallene 1 til 10 inn i bredde-boksene og kjør koden.
      4-5 Artist For Loops 11_instruction: 'Fullfør "for"-blokkene slik at den teller 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Hva skjer hvis du reverserer "fra" og "til"-tallene. Fullfør "for"-blokka så den teller 200, 180, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'Designet startet uten en "for"-løkke og bruker for mange blokker! Bruk en "for"-blokk til å fullføre spiralen. Hint: lengden på den siste linja er 250 piksler.'
      4-5 Artist For Loops 14_instruction: 'Noen startet koden, men innså at det måtte være en raskere måte! Bruk en "for"-blokk til å erstatte blokkene og fullfør triangel-spiralen. (Hint: lengden på den siste linja er 300 piksler.)'
      4-5 Artist For Loops 15_instruction: 'Noen startet koden, men innså at det måtte være en raskere måte! Bruk en "for"-blokk til å erstatte blokkene og fullfør sekskanten-spiralen. (Hint: lengden på den siste linja er 200 piksler.)'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: 'Hvordan kan vi telle fra 1 til 50? Endre "for"-blokka.'
      4-5 Artist For Loops 4_instruction: 'Gjør ferdig "for"-blokka slik at den teller fra 1 til 10 med 1-steg.'
      4-5 Artist For Loops 6_instruction: 'Tegn firkanter med sider på 50, 60, 70, 80 og 90 piksler. Du blir nødt til å bruke "tegn en firkant"-funksjonen fem ganger.'
      4-5 Artist For Loops 7_instruction: 'Tegn de samme firkantene, men bruk en "tell med"-brikke til å endre størrelsene. Plasser en "teller"-brikke i "tegn en firkant"-funksjonen. Hint: Den er i Variabler-kategorien.'
      4-5 Artist For Loops 8_instruction: 'Kan du fullføre programmet ved å plassere blokkene inn i en "for"-blokk som teller fra 10 til 200 med steg på 10? Du finner "for"-blokken i kategorien Løkker.'
      4-5 Artist For Loops 9_instruction: |
        Disse sirklene er av størrelser på 5, 10, 15, 20,
        25, 30 og 35. Tegn sirklene ved å bruke en "for"-løkke.
      4-5 Artist Free Draw 1_instruction: Fritegning. Tegn det du føler deg inspirert til.
      4-5 Artist Functions 1_instruction: Bruk en repeter-løkke til å tegne dette triangelet.
      4-5 Artist Functions 10a_instruction: |-
        Putt denne koden inn i "tegn et snøfnugg"-funksjonen og erstatt 50 med parameteret 'størrelse'. Funksjonen er allerede kalt på for å opprette et snøfnugg på 100 piksler.
      4-5 Artist Functions 10b_instruction: "Bruk 'tegn et snøfnugg'-funksjonen for å opprette snøfnugg av forskjellige størrelser. Hint: lengden på det første snøflaket er 25 og hvert snøfnugg er dobbelt så stort som det forrige."
      4-5 Artist Functions 11_instruction: '"tegn en sekskant"-funksjonen bruker "tegn en trekant"-funksjonen. Gjør ferdig sekskant-funksjonen. (Hint: En sekskant har 6 sider, hvor hver er 100 piksler lang)'
      4-5 Artist Functions 12_instruction: "Fullfør 'tegn bølger'-funksjonen. Hver bølge består av en Øvre bølge og en Nedre bølge. Hint: Tegn 5 blå bølger."
      4-5 Artist Functions 13 Free play_instruction: Her er noen funksjoner til å tegne planeter, stjerner, raketter og roboter. Bruk dem på hvilken måte du vil til å lage bilder du kan dele med vennene dine.
      4-5 Artist Functions 14 Free play_instruction: "Her har vi gitt deg flere funksjoner. Bruk dem på hvilken måte du vil inni en eller flere løkker for å lage bilder som du kan dele med vennene dine. Klikk 'Kjør' for å se et eksempel."
      4-5 Artist Functions 15 Assessment_instruction: 'Lekse: Bruk "tegn en firkant"-funksjonen til å opprette firkantene. Firkantene er 50, 100 og 150 piksler.'
      4-5 Artist Functions 2a_instruction: 'Putt disse blokkene inn i en ny funksjon kalt "tegn en liten trekant" og kall på den.'
      4-5 Artist Functions 2b_instruction: 'Opprett en funksjon kalt "tegn en liten trekant" ved å bruke de gitte blokkene.'
      4-5 Artist Functions 3_instruction: 'Opprett funksjonene "tegn en medium trekant" og "tegn en stor trekant". "Tegn en liten trekant"-funksjonen er opprettet for deg. Trekantene har sider med lengdene 50 (liten), 100 (medium) og 150 (stor). '
      4-5 Artist Functions 4_instruction: 'Эта новая функция "нарисовать треугольник" содержит параметр и может выполнять действия предыдущих трех функций. Нарисуйте такие же треугольники с помощью новой функции.'
      4-5 Artist Functions 5_instruction: 'Kan du endre "tegn en trekant"-funksjonen til å en "tegn et kvadrat"-funksjon for å endre tegningen?'
      4-5 Artist Functions 6_instruction: 'Bruk "tegn et kvadrat" og "tegn en trekant"-funksjonene til å tegne et hus. (Hint: Kvadratets sider er 200 piksler)'
      4-5 Artist Functions 6b_instruction: 'Bruk funksjonene tegn et kvadrat og trekant sammen med andre blokker for å lage et hus ved å legge dem til i "tegn et hus"-funksjonen og kalle den.'
      4-5 Artist Functions 7_instruction: 'Bruk "tegn et hus"-funksjonen til å tegne hus som er 100 piksler og 50 piksler. De to husene skal være separert med 50 piksler.'
      4-5 Artist Functions 8_instruction: 'Funksjonen "tegn en blomst" har et parameter som tillater deg å sette stilkens høyde. Sett den til 200 og se hva som skjer.'
      4-5 Artist Functions 9_instruction: Tegn disse 3 blomstene. Høyden på den første er 100 og den neste blomsten er alltid 50 piksler mer enn høyden på den forrige. Blomstene er også 100 piksler unna hverandre.
      4-5 Artist Patterns 1_instruction: Får du til å tegne dette kvadratet ved bruk av en løkke? Hver side er 20 piksler lang.
      4-5 Artist Patterns 10_instruction: 'Denne koden tegner to rader med sekskanter – Repeter hele kodeblokken 4 ganger for å tegne hele bikubemønsteret. Tips: Du må hoppe tilbake 120 piksler i den ytterste løkken for å hindre at artisten ikke tegner på utsiden av skjermen.'
      4-5 Artist Patterns 11_instruction: 'Hvor mange ganger må du repetere denne koden for å tegne en halvsirkel? Tips: Dersom deter 360 grader i en hel sirkel og hver repetisjon beveger seg 3 grader, hvor mange ganger må du repetere for å tegne en hel sirkel?'
      4-5 Artist Patterns 12_instruction: Hva skjer dersom du kopierer løkken og snur mot venstre fremfor høyre? Kan du du bruke en gjenta-blokk til å tegne denne bølgen?
      4-5 Artist Patterns 13_instruction: La oss nå gjenta det hele fire ganger for å opprette bilderammen. Se opp for hjørnene – du kan ikke bare snu deg 90 grader! En halvsirkel kan lages ved å repetere 3 grader 60 ganger. Så hvilke av disse kodeblokkene må du bruke for å lage en kvart-sirkel for hjørnene?
      4-5 Artist Patterns 2_instruction: Dersom du legger firkant-løkka inni en annen løkke kaller vi det en nestet løkke. Hva må du legge til i den ytre løkken for at alle 15 firkantene skal være på en linje ved siden av hver andre?
      4-5 Artist Patterns 3_instruction: Nå skal vi ta det et nivå lenger! Vi har nøstet hele kodeblokken inn in annen løkke, men du må få artisten på riktig plass for å tegne den neste linjen. Hvilke av disse kodeblokkene kan du plassere mot slutten av den ytre løkken for å tegne hele mønsteret.
      4-5 Artist Patterns 4_instruction: Denne diamanten har sider som er 50 piksler lange og vinkler på 120 og 60 grader. Tegn den ved hjelp av en løkke.
      4-5 Artist Patterns 5.5_instruction: Hvor mange ganger må vi repetere denne blokken for å tegne hele rutenettet av diamanter?
      4-5 Artist Patterns 5_instruction: |2
        Nå skal vi repetere den for å tegne en rekke med 6 diaamanter.
         Legg merke til at vi har endret på diamantkoden slik at den repeteres 3 ganger istedenfor 2 – Hvorfor tror du vi har gjort det?
      4-5 Artist Patterns 6_instruction: Hvor mange ganger er du nødt til å repetere denne blokka for å tegne hele rutenettet av diamanter?
      4-5 Artist Patterns 7_instruction: 'Nå skal vi endre koden fra forrige oppgave for å gjøre mønsteret litt mer komplisert. Legg merke til hvordan diamantene nå overlapper hverandre. Forsøk å endre den første "hopp tilbake" fra 100 til 50 (halvparten så langt) – Hvor langt skal artisten nå gå i det andre "hopp tilbake"'
      4-5 Artist Patterns 8_instruction: Bruk en løkke til å tegne en sekskant der hver side er 40 piksler og vinklene er på 60 grader.
      4-5 Artist Patterns 9.5_instruction: Nå skal vi repetere denne koden for å tegne to rader med sekskanter. Legg merke til hvordan den andre raden er forskjøvet mot høyre.
      4-5 Artist Patterns 9_instruction: 'Nå skal vi repetere den koden 3 ganger for å tegne hele rekken. Tips: Hver sekskant er 80 piksler på det bredeste.'
      4-5 Artist Patterns Free Play_instruction: Frilek – Prøv å lage ditt eget mønster!
      4-5 Bee Conditionals - FC Test_instruction: Bien vil bare ha nektar akkura nå. Ikke alle objektene er blomster, så sjekk under HVER ENESTE SKY for å se om det gjemmer seg en blomst der. Hvis det gjør det kan du samle nektar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Bien ser ikke forskjell på blomst og bikube. Bare samle inn nektar fra blomstene men sjekk først om det er blomst eller bikube.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Bien vil bare ha nektar akkurat nå. Husk, ikke alle er blomster, så sjekk etter at du bare samler nektar fra blomster.
      4-5 Bee Conditionals 3_instruction: Bien ønsker nå bare å lage honning. Sjekk at bien bare lager honning i bikubene.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 'Det ukjente objektet er enten en blomst eller en bikube. bruk "hvis/ellers" blokk til å samle inn nekter dersom det er en blomst, hvis ikke så lager du honning (fordi det er en bikube).'
      4-5 Bee Conditionals 5_instruction: 'Det kan være en blomst eller en bikube under skyene. Bruk "hvis/ellers"-blokken til å samle inn nektar dersom det er en blomst. Hvis ikke så lager du honning (for da er det en bikube).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Denne lilla blomsten kan ha enten 3, 2 eller 1 nektar. Her er en "hvis/ellers"-blokk kombinert med en annen "hvis/ellers"-blokk for å danne en "Hvis/ellers hvis, ellers"-blokk. fullfør løsningen for å samle inn en ukjent mengde med nektar.'
      4-5 Bee Conditionals 7_instruction: 'Husk at lilla blomster kan ha 3,2 eller 1 nektar. Fullfør "kontroller lilla blomster" funksjonen og bruk den til å samle inn nektar fra alle blomstene.'
      4-5 Bee Conditionals 8_instruction: 'Skriv en funksjon inni blokken som heter "Sjekk blomst og lag honning". Funksjonen din skal sjekke hvor mye nektar det er i den lilla blomsten og hente den. Deretter skal den bevege seg fremover og så lage honning.'
      4-5 Bee Conditionals Assessment 1_instruction: |
        Lekse: Denne koden er feil.
        Fullfør "hent nektar og lag honning" funksjonen, deretter bruker du den til å samle inn all nektar og honning. Husk at lilla blomster kan ha 3, 2 eller 1 nektar.
      4-5 Bee Debugging 1_instruction: Disse blokkene plager meg. Får du til å fikse de?
      4-5 Bee Debugging 10_instruction: Finn feilene og fiks dem.
      4-5 Bee Debugging 11_instruction: Teller denne riktig?
      4-5 Bee Debugging 2_instruction: Hjelp bien å finne nektar for å lage honning.
      4-5 Bee Debugging 3_instruction: Finn feilene og fiks dem.
      4-5 Bee Debugging 4_instruction: Disse blokkene fungerer ikke. Hva er mønsteret?
      4-5 Bee Debugging 5_instruction: Noe er ikke rett her...
      4-5 Bee Debugging 6_instruction: De lilla blomstene har en ukjent mengde nektar. Fiks blokkene for å hente ut all nektaren fra blomsten.
      4-5 Bee Debugging 7_instruction: Denne funksjonen mangler noe...
      4-5 Bee Debugging 8_instruction: Denne funksjonen er fin, men den er ikke riktig brukt.
      4-5 Bee Debugging 9_instruction: Hvorfor lager ikke bien nok honning?
      4-5 Bee Debugging Assessment 1_instruction: 'Lekse: Fiks koden.'
      4-5 Bee Nested Loops 1_instruction: Bruk en løkke til å samle inn all nektaren.
      4-5 Bee Nested Loops 2_instruction: Samle inn all nektaren fra alle blomstene. Bruk løkke i løkke.
      4-5 Bee Nested Loops 3_instruction: Putt koden som er lagt til i en løkke i løkke til å samle inn alt nektaren.
      4-5 Bee Nested Loops 4_instruction: Samle inn all nektaren fra hver blomst og lag honning i alle bikubene. Bruk løkke i løkke.
      4-5 Bee Nested Loops 5_instruction: Samle inn all nektaren ved å bruke en løkke i løkke.
      4-5 Bee Nested Loops 6_instruction: Samle all nektaren.
      4-5 Bee Nested Loops 7_instruction: Putt denne løkken inni en annen løkke for å opprette en løkke i løkke til å samle inn all nektaren fra blomstene.
      4-5 Bee Nested Loops 8_instruction: 'Samle all nektaren fra disse blomstene ved å bruke løkke i en annen mens-løkke. Erstatt den indre repeter antall-blokka med en mens-løkke. '
      4-5 Bee Nested Loops 9_instruction: 'Samle inn all nektaren fra disse blomstene ved å bruke en løkke i løkke ved å legge "så lenge"-brikken i en "gjenta"-brikke.'
      4-5 Bee Nested Loops Assessment 1_instruction: 'Lekse - Samle inn all nektaren og lag all honningen ved bruk av løkker.'
      4-5 Bee Nested Loops Rows_instruction: Samle nektar fra radene med blomster! Bruk løkke i løkke.
      4-5 Maze 1 (copy 1)_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 1_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 10_instruction: Klarer du å komme deg til solsikken med bare fire blokker?
      4-5 Maze 11_instruction: Kan du komme deg til solsikken med bare seks blokker.
      4-5 Maze 12_instruction: OK, denne er litt anderledes. Klarer du å få det til med bare seks blokker?
      4-5 Maze 13_instruction: Få meg til grisen!
      4-5 Maze 14_instruction: Få meg bort til grisen! Bruk Gjenta til-blokka.
      4-5 Maze 2 (copy 1)_instruction: Få zombien til solsikken men unngå den kjøttetende planten!
      4-5 Maze 2_instruction: Få zombien til solsikken men unngå den kjøttetende planten!
      4-5 Maze 3 (copy 1)_instruction: Må... komme... meg til solsikke.
      4-5 Maze 3_instruction: Må... komme... meg til solsikke.
      4-5 Maze 4 (copy 1)_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      4-5 Maze 4_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      4-5 Maze 5 (copy 1)_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 5_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 6 (copy 1)_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 6_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 7_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 8_instruction: 'Bruk "Gjenta"-blokken til å få zombien til solsikken. (Unngå de kjøttetende plantene!)'
      4-5 Maze 9_instruction: 'Lag en løkke med "gjenta til" blokk.'
      4-5 Maze Assessment 1_instruction: 'Lekse: Få meg til solsikken.'
      4-5 Maze Conditionals 1_instruction: 'Bruk "gjenta til" blokk for å få zombien til solsikken.'
      4-5 Maze Conditionals 2_instruction: 'Bruk "gjenta til" blokk for å få zombien til solsikken.'
      4-5 Maze Conditionals 3_instruction: 'Bruk "Hvis" blokken for å la meg bestemme jeg skal snu. Tips: du trenger bare en til blokk, men lær hvordan vi sette den opp slik at du kan gjøre det på din egenhånd neste gang.'
      4-5 Maze Conditionals 4_instruction: 'Ok, denne er helt lik den forrige oppgaven men du må huske hvordan du brukte "hvis"-blokken og deretter "Gjenta"-blokken sammen.'
      4-5 Maze Conditionals 5_instruction: 'Meg vil ha solsikke! Bruk en "Hvis" blokk til å få meg dit med så få blokker som mulig.'
      4-5 Maze Conditionals 6_instruction: 'Meg vil ha solsikke! Bruk en "Hvis" blokk til å få meg dit med så få blokker som mulig.'
      4-5 Maze Conditionals 7_instruction: 'Ok, la oss øve på den en gang til - denne er ikke så forskjellig, men pass deg for de kjøttetende plantene!'
      4-5 Maze Conditionals 8_instruction: '"Hvis-ellers"-blokken sjekker en betingelse og utfører det ene ELLER det andre. For å få meg til solsikken, prøve å bruke denne blokken.'
      4-5 Maze Conditionals 9_instruction: 'En siste øvelse med "hvis-ellers"-blokken. Klarer du å gjøre det riktig på første forsøk?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Bruk en "gjenta til"- og en "hvis eller"-blokk for å få meg til solsikken med så få blokker som mulig.'
      4-5 Nested Loops 1_instruction: 'Fullfør koden for å tegne disse triangelen. Den første er gjort ferdig for deg. Tips: 3 triangler rotert til sammen 360 grader.'
      4-5 Nested Loops 10_instruction: Tegn den siste raden med stjerner på flagget ved å kjøre en løkke over de gitte blokkene. Stjernene er 50 piksler fra hverandre, men husk at stjernene er 30 piksler i bredde.
      4-5 Nested Loops 11_instruction: Klarer du å tegne de 10 firkantene på fortauet ved å bruke en løkke i løkke? Hver firkant er 30 piksler.
      4-5 Nested Loops 12_instruction: Får du til å tegne disse 36 trianglene ved hjelp av en løkke i løkke?
      4-5 Nested Loops 2_instruction: 'Nå skal du putte denne løkken inni en annen løkke for å tegne 10 triangler. Dette kalles en løkke i løkke. Tips: Alle 10 trianglene utgjør til sammen en rotasjon på 360 grader.  '
      4-5 Nested Loops 3_instruction: "Tegn en sol ved å legge koden fra utgangspunktet inni en annen løkke. Dette kalles en løkke i løkke.\\r\n"
      4-5 Nested Loops 5_instruction: Bruk koden som er lagt inn som utgangspunkt og repeter den for å lage en vindmølle.
      4-5 Nested Loops 6_instruction: Får til til å tegne en sekskant ved å repetere triangelkoden?
      4-5 Nested Loops 7_instruction: 'Repeter designet 10 ganger. Hvor mye må du rotere i hver repetisjon? (Tips: Hva er 360 delt på 10?)'
      4-5 Nested Loops 8_instruction: 'Repeter designet 6 ganger. Hvor mye må du rotere i hver repetisjon? (Tips: Hva er 360 delt på 6?)'
      4-5 Nested Loops 9_instruction: Tegn tennene i munnen til alligatoren!
      4-5 Nested Loops Assessment 1_instruction: Bruk en løkke i løkke for å fullføre designet.
      4-5 While Loops 1_instruction: 'Flytt meg til hullet og bruk en "fylle"-blokk til å fylle det med to spader med jord.'
      4-5 While Loops 2_instruction: 'Flytt meg til jordhaugen og bruk "Fjern 1" blokken til å fjern den på fem spadetak.'
      4-5 While Loops 3_instruction: 'Flytt meg til jordhaugen og fjern alt sammen. Etterpå flytter du meg til hullet og fyller det helt opp. Tips: bruk så få blokker som mulig.'
      4-5 While Loops 4_instruction: Wow, jeg fant et virkelig dypt hull! Jeg vet ikke hvor mange spadetak med jord det tar å fylle det. Kan du skrive et program som fyller oppi det til bakken er helt jevn? Tips bruk en mens-løkke denne gangen.
      4-5 While Loops 5_instruction: Wow, nå er det to dype hull. Får du til å skrive et program som fyller de begge til bakken er helt jevn?
      4-5 While Loops 6_instruction: Wow, nå er det en stor jordhaug der! Klarer du å skrive et program som fjerner hele haugen slik at bakken blir helt jevn?
      4-5 While Loops 7_instruction: Wow, nå er det tre hauger med jord der. Får du til å skrive et program som fjerner alle sammen slik at bakken blir helt jevn?
      4-5 While Loops 8_instruction: 'Det er et virkelig dypt hull og en virkelig stor haug med jord. Hvor mange spadetak må tas for å gjøre bakken helt flat? Tips: bruk en mens løkke for begge to.'
      4-5 While Loops Assessment 1_instruction: Det er mange hull og hauger. Hjelp meg og fylle og fjerne de slik at bakken blir helt jevn.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Bruk en løkke i løkke for å fullføre designet.
      Auto Open Function Editor_instruction: 'Du kan kalle på funksjoner fra innsiden av andre funksjoner! Bruk "figur"-funksjonen som grunnlag, opprett 3 hus-figurer som hver er 20 piksler større enn den forrige. Den første starter på 50 piksler i lengde. Å bruke en teller-løkke kan være nyttig. '
      Bee Recommended Blocks test_instruction: 'Lilla blomster har enten 1 eller 0 nektar, men du vet ikke hvilken! Pass på at du ikke prøver å samle inn nektar fra blomster som ikke har nektar. Sjekk om nektar er lik 1 ved å bruke en "hvis"-blokk.'
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Denne bien har mye å gjøre! Legger du merke til noen mønstre som går igjen i koden din og som du kan bruke til å forenkle koden?
      Busy Bee_instruction: Denne bien har mye å gjøre! Legger du merke til noen mønstre som går igjen i koden din og som du kan bruke til å forenkle koden?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: 'Hei, jeg er en bie! Kan du hjelpe meg å samle nektar fra disse blomstene? '
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: 'Kan du gjøre akkurat det samme på en enklere måte med en "gjenta"-løkke?'
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kan du få meg bort til grisen ved å bruke kun 5 blokker?
      Course 4 2_instruction: Bien vil bare ha nektar akkurat nå. Husk, ikke alle er blomster, så sjekk etter at du bare samler nektar fra blomster.
      Course 4 Artist 1_instruction: Hjelp meg å tegne ferdig boksen. (Hver linje er 200 pixler lang)
      Course 4 Artist 10_instruction: 'Frilek: Ha det gøy og tegn det det du har lyst til. '
      Course 4 Artist 11_instruction: 'Nå til en utfordring! Her er et design som kun bruker blokker som du allerede har blitt vist. Kan du finne ut hvordan du kan gjenskape det uten noen ekstra informasjon? Hint: Ikke vær redd for å prøve og feile. Det er ikke forventet at du får det til perfekt første gangen.'
      Course 4 Artist 12_instruction: "Fritt spill-inspirasjon: Du har nå lært alt du trenger å vite for å lage et mønster som dette! Hvis dette bildet inspirerer deg, prøv å lage noe lignende. Hvis ikke, lag noe helt på egenhånd.\\r\n\n\\r\nVil du vite hvordan vårt inspirasjons-mønster ble laget? Besøk https://studio.code.org/c/105671120/edit for å se løsningen."
      Course 4 Artist 13_instruction: Spiller du fortsatt? Her er et blankt lerret hvor du kan designe alt du vil!
      Course 4 Artist 2_instruction: Kan du repetere denne koden slik at den tegner det nedtonede kvadratet?
      Course 4 Artist 20_instruction: Spiller du fortsatt? Her er et blankt lerret hvor du kan designe alt du vil!
      Course 4 Artist 3_instruction: 'Ok, prøv å se hva som kommer til å skje hvis du kjører denne koden (eller kjør den ved å trykke "Kjør"). Deretter, gjentar du dette helt til bildet er ferdig.'
      Course 4 Artist 4_instruction: Hvor mange grader er det i en sirkel? Fyll dette tallet inn i gjenta-blokken for å lage en sirkel av farger.
      Course 4 Artist 5_instruction: Tegn den andre halvparten av dette designet slik at det blir symmetrisk. Trianglene er likesidet med sider på 50 piksler.
      Course 4 Artist 6_instruction: 'Fullfør koden for å tegne disse triangelen. Tips: 3 triangler rotert til sammen 360 grader.'
      Course 4 Artist 7_instruction: 'Nå skal du putte denne løkken inni en annen løkke for å tegne 10 triangler. Dette kalles en nestet løkke. Tips: Alle 10 trianglene utgjør til sammen en rotasjon på 360 grader.  '
      Course 4 Artist 8_instruction: Tegn solen ved å repetere denne kodeblokken 12 ganger.
      Course 4 Artist 8a_instruction: "Husker du denne figuren? Nå skal du bygge den uten at vi gir deg noen blokker å starte med!\\r\nHint: Det er 3 triangler innenfor 360 graders rotasjon... Hvor mange ganger går 3 opp i 360?"
      Course 4 Artist 9_instruction: 'Repeter dette designet 10 ganger og pass på at du roterer mellom hver figur som blir tegnet. Her har du et hint angående hvor mye du må snu deg: Hva er 360 delt på 10?'
      Course 4 Artist Binary 1_instruction: "Her er en funksjon som tar en binær-streng av 1-ere og 0-ere og instruerer kunstneren til å følge dem fra venstre til høyre, opp og ned. Artisten vil fylle inn rutene hvis den ser en 1 og ignorere ruta hvis den ser en 0. \\r\n\\r\nKjør denne koden for å se hvordan artisten bruker binær-strengen til å tegne dette mønsteret."
      Course 4 Artist Binary 1a_instruction: "Her er en funksjon som tar en binær-streng av 1-ere og 0-ere og instruerer kunstneren til å følge dem fra venstre til høyre, opp og ned. Artisten vil fylle inn rutene hvis den ser en 1 og ignorere ruta hvis den ser en 0. \\r\n\\r\nKjør denne koden for å se hvordan artisten bruker binær-strengen til å tegne dette mønsteret."
      Course 4 Artist Binary 2_instruction: Hvilke av disse binære strengene kan du gjenta 8 ganger for å tegne dette bildet?
      Course 4 Artist Binary 3_instruction: Kan du tegne dette mønsteret ved å kjøre en løkke over en tresifret binærstreng?
      Course 4 Artist Binary 4_instruction: Hver binærstreng representerer en rad i dette bildet. Kan du ordne strengene slik at de tegner et smile-ansikt i stedet for et trist ansikt?
      Course 4 Artist Binary 5_instruction: Hvilken 6-siftret binærstreng, repetert 11 ganger, vil tegne dette bildet?
      Course 4 Artist Binary 6_instruction: Hva er den korteste binærstrengen du kan repetere for å tegne dette bildet?
      Course 4 Artist Binary 7_instruction: Fullfør tegningen.
      Course 4 Artist Binary Free Play 2_instruction: 'Fritt splitt: Her er et lerret med høyere oppløsning du kan tegne på - 16 biter ganger 16 biter!'
      Course 4 Artist Binary Free Play 2a_instruction: "Her er et lerret å tegne på med høyere oppløsning - 16 ganger 16 piskler!\\r\n\\r\nSe hva som skjer når vi blir kreative med bitene!"
      Course 4 Artist Binary Free Play 2b_instruction: Klikk her for å se hint.
      Course 4 Artist Binary Free Play_instruction: 'Fritt spill: Tegn hva du vil med binærstreng!'
      Course 4 Artist Binary pre1_instruction: "Binær er en måte å representere informasjon ved å bare bruke to alternativer. Vi skal bruke alternativene \"av\" (representert av tallet 0) og \"på\" (representert av tallet 1). \\r\n\\r\nVi har gitt deg et rutenett av \"piksler\" som du kan gå igjennom og lage mønstre ved å skru på spesifikke ruter. Kan du få artisten til å tegne \"01010101\" i binært i første rad?"
      Course 4 Artist Binary ryan_instruction: "Binær er en måte å representere informasjon ved å bare bruke to alternativer. Vi skal bruke alternativene \"av\" (representert av tallet 0) og \"på\" (representert av tallet 1). \\r\n\\r\nVi har gitt deg et rutenett av \"piksler\" som du kan gå igjennom og lage mønstre ved å skru på spesifikke ruter. Kan du få artisten til å tegne \"01010101\" i binært i første rad?"
      Course 4 Artist For  Functions 10_instruction: 'Kan du tegne en stjerne-figur ved å bruke "Tegn en kvadrat-linje"-funksjon? Lykke til!'
      Course 4 Artist For  Functions 11_instruction: 'Kan du tegne en stjerne-figur ved å bruke "Tegn en kvadrat-linje"-funksjon? Lykke til!'
      Course 4 Artist For Loops 1_instruction: 'Tegn denne trekanten som er 50 piksler i størrelse. Hing: Bruk en gjenta-blokk.'
      Course 4 Artist For Loops 10_instruction: Tid for fritt spill! Ha det gøy med å tegne hva enn du har lyst til med blokkene du har lært å bruke
      Course 4 Artist For Loops 11_instruction: 'Husker da vi brukte en variabel til å styre antallet sider i en figur? Mønsteret starter med en trekant og legger til en side av gangen inntil det tegner et dekagon (10 sider). Hver side skal være 100 piksler lang. Hint: 360 delt på antall sider en figur har er antall grader du skal snu.'
      Course 4 Artist For Loops 11a_instruction: "La oss sette alt sammen! Bruk din kunnskap om \"for-løkker\" og \"teller\", opprett tegningen hvor hver side har to sider mer enn den forrige. Kontroller at hver side er 10 ganger så lang som antallet sider i polygonet.\\r\n\\r\nSvært lite av koden har blitt gitt til deg her."
      Course 4 Artist For Loops 12_instruction: 'Det så kult ut, men nå vil jeg tegne hver figur ved siden av den forrige. Denne gangen er hver side 20 piksler. Bruk en hopp-blokk til å hoppe 40 piksler fram etter hver figur. '
      Course 4 Artist For Loops 13_instruction: Hmmm, disse figurene blir større hver gang! Løste vi ikke allerede dette problemet med variabler? Hvordan kan vi bruke teller-variabelen til å gjøre sidene mindre når det er flere av dem? I stedet for å flytte framover med et gitt antall, prøv å flytte framover med (100 / teller) piksler.
      Course 4 Artist For Loops 14_instruction: Hvis du snur litt mer eller litt mindre enn du normalt ville ha gjort for en figur lager det en stilig effekt. Prøv å snu 89 grader for å lage denne vridde kvadrat-spiralen.
      Course 4 Artist For Loops 15_instruction: 'Fritt spill: Prøv å lage noen tegninger selv ved å bruke for-løkker. Vi har lagt til noen generiske variabler for deg som du kan bruke også.'
      Course 4 Artist For Loops 2_instruction: 'Jeg har puttet koden for å tegne en trekant inni en for-løkke som teller fra 50 til 100 med steg på 10. Ta en kikk på hvordan jeg har bygd koden og klikk "Kjør" når du er klar for å se den i aksjon. '
      Course 4 Artist For Loops 3_instruction: Den minste trekanten har sider på 20 piksler, den største har sider på 200 piksler, og hver trekant er 20 piksler større enn den forrige. Oppdater for-løkkene for å tegne disse trekantene.
      Course 4 Artist For Loops 4_instruction: 'Bruk en for-løkke til å tegne disse firkantene. De starter med sider på 50 piksler, det største har sider på 300 piksler, og hver firkant er 25 piksler større enn den forrige. Jeg har gitt deg nesten all koden du trenger - du mangler en brikke, hvilken er det? '
      Course 4 Artist For Loops 5_instruction: 'Godt jobba på den siste oppgaven! La oss bruke "teller"-variabelen igjen til å tegne dette kule bildet. '
      Course 4 Artist For Loops 6_instruction: Fritt spill! Prøv å bruke en for-løkke til å tegne et voksende-figur mønster som du designer selv.
      Course 4 Artist For Loops 6a_instruction: Gjør tre små endringer i koden fra forrige nivå for å få til dette!
      Course 4 Artist For Loops 7_instruction: 'Hva skjer hvis du fjerner "Repeter 3" fra denne algoritmen, beholder blokkene "flytt" og "snu"i løkka? I denne spiral-trekanten er hver side 20 piksler lenger enn den forrige.'
      Course 4 Artist For Loops 8_instruction: Den korteste linja i denne kvadrat-spiralen er 10, den største er 200 og hver linje er 10 piksler lenger enn den forrige. Kan du fylle inn de manglende blokkene i dette stilige bildet?
      Course 4 Artist For Loops 8a_instruction: Den korteste linja i denne kvadrat-spiralen er 10, den største er 200 og hver linje er 10 piksler lenger enn den forrige. Kan du fylle inn de manglende blokkene i dette stilige bildet?
      Course 4 Artist For Loops 9_instruction: Kan du lage en spiral? Flytt framover fra 1 til 75 piksler, øk med 1 piksel hver gang.
      Course 4 Artist For Loops Challenge_instruction: "Kan du finne ut hvordan du bruker alle tingene du har lært til å lage dette bildet?\\r\n\\r\nTrenger du et hint? Klikk her."
      Course 4 Artist For Loops inspire_instruction: "Fritt spill-inspirasjon: Du har nå lært alt du trenger å vite for å vite for å lage et mønster som dette! Hvis du liker dette bildet, prøv å lage noe lignende. Hvis ikke kan du lage noe helt annet.\\r\n\\r\nVil du vite hvordan vårt inspirasjons-mønster ble laget? Besøk https://studio.code.org/c/106387604 for å se løsningen."
      Course 4 Artist Functions 1_instruction: Kan du tegne et kvadrat som er 100 piksler i lengde ved å bruke en løkke?
      Course 4 Artist Functions 10_instruction: Hvilken blokk må du legge til for å få trekanten til å stå på toppen av kvadratet?
      Course 4 Artist Functions 11_instruction: 'Sjekk ut denne koden som tegner en kube - kan du flytte den inn i en funksjon kalt "Tegn en kube"'
      Course 4 Artist Functions 12.1_instruction: 'La oss lage en funksjon som heter "tegn en åttekant 20" som tegner en åttekant hvor hver side er 20 piksler lange.'
      Course 4 Artist Functions 12_instruction: Kjør en løkke over firkant-funksjonen for å tegne en linje
      Course 4 Artist Functions 13.1_instruction: "La oss nå lage en funksjon som heter \"hopp til øvre høyre\". Den skal flytte kunstneren til det øvre, høyre hjørnet av åttekanten som du akkurat tegnet. Funksjonen skal fullføre mønsteret.\\r\n\\r\nHint: For å komme deg opp til det øvre, høyre hjørnet, prøv å hoppe i et mønster som lager bare 3/8 av åttekanten."
      Course 4 Artist Functions 13_instruction: 'Vi har lagt til en ny funksjon kalt "tegn en linje av firkanter". Ta gjerne en kikk inni funksjon-blokka for å se hvordan vi lagde den. Klikk "Kjør" når du er klar for neste oppgave.'
      Course 4 Artist Functions 14.1_instruction: 'La oss lage en funksjon kalt "hopp til øvre høyre" som flytter kunstneren til hjørnet øverst til høyre i åttekanten.'
      Course 4 Artist Functions 14_instruction: 'Bra jobba! Bruk den nye "Tegn en linje av firkanter"-funksjonen til å tegne en firkant-figur. Husk at hver firkant er 40 piksler i lengde.'
      Course 4 Artist Functions 15_instruction: 'La oss fortsette, kan du tegne en stjerne-figur ved å bruke "tegn en linje av firkanter"-funksjonen? Lykke til! Hint: du må snu 144 grader'
      Course 4 Artist Functions 2_instruction: 'Kan du tegne 3 firkanter med 20 piksler mellomrom? Hint: hver firkant er 100 piksler i størrelse'
      Course 4 Artist Functions 3_instruction: "Kan du tegne dette bildet ved å bruke \"tegn et kvadrat\"-funksjonen? Hint: hvert kvadrat er 120 piksler fra hverandre.\\r\n"
      Course 4 Artist Functions 4_instruction: 'Er du klar for å lage din egen "Funksjon-blokk"? Klikk på "Funksjon"-blokka i verktøyboksen, gi den navnet "tegn en trekant". Deretter opprett en trekant slik du har gjort tidligere med Handling- og Løkke-blokker. Klikk så på Lagre og Lukk i øvre høyre hjørne. Hint: Opprett en trekant som er 100 piksler i lengde. Lykke til!'
      Course 4 Artist Functions 5 OLD_instruction: 'La oss prøve å bruke to funksjoner til å tegne et hus - hva må fikses i denne koden for å tegne huset riktig?'
      Course 4 Artist Functions 5_instruction: "Kan du tegne dette bildet ved å bruke \"tegn et kvadrat\"-funksjonen? Hint: hvert kvadrat er 120 piksler fra hverandre.\\r\n"
      Course 4 Artist Functions 6_instruction: Hvilken blokk må du legge til for å få trekanten til å stå på toppen av kvadratet?
      Course 4 Artist Functions 7_instruction: Kan du tegne en linje av firkanter ved å bruke en firkant-funksjon? Hver firkant er 40 piksler i lengde.
      Course 4 Artist Functions 8_instruction: 'Begynner du å få taket på hvordan du bruker funksjons-blokker? La oss endre dette kvadratet så det er 200 piksler i størrelse. Hint: klikk på "endre" for å endre størrelsen på "tegn et kvadrat" i funksjons-redigeringen. Husk å klikke på "lagre og lukk" for å gå ut av funksjons-redigeringen. '
      Course 4 Artist Functions 9_instruction: Vi har gitt det mesteparten av koden til å opprette en funksjon. Allikevel, det ser ut til at det er noe som mangler. Kan du fullføre denne funksjons-blokken?
      Course 4 Artist Functions challenge_instruction: Klikk her for å se hintene en gang til.
      Course 4 Artist Functions Inspiration_instruction: Klikk her for å se hintene en gang til.
      Course 4 Artist Functions inspire_instruction: Klikk her for å se inspirasjonsbildet igjen.
      Course 4 Artist Inspire_instruction: "Fritt spill: Du har nå lært alt du trenger å vite for å lage et mønster som dette! Hvis du liker dette bildet, prøv å lage noe lignende. Hvis ikke, lag noe helt annet.\\r\n\n\\r\nVil du vite hvordan vårt mønster ble laget? Besøk https://studio.code.org/c/105765376/edit for å se løsningen."
      Course 4 Artist Params 1_instruction: La oss redigere en funksjon som tegner et kvadrat med sider på 50 piksler
      Course 4 Artist Params 10_instruction: 'Du kan kalle på funksjoner fra innsiden av andre funksjoner! Bruk "figur"-funksjonen som grunnlag, opprett 3 hus-figurer som hver er 20 piksler større enn den forrige. Den første starter på 50 piksler i lengde. Å bruke en teller-løkke kan være nyttig. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 'Bruk din "hjul"-funksjon til å tegne hver av disse figurene. Lengden på siden av hvert bilde er 50 piksler.'
      Course 4 Artist Params 13_instruction: 'Fritt spill: Her er funksjonene du har skrevet og noen til du kan spille med. Tegn noe tøft!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Tøft! Kan du tegne hver av disse trekantene med den nye funksjonen? Den første er 25 piksler lang, den andre er 50 og den tredje er 75. '
      Course 4 Artist Params 4_instruction: Kan du legge til en ny funksjon kalt firkant? Den bør også ta inn et parameter for lengde, akkurat som trekanten. Denne gangen skal du tegne 3 firkanter 25, 50 og 75 piksler i lengde, 100 piksler fra hverandre.
      Course 4 Artist Params 5_instruction: |
        Bruk begge de nye funksjonene til å tegne dette bildet. For å gjøre det lettere kan du bruke en løkke med en "teller"-parameter.
        
      Course 4 Artist Params 6_instruction: 'La oss redigere denne "tegn en figur"-funksjonen. Den har alt et parameter "lengde". La oss endre funksjonen så den også har et parameter "sider". Husk at vinkelen du skal snu i en gitt figur er 360 delt på antall sider figuren har. Hint: Lengdene for figurene er: for trekanten 100 piksler, sekskanten 25 piksler og firkanten 50 piksler. '
      Course 4 Artist Params 7_instruction: 'Kan du tegne disse figurene ved å fylle ut "???"? Firkanten og trekanten er 100 piksler i størrelse mens sekskanten er 75 piksler i størrelse. '
      Course 4 Artist Params 8_instruction: |
        Finner du ut hvordan du kan tegne denne figuren? Her er et hint: Lag en ny funksjon med 6 sider kalt en sekskant.
        
      Course 4 Artist Params 9_instruction: 'Husker du da vi brukte teller-løkka, men fjernet en løkke inni? La oss ha det litt gøy og bruke "tegn en figur"-funksjonen med parameterne "sider" og "lengde". Kan du gjenskape disse figurene? Firkant-telleren skal være 5/100/5, trekant-telleren skal være 10/100/10 og sekskanten 2/100/2.'
      Course 4 Artist Var 9_instruction: 'Her er algoritmen for å tegne en trekant. Endre den så den bruker "sider"-variabelen i stedet. Erstatt nummeret 3 med "sider"-variabelen. Hint: Husk å bruke "angi sider"-blokken.'
      Course 4 Artist Vars 1_instruction: Kan du hjelpe meg å tegne et triangel? Det er 100 piksler langt på hver side.
      Course 4 Artist Vars 10_instruction: 'Her er en algoritme som bruker mindre triangler til å tegne et stort triangel. Kan du endre det slik at det bruker varabelblokken "sider" til å tegne hvert triangel. Se gjennom koden og hver gang du ser tallet 3 erstatter du det med en "sider" variabel. Huske å bruke "set sider" blokken.'
      Course 4 Artist Vars 11_instruction: 'Her er samme algoritmen som vi kom opp med for den forrige oppgaven – hva bør du sette variabelen "sider" til for å tegne dette bildet av firkanter?'
      Course 4 Artist Vars 12_instruction: 'La oss sette variabelen "sider" til 5. Dess flere  sidene vi legge til denne algoritmen, dess større blir hele dette mønsteret! La oss legge til en ny variabel kalt "lengde" og bruke det hvor du har en "flytte fremover." Angi variabelen "lengde" til 75 for figuren.'
      Course 4 Artist Vars 13_instruction: "Når en figur har mange sider må alle sidene være kortere hvis du vil at mønsteret skal passe inn på skjermen.\n\\r\nLa oss lage algoritmen for dette stilige mønsteret, men bruk en matte-brikke med \"sider\"-variabelen inni, i stedet for å manuelt sette \"lengde\"-variabelen. Omkretsen av hvert mangekant er 300 piksler. \\r Trenger du noen hint? Klikk her."
      Course 4 Artist Vars 14_instruction: 'Frilek: Sjekk det ut, nå algoritmen er nestet inne i en mer løkke. Eksperimentere med å endre verdiene i de to variablene for å tegne kule mønstre.'
      Course 4 Artist Vars 2_instruction: 'I stedet for "går fremover med 100," refererer "Flytt" blokken nå variabelen "lengde". Kan du sette "lengde" til 150 for å  tegne den nye trekanten?'
      Course 4 Artist Vars 3_instruction: 'Her er en løkke som tegner et kvadrat, men noe mangler. Får du til å fikse det slik at den bruker variabelen lengde til å avgjøre hvor lange de ulike sidene skal være? '
      Course 4 Artist Vars 4_instruction: 'Nå ønsker jeg å lage et rektangel som er dobbelt så høyt som det er bredt. Vi har en variabel kalt "bredde" som er satt til 100. Kan du bruke matematiske blokkene for å fullføre koden?'
      Course 4 Artist Vars 5_instruction: 'Bruk variabelen "sider" til å styre hvor mange ganger løkken skal kjøre.'
      Course 4 Artist Vars 6_instruction: 'Hmmm, jeg forsøkt å endre variabelen "sider" til 4 fra koden i den siste gåten, men den tegner fortsatt en trekant. Kan du bruke variabelen "sider" (sammen med en matteblokk) og sørge for at jeg snur akkurat passe? Hint: 360 delt på antall sider vil gi deg hvor mange grader du skal snu.'
      Course 4 Artist Vars 7_instruction: 'Kan du endre variabelen "sider" for å hjelpe meg trekke denne sekskanten?'
      Course 4 Artist Vars 8_instruction: 'Frilek: Eksperimenter med antall sider denne figuren har. Kan du endre algoritmen slik at størrelsen på figuren forblir den samme uansett hvor mange sider den har? Tips: Du må kanskje bruke matteblokken din. (360 delt "sider" på to steder nå) '
      Course 4 Artist Vars 9_instruction: 'Endre denne algoritmen bruker variabelen "sider" i stedet for et for å tegne en trekant. Erstatt nummer 3 med variabelen "sider", og bruk "Angi sider"-blokk.'
      Course 4 Bee 1_instruction: 'Bien ser ikke forskjell på blomst og bikube.  Sjekk først om det er blomst eller bikube og samle kun inn nektar dersom det er en blomst. '
      Course 4 Bee 2_instruction: Kontroller hvert objekt for å se om det er en blomst. Dersom det er en blomst så samler du inn nekter,,, hvis ikke kan du overse det!
      Course 4 Bee 3_instruction: 'Det ukjente objektet er enten en blomst eller en bikube. bruk "hvis/ellers" blokk til å samle inn nekter dersom det er en blomst, hvis ikke så lager du honning (fordi det er en bikube).'
      Course 4 Bee 4_instruction: 'Denne lilla blomsten kan ha enten 3, 2 eller 1 nektar. Her er en "hvis/ellers"-blokk kombinert med en annen "hvis/ellers"-blokk for å danne en "Hvis/ellers hvis, ellers"-blokk. fullfør løsningen for å samle inn en ukjent mengde med nektar.'
      Course 4 Bee 5_instruction: Denne lilla blomsten må enten ha 3, 2 eller 1 nektar. Legg til en hvis-ellers-blokk for å lage en hvis, ellers-hvis og ellers-blokk. Fullfør løsningen for å samle inn det ukjente antallet nektar.
      Course 4 Bee 6_instruction: Denne lilla blomsten må enten ha 3, 2 eller 1 nektar. Legg til en hvis, ellers-hvis, ellers-blokk for å samle inn det ukjente antallet nektar.
      Course 4 Bee 7_instruction: Bruk alt du har lært så langt for å samle all nektaren. Den lilla blomsten har enten 3, 2 eller 1 nektar.
      Course 4 Bee For Loops 1_instruction: Bruk en løkke til å samle all nektaren fra hver blomst.
      Course 4 Bee For Loops 10_instruction: Hvis løkka di teller ned, så trekkes veksten fra teller-variabelen hver gang løkka går. Hva skal du øke med for å samle 9, så 6 og så 3 nektar?
      Course 4 Bee For Loops 11_instruction: Hva er galt med denne løkka? Se om du kan fikse den og gjøre slik at bia samler alle nektarene.
      Course 4 Bee For Loops 2_instruction: 'Her er en ny type løkke, kalt en "for"-løkke. Akkurat denne for-løkka vil telle fra 1 til 5 med steg på 1, og kjøre innholdet i løkka hver gang den teller. Hjelp Bie å hente nektaren.'
      Course 4 Bee For Loops 3_instruction: Du kan løse denne oppgaven ved å bruke en for-løkke til å telle fra 1 til 3 med steg på 1. La oss skaffe noen nektar!
      Course 4 Bee For Loops 4_instruction: Samle all nektaren fra disse blomstene. Jeg lurer på om det er en enklere måte å gjøre dette...
      Course 4 Bee For Loops 5_instruction: 'Åh, for-løkka gjør dette så mye enklere! Bruk "teller"-variabelen fra for-løkka til å kjøre en løkke over "hent nektar"-blokka samme antall ganger som løkka. Oooh! Det var mange løkker. All koden du trenger er der, ta en titt på hvordan den er satt sammen før du klikker på Kjør og ser hvordan den funker. '
      Course 4 Bee For Loops 6_instruction: Du kan også bruke en for-løkke til å telle ned. Prøv å samle nektaren ved å telle ned fra 5 til 1 med steg på 1.
      Course 4 Bee For Loops 7_instruction: Bruk for-løkkas teller-variabel til å kontrollere hvor langt du beveger deg vannrett.
      Course 4 Bee For Loops 8_instruction: Kan du bruke løkke-variabelen til å kontrollere bevegelse og innsamling av nektar?
      Course 4 Bee For Loops 9_instruction: 'Det siste tallet i for-løkka di er kalt "vekst" og hver gang løkka kjører endres teller-variabelen med veksten. Prøv å samle disse blomstene ved å bruke en vekst på 2.'
      Course 4 Bee Loops 5 NEW_instruction: Her er tre blomster. Kan du finne mønsteret av instruksjoner som du må gjenta 3 ganger for å samle alle nektarene ved å bruke det minste antallet blokker?
      Course 4 Bee Loops 5a NEW_instruction: Bruk løkker for å hjelpe bien med å samle all nektaren på dens vei til bikuben, med så få blokker som mulig. Ikke glem å lage honning når du kommer dit!
      Course 4 Bee Params 1_instruction: 'Bruk funksjonen "hent 3 nektar" som snur, beveger seg for å samle nektar og så returnerer til opprinnelig posisjon. Skriv en sekvens for å samle all nektar ved å bruke "hent 3 nektar"'
      Course 4 Bee Params 2_instruction: 'Endre funksjonen "hent 3 nektar" slik at den får meg til å snu til høyre i stedet for til venstre for blomstene.'
      Course 4 Bee Params 3 (copy 1)_instruction: 'Nå er det blomster på begge sider! Kanskje du kan bruke et parameter slik at den samme funksjonen fungerer for blomster på begge sider. Jeg har lagt til et parameter som heter "retning" i funksjonen. Hvis "retning"-parameteret er lik 0 så skal jeg gå til venstre, hvis det er 1 så skal jeg gå til høyre.'
      Course 4 Bee Params 3_instruction: 'Nå er det blomster på begge sider! Jeg har lagt til et parameter kalt "retning" i funksjonen. Bruk "venstre" og "høyre"-variabler til å kontrollere retning. Fyll inn resten av funksjons-definisjonen og klikk til slutt på "Lagre og Lukk"'
      Course 4 Bee Params 4 (copy 1)_instruction: Prøv å bruke den nye funksjonen din til å samle alle blomstene. Husk 0 = venstre og 1 = høyre.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Prøv å bruke den nye funksjonen din for å samle alle blomstene. Husk å bruke venstre og høyre-variablene.
      Course 4 Bee Params 4 backup_instruction: 'Ville det ikke vært fint om vi kunne samle alle disse nektarene med en enkelt funksjon? Prøv å legge til et nytt parameter til funksjonen din kalt "nektar" for å kontrollere antallet nektar som skal samles. Du vil antakelig ønske å endre navnet på funksjonen også!'
      Course 4 Bee Params 4_instruction: Prøv å bruke den nye funksjonen til å samle alle blomstene. Husk å bruke variablene venstre og høyre.
      Course 4 Bee Params 5_instruction: 'La oss starte fra bunnen av - kan du lage en ny funksjon kalt "hent 5 nektar" med et parameter for retning?'
      Course 4 Bee Params 6 (copy 1)_instruction: Prøv å bruke din nye funksjon til å samle inn all denne nektaren.
      Course 4 Bee Params 6_instruction: 'Ville det ikke vært fint om vi kunne samlet all denne nektaren med en enkelt funksjon? Prøv å legge til et nytt parameter til funksjonen din, kalt "nektar-mengde" til å kontrollere antall nektar som skal samles inn. Du vil antakelig ønske å endre navnet på funksjonen også!'
      Course 4 Bee Params 7 (copy 1)_instruction: Prøv å bruke din nye funksjon til å samle inn all denne nektaren.
      Course 4 Bee Params 7_instruction: Prøv å bruke den nye funksjonen din til å samle inn all denne nektaren.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, nå er det honning å håndtere også! Hvordan kan du oppdatere funksjonen din til å enten hente nektar eller lage honning?
      Course 4 Bee Params 8 clone 3_instruction: Oooh, nå er det honning å håndtere også! Hvordan kan du oppdatere funksjonen din til å enten hente nektar eller lage honning?
      Course 4 Bee Params 8 Clone_instruction: Oooh, nå er det honning å håndtere også! Hvordan kan du oppdatere funksjonen din til å enten hente nektar eller lage honning?
      Course 4 Bee Params 8 new_instruction: Oooh, nå er det honning å håndtere også! Hvordan kan du oppdatere funksjonen din til å enten hente nektar eller lage honning?
      Course 4 Bee Params 8_instruction: 'Utfordring: Nå må du håndtere honning også! Skriv om funksjonen din til å ta inn både antall honning-enheter og antall nektar som skal samles inn. Hvordan vil du bruke disse tallene til å avgjøre hva du skal gjøre?'
      Course 4 Bee Params Ex_instruction: Prøv å bruke den nye funksjonen din til å samle inn all denne nektaren.
      Course 4 Binary 1_instruction: Her er en funksjon som tar inn en binærstreng av 1-ere og 0-ere og instruerer bonden til å gå fra venstre til høyre, øverst til nederst mens han skrur på rutene hvor nummeret er 0. Kjør koden for å se hvordan bøndene bruker binærstrenger til å tegne et bilde.
      Course 4 Binary 2_instruction: 'Hvilken binærstreng kan du gjenta 8 ganger for å tegne dette bildet? Hint: nummeret 1 fyller et hull.'
      Course 4 Binary 3_instruction: Kan du tegne dette mønsteret ved å kjøre en løkke over en enkelt binærstreng?
      Course 4 Binary 5 (copy 1)_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 5_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 6 (copy 1)_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 6_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 7_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 8_instruction: 'Du kan fullføre mesteparten av dette bildet ved å kjøre en løkke over et 5-bits binærtall - så trenger du et til 4-bits binærtall til å få til nedre høyre hjørne.'
      Course 4 EC 1a_instruction: Ingen regler. Ingen hint. Bare utfordringen!
      Course 4 EC 1b_instruction: Ingen regler. Ingen hint. Bare utfordringen!
      Course 4 EC 2a_instruction: '**Ekstrem utfordring:** Ingen regler. Ingen hint. Bare utfordringen!'
      Course 4 EC 2b_instruction: Ingen regler. Ingen hint. Bare utfordringen!
      Course 4 EC 2c_instruction: Ingen regler. Ingen hint. Bare utfordringen!
      Course 4 EC 2d_instruction: Ingen regler. Ingen hint. Bare utfordringen!
      Course 4 EC 3_instruction: 'Bruk det du har lært i forrige nivå til å tegne et bilde som dette. Tips: Koden blir enklere hvis du bruker parametere. '
      Course 4 EC 3a_instruction: 'Ekstrem utfordring: Ingen regler. Ingen hint. Bare utfordringen!'
      Course 4 Maze 1_instruction: Få den sinte fuglen til grisen!
      Course 4 Maze 2_instruction: Hold deg unna dynamitten!
      Course 4 Maze 3_instruction: 'Programmer den sinte fuglen til å komme seg bort til grisen. '
      Course 4 Maze 4_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      Course 4 Maze 5_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      Course 4 Maze 6_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      Course 4 Play Lab For Loops 2_instruction: Denne gangen, la oss telle oddetallene fra 1 til 100.
      Course 4 Play Lab Params 1_instruction: 'Her er en funksjon kalt "hopp" som får hovedpersonen din til å hoppe 100 piksler. Bruk hopp-funksjonen til å samle alle flaggene.'
      Course 4 Play Lab Params 10_instruction: "Vi har lagt til en siste funksjon du kan bruke. \\r\n\\r\nProgrammer ditt spill til å kalle på \"levle_opp\"-funksjonen hvis \"spiller_poeng\" > 10. \\r\n\\r\nSpill spillet og oppnå level 4 for å gå videre til neste oppgave. "
      Course 4 Play Lab Params 2_instruction: "Nå har vi flagg som er alt for høye for vårt nåværende hopp! La oss bruke pilene \"opp\" og \"ned\" så vi ha flere hopp-høyder. \\r\n\\r\nVi trenger å legge til et parameter kalt \"høyde\" til vår hopp-funksjon. Opp-pila skal få hunden til å hoppe 200 piksler og ned-pila skal få den til å kun hoppe 100 piksler.\n\\r\n\\r\nHint: Du må klikke på \"endre\" på hopp-funksjonen og oppdatere den slik at den bruker \"høyde\"-parameteret."
      Course 4 Play Lab Params 3_instruction: 'La oss legge til et til parameter til hopp-funksjonen slik at vi kan bruke den med andre spillere. Hver spiller er representert med et nummer, fra en og oppover. Endre "hopp"-funksjonen slik at definisjonen inneholder "spiller"-parameteret. '
      Course 4 Play Lab Params 4_instruction: 'Her er en funksjon kalt "patruljer". Endre den slik at Katt beveger seg opp 400 piksler og så ned 400 piksler.'
      Course 4 Play Lab Params 5_instruction: 'Fyll inn "spiller"-parameteret slik at vi kaller på "patruljer"-funksjonen for hver spiller. Husk at spillerne tilsvarer tallene 1, 2 og 3.'
      Course 4 Play Lab Params 6_instruction: 'Legg til enda et parameter, kalt "hastighet" til funksjonen "patruljere". Prøv å bruk en "sett hastighet"-brikke sammen med "hastighet"-parametere for å hjelpe Pingvin få tak i begge flaggene før de andre figurene får tak i dem.'
      Course 4 Play Lab Params 7_instruction: "Se på denne koden og se om du kan finne ut hva hver blokk gjør. \\r\n\\r\nNår du er ferdig, bruk piltastene til å styre Hund og samle alle flaggene."
      Course 4 Play Lab Params 8_instruction: 'Bruk en "når berører"-blokk til å sende Hund tilbake til øvre venstre hjørne BARE hvis Hund berører noen av de andre spillerne.'
      Course 4 Play Lab Params 9_instruction: "Her er spillet vårt fra tidligere, men nå er mesteparten av koden gjemt. Det finnes en ny funksjon, \"score_poeng\".\\r\n\\r\nEndre funksjonen slik at \"poeng\"-parameteret blir lagt til \"spiller_score\"-variabelen. \\r\n\\r\nVariabelen \"spiller_score\" skal øke hver gang Hund kommer borti Katt med hjerter og minske hver gang Katt tar borti Hund med hjerter.\\r\n\\r\nMerk: Når du er ferdig, trykk på \"Kjør\" for å spille. Når Hund scorer 6 poeng kan du gå videre til neste oppgave. "
      Course 4 Play Lab Vars 1_instruction: 'Denne gangen trenger du ikke å omskrive noe kode, bare trykk på "Kjør" for å spille spillet! I dette spillet er du Hund, som prøver å samle mer flagg enn Katt. Bruk ned-piltasten til å kontrollere Hund. Trykk "Fullfør" når du er ferdig med å spille.'
      Course 4 Play Lab Vars 2_instruction: 'Løpet i forrige oppgave var ikke veldig rettferdig! Endre variabelen "hund_fart" for å sikre at du kan samle mer flagg enn Katt. Den første til å samle 10 flagg vinner!'
      Course 4 Play Lab Vars 3_instruction: 'Her er et nytt type spill! Bruk venstre- og høyre-pilene til å bevege deg og opp-pila til å hoppe. Se om du kan samle alle flaggene.'
      Course 4 Play Lab Vars 4_instruction: 'Nå bruker vi en variabel kalt "høyde" for å kontrollere hvor høyt hunden kan hoppe. Oppdater "høyde"-variabelen slik at hunden kan hoppe høyt nok til å nå alle flaggene.'
      Course 4 Play Lab Vars 5_instruction: 'La oss bygge et spill! Først trenger vi en poengsum. Bruk "sett poeng til"-blokk for å sette scoren til 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: 'Kult, nå har vi vår score-variabel, men hvordan skal vi ha nytte av den? Hva med å legge til score-variabelen hver gang du treffer fienden med en ildkule? Bruk "når figur 2 berører noe"-hendelsen til å utløse en oppdatering av poengsummen din når dine ildkuler treffer katten. Du kan øke score ved å sette score = score + 1. Øk din score til 10 (ett poeng om gangen!) for å bestå brettet.'
      Course 4 Play Lab Vars 6_instruction: "Bruk høyre piltast til å skyte hjerter.\\r\n\\r\nI vårt spill, hvordan skal vi score poeng? Legg til 1 til din \"poeng\"-variabel hver gang Hund treffer Katt med et hjerte. Bruk \"når figur 2 berører noe\"-hendelsen til å utølse en oppdatering av poeng-scoren din. Du kan øke variabelen ved å sette \"poeng = poeng + 1\". Få din poeng-score opp til 10 (ved å gå opp 1 poeng av gangen!) for å bestå nivå."
      Course 4 Play Lab Vars 7_instruction: Flott! La oss gjøre spillet litt vanskeligere å spille. Hver gang Hund (figur 1) blir truffet av gule hjerter fra Katt (spiller 2) skal du miste ett poeng. Start med 10 poeng slik at det ikke er for vanskelig. For å fullføre nivået må poeng-scoren falle fra 10 til 0.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: 'En siste ting til dette spillet - la oss gjøre så spilleren kan vinne (eller tape). Bruk en for alltid-løkke for å sjekke verdien av poeng - hvis poeng er større enn 20 skal fienden forsvinne. Hvis poeng er mindre enn 0 skal spilleren forsvinne. Trykk "Fullfør" når spillet fungerer sånn som du vil det skal gjøre.'
      Course 4 Play Lab Vars 8_instruction: 'Sett opp spillet sånn at Hund kan vinne (eller tape). Bruk en for alltid-løkke for å sjekke verdien av poeng. Hvis poeng er større en 20 skal fienden (Katten) forsvinne. Hvis poeng er mindre enn 0 skal spilleren (Hunden) forsvinne. Klikk "Fullfør" når spillet fungerer slik du vil det skal gjøre.'
      Course 4 Play Lab Vars 9_instruction: "Tid for fritt spill! Her er alle variablene vi har brukt så langt, i tillegg til noen ekstra hvis du vil bruke dem.\\r\n\\r\nLegg merke til at det er så mange brikker i vår verktøykasse at de trenger å bli organisert! Her har vi lagt hver brikke inn i en kategori. Bruk litt tid på å utforske alt som er tilgjengelig. Lag et spill eller en historie og bruk gjenta-, variabler- og hendelser-brikker. \\r\n\\r\nHint: Bla ned for å se alle kommandoene i arbeidsområdet."
      Course 4 Play Lab Vars_instruction: 'En siste ting til dette spillet - la oss gjøre så spilleren kan vinne (eller tape). Bruk en for alltid-løkke for å sjekke verdien av poeng. Hvis poeng er større en 20 skal fienden forsvinne. Hvis poeng er mindre enn 0 skal spilleren forsvinne.'
      Course 4 Play Labs For Loops 1_instruction: Hunden skal si alle tallene fra 1 til 100. Bruk en for-løkke og teller-brikke til å si teller-variabelen hver gang løkka kjører.
      Course 4 Play Labs For Loops 2_instruction: Denne gangen, la oss telle oddetallene fra 1 til 100.
      Course 4 Play Labs For Loops 3_instruction: Hvis vi teller med enda større tall, teller vi enda høyere på samme tid. Prøv å få hunden til å telle fra 10 til 1000, med 10 av gangen.
      Course 4 Play Labs For Loops 4_instruction: Å endre økningen når vi teller kan være nyttig, men vi teller fortsatt lineært (hvert tall er like langt fra det forrige). Hva hvis vi vil telle eksponensielt? Uten å endre innstillingene i denne for-løkka, kan du telle 1, 4, 9, 16, 25... (teller-variabelen ganget med seg selv)?
      Course 4 Play Labs For Loops 4a_instruction: "La oss blande variablene fra Scene 7 sammen med teller-variabelen for å skape magi. \\r\n\\r\nI dette spillet skal Hund telle fra 0 til 1000 ved å bruke \"øk\". Set \"øk\"-variabelen til 10 i starten av koden din."
      Course 4 Play Labs For Loops 5_instruction: 'I den siste scenen talte vi hvert tall ganget med seg selv. Prøv å endre "teller ^ 2" til "teller ^ 3" (1, 8, 27, 64, 125, 216, 343…)'
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime keeper.\\r\n\\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable will begin with a value of 1.\\r\n\\r\nCan you make it so that each\ntime you click Dog, the increment increases by 2?  Click the forward arrow\nto run the for loop.\\r\n\\r\nRun the loop a couple of times, clicking Dog before\neach one."
      Course 4 Play Labs For Loops 6_instruction: 'Du husker at et primtall er et heltall som bare kan deles på seg selv og 1. Bruk "er_primtall"-funksjonen for å si høyt de tallene som er primtall fra 1 til 100.'
      Course 4 Play Labs For Loops 6a_instruction: "Hund vil fortsatt holde styr på tiden ved å telle med \"for-løkke\" og \"øk\". Denne gangen skal vi ta med Trollmann også. Kan du endre koden så \"øk\" går opp med 2 hver gang Trollmann er trykket på?\\r\n\\r\nSe opp! Trollmannen beveger seg raskt!"
      Course 4 Play Labs For Loops 7_instruction: 'Kan du bruke en for-løkke til å hjelpe meg med å si disse tallene: 1, 4, 7, 10, 13, 16, 19, 22, 25?'
      Course 4 Play Labs For Loops 7a_instruction: "Dette er bra! Hva hvis vi starter å telle hvor mange ganger vi kan trykke på Trollmannen før Hund teller til 30? \\r\n\\r\nLegg til blokker på Trollmannen sånn at variabelen \"trykket\" øker med 1 hver gang han blir trykket på. Du trenger ikke bry deg om \"øk\"-variabelen nå.\\r\n\\r\nHun vil starte å telle når du trykker på \"Kjør\"."
      Course 4 Play Labs For Loops 8_instruction: "Hjelp figurene med å flytte seg mens de teller. \\r\n\\r\nHund skal bevege seg og telle ved å legge til 2 (teller + 2) hver gang. Katt skal bevege seg og telle ved å gange med 2 (teller * 2) hver gang. Pingvin skal bevege seg og telle med teller ^ 2 hver gang. Hvem vil nå flagget sitt først?"
      Course 4 Play Labs For Loops 8a_instruction: "For å fullføre spillet vårt må vi bruke \"øk\"-variabelen! La oss knytte den til nivået i spillet.\\r\n\\r\n1) Hold styr på hvor mange ganger Trollmannen er trykket på.\\r\n2)\nHvis Trollmannen er trykket på minst 10 ganger før Hund teller til 30 skal \"øk\"-variabelen økes med 1 og starte på nytt.\\r\n3) Hvis Trollmannen ikke blir klikket på 10 ganger (eller mer) er spillet over."
      Course 4 SCF 1_instruction: Bruk de foreslåtte funksjonene til å tegne fire rader av sekskanter. Legger du merke til hvordan våre partallsrader er flyttet til høyre?
      Course 4 SCF 1a_instruction: Kan du finne ut hvordan du kan samle all denne nektaren med færrest mulig brikker?
      Course 4 SCF 1b_instruction: Kan du finne ut hvordan du kan samle all denne nektaren med færrest mulig brikker?
      Course 4 SCF 2_instruction: 'Bruk det du har lært i forrige nivå til å tegne et bilde som dette. Tips: Koden blir enklere hvis du bruker parametere. '
      Course 4 SCF 3 Fail 1_instruction: Kan du finne ut hvordan...
      Course 4 SCF 3 Fail 2_instruction: Kan du finne ut hvordan...
      Course 4 SCF 3_instruction: 'Bruk det du har lært i forrige nivå til å tegne et bilde som dette. Tips: Koden blir enklere hvis du bruker parametere. '
      Course 4 SCFL 1_instruction: Løs denne oppgaven med færrest mulig brikker.
      Course 4 SCFL 1a_instruction: Kan du få Scrat bort til eikenøtta si ved å bruke så få brikker som mulig?
      Course 4 SCFL 1b_instruction: Kan du få Scrat bort til eikenøtta si ved å bruke så få brikker som mulig?
      Course 4 SCFL 2_instruction: Løs denne oppgaven med færrest mulig brikker.
      Course 4 SCFL 3_instruction: Finner du ut hvordan du kan gjenskape denne tegningen?
      Course 4 SCFL 4_instruction: Finner du ut hvordan du kan gjenskape denne tegningen?
      Course 4 SCFL 5_instruction: Finner du ut hvordan du kan gjenskape denne tegningen?
      Course 4 SCFL 6_instruction: Kan du finne ut hvordan du kan lage denne tegningen med en enkelt løkke?
      Course 4 SCFL 7_instruction: Kunstneren ønsker å fange noen bølger! Finner du ut hvordan du kan lage denne tegningen?
      Course 4 SCFP 1_instruction: Opprett en funksjon med parametere som tillater kunstneren å hoppe framover og bakover med x antall piksler, og opp og ned med y antall piksler. Bruk positive og negative tall.
      Course 4 SCV 1_instruction: Klikk her for å se instruksjonene en gang til.
      Course 4 SCV 2_instruction: Klikk her for å se instruksjonene en gang til.
      Course 4 SCV 3_instruction: "Nå skal vi spille spillet \"har'n\" (også kjent som Sisten)! Tar du på Katt får du 2 poeng. Tar du på Pingvin får du 3 poeng. For å vinne må du få 10 poeng tilsammen!\\r\nMen vær forsiktig, når Katt og Pingvin er nær hverandre tar de poeng fra deg.\\r\n\\r\nLegg til brikkene som er nødvendig for å få dette spillet til å fungere slik som forklart. Hvordan kan du få Hund til å kunne flytte seg i alle retninger ved bruk av piltastene? Hvordan skal du legge til poeng når Hund er nær Katt eller Pingvin? Hvordan skal du trekke fra poeng når Katt og Pingvin er nær hverandre?"
      Course 4 SCV 4_instruction: Løs denne oppgaven med færrest mulig brikker.
      Course 4 SCV 5_instruction: Løs denne oppgaven med færrest mulig brikker.
      Course 4 SCV 6_instruction: Klikk her for å se instruksjonene en gang til.
      Course 4 SCVP 1_instruction: Opprett en funksjon med parametere som tillater kunstneren å hoppe framover og bakover med x antall piksler, og opp og ned med y antall piksler. Bruk positive og negative tall.
      Course 4 Variables Assessment_instruction: Kan du lage dette bildet ved å bruke en variabel for sidene? Hver linje skal være 50 piksler lange.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSD Hackathon Pt 1_instruction: (Click to see full instructions)
      CSD Hackathon Pt 2_instruction: (Click to see full instructions)
      CSD Hackathon Week 1_instruction: (Click to see full instructions)
      CSD Hackathon Week 2_instruction: (Click to see full instructions)
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Frame Rate_instruction: "Slow down Gamelab Gary's animation with frameRate()"
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape function and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: 'Create your own variable '
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Nå skal vi lage 20 overlappende sirkler ved å snu 18 grader mellom hver sirkel.
      frozen circle function with parameter_instruction: 'Her er en "Lag sirkel"-blokk som kan lage sirkler av ulike størrelser. Klarer du å bruke den til å lage en liten sirkel med størrelse 5 og en større sirkel med størrelse 10?'
      frozen circle function_instruction: 'Bruk "Lag ny sirkel"-blokken for å lage 10 overlappende sirkler. Ikke glem å gå fremover mellom sirklene.'
      frozen circle_instruction: En sirkel er en spesiell form. Klarer du finne ut hvilket tall som skal erstatte spørsmålstegnene for å tegne en sirkel?
      frozen cross rotate dense_instruction: 'La oss gjenta det 90 ganger! Hvor mange ganger går 90 opp i 360? Hint: Det er et ganske lite tall.'
      frozen cross rotate_instruction: Prøv å gjenta det 10 ganger. Hvor mange grader må du snu mellom hver linje?
      frozen cross_instruction: 'Putt en "gjenta"-blokk rundt disse kommandoene for å lage et plusstegn. La du merke til at Elsa kan bevege seg både framover og bakover?'
      frozen diamond mini snowflake_instruction: 'Visste du at alle snøfnugg har forskjellige former? La oss lage et nytt snøfnugg ved å bruke enda en "Gjenta"-brikke for å repetere mønsteret 4 ganger. Snu 90 grader mellom hvert mønster.'
      frozen diamond snowflake_instruction: 'Nå skal vi lage et snøfnugg ved å bruke "Gjenta"-blokken til å lage et parallelogram 10 ganger ved å snu mot høyre 36 grader etter hvert parallelogram.'
      frozen diamond_instruction: Bruk en gjenta-brikke rundt disse brikkene for å lage et parallelogram. Det er en firkant hvor hjørnene har forskjellige vinkler. Denne har vinkler på 60 grader og 120 grader i stedet for at alle har 90 graders vinkler.
      frozen freeplay_instruction: Du har offisielt blitt en mesterkunstner! Lag et vinterparadis.
      frozen line_instruction: Hei! Jeg heter Elsa av Arendelle. Hjelp meg å lage en enkelt linje.
      frozen perpendicular_instruction: 'Nå skal vi prøve å lage to linjer som står 90 grader i forhold til hverandre. Du må bruke blokken "Snu" og en "Flytt"-blokk.'
      frozen snowflake branch_instruction: 'Prøv å bruke "lag en snøflakgren"-blokken for å lage tre grener som begynner å se ut som et snefnugg.'
      frozen snowflake full_instruction: Nå skal vi repetere det 8 ganger for å lage et nydelig snefnugg!
      frozen snowflower_instruction: 'Det er mulig å lage intrikate snømønstre ved  å sette sammen enkle former. Kan du lage et mønster ved å repetere 5 sirkler med størrelse 5 og 5 sirkler med størrelse 10?'
      frozen square iterative_instruction: Det ser ut til vi har laget et halvt kvadrat. La oss sette sammen fire linjer for å lage et kvadrat.
      frozen square loop 3x_instruction: La oss lage tre firkanter med spissen mot hverandre. Husk å snu 120 grader før hvert nytt firkant.
      frozen square loop_instruction: 'Hei, jeg heter Anna av Arendelle! La oss lage et kvadrat ved hjelp av "Gjenta" blokken som bruker færre blokker. Hvor mange ganger trenger "Gjenta" blokken gå gjennom blokkene inni for å lage et kvadrat?'
      frozen square snowflake_instruction: 'Får du til å lage et snøfnugg ved å bruke "repeter"-blokken til å lage 10 kvadrater og "Snu"-blokken for å snu deg 36 grader mellom hvert kvadrat?'
      Infinity_catch_instruction: 'Kan du få Elsa ("skuespiller 2") til å ta igjen med Anna ved å bruke piltastene?'
      Infinity_finale_instruction: Lag det du har lyst til og del det med andre!
      Infinity_move_collide_instruction: 'Hiro er "figur 1". Flytt han direkte til Baymax og spill en lyd når de berører hverandre.'
      Infinity_move_directions_instruction: 'Baymax er "figur 2". Bruk flytt-blokker for å styre Baymax med pilene. Få han til å berøre de to andre figurene.'
      Infinity_move_right_instruction: 'Hiro er "figur 1". Bruk "Flytt"-blokken til å flytte Hiro mot høyre for å berøre Baymax.'
      Infinity_repeat_instruction: 'Bruk "Gjenta alltid"-blokken til å få Anna til å bevege seg opp og ned 400 pixler.'
      Infinity_say_instruction: 'Få Anna til å si "Hei der." ved å bruke Si-brikken.'
      Infinity_shoot_instruction: 'Baymax er "figur 2". Få Baymax til å skyte en rakett mot Hiro.'
      Infinity_shoot_directions_instruction: 'Hiro er "skuespiller 3". Få Hiro til å kaste et prosjektil mot hver av de fire andre figurene. Vent et sekund mellom hvert kast.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Berør enda flere snøfnugg!
      Infinity_touch_four_instruction: Flytt Anna opp, ned til venstre og høyre for å ta på hvert av de fire snøfnuggene.
      Infinity_touch_score_instruction: 'Få anna til å score poeng når hun tar på snøfnugg. Deretter trykk på "Kjør" og styr henne for å ta på hvert snøfnugg en gang.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Tegn en kort linje oppover og en lang linje mot høyre!
      K-1 artist 1 level 10_instruction: Tegn den stiplede linjen ved å bruke både hopp og tegn brikker
      K-1 artist 1 level 9_instruction: Tegn dette ved å bruke tre linjer
      K-1 Artist Loops 1_instruction: Tegn denne linja ved å flytte øst fire ganger.
      K-1 Artist Loops 2_instruction: Kan du tegne samme linje ved å bruke en løkke?
      K-1 Artist Loops 3_instruction: Kan du bruke en løkke for å gå igjennom disse brikkene for å tegne 6 linjer?
      K-1 Artist Loops 4_instruction: Kan en løkke hjelpe oss med å tegne toppen av dette slottet?
      K-1 Artist Loops 5_instruction: Hva kan du gjenta 4 ganger for å tegne disse trappene?
      K-1 Artist Loops 6_instruction: 'Her trengs det to løkker: en til å gå opp trappen og en til å gå ned.'
      K-1 Artist Loops 7_instruction: Kan du fullføre dette mønsteret ved å bruke to løkker?
      K-1 Artist Loops 8_instruction: Denne trappen har lengre trinn.
      K-1 Artist Loops 9_instruction: 'Oppgave: Bruk en løkke til å tegne trappen'
      K-1 Artist Loops Free Play_instruction: Fritt spill! Tegn noe gøy!
      K-1 Artist1 1_instruction: Tegn foten på mannen med en linje
      K-1 Artist1 10_instruction: Tegn og Hopp for å lage den stiplede veien til skatten X
      K-1 Artist1 2_instruction: Tegn værhår på katten med to linjer!
      K-1 Artist1 3_instruction: Tegn to linjer øst og to linjer nord for å tegne ferdig huset!
      K-1 Artist1 4_instruction: Tegn linjer oppover, over og ned for å fullføre slottet!
      K-1 Artist1 5.5_instruction: Fullfør de tredje tårnet på slottet ved å bruke korte linjer
      K-1 Artist1 5_instruction: Tegn stilken på denne blomsten med to linjer!
      K-1 Artist1 6_instruction: Fullfør bildet ved å bruke en hopp-brikke!
      K-1 Artist1 7_instruction: Bruk hopp-brikken for å flytte uten å tegne. Hopp opp og tegn en linje.
      K-1 Artist1 8_instruction: 'Tegn en stiplet linje ved å bruke både hopp- og tegn-brikker'
      K-1 Artist1 9_instruction: Tegn og Hopp for å lage den stiplede linjen
      K-1 Artist1 Assessment 1_instruction: Tegn korte og lange linjer!
      K-1 Artist1 Assessment 2_instruction: Tegn korte stiplede linjer!
      K-1 Artist2 1_instruction: Tegn en firkant under trekanten.
      K-1 Artist2 2_instruction: Hopp og tegn en firkant ved siden av huset.
      K-1 Artist2 3_instruction: Tegn en firkant over den andre firkanten
      K-1 Artist2 4_instruction: Tegn et rektangel for å fullføre broen.
      K-1 Artist2 5_instruction: Tegn en firkant for å fullføre bro-støttene
      K-1 Artist2 6_instruction: Tegn to firkanter for å lage et rektangel!
      K-1 Artist2 Assessment1_instruction: 'Oppgave: Tegn en firkant ved siden av den andre firkanten.'
      K-1 Artist2 Free Draw_instruction: Tegn hva som helst!
      K-1 Artist2_7_instruction: Tegn en firkant for å gi kommoden en skuff øverst!
      K-1 Bee 1_instruction: Flytt meg bort til blomsten, hent nektaren, flytt meg så bikuben og lag honning
      K-1 Bee 10_instruction: Hent fire nektar og lag to honning!
      K-1 Bee 11.5_instruction: Hent fire nektar for å lage fire honning!
      K-1 Bee 11_instruction: Hent tre nektar og lage en honning
      K-1 Bee 12_instruction: Hent tre nektar og lag to honning!
      K-1 Bee 13_instruction: Hent tre nektar og lag en honning!
      K-1 Bee 14_instruction: Flytt meg til nektaren, plukk den opp, flytt meg til honningen og lag honning
      K-1 Bee 15_instruction: Hent to nektar for å lage to honning!
      K-1 Bee 2_instruction: Flytt meg bort til blomsten, hent nektaren, flytt meg så bikuben og lag honning
      K-1 Bee 3_instruction: Flytt meg bort til blomsten, hent nektaren, flytt meg så bikuben og lag honning
      K-1 Bee 4_instruction: Hent to nektar og lag to honning!
      K-1 Bee 5_instruction: Hent tre nektar og lag tre honning!
      K-1 Bee 6_instruction: Hent to nektar og lag to honning!
      K-1 Bee 7_instruction: Hent tre nektar og lag to honning!
      K-1 Bee 8_instruction: Hent to nektar og lag to honning!
      K-1 Bee 9_instruction: Hent to nektar og lag to honning!
      K-1 Bee Assessment 1_instruction: Hent nektar for å lage honning!
      K-1 Bee Assessment 2_instruction: Hent nektar for å lage honning!
      K-1 Bee Loops 1_instruction: Hent nektaren for å lage honning!
      K-1 Bee Loops 10_instruction: Bruk løkker for å hente nektar, honning og for å bevege deg!
      K-1 Bee Loops 11_instruction: 'Oppgave: Bruk løkker for å hente nektar og honning!'
      K-1 Bee Loops 12_instruction: 'Oppgave: Bruk løkker til å hente nektar, honning og til å bevege deg!'
      K-1 Bee Loops 2_instruction: Bruk en løkke til å bevege deg og så hente nektaren og lage honning!
      K-1 Bee Loops 3_instruction: Bruk løkker til å hente nektar og lage honning!
      K-1 Bee Loops 4_instruction: Bruk løkker til å hente nektar, lage honning og til å bevege deg!
      K-1 Bee Loops 5_instruction: Bruk løkker til å hente nektar og honning!
      K-1 Bee Loops 6_instruction: Bruk løkker for å hente nektar, honning og for å bevege deg!
      K-1 Bee Loops 7_instruction: Bruk løkker til å hente nektar og lage honning!
      K-1 Bee Loops 8_instruction: Bruk løkker til å hente nektar og lage honning!
      K-1 Bee Loops 9_instruction: Bruk løkker for å hente nektar, honning og for å bevege deg!
      K-1 Bee Loops Assessment 1_instruction: Hent nektar for å lage honning og bruk løkker til å bevege deg!
      K-1 Bee Loops Assessment 2_instruction: Hent nektar for å lage honning ved å bruke løkker!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Bygg en pyramide med tre nivåer. Det er ingen andre regler, så lek deg med brikkene til du får det til!
      k-1 maze 1_instruction: Kan du bevege meg til vest for å komme til grisen?
      K-1 Maze 10_instruction: 'Gå rundt boksene med TNT for å få meg bort til grisen! '
      K-1 Maze 11_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær! Hint. Han er sør for meg.
      K-1 Maze 2_instruction: Flytt meg østover for å få meg til grisen!
      K-1 Maze 3_instruction: Flytt meg sørover for å få meg til grisen!
      K-1 Maze 4_instruction: Flytt meg nordover for å få meg til grisen!
      K-1 Maze 5_instruction: Flytt meg østover for å få meg til grisen!
      K-1 Maze 6_instruction: Flytt meg først en vei og så en annen vei for å få meg bort til grisen!
      K-1 Maze 7_instruction: Flytt meg først en vei og så en annen vei for å få meg bort til grisen!
      K-1 Maze 8_instruction: Flytt meg først en vei og så en annen vei for å få meg bort til grisen!
      K-1 Maze 9_instruction: Flytt meg først en vei og så en annen vei for å få meg bort til grisen!
      K-1 Maze Assessment 1_instruction: 'Oppgave -- Få meg bort til grisen!'
      K-1 Maze Assessment 12_instruction: Oppgave-nivå
      K-1 Maze Assessment 13_instruction: Oppgave-nivå
      K-1 Maze Assessment 2_instruction: 'Oppgave -- Få meg bort til grisen!'
      K-1 maze debug 1_instruction: Endre denne koden for å få meg bort til grisen!
      K-1 maze debug 10_instruction: Rett opp feil i denne levelen ved å flytte rundt på og legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 maze debug 11_instruction: "Dette er en test!\\r\nRett opp feil i denne levelen ved å endre rekkefølgen og å legge til brikker, slik at jeg kommer meg bort til grisen"
      K-1 maze debug 2_instruction: Finn ut hva som mangler og legg så til de manglende brikkene for å få meg bort til grisen!
      K-1 maze debug 3_instruction: Finn ut hva som mangler og så FJERN brikker for å få meg bort til grisen!
      K-1 maze debug 4_instruction: Kjør disse brikkene og fiks dem! Jeg tror jeg går i feil retning.
      K-1 maze debug 5_instruction: Feilsøk denne levelen ved å flytte rundt på brikkene og å legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 maze debug 6_instruction: Rett opp feil i denne levelen ved å flytte rundt på og legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 maze debug 7_instruction: Rett opp feil i denne levelen ved å flytte rundt på og legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 maze debug 8_instruction: Feilsøk denne levelen ved å flytte rundt på brikkene og å legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 maze debug 9_instruction: Rett opp feil i denne levelen ved å flytte rundt på og legge til brikker, slik at jeg kommer meg bort til grisen!
      K-1 Maze debug Assessment 1_instruction: 'Oppgave - Feilfiks dette nivået ved å endre på rekkefølgen og ved å legge til brikker, slik at jeg kan komme meg til grisen!'
      K-1 Maze Loops 1_instruction: Få meg til grisen!
      K-1 Maze Loops 10_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 11_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 12_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 2_instruction: Bruk Gjenta-brikken for å få meg bort til grisen!
      K-1 Maze Loops 3_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 4_instruction: Få meg til grisen!
      K-1 Maze Loops 5_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 6_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 7_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 8_instruction: Få meg bort til grisen! Bruk gjenta-brikken.
      K-1 Maze Loops 9_instruction: Få meg til grisen!
      K-1 Maze Loops Assessment 1_instruction: 'Oppgave -- Bruk løkker til å få meg bort til grisen!'
      K-1 Maze Loops Assessment 2_instruction: 'Oppgave -- Bruk løkker til å få meg bort til grisen!'
      K-1 Maze Multi 14_instruction: Oppgave-nivå
      K-1 Maze Multi 15_instruction: Oppgave-nivå
      K-1 Maze Sequence Assessment 1_instruction: "Dette er en test!\\r\nFlytt en vei, og så en annen vei for å få meg bort til grisen"
      K-1 Maze Sequence Assessment 2_instruction: "Dette er en test!\\r\nFlytt en vei, og så en annen vei for å få meg bort til grisen."
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: (Click to see full instructions)
      Middle School Hackathon Pt 2_instruction: (Click to see full instructions)
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Tegn noe stilig! Koden din er lagret som et prosjekt som du kan gå tilbake til når som helst.
      NEW Course 4 Artist Functions 1_instruction: Kan du tegne en firkant som er 100 piksler i lengde, ved å bruke en gjenta-brikke?
      NEW Course 4 Artist Functions 10.1_instruction: Bruk funksjonene fra forrige de oppgavene til å tegne dette mønsteret.
      NEW Course 4 Artist Functions 10_instruction: 'Klikk på "rediger" for å fylle ut brikkene i funksjons-definisjonen, slik at du kan lage en firkant på 40 piksler.'
      NEW Course 4 Artist Functions 11_instruction: "Nå vil vi lage en ny funksjon, kalt \"tegn en linje av firkanter\" som tegner seks firkanter som alle sammen er på samme rad. Kan du bygge denne funksjonen ved å bruke \"tegn en firkant 20\"-funksjonen? som vi har laget? Tips: Vi har endret pennen til å være mye tynnere. Trykk \"rediger\" på \"tegn en firkant 20\"-funksjonen for å se hvordan!\\r\n"
      NEW Course 4 Artist Functions 12_instruction: 'Bruk "tegn en linje av firkanter"-funksjonen fra forrige oppgave til å tegne dette mønsteret.'
      NEW Course 4 Artist Functions 13_instruction: 'Kan du tegne en stjerne ved å bruke "tegn en linje av firkanter"-funksjonen? Hint: Etter hver gjentakelse når du bruker "tegn en linje av firkanter" må du flytte deg framover noen piksler og så snu 144 grader.'
      NEW Course 4 Artist Functions 14_instruction: 'Tid for fritt spill! '
      NEW Course 4 Artist Functions 2_instruction: 'Kan du tegne 3 firkanter med 20 piksler mellomrom? Hint: hver firkant er 100 piksler i størrelse'
      NEW Course 4 Artist Functions 3_instruction: 'Her er en ny type brikke. Den er kalt en "funksjon". Trykk på "endre" og så fyll ut koden for å tegne en firkant med sider på 100 piksler. Når du er ferdig med å endre funksjonen, trykk "Lukk" for å gå tilbake til programmet.'
      NEW Course 4 Artist Functions 4_instruction: 'Bruk "tegn en firkant"-funksjonen for å tegne dette mønsteret. Hint: Du må bruke en "snu til høyre med 120 grader"-brikke etter hver firkant.'
      NEW Course 4 Artist Functions 5_instruction: 'Hvordan visste "tegn en firkant"-brikken hvilke kommandoer som skulle kjøres? Klikk på "endre" i "tegn en firkant"-brikken. Brikkene i vinduet som åpnes er definisjonen på hva som er "tegn en firkant"-funksjonen. Ta en titt. Når du er ferdig, klikk "Lagre og lukk" og så "Kjør"'
      NEW Course 4 Artist Functions 6_instruction: "Klarer du å tegne dette bildet ved å bruke funksjonsbrikken \"tegn en firkant\"? Hint: Hver firkant er 20 piksler fra hverandre.\\r\n"
      NEW Course 4 Artist Functions 7_instruction: 'Begynner du å få taket på hvordan du bruker funksjonsbrikker? La oss endre denne firkanten slik at den er 200 piksler i størrelse. Hint: Klikk på "rediger" for å endre "tegn en firkant"-funksjonen. Husk å klikke på "Lukk" for å komme deg ut av vinduet. '
      NEW Course 4 Artist Functions 8_instruction: 'Vi har laget en ny funksjon til deg, kalt "tegn en trekant". Kan du redigere definisjonen av funksjonen slik at den tegner en trekant med sider på 100 piksler?'
      NEW Course 4 Artist Functions 9_instruction: Kan du løse dette med å legge til bare en brikke?
      NEW Course 4 Artist Functions inspire_instruction: Klikk her for å se inspirasjonsbildet igjen.
      New Course 4 Artist Functions Level 4_instruction: 'Bruk "tegn et kvadrat"-funksjonen for å tegne dette mønsteret.'
      NEW Course 4 Artist Params 1_instruction: 'Nå skal vi lage en funksjon som tegner et kvadrat med sider på 50 pixler hver. Trykk på "Rediger" for å komme i gang.'
      NEW Course 4 Artist Params 10_instruction: 'Lag en "tegn en sekskant"-funksjon blokk med en lengde-parameter. Hint: Denne sekskanten har sider som er 100 piksler lange. '
      NEW Course 4 Artist Params 11_instruction: 'Kan du finne ut hvordan du tegner denne formen? Rediger funksjonen for å bruke "sider"-parameter.'
      NEW Course 4 Artist Params 12_instruction: Kan du fullføre denne tegningen? Sidene til alle figurene er 100 piksler lange.
      NEW Course 4 Artist Params 12a_instruction: 'Dette bildet er likt det forrige. Kan du bruke en "for-løkke" med din funksjon til å lage dette designet?'
      NEW Course 4 Artist Params 13_instruction: 'La oss redigere funksjonen "tegne et polygon". Den har allerede en "lengde"-parameter. La oss legge til en "sider"-parameter. Husk vinkelen man må svinge i en gitt form er 360 delt på antallet sider det har. Hint: Omkretsen av hver figur er 200 piksler lang. Husker du ligningen for å lage figurer av samme størrelse når de har et annet ulikt antall sider?'
      NEW Course 4 Artist Params 14_instruction: 'Rediger "tegn en spiralkant" for å bruke "lengde" og "sider"-parametrene, deretter lager du disse formene igjen.'
      NEW Course 4 Artist Params 15_instruction: 'Frilek: Her er funksjonene du har skrevet, og litt mer for å leke med. Tegn noe kjempestilig! Lek med pennetykkelsen for å se hvor ulike tegningene dine blir!'
      NEW Course 4 Artist Params 2_instruction: 'Lag en "tegn et triangel"-funksjon med 50 piksler lange sider fra bunnen av'
      NEW Course 4 Artist Params 3_instruction: "La oss bruke funksjonen til å tegne 5 triangler på rad. Tips: det er 30 piksler mellom hver trekant.\\r\n"
      NEW Course 4 Artist Params 4_instruction: 'Legger du merke til noe annerledes med disse funksjonsblokkene? Klikk "Kjør" for å se hva som skjer.'
      NEW Course 4 Artist Params 5_instruction: 'Fyll ut ??? i input-brikken sin lengde-parameteren. Tips: Femkanten har sider som er 100 piksler lange. '
      NEW Course 4 Artist Params 6_instruction: 'Fyll i parameteren "lengde" for å tegne disse figurene ved å erstatte "???" med riktig tall. Sidene i firkanten og trekanten er 100 piksler lange sider, mens hver side i sekskanten er 75 piksler lang.'
      NEW Course 4 Artist Params 7_instruction: 'Kan du fullføre denne tegningen? Hint: Sidene av hver trekant er 25 piksler lengre enn den forrige. Den første trekanten har sider som er 25 piksler lange.'
      NEW Course 4 Artist Params 8_instruction: Koden til denne trekanten sin funksjon er brutt. Kan du redigere funksjonen for å fikse det, og deretter lage trekanter med lengder på 25, 50 og 75 piksler?
      NEW Course 4 Artist Params 9_instruction: 'Klikk "Rediger" for å fylle ut funksjonen til "tegn en firkant" og legg til en parameter. Det vil kreve en lengdeparameter, akkurat som i trekanten. Tegn nå 3 kvadrat med 25, 50 og 75 piksler i lengde, alle 100 piksler fra hverandre.'
      NEW Course 4 Artist Params inspire_instruction: "Inspirasjon til fritt spill: Du har nå lært alt du trenger å vite for å lage et mønster som dette! Hvis dette bildet inspirerer deg, kan du prøve å lage noe lignende, ellers du kan skape noe helt eget. \\r \\r Vil du vite hvordan vårt inspirasjonsmønster ble laget? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Ta en titt på koden. Ser du hvordan "Angi lengde"-blokka og "lengde"-blokkere fungerer sammen? Klikk "Kjør" for å se hva som skjer. '
      NEW Course 4 Artist Vars 12_instruction: 'Endre denne algoritmen bruker variabelen "sider" i stedet for et for å tegne en trekant. Erstatt nummer 5 med variabelen "sider", og bruk "Angi sider"-blokk.'
      NEW Course 4 Artist Vars 2.5_instruction: 'Ta en titt på koden. Ser du hvordan "Angi lengde"-blokka og "lengde"-blokkere fungerer sammen? Klikk "Kjør" for å se hva som skjer. '
      NEW Course 4 Artist Vars 2_instruction: 'Dra en nummer blokk til "Angi lengde" blokken får å tegne et sett med 50 pixel store trekanter. '
      NEW Course 4 Artist Vars 4 5_instruction: Fantastisk jobb på den forrige oppgaven! La oss lage dette kule designet på sekskanter med 60 piksler lange sider.
      NEW Course 4 Artist Vars 4_instruction: La oss prøve det igjen. Nå, la oss tegne denne kule design med med 60 piksel store sekskanter.
      NEW Course 4 Artist Vars 6_instruction: 'Kan du hjelpe meg trekke dette kule mønsteret ved å slippe i den variable blokken "lengde" på de riktige stedene?'
      NEW Course 4 Bee For Loops 1_instruction: Bruk en løkke til å samle all nektaren fra hver blomst.
      NEW Course 4 Bee For Loops 10_instruction: Bruk for-løkkas teller-variabel til å kontrollere hvor langt du beveger deg vannrett.
      NEW Course 4 Bee For Loops 10a_instruction: 'Klar for en utfordring? Bruk det du har lært om løkker til å løse dette problemet. Husk: Du må kanskje kjøre løsningen din flere ganger før du skjønner alle stegene.'
      NEW Course 4 Bee For Loops 11_instruction: Kan du bruke løkke-variabelen til å kontrollere bevegelsen og nektarinnsamlingen?
      NEW Course 4 Bee For Loops 2_instruction: Legg til nødvendig kode slik at bien kan samle all nektaren. Se hvor mye koden du trenger for denne oppgaven! (Vi lærer en enklere måte i neste oppgave.)
      NEW Course 4 Bee For Loops 3_instruction: '"For-løkken" gjør dette mye lettere! All koden du trenger er her, se hvordan den er satt sammen og klikk "Kjør" for å se hvordan det virker. '
      NEW Course 4 Bee For Loops 4 4_instruction: 'Nå må vi flytte fremover "teller" ganger, deretter få nektar "teller" ganger.  Kan du bruke to "gjenta"-løkker for å løse denne utfordringen?'
      NEW Course 4 Bee For Loops 4_instruction: 'Erstatt ??? i "for"-løkken med den største mengden nektar bien må samle. '
      NEW Course 4 Bee For Loops 5 5_instruction: 'Får du taket på å bruke "for"-løkken"? La oss hjelpe bien til å skaffe resten av nektaren.'
      NEW Course 4 Bee For Loops 5_instruction: 'Du kan også bruke en "for"-løkke til å telle ned. Prøv å samle nektaren ved å telle ned fra 5 til 1 med steg på 1.'
      NEW Course 4 Bee For Loops 6_instruction: 'Det siste tallet i "for"-løkken din kalles "økning". Hver gang løkken kjøres, endres teller-variabelen med verdien i økningen. Prøv å samle disse blomstene ved hjelp av en økning på 2.'
      NEW Course 4 Bee For Loops 7_instruction: "Nå, la oss kombinere \"teller\"-variabelen med en matteblokk! Hvordan kan du bruke \"teller\"-variabelen til å navigere i denne hagen med så få blokker som mulig? Hva trenger du for å samle 3, 6, 9, 12, 15 nektar denne gangen? Hemmeligheten er i \"teller\" variabelen! \\r \\r Husk: Hvis løkken teller legges økningen til \"teller\"-variabelen hver gang."
      NEW Course 4 Bee For Loops 8_instruction: "Du har forstått dette! Hva må økningen være for å samle 3, 6, 9, 12 og 15 nektar? \\r\n"
      NEW Course 4 Bee For Loops 9_instruction: Hvis løkka di teller ned, så trekkes veksten fra teller-variabelen hver gang løkka går. Hva skal du øke med for å samle 9, så 6 og så 3 nektar?
      NEW Course 4 Bee For Loops 95_instruction: 'Se på hver av "for"-løkkene som du akkurat har laget.  Kan du finne ut hvilke tall du må doble for å løse denne oppgaven? Hvorfor virker det?'
      NEW Course 4 Play Lab Params 11_instruction: 'Det er fri spilletid! Ha det gøy med alle blokkene i verktøykassen din. '
      NEW Course 4 Play Lab Params 5 5_instruction: La oss prøve det igjen, men med mindre hjelp. Hva trenger du å redigere denne gangen for å få figurene til å patruljere?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Hva tror du denne koden vil gjøre? Trykk "Kjør" for å se hva som skjer."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Bruk det du lært så langt. Kan du få Dinosaur til å ta et skritt frem hver gang Penguin teller?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Det er fri spilletid! Ha det gøy med alle blokkene i verktøykassen din. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Utfordring: Hvordan vil du bruke "for"-løkken til å få alle figurene til å gå rundt og si figurnummeret sitt, for deretter å forsvinne fra skjermen? '
      New Play Lab Project_instruction: Lag din egen historie eller spill! Koden din lagres som et prosjekt du kan returnere til når som helst.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Det er ikke bra å møte på en smyger. Beveg deg forsiktig forbi smygere og kom deg trygt hjem.
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: 'Tre er en veldig viktig ressurs. Det er mange ting som lages av det. Gå til treet og bruk kommandoen "ødelegg blokk" for å hugge det ned.'
      Overworld Chop Trees_instruction: Vi må bygge et hus før sola går ned. Du trenger masse tre for å bygge et hus. Hogg ned de tre trærne.
      Overworld Free Play 20x20_instruction: Gratulerer! Du har fullført alle oppgavene våre! Nå kan du utvinne, bygge og lage noe unikt ved å bruke alt du har lært.
      Overworld Free Play_instruction: Lek deg med dette landskapet. Du velger selv hva du vil bygge.
      Overworld House Frame - A_instruction: La oss lage vårt eget hus! Dette stedet ser bra ut. Bygg en ramme på jord-blokkene.
      Overworld House Frame - C_instruction: La oss lage vårt eget hus! Dette stedet ser bra ut. Bygg en ramme på jord-blokkene.
      Overworld House Frame B_instruction: En vegg er fullført, la oss bygge resten av huset etter plantegningen! Du er nødt til å gjenta deg selv ganske mye her.
      Overworld House Frame B2_instruction: En vegg er fullført, la oss bygge resten av huset etter plantegningen! Du er nødt til å gjenta deg selv ganske mye her.
      Overworld House Frame C_instruction: En vegg er fullført, la oss bygge resten av huset etter plantegningen! Du er nødt til å gjenta deg selv ganske mye her.
      Overworld House Frame Chosen_instruction: 'Bygg resten av huset med det materiale du vil. Kommandoen "gjenta" vil være nyttig her.'
      Overworld House Frame_instruction: Skal vi bygge vårt eget hus! Dette stedet ser bra ut. Bygg en innfatning på jordblokkene.
      Overworld Minecart Track_instruction: Du er tilbake på overflaten med masse undergrunnsressurser. Nå skal vi bygge en sti langs jordflekken fra huset ditt. Første trinn er å rydde stien. Følg stien og fjern trærne.
      Overworld Move to Sheep_instruction: 'Legg til en andre "flytt fremover"-kommando for å komme deg til sauen.'
      Overworld Place Wall_instruction: 'Alle hus begynner med en vegg. Bygg den første delen av huset ved å putte kommandoene "plasser" og "flytt fremover" inne i gjenta-løkken.'
      Overworld Plant Crops_instruction: Det er lurt å planlegge fremover. Plant avlinger på begge sidene av vannet så du ikke blir sulten senere.
      Overworld Powered Minecart_instruction: Bra jobbet! Du har samlet mange ressurser og bygd et enkelt hus. Nå kan du legge skinner fra kanten av kartet til husdøren.
      Overworld Shear Sheep_instruction: 'Tid for å klippe sauer! Bruk "klipp"-kommandoen for å samle ull fra begge sauene.'
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Funksjoner lar deg definere nye blokker! Vi har flyttet blokker for å tegne et kvadrat i en funksjon kalt "tegne en firkant". Kan du bruke funksjonen "tegne en firkant" for å opprette vinduer? kvadratene er 75 piksler fra hverandre.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: Lilla blomster kan ha enten 1 eller 0 nektar, men du vet ikke hvilken! Vær forsiktig med å samle nektar fra en lilla blomst hvis den ikke har noe. Sjekk om nektar er lik 1 ved hjelp av hvis blokken.
      Ryan - 4-5 Bee Conditionals 2_instruction: Bien vil bare ha nektar akkura nå. Ikke alle objektene er blomster, så sjekk under HVER ENESTE SKY for å se om det gjemmer seg en blomst der. Hvis det gjør det kan du samle nektar.
      Ryan - Bee Conditionals_instruction: Bien ønsker bare nektar akkurat nå. Ikke alle objekter er blomster, så sjekk under HVER SKY til å se om det skjuler seg en blomst. Hvis det er, så du kan samle nektar.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: 'Her er en funksjon kalt "patruljer". Endre den slik at Katt beveger seg opp 400 piksler og så ned 400 piksler.'
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Nøtt! Nøtt! Nøtt!, Bruk en "Hvis"-blokk får å få meg dit med så få blokker som mulig.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Ok, la oss øve på den en gang til - denne er ikke så forskjellig, men pass deg for veggen!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: '"Hvis-ellers"-blokken sjekker en betingelse og utfører det ene ELLER det andre. For å få meg til nøtten ved å bruke denne blokken.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'En siste øvelse med "hvis-ellers"-blokken. Klarer du å gjøre det riktig på første forsøk?'
      scrat 20_instruction: Klarer du å hjelpe meg igjennom en kompleks labyrint ved bare å legge til 3 blokker? Hvis du gjør det riktig så kan jeg gå en hvilken som helst krokete vei igjennom, uansett lengde. Skynd deg! Isen smelter!
      SpecialFrozenLevel_instruction: |
        Du er nå offisielt blitt en mesterkunstner! 
        Lag et vinterparadis!
      Standalone_Artist_1_instruction: Velkommen til Kunstner! Først, la oss prøve å lage en enkelt firkant ved å bruke brikkene for å snu til høyre og flytte framover. Hver side burde være 100 piksler lange.
      Standalone_Artist_2_instruction: Tegn denne diamanten med vinkler på 120 og 60 grader og 150 piksler lange sider.
      Standalone_Artist_3_instruction: Kan du tenge denne sekskanten med 100 piksler lange sider og vinkler på 60 grader?
      Standalone_Artist_4_instruction: Nå har du fått en ny brikke som du kan bruke, gjenta-løkken. Hva skjer hvis du gjentar disse kommandoene 6 ganger?
      Standalone_Artist_5.5_instruction: 'Legg merke til hvordan vi har forenklet koden for å lage diamanten ved å endre den til å bruke en løkke. Du kan kjøre en løkke over hele sekvensen 12 ganger for å tegne blomsten. Hint: Du må snu 30 grader etter hver diamant-løkke for å ikke tegne samme diamant på nytt hver gang.'
      Standalone_Artist_5_instruction: Hvor mange ganger må du kjøre en løkke over denne diamanten for å tegne blomsten?
      Standalone_Artist_6_instruction: 'Kjør en løkke over denne sekskanten 6 ganger for å lage dette mønsteret. Hvor mange grader må du snu hver gang? Hint: del antall grader i en sirkel på antall ganger du kjører løkka.'
      Standalone_Artist_7_instruction: 'En funksjon er et programmerings-verktøy som du kan bruke for å slippe å gjenta deg selv. Denne funksjonen tegner en blomst og du kan bruke den hver gang du vil tegne en blomst. Bruk denne og den nye hopp-brikken for å tegne disse blomstene. Hint: Blomstene er 150 piksler fra hverandre'
      Standalone_Artist_8_instruction: 'Her er en funksjon kalt "Tegn en figur" som vi har programmert til å tegne sekskanter. Kjør koden for å se hva den gjør og så kan du eksperimentere med den og se hva som skjer hvis du endrer på den. Kan du få den til å tegne et mønster av firkanter, trekanter og åttekanter?'
      Standalone_Artist_9_instruction: Lag akkurat det bildet du vil! Du har også fått en ny, tom funksjon som du kan bruke til å lage den funksjonen du vil ha!
      Standalone_Artist_v2_instruction: Velkommen til Kunstner! Først, la oss prøve å lage en enkelt firkant ved å bruke brikkene for å snu til høyre og flytte framover. Hver side burde være 100 piksler lange.
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instruksjoner
      U2 frequency random sub_instruction: Instruksjoner
      U2 vigenere cipher_instruction: Instruksjoner
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Mal
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 'Under noen av blokkene skjuler det seg lava, som du må dekke til før du går videre. Her hjelper det med en "hvis"-kommando. Legg til en "flytt fremover"-kommando på riktig sted for å utvinne disse blokkene.'
      Underground If Statements_instruction: 'Det er nå det blir vanskelig. Utvinn tre rødsteiner, men ikke fall ned i lavaen. Bruk en "hvis"-kommando for å plassere brostein over lavaen du finner.'
      Underground Iron_instruction: Det er ikke lurt å gå rett inn i smeltet lava. Bruk brostein til å lage en bro, og så utvinner du minst to av jernblokkene.
      Underground Mine in a Circle_instruction: Finn ut hvordan du skaffer deg fem diamanter og sju rødsteiner. Prøv med en gjenta-kommando inne i en gjenta-kommando for å gå i en firkant.
      Underground Mining Coal_instruction: De mest verdifulle ressursene finner du under bakken, men det kan være mørkt der. Plasser minst to fakler og utvinn minst to kull.
      Underground Test Level_instruction: Samle alle mineralene!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
