nn:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hei, jeg er en kunstner. Du kan skrive kode for å få meg til å tegne nesten hva som helst. Bruk noen blokker for å få meg til å tegne over de grå linjene på bildet. (Hver linje er 100 piksler lange)
      2-3 Artist 11_instruction: 'Gi stopp skiltet en kant ved å lage en åttekant med åtte sider, 100 piksler lange. Hvor mange grader må du dreie? (Hint: Hva er 360 delt på 8?) '
      2-3 Artist 12_instruction: 'Sett "Gjenta" blokken slik at den lager en sirkel til å fullføre øyet. Hvis hver bevegelse blir dreid men en grad, hvor mange ganger må du repetere for å fullføre sirkelen? 180? 360? 500?'
      2-3 Artist 2 new_instruction: 'Dette huset har en halv ferdig vegg. Hver side er 100, men den halvferdige veggen er bare 50. Fullfør veggen. '
      2-3 Artist 2_instruction: 'Dette huset har en halv ferdig vegg. Hver side er 100, men den halvferdige veggen er bare 50. Fullfør veggen. '
      2-3 Artist 3.4_instruction: 'Hoppe blokken beveger kunstneren uten å tegne. Tegn den stiplede linjen ved hjelp av både hoppe- og tegne blokker.'
      2-3 Artist 3_instruction: Denne hatten er 100 pixler høy. Tegn en hatt som er 70 piksler lavere.
      2-3 Artist 3new_instruction: Den røde hatten er 100 pixler høy. Fullfør tegningen av en svart hatt som et 70 pixler kortere. Bredden på den svarte hatten er 50 pixler.
      2-3 Artist 4_instruction: Hjelp meg å fullføre juset til denne katten.
      2-3 Artist 5_instruction: 'Erstatt denne koden med en "Gjenta" blokk for å tegne det samme huset med bare 3 blokker.'
      2-3 Artist 6_instruction: 'Dette huset trenger ett tak. Tegn trekanten. Hint: alle de tre sidene skal være like lange.'
      2-3 Artist 7_instruction: 'Fullfør å tegne den høyre siden av det siste vinduet. Hver firkant i vinduet er 25 piksler. '
      2-3 Artist 8_instruction: Fullfør rommene for alle dyrene ved å dele rektangelet inn i 2 like firkanter. Rektangelet er 200 piksler brede, og 100 piksler høye.
      2-3 Artist 9_instruction: Fullfør denne dragen
      2-3 Artist Assessment 1_instruction: 'Lekse: Fullfør å tegne den siste tannen, 25 piksler bred og 25 piksler høy.'
      2-3 Artist Debugging 1_instruction: Kan du lage denne luen med en topp lengde 100?
      2-3 Artist Debugging 10_instruction: 'Retnings kontrolleren er for smal. Hint: Gjør den bredere med 10 piksler'
      2-3 Artist Debugging 11_instruction: Hjelp meg å fullføre det vidunderlige snøflaket mitt. Hvor mange ganger må jeg repetere for å fullføre det?
      2-3 Artist Debugging 12_instruction: Jeg skal legge til en bølge i denne scenen. Kan du hjelpe meg?
      2-3 Artist Debugging 2_instruction: 'Koden for tre kinnskjeggsom du ser er feil. Hint: Hvert kinnskjegg er 75 piksler langt. Fiks koden som tegner kinnskjegget.'
      2-3 Artist Debugging 3_instruction: 'Båten min har ett hull! Kan du fikse det ved å endre vinkelen til linjen? Hint: Den siste vinkelen er feil med 15 grader.'
      2-3 Artist Debugging 4_instruction: Hva er bildet som vi prøver å tegne? Fullfør å koble prikkene sammen med riktige linjer og vinkler.
      2-3 Artist Debugging 5_instruction: 'Denne koden for benet og foten som du ser er feil. Hint: Foten er for lang. Vi må kansje slette et steg (ordspill ment)'
      2-3 Artist Debugging 6_instruction: Ser ut som om jeg sitter på en stol som mangler ett ben. Refiger blokker fpr å få benet.
      2-3 Artist Debugging 7_instruction: 'Ser ut som om C-en i "Code" er tegnet feil vei. Kan du får den til å se ut som en C?'
      2-3 Artist Debugging 8_instruction: Hjulet mitt er ikke fullført. Hvor mange ganger må jeg repetere for å fullføre det?
      2-3 Artist Debugging 9_instruction: 'Koden for denne stammen er feil. Hint: Vinkelen er feil med 60 grader'
      2-3 Artist Debugging Assessment 1_instruction: 'Denne formen er for liten. Kan du gjøre den større? Hint: Den skal være 75 piksler større på hver side.'
      2-3 Artist Free Play_instruction: Åpent brett! Tegn det du vil.
      2-3 Artist Functions 1_instruction: 'Hallo. Meg zombie artist. Meg tegne elsker! Hjelp meg med å tegne de firkantete brillene. Hint: mellomrommet mellom brilleglassene er 25 piksler kortere enn lengden på firkantene.'
      2-3 Artist Functions 10_instruction: Her er ti funksjoner, en til å tegne en stor del og en til å tegne en liten del. Bruk den til å tegne innsiden av en maskin!
      2-3 Artist Functions 11.5_instruction: 'Her er den samme "Tegne en sekskant" funksjonen. Hva skjer hvis du bare snur 60 grader hver gang du gjentar?'
      2-3 Artist Functions 11_instruction: 'Vi har omdøpt funksjonen "tegne et kvadrat" til "trekke en sekskant", men den tegner fortsatt bare kvadrater! Kan du endre funksjonen "tegne en sekskant" til å tegne en sekskant med sider som er 50 piksler lange, og tegner bildet ved hjelp av funksjonen?'
      2-3 Artist Functions 12_instruction: 'Funksjoner er virkelig flott for å tegne komplekse ting flere ganger. Kan du bruke funksjonen "tegne en blomst" til å fylle resten av planteboksen? (Hint: planter er atskilt med 100 pikslers avstand)  '
      2-3 Artist Functions 13_instruction: Vi har gitt deg fire funksjoner. Bruk dem slik du vil i ett eller flere ledd for å lage bilder som du kan dele med vennene dine. Trykk Kjør for å se et eksempel.
      2-3 Artist Functions 2_instruction: 'Funksjoner lar deg definere nye blokker! Vi har flyttet blokker for å tegne et kvadrat i en funksjon kalt "tegne en firkant". Kan du bruke funksjonen "tegne et kvadrat" for å opprette vinduer? kvadratene er 75 piksler fra hverandre.'
      2-3 Artist Functions 3_instruction: Rediger funksjonen for å tegne et kvadrat med sidelengde 115 og tegn større ruter. Rutene er nå 45 piksler fra hverandre.
      2-3 Artist Functions 4_instruction: 'Bruk "gjenta" blokken til å tegne disse 3 rutene.'
      2-3 Artist Functions 7_instruction: 'Bruk funksjonen "tegn et hus" for å tegne to hus med to forskjellige parametere. (Hint: det første huset er 100 piksler).'
      2-3 Artist Functions 9_instruction: Her er funksjon for snøflak. Prøv deg frem med den for å lage en vinterscene. Dette er et åpent nivå så det er ingen oppgaver å løse. Ha det gøy!
      2-3 Artist Loops 1_instruction: Kan du lage en sekskant med sider som er 100 piksler lange for å fullføre cellen. Husk at det betyr at du da kun trenger å snu 60 grader.
      2-3 Artist Loops 10_instruction: Hva skjer med designet dersom vi halverer lengden av det siste steget?
      2-3 Artist Loops 11_instruction: 'Nå skal vi lage *enda en* løkke rundt hele skapelsen! Ikke glem å legge til en vinkel på slutten av den ytre sløyfen.'
      2-3 Artist Loops 2_instruction: Bruk en gjenta-blokk for å få cellen til et skall.
      2-3 Artist Loops 4_instruction: Vil du se hva som skjer når vi gjentar figuren igjen og igjen med en løkke?
      2-3 Artist Loops 5_instruction: Nå skal vi gjøre en liten endring i løkken og se hvor ulikt bildet blir.
      2-3 Artist Loops 6_instruction: Legg til en flytt-bevegelse og en snu-bevegelse til inne i løkka og se hvordan designet endrer seg.
      2-3 Artist Loops 7_instruction: Vi kan bruke løkker til å lage alle slags polygoner. Kan du lage en rombe inni denne heksagonen?
      2-3 Artist Loops 8_instruction: La oss sette begge elementene inn i en løkke.
      2-3 Artist Loops 9_instruction: "Vi skal opprette de samme elementene, men nå skal vi legge til litt avstand mellom dem.\r Bruk den samme koden som tidligere, men legg til et steg for å gå fram i slutten av den ytre løkka."
      2-3 Artist Loops New 1_instruction: La oss tegne hodet til denne roboten! Kan du lage et rektangel med sider som er 100 pixler lange?
      2-3 Artist Loops New 10_instruction: "Nå skal vi koble sammen en haug med V'er ved å tegne de i en løkke."
      2-3 Artist Loops New 11_instruction: Denne gangen skal vi tegne det 24 ganger. Legg til en 30 graders venstresving i koden og legg alt sammen inn i en gjenta-blokk.
      2-3 Artist Loops New 12_instruction: |
        Tegn en diamant der hver av sidene er 100 piksler.
        
      2-3 Artist Loops New 13_instruction: Nå tegner du diamanten 3 ganger inni en løkke.
      2-3 Artist Loops New 14_instruction: Nå skal vi tegne diamanten ti ganger men rotere den 90 ganger for hver diamant.
      2-3 Artist Loops New 15_instruction: Tegn noe morsomt.
      2-3 Artist Loops New 2_instruction: 'Her er litt av koden du brukte for å tegne kvadratet. Hva skjer dersom du bruker en "Gjenta" blokk for å kjøre denne koden fire ganger?'
      2-3 Artist Loops New 9_instruction: Tegn en enkel V der hver av sidene er 50 pixler for å fullføre pilen.
      2-3 Artist Match Hex Pic_instruction: 'Match: Hjelp til med å fullføre heksagonet.'
      2-3 Artist Match Rho Pic_instruction: 'Match: Fullfør koden.'
      2-3 Artist Match Sq Pic_instruction: 'Match: Fullfør koden'
      2-3 Artist Match Tri pic_instruction: 'Match: Fyll inn den koden som mangler.'
      2-3 Artist Nested Loops 1_instruction: "Du har brukt løkker til å tegne figurer før, men visste du at du kan putte en løkke inni en annen løkke?\r Kjør en løkke 3 ganger over hele denne blokken av kode for å tegne mønsteret."
      2-3 Artist Nested Loops 10_instruction: Repeter dette mønsteret 12 ganger for å fullføre mønsteret.
      2-3 Artist Nested Loops 11_instruction: Repeter denne koden 4 ganger for å fullføre mønsteret. Snu 90 grader etter hver sirkel.
      2-3 Artist Nested Loops 12_instruction: Repeter denne koden 12 ganger for å fullføre svingene.
      2-3 Artist Nested Loops 2_instruction: Nå skal vi kjøre triangelblokken gjennom løkken 6 ganger. Etter hvert triangel må du snu 60 grader før du tegner det neste.
      2-3 Artist Nested Loops 3_instruction: For å tegne dette mønsteret må du repetere triangelet 12 ganger. Del antall grader i en sirkel (360)
      2-3 Artist Nested Loops 4_instruction: 'Repeter denne diamanten 12 ganger for å tegne en blomst. Tips: 12 diamanter er akkurat likt de 12 triangelen du laget sist. Hvor mye må du snu etter hver figur?'
      2-3 Artist Nested Loops 5_instruction: Tegn inn vinduene i denne bygningen med løkke i løkke. Vinduene er 20 pixler brede og med 20 pixler mellom hvert vindu.
      2-3 Artist Nested Loops 6_instruction: Dinosauren har 8 tagger langs halen sin; hver tagg er 30 pixler lang. Gjenta triangelet 8 ganger men pass på å beveg deg fremover etter hver.
      2-3 Artist Nested Loops 7_instruction: 'Gjenta dette triangelet 10 ganger for å tegne solen. Du må bevege deg og snu deg etter hvert triangel.  Du finner ut hvor mye du må snu deg ved å dele antall grader i en sirkel på antallet figurer som den består av.'
      2-3 Artist Nested Loops 8_instruction: 'Nå skal vi legge til litt gress på bildet.  Det er 50 pixler mellom hver gresstust.'
      2-3 Artist Nested Loops 9_instruction: Vi avslutter dette bildet ved å legge til en blomst. Repeter diamanten 12 ganger for å tegne blomsten.
      2-3 Artist Nested Loops Free Play_instruction: Frilek, tegn noe kul med løkker i løkker.
      2-3 Bee Conditionals 1_instruction: Hei! Jeg er en bie. Kan du hjelpe meg å samle nektar fra blomstene?
      2-3 Bee Conditionals 10_instruction: |
        Lilla blomster har enten 1 eller 0 nektar. Pass på at du ikke samler inn nektar fra en lilla blomst som ikke har nektar. 
        
      2-3 Bee Conditionals 11_instruction: Samle inn nektar dersom blomsten har nektar.
      2-3 Bee Conditionals 12_instruction: bruk en løkke for å sjekke og hente inn nektar fra alle disse blomstene.
      2-3 Bee Conditionals 13_instruction: 'Samle inn nektar og lag honning. Tips: hva skjer dersom du bruker "hvis nektar" på en rød blomst? Kan du fullføre dette med en løkke?'
      2-3 Bee Conditionals 14_instruction: 'Samle inn nektar og lag honning.  Pass på å ikke samle inn nektar fra de lilla blomstene som ikke har nektar.'
      2-3 Bee Conditionals 15_instruction: Samle inn nektar fra alle fire blomstene.
      2-3 Bee Conditionals 2_instruction: Hei, jeg er en bie! Hjelp meg å samle nektar fra alle blomstene. Bruk en løkke.
      2-3 Bee Conditionals 3_instruction: Hjelp meg å samle inn nektaren fra alle blomstene og lag honning. Bruk en løkke.
      2-3 Bee Conditionals 4_instruction: Hjelp meg å samle inn nektar fra blomstene og lag all honningen.
      2-3 Bee Conditionals 5_instruction: 'Lilla blomster har enten 1 eller 0 nektar, men du vet ikke hvilken! Pass på at du ikke prøver å samle inn nektar fra blomster som ikke har mer nektar. Sjekk om nektar er lik 1 ved å bruke en "hvis"-blokk.'
      2-3 Bee Conditionals 6_instruction: 'Bruk en "hvis"-blokk for å sjekke om det er nektar i blomsten.'
      2-3 Bee Conditionals 7_instruction: Samle inn nektar fra alle blomstene dersom de har nektar.
      2-3 Bee Conditionals 8_instruction: |
        Dette jordet har både røde og lilla blomster.
        Røde blomster har en kjent mengde med nektar, mens lilla har en ukjent mengde nektar.
        Samle inn all nektaren.
      2-3 Bee Conditionals 9_instruction: Samle inn nektar fra alle blomstene.
      2-3 Bee Conditionals Assessment 1_instruction: 'Lekse: Samle alle nektarene. Vær forsiktig så du ikke samler nektar fra en lilla blomst hvis den ikke har noen.'
      2-3 Bee Debugging 1_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 10_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 2_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 3_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 4_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 5_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. Du kan nå bruke "Kjør" og "Trinn".'
      2-3 Bee Debugging 6_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 7_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 8_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging 9_instruction: 'Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Debugging Assessment 1_instruction: 'Lekse: Disse blokkene plager meg. Fiks feilene og samle inn nektaren for å lage all honningen. '
      2-3 Bee Functions 1_instruction: 'Funksjoner er kodeblokker som utfører en bestemt oppgave. Bruk blokken "hent 2 nektar" til å samle inn nektar fra hver blomst.'
      2-3 Bee Functions 10_instruction: Lilla blomster har enten 1 eller 0 nektar. Lag en funksjon som samler bare samler inn nektar fra de blomstene som har nektar i seg.
      2-3 Bee Functions 2_instruction: 'Funksjoner er kodeblokker som utfører en bestemt oppgave. Bruk blokken "hent 5" til å samle inn 5 nektar om gangen. Pass på å bruk en løkke for å bruke ideelt antall blokker.'
      2-3 Bee Functions 3_instruction: Samle inn nektar fra alle blomstene.
      2-3 Bee Functions 4_instruction: 'Funksjonen "flytt og hent nektar" snur bien, samleren inn nektar og returnerer til der den startet. Bruk denne funksjonen til å samle inn all nektaren.'
      2-3 Bee Functions 5_instruction: Det er nå mer nektar i blomstene. Redigere funksjonen slik at den samler 4 nektar og bruk den til å samle alle nektar fra blomstene.
      2-3 Bee Functions 6_instruction: Bruk nå samme funksjonen til å samle nektar fra tre blomster.
      2-3 Bee Functions 7_instruction: Blomstene er nå lenger unna. Rediger funksjonen og bruk den til å samle alle nektar fra blomstene.
      2-3 Bee Functions 8_instruction: Lag din egen funksjon for å samle inn 7 nektar, beveger seg fremover og lager 7 med honning. Bruk funksjonen til samle nektar fra alle blomster og lag honning ved alle bikubene.
      2-3 Bee Functions 9_instruction: Lag din egen funksjon som går nedover stien, henter nektar, lager honning og får bien tilbake til toppen av stien.
      2-3 Bee Functions Assessment 1_instruction: 'Lekse: bruk funksjonen til å samle inn nektar fra alle blomstene.'
      2-3 Bee Functions Assessment 2_instruction: 'Lekse: Lag en funksjon som lager 3 honning om gangen.'
      2-3 Bee Loops 1_instruction: 'Hver blomst inneholder en enhet med nektar. Samle inn nektar fra alle blomstene. '
      2-3 Bee Loops 10_instruction: Får du til å bruke en mens-løkke inni to andre løkker for å samle inn all nektaren?
      2-3 Bee Loops 11_instruction: Bruk en mens-løkke til å samle alle nektarene fra blomstene i dette feltet.
      2-3 Bee Loops 12_instruction: Bruk en mens-løkke til å samle alle nektarene fra blomstene i dette feltet.
      2-3 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      2-3 Bee Loops 1A_instruction: 'Hei, jeg er en bie. Kan du hjelpe meg med å samle alle nektarene fra disse blomstene? '
      2-3 Bee Loops 2_instruction: Bruk en løkke for å samle alle nektarene og å lage honningen.
      2-3 Bee Loops 2A_instruction: Klarer du å løse oppgaven lettere ved å bruke en løkke?
      2-3 Bee Loops 3_instruction: Samle inn nektar fra alle blomstene og lag honning i hver av bikubene.
      2-3 Bee Loops 3A_instruction: Kan du bruke en løkke til å samle inn all nektaren?
      2-3 Bee Loops 3B_instruction: Nå kan du bruke den nye gjenta-blokken for å samle inn nektar og lage honning.
      2-3 Bee Loops 4_instruction: 'Bruk en løkke som i forrige oppgave men ta med en "snu"-blokk.'
      2-3 Bee Loops 4A_instruction: |
        Hva skjer dersom du gjentar dette 3 ganger? 
        Ikke glem å lage honning til slutt!
      2-3 Bee Loops 5_instruction: Bruk en loop får å gå ned trinnene og samle inn nektaren.
      2-3 Bee Loops 6_instruction: Bruk en loop for å samle inn nektar fra alle blomstene og lag honing i alle bikubene.
      2-3 Bee Loops 7_instruction: Sett disse blokkene i en loop for å samle inn nektar fra alle blomstene.
      2-3 Bee Loops 8_instruction: 'De lilla blomstene har en ukjent mengde nektar. Bruk løkken "mens nektar" til å samle inn all nektaren. Denne løkken vil kjøre så lenge betingelsen er sann. I dette tilfellet er det dersom Nektar > 0'
      2-3 Bee Loops 9_instruction: Mens-løkken kan utføre de samme operasjonene som en hvis-setning.
      2-3 Bee Loops Assessment 1_instruction: Lekse – Bruke en mens-løkke til å samle inn all nektaren fra denne blomsten.
      2-3 Maze 1_instruction: 'Kan du hjelpe meg å fange den slemme grisen? Sett sammen et par «gå fremover» blokker og trykk "Kjør Program" '
      2-3 Maze 10_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze 11_instruction: Få meg bort til blomsten, jeg er sulten! Hvor mange ganger er du nødt til å repetere en blokk?
      2-3 Maze 12 (copy 1)_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hint: Lag en løkke ved å bruke "repeter ganger" blokk.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hint: Lag en løkke ved å bruke "repeter ganger" blokk.)'
      2-3 Maze 12 (old)_instruction: 'Få meg til grisen ved å bruk "Gjenga ganger" blokken!'
      2-3 Maze 12_instruction: |
        Klarer du å bytte ut disse fem blokkene med bare to blokker?
        (Tips: Lag en løkke ved å bruke en "gjenta ganger" blokk)
      2-3 Maze 13 (old)_instruction: 'Få meg til grisen ved å bruke "Gjenta til" blokken!'
      2-3 Maze 13_instruction: Få meg til grisen ved å bare bruke to blokker.
      2-3 Maze 14 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 14_instruction: 'Få meg til solsikken! (Hvor er "Gjenta ganger" blokken når jeg trenger den?)'
      2-3 Maze 15 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 15_instruction: Bruk to løkker for å bruke færre blokker for å komme frem til grisen.
      2-3 Maze 16 (old)_instruction: 'Få meg til grisen ved å bruke "Repeter til" blokken!'
      2-3 Maze 16 before_instruction: Få meg til grisen.
      2-3 Maze 16_instruction: Få meg til solsikken. Gjenta bevegelsene!
      2-3 Maze 2_instruction: Denne grisen har røsket i fjærene mine. Hjelp meg å få tak i han!
      2-3 Maze 3_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær!
      2-3 Maze 4_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze 5_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze 6_instruction: Hold deg i ro og hjelp meg med å finne den slemme grisen. Ellers blir jeg kanskje sinna!
      2-3 Maze 7_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze 8_instruction: Få meg til grisen!
      2-3 Maze 9_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze Loops 1_instruction: Kan du få meg bort til grisen ved å bruke kun 5 blokker?
      2-3 Maze Loops 17_instruction: Få meg til solsikken!
      2-3 Maze Loops 18_instruction: Få meg til solsikken!
      2-3 Maze Loops 19_instruction: Få meg til solsikken!
      2-3 Maze Loops 20_instruction: Få meg til solsikken!
      2-3 Maze Loops 21_instruction: Få meg til solsikken!
      2-3 Maze Loops Assessment 1_instruction: 'Lekse: Få meg til solsikken med bare 5 blokker!'
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 Maze sq10v2_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 maze sq11_instruction: Få meg til grisen! Hvilke blokker ble brukt flere ganger?
      2-3 maze sq12_instruction: 'Kan du erstatte det forrige svaret med en løkke ved å bruke en "repeter ganger"-blokk?'
      2-3 maze sq13_instruction: 'Kjære person. Meg zombie.. Må.... gå... til solsikken. Lage en løkke med "gjenta til" blokk.'
      2-3 maze sq14_instruction: Klarer du å komme deg til solsikken med bare fire blokker?
      2-3 maze sq15_instruction: Klarer du å komme deg til solsikken med bare fem blokker?
      2-3 maze sq16_instruction: Ok, dette ligner, men er litt annerledes. Kan du gjøre det med kun fem blokker?
      2-3 Maze sq2_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær!
      2-3 Maze sq3_instruction: Før meg til den grøne styggingen! (Sjå opp for dynamitt)
      2-3 Maze sq4_instruction: Hold deg i ro og hjelp meg med å finne den slemme grisen. Ellers blir jeg kanskje sinna!
      2-3 Maze sq5_instruction: Få meg bort til grisen! Hvor mange ganger må du repetere en blokk?
      2-3 Maze sq6_instruction: 'Kan du erstatte det forrige svaret med kun to blokker? (Hing: Lag en løkke ved å bruke "repeter ganger"-blokk.)'
      2-3 Maze sq7_instruction: Få meg bort til den grønne inntrengeren ved å kun bruke tre blokker.
      2-3 Maze sq8_instruction: 'Få meg bort til grisen! (Hvor er den "repeter ganger"-blokken når jeg trenger den?)'
      2-3 Maze sq9_instruction: Opprett løkker for å komme bort til grisen ved bruk av færre blokker.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Hjelp fuglen å fange den slemme grisen ved å flytte den framover
      4-5 Artist 1_instruction: Hjelp meg å tegne ferdig boksen. (Hver linje er 300 pixler lang)
      4-5 Artist 10_instruction: 'Trykk på "Kjør" for å teste koden. Deretter, repeter det mange nok ganger til å fullføre tegningen. Fargene vil være forskjellig hver gang.'
      4-5 Artist 11_instruction: Fullføre grønne linjene. Linjene er 300 piksler lange og 15 piksler fra hverandre.
      4-5 Artist 2_instruction: Kan du fullføre kvadratet ved å repetere koden?
      4-5 Artist 3.5_instruction: 'Ok, prøv å se hva som kommer til å skje hvis du kjører denne koden (eller kjør den ved å trykke "Kjør"). Deretter, gjentar du dette helt til bildet er ferdig. Fargene vil mest sannsynlig bli forskjellig hver gang.'
      4-5 Artist 3_instruction: Dette rektangulære blomsterbedet har en omkrets på 600. Langsiden har en lengde på 200. Tegn rektangelet.
      4-5 Artist 4_instruction: Hvor mange grader er det i en sirkel? Gjenta blokkene for å lage en sirkel av farger.
      4-5 Artist 5_instruction: Hvilken vinkel bruker du?
      4-5 Artist 6_instruction: I et likesidig triangel er alle tre vinklene 60 grader. Hver side er 200 pixler. Fullfør tegningen.
      4-5 Artist 7_instruction: Denne rettvinklede trekanten har vinkler på 30, 60 og 90 grader. Den skrå linjen er dobbel så lang som høyden som er 100 pixler. Fullfør tegningen.
      4-5 Artist 8_instruction: Midtlinjen på en fotballbane er vinkelrett på sidelinjene. Denne banen har en omkrets på 800 pixler og er 240 pixler lang. Hvor bred er den? Tegn sidelinjene og midtlinjen.
      4-5 Artist 9_instruction: Tegn den andre halvparten slik at designet blir symmetrisk. Trekantene er likesidede og hver side er 50 pixler lange.
      4-5 Artist Assessment 1_instruction: 'Lekse: Bruk en løkke for å tegne en likesidig trekant. Hver side er 300 pixler.'
      4-5 Artist For Loops 1_instruction: Sett tallene 1 til 10 inn i bredde-boksene og kjør koden.
      4-5 Artist For Loops 11_instruction: 'Fullfør "for"-blokkene slik at den teller 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Hva skjer hvis du reverserer "fra" og "til"-tallene. Fullfør "for"-blokka så den teller 200, 180, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'Designet startet uten en "for"-løkke og bruker for mange blokker! Bruk en "for"-blokk til å fullføre spiralen. Hint: lengden på den siste linja er 250 piksler.'
      4-5 Artist For Loops 14_instruction: 'Noen startet koden, men innså at det måtte være en raskere måte! Bruk en "for"-blokk til å erstatte blokkene og fullfør triangel-spiralen. (Hint: lengden på den siste linja er 300 piksler.)'
      4-5 Artist For Loops 15_instruction: 'Noen startet koden, men innså at det måtte være en raskere måte! Bruk en "for"-blokk til å erstatte blokkene og fullfør heksagon-spiralen. (Hint: lengden på den siste linja er 200 piksler.)'
      4-5 Artist For Loops 3_instruction: 'Hvordan kan vi telle fra 1 til 50? Endre "for"-blokka.'
      4-5 Artist For Loops 4_instruction: 'Gjør ferdig "for"-blokka slik at den teller fra 1 til 10 med 1-steg.'
      4-5 Artist For Loops 6_instruction: 'Tegn kvadrater med sider på 50, 60, 70, 80 og 90 piksler. Du blir nødt til å bruke "tegn et kvadrat"-funksjonen fem ganger.'
      4-5 Artist For Loops 7_instruction: 'Tegn de samme kvadraten, men bruk en "tell med"-blokk til å endre størrelsene. Plasser en "teller"-blokk i "tegn et kvadrat"-funksjonen. Hint: Den er i Variabler-kategorien.'
      4-5 Artist For Loops 8_instruction: 'Kan du fullføre programmet ved å plassere blokkene inn i en "for"-blokk som teller fra 10 til 200 med steg på 10? Du finner "for"-blokken i kategorien Løkker.'
      4-5 Artist For Loops 9_instruction: |
        Disse sirklene er av størrelser på 5, 10, 15, 20,
        25, 30 og 35. Tegn sirklene ved å bruke en "for"-løkke.
      4-5 Artist Free Draw 1_instruction: Fritegning. Tegn det du føler deg inspirert til.
      4-5 Artist Functions 1_instruction: Bruk en repeter-løkke til å tegne dette triangelet.
      4-5 Artist Functions 10a_instruction: |-
        Putt denne koden inn i "tegn et snøfnugg"-funksjonen og erstatt 50 med parameteret 'størrelse'. Funksjonen er allerede kalt på for å opprette et snøfnugg på 100 piksler.
      4-5 Artist Functions 10b_instruction: "Bruk 'tegn et snøfnugg'-funksjonen for å opprette snøfnugg av forskjellige størrelser. Hint: lengden på det første snøflaket er 25 og hvert snøfnugg er dobbelt så stort som det forrige."
      4-5 Artist Functions 11_instruction: '"Tegn et heksagon"-funksjonen bruker "tegn en trekant"-funksjonen. Gjør ferdig heksagon-funksjonen. (Hint: Et heksagon har 6 sider, hvor hver er 100 piksler lang)'
      4-5 Artist Functions 12_instruction: "Fullfør 'tegn bølger'-funksjonen. Hver bølge består av en Øvre bølge og en Nedre bølge. Hint: Tegn 5 blå bølger."
      4-5 Artist Functions 13 Free play_instruction: Her er noen funksjoner til å tegne planeter, stjerner, raketter og roboter. Bruk dem på hvilken måte du vil til å lage bilder du kan dele med vennene dine.
      4-5 Artist Functions 14 Free play_instruction: "Her har vi gitt deg flere funksjoner. Bruk dem på hvilken måte du vil inni en eller flere løkker for å lage bilder som du kan dele med vennene dine. Klikk 'Kjør' for å se et eksempel."
      4-5 Artist Functions 15 Assessment_instruction: 'Lekse: Bruk "tegn et kvadrat"-funksjonen til å opprette kvadratene. Kvadratene er 50, 100 og 150 piksler.'
      4-5 Artist Functions 2a_instruction: 'Putt disse blokkene inn i en ny funksjon kalt "tegn en liten trekant" og kall på den.'
      4-5 Artist Functions 2b_instruction: 'Opprett en funksjon kalt "tegn en liten trekant" ved å bruke de gitte blokkene.'
      4-5 Artist Functions 3_instruction: 'Opprett funksjonene "tegn en medium trekant" og "tegn en stor trekant". "Tegn en liten trekant"-funksjonen er opprettet for deg. Trekantene har sider med lengdene 50 (liten), 100 (medium) og 150 (stor). '
      4-5 Artist Functions 4_instruction: 'Эта новая функция "нарисовать треугольник" содержит параметр и может выполнять действия предыдущих трех функций. Нарисуйте такие же треугольники с помощью новой функции.'
      4-5 Artist Functions 5_instruction: 'Kan du endre "tegn en trekant"-funksjonen til å en "tegn et kvadrat"-funksjon for å endre tegningen?'
      4-5 Artist Functions 6_instruction: 'Bruk "tegn et kvadrat" og "tegn en trekant"-funksjonene til å tegne et hus. (Hint: Kvadratets sider er 200 piksler)'
      4-5 Artist Functions 6b_instruction: 'Bruk funksjonene tegn et kvadrat og trekant sammen med andre blokker for å lage et hus ved å legge dem til i "tegn et hus"-funksjonen og kalle den.'
      4-5 Artist Functions 7_instruction: 'Bruk "tegn et hus"-funksjonen til å tegne hus som er 100 piksler og 50 piksler. De to husene skal være separert med 50 piksler.'
      4-5 Artist Functions 8_instruction: 'Funksjonen "tegn en blomst" har et parameter som tillater deg å sette stilkens høyde. Sett den til 200 og se hva som skjer.'
      4-5 Artist Functions 9_instruction: Tegn disse 3 blomstene. Høyden på den første er 100 og den neste blomsten er alltid 50 piksler mer enn høyden på den forrige. Blomstene er også 100 piksler unna hverandre.
      4-5 Artist Patterns 1_instruction: Får du til å tegne dette kvadratet ved bruk av en løkke? Hver side er 20 piksler lang.
      4-5 Artist Patterns 10_instruction: 'Denne koden tegner to rader med sekskanter – Repeter hele kodeblokken 4 ganger for å tegne hele bikubemønsteret. Tips: Du må hoppe tilbake 120 piksler i den ytterste løkken for å hindre at artisten ikke tegner på utsiden av skjermen.'
      4-5 Artist Patterns 11_instruction: 'Hvor mange ganger må du repetere denne koden for å tegne en halvsirkel? Tips: Dersom deter 360 grader i en hel sirkel og hver repetisjon beveger seg 3 grader, hvor mange ganger må du repetere for å tegne en hel sirkel?'
      4-5 Artist Patterns 12_instruction: Hva skjer dersom du kopierer løkken og snur mot venstre fremfor høyre? Kan du du bruke en gjenta-blokk til å tegne denne bølgen?
      4-5 Artist Patterns 13_instruction: Nå la oss gjenta det hele fire ganger for å opprette denne bilderammen. Se opp for hjørnene – du kan ikke bare snu 90 grader! Dersom repetering av en 3-graders 60 ganger utgjør en halvsirkel, hvilke av disse kodeblokkene vil utgjøre en kvart-sirkel til hjørnene?
      4-5 Artist Patterns 2_instruction: Dersom du legger kvadratløkken inni en annen løkke kaller vi det en nestet løkke. Hva må du legge til i den ytre løkken for at alle 15 kvadratene skal være på en linje ved siden av hver andre?
      4-5 Artist Patterns 3_instruction: Nå skal vi ta det et nivå lenger! Vi har nøstet hele kodeblokken inn in annen løkke, men du må få artisten på riktig plass for å tegne den neste linjen. Hvilke av disse kodeblokkene kan du plassere mot slutten av den ytre løkken for å tegne hele mønsteret.
      4-5 Artist Patterns 4_instruction: Denne diamanten har sider som er 50 piksler lange og vinkler på 120 og 60 grader. Tegn den ved hjelp av en løkke.
      4-5 Artist Patterns 5.5_instruction: Hvor mange ganger må vi repetere denne blokken for å tegne hele rutenettet av diamanter?
      4-5 Artist Patterns 5_instruction: |2
        Nå skal vi repetere den for å tegne en rekke med 6 diaamanter.
         Legg merke til at vi har endret på diamantkoden slik at den repeteres 3 ganger istedenfor 2 – Hvorfor tror du vi har gjort det?
      4-5 Artist Patterns 6_instruction: Hvor mange ganger er du nødt til å repetere denne blokka for å tegne hele rutenettet av diamanter?
      4-5 Artist Patterns 7_instruction: 'Nå skal vi endre koden fra forrige oppgave for å gjøre mønsteret litt mer komplisert. Legg merke til hvordan diamantene nå overlapper hverandre. Forsøk å endre den første "hopp tilbake" fra 100 til 50 (halvparten så langt) – Hvor langt skal artisten nå gå i det andre "hopp tilbake"'
      4-5 Artist Patterns 8_instruction: Bruk en løkke til å tegne en sekskant der hver side er 40 piksler og vinklene er på 60 grader.
      4-5 Artist Patterns 9.5_instruction: Nå skal vi repetere denne koden for å tegne to rader med sekskanter. Legg merke til hvordan den andre raden er forskjøvet mot høyre.
      4-5 Artist Patterns 9_instruction: 'Nå skal vi repetere den koden 3 ganger for å tegne hele rekken. Tips: Hver sekskant er 80 piksler på det bredeste.'
      4-5 Artist Patterns Free Play_instruction: Frilek – Prøv å lage ditt eget mønster!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Bien ser ikke forskjell på blomst og bikube. Bare samle inn nektar fra blomstene men sjekk først om det er blomst eller bikube.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Bien vil bare ha nektar akkurat nå. Husk, ikke alle er blomster, så sjekk etter at du bare samler nektar fra blomster.
      4-5 Bee Conditionals 3_instruction: Bien ønsker nå bare å lage honning. Sjekk at bien bare lager honning i bikubene.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 'Det ukjente objektet er enten en blomst eller en bikube. bruk "hvis/ellers" blokk til å samle inn nekter dersom det er en blomst, hvis ikke så lager du honning (fordi det er en bikube).'
      4-5 Bee Conditionals 5_instruction: 'Det kan være en blomst eller en bikube under skyene. Bruk "hvis/ellers"-blokken til å samle inn nektar dersom det er en blomst. Hvis ikke så lager du honning (for da er det en bikube).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Denne lilla blomsten kan ha enten 3, 2 eller 1 nektar. Her er en "hvis/ellers"-blokk kombinert med en annen "hvis/ellers"-blokk for å danne en "Hvis/ellers hvis, ellers"-blokk. fullfør løsningen for å samle inn en ukjent mengde med nektar.'
      4-5 Bee Conditionals 7_instruction: 'Husk at lilla blomster kan ha 3,2 eller 1 nektar. Fullfør "kontroller lilla blomster" funksjonen og bruk den til å samle inn nektar fra alle blomstene.'
      4-5 Bee Conditionals 8_instruction: 'Skriv en funksjon inni blokken som heter "Sjekk blomst og lag honning". Funksjonen din skal sjekke hvor mye nektar det er i den lilla blomsten og hente den. Deretter skal den bevege seg fremover og så lage honning.'
      4-5 Bee Conditionals Assessment 1_instruction: |
        Lekse: Denne koden er feil.
        Fullfør "hent nektar og lag honning" funksjonen, deretter bruker du den til å samle inn all nektar og honning. Husk at lilla blomster kan ha 3, 2 eller 1 nektar.
      4-5 Bee Debugging 1_instruction: Disse blokkene plager meg. Får du til å fikse de?
      4-5 Bee Debugging 10_instruction: Finn feilene og fiks dem.
      4-5 Bee Debugging 11_instruction: Teller denne riktig?
      4-5 Bee Debugging 2_instruction: Hjelp bien å finne nektar for å lage honning.
      4-5 Bee Debugging 3_instruction: Finn feilene og fiks dem.
      4-5 Bee Debugging 4_instruction: Disse blokkene fungerer ikke. Hva er mønsteret?
      4-5 Bee Debugging 5_instruction: Noe er ikke rett her...
      4-5 Bee Debugging 6_instruction: De lilla blomstene har en ukjent mengde nektar. Fiks blokkene for å hente ut all nektaren fra blomsten.
      4-5 Bee Debugging 7_instruction: Denne funksjonen mangler noe...
      4-5 Bee Debugging 8_instruction: Denne funksjonen er fin, men den er ikke riktig brukt.
      4-5 Bee Debugging 9_instruction: Hvorfor lager ikke bien nok honning?
      4-5 Bee Debugging Assessment 1_instruction: 'Lekse: Fiks koden.'
      4-5 Bee Nested Loops 1_instruction: Bruk en løkke til å samle inn all nektaren.
      4-5 Bee Nested Loops 2_instruction: Samle inn all nektaren fra alle blomstene. Bruk løkke i løkke.
      4-5 Bee Nested Loops 3_instruction: Put koden som er lagt til i en nestet løkke til å samle inn alt nektaren.
      4-5 Bee Nested Loops 4_instruction: Samle inn all nektaren fra hver blomst og lag honning i alle bikubene. Bruk løkke i løkke.
      4-5 Bee Nested Loops 5_instruction: Samle inn all nektaren ved å bruke en nestet løkke.
      4-5 Bee Nested Loops 6_instruction: Samle all nektaren.
      4-5 Bee Nested Loops 7_instruction: Putt denne løkken inni en annen løkke for å opprette en nestet løkke til å samle inn all nektaren fra blomstene.
      4-5 Bee Nested Loops 8_instruction: 'Samle all nektaren fra disse blomstene ved å bruke løkke i en annen mens-løkke. Erstatt den indre repeter antall-blokka med en mens-løkke. '
      4-5 Bee Nested Loops 9_instruction: Samle inn all nektaren fra disse blomstene ved å bruke en nøstet mens-løkke ini en gjenta blokk.
      4-5 Bee Nested Loops Assessment 1_instruction: 'Lekse - Samle inn all nektaren og lag all honningen ved bruk av løkker.'
      4-5 Bee Nested Loops Rows_instruction: Samle nektar fra radene med blomster! Bruk løkke i løkke.
      4-5 Maze 1 (copy 1)_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 1_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 10_instruction: Klarer du å komme deg til solsikken med bare fire blokker?
      4-5 Maze 11_instruction: Kan du komme deg til solsikken med bare seks blokker.
      4-5 Maze 12_instruction: OK, denne er litt anderledes. Klarer du å få det til med bare seks blokker?
      4-5 Maze 13_instruction: Få meg til grisen!
      4-5 Maze 14_instruction: Få meg bort til grisen! Bruk Gjenta til-blokka.
      4-5 Maze 2 (copy 1)_instruction: Få zombien til solsikken men unngå den kjøttetende planten!
      4-5 Maze 2_instruction: Få zombien til solsikken men unngå den kjøttetende planten!
      4-5 Maze 3 (copy 1)_instruction: Må... komme... meg til solsikke.
      4-5 Maze 3_instruction: Må... komme... meg til solsikke.
      4-5 Maze 4 (copy 1)_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      4-5 Maze 4_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      4-5 Maze 5 (copy 1)_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 5_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 6 (copy 1)_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 6_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      4-5 Maze 7_instruction: Kjære person. Meg zombie. Må... komme... til solsikke.
      4-5 Maze 8_instruction: 'Bruk "Gjenta"-blokken til å få zombien til solsikken. (Unngå de kjøttetende plantene!)'
      4-5 Maze 9_instruction: 'Lag en løkke med "gjenta til" blokk.'
      4-5 Maze Assessment 1_instruction: 'Lekse: Få meg til solsikken.'
      4-5 Maze Conditionals 1_instruction: 'Bruk "gjenta til" blokk for å få zombien til solsikken.'
      4-5 Maze Conditionals 10_instruction: Klarer du å hjelpe meg igjennom en kompleks labyrint ved bare å legge til 3 blokker? Hvis du gjør det riktig så kan jeg gå en hvilken som helst krokete vei igjennom, uansett lengde.
      4-5 Maze Conditionals 2_instruction: 'Bruk "gjenta til" blokk for å få zombien til solsikken.'
      4-5 Maze Conditionals 3_instruction: 'Bruk "Hvis" blokken for å la meg bestemme jeg skal snu. Tips: du trenger bare en til blokk, men lær hvordan vi sette den opp slik at du kan gjøre det på din egenhånd neste gang.'
      4-5 Maze Conditionals 4_instruction: 'Ok, denne er helt lik den forrige oppgaven men du må huske hvordan du brukte "hvis"-blokken og deretter "Gjenta"-blokken sammen.'
      4-5 Maze Conditionals 5_instruction: 'Meg vil ha solsikke! Bruk en "Hvis" blokk til å få meg dit med så få blokker som mulig.'
      4-5 Maze Conditionals 6_instruction: 'Meg vil ha solsikke! Bruk en "Hvis" blokk til å få meg dit med så få blokker som mulig.'
      4-5 Maze Conditionals 7_instruction: 'Ok, la oss øve på den en gang til - denne er ikke så forskjellig, men pass deg for de kjøttetende plantene!'
      4-5 Maze Conditionals 8_instruction: '"Hvis-ellers"-blokken sjekker en betingelse og utfører det ene ELLER det andre. For å få meg til solsikken, prøve å bruke denne blokken.'
      4-5 Maze Conditionals 9_instruction: 'En siste øvelse med "hvis-ellers"-blokken. Klarer du å gjøre det riktig på første forsøk?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Bruk en "gjenta til"- og en "hvis eller"-blokk for å få meg til solsikken med så få blokker som mulig.'
      4-5 Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      4-5 Nested Loops 10_instruction: Tegn den siste raden med stjerner på flagget ved å kjøre en løkke over de gitte blokkene. Stjernene er 50 piksler fra hverandre, men husk at stjernene er 30 piksler i bredde.
      4-5 Nested Loops 11_instruction: Klarer du å tegne de 10 kvadratene på fortauet ved å bruke en nestet løkke? Hvert kvadrat er 30 piksler.
      4-5 Nested Loops 12_instruction: 'Får du til å tegne disse  36 trianglene ved hjelp av en nestet løkke?'
      4-5 Nested Loops 2_instruction: 'Nå skal du putte denne løkken inni en annen løkke for å tegne 10 triangler. Dette kalles en nestet løkke. Tips: Alle 10 trianglene utgjør til sammen en rotasjon på 360 grader.  '
      4-5 Nested Loops 3_instruction: "Tegn en sol ved å nøste koden fra utgangspunktet inni en annen løkke.  Dette kalles en nestet løkke.\r\n"
      4-5 Nested Loops 5_instruction: Loop the given code to create a windmill.
      4-5 Nested Loops 6_instruction: Får til til å tegne en sekskant ved å repetere triangelkoden?
      4-5 Nested Loops 7_instruction: 'Repeter designet 10 ganger. Hvor mye må du rotere i hver repetisjon? (Tips: Hva er 360 delt på 10?)'
      4-5 Nested Loops 8_instruction: 'Repeter designet 6 ganger. Hvor mye må du rotere i hver repetisjon? (Tips: Hva er 360 delt på 6?)'
      4-5 Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      4-5 Nested Loops Assessment 1_instruction: Bruk en nøstet løkke for å fullføre designet.
      4-5 While Loops 1_instruction: 'Flytt meg til hullet og bruk en "fylle"-blokk til å fylle det med to spader med jord.'
      4-5 While Loops 2_instruction: 'Flytt meg til jordhaugen og bruk "Fjern 1" blokken til å fjern den på fem spadetak.'
      4-5 While Loops 3_instruction: 'Flytt meg til jordhaugen og fjern alt sammen. Etterpå flytter du meg til hullet og fyller det helt opp. Tips: bruk så få blokker som mulig.'
      4-5 While Loops 4_instruction: Wow, jeg fant et virkelig dypt hull! Jeg vet ikke hvor mange spadetak med jord det tar å fylle det. Kan du skrive et program som fyller oppi det til bakken er helt jevn? Tips bruk en mens-løkke denne gangen.
      4-5 While Loops 5_instruction: Wow, nå er det to dype hull. Får du til å skrive et program som fyller de begge til bakken er helt jevn?
      4-5 While Loops 6_instruction: Wow, nå er det en stor jordhaug der! Klarer du å skrive et program som fjerner hele haugen slik at bakken blir helt jevn?
      4-5 While Loops 7_instruction: Wow, nå er det tre hauger med jord der. Får du til å skrive et program som fjerner alle sammen slik at bakken blir helt jevn?
      4-5 While Loops 8_instruction: 'Det er et virkelig dypt hull og en virkelig stor haug med jord. Hvor mange spadetak må tas for å gjøre bakken helt flat? Tips: bruk en mens løkke for begge to.'
      4-5 While Loops Assessment 1_instruction: Det er mange hull og hauger. Hjelp meg og fylle og fjerne de slik at bakken blir helt jevn.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Bruk en nøstet løkke for å fullføre designet.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point your game your danger should
        run across the screen from right to left, and your target should run across
        from left to right. They don't ever come back on screen once they've left,
        but we'll take care of that later. Take a minute to make sure your game is
        working like you want it to, and then click finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!Last
        time you worked on your game, you used booleans to make your Target and Danger
        return to the screen once they've left. Click Run to see how your game looks
        right now, and then we'll get to making your Player move up and down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should have a domain of Number, range
        of Number, and return the given number to the power of 3. Make sure to write
        two example cases! When you're done, use your new function to calculate 7
        cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction rocket-height that states it has a range of Number, domain of Number,\nand should return the height of the rocket traveling at 15 m/s after a given\nnumber of seconds. Let's write an example case now for the height of the\nrocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: 'Hei, jeg er en bie! Kan du hjelpe meg å samle nektar fra disse blomstene? '
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: 'Kan du gjøre akkurat det samme på en enklere måte med en "gjenta"-løkke?'
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kan du få meg bort til grisen ved å bruke kun 5 blokker?
      Course 4 2_instruction: Bien vil bare ha nektar akkurat nå. Husk, ikke alle er blomster, så sjekk etter at du bare samler nektar fra blomster.
      Course 4 Artist 1_instruction: Hjelp meg å tegne ferdig boksen. (Hver linje er 300 pixler lang)
      Course 4 Artist 10_instruction: 'Frilek: Ha det gøy og tegn det det du har lyst til. '
      Course 4 Artist 11_instruction: 'Nå til en utfordring! Her er et design som kun bruker blokker som du allerede har blitt vist. Kan du finne ut hvordan du kan gjenskape det uten noen ekstra informasjon? Hint: Ikke vær redd for å prøve og feile. Det er ikke forventet at du får det til perfekt første gangen.'
      Course 4 Artist 12_instruction: "Fritt spill-inspirasjon: Du har nå lært alt du trenger å vite for å lage et mønster som dette! Hvis dette bildet inspirerer deg, prøv å lage noe lignende. Hvis ikke, lag noe helt på egenhånd.\r\n\n\r\nVil du vite hvordan vårt inspirasjons-mønster ble laget? Besøk https://studio.code.org/c/105671120/edit for å se løsningen."
      Course 4 Artist 13_instruction: Spiller du fortsatt? Her er et blankt lerret hvor du kan designe alt du vil!
      Course 4 Artist 2_instruction: Kan du repetere denne koden slik at den tegner det nedtonede kvadratet?
      Course 4 Artist 20_instruction: Spiller du fortsatt? Her er et blankt lerret hvor du kan designe alt du vil!
      Course 4 Artist 3_instruction: 'Ok, prøv å se hva som kommer til å skje hvis du kjører denne koden (eller kjør den ved å trykke "Kjør"). Deretter, gjentar du dette helt til bildet er ferdig.'
      Course 4 Artist 4_instruction: Hvor mange grader er det i en sirkel? Fyll dette tallet inn i gjenta-blokken for å lage en sirkel av farger.
      Course 4 Artist 5_instruction: Tegn den andre halvparten av dette designet slik at det blir symmetrisk. Trianglene er likesidet med sider på 50 piksler.
      Course 4 Artist 6_instruction: 'Fullfør koden for å tegne disse triangelen. Tips: 3 triangler rotert til sammen 360 grader.'
      Course 4 Artist 7_instruction: 'Nå skal du putte denne løkken inni en annen løkke for å tegne 10 triangler. Dette kalles en nestet løkke. Tips: Alle 10 trianglene utgjør til sammen en rotasjon på 360 grader.  '
      Course 4 Artist 8_instruction: Tegn solen ved å repetere denne kodeblokken 12 ganger.
      Course 4 Artist 9_instruction: 'Repeter dette designet 10 ganger og pass på at du roterer mellom hver figur som blir tegnet. Her har du et hint angående hvor mye du må snu deg: Hva er 360 delt på 10?'
      Course 4 Artist Binary 1_instruction: "Her er en funksjon som tar en binær-streng av 1-ere og 0-ere og instruerer kunstneren til å følge dem fra venstre til høyre, opp og ned. Artisten vil fylle inn rutene hvis den ser en 1 og ignorere ruta hvis den ser en 0. \r\n\r\nKjør denne koden for å se hvordan artisten bruker binær-strengen til å tegne dette mønsteret."
      Course 4 Artist Binary 2_instruction: Hvilke av disse binære strengene kan du gjenta 8 ganger for å tegne dette bildet?
      Course 4 Artist Binary 3_instruction: Kan du tegne dette mønsteret ved å kjøre en løkke over en tresifret binærstreng?
      Course 4 Artist Binary 4_instruction: Hver binærstreng representerer en rad i dette bildet. Kan du ordne strengene slik at de tegner et smile-ansikt i stedet for et trist ansikt?
      Course 4 Artist Binary 5_instruction: Hvilken 6-siftret binærstreng, repetert 11 ganger, vil tegne dette bildet?
      Course 4 Artist Binary 6_instruction: Hva er den korteste binærstrengen du kan repetere for å tegne dette bildet?
      Course 4 Artist Binary 7_instruction: Fullfør tegningen.
      Course 4 Artist Binary Free Play 2_instruction: 'Fritt splitt: Her er et lerret med høyere oppløsning du kan tegne på - 16 biter ganger 16 biter!'
      Course 4 Artist Binary Free Play_instruction: 'Fritt spill: Tegn hva du vil med binærstreng!'
      Course 4 Artist For  Functions 10_instruction: 'Kan du tegne en stjerne-figur ved å bruke "Tegn en kvadrat-linje"-funksjon? Lykke til!'
      Course 4 Artist For  Functions 11_instruction: 'Kan du tegne en stjerne-figur ved å bruke "Tegn en kvadrat-linje"-funksjon? Lykke til!'
      Course 4 Artist For Loops 1_instruction: 'Tegn denne trekanten som er 50 piksler i størrelse. Hing: Bruk en gjenta-blokk.'
      Course 4 Artist For Loops 10_instruction: Tid for fritt spill! Ha det gøy med å tegne hva enn du har lyst til med blokkene du har lært å bruke
      Course 4 Artist For Loops 11_instruction: 'Husker da vi brukte en variabel til å styre antallet sider i en figur? Mønsteret starter med en trekant og legger til en side av gangen inntil det tegner et dekagon (10 sider). Hver side skal være 100 piksler lang. Hint: 360 delt på antall sider en figur har er antall grader du skal snu.'
      Course 4 Artist For Loops 11a_instruction: "La oss sette alt sammen! Bruk din kunnskap om \"for-løkker\" og \"teller\", opprett tegningen hvor hver side har to sider mer enn den forrige. Kontroller at hver side er 10 ganger så lang som antallet sider i polygonet.\r\n\r\nSvært lite av koden har blitt gitt til deg her."
      Course 4 Artist For Loops 12_instruction: 'Det så kult ut, men nå vil jeg tegne hver figur ved siden av den forrige. Denne gangen er hver side 20 piksler. Bruk en hopp-blokk til å hoppe 40 piksler fram etter hver figur. '
      Course 4 Artist For Loops 13_instruction: Hmmm, disse figurene blir større hver gang! Løste vi ikke allerede dette problemet med variabler? Hvordan kan vi bruke teller-variabelen til å gjøre sidene mindre når det er flere av dem? I stedet for å flytte framover med et gitt antall, prøv å flytte framover med (100 / teller) piksler.
      Course 4 Artist For Loops 14_instruction: Hvis du snur litt mer eller litt mindre enn du normalt ville ha gjort for en figur lager det en stilig effekt. Prøv å snu 89 grader for å lage denne vridde kvadrat-spiralen.
      Course 4 Artist For Loops 15_instruction: 'Fritt spill: Prøv å lage noen tegninger selv ved å bruke for-løkker. Vi har lagt til noen generiske variabler for deg som du kan bruke også.'
      Course 4 Artist For Loops 2_instruction: 'Jeg har puttet koden for å tegne en trekant inni en for-løkke som teller fra 50 til 100 med steg på 10. Ta en kikk på hvordan jeg har bygd koden og klikk "Kjør" når du er klar for å se den i aksjon. '
      Course 4 Artist For Loops 3_instruction: Den minste trekanten har sider på 20 piksler, den største har sider på 200 piksler, og hver trekant er 20 piksler større enn den forrige. Oppdater for-løkkene for å tegne disse trekantene.
      Course 4 Artist For Loops 4_instruction: 'Bruk en for-løkke til å tegne disse kvadratene. De starter med sider på 50 piksler, det største har sider på 300 piksler, og hvert kvadrat er 25 piksler større enn den forrige. Jeg har gitt deg nesten all koden du trenger - du mangler en blokk, hvilken er det?'
      Course 4 Artist For Loops 5_instruction: 'Godt jobba på den siste oppgaven! La oss bruke "teller"-variabelen igjen til å tegne dette kule bildet. '
      Course 4 Artist For Loops 6_instruction: Fritt spill! Prøv å bruke en for-løkke til å tegne et voksende-figur mønster som du designer selv.
      Course 4 Artist For Loops 7_instruction: 'Hva skjer hvis du fjerner "Repeter 3" fra denne algoritmen, beholder blokkene "flytt" og "snu"i løkka? I denne spiral-trekanten er hver side 20 piksler lenger enn den forrige.'
      Course 4 Artist For Loops 8_instruction: Den korteste linja i denne kvadrat-spiralen er 10, den største er 200 og hver linje er 10 piksler lenger enn den forrige. Kan du fylle inn de manglende blokkene i dette stilige bildet?
      Course 4 Artist For Loops 9_instruction: Kan du lage en spiral? Flytt framover fra 1 til 75 piksler, øk med 1 piksel hver gang.
      Course 4 Artist For Loops inspire_instruction: "Fritt spill-inspirasjon: Du har nå lært alt du trenger å vite for å vite for å lage et mønster som dette! Hvis du liker dette bildet, prøv å lage noe lignende. Hvis ikke kan du lage noe helt annet.\r\n\r\nVil du vite hvordan vårt inspirasjons-mønster ble laget? Besøk https://studio.code.org/c/106387604 for å se løsningen."
      Course 4 Artist Functions 1_instruction: Kan du tegne et kvadrat som er 100 piksler i lengde ved å bruke en løkke?
      Course 4 Artist Functions 10_instruction: Hvilken blokk må du legge til for å få trekanten til å stå på toppen av kvadratet?
      Course 4 Artist Functions 11_instruction: 'Sjekk ut denne koden som tegner en kube - kan du flytte den inn i en funksjon kalt "Tegn en kube"'
      Course 4 Artist Functions 12_instruction: Kjør en løkke over firkant-funksjonen for å tegne en linje
      Course 4 Artist Functions 13_instruction: 'Vi har lagt til en ny funksjon kalt "tegn en linje av firkanter". Ta gjerne en kikk inni funksjon-blokka for å se hvordan vi lagde den. Klikk "Kjør" når du er klar for neste oppgave.'
      Course 4 Artist Functions 14_instruction: 'Bra jobba! Bruk den nye "Tegn en linje av kvadrater"-funksjonen til å tegne en Kvadrat-figur. Husk at hvert kvadrat er 40 piksler i lengde.'
      Course 4 Artist Functions 15_instruction: 'La oss fortsette, kan du tegne en stjerne-figur ved å bruke "tegn en linje av kvadrater"-funksjonen? Lykke til! Hint: du må snu 144 grader'
      Course 4 Artist Functions 2_instruction: 'Kan du tegne 3 kvadrater med 20 piksler mellomrom? Hint: hvert kvadrat er 100 piksler i størrelse'
      Course 4 Artist Functions 3_instruction: "Kan du tegne dette bildet ved å bruke \"tegn et kvadrat\"-funksjonen? Hint: hvert kvadrat er 120 piksler fra hverandre.\r\n"
      Course 4 Artist Functions 4_instruction: 'Er du klar for å lage din egen "Funksjon-blokk"? Klikk på "Funksjon"-blokka i verktøyboksen, gi den navnet "tegn en trekant". Deretter opprett en trekant slik du har gjort tidligere med Handling- og Løkke-blokker. Klikk så på Lagre og Lukk i øvre høyre hjørne. Hint: Opprett en trekant som er 100 piksler i lengde. Lykke til!'
      Course 4 Artist Functions 5 OLD_instruction: 'La oss prøve å bruke to funksjoner til å tegne et hus - hva må fikses i denne koden for å tegne huset riktig?'
      Course 4 Artist Functions 5_instruction: "Kan du tegne dette bildet ved å bruke \"tegn et kvadrat\"-funksjonen? Hint: hvert kvadrat er 120 piksler fra hverandre.\r\n"
      Course 4 Artist Functions 6_instruction: Hvilken blokk må du legge til for å få trekanten til å stå på toppen av kvadratet?
      Course 4 Artist Functions 7_instruction: Kan du tegne en linje av kvadrater ved å bruke en Kvadrat-funksjon? Hvert kvadrat er 40 piksler i lengde.
      Course 4 Artist Functions 8_instruction: 'Begynner du å få taket på hvordan du bruker funksjons-blokker? La oss endre dette kvadratet så det er 200 piksler i størrelse. Hint: klikk på "endre" for å endre størrelsen på "tegn et kvadrat" i funksjons-redigeringen. Husk å klikke på "lagre og lukk" for å gå ut av funksjons-redigeringen. '
      Course 4 Artist Functions 9_instruction: Vi har gitt det mesteparten av koden til å opprette en funksjon. Allikevel, det ser ut til at det er noe som mangler. Kan du fullføre denne funksjons-blokken?
      Course 4 Artist Inspire_instruction: "Fritt spill: Du har nå lært alt du trenger å vite for å lage et mønster som dette! Hvis du liker dette bildet, prøv å lage noe lignende. Hvis ikke, lag noe helt annet.\r\n\n\r\nVil du vite hvordan vårt mønster ble laget? Besøk https://studio.code.org/c/105765376/edit for å se løsningen."
      Course 4 Artist Params 1_instruction: La oss redigere en funksjon som tegner et kvadrat med sider på 50 piksler
      Course 4 Artist Params 10_instruction: 'Du kan kalle på funksjoner fra innsiden av andre funksjoner! Bruk "figur"-funksjonen som grunnlag, opprett 3 hus-figurer som hver er 20 piksler større enn den forrige. Den første starter på 50 piksler i lengde. Å bruke en teller-løkke kan være nyttig. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 'Bruk din "hjul"-funksjon til å tegne hver av disse figurene. Lengden på siden av hvert bilde er 50 piksler.'
      Course 4 Artist Params 13_instruction: 'Fritt spill: Her er funksjonene du har skrevet og noen til du kan spille med. Tegn noe tøft!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Tøft! Kan du tegne hver av disse trekantene med den nye funksjonen? Den første er 25 piksler lang, den andre er 50 og den tredje er 75. '
      Course 4 Artist Params 4_instruction: Kan du legge til en ny funksjon kalt kvadrat? Den bør også ta inn et parameter for lengde, akkurat som trekanten. Denne gangen skal du tegne 3 kvadrater 25, 50 og 75 piksler i lengde, 100 piksler fra hverandre.
      Course 4 Artist Params 5_instruction: |
        Bruk begge de nye funksjonene til å tegne dette bildet. For å gjøre det lettere kan du bruke en løkke med en "teller"-parameter.
        
      Course 4 Artist Params 6_instruction: 'La oss redigere denne "tegn en figur"-funksjonen. Den har alt et parameter "lengde". La oss endre funksjonen så den også har et parameter "sider". Husk at vinkelen du skal snu i en gitt figur er 360 delt på antall sider figuren har. Hint: Lengdene for figurene er: for trekanten 100 piksler, heksagonet 25 piksler og kvadratet 50 piksler. '
      Course 4 Artist Params 7_instruction: 'Kan du tegne disse figurene ved å fylle ut "???"? Kvadratet og trekanten er 100 piksler i størrelse mens heksagonet er 75 piksler i størrelse. '
      Course 4 Artist Params 8_instruction: |
        Finner du ut hvordan du kan tegne denne figuren? Her er et hint: Lag en ny funksjon med 6 sider kalt en sekskant.
        
      Course 4 Artist Params 9_instruction: 'Husker du da vi brukte teller-løkka, men fjernet en løkke inni? La oss ha det litt gøy og bruke "tegn en figur"-funksjonen med parameterne "sider" og "lengde". Kan du gjenskape disse figurene? Kvadrat-telleren skal være 5/100/5, trekant-telleren skal være 10/100/10 og heksagonet 2/100/2.'
      Course 4 Artist Var 9_instruction: 'Her er algoritmen for å tegne en trekant. Endre den så den bruker "sider"-variabelen i stedet. Erstatt nummeret 3 med "sider"-variabelen. Hint: Husk å bruke "angi sider"-blokken.'
      Course 4 Artist Vars 1_instruction: Kan du hjelpe meg å tegne et triangel? Det er 100 piksler langt på hver side.
      Course 4 Artist Vars 10_instruction: 'Her er en algoritme som bruker mindre triangler til å tegne et stort triangel. Kan du endre det slik at det bruker varabelblokken "sider" til å tegne hvert triangel. Se gjennom koden og hver gang du ser tallet 3 erstatter du det med en "sider" variabel. Huske å bruke "set sider" blokken.'
      Course 4 Artist Vars 11_instruction: 'Her er samme algoritmen som vi kom opp med for den forrige gåten –  hva bør du sette variabelen "sider" til for å tegne dette bildet av kvadrater?'
      Course 4 Artist Vars 12_instruction: 'La oss sette variabelen "sider" til 5. Dess flere  sidene vi legge til denne algoritmen, dess større blir hele dette mønsteret! La oss legge til en ny variabel kalt "lengde" og bruke det hvor du har en "flytte fremover." Angi variabelen "lengde" til 75 for figuren.'
      Course 4 Artist Vars 13_instruction: 'Jo flere sider en figur har, jo kortere må hver side være for at hele mønsteret skal passe på skjermen. I stedet for å manuelt sette variabelen "lengde", la oss bruke variabelen "sider" og en matematikk-blokk til å konfigurere "." Velg riktig ligningen verktøykassa Angi variabelen "lengde", og også oppdatere variabelen "sider".'
      Course 4 Artist Vars 14_instruction: 'Frilek: Sjekk det ut, nå algoritmen er nestet inne i en mer løkke. Eksperimentere med å endre verdiene i de to variablene for å tegne kule mønstre.'
      Course 4 Artist Vars 2_instruction: 'I stedet for "går fremover med 100," refererer "Flytt" blokken nå variabelen "lengde". Kan du sette "lengde" til 150 for å  tegne den nye trekanten?'
      Course 4 Artist Vars 3_instruction: 'Her er en løkke som tegner et kvadrat, men noe mangler. Får du til å fikse det slik at den bruker variabelen lengde til å avgjøre hvor lange de ulike sidene skal være? '
      Course 4 Artist Vars 4_instruction: 'Nå ønsker jeg å lage et rektangel som er dobbelt så høyt som det er bredt. Vi har en variabel kalt "bredde" som er satt til 100. Kan du bruke matematiske blokkene for å fullføre koden?'
      Course 4 Artist Vars 5_instruction: 'Bruk variabelen "sider" til å styre hvor mange ganger løkken skal kjøre.'
      Course 4 Artist Vars 6_instruction: 'Hmmm, jeg forsøkt å endre variabelen "sider" til 4 fra koden i den siste gåten, men den tegner fortsatt en trekant. Kan du bruke variabelen "sider" (sammen med en matteblokk) og sørge for at jeg snur akkurat passe? Hint: 360 delt på antall sider vil gi deg hvor mange grader du skal snu.'
      Course 4 Artist Vars 7_instruction: 'Kan du endre variabelen "sider" for å hjelpe meg trekke denne sekskanten?'
      Course 4 Artist Vars 8_instruction: 'Frilek: Eksperimenter med antall sider denne figuren har. Kan du endre algoritmen slik at størrelsen på figuren forblir den samme uansett hvor mange sider den har? Tips: Du må kanskje bruke matteblokken din. (360 delt "sider" på to steder nå) '
      Course 4 Artist Vars 9_instruction: 'Endre denne algoritmen bruker variabelen "sider" i stedet for et for å tegne en trekant. Erstatt nummer 3 med variabelen "sider", og bruk "Angi sider"-blokk.'
      Course 4 Bee 1_instruction: 'Bien ser ikke forskjell på blomst og bikube.  Sjekk først om det er blomst eller bikube og samle kun inn nektar dersom det er en blomst. '
      Course 4 Bee 2_instruction: Kontroller hvert objekt for å se om det er en blomst. Dersom det er en blomst så samler du inn nekter,,, hvis ikke kan du overse det!
      Course 4 Bee 3_instruction: 'Det ukjente objektet er enten en blomst eller en bikube. bruk "hvis/ellers" blokk til å samle inn nekter dersom det er en blomst, hvis ikke så lager du honning (fordi det er en bikube).'
      Course 4 Bee 4_instruction: 'Denne lilla blomsten kan ha enten 3, 2 eller 1 nektar. Her er en "hvis/ellers"-blokk kombinert med en annen "hvis/ellers"-blokk for å danne en "Hvis/ellers hvis, ellers"-blokk. fullfør løsningen for å samle inn en ukjent mengde med nektar.'
      Course 4 Bee 5_instruction: Denne lilla blomsten må enten ha 3, 2 eller 1 nektar. Legg til en hvis-ellers-blokk for å lage en hvis, ellers-hvis og ellers-blokk. Fullfør løsningen for å samle inn det ukjente antallet nektar.
      Course 4 Bee 6_instruction: Denne lilla blomsten må enten ha 3, 2 eller 1 nektar. Legg til en hvis, ellers-hvis, ellers-blokk for å samle inn det ukjente antallet nektar.
      Course 4 Bee 7_instruction: Bruk alt du har lært så langt for å samle all nektaren. Den lilla blomsten har enten 3, 2 eller 1 nektar.
      Course 4 Bee For Loops 1_instruction: Bruk en løkke til å samle all nektaren fra hver blomst.
      Course 4 Bee For Loops 10_instruction: Hvis løkka di teller ned, så trekkes veksten fra teller-variabelen hver gang løkka går. Hva skal du øke med for å samle 9, så 6 og så 3 nektar?
      Course 4 Bee For Loops 11_instruction: Hva er galt med denne løkka? Se om du kan fikse den og gjøre slik at bia samler alle nektarene.
      Course 4 Bee For Loops 2_instruction: 'Her er en ny type løkke, kalt en "for"-løkke. Akkurat denne for-løkka vil telle fra 1 til 5 med steg på 1, og kjøre innholdet i løkka hver gang den teller. Hjelp Bie å hente nektaren.'
      Course 4 Bee For Loops 3_instruction: Du kan løse denne oppgaven ved å bruke en for-løkke til å telle fra 1 til 3 med steg på 1. La oss skaffe noen nektar!
      Course 4 Bee For Loops 4_instruction: Samle all nektaren fra disse blomstene. Jeg lurer på om det er en enklere måte å gjøre dette...
      Course 4 Bee For Loops 5_instruction: 'Åh, for-løkka gjør dette så mye enklere! Bruk "teller"-variabelen fra for-løkka til å kjøre en løkke over "hent nektar"-blokka samme antall ganger som løkka. Oooh! Det var mange løkker. All koden du trenger er der, ta en titt på hvordan den er satt sammen før du klikker på Kjør og ser hvordan den funker. '
      Course 4 Bee For Loops 6_instruction: Du kan også bruke en for-løkke til å telle ned. Prøv å samle nektaren ved å telle ned fra 5 til 1 med steg på 1.
      Course 4 Bee For Loops 7_instruction: Bruk for-løkkas teller-variabel til å kontrollere hvor langt du beveger deg vannrett.
      Course 4 Bee For Loops 8_instruction: Kan du bruke løkke-variabelen til å kontrollere bevegelse og innsamling av nektar?
      Course 4 Bee For Loops 9_instruction: 'Det siste tallet i for-løkka di er kalt "vekst" og hver gang løkka kjører endres teller-variabelen med veksten. Prøv å samle disse blomstene ved å bruke en vekst på 2.'
      Course 4 Bee Params 1_instruction: 'Bruk funksjonen "hent 3 nektar" som snur, beveger seg for å samle nektar og så returnerer til opprinnelig posisjon. Skriv en sekvens for å samle all nektar ved å bruke "hent 3 nektar"'
      Course 4 Bee Params 2_instruction: 'Endre funksjonen "hent 3 nektar" slik at den får meg til å snu til høyre i stedet for til venstre for blomstene.'
      Course 4 Bee Params 3 (copy 1)_instruction: 'Nå er det blomster på begge sider! Kanskje du kan bruke et parameter slik at den samme funksjonen fungerer for blomster på begge sider. Jeg har lagt til et parameter som heter "retning" i funksjonen. Hvis "retning"-parameteret er lik 0 så skal jeg gå til venstre, hvis det er 1 så skal jeg gå til høyre.'
      Course 4 Bee Params 3_instruction: 'Nå er det blomster på begge sider! Jeg har lagt til et parameter kalt "retning" i funksjonen. Bruk "venstre" og "høyre"-variabler til å kontrollere retning. Fyll inn resten av funksjons-definisjonen og klikk til slutt på "Lagre og Lukk"'
      Course 4 Bee Params 4 (copy 1)_instruction: Prøv å bruke den nye funksjonen din til å samle alle blomstene. Husk 0 = venstre og 1 = høyre.
      Course 4 Bee Params 4 backup_instruction: 'Ville det ikke vært fint om vi kunne samle alle disse nektarene med en enkelt funksjon? Prøv å legge til et nytt parameter til funksjonen din kalt "nektar" for å kontrollere antallet nektar som skal samles. Du vil antakelig ønske å endre navnet på funksjonen også!'
      Course 4 Bee Params 4_instruction: Prøv å bruke den nye funksjonen til å samle alle blomstene. Husk å bruke variablene venstre og høyre.
      Course 4 Bee Params 5_instruction: 'La oss starte fra bunnen av - kan du lage en ny funksjon kalt "hent 5 nektar" med et parameter for retning?'
      Course 4 Bee Params 6 (copy 1)_instruction: Prøv å bruke din nye funksjon til å samle inn all denne nektaren.
      Course 4 Bee Params 6_instruction: 'Ville det ikke vært fint om vi kunne samlet all denne nektaren med en enkelt funksjon? Prøv å legge til et nytt parameter til funksjonen din, kalt "nektar-mengde" til å kontrollere antall nektar som skal samles inn. Du vil antakelig ønske å endre navnet på funksjonen også!'
      Course 4 Bee Params 7 (copy 1)_instruction: Prøv å bruke din nye funksjon til å samle inn all denne nektaren.
      Course 4 Bee Params 7_instruction: Prøv å bruke den nye funksjonen din til å samle inn all denne nektaren.
      Course 4 Bee Params 8_instruction: 'Utfordring: Nå må du håndtere honning også! Skriv om funksjonen din til å ta inn både antall honning-enheter og antall nektar som skal samles inn. Hvordan vil du bruke disse tallene til å avgjøre hva du skal gjøre?'
      Course 4 Binary 1_instruction: Her er en funksjon som tar inn en binærstreng av 1-ere og 0-ere og instruerer bonden til å gå fra venstre til høyre, øverst til nederst mens han skrur på rutene hvor nummeret er 0. Kjør koden for å se hvordan bøndene bruker binærstrenger til å tegne et bilde.
      Course 4 Binary 2_instruction: 'Hvilken binærstreng kan du gjenta 8 ganger for å tegne dette bildet? Hint: nummeret 1 fyller et hull.'
      Course 4 Binary 3_instruction: Kan du tegne dette mønsteret ved å kjøre en løkke over en enkelt binærstreng?
      Course 4 Binary 5 (copy 1)_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 5_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 6 (copy 1)_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 6_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 7_instruction: Hvilken binærstreng, gjentatt 10 ganger, vil tegne dette bildet?
      Course 4 Binary 8_instruction: 'Du kan fullføre mesteparten av dette bildet ved å kjøre en løkke over et 5-bits binærtall - så trenger du et til 4-bits binærtall til å få til nedre høyre hjørne.'
      Course 4 Maze 1_instruction: Få den sinte fuglen til grisen!
      Course 4 Maze 2_instruction: Hold deg unna dynamitten!
      Course 4 Maze 3_instruction: 'Programmer den sinte fuglen til å komme seg bort til grisen. '
      Course 4 Maze 4_instruction: 'Prøve å bruke "gjenta"-blokk for å bruke færre blokker...'
      Course 4 Maze 5_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      Course 4 Maze 6_instruction: Klarer du å løse denne oppgaven ved å bruke så få oppgaver som mulig?
      Course 4 Play Lab For Loops 2_instruction: Denne gangen, la oss telle oddetallene fra 1 til 100.
      Course 4 Play Lab Params 1_instruction: 'Her er en funksjon kalt "hopp" som får hovedpersonen din til å hoppe 100 piksler. Bruk hopp-funksjonen til å samle alle flaggene.'
      Course 4 Play Lab Params 10_instruction: "Vi har lagt til en siste funksjon du kan bruke. \r\n\r\nProgrammer ditt spill til å kalle på \"levle_opp\"-funksjonen hvis \"spiller_poeng\" > 10. \r\n\r\nSpill spillet og oppnå level 4 for å gå videre til neste oppgave. "
      Course 4 Play Lab Params 2_instruction: "Nå har vi flagg som er alt for høye for vårt nåværende hopp! La oss bruke pilene \"opp\" og \"ned\" så vi ha flere hopp-høyder. \r\n\r\nVi trenger å legge til et parameter kalt \"høyde\" til vår hopp-funksjon. Opp-pila skal få hunden til å hoppe 200 piksler og ned-pila skal få den til å kun hoppe 100 piksler.\n\r\n\r\nHint: Du må klikke på \"endre\" på hopp-funksjonen og oppdatere den slik at den bruker \"høyde\"-parameteret."
      Course 4 Play Lab Params 3_instruction: 'La oss legge til et til parameter til hopp-funksjonen slik at vi kan bruke den med andre spillere. Hver spiller er representert med et nummer, fra en og oppover. Endre "hopp"-funksjonen slik at definisjonen inneholder "spiller"-parameteret. '
      Course 4 Play Lab Params 4_instruction: 'Her er en funksjon kalt "patruljer". Endre den slik at Katt beveger seg opp 400 piksler og så ned 400 piksler.'
      Course 4 Play Lab Params 5_instruction: 'Fyll inn "spiller"-parameteret slik at vi kaller på "patruljer"-funksjonen for hver spiller. Husk at spillerne tilsvarer tallene 1, 2 og 3.'
      Course 4 Play Lab Params 6_instruction: 'Legg til enda et parameter kalt "fart" til "patruljer"-funksjonen. Bruk en "sett fart"-blokk sammen med det nye "fart"-parameteret.'
      Course 4 Play Lab Params 7_instruction: "Se på denne koden og se om du kan finne ut hva hver blokk gjør. \r\n\r\nNår du er ferdig, bruk piltastene til å styre Hund og samle alle flaggene."
      Course 4 Play Lab Params 8_instruction: 'Bruk en "når berører"-blokk til å sende Hund tilbake til øvre venstre hjørne BARE hvis Hund berører noen av de andre spillerne.'
      Course 4 Play Lab Params 9_instruction: "Du gjenkjenner kanskje dette spillet fra tidligere. \r\n\r\nVi har lagt til en funksjon kalt \"score_poeng\" som tar inn parameteret \"poeng\". \r\n\r\nEndre funksjonen slik at \"poeng\"-parameteret legges til på \"spiller_poeng\"-variabelen. \r\n\r\nNår du er ferdig klikker du på \"Kjør\" for å spille. Når Hund scorer 10 poeng kan du flytte til neste oppgave. "
      Course 4 Play Lab Vars 1_instruction: 'Denne gangen trenger du ikke å omskrive noe kode, bare trykk på "Kjør" for å spille spillet! I dette spillet er du Hund, som prøver å samle mer flagg enn Katt. Bruk ned-piltasten til å kontrollere Hund. Trykk "Fullfør" når du er ferdig med å spille.'
      Course 4 Play Lab Vars 2_instruction: 'Løpet i forrige oppgave var ikke veldig rettferdig! Endre variabelen "hund_fart" for å sikre at du kan samle mer flagg enn Katt. Den første til å samle 10 flagg vinner!'
      Course 4 Play Lab Vars 3_instruction: 'Her er et nytt type spill! Bruk venstre- og høyre-pilene til å bevege deg og opp-pila til å hoppe. Se om du kan samle alle flaggene.'
      Course 4 Play Lab Vars 4_instruction: 'Nå bruker vi en variabel kalt "høyde" for å kontrollere hvor høyt hunden kan hoppe. Oppdater "høyde"-variabelen slik at hunden kan hoppe høyt nok til å nå alle flaggene.'
      Course 4 Play Lab Vars 5_instruction: 'La oss bygge et spill! Først trenger vi en poengsum. Bruk "sett poeng til"-blokk for å sette scoren til 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: |
        In our game, how should we score points?
        Add 1 to your "points" variable each time the Dog hits the Cat with a heart.
        Use the "when actor 2 touches anything" event to trigger an update to your
        score. You can increment your variable by setting "points = points + 1."
        Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy - any time the Dog (actor 1) gets hit by a fireball, you should
        lose a point. Start with 10 points so it's not too hard. Let your score drop
        down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |
        Free Play time! Here are all of the
        variables we've played with so far in this stage, as well as a few more in
        case you want them. Make a game or story using any of these variables. Hint:
        scroll down to see all the commands in the work space.
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: Denne gangen, la oss telle oddetallene fra 1 til 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, by 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        What for loop would make me speak
        19, 27, 35, 43, 51?
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\r\nOne example - and part of the definition -  has\nalready been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst that has two domains. 1) a number of points and 2) a radius. starburst
        returns a yellow radial star with given points, and an inner radius that is
        half the outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Using the Design Recipe, write a function
        large-polygon that should output a solid polygon of given sides and color
        that takes up most of the window, regardless of the number of sides. To make
        sure that the polygon doesn't get too large as you increase the number of
        sides, side length should be inversely proportional to side number, with a
        length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: Nå skal vi lage 20 overlappende sirkler ved å snu 18 grader mellom hver sirkel.
      frozen circle function with parameter_instruction: 'Her er en "Lag sirkel"-blokk som kan lage sirkler av ulike størrelser. Klarer du å bruke den til å lage en liten sirkel med størrelse 5 og en større sirkel med størrelse 10?'
      frozen circle function_instruction: 'Bruk "Lag ny sirkel"-blokken for å lage 10 overlappende sirkler. Ikke glem å gå fremover mellom sirklene.'
      frozen circle_instruction: |
        A circle is a special shape. Can you figure out
        what number to replace the question marks with to draw a circle?
      frozen cross rotate dense_instruction: 'La oss gjenta det 90 ganger! Hvor mange ganger går 90 opp i 360? Hint: Det er et ganske lite tall.'
      frozen cross rotate_instruction: Prøv å gjenta det 10 ganger. Hvor mange grader må du snu mellom hver linje?
      frozen cross_instruction: 'Bruk "Gjenta" blokken for å opprette et plusstegn. La du merke til at Elsa kan gå fremover og bakover?'
      frozen diamond mini snowflake_instruction: 'Visste du at alle snøfnugg har ulik form? La oss lage en ny snøfnugg ved hjelp av "Gjenta" blokken gjenta et parallellogram 4 ganger, snu 90 grader mellom hver parallellogram.'
      frozen diamond snowflake_instruction: 'Nå skal vi lage et snøfnugg ved å bruke "Gjenta"-blokken til å lage et parallelogram 10 ganger ved å snu mot høyre 36 grader etter hvert parallelogram.'
      frozen diamond_instruction: La og laget et parallellogram. Det er et kvadrat der vinklene har ulike grader som 60 og 120 grader og ikke 90 grader som i et kvadrat.
      frozen freeplay_instruction: |
        You've officially become a master artist! Create
        a winter wonderland.
      frozen line_instruction: Hei! Jeg heter Elsa av Arendelle. Hjelp meg å lage en enkelt linje.
      frozen perpendicular_instruction: 'Nå skal vi prøve å lage to linjer som står 90 grader i forhold til hverandre. Du må bruke blokken "Snu" og en "Flytt"-blokk.'
      frozen snowflake branch_instruction: 'Prøv å bruke "lag en snøflakgren"-blokken for å lage tre grener som begynner å se ut som et snefnugg.'
      frozen snowflake full_instruction: Nå skal vi repetere det 8 ganger for å lage et nydelig snefnugg!
      frozen snowflower_instruction: 'Det er mulig å lage intrikate snømønstre ved  å sette sammen enkle former. Kan du lage et mønster ved å repetere 5 sirkler med størrelse 5 og 5 sirkler med størrelse 10?'
      frozen square iterative_instruction: Det ser ut til vi har laget et halvt kvadrat. La oss sette sammen fire linjer for å lage et kvadrat.
      frozen square loop 3x_instruction: La oss lage tre kvadrater med spissen mot hverandre. Husk å snu 120 grader før hvert nytt kvadrat.
      frozen square loop_instruction: 'Hei, jeg heter Anna av Arendelle! La oss lage et kvadrat ved hjelp av "Gjenta" blokken som bruker færre blokker. Hvor mange ganger trenger "Gjenta" blokken gå gjennom blokkene inni for å lage et kvadrat?'
      frozen square snowflake_instruction: 'Får du til å lage et snøfnugg ved å bruke "repeter"-blokken til å lage 10 kvadrater og "Snu"-blokken for å snu deg 36 grader mellom hvert kvadrat?'
      hoc2015_intro_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_sandbox_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      Infinity_catch_instruction: 'Kan du få Elsa ("skuespiller 2") til å ta igjen med Anna ved å bruke piltastene?'
      Infinity_finale_instruction: Lag det du har lyst til og del det med andre!
      Infinity_move_collide_instruction: 'Hiro er "skuespiller 1". Flytt han direkte til Baymax og spill en lyd når de berører hverandre.'
      Infinity_move_directions_instruction: 'Baymax er "skuespiller 2". Bruk flytt-blokker for å styre Baymax med pilene. Få han til å berøre de to andre figurene.'
      Infinity_move_right_instruction: 'Hiro er "skuespiller 1". Bruk "Flytt"-blokken til å flytte Hiro mot høyre for å berøre Baymax.'
      Infinity_repeat_instruction: 'Bruk "Gjenta alltid"-blokken til å få Anna til å bevege seg opp og ned 400 pixler.'
      Infinity_say_instruction: 'Make Anna say "Hi there." by using the Say block.'
      Infinity_shoot_instruction: 'Baymax er "skuespiller 2". Få Baymax til å skyte en rakett mot Hiro.'
      Infinity_shoot_directions_instruction: 'Hiro er "skuespiller 3". Få Hiro til å kaste et prosjektil mot hver av de fire andre figurene. Vent et sekund mellom hvert kast.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: Flytt Anna opp, ned til venstre og høyre for å ta på hvert av de fire snøfnuggene.
      Infinity_touch_score_instruction: 'Få anna til å score poeng når hun tar på snøfnugg. Deretter trykk på "Kjør" og styr henne for å ta på hvert snøfnugg en gang.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: |
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Can you draw the same line using a loop?
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Can you finish this pattern with two loops?
      K-1 Artist Loops 8_instruction: This staircase has longer steps.
      K-1 Artist Loops 9_instruction: 'Assessment: Use a loop to draw the stairs'
      K-1 Artist Loops Free Play_instruction: Free play, draw something fun!
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Tegn korte og lange linjer!
      K-1 Artist1 Assessment 2_instruction: Tegn korte stiplede linjer!
      K-1 Artist2 1_instruction: Tegn en firkant under trekanten.
      K-1 Artist2 2_instruction: Hopp og tegn en firkant ved siden av huset.
      K-1 Artist2 3_instruction: Tegn en firkant over den andre firkanten
      K-1 Artist2 4_instruction: Tegn et rektangel for å fullføre broen.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: Get nectar to make honey!
      K-1 Bee Assessment 2_instruction: Get nectar to make honey!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: |
        Use a loop to move and then get the nectar and
        make honey!
      K-1 Bee Loops 3_instruction: Use loops to get the nectar and make honey!
      K-1 Bee Loops 4_instruction: |
        Use loops to get the nectar, make honey, and
        to move!
      K-1 Bee Loops 5_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 7_instruction: Use loops to get the nectar and make honey!
      K-1 Bee Loops 8_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 9_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops Assessment 1_instruction: |
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Get nectar to make honey using loops!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: Følg stien og led meg til den dumme grisen. Unngå dynamitten hvis du ikke vil at jeg skal forsvinne i en sky av fjær! Hint. Han er sør for meg.
      K-1 Maze 2_instruction: Move me East to get me to the pig!
      K-1 Maze 3_instruction: Move me South to get me to the pig!
      K-1 Maze 4_instruction: Move me North to get me to the pig!
      K-1 Maze 5_instruction: Move me East to get me to the pig!
      K-1 Maze 6_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 7_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 8_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 9_instruction: Move one way, then another to get me to the pig!
      K-1 Maze Assessment 1_instruction: 'Assessment -- Get me to the pig!'
      K-1 Maze Assessment 12_instruction: Assessment Level
      K-1 Maze Assessment 13_instruction: Assessment Level
      K-1 Maze Assessment 2_instruction: 'Assessment -- Get me to the pig!'
      K-1 maze debug 1_instruction: Change the code to get me to the pig!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: Få meg til grisen!
      K-1 Maze Loops 10_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 11_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 12_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 4_instruction: Få meg til grisen!
      K-1 Maze Loops 5_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 6_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 7_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 8_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 9_instruction: Få meg til grisen!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: Assessment Level
      K-1 Maze Multi 15_instruction: Assessment Level
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen another to get me to the pig."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        We have a new function called
        "draw a line of squares." Feel free to take a look inside the function block
        to see how we built it. Click on "Run" when your are ready for the next
        puzzle.
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: Each iteration, you'll have
        to move forward a certain number of pixels and turn 144 degrees.
      NEW Course 4 Artist Functions 14_instruction: 'Free Play time! '
      NEW Course 4 Artist Functions 2_instruction: 'Kan du tegne 3 kvadrater med 20 piksler mellomrom? Hint: hvert kvadrat er 100 piksler i størrelse'
      NEW Course 4 Artist Functions 3_instruction: |
        Here is a new type of Block.
        It is called a "Function block." Click "Run" to see what it can do. 
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Are you getting the hang of how
        to use function blocks? Let's modify this square so that it is 200 pixels
        in size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor. 
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function, but there seems to be something missing. Can you
        edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      NEW Course 4 Artist Functions inspire_instruction: "Free Play Inspiration:\nYou've now learned everything you need to know to make a pattern like this!\nIf this picture inspires you, try to make something similar. Otherwise, create\nsomething all your own.\r\n \r\nWant to know how our inspiration pattern was\nmade? Visit for the solution."
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: 'Nå skal vi lage en funksjon som tegner et kvadrat med sider på 50 pixler hver. Trykk på "Rediger" for å komme i gang.'
      NEW Course 4 Artist Params 10_instruction: |
        Create a "draw a hexagon" function
        block with a length parameter. Hint: this hexagon is 100 pixels in size. 
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a "for loop" with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to add a "sides" parameter. Remember the angle to turn for a given shape
        is 360 divided by the number of sides it has. Hint: These are the lengths
        for each shape: the triangle is 100 pixels, the hexagon is 25 pixels, and
        the square is 50 pixels.
      NEW Course 4 Artist Params 14_instruction: |
        Can you recreate these shapes?
        Drag the "length" parameter into the function definition. 
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
      NEW Course 4 Artist Params 2_instruction: |
        Create a “draw a triangle" function
        with 50 pixels sides from scratch
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3 triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: |
        Fill in the ??? in the length parameter
        input block. Hint: The pentagon is 100 pixels in size. 
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow learned everything you need to know to make a pattern like this! If this\npicture inspires you, try to make something similar. Otherwise, create something\nall your own.\r\n \r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387530 for the solution."
      NEW Course 4 Artist Vars 1.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 12_instruction: 'Endre denne algoritmen bruker variabelen "sider" i stedet for et for å tegne en trekant. Erstatt nummer 5 med variabelen "sider", og bruk "Angi sider"-blokk.'
      NEW Course 4 Artist Vars 2.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 2_instruction: 'Dra en nummer blokk til "Angi lengde" blokken får å tegne et sett med 50 pixel store trekanter. '
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: La oss prøve det igjen. Nå, la oss tegne denne kule design med med 60 piksel store sekskanter.
      NEW Course 4 Artist Vars 6_instruction: 'Kan du hjelpe meg trekke dette kule mønsteret ved å slippe i den variable blokken "lengde" på de riktige stedene?'
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: Bruk for-løkkas teller-variabel til å kontrollere hvor langt du beveger deg vannrett.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, the "for loop" makes this
        much easier! All the code you need is here, take a look at how it is put together
        then click "Run" to see how it works. 
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Can you help the Bee collect the
        rest of the honey using this for loop? 
      NEW Course 4 Bee For Loops 4_instruction: |
        Replace the ??? in the "for loop"
        with the largest amount of nectar the bee has to collect. 
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Are you getting the hang of "for
        loops"? This is similar to last puzzle, but you have to get 2,4,6,8,10 nectar.
        
      NEW Course 4 Bee For Loops 8_instruction: "What will you do if we take away\nsome blocks? Can you add them back to help the bee collect the nectar?\r\nRemember:\nIf your loop is counting up, the increment is added to your counter variable\neach time through. What should your increment be to collect 3, 6, 9 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: Hvis løkka di teller ned, så trekkes veksten fra teller-variabelen hver gang løkka går. Hva skal du øke med for å samle 9, så 6 og så 3 nektar?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: |
        It's Free Play time! Have fun
        with all the blocks in your tool box. 
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        It's Free Play
        time, have fun with all the blocks in your tool box. 
      NEW Course 4 Play Labs For Loops 8a_instruction: |
        Challenge: How would you
        use the "for loop" to get every actor to go around and say their actor number,
        then vanish from the screen? 
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n  \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Funksjoner lar deg definere nye blokker! Vi har flyttet blokker for å tegne et kvadrat i en funksjon kalt "tegne en firkant". Kan du bruke funksjonen "tegne et kvadrat" for å opprette vinduer? kvadratene er 75 piksler fra hverandre.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Nøtt! Nøtt! Nøtt!, Bruk en "Hvis"-blokk får å få meg dit med så få blokker som mulig.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Ok, la oss øve på den en gang til - denne er ikke så forskjellig, men pass deg for veggen!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: '"Hvis-ellers"-blokken sjekker en betingelse og utfører det ene ELLER det andre. For å få meg til nøtten ved å bruke denne blokken.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'En siste øvelse med "hvis-ellers"-blokken. Klarer du å gjøre det riktig på første forsøk?'
      scrat 20_instruction: Klarer du å hjelpe meg igjennom en kompleks labyrint ved bare å legge til 3 blokker? Hvis du gjør det riktig så kan jeg gå en hvilken som helst krokete vei igjennom, uansett lengde. Skynd deg! Isen smelter!
      SpecialFrozenLevel_instruction: |
        Du er nå offisielt blitt en mesterkunstner! 
        Lag et vinterparadis!
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Test Play Lab_instruction: This is a test play lab level.
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly 6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: |
        Create a turnRight()
        function and draw a rectangle twice as tall as it is wide by having the turtle
        navigate clockwise to draw the rectangle. 
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with other movement made between calls.  HINT: you might want\nto make another function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: |
        Drag a button out onto the screen
        and set its text to "Go forth!".  Add an event handler for the button, that
        makes the turtle move forward.  Run the program to make sure it works. 
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd event handler to textInput with the event type ‘input’ that shows\nthe “Say hi” button when that event occurs.\r\nAdd event handler to button\nso that on click, it writes a hello message to the screen and hides the textInput\nand button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        We'll be building upon some simple
        starting code throughout this lesson.  Your first task: use moveTo and randomNumber
        to get the turtle to move to a random location with each button click.  We've
        given you starting code for our common setup: a button that moves the turtle
        when clicked.  You should modify this code.  
      U3L16 - text labels_instruction: |
        Introducing textLabels.  First try replacing
        your button with a textLabel.  Will the text respond to events just like the
        button?  Try connecting an event handler to it.  We've started you out with
        code similar to the result of the last level, you can copy your code from
        that level into here if you prefer. 
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto foo to see the string change. \r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe error and get the program to run.  Also note the error message since it\nmight come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis an example of the kind of app we want to make.  Study this for the elements\ncontained in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1. what happens when you click on the Code.org logo? \r\n2. What happens\nwhen you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements contained in this app appear to be simple, and they are in some ways.\nHowever, the computing principles involved - controlling and keeping track\nof things in memory while the program is running - get into some deeper issues\nof programming and computer science in general.  There are some devilish details\nand paths that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep this app in mind as you go through the different levels in this lesson.  It\nmight seem like you need to learn a lot in order to get this simple thing\nworking.  But it's worth taking the time to understand at a deeper level\nwhat is going on.  Because this one topic: controlling memory leads to many\npossible misunderstandings about coding, and how computers work.  We want\nto make sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough the issues.  Read the explanations.  You'll come out on the other\nside a better programmer with much deeper knowledge and understanding of how\nthings work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou the three lines of code shown in the previous page.  Add three lines of\ncode just below the ones shown here to make your own variable, assign it a\nvalue and write it to the screen.  NOTE: change the variable name from the\ndefault x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: |
        Here is the code from
        previous page that has a subtle problem with it.  FIRST: run the app and try
        it to see the problem. NOTE: NaN stands for "Not a Number".   DO THIS: figure
        out what's happening, where, and fix the problem.  We'll explain the issue
        on the next page. 
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Adjust the "if" block to make
        the bot respond "That's the color of the sky!" if the user inputs the color
        "blue".
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Update the assistant description, name, starter prompt, and default
        response to match this specialization.
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |
        Replace all instances of `str.indexOf("word")`
        with a function `contains(sentence, word)` that returns true if the word is
        in the sentence and returns false otherwise.
      U3L24 Nested Conditionals 2_instruction: |
        Use a nested conditional to respond
        to the category "pizza" and the details "Hawaiian," "vegan," and "meat."
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Inside the findingNemo function, write a conditional
        statement that detects if a command contains all the phrases "2000" "animated"
        and "G-rated." The function should return true if the above conditions are
        met and return false otherwise
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Inside the isBest function, write a conditional
        statement that detects if a command contains at least one of the phrases "all
        time" "all-time" "overall" or "millennium." The function should return
        true if the above conditions are met and return false otherwise
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
