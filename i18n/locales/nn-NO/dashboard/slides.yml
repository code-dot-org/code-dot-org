nn:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til den første timen din med koding! Lat oss dykke rett inn første smak av programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Me skal bruke Blockly, eit visuelt programmeringsspråk der du dreg og slepp blokker for å skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: 'Det meste av kode vert skrive, men Blockly er visuelt. Kvar blokk tilsvarer ei linje med "ekte" kode.'
      4:
        image: notes/hoc1_4.jpg
        text: "Du vil lære grunnlaget for datavitskap (informatikk), omgrep som vert nytta til alt frå å lage app'ar til å kontrollere Mars-roboten."
      5:
        image: notes/hoc1_5.jpg
        text: Eit program er eit sett med instruksjonar som datamaskina skal følgje.
      6:
        image: notes/hoc1_6.jpg
        text: Målet med det første programmet er å få ein sint fugl gjennom ein labyrint for å treffe ein grøn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Til venstre er labyrinten der programmet vert køyrd. Instruksjonane for kvar oppgåve står under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: 'I verktøykassa i midten finn du kommandoane for "Sint fugl". Du vil bruke desse til å bygge koden din.'
      9:
        image: notes/hoc1_9.jpg
        text: Til høgre er arbeidsområdet der du skal dra blokker frå verktøykassa for å bygge programmet. Om du vil slette ei blokk, dreg du ho til papirkorga i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: 'Kvar blokk er ein instruksjon. Om du dreg ei "framover"-blokk til arbeidsområdet og trykker "Køyr programmet", flyttar fuglen seg ein plass i labyrinten.'
      11:
        image: notes/hoc1_11.jpg
        text: For å gjere meir enn ei handling, kan du dra mange blokker til arbeidsområdet og sette dei saman. Fuglen vil utføre kommandoane frå toppen og nedover.
      12:
        image: notes/hoc1_12.jpg
        text: 'Om du køyrer eit program og ynskjer å fikse det og prøve på nytt, trykk på knappen "Reset".'
      13:
        image: notes/hoc1_13.jpg
        text: Lat oss ta dei grisane!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, eg er JR! Alle racerbillag treng dataekspertar for å vinne. Dei analyserer data frå bilen for å få han til å gå raskare.
      2:
        image: notes/stage5_2.jpg
        text: Gjennom desse oppgåvene, vil du vere ein kunstnar som teiknar ei linje bak deg der du går.
      3:
        image: notes/stage5_3.jpg
        text: 'Denne blokka seier "flytt fram 100 pikslar." Pikslar er berre veldig små prikkar på skjermen.'
      4:
        image: notes/stage5_4.jpg
        text: 'Denne blokka seier "snu 90 grader mot høgre". Blokka vil snu artisten din det gradetalet som står på blokka.'
      5:
        image: notes/stage5_5.jpg
        text: Klikk på pila på ei av desse blokkene for å endre på kor mykje kunstnaren går framover eller snur seg. Leik deg med det for å bli kjend med desse nye blokkene.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, eg er Paola! I desse oppgåvene er du ein bonde som må få feltet sitt heilt flatt for å byrje å plante avlingar.
      2:
        image: notes/stage9_2.jpg
        text: Du må hjelpe ho med å fjerne alle haugane av skitt og fylle ut alle hola.
      3:
        image: notes/stage9_3.jpg
        text: Dei nye blokkene fjernar 1 skuffe med skitt frå ein haug og fyller ut 1 skuffe med skitt i eit hol.
      4:
        image: notes/stage9_4.jpg
        text: Haugane og hola er av ulike storleikar, så du må fortelje bonden kor mange skuffer ho skal bruke.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei, eg er Katie! Ei av dei mest spennande tinga med datavitskap er at eit dataprogram kan vere interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Kvar gong nokon klikkar eller trykkjer eller skriv på ei datamaskin eller ein telefon, genererer det ei HENDING, og det er kode som avgjer kva som skjer når ei HENDING inntreffer.
      3:
        image: notes/flappy03.jpg
        text: 'Du kan til dømes ha ein HENDINGSHANDSAMAR som seier "ved museklikk, spel ein lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du høyrt om spelet FlappyBird? Ved å bruke hendingshandsamarar, skal vi lære å programmere vår eigen tilpassa versjon av FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: 'Koden du skal skrive inneber å dra og sleppe blokker som representerer kommandoar til datamaskina. Blokkene er ei visualisering, og "under" kvar av blokkene er det skrive inn "verkeleg kode".'
      6:
        image: notes/flappy06.jpg
        text: 'Om du tek ein titt på arbeidsområdet, er nokre grøne blokker fylt ut for deg - desse er "hendingshandsamarar" '
      7:
        image: notes/flappy07.jpg
        text: 'Om du vil ha fuglen til å SLÅ med vengene når du klikkar med musa, kan du gjere det ved å knytte "SLÅ"-blokka til den rette hendingshandsamaren, og no vil fuglen slå med vengene kvar gong du klikkar med musa i spelet.'
      8:
        image: notes/flappy08.jpg
        text: I kvar oppgåve i denne delen vil vi introdusere nye typar hendingar som grøne blokker på arbeidsområdet, og du kan bestemme kva blokker som er dei rette til å svare på desse hendingane.
      9:
        image: notes/flappy09.jpg
        text: 'Når du ser ei rullgardinpil som denne, tyder det at du kan endre innstillingane - som kva lyd skal spelast når flappy treffer bakken.'
      10:
        image: notes/flappy10.jpg
        text: I den siste oppgåva vil du kunne lage ditt eiget spel og dele det med venene dine. Ha det gøy!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, eg er Mark! Lat oss lære om sløyfer. Ved å bruke sløyfer kan du fortelje ei datamaskin at ho skal repetere eit sett av handlingar om att og om att, tusenarar eller til og med milliardar av gongar.
      2:
        image: notes/hoc2_2.jpg
        text: I denne oppgåva ynskjer me å få fuglen til å flytte 5 plassar framover for å komme til grisen.
      3:
        image: notes/hoc2_3.jpg
        text: 'Me kan nytte den nye "gjenta"-blokka for å hjelpe oss.'
      4:
        image: notes/hoc2_4.jpg
        text: 'I staden for å dra ut 5 "framover"-blokker...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Me kan setje "framover"-blokka inne i "gjenta"-blokka og skrive eit nummer i blokka for å fortelje kor mange gonger me vil gjenta.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er viktig: Du kan setje meir enn ein kommando i ei "gjenta"-blokk.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Kos deg med å bruke den nye "gjenta"-blokka!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hei, eg er Chris. Før eg vart med i Miami Heat, gjekk jeg på Georgia Tech for å studere datavitskap. Lat oss prøve den nye blokka vår, "gjenta til"-blokka.'
      2:
        image: notes/hoc3_2.jpg
        text: Kva om me ikkje visste kor langt fuglen måtte flytte for å komme til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: 'Viss me sett ei "framover"-blokk inne blokka "gjenta til", vil fuglen gå framover til han kjem TIL grisen (eller krasjar inn i ein vegg).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er viktig: Nett som før, kan me setje fleire blokker inni "gjenta til"-blokka, og alle vil bli gjentekne.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, eg er  Bill! Lat oss lære eit nytt grunnleggjande konsept: "Viss"-uttrykk. Dette er korleis datamaskiner tek avgjerder.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du nyttar sjølv "Viss"-uttrykk kvar dag. Før du går ut om morgonen, seier du VISS det regner ute, må eg bruke jakka mi.'
      3:
        image: notes/hoc4_3.jpg
        text: Me kan seie at zombien skal sjekke om det er ei bane til venstre, og VISS han finn ei bane til venstre, kan me få han til å snu i den retninga.
      4:
        image: notes/hoc4_4.jpg
        text: 'For å skrive koden for dette, lat oss dra ut "viss"-blokka vår og setje ei "venstre"-blokk inni ho.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Om me sett ei "framover"-blokk over og ei "gjenta"-blokk rundt alt, vil zombien no kvar gong han flyttar seg sjekke om det er ein veg til venstre og i så fall snu dit. Kommandoen "gjenta" er avgjerande for å sjå etter om ein skal snu for kvart steg.'
      6:
        image: notes/hoc4_6.jpg
        text: Viss-setningar er veldig viktige i programmering. Eit av dei første programma eg skreiv, var eit tripp-trapp-tresko-spel der det var ei viss-setning som sa at VISS den andre personen held på å vinne, blokker posisjonen som let den andre personen vinne.
      7:
        image: notes/hoc4_7.jpg
        text: 'Ha det gøy med "viss"-blokka!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hei, eg heiter Saloni. Eg nyttar programmering for å løyse helseproblem. Lat oss lære om "viss-elles"-blokka. Ho ser ut som ei "viss"-blokk, men har ein ekstra del på slutten som seier "elles".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Viss eg set ei "framover"-blokk på plassen der det står "gjere" og ei "snu til venstre"-blokk der det står "ellers", tyder det at zombien vil velje mellom to alternativ. VISS det er ein veg framover, vil han gå dit, og ELLERS (viss det ikkje er ein veg framover) vil han svinge til venstre.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Akkurat som "hvis"-blokka, kan vi sette "hvis ellers"-blokker inni "gjenta"-blokkerer slik at zombien held fra med å flytte og "hvis ellers"-blokka kontrollerer om det er mogeleg å snu.'
      4:
        image: notes/hoc5_4.jpg
        text: No får du vise zombiene kvar dei høyrer heime!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'En "hvis ellers"-setning er ei avgjersle mellom to ting. La oss sjå på korleis vi kan bruke en "hvis ellers"-setninga med vår ven ekornet Scrat.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Denne blokka liknar på "hvis"-blokka, men det er ein ekstra del på botnen som seier "ellers". Dersom eg set ei "framover"-blokk der det står "gjere" og ei "snu venstre"-blokk der det står "elles", betyr det at ekornet Scrat vil gå framover hvis det er ein veg framfor. Hvis det ikkje er ein veg framfor, vil Scrat snu til venstre.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Det er å ta ei avgjerd og gjøre ei av to handlingar basert på denne avgjersla. Og akkurat som "hvis"-blokker, kan du sette "hvis-ellers"-blokker inni "gjenta"-blokker.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Nå la oss no hjelp ekornet Scrat til å få ei eikenøtt!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, eg er Brina, ingeniør hos Instagram. Ein funksjon er særskilte kodelinjer som du ynskjer å nytte om att og om att, så i staden for å skrive den same koden kvar gong, kan du berre bruke ei blokk.
      2:
        image: notes/stage13_2.jpg
        text: Me skal lære korleis ein definerer funksjonar. Blokker der me definerer funksjonar har ei stjerne i hjørnet. Namnet på funksjonen vert skrive på øvste linje.
      3:
        image: notes/stage13_3.jpg
        text: 'Blokkene inne i funksjonen fortel oss kva funksjonen gjer. Så denne funksjonsdefinisjonen er kalla "fyll 5", og består av ei "gjenta"-blokk og ei "fyll"-blokk.'
      4:
        image: notes/stage13_4.jpg
        text: 'Funksjonsdefinisjonen finn du i arbeidsområdet, men bonden vil ikke køyre funksjonen før me dreg ut "fyll 5"-blokka frå funksjoner-kategorien.'
      5:
        image: notes/stage13_5.jpg
        text: Lat oss ha litt FUN med FUNksjonar!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, eg er Makinde! Lat oss lære om "gjenta så lenge"-blokka.'
      2:
        image: notes/stage9_6.jpg
        text: '"Gjenta så lenge"-blokka vil halde fram med å gjere det som er inne i ho SÅ LENGE utsegna på toppen er SANN.'
      3:
        image: notes/stage9_7.jpg
        text: 'Døme: Viss bonden står på ein haug, vil ho harlde fram med å fjerne skuffer med jord SÅ LENGE det er framleis er ein haug under ho.'
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, eg er Trina, og eg jobbar for Pixar. Eg har vore med og laga ei rekkje filmar, inkludert Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Dette er den nye "telje"-sløyfa vår. Ho vil gjere at handlingane skjer om att og om att, og du kan endre handlingane litt kvar gong.'
      3:
        image: notes/stage11_3.jpg
        text: 'I dette dømet seier "telje"-sløyfa "tel frå 50 til 90 med 10 om gongen", og inni sløyfa har me ei "teikn ein firkant"-blokk. Dra "telje"-blokka frå "variablar"-området til "lengde"-plassen.'
      4:
        image: notes/stage11_4.jpg
        text: Dette tyder at kunstnaren vår skal teikne eit kvadrat med sidelengde 50 pikslar. Så legg me til 10 pikslar, og teiknar eit kvadrat med sidelengde 60 piksler. Slik held me fram til sidelengda vert 90 pikslar. Då har me sidelengder på 50, 60, 70, 80 og 90 pikslar.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, eg er Janete, og eg er ingeniør ved Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Kva om me ynskjer å teikne ein haug med trekantar av ulike storleikar?
      3:
        image: notes/stage15_3.jpg
        text: Me kunne skrive all koden for hand, eller me kan bruke ein funksjon med parametrar.
      4:
        image: notes/stage15_4.jpg
        text: 'For å gjere dette, må du klikke på den blå stjerna i "teikn ein trekant"-funksjonsdefinisjonen. Så dreg du "namn på parameter" inn i "parametrar"-blokka til høgre. NB! Ikkje skriv namnet først.'
      5:
        image: notes/stage15_5.jpg
        text: 'Viss du så skriv "lengde" der det står "x" og så trykker "Enter", vil du opprette eit lengde-parameter til funksjonen din.'
      6:
        image: notes/stage15_6.jpg
        text: 'Klikk på stjerna. Så klikkar du på "variablar"-kategorien og dreg "lengde" inn i "framover" blokka til funksjonen. Så drar du bort den gamle nummer-blokken.'
      7:
        image: notes/stage15_7.jpg
        text: 'For å bruke funksjonen med parametrar, kan du klikke på kategorien funksjonar og dra ut "teikn ein trekant med lengde"-funksjonen din.'
      8:
        image: notes/stage15_8.jpg
        text: No kan du bruke matematikk-blokka for å sette inn nye tal, og på den måten kan du teikne trekantar av ulik storleik.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulerer! Med den siste oppgåva du løyste, skreiv du kode som kan fortelje robotar korleis dei finn vegen gjennom enkle labyrintar eller tunnelar uansett lengde. Dette gjeld uansett om det er ein zombie, ein fugl, ein mars-rover eller om det er ein bil som køyrer utan sjåfør.
      2:
        image: notes/hoc6_2.jpg
        text: "Dei grunnleggjande konsepta du brukte, er utgangspunktet for alle programma og app'ane du ser rundt deg. Me har lært om gjentakande sløyfer, gjenta til-setningar, viss-setningar og viss-elles-setninger."
      3:
        image: notes/hoc6_3.jpg
        text: "Om du likte den første kodetimen, kan du gå til code.org for å fortsetje å lære programmering! Når du har fullført 20-timarskurset vårt, meistrar du grunnleggjande programmering. Då kan du lære korleis du skriv kode til telefon-app'ar, robotinstruksjonar, spel - ja, alt mulig!"
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologien endrar alt me gjer, og det speler inga rolle om du er ung eller gammal: Programmering er morosamt og kreativt, og alle kan lære det!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Video-notatar kjem snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, namnet mitt er Lyndsey. Eg er modell og skodespelar og eg skriv mine egen appar. La oss bruke kode til å utforske isens venleik og magi saman med Anna og Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Du skaper snøfnugg og mønster ved å skøyte på isen og lagar eit magisk vinterlandskap som du kan dele med venane dine.
      3:
        image: notes/frozen1_3.jpg
        text: I den neste timen vil du lære grunnleggande programmering. Tradisjonell programmering er vanligvis med tekst, men vi skal bruke Blockly, som bruker visuelle blokker som du kan dra og sleppe for å skrive programm. Også studenter på universitetet lærer grunnleggande programmering på denne måten. Bak blokkene lager du likvevel kode.
      4:
        image: notes/frozen1_4.jpg
        text: Eit program er et sett med instruksjonar som fortel ei datamaskin kva den skal gjere. La oss skrive kode eller eit program, som vil hjelpe Elsa til å lage ei enkel line. Vi vil bruke dette seinare for å lage meir kompliserte mønster.
      5:
        image: notes/frozen1_5.jpg
        text: Skjermen din er delt i tre hovudelar. Til venstre er isflata der du vil køyre programmet. Oppgåvene for kvart nivå er skrive rett under.
      6:
        image: notes/frozen1_6.jpg
        text: Det midterste området er verktykassa, og kvar av disse blokkene er ei handling som Elsa og Anna kan gjere.
      7:
        image: notes/frozen1_7.jpg
        text: 'Det kvite flata til høyre kallast arbeidsområdet, og dette er her vi skal sette saman programmet vårt. For å flytte rundt på isflata, kan du bruke "Flytt fremover"-blokka.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Her, sier "flytt framover"-blokken, "flytt fram 100 piksler." Når vi trykker "Køyr", kva skjer då? Elsa flytter fram en bestemt lengde på skjermen, 100 pikslar faktisk! Piksler er dei minste punkta på dataskjermen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Den andre blokka vi har i denne oppgåven sier "snu til høgre med 90 grader". Og når vi bruker denne "snu til høyre"-blokka, får det Elsa snu en gitt mengde. Du kan prøve ut hvor mye du vil at Elsa skal snu. Vinkelen måles fra retningen foran Elsa. Så dette er ei 90 graders vending. Og dette er ei 120 graders vending.'
      10:
        image: notes/frozen1_10.jpg
        text: Husk at du kan endre talet på pikslar og grader ved å klikke på pilene ved sida av.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Hei, eg er Paola! Datamaskiner er veldig flinke til å gjenta handlingar. Du kan telje til 10, 20 eller 100. Men ei datamaskin kan telje til ein milliard eller billion. Den vil ikkje gå lei og det tek berre nokre sekund. Om det er teljing, eller tegning, eller noko anna - datamaskiner kan gjenta ting hundrevis eller milliarder av gonger.'
      2:
        image: notes/frozen2_2.jpg
        text: 'I programmering kallar vi dette ei løkke. Ei løkke er korleis du gjentek koden igjen og igjen. Målet med den neste oppgåva er å hjelpe Anna med å lage eit kvadrat med "gjenta"-blokka.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Kodeblokkene som du plasserer inne i "gjenta"-blokken, vil bli gjentatt etter kvarandre, så mange gonger du ynskjer.'
      4:
        image: notes/frozen2_4.jpg
        text: 'For å teikne eit kvadrat, kan du bruke "flytt fram" og "snu til høgre"-blokkene 4 gonger. Men det er enklare å be datamaskina "flytt frem" og "snu til høgre 90 grader" ein gong og deretter be den om å gjenta desse to handlingane 4 gonger. For å gjøre det, må du sette "flytt fram" og "snu til høgre" blokkene inne i ei "gjenta"-blokk.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Hugs på at du kan endre tallet i "Gjenta"-blokka vilkårleg, og det vil gjenta det som er inne i blokka så  mange gongar.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei! Eg er Chris Bosh. Eg er profesjonell basketballspilar og eg programmerte på skulen.
      2:
        image: notes/frozen3_2.jpg
        text: Eit av dei viktigste konsepta i programmering er korleis ein kan definere nye kommandoar. Dei fleste programmeringsspråka har berre omkring 100 ord eller kommandoar. Og kunsten og magien ligg verkeleg i å definere dine eigne, nye ord ut frå desse byggeklossane.
      3:
        image: notes/frozen3_3.jpg
        text: Når du har lært ei datamaskin korleis ho skal utføre ei handling ein gong ved bruk av ein sekvensen av kommandoar, så kan du lage ditt eige namn for handlinga selv, slik at det er lett å gjere den på nytt seinare. Når du definerer din eigen kommando og gir den namn blir det kalla det ein funksjon.
      4:
        image: notes/frozen3_4.jpg
        text: Hei! Er jeg Jess. Når du programmerer med blokker, ville du bruke funksjonar dersom det er eit sett med handlingar du vil bruke mange gonger. For eksempel har du skrive kode for å laga eit kvadrat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kan definere dette som ein funksjon kalla "lag kvadrat" '
      6:
        image: notes/frozen3_6.jpg
        text: Nå har du ei ny blokk som du kan bruke fleire gonger for å opprette flere kvadrat.
      7:
        image: notes/frozen3_7.jpg
        text: Mange enkle figurar kan brukast til å lage meir komplekse mønster. I den neste oppgåva vil koden du nyleg skreiv for å lage ein sirkel være tilgjengelig som ein ny funksjon som kan lage sirklar i ulike størrelsar. Kan du bruke den til å hjelpe Elsa med å lage kompliserte og vakre mønster i snøen?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi skal lage spel ved å bruke Spel Lab. Gode spel har ei historie og kvar historie har skodespelarar. Vi skal lære korleis vi får våre skodespelarar, som hekser, romvesen og dyr til å snakke, bevege seg og samhandle med kvarandre. Ved slutten av denne oppgåva kan du bygge eit spel frå grunnen av og dele det med venane dine.
      2:
        image: notes/playlab_intro_2.png
        text: Skjermen din er delt i 3 hovuddelar. Den til venstre er speleflata der spelet ditt vil køyres. Instruksjonane for kvart nivå er skrivne under speleflata.
      3:
        image: notes/playlab_intro_3.png
        text: Det midterste området er verktykassen, og kvar av desse blokkene er ein kodedel. Den kvite flata til høyre blir kalla arbeidsområdet og det er der vi skal bygge opp programmet vårt.
      4:
        image: notes/playlab_intro_4.png
        text: 'For å starte må du koble blokkene dine til den oransje-"når køyrer"-blokka. Du kan knyte fleire blokker saman ved å dra dei til du ser den gule lina og vil dei snappe saman.'
      5:
        image: notes/playlab_intro_5.png
        text: 'I denne første oppgåva er skodespelaren ein pingvin og vi skal få den til å sei "Hallo" ved å dra "sei"-blokka ut, knytte den til å "når køyrer"-blokka og skrive inn "Hallo." Vi kan også få pingvinen til å flytte på seg ved hjelp av bruke blokkene for å flytte til høyre og venstre. Når du har blokkene dine på plass, trykk på Køyr-knappen for å sjå kva du har programmert.'
      6:
        image: notes/playlab_intro_6.png
        text: Set i gong no og når du er ferdig vil du kunne lage ditt eige spel med alle slags skodespelarar som kan samhandle, bli glade eller triste, få poeng, kaste eldkuler eller til og med trylle kvarandre bort. Det er heilt opp til deg og spelet du vil lage.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: No skal vi lære om noko som alle som programmerer spel brukar kvar dag. Dei blir kalla hendingar. Ei hending ber programmet ditt om å lytte etter ting som skjer. Når det skjer, blir ei handlingn utført.
      2:
        image: notes/playlab_events_2.png
        text: Eksempl på hendingar er å vente på eit museklikk, ein piltast eller trykk på skjermen.
      3:
        image: notes/playlab_events_3.png
        text: 'Her skal vi få romboten til å helse på jordbuarane når ein spelar klikker på han. Vi bruker "når skodespalaren blir klikka"-blokken og festar "sei"-blokka til den. Når spelaren klikkar på romboten vil alt som er fseta til denne "når skodespelaren blir klikka"-hendelsesblokka bli utført. Kva skal ditt romvesen sei?'
      4:
        image: notes/playlab_events_4.png
        text: 'Det fins også "når pil"-blokker. Hvis du kobler "flytt"-blokker til desse, kan du begynne å flytte skodespelarar opp, ned, til venstre eller høyre. Steg for steg blir spelet ditt meir interaktiv.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Dette er "gjenta for alltid"-blokka. Alt i denne blokken vil skje for alltid i spelet.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Hvis vi ynskjer at ein skodespelar skal gjere noko fleire gonger uten at spelaren trenger å gjere noko, vil vi sette desse blokkene inne i "gjenta for alltid"-blokka.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: I den neste oppgåva er målet vårt å hjelpe trollmannen med å patruljere grensene av kongeriket, venstre og høyre heile tida. Å lære korleis du kan gjenta kommandoar vil spare deg for massevis av tid seinare når du lagar ditt eiget spel.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Dette er tegnebrikken din. Bruk den riktige for å flytte kunstneren til der han trenger å gå for å fylle inn de grå linjene.
      2:
        image: notes/C1_artist_intro_2.png
        text: Dette er hoppebrikker. Når du bruker disse, vil kunstneren din flytte seg men ikke tegne, så bruk disse for å hoppe til den neste grå linjen.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Er ikke bier superkule? I dette oppgavesettet skal du hjelpe bien å hente nektar fra blomstene og så fly til bikubene for å lage honning. I denne oppgaven må du bruke "hent nektar"- og "lag honning"-brikkene.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Hver blomst har forskjellig mengde med nektar: 1, 2, 3 eller mer. Vi vet hvor mye nektar som finnes i de røde blomstene ved å se på det lille tallet i hjørnet. Så sørg for å hente all nektaren fra blomsten før du fortsetter. I tillegg kan hver bikube bare holde en begrenset mengde honning: 1, 2, 3 eller mer. Så sørg for å lage så mye honning som bikuben kan romme.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: 'Hvis du klarer å få tak i all nektaren og lage all honningen, går du til neste nivå. Hvis ikke må du prøve oppgaven på nytt. "Surr" rundt en stund for å finne ut hvordan det føles å være en programmerer!'
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: En løkke er en gjentagelse av en aktivitet. Når jeg går inn i bikuben for å inspisere, tar jeg opp en ramme og så setter jeg den ned igjen, så jeg gjentar den samme handlingen flere ganger. Løkken går i ring, der handlingen blir gjort flere ganger.
      2:
        image: notes/C1_bee_loops_2.png
        text: 'På dette brettet ønsker vi at bien skal samle tre nektar fra blomsten. I stedet for å bruke tre "hent nektar"-brikker, skal du bruke en gjenta-brikke for å hente nektar tre ganger. Trykk på "Kjør" og se om du klarte det!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Denne leksjonen kalles for den store hendelsen. Den handler om hvordan vi kan kontrollere programmene våre og faktisk endre måten et program fungerer på mens det kjører ved å bruke hendelser, som å trykke på en knapp eller klikke på en mus.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: I denne økten vil du bli styrt av en papir-fjernkontroll. Det er akkurat som et ekte dataspill.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: En hendelse er en handling som gjør at noe skjer. Det er som når du klikker på museknappen og en webside lastes. Det er en hendelse. Når du tar på skjermen på et nettbrett for å bla nedover, er det også en hendelse. Hendelser kan brukes for å la brukeren styre programmet ditt når de vil.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'I hverdagen skjer det ting som gjør at vi handler. Vi er sultne og går til kjøleskapet. Vi hører at postmannen kommer og legger post i postkassen, og så går vi og henter posten.  Dette er akkurat som handlingene der man trykker på en knapp eller bruker en joystick. Dette er noe som skjer som får oss til å gjøre noe annet.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'I dataspill finnes det en handling kalt "Oppdater" og det skjer 30 eller 60 ganger i sekundet. For dataspillprogrammerere er denne handlingen nesten viktigere enn knappene eller joysticken.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Den viktigste hendelsen vi følger med på er "Oppdater". Når dette skjer, sjekker vi joysticken. Så vi sier, "Oj, har noen trykket på knappen siden forrige gang vi sjekket? Ja eller nei?" Uten hendelser kan ikke spilleren flytte på seg eller hoppe, og du vil ikke klare å kontrollere det som skjer. Dataspillet ville ikke kunne bevege noen ting.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Når man lager sandslott vet man at man ikke alltid får det til. Men hvis du holder ut, så så blir det både bedre og artigere. Utholdenhet er det som gjelder. Ikke gi deg, du kommer til å digge det.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Denne økten heter bygge en grunnmur. I denne økten skal vi jobbe med en oppgave som er ment å være veldig vanskelig. Du kommer til å finne ut hvordan man lager en struktur som er minst like høy som en av disse koppene og den kommer til å bli så sterk at den kan bære vekten av en bok.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Noen ganger blir ikke det vi lager slik vi hadde tenkt oss. Noen ganger blir man frustrert og har lyst å gi opp. Kanskje skjer dette ofte. Men hvis vi fortsetter å prøve og gjør så godt vi kan om og om igjen, så får vi det til til slutt.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Utholdenhet handler om å ikke gi seg når man egentlig har lyst til å gi opp. Hvis du har lyst å lage noe nytt og annerledes, så kommer du til å oppleve noen nederlag på veien.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Kunsten med utholdenhet er å fortsette og lære av feil du gjør i stedet for å gi opp fordi du er frustrert. Frustrasjon betyr egentlig bare at det er noe fantastisk som ligger og venter rett rundt hjørnet. Så ikke slutt før du får det til. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the Internet. The Internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the Internet had smellorama!" I can talk to different people on the Internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hittil har du laga ein animasjon eller ei historie som gjer akkurat det samme kvar gong du køyrer den. Nå kan du lage eit interaktivt spel som du faktisk kan spele.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Her er "når pil"-blokka og "flytt skodespelar"-blokka. Du kan sette desse blokkene saman for å flytte figurane rundt med piltastane.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C3_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C3_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C3_debugging_bee_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Hittil har du laga ein animasjon eller ei historie som gjer akkurat det samme kvar gong du køyrer den. Nå kan du lage eit interaktivt spel som du faktisk kan spele.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Her er "når pil"-blokka og "flytt skodespelar"-blokka. Du kan sette desse blokkene saman for å flytte figurane rundt med piltastane.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
