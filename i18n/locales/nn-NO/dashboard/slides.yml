nn:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til din første kodetime! La oss dykke rett inn i ditt første møte med programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Vi skal bruke Blockly, et visuelt programmeringsspråk hvor du drar og slipper blokkene for å skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: 'De fleste programmeringsspråk bruker tekst, men Blockly er visuelt. Hver blokk tilsvarer en "ekte" kodelinje.'
      4:
        image: notes/hoc1_4.jpg
        text: Du vil lære grunnleggende informatikk, med begreper som brukes overalt, helt fra å skrive apper til å lage programmer for å styre Mars-roveren.
      5:
        image: notes/hoc1_5.jpg
        text: Et program er et sett med instruksjoner som datamaskinen skal følge.
      6:
        image: notes/hoc1_6.jpg
        text: 'Målet med det første programmet er å få en "Angry Bird" gjennom en labyrint slik at den treffer en grønn gris.'
      7:
        image: notes/hoc1_7.jpg
        text: Til venstre er labyrinten der programmet kjøres. Instruksjonene for hver oppgave er under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: 'Den midtre verktøykassen har kommandoene for "Angry Bird". Du vil bruke disse for å bygge koden.'
      9:
        image: notes/hoc1_9.jpg
        text: Til høyre er arbeidsområdet hvor du skal trekke blokker fra verktøykassen til å bygge programmet med. Hvis du vil slette en blokk, drar du den til papirkurven i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: 'Hver blokk er en instruksjon. Hvis du drar en "fremover" blokk til arbeidsområdet og trykker "Kjør programmet", flyttes fuglen en plass på labyrinten.'
      11:
        image: notes/hoc1_11.jpg
        text: For å gjere meir enn ei handling, kan du dra mange blokker til arbeidsområdet og sette dei saman. Fuglen vil utføre kommandoane frå toppen og nedover.
      12:
        image: notes/hoc1_12.jpg
        text: 'Hvis du kjører et program og ønsker å fikse det for å prøve på nytt, kan du trykke på "Reset"-knappen.'
      13:
        image: notes/hoc1_13.jpg
        text: La oss gå og ta de grisene!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, jeg er JR! Alle racerbil-lag må ha programmerere for å vinne. De analyserer data fra bilen for å gjøre den raskere.
      2:
        image: notes/stage5_2.jpg
        text: I disse oppgavene vil du være en kunstner som tegner linjer bak deg når du flytter deg.
      3:
        image: notes/stage5_3.jpg
        text: 'Denne blokken sier "flytt frem 100 piksler." Piksler er bare veldig små prikker på skjermen.'
      4:
        image: notes/stage5_4.jpg
        text: 'Denne blokken sier "sving 90 grader til høyre". Den vil dreie kunstneren like mye som "sving" blokken i labyrintoppgaven gjorde.'
      5:
        image: notes/stage5_5.jpg
        text: Klikk på pilen i en av disse blokkene for å endre hvor mye kunstneren går fremover. Lek litt med dette for å bli kjent med de nye blokkene.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, jeg Paola! I disse oppgavene er du en bonde som trenger å gjøre jordet flatt for å kunne dyrke grønnsaker der.
      2:
        image: notes/stage9_2.jpg
        text: Du må hjelpe henne med å fjerne alle jordhaugene, og fyle alle hullene.
      3:
        image: notes/stage9_3.jpg
        text: Dei nye blokkene fjernar 1 skuffe med skitt frå ein haug og fyller ut 1 skuffe med skitt i eit hol.
      4:
        image: notes/stage9_4.jpg
        text: Hauger og hull har forskjellige størrelse eller dybde, så du må fortelle bonden hvor mange spadetak som det er behov for.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei, eg er Katie! Ei av dei mest spennande tinga med datavitskap er at eit dataprogram kan vere interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Kvar gong nokon klikkar eller trykkjer eller skriv på ei datamaskin eller ein telefon, genererer det ei HENDING, og det er kode som avgjer kva som skjer når ei HENDING inntreffer.
      3:
        image: notes/flappy03.jpg
        text: 'Du kan til dømes ha ein HENDINGSHANDSAMAR som seier "ved museklikk, spel ein lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du høyrt om spelet FlappyBird? Ved å bruke hendingshandsamarar, skal vi lære å programmere vår eigen tilpassa versjon av FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: 'Koden du skal skrive inneber å dra og sleppe blokker som representerer kommandoar til datamaskina. Blokkene er ei visualisering, og "under" kvar av blokkene er det skrive inn "verkeleg kode".'
      6:
        image: notes/flappy06.jpg
        text: 'Om du tek ein titt på arbeidsområdet, er nokre grøne blokker fylt ut for deg - desse er "hendingshandsamarar" '
      7:
        image: notes/flappy07.jpg
        text: 'Om du vil ha fuglen til å SLÅ med vengene når du klikkar med musa, kan du gjere det ved å knytte "SLÅ"-blokka til den rette hendingshandsamaren, og no vil fuglen slå med vengene kvar gong du klikkar med musa i spelet.'
      8:
        image: notes/flappy08.jpg
        text: I kvar oppgåve i denne delen vil vi introdusere nye typar hendingar som grøne blokker på arbeidsområdet, og du kan bestemme kva blokker som er dei rette til å svare på desse hendingane.
      9:
        image: notes/flappy09.jpg
        text: 'Når du ser ei rullgardinpil som denne, tyder det at du kan endre innstillingane - som kva lyd skal spelast når flappy treffer bakken.'
      10:
        image: notes/flappy10.jpg
        text: I den siste oppgåva vil du kunne lage ditt eiget spel og dele det med venene dine. Ha det gøy!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, jeg heter Mark! La oss lære om løkker. Med løkker kan du skal be datamaskinen om å gjenta et sett av handlinger igjen og igjen, tusenvis eller milliarder ganger.
      2:
        image: notes/hoc2_2.jpg
        text: I denne oppgaven ønsker vi å flytte fuglen frem 5 plasser for å ta grisen.
      3:
        image: notes/hoc2_3.jpg
        text: 'Vi kan bruke den nye "gjenta" blokken for å hjelpe oss.'
      4:
        image: notes/hoc2_4.jpg
        text: 'I stedet for å dra ut 5 "fremover" blokker...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Vi kan sette "fremover" blokken inne i "gjenta"-blokken og skrive et nummer i blokken å fortelle den hvor mange ganger det skal gjentas.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er viktig: Du kan sette mer enn én kommando i en "gjenta"-blokk.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Kos deg med å bruke den nye "gjenta" blokken!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hei, er jeg Chris. Før jeg startet i Miami Heat, studerte jeg informatikk. La oss prøve våre ny blokk, "Gjenta til" blokken.'
      2:
        image: notes/hoc3_2.jpg
        text: Hva hvis vi ikke visste hvor langt fuglen måtte bevege seg for å komme til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: 'Hvis vi setter en "fremover" blokk inne i en "Gjenta til" blokk, vil fuglen bevege seg fremover til den når grisen (eller krasjer inn i en vegg).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er viktig: Akkurat som før kan vi sette flere blokker inni "Gjenta til" blokken, og de vil alle bli gjentatt.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, er jeg Bill! La oss lære et nytt grunnleggende konsept: hvis-uttrykk. Dette er hvordan datamaskiner tar beslutninger.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du bruker "hvis"-uttrykk selv hver dag. Før du går ut hver morgen sier du: "HVIS det regner ute må jeg ta på meg jakke".'
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan be zombien om å sjekke om det er en sti til venstre. Hvis han finner en sti der, kan vi be han snu i den retningen.
      4:
        image: notes/hoc4_4.jpg
        text: 'For å skrive koden for dette, må vi dra ut "Hvis"-blokken og sette en "venstre"-blokk inni den.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Hvis vi hver gang zombien flytter på seg setter en "fremover" blokk over den, og en "gjenta" blokk rundt alt, vil han nå sjekke om det er en sti til venstre og i så fall snu dit. Kommandoen "gjenta" er viktig for å se etter sti etter hvert skritt.'
      6:
        image: notes/hoc4_6.jpg
        text: Hvis-setninger er veldig viktige i programmering. En av de første programmene jeg skrev, var et tripp-trapp-tresko-spill. Der var det det en hvis-setning som sa hvis den andre personen holdt på å vinne, måtte programmet blokkere posisjonen som ville la han seire.
      7:
        image: notes/hoc4_7.jpg
        text: Ha det gøy med hvis-blokker!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hei, eg heiter Saloni. Eg nyttar programmering for å løyse helseproblem. Lat oss lære om "viss-elles"-blokka. Ho ser ut som ei "viss"-blokk, men har ein ekstra del på slutten som seier "elles".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Viss eg set ei "framover"-blokk på plassen der det står "gjere" og ei "snu til venstre"-blokk der det står "ellers", tyder det at zombien vil velje mellom to alternativ. VISS det er ein veg framover, vil han gå dit, og ELLERS (viss det ikkje er ein veg framover) vil han svinge til venstre.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Akkurat som "hvis"-blokka, kan vi sette "hvis ellers"-blokker inni "gjenta"-blokkerer slik at zombien held fra med å flytte og "hvis ellers"-blokka kontrollerer om det er mogeleg å snu.'
      4:
        image: notes/hoc5_4.jpg
        text: No får du vise zombiene kvar dei høyrer heime!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'En "hvis ellers"-setning er ei avgjersle mellom to ting. La oss sjå på korleis vi kan bruke en "hvis ellers"-setninga med vår ven ekornet Scrat.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Denne blokka liknar på "hvis"-blokka, men det er ein ekstra del på botnen som seier "ellers". Dersom eg set ei "framover"-blokk der det står "gjere" og ei "snu venstre"-blokk der det står "elles", betyr det at ekornet Scrat vil gå framover hvis det er ein veg framfor. Hvis det ikkje er ein veg framfor, vil Scrat snu til venstre.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Det er å ta ei avgjerd og gjøre ei av to handlingar basert på denne avgjersla. Og akkurat som "hvis"-blokker, kan du sette "hvis-ellers"-blokker inni "gjenta"-blokker.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Nå la oss no hjelp ekornet Scrat til å få ei eikenøtt!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, jeg Brina, ingeniør ved Instagram. En funksjon er noen kodelinjer som du vil bruke igjen og igjen, så i stedet for å skrive den samme koden hver gang, kan du bare bruke en blokk.
      2:
        image: notes/stage13_2.jpg
        text: Vi skal lære å definere funksjoner. Blokker der vi definerer funksjoner har en stjerne i hjørnet. Navnet på funksjonen skrives på øverste linje.
      3:
        image: notes/stage13_3.jpg
        text: 'Blokkene inne i funksjonen forteller oss hva den gjør. Så denne funksjonen er kalt "fyll 5", og består av en "gjenta" blokk og en "fylle" blokk.'
      4:
        image: notes/stage13_4.jpg
        text: 'Funksjonen finnes på arbeidsområdet, men bonden vil ikke kjøre den før vi drar ut "Fyll 5 funksjon" blokka fra funksjoner-kategorien.'
      5:
        image: notes/stage13_5.jpg
        text: La oss ha det gøy med funksjoner!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, jeg Makinde! La oss lære om "gjenta så lenge"-blokken '
      2:
        image: notes/stage9_6.jpg
        text: '"Gjenta så lenge" blokken vil fortsette å gjøre det som er inne i den så lenge utsagnet på toppen er sant.'
      3:
        image: notes/stage9_7.jpg
        text: For eksempel, hvis bonden står på en haug, vil hun fortsette å fjerne spadetak med jord så lenge det er fortsatt en haug under henne.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, jeg er Trina, og jeg jobber for Pixar. Jeg har vært med å lage en rekke filmer, inkludert Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Dette er nye "teller" løkka. Det vil utføre handlingene igjen og igjen, og du kan endre handlingene litt hver gang.'
      3:
        image: notes/stage11_3.jpg
        text: 'Dette eksemplet på en "teller"-løkke sier "Tell med teller fra 50 til 90 med 10" og inni den har vi en "tegn en firkant"-blokk. Dra "teller" blokken fra "Variabler"-seksjonen til "lengde"-stedet.'
      4:
        image: notes/stage11_4.jpg
        text: Dette betyr at kunstneren vår skal tegne et kvadrat med sidelengde 50 piksler. Så legger vi til 10, og tegner et kvadrat med sidelengde 60 piksler. Slik holder vi på til sidelengden blir 90 piksler. Dermed har vi sidelengdene 50, 60, 70, 80 og 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, jeg er Janete, og jeg er en ingeniør ved Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Hva hvis vi ønsker å tegne en haug med trekanter av forskjellig størrelse?
      3:
        image: notes/stage15_3.jpg
        text: Vi kan skrive all koden for hånd, eller vi kan bruke en funksjon med parametere.
      4:
        image: notes/stage15_4.jpg
        text: 'For å gjøre dette, må du klikke på den blå stjernen i "tegn en trekant" funksjonen. Dra så "Navn på parameter:" inn i "parametre"-blokka til høyre. NB! Ikke skriv navnet først.'
      5:
        image: notes/stage15_5.jpg
        text: 'Så hvis du skriver "lengde" der det står "x" og så trykker "Enter", vil du opprette et lengde-parameter til funksjonen.'
      6:
        image: notes/stage15_6.jpg
        text: 'Klikk på stjernen. Så klikker du på "variabler"-kategorien og drar "lengde" inn i "fremover" blokka til funksjonen. Så drar du bort den gamle nummer-blokken.'
      7:
        image: notes/stage15_7.jpg
        text: 'For å bruke funksjonen med parametere. kan du klikke på kategorien funksjoner og dra ut "tegn en trekant med lengde"-funksjonen.'
      8:
        image: notes/stage15_8.jpg
        text: Nå kan du bruke matematikk-blokken for å hente nye tall, og på den måten kan du tegne trekanter av forskjellige størrelse.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulerer! Med den siste oppgaven du løste, skrev du kode som kan fortelle roboter hvordan de finner vei gjennom enkle labyrinter eller tunneler uansett lengde. Dette gjelder uansett om det er en zombie, en fugl, en mars-rover eller om det er deg som kjører bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grunnleggende konseptene som du brukte, danner utgangspunktet for alle programmene eller appene du ser. Vi har lært om gjentagende løkker, hvis-setninger, og hvis-ellers setninger.
      3:
        image: notes/hoc6_3.jpg
        text: 'Hvis du likte den første kodetimen, kan du gå til code.org for å fortsette å lære programmering! Når du har fullført 20-timers kurset vårt, behersker du grunnleggende programmering. Da kan du begynne å lære å skrive telefon-apper, robotinstruksjoner, spill - ja alt mulig!'
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologien forandrer alt vi gjør, og det spiller ingen rolle om du er ung eller gammel: Programmering er morsomt og kreativt, og alle kan lære det!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Video-notater kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, namnet mitt er Lyndsey. Eg er modell og skodespelar og eg skriv mine egen appar. La oss bruke kode til å utforske isens venleik og magi saman med Anna og Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Du skaper snøfnugg og mønster ved å skøyte på isen og lagar eit magisk vinterlandskap som du kan dele med venane dine.
      3:
        image: notes/frozen1_3.jpg
        text: I den neste timen vil du lære grunnleggande programmering. Tradisjonell programmering er vanligvis med tekst, men vi skal bruke Blockly, som bruker visuelle blokker som du kan dra og sleppe for å skrive programm. Også studenter på universitetet lærer grunnleggande programmering på denne måten. Bak blokkene lager du likvevel kode.
      4:
        image: notes/frozen1_4.jpg
        text: Eit program er et sett med instruksjonar som fortel ei datamaskin kva den skal gjere. La oss skrive kode eller eit program, som vil hjelpe Elsa til å lage ei enkel line. Vi vil bruke dette seinare for å lage meir kompliserte mønster.
      5:
        image: notes/frozen1_5.jpg
        text: Skjermen din er delt i tre hovudelar. Til venstre er isflata der du vil køyre programmet. Oppgåvene for kvart nivå er skrive rett under.
      6:
        image: notes/frozen1_6.jpg
        text: Det midterste området er verktykassa, og kvar av disse blokkene er ei handling som Elsa og Anna kan gjere.
      7:
        image: notes/frozen1_7.jpg
        text: 'Det kvite flata til høyre kallast arbeidsområdet, og dette er her vi skal sette saman programmet vårt. For å flytte rundt på isflata, kan du bruke "Flytt fremover"-blokka.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Her, sier "flytt framover"-blokken, "flytt fram 100 piksler." Når vi trykker "Køyr", kva skjer då? Elsa flytter fram en bestemt lengde på skjermen, 100 pikslar faktisk! Piksler er dei minste punkta på dataskjermen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Den andre blokka vi har i denne oppgåven sier "snu til høgre med 90 grader". Og når vi bruker denne "snu til høyre"-blokka, får det Elsa snu en gitt mengde. Du kan prøve ut hvor mye du vil at Elsa skal snu. Vinkelen måles fra retningen foran Elsa. Så dette er ei 90 graders vending. Og dette er ei 120 graders vending.'
      10:
        image: notes/frozen1_10.jpg
        text: Husk at du kan endre talet på pikslar og grader ved å klikke på pilene ved sida av.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Hei, eg er Paola! Datamaskiner er veldig flinke til å gjenta handlingar. Du kan telje til 10, 20 eller 100. Men ei datamaskin kan telje til ein milliard eller billion. Den vil ikkje gå lei og det tek berre nokre sekund. Om det er teljing, eller tegning, eller noko anna - datamaskiner kan gjenta ting hundrevis eller milliarder av gonger.'
      2:
        image: notes/frozen2_2.jpg
        text: 'I programmering kallar vi dette ei løkke. Ei løkke er korleis du gjentek koden igjen og igjen. Målet med den neste oppgåva er å hjelpe Anna med å lage eit kvadrat med "gjenta"-blokka.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Kodeblokkene som du plasserer inne i "gjenta"-blokken, vil bli gjentatt etter kvarandre, så mange gonger du ynskjer.'
      4:
        image: notes/frozen2_4.jpg
        text: 'For å teikne eit kvadrat, kan du bruke "flytt fram" og "snu til høgre"-blokkene 4 gonger. Men det er enklare å be datamaskina "flytt frem" og "snu til høgre 90 grader" ein gong og deretter be den om å gjenta desse to handlingane 4 gonger. For å gjøre det, må du sette "flytt fram" og "snu til høgre" blokkene inne i ei "gjenta"-blokk.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Hugs på at du kan endre tallet i "Gjenta"-blokka vilkårleg, og det vil gjenta det som er inne i blokka så  mange gongar.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei! Eg er Chris Bosh. Eg er profesjonell basketballspilar og eg programmerte på skulen.
      2:
        image: notes/frozen3_2.jpg
        text: Eit av dei viktigste konsepta i programmering er korleis ein kan definere nye kommandoar. Dei fleste programmeringsspråka har berre omkring 100 ord eller kommandoar. Og kunsten og magien ligg verkeleg i å definere dine eigne, nye ord ut frå desse byggeklossane.
      3:
        image: notes/frozen3_3.jpg
        text: Når du har lært ei datamaskin korleis ho skal utføre ei handling ein gong ved bruk av ein sekvensen av kommandoar, så kan du lage ditt eige namn for handlinga selv, slik at det er lett å gjere den på nytt seinare. Når du definerer din eigen kommando og gir den namn blir det kalla det ein funksjon.
      4:
        image: notes/frozen3_4.jpg
        text: Hei! Er jeg Jess. Når du programmerer med blokker, ville du bruke funksjonar dersom det er eit sett med handlingar du vil bruke mange gonger. For eksempel har du skrive kode for å laga eit kvadrat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kan definere dette som ein funksjon kalla "lag kvadrat" '
      6:
        image: notes/frozen3_6.jpg
        text: Nå har du ei ny blokk som du kan bruke fleire gonger for å opprette flere kvadrat.
      7:
        image: notes/frozen3_7.jpg
        text: Mange enkle figurar kan brukast til å lage meir komplekse mønster. I den neste oppgåva vil koden du nyleg skreiv for å lage ein sirkel være tilgjengelig som ein ny funksjon som kan lage sirklar i ulike størrelsar. Kan du bruke den til å hjelpe Elsa med å lage kompliserte og vakre mønster i snøen?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Hittil har du laga ein animasjon eller ei historie som gjer akkurat det samme kvar gong du køyrer den. Nå kan du lage eit interaktivt spel som du faktisk kan spele.
      2:
        image: notes/playlab_2.png
        text: 'Her er "når pil"-blokka og "flytt skodespelar"-blokka. Du kan sette desse blokkene saman for å flytte figurane rundt med piltastane.'
      3:
        image: notes/playlab_3.png
        text: Og det fins nokre blokker som gjer ting når figurane kolliderer eller blir klikka på. Prøv dei og ha det gøy!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi skal lage spel ved å bruke Spel Lab. Gode spel har ei historie og kvar historie har skodespelarar. Vi skal lære korleis vi får våre skodespelarar, som hekser, romvesen og dyr til å snakke, bevege seg og samhandle med kvarandre. Ved slutten av denne oppgåva kan du bygge eit spel frå grunnen av og dele det med venane dine.
      2:
        image: notes/playlab_intro_2.png
        text: Skjermen din er delt i 3 hovuddelar. Den til venstre er speleflata der spelet ditt vil køyres. Instruksjonane for kvart nivå er skrivne under speleflata.
      3:
        image: notes/playlab_intro_3.png
        text: Det midterste området er verktykassen, og kvar av desse blokkene er ein kodedel. Den kvite flata til høyre blir kalla arbeidsområdet og det er der vi skal bygge opp programmet vårt.
      4:
        image: notes/playlab_intro_4.png
        text: 'For å starte må du koble blokkene dine til den oransje-"når køyrer"-blokka. Du kan knyte fleire blokker saman ved å dra dei til du ser den gule lina og vil dei snappe saman.'
      5:
        image: notes/playlab_intro_5.png
        text: 'I denne første oppgåva er skodespelaren ein pingvin og vi skal få den til å sei "Hallo" ved å dra "sei"-blokka ut, knytte den til å "når køyrer"-blokka og skrive inn "Hallo." Vi kan også få pingvinen til å flytte på seg ved hjelp av bruke blokkene for å flytte til høyre og venstre. Når du har blokkene dine på plass, trykk på Køyr-knappen for å sjå kva du har programmert.'
      6:
        image: notes/playlab_intro_6.png
        text: Set i gong no og når du er ferdig vil du kunne lage ditt eige spel med alle slags skodespelarar som kan samhandle, bli glade eller triste, få poeng, kaste eldkuler eller til og med trylle kvarandre bort. Det er heilt opp til deg og spelet du vil lage.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: No skal vi lære om noko som alle som programmerer spel brukar kvar dag. Dei blir kalla hendingar. Ei hending ber programmet ditt om å lytte etter ting som skjer. Når det skjer, blir ei handlingn utført.
      2:
        image: notes/playlab_events_2.png
        text: Eksempl på hendingar er å vente på eit museklikk, ein piltast eller trykk på skjermen.
      3:
        image: notes/playlab_events_3.png
        text: 'Her skal vi få romboten til å helse på jordbuarane når ein spelar klikker på han. Vi bruker "når skodespalaren blir klikka"-blokken og festar "sei"-blokka til den. Når spelaren klikkar på romboten vil alt som er fseta til denne "når skodespelaren blir klikka"-hendelsesblokka bli utført. Kva skal ditt romvesen sei?'
      4:
        image: notes/playlab_events_4.png
        text: 'Det fins også "når pil"-blokker. Hvis du kobler "flytt"-blokker til desse, kan du begynne å flytte skodespelarar opp, ned, til venstre eller høyre. Steg for steg blir spelet ditt meir interaktiv.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Dette er "gjenta for alltid"-blokka. Alt i denne blokken vil skje for alltid i spelet.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Hvis vi ynskjer at ein skodespelar skal gjere noko fleire gonger uten at spelaren trenger å gjere noko, vil vi sette desse blokkene inne i "gjenta for alltid"-blokka.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: I den neste oppgåva er målet vårt å hjelpe trollmannen med å patruljere grensene av kongeriket, venstre og høyre heile tida. Å lære korleis du kan gjenta kommandoar vil spare deg for massevis av tid seinare når du lagar ditt eiget spel.
