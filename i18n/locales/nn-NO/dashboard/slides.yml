nn:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til den første timen din med koding! Lat oss dykke rett inn første smak av programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Me skal bruke Blockly, eit visuelt programmeringsspråk der du dreg og slepp blokker for å skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: 'Det meste av kode vert skrive, men Blockly er visuelt. Kvar blokk tilsvarer ei linje med "ekte" kode.'
      4:
        image: notes/hoc1_4.jpg
        text: "Du vil lære grunnlaget for datavitskap (informatikk), omgrep som vert nytta til alt frå å lage app'ar til å kontrollere Mars-roboten."
      5:
        image: notes/hoc1_5.jpg
        text: Eit program er eit sett med instruksjonar som datamaskina skal følgje.
      6:
        image: notes/hoc1_6.jpg
        text: Målet med det første programmet er å få ein sint fugl gjennom ein labyrint for å treffe ein grøn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Til venstre er labyrinten der programmet vert køyrd. Instruksjonane for kvar oppgåve står under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: 'I verktøykassa i midten finn du kommandoane for "Sint fugl". Du vil bruke desse til å bygge koden din.'
      9:
        image: notes/hoc1_9.jpg
        text: Til høgre er arbeidsområdet der du skal dra blokker frå verktøykassa for å bygge programmet. Om du vil slette ei blokk, dreg du ho til papirkorga i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: 'Kvar blokk er ein instruksjon. Om du dreg ei "framover"-blokk til arbeidsområdet og trykker "Køyr programmet", flyttar fuglen seg ein plass i labyrinten.'
      11:
        image: notes/hoc1_11.jpg
        text: For å gjere meir enn ei handling, kan du dra mange blokker til arbeidsområdet og sette dei saman. Fuglen vil utføre kommandoane frå toppen og nedover.
      12:
        image: notes/hoc1_12.jpg
        text: 'Om du køyrer eit program og ynskjer å fikse det og prøve på nytt, trykk på knappen "Reset".'
      13:
        image: notes/hoc1_13.jpg
        text: Lat oss ta dei grisane!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, eg er JR! Alle racerbillag treng dataekspertar for å vinne. Dei analyserer data frå bilen for å få han til å gå raskare.
      2:
        image: notes/stage5_2.jpg
        text: Gjennom desse oppgåvene, vil du vere ein kunstnar som teiknar ei linje bak deg der du går.
      3:
        image: notes/stage5_3.jpg
        text: 'Denne blokka seier "flytt fram 100 pikslar." Pikslar er berre veldig små prikkar på skjermen.'
      4:
        image: notes/stage5_4.jpg
        text: 'Denne blokka seier "snu 90 grader mot høgre". Blokka vil snu artisten din det gradetalet som står på blokka.'
      5:
        image: notes/stage5_5.jpg
        text: Klikk på pila på ei av desse blokkene for å endre på kor mykje kunstnaren går framover eller snur seg. Leik deg med det for å bli kjend med desse nye blokkene.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, eg er Paola! I desse oppgåvene er du ein bonde som må få feltet sitt heilt flatt for å byrje å plante avlingar.
      2:
        image: notes/stage9_2.jpg
        text: Du må hjelpe ho med å fjerne alle haugane av skitt og fylle ut alle hola.
      3:
        image: notes/stage9_3.jpg
        text: Dei nye blokkene fjernar 1 skuffe med skitt frå ein haug og fyller ut 1 skuffe med skitt i eit hol.
      4:
        image: notes/stage9_4.jpg
        text: Haugane og hola er av ulike storleikar, så du må fortelje bonden kor mange skuffer ho skal bruke.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei, eg er Katie! Ei av dei mest spennande tinga med datavitskap er at eit dataprogram kan vere interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Kvar gong nokon klikkar eller trykkjer eller skriv på ei datamaskin eller ein telefon, genererer det ei HENDING, og det er kode som avgjer kva som skjer når ei HENDING inntreffer.
      3:
        image: notes/flappy03.jpg
        text: 'Du kan til dømes ha ein HENDINGSHANDSAMAR som seier "ved museklikk, spel ein lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du høyrt om spelet FlakseBird? Ved å bruke hendingshandsamarar, skal vi lære å programmere vår eigen tilpassa versjon av FlakseBird!
      5:
        image: notes/flappy05.jpg
        text: 'Koden du skal skrive inneber å dra og sleppe blokker som representerer kommandoar til datamaskina. Blokkene er ei visualisering, og "under" kvar av blokkene er det skrive inn "verkeleg kode".'
      6:
        image: notes/flappy06.jpg
        text: 'Om du tek ein titt på arbeidsområdet, er nokre grøne blokker fylt ut for deg - desse er "hendingshandsamarar" '
      7:
        image: notes/flappy07.jpg
        text: 'Om du vil ha fuglen til å SLÅ med vengene når du klikkar med musa, kan du gjere det ved å knytte "SLÅ"-blokka til den rette hendingshandsamaren, og no vil fuglen slå med vengene kvar gong du klikkar med musa i spelet.'
      8:
        image: notes/flappy08.jpg
        text: I kvar oppgåve i denne delen vil vi introdusere nye typar hendingar som grøne blokker på arbeidsområdet, og du kan bestemme kva blokker som er dei rette til å svare på desse hendingane.
      9:
        image: notes/flappy09.jpg
        text: 'Når du ser ei rullgardinpil som denne, tyder det at du kan endre innstillingane - som kva lyd skal spelast når flappy treffer bakken.'
      10:
        image: notes/flappy10.jpg
        text: I den siste oppgåva vil du kunne lage ditt eiget spel og dele det med venene dine. Ha det gøy!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, eg er Mark! Lat oss lære om sløyfer. Ved å bruke sløyfer kan du fortelje ei datamaskin at ho skal repetere eit sett av handlingar om att og om att, tusenarar eller til og med milliardar av gongar.
      2:
        image: notes/hoc2_2.jpg
        text: I denne oppgåva ynskjer me å få fuglen til å flytte 5 plassar framover for å komme til grisen.
      3:
        image: notes/hoc2_3.jpg
        text: 'Me kan nytte den nye "gjenta"-blokka for å hjelpe oss.'
      4:
        image: notes/hoc2_4.jpg
        text: 'I staden for å dra ut 5 "framover"-blokker...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Me kan setje "framover"-blokka inne i "gjenta"-blokka og skrive eit nummer i blokka for å fortelje kor mange gonger me vil gjenta.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er viktig: Du kan setje meir enn ein kommando i ei "gjenta"-blokk.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Kos deg med å bruke den nye "gjenta"-blokka!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hei, eg er Chris. Før eg vart med i Miami Heat, gjekk jeg på Georgia Tech for å studere datavitskap. Lat oss prøve den nye blokka vår, "gjenta til"-blokka.'
      2:
        image: notes/hoc3_2.jpg
        text: Kva om me ikkje visste kor langt fuglen måtte flytte for å komme til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: 'Viss me sett ei "framover"-blokk inne blokka "gjenta til", vil fuglen gå framover til han kjem TIL grisen (eller krasjar inn i ein vegg).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er viktig: Nett som før, kan me setje fleire blokker inni "gjenta til"-blokka, og alle vil bli gjentekne.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, eg er  Bill! Lat oss lære eit nytt grunnleggjande konsept: "Viss"-uttrykk. Dette er korleis datamaskiner tek avgjerder.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du nyttar sjølv "Viss"-uttrykk kvar dag. Før du går ut om morgonen, seier du VISS det regner ute, må eg bruke jakka mi.'
      3:
        image: notes/hoc4_3.jpg
        text: Me kan seie at zombien skal sjekke om det er ei bane til venstre, og VISS han finn ei bane til venstre, kan me få han til å snu i den retninga.
      4:
        image: notes/hoc4_4.jpg
        text: 'For å skrive koden for dette, lat oss dra ut "viss"-blokka vår og setje ei "venstre"-blokk inni ho.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Om me sett ei "framover"-blokk over og ei "gjenta"-blokk rundt alt, vil zombien no kvar gong han flyttar seg sjekke om det er ein veg til venstre og i så fall snu dit. Kommandoen "gjenta" er avgjerande for å sjå etter om ein skal snu for kvart steg.'
      6:
        image: notes/hoc4_6.jpg
        text: Viss-setningar er veldig viktige i programmering. Eit av dei første programma eg skreiv, var eit tripp-trapp-tresko-spel der det var ei viss-setning som sa at VISS den andre personen held på å vinne, blokker posisjonen som let den andre personen vinne.
      7:
        image: notes/hoc4_7.jpg
        text: 'Ha det gøy med "viss"-blokka!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hei, eg heiter Saloni. Eg nyttar programmering for å løyse helseproblem. Lat oss lære om "viss-elles"-blokka. Ho ser ut som ei "viss"-blokk, men har ein ekstra del på slutten som seier "elles".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Viss eg set ei "framover"-blokk på plassen der det står "gjere" og ei "snu til venstre"-blokk der det står "ellers", tyder det at zombien vil velje mellom to alternativ. VISS det er ein veg framover, vil han gå dit, og ELLERS (viss det ikkje er ein veg framover) vil han svinge til venstre.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Akkurat som "hvis"-blokka, kan vi sette "hvis ellers"-blokker inni "gjenta"-blokkerer slik at zombien held fra med å flytte og "hvis ellers"-blokka kontrollerer om det er mogeleg å snu.'
      4:
        image: notes/hoc5_4.jpg
        text: No får du vise zombiene kvar dei høyrer heime!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'En "hvis ellers"-setning er ei avgjersle mellom to ting. La oss sjå på korleis vi kan bruke en "hvis ellers"-setninga med vår ven ekornet Scrat.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Denne blokka liknar på "hvis"-blokka, men det er ein ekstra del på botnen som seier "ellers". Dersom eg set ei "framover"-blokk der det står "gjere" og ei "snu venstre"-blokk der det står "elles", betyr det at ekornet Scrat vil gå framover hvis det er ein veg framfor. Hvis det ikkje er ein veg framfor, vil Scrat snu til venstre.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Det er å ta ei avgjerd og gjøre ei av to handlingar basert på denne avgjersla. Og akkurat som "hvis"-blokker, kan du sette "hvis-ellers"-blokker inni "gjenta"-blokker.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Nå la oss no hjelp ekornet Scrat til å få ei eikenøtt!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, eg er Brina, ingeniør hos Instagram. Ein funksjon er særskilte kodelinjer som du ynskjer å nytte om att og om att, så i staden for å skrive den same koden kvar gong, kan du berre bruke ei blokk.
      2:
        image: notes/stage13_2.jpg
        text: Me skal lære korleis ein definerer funksjonar. Blokker der me definerer funksjonar har ei stjerne i hjørnet. Namnet på funksjonen vert skrive på øvste linje.
      3:
        image: notes/stage13_3.jpg
        text: 'Blokkene inne i funksjonen fortel oss kva funksjonen gjer. Så denne funksjonsdefinisjonen er kalla "fyll 5", og består av ei "gjenta"-blokk og ei "fyll"-blokk.'
      4:
        image: notes/stage13_4.jpg
        text: 'Funksjonsdefinisjonen finn du i arbeidsområdet, men bonden vil ikke køyre funksjonen før me dreg ut "fyll 5"-blokka frå funksjoner-kategorien.'
      5:
        image: notes/stage13_5.jpg
        text: Lat oss ha litt FUN med FUNksjonar!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, eg er Makinde! Lat oss lære om "gjenta så lenge"-blokka.'
      2:
        image: notes/stage9_6.jpg
        text: '"Gjenta så lenge"-blokka vil halde fram med å gjere det som er inne i ho SÅ LENGE utsegna på toppen er SANN.'
      3:
        image: notes/stage9_7.jpg
        text: 'Døme: Viss bonden står på ein haug, vil ho harlde fram med å fjerne skuffer med jord SÅ LENGE det er framleis er ein haug under ho.'
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, eg er Trina, og eg jobbar for Pixar. Eg har vore med og laga ei rekkje filmar, inkludert Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Dette er den nye "telje"-sløyfa vår. Ho vil gjere at handlingane skjer om att og om att, og du kan endre handlingane litt kvar gong.'
      3:
        image: notes/stage11_3.jpg
        text: 'I dette dømet seier "telje"-sløyfa "tel frå 50 til 90 med 10 om gongen", og inni sløyfa har me ei "teikn ein firkant"-blokk. Dra "telje"-blokka frå "variablar"-området til "lengde"-plassen.'
      4:
        image: notes/stage11_4.jpg
        text: Dette tyder at kunstnaren vår skal teikne eit kvadrat med sidelengde 50 pikslar. Så legg me til 10 pikslar, og teiknar eit kvadrat med sidelengde 60 piksler. Slik held me fram til sidelengda vert 90 pikslar. Då har me sidelengder på 50, 60, 70, 80 og 90 pikslar.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, eg er Janete, og eg er ingeniør ved Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Kva om me ynskjer å teikne ein haug med trekantar av ulike storleikar?
      3:
        image: notes/stage15_3.jpg
        text: Me kunne skrive all koden for hand, eller me kan bruke ein funksjon med parametrar.
      4:
        image: notes/stage15_4.jpg
        text: 'For å gjere dette, må du klikke på den blå stjerna i "teikn ein trekant"-funksjonsdefinisjonen. Så dreg du "namn på parameter" inn i "parametrar"-blokka til høgre. NB! Ikkje skriv namnet først.'
      5:
        image: notes/stage15_5.jpg
        text: 'Viss du så skriv "lengde" der det står "x" og så trykker "Enter", vil du opprette eit lengde-parameter til funksjonen din.'
      6:
        image: notes/stage15_6.jpg
        text: 'Klikk på stjerna. Så klikkar du på "variablar"-kategorien og dreg "lengde" inn i "framover" blokka til funksjonen. Så drar du bort den gamle nummer-blokken.'
      7:
        image: notes/stage15_7.jpg
        text: 'For å bruke funksjonen med parametrar, kan du klikke på kategorien funksjonar og dra ut "teikn ein trekant med lengde"-funksjonen din.'
      8:
        image: notes/stage15_8.jpg
        text: No kan du bruke matematikk-blokka for å sette inn nye tal, og på den måten kan du teikne trekantar av ulik storleik.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulerer! Med den siste oppgåva du løyste, skreiv du kode som kan fortelje robotar korleis dei finn vegen gjennom enkle labyrintar eller tunnelar uansett lengde. Dette gjeld uansett om det er ein zombie, ein fugl, ein mars-rover eller om det er ein bil som køyrer utan sjåfør.
      2:
        image: notes/hoc6_2.jpg
        text: "Dei grunnleggjande konsepta du brukte, er utgangspunktet for alle programma og app'ane du ser rundt deg. Me har lært om gjentakande sløyfer, gjenta til-setningar, viss-setningar og viss-elles-setninger."
      3:
        image: notes/hoc6_3.jpg
        text: "Om du likte den første kodetimen, kan du gå til code.org for å fortsetje å lære programmering! Når du har fullført 20-timarskurset vårt, meistrar du grunnleggjande programmering. Då kan du lære korleis du skriv kode til telefon-app'ar, robotinstruksjonar, spel - ja, alt mulig!"
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologien endrar alt me gjer, og det speler inga rolle om du er ung eller gammal: Programmering er morosamt og kreativt, og alle kan lære det!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Video-notatar kjem snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, namnet mitt er Lyndsey. Eg er modell og skodespelar og eg skriv mine egen appar. La oss bruke kode til å utforske isens venleik og magi saman med Anna og Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Du skaper snøfnugg og mønster ved å skøyte på isen og lagar eit magisk vinterlandskap som du kan dele med venane dine.
      3:
        image: notes/frozen1_3.jpg
        text: I den neste timen vil du lære grunnleggande programmering. Tradisjonell programmering er vanligvis med tekst, men vi skal bruke Blockly, som bruker visuelle blokker som du kan dra og sleppe for å skrive programm. Også studenter på universitetet lærer grunnleggande programmering på denne måten. Bak blokkene lager du likvevel kode.
      4:
        image: notes/frozen1_4.jpg
        text: Eit program er et sett med instruksjonar som fortel ei datamaskin kva den skal gjere. La oss skrive kode eller eit program, som vil hjelpe Elsa til å lage ei enkel line. Vi vil bruke dette seinare for å lage meir kompliserte mønster.
      5:
        image: notes/frozen1_5.jpg
        text: Skjermen din er delt i tre hovudelar. Til venstre er isflata der du vil køyre programmet. Oppgåvene for kvart nivå er skrive rett under.
      6:
        image: notes/frozen1_6.jpg
        text: Det midterste området er verktykassa, og kvar av disse blokkene er ei handling som Elsa og Anna kan gjere.
      7:
        image: notes/frozen1_7.jpg
        text: 'Det kvite flata til høyre kallast arbeidsområdet, og dette er her vi skal sette saman programmet vårt. For å flytte rundt på isflata, kan du bruke "Flytt fremover"-blokka.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Her, sier "flytt framover"-blokken, "flytt fram 100 piksler." Når vi trykker "Køyr", kva skjer då? Elsa flytter fram en bestemt lengde på skjermen, 100 pikslar faktisk! Piksler er dei minste punkta på dataskjermen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Den andre blokka vi har i denne oppgåven sier "snu til høgre med 90 grader". Og når vi bruker denne "snu til høyre"-blokka, får det Elsa snu en gitt mengde. Du kan prøve ut hvor mye du vil at Elsa skal snu. Vinkelen måles fra retningen foran Elsa. Så dette er ei 90 graders vending. Og dette er ei 120 graders vending.'
      10:
        image: notes/frozen1_10.jpg
        text: Husk at du kan endre talet på pikslar og grader ved å klikke på pilene ved sida av.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Hei, eg er Paola! Datamaskiner er veldig flinke til å gjenta handlingar. Du kan telje til 10, 20 eller 100. Men ei datamaskin kan telje til ein milliard eller billion. Den vil ikkje gå lei og det tek berre nokre sekund. Om det er teljing, eller tegning, eller noko anna - datamaskiner kan gjenta ting hundrevis eller milliarder av gonger.'
      2:
        image: notes/frozen2_2.jpg
        text: 'I programmering kallar vi dette ei løkke. Ei løkke er korleis du gjentek koden igjen og igjen. Målet med den neste oppgåva er å hjelpe Anna med å lage eit kvadrat med "gjenta"-blokka.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Kodeblokkene som du plasserer inne i "gjenta"-blokken, vil bli gjentatt etter kvarandre, så mange gonger du ynskjer.'
      4:
        image: notes/frozen2_4.jpg
        text: 'For å teikne eit kvadrat, kan du bruke "flytt fram" og "snu til høgre"-blokkene 4 gonger. Men det er enklare å be datamaskina "flytt frem" og "snu til høgre 90 grader" ein gong og deretter be den om å gjenta desse to handlingane 4 gonger. For å gjøre det, må du sette "flytt fram" og "snu til høgre" blokkene inne i ei "gjenta"-blokk.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Hugs på at du kan endre tallet i "Gjenta"-blokka vilkårleg, og det vil gjenta det som er inne i blokka så  mange gongar.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei! Eg er Chris Bosh. Eg er profesjonell basketballspilar og eg programmerte på skulen.
      2:
        image: notes/frozen3_2.jpg
        text: Eit av dei viktigste konsepta i programmering er korleis ein kan definere nye kommandoar. Dei fleste programmeringsspråka har berre omkring 100 ord eller kommandoar. Og kunsten og magien ligg verkeleg i å definere dine eigne, nye ord ut frå desse byggeklossane.
      3:
        image: notes/frozen3_3.jpg
        text: Når du har lært ei datamaskin korleis ho skal utføre ei handling ein gong ved bruk av ein sekvensen av kommandoar, så kan du lage ditt eige namn for handlinga selv, slik at det er lett å gjere den på nytt seinare. Når du definerer din eigen kommando og gir den namn blir det kalla det ein funksjon.
      4:
        image: notes/frozen3_4.jpg
        text: Hei! Er jeg Jess. Når du programmerer med blokker, ville du bruke funksjonar dersom det er eit sett med handlingar du vil bruke mange gonger. For eksempel har du skrive kode for å laga eit kvadrat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kan definere dette som ein funksjon kalla "lag kvadrat" '
      6:
        image: notes/frozen3_6.jpg
        text: Nå har du ei ny blokk som du kan bruke fleire gonger for å opprette flere kvadrat.
      7:
        image: notes/frozen3_7.jpg
        text: Mange enkle figurar kan brukast til å lage meir komplekse mønster. I den neste oppgåva vil koden du nyleg skreiv for å lage ein sirkel være tilgjengelig som ein ny funksjon som kan lage sirklar i ulike størrelsar. Kan du bruke den til å hjelpe Elsa med å lage kompliserte og vakre mønster i snøen?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi skal lage spel ved å bruke Spel Lab. Gode spel har ei historie og kvar historie har skodespelarar. Vi skal lære korleis vi får våre skodespelarar, som hekser, romvesen og dyr til å snakke, bevege seg og samhandle med kvarandre. Ved slutten av denne oppgåva kan du bygge eit spel frå grunnen av og dele det med venane dine.
      2:
        image: notes/playlab_intro_2.png
        text: Skjermen din er delt i 3 hovuddelar. Den til venstre er speleflata der spelet ditt vil køyres. Instruksjonane for kvart nivå er skrivne under speleflata.
      3:
        image: notes/playlab_intro_3.png
        text: Det midterste området er verktykassen, og kvar av desse blokkene er ein kodedel. Den kvite flata til høyre blir kalla arbeidsområdet og det er der vi skal bygge opp programmet vårt.
      4:
        image: notes/playlab_intro_4.png
        text: 'For å starte må du koble blokkene dine til den oransje-"når køyrer"-blokka. Du kan knyte fleire blokker saman ved å dra dei til du ser den gule lina og vil dei snappe saman.'
      5:
        image: notes/playlab_intro_5.png
        text: 'I denne første oppgåva er skodespelaren ein pingvin og vi skal få den til å sei "Hallo" ved å dra "sei"-blokka ut, knytte den til å "når køyrer"-blokka og skrive inn "Hallo." Vi kan også få pingvinen til å flytte på seg ved hjelp av bruke blokkene for å flytte til høyre og venstre. Når du har blokkene dine på plass, trykk på Køyr-knappen for å sjå kva du har programmert.'
      6:
        image: notes/playlab_intro_6.png
        text: Set i gong no og når du er ferdig vil du kunne lage ditt eige spel med alle slags skodespelarar som kan samhandle, bli glade eller triste, få poeng, kaste eldkuler eller til og med trylle kvarandre bort. Det er heilt opp til deg og spelet du vil lage.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: No skal vi lære om noko som alle som programmerer spel brukar kvar dag. Dei blir kalla hendingar. Ei hending ber programmet ditt om å lytte etter ting som skjer. Når det skjer, blir ei handlingn utført.
      2:
        image: notes/playlab_events_2.png
        text: Eksempl på hendingar er å vente på eit museklikk, ein piltast eller trykk på skjermen.
      3:
        image: notes/playlab_events_3.png
        text: 'Her skal vi få romboten til å helse på jordbuarane når ein spelar klikker på han. Vi bruker "når skodespalaren blir klikka"-blokken og festar "sei"-blokka til den. Når spelaren klikkar på romboten vil alt som er fseta til denne "når skodespelaren blir klikka"-hendelsesblokka bli utført. Kva skal ditt romvesen sei?'
      4:
        image: notes/playlab_events_4.png
        text: 'Det fins også "når pil"-blokker. Hvis du kobler "flytt"-blokker til desse, kan du begynne å flytte skodespelarar opp, ned, til venstre eller høyre. Steg for steg blir spelet ditt meir interaktiv.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Dette er "gjenta for alltid"-blokka. Alt i denne blokken vil skje for alltid i spelet.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Hvis vi ynskjer at ein skodespelar skal gjere noko fleire gonger uten at spelaren trenger å gjere noko, vil vi sette desse blokkene inne i "gjenta for alltid"-blokka.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: I den neste oppgåva er målet vårt å hjelpe trollmannen med å patruljere grensene av kongeriket, venstre og høyre heile tida. Å lære korleis du kan gjenta kommandoar vil spare deg for massevis av tid seinare når du lagar ditt eiget spel.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Dette er tegnebrikka di. Bruk den riktige for å flytte kunstnaren til der han må gå for å fylle inn dei grå linjene.
      2:
        image: notes/C1_artist_intro_2.png
        text: Dette er hoppebrikker. Når du bruker desse, vil kunstnaren din flytte seg men ikkje tegne, så bruk desse for å hoppe til neste grå linje.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Er ikkje bier superkule? I dette oppgavesettet skal du hjelpe bia å hente nektar frå blomstrane og så fly til bikubane for å lage honning. I denne oppgava må du bruke "hent nektar"- og "lag honning"-brikkene.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Kvar blomst har ulik mengde med nektar: 1, 2, 3 eller meir. Me veit kor mykje nektar som fins i dei raude blomstrane ved å sjå på det vesle talet i hjørnet. Sørg så for å hente all nektaren fra blomsten før du held fram. I tillegg kan kvar bikube berre romme ei bestemt mengde honning: 1, 2, 3 eller meir. Derfor må du sørge for å lage så mykje honning som bikuben kan romme.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: 'Hvis du klarar å få tak i all nektaren og lage all honningen, går du til neste nivå. Hvis ikkje må du prøve oppgava på nytt. "Surr" rundt ei stund og kjenn på korleis det er å vere programmerar!'
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Ei løkke er ei gjentaking av ein aktivitet. Når eg går inn i bikuben for å inspisere, tar eg opp ei ramme og så setter eg den ned att, så gjentar eg den samme handlinga fleire gongar. Løkka går i ring, der handlinga blir gjort fleire gongar.
      2:
        image: notes/C1_bee_loops_2.png
        text: 'På dette brettet ønsker vi at bia skal samle tre nektar fra blomsten. I staden for å bruke tre "hent nektar"-brikker, skal du bruke ei gjenta-brikke for å hente nektar tre gongar. Trykk på "Kjør" og sjå om du klarte det!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Denne leksjonen blir kalla for den store hendelsen. Den handler om korleis ein kan kontrollere programma og faktisk endre måten eit program fungerer på, mens det kjører. Dette gjer du ved å bruke hendelsar, som å trykke på ein knapp eller klikke på ei mus.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: I denne økta vil du bli styrt av ein papir-fjernkontroll. Det er akkurat som eit ekte dataspel.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Ei hending er ei handling som gjer at noko skjer. Det er som når du klikkar på museknappen og ei webside lastas opp. Det er ei hending. Når du tar på skjermen på et nettbrett for å bla nedover, er det og ei hending. Hendingar kan brukast for å la brukaren styre programmet ditt når dei vil.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Nokre hendingar får oss til å reagere. Vi blir svoltne og går til kjøleskapet. Det ringer på døra og vi går for å opne. Slike reaksjonar er akkurat som å trykke på ein knapp, ei hending får fram ein gitt reaksjon.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'I dataspel er det ei handling som heiter "Update". Denne blir utført 30 eller 60 gongar i sekundet. For dataspelprogrammerarar er denne handlinga nesten viktigare enn ei tastetrykkhandling eller ei styrespakrørsle.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Den viktigste hendelsen vi følger med på er "Oppdater". Når dette skjer, sjekker vi joysticken. Så vi sier, "Oj, har noen trykket på knappen siden forrige gang vi sjekket? Ja eller nei?" Uten hendelser kan ikke spilleren flytte på seg eller hoppe, og du vil ikke klare å kontrollere det som skjer. Dataspillet ville ikke kunne bevege noen ting.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Når man lager sandslott vet man at man ikke alltid får det til. Men hvis du holder ut, så så blir det både bedre og artigere. Utholdenhet er det som gjelder. Ikke gi deg, du kommer til å digge det.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Denne økten heter bygge en grunnmur. I denne økten skal vi jobbe med en oppgave som er ment å være veldig vanskelig. Du kommer til å finne ut hvordan man lager en struktur som er minst like høy som en av disse koppene og den kommer til å bli så sterk at den kan bære vekten av en bok.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Noen ganger blir ikke det vi lager slik vi hadde tenkt oss. Noen ganger blir man frustrert og har lyst å gi opp. Kanskje skjer dette ofte. Men hvis vi fortsetter å prøve og gjør så godt vi kan om og om igjen, så får vi det til til slutt.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Utholdenhet handler om å ikke gi seg når man egentlig har lyst til å gi opp. Hvis du har lyst å lage noe nytt og annerledes, så kommer du til å oppleve noen nederlag på veien.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Kunsten med utholdenhet er å fortsette og lære av feil du gjør i stedet for å gi opp fordi du er frustrert. Frustrasjon betyr egentlig bare at det er noe fantastisk som ligger og venter rett rundt hjørnet. Så ikke slutt før du får det til. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hei, mitt navn er Miral Kotb og jeg er skaperen av Iluminate. I mitt arbeid er det en felles ting vi bruker i både dans og programmering. Det er løkker! Løkker er å gjenta en handling om og om igjen.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Når du gjentar noe flere ganger, slik som mine handlinger for å få rockeringen til å fortsette å snurre, utfører jeg en løkke over den handlingen. Det er en løkke. Dette er en løkke. Og dette er en løkke.
      3:
        image: notes/C1_getting_loopy_3.png
        text: I dag skal vi ha en dansefest. Vi skal bruke løkker til å lage en ny dans. Iterasjonen. Vi skal lære om løkker ved å bruke en dans. Du skal lære noen enkle steg og gjenta dem flere ganger for å fullføre dansen.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Her er trinnene du må lære. Klapp hendene dine. Legg hendene bak hodet ditt. Plasser hendene på hoften din. Løft din venstre hånd opp. Løft din høyre hånd opp. Ganske enkelt, ikke sant? Du vil oppdage at du kan forkorte instruksjonene ved å legge noen danse-bevegelser i løkker.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Vi bruker faktisk løkker i dansen vår. Danserne har på seg datamaskiner som er koblet sammen i et nettverk. Jeg kan for eksempel la en lampe tennes og slukkes på seks dansere etter tur. I løkken kan jeg gjenta denne lys-oppvisningen med danserne igjen og igjen. Deretter vil jeg øke hastigheten på lys-oppvisningen for hver gang. Og alt dette gjør jeg med løkker. Så innen informatikk er løkker er viktige fordi vi får færre kodelinjer, og det blir lettere å holde orden på.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Denne oppgaven heter Lykkelige Kart. I dag skal vi hjelpe vår pelskledde venn Flurb med å finne frukten sin.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Få Flurb til å nå frukten din. For å gjøre dette må du finne ut hvilken vei Flurb skal bevege seg, og styre henne med pilene. Hvilken retning skal Flurb gå i for å komme til eplet.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: For å flytte den dit kan du sette en sirkel på retningen den må gå i.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Lag algoritmen gjennom å lime piler ved siden av kartet du prøver å løse. Den andre er lik, men den går nedover.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Det er som å programmere med papir. Og det er hele hemmeligheten!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Å debugge er å finne feil og fikse dem. Det er mange måter å debugge problemer på. Den enkleste måten er å flytte steg for steg inntil du kommer dit hvor det oppstår en feil. Her prøver jeg å sprette baklengs opp på bommen, men faller av hele tiden.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Jeg gjennomgikk alle stegene, og skjønte hvor feilen var. Jeg hadde ikke satt hendene riktig på bommen. Så jeg prøvde å sprette på en annen måte, og fikk det til. Jeg er veldig fornøyd med at jeg debugget turninga mi.
      3:
        image: notes/C1_maze_debugging_3.png
        text: For å lære om debugging, starter vi med noen eksisterende blokker. Du vil snart se at disse blokkene ikke fører deg til målet. Så vi må debugge løsningen og fikse den. Hva gikk galt? Du vil oppdage at vi må bevege oss vestover med en blokk til.
      4:
        image: notes/C1_maze_debugging_4.png
        text: La oss fikse dette ved å legge til en vest blokk, og trykke kjør for å se om det ble riktig. Du fikk det til!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: I denne oppgaven skal du flytte fuglen til grisen. Se på oppgave og finn ut hvilke retninger den må ta.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: 'Du skal dra blokkene fra verktøykassen til og bort arbeidsområdet. Der skal de henge fast under "når kjører" blokken. Når du mener du har den rette løsningen, kan du klikke "Kjør" og se fuglen gå til grisen.'
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Noe datamaskiner er veldig gode til, er å gjenta kommandoer. Vi som er mennesker går fort lei hvis vi må gjøre den samme oppgaven mange, mange ganger på rad. Men en datamaskin kan gjøre det samme millioner eller selv milliarder av ganger uten å gå lei.
      2:
        image: notes/C1_maze_loops_2.png
        text: Hvis jeg for eksempel ønsket å sende en mail for å gratulere alle på Facebook som har fødselsdag i dag, ville det tatt meg over hundre år å sende alle mailene. Men med bare noen linjer kode kan jeg få et dataprogram til å gratulere dem på noen få sekunder.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'For få fuglen til å nå bort til grisen kan du bruke en gjenta-blokk i stedet for å dra tre Nord-blokker til arbeidsområdet. Så dra en gjenta-blokk til arbeidsområdet, og angi 3. Dra deretter en Nord blokk inn i gjenta-blokken og trykk på "Kjør" for å se hva som skjer. Gratulerer, du fikk det til!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Denne oppgaven heter flytt den, flytt den. Sammen skal vi skrive et program som flytter våre venner fra kompassrosen til målet med det smilende ansiktet.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Men ansiktet er opp ned, og bare en person vet hvordan en skal komme dit. La oss sette i gang med programmet.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Et program er en algoritme som har blitt kodet slik at en datamaskin kan utføre den. De fleste av oss tenker på et program som noe brukes av en datamaskin. Programmer er bra til det, men de kan også være nyttige til andre ting. Du kan lage ditt eget spill, eller programmere en robot til å gjøre ting for deg.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          Hei! Jeg heter Jeremiah og er syv år gammel. Jeg elsker å spille på mammas datamaskin, men spør alltid om lov først. "Mamma, kan jeg være på Pc'en? Klart det, gutten min!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Jeg digger mammas PC fordi jeg kan være på internett. Internett er som nabolaget. Du kan besøke kule steder, snakke med famile og venner, og lære mange nye ting.
      3:
        image: notes/C1_going_places_safely_3.png
        text: 'I går besøkte jeg en dyrehage i nabolaget. Der så jeg et zebra-føll. Jeg tok bilde av det, og endret fargen på stripene før jeg satte på en hatt og la det til samlingen min av snåle dyr. Kjempegøy! Senere en gang dro jeg langt av gårde og besøkte Kenya. Det er et land i Afrika. Der bor det mange Zebraer. '
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Noen ganger snakker jeg med folk jeg kjenner på internett, slik som bestemor. Hun bor i en annen landsdel. Hei bestemor! Hun lager kaker som hun sender til meg. "Nam. Skulle ønske jeg kunne lukte gjennom internett!" Jeg kan snakke med andre også, slik som fetteren min. Men jeg snakker bare med folk jeg kjenner.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: Det beste med internett er å kunne spille morsomme spill! Måål! Jeg liker også å tegne og skape nye ting som jeg kan dele med venner. Kult! Noen ganger bruker jeg nettet for å lære nye ting, men jeg holder meg til nettsider som er passe for meg. Wow. Dinosaurer!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internett er både en morsom og viktig del av samfunnet. Men akkurat som du må være bevisst og passe deg litt når du krysser veien, må du være forsiktig på nettet. Her er tre regler du må huske: Regel 1: Snakk og avtal med foreldrene dine om hva du får lov til og hva som passer for deg. Regel 2: Bare gi informasjon om deg selv til folk du kjenner fra før. Regel 3: Hold deg til nettsider som passer for deg, er du i tvil kan du snakke med en voksen du stoler på.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow! Det var gøy!. Nå er det middagstid, og jeg logger av. Jeg gleder meg til å logge på igjen og se nye nettsider.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: I dag skal vi lære om parprogrammering. Parprogrammering betyr at dere jobber som et team. Hvorfor skal to personer dele på en datamaskin? Fordi to hoder tenker bedre enn ett. Når dere parprogrammerer, skal du og en annen sitte ved den samme datamaskinen og jobbe på det samme prosjektet.
      2:
        image: notes/C1_pair_programming_2.png
        text: Når dere parprogrammerer skal en person kjøre og den andre navigere, akkurat som i en bil. Sjåføren er den som bruker tastatur, mus, pekeskjerm eller andre måter å styre datamaskinen på. Den andre personen er navigatør. Navigatøren hjelper sjåføren gjennom å løse problemer og peke på mulige problemer eller feil.
      3:
        image: notes/C1_pair_programming_3.png
        text: God kommunikasjon er viktig for parprogrammering. Ikke bruk kallenavn, vis respekt, og unngå å være en sjefete navigatør. For ingen liker en baksetesjåfør. Dere børe snakke sammen hele tiden. Sjåføren kan forklare hva han eller hun gjør. Og navigatøren skal hjelpe til med å foreslå hva neste steg er.
      4:
        image: notes/C1_pair_programming_4.png
        text: Navigatøren bør tenke på det store bildet mens sjåføren fokuserer på detaljene. Begge rollene er viktige. Parprogrammering handler om å jobbe som et team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Denne oppgavene heter plant et frø, og hjelper oss med å forstå algoritmer. Algoritmer er en serie handlinger i en rekkefølge, som til sammen forklarer hvordan vi skal gjøre ting. Selv hverdagslige hendelser som å spise frokost eller pusse tenner er algoritmer. De er små handlinger i en rekkefølge som samlet får jobben gjort.
      2:
        image: notes/C1_planting_seed_2.png
        text: Datamaskiner kan være veldig smarte, men de kan bare forstå deg hvis du forteller dem eksakt hva du vil steg for steg. Det fine med algoritmer, er at dersom du følger instruksjonene i en rekkefølge, kan du få til noe som du ikke visste hvordan du skulle gjøre fra før. Det er som å følge en matoppskrift.
      3:
        image: notes/C1_planting_seed_3.png
        text: I dag skal vi plante et frø ved å bruke en algoritme. Lag din egen algoritme ved å skjære opp bildene. Velg de bildene som viser instruksjonene for å plante et frø, og legg dem i den riktige rekkefølgen.
      4:
        image: notes/C1_planting_seed_4.png
        text: Nå skal vi se hvordan algoritmen virker. Følg instruksjonene veldig nøye. Ligger de i riktig rekkefølge? Klarte du å plante et frø ved å følge algoritmen? Det er som å programmere med bilder!
      5:
        image: notes/C1_planting_seed_5.png
        text: 'Når vi skal lage sjokolade, er det mange store steg i prosessen, og hvert av de store stegene er satt sammen av mindre steg. Disse kan være forskjellige oppskrifter eller algoritmer i seg selv, avhengig av hvordan vi ønsker at sjokoladen skal smake. Alle stegene er viktige - store som små. Mangler vi ett, kan ikke de andre utføres. Det er kjempeviktig å lage algoritmer som andre kan forstå. Dette er grunnen til at vi skriver ned hvert steg, slik at resultatet blir likt uansett hvem som utfører dem.'
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Nå er det på tide å bli kreativ, og bruke kodeferdigheten din til å fortelle en historie. Historien din vil ha figurer, og du vil kunne få dem til å snakke og påvirke hverandre. Begynn å tenke på hva slags historie du vil fortelle.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'Katten har alltid vært redd for hunden. Hva om katten oppdager at hunden prøver å være snill? "Når kjør" blokken starter alt. "Flytt" blokken vil flytte figuren din, og "si" blokken vil få figuren din til å si det du skriver inn.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Dette er "når figurene kræsjer" blokken du kan sette sammen med de andre blokkene.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Jeg fikk hunden til å komme og så "Hei", men katten ble så redd at den løp sin vei. "Ahh". Om jeg bare fikk en sjanse til, så kunne det ha endt lykkelig. Snipp snapp snute!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Dette er nivået med den stavende bien. Bruke puslespillbitene til å flytte bien. Den vil samle bokstaver og stave mens den beveger seg.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Se om du kan stave ordet vi gir deg i boksen under scenen. Men vær forsiktig! Om du flytter feil får du uønskede bokstaver.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Noe datamaskiner er veldig gode til, er å gjenta kommandoer. Vi som er mennesker går fort lei hvis vi må gjøre den samme oppgaven mange, mange ganger på rad. Men en datamaskin kan gjøre det samme millioner eller selv milliarder av ganger uten å gå lei.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Hvis jeg for eksempel ønsket å sende en mail for å gratulere alle på Facebook som har fødselsdag i dag, ville det tatt meg over hundre år å sende alle mailene. Men med bare noen linjer kode kan jeg få et dataprogram til å gratulere dem på noen få sekunder.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: I dette eksempelet skal du flytte fuglen bort til grisen. Og vi har en gjenta-blokk til rådighet for å for å forenkle oppgaven. Du kunne jo ha brukt fem flytt-blokker etter hverandre for å komme til grisen. Men i stedet kan vi bruke en eneste flytt-blokk og så bare fortelle datamaskinen at den skal gjenta handlingen fem ganger.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: For å få det til, drar du flytt-blokken inn i gjenta-blokken. Og du kan klikke på gjenta-blokken og fortelle den hvor mange steg du vil den den skal ta.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: En annen fin ting er at du kan flytte så mange kommandoer du vil inn i gjenta-blokken. Så i dette eksempelet vil du først gi den beskjed om først å flytte forover, og så svinge til venstre. Fem ganger. Sett i gang!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Du ville ikke en gang få blitt med på kappløpet hvis du ikke hadde med flinke nok IT-ingeniører. Det samles nemlig inn mye data fra bilene, og programmene må skrives på en slik måte at de klarer å utnytte dette for at bilene skal kjøre optimalt.
      2:
        image: notes/C2_artist_intro_2.png
        text: I disse oppgavene er du en kunstner som tegner med en penn. Vi lager en strek som følger kunstneren på lerretet.
      3:
        image: notes/C2_artist_intro_3.png
        text: 'For å flytte rundt på lerretet bruker du flytt forover blokken. Her bruker vi en flytt 100 piksler blokk. Hva skjer når vi trykker "kjør"? Kunstneren flytter forover et bestemt antall piksler, nemlig 100. Pikslene er de små bildepunktene på skjermen.'
      4:
        image: notes/C2_artist_intro_4.png
        text: Den andre blokken vi har i denne oppgaven sier sving til høyre 90 grader. Og når vi bruker den, vil kunstneren dreie i en viss vinkel. Så du kan leke deg litt for å se hvor mye du vil kunstneren skal dreie. Dette er en 90-graders sving.
      5:
        image: notes/C2_artist_intro_5.png
        text: Og dette er en 120-graders sving. Husk at du kan endre disse verdiene ved å klikke på pilene ved siden av tallet for piksler og grader. Kos deg med å tegne med kunstneren!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Dette er betingelsesblokken. Den sier at HVIS det finnes nektar eller honning som er mindre, lik eller større enn et nummer, DA skal man gjøre noe.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Dette er nyttig når vi ikke vet hvor mye nektar eller honning vi skal ta, som vi ser her med dette spørsmåltegnet.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: I dette eksempelet skal vi si; HVIS den lilla blomsten har mer enn 0 nektar, da tar vi nektar. Det vil få bien vår til å fortsette å ta nektar så lenge det er noe igjen å ta. Ta-daaa!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Dette er den binære armbånd-leksjonen. Vi skal kode våre initialer på et armbånd som vi kan ha på oss og vise vennene våre!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: "Binært er en måte å lagre informasjonmed bare to tegn. Noen ganger tenker folk på 1'ere og 0'ere. Men du kan også skrive binært med av og på, opp og ned, inn og ut, eller egentlig alle motsetninger."
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hei! Jeg heter Orion og jeg programmerer roboter her på Play-im. Alt i datamaskiner og roboters hjerne er i grunnen små elektroniske porter. Når porten er åpen går strøm igjennom, og når den er stengt, så gjør den det ikke.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Et eksempel på noe binært på roboten er øynene. Robotens øyne er lysdioder, altså lys som er enten på eller av. Dette er et binært system, som betyr at det enten er det ene eller det andre. Vi kan bruke lysene til å representere binære tall. Hvis vi har flere roboter, kan vi si at den første roboten er enernes plass, den andre roboten er toernes plass, tredje roboten er firernes plass og så videre. Slik representerer man et binærtall. Robotene gjør dette med øynene og regner det ut for deg.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Denne økten heter betingelser med kort. Hver dag tar du avgjørelser basert på hva du ser og hører.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Jeg vil gå til parken, men først må jeg bestemme om jeg skal ta med paraply eller ikke. Så ser jeg ut av vinduet. Hvis det er overskyet, tar jeg med meg paraplyen. Hvis ikke, tar jeg med meg solbriller. Jeg tror jeg heller tar paraplyen. Det jeg ser og hører bestemmer hva jeg tar med til parken.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Betingelser brukes i spill også. I dag skal vi øve oss på å bruke betingelser i et kortspill. I dette spiller bestemmer kortet jeg trekker hva vennene mine skal gjøre. Hvis jeg trekker syv skal alle klappe. Hvis ikke skal alle si "awww". La oss prøve det!'
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I vedder på at du kan lage spill som er enda artigere med betingelser. Prøv det! Betingelser er det som gjør at datamaskiner virker smart. Et dataprogram som har betingelser kan gjøre forskjellige ting ut fra hva brukeren gjør.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Tenk på ditt favorittspill. Hender det at du får flere poeng for når du gjør spesielle ting? Dette er fordi datamaskinen bruker betingelser. Betingelser er måten datamaskinen tar avgjørelser. Hva med at hvis du treffer målet får du ti poeng. Hvis ikke mister du tre. Når du vet hvordan betingelser fungerer kan du lage all slags spennende spill.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Her har vi allerede noen blokker på arbeidsplassen vår. Men noe er galt.
      2:
        image: notes/C2_artist_debugging_2.png
        text: La oss feilsøke denne koden ved å bremse ned farten og ser hvordan koden går trinnvis gjennom hver blokk.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Å, der er problemet! Kattens værhår er 75 piksler lange, ikke 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Har du noen gang hørt om å feilsøke i et program? Det er måten du finner ut hva som ikke fungerer. Når du feilsøker koden, kan du finne og fjerne feil.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Her har vi allerede fått noen blokker. Vi skal bruke steg-knappen for å gå gjennom blokkene steg for steg for å se om dette er riktig løsning, eller hvor vi trenger å gjøre endringer.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Ser ut som det er et problem! Vi trenger én ekstra gå fremover-blokk. Steg-knappen hjelper oss å feilsøke problemet ved å vise hvor feilen er slik at vi kan fikse den.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: 'Du har hatten på hodet, og dingsene dine forteller deg hva du skal gjøre, hva du skal mene om dyrehagen, og hvem du skal hilse på! Bruk hodet når du er på nett - hold for deg selv det du tenker på, lær å være trygg, ta vare på privatlivet. Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, stopp og tenk på nett!'
      2:
        image: notes/C2_digital_footprint_2.png
        text: Bruk hjertet for å vokse deg sterk, og for å få en sunn glød, og for å få en kjæreste, fortell noen at du liker dem! Bruk hjertet når du er på nett, kjenn etter hva som er greit og snilt, og vis vennene dine respekt, vær hyggelig på internett. Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, stopp og tenk på nett!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Bruk armene for å klemme kjæledyret dit, for å unngå at klærne dine blir våte, for for å ta på favorittermene dine som lar deg fly og late som. Bruk armene når du er på nett, for å ta pauser, balansere tiden og legge fra deg dataen og finne et tre å klatre i. Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, stopp og tenk på nett!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Bruk magen for å lagre maten, og lytt til dens murrende humør, for å ta et mageplask og kjenne boblene i brusen. Bruk magen når du er på nett, for å se etter bestemte tegn, og la den vise vei og fortelle når ting ikke er greit. Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, ta en pause og tenk på nett!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Så tenk med hode, føl med hjertet, balanser med armene, lytt til magen, på nett. Bruk beina til å løpe og sparke, og hoppe og sprette på en hoppstokk, for å danse rundt i nabolaget, for å trippe rundt i stinkende sokker. Bruk beina når du er på nett, for å stå opp imot troll som går over streken, og stå der rett i ryggen, og vær snill mot både store og små skapninger.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, stopp og tenk på nett! Så tenk med hodet, og føl med hjertet, balanser med armene, lytt til magen, stå rett med beina. Fra hodet ned til tærne, stopp og tenk deg om. Fra føttene opp til nesa, stopp og tenk på nett!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Hver gang du går online legger du igjen et fotavtrykk som kan søkes fram, kopieres, deles, spres og som er permanent. Hva slags digitalt fotavtrykk legger du igjen? Hva slags digitalt fotavtrykk ønsker du å legge igjen?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: 'Denne leksjonen kalles "rutepapirprogrammering", og det handler om algoritmer. I dag skal vi lære hvordan man skriver programmer sm viser hverandre hvordan man gjenskaper enkle svart-hvitt-bilder, bare ved å bruke håndtegnede piler.'
      2:
        image: notes/C2_graph_paper_2.png
        text: En algoritme er en liste med instruksjoner for å gjennomføre en oppgave. Vi kommer til å følge dette settet med instruksjoner for å lage bollen. Algoritmer er skikkelig nyttige når du trenger å vise noen andre hvordan de skal gjøre noe.
      3:
        image: notes/C2_graph_paper_3.png
        text: Hvis du skriver en algoritme for en datamaskin må du bryte det ned i bittesmå skritt. Så gjør ferdig denne raden og gå til den neste, så den neste, og så er du ferdig.
      4:
        image: notes/C2_graph_paper_4.png
        text: Jeg bruker algoritmer i jobben min. Hvis jeg skriver ned alle skrittene kan jeg gjenskape den samme tingen på nytt, eller jeg kan lære noen andre å gjøre det. Legg glasset i ovnen, smelt det sammen, følg resten av instruksjonene for å lage bollen. Algoritmer gir deg et kart for å gjøre noe.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Nå skal vi bruke gjentablokken for å hjelpe oss med å redusere antall trinn vi trenger å programmere. Vi har allerede noen blokker klare, men de er bare der for å hjelpe oss i gang.
      2:
        image: notes/C2_artist_loops_2.png
        text: 'For å kunne gjenta handlingen fire ganger og dermed tegne hele kvadratet, kan vi dra ut en gjentablokk og putte en "gå fremover" og en "snu mot høyre" inne i den. Når vi trykker "kjør", vil kunstneren gjenta de skrittene fire ganger og fullføre kvadratet.'
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: En løkke er en repeterende handling. Jeg åpner en bikube for å inspisere den, jeg ser på rammen og så setter jeg den tilbake. Dette gjør jeg flere ganger. Det går i løkke, gjentar den samme handlingen flere ganger.
      2:
        image: notes/C2_bee_loops_2.png
        text: Dette er en gjenta blokk. Det du putter inne i den vil repeteres det antall ganger som du ber den om. For eksempel, på dette nivået, i stedet for å dra ut gå fremover og få nektar tre ganger, kan vi hente dem en gang hver og repetere handlingene tre ganger. Da ble det lett!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Vanligvis bruker vi tekst når vi programmerer, men nå skal vi bruke Blockly, hvor du drar og slipper blokker for å skrive et program. Under overflaten lager du fremdeles koder. Først skal vi bygge en kode for å lage et program som vil hjelpe Angry Bird med å gå gjennom labyrinten og komme fram til grisene som har stjålet eggene.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly er delt i tre hoveddeler. Til venstre er labyrinten hvor programmet vil kjøre. Instruksjonene for hvert nivå står under labyrinten. På midten er verktøykassen. Hver av disse blokkene er kommandoer som fuglen kan forstå. Det hvite feltet til høyre kalles arbeidsområdet, og det er her vi skal bygge programmet vårt.
      3:
        image: notes/C2_maze_intro_3.png
        text: 'Hva skjer hvis jeg drar "gå fremover"-blokken til arbeidsområdet og trykker "kjør"? Fuglen beveger seg en boks fremover i koordinatsystemet. Hva hvis jeg vil at fuglen skal gjøre noe annet etterpå? Da legger jeg til en blokk til i programmet vårt.'
      4:
        image: notes/C2_maze_intro_4.png
        text: 'Jeg skal velge en "snu mot høyre"-blokk og jeg drar den under "gå fremover"-blokken, til det dukker opp en gul pil. Da slipper jeg den og de to blokkene vil feste seg sammen. Når jeg trykker på "Kjør" igjen, vil fuglen gjøre kommandoene som er stablet i arbeidsområdet fra toppen og nedover.'
      5:
        image: notes/C2_maze_intro_5.png
        text: 'Hvis du vil slette en blokk, kan du dra den vekk fra stablen og dra den til søppelkassen. Etter at du trykker "kjør", kan du alltid velge "nullstill" for å få fuglen tilbake til start. La oss fange grisene!'
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Denne leksjonen kalles virkelige-liv-algoritmer. Algoritmer beskriver ting som folk gjør hver dag. Kakeoppskrifter og instruksjoner for hvordan man bygger en fuglekasse er algoritmer fra hverdagen.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: I dag skal vi lage og teste en algoritme for et papirfly. Men først må vi dele opp dette store prosjektet i mindre steg som er lett å følge. For å lage et papirfly må vi bestemme hvilke steg som må gjøres og i hvilken rekkefølge vi skal gjøre dem.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Det første du skal gjøre for å lage algoritmen er å klippe bildene fra hverandre. Deretter skal du velge 6 bilder som viser stegene som må gjøres for å lage et papirfly og plassere bildene i riktig rekkefølge. Etter at alt er på plass, skal du bytte algoritmer med et annet studentteam, for å teste om hverandres algoritmer virker. En godt utformet algoritme er superviktig for å lage et best mulig papirfly.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Når vi skal lage sjokolade er det mange store skritt i prosessen. Og hvert av disse store skrittene består av flere små skritt. Og det er ulike oppskrifter, eller algoritmer, avhengig av hvordan vi vil at sjokoladen skal smak. Hvert skritt er viktig, også de små. Så hvis et skritt mangler kan ikke de andre gjøres ferdige. Å lage algoritmer som andre kan forstå er veldig viktig. Det er derfor hvert skritt må skrives ned, så resultatet blir det sammen uansett hvem som gjør det.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hittil har du laga ein animasjon eller ei historie som gjer akkurat det samme kvar gong du køyrer den. Nå kan du lage eit interaktivt spel som du faktisk kan spele.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Her er "når pil"-blokka og "flytt skodespelar"-blokka. Du kan sette desse blokkene saman for å flytte figurane rundt med piltastane.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: I dag skal vi gjøre stafettprogrammering. Det dreier seg om programmering under press, og å debugge feilene som noen ganger kommer når du jobber veldig fort eller i lag. Vi skal bruke rutepapirprogrammering for å simulere koding, og bruke en stafettkonkurranse for å simulere å ha en frist.
      2:
        image: notes/C2_relay_programming_2.png
        text: I stafettprogrammering vil lag konkurrere om å gjøre ferdig et rutepapirprogram. Du må sjekke arbeidet til lagkompisen din, eller debugge det, rette det hvis det er en feil, legge til pilen din og løpe tilbake og veksle med lagkameraten din.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmerere bruker mye debugging for å finne og rette problemer i algoritmene og koden sin. Det er mange måter å debugge på. En av de enkleste er å gå trinnvis gjennom programmet til du finner ut hvor noe går galt, og så rette det.
      4:
        image: notes/C2_relay_programming_4.png
        text: Her forsøker jeg å gjøre en flikkflakk, men jeg faller hele tiden ned. Jeg går gjennom hver del, skritt for skritt, og innser hvor feilen min var. Treneren viste meg at jeg ikke satte hendene mine riktig på bommen. Så jeg prøvde enda en flikkflakk på bommen med den nye håndposisjonen min, og jeg klarte det! Jeg var virkelig glad jeg debugget flikkflakken min. Vi skjønte det! Debugging er å finne og fikse problemer. Bra, godt jobbet!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: En ting datamaskiner er skikkelig gode til er å gjenta kommandoer. Siden du er et menneske ville du kjedet deg veldig hvis du måtte gjøre den samme tingen mange ganger på rad. Men en datamaskin kan gjøre den samme tingen millioner eller til og med milliarder ganger, uten å kjede seg, og kan gjøre det ordentlig bra.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Så hvis jeg for eksempel ønsket å gratulere alle på Facebook med bursdagen ved å sende dem en epost ville det tatt med mer enn hundre år å faktisk skrive alle disse epostene til alle sammen. Men bare med noen få linjer kode kan jeg la et datasystem sende en epost til alle på Facebook for å gratulere dem med bursdagen. Så det er hva løkker er, og grunnen til at de er verdifulle, og noe datamaskiner er veldig gode til.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: 'I dette eksemplet er målet ditt å flytte fuglen for å få tak i grisen. Nå kan vi bruke "gjenta"-blokken for å kunne gjøre dette på en enkel måte. Du kan enten gjøre dette ved å gi datamaskinen en "flytt framover"-kommando fem ganger for å hver gang flytte fuglen et steg mot grisen.'
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Eller du kan bare be datamaskinen om å "flytte framover" en gang, og så be den "gjenta" det 5 ganger, og det vil gjøre samme ting. Så for å gjøre dette drar du "flytt framover"-kommandoen inn i "gjenta"-blokken. Og du klikke på blokken og angi hvor mange ganger du ønsker å kjøre blokken for å si hvor mange skritt du vil at den skal ta framover.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'En annen ting: Du kan putte så mange kommandoer du vil inni "gjenta-blokken". Så i dette eksempelet ber du den om å flytte framover og snu mot venstre, som den vil gjøre fem ganger. Lykke til og ha det gøy!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Noe av det beste med dataprogrammering er at så snart du har lært en datamaskin hvordan den utfører en handling, kan du be den gjenta funksjonen. Du gir funksjonen et navn og så kaller du på den. Det blir som å lære seg nye ord.
      2:
        image: notes/C3_artist_functions_2.png
        text: I programmet vi bygget lærte vi å tegne et kvadrat ved å flytte og snu fire ganger. Vi kan ta den funksjonen og gi den et navn, tegne en firkant, sånn at uansett når vi ønsker å gjøre det, sier vi rett og slett tegn en firkant. Programmet vil gå tilbake og vekke den funksjonen, den koden. Programmet vil gjøre det for oss. Vi har lagt til det konseptet i programmeringsspråket.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Du ville ikke en gang få blitt med på kappløpet hvis du ikke hadde med flinke nok IT-ingeniører. Det samles nemlig inn mye data fra bilene, og programmene må skrives på en slik måte at de klarer å utnytte dette for at bilene skal kjøre optimalt.
      2:
        image: notes/C3_artist_intro_2.png
        text: I disse oppgavene er du en kunstner som tegner med en penn. Vi lager en strek som følger kunstneren på lerretet.
      3:
        image: notes/C3_artist_intro_3.png
        text: 'For å flytte rundt på lerretet bruker du flytt forover blokken. Her bruker vi en flytt 100 piksler blokk. Hva skjer når vi trykker "kjør"? Kunstneren flytter forover et bestemt antall piksler, nemlig 100. Pikslene er de små bildepunktene på skjermen.'
      4:
        image: notes/C3_artist_intro_4.png
        text: Den andre blokken vi har i denne oppgaven sier sving til høyre 90 grader. Og når vi bruker den, vil kunstneren dreie i en viss vinkel. Så du kan leke deg litt for å se hvor mye du vil kunstneren skal dreie. Dette er en 90-graders sving.
      5:
        image: notes/C3_artist_intro_5.png
        text: Og dette er en 120-graders sving. Husk at du kan endre disse verdiene ved å klikke på pilene ved siden av tallet for piksler og grader. Kos deg med å tegne med kunstneren!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: 'Når du setter en løkke inni en annen løkke, kaller vi det en løkke i løkke. For eksempel, her er koden for å tegne en trekant med sider som er 100 pixler lange. Vi bruker gjenta-ganger-blokken og setter den til tre - en for hver side av trekanten.'
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Men vi vil tegne seks trekanter. For å gjøre det, må vi ta løkken og plassere den inni en annen gjenta-ganger-blokk. Ganske kult!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Dette er betingelsesblokken. Den sier at HVIS det finnes nektar eller honning som er mindre, lik eller større enn et nummer, DA skal man gjøre noe.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Dette er nyttig når vi ikke vet hvor mye nektar eller honning vi skal ta, som vi ser her med dette spørsmåltegnet.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: I dette eksempelet skal vi si; HVIS den lilla blomsten har mer enn 0 nektar, da tar vi nektar. Det vil få bien vår til å fortsette å ta nektar så lenge det er noe igjen å ta. Ta-daaa!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Har du noen gang hørt om å feilsøke i et program? Det er måten du finner ut hva som ikke fungerer. Når du feilsøker koden, kan du finne og fjerne feil.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Her har vi allerede fått noen blokker. Vi skal bruke steg-knappen for å gå gjennom blokkene steg for steg for å se om dette er riktig løsning, eller hvor vi trenger å gjøre endringer.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Ser ut som det er et problem! Vi trenger én ekstra gå fremover-blokk. Steg-knappen hjelper oss å feilsøke problemet ved å vise hvor feilen er slik at vi kan fikse den.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: En av de viktigste konseptene i datavitenskap er hvordan man definerer nye kommandoer, hvordan legge til dine egne ord i et datamaskinspråk. De fleste språk har bare rundt hundre ord eller kommandoer. Kunsten og magien ligger i å definere dine egne nye ord ut fra disse byggesteinene.
      2:
        image: notes/C3_bee_functions_2.png
        text: Dette gjør vi hele tiden i idrett. I basketball for eksempel, starter du med å lære hvordan du dribler, skyter og håndterer baller som spretter tilbake. Så snart du har lært de grunnleggende trekkene, kan du lære nye og sette sammen disse byggesteinene. Deretter kan du gå over til mer kompliserte spill. Når du har lært det spillet og gitt det et navn, vet alle på teamet hvordan det skal gjøres.
      3:
        image: notes/C3_bee_functions_3.png
        text: På samme måte blir det med en datamaskin. Så snart den har lært hvordan den skal utføre en handling ved å bruke en rekkefølge av kommandoer, kan du finne på et navn for den handlingen sånn at det blir enklere å repetere den senere. Når du definerer din egen kommando og gir den et navn, kalles det en funksjon. Nå skal vi bruke funksjoner for å hjelpe bien.
      4:
        image: notes/C3_bee_functions_4.png
        text: I dette eksemplet kalles funksjonen få 2 nektar, denne grønne blokken her. Vi vet hva få 2 nektar gjør ved å se på denne grå boksen som er funksjonensdefinisjonen. Hvis vi ser inni den, ser vi at få 2 nektar får nektar og deretter får nektar igjen. Se alltid på det som er i den grå boksen, slik at du vet hva disse grønne funksjonsblokkene kan gjøre.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Nå skal vi bruke løkker i løkker med bien. Vi har fått litt kode å starte med. Den ber bien om å flytte framover og hente nektar tre ganger, og deretter snu seg mot høyre. La oss ta hele kodestykket og legge det inni en annen gjenta-blokk, og få den til å gjenta det tre ganger. Ferdig!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Nå skal du lage ditt helt eget sprettespill som du kan dele med vennene dine! Kult, ikke sant!
      2:
        image: notes/C3_bounce_2.png
        text: For å komme i gang må vi koble styringen av rekkerten til piltastene på tastaturet.
      3:
        image: notes/C3_bounce_3.png
        text: 'Dette gjør vi ved å koble "når pil venstre"-blokken til "flytt venstre"-blokken, og "når pil høyre"-blokken til "flytt høyre"-blokken. Prøv det, så er du i gang med å programmere ditt eget sprettespill så fort som bare det!'
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Denne leksjonen handler om bergningsorientert tenkning. Noen ganger er det vanskelig å lære et nytt spill, ikke sant? Først virker det veldig forvirrende, og hvis du ikke har noen til å lære deg reglene, må klare å forstå dem av deg selv.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Den gode nyheten er at du kan bli bedre til å tenke ut ting på egen hånd når du kan noen få tenketriks. Disse triksene er en unik måte å finne og løse problemer på. I denne leksjonen vil du lære fire slike triks, og øve på dem sammen med vennene dine for å tenke ut reglene til et spill.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Når du bryter ned et stort problem i mindre biter, bruker du hjernen til å dele opp det store problemet. Så snart vi har delt opp det store problemet i flere mindre problemer, kan vi gå videre til det neste trikset, som kalles mønstergjenkjenning.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Det er når vi ser etter likheter mellom ting. Når jeg finner ting som er like, kan jeg tenke ut hvilke ting som er forskjellige. Når jeg fjerner disse forskjellene, kalles det abstraksjon.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Etter at jeg har tenkt ut stegene for å løse et problem, kan jeg sette disse stegene i en bestemt rekkefølge kalt en algoritme. Sånn kan hvem som helst bruke mine retningslinjer for å løse det problemet. Vi skal bruke disse fire stegene for å tenke ut hvordan man kan spille spillet uten noen regler. Ved slutten av spillet, vil du kunne spille noe som ser ut som dette!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Denne leksjonen kalles crowdsoucing. I denne leksjonen skal vi bruke en kortstokk for å lære om hvor mye enklere ting kan gjøres i grupper i stedet for å gjøre dem helt alene. Så få med deg noen venner og gjør noe fantastisk. Crowdsourcing betyr å få hjelp fra en stor gruppe mennesker for å fullføre noe raskere.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: I datavitenskap bruker vi crowdsourcing hele tiden. Tusenvis av amatører og profesjonelle kobler sammen datamaskinene sine for å søke gjennom milliarder av opplysninger. Man kan lete etter ting som det neste Mersenne-primtallet, eller til og med mulig kommunikasjon fra verdensrommet.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Når du ser en film, består hvert sekund av filmen av 24 enkeltbilder, som vi kaller rammer. Så hver eneste av disse bildene må opprettes og gjengis og settes sammen. Alle på mitt team er programvareutviklere. Vi samarbeider om å lage programmer som faktisk lager et bilde, det bildet du til slutt vil se på skjermen. Det er et verktøy som kunstnere og andre utviklere kan bruke i sitt arbeid og sine prosesser for å kunne skape de bildene de ønsker på skjermen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: 'I Oppdrag Nemo for eksempel, når Crush og Squirt og alle vennene deres flyr gjennom havstrømmen i Øst-Australia. Du ser bilder av vann som strømmer forbi, du ser fargene på ryggen til skilpadden, du ser siden av fiskene. Alt dette er generert av matte- og dataprogrammer som vi skriver, som vi deretter gir til kunsteren. De tar programmet for å lage det endelige bildet, og justerer det så det blir pent og morsomt.'
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Denne leksjonen kalles terningracet. Nesten alle liker å spille dataspill. Har du noen gang tenkt over hvordan dataprogrammer ordner stegene i et spill inn i et program? Det første steget i å lage dataspill og å løse andre problemer krever tenking og planlegging.
      2:
        image: notes/C3_dice_race_2.png
        text: Tenkesteget i problemløsing produserer en algoritme, som er en steg-for-steg-plan for å løse et problem, eller fullføre en oppgave. I denne leksjonen skal du lage en algoritme for et terningracespill. Deretter skal du be vennene dine om å prøve ut planen din for å se om de kan følge stegene i spillet. Etter at programmereren er sikker på at stegene er korrekte, er tiden inne for å oversette algoritmen til et program med et språk som datamaskinen kan forstå.
      3:
        image: notes/C3_dice_race_3.png
        text: Nesten alt vi gjør hver dag krever en algoritme, en liste med steg du kan følge for å fullføre en oppgave. For eksempel å gjøre seg klar for skolen, planlegge en morsom dag med vennene sine, eller ordne en matbit. For å fullføre disse oppgavene, trenger du å bryte den ned i mindre steg, og noen ganger må stegene være i en bestemt rekkefølge.
      4:
        image: notes/C3_dice_race_4.png
        text: La oss ta det å smøre en brødskive. Det spiller ingen rolle hvilken ingrediens du henter fra skapet først. Men du kan ikke smøre på peanøttsmør før du har åpnet glasset. Datamaskiner trenger algoritmer og programmer for å vise dem hvordan de skal utføre selv de enkleste ting, som vi kan gjøre uten å tenke oss om.
      5:
        image: notes/C3_dice_race_5.png
        text: En algoritme er tenkningen bak hva som må skje, mens programmet er den faktiske instruksjonen som gis til datamaskinen for å få det til å skje. En algoritme må oversettes til et program før en datamaskin kan kjøre den. Å bryte ned en oppgave i steg kalt en algoritme er noen ganger vanskelig. Men som enhver ny ferdighet, blir det lettere og lettere jo mer du øver.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: '"Så lenge"-løkker er ganske likt det du gjør i hverdagen. Tenk deg at du vasker bilen din, du skrubber og skrubber inntil den blir ren. Så lenge den ikke er ren, må du fortsette å skrubbe. Du vurderer dette hele tiden.'
      2:
        image: notes/C3_farmer_while_2.png
        text: 'Vi har en ny blokk å hjelpe bonden med. Den kalles "så lenge"-blokk. Det er egentlig ganske enkelt. Så lenge påstanden øverst er sann, gjør noe. For eksempel, så lenge det finnes en haug, flytt litt høy. Kom igjen og prøv å hjelpe bonden.'
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Denne leksjonen er funksjonelle solfangere. Du skal lage disse fine solfangerne ved hjelp av funksjoner. Det tar flere steg å lage en slik solfanger. Noen av stegene må du gjenta mange ganger.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Det første steget i å forenkle prosessen med å lage en solfanger er å tenke ut hva vi må gjenta om og om igjen. Vi kan gruppere disse stegene inn i hva vi kaller en funksjon.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Men det må mer til for å lage en flott solfanger enn å følge nøyaktige steg. Noen ganger må vi være kreative og endre fargen på perlene som brukes. Vi kan gjøre hver solfanger unik hvis vi bruker forskjellige farger på perlene.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Du kan gi solfangeren et eget særpreg når du lærer å tenke på perlene som variabler. En variabel betyr en plassholder for informasjon som kan endres. Ha det gøy med å lage flotte solfangere ved hjelp av funksjoner og variabler!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Denne leksjonen handler om internett. Internett er et veldig travelt sted, på samme måte som denne trafikkerte veien. Meldinger raser bortover veien for å komme til bestemmelsesstedet, akkurat som biler. Meldinger beveger seg veldig raskt gjennom internett.
      2:
        image: notes/C3_internet_2.png
        text: Å spille ut hvordan internett fungerer vil hjelpe deg til å forstå hva som skjer hvordan du bruker nettet. Du vil lære hvordan meldinger kommer seg fra datamaskinen din til et favorittnettsted, eller fra en venn til en e-postkasse. Akkurat som det er lettere å navigere i tett trafikk når du er kjent på veien og kan lese skiltene, er det ikke så vanskelig å reise på internett når du vet hva som foregår i kulissene.
      3:
        image: notes/C3_internet_3.png
        text: Å sende meldinger på internett er som å sende meldinger i posten, men med noen forskjeller. Jeg er her på Google.com. IP-adressen til dette nettstedet er dette nummeret. Du kan tenke på en IP-adresse som avsenderadressen i posten. Forestill deg at jeg ønsker å sende en melding i posten til noen på kontoret der nede. Ser du URL-en og IP-adressen på døren? Jeg har skrevet denne meldingen og trykket på send.
      4:
        image: notes/C3_internet_4.png
        text: I motsetning til posten, er det første som skjer at internett deler opp meldingen i mindre deler så den blir lettere å sende. Disse små delene kalles pakker. Hver pakke av meldingen leveres til bestemmelsesstedet en av gangen. Disse pakkene settes sammen igjen i riktig rekkefølge sånn at mottakeren kan lese den riktige meldingen. Selvfølgelig er det mye mer å lære om hvordan internett fungerer, men dette er en bra start. Du er på vei til å bli en erfaren internettbruker! Husk å fortelle familie og venner hva du har lært!
      5:
        image: notes/C3_internet_5.png
        text: 'Jeg heter Amanda Camp og jeg er dataingeniør hos Google. Jeg jobber i et team som arbeider med backend-serveren som lagrer profiler og kontakter. I jobben min tenker vi mye på hvordan kontakter kan sendes til andre enheter, som til telefonen din. De fleste av oss har mange kontaktpersoner, la oss si at du har 1000 kontakter. Vi vil ikke sende alle disse kontaktene på en gang til telefonen din, fordi det vil bli en for stor melding. På samme måte deler internett opp store meldinger i pakker, og vi bruker et konsept kalt "paging", hvor vi bare kan sende 100 kontakter i gangen til telefonen din. Deretter lar vi telefonen svare oss og be om de neste 100.'
      6:
        image: notes/C3_internet_6.png
        text: Det mest spennende med programvare er det faktum at den kan påvirke hele verden. Jeg lærte meg programmering da jeg var rundt nitten år. Jeg tror jeg var student på andre året. Det første programmet jeg kan huske at jeg skrev er noe som konverterte Celsius til Fahrenheit. Jeg liker programmering fordi jeg liker å hjelpe folk. Jeg kan skrive programmer på Google som hjelper mennesker over hele verden, og det er ufattelig utfordrende og spennende.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Folk tar beslutninger hver dag. Før du går utendørs for eksempel, har du en hvis-setning som sier at om det regner, så trenger jeg jakken min. Datamaskiner er forbløffende når du velger slike setninger som de kan utføre både pålitelig og med en utrolig hastighet. Et dataprogram er egentlig litt matte og noen hvis-setninger hvor beslutninger blir tatt.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: 'Hvis-blokken hjelper zombien med å ta en beslutning. Den sjekker noe. For eksempel, la oss bruke blokken som sier "hvis sti til venstre", og sette en "snu til venstre"-kommando inni den. Vi ber zombien om å sjekke omgivelsene, se om det er en sti til venstre, og hvis det er det skal den snu seg.'
      3:
        image: notes/C3_maze_conditionals_3.png
        text: 'Så bruker vi "gå fremover"-blokken inni "gjenta til du når den" for å fortsette å bevege seg fremover så lenge den vil gå rett frem. Så når det er en sving, vil hvis-blokken be den svinge til venstre. Du kan se at hvis vi gjør det, hvis vi snur til venstre og ellers flytter fremover, vil vi nå målet.'
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Det er et eksempel på bruk av en hvis-setning som er et virkelig grunnleggende konsept i dataprogrammering. Noe av det første jeg lærte var å skrive et program som spilte bondesjakk. Jeg hadde hvis-setninger som sa, ok, hvis den andre personen holder på å vinne, må du blokkere det stedet. Ha det gøy mens du lærer om hvis-setninger, det er et nøkkelkonsept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: 'I dette eksemplet er målet ditt å få zombien til å nå solsikken. Vi kan enhten bruke fem "gå fremover"-blokker, eller vi kan be datamaskinen om å gå framover og gjenta fem ganger ved å bruke en gjenta-blokk.'
      2:
        image: notes/C3_maze_level_4_2.png
        text: 'Dette sparer tid og gjør ting mye enklere. For å bruke den, setter du bare "gå fremover"-blokken inni gjenta-blokken. Trykk på kjør og zombien vil gå fremover fem ganger til den smakfulle solsikken.'
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Hittil har du laga ein animasjon eller ei historie som gjer akkurat det samme kvar gong du køyrer den. Nå kan du lage eit interaktivt spel som du faktisk kan spele.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Her er "når pil"-blokka og "flytt skodespelar"-blokka. Du kan sette desse blokkene saman for å flytte figurane rundt med piltastane.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Dette er en låtskriverleksjon. Musikk er på mange måter som et dataprogram. De skrevne notene og ordene forteller sangeren nøyaktig hva som skal gjøres. Noen deler av musikken brukes om og om igjen.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: 'We kaller dette refrenget. I et dataprogram, kalles de delene av programmet som brukes om og om igjen for funksjoner. Når du leser sangtekster og det står "refreng", synger du da ordet refreng? Nei, du ser opp på toppen av siden for å finne de ordene som utgjør refrenget.'
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: 'I denne leksjonen vil du lære en rar liten sang som heter "little bunny foo foo". Sangen har et refreng som du vil synge flere ganger om og om igjen. En funksjon er et stykke kode som du kan kalle på og bruke om og om igjen. Det gjør programmering lettere og mer effektivt at du ikke trenger å skrive alle stegene i funksjonen på nytt flere ganger. Du trenger bare å skrive den en gang!'
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Dette er en vilkårsblokk. Den vil fortelle om du har kommet til blomsten eller til vokskaken, og at du må gjøre noe. Denne er nyttig når vi ikke vet hvor mye honning eller nektar vi skal hente, som vi ser her ved dette spørsmålstegnet.
      2:
        image: notes/C4_bee_conditional_2.png
        text: I dette eksempelet kommer vi til å si at hvis det er en blomst, hent all nektaren. Og så bruker vi en annen til å si hvis det er en vokskake, lag honning. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Vi har en ny blokk som kalles hvis/ellers-blokken. Det er en vilkårssetning akkurat som hvis-blokken du brukte i puslespillet tidligere. Men nå er det en ny del nederst som sier ellers. Hvis/ellers-blokken lar bien ta velge mellom to sett av handlinger. Hvis bien er ved en blomst, vil bien gjøre de handlingene som du setter inn i den første delen hvor det står gjør. Hvis bien ikke er ved en blomst, vil bien gjøre de handlingene som du setter inn på plassen der det står ellers.
      2:
        image: notes/C4_conditionals_2.png
        text: Hvis-setninger er måten datamaskiner tar beslutninger på. Mennesker setter opp betingelser for datamaskinen som sier at hvis datamaskinen stilles overfor visse situasjoner, gjør en ting. Ellers, i alle andre situasjoner, gjør en annen ting. Toppen av hvis/ellers-blokken sier hvis ved blomsten. Men toppen av blokken kunne si noe annet, som om nektar er lik 2 eller om det er en sti rett fram, og blokken ville oppføre seg på samme måte. Altså at hvis setningen på toppen er sann, vil den utføre det første settet av handlinger. Men hvis setningen på toppen er usann, vil den utføre det andre settet av handlinger.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Når du bruker en gjenta-blokk for å kjøre koden i løkke, hvordan vet datamaskinen når den har gjentatt det mange nok ganger? Gjenta-blokken skjuler i virkeligheten en mer sofistikert kodebit kalt en for-løkke, som teller fra en startverdi opp til en sluttverdi på en bestemt skala.
      2:
        image: notes/C4_for_loops_2.png
        text: 'For eksempel teller en "gjenta tre"-blokk fra 1 til 3 med 1. Hver gang den teller, kjører den koden inni løkken. For-løkken vet hvor mange ganger den har kjørt ved å bruke en telle-variabel, som er satt til startverdien på begynnelsen av løkken, og øker med den gitte verdien hver gang løkken skal kjøres. Så snart telle-variabelen er større enn sluttverdien, stopper løkken å kjøre.'
      3:
        image: notes/C4_for_loops_3.png
        text: 'Fordelen med å bruke en virkelig for-løkke istedenfor gjenta-løkken er at du faktisk kan se telle-variabelen og bruke den i løkken. Hvis jeg for eksempel har en rekke med blomster og den første hadde en nektar, den andre hadde to nektar og den tredje hadde tre, kan jeg bruke for-løkken til å be bien om å samle "teller"-nektar hver gang, altså en på første blomst, to på den andre og tre på den tredje.'
      4:
        image: notes/C4_for_loops_4.png
        text: Noe annet du kan gjøre med en for-løkke er å øke tallet med noe annet en en hver gang. Du kan øke med 2, 4 eller et til og med et antall som endres hver gang.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Når du bruker en gjenta-blokk for å kjøre koden i løkke, hvordan vet datamaskinen når den har gjentatt det mange nok ganger? Gjenta-blokken skjuler i virkeligheten en mer sofistikert kodebit kalt en for-løkke, som teller fra en startverdi opp til en sluttverdi på en bestemt skala.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: 'For eksempel teller en "gjenta tre"-blokk fra 1 til 3 med 1. Hver gang den teller, kjører den koden inni løkken. For-løkken vet hvor mange ganger den har kjørt ved å bruke en telle-variabel, som er satt til startverdien på begynnelsen av løkken, og øker med den gitte verdien hver gang løkken skal kjøres. Så snart telle-variabelen er større enn sluttverdien, stopper løkken å kjøre.'
      3:
        image: notes/C4_for_loops_bee_3.png
        text: 'Fordelen med å bruke en virkelig for-løkke istedenfor gjenta-løkken er at du faktisk kan se telle-variabelen og bruke den i løkken. Hvis jeg for eksempel har en rekke med blomster og den første hadde en nektar, den andre hadde to nektar og den tredje hadde tre, kan jeg bruke for-løkken til å be bien om å samle "teller"-nektar hver gang, altså en på første blomst, to på den andre og tre på den tredje.'
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Noe annet du kan gjøre med en for-løkke er å øke tallet med noe annet en en hver gang. Du kan øke med 2, 4 eller et til og med et antall som endres hver gang.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Når du bruker en gjenta-blokk for å kjøre koden i løkke, hvordan vet datamaskinen når den har gjentatt det mange nok ganger? Gjenta-blokken skjuler i virkeligheten en mer sofistikert kodebit kalt en for-løkke, som teller fra en startverdi opp til en sluttverdi på en bestemt skala.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: 'For eksempel teller en "gjenta tre"-blokk fra 1 til 3 med 1. Hver gang den teller, kjører den koden inni løkken. For-løkken vet hvor mange ganger den har kjørt ved å bruke en telle-variabel, som er satt til startverdien på begynnelsen av løkken, og øker med den gitte verdien hver gang løkken skal kjøres. Så snart telle-variabelen er større enn sluttverdien, stopper løkken å kjøre. Fordelen med å bruke en virkelig for-løkke i stedet for gjenta-blokken er at du faktisk kan se telle-variabelen og bruke den inni løkken.'
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Nå som du har redigert funksjonsblokkene, er tiden inne for å lage en ny funksjonsblokk helt fra grunnen av. Det er veldig lett. Du vil se at verktøykassen har en kategori som heter funksjoner. Hvis du klikker på denne, vil du se en oransje knapp som heter Lag en funksjon. Når du klikker på denne åpner du funksjonseditoren som du allerede har brukt for å redigere eksisterende funksjonsblokker.
      2:
        image: notes/C4_function_create_2.png
        text: Akkurat som før, startet du med å navngi din funksjon, skrev ned en beskrivelse for hva funksjonen skal gjøre. F. eks., er det ment å tegne en firkant eller tegne en trekant og deretter dra blokker fra verktøykassen inn i det hvite arbeidsområdet nedenfor. Husk å dra disse blokkene til den grønne innpakningsblokken for funksjonen.
      3:
        image: notes/C4_function_create_3.png
        text: Når du er ferdig, klikker du på lagre og avslutt. Dette vil ta deg tilbake til arbeidsområdet. Den nye funksjonen du opprettet vil vises som en grønn blokk i funksjonskategorien i din verktøykasse. Dra og slipp disse i arbeidsområdet og bruk de som alle andre blokker for å løse gåten.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Noe av det beste med dataprogrammering er at så snart du har lært en datamaskin hvordan den utfører en handling, kan du be den gjenta funksjonen. Du gir funksjonen et navn og så kaller du på den. Det blir som å lære seg nye ord.
      2:
        image: notes/C4_function_edit_2.png
        text: I programmet vi laget, lærte vi hvordan vi skal tegne et kvadrat ved å flytte og snu fire ganger. Vi kan ta den funksjonen og gi den et navn, tegn kvadrat, slik at hver gang vi vil gjøre det bare sier tegn kvadrat, så går vi tilbake og henter den funksjonen, den koden, og det blir gjort for oss. Vi har lagt det begrepet til vårt programmeringsspråk.
      3:
        image: notes/C4_function_edit_3.png
        text: 'I dette puslespillet, har vi allerede opprettet en tegn et kvadrat - funksjon for deg. Du vil se den i verktøykassen som en grønn blokk. Hva du trenger å gjøre er skrive det likt koden du skrev forå tegne et kvadrat og putte den i denne funksjonen. For å gjøre det, klikker du på alternativet Rediger i den grønne skuffen for å tegne en firkantet blokk. Dette vil åpne opp redigeringsprogrammet for funksjonen. Redigeringsprogrammet for funksjonen har tre deler. Et sted der du navngir funksjonen. Dette vil vises på de grønne blokken før denne funksjonen. Deretter skrive ut en kort beskrivelse av hva funksjonen er ment for å gjøre.'
      4:
        image: notes/C4_function_edit_4.png
        text: I dette tilfellet skal det tegne et kvadrat. Det hvite området under dette er arbeidsområdet, og fungerer akkurat som arbeidsplassen du allerede har brukt. Dra og slipp blokker fra verktøykassen til dette arbeidsområdet. Husk å sette blokkene som oppretter en firkant inne i den grønne blokken for funksjonen. Når du er ferdig, klikk på lagre og Avslutt. Dette vil ta deg tilbake til arbeidsområdet.. Nå kan du bruke tegn et kvadrat funksjon blokken akkurat som alle andre blokker for å løse oppgaven.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Her er en funksjon som tegner en firkant med sider som er 50 piksler lange. Det er flott, men hva om jeg ønsket å tegne en firkant med sider på 50 piksler og en annen firkant med sider på 100 piksler? Vi bør ikke måtte lage to separate funksjoner som gjør nesten det samme. I stedet kan vi bruke en funksjon med et parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parametere gjør at vi kan sende verdier inn i en funksjon, som blir brukt som variabler inne i funksjonen. La oss prøve å legge til en parameter som heter lik til denne funksjonen, så vi kan bruke den til å lage firkanter av forskjellige størrelser. I redigeringsprogrammet for funksjonen kan du redigere navnet og beskrivelsen som før, men nå kan du også legge til et parameter. Skriv navnet på parameteret du ønsker å lage i feltet og klikk Legg til Parameter. Dette vil skape en rød blokk med navnet på parameteret du nettopp opprettet. Nå kan vi erstatte gå 100 steg med parameteren Lengde, så vil objektet flyttes frem med antallet i Lengde.
      3:
        image: notes/C4_function_parameters_3.png
        text: Klikk Lagre og Lukk. Dra din nye opprett en firkant blokk fra kategorien funksjoner i verktøykassen. Du vil legge merke til at det er en tom plass ved siden av lengde fordi funksjonen vil vite hvilken verdi parameteren lengden skal ha. Dra en nummerblokk fra kategorien matematikk og plasser den på denne plassen. Ser du hvordan du kan bruke funksjonen igjen og igjen med forskjellige lengder for å gjøre av forskjellige størrelser? Prøv det selv!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Vanligvis bruker vi tekst når vi programmerer, men nå skal vi bruke Blockly, hvor du drar og slipper blokker for å skrive et program. Under overflaten lager du fremdeles koder. Først skal vi bygge en kode for å lage et program som vil hjelpe Angry Bird med å gå gjennom labyrinten og komme fram til grisene som har stjålet eggene.
      2:
        image: notes/C4_intro_2.png
        text: Blockly er delt i tre hoveddeler. Til venstre er labyrinten hvor programmet vil kjøre. Instruksjonene for hvert nivå står under labyrinten. På midten er verktøykassen. Hver av disse blokkene er kommandoer som fuglen kan forstå. Det hvite feltet til høyre kalles arbeidsområdet, og det er her vi skal bygge programmet vårt.
      3:
        image: notes/C4_intro_3.png
        text: 'Hva skjer hvis jeg drar "gå fremover"-blokken til arbeidsområdet og trykker "kjør"? Fuglen beveger seg en boks fremover i koordinatsystemet. Hva hvis jeg vil at fuglen skal gjøre noe annet etter at den har flyttet seg frem en boks? Da legger jeg til en blokk til i programmet vårt.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: 'Hvis du vil slette en blokk, kan du dra den vekk fra stablen og dra den til søppelkassen. Etter at du trykker "kjør", kan du alltid velge "nullstill" for å få fuglen tilbake til start. La oss fange grisene!'
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Nå skal vi lære om noe som alle spillprogrammerere bruker hver dag. Det kalles hendelser. En hendelse ber programmet om å lytte til når noe skjer. Og når det skjer, utfører programmet en handling. Eksempler på hendelser er museklikk, trykking av en piltast, eller et trykk på skjermen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: 'Så hvis vi ønsket å få en figur til å gjøre noe gjentagende uten at spilleren måtte gjøre noe, måtte vi sette disse blokkene inni en "gjenta for alltid"-blokk. I det neste puslespillet er målet vårt å hjelpe Anna med å gå opp og ned kontinuerlig. Å lære hvordan gjenta-kommandoene virker vil spare deg for massevis av tid senere når du skal lage ditt eget spill.'
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: 'Hva vil du bli når du blir stor, Olivia? En astronaut. Vet du tilfeldigvis hva en dataprogrammerer er? Ja.. mmm... nei. Hm, vent - hva? Jeg er ikke helt sikker på hvordan jeg skal forklare det, men dataprogrammering er ganske enkelt. Det er et sett av instruksjoner, akkurat som en oppskrift, som du må følge steg-for-steg for å få det resultatet du ønsker til slutt.'
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: 'Jeg kan endre antallet pixler, lengden på en linje, ved å bruke denne nedtrekkslisten. Hvor lang var den igjen? Du kan se instruksjonene igjen ved å kikke under Kjør-knappen. Her har jeg brukt "gå fremover"-blokken og jeg skal velge 100 pixler. Jeg kan slette en blokk ved å dra den inn i verktøykassa eller søppelbøtta. La oss sette den tilbake.'
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: 'Kjør koden ved å trykke på Kjør. Vel, det fungerte ikke! Jeg trykker Nullstill og tenker ut hva som var feil. Du kan prøve et puslespill så mange ganger du vil. Du kan hoppe over puslespill og komme tilbake til dem. Bare sørg for å gjør ditt beste, og ikke gi opp. La oss legge til enda en "gå fremover". Det virker fortsatt ikke. Jeg kan plassere en blokk mellom andre blokker.'
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: 'La oss ta en snu-blokk og plasser den mellom "gå fremover"-blokkene. Snu til venstre 45 grader. La oss kjøre den igjen. Nullstill, kjør, flott! Her er et puslespill til. Noen ganger får du en startkode som du skal fullføre. Her trenger jeg å legge til passende lengder og grader.'
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Hei, jeg heter Kathleen Kennedy og jeg er produsenten av Star Wars: The Force Awakens. I dag vil du arbeide med en av våre stjerner, BB-8. BB-8 er en rund drone. Alt den gjør og alle dens bevegelser kontrolleres av programvare. Informatikk påvirker alle bransjer, fra markedsføring til helsetjenester til filmindustrien. Faktisk jobbet hundrevis av IT-ingeniører sammen for å lage en film som The Force Awakens.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Hei jeg heter Rachel Rose, og jeg er en senioringeniør ved ILM hvor jeg leder utviklingsteamet for animasjon og skapning. I The Force Awakens er jeg ansvarlig for å hjelpe kunstnere med å bygge delene til filmen slik at de ser troverdige ut i en galakse langt, langt borte.
      3:
        image: notes/starwars_intro_3.JPG
        text: Den neste timen skal vi prøve å lage våre egne Star Wars-spill, mens vi lærer deg de grunnleggende konseptene i programmering. Programmering er vanligvis tekstbasert, men her kommer vi istedenfor til å bruke blokker som vi kan dra og slippe for å lage programmene. I bakgrunnen skrives det fremdeles kode. Etter at du har testet det enkleste ved hjelp av blokker, så vil vi bytte over til JavaScript, et av de mest populære programmeringsspråkene på Internett.
      4:
        image: notes/starwars_intro_4.JPG
        text: For å komme igang, skal vi jobbe med Rey for å programmere BB-8 til å gå og samle alle skrapdeler. Skjermen din er delt i tre deler. På venstre side finner du Star Wars spillområde, der koden vil kjøre. Instruksjonen for hvert nivå er skrevet nedenfor spillområdet.
      5:
        image: notes/starwars_intro_5.JPG
        text: Dette midtre området er verktøykassen og hver av disse blokkene er en kommando som BB-8 kan forstå.
      6:
        image: notes/starwars_intro_6.JPG
        text: Det hvite området på høyre side kalles arbeidsområdet og det er der vi skal bygge opp programmet vårt.
      7:
        image: notes/starwars_intro_7.JPG
        text: Hva skjer hvis du drar blokken flyttVenstre(); til ditt arbeidsområde og trykker kjør? BB-8 flytter en blokk til venstre på rutenettet.
      8:
        image: notes/starwars_intro_8.JPG
        text: Og hva om jeg vil få BB-8 til å gjøre noe etter blokken moveLeft();? Jeg kan legge en annen blokk til programmet. Jeg velger blokken moveUp(); og jeg drar den under min blokk moveLeft(); til uthevingen vises. Så slipper den og de to blokkene festes sammen.
      9:
        image: notes/starwars_intro_9.JPG
        text: Når jeg klikker kjør igjen, utfører BB-8 kommandoene som er stablet fra topp til bunn i arbeidsområdet. Hvis du vil slette en blokk, bare fjerne den fra stabelen og dra den tilbake til verktøykassa.
      10:
        image: notes/starwars_intro_10.JPG
        text: Etter at du har valgt kjør, kan du alltid velge tilbakestill-knappen for å få BB-8 tilbake til start. La oss rulle i gang!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inne i blokkene vi har brukt er JavaScript-kommandoer. JavaScript er det mest populære programmeringsspråket for profesjonelle utviklere i dag. Blokker er en flott måte å komme i gang med å lære koding og selv ved anerkjente universiteter som Harvard og Berkeley begynner man å lære på denne måten. Men så fort man lærer det grunnleggende, skriver ingeniører kode fordi det gir oss muligheten til å jobbe raskere.
      2:
        image: notes/starwars_typing_2.JPG
        text: Vi kan skrive hundrevis av kommandoer uten å måtte finne dem i verktøykassen eller trekke dem ut. Fordi du lærer å skrive kan være tregere i begynnelsen, men vi ville at du skulle få prøve det.
      3:
        image: notes/starwars_typing_3.JPG
        text: Øverst til høyre i arbeidsområdet, kan du klikke knappen Vis tekst på hvilken som helst oppgave for å bytte fra blokker til å skrive koden som tekst.
      4:
        image: notes/starwars_typing_4.JPG
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: notes/starwars_typing_5.JPG
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: "If you get stuck, you can always start over with the start over button and you can switch back to block mode at any time by clicking in the top-right corner. Ok, let's give typing a try! And if you make mistakes, don't get frustrated. It takes everybody a few tries to get it right."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C-3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: notes/starwars_events_7.JPG
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: notes/starwars_events_8.JPG
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Hi I'm Kathleen Kennedy and I'm the producer of Star Wars: The Force Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artist develop rigs, which are the parts of the character that move that allow the character to look very believable in a galaxy far, far away."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "In the next hour, we're going to build our own Star Wars game that will teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so we can drag and drop to write the programs. To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Din skjerm er delt opp i tre deler. Til venstre er Star Wars spillet hvor koden vil bli kjørt. Instruksjonene for hvert nivå er beskrevet nedenfor spillområdet.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Dette midtre området er verktøykassen og hver av disse blokkene er en kommando som BB-8 kan forstå.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Det hvite området på høyre side kalles arbeidsområdet og det er der vi skal bygge opp programmet vårt.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Hvis jeg drar moveLeft(); blokken til vårt arbeidsområde, hva skjer? BB-8 flytter seg ett steg på rutenettet.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Og hva om jeg ønsker at BB-8 skal gjøre noe etter moveLeft(); puslebit? Jeg kan legge til en annen puslebit til vårt program. Jeg vil velge moveUp(); puslebiten og dra den under min moveLeft(); puslebit for å feste den der. Et lite lys markerer også at den kan bli festet. Slipp puslebiten og den sitter på plass. Når jeg trykker kjør igjen, vil BB-8 utføre kommandoer som er stablet topp til bunn i vårt arbeidsområdet.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Om du ønsker å slette en puslebit, så drar du den ønskede puslebiten fra arbeidsområdet tilbake til verktøykassen.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Etter at du har klikket kjør, så kan du alltid klikke på nullstill-knappen for å få BB-8 tilbake til start. La oss prøve!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C-3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "To make a game, we need to learn about something that game programmers use every day: they're called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Steg for steg vil gjøre ditt spill mer interaktivt.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Mitt navn er Jens Bergensten, men jeg er mer kjent som Jeb. Jeg er sjefutvikler for Minecraft her hos Mojang i Stockholm. Jeg begynte å programmere da jeg var elleve eller tolv fordi jeg ville lage spill. En venn av faren min sa at for å kunne lage spill måtte du lære å programmere. Slik var det jeg kom i gang. Jeg liker å utforme og finne ut av arkitekturen til spill. Det er det jeg virkelig liker med Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: I løpet av den neste timen vil du lære grunnleggende datavitenskap ved å programmere Alex eller Steve til å bevege seg gjennom en simulert del av en Minecraft-verden.
      3:
        image: notes/mc_intro_3.JPG
        text: Tradisjonell programmering skjer vanligvis med tekst, men i dag bruker vi Blockly, et system som lar deg dra og slippe blokker for å skrive programmer. Under det hele lager du kode i Javascript.
      4:
        image: notes/mc_intro_4.JPG
        text: Konseptene som du skal lære, brukes av programmerere hver dag og utgjør selve grunnlaget for datavitenskap. Her på Mojang bruker vi de samme konseptene for å få Minecraft til å fungere.
      5:
        image: notes/mc_intro_5.JPG
        text: Før du begynner, må du velge en figur. Jeg velger Alex. La oss bygge kode til et program som hjelper henne rundt på skjermen.
      6:
        image: notes/mc_intro_6.JPG
        text: Skjermen er delt i tre hoveddeler. Til venstre er spillevinduet for Minecraft, hvor programmet skal kjøre. Instruksjonene for hvert nivå står skrevet under.
      7:
        image: notes/mc_intro_7.JPG
        text: I midten har du verktøykassen, og hver av blokkene er en kommando som bestemmer hva Alex gjør.
      8:
        image: notes/mc_intro_8.JPG
        text: Det hvite området til høyre er arbeidsvinduet, og det er her vi bygger opp programmet.
      9:
        image: notes/mc_intro_9.JPG
        text: 'Hva skjer hvis vi drar "flytt fremover"-blokken til arbeidsvinduet og klikker på Kjør? Alex beveger seg én plass frem på rutenettet.'
      10:
        image: notes/mc_intro_10.JPG
        text: 'Og hva om vi vil at hun skal gjøre noe etter at hun har flyttet seg fremover? Da kan vi legge enda en blokk til programmet. Jeg velger "snu mot høyre" og drar den under "flytt fremover" til denne oransje linjen dukker opp. Deretter slipper jeg den, og så festes de to blokkene til hverandre. Når vi klikker på Kjør igjen, utfører Alex kommandoene som er stablet oppå hverandre i arbeidsvinduet.'
      11:
        image: notes/mc_intro_11.JPG
        text: Hvis du ønsker å slette en blokk, er det bare å dra den tilbake til verktøykassen.
      12:
        image: notes/mc_intro_12.JPG
        text: For å gjøre om endringer og tilbakestille nivået kan du bruke Begynn på nytt-knappen øverst i hjørne av arbeidsvinduet. Ser du forresten den lille trekanten på snu-blokkene? Hvis du ser en slik trekant, betyr det at du kan velge et annet alternativ. La oss begynne å programmere!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Jeg er Lydia Winters, merkevaresjef hos Mojang, og vi har laget et lite spill som heter Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Det jeg liker best å gjøre i Minecraft er å utforske. Jeg elsker å dra på eventyr i huler for å se hva jeg finner. Jeg jobber ikke som programmerer, så det er spennende å ta del i Minecraft-timene og faktisk lære litt programmering selv.
      3:
        image: notes/mc_repeat_3.JPG
        text: 'I det siste nivået trengte vi mange "flytt fremover"-blokker. Det ville ha vært lettere om vi bare kunne be datamaskinen om å utføre denne kommandoen fire eller fem ganger. Heldigvis for oss er datamaskiner veldig flinke til å gjenta kommandoer med gjenta-løkker.'
      4:
        image: notes/mc_repeat_4.JPG
        text: Når vi bygger Minecraft, bruker vi gjenta-løkker for å plassere alle utgangsmaterialene som trenges til en ny verden. Det innebærer tusenvis av blokker. Vi bruker også løkker på små måter, som for å få føttene til Alex til å bevege seg mens hun går. Gjenta-løkker er en viktig del av all programmering.
      5:
        image: notes/mc_repeat_5.JPG
        text: Det er snart natt, så i de neste par nivåene skal vi bygge et hus som holder oss trygge. Vi bruker gjenta for å gjøre dette på enkleste måte.
      6:
        image: notes/mc_repeat_6.JPG
        text: For å bygge en vegg til huset kan vi enten be Alex flytte seg fremover og plassere planker fire ganger, eller så kan vi be henne flytte seg fremover og plassere én planke, så tar vi denne kommandoen og bruker gjenta-blokken til å få henne til å utføre handlingen flere ganger. Deretter klikker vi på gjenta-blokken og forteller henne hvor mange ganger hun skal utføre denne handlingen. La oss bygge huset før det blir natt! Ha det gøy!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Nå skal vi lære om hvis-kommandoer. Hvis-kommandoer er en viktig del av det å lære å programmere. De hjelper datamaskinen med å ta beslutninger.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Alle datamaskiner bruker hvis-kommandoer, også telefonen min. Når jeg skal låse opp telefonen, kjører den en kode som sier at den låses opp hvis jeg skriver inn riktig passord. Hvis ikke viser den en feilmelding.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Med hvis-kommandoer kan du få Steve og Alex til å reagere på det de ser i verdenen. Hvis det er en stein foran dem, kan de snu seg mot venstre. Eller mot høyre hvis de går inn i et tre.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Her har vi ikke lyst til å falle ned i lavaen. Det er lett å unngå lavaen. Vi kan se den på skjermen. Men hva med lavaen som vi ikke kan se, den under steinen?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Når vi har utvunnet steinen, må vi sjekke om det er noe lava der før vi beveger oss fremover. Hvis det er lava der, må vi plassere en stein foran figurene før vi fortsetter. Slik kan vi fortsette trygt på ferden. Tid for mer utvinning! Og husk å bruke hvis-kommandoen for å passe på hvor du går.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Gratulerer! Nå har du lært de grunnleggende byggeklossene i datavitenskap.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nå kan du bruke disse blokkene til å skape ting selv. Det er ingen flere instruksjoner, og ingen flere oppgaver å løse. Du kan bygge alt du vil. Det er du som velger.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[elever snakker] Nå begynner alvoret. Klipp. Jeg lagde en L av fakler. Jeg lagde en A av bjørkeplanker. Det fungerte, det fungerte! Vi bygde et hus av ull!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: 'Når du er ferdig å bygge, kan du velge "Del" for å få en lenke å dele med vennene dine. Ha det gøy!'
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Gratulerer! Nå har du lært de grunnleggende byggeklossene i datavitenskap.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nå kan du bruke disse blokkene til å skape ting selv. Det er ingen flere instruksjoner, og ingen flere oppgaver å løse. Du kan bygge alt du vil. Det er du som velger.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[elever snakker] Nå begynner alvoret. Klipp. Jeg lagde en L av fakler. Jeg lagde en A av bjørkeplanker. Det fungerte, det fungerte! Vi bygde et hus av ull!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Nå kan du bygge alt du vil. Ha det gøy!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Det hvite området til høyre er arbeidsvinduet, og det er her vi bygger opp programmet.
      7:
        image: notes/gumball_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: 'Her skal vi få skuespilleren til å si noe når spilleren klikker på den. Vi vil bruke den når du klikker på blokken og fest "sier" blokk til det. Når spilleren klikker, vil alle blokkene knyttet til denne blokken skal utføres.'
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/gumball_repeat_3.JPG
        text: I detre puslespillet er vårt mål å hjelpe skuespilleren til å gjøre en jobb kontinuerlig. Lær hvordan gjenta kommandoene virker, vil spare deg massevis av tid senere når du bygger ditt eget spill.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Det hvite området til høyre er arbeidsvinduet, og det er her vi bygger opp programmet.
      7:
        image: notes/iceage_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: 'Her skal vi få skuespilleren til å si noe når spilleren klikker på den. Vi vil bruke den når du klikker på blokken og fest "sier" blokk til det. Når spilleren klikker, vil alle blokkene knyttet til denne blokken skal utføres.'
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/iceage_repeat_3.JPG
        text: I detre puslespillet er vårt mål å hjelpe skuespilleren til å gjøre en jobb kontinuerlig. Lær hvordan gjenta kommandoene virker, vil spare deg massevis av tid senere når du bygger ditt eget spill.
