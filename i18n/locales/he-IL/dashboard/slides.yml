he:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: ברוכים הבאים אל שעת הקוד הראשונה שלכם! בואו נצלול אל תוך הטעימה הראשונה שלכם בתכנות.
      2:
        image: notes/hoc1_2.jpg
        text: אנחנו נשתמש בבלוקלי, שפת תכנות חזותית בה קוד נכתב על ידי גרירה ושחרור של בלוקים.
      3:
        image: notes/hoc1_3.jpg
        text: 'רוב תוכניות המחשב נכתבות, אבל בלוקלי הינה שפה חזותית. כל בלוק מקביל לשורת קוד "אמיתית" אחת.'
      4:
        image: notes/hoc1_4.jpg
        text: כאן תלמד את יסודות מדעי המחשב, מושגים אשר משמשים בכל מקום מיצירת אפליקציות ועד שליטה על רכב החלל במאדים.
      5:
        image: notes/hoc1_5.jpg
        text: תוכנית היא אוסף של הוראות אשר על המחשב שלך לבצע.
      6:
        image: notes/hoc1_6.jpg
        text: המטרה של התוכנית הראשונה שלך היא להעביר את הציפור הכועסת דרך מבוך ולהכות חזיר ירוק.
      7:
        image: notes/hoc1_7.jpg
        text: הצד השמאלי הוא המבוך בו התוכנית שלך מופעלת. ההוראות עבור כל פאזל נמצאות מתחת למבוך.
      8:
        image: notes/hoc1_8.jpg
        text: ההוראות עבור הציפור הכועסת נמצאות בארגז הכלים האמצעי. השתמש בהן כדי לבנות את הקוד שלך.
      9:
        image: notes/hoc1_9.jpg
        text: מצד ימין נמצאת סביבת העבודה, אליה תגרור בלוקים מארגז הכלים כדי לבנות את התוכנית שלך. כדי למחוק בלוק, גרור אותו אל פח האשפה שבפינה.
      10:
        image: notes/hoc1_10.jpg
        text: 'כל בלוק הוא הוראה אחת. אם תגרור בלוק "התקדם" אל סביבת העבודה שלך ותלחץ על "הפעל תוכנית", הציפור תנוע צעד אחד על המבוך.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'אם אתה מפעיל תוכנית ורוצה לתקן אותה ולנסות שוב, לחץ על לחצן "איפוס".'
      13:
        image: notes/hoc1_13.jpg
        text: בואו נתפוס את החזירים האלה!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "הי, אני ג'וניור! כל צוות מכוניות מירוץ צריך מדעני מחשב כדי לנצח. הם מנתחים נתונים מהמכונית כדי לגרום לה לנסוע מהר יותר."
      2:
        image: notes/stage5_2.jpg
        text: במהלך החידות הבאות תהיה אמן המשרטט קו מאחוריו בכל מקום אליו הוא הולך.
      3:
        image: notes/stage5_3.jpg
        text: 'בלוק זה אומר "התקדם כ- 100 פיקסלים". פיקסלים הם נקודות ממש זעירות על המסך.'
      4:
        image: notes/stage5_4.jpg
        text: 'בלוק זה אומר "פנה ימינה ב- 90 מעלות". האמן שלך יפנה באותה צורה כמו בבלוקי ״פנה״ שבפאזלי המבוך.'
      5:
        image: notes/stage5_5.jpg
        text: לחץ על החץ באחד מבלוקים אלו כדי לשנות את הכמות שבה האמן ינוע קדימה או יפנה. שחק מעט כדי להכיר את בלוקים חדשים אלו.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: היי, אני פאולה! בחידות אלו אתה איכר הצריך לשטח את השדה שלו לחלוטין לשם שתילת יבולים.
      2:
        image: notes/stage9_2.jpg
        text: עליך לעזור לה להסיר את כל ערמות העפר ולמלא את כל החורים.
      3:
        image: notes/stage9_3.jpg
        text: הבלוקים החדשים משמשים להסרת דלי עפר מהערימה ולמילוי החור בדלי עפר.
      4:
        image: notes/stage9_4.jpg
        text: הערימות והחורים הם בגדלים שונים, כך שעליך לספר לאיכר בכמה דליים עליו להשתמש.
    flappy_intro:
      1:
        image: הערות/flappy01.jpg
        text: . היי, אני קייטי! אחד הדברים הכי מרגשים על מדעי המחשב הוא כי תוכנת מחשב יכול להיות אינטראקטיביים.
      2:
        image: הערות/flappy02.jpg
        text: בכל פעם שמישהו לוחץ או מקיש או מקליד במחשב או טלפון, זה יוצר אירוע, ויש קוד שמחליט מה לעשות כאשר מתרחש אירוע.
      3:
        image: הערות/flappy03.jpg
        text: 'לדוגמה, יכולת מטפל באירועים שאומרת "בעת לחיצה על העכבר, להשמיע צליל" '
      4:
        image: הערות/flappy04.jpg
        text: אי פעם שמעת על המשחק FlappyBird ? על ידי שימוש באירועים, אנחנו הולכים ללמוד לתכנת משלנו גירסה מותאמת אישית של FlappyBird!
      5:
        image: הערות/flappy05.jpg
        text: הקוד שתכתוב מערב גרירה והוספה של בלוקים המייצגים פקודות למחשב. מתחת למכסה המנוע, כל אחת מן הלבנים הללו מייצגת קוד.
      6:
        image: הערות/flappy06.jpg
        text: 'אם אתה תסתכל על סביבת העבודה, ישנן כמה בלוקים ירוקים ימולאו עבורך - אלה "". באירועים- '
      7:
        image: הערות/flappy07.jpg
        text: 'אם אתה רוצה את הציפור על דש בעת לחיצה על העכבר, אתה יכול לעשות זאת על-ידי הצמדת את הבלוק "דש" למטפל האירוע המתאים, ולנפנף עכשיו במשחק שלך בכל פעם שתלחץ על העכבר, הציפור.'
      8:
        image: הערות/flappy08.jpg
        text: בתוך כל הפאזל של פעילות זו אנו להציג סוגים חדשים של אירועים כמו רחובות ירוקים על סביבת העבודה, באפשרותך להחליט הבלוקים המתאימים כדי להוסיף בתגובה לאירועים האלה.
      9:
        image: הערות/flappy09.jpg
        text: 'כאשר אתה רואה טיפה למטה/חץ למעלה כזה, כלומר, שבאפשרותך לשנות את ההגדרות - כמו איזה צליל שיושמע flappy פוגע בקרקע.'
      10:
        image: הערות/flappy10.jpg
        text: בפאזל הסופי תוכל ליצור משחק שלך ולשתף אותו עם חברים שלך. תהנה!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: . היי, אני מארק! בואו ללמוד על לולאות. באמצעות לולאות אתה יכול להגיד למחשב לחזור על כל סדרת פעולות שוב ושוב, אלפי או אפילו מיליארדי פעמים.
      2:
        image: notes/hoc2_2.jpg
        text: בחידה הזו, אנחנו רוצים לגרום לציפור לזוז קדימה 5 מקומות כדי להגיע לחזיר.
      3:
        image: notes/hoc2_3.jpg
        text: 'אנחנו יכולים להיעזר בבלוק "חזור" החדש.'
      4:
        image: notes/hoc2_4.jpg
        text: 'במקום לגרור 5 בלוקי ״התקדם" ...'
      5:
        image: notes/hoc2_5.jpg
        text: 'אנו יכולים למקם את הבלוק "התקדם" בתוך בלוק "חזור", ולכתוב בבלוק מספר שאומר לו כמה פעמים לחזור.'
      6:
        image: notes/hoc2_6.jpg
        text: 'וזה חשוב: אפשר לשים יותר מפקודה אחת בתוך בלוק "חזור".'
      7:
        image: notes/hoc2_7.jpg
        text: 'תיהנה מבלוק "חזור" החדש שלך!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: |-
          הי, אני כריס. לפני שהצטרפתי לקבוצת המיאמי היט, למדתי מדעי המחשב במכללת ג'ורג'יה טק. בואו ננסה בלוק חדש, בלוק "חזור עד".
      2:
        image: notes/hoc3_2.jpg
        text: מה אם אנחנו לא יודעים כמה רחוק הציפור צריכה לעבור כדי להגיע לחזיר?
      3:
        image: notes/hoc3_3.jpg
        text: 'אם נשים בלוק "התקדם" בתוך הבלוק "חזור עד", הציפור תזוז קדימה עד שתגיע אל החזיר (או שתתרסק לתוך קיר).'
      4:
        image: notes/hoc3_4.jpg
        text: 'וזה חשוב: בדיוק כמו מקודם, אנחנו יכולים לשים מספר בלוקים בתוך הבלוק "חזור עד", כך שכולם יתבצעו שוב ושוב.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'הי, אני ביל! בואו ונלמד מושג יסוד חדש: הצהרות "אם". כך מחשבים מקבלים החלטות.'
      2:
        image: notes/hoc4_2.jpg
        text: 'אתה משתמש במשפטי ״אם״ יום יום בעצמך. לפני שאתה יוצא החוצה בכל בוקר, אתה אומר - אם יורד גשם בחוץ, אני צריך ללבוש מעיל.'
      3:
        image: notes/hoc4_3.jpg
        text: אנחנו יכולים להגיד לזומבי לבדוק אם יש שביל שמאלה, ואם אכן הוא ימצא נתיב לשמאל, נוכל לגרום לו להסתובב לכיוון זה.
      4:
        image: notes/hoc4_4.jpg
        text: 'כדי לכתוב את הקוד לזה, בואו נגרור בלוק "אם" ונשים בלוק "פנה שמאלה" בתוכו.'
      5:
        image: notes/hoc4_5.jpg
        text: 'עכשיו, אם נשים בלוק "התקדם" מעליו ובלוק "חזור" סביב הכל, בכל פעם שהזומבי זז, הוא יבדוק אם ישנו שביל שמאלה ויפנה אליו. הפקודה "חזור" היא קריטית, כדי לבדוק בכל צעד האם ניתן לפנות.'
      6:
        image: notes/hoc4_6.jpg
        text: 'הצהרות ״אם״ מאד חשובות במדעי המחשב. אחת התוכניות הראשונות שכתבתי היתה משחק איקס-עיגול, והיה בה משפט ״אם״ שאמר - אם השחקן האחר עומד לנצח, חסום את המקום שמאפשר לו לנצח.'
      7:
        image: notes/hoc4_7.jpg
        text: 'תהנה בשימוש בבלוק "אם"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: הי, שמי ברינה, מהנדסת באינסטגרם. פונקציה היא קבוצת שורות קוד שברצוננו להשתמש בהן שוב ושוב, כך שבמקום לכתוב את הקוד מחדש בכל פעם, נוכל להשתמש בבלוק אחד בלבד.
      2:
        image: notes/stage13_2.jpg
        text: כעת נלמד איך להגדיר פונקציות. להגדרות פונקציה יש כוכב בפינה. שמה של הפונקציה כתוב בשורה העליונה.
      3:
        image: notes/stage13_3.jpg
        text: 'הבלוקים ששמים בתוך ההגדרה אומרים לנו מה הבלוק עושה. בפונקציה הזאת, ההגדרה היא "מלא 5" והפונקציה מורכבת מבלוק "חזור שוב" ובלוק "מלא".'
      4:
        image: notes/stage13_4.jpg
        text: 'ההגדרה יושבת בסביבת העבודה, אבל החקלאי שלנו לא יריץ את הפונקציה עד שאנחנו נוציא את הבלוק של הפונקציה "מלא 5" מתוך קטגורית הפונקציות.'
      5:
        image: notes/stage13_5.jpg
        text: פונקציות הן כיף!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: 'בלוק ה״כל עוד" יבצע את מה שהכנסתם לתוכו כל עוד ההצהרה הרשומה בראשו הינה אמת.'
      3:
        image: notes/stage9_7.jpg
        text: לדוגמה, אם האיכר עומד על ערימה, הוא ימשיך להסיר דלי אחר דלי כל עוד עדיין נמצאת ערימה תחתיו.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: הי, אני טרינה ואני עובדת עבור פיקסאר. עבדתי במספר סרטים וביניהם שרק.
      2:
        image: notes/stage11_2.jpg
        text: 'זוהי לולאת ה-"מונה" החדשה שלנו. היא תבצע פעולות שוב ושוב, כך שבאפשרותך לשנות אותן מעט בכל פעם.'
      3:
        image: notes/stage11_3.jpg
        text: 'בדוגמה זו, לולאת ה-"מונה" שלנו אומרת ״מנה מ-50 עד 90 בצעדים של 10", ובתוכה ימצא בלוק "צייר ריבוע". גרור את בלוק ה-״מונה" מאיזור ה-"משתנים" אל מקום ה- "אורך".'
      4:
        image: notes/stage11_4.jpg
        text: זה אומר שהאמן שלנו הולך לצייר ריבוע שכל צד באורך 50 פיקסלים, ואז הוא יוסיף 10 לזה ויצייר ריבוע שכל צד באורך 60 פיקסלים. אחר-כך הוא ימשיך להוסיף 10 ולצייר ריבועים עד שהוא יגיע ל90. אז יהיו לנו ריבועים של 50, 60, 70, 80, ו90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: ". היי, אני ג'אנט, אני מהנדסת ב-זינגה."
      2:
        image: notes/stage15_2.jpg
        text: מה אם אנחנו רוצים לצייר כמה משולשים עם אורכים בגדלים שונים?
      3:
        image: notes/stage15_3.jpg
        text: היינו יכולים לכתוב את כל הקוד בעצמנו או שנוכל להשתמש בפונקציה עם פרמטרים.
      4:
        image: notes/stage15_4.jpg
        text: 'כדי לעשות זאת לחץ על הכפתור הכחול של הגדרת הפונקציה "צייר משולש". אז גרור "שם קלט" לתוך בלוק ה"קלט".'
      5:
        image: notes/stage15_5.jpg
        text: 'אז אם תכתוב "אורך" במקום שכתוב "x" ותלחץ על Enter, תיצור קלט אורך לפונקציה שלך.'
      6:
        image: notes/stage15_6.jpg
        text: 'אז תלחץ על הכוכב. עכשיו, אתה רוצה ללחוץ על קטגוריית המשתנים ולגרור את הבלוק "אורך" לתוך הבלוק "לזוז קדימה" של הפונקציה שלך. כמו כן, תגרור משם את הבלוק מספר הישן.'
      7:
        image: notes/stage15_7.jpg
        text: 'כדי להשתמש בפונקציה שלך עם פרמטרים, לחץ על קטגוריית הפונקציות וגרור החוצה את הפונקציה "צייר משולש עם אורך".'
      8:
        image: notes/stage15_8.jpg
        text: עכשיו אתה יכול להשתמש בבלוק מתמטיקה כדי להכניס מספרים שונים כדי לצייר משולשים בגדלים שונים.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: מזל טוב! עם הפאזל האחרון שפתרת, כתבת קוד שיכול לומר לכל רובוט (בין אם זה זומבי, ציפור, מארס-רובר או אפילו מכונית שנוהגת מעצמה) איך למצוא את הדרך מבוך או מנהרה באורך כלשהו, .
      2:
        image: notes/hoc6_2.jpg
        text: 'המושגים הבסיסיים בהם השתמשת הם בליבה של כל תוכנית או אפליקציה שאי פעם תנסה. למדנו על לולאות ״חזור״, הצהרות ״חזור-עד״,  הצהרות ״אם״ והצהרות ״אם-אחרת״.'
      3:
        image: notes/hoc6_3.jpg
        text: 'אם אהבת את השעה הראשונה של קוד שלך, בקר ב- code.org כדי להמשיך בלימוד מדעי המחשב! לאחר השלמת הקורס בן 20 השעות שלנו, תשלוט ביסודות התכנות, ותוכל ללמוד כיצד לכתוב אפליקציות לטלפון, הוראות הפעלה לרובוט, משחקים ומה שתרצה.'
      4:
        image: notes/hoc6_4.jpg
        text: 'הטכנולוגיה משנה את כל מה שאנו עושים ולא משנה אם אתה צעיר או זקן: תכנות זה כיף, זה יצירתי וכל אחד יכול ללמוד!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: הצגת הערות תגיע בקרוב!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
