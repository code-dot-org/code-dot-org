ar:
  slides:
    maze_intro:
      1:
        image: |
          notes/hoc1_1.jpg
          
        text: مرحباً في أول ساعة من البرمجة! دعنا نتجه إلى تذوقك الأول للبرمجة .
      2:
        image: notes/hoc1_2.jpg
        text: بلوكلي هي لغة برمجية مرئية تمكنك من سحب وافلات القطع لكتابة الكود البرمجي.
      3:
        image: notes/hoc1_3.jpg
        text: 'تتم كتابة معظم الاكواد البرمجية، ولكن بلوكلي هو مرئي. بحيث ان كل القطع تطابق سطر من الكود البرمجي " الحقيقي ".'
      4:
        image: |
          notes/hoc1_4.jpg
          
        text: أنت ستتعلم أسس علوم الكمبيوتر، والمفاهيم التي يتم استخدامها في أي مكان من صنع تطبيقات للتحكم في تجول المريخ.
      5:
        image: |
          notes/hoc1_5.jpg
          
        text: البرنامج هو مجموعة من الإيعازات التي يتبعها جهاز الكمبيوتر الخاص بك.
      6:
        image: |
          notes/hoc1_6.jpg
          
        text: 'الهدف من برنامجك الاول هو  توصيل "الطيور الغاضبة" عبر المتاهة لضرب " المخلوق الاخضر".'
      7:
        image: |
          notes/hoc1_7.jpg
          
        text: الجانب الايسر هو مكان تنفيذ المتاهة. حيث يمكنك ايجاد الارشادات لكل لغز والتي تكون اسفل المتاهة.
      8:
        image: |
          notes/hoc1_8.jpg
          
        text: 'شريط الادوات الوسطي يمتلك مجموعة من الاوامر المتعلقة بلعبة "الطيور الغاضبة" . والتي ستستخدم في بناء الكود البرمجي الخاص بك.'
      9:
        image: |
          notes/hoc1_9.jpg
          
        text: على الجانب الايمن توجد مساحة عمل بيضاء حيث يتم عليها سحب القطع من شريط الادوات من اجل بناء برنامجك . لحذف القطعة الغير مرغوب بها , عليك القيام بسحبها الى سلة المهملات الواقعة في الزاوية.
      10:
        image: |
          notes/hoc1_10.jpg
          
        text: 'كل قطعة تقوم بأمر واحد. بحيث إذا سحبت قطعة "تقدم للامام" الى مساحة العمل البيضاء وضغطت على  "تنفيذ البرنامج" ، سوف يتحرك الطير مسافة واحدة في المتاهة.'
      11:
        image: |
          notes/hoc1_11.jpg
          
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: |
          notes/hoc1_12.jpg
          
        text: 'إذا قمت بتنفيذ برنامج وترغب في إصلاحه ومحاولة تنفيذه مرة أخرى، اضغط على الزر "اعادة تعيين".'
      13:
        image: |
          notes/hoc1_13.jpg
          
        text: دعنا نذهب للحصول على المخلوق الاخضر!
    artist_intro:
      1:
        image: |
          notes/stage5_1.jpg
          
        text: 'مرحبا، أنا جر! كل فريق سباق سيارات بحاجة إلى علماء الكمبيوتر من اجل الفوز.  هم يحللون البيانات من السيارة لجعلها تسير بسرعة.'
      2:
        image: |
          notes/stage5_2.jpg
          
        text: في هذه الألغاز، أنت ستكون رسام يرسم خط في كل مكان.
      3:
        image: |
          notes/stage5_3.jpg
          
        text: 'هذه القطعة تقول "التقدم للامام" بمقدار 100 بكسل . " البكسلات هي النقاط الصغيرة الموجودة في شاشة الكمبيوتر.'
      4:
        image: |
          notes/stage5_4.jpg
          
        text: 'هذه القطعة تقول "الانعطاف يمينا بدرجة 90" . " هذا سيمكن الرسام من الانعطاف بنفس المقدار مثل قطعة "اتجه" المستخدمة في الغاز المتاهة. '
      5:
        image: |
          notes/stage5_5.jpg
          
        text: اضغط على السهم في أي من هذه القطع لتغيير مقدار تحرك الرسام للامام او الانعطاف. العب من اجل ان تكون على دراية باستخدام هذه القطع الجديدة.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: مرحبا، أنا باولا! في هذه الألغاز، انت ستصبح المزارع الذي يجب ان يقوم بجعل حقله الزراعي مسطحا تماما من اجل البدء بزراعة المحاصيل.
      2:
        image: notes/stage9_2.jpg
        text: بامكانك مساعدتها بأزلة جميع الاكداس من التراب و ملاْ جميع الثقوب.
      3:
        image: notes/stage9_3.jpg
        text: القطعة الجديدة ازالة مجرفة تراب واحدة من الكدس وتملأ مجرفة واحدة من التراب في الحفرة.
      4:
        image: notes/stage9_4.jpg
        text: الاكداس والثقوب مختلفة الاحجام, لذلك يجب ان تخبر المزارع كم عدد من الجرافات تحتاج.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: مرحبا، أنا كاتي! واحدة من الأمور الأكثر إثارة حول علوم الحاسوب هي ان البرامج الحاسوبية تمكن أن تكون تفاعلية.
      2:
        image: notes/flappy02.jpg
        text: أي وقت شخص ينقر أو الصنابير أو أنواع على جهاز الكمبيوتر أو الهاتف، الذي يولد هذا الحدث، وهناك بعض التعليمات البرمجية التي تقرر ما يجب القيام به عند حدوث الحدث.
      3:
        image: notes/flappy03.jpg
        text: 'على سبيل المثال، يمكن أن يكون لديك معالج الحدث الذي يقول "عندما يتم النقر على الماوس، تشغيل صوت" '
      4:
        image: notes/flappy04.jpg
        text: هل سمعت من أي وقت مضى من فلابيبيرد اللعبة؟ باستخدام معالجات الأحداث، نحن ذاهبون للتعرف إلى البرنامج الخاص بنا إصدار مخصص من فلابيبيرد!
      5:
        image: notes/flappy05.jpg
        text: التعليمات البرمجية التي سوف تكتب ينطوي على سحب وإسقاط القطع التي تمثل أوامر لجهاز الكمبيوتر. تحت غطاء محرك السيارة، يمثل كل من هذه الكتل البرمجية الحقيقية.
      6:
        image: notes/flappy06.jpg
        text: 'إذا كنت نلقي نظرة على مساحة العمل، وهناك بعض الكتل الخضراء التي تمتلئ لك--هذه "معالجات الأحداث" '
      7:
        image: notes/flappy07.jpg
        text: 'إذا كنت تريد الطيور إلى رفرف عند النقر بالماوس، يمكنك القيام بذلك عن طريق ربط كتلة "رفرف" إلى معالج الحدث المناسب، والآن في اللعبة الخاصة بك كلما قمت بالنقر فوق الماوس، الطيور سوف رفرف.'
      8:
        image: notes/flappy08.jpg
        text: في كل لغز هذا النشاط سوف نقدم أنواع جديدة من الأحداث ككتل خضراء على مساحة العمل، ويمكنك أن تقرر القطع المناسبة لإضافة ردا على تلك الأحداث.
      9:
        image: notes/flappy09.jpg
        text: عند ظهور القائمة المنسدلة السهم بمثل هذا، وهذا يعني يمكنك تغيير الإعدادات--مثل ما الصوت للعب عندما يضرب flappy الأرض.
      10:
        image: notes/flappy10.jpg
        text: عليك أن تكون قادراً على إنشاء اللعبة الخاصة بك ومشاركتها مع أصدقائك في اللغز النهائي. استمتع!
    loop_times:
      1:
        image: |
          notes/hoc2_1.jpg
          
        text: مرحباً، أنا مارك! دعنا نتعرف على الحلقات التكرارية. بإستخدام الحلقات التكرارية يمكنك أن تأمر الكمبيوتر بتكرار أي مجموعة من الإجراءات عدة مرات، بالاف أو حتى بلايين من المرات.
      2:
        image: |
          notes/hoc2_2.jpg
          
        text: في هذا اللغز، نريد أن نقدم الطير الى الامام 5 خطوات من اجل الوصول الى المخلوق الاخضر .
      3:
        image: |
          notes/hoc2_3.jpg
          
        text: 'يمكننا استخدام قطعة "أكرر" الجديدة لمساعدتنا حل المشكلة.'
      4:
        image: |
          notes/hoc2_4.jpg
          
        text: 'بدلاً من سحب 5  قطع "تقدم للامام" ...'
      5:
        image: |
          notes/hoc2_5.jpg
          
        text: 'يمكننا وضع قطعة "تقدم للامام" داخل قطعة "أكرر" وكتابة عدد معين في القطعة من اجل ان تقوم بتكرار الامر العديد من المرات.'
      6:
        image: |
          notes/hoc2_6.jpg
          
        text: 'وهذا أمر مهم: يمكنك وضع أمر واحد أو أكثر داخل القطعة "أكرر".'
      7:
        image: |
          notes/hoc2_7.jpg
          
        text: 'تمتع بإستخدام قطعتك "أكرر" الجديدة!'
    loop_until:
      1:
        image: |
          notes/hoc3_1.jpg
          
        text: 'مرحبا، أنا كريس. قبل أنضمامي إلى "ميامي هيت"، ذهبت إلى معهد "جورجيا للتكنولوجيا" لدراسة "علوم الكمبيوتر". دعونا نجرب قطعتنا الجديدة، قطعة "أكرر حتى".'
      2:
        image: |
          notes/hoc3_2.jpg
          
        text: ماذا اذا لم نعرف كم مسافة التقدم بين الطير والمخلوق الاخضر ؟
      3:
        image: |
          notes/hoc3_3.jpg
          
        text: 'إذا وضعنا قطعة "تقدم للامام" داخل قطعة "أكرر حتى" ، سوف يتقدم الطير إلي الأمام حتى يصل للمخلوق الاخضر (أو يتحطم في الجدار).'
      4:
        image: |
          notes/hoc3_4.jpg
          
        text: 'هذا مهم كما في السابق، نحن نستطيع أن نضع قطع متعددة داخل قطعة "أكرر حتى"، من اجل تكرار القطع جميعا.'
    if:
      1:
        image: |
          notes/hoc4_1.jpg
          
        text: 'مرحبا، أنا بيل! دعونا نتعلم مفهوم أساسي جديد: عبارات "اذا". هذه هي الطريقة التي تجعل أجهزة الكمبيوتر تتخذ القرارات.'
      2:
        image: |
          notes/hoc4_2.jpg
          
        text: |-
          أنت بنفسك تستخدم  عبارات"اذا" يومياً. قبل الذهاب إلى الخارج كل صباح، أنت تقول 'اذا' كانت تمطر بالخارج، يجب ان ارتدي الجاكيت.
      3:
        image: |
          notes/hoc4_3.jpg
          
        text: 'يمكن أن نقول للزومبي التحقق "إذا كان" يوجد طريق على اليسار، و "إذا وجد طريق على اليسار، نحن بأستطاعتنا أن نجعلة يدور في هذاك الاتجاه.'
      4:
        image: |
          notes/hoc4_4.jpg
          
        text: 'لكتابة الكود البرمجي لهذا اللغز، دعونا نسحب قطعة "اذا كان" ونضعها داخل قطعة "اتجه لليسار".'
      5:
        image: |
          notes/hoc4_5.jpg
          
        text: 'الآن، إذا وضعنا قطعة "تقدم للامام" فوقها قطعة "أكرر" حول كل شيء، في كل مرة يتحرك الزومبي، هو سوف يتحقق من إذا يوجد طريق على اليسار ومنعطف . أمر "أكرر" هو  حاسم،لانه يقوم بالتحقق من وجود منعطفاً في كل خطوة.'
      6:
        image: |
          notes/hoc4_6.jpg
          
        text: 'إذا كانت العبارات هامة جداً في علوم الكمبيوتر. من أولى البرامج التي كتبتها هى لعبة تيك تاك تو، وكانت هناك عبارة تقول "اذا" كان الشخص الآخر على وشك الفوز، أمنع الاماكن التي تسمح لهم بالفوز.'
      7:
        image: |
          notes/hoc4_7.jpg
          
        text: 'أستمتع بإستخدام قطعة "اذا كان" !'
    if_else:
      1:
        image: |
          notes/hoc5_1.jpg
          
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: |
          notes/hoc5_2.jpg
          
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: |
          notes/hoc5_3.jpg
          
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: |
          notes/hoc5_4.jpg
          
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: مرحباً، أنا برينا، مهندسة في إينستاجرام. الدالة عبارة عن بعض الأسطر من الكود البرمجي التي تريد استخدامها مراراً وتكراراً، لذا بدلاً من كتابة الكود البرمجي عدة مرات، يمكنك فقط استخدام قطعة واحدة.
      2:
        image: notes/stage13_2.jpg
        text: نحن في طريقنا لمعرفة كيفية تعريف الدوال . تعرف الدالة بنجمة في الزاوية. يتم كتابة اسم الدالة في السطر العلوي.
      3:
        image: notes/stage13_3.jpg
        text: 'القطع التي تذهب داخل التعريف تخبرنا بعملها . لذلك هذه تعريف الدالة التي تسمى "املأ 5" والتي تصنع من قطعة "كرر" و قطعة "املأ".'
      4:
        image: notes/stage13_4.jpg
        text: 'التعريف يجلس على مساحة العمل . ولكن مزارعنا لايرغب بتنفيذ الدالة حتى نقوم بسحب قطعة "دالة املأ 5" من قسم الدول.'
      5:
        image: notes/stage13_5.jpg
        text: 'دعنا نضع "المتعة" مرة اخرى في "الدالة!"'
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'مرحبا، أنا ماكندي! دعنا نتعرف على قطعة "اكرر طالما." '
      2:
        image: notes/stage9_6.jpg
        text: 'قطعة "اكرر طالما" ستنفذ اي شي في داخلها ما دام العبارة في الاعلى صحيحة.'
      3:
        image: notes/stage9_7.jpg
        text: على سبيل المثال، إذا كان المزارع يقف على التكدس ، سستمر الجرافة بالازالة في حين لايزال يوجد تكدس تحتها.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: مرحبا، أنا ترينا، أعمل على بيكسار. لقد عملت على مجموعة من الأفلام، من ضمنها فلم شريك.
      2:
        image: notes/stage11_2.jpg
        text: 'هذه هي حلقة "العداد" الجديدة. ستقوم بتنفيذ الإجراءات مراراً وتكراراً، ويمكنك أن تجعل الإجراءات تتغير قليلاً في كل مرة.'
      3:
        image: notes/stage11_3.jpg
        text: 'في هذا المثال، حلقة"العداد" تقول " قم بالعد مع العداد من 50 إلى 90 من 10" ، وداخله يوجد لدينا قطعة "ارسم مربع". اسحب قطعة "العداد" من قسم "المتغيرات" الى مكان "الطول".'
      4:
        image: notes/stage11_4.jpg
        text: وهذا يعني الرسام سيقوم برسم مربع طول اضلاعه 50 بكسل، ثم يضيف 10 بكسلات ورسم مربعاً طول اضلاعه 60 بكسل. ثم نضيف 10 بكسلات اخرى ورسم المربعات حتى تصل إلى 90. لذا سوف نحصل على مربعات من 50، 60، 70، 80 و 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: مرحباً، أنا جانيت، وأنا مهندسة في Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ماذا اذا كنا نرغب برسم مجموعة من المثلثات ويكون اطوالهم بأحجام مختلفة؟
      3:
        image: notes/stage15_3.jpg
        text: يمكن أن نكتب جميع الكود البرمجي هذا باليد، أو يمكن أن نستخدم دالة مع المعلمات.
      4:
        image: notes/stage15_4.jpg
        text: 'للقيام بهذا، اضغط فوق النجمة الزرقاء في "رسم المثلث" تعريف الدالة . ثم اسحب "اسم الادخال" إلى قطعة "الادخال".'
      5:
        image: notes/stage15_5.jpg
        text: 'ثم إذا قمت بكتابة "الطول" في المكان حيث يقول "x" ثم اضغط "ادخل" سوف تقوم بإنشاء الإدخال الطولي للدالة الخاصة بك.'
      6:
        image: notes/stage15_6.jpg
        text: 'ثم اضغط على النجمة. الآن، انت ترغب بالضغط على قسم المتغيرات وسحب قطعة "الطول" الى قطعة "التقدم للامام" لتعريف الدالة الخاصة بك. واسحب بعيداً قطعة الأرقام القديمة.'
      7:
        image: notes/stage15_7.jpg
        text: 'لاستخدام الدالة الخاص بك مع المعلمات، اضغط على قسم الدوال واسحب الدالة "ارسم مثلث مع الطول".'
      8:
        image: notes/stage15_8.jpg
        text: الآن يمكنك استخدام قطعة الرياضيات لإدخال أرقام مختلفة لرسم مثلثات ذات أحجام مختلفة.
    hoc_wrapup:
      1:
        image: |
          notes/hoc6_1.jpg
          
        text: تهانينا! مع حل اللغز الاخر، انت لقد كتبت الكود البرمجي الذي يمكن أن يخبر اي روبوت عن كيفية العثور على طريقها من خلال المتاهات غير المتفرعة أو الأنفاق بأي طول، سواء أكان الزومبي، الطيور، مارس روفر (عربة المريخ)، أو حتى سيارة ذاتية القيادة.
      2:
        image: |
          notes/hoc6_2.jpg
          
        text: 'الفكرة أو المفاهيم الأساسية التي أستخدمتها هى الجوهر لكل البرامج أو التطبيقات التي أستخدمتها في أي وقت مضى.  تعلمنا عن الحلقات المتكررة، عبارة "أكرر حتى", عبارة "أذا" و أيضاً عبارة "أذا والا".'
      3:
        image: |
          notes/hoc6_3.jpg
          
        text: إذا احببت الساعة الاولى من البرمجة ، قم بزيارة code.org لمواصلة تعلمك علوم الكمبيوتر! بمجرد إكمالك 20 ساعة من دورتنا التعليمية، ستكون قد أتقنت أساسيات البرمجة، ويمكن البدء بتعلم كيفية كتابة تطبيقات الهاتف الخليوي وأوامر الروبوت والألعاب، وأختر ما شئت.
      4:
        image: |
          notes/hoc6_4.jpg
          
        text: التكنلوجيا غيرت كل شي نقوم به، ولا يهم إذا كنت صغير أو كبير فالبرمجة متعة و إبداع، ويمكن للجميع تعلمها!
    20_wrapup:
      1:
        image: |
          notes/bird.png
          
        text: بيان الملاحظات قريبا!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
