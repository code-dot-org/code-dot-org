{
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/2": {
    "dsls": {
      "markdown": "# Getting started > Take the pre-survey\n\nWe want you to get as much as possible out of this professional development. For that reason, we ask you to fill out [this short pre-survey](https://form.jotform.com/90556900301146). The survey will ask you to reflect on your goals for this course and will tell us a little bit about who you are and how we can support you.\n\n<a class=\"btn btn-large btn-primary\" href=\"https://form.jotform.com/90556900301146?user_id=<user_id/>\">Take the pre-survey</a>\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/3": {
    "dsls": {
      "markdown": "# Getting Started > Computer Science Fundamentals Courses\n\nThe goal of Code.org's professional development is to prepare teachers like you to integrate computer science into their classrooms and support their growth as teachers. After completing this online course, you'll be ready to teach one or more of the following Code.org Computer Science Fundamentals courses in your classroom:\n\n - **[Course A](http://studio.code.org/s/coursea)**: approximately 12 hours (Kindergarten)\n - **[Course B](http://studio.code.org/s/courseb)**: approximately 12 hours (Grade 1)\n - **[Course C](http://studio.code.org/s/coursec)**: approximately 18 hours (Grade 2)\n - **[Course D](http://studio.code.org/s/coursed)**: approximately 18 hours (Grade 3)\n - **[Course E](http://studio.code.org/s/coursee)**: approximately 18 hours (Grade 4)\n - **[Course F](http://studio.code.org/s/coursef)**: approximately 20 hours (Grade 5)\n - **[Computer Science (CS) Fundamentals Express](http://studio.code.org/s/express)**: approximately 20 hours (Ages 8+)\n - **[Computer Science (CS) Fundamentals Pre-Express](http://studio.code.org/s/pre-express)**: approximately 20 hours (Ages 4-8)\n\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/4": {
    "dsls": {
      "markdown": "# Getting Started: About this Course\n\n## Course Overview\n\nThis course is intended as an introduction to Code.org's Computer Science Fundamentals curriculum and resources for teachers. Through reading, viewing videos, completing interactive puzzles and reflecting on your learning, you'll develop your own understanding while preparing to teach computer science in your classroom.\n\n## Learning Objectives\n\nBy completing this online course, participants will:\n\n- Learn the basics of computer science \n- Review best practices for teaching these basics to your students \n- Access free curriculum and resources for teachers \n- Plan for how you might get started teaching Computer Science Fundamentals\n- Connect with a community of fellow educators who are making positive change in their classrooms through coding \n\n## Pre-requisites\n\nNo previous experience with coding or computer science education is assumed. This is a beginner's course.\n\n> **A Note About Audience:** This course focuses on Code.org's free Computer Science Fundamentals curriculum in the context of  K-5 learners. Although many of the same concepts can be applied to any computer science course, if you wish to teach a more in-depth computer science curriculum than Computer Science Fundamentals (for example, one of our [Middle](https://code.org/educate/csd) or [High school](https://code.org/educate/csp) courses), we recommend you pursue more [in-depth or ongoing professional development opportunities](https://code.org/educate/professional-learning/middle-high).\n\n## Course Duration\n\nCompleting this online course should take between 3-7 hours, depending on your prior knowledge and how deeply you want to dive into the Code.org resources.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/5": {
    "dsls": {
      "markdown": "# Getting Started > Course Outline\n\nThe course is divided into eleven stages, and each stage is made up of \"levels\" or \"puzzles.\" Here's an overview of what you'll learn if you complete the entire course:\n\n## Stage 1: Getting Started (10-30 minutes)\n\nBy completing Stage 1, you will:\n\n- Review the course details\n- Practice using Code.org as a learning platform\n- Plan your participation in this course\n\n## Stage 2: Computer Science Fundamentals (10-30 minutes)\n\nBy completing Stage 2, you will:\n\n- Define computer science and review key vocabulary\n- Identify the benefits of teaching and learning computer science\n- Differentiate between \"coding\" and \"computer science\"\n- Explain the benefits of beginning to code using visual programming\n\n## Stage 3: Looking Ahead (10 minutes)\n\nBy completing Stage 3, you will:\n\n- Prepare to \"master the basics\" of computer science by reviewing what's next in the course\n\n## Stage 4: Mastering the Basics: Sequencing (10-30 minutes)\n\nBy completing Stage 4, you will:\n\n- Define \"program\" and \"algorithm\"\n- Use the Code.org visual programming engine to write simple programs\n- Reflect on classroom application\n\n## Stage 5: Mastering the Basics: Loops (20-45 minutes)\n\nBy completing Stage 5, you will:\n\n- Define \"loops\" and explain their importance\n- Practice coding simple loops\n- Reflect on classroom application\n\n## Stage 6: Mastering the Basics: Conditionals (20-45 minutes)\n\nBy completing Stage 6, you will:\n\n- Define \"conditionals\" and explain their importance\n- Practice coding simple conditionals\n- Reflect on classroom application\n\n## Stage 7: Mastering the Basics: Functions (20-45 minutes)\n\nBy completing Stage 7, you will:\n\n- Define \"functions\" and explain their importance\n- Practice coding simple functions\n- Reflect on classroom application\n\n## Stage 8: Mastering the Basics: Events (30-60 minutes)\n\nBy completing Stage 8, you will:\n\n- Define \"events\" and explain their importance\n- Practice coding simple events\n- Reflect on classroom application\n\n## Stage 9: Best Practices for Teaching Computer Science (30-60 minutes)\n\nBy completing Stage 9, you will:\n\n- Review best practices for teaching computer science\n\n## Stage 10: Planning (30-60 minutes)\n\nBy completing Stage 10, you will:\n\n- Explore Code.org resources, including the teacher dashboard\n- Plan for how you might integrate computer science into your practice\n\n## Stage 11: Next Steps (10-30 minutes)\n\nBy completing Stage 11, you will\n\n- Reflect on your learning\n- Plan for next steps you can take to continue your learning\n- Connect with a global community of fellow educators interested in computer science education\n- Share your takeaways and feedback on this course\n\n> **Note**: Suggested times are provided above to help you plan your learning. Please note that you may want to spend more or less time on a given stage, depending on your prior knowledge, interest and capacity. Keep in mind that this course is entirely self-paced; you can always leave the course and come back or revisit any stage or level at any time.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/6": {
    "dsls": {
      "markdown": "# Getting Started > Planning your participation\n\nBefore you begin, take a moment to consider your learning needs, goals and the unique experience of learning in an online, self-paced environment -- especially if this is your first online course!\n\n## You're the Boss\n\nThis self-paced online course is designed to put you in the driver's seat, and give you control over your own learning. ***Please take your time and work through this course at your own pace. Suggested times are given for each stage.*** If you find yourself spending more or less time on a given stage, don't worry! Our main goal is for you to have fun, learn the basics, and apply what you learn in your classroom practice in whatever way works best for you.\n\n## Get Connected\n\nOne way to help stay motivated and focused throughout your learning is to get active in our <a href=\"http://forum.code.org/c/plc\" target=\"_new\">Professional Learning Community (PLC) forum</a>. \nStart by introducing yourself there in our <a href=\"http://forum.code.org/t/welcome-please-introduce-yourself/410\" target=\"_new\">\"Introductions\" thread</a>. Throughout the course, you'll use the forum to asynchronously share your thoughts, takeaways and questions with others who are also working through the content.\n\n<a href=\"http://forum.code.org/t/welcome-please-introduce-yourself/410/1\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Introduce Yourself Now >></button></a><br>\n\n## Finding Help When You Need It\n\nIf you get stuck at any time during the course, head over to [support.code.org](http://support.code.org) and check out [our community forums](https://support.code.org/hc/communities/public/topics). You'll likely find the answer to your question there. If you don't or are still stuck, you can email [teacher@code.org](mailto:teacher@code.org) and a Code.org staff member will get back to you as soon as they can.\n\n## Buddy up!\n\nKeep in mind that we are a small team and due to the scale of our efforts, we can't respond to all requests for support in the same way an instructor could for a face-to-face course. For that reason, we encourage you to ***work through this online course with a partner or group of colleagues***.\n\nCode.org recognizes the power of peer learning and collaboration. In fact, \"Pair Programming\" is a great industry practice that we'll explore in Stage 8 as a classroom best practice. If you feel you'll learn better with a partner or in a group, why not complete the course with a buddy or a colleague? If you don't know anyone in real life who's interested in partnering with you, head over to [the PLC forum](http://forum.code.org/t/never-swim-alone-the-find-a-buddy-thread/411), [Twitter](https://twitter.com/teachcode), or [Facebook](https://www.facebook.com/groups/1457214714576953/) and find someone from the Code.org community who might want to collaborate.\n\n## Find the learning experience that works for you\n\nFinally, online learning is not for everyone. This course has no instructor or built-in mechanism for communicating in real-time with your peers. If you find yourself needing more one-on-one attention or know you learn better in a real-world classroom where there is more opportunity for collaboration and engagement, we recommend you pursue one of our in-person professional development opportunities.\n\n<a href=\"http://code.org/professional-development-workshops\" target=\"blank\" rel=\"noopener noreferrer\"><button>Find an in-person workshop near you >></button></a>\n\n* * *\n\n## What's your plan?\n\nTake a moment now to consider how and when you will complete this online course to ensure you get the most benefit from the experience. When you've got a good plan sketched out, continue on to dive more deeply into Stage 1.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/7": {
    "long_instructions": "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll complete this free, self-paced course using the same learning platform you can use in your classroom with your students. \n\nLet's start by learning a bit about what Computer Science (CS) Fundamentals is, and how it's worked for teachers and students around the globe. In the next level, we'll cover how to interact with the CS Fundamentals learning platform, which you'll be using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions of CS Fundamentals?\n>\n> [Tweet your thoughts][0] and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\" target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account? You can also find us on [Facebook][1] or [Instagram][2]."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/8": {
    "dsls": {
      "markdown": "# Getting Started > Navigating this Online Course\n\nIf you've made it this far, congratulations! As you complete this course, you'll familiarize yourself with everything CS Fundamentals has to offer.\n\nIf you find yourself having trouble, the information below will help you navigate and use this space for your professional learning as you complete this online course.\n\n---\n\n## Stages\n\nThe main professional development page is pictured below. This page is broken up into several __stages__, which each represent a different topic or idea.\n\n<img src =\"https://images.code.org/3f0fa0abc76fa6e6bde06bb4bc705202-image-1548976538784.png\" />\n\n<br/>\n<br/>\n\n## Puzzles\n\nEach stage is made up of levels that we call __puzzles__, which hold individual videos, readings, or questions. Puzzles are indicated as circles with numbers. The colors of the puzzle circle will change based on your progress. In this professional development you'll see the following types of circles:\n<br/>\n\n<img src =\"https://images.code.org/8b3fcfcf0120bed0dc34c014f1f81071-image-1548976153188.png\" />\n\n<br/>\n<br/>\n\n## Accessing Puzzles\n\nPuzzles are visible:\n<p>-On the main professional development page</p>\n<p>-On the header in any other puzzle on the same stage</p>\n<p>-From the header drop-down in any puzzle</p>\n\n<h4><details>\n<summary style=\"color:#ffa400;\">Click here to see more about accessing puzzles</summary>\n<br>\n<div><em>Once you're finished viewing this, click the arrow above to collapse the section</em></div>\n<br>\n<img src =\"https://images.code.org/27681ae1028bb26bcacd9970086c3792-image-1548976069596.gif\" />\n</details></h4>\n\n<br/>\n\n## Moving Between Puzzles\n\nClick \"Continue\" or \"Next Resource\" after each puzzle to progress to the next one. Or, at any point, you can jump to a new puzzle by clicking on that number in the header.\n\n<h4><details>\n<summary style=\"color:#ffa400;\">Click here to see more about moving between puzzles</summary>\n<br>\n<div><em>Once you're finished viewing this, click the arrow above to collapse the section</em></div>\n<br>\n<img src =\"https://images.code.org/d28046a78ecb03f9501f3bb7764c7ce8-image-1548976730590.gif\" />\n</details></h4>\n\n<br/>\n<br/>\n\n\n> That's all there is to it! Feel free to come back to this level any time if you need a refresher on how this platform works.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/1/levels/9": {
    "dsls": {
      "markdown": "# Getting Started > Ready? Set? Go!\n\n<img src=\"https://images.code.org/80a1fa04481359759d2b86ddca9b33a4-image-1433972662378.png\" class=\"level-image\">\n\nBy completing this stage, you should have:\n\n- Reviewed the course details\n- Learned how to navigate through the learning platform\n- Planned your participation in this course\n\nIn the next stage, we will:\n\n- Define \"computer science\" and review key vocabulary\n- Identify the benefits of teaching and learning computer science\n- Differentiate between \"coding\" and \"computer science\"\n- Explain the benefits of beginning to code using visual programming\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/1": {
    "dsls": {
      "markdown": "# CS Fundamentals > Stage overview\n\nIn Stage 1, you learned about this course and how to navigate the learning platform. Now you're ready to dive into the real content.\n\nLet's begin with some fundamentals.\n\n<img src=\"https://images.code.org/8af62f96e37199542519fae8580b0a29-image-1434146715374.jpg\" width=\"450px\" style=\"margin-right:45px; border-radius:10px;\">\n\nBy completing Stage 2, you will:\n\n- Define \"computer science\" and review key vocabulary\n- Identify the benefits of teaching and learning computer science\n- Differentiate between \"coding\" and \"computer science\"\n- Explain the benefits of beginning to code using visual programming\n\nPlan to spend between 10-30 minutes completing this stage.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/2": {
    "display_name": "What is computer science?",
    "long_instructions": "Have you ever wondered \"Exactly what is computer science?\" Or, \"Why are some computer programs written with words and some are written using images?\" If so, watch this video; it's a great introduction to the field of computer science."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/3": {
    "dsls": {
      "markdown": "# CS Fundamentals > Why teach computer science?\n\n<img src=\"//code.org/images/edquote1.png\" width=\"250px\" style=\"margin-right:45px; float:left\">\n\nResearch shows that computer science promotes critical thinking, creativity, problem-solving, and engagement in real-world skills. In fact, a [recent research study](https://medium.com/@codeorg/code-org-resourceful-teachers-higher-student-achievement-8be1efdec06e) found that classrooms with resourceful teachers see higher scores on English, math, and science standardized tests after teaching CS Fundamentals lessons.\n\nWhy would you want to teach computer science if you're not a STEM teacher? If you're taking this course, you likely have a number of your own answers to that question, but if you need further inspiration, take some time now and review [this video collection](http://code.org/educate/inspire) to get a sense of the \"why\". These videos are great to share with your students, your administration, parents, and your community if you need help making a case for CS in the classroom. You might also be interested in some of the statistics and evidence around CS education.\n\n<a href=\"http://code.org/educate/inspire\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"default\">Explore inspirational videos >></button></a><a href=\"http://code.org/promote\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"default\">Explore research >></button></a>\n\nSpend a few moments exploring our research and make note of any relevant or interesting facts or insights you discover.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/4": {
    "dsls": {
      "markdown": "# Why teach computer science in the early grades?\n\n<img src=\"https://images.code.org/0149da542dae03da5f40b7b8aacf73c0-image-1434818868152.jpg\" class=\"level-image\">\n\nIn addition to the computational thinking practices students learn through coding experience, teaching computer science in the early grades has an additional benefit for students and for society &mdash; we can work to create more equity in the tech industry.\n\nIf we wait until high school or college to introduce students to computer science, some students will already have decided that computer science is not for them or they will feel that they are already too far behind compared to students who study it outside of school.\n\nExposing students to computer science in grades K-5, when they don't have to opt-in to a class like they might in high school, allows all students to see how accessible the subject is, and decide if they enjoy it.\n\n> ## Why do you believe teaching computer science is worthwhile?\n[Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.\n\n> <a href=\"http://ctt.ec/Bfjw3\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"default\">Share on Twitter >></button></a><br><br>\nDon't have a Twitter account? You can also find us on [Facebook](https://www.facebook.com/Code.org/) or [Instagram](https://www.instagram.com/codeorg/).\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/5": {
    "dsls": {
      "markdown": "# CS Fundamentals > Key Vocabulary\n\nAs you begin to learn computer science, one of the most important tasks is to become familiar with the language of coding. In this course and throughout the CS Fundamentals resources, we use the same vocabulary used in the computer science industry. Encouraging young students to learn and use professional terms enables them to communicate with others and build their knowledge in computer science without having to relearn terms and concepts later. The terms and concepts used in these courses are defined using words that most young students should be able to understand.\n\nHere is a [list of vocabulary terms](http://code.org/curriculum/docs/k-5/glossary) used throughout the CS Fundamentals resources; many of these terms are introduced in this course as well. You don't have to learn all these words right now. Use that list as a reference during this online professional development course and when you use our courses with your students.\n\n<a href=\"http://code.org/curriculum/docs/k-5/glossary\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"default\">View the Glossary >></button></a>\n\n> **Teaching Tip:** Best practice is to introduce the terms with easy-to-understand language, relate the terms to previous experiences, use the terms repeatedly beyond the lesson itself throughout the entire course (and in other situations) when appropriate, and reinforce students' use in oral and written communication.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/2/levels/6": {
    "dsls": {
      "markdown": "# CS Fundamentals > Looking Ahead\n\nWe hope this stage gave you a good introduction to computer science.\n\nBy completing this stage, you should be able to:\n\n- Define \"computer science\" and reviewed key vocabulary\n- Identify the benefits of teaching and learning computer science\n- Differentiate between \"coding\" and \"computer science\"\n- Explain the benefits of beginning to code using visual programming\n\n> **Teaching Tip:** While computer science can be a rich and complex discipline, at Code.org we recognize that teachers and students need to master the basics before diving in to higher-level projects. This online course teaches you, the teacher, those basics so that you can support your students in doing so as well.\n\nIn the next stage, we'll briefly introduce you to some frameworks for thinking about the rest of the content in this course. Then, we'll dive right in and start learning computer science.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/3/levels/1": {
    "dsls": {
      "markdown": "# Looking Ahead > Stage Overview\n\n<img src=\"https://images.code.org/0b8c948f309ae1df3d9920520e4a168c-image-1435004357188.JPG\" width=\"450px\" style=\"border-radius:10px;\">\n\nBy completing this brief stage, you will:\n\n- Prepare to \"master the basics\" of computer science by reviewing what's next in the course\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/3/levels/2": {
    "dsls": {
      "markdown": "# Looking Ahead > All About Puzzles\n\nIn the stages that follow, you're going to be using Code.org to learn the basics of computer science. You'll be challenged with a series of puzzles that need to be solved. In order to solve the puzzles, you'll have to write programs using different characters to complete different goals. We'll practice with our first puzzle in Stage 3. But before we get there, here's an overview of the different kinds of the puzzles you and your students will encounter:\n\n## Sample Maze Puzzles\n\n![](//code.org/images/mockup_birds.png)\n![](//code.org/images/pvz.png)\n\nYou'll need to get the angry bird to the pig, and you'll need to get the zombie to the sunflower.\n\n## Sample Artist Puzzle\n\n![](//code.org/images/artist.png)\n\nYou have to make the artist draw over the grey lines by moving him around the canvas. He'll draw a line behind him wherever he goes.\n\n## Sample Bee Puzzle\n\n![](//code.org/images/bee.png)\n\nYou'll need to move the bee around to collect all the nectar and make all the honey. The units of nectar and honey needed for each puzzle are written in the lower right-hand corner of each flower or honeycomb.\n\n## Play Lab\n\n![](//code.org/images/playlab.png)\n\nIn Play Lab, you'll create games and stories based on different goals.\n\n## Flappy\n\n![](//code.org/images/flappy.png)\n\nIn Flappy, you'll create your very own Flappy bird game.\nThe puzzles leading up to the game creation help you learn pieces of code you'll need for your game.\n\n## Bounce\n\n![](//code.org/images/bounce.png)\n\nIn Bounce, you get to create your own game. \nJust like in Flappy, the puzzles leading up to the game creation help you learn pieces of code you'll need for your game.\n\n* * *\n\nIn this series, we will introduce you puzzles from [CS Fundamentals](http://code.org/educate/k5). These puzzles serve as online tutorials, helping students to learn concepts like loops, events, conditionals, and functions.\n\nDuring this professional development experience, we will intersperse several puzzle progressions, giving you the chance to get familiar with the programming concepts in CS Fundamentals and the characters that your students will fall in love with. During this course, you'll notice that you move between different environments quickly; be it getting the angry bird to the pig, making a drawing, or having a bee collect nectar. These transitions happen quickly in this course to show you a range of the puzzles offered in CS Fundamentals. Your students will get to spend more time with each environment.\n\nIf you'd like to get more familiar with the student experience, you can always complete [CS Fundamentals](http://studio.code.org/) courses on your own anytime. But this course will give you a good flavor of what to expect by pulling out some of the most fundamental puzzles and lessons for you in a short amount of time.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/3/levels/3": {
    "long_instructions": "## Looking Ahead > Getting \"Unplugged\"\n\n<img src=\"https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG\" class=\"level-image\">\n\nIn teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually \"unplugged,\" or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.\n\nThat's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.\n\nWatch the video below to understand the benefits of using unplugged activities to teach computer science.\n\n**As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/3/levels/4": {
    "dsls": {
      "markdown": "# Looking Ahead > What is mastery?\n\nIn the stages that follow, you will master the following basic core concepts of computer science:\n\n- Stage 4: Sequencing\n- Stage 5: Loops\n- Stage 6: Conditionals\n- Stage 7: Functions\n- Stage 8: Events\n\n## What is \"mastery\"?\n\nWe define \"mastery\" as being able to do the following:\n\n- Define and explain what is meant by the core concept, and why it's important in computer science\n- Write simple programs applying the concept (by using visual programming to solve puzzles)\n- Reflect on how you might integrate the concept into your practice\n\nUse this list as your rubric as you work through the course. As you complete each stage, ask yourself:\n\n- Can I define and explain the importance of this particular core concept at a beginner level?\n- Was I able to successfully complete the simple puzzles in this stage?\n- Do I have a few ideas on how I might use this in my classroom?\n\nIf you answer yes to each question, proceed to the next stage. If you answer no to any of the questions, consider revisiting the stage or exploring more about the topic in the student side of Code Studio before moving on.\n\n## Things to keep in mind while learning computer science:\n\n- The world of computer programming moves so fast that there really are no masters. **We're all learners** at different stages but we are still always learners.\n- Programming becomes more comfortable every time you come back to it. **You're not going to be an expert your first time.**\n- There's no way around it, the act of programming and **learning to program takes time, but anyone can do it!**\n\n> **Key Takeway:** The goal of the next several stages is not to turn you into a computer scientist, but to instead help you feel comfortable enough with the core concepts that you are excited to share your knowledge with your students.\n\n## After I \"master\" the concepts, what comes next?\n\nIn **Stage 9**, you'll explore Code.org's free curricula and resources for teachers. You can choose to use any of these resources or other curricular resources of your choosing. Completing this course will give you the basics you need to understand any beginning computer science curriculum.\n\nIn **Stages 10 and 11**, we'll point you in the direction of resources you can use to learn more or feel more prepared to teach these concepts in your classroom.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/1": {
    "dsls": {
      "markdown": "# Sequencing > Stage Overview\n\n<img src=\"https://images.code.org/06b4f5c946f2a47176706352d9dbbb56-image-1434152393531.JPG\" width=\"450px\" style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\">\n\nBy completing Stage 4, you will:\n\n- Define \"algorithm\" and \"program\"\n- Write programs using blocks of code\n- Reflect on classroom application\n\n> **What to Expect in this Stage:** In the levels that follow, we'll start with an unplugged lesson plan to introduce you to a concept, to model how you would introduce ideas to students in your classroom. Then, we will provide you with video instruction and introduce you to a series of puzzles and ask you to apply your learning. In order to complete a puzzle, you'll need to write code using Blockly code blocks. These lessons are from Course A, which is meant for Kindergarten students. We'll close with an opportunity to reflect on how you might teach this concept to your students. You should spend between 10-30 minutes on this stage.\n\nReady? Let's go!\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Sequencing > Unplugged Lessons\n\nAs we mentioned, we like to introduce computer science topics with unplugged lessons. Then, we use bridging activities to transition into the online lessons later. Beginning with these unplugged lessons introduces concepts in a fun and friendly way. Then, students already feel familiar with the concept by the time that they get to the online lessons, and can relate the online lessons back to the unplugged activity.\n\nFor these programming stages that you will be going through, we will also start with examples of unplugged lessons. Read through the following lesson plan and watch the accompanying videos, thinking about how you would implement this in your classroom with your students.\n<br/>\n***\n<br/>\nWe will start with sequencing. At its base, this style of computer science is about **sequences**. A sequence is a special ordering that something follows. In these puzzles, we want to find the right sequence of instructions to tell the computer what to do. This list of instructions is called an **algorithm**.  Once that algorithm gets coded up into a language that can be read by a machine, it becomes a **program**.\n<br/>\n<br/>\n\n**1. Review the \"[Happy Maps](https://curriculum.code.org/csf/coursea/5/)\" Lesson Plan from Course A.**\n<br/>\nRemember that Course A is meant for Kindergarten students. Sequencing comes up in other courses, as well, and you can find examples of those lessons at the bottom of this page.\n\n<br/>\n\n**2. Watch the student video: Happy Maps**\n<br/>\nThis is a video that you would show your students to help introduce the concept of sequencing and kick off the unplugged lesson.\n\n[![](https://images.code.org/f00fb02e8f24d57e88d396eb0f2c5cce-image-1571253011379.09.54 PM.png)](https://youtube.com/watch?v=hrnhiKAQ1_k)\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-happy-maps-unplugged.mp4)  \n\n<br/>\n\n**3. Watch the teacher video: How to facilitate \"Happy Maps\"**\n<br/>\n\n[![](https://images.code.org/ab93b99493bfe68acc24aaaaf66d4129-image-1571253013543.10.01 PM.png)](https://youtube.com/watch?v=En6Bshuqljg)\n\n<br/>\n\n\n**4. Review other unplugged lessons that introduce sequencing:**\n\n- Course A (Kindergarten): [Real-Life Algorithms: Plant a Seed](https://curriculum.code.org/csf-18/coursea/3/)\n- Course B (Grade 1): [My Robotic Friends Jr.](https://curriculum.code.org/csf-18/coursea/3/), [Move It, Move It](https://curriculum.code.org/csf-18/courseb/1/)\n- Course C (Grade 2): [Paper Planes](https://curriculum.code.org/csf-18/coursec/4/)\n- Course D (Grade 3): [Graph Paper Programming](https://curriculum.code.org/csf-18/coursed/1/)\n- Course E, Course F (Grades 4, 5): [My Robotic Friends](https://curriculum.code.org/csf-18/coursee/1/)\n\n\n---\n\n\n> ## Reflect\n> How would you explain the concept of programming (including sequencing and algorithms) to your students? Share your thoughts in <a href=\"http://forum.code.org/t/teaching-sequencing/408\">our forum</a>.\n\n> <a href=\"http://forum.code.org/t/teaching-sequencing/408\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on.\n\nIn the next stage, we'll add some complexity to our programs through the addition of loops.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/3": {
    "long_instructions": "Watch the video below, which explains the very first program that young students will write in [Course A][0]. On the next page, you'll get to write a similar program of your own!"
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/4": {
    "short_instructions": "Try this one yourself from the beginning.",
    "long_instructions": "Try this one yourself from the beginning.\n\n[expandable][0]",
    "authored_hints": {
      "courseA_maze_seq5_a": "Try writing down the steps on paper to find a solution!",
      "courseA_maze_seq5_b": "You will need 2 blocks, pointing in 2 directions."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/5": {
    "short_instructions": "Move one way, then another to get the bird to the pig!",
    "long_instructions": "Move one way, then another to get the bird to the pig!\n\n[expandable][0]",
    "authored_hints": {
      "courseA_maze_seq6_a": "Your final code should have 3 movement blocks.",
      "courseA_maze_seq6_b": "If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/6": {
    "short_instructions": "Figure out what is missing and then add blocks to get the bird to the pig!",
    "long_instructions": "Figure out what is missing and then add blocks to get the bird to the pig!\n\n[expandable][0]",
    "authored_hints": {
      "courseA_maze_seq7_a": "There is 1 block that you need to add to move the bird to the pig.",
      "courseA_maze_seq7_b": "If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/7": {
    "short_instructions": "Solve this level and get the bird to the pig!",
    "long_instructions": "Solve this level and get the bird to the pig!\n\n[expandable][0]",
    "authored_hints": {
      "courseA_maze_seq8_a": "If you're stuck, try drawing the image on paper to see how the bird should move."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/8": {
    "short_instructions": "Challenge: Go around the TNT to get the bird to the pig! ",
    "long_instructions": "**Challenge:** Go around the TNT to get the bird to the pig!\n\n[expandable][0]",
    "authored_hints": {
      "courseA_maze_seq10_a": "If you're having trouble, try writing down the steps on a piece of paper first.",
      "courseA_maze_seq10_b": "You will need to go 3 directions to solve this puzzle."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/4/levels/9": {
    "dsls": {
      "markdown": "# Sequencing > Reflect\n\nCongratulations! You just wrote some code. You are officially a programmer! Our platform tracks how many lines of code you've written, and will tell you after every puzzle!\n\n---\n\nDid you notice that the last puzzle was a little more difficult?  It was a **challenge** puzzle.  Challenge puzzles are meant to stretch the boundaries of what students will do.  We make it clear that they should be attempted, but do not require that they be completed for students to succeed for the lesson.\n\n<img src=\"https://images.code.org/e3b9903cf4acc68be5c01c4118b3d53d-image-1434152749660.JPG\" width=\"450px\" style=\"margin-right:45px; border-radius:10px;\">  \n\n---\n\n**Take a moment now to review how sequencing (including programming and algorithms) are introduced in the CS Fundamentals curriculum, and think about how you might implement the suggested activities in your classroom.**\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/1": {
    "dsls": {
      "markdown": "# Loops > Stage 5 Overview\n\nThis stage builds on your first programming experience by adding the core concept of **loops**.\n\n<img src=\"https://images.code.org/fcd3262b1c25e70426ac90e6f9fa65ac-image-1434152998854.JPG\" width=\"450px\" style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\">\n\nBy completing Stage 5, you will:\n\n- Practice coding simple loops\n- Reflect on classroom application\n\n> **What to Expect in this Stage:** In the levels that follow, we'll introduce an unplugged lesson and a series of puzzles from Course C (meant for Grade 2) that focus on the concept of loops. In order to complete a puzzle, you'll need to write code using visual, block-based programming. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.\n\nReady? Let's go!\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/2": {
    "dsls": {
      "markdown": "# Loops > Unplugged Lessons\n\nIn this stage, we saw how adding loops to a program is more efficient when coding repetitive actions. In the next stage, we'll look at coding **if-statements** and other conditionals.  \n<br/>\n\n**1. Review \"[Getting Loopy](https://levelbuilder.code.org/curriculum/coursec/7/Teacher)\" Lesson Plan from Course C:**\n<br/>Course C is meant for Grade 2 students. Loops comes up in other courses, as well, and you can find examples of those lessons at the bottom of this page.\n\n<br/>\n\n**2. Watch the student video: Getting Loopy**\n<br/>\nThis is a video that you would show your students to help introduce the concept of loops and kick off the unplugged lesson.\n\n[![](https://images.code.org/eb585fcc71f5f1d2fa4d3bcddcf74b8b-image-1571253274522.14.26 PM.png)](https://www.youtube.com/watch?v=JoKTqHCni0M)\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-getting-loopy.mp4)\n\n<br/>\n\n**3. Watch the teacher video: How to facilitate \"Getting Loopy\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson. \n[![](https://images.code.org/fc594434f8b6869b1db1872fc85ca309-image-1571253220717.13.14 PM.png)](https://www.youtube.com/watch?v=Vo2woYRRogA)\n\n\n<br/>\n\n**4. Review other unplugged lessons that introduce loops:**\n\n- Course A (Kindergarten): [Happy Loops](https://curriculum.code.org/csf-18/coursea/9/)\n- Course B (Grade 1): [My Loopy Robotic Friends Jr.](https://curriculum.code.org/csf-18/courseb/8/)\n- Course E, F (Grade 4, 5): [My Loopy Robotic Friends](https://curriculum.code.org/csf-18/coursee/6/)\n\n***\n\n> ## Reflect\n> How would you explain the concept of loops to your students?<br><br> [Share your thoughts in our forum.](http://forum.code.org/t/teaching-loops-and-efficiency/405/1)\n\n> <a href=\"http://forum.code.org/t/teaching-loops-and-efficiency/405/1\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/3": {
    "long_instructions": "Watch the video below, which explains how loops work and introduces the 'Repeat' block in CS Fundamentals."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/4": {
    "short_instructions": "To get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
    "long_instructions": "[][0] _\"Go BB-8!\"_\n\nTo get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
    "authored_hints": {
      "courseC_starWars_loops2_a": "To repeat code, drag out a `repeat` loop, then put the block you want inside of it."
    },
    "callouts": {
      "courseC_starWars_loops2": "You only have one of these blocks available in this puzzle."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/5": {
    "short_instructions": "In this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
    "long_instructions": "[][0] _\"Keep it up, BB-8.\"_\n\nIn this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
    "authored_hints": {
      "courseC_starWars_loops4_c": "Clicking on the small arrow next to \"left\" on the turn block will let you change it to  \"right\".",
      "courseC_starWars_loops4_a": "Use two `repeat` blocks.",
      "courseC_starWars_loops4_b": "Each `repeat` loop will have only one command inside of it: `move forward`."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/6": {
    "short_instructions": "Get BB-8 to pick up all the scrap metal as quickly as possible!",
    "long_instructions": "[][0] _\"Go BB-8!\"_",
    "authored_hints": {
      "courseC_starWars_loops5_b": "To move down, you have to turn and then move forward.",
      "courseC_starWars_loops5_a": "The best solution uses a turn, then a single `move forward`, another turn, then a loop."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/7": {
    "short_instructions": "Loops even work with more than one block inside!  Can you loop this sequence?",
    "long_instructions": "[][0] _\"Can you get it all?\"_\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
    "authored_hints": {
      "courseC_starWars_loops6_a": "Try writing all of the moves down on a piece of paper and looking for a pattern.",
      "courseC_starWars_loops6_b": "If you want to use less code, you can put one `repeat` loop inside of another!\\\nThis is called a **nested loop**."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/8": {
    "short_instructions": "Can you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
    "long_instructions": "[][0] _\"You can do it!\"_\n\nCan you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
    "authored_hints": {
      "courseC_starWars_loops7_a": "This pattern looks harder than it is! Start with a simple stair step. Does that cover all of the scrap metal?",
      "courseC_starWars_loops7_b": "If you are having trouble with this puzzle, try writing all of the moves on a piece of paper and looking for a pattern.",
      "courseC_starWars_loops7_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/9": {
    "long_instructions": "[][0] _\"Keep it up, BB-8.\"_\n\n**Challenge:** Combine ideas from the last few puzzles to complete this level.",
    "authored_hints": {
      "course_starWars_loops8_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
      "course_starWars_loops8_b": "Think of the first half of this problem as a stair step problem. How did you solve that before?",
      "course_starWars_loops8_c": "Take a look at this path.\n\n[][0]"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/5/levels/10": {
    "dsls": {
      "markdown": "# Loops > Reflect\n\nIn this stage, we explored how loops can be used to make code more efficient. In the next stage, we'll look at how conditionals can help add logic to a program.\n\n**Take a moment now to review how loops are introduced in the CS Fundamentals curriculum. Consider how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/c6dca0407f5a517823f7e71b8da3880b-image-1549050118354.jpg)\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/1": {
    "dsls": {
      "markdown": "# Conditionals > Stage Overview\n\n<img src=\"https://images.code.org/d2c2e06ce0bef52ae173a1de35b92af7-image-1470945682161.png\" width=\"450px\"  style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\"/>\n\nSo far, you've written a simple program and added loops to increase efficiency. In this stage, we'll explore **if-statements** which begin to add logic to your program.\n\nBy completing Stage 6, you will:\n\n- Practice coding simple conditionals\n- Reflect on classroom application\n\n>**What to Expect in this Stage:** We'll first introduce an unplugged lesson from Course D (meant for Grade 3) that introduces the idea of conditionals. Then, you will complete a series of puzzles will ask you to apply your learning using conditionals. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.\n\nReady? Let's go!\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/2": {
    "dsls": {
      "markdown": "# Conditionals > Unplugged Lessons\n\n\n**1. Review \"[Conditionals with Cards](https://curriculum.code.org/csf-18/coursed/13/)\" Lesson Plan from Course D:** \n<br/>\nCourse D is meant for Grade 3 students. This same lesson also appears in Course E and Course F. Conditionals are not covered in Courses A, B, or C.\n<br/><br/>\n\n**2. Watch the student video: Conditionals with Cards**\n<br/>\nThis is a video that you would show your students to help introduce the concept of conditionals and kick off the unplugged lesson.\n[![](https://images.code.org/3e6b0d2fc5a0beb4e6211d0571d190d3-image-1571253527382.18.41 PM.png)](https://www.youtube.com/watch?v=UymN4lTL50s)\n<br/>\n[Can't see the video? Click here](http://videos.code.org/2014/C2-conditionals-with-cards.mp4)\n\n<br/><br/>\n**3. Watch a teacher model this lesson: \"Conditionals with Cards\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson. \n\n\n[![](https://images.code.org/3899707f84b1f69360c98f73c5a9c640-image-1571253595879.19.37 PM.png)](https://www.youtube/watch?v=2m2Rn9VxHfU)\n\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/unplugged-lessoninaction-conditionalswithcards-mp4.mp4)\n\n<br/><br/>\n\n---\n\n> ## Reflect\n> How would you explain the concept of conditionals to your students? Share your thoughts in [our forum](http://forum.code.org/t/teaching-conditionals/406/1).\n\n> <a href=\"http://forum.code.org/t/teaching-conditionals/406/1\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/4": {
    "short_instructions": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
    "long_instructions": "_\"This cloud is blocking my view!\"_\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
    "authored_hints": {
      "courseD_bee_conditionals1_a": "You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar."
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "The bee will move to the cloud and try to get nectar, no matter what. ",
              "correct": false,
              "feedback": "Incorrect. The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud."
            },
            {
              "text": "The bee will move to the cloud and only try to get nectar if there is a flower underneath.",
              "correct": true,
              "feedback": "Correct!"
            },
            {
              "text": "The bee will move to the cloud and then do nothing, no matter what. ",
              "correct": false,
              "feedback": "Incorrect. The `if at flower` block assures that the bee will try to get nectar if there is a flower under the cloud."
            },
            {
              "text": "I don't know.",
              "correct": false,
              "feedback": "The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud."
            }
          ],
          "questions": [
            {
              "text": "The cloud is blocking the view. There could be a flower under this cloud. If there is a flower, the bee will need to collect nectar once. If there is not a flower the bee should do nothing. Take a good look at the code below. What do you think will happen after you click \"Run\"?"
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/5": {
    "short_instructions": "Check underneath every cloud to see if it is hiding a flower before you get nectar.  ",
    "long_instructions": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar _once_.  \n\nRemember: Not all clouds hide the same thing!",
    "authored_hints": {
      "courseD_bee_conditionals2_hintVid1": "Need help getting started?  Watch the video!",
      "courseD_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
      "courseD_bee_conditionals2_b": "You can use a `repeat` loop or a `while path ahead` to move through this maze.",
      "courseD_bee_conditionals2_c": "You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.",
      "courseD_bee_conditionals2_hintVid2": "Watch this video for help solving this puzzle."
    },
    "callouts": {
      "4_5_Bee_Conditionals_2_1": "Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.",
      "4_5_Bee_Conditionals_2_2": "Need help?  Click here for a VIDEO hint!"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/6": {
    "short_instructions": "Help the bee collect all of the nectar. \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
    "long_instructions": "You can only collect nectar from flowers, but you can check any space to see if there is a flower. If there is a flower under any of these clouds, the bee will need to collect nectar _once_.",
    "authored_hints": {
      "courseD_bee_conditionals3_hintVid1": "Need help getting started?  Watch the video!",
      "courseD_bee_conditionals3_a": "Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.",
      "courseD_bee_conditionals3_b": "You can use a `repeat` loop or a `while` loop to keep the bee moving forward. Use whichever one you like!",
      "courseD_bee_conditionals3_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
      "courseD_bee_conditionals3_hintVid2": "Watch this video for help solving this puzzle."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/7": {
    "short_instructions": "Get all of the nectar using as few blocks as possible.",
    "long_instructions": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
    "authored_hints": {
      "courseD_bee_conditionals4_hintVid1": "Need help getting started?  Watch the video!",
      "courseD_bee_conditionals4_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
      "courseD_bee_conditionals4_b": "Use an `if` statement inside your loop to check each space for nectar. ",
      "courseD_bee_conditionals4_c": "Using [blockly block][0] block, you should move forward and check for a flower. If there is a flower, what should the bee do?",
      "courseD_bee_conditionals4_hintVid2": "Watch this video for help solving this puzzle."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/8": {
    "short_instructions": "Collect all of the nectar using as few blocks as possible",
    "authored_hints": {
      "courseD_bee_conditionals5_hintVid1": "Need help getting started?  Watch the video!",
      "courseD_bee_conditionals5_a": "Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` loop on the inside. How many paths does the bee need to buzz down if the bee needs to buzz down every side with a flower?",
      "courseD_bee_conditionals5_c": "There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. `if there is a flower`, the bee should `get nectar`.",
      "courseD_bee_conditionals5_b": "Inside the `while there is a path ahead` block you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?",
      "courseD_bee_conditionals5_hintVid2": "Watch this video for help solving this puzzle."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/6/levels/9": {
    "dsls": {
      "markdown": "# Conditionals > Reflect\n\nIn this stage, we explored how conditionals help programmers add logic to their code. In the next stage, we'll look at how functions can help you take your coding to the next level.  \n\n**Take a moment now to review how conditionals are introduced in the CS Fundamnetals curriculum, and how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/6335e7aa128d84c96ac402005cd9a3bb-image-1549053033052.jpg)\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/1": {
    "dsls": {
      "markdown": "# Functions > Stage Overview\n\n<img src=\"https://images.code.org/6ac5cc9f26b87a62b0558947d4cfd457-image-1501267730981.jpg\" width=\"450px\" style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\">\n\nIn the first few stages, you've learned how to write a program, add loops, and use conditionals. In this stage, we'll introduce the concept of **functions**.\n\nBy completing Stage 7, you will:\n\n- Practice coding simple functions\n- Reflect on classroom application\n\n> **What to Expect in this Stage:** First, you will look at an unplugged lesson from Course E (meant for Grade 4) that introduces functions. Then you'll learn about functions through video, and practice using functions in a variety of puzzles. You'll then reflect on your practice. You should spend between 20-45 minutes on this stage.\n\nReady? Let's go!\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/2": {
    "dsls": {
      "markdown": "# Functions > Unplugged lessons\n\nProgrammers are always looking for ways to make their code more efficient. One way that they do that is through **functions**, which allow them to reuse segments of code\n\n**1. Review \"[Functions: Songwriting](https://curriculum.code.org/csf-18/coursee/14/)\" Lesson Plan from Course E.**\n<br/>\nCourse E is meant for students in Grade 4. Functions are not covered in Courses A-D. \n\n<br/>\n\n**2. Watch the student video: Functions: Songwriting**\n<br/>\nThis is a video that you would show your students to help introduce the concept of functions and kick off the unplugged lesson.  \n\n[![](https://images.code.org/7fe2de2239edca27f26ae77cd0dc4c35-image-1571253900570.24.39 PM.png)](https://youtube.com/watch?v=5iDCKkI6y2Y)\n\n<br/>\n\n[Can't see the video? Click here](http://videos.code.org/2014/C3-songwriting-with-parameters.mp4)\n\n<br/>\n\n**3. Watch a teacher model this lesson: \"Functions: Songwriting\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson.\n[![](https://images.code.org/cfa0204ea2de0de27dab274369069a58-image-1571253902872.24.46 PM.png)](https://youtube.com/watch?v=QuIMLel1mmw)\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/unplugged-lessoninaction-songwritingwithfunctions-mp4.mp4)\n<br/>\n\n---\n\n> ## Reflect\n> How would you explain the concept of functions to your students? Share your thoughts in <a href=\"http://forum.code.org/t/teaching-functions/407/1\" target=\"blank\" rel=\"noopener noreferrer\">our forum</a>.\n\n> <a href=\"http://forum.code.org/t/teaching-functions/407/1\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/4": {
    "short_instructions": "Help the zombie draw glasses using squares with sides of 100 pixels.\\\nThe bridge between the glasses is 75 pixels long.",
    "long_instructions": "_\"Me zombie artist. Me love drawing!\"_\n\nHelp the zombie draw glasses using squares with sides of 100 pixels.\\\nThe bridge between the glasses is 75 pixels long.",
    "authored_hints": {
      "courseE_artist_functions1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
      "courseE_artist_functions1_b": "It is okay to draw overlapping lines to make your glasses.",
      "courseE_artist_functions1_c": "For shorter code, try using a `repeat` loop to draw the square frames of the glasses."
    },
    "callouts": {
      "courseD_artist_functions1_1": "Let's start by using this block to help create the first square."
    },
    "function_definitions": {
      "draw ear stems": {
        "name": "draw ear stems"
      }
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/5": {
    "long_instructions": "Here is a puzzle that uses a function that we have defined. ",
    "function_definitions": {
      "draw a square": {
        "name": "draw a square"
      },
      "draw ear stems": {
        "name": "draw ear stems"
      }
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "Nothing. The function is not called in the program.",
              "correct": false,
              "feedback": "Incorrect. The function is actually called two times in the program."
            },
            {
              "text": "The artist will draw a single square.",
              "correct": false,
              "feedback": "Incorrect. The function is actually called two times in the program."
            },
            {
              "text": "The artist will draw two squares that overlap.",
              "correct": false,
              "feedback": "Incorrect. The length of each side of the square is only 100 pixels, but the artist jumps by 175 pixels between functions."
            },
            {
              "text": "The artist will draw two squares with a small gap in between.",
              "correct": true,
              "feedback": "Correct! The function is called two times in the program, with a jump in between."
            }
          ],
          "questions": [
            {
              "text": "What will happen when you press \"Run\"?"
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/6": {
    "short_instructions": "This time, use the `draw a square` function to create the glasses. ",
    "long_instructions": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n\n* * *\n\nThe squares are 75 pixels apart.",
    "authored_hints": {
      "courseD_artist_functions2_b": "The function you write should not contain your whole program, just the part that draws a square with 100 pixel sides.",
      "courseD_artist_functions2_c": "Use the green `draw a square` block to \"call\" your function under the `when run` block. Otherwise, the code in your function will not run.\n\n[blockly block][0]",
      "courseD_artist_functions2_a": "Your program should:\n\n-   Use function\n-   Move forward 100 + 75 pixels\n-   Use function"
    },
    "callouts": {
      "courseD_artist_functions2_1": "When this green block runs, all of the code in the function will run. What should the artist do after drawing the first square?"
    },
    "function_definitions": {
      "draw a square": {
        "name": "draw a square"
      },
      "draw ear stems": {
        "name": "draw ear stems"
      }
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/7": {
    "short_instructions": "You can make this drawing by adding a repeat block.",
    "long_instructions": "We will come back to functions shortly. Let's take a break to practice making this star. \n\nYou can make this drawing by adding a repeat block.",
    "authored_hints": {
      "courseD_artist_functions3_a": "To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.\n\nIf you can't remember what the starter code was, click \"start over\" in the upper right corner of the workspace.",
      "courseD_artist_functions3_b": "Your loop should have all 3 starter code blocks inside of it."
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/8": {
    "short_instructions": "Now that you can draw a star, try drawing four stars!",
    "long_instructions": "Now that you can draw a star, try drawing four stars!\n\n-   Each branch of the star is 25 pixels long\n-   Turn 45 degrees between branches\n-   Jump 100 pixels between each star",
    "authored_hints": {
      "courseD_artist_functions4_a": "Try using a function!",
      "courseD_artist_functions4_b": "Drag the `draw a star` function block out of the toolbox to begin building your function. It should have the same code as the previous puzzle, since you are drawing the same star pattern.",
      "courseD_artist_functions4_c": "Use the green `draw a star` block to call this function in your main program. Don't forget to jump forward between each star!"
    },
    "function_definitions": {
      "draw a star": {
        "name": "draw a star"
      }
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/9": {
    "short_instructions": "Draw only those three stars to finish this puzzle.",
    "long_instructions": "When is drawing three stars harder than drawing four? When you also have to jump over the moon!\n\nDraw only those three stars to finish this puzzle.",
    "authored_hints": {
      "courseD_artist_functions5_a": "Don't give up!  Remember what you have been learning.",
      "courseD_artist_functions5_b": "Functions make it easy to call saved code at any time, not just from inside a loop!",
      "courseD_artist_functions5_c": "Start by dragging the code for a star shape into the `draw a star` function, then use this function to draw the three stars!"
    },
    "function_definitions": {
      "draw a star": {
        "name": "draw a star"
      }
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/7/levels/10": {
    "dsls": {
      "markdown": "# Functions > Reflect\n\nIn this stage, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next stage, we'll look at the core concept of events and put your coding skills to the test.\n\n**Take a moment now to review how functions are introduced in the CS Fundamentals curriculum and consider how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/47e2d3956aaafb745e462f0017c2a2b1-image-1549053916687.jpg)\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/1": {
    "dsls": {
      "markdown": "# Events > Stage Overview\n\n<img src=\"https://images.code.org/319df539d56b2795d659a56e9334a5fb-image-1434397946590.JPG\" width=\"450px\" style=\"border-radius: 10px; float: right; margin: 0 0 40px 40px;\">\n\nThus far, you've learned how to sequence a program, add loops, and use conditionals and functions. You're almost done!   \n\nIn this stage, we're going to look at *events*, another core concept in computer science. As we explore events, you will synthesize what you've learned so far and write some more complex programs.\n\nBy completing Stage 8, you will:\n\n- Practice coding simple events\n- Reflect on classroom application\n\n>**What to Expect in this Stage:** You'll start with an unplugged lesson from Course C (meant for Grade 2) introducing events. Then, you'll explore some puzzles from Course F (meant for Grade 5) that allow you to experiment with event blocks. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.\n\nReady? Let's go!\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/2": {
    "dsls": {
      "markdown": "# Events > Unplugged Lessons\n\n<br/>\n\n**1. Review \"[The Big Event](https://curriculum.code.org/csf-18/coursec/11/)\" Lesson Plan from Course C.**\n<br/>\nCourse C is meant for students in Grade 2. Events come up in every CS Fundamentals Course, from A-F. Not every course has an unplugged lesson to cover events, but you can see the unplugged lesson for Course A and Course B at the bottom of this page.\n<br/><br/>\n\n**2. Watch the student video: The Big Event**\n<br/>\nThis is a video that you would show your students to help introduce the concept of events and kick off the unplugged lesson.\n\n[![](https://images.code.org/e5d8d5fc84416e34232f3e00142e5b2a-image-1571254248844.30.31 PM.png)](https://youtube.com/watch?v=u0WV9shCoak)\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-bigevent-unplugged.mp4)\n<br/><br/>\n\n**3. Watch the teacher video: How to facilitate \"The Big Event\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson.\n\n[![](https://images.code.org/666ace3e1b7de917e112733112d358e4-image-1571254314712.31.50 PM.png)](https://youtube.com/watchv=aYECW6V8nQA)\n<br/><br/>\n\n**4. Review other unplugged lessons that introduce events:**\n\n- Course A, Course B (Kindergarten, Grade 1): [The Big Event Jr.](https://curriculum.code.org/csf-18/courseb/12/)\n\n---\n\n> ## Reflect\n> How would you explain the concept of events to your students? Share your thoughts in <a href=\"http://forum.code.org/t/teaching-events/409/1\">our forum</a>.\n\n> <a href=\"http://forum.code.org/t/teaching-events/409/1\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on.\n\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/3": {
    "long_instructions": "Watch this video that defines \"events\" and shows how they work in CS Fundamentals. Afterwards, you will try some puzzles that require you to code events.\n\n> An event is a line of code that tells your computer to \"listen\" for something to happen, then take an action. For example, on web pages, you often can display a drop down menu when you roll over the navigation bar with your mouse. The \"mouse rollover\" is an \"event\" that triggers an action."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/4": {
    "short_instructions": "Write the code to help Scrat get all of the acorns!",
    "long_instructions": "Scrat is still looking for acorns! \nHelp him scamper around by attaching a `move actor 1` block to each of the events and changing the direction to work for each arrow key. \nWhen you’re done, click \"Run\" and try to collect all of the acorns.",
    "authored_hints": {
      "iceage_move_events_a": "Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. "
    },
    "callouts": {
      "arrows_move_actor": null
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/5": {
    "short_instructions": "Can you finish this program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? ",
    "long_instructions": "Here is your code from the last puzzle, as well as the code to move Granny left and right. \nCan you finish the program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? \nPress \"Run\" to play the game.",
    "authored_hints": {
      "iceage_sound_and_points_a": "You will need to add two blocks beneath the `when actor 1 touches actor 2` event.",
      "iceage_sound_and_points_b": "You will need both the `score a point` block and the 'play \\_\\_\\_\\_ sound\\` block to pass this level."
    },
    "callouts": {
      "playlab_add_score": null
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/6": {
    "short_instructions": "Change the scene to an icy background and set Sid’s (actor 1) speed to fast.",
    "long_instructions": "Everyone needs to move faster because an ice storm is coming! \nChange the scene to an icy background and set Sid’s (actor 1) speed to fast.\nPress \"Run\" and move Sid to Diego to warn him.",
    "authored_hints": {
      "iceage_warn_ice_age_a": "You should only have to add two blocks to get this puzzle where it needs to be. ",
      "iceage_warn_ice_age_b": "Add both new blocks beneath the `when run` event to have them happen immediately after the program starts."
    },
    "callouts": {
      "playlab_add_blocks": null
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/7": {
    "dsls": {
      "markdown": "# Events > Review\n\nIn this stage, you made some fun game, combining core concepts and demonstrating your learning. By allowing us to trigger actions based on other parts of our program, events allow us to stretch our coding muscles.  \n\n**Take a moment now to review how events are introduced in the CS Fundamentals curriculum and consider how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/8312823c84d52d7119ab0b5e99363d39-image-1549054807593.jpg)\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/8/levels/8": {
    "dsls": {
      "markdown": "# Congratulations!\n\n<img src=\"https://images.code.org/3e21c6e68f0b6565ba16ad2b63b892f0-image-1434398206115.jpg\" width=\"450px\">\n<br/><br/>\nBy now you should have completed Stages 1-8 and learned the basic fundamentals of computer science. We hope you had fun along the way! We also hope you've been considering how you might apply your learning to your teaching practice.\n<br/><br/>\nIn the next stage, we will consider some best practices for teaching these fundamentals in your classroom.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/1": {
    "dsls": {
      "markdown": "# Best Practices > Stage overview\n\n<img src=\"https://images.code.org/1faca2c2dd1c9bd64ab5def347524d9c-image-1434398377360.JPG\" width=\"450px\" style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\">\n\n**You've made your way through the majority of the content for this course. Congratulations!**   \n\nIn Stage 1, you reviewed the course information.  \nIn Stage 2, you explored computer science as a discipline.  \nIn Stage 3, you prepared to master the basics of computer science.  \nIn Stages 4-8, you played the role of the student yourself.  \nNow, let's transition to an exploration of how you might teach what you've learned to young people.  \n\n\nBy completing Stage 9, you will:\n\n- Review best practices for teaching computer science\n\n> ## Looking ahead:\n> The best practices we will cover in this stage include:\n\n>- Establishing a positive classroom culture that supports self-directed learning, experimentation and failure\n- Knowing when and how to apply instructional design strategies from other subject areas\n- Using strategic grouping strategies such as \"pair programming\"\n- Explicitly teaching meta-cognitive problem solving strategies\n- \"Unplugging\" and teaching some core concepts with minimal or no technology\n- Other best practices suggested by the Code.org teacher community\n\nWe'll also provide an opportunity for you to share your best practices with our community.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/2": {
    "dsls": {
      "markdown": "# Best Practices > Classroom Culture\n\nHow can we promote a healthy classroom culture for our computer science classes? First, we can make sure that everyone in the classroom, including ourselves, understands ways in which we can act like computer scientists and what to keep in mind. This keeps everyone on the same page and makes your work in the classroom easier.\n\n<img src=\"https://images.code.org/b5d9ae18a882a4359f096b9c6ade135e-image-1434398703448.jpg\" width=\"450px\" style=\"margin-right:45px; border-radius:10px;\">\n\n## Ways to act like a computer scientist:\n\n- **Be curious:** When you're curious, you do things like poke around in different menus, run pieces of code to see what happens, or check the effects of different settings. Curiosity often leads to being able to answer your own questions.\n- **Ask questions:** Collaborate with others once you've tried figuring out a problem yourself.\n- **Be persistent:** Have confidence tackling open-ended complex problems and stick with them. This becomes easier once you've written some successful programs and know how good it feels to overcome a difficult programming problem.\n- **Break big problems down into smaller, more manageable problems:** This is called **decomposing**.\n- **Read through your code:** The computer is following your instructions exactly. Tracing through code step-by-step (as if you were the computer processing the instructions) will help you find errors in your logic or missing steps.\n- **Don't feel bad about making mistakes:** Mistakes are not failure; they just bring you one step closer to creating the right solution or end product.\n- **Step away from your screen:** This can give you a much needed break and often you can come back to a problem with a new perspective.\n\n## Things to keep in mind while learning computer science:\n\n- The world of computer programming moves so fast that there really are no masters. **We're all learners** at different stages but we are still always learners.\n- Programming becomes more comfortable every time you come back to it. **You're not going to be an expert your first time.**\n- There's no way around it, the act of programming and **learning to program takes time, but anyone can do it!**\n- You can share **your own authentic experience learning to code** with your students!\n\n> ## Reflect:\n> How do you plan to create positive classroom culture when teaching computer science? [Tweet your thoughts](https://twitter.com/codeorg) and be sure to tag @codeorg in your tweet so we can respond.\n\n> <a href=\"http://ctt.ec/pdL3a\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"default\">Share on Twitter >></button></a>\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/3": {
    "long_instructions": "So far, you've been introduced to some of our unplugged lesson plans. However, there are lesson plans for every single CS Fundamentals lesson -- both plugged and online. You can find the full list of lesson plans for each course below:\n<br/>\n<br/> \n[Course A lesson plans][0]<br/> \n[Course B lesson plans][1]<br/>\n[Course C lesson plans][2]<br/> \n[Course D lesson plans][3]<br/> \n[Course E lesson plans][4]<br/> \n[Course F lesson plans][5]<br/> \n\nHowever, you may want to adapt these lessons, or build your own! The video below explains the structure of the CS Fundamentals lessons, but also provides tips in case if you want to develop your own lessons."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/4": {
    "dsls": {
      "markdown": "# Best Practices > Pair Programming\n\nOne important classroom management strategy many educators use is strategic grouping. At Code.org, we suggest trying the strategic grouping strategy used in the real-world offices of the top tech firms: pair programming.\n\n>**Pair programming** is when two students use one computer to write a program together. The National Center for Women & Information Technology (NCWIT) has a [great resource about the benefits of pair programming](http://www.ncwit.org/sites/default/files/resources/pairprogramming_retainingwomencollaborativelearning_practice.pdf).\n\nResearch shows that pair programming:\n\n- Leads to higher-quality student programs relative to non-paired students' programs\n- Reduces the so-called \"confidence gap\" between female and male students, while increasing the programming confidence of all students\n<br/><br/>\n\nWatch this video to understand how pair programming works, and hear directly from students how it enhances their learning.\n\n[![](https://images.code.org/2c721ff31fbd06f527d99965d3460fa8-image-1571172758005.52.13 PM.png)](https://www.youtube.com/watch?v=vgkahOzFH2Q)\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-pair-programming.mp4)\n<br/><br/>\nNot only is pair programming beneficial for students, it is also something that is practiced by some professional computer programmers. Watch this video to learn how to introduce pair programming to your students.\n\n[![](https://images.code.org/01da36dbe56da7986c3652991d4828e8-image-1571172869229.54.16 PM.png)](https://www.youtube.com/watch?v=sxToW3ixrwo)\n\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/06pairprogramming_small-mp4.mp4)\n<br/>\n\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/5": {
    "long_instructions": "# Best Practices > Meta-Cognitive Problem Solving\n\nExplicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's \"Puzzle Solving Recipe\" that can help students have success with difficult problems:\n\n[This worksheet][0] details the different steps of the Puzzle Solving Recipe.\n\n<img src=\"https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png\" width=\"650px\" style=\"margin-right:45px; border-radius:10px;\">\n\n> ## Reflect:\n>\n> How might you explicitly teach problem solving in your CS classroom?\n>\n> [Tweet your thoughts][1] and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/ic2bx\" target=\"blank\"><h4><i class=\"fa fa-external-link-square\" ></i> Share on Twitter</h4></a>"
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/9/levels/6": {
    "dsls": {
      "markdown": "# Best Practices > Reflection\n\nStage 8 introduced you to a number of best practices for teaching computer science. Take a moment to consider which strategies covered in this stage you might use in your practice. In the next stage, you'll create a simple plan and reflect on the course as a whole.\n\n## What strategies will you use when facilitating computer science learning in your classroom?\n\nHere are some examples from our teacher community:\n\n- **Facilitate \"unplugged\" activities** to teach core concepts (click [here for a full list of unplugged activities](https://code.org/curriculum/unplugged.)\n- Implement the **\"ask 3 and then me\"** rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.\n- **Be calm yet persistent** when problems arise (which they will.) Your reaction sets the tone for students. If at the first sign of an issue, you proclaim \"I'm terrible at technology. I give up,\" your students will think it's okay to do that too.\n- **Take pride** in their programs. Show them off, put them to work, post them online. This is a big accomplishment for you and your students that should be celebrated.\n- **Ask probing questions** to a student (even if you don't know the answer to the questions.) Ask your class if anyone has the answer. Get comfortable saying \"I don't know; let's figure this out together!\"\n\n---\n\n> ## Reflect\nReview more strategies or add your own <a href =\"http://forum.code.org/t/code-org-k5-professional-development-computer-science-pedagogy-6/14/4\">in our forums.</a>:\n\n> <a href=\"http://forum.code.org/t/code-org-k5-professional-development-computer-science-pedagogy-6/14/4\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Share your strategies >></button></a>\n\nAfter exploring the forum thread and adding your thoughts, click below to move on to Stage 9.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/1": {
    "dsls": {
      "markdown": "# Planning > Exploring Teacher Resources\n\nThroughout Stages 4-8, you took a look at some of the \"unplugged\" and online learning resources available for CS Fundamentals, as they aligned with the computer science concepts you were learning. \n\nNow that you have some understanding over how to code, as well as how to teach computer science, it's time to start planning your instruction. In this stage, we'll be touring other areas of the Code.org platform and the **[Teacher Dashboard](http://studio.code.org/)**. \n\nBy completing Stage 10, you will:\n\n- Explore resources available to teachers\n- Explore the Code.org **[Teacher Dashboard](http://studio.code.org/)**\n- Plan for how you might integrate computer science into your practice\n\n***\n\nA screenshot of the Teacher Dashboard is below. You will need to log into your Code.org teacher account in order to see it -- once you are logged in, it should the default screen that you see on the Code.org website. If you do not have a teacher account, you can **[sign up for one here](https://studio.code.org/users/sign_up)**.\n\n![](https://images.code.org/d6345709495f764a71d9cb0994dbd7e4-image-1549064603589.png)\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/2": {
    "dsls": {
      "markdown": "# Planning > Getting started on Code.org\n\n\n## Step 1: Choose a course\nAll of our courses -- from pre-readers to high schoolers -- are listed in our **[course catalog](https://studio.code.org/courses)**. To find the CS Fundamentals lessons that you have been practicing with, go to our **[elementary page](https://code.org/educate/curriculum/elementary-school)** and scroll down to the \"Courses\" section. All our courses are available at no cost. Chat with colleagues at your school to determine how the course curriculum can be integrated with a variety of subjects.\n![](https://images.code.org/37dd42348eba605513fd0b1f17d1409c-image-1549066063927.png)\n***\n## Step 2: Set up your classroom section\nSet up a classroom section to view your student's progress, print login cards for your students, manage their accounts, and print certificates they can bring home when they finish the course. Click this link to **[watch a brief video](https://code.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=56d32934-3f67-48db-98db-e66e9152df7b)** that demonstrates how to set up your first computer science class on Code.org. You can also find the steps in **[this support article](https://support.code.org/hc/en-us/articles/115000488132-Creating-a-classroom-section)**.\n![](https://images.code.org/26b023ea019f33492aebea43eb6a1dfe-image-1549065670221.png)\n***\n## Step 3: Assign the course to your section\nClick into the course that you are teaching -- you should see a screen that looks like the one below. You can then click \"Assign Course\" and assign that course to one of your sections. \n![](https://images.code.org/3b81aa7989d237447e525f42646412d4-image-1549065690577.png)\n***\n## Step 4: Start teaching! \nAll it takes is one lesson to bring computer science concepts into your classroom. Once you see your students enthusiasm for CS, go further with daily lesson plans to guide your students, unplugged activities you can do without a computer, and forums to connect to other teachers.\n\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/3": {
    "dsls": {
      "markdown": "# Planning > Preparing for a Code Studio lesson\n\nLet's take a look at how Code Studio works for you and your students in a classroom setting.\n\n## Step 1: Choose a course\nCheck out our [elementary school page](https://code.org/educate/curriculum/elementary-school) and find the lesson plans and full courses for our CS Fundamentals A-F lesssons. Or, if you are interested in our middle school or high school courses you, \n, you'll find courses for all grade levels - from pre-readers to seniors in high school, and everyone in between. All our courses are available at no cost. Chat with colleagues at your school to determine how the course curriculum can be integrated with a variety of subjects. \n \n## Step 2: Set up your classroom section\nSet up a classroom section to view your student's progress, print login cards for your students, manage their accounts, and print certificates they can bring home when they finish the course. Click this link to [watch a brief video](https://code.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=56d32934-3f67-48db-98db-e66e9152df7b) demonstrates how to set up your first computer science class on Code.org. You can also find the steps in [this support article](https://support.code.org/hc/en-us/articles/115000488132-Creating-a-classroom-section).\n\n## Step 3: Assign the course to your section\nClick into the course that you are teaching -- you should see a screen that looks like the one below. You can then click \"Assign Course\" and assign that course to one of your sections. \n\n## Step 4: Start teaching! \nAll it takes is one lesson to bring computer science concepts into your classroom. Once you see your students enthusiasm for CS, go further with daily lesson plans to guide your students, unplugged activities you can do without a computer, and forums to connect to other teachers.\n\n\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/4": {
    "dsls": {
      "markdown": "# Planning > Other resources\n\nWhen you're logged into Code.org as a teacher, you have access to many features that your students do not. You've already seen how to find a course, create a section, and assign your class to that section. However, you can also: \n\n- **Track Student Progress**: [Assess the learning](https://support.code.org/hc/en-us/articles/115000693231-Viewing-student-progress) of all of your students.\n- **Your Course Progress**: View your own personal progress on Code.org lessons, as a learner. Your students will also be able to see their progress in their accounts. However, as a teacher, you are also able to view lesson plans and see the solutions for every puzzle.\n- **Help and Community**: Access [support.code.org](https://support.code.org/), where you can post questions, respond to other teacher's posts, and read FAQs by Code.org staff. On this page, you'll also be able to directly contact Code.org with any questions you may have.\n- **Professional Development**: Access [in-person training](https://code.org/professional-development-workshops) for teachers.\n- **Computer Science Guest Speakers**: [Find smart, passionate and engaging tech industry professionals](https://code.org/volunteer/local) who would love to talk to your class about their jobs. \n\n<br/>\n---\n> ## Visit support.code.org\n> If you get stuck or have questions, make sure to check our support articles on support.code.org! You can also reach out to us directly through that page, as well.  [our forum](http://forum.code.org/t/teaching-conditionals/406/1).\n\n> <a href=\"http://support.code.org\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Get help >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/5": {
    "dsls": {
      "markdown": "# Planning > Your Plan\n\nWe hope this stage has helped introduce you to the resources available on Code Studio. As you think about how how you might in the future teach computer science using any of the code.org or Code Studio resources, take a moment to [share your plan with the Professional Learning Community (PLC)](http://forum.code.org/t/teaching-computer-science-your-plans/412).\n\nShare with us:\n\n- What are your goals for your classroom? How will CS or code.org resources help you meet those goals?\n- What are you most excited about when it comes to implementing some of these resources?\n- What challenges do you foresee in trying to meet your goals?\n- What questions do you have that this community might help you answer?\n\nAfter posting your initial plan, feel free to revisit [this thread](http://forum.code.org/t/teaching-computer-science-your-plans/412) in the future to update us on how things are going!\n\n<a href=\"http://forum.code.org/t/teaching-computer-science-your-plans/412\" target=\"blank\" rel=\"noopener noreferrer\"><button class=\"plc\">Post your plan >></button></a>\n\nAfter commenting in the forum, return here and click below to move on.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/10/levels/6": {
    "dsls": {
      "markdown": "# Planning > Review\n\n<img src=\"https://images.code.org/34e1d20a6ae73e28c6c88c5981fd6be6-image-1434411459379.JPG\" width=\"450px\">\n\nIn this stage, you should have:\n\n- Reviewed the Teacher Dashboard and other resources on Code.org\n- Planned for how you might integrate computer science into your practice\n\nIn Stage 11, our final stage, you will\n\n- Reflect on your learning\n- Plan for next steps you can take to continue your learning\n- Connect with a global community of fellow educators interested in computer science education\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/11/levels/1": {
    "dsls": {
      "markdown": "# Next Steps > Let's Review\n\n<img src=\"https://images.code.org/606dbb1b30885387e25bc1265f8966b2-image-1434150440566.JPG\" width=\"450px\">\n\n## You're almost there!\n\nSo far you have learned the basics of coding, explored how you might teach computer science, and created a simple plan of next steps.\n\nBy completing Stage 11, you will:\n\n - Reflect on your learning\n - Plan for next steps you can take to continue your learning\n - Connect with a global community of fellow educators interested in computer science education\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/11/levels/2": {
    "dsls": {
      "markdown": "# Getting started - Take the post-survey\n\nThanks for using the Teaching Computer Science Fundamentals online professional development course! \n\n**This course is no longer accepting feedback.**\n\n<a href=\"https://studio.code.org/s/k5-onlinepd-2021\" target=\"blank\" rel=\"noopener noreferrer\"> Click here to access the latest CS Fundamentals self-paced online course</a>.\n\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/11/levels/3": {
    "long_instructions": "> **If you enjoyed this course, sign up for an in-person workshop:**\n>\n> [Sign up now][0] to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area."
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/11/levels/4": {
    "dsls": {
      "markdown": "# Next Steps > Get Connected\n\nBeyond further formal training, you might consider accessing the code.org community to continue learning informally from your others, or just to find support and a network of peers. Here's how:  \n\n<br/><br/>\n\n> **Continue participating in the code.org teacher Professional Learning Community:** The forum that you've been using throughout this course will be a great resource for you moving forward. You can use it not only to refer back to your learning from this course, but to find support as you continue your journey, or even to offer support to others who need your expertise. Be sure to bookmark it now and visit often: [http://forum.code.org/c/csf](http://forum.code.org/c/csf)  \n\n<br/>\n\n> **Connect with [@teachcode](http://twitter.com/teachcode) on Twitter.**  \n\n<br/>\n\n> **Join the computer science Teachers Association (CSTA):** [The CSTA](http://csta.acm.org/index.html) is an engaged community of educators across the nation that is committed to bringing computer science education to their students while raising awareness of the subject to the general public. They host an annual conference and also have chapters that hold local meetings.\n"
    }
  },
  "https://studio.code.org/s/K5-OnlinePD/lessons/11/levels/5": {
    "dsls": {
      "markdown": "# Next Steps > Celebrate!\n\nCongratulations on completing this professional development online course. \n\n<a href=\"https://studio.code.org/s/k5-onlinepd-2021\" target=\"blank\" rel=\"noopener noreferrer\"> Click here to access the latest CS Fundamentals self-paced online course</a>.\n"
    }
  }
}