{
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/2": {
    "dsls": {
      "markdown": "# Starting Your Search\n\nTo find out more about how computer science and programming play a role in entertainment, you'll need to do some research. Try searching for \"Computer science and &#95;&#95;&#95;&#95;&#95;&#95;\" and trying out different types of entertainment such as film, television, music, games, animation, fashion, etc.\n\n\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/3": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Stamp Pad\n\nClick \"Run\" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps."
  },
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/4": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Animated Comics\n\nCombining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click \"Run\" to see an example."
  },
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/5": {
    "long_instructions": "# Alien Jumper\n\nPress \"Run\" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change."
  },
  "https://studio.code.org/s/csd3-2019/stage/1/puzzle/6": {
    "long_instructions": "# Hungry Bunny\n\nThe bunny is hungry, and it's looking for mushrooms and carrots for dinner.\n\nTo win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.\n\nMake sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!\n\nUse the space bar to jump.  You can squash ladybugs and snails by jumping on them.\n\nClick \"Run\" to start the program."
  },
  "https://studio.code.org/s/csd3-2019/stage/2/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/2/puzzle/2": {
    "display_name": "Drawing Shapes",
    "long_instructions": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\" and try out turning on the grid to help you place shapes precisely.\n\n[][0]"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/2": {
    "display_name": "Introduction to Game Lab",
    "long_instructions": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n-   Look at the line of code in the workspace below these instructions ( [Show me where][0] ) and discuss with your partner where you think the shape will be drawn on the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens.\n-   Change the numbers inside the block, then try running the program again.\n-   Try to place the rectangle near the bottom right of the screen.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/3": {
    "display_name": "Video: Drawing in Game Lab - Part 1",
    "long_instructions": "## Questions to Consider\n\n-   Where can you find more information about how to use the blocks?\n-   What’s an advantage of using block mode?"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/4": {
    "display_name": "Using the Grid",
    "long_instructions": "<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png\" style=\"float:right;width:150px\">\n\n# Place Squares in Corners\n\nA big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.\n\n# Do This\n\n-   Place two rectangles exactly in the corners of the screen, just like the picture."
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/5": {
    "display_name": "Video: Drawing in Game Lab - Part 2",
    "long_instructions": "## Questions to Consider\n\n-   What’s the difference between stroke and fill?"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/6": {
    "long_instructions": "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png\" style=\"float:right;width:200px;\">\n\n# fill(color)\n\nYou can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.\n\n# Do This\n\n-   Look at the code that sets the color. ( [Show me where][0] )\n-   Change the color from blue to yellow.\n-   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where][1] ).  The new square can go any location on the screen you like.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/7": {
    "long_instructions": "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png\" style=\"float:right\">\n\n# Order Matters\n\nIn Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.\n\n# Do This\n\n-   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.\n-   Change the red rectangle's color to green.\n-   Change the order of the code so the green rectangle appears on top.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/8": {
    "long_instructions": "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png\" style=\"float:right;width:150px;\">\n\n# ellipse\n\nYou can use `ellipse` to make a circle.\n\n# Do This\n\n-   Look at the code that makes the ellipse.\n-   Add a new ellipse of a different color.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/9": {
    "long_instructions": "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png\" style=\"float:right;width:150px;\">\n\n# Debugging\n\nOften, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.\n\n# Do This\n\n-   Look at the code in the workspace.\n-   Change the code so it makes the picture on the right.\n    -   (You'll need to move one line of code AND change the coordinates of the square.)",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/3/puzzle/10": {
    "display_name": "Plotting Shapes in Game Lab"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/extras?level_name=CSD+U3+picture_2019": {
    "display_name": "Challenge: Draw an Image",
    "long_instructions": "# Challenge: Draw an Image\n\n_Check with your teacher before starting any of the challenges._\n\nIn the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code."
  },
  "https://studio.code.org/s/csd3-2019/stage/3/extras?level_name=CSD+U3+challenge+face_2019": {
    "display_name": "Challenge: Face",
    "long_instructions": "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n\n# Challenge: Face\n\n_Check with your teacher before starting any of the challenges._\n\nWrite a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\nOnce you've finished, add your own personal touches to the image."
  },
  "https://studio.code.org/s/csd3-2019/stage/3/extras?level_name=CSD+U3+challenge+new+shape_2019": {
    "display_name": "Challenge: Shape of Shapes",
    "long_instructions": "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n\n# Challenge: Shape of Shapes\n\n_Check with your teacher before starting any of the challenges._\n\nUsing only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?"
  },
  "https://studio.code.org/s/csd3-2019/stage/3/extras?level_name=CSD+U3+L3+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/2": {
    "long_instructions": "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# Rectangle Size\n\nThese `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.\n\n# Do This\n\n-   Look at the code and try to figure out how the last two inputs in `rect` work.\n-   Change the numbers in the second `rect` to make red rectangle longer than the blue one."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/3": {
    "long_instructions": "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n-   Write code that makes an orange ellipse behind the green one.\n-   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/4": {
    "long_instructions": "# Background\n\nSometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.\n\n# Do This\n\n-   Run the code to see `background` work.\n-   Change the background from yellow to orange.\n\n_Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/5": {
    "long_instructions": "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png\" style=\"float:right;height:150px\">\n\n# Background\n\n`background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.\n\n# Do This\n\n-   Use `background()` to make a \"black\" background behind the green circle."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/6": {
    "long_instructions": "<img src=\"https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nThis program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.\n\n# Do This\n\n-   Debug this program and correct the error so that the grass extends across the entire bottom.\n-   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/7": {
    "long_instructions": "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n-   Debug this program to make the cloud wider than it is tall, like in the image.\n-   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/8": {
    "display_name": "Shapes and Parameters"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/9": {
    "long_instructions": "# Random Numbers\n\n`randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.\n\n# Do This\n\n-   Run the program several times to see how it works.\n-   Change the numbers inside `randomNumber` and run the code again a few times to see what changes."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/10": {
    "long_instructions": "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png\" style=\"float:right;height:150px\">\n\n# Random Numbers\n\nHere's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.\n\n# Do This\n\n-   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.\n-   As long as your circle is appearing at random X and Y positions, you can move on."
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/11": {
    "long_instructions": "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nThis program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.\n\n# Do This\n\n-   Run the program several times to see how the starter code works.\n-   Add at least three new different colored circles to your rainbow snake.\n-   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.\n\n_Challenge: Can you make the size of some of the circles random, too?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/puzzle/12": {
    "display_name": "Random Numbers"
  },
  "https://studio.code.org/s/csd3-2019/stage/4/extras?level_name=CSD+U3+L4+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/2": {
    "display_name": "Introduction to Variables",
    "long_instructions": "## Questions to Consider\n\n-   What are variables used to do?\n-   How do you create a variable and assign it a value?\n-   What can go into a variable?"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/3": {
    "long_instructions": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Change the number that is stored into the variable ([Show me where][0]) and run the code again.",
    "callouts": {
      "CSD_U3_variables": "Change the number here"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/4": {
    "callouts": {
      "grid": "Click here to show the grid."
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/5": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png\" style=\"float:right; height:150px\">\n\n# Debug: Using Variables\n\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\n\n# Do This\n\n-   Change the value assigned to `circleSize` so that the circle takes up the entire screen."
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/6": {
    "long_instructions": "# Using a Variable Many Times\n\nThis program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.\n\n# Do This\n\n-   Change the number assigned to `petalSize` so the red petals touch one another.\n-   Try to find the size that makes the most sense. Compare your answer with someone around you."
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/7": {
    "display_name": "Variables"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/8": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.\n\n# Do This\n\n-   Try to figure out what problems with the variable names are causing the errors.\n-   **Correct the errors by picking new names.**\n-   If your program works it should draw the image on the right.\n\n<summary><em>Hint: Click the arrow to see a few rules.</em><details><ul>\n<li>Labels can't have spaces.</li>\n<li>Labels can't start with a number.</li>\n<li>Capitalization and spelling must be exactly the same.</li>\n</ul></details></summary>"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/9": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\" style=\"float:right;height:150px\">\n\n# Debug: Variables and Random Numbers\n\nVariables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.\n\n# Do This\n\n`eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.\n\n-   **Run the program** to see how it works.\n-   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code."
  },
  "https://studio.code.org/s/csd3-2019/stage/5/puzzle/10": {
    "display_name": "Naming Variables"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/extras?level_name=CSD+U3+Variables+Draw+Challenge_2019": {
    "display_name": "Challenge: Draw an Image",
    "long_instructions": "# Challenge: Draw an Image\n\n_Check with your teacher before tackling this challenge level._\n\nUsing variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together."
  },
  "https://studio.code.org/s/csd3-2019/stage/5/extras?level_name=CSD+U3+Variables+Challenge_2019": {
    "display_name": "Challenge: Updating Variables",
    "long_instructions": "# Challenge: Updating Variables\n\n_Check with your teacher before tackling this challenge level._\n\nSo far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.\n\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">"
  },
  "https://studio.code.org/s/csd3-2019/stage/5/extras?level_name=CSD+U3+L5+Freeplay_2019": {
    "display_name": "Free Play",
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/2": {
    "display_name": "Video: Introduction to Sprites",
    "long_instructions": "## Questions to Consider\n\n-   What is a sprite?\n-   What are properties?\n-   What problem do sprites solve?"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/3": {
    "display_name": "Creating Sprites"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/4": {
    "short_instructions": "Do This",
    "long_instructions": "# Sprites\n\n**Creating Sprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png\" style = \"height:30px\">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.\n\n**Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling [][0] will draw all of your created sprites on the screen.\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\nThis program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.\n\n-   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.\n    -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.\n-   Add `drawSprites()` under the comment `Drawing`.\n-   **Run the code** to draw your first sprite on the screen.\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
    "callouts": {
      "": "Use this block to create a sprite"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/5": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/8ca2c292184206f6b197b5818ac2af7c-image-1580245775794.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/2176c09b3f0e422581bef15c4e6ec4eb-image-1580245775797.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/62791d20c9fb0acd71ae0d11edfb639b-image-1580245775799.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/3624e09a23ed5409b3dae36e82d79233-image-1580245775795.png)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "When run, where will the sprite `mySprite` be located?"
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/6": {
    "long_instructions": "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\" style=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\n\n# Debug\n\nThis program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/7": {
    "display_name": "Video: The Animation Tab",
    "long_instructions": "## Questions to Consider\n\n-   What are the steps to adding an image to a sprite?\n-   What are the different ways to get an image?"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/8": {
    "display_name": "The Animation Tab"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/9": {
    "long_instructions": "# Images\n\nOver on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.\n\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png\" style=\"width:300px;float:right\">\n\nOnce you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.\n\n# Do This\n\nChange the sprite to your favorite image from the animations tab.\n\n-   A sprite that is set to an image has already been created for you.\n-   Run the code to see how it works.\n-   Change the input to the `setAnimation` command to change the look of the sprite.\n-   Try out all the different images.",
    "callouts": {
      "": "Click this to open the Animation Tab"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/10": {
    "long_instructions": "# Upload your own image\n\nYou can also use the Animation tab to upload or draw your own image.\n\n# Do This\n\nYou are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.\n\n-   Download your kite image. Images with transparent backgrounds work best.\n-   Open the animations tab.\n-   Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\"> to upload an image.\n-   Select the file from your computer.\n-   Rename your image so it is easy to remember. To rename it click the text below the image.\n-   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.\n\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/11": {
    "long_instructions": "# Resizing with Scale\n\nIn the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.\n\n# Do This\n\nThe program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.\n\n_Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/12": {
    "dsls": {
      "answers": [
        {
          "text": "https://images.code.org/131282b44fe34cd619a9a21bc68888da-image-1523902103487.58.48 AM.png,300px"
        },
        {
          "text": "https://images.code.org/2fbe4029dc47f6f048e7c9f90ac99cac-image-1523902103485.25.09 AM.png"
        },
        {
          "text": "https://images.code.org/c4cb49e00f7087765865da87cff37549-image-1523902103477.58.00 AM.png"
        },
        {
          "text": "https://images.code.org/7465035fc6701dcb91731fe9d160b638-image-1523902103481.58.28 AM.png"
        }
      ],
      "content1": "Match the code to the image that it will produce.",
      "questions": [
        {
          "text": "https://images.code.org/cd11d762b2cb3e36c3d45157b965c968-image-1523901253224.59.08 AM.png"
        },
        {
          "text": "https://images.code.org/653dff2d49f07341b2f2552747212b34-image-1523901253222.59.21 AM.png"
        },
        {
          "text": "https://images.code.org/db71e0cde6861faabc0b5a55d67c739e-image-1523901253227.58.12 AM.png"
        },
        {
          "text": "https://images.code.org/15d6014329fa3da9b73016af9f1d0d74-image-1523901253226.58.34 AM.png"
        }
      ],
      "title": "drawSprites"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/13": {
    "long_instructions": "# Adding Text\n\nYou can put text anywhere you'd like on the screen using `text`. \n\n# Do This\n\n-   Change the displayed text in the provided code.\n-   Add a second `text` to write in a different part of the screen.\n\n_Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._",
    "callouts": {
      "": "Use this block to put text on the screen"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/14": {
    "long_instructions": "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\n\n# Debug\n\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/15": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Sprite Scenes\n\nBy combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.\n\n## Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/16": {
    "long_instructions": "# Create Your Scene - Drawing\n\nYou're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.\n\n# Do This\n\n-   Use a `background()` command to fill the screen with a color.\n-   Add any necessary shape commands to draw the non-sprite elements of your scene."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/17": {
    "long_instructions": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n\n# Do This\n\n-   Add or create all of your sprite images in the Animation Tab.\n-   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.\n-   Call `drawSprites()` once at the end of your program.\n\n_Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/puzzle/18": {
    "long_instructions": "# Create Your Scene - Text\n\nThe final piece of your scene is to add text.\n\n# Do This\n\n-   Add a `text()` command for each separate line of text.\n-   If necessary, use `fill()` and `textSize()` to change the appearance of your text.\n\n_Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._"
  },
  "https://studio.code.org/s/csd3-2019/stage/6/extras?level_name=CSD+U3+Sprites+scene+challenge_2019": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Challenge: Extend your scene\n\n_Check with your teacher before starting this challenge._\n\nNow that you've finished your scene, consider adding to it or creating another."
  },
  "https://studio.code.org/s/csd3-2019/stage/6/extras?level_name=CSD+U3+L6+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/2": {
    "display_name": "Video: Introduction to the Draw Loop",
    "long_instructions": "## Question to Consider\n\n-   What does the draw function do?"
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/3": {
    "long_instructions": "# Draw Loop\n\nHere's an example of the draw loop at work.\n\n# Do this\n\n-   Run the code and see how it works.\n-   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?"
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/4": {
    "display_name": "The Draw Loop"
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/5": {
    "long_instructions": "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png\" style=\"float:right;width:150px\">\n\n# Using the Draw Loop\n\nNow it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.\n\n# Do This\n\n-   Add code to this program so that your drawing has orange circles being drawn, too.\n-   Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/6": {
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThis program has one small difference that will make it run a little differently. Again though, remember:\n\n-   All your code outside the draw loop is run first, one time\n-   All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/7": {
    "long_instructions": "# Sprites in the Draw Loop\n\nBy changing sprite properties in the draw loop, you can animate your characters. \n\nThis animation has also been slowed down.  At the beginning of the program the `World.frameRate` block has been used to set the frame rate to 10. Usually the frame rate is 30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the code to see how it works.\n-   Discuss with your partner why some code is inside the draw loop and some code is outside.\n-   Try changing the frame rate and running the code again."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/8": {
    "display_name": "Sprite Properties"
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/9": {
    "long_instructions": "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nSprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.\n\n# Do This\n\nThis animation already is updating one sprite's x property to make it look like it's shaking\n\n-   Run the program to see how it works.\n-   Edit the code in this program to make the second sprite shake like the first one.\n-   Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/10": {
    "long_instructions": "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis level is very similar to the last, but this time, you'll add in the draw loop yourself.\n\n# Do This\n\n-   Add the draw loop block to the bottom of this program.\n-   Move any blocks that need to be inside the draw loop.\n-   Move on when your program looks like the picture to the right.",
    "callouts": {
      "": ""
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/11": {
    "long_instructions": "<img src=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.\n\n# Do This\n\nThis animation already is updating one sprite's rotation property to make it look like it's shaking\n\n-   Run the program to see how it works.\n-   Add code to this program to make the other alien shake just like the first.\n-   Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/puzzle/12": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Extend Your Scene\n\nThis is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.\n\n<img src=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png\" style=\"float:right;height:100px\">\n\n# Do This\n\n-   Add a draw loop to your program (you should only have one).\n-   Use the lasso selector (click, hold and drag) to select the code that will be updated each time and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.\n-   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`."
  },
  "https://studio.code.org/s/csd3-2019/stage/7/extras?level_name=CSD+U3+L7+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/8/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/2": {
    "display_name": "Video: Sprite Movement",
    "long_instructions": "## Questions to Consider\n\n-   What is the counter pattern?\n-   How does the counter pattern move sprites across the screen?"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/3": {
    "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?",
    "contained levels": [
      {
        "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/4": {
    "long_instructions": "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\" style=\"float: right; margin-left: 20px\">\n\n# Sprite Movement\n\nUsing the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.\n\n# Do This\n\nMake your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/5": {
    "long_instructions": "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\" style=\"float: right; margin-left: 20px\">\n\n# Moving to the Left\n\nIf adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?\n\n# Do This\n\nMake your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.\n\n_Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/6": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Read this program and predict which of the following animations will be produced."
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/7": {
    "long_instructions": "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Diagonal Movement\n\nUpdating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.\n\nThis program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?\n\n_Challenge: Can you make the mouse point in the same direction as the image?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/8": {
    "display_name": "The Counter Pattern"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/9": {
    "contained levels": [
      {
        "long_instructions": "# Watching the Counter Pattern\n\nWatchers are a really useful tool for debugging programs that use the counter pattern.\n\n-   **Read the program** and predict what the program will do.\n-   **Run the program** to check your prediction.\n-   **Look at the watchers** and explain to a neighbor what you are seeing."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/10": {
    "long_instructions": "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Debug: Watching the Counter Pattern\n\nLet's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.\n\nUsing the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/11": {
    "long_instructions": "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Fish Animation\n\nUsing the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/12": {
    "long_instructions": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:200px; float:right; margin-left: 20px;\">\n\n# Rotation Direction\n\nWhen you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\n\n# Do This\n\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.\n\n-   Make the gears rotate so they look like they are working as one system.\n-   **Hint: They won't all rotate the same direction**."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/13": {
    "display_name": "Debugging with Watchers"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/14": {
    "long_instructions": "# Make an animation of your own\n\nUsing the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.\n\n# Do This\n\nTo start, let's just get a static scene set up.\n\n-   Add images in the Animation Tab.\n-   Create sprites and assign images.\n-   Set up the draw loop to draw a background and your sprites."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/puzzle/15": {
    "long_instructions": "# Add movement to your animation\n\nWith your static scene set up, you can now add some movement. When you are satisfied with your program, click the \"Submit\" button to turn it in. You can always unsubmit and continue working if you want to add features.\n\n# Do This\n\nIn the draw loop\n\n-   Identify which sprite properties to change.\n-   Update those properties using the counter pattern.\n\n_Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/extras?level_name=CSD+sprite+movement+challenge_2019": {
    "long_instructions": "# Improve your animation\n\nMake your animation even better by changing more sprite properties, or by adding even more sprites!"
  },
  "https://studio.code.org/s/csd3-2019/stage/9/extras?level_name=CSD+U3+Movement+Fish+challenge_2019": {
    "long_instructions": "# More fish!\n\nThis time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water."
  },
  "https://studio.code.org/s/csd3-2019/stage/9/extras?level_name=CSD+U3+L9+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/10/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/2": {
    "short_instructions": "What do you think this code will do when it is run? Predict what each console.log() command will print, then run the program to check your predictions.",
    "callouts": {
      "": "This program will print out a result here"
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "true  \nfalse  \ntrue",
              "correct": true
            },
            {
              "text": "0  \n200  \n100",
              "correct": false
            },
            {
              "text": "true  \nerror  \ntrue",
              "correct": false
            },
            {
              "text": "false  \ntrue  \nfalse",
              "correct": false
            }
          ],
          "markdown": "# Boolean Expressions\n\nDecision-making on computers are based on statements called **boolean expressions**. A boolean expression is **any expression that can only evaluate to either `TRUE` or `FALSE`**. This can be particularly useful when used to compare the properties of two sprites. For example, you could figure out which one is larger or placed higher up. In the next few puzzles we'll use simple boolean expressions to compare sprite properties.\n\n# Predict\n\nRead the code below. There are some new symbols in it which you haven't been introduced to. Take a guess at what they mean and try to answer the following question\n",
          "questions": [
            {
              "text": "Which result will be printed in the console by this program?"
            }
          ],
          "title": "title"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/3": {
    "display_name": "Video: Booleans",
    "long_instructions": "## Questions to Consider\n\n-   What is a Boolean expression?\n-   What’s an expression that would evaluate to true?\n-   What’s an expression that would evaluate to false?"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/4": {
    "short_instructions": "Modify the code so that all of the console.log commands print true",
    "long_instructions": "# Boolean Expressions\n\nThe simplest Boolean expressions are questions that the computer can answer with true or false. \nAnother way to say this is that Boolean expressions **evaluate** to `true` or `false`.\n\n# Do This\n\nCan you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.\n-   For each of the Boolean expressions, identify the sprite properties being compared.\n-   Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`."
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/5": {
    "dsls": {
      "answers": [
        {
          "text": "dog.rotation &lt; cat.rotation"
        },
        {
          "text": "dog.x &lt; cat.x"
        },
        {
          "text": "dog.scale &gt; cat.scale"
        },
        {
          "text": "dog.x &gt; cat.x"
        },
        {
          "text": "dog.x == cat.x"
        }
      ],
      "content1": "Match the boolean expression to the English description.",
      "questions": [
        {
          "text": "Is the dog sprite's rotation less than the cat sprite's rotation?"
        },
        {
          "text": "Is the dog sprite's x less than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's scale greater than the cat sprite's scale?"
        },
        {
          "text": "Is the dog sprite's x greater than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's x equal to the cat sprite's x?"
        }
      ],
      "title": "Matching: Comparison Operators"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/6": {
    "long_instructions": "# Booleans\n\nIn the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.\n\n# Do This\n\nThe program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.\n\n-   Add a `console.log` statement inside the draw loop. ( [Show me where][0] )\n-   Add a Boolean expression inside the `console.log` that asks \"Is the x position of the race car less than the x position of the finish line?\"\n-   Look at the output of the program as the car moves. When does the output change? Why?",
    "callouts": {
      "CSD_U3_L8_S6_C1": "Put the console log statement here"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/7": {
    "long_instructions": "# More Practice With Booleans\n\nLet's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.\n\n# Do This\n\n-   Add a `console.log` statement.\n-   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2."
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/8": {
    "display_name": "Booleans and Comparison Operators"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/9": {
    "display_name": "Video: Conditional Statements",
    "long_instructions": "## Question to Consider\n\n-   When would you want to use an if statement?"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/10": {
    "long_instructions": "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03 PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean expressions you used earlier allow us to ask questions, but in order to _respond to those questions_, we need to use an `if` statement.\n\n`if` statements usually go inside your draw loop because we want to check them each time the loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded here for you.\n\n-   Add an `if` statement after you update the position of the race car.\n-   Move the Boolean expression from the console.log statement to the condition of the if statement.\n-   Inside the `if` statement, add a statement to draw text on the screen to say \"Winner\"."
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/11": {
    "long_instructions": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n_Challenge: Can you also make the fruit stop growing once it turns into a pear?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/puzzle/12": {
    "display_name": "If Statements"
  },
  "https://studio.code.org/s/csd3-2019/stage/11/extras?level_name=CSD+U3+-+conditionals+-+first+conditional+2_2018_2019": {
    "display_name": "Visibility Challenge",
    "long_instructions": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\n\n# Visible\n\nSometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.\n\n# Do This\n\nMake the balloon pop when it hits the edge of the game area!\n\n-   Add a conditional that checks to see whether the balloon has hit the edge.\n    -   Use a watcher on `balloon.scale` to help you out.\n-   Create a pop sprite which uses the \"pop\" visual in the animation tab.\n-   Use the `visible` property to keep the \"pop\" sprite hidden at the beginning.\n-   Inside the `if` add two statements.\n    -   One that sets the `visible` property to hide the balloon sprite.\n    -   One that sets the `visible` property to show the pop sprite."
  },
  "https://studio.code.org/s/csd3-2019/stage/11/extras?level_name=CSD+U3+L11+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/2": {
    "short_instructions": "Modify the code so that all of the console.log commands print true",
    "contained levels": [
      {
        "long_instructions": "# Prediction - keyDown()\n\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n\n-   Read the program carefully.\n-   **Make a prediction about how the code will run** and write it in the box below. Be specific!\n-   Run the program.\n-   While the program is running, press the space bar on your keyboard.\n-   Were you correct? Were you surprised? Discuss with a classmate."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/3": {
    "long_instructions": "# Changing Sprites\n\nYou saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are \"x\", \"up\" and \"space\".\n\nWe can use `keyDown` as an input to an `if` statement to change our animations based on key presses!\n\n# Do This\n\n-   Run the code and try pressing the \"p\" and \"h\" keys.\n-   Look inside the `if` statement to see how the code works.\n-   Add a block inside the third `if` statement to change the animation to a different animal.\n\n_Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_",
    "callouts": {
      "": "Add your block inside this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/4": {
    "long_instructions": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\n-   Add an `if` statement inside your draw loop.\n-   Check whether the right arrow key has been pressed down.\n-   Add code inside the conditional to move the sprite right if the right arrow is down.\n\n_Do you need to change sprite's x or y property to move it right?_",
    "callouts": {
      "": "Add an if statement and place your movement code inside it"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/5": {
    "long_instructions": "# Fish With Arrows\n\nThe fish are back. Can you make the fish move left only when the left arrow key is pressed down?\n\n# Do This\n\n-   Add an if statement to check when the left arrow key is pressed down.\n-   Move the commands for moving the fish inside the if statement."
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/6": {
    "long_instructions": "# Gears with Conditionals\n\nLet's make the gears spin only when the space key is being held down.\n\n# Do This\n\n-   Add an `if` statement.\n-   Use `keyDown` as input to the if statement to check when the space key is pressed.\n-   Move the code that makes the gears rotate inside the `if`."
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/7": {
    "long_instructions": "# Move in All Directions\n\nOnce you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.\n\n# Do This\n\nThe bug sprite you made that responds to the right arrow has been brought to this level. Add the interaction for the other three arrow keys!\n\n-   Add three if statements - one for each arrow.  \n-   Don't forget to include a comment for each if statement!\n-   Each if statement should move the sprite in the direction of the arrow.\n\n_HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._"
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/8": {
    "display_name": "Editing Images"
  },
  "https://studio.code.org/s/csd3-2019/stage/12/puzzle/9": {
    "long_instructions": "# Changing Images as you Move\n\nRight now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.\n\n# Do This\n\nUsing the provided program and images:\n\n-   Duplicate your chosen bug image four times.\n-   Edit each of your images to point in one of the four directions.\n-   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed."
  },
  "https://studio.code.org/s/csd3-2019/stage/12/extras?level_name=CSD+U3+Keyboard+Input+Challenge_2018_2019": {
    "display_name": "Challenge: Add More Inputs",
    "long_instructions": "# Challenge\n\n_Check with your teacher before trying this challenge._\n\nHere's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!\n\n-   Use the \"space\" key to control another property of your bug sprite, such as rotation or scale.\n-   Add some randomization to your movement.\n-   Add a second sprite and control it with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common choices).\n-   Add some shapes to your background to make the scene more interesting."
  },
  "https://studio.code.org/s/csd3-2019/stage/12/extras?level_name=CSD+U3+L12+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/2": {
    "display_name": "Predict",
    "long_instructions": "Predict Level, see contained level for instructions.",
    "contained levels": [
      {
        "long_instructions": "# If/Else Predict\n\nRead through the following program, paying special attention to the `if/else` block on Line 10.  After discussing the following questions with your partner, write down your predictions and run the code to see what the program does.\n\n-   What happens when you press the space bar?\n-   What happens when you **don't** press the space bar?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/3": {
    "display_name": "Video: If/Else Statements",
    "long_instructions": "## Questions to Consider\n\n-   What’s an example of when you would need an “if/else” statement?"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/4": {
    "long_instructions": "# When to Provide an \"Else\"\n\nThe else clause is useful when you want the program to do one thing when your condition is true, and a _different_ thing when your condition is false.\n\n<img src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\" style=\"float:right;\">\n\n# Do This\n\nClick \"Run\" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.\n\n-   Add an `if else` statement after you update the position of the bees.\n-   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.\n-   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower."
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/5": {
    "long_instructions": "# Reverse the Gears\n\nThe gears are back. They already spin one direction when you press the space bar, now you'll want them to spin the other direction when the space bar isn't pressed.\n\n# Do This\n\n-   Makes the gears spin opposite of the direction that they do when the space bar is pressed."
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/6": {
    "display_name": "If-Else Statements"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/7": {
    "long_instructions": "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\" style=\"float:right\">\n\n# Mouse X and Y\n\nOne of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.\n\n# Do This\n\nYou are going to make a bee sprite follow the mouse around the game area.\n\n-   The bee image is already loaded in the animation tab for you.\n-   Create a bee sprite that draws in the center of the window.\n-   Inside the draw loop update the position of the sprite to the position of the mouse:\n    -   Set the x position of the sprite to the value of `World.mouseX`.\n    -   Set the y position of the sprite to the value of `World.mouseY`.\n-   Run the program to test that it works."
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/8": {
    "short_instructions": "Do this",
    "long_instructions": "# Random Around Point\n\n<img src=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\" style=\"float:right\">\n\nNow that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**\n\n# Do This\n\nYou already have a bee sprite that follows the mouse.\n\n-   Update the x and y location to be randomly close to the mouse.\n    -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.\n-   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.\n\n_Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/9": {
    "short_instructions": "Modify the code so that all of the console.log commands print true",
    "long_instructions": "# More Ways to Get User Input\n\nSo far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.\n\n# Do This\n\nYou will **not write any code** in this program.\n\n-   Read the program and see if you can guess what will happen.\n-   While the program is running, press the arrow keys and observe how the screen responds.\n-   Write down or share with your neighbor your observations.\n    -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\n    -   What do you think the exclamation mark (`!`) on line 10 does?\n    -   How might you use the different keypress blocks in a game?",
    "contained levels": [
      {
        "long_instructions": "# Make a Prediction: User Input\n\nSo far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.\n\nRead the program and predict below what will happen when you press each of the up, down, left, and right arrows.\n\nAfter making your prediction, run the code and write down or share with your neighbor your observations.\n\n-   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\n-   What do you think the exclamation mark (`!`) on line 10 does?\n-   How might you use the different keypress blocks in a game?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/10": {
    "dsls": {
      "answers": [
        {
          "text": "keyWentDown()"
        },
        {
          "text": "keyWentUp()"
        },
        {
          "text": "keyDown()"
        }
      ],
      "content1": "Match the keypress block with the description of how it works. Feel free to go back to the previous bubble if you need to experiment with them.",
      "questions": [
        {
          "text": "Is true only once when the key is pressed."
        },
        {
          "text": "Is true only once when the key is released."
        },
        {
          "text": "Is true the whole time the key is pressed or held down."
        }
      ],
      "title": "Matching: Responding to Keypresses"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/11": {
    "long_instructions": "# Mouse Clicks\n\nKeypresses are great, but sometimes you want users to interact through mouse clicks. There's a new block called `mouseDown` which, similar to `keyDown`, checks whether the left or right mouse buttons is being pressed. If you are using a computer with a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`. \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're going to program the mouse button to raise the balloon back up while it's clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside the conditional, move the balloon up one pixel if the mouse is down. Otherwise, move the balloon down.\n\n_Hint: You'll need to move the code that drops the balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge: Can you make the balloon drift randomly to the left and right as it rises and falls?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/12": {
    "long_instructions": "# Responding to a Single Click\n\nEarlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!\n\n# Do This\n\nLet's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.\n\n-   Add a conditional that checks if the mouse went down.\n-   Inside your conditional, add to the `clicks` variable.\n\n_Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/puzzle/13": {
    "long_instructions": "# mouseDidMove\n\nWe can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.\n\n# Do This\n\nRight now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can \"shake\" the salt by moving the mouse back and forth.\n\n-   Add a conditional that checks if `mouseDidMove`.\n-   If the conditional is true, rotate the salt sprite randomly to the left or right.\n\n_Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/13/extras?level_name=CSD+U3+Compound+Nested+Challenge_2019": {
    "display_name": "Challenge: Checking for Multiple Conditions",
    "long_instructions": "# Challenge: Checking for Multiple Conditions\n\n_Check with your teacher before taking on this challenge._\n\nSo far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:\n\n-   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.\n-   The sprite should _not_ go all the way off the screen in any direction.\n\n# Do This Together\n\nBefore you tackle writing this program, you'll need to figure out how to check multiple conditions at once.\n\n-   **Brainstorm** with your neighbors ways you might check for more than one condition.\n-   **Share** back with other classmates so you can see other potential approaches.\n-   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).\n-   **Program** your proposed solution.\n-   **Test** your program to make sure it's actually checking all of the conditions you intended."
  },
  "https://studio.code.org/s/csd3-2019/stage/13/extras?level_name=CSD+U3+L13+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/2": {
    "display_name": "Interactive Card",
    "long_instructions": "# Example Project\n\nRun the program a few times and answer the following questions:\n\n1.  Which elements appear to use drawing commands?\n\n2.  Which elements appear to be Sprites?\n\n3.  For each Sprite, which properties are being updated?\n\n4.  Where do you see conditionals being used?\n\n5.  Are there elements that you don’t understand?"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/3": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Your Interactive Card\n\nIn the next few levels, you'll be completing your own interactive card.  Here are some examples to give you some ideas.  Don't forget to look at the code to see how they work.\n\n## Examples\n\n[![](https://images.code.org/7bbdbbb01c354a7c09bb4b9b5182a951-image-1522780803299.png)](https://studio.code.org/projects/gamelab/OzdFqrZ4oHPYsTddaRWaZxtTvdj9NzZVwCq6NkyONXM/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ed307e22854e4958a006d8023636cfd5-image-1522780803295.png)](https://studio.code.org/projects/gamelab/fmFrWsocELzP19CfbGI5P_hsgxN5ewVaB5f0Bw5S1_E/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ae0eca1dab46f13fcb21d4d0e264d637-image-1522780803298.png)](https://studio.code.org/projects/gamelab/z4XDrC0lsqoRY0xzYaXdJfChmyCl5O6YM-EOByecscc/edit)\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/4": {
    "long_instructions": "# Laying Out Your Background\n\nBefore beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!\n\n# Do This\n\nRefer to your planning activity sheet to help you lay out the shapes that will become the background to your card.\n\n-   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.\n-   Next, layer each additional drawing block in the order you want them to appear in the stack.\n-   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.\n\n**Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/5": {
    "long_instructions": "# Adding Sprites\n\nNow that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.\n\n# Do This\n\nCheck out the Sprites table on the back of your planning sheet. For each Sprite in your table:\n\n-   Initialize the Sprite at the top of your program with `createSprite()`.\n-   Find or create the image(s) for the Sprite and set it with `setAnimation()`.\n-   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute)."
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/6": {
    "long_instructions": "# User Input\n\nYou've got a background, you've got Sprites, now it's time to give your user something to do!\n\n# Do This\n\nOn the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:\n\n-   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.\n-   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).\n-   Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/7": {
    "long_instructions": "# Other Conditionals\n\nThe _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.\n\n# Do This\n\nFor each of the remaining items on your interactions table:\n\n-   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.\n-   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).\n-   Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/8": {
    "long_instructions": "# Finishing Touches\n\nNow's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.\n\n# Do This\n\nConsider adding any of the following to finish up your card:\n\n-   Text\n-   Additional images for your sprites\n-   Subtle animation in the background\n-   Sound effects  (Can you figure out how to do this?)\n-   More ways for a user to interact with your card"
  },
  "https://studio.code.org/s/csd3-2019/stage/14/puzzle/9": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/2": {
    "display_name": "Video: Velocity",
    "long_instructions": "## Questions to Consider\n\n-   Why might you want to use a velocity block instead of the counter pattern?\n-   Give an example of a counter pattern and how you could use a velocity block instead."
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/3": {
    "long_instructions": "# velocityX\n\nOne way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.\n\n# Do This\n\n-   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where][0] )\n-   Write the name of your sprite in the block.\n-   Assign the `velocityX` property a value of 1.\n-   Run the code. What happens?\n-   Re-run the code giving the `velocityX` property a different value. What's changing?",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/4": {
    "long_instructions": "# Moving Down\n\nHere is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?\n\n# Do This\n\nFind the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/5": {
    "long_instructions": "# rotationSpeed\n\nYou've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.\n\nNow, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.\n\n# Do This\n\nMake the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Use the rotationSpeed block here"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/6": {
    "long_instructions": "# Controlling Speed\n\nYou used `rotationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.\n\n# Do This\n\n-   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where][0] )\n-   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/7": {
    "long_instructions": "# Controlling Speed\n\nYour code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.\n\n# Do This\n\n-   Use an `if` statement inside the draw loop to check when the space bar is pressed.\n-   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/8": {
    "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.\n\nIn the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.\n\n# Do This\n\n-   Look at `if` statements that check the sprite's position and set its velocity.\n-   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    },
    "contained levels": [
      {
        "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.\n\n# Do This\n\n-   Look at `if` statements that check the sprite's position and set its velocity.\n-   With your partner, discuss what you think the code will do, and write your answer below.\n-   Once you have submitted your answer, run the code."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/9": {
    "long_instructions": "# Multiple Controls\n\nAs you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.\n\n# Do This\n\n-   Look at the three `if` statements inside the draw loop.\n\n-   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:\n    -   If the user presses the right arrow key, move the fish to the right.\n    -   If the fish gets to the right-hand side of the screen, move the fish to the left.\n    -   If the fish gets to the left-hand side of the screen, stop the fish.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/10": {
    "display_name": "Sprite Velocity"
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/11": {
    "long_instructions": "# Jumping\n\nYou now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the \"up\" key, then should start moving back down when it reaches the top of its jump.\n\n# Do this\n\n-   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the \"up\" arrow key. ( [Show me where][0] )\n    -   Make the frog jump up when the user presses the arrow key.\n    -   Make the frog stop moving otherwise.\n-   Add code that does the following  ( [Show me where][1] )\n    -   Checks whether the frog sprite has reached its highest point.\n    -   If so, make the sprite go back down.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement",
      "CSD_U3_L11_S17_C2": "Send the frog back down here"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/12": {
    "long_instructions": "# Mushroom\n\nNow you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.\n\n# Do this\n\n-   Use the `velocityX` block to make the mushroom move left across the screen.\n\n_Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/puzzle/13": {
    "long_instructions": "# Looping\n\nThe game will be more fun if the frog can jump more than once.  You can make the mushroom \"loop\" by checking whether it's moved past the left edge and moving it back to the right edge when it has.\n\n# Do this\n\n-   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where][0] )\n-   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/15/extras?level_name=CSD+U3+L15+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/2": {
    "display_name": "Sample Game",
    "long_instructions": "# Frog Jump\n\nLook at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?\n\n[//]: # \"https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png\"\n\n[//]: # \"https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png\"\n\n[//]: # \"https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/3": {
    "display_name": "Collision Detection",
    "long_instructions": "# Balloon\n\nThe code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.\n\n# Do This\n\n-   You do not need to change any code on this level.\n-   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n-   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?\n\n[//]: # \"https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png\"\n\n[//]: # \"https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png\"\n\n[//]: # \"https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/4": {
    "long_instructions": "# isTouching()\n\nWriting out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.\n\n# Do This\n\nInside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where][0] )\n\n_Hint: Don't forget to change the \"sprite\" to \"balloon\" and the \"target\" to \"tack\"._\n\n[//]: # \"https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png\"\n\n[//]: # \"https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png\"\n\n[//]: # \"https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png\"",
    "callouts": {
      "CSD_U3_L12_S2_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/5": {
    "long_instructions": "# Applesauce\n\nWhen the apple hits the blender, the blender should turn on.\n\n# Do This\n\nUse the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.\n\n_Challenge: Can you make the apple disappear when it touches the blender?_\n\n[//]: # \"https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png\"\n\n[//]: # \"https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png\"\n\n[//]: # \"https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png\"\n\n[//]: # \"https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png\"\n\n[//]: # \"https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png\"\n\n[//]: # \"https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/6": {
    "long_instructions": "# Making Sounds\n\nYou can also use code to play a blender sound.\n\n# Do This\n\nUse the `playSound` block from the \"World\" drawer to play the \"<https://studio.code.org/docs/sounds/blender.mp3>\" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: [][0]\n\n[//]: # \"https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png\"\n\n[//]: # \"https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png\"\n\n[//]: # \"https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png\"\n\n[//]: # \"https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png\"\n\n[//]: # \"https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png\"\n\n[//]: # \"https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png\"\n\n[//]: # \"https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/7": {
    "long_instructions": "# Rainbow Horse\n\nWhen the rainbow touches the horse, it should turn into a unicorn.\n\n# Do This\n\nUse the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.\n\n[//]: # \"https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png\"\n\n[//]: # \"https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png\"\n\n[//]: # \"https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png\"\n\n[//]: # \"https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/8": {
    "long_instructions": "# Debugging Collisions\n\nThe balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?\n\n# Do This\n\n-   Run the code and use the arrow keys to move the tack to pop the balloon.\n-   In the code below, change `balloon.debug = false` to `balloon.debug = true`.\n-   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.\n-   Run the code again, then discuss with your partner why the balloon is popping early.\n\n_Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_\n\n[//]: # \"https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png\"\n\n[//]: # \"https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png\"\n\n[//]: # \"https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png\"\n\n[//]: # \"https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png\"\n\n[//]: # \"https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/9": {
    "long_instructions": "# Scoreboard\n\nYou can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where][0] )\n\n# Do This\n\n-   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where][1] )\n-   If it has, do the following three things:\n    -   Use the counter pattern on the score variable to increase the score.\n    -   Reset the carrot's x position off the right-hand side of the screen.\n    -   Set the carrot's y position to a random number between 10 and 390.",
    "callouts": {
      "CSD_U3_L12_S8_C1": "These blocks display the score.",
      "CSD_U3_L12_S8_C2": "The blocks that determine whether the bunny has caught the carrot go here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/10": {
    "long_instructions": "# Improve Your Game\n\nNow that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.\n\n_Note: The `playSound` block now has an extra parameter called \"loop\" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._\n\n# Do This\n\n-   Add at least two effects when your sprites collide.\n\n_Challenge: Add a scoreboard to the top of your screen._"
  },
  "https://studio.code.org/s/csd3-2019/stage/16/puzzle/11": {
    "display_name": "Collision Detection Review"
  },
  "https://studio.code.org/s/csd3-2019/stage/16/extras?level_name=CSD+U3+L16+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/2": {
    "display_name": "Velocity and the Counter Pattern",
    "contained levels": [
      {
        "long_instructions": "# Velocity and the Counter Pattern\n\nUsing the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.\n\n# Predict\n\nWhat do you think will happen when the code is run? Why? Once you're ready you can run the code to find out."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/3": {
    "long_instructions": "# Velocity and the Counter Pattern\n\nAs you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.\n\n# Do This\n\nThis program already makes a car move across the screen, but it's going very slowly.\n\n-   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S6_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/4": {
    "long_instructions": "# Falling Rock\n\nThe rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?\n\n# Do This\n\n-   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where][0] )\n\n_Challenge: Can you make the rock spin as it falls?_",
    "callouts": {
      "CSD_U3_L11_S7_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/5": {
    "long_instructions": "# Rising Bubble\n\nThis program makes a bubble rise up the water. Can you make it get faster as it rises?\n\n# Do This\n\n-   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/6": {
    "long_instructions": "# Slowing Things Down\n\nNow that you've had some practice speeding things up, can you use the counter pattern to slow sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX` block with a counter pattern to slow the car down by 0.25 as it moves across the screen.  \n-   Discuss with your Partner: What do you think will happen when the car finally stops?\n\n_Challenge: Add code that makes the car slow down only if its velocityX is greater than 0._"
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/7": {
    "long_instructions": "# Simulating Gravity\n\nIn the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.\n\nIf you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!\n\n# Do This\n\nThe rock is thrown in the air but it never falls back down.\n\n-   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.\n-   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?\n-   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?"
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/8": {
    "long_instructions": "# Jumping\n\nIncreasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.\n\n# Do This\n\nA sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.\n\n-   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where][0] )\n-   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?",
    "callouts": {
      "CSD_U3_L13_S8_C1": "Set the velocity here"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/9": {
    "long_instructions": "# Floating Right\n\nYou're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.\n\n# Do This\n\nIn this level you'll make your sprite start floating to the right when the right arrow is pressed.\n\n-   Add an `if` statement inside your draw loop below the one you created for the \"up\" arrow.\n-   Use the `keyDown` block to make the `if` statement respond to when the \"right\" arrow is pressed.\n-   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.\n\nRun your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press \"up\". You'll make the left arrow work in the next level."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/10": {
    "long_instructions": "# Floating Left\n\nIn the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.\n\n# Do This\n\n-   Add code to your draw loop that will make the sprite start moving to the left when the \"left\" arrow is down.\n-   Make sure you're using velocity and the counter pattern together.\n\nOnce your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?"
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/11": {
    "long_instructions": "# Add a Coin\n\nIn the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.\n\n# Do This\n\nIn this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.\n\n-   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.\n-   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.\n-   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.\n\nTest your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/12": {
    "long_instructions": "# Reset Coin\n\nWhen your character touches the coin you should reset it somewhere on the screen.\n\n# Do This\n\n-   Place an `if` block inside of your draw loop.\n-   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.\n-   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.\n    -   _Hint: You've already written this code elsewhere in your program._\n\nTest your code before moving on. When your player touches the coin, it should move somewhere else on the screen."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/13": {
    "long_instructions": "# Make It Your Own\n\nYou now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a \"bad coin\" that takes away points?\n\n# Do This\n\nMake at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate."
  },
  "https://studio.code.org/s/csd3-2019/stage/17/puzzle/14": {
    "display_name": "Velocity and the Counter Pattern Review"
  },
  "https://studio.code.org/s/csd3-2019/stage/17/extras?level_name=CSD+U3+L17+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/2": {
    "display_name": "Sprite Interactions",
    "long_instructions": "# Sprite Interactions\n\nSo far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.\n\n# Do This\n\n-   Run the program and observe the interaction between the two sprites.\n-   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:\n    -   `sprite.isTouching()`\n    -   `sprite.velocityX`\n    -   `sprite.velocityY`\n    -   `sprite.x`\n    -   `sprite.y`\n\nBe ready to share your ideas with your classmates."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/3": {
    "long_instructions": "# Program a Sprite Interaction\n\nYou should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?\n\n# Do This\n\nThe giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.\n\n-   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.\n\n[//]: # \"https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png\"\n\n[//]: # \"https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/4": {
    "long_instructions": "# Write Your Own Sprite Interaction\n\nIn the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.\n\n# Do This\n\nThe elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.\n\n-   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/5": {
    "long_instructions": "# Displace\n\nThe interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.\n\n# Do This\n\nSomeone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?\n\n-   Find the line of code where the `sprite.displace()` block is used and fix the error."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/6": {
    "long_instructions": "# More Collision Blocks\n\nThree new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?\n\n# Do This\n\n-   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where][0] )\n    -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._\n-   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?\n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]: # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\"",
    "callouts": {
      "CSD_U3_L13_S6_C1": "Change this block."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/7": {
    "long_instructions": "# Collision Types\n\nThere are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\n\n# Do This\n\nChoose the best block to model the basketball bouncing off the floor. ( [Show me where][0] )\n\\*Hint: You can try the different blocks out, or read more about them in the \"Help and Tips\" tab.\n[//]\\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)\n\n[//]: # \"https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png\"",
    "callouts": {
      "CSD_U3_L13_S6_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/8": {
    "long_instructions": "# Debugging Sprite Interactions\n\nSprite interactions just run some code when they're called. The interactions are not \"remembered\" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.\n\n# Do This\n\nThe turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?\n\n-   Run the code and try to make the turtle collide with the tree.\n-   Look through the code and discuss with your partner what the problem is.\n-   Correct the code, then run it again to make sure it works."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/9": {
    "long_instructions": "# Debug\n\nSometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.\n\n# Do This\n\nThese two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!\n\n-   Run the code and watch the way that the coins interact.\n-   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.\n-   Change the gold coin's starting x position to 51 and run the code again.\n-   Discuss with a partner: Why do you think the coins are bouncing strangely?"
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/10": {
    "long_instructions": "# setCollider\n\nSprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a \"rectangle\" or a \"circle\".  By default all colliders are \"rectangle\".\n\n# Do This\n\n-   Find the `sprite.setCollider()` block for the gold coin, and change it from \"rectangle\" to \"circle\".\n-   Add a new `sprite.setCollider()` block for the silver coin, and choose \"circle\" for the shape of the collider.\n-   Run the code again to see how the sprites bounce.\n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]: # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/11": {
    "long_instructions": "# Bounciness\n\nSo far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.\n\n# Do This\n\n-   Read the code below and press \"Run\" to see the behavior of the basketball and pool ball.\n-   Use a `bounciness` block to set the bounciness of your soccer ball.\n-   Run the code again to see how the sprites bounce off the floor.\n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]: # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\"\n\n[//]: # \"https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png\""
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/12": {
    "long_instructions": "# Flyer Game - Add Obstacle\n\nThis is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.\n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png\" style=\"float:right;width:200px\">\n\n# Do This\n\nAdd an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.\n\n-   Add a new sprite to your game called \"obstacle\".\n-   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.\n-   Use the `sprite.setAnimation()` block to give your sprite the image you chose.\n-   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/13": {
    "long_instructions": "# Flyer Game - Interacting with the Obstacle\n\nYou don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.\n\n# Do This\n\n-   Add code to your game that prevents your player from moving through the obstacle.\n-   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.\n-   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?"
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/14": {
    "long_instructions": "# Flyer Game - Coin Behind the Obstacle\n\nRight now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.\n\n# Do This\n\n-   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.\n-   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?"
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/15": {
    "long_instructions": "# Flyer Game - Change Colliders\n\nRight now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.\n\n# Do This\n\n-   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.\n-   Set your sprites' debug properties to `true` to make sure your game is working the way you want.\n-   Play your game to make sure it's working the way you want."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/16": {
    "long_instructions": "# Flyer Game - Make It Your Own\n\nTime to make this game your own by using what you've learned about sprite interactions.\n\n# Do This\n\nAdd at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.\n\n-   Create invisible sprites at the edge of your game to keep your character from bouncing out.\n-   Add platforms to the game for your character to navigate around.\n-   Add another obstacle to your game.\n-   Create another idea of your own."
  },
  "https://studio.code.org/s/csd3-2019/stage/18/puzzle/17": {
    "display_name": "Sprite Interactions Review"
  },
  "https://studio.code.org/s/csd3-2019/stage/18/extras?level_name=CSD+U3+L18+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/2": {
    "display_name": "Video: Functions",
    "long_instructions": "## Questions to Consider\n\n-   Think of a time when a function might have helped you write a program.\n    -   What code would go in the **definition** of the function?\n    -   When would you **call** the function?\n    -   What would you name it?"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/3": {
    "display_name": "Video: Calling and Defining Functions",
    "long_instructions": "# Calling Functions\n\nFunctions let you build your own blocks and decide what code goes inside of them.  This program has already created two functions, but only one of them is being called.\n\n# Do This\n\n-   **Call the second function** to reveal the full image. Use the function that is being called as a guide.\n-   **Tip:** Just as with all other blocks, spelling and capitalization are important here."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/4": {
    "long_instructions": "# Reordering Code\n\nPlacing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.\n\n# Do This\n\nThis program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.\n\n-   **Read the 4 functions** to know what they do\n-   **Call the functions** in an order that draws the scene in the way that looks best to you"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/5": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "The red square will be drawn but the green one will not. You cannot call functions after they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "The green square will be drawn but the red one will not You cannot call functions before they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Both squares will be drawn. You can create functions anywhere you like in your code.",
              "correct": true,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Neither square will be drawn. There is an error in the code.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            }
          ],
          "markdown": "# Does It Matter Where You Create Functions?\n\nSo far all your functions have been created at the bottom of your code. What do you think will happen if you call a function before it's defined?\n\nNotice that the red square is drawn **before** its function is created while the green square is drawn **after** its function is created. Which of these do you think will be drawn?\n"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/6": {
    "long_instructions": "# Calling Functions in the Draw Loop\n\nYou can call a function inside the draw loop, just as you would anywhere else in your code.\n\n# Do This\n\nA function that will draw a background has been created for you. A sprite has been created to move across the background.\n\n-   **Call the function inside the draw loop** so that the sprite appears on top of the background.\n-   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/7": {
    "long_instructions": "# Calling Functions Multiple Times\n\nYou'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\n\n# Do This\n\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen?\n\n-   **Note:** The function is already called once at the beginning of your program\n-   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\n-   Use this if-statement and the function written for you to make the sprite move across the screen multiple times."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/8": {
    "long_instructions": "# Making Changes to Functions\n\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\n\n# Do This\n\nMake changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/9": {
    "long_instructions": "# Creating Functions to Organize Code\n\nIn Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.\n\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png\" style=\"float:right;width:150px\">\n\n# Do This\n\nThis program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.\n\n-   **Write the `drawNight` function** which has been created but is empty.\n-   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/10": {
    "long_instructions": "# Write Your Own Function\n\nTime to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.\n\n# Do This\n\n-   **Read and run the code** that already exists to make sure you know how it works.\n-   **Write the code for the `setCoin`** function to make the coin fall from the sky.\n-   You can go look at some of the previous levels if you need help."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/11": {
    "long_instructions": "# Catch the Coin, Increase the Score\n\nLet's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.\n\n# Do This\n\n-   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.\n-   Make sure you're **calling your function** to reset the coin once it's been caught.\n-   Play the game and **randomize the velocity of the coin** to a range that you think is fun."
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/12": {
    "long_instructions": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n# Do This\n\n-   Use an **if-statement** and two separate functions to draw your backgrounds.\n-   Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"silly\" background are. Have fun with it!"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/puzzle/13": {
    "display_name": "Functions Review"
  },
  "https://studio.code.org/s/csd3-2019/stage/19/extras?level_name=CSD+U3+L19+Freeplay_2019": {
    "display_name": "Free Play",
    "long_instructions": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  [][0]  to send your creation to a friend, or [][1] to send it to your Projects Gallery."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/2": {
    "display_name": "Sample Game",
    "long_instructions": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n-   How many sprites are there in this game. Which are they?\n-   What variables are needed to make this game? What do they store?\n-   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?"
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/3": {
    "dsls": {
      "markdown": "# Stop\n\nBefore you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/4": {
    "long_instructions": "# Using Multiframe Animations\n\nIn the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.\n\n# Do This\n\nThis program already includes several sprites but they don't yet have any animations.\n\n-   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.\n-   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/5": {
    "long_instructions": "# Slow Down\n\nNice work! Time to start learning how to control these multiframe animations.\n\n# Do This\n\nYour sprites should be animated but they're moving really quickly. \n\n-   Head back to the Animation Tab. Underneath each animation you should see a slider. [][0]\n-   Use these sliders to slow down your animations so they look more realistic."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/6": {
    "long_instructions": "# Editing Multiframe Animations\n\nYour sprites will look a lot more realistic if they turn around when they're moving. You can switch back and forth between multiframe animations when the user presses different keys.\n\n# Do This\n\nRead this code and run the program. Make sure you know how the sprite responds to the arrow keys.\n\n-   In the Animation Tab, create a copy of the alien animation by clicking the following button: [][0]\n-   Use the tool to flip your animation. Make sure you flip both frames using this button:  [][1] \n-   Rename your new animation.\n-   Use your new animation and old animation so that the alien faces the correct direction when moving. Where do you think you'll need to set the sprite's animation in your code?"
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/7": {
    "long_instructions": "# Getting Started: Set Animations\n\nYou should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.\n\n# Do This\n\nBefore we get started you'll want some better animations for each of your sprites.\n\n-   In the Animation Tab are animations for each of your sprites. Go look at what they are.\n-   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.\n-   Head to [Level 4][0] if you need help remembering how to do this."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/8": {
    "long_instructions": "# Moving The Enemies\n\nIt's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.\n\n# Do This\n\nAt the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.\n\n-   Use `sprite.x` to set the x position to 0.\n-   Use `sprite.y` to set the y position should be a random number between 150 and 250.\n-   Use `sprite.velocityX` to set the x velocity to 2.\n\nTest your program. Your enemy sprites should now be moving across the bridge."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/9": {
    "long_instructions": "# Touching the Cake\n\nIf the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.\n\n# Do This\n\nInside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.\n\n-   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.\n-   Inside your `if` block place code that:\n    -   sets enemy1's x position back to 0.\n    -   sets enemy1's y position to a random number between 150 and 250.\n    -   uses the counter pattern to decrease the score by 2.\n\n(_Hint: You can reuse some code you already wrote_)\n\nTest your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/10": {
    "long_instructions": "# Touching the Cake: Second Ladybug\n\nYour first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.\n\n# Do This\n\nInside the `enemiesTouchCake` function you should have written code that resets `enemy1`.\n\n-   Copy the entire if-statement you wrote in the last level (Ctrl-C).\n-   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\n-   Change the name of the sprite in that code from `enemy1` to `enemy2`.\n\nTest your code. Now both bugs should reset when they touch the cake."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/11": {
    "long_instructions": "# Creating Functions\n\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png\" style=\"float:right; height:90px\">\n\nYour program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.\n\n# Do This\n\n<img src=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png\" style=\"\nfloat:right; height:70px\">\n\n-   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.\n-   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.\n-   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/12": {
    "long_instructions": "# Moving Left and Right\n\nNow that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.\n\n# Do This\n\nFor this level you'll be writing code inside the `movePlayer` function.\n\n-   Use an `if` block along with `keyDown` to detect when the \"right\" arrow is pressed.\n-   Use `sprite.x` and the counter pattern increase the player's x position by 3.\n-   Use another `if` block to move the player to the left when the \"left\" arrow is pressed. This time you'll need to decrease the player's x position.\n\nTest your game. Your character sprite should now move left and right when you press the left and right arrows."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/13": {
    "long_instructions": "# Moving Up and Down\n\nYou'll want your player sprite to move up and down as well.\n\n# Do This\n\nFor this level you'll still be writing code inside the `movePlayer` function.\n\n-   Use an `if` block along with `keyDown` to detect when the \"up\" arrow is pressed.\n-   Use `sprite.y` to make the player go up by 3 using the counter pattern.\n-   Use another `if` block to move the player down when the \"down\" arrow is pressed.\n\nTest your code. Your character should now move in all 4 directions."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/14": {
    "long_instructions": "# Change Player Animations\n\nRight now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.\n\n# Do This\n\n-   Inside the Animation Tab copy the animation of your player sprite.\n-   Flip each frame of the new animation so that the sprite is facing in the opposite direction.\n-   Rename your new animation.\n-   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the \"left\" and \"right\" arrows are pressed."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/15": {
    "long_instructions": "# Displace Enemies\n\nIt's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.\n\n# Do This\n\nFor this level you'll be writing code inside the `displaceEnemies` function.\n\n-   Write code that makes player displace both enemy sprites.\n-   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.\n\n_Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._"
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/16": {
    "long_instructions": "# Touching the Water\n\nThe last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.\n\n# Do This\n\nFor this level you'll be writing code inside the `enemiesTouchWater` function.\n\n-   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.\n-   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use."
  },
  "https://studio.code.org/s/csd3-2019/stage/20/puzzle/17": {
    "long_instructions": "# Make It Your Own\n\nYou just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?\n\n# Do This\n\nSelect one of the challenges below to add to the game or come up with a challenge of your own.\n\n-   Change the visuals of the game so that your player, enemies, or cake look different.\n-   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.\n-   Randomize the speed of the enemies.\n-   Create a new background that shows up when players reach a higher score."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/2": {
    "display_name": "Sample Platform Jumper Game",
    "long_instructions": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/3": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Build a Platform Jumper\n\nIn the next several levels, you'll be building a platform jumper game.  Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher before clicking to the next level.\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/4": {
    "long_instructions": "# Background\n\nThe first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where][0])\n\nIn order for the background function to do something, you have to call it inside the draw loop. ([Show me where][1])\n\nThere is also an empty function named `background2`. ([Show me where][2])  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.\n\n# Do this\n\n-   Read the code for `background1`.\n-   Fill the `background2` function with new code for a second background.\n-   Test your `background2` function by calling it inside the draw loop.\n\n_Hint: It's much easier to copy, paste, and make small changes to your code in text mode._",
    "callouts": {
      "CSD_U3_L16_S3_C1": "the function that draws the background",
      "CSD_U3_L16_S3_C2": "the code that calls the function",
      "CSD_U3_L16_S3_C3": "Change this function."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/5": {
    "long_instructions": "# Score Variable\n\nNow that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.\n\nYou should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.\n\n# Do This\n\n-   Create a score variable at the beginning of your game program. ( [Show me the block][0] )\n-   Set the score equal to 0.",
    "callouts": {
      "callout": "This block creates a variable."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/6": {
    "long_instructions": "# Choosing your Background\n\nNow that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 12][0]\n\n# Do This\n\n-   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.\n-   Test your code by changing the start score to 100, then running to code to see whether the background changes.\n\n_Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._"
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/7": {
    "long_instructions": "# Make the Scoreboard\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\" style=\"float:right;\">\n\nYou'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text \"Score\" and not the actual score. ([Show me where][0])  You can see an example of a working scoreboard in [Lesson 16 Level 9][1].\n\n# Do This\n\n-   Read the code in the `showScore` function.\n-   Call the function inside the draw loop, right after you draw the backgrounds.\n-   Use the `text` block to display the score at the top of the screen.",
    "callouts": {
      "CSD_U3_L17_S7_C1": "Score is printed here."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/8": {
    "long_instructions": "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\" style=\"float: right;\"> \n\nNow that you have your background and your variables, it's time to create your sprites.  Usually, it will be easiest to start with the sprites that are part of the environment, such as your platforms.  The sample game had two platform sprites, but you'll make just one first, then test it before copying and pasting the code to make the second.\n\n# Do This\n\n-   Look at your worksheet and choose a platform sprite to create.\n-   In the \"Create sprites\" area at the top of your code, create your new sprite with the `createSprite` block, giving it the correct position and label (name). ([Show me the block][0])\n-   Use the `setAnimation` and `velocityY` blocks to give your sprite the correct image and downward velocity.\n-   Test the sprite to make sure that it's moving in the correct way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go off the screen and not come back.  You'll make it loop back around in the next level._",
    "callouts": {
      "CSD_U3_S17_L8_C1": "This block creates a new sprite."
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/9": {
    "long_instructions": "# Loop the Platform Sprite\n\n<img src=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\" style=\"float: right;\">\n\nRight now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13][0] to see an example of a sprite looping around a screen.\n\n# Do This\n\n-   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.\n-   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.\n-   Call the function inside the draw loop, in the \"update sprites\" area.\n-   Run the code to test your sprite.\n\n_Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_"
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/10": {
    "long_instructions": "# Make your Second Platform\n\n<img src=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\" style=\"float:right;\">\n\nMaking a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"platform\", you could name this one \"platform2\".\n-   Change the starting position of your new platform sprite.\n-   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it.\n\n_Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._"
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/11": {
    "long_instructions": "# Create an Item\n\n<img src=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\" style=\"float:right;\">\n\nNext, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.\n\n# Do This\n\n-   Use the `createSprite` block to make an item sprite in the \"create sprites\" section of your code.\n-   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.\n-   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/12": {
    "long_instructions": "# Loop your Item\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\" style=\"float:right\">\nNow that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.\n\n# Do This\n\n-   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.\n-   Call the function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/13": {
    "long_instructions": "# Make your Second Item\n\n<img src=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\" style=\"float: right\">\n\nNext, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"star\", you could name this one \"star2\".\n-   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/14": {
    "long_instructions": "# Create your Player\n\n<img src=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\" style=\"float:right\">\n\nNow you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.\n\n# Do This\n\n-   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.\n-   Use `setAnimation` to give it the correct image.\n-   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4][0].\n-   Call the `playerFall` function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/15": {
    "long_instructions": "# User Controls\n\nNext, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.\n\n# Do This\n\n-   Create a new `controlPlayer` function in the \"functions\" area of your code.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href=\"../../12/puzzle/7\" target=\"_blank\"> Lesson 12 Puzzle 7 </a> for examples.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href=\"../../15/puzzle/11\" target=\"_blank\"> Lesson 15 Puzzle 11 </a> for an example.\n-   Call the `controlPlayer` function inside the draw loop.\n-   Run the game and test your code."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/16": {
    "long_instructions": "# Player Interactions\n\nThe last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.\n\n# Do This\n\n-   Create a `playerLands` function and add it to the \"functions\" area of your code.\n-   Inside the function, use the `collide` block so that your player can land on both the platforms.\n-   Call the function inside the draw loop.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/17": {
    "long_instructions": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n-   Create a `collectItems` function and add it to the \"functions\" area of your code.\n-   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n-   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9][0] for an example.\n-   Call the function inside the draw loop, in the \"update sprites\" area of your code.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/18": {
    "display_name": "Plane Jumper",
    "long_instructions": "# Plane Jumper\n\nHere's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.\n\nChoose one or more of the following changes and add them to your game.\n\n-   Choose new animations for your player, platform, and items.\n-   Make it impossible for your player to go off the left or right of the screen.\n-   Add a different type of item for the player to collect or avoid.\n-   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/19": {
    "display_name": "Bunny Jumper",
    "long_instructions": "# Bunny Jumper\n\nHere's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.\n\nChoose one or more of the following changes and add them to your game.\n\n-   Make your player's animation change direction when the player changes direction.\n-   Add another background and make it appear when the score gets even higher.\n-   Make your items interact with the platforms in some way."
  },
  "https://studio.code.org/s/csd3-2019/stage/21/puzzle/20": {
    "display_name": "Improve Your Game",
    "long_instructions": "# Improve Your Game\n\nImprove your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.\n\n-   Choose new animations for your player, platform, and items.\n-   Prevent your player from going off the side of the screen.\n-   Add a different type of item for the player to collect or avoid.\n-   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\n-   Make your player's animation change direction when the player changes direction.\n-   Change the player to only jump when it is on a platform.\n-   Add another background and make it appear when the score gets even higher.\n-   Make your items interact with the platforms in some way."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/1": {
    "display_name": "Lesson Overview"
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Create your own game\n\nNow that you have all the skills you need, it's time to make your own game!\n\nWith a partner, brainstorm some different ideas for your game.  You can think about the games you've already seen, or look at some more sample games to give you ideas.\n\n[<img src=\"https://images.code.org/fc2d4cdba80a476b1ff476081991031e-image-1498594631779.png\" style=\"width: 200px; float: left; margin: 10px;\">](https://studio.code.org/projects/gamelab/AwDcX5nehOApfzyywI6BOLT1xbf0MIV1dUj8KjQaNtA)\n\n[<img src=\"https://images.code.org/b89895bdd43be4b729ca9165fc2923cf-image-1498595512898.28.24 PM.png\" style=\"width: 200px; float: left; margin: 10px;\">](https://studio.code.org/projects/gamelab/r9OYVTSj2od8vaCA-nKikTVpx-2Co8qHhuZiBIu30JA)\n\n[<img src=\"https://images.code.org/d430061caab264330da0227b53e2db90-image-1498595505047.27.59 PM.png\" style=\"width: 200px; margin: 10px;\">](https://studio.code.org/projects/gamelab/hAz7RSdqc0c_MSQVUpvz1XrLDr8QLsansWDVI0ZberQ)\n\n[<img src=\"https://images.code.org/c9fb241c5684e10d9ba2b85d4d4a906b-image-1498764384615.25.58 PM.png\" style=\"width: 200px; margin: 10px;\">](https://studio.code.org/projects/gamelab/DmRPNYR3n7bMO--_KkP7r6mOoGynBVyi3BMVPWDiVeI)\n\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game.  You'll spend the next few levels creating your game.\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/3": {
    "long_instructions": "# Create your Variables\n\nFirst, you'll need to create all of your variables and put them in the variables area of your code.\n\n-   [Show me the block][0]\n-   [Show me the area in the code][1]\n\nDon't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.",
    "callouts": {
      "CSD_U3_S18_L3_C1": "This block creates a new variable.",
      "CSD_U3_L18_S3_C2": "Variables area"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/4": {
    "long_instructions": "# Create your Backgrounds\n\nNext, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.\n\n-   [Show me the block to create a new function][0]\n-   [Show me the area in the code to put my function][1]\n\nAfter you create your functions, test them by calling them inside the draw loop, one background per test.\n\n-   [Show me the block to call my function][2]",
    "callouts": {
      "CSD_U3_S18_L4_C1": "This block calls your function.",
      "CSD_U3_L18_S4_C2": "Functions area"
    }
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/5": {
    "long_instructions": "# Display Boards\n\nNow that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9][0] for an example of how to make a scoreboard.\n\nFor each display board:\n\n-   Create a function to display the information\n-   Call the function in the draw loop\n\nBe sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/6": {
    "long_instructions": "# Choose your Backgrounds\n\nNow that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11][0].\n\nAfter you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/7": {
    "long_instructions": "# Create your Animations\n\nNext you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/8": {
    "long_instructions": "# Create your Sprites\n\nNext you will create your sprites and give them starting properties in the \"Create Sprites\" area of your code.  For each sprite your should:\n\n-   Create the sprite in the correct place on the screen\n-   Set its animation (or color and size)\n-   Set its velocity and rotation speed, if needed\n-   Set its collider and bounciness, if needed\n\nAfter you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.\n\nIf your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/9": {
    "long_instructions": "# Sprite Movement Functions\n\nNow you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9][0] and `playerFall` in [Lesson 21 Puzzle 14][1].\n\nFor each movement:\n\n-   Create a function that will make the sprite move in that way\n-   Call the function inside the draw loop"
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/10": {
    "long_instructions": "# User Controls\n\nNext, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13][0] as an example."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/11": {
    "long_instructions": "# Sprite Interactions\n\nThe last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17][0] and `displaceEnemies` in [Lesson 20 Puzzle 15][1] as examples.\n\nFor each interaction:\n\n-   Create a function in the functions area of your code\n-   Call the function inside the draw loop\n\nAfter you make each function, run the code to test it before making another."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/12": {
    "display_name": "Project - Finishing Touches",
    "long_instructions": "# Finishing Touches\n\nNow that you have the basis for your game, it's time to add some finishing touches.\n\nTo make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.\n\n-   Find a way to keep your player from going off the edges of the screen.\n-   Add a different item for your player to collect or avoid that are worth different point values.\n-   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.\n-   Add sprites that move in the background of your game.\n-   Make another background to switch to when the score gets even higher, or when the game ends.\n-   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.\n-   If your game has platforms, try making the objects in your game interact with these platforms in some way."
  },
  "https://studio.code.org/s/csd3-2019/stage/22/puzzle/13": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    }
  },
  "https://studio.code.org/s/csd3-2019/lockable/1/puzzle/1": {
    "dsls": {
      "title": "Interactive Animations and Games Post-Project Test"
    }
  },
  "https://studio.code.org/s/csd3-2019/lockable/2/puzzle/1": {
    "dsls": {
      "markdown": "# CS Discoveries Post-Course Survey\n\n**Your input and feedback is important to us!** We use it to:\n\n* understand your experience\n* make improvements to the course\n\nThanks for taking the time to help make CS Principles even better!\n\n"
    }
  },
  "https://studio.code.org/s/csd3-2019/lockable/2/puzzle/2": {
    "dsls": {
      "title": "CS Discoveries End of Semester Student Survey"
    }
  }
}