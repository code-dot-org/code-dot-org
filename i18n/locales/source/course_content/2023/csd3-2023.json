{
  "https://studio.code.org/s/csd3-2023/lessons/1/levels/1": {
    "dsls": {
      "description": "Refer to your activity guide to recommend one of these templates to each client based on their needs.",
      "display_name": "Animation and Game Design Templates"
    },
    "sublevels": {
      "CSD U3 PSP Sample 1_2023": {
        "display_name": "Template A",
        "bubble_choice_description": "Animated scene template.",
        "long_instructions": "# Animation and Game Design Template A\r\n\r\nRefer to your activity guide to recommend a template to each client based on their needs."
      },
      "CSD U3 PSP Sample 2_2023": {
        "display_name": "Template B",
        "bubble_choice_description": "Interactive item catch game template.",
        "long_instructions": "# Animation and Game Design Template B\r\n\r\nRefer to your activity guide to recommend a template to each client based on their needs.\r\n\r\nYou can make the character move with the left and right arrow keys.  "
      },
      "CSD U3 PSP Sample 3_2023": {
        "display_name": "Template C",
        "bubble_choice_description": "Interactive push and collect game template.",
        "long_instructions": "# Animation and Game Design Template C\r\n\r\nRefer to your activity guide to recommend a template to each client based on their needs."
      },
      "CSD U3 PSP Sample 4_2023": {
        "display_name": "Template D",
        "bubble_choice_description": "Interactive side-scroller game template.",
        "long_instructions": "# Animation and Game Design Template D\r\n\r\nRefer to your activity guide to recommend a template to each client based on their needs.\r\n\r\nYou can make the character jump with the space bar.\r\n\r\n"
      },
      "CSD U3L1 PSP Sample 5": {
        "display_name": "Template E",
        "bubble_choice_description": "Interactive greeting card animation template.",
        "long_instructions": "# Animation and Game Design Template E\r\n\r\nRefer to your activity guide to recommend a template to each client based on their needs."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/1/levels/2": {
    "dsls": {
      "title": "Interactive Animations & Games Rapid Survey!"
    },
    "sublevels": {
      "csd-pulse-check-survey-preamble_2019_pilot_copy2_csd3_2023": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **five quick questions**.\n\n<small>\n<em>Code.org takes your privacy seriously.</em> Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n</small>\n"
        }
      },
      "intro-pulse-survey-q1_csd3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "This is the first I am learning about computer science",
              "correct": true
            },
            {
              "text": "I have done smaller computer science activities (for example: an hour of code), but this is my first longer class",
              "correct": true
            },
            {
              "text": "I have already taken classes or done longer online tutorials on computer science",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "What prior experiences have you had with computer science?"
            }
          ]
        }
      },
      "intro-pulse-survey-q2_csd3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "This is the first I am learning about creating Interactive Animation & Games",
              "correct": true
            },
            {
              "text": "I have done smaller creating Interactive Animation & Games activities (for example: an hour of code), but this is my first longer class",
              "correct": true
            },
            {
              "text": "I have already taken classes or done longer online tutorials on creating Interactive Animation & Games",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "What prior experiences have you had with creating Interactive Animation & Games?"
            }
          ]
        }
      },
      "intro-pulse-survey-q5_csd3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like computer science."
            }
          ]
        }
      },
      "intro-pulse-survey-q3_csd3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I have the ability to learn computer science"
            }
          ]
        }
      },
      "intro-pulse-survey-q4_csd3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future"
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/2/levels/1": {
    "display_name": "Drawing Shapes",
    "long_instructions": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\n-   Choose a color to change the color of the shapes\n-   Click on a shape EVERY TIME you want to draw a new shape\n-   Try turning on the grid by checking the box underneath the \"Run\" button at the bottom.\n\nMake sure you hit \"Run\" to start the program."
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/1": {
    "display_name": "Introduction to Game Lab",
    "long_instructions": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n1.  Look at the line of code in the workspace below these instructions ( [Show me where][0] ) and discuss with your partner where you think the shape will be drawn on the grid.\n2.  Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens.\n3.  Change the numbers inside the block, then try running the program again.\n4.  Try to place the rectangle near the bottom right of the screen.",
    "teacher_markdown": "# Tour of Game Lab\n\nDepending on the age and comfort level of your students, you may choose to use this level to tour the environment as a whole class. Make sure that students can find the level instructions, coding area, display area, and block drawers. This is also a good opportunity to point out some of the useful resources like documentation and the blocks to text button.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code"
    },
    "contained levels": [
      {
        "long_instructions": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n1.  Look at the line of code in the workspace below these instructions and discuss with your partner where you think the shape will be drawn on the grid.\n2.  Write your prediction in the text box below.\n3.  Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/2": {
    "display_name": "Introduction to Game Lab",
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Explore Game Lab\n\n# Do This\n\n1.  Here is the same line of code from the previous level.\n2.  Change the numbers inside the block, then try running the program again.\n3.  Try to place the rectangle near the bottom right of the screen.",
    "teacher_markdown": "# Tour of Game Lab\n\nDepending on the age and comfort level of your students, you may choose to use this level to tour the environment as a whole class. Make sure that students can find the level instructions, coding area, display area, and block drawers. This is also a good opportunity to point out some of the useful resources like documentation and the blocks to text button.",
    "callouts": {
      "": ""
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/3": {
    "display_name": "Using the Grid",
    "long_instructions": "<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png\" style=\"float:right;width:150px\">\n\n# Place Squares in Corners\n\nA big part of using Game Lab is understanding position. Remember you can always turn on the grid ([Show Me Where][0]) or hover with the mouse to help find the x and y position you want.\n\n# Do This\n\n1.  Place two rectangles exactly in the corners of the screen, just like the picture.\n    -   You will need to drag out a second [`rect()`(#4dd0e1)][1] block!",
    "callouts": {
      "U3L3.3 - grid": "Turn on the grid here!"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png\" style=\"margin-left:20px;float:right;width:200px;\">\n\n_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# fill(color)\n\nYou can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.\n\n# Do This\n\n1.  Look at the code that sets the color. ( [Show me where][0] )\n2.  Change the color from blue to yellow.\n3.  Add a new square to the image\n    -   Drag out a [`rect()`(#4dd0e1)][1] block into the code area below the fill command ( [Show me where][2] ). \n    -   The new square can go any location on the screen you like.\n    -   Remember you can always turn on the grid ([Show Me Where][3]) or hover with the mouse to help find the x and y position you want.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area.",
      "U3L3.3 - grid": "Turn on the grid here!"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png\" style=\"float:right\">\n\n# Order Matters\n\nIn Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.\n\n# Do This\n\n1.  Look at the code that draws the two rectangles. \n    -   The first is drawn red, and the second is drawn blue.\n2.  Change the red rectangle's color to green.\n3.  Change the order of the code so the green rectangle appears on top.\n    -   Remember you can always turn on the grid ([Show Me Where][0]) or hover with the mouse to help find the x and y position you want.",
    "callouts": {
      "U3L3.3 - grid": "Turn on the grid here!"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png\" style=\"float:right;width:150px;\">\n\n# ellipse\n\nYou can use [`ellipse()`(#4dd0e1)][0] to make a circle.\n\n# Do This\n\n1.  Look at the code that makes the ellipse.\n2.  Add a new ellipse of a different color.\n    -   Remember you can always turn on the grid ([Show Me Where][1]) or hover with the mouse to help find the x and y position you want.",
    "callouts": {
      "U3L3.3 - grid": "Turn on the grid here!"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/7": {
    "dsls": {
      "description": "Do lots of practice!",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 drawing practice 1_2023": {
        "display_name": "Debug a car",
        "bubble_choice_description": "Debug this code so that the wheels appear.",
        "long_instructions": "<img src=\"https://images.code.org/6edeebac96c298ad4accb05eb7598dc9-image-1560891281318.54.19 PM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Fix a car\r\n\r\nOops, the red part of the car is hiding the wheel!  Fix the program to match the picture on the right.\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the car.\r\n2) Rearrange the code so the wheels are visible.\r\n\t- You do _not_ need to add any new blocks! Only rearrange the ones that are already in the code space!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing practice 2_2023": {
        "display_name": "Debug a Flower",
        "bubble_choice_description": "Move the fallen petals back to the flower.",
        "long_instructions": "<img src=\"https://images.code.org/14f4099599200795902b0623d013b41c-image-1560890438689.JPG\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Attach the petals\r\n\r\nUh oh, the flower is missing some petals. Bring them together with the center of the flower to recreate the picture on the right. \r\n\r\n# Do This\r\n\r\n1) Look at the code that makes the flower.\r\n2) Change the code so that all the petals are attached to the center of the flower.\r\n\t- You do _not_ need to add any new code blocks! You only need to change the numbers in the blocks already in the code space\r\n    - *Hint: use the grid to figure out where the petals should be*",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing practice 3_2023": {
        "display_name": "Debug a stoplight",
        "bubble_choice_description": "Fix the stoplight so that all colors are visible.",
        "long_instructions": "<img src=\"https://images.code.org/a4bc7d3dbd2ea2fd744ec64a9ee5ac76-image-1560890596053.42.55 PM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Fix the stoplight\r\n\r\nThis stoplight is all mixed up.  Fix it so that it looks like the picture on the right.\r\n\r\n# Do This\r\n\r\n1) Read the code below. It's intended to create a stoplight, but the colors are incorrect.\r\n2) Rearrange the code so the colors are correct.\r\n\t- You do _not_ need to add any new blocks or change any values - you only need to rearrange the blocks that are already in the code area",
        "teacher_markdown": "This debugging task tests the student's ability to sequence code in regards to the `fill` command.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 picture_2023": {
        "display_name": "Draw a Car",
        "bubble_choice_description": "Recreate the car from the last lesson using code.",
        "long_instructions": "<img src=\"https://images.code.org/ed26831040f3fe0d3792402a2ae18431-image-1528743133929.40.05 PM.png\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Draw a Car\r\n\r\nIn the previous lesson you and your partner created several interesting images, like the car in the image to the right. This time, your task is to create the image of the car using code.\r\n\r\n# Do This\r\n\r\n1) Use the [`rect()`(#4dd0e1)](/docs/ide/gamelab/expressions/rect) and [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) blocks to draw the car.\r\n2) Make sure you are using the [`fill()`(#4dd0e1)](/docs/ide/gamelab/expressions/fill) block to give the shapes the correct color.\r\n\t- Hint: Pay attention to the order of your blocks so that the red tires are in the front of the drawing.\r\n"
      },
      "CSD U3 challenge new shape_2023": {
        "display_name": "Shape of Shapes",
        "bubble_choice_description": "Make a triangle out of circles.",
        "long_instructions": "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\r\n\r\n# Shape of Shapes\r\n\r\nLet's practice shape location placement and the order of our shapes by drawing this triangle made out of circles.\r\n\r\n# Do This\r\n- Use the [`fill()`(#4dd0e1)](/docs/ide/gamelab/expressions/fill) block to color your shapes purple.\r\n- Use twelve [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) blocks to create the triangle shape in the image to the right.\r\n\t- Hint: Pay attention to the order of your [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) blocks to make sure they are overlapping one another as they appear in the image. \r\n\t- For example, the circle at the top of the triangle is on top of all other shapes which means it will be the *last* [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) block used in your code.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/8": {
    "long_instructions": "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png\" style=\"float:right;width:150px;\">\n\n# Debugging\n\nOften, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.\n\n# Do This\n\n1.  Look at the code in the workspace.\n2.  Change the code so it makes the picture on the right.\n    -   You do _not_ need to add any new blocks to the code area - you only need to rearrange some blocks and change some of the values",
    "teacher_markdown": "This is a good puzzle to use as an assessment of whether or not students understand the basics of sequencing and positioning shapes in Game Lab.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    },
    "mini_rubric": {
      "rubric_key_concept": "Use a coordinate system to place elements on a screen, accounting for object size and overlay.",
      "rubric_performance_level_1": "The programmatic drawing is identical to the example and is contained within the seven lines of code.",
      "rubric_performance_level_2": "The programmatic drawing is mostly the same as the drawing, but there may be some slight positioning errors, and there may be extra lines of code.",
      "rubric_performance_level_3": "The square has been moved, is purple, and appears in front of the circles.",
      "rubric_performance_level_4": "The picture is either the same, or any changes appear to be unrelated to the assignment."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/3/levels/9": {
    "dsls": {
      "description": "Try out some challenges!",
      "display_name": "Drawing Challenges"
    },
    "sublevels": {
      "CSD U3 drawing challenge 2_2023": {
        "display_name": "Points: Draw a Ladybug",
        "bubble_choice_description": "Learn how to draw points on the screen and use them to draw a ladybug",
        "long_instructions": "<img src=\"https://images.code.org/cb344be4730b2a4925891adc1989ee01-image-1560899864102.JPG\" style=\"float:right;width:150px;\">\r\n\r\n# Points: Draw a Ladybug\r\n\r\nYou can draw individual points on the screen using two commands:\r\n- [`point()`(#4dd0e1)](/docs/ide/gamelab/expressions/point) draws a single point on the screen\r\n- [`strokeWeight()`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight) controls how big the point is.\r\n\r\nLet's use these new blocks to draw a ladybug on the screen. The code has already been started for you - see if you can finish it!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`point()`(#4dd0e1)](/docs/ide/gamelab/expressions/point) block to finish the code so it matches the picture.\r\n\t- You will need to add two more blocks to the code\r\n    \r\n**Challenge:** This ladybug has no legs! See if you can use other blocks to give this ladybug some legs!",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing challenge 3_2023": {
        "display_name": "Points: Draw a Dice",
        "bubble_choice_description": "Learn how to draw points and use them to create a dice",
        "long_instructions": "<img src=\"https://images.code.org/d4a374335300d43e25fd903cfbdec7ff-image-1561834319250.51.40 AM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Points: Draw a Dice\r\n\r\nYou can draw individual points on the screen using two commands:\r\n- [`point()`(#4dd0e1)](/docs/ide/gamelab/expressions/point) draws a single point on the screen\r\n- [`strokeWeight()`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight) controls how big the point is.\r\n\r\nLet's use these new blocks to draw a dice on the screen. The code has already been started for you - see if you can finish it!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`strokeWeight()`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight) block to finish the code so it matches the picture.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing challenge no fill_2023": {
        "display_name": "New Blocks: No Fill",
        "bubble_choice_description": "Make shapes that you can see through using noFill.",
        "long_instructions": "<img src=\"https://images.code.org/5293d165d4a9161b75df43128863f315-image-1566856378596.PNG\" style=\"float:right;width:200px;\">\r\n\r\n# No Fill\r\n\r\nThe [`noFill()`(#4dd0e1)](/docs/ide/gamelab/expressions/noFill) block makes it so created shapes have no fill. We can use it to make cool patterns.\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`noFill()`(#4dd0e1)](/docs/ide/gamelab/expressions/noFill) block to finish the code so it matches the picture.\r\n"
      },
      "CSD U3 challenge face_2023": {
        "display_name": "Challenge: Face",
        "bubble_choice_description": "Make a face out of shapes.",
        "long_instructions": "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\r\n\r\n# Challenge: Face\r\n\r\nWrite a program that uses [`rect()`(#4dd0e1)](/docs/ide/gamelab/expressions/rect), [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse), and [`fill()`(#4dd0e1)](/docs/ide/gamelab/expressions/fill) to create a face out of shapes. An example is provided on the right, but you can make it however you want!\r\n\r\n# Do This\r\n- Draw a face that uses at least 4 shapes and at least 2 different colors"
      },
      "CSD U3 L3 Freeplay_2023": {
        "display_name": "Yummy Food",
        "bubble_choice_description": "Try using the new code you have learned to draw your favorite meal or food!",
        "long_instructions": "# Yummy Food\r\n\r\nUse what you've learned to try to create your favorite food!\r\n\r\nPut your skills to the test and try to draw pizza or ice cream or any food you want! \r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L3 Freeplay2_2023": {
        "display_name": "Holidays",
        "bubble_choice_description": "Try using the new code you have learned to create a simple drawing that represents your favorite holiday!",
        "long_instructions": "# Holidays\r\n\r\nUse what you've learned to try to create a simple drawing that represents your favorite holiday!\r\n\r\nYou may not be able to create the \"perfect\" drawing yet, but you can develop a *prototype* which shows the general idea of the holiday drawing and some of the basic features behind how it could look.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/1": {
    "long_instructions": "predict level",
    "teacher_markdown": "The new parameters in this level will change the width and height of the rectangle block. Some students may guess this, but even if students are unable to make the initial prediction, that's okay! Once they run their code, they should be able to look at the result and notice that the rectangles are longer and wider than before. Using this new information, they should revisit their initial prediction and adjust it with this new information.",
    "contained levels": [
      {
        "long_instructions": "# New Parameters!\n\nThe code below has familiar [`rect()`(#4dd0e1)][0] blocks, but with additional values as part of the block. These additional values are called **parameters** - they let you customize and control the behavior of blocks.\n\nLook at the code with a partner and discuss what you think it will do. Try to guess how you think these new parameters are changing the way the [`rect()`(#4dd0e1)][1] blocks will behave. Once you have answered the question click \"Run\" to see the program's result."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# Rectangle Size\n\nThe two new parameters in the [`rect()`(#4dd0e1)][0] block control the **width** and **height** of the rectangles. The toolbox has also been updated with the new block that can help you remember what each parameter stands for:\n\n-   [`rect(x, y, w, h)`(#4dd0e1)][1]\n\nLet's see if we can adjust these new parameters so the red rectangle is longer than the blue rectangle (like the picture on the right)\n\n# Do This\n\n1.  Change the numbers in the second [`rect()`(#4dd0e1)][2] to make red rectangle longer than the blue one."
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png\" style=\"float:right;height:150px\">\n\n# Ellipse Parameters\n\nThe [`ellipse()`(#4dd0e1)][0] block has also been updated to use these new parameters:\n\n-   [`ellipse(x, y, w, h)`(#4dd0e1)][1]\n\nUse these new parameters to create two ellipses of different sizes.\n\n# Do This\n\n1.  Add an orange ellipse to the screen that is taller than the green one\n    -   Use an [`ellipse(x, y, w, h)`(#4dd0e1)][2] block to set the width and height of the ellipse\n    -   Use a [`fill()`(#4dd0e1)][3] block to make the ellipse orange\n2.  Rearrange the blocks so the orange ellipse is behind the green one"
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/4": {
    "long_instructions": "# Background\n\nSometimes you'll want to fill the entire screen with a color. For that, you can use [`background()`(#4dd0e1)][0]. It covers everything on the screen with the color you choose.\n\n# Do This\n\n1.  Run the code to see [`background()`(#4dd0e1)][1] work.\n2.  Change the background from yellow to orange.\n\n**Challenge:** There is a purple square that is covered up by the background. Can you change the order of the code so you can see both the purple and blue squares?\\*"
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png\" style=\"float:right;height:150px\">\n\n# Background\n\n[`background()`(#4dd0e1)][0] will draw on top of everything already in your drawing, so it's important to think about the order of your code.\n\n# Do This\n\n1.  Make a black background behind the green circle.\n    -   Drag out the [`background()`(#4dd0e1)][1] block to add a background to your code\n    -   Make sure to order your code correctly!"
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nThis program uses the four parameter version of [`rect()`(#4dd0e1)][0] and [`ellipse()`(#4dd0e1)][1] to draw a simple scene.\n\n# Do This\n\n1.  Debug this program and correct the error so that the grass extends across the entire bottom.\n    -   Hint: You only have to change one number! Which parameter makes your rectangle (the grass) wider?\n\n**Run Your Code!** Verify that the grass extends all the way across the bottom of the screen"
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/7": {
    "dsls": {
      "display_name": "Practice with Parameters"
    },
    "sublevels": {
      "CSD U3 shapes behind_2023": {
        "display_name": "Debug: Hidden Shapes",
        "bubble_choice_description": "Reveal the picture under the red circle.\r\n",
        "long_instructions": "<img src=\"https://images.code.org/c634f6594ea775e93346e152fe98b5a9-image-1586412462396.05.57 PM.png\" style=\"float:right; width: 150px;\">\r\n\r\n# Debug: Hidden Shapes\r\n\r\nThe code below should be making a pretty picture, but right now only one ellipse is showing up. \r\n\r\n# Do This\r\n\r\n1) Debug the code so the picture shows on the right.\r\n\t- You do _not_ need to add any new code. You only need to rearrange the existing blocks to solve this puzzle.\r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes missing_2023": {
        "display_name": "Debug: Missing Shapes",
        "bubble_choice_description": "The picture isn't appearing, what's wrong with the code?",
        "long_instructions": "<img src=\"https://images.code.org/122ae9e48210f88c7e1a403ac49e6481-image-1586412828471.11.56 PM.png\" style=\"float: right; width: 150px;\">\r\n\r\n# Debug: Missing Shapes\r\n\r\nWhen the code below is run, nothing shows up. Try to debug the code so the image on the right appears!\r\n\r\n# Do This\r\n\r\n1) Debug the code so that an image shows up.\r\n\t- You do _not_ need to add any new blocks to your code! You only need to fix some parameters for the blocks that are already in the code area\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes scene_2023": {
        "display_name": "Finish the Scene",
        "bubble_choice_description": "Be creative and finish the drawing however you want!",
        "long_instructions": "# Finish the Scene\r\n\r\nThe scene below seems to be incomplete. Be creative and finish the drawing however you want!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/8": {
    "long_instructions": "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n1.  Debug this program to make the cloud wider than it is tall, like in the image.\n    -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?",
    "mini_rubric": {
      "rubric_key_concept": "Use parameters to change the way a method or command runs. ",
      "rubric_performance_level_1": "The programmatic drawing appears exactly as it does in the example.",
      "rubric_performance_level_2": "The programmatic drawing is approximately the same as that in the picture, and the cloud's width and height have been changed.",
      "rubric_performance_level_3": "The cloud's height, width, or position has been changed, but it may not be wider than it is tall, or it may be moved to somewhere else on the screen.",
      "rubric_performance_level_4": "No changes have been made to the code, or the changes are unrelated to the instructions."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/4/levels/9": {
    "dsls": {
      "description": "Check out one or more of these extra blocks that you can use to make your pictures more interesting.",
      "display_name": "Shapes and Parameters Challenges"
    },
    "sublevels": {
      "CSD U3 shapes polygon_2023": {
        "display_name": "New Block: Regular Polygon",
        "bubble_choice_description": "Learn how to create polygons with any number of sides.",
        "long_instructions": "<img src=\"https://images.code.org/d1a93722806f1dab50a897dee280b107-image-1566945343071.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Regular Polygons\r\n\r\nSo far, you've just been drawing ellipses and rectangles. But now there is a new block to help draw other shapes!\r\n\r\n[`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon) lets you draw additional shapes! Click on the block and to view the documentation and learn how it works!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the the current image.\r\n2) Add code to finish the drawing so it matches the picture\r\n\t- Use the [`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon) block to finish the code!\r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes_2023": {
        "display_name": "New Block: Shape",
        "bubble_choice_description": "Learn how to create any shape you want.",
        "long_instructions": "<img src=\"https://images.code.org/030e1530fb996ae1c0c1662ec4e3440a-image-1567014400477.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Shape\r\n\r\nSo far, you have just been drawing ellipses and rectangles. But now there is a new block to help draw other shapes!\r\n\r\n[`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) lets your draw additional shapes! Click on the block to view the documentation and learn more about this new block!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) block to finish the code so it matches the picture.\r\n\r\nOptional: Play around some more with the [`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) block and see what you can make.\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes line_2023": {
        "display_name": "New Block: Line",
        "bubble_choice_description": "Learn how to draw lines.",
        "long_instructions": "<img src=\"https://images.code.org/095a9251e533c63411f87f4e57ebe919-image-1567026036725.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# New Block: Line\r\n\r\nSo far, you have just been drawing ellipses and rectangles. But now there is a new block to help draw lines!\r\n\r\n[`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) lets you draw lines! Click on the block and to view the documentation and learn how it works!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) block to finish the code so it matches the picture (it only uses straight lines!).\r\n\r\nOptional: Play around some more with the [`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) block and see what you can make!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes arc_2023": {
        "display_name": "New Block: Arc",
        "bubble_choice_description": "Learn how to draw arcs.",
        "long_instructions": "# New Block: Arc\r\n\r\nThe [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) commands works just like [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) except it has two extra parameters. These parameters specify two different angles that are used to create the arc.\r\n\r\n# Do This\r\n\r\n1) Read the code and see how the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block works. Pay close attention to the **last two parameters** in each [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block.\r\n\t* 0 degrees is to the right. 90 degrees is down. 180 degrees is to the left. 270 degrees is up.\r\n\t* The arc is always drawn clockwise from wherever start falls to wherever stop falls on the ellipse. \r\n2) Play around with the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block once you think you know how it works! Create two more shapes on the screen using the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block!",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 parameters shape scene_2023": {
        "display_name": "Make a Shape Scene",
        "bubble_choice_description": "Now that you have some new blocks, decide what you'd like to draw with them.",
        "long_instructions": "# Make a Shape Scene\r\n\r\nNow that you have some new blocks, decide what you'd like to draw with them.\r\n\r\n# Do This\r\n\r\n* Draw a scene.  You can use the scenes below for inspiration.\r\n\r\n<img src=\"https://images.code.org/c4f937728760a22079fc1c38ac300984-image-1566088819489.39.48 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/d8bbcfd08bd76090903eb1eeadab53a9-image-1566088832981.24.42 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/e424ac937fbd5d6a219b1f1744a30084-image-1566088839042.16.14 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/28e9f2963706078d80a8f06e84eaa2fb-image-1566095034917.18.19 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/4d966b1ce5450d2cbcea8ac40ffd1988-image-1566095039922.23.16 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/1": {
    "long_instructions": "predict level",
    "teacher_markdown": "Students may notice that the term `xPosition` is associated with the value 50, and so when we see the term `xPosition` farther down in the code, they may think it will use the value of 50 in that spot and draw the circle on the left side of the screen. When describing this relationship, they may not have the correct words to describe what's happening and may wonder what the purple `var` keyword means. Encourage students to use other familiar words when describing this relationship, like \"container\" or \"placeholder\", before introducing vocabulary",
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nRead the code below and make a prediction.\n\n-   Where will the circle be drawn?\n-   What will happen if you change the number in Line 1?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/2": {
    "teacher_markdown": "During this discussion, encourage students to use the vocabulary they saw in the previous video, referring to `xPosition` and `whatsTheY` as variables and describing the equal sign as \"gets the value of\". The concept is the same as the first predict level, with the added emphasis on using correct vocabulary. For example: \"I see that the variable `xPosition` gets the value of 300, so I know it will be drawn on the right side of the screen\"",
    "callouts": {
      "grid": "Click here to show the grid."
    },
    "contained levels": [
      {
        "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/6e9f49c2df2ce6b236f8330365b04994-image-1665666667311.png\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\n\n# Changing Variables\n\nUpdate the values of the variables below so the ellipse is drawn in the bottom center of the screen\n\n# Do This\n\n1.  Change the values of the variables to update the position of the ellipse\n    -   You do _not_ need to add any new blocks to your code! Just update the blocks that are already in the code area!\n\n**Run Your Code!** The result should match the example image on the right"
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/4": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad variable labels.  The errors prevent the program from being viewed in block mode, so the code is in text. Below are a few rules for naming variables.\n\n-   Labels can't have spaces.\n-   Labels can't start with a number.\n-   Capitalization and spelling must be exactly the same.\n\n# Do This\n\n1.  Find the rule each variable label violates.\n2.  **Correct the errors by picking new names that follow the rules above.**\n\nIf your program works it should draw the image on the right. You should also be able to switch back to blocks mode.",
    "teacher_markdown": "If students use variable names that start with numbers, include spaces, or break other rules, the code may be forced into text mode the next time that they go to that level or refresh the page.  To get back into block mode, students will first need to fix the problem with the variable names.  Use the red error squares to see where the bugs most likely are, and once they are gone, click the \"block mode\" button at the top right of the workspace."
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/5": {
    "long_instructions": "# Using a Variable Many Times\n\nThis program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.\n\n# Do This\n\n1.  Update the code so the red petals touch each other\n    -   Change the number assigned to `petalSize` until the red petals touch\n    -   Try to find the size that makes the most sense. Compare your answer with someone around you."
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/6": {
    "dsls": {
      "description": "Choose from the following activities to practice using variables.",
      "display_name": "Variables Practice"
    },
    "sublevels": {
      "CSD U3 Variables change circle size_2023": {
        "display_name": "Changing Variable Value",
        "bubble_choice_description": "Make the circle so big it fills up the whole screen.",
        "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
        "long_instructions": "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png\" style=\"float:right; height:150px\">\r\n\r\n# Debug: Using Variables\r\n\r\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\r\n\r\n# Do This\r\n\r\n1) Change the value assigned to `circleSize` so that the circle fills the entire screen."
      },
      "CSD U3 Variables names_2023": {
        "display_name": "Debug: Variable Names",
        "bubble_choice_description": "Fix the variable names to make the pink shapes appear.",
        "long_instructions": "<img src=\"https://images.code.org/9acea1199be35dc50df699f0cfe00994-image-1566926202226.PNG\" style=\"float:right; height:120px\">\r\n\r\n# Debug: Variable Names\r\n\r\nThe program below is supposed to create the image on the right, but it's not working correctly. Can you fix it?\r\n\r\n# Do This\r\n\r\n1) Update the code to match the image\r\n\t- You do _not_ need to add any new blocks. You only need to change the values in the blocks already on the screen.\r\n\r\n::: details [*Hint: Click the arrow for a quick review of the rules for variable names.*]\r\n* Variable names can't have spaces.\r\n* Variable names can't start with a number.\r\n* Capitalization and spelling in names must be exactly the same.\r\n:::\r\n"
      },
      "CSD U3 Variables unused_2023": {
        "display_name": "Debug: Unused Variables",
        "bubble_choice_description": "Make this code easier to read by using variables.",
        "long_instructions": "# Debug: Unused Variables\r\n\r\nThe program below has been started and several variables  have been created, but none of them are being used! Can you update the code to use the variables instead of specific numbers?\r\n\r\n# Do This\r\n1) Update the code to use the variables\r\n\t- You do _not_ need to add any new blocks. You only need to change the values for the blocks already on the screen\r\n\r\n**Run Your Code!** Try changing the values of the variables at the top of the screen and see how it affects your picture!\r\n"
      },
      "CSD U3 Variables forbidden names_2023": {
        "display_name": "Debug: Adding Variables",
        "bubble_choice_description": "Fix the variable names to make the street light appear.",
        "long_instructions": "<img src=\"https://images.code.org/59eb15208439fb7d8ba9ae3319c78439-image-1567790009521.PNG\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\r\n\r\n# Debug: Adding Variables\r\n\r\nSomething strange happened to this program - all of the variable names at the top of the code got erased! Luckily, the variable names are still being used in the rest of the program. Can you fix the program by putting the correct variable names in the correct spots at the top of the code?\r\n\r\n# Do This\r\n1) Read through the code and identify the four variables being used in the program\r\n2) Update the variable names at the top of the code\r\n\r\n**Run Your Code!** The final program should look like the image on the right. Make sure the colors are in the correct order!\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/7": {
    "short_instructions": "Change the program to use a variable for the size of the two eyes, and run it a few times with different values assigned to the variable, as in the sample image.",
    "long_instructions": "<img src=\"https://images.code.org/ac772ebf1fe670e3792a898e387b9e65-image-1589486509676.png\" style=\"float:right;height:150px\">\n\n# Using Variables\n\nThis program currently draws a face, but the eyes are two different sizes.  Change the program to use the variable for the size of both eyes, and run the code to make sure both eyes are drawn at the same size.\n\n# Do This\n\n1.  **Run the program** to see how it works.\n2.  **Change the program** to use the `eyeSize` variable.\n3.  **Run the program** with different values for `eyeSize` and choose your favorite size.",
    "mini_rubric": {
      "rubric_key_concept": "Use variables to store and update information",
      "rubric_performance_level_1": "The eyeSize variable is used such that the two eyes have the same size as defined by eyeSize, with no other unexpected changes. The program is free of syntax errors.",
      "rubric_performance_level_2": "The eyeSize variable is used such that the two eyes have the same size as defined by eyeSize. Other changes to the code may have introduced other unexpected behaviors, or there may be minor syntax errors that do not prevent the code from running.",
      "rubric_performance_level_3": "The eyeSize variable has been used somewhere in the program, but not such that it runs as instructed.",
      "rubric_performance_level_4": "There are no changes to the code, or the changes appear unrelated to variables, or variables are used in a way that prevents the program from running."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/5/levels/8": {
    "dsls": {
      "description": "Expand your variables skills with these challenges.",
      "display_name": "Variables Challenges"
    },
    "sublevels": {
      "CSD U3 Variables Draw Challenge_2023": {
        "display_name": "Challenge: Changing Image",
        "bubble_choice_description": "Draw a changing image using variables, shapes and drawing tools you have learned so far.",
        "long_instructions": "# Challenge: Draw a Changing Image\r\n\r\nUsing variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils or a slice of pizza with variables controlling the size and/or placement of toppings.\r\n\r\nOnce you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.\r\n"
      },
      "CSD U3 Variables Challenge_2023": {
        "display_name": "Challenge: Updating Variables",
        "bubble_choice_description": "Test your understanding of variables to draw something more complex.",
        "long_instructions": "# Challenge: Updating Variables\r\n\r\nSo far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.\r\n\r\n\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">"
      },
      "CSD U3 Variables String Challenge_2023": {
        "display_name": "Challenge: String Variables",
        "bubble_choice_description": "Use variables with colors!",
        "long_instructions": "# Challenge: String Variables\r\n\r\nSo far we've only ever assigned a number value to a variable, but did you know you can give a string value to a variable?  Read through the example program we've provided and then modify the program create new images with different colors.\r\n\r\n::: details [**What are the possible colors I can use?**]\r\nFor a full list of possible colors you can use, go to [W3Schools - CSS Colors](https://www.w3schools.com/cssref/css_colors.asp).\r\n:::"
      },
      "CSD U3 L5 Freeplay_2023": {
        "display_name": "Abstract Art",
        "bubble_choice_description": "Use what you've learned so far to create a drawing or piece of abstract artwork. ",
        "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
        "long_instructions": "# Abstract Art\r\n\r\nUse what you've learned so far to create a drawing or piece of artwork that uses variables to keep track of size, locations, or colors.\r\n\r\nFor example, you could create a piece of art that uses variables to keep track of different facial features such as eye shape and locations or mouth size or any other features of your choice. You could also choose to create a piece of art that is completely abstract - don't forget to still use variables!\r\n\r\nYou may not be able to create the \"perfect\" drawing yet, but you can develop a *prototype* which shows the general idea of the drawing and some of the basic features behind how it could look.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L5 Freeplay2_2023": {
        "display_name": "Nature Scene",
        "bubble_choice_description": "Use what you've learned so far to create a drawing of nature. ",
        "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
        "long_instructions": "# Nature Scene\r\n\r\nUse what you've learned so far to create a drawing of nature that uses variables to keep track of size, locations, or colors. \r\n\r\nFor example, you could create a drawing with trees, flowers, and ladybugs and use variables to make sure all of the tree leaves, flower petals, or ladybug spots are all the same shape, size, or color. You can be as creative as you want!\r\n\r\nYou may not be able to create the \"perfect\" drawing yet, but you can develop a *prototype* which shows the general idea of the drawing and some of the basic features behind how it could look.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop animations of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/1": {
    "long_instructions": "predict",
    "teacher_markdown": "Students should predict that _something_ will happen with the x-coordiante of the ellipse, even if they are unsure what will happen. Students may say that the value will be either 200 or 400, or they may say the value will be between 200 and 400. This creates the effect of drawing an ellipse somewhere on the right side of the screen.\n\nWhen facilitating the class discussion, ensure that students look at their neighbors screen and compare - this helps them see that different behaviors are occuring for different people. Also encourage students to run the code multiple times to see the result.",
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThe code below introduces a new math block, `randomNumber()`(#FFB74D). Try to predict what will happen when you press the run button.\n\n-   Write down what you think will happen when you press the run button\n-   Run the code\n-   Compare your screen with a neighbor's - did you both get the same thing?\n-   Press the run button several times and notice what changes in the drawing each time"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/141d1787ef866d86b804b5d1e2492cfb-randomEllipse.gif\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\n\n# Random Numbers\n\nYou have a new block in the `Math`(#FFB74D) drawer called [`randomNumber()`(#FFB74D)][0]. If you make your drawings with random numbers it will look a little bit different every time you run your program. Click on the block to read it's documentation and learn more about how it works\n\nRight now, the program only draws the ellipse on the right side of the screen. Let's update the code so the ellipse could appear anywhere horizontally on the screen.\n\n# Do This\n\n1.  Change the numbers inside [`randomNumber()`(#FFB74D)][1] so the ellipse can appear anywhere horizontally on the screen\n\n**Run Your Code!** Make sure the ellipse appears on both the right and left side of the screen."
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/4255c9c10fdf81ca78c22d67acb67163-randomEllipse2.gif\" style=\"float:right;height:200px\">\n\n# Random Numbers\n\nHere's the same sun from last time. Right now only the x-coordinate is random, but you can make the y-coordinate random too!\n\n# Do This\n\n1.  Make the ellipse appear at random y coordinates\n    -   Drag out a [`randomNumber()`(#FFB74D)][0] block to the ellipse's Y parameter\n    -   Update the parameters of the [`randomNumber()`(#FFB74D)][1] block to match the height of the screen\n\n**Run Your Code!** Make sure the circle is appearing at random X and Y positions anywhere on the screen."
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/4": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\" style=\"float:right;height:150px\">\n\n# Variables and Random Numbers\n\nVariables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.\n\n# Do This\n\n1.  Make the eyes appear at random sizes\n    -   Drag out a [`randomNumber()`(#FFB74D)][0] and put it on the right-side of the `eyeSize` variable block\n    -   Update the parameters of the [`randomNumber()`(#FFB74D)][1] block so the eyes appear both small and big.\n\n**Run Your Code Multiple Times!** Verify that the eyes are always the same size _and_ that they change sizes each time the program is run."
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/de0a22f80f0bf0ee72f87893cdd5dbd7-image-1688053308971.gif\" style=\"float: right; width:150px;\">\n\n# Changing variable values\n\nThese two flowers use a single variable to store their petal size, but the value stored in the variable changes in the middle of the program. Let's update the program so each petal appears with different sizes each time the program is run.\n\n# Do This\n\n1.  Update the first flower's petals to be a random size\n    -   Find the first time the `petalSize` variable is used\n    -   Drag out a [`randomNumber()`(#FFB74D)][0] block into the right-side of the `petalSize` variable\n    -   Update the parameters of the [`randomNumber()`(#FFB74D)][1] block\n2.  Update the second flower's petals to be a random size\n    -   Find the second time the `petalSize` variable is used\n    -   Drag out a [`randomNumber()`(#FFB74D)][2] block into the right-side of the `petalSize` variable\n    -   Update the parameters of the [`randomNumber()`(#FFB74D)][3] block\n\n**Run your code multiple times!** Both flowers should have different petal lengths _and_ they should be different from each other."
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/6": {
    "dsls": {
      "description": "Try out your new skills on these levels.",
      "display_name": "Practice with Random Numbers"
    },
    "sublevels": {
      "CSD U3 Random planets_2023": {
        "display_name": "Modify the Planets",
        "bubble_choice_description": "Make the planets different sizes using random numbers.",
        "long_instructions": "<img src=\"https://images.code.org/8aa406e4ddb34f032e2887038cfa3584-planets_cropped.gif\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\r\n\r\n# Modify the Planets\r\n\r\nThis scene represents several planets. Right now, they're all the same size. Let's use random numbers to change the size of each planet to generate a new planet scene every time the program is run\r\n\r\n# Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Update each planet to be a random size each time the program is run]\r\n\t- Find the [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) block representing a planet\r\n    - Drag out two [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) blocks into the width and height of the [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse)\r\n    - Change the values of the [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) parameters.\r\n    - Repeat these steps for each of the planets!\r\n:::\r\n\r\n**Run Your Code Multiple Times!** Each time, a new planet scene should appear with slightly different planet shapes!\r\n"
      },
      "CSD U3 Random shape position_2023": {
        "display_name": "Debug: Random Shape Position",
        "bubble_choice_description": "Keep the rectangles stacked on top of each other by changing the way random numbers are used.",
        "long_instructions": "<img src=\"https://images.code.org/982d42328e2a44db4f1643df805a37ff-image-1569352188898.gif\" style=\"width:200px;float:right;\">\r\n\r\n# Debug: Random Shape Movement\r\n\r\nIsaac wrote a program that created three rectangles in the same position, using a variable `xPosition`. He tried to update his code to have the rectangles still appear together, but in a random position. But, his code doesn't work - instead, each rectangle appears at a different position.\r\n\r\nCan we fix his code so the animation appears like the image on the right?\r\n\r\n# Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Read the code and run the program a few times to understand how it works\r\n2) ::: details [Update the code so the rectangles appear stacked at random x positions]\r\n\t- Hint: You will need to add one new [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) block to your code\r\n    - Hint: You will need to update the code to use `xPosition` in several places\r\n:::"
      },
      "CSD U3 Random Sun_2023": {
        "display_name": "Modify the Scene",
        "bubble_choice_description": "Randomize the location of items in the scene using random numbers.",
        "long_instructions": "<img src=\"https://images.code.org/375aa29ce7950b1c788a7d2c828f5f62-image-1663809341908.com-gif-maker.gif\" style=\"width:200px;float:right;\">\r\n\r\n# Modify the Scene\r\n\r\nYou have learned how to randomize things, so it's time to put all the knowledge to use in this scene! Use random numbers to randomize the position of the sun and the mountains!\r\n\r\n# Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Randomize the x position of the sun]\r\n\t- Find the [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) block that represents the sun\r\n    - Drag out a [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) block into the x-coordinate of the [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse)\r\n    - Update the parameters of the [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) block\r\n    :::\r\n2) ::: details [Randomize the x position of the mountains]\r\n\t- Find a [`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon) block that represents a mountain\r\n    - Drag out a [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) block into the x-coordinate of the [`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon)\r\n    - Update the parameters of the [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) block\r\n    - Repeat this for each mountain!\r\n    :::\r\n\r\n**Run your code multiple times!** Make sure the sun and mountains move around the screen!"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/36342205a289fdb3ed71f3b7bf92b388-snake.gif\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nAlexis is working on a program to draw a rainbow snake that \"wiggles\" each time it's run. She's started the program, but needs help finishing!\n\n# Do This\n\n1.  Run the program several times to see how the starter code works.\n2.  Add at least three new different colored circles to your rainbow snake.\n3.  Use [`randomNumber()`(#FFB74D)][0] to make the rest of the snake's body move up and down like the first three.",
    "mini_rubric": {
      "rubric_key_concept": "Generate and use random numbers in a program, use arguments to change the way a method or command runs.",
      "rubric_performance_level_1": "There are at least 6 circles with reasonable horizontal positions, different colors, and appear at random vertical positions.",
      "rubric_performance_level_2": "At least one student-created circle has a new color, appears at a random vertical position, and has a different horizontal position than any others.",
      "rubric_performance_level_3": "At least one student-created circle has a new color, has a different horizontal position than any others, but appears disconnected from the rest of the snake due to an overly wide range for the random number",
      "rubric_performance_level_4": "No student produced circles, or any new circles share a color or horizontal position with circles produced by the original code."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/6/levels/8": {
    "dsls": {
      "description": "Try out these extra challenges with random numbers.",
      "display_name": "Challenges: Random Numbers"
    },
    "sublevels": {
      "CSD U3 Random rgb_2023": {
        "display_name": "Random RGB",
        "bubble_choice_description": "Randomize the colors of this rainbow.",
        "long_instructions": "# Random Rainbow!\r\n\r\nThis level uses the [`rgb()`(#4dd0e1)](/docs/ide/gamelab/expressions/rgb) block to set the color of the rainbow. Since the [`rgb()`(#4dd0e1)](/docs/ide/gamelab/expressions/rgb) block uses (Red, Green, Blue) numerical values, it means we can use [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) to generate random colors!\r\n\r\n_Hint_: You will need **three** [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) blocks to generate one color\r\n\r\n# Do This\r\n\r\n1) Update the background to be a random color\r\n2) Update each arc of the rainbow to a random color\r\n3) Update the ground to a random color\r\n\r\n**Run Your Code!** Verify that all of the colors change each time the scene is run!\r\n"
      },
      "CSD U3 Random add_2023": {
        "display_name": "Symmetry",
        "bubble_choice_description": "Use math to restrict the range of random numbers.",
        "long_instructions": "# Symmetry\r\n\r\nYou have learned how to randomize things, but what if you want two random shapes to be related in some way? Using a variable and experimenting with the math operations (+, -, *, /) can let you create effects like symmetry in your work. Butterfly wing patterns are naturally symmetrical. \r\n\r\nThis drawing's red spots are placed randomly, but the second spot is always the same distance from the right side of the screen as the first spot is from the left. Try to recreate this effect for a second and third spot!\r\n\r\n# Do This\r\n\r\n1) Read the code to see how the first spot is drawn ([Show Me Where](#triggercallout=part1))\r\n2) Update the code for the second spot\r\n3) Add a third spot to the butterfly",
        "callouts": {
          "CSD U3L6.9 - part1": "Read the code here!"
        }
      },
      "CSD U3 Random line_2023": {
        "display_name": "Random Lines",
        "bubble_choice_description": "Randomize all the properties of these lines.",
        "long_instructions": "# Random Lines\r\n\r\nIn the scene below all it is are just a bunch of straight lines. Not very exciting.\r\n\r\nMake this scene more fun by randomizing the positions of each of these lines! Have fun!\r\n\r\n# Do This\r\n\r\n1) Randomize the position of each of the lines\r\n"
      },
      "CSD U3 Random arc_2023": {
        "display_name": "Random Arcs",
        "bubble_choice_description": "Randomize all the properties of these arcs.",
        "long_instructions": "# Random Arcs\r\n\r\nIn the scene below all it is are just a bunch of arcs that look alike. Not very exciting. Make this scene more fun by randomizing different properties of these arcs!\r\n\r\n# Do This\r\n\r\n1) Randomize the position and angles of each of the arcs\r\n\r\n**Run Your Code Multiple Times!** See how the image changes each time you run it!\r\n\r\n"
      },
      "CSD U3 Random free play_2023": {
        "display_name": "Favorite Song",
        "bubble_choice_description": "Use what you've learned so far to create a drawing that represents your favorite song!",
        "long_instructions": "# Favorite Song\r\n\r\nUse what you've learned to so far create a drawing that represents your favorite song!\r\n\r\nFor example, if your favorite song is \"Over the Rainbow\" by Judy Garland, perhaps you draw a rainbow with changing colors or if your favorite song is \"Here Comes the Sun\" by the Beatles, perhaps you draw a scene with a sun that changes size or location each time the program is run.\r\n\r\nYou may not be able to create the \"perfect\" drawing yet, but you can develop a *prototype* which shows the general idea of the scene and some of the basic features behind how it could look.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 Random free play2_2023": {
        "display_name": "Favorite Season",
        "bubble_choice_description": "Use all that you have learned so far to create a drawing of your favorite season that changes each time you run the program!",
        "long_instructions": "# Favorite Season\r\n\r\nUse all that you have learned to so far to create a drawing of your favorite season that changes each time you run the program!\r\n\r\nFor example, if your favorite season is fall, you might draw trees with orange and yellow leaves, and orange and yellow leaves on the ground which change location on the ground each time you run the program. If your favorite season is winter you might draw a gray sky with clouds and snowflakes falling which change location in the sky each time the program is run!\r\n\r\nYou may not be able to create the \"perfect\" drawing yet, but you can develop a *prototype* which shows the general idea of the season scene and some of the basic features behind how it could look.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a drawing based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their drawing, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/7/levels/1": {
    "dsls": {
      "description": "Review all the different types of shape blocks we've seen so far. Which ones can you use to help you create your robot face?",
      "display_name": "Review Shape Blocks"
    },
    "sublevels": {
      "CSD U3 L7 shapes review polygon_2023": {
        "display_name": "Review Regular Polygon",
        "bubble_choice_description": "Review how to create polygons with any number of sides. How can you use this block with your robot face?",
        "long_instructions": "<img src=\"https://images.code.org/d1a93722806f1dab50a897dee280b107-image-1566945343071.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Review Regular Polygons\r\n\r\nReview how to use the [`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon) block to make even more shapes that you can use on your robot face!\r\n\r\nClick on the block and to view the documentation and remind yourself how it works!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the the current image.\r\n2) Add code to finish the drawing so it matches the picture\r\n\t- Use the [`regularPolygon()`(#4dd0e1)](/docs/ide/gamelab/expressions/regularPolygon) block to finish the code!\r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 L7 review shapes_2023": {
        "display_name": "Review Shape Block",
        "bubble_choice_description": "Review how to use the shape block. How can you use this block with your robot face?",
        "long_instructions": "<img src=\"https://images.code.org/030e1530fb996ae1c0c1662ec4e3440a-image-1567014400477.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Review the Shape Block\r\n\r\nReview how to use the [`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) block to draw additional shapes that you can use on your robot face! \r\n\r\nClick on the block to view the documentation and remind yourself how to use this block!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) block to finish the code so it matches the picture.\r\n\r\nOptional: Play around some more with the [`shape()`(#4dd0e1)](/docs/ide/gamelab/expressions/shape) block and see what you can make.\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 L7 review line_2023": {
        "display_name": "Review Line Block",
        "bubble_choice_description": "Review how to draw lines. How can you use this block with your robot face?",
        "long_instructions": "<img src=\"https://images.code.org/095a9251e533c63411f87f4e57ebe919-image-1567026036725.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Review Line Block\r\n\r\nReview how the [`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) block lets you draw lines! How can you use this on your robot face? \r\n\r\nClick on the block and to view the documentation and remind yourself how it works!\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) block to finish the code so it matches the picture (it only uses straight lines!).\r\n\r\nOptional: Play around some more with the [`line()`(#4dd0e1)](/docs/ide/gamelab/expressions/line) block and see what you can make!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 L7 review random line_2023": {
        "display_name": "Review Random Lines",
        "bubble_choice_description": "Review how to randomize all the properties of these lines. How can you use this feature with your robot face?",
        "long_instructions": "# Review Random Lines\r\n\r\nReview how to make lines more fun by randomizing the positions of each of these lines! Have fun!\r\n\r\n# Do This\r\n\r\n1) Randomize the position of each of the lines\r\n"
      },
      "CSD U3 L7 review arc_2023": {
        "display_name": "Review Arc Block",
        "bubble_choice_description": "Review how to draw arcs. How can you use this block with your robot face?",
        "long_instructions": "# Review Arc Block\r\n\r\nReview how the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) commands works just like [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) except it has two extra parameters. These parameters specify two different angles that are used to create the arc. Think about how you can use this on your robot face.\r\n\r\nClick on the block to view the documentation and remind yourself how this block works.\r\n\r\n# Do This\r\n\r\n1) Read the code and see how the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block works. Pay close attention to the **last two parameters** in each [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block.\r\n\t* **0** degrees is to the **right**. **90** degrees is **down**. **180** degrees is to the **left**. **270** degrees is **up**.\r\n\t* The arc is always drawn clockwise from wherever start falls to wherever stop falls on the ellipse. \r\n2) Play around with the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block once you think you know how it works! Create two more shapes on the screen using the [`arc()`(#4dd0e1)](/docs/ide/gamelab/expressions/arc) block!",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 L7 review random arc_2023": {
        "display_name": "Review Random Arcs",
        "bubble_choice_description": "Review how to randomize the properties of the arcs. How can you use this feature with your robot face?",
        "long_instructions": "# Review Random Arcs\r\n\r\nRemind yourself how to randomize different properties of arcs!\r\n\r\n# Do This\r\n\r\n1) Randomize the position and angles of each of the arcs\r\n\r\n**Run Your Code Multiple Times!** See how the image changes each time you run it!\r\n\r\n"
      },
      "CSD U3 L7 review point_2023": {
        "display_name": "Review Point Block",
        "bubble_choice_description": "Review how to draw points on the screen. How can you use this block with your robot face?",
        "long_instructions": "<img src=\"https://images.code.org/cb344be4730b2a4925891adc1989ee01-image-1560899864102.JPG\" style=\"float:right;width:150px;\">\r\n\r\n# Review Point Block\r\n\r\nDon't foget that you can draw individual points on the screen using two commands:\r\n- [`point()`(#4dd0e1)](/docs/ide/gamelab/expressions/point) draws a single point on the screen\r\n- [`strokeWeight()`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight) controls how big the point is.\r\n\r\nCan you use this block to help you draw your robot face?\r\n\r\nClick on the block to view the documentation and remind yourself how this block works.\r\n\r\n# Do This\r\n\r\n1) Read the code that makes the picture.\r\n2) Use the [`point()`(#4dd0e1)](/docs/ide/gamelab/expressions/point) block to finish the code so it matches the picture.\r\n\t- You will need to add two more blocks to the code\r\n    \r\n**Challenge:** This ladybug has no legs! See if you can use other blocks to give this ladybug some legs!",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 review random rgb_2023": {
        "display_name": "Review Random RGB",
        "bubble_choice_description": "Review how to create random RGB colors. How can you use this feature with your robot face?",
        "long_instructions": "# Review Random RGB Values\r\n\r\nReview how to use the [`rgb()`(#4dd0e1)](/docs/ide/gamelab/expressions/rgb) block to set the color of the rainbow. \r\n\r\nRemember, since the [`rgb()`(#4dd0e1)](/docs/ide/gamelab/expressions/rgb) block uses (Red, Green, Blue) numerical values, it means we can use [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) to generate random colors!\r\n\r\n_Reminder_: You will need **three** [`randomNumber()`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) blocks to generate one color\r\n\r\n# Do This\r\n\r\n1) Update the background to be a random color\r\n2) Update each arc of the rainbow to a random color\r\n3) Update the ground to a random color\r\n\r\n**Run Your Code!** Verify that all of the colors change each time the scene is run!\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/7/levels/2": {
    "long_instructions": "# Robot Face\n\nUse at least 4 different shape blocks, variables, and random numbers to create a robot face with **unique** and **creative** features!\n\n# Do This\n\n1.  Use your plan from your activity guide to create your robot face.\n2.  Make sure you use at least 4 variables with random numbers to give your robot features that change each time the program is run."
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/1": {
    "long_instructions": "predict",
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThe code below introduces three new blocks you haven't seen before: `createSprite()`(#f78183), `setAnimation()`(#f78183), and `drawSprites()`(#fff176). Throughout this lesson, we'll learn more about how these blocks work.\n\n# Do This:\n\n-   Read the code below and try to predict what will happen on the screen\n-   Write your predictions in the box, then press the run button to see what happens\n\n_**Optional:**_ Come up with 1-2 \"What If...\" questions that you wonder about the code. For example: what if `drawSprites()`(#fff176) was used at the top of the code instead of at the bottom?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/2": {
    "short_instructions": "Do This",
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Sprites\n\nSprites are like _containers_ - they can hold several properties that make it easier to manage our animations and make more complex drawings. Right now, our sprites are just gray rectangular containers. By the end of this lesson, we'll learn how to use even more properties of sprites like images!\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\n1.  Create a new sprite variable called `sprite1`\n    -   Drag out a [`createSprite()`(#f78183)][0] block and give it the variable name `sprite1`\n2.  Draw your sprites on the screen\n    -   Drag out a [`drawSprites()`(#fff176)][1] block\n\n**Run the code!** You should have a sprite container on your screen!\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
    "callouts": {
      "": "Use this block to create a sprite"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\" style=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\n\n# Debug\n\nThis program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right."
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/4": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Investigating Sprites\n\nLet's update the code below so different animations appear for the `fruit` and `vegetable` sprites.\n\n::: details [**How do these blocks work again?** (Click here to see)]\nIt takes three blocks to put a sprite on the screen:\n\n-   [`createSprite()`(#f78183)][0] - this block creates a new sprite variable.\n-   [`setAnimation()`(#f78183)][1] - this block tells the sprite which image to use.\n-   [`drawSprites()`(#fff176)][2] - this block tells the animation to draw the sprites on the screen. If you forget it, nothing will appear!\n    :::\n\n<img src=\"https://images.code.org/41faa292ddc06dfdddea99d3e50cfed8-image-1665761668091.png\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\n\n# Do This\n\n1.  Update the `fruit` animation\n    -   Use the dropdown menu in the [`setAnimation()`(#f78183)][3] block to select a different sprite to use\n2.  Update the `vegetable` animation\n    -   Use the dropdown menu in the [`setAnimation()`(#f78183)][4] block to select a different sprite to use\n\n**Optional Challenge:** Try changing the position of the sprites so they're stacked vertically instead of horizontally!"
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/5": {
    "short_instructions": "Do This",
    "long_instructions": "# Sprites\n\nLet's use our new sprite blocks to create a student sprite!\n\n::: details [**What blocks do I need again?** (Click here to see)]\nIt takes three blocks to put a sprite on the screen:\n\n-   [`createSprite()`(#f78183)][0] - this block creates a new sprite variable. Be sure to give the [`var`(#BB77C7)][1] a descriptive name!\n-   [`setAnimation()`(#f78183)][2] - this block tells the sprite which image to use. You can select any costumes in the [Animation Tab][3].\n-   [`drawSprites()`(#fff176)][4] - this block tells the animation to draw the sprites on the screen. If you forget it, nothing will appear!\n    :::\n\n# Do This\n\n1.  Create a sprite variable called `student`\n    -   Drag out a [`createSprite(200, 200)`(#f78183)][5] block and change the variable name to `student`\n2.  Set the animation\n    -   Drag out a [`setAnimation()`(#f78183)][6] block\n    -   Change the first part of the block to be the same name as the variable above: `student`\n    -   Use the dropdown menu to select different sprites to use as a student\n3.  Draw the sprite on the screen\n    -   Drag out a [`drawSprites()`(#fff176)][7] block\n\n**Run Your Code!** Verify that a student sprite appears on your screen! If you'd like, you can change the sprite to a different student using the dropdown menu in the [`setAnimation()`(#f78183)][8] block",
    "callouts": {
      "CSD U3L7.5 - animation": "View Animations Here!"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/6": {
    "long_instructions": "# Adding Animations\n\nThis program draws four sprites to the screen, and one of them has an animation from the Animation Tab!\n\n# Do This\n\n1.  Run the code to see what happens.\n2.  Look in the Animation Tab to see what animations are available to you. [(Show me where.)][0]\n    -   Feel free to alter your animations or choose a new one.\n3.  Use the `setAnimation` command to change the look of your other sprites.",
    "callouts": {
      "anicallout": "Click this to open the Animation Tab"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/7": {
    "long_instructions": "# Debug some sprites\n\n<img src=\"https://images.code.org/9e62ba920102879979acb2a7f6c216d8-image-1566234200067.36.46 AM.png\" style=\"float: right; width: 150px;\">\n\nThis program draws three sprites to the screen, but it's not working yet.  The wrong sprite is in front, and one sprite's animation isn't showing up.\n\n# Do This\n\n1.  Run the code to see what happens.\n2.  Fix the two problems in the code.\n\n_Hint: Just like shapes, sprites are drawn in the order they are created._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/8": {
    "dsls": {
      "answers": [
        {
          "text": "https://images.code.org/cd11d762b2cb3e36c3d45157b965c968-image-1523901253224.59.08 AM.png"
        },
        {
          "text": "https://images.code.org/653dff2d49f07341b2f2552747212b34-image-1523901253222.59.21 AM.png"
        },
        {
          "text": "https://images.code.org/db71e0cde6861faabc0b5a55d67c739e-image-1523901253227.58.12 AM.png"
        },
        {
          "text": "https://images.code.org/15d6014329fa3da9b73016af9f1d0d74-image-1523901253226.58.34 AM.png"
        }
      ],
      "content1": "Match the image to the code that it will produce.",
      "questions": [
        {
          "text": "https://images.code.org/131282b44fe34cd619a9a21bc68888da-image-1523902103487.58.48 AM.png,300px"
        },
        {
          "text": "https://images.code.org/2fbe4029dc47f6f048e7c9f90ac99cac-image-1523902103485.25.09 AM.png"
        },
        {
          "text": "https://images.code.org/c4cb49e00f7087765865da87cff37549-image-1523902103477.58.00 AM.png"
        },
        {
          "text": "https://images.code.org/7465035fc6701dcb91731fe9d160b638-image-1523902103481.58.28 AM.png"
        }
      ],
      "title": "drawSprites"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/9": {
    "dsls": {
      "description": "Use your new sprite and animation skills to complete these levels.",
      "display_name": "Creating sprites and animations"
    },
    "sublevels": {
      "CSD U3 Sprites missing_2023": {
        "display_name": "Where Are the Sprites?",
        "bubble_choice_description": "The sprites are being created, but you need to change the code to make the sprites appear.",
        "long_instructions": "# Debug: Missing Sprites\r\n\r\nLooking at the code below, we can see that many sprites are created, and yet when we run the program, nothing shows up. Can you fix it?\r\n"
      },
      "CSD U3 Sprites names_2023": {
        "display_name": "Sprite Animations",
        "bubble_choice_description": "Fix the names of the animations so that the errors go away.",
        "long_instructions": "# Debug: Sprites Animation Error\r\n\r\nErrors are being hit whenever we try to run our program! It looks like something is wrong with our animations, can you try and fix it?\r\n\r\n"
      },
      "CSD U3 Sprites name sprite_2023": {
        "display_name": "Sprite Name",
        "bubble_choice_description": "Fix the sprite name so that all three cherries appear.",
        "long_instructions": "# Debug: Sprite Name\r\n\r\nThe program below is trying to draw the same sprite in three different positions, but only one of them is showing up. What's happening here and can you fix it?\r\n"
      },
      "CSD U3 Sprites order_2023": {
        "display_name": "Sprite Order",
        "bubble_choice_description": "Change the code so that we can see the ladybug and the snail.",
        "long_instructions": "<img src=\"https://images.code.org/737cffe346564b62b9714e9d2c878a99-image-1591294163233.png\" style=\"float:right;\"/>\r\n\r\n# Debug: Sprite Order\r\n\r\nSomething is wrong with the scene below. Some sprites are behind other sprites when they should be in front of them. Can you fix it?\r\n"
      },
      "CSD U3 Sprites fish_2023": {
        "display_name": "Fish Scene",
        "bubble_choice_description": "Get creative and make a fish scene.",
        "long_instructions": "# Create A Scene\r\n\r\nWe've started you off with three different fish sprites. Using anything else that you want like drawings or other sprites, customize the fish sprites to make a fun looking scene!\r\n\r\n"
      },
      "CSD U3 Sprites sprite draw_2023": {
        "display_name": "Combine Ideas",
        "bubble_choice_description": "Create your own scene using both drawing and sprites.",
        "long_instructions": "# Combine Ideas\r\n\r\nYou have now learned how to draw images as well as create sprites in GameLab now. So using both of these techniques, create a fun scene!"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/10": {
    "long_instructions": "# Create your own sprites\n\n<img src=\"https://images.code.org/d823ca4327740a53df3600a0d9bc55b8-image-1566234132679.59.40 AM.png\" style=\"float: right; width: 150px;\">\n\nUse what you've learned to create your own sprites.  The example is just one way to complete the level.  Decide for yourself what you want your sprites to look like.\n\n# Do This\n\n1.  Go to the animation tab and add at least two animations to your project.\n2.  In the code tab, create at least two sprites in two different places on the screen.\n3.  Assign each sprite a different animation.\n4.  Draw your sprites to the screen.",
    "mini_rubric": {
      "rubric_key_concept": "Create and use sprites.",
      "rubric_performance_level_1": "More than two sprites have been created with different animations that are drawn to the canvas at different locations. Each sprite has a unique and meaningful label.",
      "rubric_performance_level_2": "At least two sprites have been created with different animations that are drawn to the canvas at different locations.",
      "rubric_performance_level_3": "At least one sprite has been created with an animation that is drawn to the canvas.",
      "rubric_performance_level_4": "No sprites were created or were created without an animation - shown by a gray square."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/8/levels/11": {
    "dsls": {
      "description": "Try these extra challenges that will help you make your sprites even more special.",
      "display_name": "Challenges: Sprites and Animations"
    },
    "sublevels": {
      "CSD U3 Sprites anitab 2_2023": {
        "display_name": "Find an image online",
        "bubble_choice_description": "Upload an image from another website to complete a kite scene.",
        "long_instructions": "# Uploading Images\r\n\r\nYou can also use the Animation tab to upload! You are going to make a flying kite. You can search the web for an image.\r\n\r\n# Do This\r\n* Search online for an image of a kite. Small images with transparent backgrounds work best.\r\n* Download your kite image. \r\n* Open the animations tab.\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\"> to upload an image.\r\n* Select the file from your computer.\r\n* Rename your image so it is easy to remember. To rename it click the text below the image.\r\n* Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.\r\n\r\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level.",
        "teacher_markdown": "# Recommended Search Engines\r\n\r\nBecause we can't know which sites might be blocked in your district, we've avoided pointing students to a specific search engine. Not all search engines make it easy to set Creative Commons filters - some of the easiest include:\r\n\r\n* <a href=\"https://search.creativecommons.org/\" target=\"new\">Creative Commons Search</a>\r\n* <a href=\"https://www.google.com/advanced_image_search\" target=\"new\">Google Image Advanced Search</a>\r\n* <a href=\"https://commons.wikimedia.org/\" target=\"new\">Wikimedia Commons</a>\r\n* <a href=\"https://www.flickr.com/creativecommons/\" target=\"new\">Flickr Creative Commons</a>\r\n"
      },
      "CSD U3 Sprites draw animation_2023": {
        "display_name": "Draw Your Own Character",
        "bubble_choice_description": "Create a sprite animation from scratch.",
        "long_instructions": "# Drawing your own image\r\n\r\nYou can also use the Animation tab to draw your own image. You are going to make your own character by drawing it.\r\n\r\n# Do This\r\n* Open the animations tab.\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/78890d644bbc4baef876a9eb8b6ea436-image-1567790745754.PNG\" style=\"width:50px\"> to draw your own picture to use as a sprite.\r\n* Rename your picture so it is easy to remember. To rename it click the text below the picture.\r\n* Back in code mode, use `sprite.setAnimation()` to make your character sprite show your new animation.\r\n\r\nFor now, don't worry if your character picture is too big or small. You'll learn how to resize sprites in the next lesson.\r\n"
      },
      "CSD U3 Sprites add own animation_2023": {
        "display_name": "Add Your Own Characters",
        "bubble_choice_description": "Draw two sprites from scratch and add them to the scene.",
        "long_instructions": "# Add your own images to the scene\r\n\r\nUse the Animation tab to draw your own images and then add them to the scene.\r\n\r\n# Do This\r\n* Open the animations tab.\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/78890d644bbc4baef876a9eb8b6ea436-image-1567790745754.PNG\" style=\"width:50px\"> to draw your own picture to use as a sprite.\r\n* Remember to rename your drawings so they are easy to remember. To rename a drawing click the text below the picture.\r\n* Back in code mode, use `sprite.setAnimation()` to make your character sprite show your new animation.\r\n\r\nFor now, don't worry if your drawings are too big or small. You'll learn how to resize sprites in the next lesson.\r\n"
      },
      "CSD U3 Sprites combine_2023": {
        "display_name": "Fun Hairstyles",
        "bubble_choice_description": "For this free play challenge, either draw your own sprites or edit existing sprites to give them your favorite hairstyles!",
        "long_instructions": "# Hair Styles!\r\n\r\nIt's time to combine all the different ways to create sprites and have fun! For this free play challenge, either draw your own sprites or edit existing sprites to give them your favorite hair styles!\r\n\r\n# Do This\r\nUsing the sprites in our library or by drawing your own sprites, create sprites with all of your favorite hair styles! Be creative!\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a sprite based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their sprites, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n\r\n# Recommended Search Engines\r\n\r\nBecause we can't know which sites might be blocked in your district, we've avoided pointing students to a specific search engine. Not all search engines make it easy to set Creative Commons filters - some of the easiest include:\r\n\r\n* <a href=\"https://search.creativecommons.org/\" target=\"new\">Creative Commons Search</a>\r\n* <a href=\"https://www.google.com/advanced_image_search\" target=\"new\">Google Image Advanced Search</a>\r\n* <a href=\"https://commons.wikimedia.org/\" target=\"new\">Wikimedia Commons</a>\r\n* <a href=\"https://www.flickr.com/creativecommons/\" target=\"new\">Flickr Creative Commons</a>\r\n"
      },
      "CSD U3 Sprites Free Play 2_2023": {
        "display_name": "Your Fashion Style",
        "bubble_choice_description": "For this free play challenge, either draw your own sprites or edit existing sprites to give them your unique fashion style!",
        "long_instructions": "# Your Unique Style!\r\n\r\nFor this free play challenge, either draw your own sprites or edit existing sprites to give them your unique fashion style!\r\n\r\n# Do This\r\nUsing the sprites in our library or by drawing your own sprites, create sprites with your fashion sense! Be creative!\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a sprite based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their sprites, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n\r\n# Recommended Search Engines\r\n\r\nBecause we can't know which sites might be blocked in your district, we've avoided pointing students to a specific search engine. Not all search engines make it easy to set Creative Commons filters - some of the easiest include:\r\n\r\n* <a href=\"https://search.creativecommons.org/\" target=\"new\">Creative Commons Search</a>\r\n* <a href=\"https://www.google.com/advanced_image_search\" target=\"new\">Google Image Advanced Search</a>\r\n* <a href=\"https://commons.wikimedia.org/\" target=\"new\">Wikimedia Commons</a>\r\n* <a href=\"https://www.flickr.com/creativecommons/\" target=\"new\">Flickr Creative Commons</a>\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/1": {
    "display_name": "Sprite Properties: Predict",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "a bee sprite in the middle of the screen",
              "correct": false
            },
            {
              "text": "a bee sprite in the bottom right corner",
              "correct": true
            },
            {
              "text": "two bee sprites, one in the middle and one in the bottom right corner",
              "correct": false
            },
            {
              "text": "three bee sprites, all in different places",
              "correct": false
            },
            {
              "text": "nothing, there will be an error",
              "correct": false
            }
          ],
          "content1": "Look at the code below and predict where the bee sprite will appear.",
          "questions": [
            {
              "text": "What will the program show?"
            }
          ],
          "title": "Bee Sprite Positioning"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/2": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Sprite Properties\n\nSprite properties keep track of all the information your program needs to know about a sprite, such as its size and location.  You can change the values of these properties just like you do variables, and see the results when your sprite is drawn to the screen.\n\n# Do this\n\n1.  Run the program to see where the sprites appear.\n2.  Change the location of the paint brush to touch the paint palette.\n    -   Change the [`sprite.x`(#f78183)][0] and [`sprite.y`(#f78183)][1] properties of the paint brush sprite to change it's location."
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/3": {
    "long_instructions": "# New Properties\n\nSprites have lots of properties.  Check out the two new blocks in this activity and try them out for yourself.  Notice that different sprites can use the same animation, and still look different because of properties.\n\n# Do this\n\n1.  Run the program to see what is different about the first two notes.\n    -   Notice how the [`rotation`(#f78183)][0] and [`scale`(#f78183)][1] blocks make the first two notes look different.\n2.  Use the same blocks on the last two notes to make them look different, too.\n    -   Use the the [`rotation`(#f78183)][2] and [`scale`(#f78183)][3] blocks on the last two notes."
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/4": {
    "dsls": {
      "description": "Try out the sprite properties you have learned here",
      "display_name": "Sprite Properties"
    },
    "sublevels": {
      "CSD Games bubble choice properties scale_2023": {
        "display_name": "Scale Property",
        "bubble_choice_description": "Use the scale property to make the animals the right size.",
        "long_instructions": "<img src=\"https://images.code.org/3a1a5a54a3065e2467e80e71b9ed8732-image-1582072742157.png\" width=200 style=\"float: right;\">\r\n\r\n# Scale Property\r\n\r\nThe [`scale`(#f78183)](/docs/ide/gamelab/expressions/scale) property changes the size of the sprite. Scale of `1` is the normal size, scale of `2` is twice as big, and a scale of `0.5` is half as big.\r\n\r\n# Do this\r\n\r\n1) ::: details [Fix the code so that it looks like the picture.]\r\n   - Use the [`scale`(#f78183)](/docs/ide/gamelab/expressions/scale) property to change the size of each sprite.\r\n   - Make sure that each animal is as big or as small as it should be.\r\n   - Make sure the fish fits in the pond.\r\n:::\r\n"
      },
      "CSD Games bubble choice properties rotation_2023": {
        "display_name": "Rotation Property",
        "bubble_choice_description": "Rotate the cars so they fit in the traffic lanes.",
        "long_instructions": "<img src=\"https://images.code.org/4cf2c2d2c61c5e4be4e1a0d47b131afe-image-1592417144547.png\" style=\"float: right;\" width=200/>\r\n\r\n# Rotation\r\n\r\nThe [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) sprite property rotates an image by between 0 and 360 degrees. The image is rotated clockwise. For example, [`mySprite.rotation = 90;`(#f78183)](/docs/ide/gamelab/expressions/rotation) will turn it one quarter rotation to its right.\r\n\r\n# Do This\r\n1) ::: details [Make all of the cars look like they are traveling correctly down the roads.]\r\n   - Add [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) property blocks to each of the car sprites.\r\n   - Play with the value of the degrees needed to turn the cars in the right direction like in the picture.\r\n:::\r\n"
      },
      "CSD Games bubble choice properties scale and rotation_2023": {
        "display_name": "Multiple Properties",
        "bubble_choice_description": "Rotate and scale the sprites so they look like they are floating in space.",
        "long_instructions": "<img src=\"https://images.code.org/19f3c4f6153405a70c6698db07673f8f-image-1663782378514.png\" style=\"float: right; width:200px; margin-left:10px;\" width=200/>\r\n\r\n# Scale and Rotation\r\n\r\nPractice using the [`scale`(#f78183)](/docs/ide/gamelab/expressions/scale) and [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) sprite properties in order to fix the scene\r\n\r\n# Do This\r\n1) ::: details [Add blocks to the code to make the alien, astronaut, and comet look like they are floating in space similar to the image to the right.]\r\n   - Use the [`scale`(#f78183)](/docs/ide/gamelab/expressions/scale) and [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) blocks to each sprite.\r\n:::\r\n\r\n**Bonus:** Use variables and [`randomNumber`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber) blocks to change the rotation of the astronaut and alien every time you play the scene.\r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/5": {
    "long_instructions": "# Make it Fit!\n\n<img src=\"https://images.code.org/3cc33de83a1dee34a3ce07f4d6c24c45-image-1566239215417.25.23 AM.png\" style=\"float: right; width: 150px;\">\n\nThe food is way too big to fit on the plate.  Use your knowledge of sprite properties to make it fit.\n\n# Do this\n\n1.  Run the program to see how big the food is.\n2.  Use sprite properties to scale all of the food sprites down so they fit on the plate.",
    "mini_rubric": {
      "rubric_key_concept": "Use dot notation to update a sprite's properties.",
      "rubric_performance_level_1": "The arrangement of sprites is identical to the example provided in the instructions.",
      "rubric_performance_level_2": "The sprites have been resized to fit inside the circle. There may be some slight differences between the student's work and the provided example.",
      "rubric_performance_level_3": "The sprites have been resized, but are still too large to fit inside the circle.",
      "rubric_performance_level_4": "The code is either the same or has been changed in ways unrelated the assignment."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/9/levels/6": {
    "dsls": {
      "description": "Try these new challenges with sprite properties",
      "display_name": "Challenges: Sprite Properties"
    },
    "sublevels": {
      "CSD U3 properties tint_2023": {
        "display_name": "New Block : Tint",
        "bubble_choice_description": "Adjust the sprite's color with tint.",
        "long_instructions": "# Tint\r\n\r\nTint is a property that will overlay a color on top of a sprite to tint it. This tint doesn't change the existing colors of a sprite, but is more like putting a pane of colored glass over the top of the sprite.\r\n\r\n# Do This:\r\n\r\n1) Using either the sprite already created for you or with any other sprites of your choosing, play around with the tint property and see how it works and how it changes on different colored sprites!\r\n   - **Tip:** Make sure to put the tint color you would like in quotation marks (example: \"red\"). ",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 properties depth_2023": {
        "display_name": "New Blocks : Height & Width",
        "bubble_choice_description": "Stretch your sprite horizontally or vertically.",
        "long_instructions": "# Height and Width\r\n\r\nYou learned about the scale property, which grows or shrinks a sprite while keeping their height to width ratio the same. But it is possible to only change the height or width of a sprite with other properties!\r\n\r\n# Do This:\r\n\r\n1) Using either the sprite already created for you or with any other sprites of your choosing, play around with the height and width properties and think about when you would want to use these properties versus using the scale property. \r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 properties alpha_2023": {
        "display_name": "New Block : Alpha",
        "bubble_choice_description": "Adjust the sprite's transparency with alpha.",
        "long_instructions": "# Alpha\r\n\r\n[`alpha`(#f78183)](/docs/ide/gamelab/expressions/alpha) is a property that can control the transparency of a sprite. It uses decimal values to represent transparency:\r\n\r\n- [`sprite.alpha = 1;`(#f78183)](/docs/ide/gamelab/expressions/alpha) would be not transparent at all - it will look like a normal sprite.\r\n- [`sprite.alpha = 0;`(#f78183)](/docs/ide/gamelab/expressions/alpha) would be completely transparent - it will look invisible!\r\n- [`sprite.alpha = 0.5;`(#f78183)](/docs/ide/gamelab/expressions/alpha) would be 50% transparent (partially transparent, like it's see-through)\r\n\r\n\r\n# Do This:\r\n\r\n1) Using either the sprite already created for you or with any other sprites of your choosing, play around with the transparency and see how it works and how it changes on different sprites!"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/1": {
    "long_instructions": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Change the number that is stored into the variable ([Show me where][0]) and run the code again.",
    "callouts": {
      "CSD_U3_variables": "Change the number here"
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nRead the code below and make a prediction.\n\n-   What will show on the screen?\n-   Where will it be displayed?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/2": {
    "long_instructions": "# Text\n\nYou can put text anywhere you'd like on the screen using the [`text`(#4dd0e1)][0] block.  **Read the documentation by clicking on the block in the toolbox** to see how to change the size and color of your text.\n\n# Do This\n\n1.  Change the displayed text in the provided code.\n    -   Replace the text in the [`text`(#4dd0e1)][1] block that says \"Change me and add another text block!\"\n2.  Add another sentence in a different part of the screen.\n    -   Add a second [`text`(#4dd0e1)][2] block and change the `x` and `y` location in the block.",
    "callouts": {
      "": "Use this block to put text on the screen"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/3": {
    "long_instructions": "# Text Size\n\nYou can change the size of the text using the [`textSize`(#4dd0e1)][0] block.\n\n# Do This\n\n1.  Run the code to see how it works.\n2.  Add code to make the word \"large\" the biggest.\n    -   Add another [`textSize`(#4dd0e1)][1] block before the [`text`(#4dd0e1)][2] block that prints the text \"large\" to the screen.\n    -   Make sure the pixel size is bigger than the \"small\" and \"medium\" words.",
    "callouts": {
      "": "Use this block to put text on the screen"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/4": {
    "dsls": {
      "description": "Try out your text skills on these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Sprites text debug 2_2023": {
        "display_name": "Debug: Berry Greeting",
        "bubble_choice_description": "Change the order so that the strawberry appears on top of the lines but behind the text and eyes.",
        "long_instructions": "<img src=\"https://images.code.org/1e91dd574f15265e6f09f92c0d150197-image-1663795658901.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\r\n\r\n# Debug\r\n\r\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  \r\n\r\n# Do This\r\n\r\n1) ::: details [Reorder the blocks so that each part of the scene is drawn in the correct order so that the scene looks like the picture.]\r\n   - _Hint: You often want to call [`drawSprites()`(#fff176)](/docs/ide/gamelab/expressions/drawSprites) at the very end of your program so the sprites are on top of your background, **but** for some designs you may want to call [`drawSprites()`(#fff176)](/docs/ide/gamelab/expressions/drawSprites) earlier so that your sprites are on top of some shapes but below others._\r\n:::\r\n\r\n"
      },
      "CSD games text debug quotes_2023": {
        "display_name": "Debug: Flying Riddle",
        "bubble_choice_description": "Fix the bug so that the text appears.",
        "long_instructions": "<img src=\"https://images.code.org/36c5e245e7f6255473b5d967f9dbbc5f-image-1589573721436.png\" style=\"float:right; width:200px;\">\r\n\r\n# Debug Text\r\n\r\nThis scene is supposed to draw a cartoon, but it has a bug.\r\n\r\nWhat I expected to happen | What happened instead\r\n----------|----------\r\nThe image shows on the screen. | The code doesn't run at all, \r\n  |  | and there is an error message.\r\n\r\n# Do this\r\n\r\n1) Run the code, and see the error message.\r\n2) Look for clues as to where the bug is in the code.\r\n3) Once you have found the bug, fix it.\r\n4) What clues helped you to find the problem?\r\n\r\n\r\n\r\n"
      },
      "CSD U3 Sprites text location_2023": {
        "display_name": "Add Text: Score",
        "bubble_choice_description": "Add text to this scene to display the score.",
        "long_instructions": "<img src=\"https://images.code.org/e3e4b97da51df18a5651e1985b326833-image-1663805107282.png\" style=\"float: right; width: 400px; margin-left: 20px;\">\r\n\r\n# Missing Score\r\n\r\nThis image of a game is missing the score! Oh no! Can you help by adding text to to match the image to the right?\r\n\r\n# Do This:\r\n\r\n1) ::: details [Add text to the scene so that it matches the scene in the picture.]\r\n   - Use two of the [`text()`(#4dd0e1)](/docs/ide/gamelab/expressions/text) blocks.\r\n   - *Hint: you will also need to use the [`fill()`(#4dd0e1)](/docs/ide/gamelab/expressions/fill) and [`textSize();`(#4dd0e1)](/docs/ide/gamelab/expressions/textSize) blocks to get the score to look right*\r\n:::\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/5": {
    "long_instructions": "# Add Text\n\nHere is a scene, but it needs text.\n\n# Do this\n\n1.  Add two pieces of text to the following scene.  \n2.  Make the two pieces of text different sizes.",
    "mini_rubric": {
      "rubric_key_concept": "Place text on the screen using a coordinate plane, use arguments to change the appearance of text.",
      "rubric_performance_level_1": "Two pieces of text appear on the screen in reasonable places, and the text pieces are different sizes.",
      "rubric_performance_level_2": "The text block is used, and it appears on the screen in a reasonable place.",
      "rubric_performance_level_3": "The text block is used, but the text does not appear completely on the screen.",
      "rubric_performance_level_4": "No text blocks are used, or it contains so many errors that the program cannot run."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/10/levels/6": {
    "dsls": {
      "description": "Try out these new blocks and challenges.",
      "display_name": "Text Challenges"
    },
    "sublevels": {
      "CSD web text stroke_2023": {
        "display_name": "Text Color",
        "bubble_choice_description": "Learn how to change the color of your text.",
        "long_instructions": "# Text Color\r\n\r\nYou can change the color of your text using the [`fill`(#4dd0e1)](/docs/ide/gamelab/expressions/fill) block.\r\n\r\n# Do This\r\n1) Read the code to see how it works.\r\n2) Add a new block to make the word \"sky\" a different color.\r\n3) Add more text with even more colors.\r\n"
      },
      "CSD web challenge stroke_2023": {
        "display_name": "White Text on White Background",
        "bubble_choice_description": "Learn how to make text stand out with a colorful stroke.",
        "long_instructions": "# White Text on White Background\r\n\r\nYou can add a border to your text using the [`stroke`(#4dd0e1)](/docs/ide/gamelab/expressions/stroke) command, shown below. Like other shapes, you can also use the [`strokeWeight`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight) command to change the thickness of the stroke. By running the code below, you'll notice that the normal stroke weight for text doesn't give it much contrast when the background is the same color.\r\n\r\n# Do This\r\n\r\n1) Read the code to see how it works.\r\n2) Add code to make the text stand out more.\r\n\r\n"
      },
      "CSD web challenge wrap text_2023": {
        "display_name": "Wrap Text",
        "bubble_choice_description": "Learn how to make big text fit inside a text box.",
        "long_instructions": "# Wrapping Text\r\n\r\nYou already know that the first two parameters to the [`text`(#4dd0e1)](/docs/ide/gamelab/expressions/text) block indicate the *upper-left* corner of the text area. There are also two more optional parameters that are hidden by default. These last two parameters indicate the *width* and *height* of the text area. If all 5 parameters are used, Game Lab will try to fit the text inside the rectangle defined by these parameters.\r\n\r\n<img src=\"https://images.code.org/063fbcb347e5c935cd7d0aede7e2ac11-image-1607015001837.png\" width=\"400\">\r\n\r\n\r\n# Do This\r\n\r\n1) Read the code to see how it works.\r\n2) In Block Mode, use the arrow button on the [`text`(#4dd0e1)](/docs/ide/gamelab/expressions/text) block to add the optional parameters.\r\n3) Enter values into the optional parameters that will make the text fit on the screen. \r\n   * **Hint:** Use values for *width* and *height* that are near the bottom right corner of the screen.\r\n\r\n"
      },
      "CSD games text freeplay_2023": {
        "display_name": "Favorite Quote or Saying",
        "bubble_choice_description": "Use what you've learned to create a scene that represents your favorite quote or saying. ",
        "long_instructions": "# Favorite Quote or Saying\r\n\r\nUse what you've learned to create a scene that represents your favorite quote or saying. Don't forget to add the text of your favorite quote or saying to your scene!\r\n\r\nFor example, if your favorite quote is \"It always seems impossible until it's done\" by Nelson Mandela, you might create a scene of a person at the top of a steep mountain. \r\n\r\n# Do This\r\n1) Add sprites or draw a scene that represents your favorite quote or saying.\r\n2) Add the text of your quote or saying to your scene.\r\n\r\n**Tip:** When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD games text freeplay2_2023": {
        "display_name": "Favorite Scene",
        "bubble_choice_description": "Use what you've learned to recreate your favorite book, movie, TV show, or even video game scene.",
        "long_instructions": "# Favorite Scene\r\n\r\nUse what you've learned to recreate your favorite book, movie, TV show, or even video game scene. Don't forget to add the text to your favorite scene to your creation!\r\n\r\n# Do This\r\n1) Add sprites or draw a scene to recreate your favorite book, movie, TV show, or video game scene.\r\n2) Add text to your scene.\r\n\r\n**Tip:** When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/11/levels/1": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Sprite Scenes\n\nIt's time to put everything together and make a fun scene.  Take a look at this example and think about what you'd like to make.\n\n# Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene.\n\n**Is there anything else that you still need to learn how to do?**\n\n**Are there any skills that you'd like to review?**"
  },
  "https://studio.code.org/s/csd3-2023/lessons/11/levels/2": {
    "long_instructions": "# Create Your Scene - Background\n\nFirst, make the background of your scene by using the [`background`(#4dd0e1)][0] command to fill the screen with a color, and then use at least 2 shape commands to finish the background of your scene.\n\n# Do This\n\n1.  Give your scene a background.\n2.  Make sure you use at least 2 shapes in your background."
  },
  "https://studio.code.org/s/csd3-2023/lessons/11/levels/3": {
    "long_instructions": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n\n# Do This\n\n1.  Add or draw at least 2 sprite animations in the Animation Tab.\n2.  Create at least 2 sprites and assign each one an animation.\n3.  Set the value for any sprite properties you'd like to use.\n    -   _Try to use at least 1 sprite property (such as rotation, scale, tint or any others in the Toolbox) with each sprite._\n4.  Draw all of your sprites to the screen."
  },
  "https://studio.code.org/s/csd3-2023/lessons/11/levels/4": {
    "long_instructions": "# Create Your Scene - Text\n\nThe final piece of your scene is to add text.\n\n# Do This\n\n1.  Add at least 2 lines of text to your project.\n2.  Use any other commands to change the appearance of your text."
  },
  "https://studio.code.org/s/csd3-2023/lessons/11/levels/5": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Review Your Scene\n\nCheck over your scene one last time to make sure you have included everything that you want.\n\n# Do this\n\n1.  Compare the scene that you drew to your plan.\n2.  Make any last changes.\n3.  What are you most proud of?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/1": {
    "contained levels": [
      {
        "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Draw Loop\n\nHere's an example of the draw loop at work.\n\n# Do This\n\n1.  Discuss with your partner what will be drawn on the screen and why. \n2.  Record your prediction in the box below.\n3.  Run the program to see what this program does!"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/09e7f584150124833884d434ea620531-image-1589575201865.2020-05-15 16_39_52.gif\" style=\"float:right;width:150px\">\n\n# Using the Draw Loop\n\nNow it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.\n\n# Do This\n\n1.  Add code to this program so that your drawing has orange circles being drawn, too.\n2.  Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/3": {
    "teacher_markdown": "Notice that the blue background is never visible because it is immediately drawn over by the red background. Also there's only ever one yellow dot visible since as the draw loop runs over and over it is placing down new backgrounds.",
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThis program has one small difference that will make it run a little differently. Again though, remember:\n\n-   All your code outside the draw loop is run first, one time\n-   All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/4": {
    "long_instructions": "# Sprites in the Draw Loop\n\nBy changing sprite properties in the draw loop, you can animate your characters.\n\n# Do This\n\n1.  Run the code to see how it works.\n2.  Discuss with your partner why some code is inside the draw loop and some code is outside.\n3.  Try changing the numbers in the random number block and running the program again."
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis animation already is updating one sprite's x property to make it look like it's shaking.\n\n# Do This\n\n1.  Run the program to see how it works.\n2.  Edit the code in this program to make the second sprite shake like the first one.\n3.  Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/6": {
    "dsls": {
      "description": "Try out using the draw loop with these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Draw Loop Plugged wiggle sprite rotation_2023": {
        "display_name": "Updating Rotation",
        "bubble_choice_description": "Make both aliens dance in space using their rotation properties.",
        "long_instructions": "<img src=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\" style=\"float:right;height:150px\">\r\n\r\n# Updating Properties\r\n\r\nThis level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) property.\r\n\r\n# Do This\r\n\r\nThis animation already is updating *one* sprite's rotation property to make it look like it's shaking\r\n\r\n1) Run the program to see how it works.\r\n2) Add code to this program to make the other alien shake just like the first.\r\n3) Move on when your program looks like the picture to the right."
      },
      "CSD games draw debug blurry_2023": {
        "display_name": "Debug: Blurry Sprite",
        "bubble_choice_description": "Debug a blurry sprite animation.",
        "long_instructions": "<img src=\"https://images.code.org/c9ea20861045987d177e964f7eeb07ad-image-1585823491836.gif\" style=\"float:right;\">\r\n\r\n# Debug: Blurry Sprite\r\n\r\nWhat I expected it to do |  What it is doing instead\r\n ------- | ----------\r\n shake around  |  blurry shaking\r\n\r\n# Do This\r\n\r\n1) Run the program to see the bug.\r\n2) Use the clues to try to find the bug.\r\n3) Once you've found it, fix the program so it shakes like the image on the right.\r\n"
      },
      "CSD games draw debug not moving_2023": {
        "display_name": "Debug: Sprite Not Moving",
        "bubble_choice_description": "Debug why the sprite is not moving even though we update its position in the draw loop.",
        "long_instructions": "# Debug: Sprite Not Moving\r\n\r\nDebug why the sprite is not moving even though we update its position in the draw loop\r\n\r\nWhat I expected it to do |  What it is doing instead\r\n ------- | ----------\r\n shake around  |  not moving at all\r\n\r\n# Do This\r\n\r\n1) Run the program to see the bug\r\n2) Use the clues to try to find the bug\r\n\r\n::: details [Hint if you get stuck]\r\nWhere is [`drawSprites()`(#fff176)](/docs/ide/gamelab/expressions/drawSprites) placed in the code?\r\n:::\r\n\r\n::: details [Another hint]\r\nIs the screen being cleared at the beginning of the draw loop? How do we normally clear the screen?\r\n:::"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis level is very similar to the last, but this time, you'll add in the draw loop yourself.\n\n# Do This\n\n1.  Add the draw loop block to the bottom of this program.\n2.  Move any blocks that need to be inside the draw loop.\n3.  Move on when your program looks like the picture to the right.",
    "callouts": {
      "": ""
    },
    "mini_rubric": {
      "rubric_key_concept": "Use loops to repeat behavior within a program.",
      "rubric_performance_level_1": "The sprite animates as described in the instructions.  Other set up, such as creating the sprite, happen outside of the draw loop, and there are no extra blocks.",
      "rubric_performance_level_2": "The sprite animates, but there may be small problems with the scene, such as creating sprites inside the draw loop or having extra calls to `drawSprites` or other extra code.",
      "rubric_performance_level_3": "The sprite animates, but there are major problems, such as leaving a \"trails\" of previous locations behind or other parts of the scene disappearing.",
      "rubric_performance_level_4": "The sprite does not animate."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/12/levels/8": {
    "dsls": {
      "description": "Try out these draw loop challenges.",
      "display_name": "Draw Loop Challenges"
    },
    "sublevels": {
      "CSD U3 Draw Loop challenge scene_2023": {
        "display_name": "Recreate a Scene",
        "bubble_choice_description": "Recreate the animated scene of animals jumping on a couch.",
        "long_instructions": "<img src=\"https://images.code.org/f1a9eebd8e1c05c06059add23c08369d-image-1663867585267.gif\" style=\"float:right;height:150px\">\r\n\r\n# Create An Animated Scene\r\n\r\nThis level combines some of the skills you've been learning. You will need to create sprites and set their x and y locations, set their animations, and set their scale to match the image to the right. You will also need to animate the appropriate sprite property to make the animals look like they are jumping up and down, like the image to the right.\r\n\r\n# Do This\r\n\r\nRecreate the scene in the image to the right.\r\n1) Create your sprite for the background\r\n2) Create your sprites for the cow, elephant, and pig and set the x and y location for each.\r\n3) Set the animation for each sprite.\r\n4) Resize your animals.\r\n5) Update the appropriate sprite property in the draw loop to make the animals appear like they are jumping on the couch like the image to the right.\r\n\r\n"
      },
      "CSD U3 Draw Loop challenge _2023": {
        "display_name": "Animate The Rainbow Snake",
        "bubble_choice_description": "Animate the rainbow snake you saw in a previous lesson using the draw loop.",
        "long_instructions": "<img src=\"https://images.code.org/30077f29d50d7a45d18a99f015c447d2-image-1663871176287.gif\" style=\"float:right;height:150px\">\r\n\r\n# Animate the Rainbow Snake\r\n\r\nThis level brings back the rainbow snake from an earlier lesson so that you can animate it with the draw loop!\r\n\r\n# Do This\r\n\r\nUpdate the rainbow snake scene using the draw loop so that the snake is animated similar to the image to the right.\r\n1) Create your sprite for the snake head and set it's location to be at the front of the body.\r\n2) Set the animation for the snake head.\r\n3) Resize the snake head.\r\n4) Add a draw loop and move the necessary code into it so that the snake is animated.\r\n5) Update the appropriate sprite property for the snake head so that it is also animated with the rest of the body."
      },
      "CSD U3 L7 Freeplay_2023": {
        "display_name": "Favorite Animal",
        "bubble_choice_description": "Create a scene with your favorite animal doing your favorite activity!",
        "long_instructions": "# Favorite Animal\r\n\r\nUse what you've learned so far to create a scene with your favorite animal doing your favorite activity! Don't have a favorite animal yet? Look through the library of animations and see if one catches your eye or draw your own!\r\n\r\nFor example, you might like clown fish and you enjoy cooking so you create an animated scene of the fish cooking a dish with animated salt and pepper shakers or you might like unicorns and you like gymnastics so you create an animated scene with the unicorn jumping around! \r\n\r\n# Do This\r\n\r\n1) Add or draw your sprites in the Animation Tab.\r\n2) Create your sprites and set it's animation.\r\n3) Add a draw loop and add the code needed to animate your favorite animal.\r\n\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L7 Freeplay2_2023": {
        "display_name": "Favorite Food ... Puns",
        "bubble_choice_description": "Create a scene with your favorite food, animated, and telling a *punny* joke!",
        "long_instructions": "<img src=\"https://images.code.org/ef4d8b8769efcba645f3900f595cd3e8-jamSession.gif\" style=\"width:200px; float: right; margin-left:20px\">\r\n\r\n# Favorite Food ... Puns\r\n\r\nUse what you've learned so far to create a scene with your favorite food, animated, and telling a *punny* joke!\r\n\r\nFor example, you might like blueberries so you create a scene with animated, moving blueberries playing a guitar with text that says, \"What do you call blueberries playing the guitar? ... A jam session!\"\r\n\r\n# Do This\r\n\r\n1) Add or draw your sprites in the Animation Tab\r\n2) Create your sprites and set their animations\r\n3) Add a draw loop and the needed code to animate your pun\r\n\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 Draw Loop Plugged update your scene_2023": {
        "display_name": "Challenge: Extend Your Scene",
        "bubble_choice_description": "Use the draw loop to make your sprite from last lesson move.",
        "long_instructions": "# Extend Your Scene\r\n\r\nThis is the sprite scene you made in the last lesson. You will need to do a little updating to your program in order to use the draw loop to update your sprites' [`sprite.x`(#f78183)](/docs/ide/gamelab/expressions/x), [`sprite.y`(#f78183)](/docs/ide/gamelab/expressions/y), or [`sprite.rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) properties so that they move. You may also need to update them with [`randomNumber();`(#FFB74D)](/docs/ide/gamelab/expressions/randomNumber)sprite properties.\r\n\r\n\r\n<img src=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png\" style=\"float:right;height:100px\">\r\n\r\n# Do This\r\n\r\n1) Add a draw loop to your program (you should only have one).\r\n2) Use the lasso selector (click, hold and drag) to select the code that will be updated each time and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.\r\n3) Add code to your program that will animate your sprites.\r\n",
        "mini_rubric": {
          "rubric_key_concept": "Use loops to repeat behavior within a program.",
          "rubric_performance_level_1": "The sprite animates as described in the instructions.  Other set up, such as creating the sprite, happen outside of the draw loop, and there are no extra blocks.",
          "rubric_performance_level_2": "The sprite animates, but there may be small problems with the scene, such the wrong sprite or text being in front.  There may be other errors, such as creating sprites inside the draw loop or having extra calls to `drawSprites` or other extra code.",
          "rubric_performance_level_3": "The sprite animates, but there are major problems, such as leaving a \"trails\" of previous locations behind or text or other parts of the scene disappearing.",
          "rubric_performance_level_4": "The sprite does not animate."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/1": {
    "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?",
    "contained levels": [
      {
        "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/cdf7115bbd6e9c91838cc6c8a78d6607-image-1588350244303.gif\" style=\"float: right; margin-left: 20px\">\n\n_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Sprite Movement\n\nUsing the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's [`x`(#f78183)][0] or [`y`(#f78183)][1] property in the draw loop makes your sprite move just a bit each time it is redrawn.\n\n# Do This\n\n1.  Read the code that makes the jet go up the screen.\n    -   Find the counter pattern with the jet's [`y`(#f78183)][2] property in the draw loop.\n2.  Add code that makes the plane move to the right, as in the sample image.\n    -   Add the counter pattern with the plane's [`x`(#f78183)][3] property in the draw loop.\n    -   It should look like this: <img src=\"https://images.code.org/05884e622958186e6b8f5b96cf67139d-image-1673464345825.png\" style=\"width:150px\">"
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\" style=\"float: right; margin-left: 20px\">\n\n# Moving to the Left\n\nIf adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?\n\n# Do This\n\nMake your program animate like the image to the right. \n\n1.  Use the counter pattern to make the sprite move to the left.\n    -   Use the [`fly.x`(#f78183)][0] with the counter pattern inside the draw loop so that in each frame the fly is drawn a little bit further to the left.\n\n_Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/72b0e98c58a18f70774c1c565510ebdd-image-1589817494729.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Diagonal Movement\n\n<img src=\"https://images.code.org/d0db80b8f5d486c85c0f1c259f2f5b32-image-1588350637669.29.55 AM.png\" style=\"float: right; margin-left: 20px; width: 150;\">\n\nUpdating **both** the [`x`(#f78183)][0] or [`y`(#f78183)][1]\n properties of a sprite can make it move diagonally.  You can use the watchers under the code area to see how each property is changing.\n\n# Do This\n\n1.  Read the code that makes the mouse go down.\n2.  Run the program and look at the watchers to see what is happening \n    -   Take a look at the [`mouse.x`(#f78183)][2] and [`mouse.y`(#f78183)][3] properties. Are they both increasing?\n3.  Add one more line of code to make the mouse move diagonally.\n    -   Use the counter pattern with the mouse's [`x`(#f78183)][4] property\n4.  Run your code again and look at the watchers.\n\n**Challenge:** Set the sprite's [`rotation`(#f78183)][5] property so that it faces the direction it is moving."
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/5": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Read this program and predict which of the following animations will be produced."
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/6": {
    "dsls": {
      "description": "Try out using the draw loop with these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Watcher Predict_2023": {
        "display_name": "Spinning",
        "bubble_choice_description": "Make sprites spin with the counter pattern.",
        "long_instructions": "<img src=\"https://images.code.org/c99222106238ae67ca38801ba986f61a-image-1588351042690.gif\" style=\"float: right; margin-left: 20px;\">\r\n\r\n# Rotation and Spinning\r\n\r\nUsing the counter pattern on a sprite's rotation property can make it spin around.\r\n\r\n# Do This\r\n\r\n1) ::: details [Make the pan spin like in the image on the right.]\r\n   - Use the counter pattern with the sprite's [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) property.\r\n   - Make sure you are still using the correct counter pattern format of [`sprite.rotation = sprite.rotation + 2;`(#f78183)](/docs/ide/gamelab/expressions/rotation)\r\n:::\r\n\r\n"
      },
      "CSD U3 Watcher Debug_2023": {
        "display_name": "Debug: Watching the Counter Pattern",
        "bubble_choice_description": "Fix the direction the motorcycle is going by looking at the watchers.",
        "long_instructions": "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\" style=\"float: right; margin-left: 20px;\">\r\n\r\n# Debug: Watching the Counter Pattern\r\n\r\nThis program should move the motorcycle from the bottom left to the top right, as in the image to the right. However, the motorcycle moves off screen too quickly to see what's going wrong.\r\n\r\n# Do This\r\n\r\n1) ::: details [Take a look at the value in the watcher.]\r\n   - You should see the [`cycle.x`(#f78183)](/docs/ide/gamelab/expressions/x) property values.\r\n:::\r\n2) ::: details [Add a watcher for the y property.]\r\n   - Type [`cycle.y`(#f78183)](/docs/ide/gamelab/expressions/y) in the watcher box.\r\n:::\r\n3) ::: details [Run the program to see what happens to the properties and why the motorcycle disappears.]\r\n   - What is happening to the cycle's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) property value?\r\n   - What *should* the cycle's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) property value be doing to get it to move up the screen?\r\n:::\r\n4) Debug the code so the program runs like the image to the right.\r\n"
      },
      "CSD U3 Movement Gears_2023": {
        "display_name": "Rotation Direction",
        "bubble_choice_description": "Make the gears rotate together.",
        "long_instructions": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:200px; float:right; margin-left: 20px;\">\r\n\r\n# Rotation Direction\r\n\r\nWhen you use the counter pattern for the [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation)\r\n property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\r\n\r\n# Do This\r\n\r\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.\r\n\r\n1) ::: details [Make the gears rotate so they look like they are working as one system.]\r\n   - **Hint: They won't all rotate the same direction**.\r\n   - Use the counter pattern for the [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) property with addition for two gears and with subtraction for one gear.\r\n:::"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/7": {
    "display_name": "Fish Animation",
    "bubble_choice_description": "Make the fish move at different speeds using the counter pattern.",
    "long_instructions": "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Fish Animation\n\nUsing the counter pattern, make all three of the fish move left across the screen as they do in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.\n\n# Do This\n\n1.  Use the counter pattern to make the blue fish move across the screen faster than the other fish.\n2.  Use the counter pattern to make the green fish move across the screen slower than the other fish.",
    "mini_rubric": {
      "rubric_key_concept": "Use the counter pattern to increment or decrement sprite properties.",
      "rubric_performance_level_1": "The student's animation is identical to the example provided in the instructions.",
      "rubric_performance_level_2": "The fish all move across the screen in the order indicated by the instructions.",
      "rubric_performance_level_3": "The counter pattern is used inside the draw loop to decrement the x position of the blue and green fish. The fish all move left across the screen, but not necessarily at the instructed speeds.",
      "rubric_performance_level_4": "The counter pattern has been used outside the draw loop, or not at all."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/13/levels/8": {
    "dsls": {
      "description": "Add more to your fish scene or create something new.",
      "display_name": "Sprite Movement Challenges"
    },
    "sublevels": {
      "CSD U3 Movement Fish challenge_2023": {
        "display_name": "More Fish!",
        "bubble_choice_description": "Make the fish wiggle as they move.",
        "long_instructions": "<img src=\"https://images.code.org/b806defa241eb5025cb39f99f3b2d306-image-1592496039159.2020-06-18 11_59_09.gif\" style=\"width:200px; float:right;\">\r\n\r\n# More fish!\r\n\r\nBefore you learned the counter pattern, you learned to set sprite properties, such as rotation, to random values to animate them. By setting the rotation of the fish to a random number, you can make them appear to wiggle slightly. This will make their movement animation more lifelike!\r\n\r\n# Do this:\r\n1) For each fish, use the counter pattern to move it across the screen similar to the example. \r\n2) For each fish, randomly set its rotation inside the draw loop.\r\n   - **Hint:** To make it look as realistic as possible, choose a small range of negative and positive values."
      },
      "CSD U3 Movement Fish challenge2_2023": {
        "display_name": "Bubbles",
        "bubble_choice_description": "Use ellipses to make bubbles rise to the surface.",
        "long_instructions": "<img src=\"https://images.code.org/b77b6fa40fd4696c613b0dc64a52874a-image-1592495994790.2020-06-18 11_59_32.gif\" style=\"width:200px; float:right; margin-left:10px;\">\r\n\r\n# Bubbles\r\n\r\nYou can also use the counter pattern to animate shapes, such as rectangles & ellipses. Since this is an underwater scene, let's try to create a bubble that floats to the top of the screen using an ellipse shape. If we use the counter pattern to update the [`y`(#f78183)](/docs/ide/gamelab/expressions/y) value of the ellipse, we can make it seem like it's floating to the top of the screen!\r\n\r\n# Do this:\r\n1) Create at least one new variable to keep track of the changing *y position* of the bubbles.\r\n2) Set the value to 400, or another number near the bottom of the grid.\r\n3) Use appropriate properties to  to draw at least one bubble.\r\n4) Use the variable you created to specify the *y position* of the ellipse.\r\n5) Use the counter pattern with subtraction and your variable to make the ellipse slowly rise.\r\n\r\n<details><summary>What properties do I use to draw the bubbles?</summary>\r\n\r\nUse the [`noFill()`(#4dd0e1)](/docs/ide/gamelab/expressions/noFill), [`stroke()`(#4dd0e1)](/docs/ide/gamelab/expressions/stroke), [`strokeWeight()`(#4dd0e1)](/docs/ide/gamelab/expressions/strokeWeight), and [`ellipse()`(#4dd0e1)](/docs/ide/gamelab/expressions/ellipse) blocks to draw bubbles.\r\n\r\n</details>\r\n\r\n<details><summary>What code goes outside the draw loop?</summary>\r\n\r\nJust the variable you create. \r\n\r\nFor example: `var bubble = 400;`\r\n</details>\r\n\r\n<details><summary>What code goes inside the draw loop?</summary>\r\n\r\nThe blocks used to draw the bubble and the counter pattern.\r\n\r\nFor example: \r\n```\r\nellipse(200, bubble, 25, 25);\r\nbubble = bubble - 2;\r\n```\r\n\r\n</details>"
      },
      "CSD U3 Movement Fish challenge3_2023": {
        "display_name": "Add A Shark!",
        "bubble_choice_description": "Add a shark to your underwater scene!",
        "long_instructions": "<img src=\"https://images.code.org/4ae41b0957b5c272b4e91d61e030f72a-image-1663973601193.gif\" style=\"float: right; margin-left: 10px; width: 200px; height: 200px;\">\r\n\r\n# Look Out For The Shark!\r\n\r\nAt this point, you should have fish that wiggle as they swim right to left across the screen and bubbles that float up to the top of the screen. Now, let's add a shark lurking at the bottom of the screen!\r\n\r\n# Do this:\r\n1) Find a shark animation you like and add the new sprite to the scene.\r\n2) Resize the shark if needed.\r\n3) **Tip:** Make the shark's location random so that it is in a different location towards the bottom of the screen each time your program is run.\r\n4) Use the counter pattern to make the shark move from the left side of the screen to the right side of the screen.\r\n"
      },
      "CSD U3 Movement Fish challenge4_2023": {
        "display_name": "Add A Falling Starfish",
        "bubble_choice_description": "Add more moving sea creatures to the scene!",
        "long_instructions": "<img src=\"https://images.code.org/ee233890505af89691d4a58ad29e3257-image-1663971786032.gif\" style=\"float: right; margin-left: 10px; width: 200px; height: 200px;\">\r\n\r\n# Even More Sea Creatures\r\n\r\nYou should now have fish that wiggle as they swim right to left across the screen, bubbles that float up to the top of the screen, and a shark swimming left to right. Now let's add a falling starfish!\r\n\r\n# Do this:\r\n\r\n1) Find a starfish animation you like and add the new sprite to the scene.\r\n2) Resize the starfish if needed.\r\n3) Give the starfish a random starting location so that it falls from a different location each time your program is run.\r\n4) Use the counter pattern to make the starfish slowly fall from the top of the screen.\r\n5) Use the counter pattern to make the starfish spin *while* it is falling."
      },
      "CSD U3 Movement Fish challenge5_2023": {
        "display_name": "More Sea Creatures",
        "bubble_choice_description": "Add more moving sea creatures to the scene!",
        "long_instructions": "<img src=\"https://images.code.org/956ef758b683b251de1c0d2539f3356a-image-1663886792692.gif\" style=\"float: right; margin-left: 10px; width: 200px; height: 200px;\">\r\n\r\n# Incoming Fish!\r\n\r\nYou have a pretty great underwater scene so far! Let's add one last fish but this time, we want to make the fish appear as if it is swimming right at you!\r\n\r\n# Do this:\r\n1) Find a fish similar to the purple one in the image to the right that is facing forward and add it to the scene.\r\n2) Set the purple fish's starting size to 0 since it will be growing.\r\n3) Use the counter pattern to make the purple fish appear to be swimming towards you.\r\n4) **Bonus Challenge:** Feel free to get creative and add **more** moving sea creatures to the scene! Perhaps a jellyfish moving diagonally or a fish swimming backwards while doing flips!\r\n\r\n::: details [How do I make the fish look like it is swimming towards me?]\r\n\r\nTo make the fish look like it is swimming at you and getting closer to you, you will need to make the fish get bigger! \r\nUse the counter pattern with the [`scale`(#f78183)](/docs/ide/gamelab/expressions/scale) property.\r\n\r\n:::\r\n\r\n"
      },
      "CSD U3 L9 Freeplay_2023": {
        "display_name": "Dance Scene",
        "bubble_choice_description": "Create an animated scene of your favorite dance moves!",
        "long_instructions": "# Dance Scene\r\n\r\nUse what you've learned so far to create an animated scene of your favorite dance moves!\r\n\r\nFor example, you might create an animated scene of sprites moonwalking across the screen or breakdancing and spinning on their backs!\r\n\r\n# Do This\r\n\r\n1) Add or draw sprites in the Animation Tab.\r\n2) Create your sprites and set their animations.\r\n3) Add a draw loop with the appropriate properties needed to create the animation of your favorite dance moves.\r\n\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L9 Freeplay2_2023": {
        "display_name": "Animated School Activity",
        "bubble_choice_description": "Create an animated scene of your favorite class or school activity!",
        "long_instructions": "# Animate Your Favorite Class or Activity\r\n\r\nUse what you've learned so far to create an animated scene of your favorite class or school activity!\r\n\r\nFor example, you might create an animated scene of sprites moving across the screen on a track during Physical Education or a scene of sprites moving around a busy Art class or looking at animated specimens under microscopes in Science class!\r\n\r\n# Do This\r\n\r\n1) Add or draw your sprites in the Animation Tab\r\n2) Create your sprites and set their animations.\r\n3) Add a draw loop and the appropriate properties needed to animate your scene.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/1": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Animated Scenes\n\nIt's time to try out an animated scene.  Take a look at this example and think about what you'd like to make.\n\n# Animated Example\n\n1.  **What movements do you see in this scene?**\n2.  **Which movements use random numbers?**\n3.  **Which movements use the counter pattern?**"
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/2": {
    "long_instructions": "# Create Your Scene - Background\n\nFirst, make the background of your scene by using the [`background`(#4dd0e1)][0] command to fill the screen with one color, adding shape commands, or creating sprites.\n\n# Do This\n\n1.  Make the background for your scene.\n    -   _Try to use at least 2 shapes in your background._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/3": {
    "long_instructions": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n\n# Do This\n\n1.  Add or draw at least 2 sprite animations in the Animation Tab.\n2.  Create at least 2 sprites and assign each one an animation.\n3.  Set the value for any sprite properties you'd like to use.\n    -   _Try to use at least 1 sprite property (such as rotation, scale, tint or any others in the Toolbox) with each sprite._\n4.  Draw all of your sprites to the screen."
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/4": {
    "long_instructions": "# Create Your Scene - Text\n\nThe next piece of your scene is to add text.\n\n# Do This\n\n1.  Add at least 2 lines of text to your project.\n2.  Use any other commands to change the appearance of your text."
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/5": {
    "long_instructions": "# Create Your Scene - Movement\n\nThe final piece of your scene is to animate your scene by adding movement.\n\n# Do This\n\n1.  Add movement to your sprites, text, or drawn shapes.\n2.  Include one type of **random** movement.\n3.  Include one type of **counter pattern** movement."
  },
  "https://studio.code.org/s/csd3-2023/lessons/14/levels/6": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Review Your Scene\n\nCheck over your animated scene one last time to make sure you have included everything that you want.\n\n# Do this\n\n1.  Compare the animated scene that you drew to your plan.\n2.  Make any last changes.\n3.  What are you most proud of?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/1": {
    "short_instructions": "What do you think this code will do when it is run? Predict what each console.log() command will print, then run the program to check your predictions.",
    "callouts": {
      "": "This program will print out a result here"
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "true  \nfalse  \ntrue",
              "correct": true
            },
            {
              "text": "0  \n200  \n100",
              "correct": false
            },
            {
              "text": "true  \nerror  \ntrue",
              "correct": false
            },
            {
              "text": "false  \ntrue  \nfalse",
              "correct": false
            }
          ],
          "markdown": "# Boolean Expressions\n\n**Boolean expression** - an expression that can only evaluate to `TRUE` or `FALSE`\n\n# Predict\n\nRead the code below. There are some new symbols in it which you haven't been introduced to. Take a guess at what they mean and try to answer the following question\n",
          "questions": [
            {
              "text": "Which result will be printed in the console by this program?"
            }
          ],
          "title": "title"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/2": {
    "dsls": {
      "answers": [
        {
          "text": "dog.rotation &lt; cat.rotation"
        },
        {
          "text": "dog.x &lt; cat.x"
        },
        {
          "text": "dog.scale &gt; cat.scale"
        },
        {
          "text": "dog.x &gt; cat.x"
        },
        {
          "text": "dog.x == cat.x"
        }
      ],
      "content1": "Match the boolean expression to the English description.",
      "questions": [
        {
          "text": "Is the dog sprite's rotation less than the cat sprite's rotation?"
        },
        {
          "text": "Is the dog sprite's x less than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's scale greater than the cat sprite's scale?"
        },
        {
          "text": "Is the dog sprite's x greater than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's x equal to the cat sprite's x?"
        }
      ],
      "title": "Matching: Comparison Operators"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/3": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Booleans\n\nThe program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.\n\n# Do This\n\nWe need to find out if the race car has crossed the finish line!\n\n1.  Add blocks to the text command to print the boolean to the screen.\n    -   Add a [`___ < ___`(#FFB74D)][0] block to the \"text\" parameter of the [`text()`(#4dd0e1)][1] block.\n    -   Add a [`sprite.x`(#f78183)][2] block to both sides of the [`<`(#FFB74D)][3] sign.\n    -   Make sure to update the [`sprite.x`(#f78183)][4] blocks with the names of the two sprites so that the boolean is asking _is the x of the race car less than the x of the finish line?_\n    -   The text block should now look like this: <img src=\"https://images.code.org/865c274aedf6d06fd7d9617a3b68be98-image-1673636109561.png\" style=\"width:300px\">\n2.  Watch the boolean output that is now printed on the screen as the car moves.\n3.  Discuss with your neighbor: when does the output change and most importantly, **why?**",
    "callouts": {
      "CSD_U3_L8_S6_C1": "Put the text block here"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/4": {
    "contained levels": [
      {
        "long_instructions": "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03 PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nBoolean expressions allow us to ask questions, but in order to use those questions to change the program's behavior, we need an [`if ()`(#64B5F6)][0] statement.\n\n# Do This\n\n1.  Read the code for this race car program.\n2.  What will the program do when the car crosses the finish line?\n3.  Why is the [`if ()`(#64B5F6)][1] block inside the draw loop?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/5": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Changing Fruit\n\nNow that we know how to use [`if ()`(#64B5F6)][0] statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional [`if ()`(#64B5F6)][1] statement in the draw loop to check whether [`fruit.scale`(#f78183)][2] is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n1.  Add a conditional to the draw loop.\n    -   Add an [`if ()`(#64B5F6)][3] statement inside the draw loop where indicated by the comments.\n2.  Add code to the conditional statement that asks if the scale of the fruit greater than 2.\n    -   Add a [`___ > ___`(#FFB74D)][4] block to the [`if ()`(#64B5F6)][5] statement.\n    -   Add a [`scale`(#f78183)][6] block to the left side of the [`>`(#FFB74D)][7] operator.\n    -   Type the number `2` into the right side of the [`>`(#FFB74D)][8] operator.\n    -   Make sure you update the name of the sprite in the [`scale`(#f78183)][9] block.\n3.  Add code inside the conditional to change the fruit to a pear.\n    -   Add a [`setAnimation()`(#f78183)][10] block **inside** the [`if ()`(#64B5F6)][11] statement.\n    -   Set the animation to a pear.\n\n::: details [What should my final **if statement** look like?]\n\n[][12]\n\n:::",
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program.",
      "rubric_performance_level_1": "The sprite's image changes from an apple to a pear when the sprite's scale reaches 2.",
      "rubric_performance_level_2": "There is a conditional in the draw loop that checks whether the sprite's scale has reached 2.",
      "rubric_performance_level_3": "There is a conditional in the draw loop that checks the value of a Boolean statement.",
      "rubric_performance_level_4": "There are no conditionals in the draw loop."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/6": {
    "dsls": {
      "description": "Practice using booleans and conditionals with these activities.",
      "display_name": "Conditionals Practice"
    },
    "sublevels": {
      "CSD U3 Boolean Modify_2023": {
        "display_name": "Boolean Expressions",
        "bubble_choice_description": "Change the sprite properties so that all of the boolean expressions evaluate to true.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "# Boolean Expressions\r\n\r\nThe simplest Boolean expressions are questions that the computer can answer with true or false. \r\nAnother way to say this is that Boolean expressions **evaluate** to **true** or **false**.\r\n\r\n# Do This\r\n\r\n1) ::: details [Modify **ONLY** the values of the sprite properties in the **first 11 lines of code** so that each of the Boolean expressions evaluates to **true**.]\r\n\r\n   - Look at the first 11 lines of code to see which properties of [`sprite1`(#f78183)](/docs/ide/gamelab/expressions/createSprite) and [`sprite2`(#f78183)](/docs/ide/gamelab/expressions/createSprite) are being used and their values. \r\n   - For each of the Boolean expressions on lines 16-20 identify the sprite properties being compared.\r\n   - Change the code **in the first _11_ lines only** so that each of the comparison statements will print **true** on the screen.\r\n:::\r\n"
      },
      "CSD games conditionals bowl_2023": {
        "display_name": "Dropped Soup",
        "bubble_choice_description": "Empty the soup bowl when it turns upside down.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "<img src=\"https://images.code.org/6a5d714029e7b5357c6f1b14a153b699-image-1585829442849.gif\" style=\"float: right; margin-left:10px;\">\r\n\r\n# Dropped Soup\r\n\r\nAdd a conditional [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement in the draw loop to make it look like the soup spills out of the bowl when it turns upside down like in the image to the right.\r\n\r\n# Do This\r\n\r\n1) ::: details [Run the program to see how it works.]\r\n   - **Tip:** Add a watcher to see the rotation value of the bowl and note what that value is when the bowl is upside down.\r\n:::\r\n2) ::: details [Add a conditional that detects when the bowl is upside down.]\r\n   - Add an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop where indicated by the comments.\r\n   - Add a boolean expression to the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement that will check if the value of the bowl's [`rotation`(#f78183)](/docs/ide/gamelab/expressions/rotation) property is greater than the value you made note of in step 1.\r\n:::\r\n3) ::: details [Set the sprite's animation to be an empty bowl when the bowl is upside down.]\r\n   - Add a [`setAnimation()`(#f78183)](/docs/ide/gamelab/expressions/setAnimation) block **inside** the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement.\r\n   - Set the animation to an empty bowl.\r\n:::\r\n"
      },
      "CSD games conditionals practice spaceship_2023": {
        "display_name": "Alien Celebration",
        "bubble_choice_description": "Make the alien dance when the spaceship takes off.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "# Alien Celebration\r\n\r\nUse a conditional to make the alien dance when the spaceship reaches the top of the screen.\r\n\r\n# Do This\r\n\r\n1) ::: details [Run the program to see how it works.]\r\n   - **Tip:** Add a watcher to see the [`y`(#f78183)](/docs/ide/gamelab/expressions/y) value of the spaceship and note what that value is when the spaceship is near the top of the screen.\r\n:::\r\n2) ::: details [Add a conditional that detects when the spaceship is in the sky.]\r\n   - Add an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop where indicated by the comments.\r\n   - Add a boolean expression to the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement that will check if the value of the spaceship's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) property is less than the value you made note of in step 1.\r\n:::\r\n3) ::: details [Set the sprite's animation to be a dancing alien.]\r\n   - Add a [`setAnimation()`(#f78183)](/docs/ide/gamelab/expressions/setAnimation) block **inside** the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement.\r\n   - Set the animation of the alien to [`alien_dance`(#f78183)](/docs/ide/gamelab/expressions/setAnimation).\r\n:::\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/7": {
    "long_instructions": "# Magic Dinosaur\n\nUse an [`if ()`(#64B5F6)][0] statement to make the dinosaur turn into a pterodactyl when it reaches the sky.\n\n# Do This\n\n1.  Run the code to see how it works.\n2.  Add a conditional that detects when the dinosaur is in the sky.\n3.  Set the sprite's animation to a pterodactyl when it reaches the sky.",
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program.",
      "rubric_performance_level_1": "The sprite's image changes from an T-rex to a pterodactyl when the sprite reaches the sky.",
      "rubric_performance_level_2": "There is a conditional in the draw loop that checks whether the sprite has reached the sky.",
      "rubric_performance_level_3": "There is a conditional in the draw loop that checks the value of a Boolean expression.",
      "rubric_performance_level_4": "There are no conditionals in the draw loop."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/15/levels/8": {
    "dsls": {
      "description": "Try out these challenges with conditionals.",
      "display_name": "Conditionals Challenges"
    },
    "sublevels": {
      "CSD U3 - conditionals - first conditional 2_2023": {
        "display_name": "New Block: Visible",
        "bubble_choice_description": "Learn how to make a sprite appear and disappear using the visible property",
        "long_instructions": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\r\n\r\n# Visible\r\n\r\nSometimes it's useful to hide the image for a while and then have it appear when you want. You can do this using the [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) property. The [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) property is a little different from other properties you have seen in the past: It is a Boolean value, either **true** (the sprite **is** visible) or **false** (the sprite is **not** visible). By default, [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) is set to **true**.\r\n\r\n# Do This\r\n\r\nUse the [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) property inside an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement to make the balloon pop when it hits the edge of the game area!\r\n\r\n1) Create a pop sprite which uses the \"pop\" visual in the animation tab.\r\n2) Set the pop sprite to be hidden at the beginning.\r\n3) Add a conditional that checks the size of the balloon to see when it touches the edge of the screen.\r\n4) Inside your conditional, set the balloon sprite to be hidden *and* set the pop sprite to appear.\r\n\r\n"
      },
      "CSD U3 - conditionals - challenge 2_2023": {
        "display_name": "Restart Sprites",
        "bubble_choice_description": "Use conditionals to wrap sprites back around to the other side of the screen.",
        "long_instructions": "<img src=\"https://images.code.org/d0acae6b1fcb98d0984f3042490c6d84-image-1663957037737.gif\" style=\"width:200px;float:right; left-margin: 30px\">\r\n\r\n# Restart Sprites\r\n\r\nMany times you will want a sprite to go back to where it started once it reaches the end of the screen. We can accomplish this with our conditionals! \r\n\r\n# Do This\r\nUse [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statements to make the ghost and monster sprites wrap back around to the right side of the screen if they reach the edge of the left side of the screen!\r\n\r\n1) Use the counter pattern to make the ghost and monster sprites both travel from right to left.\r\n2) Add a conditional that checks to see if the ghost sprite has gone off the left side of the screen.\r\n3) Inside the conditional, reset the ghost sprite's location to the right side of the screen\r\n4) Repeat steps 2 & 3 for the monster sprite\r\n"
      },
      "CSD U3 - conditionals - challenge 3_2023": {
        "display_name": "Never-Ending Fish Scene 1",
        "bubble_choice_description": "Use conditionals to create a never-ending fish scene!",
        "long_instructions": "<img src=\"https://images.code.org/1e82776bb9eeecdf763844dc2f6e5c31-image-1663964850495.gif\" style=\"width:200px;float:right; left-margin: 30px\">\r\n\r\n# Never-Ending Fish Scene (Part 1)\r\n\r\nLet's make an underwater scene with fish that never stop swimming! We are revisiting our fish scene with some new fish to make this scene.\r\n\r\n# Do This\r\nUse [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statements to make two of the fish sprites wrap back around once they go off screen!\r\n\r\n1) Pick two of the provided fish animations or add your own sea creatures.\r\n2) Move each sprite in a different direction.([Show Me Where](#triggercallout=start)) You can use the image to the right for inspiration.\r\n3) ::: details [Add a conditional for **each** of the fish sprites you chose that will check if the sprite has gone off the edge of the screen.]\r\n\t- Find the section of the code to add your conditionals [(Show Me Where)](#triggercallout=conditionals)\r\n\t- Hint: You will check either the sprite's x location or y location with your [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statements, depending on the direction the sprite is moving\r\n    :::\r\n4) ::: details [Inside each conditional, reset the sprite's x **and** y location.]\r\n\t- **Tip:** For sprites traveling across the screen, you should give a random y location. For sprites traveling up and down the screen, you should give a random x location.\r\n    :::\r\n\r\nGo forward to the next [Challenge level](./4) to make more sea creatures never stop moving\r\n",
        "callouts": {
          "CSD U3L14.10 - start": "Animate with Counter Pattern Here",
          "CSD U3L14.10 - conditionals": "Add your conditionals here"
        }
      },
      "CSD U3 - conditionals - challenge 4_2023": {
        "display_name": "Never-Ending Fish Scene 2",
        "bubble_choice_description": "Use conditionals to continue creating a never-ending fish scene!",
        "long_instructions": "<img src=\"https://images.code.org/1e82776bb9eeecdf763844dc2f6e5c31-image-1663964850495.gif\" style=\"width:200px;float:right; left-margin: 30px\">\r\n\r\n# Never-Ending Fish Scene (Part 2)\r\n\r\nLet's continue making an underwater scene with fish that never stop swimming!\r\n\r\n# Do This\r\nMake two more of the fish sprites wrap back around once they go off screen!\r\n\r\n1) Pick two more of the provided fish animations or add your own sea creatures\r\n2) Move each sprite in a different direction.([Show Me Where](#triggercallout=start)). You can use the image to the right for inspiration.\r\n3) ::: details [Add a conditional for **each** of the fish sprites you chose that will check if the sprite has gone off the edge of the screen.]\r\n\t- Find the section of the code to add your conditionals [(Show Me Where)](#triggercallout=conditionals)\r\n\t- Hint: You will check either the sprite's x location or y location, depending on the direction the sprite is moving.\r\n    :::\r\n4) ::: details [Inside the conditional, reset the sprite's x **and** y location]\r\n\t- **Tip:** For sprites traveling across the screen, you should give a random y location. For sprites traveling up and down the screen, you should give a random x location.\r\n    :::\r\n\r\nGo forward to the [next Challenge level](./5) to make the starfish and bubbles restart!\r\n",
        "callouts": {
          "CSD U3L14.10 - start": "Animate with Counter Pattern Here",
          "CSD U3L14.10 - conditionals": "Add your conditionals here"
        }
      },
      "CSD U3 - conditionals - challenge 5_2023": {
        "display_name": "Never-Ending Fish Scene 3",
        "bubble_choice_description": "Use conditionals to finish creating a never-ending fish scene!",
        "long_instructions": "<img src=\"https://images.code.org/1e82776bb9eeecdf763844dc2f6e5c31-image-1663964850495.gif\" style=\"width:200px;float:right; left-margin: 30px\">\r\n\r\n# Finished Never-Ending Fish Scene\r\n\r\nLet's finish making our never-ending underwater scene!\r\n\r\n# Do This\r\nMake the starfish sprite and bubbles wrap back around once they go off screen!\r\n\r\n1) ::: details [Write code to make the starfish fall from the top of the screen to the bottom of the screen]\r\n\t- Find the section of the code to animate your starfish [(Show Me Where)](#triggercallout=animate)\r\n\t- For added complexity, you can make the starfish spin while it is falling!\r\n    :::\r\n2) ::: details [Add a conditional for the starfish that will check if the sprite has gone off the edge of the screen.]\r\n\t- Find the section of the code to add your conditional [(Show Me Where)](#triggercallout=starFishconditional)\r\n\t- Inside the conditional, reset the sprite's x **and** y location\r\n    - **Tip:** Don't forget to give the starfish a random x location so that it restarts in a different spot at the top of the screen each time.\r\n    :::\r\n3) ::: details [Add a conditional that checks the value of the bubble variable.]\r\n\t- Find the section of the code to add your conditional [(Show Me Where)](#triggercallout=bubbleConditionals)\r\n\t- **Tip:** Use the watcher to see what the value of the bubble variable is when the last bubble reaches the top of the screen. Use this value for your conditional.\r\n    :::\r\n4) Inside the conditional, reset the bubble variable to it's original value.\r\n\r\nCongratulate yourself on making this never-ending underwater scene!\r\n\r\n\r\n\r\n",
        "callouts": {
          "CSD U3L14.10 - animate": "Animate with Counter Pattern Here",
          "CSD U3L14.10 - starFishconditional": "Add your conditionals here",
          "CSD U3L14.10 - bubbleConditionals": "Add your conditionals here"
        }
      },
      "CSD U3 L11 Freeplay_2023": {
        "display_name": "Sci-Fi Scene",
        "bubble_choice_description": "Use what you've learned so far to create a moving science fiction scene that changes when sprites are at certain locations on the screen.",
        "long_instructions": "# Sci-Fi Scene\r\n\r\nMonsters and aliens and ghosts! Oh my! \r\n\r\nUse what you've learned so far to create a moving science fiction scene that changes when sprites are at certain locations on the screen. \r\n\r\nFor example, you could create a scene with a ghost that disappears when it floats up to the sky or a person that turns into a robot when it reaches the halfway point as it is moving across the screen. \r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L14 Freeplay2_2023": {
        "display_name": "Animated Quote or Saying",
        "bubble_choice_description": "Use what you've learned so far to create an animated scene of a quote or a saying with moving sprites",
        "long_instructions": "# Animated Quote or Saying\r\n\r\nIn an earlier challenge you may have created a scene that represented your favorite quote or saying. This time, your challenge is to make a scene of a quote or saying animated with moving sprites! Don't forget to add text to your scene with your quote or saying!\r\n\r\nFor example, if your favorite quote is \"When life gives you lemons, make lemonade\" by Elbert Hubbard, you might create a scene with lemons that are moving across the screen and turn into a glass of lemonade when they reach the location of a person.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/1": {
    "short_instructions": "Modify the code so that all of the console.log commands print true",
    "contained levels": [
      {
        "long_instructions": "# Prediction - keyDown()\n\nSee if you can predict how the [`keyDown()`(#fff176)][0] block works. You will **not write any code**.\n\n# Do This\n\n1.  Read the program carefully.\n2.  **Make a prediction about what will happen when you press the space bar** and write it in the box below. Be specific!\n3.  Run the program.\n4.  While the program is running, press the space bar on your keyboard.\n5.  Were you correct? Were you surprised? Discuss with a classmate."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/2": {
    "long_instructions": "# Changing Sprites\n\nThis program uses the [`keyDown()`(#fff176)][0] block to detect whether a specific keys are being pressed down.\n\n# Do This\n\n1.  Run the code and try pressing the \"p\" and \"h\" keys.\n2.  Look inside the first two conditional statements to see how the code works.\n3.  Add code to change the sprite to a different animal when the \"r\" key is pressed.\n    -   Add a [`setAnimation()`(#f78183)][1] block inside the 3rd [`if ()`(#64B5F6)][2] statement.\n    -   Set the animation to the rabbit.",
    "callouts": {
      "": "Add your block inside this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/3": {
    "long_instructions": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\n1.  Add a conditional statement to check if the right arrow key has been pressed down.\n    -   Add an [`if ()`(#64B5F6)][0] statement inside your draw loop.\n    -   Use the [`keyDown()`(#fff176)][1] to detect if the **right** arrow key has been pressed.\n2.  Add code to move the sprite right if the right arrow is down.\n    -   Add the counter pattern **inside** the [`if ()`(#64B5F6)][2] statement to make the sprite move to the right.\n\n_Do you need to change sprite's [`x`(#f78183)][3] or [`y`(#f78183)][4] property to move it right?_",
    "callouts": {
      "": "Add an if statement and place your movement code inside it"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/4": {
    "long_instructions": "# Gears with Conditionals\n\nLet's make the gears spin only if the space key is being held down.\n\n# Do This\n\n1.  Add code that will check if the space key is being pressed down.\n    -   Add an [`if ()`(#64B5F6)][0] statement in the draw loop.\n    -   Use the [`keyDown()`(#fff176)][1] to detect if the space key is being pressed.\n2.  Adjust the program so that the gears only rotate when the space key is pressed down.\n    -   Move the three lines of code that makes the gears rotate with the counter pattern **inside** the [`if ()`(#64B5F6)][2] statement."
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/5": {
    "dsls": {
      "description": "Practice keyboard input with these activities.",
      "display_name": "Keyboard Input Practice"
    },
    "sublevels": {
      "CSD U3 Input Fish_2023": {
        "display_name": "Fish With Arrows",
        "bubble_choice_description": "Make the fish move left only when the left arrow key is pressed.",
        "long_instructions": "# Fish With Arrows\r\n\r\nThe fish are back. Can you make the fish move left **only** if the left arrow key is pressed down?\r\n\r\n# Do This\r\n\r\n1) ::: details [Check if the left arrow key is pressed down.]\r\n   - Add an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Use the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) to detect if the **left** arrow is pressed down.\r\n   :::\r\n2) ::: details [Adjust the program code to make the fish move only if the left arrow is pressed down.]\r\n   - Move the lines of code that use the counter pattern to move the fish across the screen to the **inside** of the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement.\r\n   :::\r\n"
      },
      "CSD games input debug1_2023": {
        "display_name": "Debug Turtle Movement",
        "bubble_choice_description": "Find the bug that breaks the program when the turtle tries to move left.",
        "long_instructions": "# Debug Turtle Movement\r\n\r\nThis turtle program breaks every time it tries to move to the left.\r\n\r\nWhat I expected to happen | What actually happened | How to reproduce the error\r\n------- | ------- | -----\r\nThe turtle moves to the left | everything stops working  | press the left arrow key\r\n\r\n\r\n# Do This\r\n\r\n1) Run the program and play with it until you see the bug.\r\n2) Use the clues to find the bug and fix it.\r\n"
      },
      "CSD games input debug2_2023": {
        "display_name": "Debug Turtle Movement 2",
        "bubble_choice_description": "Debug why the turtle does not move at all and leaves after images.",
        "long_instructions": "# Debug Turtle Movement 2\r\n\r\nDebug why the turtle does not move at all.\r\n\r\nWhat I expected to happen | What actually happened | How to reproduce the error\r\n------- | ------- | -----\r\n|The turtle moves with the arrow keys | The turtle almost stays in  | Press the arrow keys|\r\n| |the same place and leaves after images | |\r\n\r\n\r\n# Do This\r\n\r\n1) Run the program and play with it until you see the bug.\r\n2) Use the clues to find the bug and fix it."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/6": {
    "long_instructions": "# Move in All Directions\n\nYou can use [`if ()`(#64B5F6)][0] statements with the [`keyDown()`(#fff176)][1] to make a simple game that moves a sprite around the screen.\n\n# Do This\n\nAdd four separate [`if ()`(#64B5F6)][2] statements that will allow you to move the wing bot move in each direction.\n\n1.  Add code to move the sprite left when the left arrow is pressed\n2.  Add code to move the sprite right when the right arrow is pressed\n3.  Add code to move the sprite up when the up arrow is pressed\n4.  Add code to move the sprite down when the down arrow is pressed",
    "mini_rubric": {
      "rubric_key_concept": "Detect and respond to user input from the keyboard.",
      "rubric_performance_level_1": "The sprite moves correctly in response to all four arrow keys.  There are no extra `if` statements.",
      "rubric_performance_level_2": "The sprite moves in response to multiple arrow keys, but may have some errors.",
      "rubric_performance_level_3": "The program uses an `if` statement to detect user input.",
      "rubric_performance_level_4": "The program does not detect user input."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/16/levels/7": {
    "dsls": {
      "description": "Try out these new blocks and challenges with keyboard input.",
      "display_name": "Keyboard Input Challenges"
    },
    "sublevels": {
      "CSD U3 - complex - key up and down_2023": {
        "display_name": "keyWentDown: Click Counter",
        "bubble_choice_description": "Count how many times someone has clicked the space bar, and learn a new block.",
        "long_instructions": "# Responding to a Single Click\r\n\r\nThis game counts how many times someone pressed the space bar, but it keeps giving points when the space bar is still pressed, even if it's not a new press.\r\n\r\nThe block [`keyWentDown()`(#fff176)](/docs/ide/gamelab/expressions/keyWentDown) will only give a point for new presses, so it's a better choice for this program.\r\n\r\n# Do This\r\n\r\n1) Run the program to see how it works.\r\n2) Change the code to use the new block, so the program only gives you a point for new clicks."
      },
      "CSD U3 Direction Animations_2023": {
        "display_name": "Changing Animation",
        "bubble_choice_description": "Use a separate image for each direction of movement.",
        "long_instructions": "<img src=\"https://images.code.org/0e99dbaf3d16b944fd3352fcb8ccda16-image-1585766511652.gif\" style=\"float: right\">\r\n\r\n# Changing Images as you Move\r\nRight now these conditionals only do one thing (change the sprite's x or y position), but you can actually put as much code as you want **inside** a conditional. A common thing to do in games is to change your character's image depending on which direction they're traveling. You're going make a bug that always faces the direction it is moving.\r\n\r\n# Do This\r\nMake a bug that always faces the direction it is moving using the provided program and images.\r\n\r\n1) Duplicate your chosen bug image four times in the animation tab.\r\n2) Edit each of your images to point in one of the four directions.\r\n3) Add code to each of your conditionals to change the animation of the sprite if different arrow keys are pressed.\r\n"
      },
      "CSD U3 Keyboard Input Challenge 3_2023": {
        "display_name": "Speed Boost!",
        "bubble_choice_description": "Learn how to use nested if statements and key presses to give your sprites a boost in speed!",
        "long_instructions": "<img src=\"https://images.code.org/dc55d40a77eb363b9ef4cf9f7b85d623-image-1664070762338.gif\" style=\"float: right; width: 200px;\">\r\n\r\n# Nested Key Presses To Boost Speed\r\nSince we can put more than just one thing inside an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement, that means we can also put another [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement! \r\n\r\nWhat if we put an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement\r\n with a [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) condition **inside** an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement with a [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) condition? This would cause our program to do something if **both** keys are being pressed! This is called a \"nested conditional\" and it is exactly how we are going to complete this challenge level!\r\n\r\n# Do This\r\n\r\n1) ::: details [Make the sprite get a \"boost\" in speed whenever the space bar is also pressed while moving right]\r\n\t- **Inside** the right arrow conditional and **after** the counter pattern, write an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement that uses the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) with the **space bar** as it's conditional.\r\n    - Use the counter pattern inside this \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to make the sprite move *even more* to the right.\r\n    - See the \"**Show Me How**\" information below for more help on how to program a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n    :::\r\n2) ::: details [Make the sprite get a \"boost\" in speed whenever the space bar is also pressed while moving left]\r\n\t- **Inside** the left arrow conditional and **after** the counter pattern, write an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement that uses the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) with the **space var** as it's conditional.\r\n    - Use the counter pattern inside this \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to make the sprite move *even more* to the left.\r\n    - See the \"**Show Me How**\" information below for more help on how to program a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n    :::\r\n    \r\n**Now it's your turn!**\r\n\r\n3) ::: details [Make the sprite get a \"boost\" in speed whenever the space bar is also pressed while moving up]\r\n\t- Program the sprite to move up using an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement, the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown), and counter pattern.\r\n    - Inside your [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement and **after** the counter pattern, write add a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement that uses the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) with the **space bar** as it's conditional.\r\n    - Use the counter pattern inside this \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to make the sprite move *even more* towards the top of the screen.\r\n    - See the **Show Me How** information below for more help on how to program a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n    :::\r\n    \r\n4) ::: details [Make the sprite get a \"boost\" in speed whenever the space bar is also pressed while moving down]\r\n\t- Program the sprite to move down using an [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement, the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown), and counter pattern.\r\n    - Inside your [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement and **after** the counter pattern, write add a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement that uses the [`keyDown()`(#fff176)](/docs/ide/gamelab/expressions/keyDown) with the **space bar** as it's conditional.\r\n    - Use the counter pattern inside this \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to make the sprite move *even more* towards the bottom of the screen.\r\n    - See the **Show Me How** information below for more help on how to program a \"nested\" [`if()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n    :::\r\n\r\nCongratulate yourself on programming your sprite get a boost in speed whenever the space bar is pressed!!\r\n\r\n::: details [**Show Me How To Program a Nested Conditional**]\r\n\r\nNested conditionals can be tricky but they unlock the ability to do so many cool things with your programs!\r\n\r\nThe following will program your sprite to move an *additional* +10 whenever the space key is being pressed *and* the right key is also being pressed.\r\n\r\n<img src=\"https://images.code.org/32c733140f1ab74f8f45f0c9d38bc144-image-1664323037663.gif\" style=\"float: left; width: 200px;\">\r\n:::\r\n\r\n"
      },
      "CSD U3 L12 Freeplay_2023": {
        "display_name": "Play Music",
        "bubble_choice_description": "Use what you've learned so far to make your favorite instruments make music when keys are pressed!",
        "long_instructions": "# Play Some Music\r\n\r\nUse what you've learned so far to make your favorite instruments make music when keys are pressed!\r\n\r\nYou can use instrument animations in our library or draw your own. Use the [`playSound()`(#fff176)](/docs/ide/applab/expressions/playSound) command to make your favorite instruments play sounds when keys are pressed!\r\n\r\nFor example, if you like to play the piano and the drums you can turn the sprite into a piano sprite and play a piano sound when the letter \"p\" is pressed and when you press the letter \"d\", then sprite turns into the drums and a drumming sound plays. \r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L15 Freeplay2_2023": {
        "display_name": "Simple Game",
        "bubble_choice_description": "Use what you've learned so far to make a simple version of your favorite game when keys are pressed!",
        "long_instructions": "# Simple Game\r\n\r\nUse what you've learned so far to make a simple version of your favorite game when keys are pressed!\r\n\r\nFor example, you could make a rock-paper-scissors \"game\" by changing a sprite to a rock, piece of paper, or scissors based on keys pressed. Make it a two-player version by having two sprites and two different sets of keys that are pressed to change the sprites' animations!\r\n\r\nYou may not be able to create a fully-functioning game yet, but you still might be able to recreate part of your favorite game or a simple version of your favorite game. \r\n\r\nFor example, if your favorite game involves characters moving around a scene, perhaps you create **that** part of the game and make your characters move and change animations when keys are pressed!\r\n\r\n*You may not be able to create the \"perfect\" and complete game yet, but you can develop a prototype which shows the general idea of the game play and some of the basic features behind how it could look.*\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a program based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their program, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/1": {
    "display_name": "Predict",
    "long_instructions": "Predict Level, see contained level for instructions.",
    "contained levels": [
      {
        "long_instructions": "# If/Else Predict\n\nRead through the following program, paying special attention to the `if/else` block on Line 10.  After discussing the following questions with your partner, write down your predictions and run the code to see what the program does.\n\n1.  What happens when you press the space bar?\n2.  What happens when you **don't** press the space bar?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/2": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Reverse the Gears\n\nThese gears already spin one direction when you press the space bar, but you can change the [`if ()`(#64B5F6)][0] statement into an [`if / else`(#64B5F6)][1] to make them spin the other direction when the space bar **isn't** pressed.\n\n# Do This\n\n1.  Make the gears spin the opposite way when the space bar is **not** being pressed.\n    -   Click the arrow on the [`if ()`(#64B5F6)][2] statement to expand it into an [`if / else`(#64B5F6)][3] block.\n    -   Add code to the [`else`(#64B5F6)][4] section of the [`if / else`(#64B5F6)][5] block that uses the counter pattern to make each of the gears rotate the opposite direction.\n\n::: details [Where do I click on the if statement to expand it into an if/else statement?]\n\n   <img src=\"https://images.code.org/f81499e78b4db8aeb760137a5e74682d-image-1673996567826.png\" style=\"width:350px\">\n   \n:::",
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program; detect and respond to user input.",
      "rubric_performance_level_1": "The gears spin in the opposite direction when the space bar is not being pressed, and the teeth of the gears line up properly.",
      "rubric_performance_level_2": "At least one gear spins in the opposite direction when the space bar is not being pressed, but there may be minor errors in the program that keep all the gears from spinning.",
      "rubric_performance_level_3": "There is an else clause used, but there are major errors in the program that keep the gears from spinning.",
      "rubric_performance_level_4": "There is no else clause."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/3": {
    "long_instructions": "# Control the Gears\n\nHere is the same program, but with one small difference.\n\n# Do This\n\n1.  Read the program carefully, especially Line 13, to figure out how to control the gears.\n2.  Run the program and test whether you were correct.\n3.  Make the gears spin the opposite way when there is no user input.\n    -   Expand the [`if ()`(#64B5F6)][0] statement into an [`if / else`(#64B5F6)][1].\n    -   Add code to the [`else`(#64B5F6)][2] section of the conditional that uses the counter pattern to rotate the gears the opposite direction.",
    "teacher_markdown": "This is the first time that students have seen mouse input.  Athough they have not seen the block before, they may be able to predict from Line 13 that the gears will spin when the mouse is pressed.  This level is almost exactly the same as the previous level, so you may also use it as a review of the if/else construct.",
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program; detect and respond to user input.",
      "rubric_performance_level_1": "The gears spin in the opposite direction when the space bar is not being pressed, and the teeth of the gears line up properly.",
      "rubric_performance_level_2": "At least one gear spins in the opposite direction when the space bar is not being pressed, but there may be minor errors in the program that keep all the gears from spinning.",
      "rubric_performance_level_3": "There is an else clause used, but there are major errors in the program that keep the gears from spinning.",
      "rubric_performance_level_4": "There is no else clause."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/4": {
    "long_instructions": "# Mouse Clicks\n\nHere's a program that drops a balloon down the screen.  Use an [`if / else`(#64B5F6)][0] statement to make the balloon go up and down according to whether or not the user is pressing the mouse.\n\n# Do This\n\n1.  Add code that checks whether the mouse is being pressed.\n    -   Drag out an [`if / else`(#64B5F6)][1] statement inside the draw loop.\n    -   Add a [`mouseDown()`(#fff176)][2] to the [`if ()`(#64B5F6)][3] statement to detect if the left mouse button is being pressed.\n2.  Move the balloon up the screen if the mouse is being pressed.\n    -   Use the counter pattern inside the  [`if ()`(#64B5F6)][4] statement to make the balloon move up the screen.\n3.  Otherwise, move the balloon down the screen.\n    -   Move the existing counter pattern that moves the ballon down the screen into the  [`else`(#64B5F6)][5] part of the conditional statement."
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/5": {
    "display_name": "Mix it up with if/else",
    "long_instructions": "<img src=\"https://images.code.org/6b0df2eb4a2b61ae12ded3249a4ed1ab-image-1585766972590.gif\" style=\"float:right\">\n\n# World.mouseX\n\nThis program uses an [`if ()`(#64B5F6)][0] block to shake the blender when the mouse is on left side of the screen.\n\n# Do This\n\n1.  Run the program to see how it works.\n2.  Add to the conditional so that when the mouse is on the other side of the screen, the mixer shakes instead.\n    -   Expand the [`if ()`(#64B5F6)][1] statement to be an [`if / else`(#64B5F6)][2] statement.\n    -   Add code to the [`else`(#64B5F6)][3] section to make the mixer shake."
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/6": {
    "dsls": {
      "description": "Practice keyboard input and using conditional statements with these activities.",
      "display_name": "Mouse Input and If/else Practice"
    },
    "sublevels": {
      "CSD games mouse mousey_2023": {
        "display_name": "Lady Bug Walk",
        "bubble_choice_description": "Move the ladybug only when the mouse is near the bottom of the screen.",
        "long_instructions": "<img src=\"https://images.code.org/f3af303ba5de68ccdf184ee17b7e1ed0-image-1585832244629.gif\" style=\"float:right\">\r\n\r\n# Ladybug Walk\r\n\r\nThis ladybug should only move when the mouse is near the bottom of the screen. You're going to use a conditional to make sure the ladybug only moves when the mouse is near the bottom of the screen.\r\n\r\n# Do This\r\n1) ::: details [Use an conditional to check the position of the mouse.]\r\n   - Drag out an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Use a [`World.mouseY`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY) block with the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to detect if the mouse is below a certain point.\r\n:::\r\n2) ::: details [Add code to make the bug move *if the mouse pointer is near the bottom of the screen*.]\r\n   - Add the counter pattern inside the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to decrease the sprite's [`x`(#f78183)](/docs/ide/gamelab/expressions/x) value and make the bug move across the screen.\r\n:::"
      },
      "CSD games practice move with mouse_2023": {
        "display_name": "Ghost Moving with the Mouse",
        "bubble_choice_description": "Make this ghost move in different directions depending on where the mouse pointer is.",
        "long_instructions": "<img src=\"https://images.code.org/25ca3c6b3c97eecaad3da2f34ee8baa4-image-1604786816070.gif\" style=\"float:right\" width=\"200px; margin:20px;\">\r\n\r\n# Ghost Moving with the Mouse\r\n\r\nIn this level, you'll make the ghost move either left or right depending on the position of the mouse pointer. In the example shown, if the mouse pointer is on the left, the ghost moves left. The opposite is also true.\r\n\r\n# Do This\r\n\r\n1) ::: details [Write two conditional statements to check for the location of the mouse.]\r\n   - Drag out an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Use the [`World.mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseX) block with the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement to detect if the mouse is on the left side of the screen.\r\n   - Drag out a second [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement that will also use the [`World.mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseX) block, this time to detect if the mouse is on the right side of the screen.\r\n:::\r\n2) ::: details [Make the ghost move in a different direction for each mouse location.]\r\n   - Move the lines of code with the counter patterns inside each of the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statements to make the ghost move in the direction of the mouse.\r\n:::\r\n\r\n**Challenge:** Instead of two separate conditional statements, write this program using an [`if/else`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement!"
      },
      "CSD U3L16 Prac C_2023": {
        "display_name": "Emoji Swap",
        "bubble_choice_description": "Change the emoji when a mouse button is clicked!",
        "long_instructions": "<img src=\"https://images.code.org/90e16e505f4cb51856789dc6359127fb-emoji-gif.gif\" style=\"float:right\" width=\"25%\">\r\n\r\n# Emoji Reactions\r\n\r\nAdd code so that when the user presses down the mouse, the emoji changes to a new face. Otherwise, the emoji returns to a smiling emoji.\r\n\r\n# Do This\r\n1) ::: details [If the mouse is pressed down, change the emoji to a different emoji]\r\n\t- Drag out an an [`if / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) block\r\n    - Inside the if statement, check if [`mouseDown()`(#fff176)](/docs/ide/gamelab/expressions/mouseDown)\r\n    - Use [`setAnimation()`(#f78183)](/docs/ide/gamelab/expressions/setAnimation) to update the animation of the sprite\r\n  :::\r\n2) ::: details [Otherwise, keep the emoji as a smile emoji]\r\n\t- Use [`setAnimation()`(#f78183)](/docs/ide/gamelab/expressions/setAnimation) to return the sprite to the original emoji\r\n  :::\r\n  "
      },
      "CSD U3L16 Prac D_2023": {
        "display_name": "Musical Notes",
        "bubble_choice_description": "Help create an animation that only shows musical notes when the mouse is pressed",
        "long_instructions": "<img src=\"https://images.code.org/9f2399dd06206a0e7adba106c476d0f5-music-gif.gif\" style=\"float:right\" width=\"25%\">\r\n\r\n# Musical Notes\r\n\r\nThis animation simulates music playing from an instrument - but, the music is always playing and never stops!!\r\n\r\nAdd code so that the notes only appear when the mouse button is pressed. When the mouse button is not pressed, the notes should be hidden. Hint: you'll need to use the [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) block for this\r\n\r\n# Do This\r\n1) ::: details [If the mouse is pressed, show the notes in the animation]\r\n\t- Find the section of the program for you to add your code ([Show Me Where](#triggercallout=start))\r\n    - Drag out an an [`if / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) block\r\n    - Inside the if statement, check if [`mouseDown()`(#fff176)](/docs/ide/gamelab/expressions/mouseDown)\r\n    - Use [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) blocks to show all of the notes\r\n  :::\r\n2) ::: details [Otherwise, hide all of the notes]\r\n\t- Inside the [`else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) section, use the [`visible`(#f78183)](/docs/ide/gamelab/expressions/visible) blocks to hide all of the notes\r\n  :::\r\n  ",
        "callouts": {
          "CSD U3L16.7 - start": "Add your code here"
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/7": {
    "long_instructions": "# Fix the Program\n\nThis program should only shake the creature when the mouse is pressed, and only show directions when the mouse is **not** pressed.\n\n# Do This\n\n1.  Change the code so that the creature only shakes when the mouse is pressed.\n2.  Change the code so the directions (\"Press the mouse to shake the creature.\") **only show** when the user is **not** pressing the mouse.",
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program; detect and respond to user input.",
      "rubric_performance_level_1": "The creature only shakes when the user presses the mouse, and the text only appears when the user is not pressing the mouse.  Only one conditional block is used, and the program is error-free.",
      "rubric_performance_level_2": "The creature only shakes when the user presses the mouse, and the text only appears when the user is not pressing the mouse, but there may be small errors, such as problems with the size of the text or positioning of the creature.",
      "rubric_performance_level_3": "There is an else clause used, but there are major errors in the program that keep the program from running properly.",
      "rubric_performance_level_4": "There is no else clause."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/17/levels/8": {
    "dsls": {
      "description": "Try out these new blocks and challenges with mouse input.",
      "display_name": "Mouse Challenges"
    },
    "sublevels": {
      "CSD games mouse scale_2023": {
        "display_name": "Twin Spirals",
        "bubble_choice_description": "Make the spirals move in the opposite way when the mouse is pressed down.",
        "long_instructions": "<img src=\"https://images.code.org/36b8c4f797b3aa62f74948caf0457086-image-1585833223868.gif\" style=\"float:right\">\r\n\r\n# Twin Spirals\r\n\r\nThese spirals turn and change size in opposite ways.\r\n\r\n# Do This\r\n\r\n1) Run the code to see what is making the spirals shrink, grow, and turn.\r\n2) Add code so that the spirals switch what they are doing when the mouse is pressed down.\r\n"
      },
      "CSD U3 Mouse Input Bee 1_2023": {
        "display_name": "Follow the Mouse - Beginner",
        "bubble_choice_description": "Make the bee follow the mouse as it moves.",
        "long_instructions": "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\" style=\"float:right\">\r\n\r\n# Mouse X and Y\r\n\r\nOne of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using [`World.mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseX) and [`World.mouseY`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY).**  This follows the pattern you learned with sprite properties. [`World`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY) is the name of the object. [`mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseX) and [`mouseY`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY) are the names of the properties.\r\n\r\n# Do This\r\n\r\nYou are going to make a bee sprite follow the mouse around the game area. The bee image is already loaded in the animation tab for you.\r\n\r\n1) Create a bee sprite that draws in the center of the window.\r\n2) ::: details [Update the position of the sprite to the position of the mouse inside the draw loop.]\r\n\t* Set the x position of the sprite to the value of [`World.mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseX).\r\n    * Set the y position of the sprite to the value of [`World.mouseY`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY).\r\n:::\r\n3) Run the program to test that it works.\r\n"
      },
      "CSD U3 Mouse Input Bee 2_2023": {
        "display_name": "Follow the Mouse - Advanced",
        "bubble_choice_description": "Make the bee buzz randomly around the mouse.",
        "short_instructions": "Do this",
        "long_instructions": "# Random Around Point\r\n\r\n<img src=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\" style=\"float:right\">\r\n\r\nNow that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the [`mouseX`(#fff176)](/docs/ide/gamelab/expressions/World.mouseS) and [`mouseY`(#fff176)](/docs/ide/gamelab/expressions/World.mouseY).**\r\n\r\n# Do This\r\nYou already have a bee sprite that follows the mouse.\r\n\r\n1) Update the x and y location to be randomly close to the mouse as described above.\r\n\r\n*Tip: If necessary, use the [`World.frameRate`(#fff176)](/docs/ide/gamelab/expressions/World.frameRate) block to slow down the animation and find the best frame rate.*\r\n\r\n_**Extra Challenge:** **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._"
      },
      "CSD U3 - complex - mouse move_2023": {
        "display_name": "Shake the Salt - Detect Mouse Movement",
        "bubble_choice_description": "Make the salt shaker shake as you move the mouse.",
        "long_instructions": "<img src=\"https://images.code.org/2dc7f2b3aaf8020d94985a62ba81817c-image-1585767324011.gif\" style=\"float:right\">\r\n\r\n# mouseDidMove\r\n\r\nWe can also use Boolean expressions to check whether or not the mouse has moved. The [`mouseDidMove()`(#fff176)](/docs/ide/gamelab/expressions/mouseDidMove) block will return **false** if the mouse is still, but **true** if the mouse has been moving.\r\n\r\n# Do This\r\nRight now, this program just displays a salt shaker sprite. You'll need to use [`mouseDidMove()`(#fff176)](/docs/ide/gamelab/expressions/mouseDidMove) block so that you can \"shake\" the salt by moving the mouse back and forth.\r\n\r\n1) Add a conditional that checks if the mouse moved.\r\n2) If the conditional is true, rotate the salt sprite randomly to the left or right.\r\n\r\n_**Extra Challenge:** Can you keep track of how many times the mouse shakes the salt, and then rotate it right side up after 100 shakes?_\r\n\r\n"
      },
      "CSD U3 L13 Freeplay_2023": {
        "display_name": "Changing Emoji",
        "bubble_choice_description": "Use what you've learned to create an emoji work of art that changes whenever the mouse is pressed.",
        "long_instructions": "<img src=\"https://images.code.org/59fc81f40832a8beb9854b561e755b57-image-1665268766607.gif\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Changing Emoji\r\n\r\nUse what you've learned to create a an emoji work of art changes whenever the mouse is pressed.\r\n\r\nFor example, you could pick an emoji animation, duplicate it, and edit the duplicated animation using the drawing tools. Once you have two animiations that are slightly different, you can program your sprite to change whenever the mouse is pressed or even when the mouse moves!\r\n\r\nIf you do not want to use an emoji, feel free to be creative and use whatever animation you want!\r\n\r\n::: details [**Show Me How To Duplicate An Animation**]\r\n\r\n<img src=\"https://images.code.org/db3f4ab7be10f93b7ef3dd9f4f3691c2-image-1665267508343.gif\" style=\"width:100px\">\r\n:::\r\n\r\n::: details [**Show Me How To Edit An Animation Using The Drawing Tools**]\r\n<img src=\"https://images.code.org/a3d7c0c70304e86e168a888c5373609e-emoji.gif\" style=\"width:300px\">\"\r\n:::\r\n\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L16 Freeplay2_2023": {
        "display_name": "Changing Food",
        "bubble_choice_description": "Use what you've learned so far to create a scene with your favorite food that changes whenever the mouse is moved a certain number of times.",
        "long_instructions": "<img src=\"https://images.code.org/3e4d31fbb3abab5340531ba9fbbd21f8-image-1665270085730.gif\" style=\"float:right; width:200px; margin-left:20px\">\r\n\r\n# Changing Food\r\n\r\nUse what you've learned so far to create a scene with your favorite food that changes whenever the mouse is moved a certain number of times.\r\n\r\nTo accomplish this challenge, duplicate the food animation and then use the editing tools to alter the image.\r\n\r\nFor example, you could have an empty container that fills up with popcorn when the mouse moves a certain number of times or a donut that disappears a little at a time based on the number of mouse clicks!\r\n\r\n::: details [**Show Me How To Duplicate An Animation**]\r\n\r\n<img src=\"https://images.code.org/b1ccc2f89ff3546235d774159fc79462-image-1665270312990.gif\" style=\"width:100px\">\r\n:::\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/1": {
    "display_name": "Interactive Card",
    "long_instructions": "# Example Project\n\nRun the program a few times and answer the following questions:\n\n1.  Which elements appear to use drawing commands?\n\n2.  Which elements appear to be sprites?\n\n3.  For each sprite, which properties are being updated?\n\n4.  Where do you see conditionals being used?\n\n5.  Are there elements that you don’t understand?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/2": {
    "dsls": {
      "description": "In the next few levels, you'll be completing your own interactive card. Here are some examples to give you some ideas.",
      "display_name": "Your Interactive Card"
    },
    "sublevels": {
      "CSD U3 - Interactive Card - Example1_2023": {
        "display_name": "Example",
        "long_instructions": "# Interactive Card Example\r\n\r\nIn the next few levels, you'll be completing your own interactive card. Here are some examples to give you some ideas."
      },
      "CSD U3 - Interactive Card - Example2_2023": {
        "display_name": "Example",
        "long_instructions": "# Interactive Card Example\r\n\r\nIn the next few levels, you'll be completing your own interactive card. Here are some examples to give you some ideas."
      },
      "CSD U3 - Interactive Card - Example3_2023": {
        "display_name": "Example",
        "long_instructions": "# Interactive Card Example\r\n\r\nIn the next few levels, you'll be completing your own interactive card. Here are some examples to give you some ideas."
      },
      "CSD U3 - Interactive Card - Example4_2023": {
        "display_name": "Example",
        "long_instructions": "# Interactive Card Example\r\n\r\nIn the next few levels, you'll be completing your own interactive card. Here are some examples to give you some ideas."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/3": {
    "long_instructions": "# Laying Out Your Background\n\nBefore beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!\n\n# Do This\n\nRefer to your planning activity sheet to help you lay out the shapes that will become the background to your card.\n\n1.  First, figure out what the lowest layer in your image is (this should use the [`background`(#4dd0e1)][0] block) and add it to the very top of the draw loop.\n2.  Next, layer each additional drawing block in the order you want them to appear in the stack.\n3.  Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.\n\n**Challenge:** Can you use variables or [`randomNumber()`(#FFB74D)][1] to add some subtle animation to your background layer?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/4": {
    "long_instructions": "# Adding Sprites\n\nNow that you have the more static elements of your card laid out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.\n\n# Do This\n\nCheck out the Sprites table in your project guide. For each Sprite in your table:\n\n1.  Initialize the Sprite at the top of your program with [`createSprite()`(#f78183)][0].\n2.  Find or create the image(s) for the Sprite in the Animation tab and then set them with [`setAnimation()`(#f78183)][1].\n3.  Inside the [`draw()`(#68D995)][2] loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute)."
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/5": {
    "long_instructions": "# User Input\n\nYou've got a background, you've got Sprites, now it's time to give your user something to do!\n\n# Do This\n\nOn the interactions table from your project guide, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:\n\n1.  Add an [`if()`(#64B5F6)][0] block (or [`if()/else`(#64B5F6)][1] block if you need a fallback action) inside the [`draw()`(#68D995)][2] loop.\n2.  Add the appropriate input block for your condition (such as [`keyDown()`(#fff176)][3] or [`mouseDown()`(#fff176)][4]).\n3.  Add the necessary actions inside the [`if()`(#64B5F6)][5] block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/6": {
    "long_instructions": "# Other Conditionals\n\nThe _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.\n\n# Do This\n\nFor each of the remaining items on your interactions table from your project guide:\n\n1.  Add an [`if()`(#64B5F6)][0] block (or [`if()/else`(#64B5F6)][1] block if you need a fallback action) inside the draw loop.\n2.  Add the appropriate Boolean comparison block to the condition (eg. [`<`(#FFB74D)][2], [`>`(#FFB74D)][3], or [`==`(#FFB74D)][4]).\n3.  Add the necessary actions inside the [`if()`(#64B5F6)][5] block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/7": {
    "long_instructions": "# Finishing Touches\n\nNow's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.\n\n# Do This\n\n1.  Check all of the requirements in your project guide and make sure you've included everything needed.\n2.  Consider adding any of the following to finish up your card:\n    -   Text\n    -   Additional images for your sprites\n    -   Subtle animation in the background\n    -   Sound effects  (Can you figure out how to do this?)\n    -   More ways for a user to interact with your card"
  },
  "https://studio.code.org/s/csd3-2023/lessons/18/levels/8": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    },
    "sublevels": {
      "csd-pulse-check-survey-preamble_2019_pilot_copy1_2023": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **five quick questions**.\n\n<small>\n<em>Code.org takes your privacy seriously.</em> Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n</small>\n"
        }
      },
      "csd-pulse-check-survey-1-q1 U3Ch1_2019_pilot_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q2 U3Ch1_2019_pilot_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I have the ability to learn computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q3 U3Ch1_2019_pilot_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q4 U3Ch1_2019_pilot_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I feel comfortable in this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q5 U3Ch1_2019_pilot_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future."
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/1": {
    "callouts": {
      "CSD_U3_L11_S4_C1": "Add your block here."
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nYou've learned about the counter pattern - now let's compare that to the new [`velocity`(#f78183)][0] block.\n\n# Do This\n\n1.  Look at the lines of code that make the fly and mouse sprites move.\n    -   Line 3 makes the fly move.\n    -   Line 15 makes the mouse move.\n2.  What do you think will happen when you press run? How do think the two lines different lines of code will make each sprite move? \n3.  Write your prediction in the text box below.\n4.  Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/2": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# velocityX\n\nOne way to move sprites in Game Lab is with the counter pattern. For example <img src=\"https://images.code.org/529a7d3b6e09ec9b8b680f704c82eca9-image-1674066632644.png\" style=\"width:200px\"> moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a [`velocityX`(#f78183)][0] property that does this for you.\n\n# Do This\n\nUse the new [`velocityX`(#f78183)][1] block to make the sprite move!\n\n1.  Add the new movement block **outside** of the draw loop.\n    -   Drag a [`velocityX`(#f78183)][2] block directly below where your sprite is created. ( [Show me where][3] )\n    -   Make sure to replace \"sprite\" with \"fish\" so the block says [`fish.velocityX`(#f78183)][4]\n2.  Assign the velocity a value of 1.\n    -   The block should now say [`fish.velocityX = 1;`(#f78183)][5]\n3.  Run the code. What happens?\n4.  Give the velocity a different value and run the code again. What's changing?",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/3": {
    "long_instructions": "# Moving Down\n\nHere is a feather sprite that should be floating down the screen.  If [`velocityX`(#f78183)][0] makes a sprite move to the right, can you find the block that will make the feather move **down**?\n\n# Do This\n\n1.  Find the block that will make the feather sprite go down the screen\n2.  Use that block **outside** of the draw loop. ( [Show me where][1] )\n3.  Give the block a value to make the feather move down the screen.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/4": {
    "long_instructions": "# rotationSpeed\n\nYou can use [`rotationSpeed`(#f78183)][0] to make your sprites spin. If you want your sun to rotate by two degrees each time it's drawn, you can use [`sun.rotationSpeed = 2;`(#f78183)][1] **outside** of the draw loop, **after** you create your sprite.\n\n# Do This\n\n1.  Make the sun rotate by 3 degrees each time it's drawn.\n    -   Drag a [`rotationSpeed`(#f78183)][2] block outside of the draw loop. ( [Show me where][3] )\n    -   Give the [`rotationSpeed`(#f78183)][4] a value of 3.",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Use the rotationSpeed block here"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/5": {
    "long_instructions": "# Controlling Speed\n\nYou used [`rotationSpeed`(#f78183)][0] outside the draw loop to make your sprite rotate when your program started.  You can also use [`rotationSpeed`(#f78183)][1] **inside** the draw loop to **change the speed** of the sprite **during** the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.\n\n# Do This\n\n1.  Look at the conditional statement inside the draw loop that checks if the space bar has been pressed. ( [Show me where][2] )\n2.  Make the color wheel start spinning when the user presses the space bar.\n    -   Drag a [`rotationSpeed`(#f78183)][3] block inside the [`if ()`(#64B5F6)][4] statement and set its value.",
    "teacher_markdown": "# Inside versus outside the draw loop\n\nThis is a good time to remind students that code **outside** the draw loop is used to set up the program.  It is for how you want your program to **start**.  Code **inside** the draw loop is for things that are changing as the program is running, user interaction.  \n\nThere may be some confusion that the new blocks are animation (changing position) and yet have gone outside the draw loop up until this point.  That is because up until this point, the velocity has been set at the beginning of the program and not changed.  When students want the velocity to change during the program, it will need to go inside the draw loop.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/6": {
    "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.\n\nIn the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.\n\n# Do This\n\n-   Look at `if` statements that check the sprite's position and set its velocity.\n-   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    },
    "contained levels": [
      {
        "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals ([`if ()`(#64B5F6)][0]\nblocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to start the color wheel spinning, and it kept spinning forever. The code below uses if statements to make a fish sprite move in different directions.\n\n# Do This\n\n1.  Look at the [`if ()`(#64B5F6)][1] statements that check the sprite's position and set its velocity.\n2.  With your partner, discuss what you think the code will do, and write your answer below.\n3.  Once you have submitted your answer, run the code."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/7": {
    "long_instructions": "# Back and Forth\n\nThis ball bounces back when it hits the bottom of the screen.  Can you make it bounce back when it hits the top of the screen?\n\n# Do This\n\n1.  Run the code and see how it works.\n2.  Look at how conditionals and velocity are used to make the ball bounce at the bottom of the screen.\n3.  Add code to make the ball bounce at the top of the screen.\n    -   Drag out another [`if ()`(#64B5F6)][0] statement inside the draw loop.\n    -   Check if the ball has reached the top of the screen.\n    -   Drag out a [`velocityY`(#f78183)][1] block inside this [`if ()`(#64B5F6)][2] statement and give it a value that will send the ball down the screen."
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/8": {
    "dsls": {
      "description": "Practice using the velocity blocks with these activities.",
      "display_name": "Velocity Practice"
    },
    "sublevels": {
      "CSD U3 abstraction velocityY control_2023": {
        "display_name": "Controlling Speed",
        "bubble_choice_description": "Make the robot fly once the space bar has been pressed at least once.",
        "long_instructions": "# Controlling Speed\r\n\r\nFor this animation, you'll help the \"Flybot\" to take off. It should start moving up when the space bar is pressed, and it should continue moving up even after the space bar is released.\r\n\r\n# Do This\r\n\r\n1) ::: details [Use a conditional statement to check when the space bar is pressed.]\r\n   - Drag out an [`if () / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement inside the draw loop.\r\n   - Use a [`keyWentDown()`(#fff176)](/docs/ide/gamelab/expressions/keyWentDown) block with the [`if () / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to check if the space bar is pressed.\r\n:::\r\n2) ::: details [Make the sprite move up if the user presses the space bar.]\r\n   - Add a [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block inside the [`if () / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n   - Give the [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block a value that will make the Flybot move up.\r\n:::\r\n3) Check that your animation behaves the way you'd expect.",
        "callouts": {
          "CSD_U3_L11_S5_C1": "Look at this code."
        }
      },
      "CSD games velocity bee_2023": {
        "display_name": "Paint Brush",
        "bubble_choice_description": "Dip the paint brush in the paint.",
        "long_instructions": "<img src=\"https://images.code.org/63f0da91b98c6211a09ac7fbaf9e0011-image-1585848730692.gif\" style=\"float: right\">\r\n\r\n# Paintbrush\r\n\r\nUse [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statements with [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityY) to make the paintbrush dip in the paint.\r\n\r\n# Do This\r\n\r\n1) ::: details [Use a conditional to send the paint brush down if the down arrow is pressed.]\r\n   - Drag out an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Use the [`keyWentDown()`(#fff176)](/docs/ide/gamelab/expressions/keyWentDown) block with the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement to detect when the down arrow is pressed.\r\n   - Add a [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block inside the  [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement and give it a value to make the paintbrush move down the screen.\r\n:::\r\n2) ::: details [Use a different conditional to send the paint brush up if it reaches the palette.]\r\n   - Drag out a second [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Check if the paintbrush's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) value reaches the paint for the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement boolean condition.\r\n   - Add a [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block inside the  [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement and give it a value to make the paintbrush move up the screen.\r\n:::\r\n",
        "callouts": {
          "CSD_U3_L11_S5_C1": "Look at this code."
        }
      },
      "CSD U3L18 - PracC_2023": {
        "display_name": "Magical Star",
        "bubble_choice_description": "Help the wizard cast a spell that moves the star across the screen!",
        "long_instructions": "<img src=\"https://images.code.org/4cf00de9e190f759ba2237ce5fe63fae-star.gif\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\r\n\r\n# Magic Stars\r\n\r\nHelp the wizard cast a magical spell to send green stars across the screen whenever the spacebar is pressed!\r\n\r\n# Do This\r\n\r\n1) ::: details [Add code to check when the space bar is pressed]\r\n   - Use an [`if`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) block and a [`keyWentDown()`(#fff176)](/docs/ide/gamelab/expressions/keyWentDown) block to check when the space bar is pressed\r\n:::\r\n2) ::: details [When it is: reset the position of the star and make it move to the right]\r\n\t- Use the [`sprite.x`(#f78183)](/docs/ide/gamelab/expressions/x) block to reset the position of the star sprite\r\n    - Use the [`sprite.velocityX`(#f78183)](/docs/ide/gamelab/expressions/velocityX) block to move the star across the screen\r\n:::"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/9": {
    "long_instructions": "# Swimming Right and Left\n\nThe code below should make the fish start moving right once you press the right-arrow, and then it should continually swim back and forth. You should use conditional statements and the [`velocity`(#f78183)][0]\n block to make the fish swim.\n\n# Do This\n\n1.  Look at the three conditional statements inside the draw loop.\n2.  Use a the correct block inside each conditional statement to make the three following movements:\n    -   If the user presses the right arrow key, move the fish to the right.\n    -   If the fish gets to the right-hand side of the screen, move the fish to the left.\n    -   If the fish gets to the left-hand side of the screen, move the fish to the right.\n3.  The fish should always be facing the same direction it's moving, so you will also need to update the fish's animation inside each of the conditional statements.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    },
    "mini_rubric": {
      "rubric_key_concept": "Use conditionals to control the flow of a program; model two dimensional movement on a coordinate plane.",
      "rubric_performance_level_1": "The fish swims to the right side of the screen, turns and swims to the left side of the screen, then repeats.  The sprite appears to face the appropriate direction at all times. There are no extra blocks in the program, and the counter pattern is not used.",
      "rubric_performance_level_2": "The fish swims to the right side of the screen, turns and swims to the left side of the screen, but perhaps does not face the right direction while moving. The counter pattern is not used.",
      "rubric_performance_level_3": "The fish swims to the right side of the screen, turns and swims to the left side of the screen, but does not repeat. The student only changed its velocity by using the provided first conditional statement. ",
      "rubric_performance_level_4": "The fish just moves right across the screen, then disappears."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/19/levels/10": {
    "dsls": {
      "description": "Try out these new blocks and challenges with velocity.",
      "display_name": "Velocity Challenges"
    },
    "sublevels": {
      "CSD games velocity 4 directions_2023": {
        "display_name": "Changing Course",
        "bubble_choice_description": "Can you change velocities four separate times?",
        "long_instructions": "<img src=\"https://images.code.org/08892a209712e5612ed813ecaf34484a-image-1592601350973.2020-06-19 17_13_37.gif\" style=\"float: right; width: 150px;\">\r\n\r\n# Changing Course\r\n\r\nStudy the animation to the right. Notice that the purple alien sprite changes between x and y velocities when it is near each corner of the screen.\r\n\r\n# Do This\r\n\r\n1) Run the program and to understand how it works so far.\r\n2) Add the appropriate velocity blocks to each conditional to make the alien complete the full circuit.\r\n\r\n**Be careful!** If the sprite starts moving diagonally, it might mean it has both an x and y velocity. In the first corner the alien needs to *stop moving up* and *start moving right*."
      },
      "CSD U3L18 - ChalB_2023": {
        "display_name": "Burst Effect",
        "bubble_choice_description": "Create an animation that simulates an object \"bursting\" in random directions from the center of the screen.",
        "long_instructions": "<img src=\"https://images.code.org/cc4ce213d376bdee8b891b8769e5fc4e-heart.gif\" style=\"float: right; width: 20%; margin-left: 10px; margin-right: 10px\" />\r\n\r\n# Burst Effect\r\n\r\nCreate an animation that simulates an object \"bursting\" in random directions from the center of the screen. Each time an object reaches the edge of the screen, it resets back to the center.\r\n\r\n# Do This\r\n\r\n1) Check if the object has disappeared off the left side of the screen. If it has:\r\n\t- Reset it's position to the center of the screen\r\n    - Set a new [`velocityX`(#f78183)](/docs/ide/gamelab/expressions/velocityX) to a random number between -10 and 10\r\n    - Set a new [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) to a random number between -10 and 10\r\n2) Repeat Step 2 to check if the object has disappeared off the right side of the screen\r\n3) Repeat Step 2 to check if the object has disappeared off the top of the screen\r\n4) Repeat Step 2 to check if the object has disappeared off the bottom side of the screen\r\n\r\n_Optional:_ Add several other objects to the screen to create a multiple burst effect."
      },
      "CSD U3 L15 Freeplay_2023": {
        "display_name": "And ... Action!",
        "bubble_choice_description": "Use what you've learned so far to create a scene from a book, movie, or TV show that comes to life and sprites start moving when a key or the mouse is pressed!",
        "long_instructions": "# And ... Action!\r\n\r\nUse what you've learned so far to create a scene from a book, movie or TV show that comes to life and sprites start moving when a key or the mouse is pressed!\r\n\r\nFor example, if the TV show you like has scenes of a busy hospital, you could create a scene where doctors and nurses start moving around when a key is pressed, otherwise they are stationary.\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L18 Freeplay2_2023": {
        "display_name": "Let's Race!",
        "bubble_choice_description": "Use what you've learned so far to create a scene where sprites are racing around the screen with velocities that change when certain keys are pressed!",
        "long_instructions": "# Let's Race!\r\n\r\nUse what you've learned so far to create a scene where sprites are racing around the screen with velocities that change when certain keys are pressed!\r\n\r\nFor example, you could have several different animals moving down the screen, velocities all set to a certain speed, and when the \"c\" key is pressed, the cat's velocity doubles! You could have any sprites racing that you want - animals, people, cars, planes, aliens ... be creative!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Dinner Time!\n\nRun the program to see the robot bring the bunny dinner.  When the bunny reaches the bowl, they both stop walking and the bowl becomes empty.  What code do you think would help the computer know if two sprites were touching?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/2": {
    "display_name": "Collision Detection",
    "long_instructions": "# Using Math to Figure it Out\n\nComputers use math to figure out whether two things are touching.  Look at the math in this program to see how the sprite properties are compared with their width to see whether they are touching.\n\n# Do This\n\n-   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n-   Discuss the code with your partner.\n-   Why does the code only use the width and x properties, and not the height and y properties?\n-   Would you want to write this code every time you checked whether something was touching?",
    "teacher_markdown": "The code in this level is overwhelming.  The point is not that students understand every line, but that they see that it's possible to check whether sprites are touching just by using their positions.  They should understand that the `isTouching` block used in the next level automatically runs the complicated code that they see here, but that it's hidden inside the block to make programming easier.\n\nThis code does not include the y and height properties because the two sprites are interacting on the same horizontal line.  If the bunny could move diagonally, then the code would be even more complicated.",
    "contained levels": [
      {
        "long_instructions": "# Using Math to Figure it Out\n\nComputers use math to figure out whether two things are touching.  Look at the math on lines 17-18 of this program to see how the sprite properties are compared with their width to see whether they are touching.\n\n# Do This\n\n1.  Read the [`if ()`(#64B5F6)][0] statements inside the draw loop and find the different sprite properties and how they are compared.\n2.  Discuss the code with your partner.\n3.  Why does the code only use the width and x properties, and not the height and y properties?\n4.  Would you want to write this code every time you checked whether something was touching?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/3": {
    "long_instructions": "# isTouching()\n\nWriting out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the [`isTouching()`(#f78183)][0] block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.\n\n# Do This\n\n1.  Check if the bunny is touching the dinner.\n    -   Drag the [`isTouching()`(#f78183)][1] block into the [`if ()`(#64B5F6)][2] statement. ( [Show me where][3] )\n    -   Don't forget to change the \"sprite\" to \"bunny\" and the \"target\" to \"dinner\".\\*",
    "callouts": {
      "CSD_U3_L12_S2_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/5bba6a59ca6ac44e190f0a56d2c31752-image-1585767709528.gif\" style=\"float:right\">\n\n# Applesauce\n\nIn this program, the blender should only \"turn on\" when the apple touches it.\n\n# Do This\n\n1.  Check if the apple is touching the blender.\n    -   Drag out an [`if ()`(#64B5F6)][0] statement inside the draw loop.\n    -   Add an [`isTouching()`(#f78183)][1] block into the [`if ()`(#64B5F6)][2] statement.\n    -   Change the \"sprite\" and the \"target\" to the correct sprite names.\n2.  Make the blender shake only when the apple is touching it.\n    -   Move the line of code that shakes the blender into the [`if ()`(#64B5F6)][3] statement.\n    -   _Optional: You may also want to hide the apple when it touches the blender._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/5": {
    "long_instructions": "# Debugging Collisions\n\nThe balloon is popping before the tack touches it.  You can use the [`debug`(#f78183)][0] block to get more information about the bug in the program!\n\n# Do This\n\n1.  Run the code and use the arrow keys to move the tack to pop the balloon.\n2.  Change the code on line 4 from **false** to **true**.\n    -   The line should now be [`balloon.debug = true;`(#f78183)][1]\n3.  Debug the tack sprite.\n    -   Drag out a new [`debug`(#f78183)][2] block.\n    -   Set the tack sprite's debug property to **true**.\n4.  Run the code again, then discuss with your partner why the balloon is popping early.\n5.  Resize the balloon animation to fix this!\n    -   Go into the animation tab.\n    -   Crop the balloon image using the \"crop\" tool on the right side of the screen.\n6.  Run the code again to see if the issue is fixed!",
    "teacher_markdown": "This level does not ask students to fix the bug in the program, which must be done in the animation tab.  In order to make the collision work properly, students will need to crop the empty space around the visible part of the picture.  The easiest way to do this is to click once on the \"crop\" icon in the animation tab, which will tightly crop to the smallest rectangle around the visible parts of the picture.  Students may also use the rectangular select tool to specify what should be cropped away. "
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/6": {
    "dsls": {
      "description": "Practice using collision detection with these activities.",
      "display_name": "Collision Practice"
    },
    "sublevels": {
      "CSD U3 collision detection practice debugistouching_2023": {
        "display_name": "Debug: isTouching",
        "bubble_choice_description": "Figure out why this code is not detecting the collision, even though it calls isTouching.",
        "long_instructions": "# Debug: isTouching\r\n\r\nThe bunny sprite should change to a new animation when it touches the sun sprite. Figure out why the bunny doesn't react to the collision.\r\n\r\n# Do This\r\n1) Run the program and read over the code to figure out what's wrong.\r\n2) Modify the code so that the collision is detected within the draw loop."
      },
      "CSD U3 collision detection challenge collider circle_2023": {
        "display_name": "Circle Colliders",
        "bubble_choice_description": "Improve collisions for sprites with circular animations.",
        "long_instructions": "<img src=\"https://images.code.org/a42ba3dcc666047d26145a7832493f70-image-1589906306820.2020-05-19 12_37_36.gif\" style=\"float:right\">\r\n\r\n# Circular Collider\r\n\r\nThese coins are supposed to stop when they touch, but the colliders are the wrong shape. \r\n\r\n# Do This\r\n\r\n\r\n\r\n1) ::: details [Change the collider of each coin to a circle.]\r\n   - Drag out a [`setCollider()`(#f78183)](/docs/ide/gamelab/expressions/setCollider) block for coin1\r\n   - Change the collider of the coin1 sprite to a circle.\r\n   - Repeat this for coin2.\r\n:::\r\n\r\n"
      },
      "CSD U3 collision detection practice 3_2023": {
        "display_name": "Scared Mouse",
        "bubble_choice_description": "Use an isTouching block to make the mouse run away!",
        "long_instructions": "<img src=\"https://images.code.org/590d26fc866764467ff6f8f67558831d-image-1664900162910.gif\" style=\"float: right; width: 200px; margin: 20px\">\r\n\r\n# Scared Mouse\r\n\r\nRight now, the mouse sprite runs across the screen, right in front of the cat. Use an [`isTouching()`(#f78183)](/docs/ide/gamelab/expressions/isTouching) conditional to cause several things to happen: the mouse turns around and runs the other way, the cat looks down at the mouse, and the cat meows!\r\n\r\n\r\n# Do This\r\n\r\n1) ::: details [Program the mouse to run the other way and the cat to look down and meow if the mouse is touching the cat]\r\n\t- Drag out an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement inside the draw loop.\r\n    - Use an [`isTouching()`(#f78183)](/docs/ide/gamelab/expressions/isTouching) block as the conditional of the [`if`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement. \r\n    - Set the mouse as the \"sprite\" and the cat as the \"target\".\r\n    - Inside the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement:\r\n    \t- Set the animation of the cat to the alternate cat animation (*take a look in the animation tab*).\r\n        - Set the animation of the mouse to face the other way (*take a look in the animation tab*).\r\n    \t- Set the mouse's velocity to go left at a fast speed.\r\n    \t- Use the [`playSound()`(#fff176)](/docs/ide/gamelab/expressions/playSound) block to play the sound of a cat meowing.\r\n    :::\r\n    \r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/7": {
    "long_instructions": "# Rainbow Horse\n\nIn this program, the horse should turn into a unicorn when it touches the rainbow.\n\n# Do This\n\n1.  Change the horse into a unicorn when the rainbow touches it.",
    "mini_rubric": {
      "rubric_key_concept": "Create and modify objects (sprites) to manage the complexity of on-screen elements. ",
      "rubric_performance_level_1": "The horse turns into a unicorn when the rainbow touches it.  There are no extra blocks in the program.",
      "rubric_performance_level_2": "The program reacts in some way when the rainbow touches the horse.",
      "rubric_performance_level_3": "The program uses a conditional and detects when the rainbow touches the horse, but there are enough errors that it does not react in any way.",
      "rubric_performance_level_4": "The program does not detect when the rainbow touches the horse, or there is no conditional in the program."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/20/levels/8": {
    "dsls": {
      "description": "Try out these new blocks and challenges with collisions.",
      "display_name": "Collision Challenges"
    },
    "sublevels": {
      "CSD U3 collision detection challenge collider angle_2023": {
        "display_name": "Collider at an Angle",
        "bubble_choice_description": "Improve collisions for sprites with angled animations.",
        "long_instructions": "# Collider at an Angle\r\n\r\nAngle the collider to fit the rolling pin.\r\n\r\n## .setCollider() with multiple parameters\r\n\r\n[`setCollider()`(#f78183)](/docs/ide/gamelab/expressions/setCollider) can take more parameters than just the shape. It also takes parameters to specify the x, y offset, width and height, and angle. Check out the [documentation](https://studio.code.org/docs/gamelab/setCollider/) for an example.\r\n\r\n# Do This\r\n\r\n1) Use [`setCollider()`(#f78183)](/docs/ide/gamelab/expressions/setCollider) with 6 parameters to give the rolling pin a collider that fits it well.\r\n\r\n**Hint:** Hover over the [`setCollider()`(#f78183)](/docs/ide/gamelab/expressions/setCollider) block in the toolbox to see an example of how to do this.\r\n"
      },
      "CSD U3 collision detection practice debugpoints_2023": {
        "display_name": "Debug: Add Points on Collision",
        "bubble_choice_description": "Figure out why this code is adding way more points than we want it to",
        "long_instructions": "# Debug: Add Points on Collision\r\n\r\nGames often give you points when two sprites touch. This program does that, but notice what happens to the score as the sprites continue to touch. Your challenge is to get it so only one point is scored. There are multiple ways to do this, but the easiest way is to move one or both sprites to a different location right when the score increases.\r\n\r\n# Do This\r\n1) Read and run the code to understand how it works, and what is going wrong.\r\n2) Identify the code that increases the score.\r\n3) Add a line of code so that at least one sprite moves to a new (random) location.\r\n"
      },
      "CSD U3 collision detection challenge 3_2023": {
        "display_name": "If-Else Challenge",
        "bubble_choice_description": "Use an If-Else statement to make the emoji either happy or sad!",
        "long_instructions": "# IfTouching - Else Challenge\r\n\r\nUse an [`if / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to change the emoji's mood based on if it is touching the donut or not!\r\n\r\n# Do This\r\n1) ::: details [Program the emoji to smile if it's touching the donut, otherwise the emoji should be sad.]\r\n\t- Add an [`if / else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to the draw loop that uses an [`.isTouching()`(#f78183)](/docs/ide/gamelab/expressions/isTouching) block as it's condition.\r\n    - Inside the [`if`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock):\r\n    \t- Set the animation of the emoji to be happy.\r\n        - Set the visibility of the donut to be false.\r\n\t- Inside the [`else`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock):\r\n    \t- Set the animation of the emoji to be sad.\r\n:::\r\n\r\n"
      },
      "CSD U3 L16 Freeplay_2023": {
        "display_name": "Food Combos!",
        "bubble_choice_description": "Use what you've learned so far to create an animation of two foods that combine into a new, different food when they touch!",
        "long_instructions": "# Food Combos\r\n\r\nUse what you've learned so far to create an animation of two foods that combine into a new, different food when they touch!\r\n\r\nFor example, when a jar of peanut butter and a jar of jelly touch they disappear and turn into a peanut butter and jelly sandwich or when a potato and a jar of ketchup touch, they disappear and turn into french fries with a side of ketchup!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U3 L19 Freeplay2_2023": {
        "display_name": "Let's Play!",
        "bubble_choice_description": "Use what you've learned so far to create an animation of your favorite sport",
        "long_instructions": "# Let's Play!\r\n\r\nUse what you've learned so far to create an animation of your favorite sport!\r\n\r\nFor example, you could make it appear like a character kicks a soccer ball by giving velocity to the soccer ball when the character touches the ball! You could even give yourself an extra challenge and add in a net and a score and increment the score when the ball touches the net!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Frog jump\n\nThis frog jumping game is an example of a side scroller.  Side scrolling games have backgrounds that move across the screen from side to side.\n\nIn this game, the player uses the up arrow to make the frog jump.  The frog must avoid the mushrooms while trying to get the flies.  Every fly scores one point, and hitting the mushrooms makes the player health go down.  When the player health hits zero, the game is over.\n\nPlay the game a few times and discuss it with your partner.  You have already learned all the skills you need to code this game.  You'll be making your own side scroller in this mini-project."
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/2": {
    "long_instructions": "# Draw Your Background\n\nThe sample game had a simple background of a blue sky, a white oval cloud, and a brown ground.  You can choose to make your background as simple or complicated as you want.\n\n# Do This\n\n1.  Find the code comment `// BACKGROUND`\n2.  Use the drawing tools to draw your background.\n3.  Run the program to test the background.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/3": {
    "long_instructions": "# Create Your Sprites\n\nNext, create the sprites you will use in your program.  You'll need a player (the frog), a target (the fly), and an obstacle (the mushroom).  You can change the sprite animations to anything you want.\n\n# Do This\n\n1.  Go to the animation tab and make sure that you have the three images that you want.\n    -   _The frog, mushroom and fly are already there, but you can use whatever images you want._\n2.  Find the code comment `//GAME SETUP`.\n3.  Create your three sprites: the player, target, and obstacle.\n    -   Set each one to the animation you chose for it.\n    -   Scale each one to the size you want.\n    -   Place them where you want them to be on (or off) the screen.\n    -   Set the starting [`velocityX`(#f78183)][0] of the target and the obstacle to get them moving across the screen.\n4.  Test your program.  The player should be on the screen, and the target and obstacle should start off screen and move across the screen from right to left.\n\n_Hint: The obstacle and target sprites should always move at the same speed. You only need to set a velocity for each sprite one time. You can do this outside the draw loop._",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/4": {
    "long_instructions": "# Player Controls\n\nThe up arrow should make the player jump.  There are three parts to jumping: jump up when a key is pressed, go down when you're high enough, and don't fall through the ground!\n\n# Do This\n\n1.  Find the code comment `// JUMPING` and read the three comments in that section.\n2.  Add a conditional that checks whether the player has pressed the \"up\" key.\n    -   If the up key is pressed, use the [`velocityY`(#f78183)][0] property to start the player (frog) sprite moving up.\n    -   Test your code to see whether the sprite goes up when you press the up arrow.\n3.  Add a conditional that uses the sprite's [`y`(#f78183)][1] property to check whether it is high enough.\n    -   If it is far enough up the screen, add code to make the sprite move back down the screen.\n    -   Test your code to see whether the sprite goes back down when it gets to the top if its jump.\n4.  Add a conditional to check whether the sprite is low enough on the screen to be on the ground.\n    -   If it is far enough down the screen, add code to stop the sprite.\n    -   Test to make sure the sprite does not go through the ground at the end of the jump.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement",
      "CSD_U3_L11_S17_C2": "Send the frog back down here"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/5": {
    "long_instructions": "# Looping\n\nThe obstacle (mushroom) and the target (fly) need to loop back to the right of the screen once they go too far.\n\n# Do This\n\n1.  Find the code comment that says `// LOOPING`\n2.  Add a conditional that uses the obstacle sprite's [`x`(#f78183)][0] property to check whether it has moved off the screen.\n    -   If it has moved off the screen, use its [`x`(#f78183)][1] property to put it back on the right side of the screen.\n    -   Test your code to see whether the obstacle is looping.\n3.  Add a conditional that checks whether the target has moved off the screen.\n    -   If it has moved off the screen, use put it back on the right side of the screen.\n    -   Test your code to see whether the target is looping.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/6": {
    "long_instructions": "# Sprite Interactions\n\nIn the sample game, the obstacle (mushroom) rotated and the health decreased when the player (frog) touched it.  The score increased and the target (fly) moved back to the right of the screen when the player (frog) touched it.\n\n# Do This\n\n1.  Find the code comment `// SPRITE INTERACTIONS` and read the comments in that section.\n2.  Create a conditional that checks whether the player sprite is touching the obstacle sprite.\n    -   If they are touching, decrease the health and change the obstacle sprite in some way.\n    -   Run the program to test your code.\n3.  Create a conditional that checks whether the player sprite is touching the target sprite.\n    -   If they are touching, increase the score and move the target back to the right of the screen.\n    -   Run the program to test your code. \n\n_You may want to use watchers to keep track of your score and health._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/7": {
    "long_instructions": "# Scoreboard\n\nRight now the health is displayed, but the score is not.\n\n# Do This\n\n1.  Find the code comment `// SCOREBOARD` and read the code that makes the health information display.\n2.  Add code to create a scoreboard.\n3.  Run the program to test your code."
  },
  "https://studio.code.org/s/csd3-2023/lessons/21/levels/8": {
    "long_instructions": "# Review Your Game\n\nNow that you've added in all the features, it's time to play your game!\n\n# Do This\n\n1.  Play your game a few times to check for bugs.\n2.  Look over your project guide to make sure you have not missed anything.\n3.  Make any last changes."
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/1": {
    "display_name": "Velocity and the Counter Pattern",
    "teacher_markdown": "!!!tip\n\n    This level introduces the primary new programming pattern of this lesson, combing the counter pattern with sprites' velocity properties. Encourage students to take seriously their predictions before actually running the code.",
    "contained levels": [
      {
        "long_instructions": "# Velocity and the Counter Pattern\n\nUsing the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the [`velocityX`(#f78183)][0]\n property** instead.\n\n# Predict\n\n1.  What do you think will happen when the code is run? Why? \n2.  Once you're ready you can run the code to find out."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/2": {
    "long_instructions": "# Velocity and the Counter Pattern\n\nThis program already makes a car move across the screen, but it's going very slowly.  By using the [`velocityX`(#f78183)][0] property with the counter pattern, you can change the sprite's speed during the program. \n\n# Do This\n\n1.  Add code to make the car speed up.\n    -   Drag out a [`velocityX`(#f78183)][1] block inside the draw loop. ( [Show me where][2] )\n    -   Use the counter pattern with the [`velocityX`(#f78183)][3] property like this:\n        -   <img src=\"https://images.code.org/e14ff06402a446c3d56a9543e1675239-image-1674159140703.png\" style=\"width:350px\">\n    -   Play with the value in the counter pattern to find one that speeds up the car at a pace you like.",
    "callouts": {
      "CSD_U3_L11_S6_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/3": {
    "long_instructions": "# Falling Rock\n\nIn this program, the rock should speed up as it falls down the screen.\n\n# Do This\n\n1.  Add code to make the rock speed up as it falls.\n    -   Drag out a [`velocityY`(#f78183)][0] block inside the draw loop. ( [Show me where][1] )\n    -   Use the counter pattern with the [`velocityY`(#f78183)][2] property\n    -   Play with the value in the counter pattern to find one that speeds up the rock as it falls down.",
    "callouts": {
      "CSD_U3_L11_S7_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/4": {
    "long_instructions": "# Slowing Things Down\n\nThe car is going to run into the water! You'll need to use the counter pattern to slow it down.\n\n# Do This\n\n1.  Add code to slow the car down before it goes into the water.\n    -   Drag out a [`velocityX`(#f78183)][0] block inside the draw loop.\n    -   Use the counter pattern with a [`velocityX`(#f78183)][1] block that will decrease by 0.25 as it moves across the screen.\n2.  Discuss with your Partner: What do you think will happen when the car finally stops?\n\n**Challenge:** Can you figure out how to use a conditional with the above counter pattern to get the car to completely stop before the water?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/5": {
    "dsls": {
      "description": "Practice using the new ways to move sprites.",
      "display_name": "Sprite Movement Practice"
    },
    "sublevels": {
      "CSD U3 abstraction accelerateY up_2023": {
        "display_name": "Rising Bubble",
        "bubble_choice_description": "Make the bubble get faster as it moves higher.",
        "long_instructions": "# Rising Bubble\r\n\r\nThis program makes a bubble rise up the water. Can you make it get faster as it rises?\r\n\r\n# Do This\r\n\r\n1) ::: details [Add code to make the bubble speed up as it rises.]\r\n   - Drag out a [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block inside the draw loop.\r\n   - Use the counter pattern with a [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) property.\r\n   - Pick a value for the counter pattern to get the bubble to speed up as it rises.\r\n:::\r\n"
      },
      "CSD U3 practice deceleration_2023": {
        "display_name": "Slow down and reverse",
        "bubble_choice_description": "Help the mouse avoid the watchful cat.",
        "long_instructions": "<img src=\"https://images.code.org/6851c208594b84d47dd15401a8d4ae8c-image-1592923375590.2020-06-23 10_42_38.gif\" style=\"float:right\">\r\n\r\n# Slow down and reverse\r\n\r\nIn this animation, a mouse runs past a cat. Let's change it so that the mouse slows down, stops before reaching the cat, then reverses direction like shown to the right.\r\n\r\n# Do This\r\n\r\n1) ::: details [Take a look at the code that makes the mouse move.]\r\n   - Note the current [`velocityX`(#f78183)](/docs/ide/gamelab/expressions/velocityX) of the mouse sprite.\r\n:::\r\n2) ::: details [Add code to make the mouse change directions when it reaches the cat.]\r\n   - Drag out a [`velocityX`(#f78183)](/docs/ide/gamelab/expressions/velocityX) block inside the draw loop.\r\n   - Use the counter pattern with the [`velocityX`(#f78183)](/docs/ide/gamelab/expressions/velocityX) property to change the speed of the mouse so that it approaches 0 then changes direction.\r\n   - Since the mouse starts with a **negative** velocity, you'll actually want to **increase** it to slow down.\r\n   - Try different numbers in the counter pattern to see what matches the image best.\r\n:::\r\n"
      },
      "CSD U3 practice 3_2023": {
        "display_name": "Floating Balloon",
        "bubble_choice_description": "Change the direction of the falling balloon to make it float away. ",
        "long_instructions": "<img src=\"https://images.code.org/eb1d018c8e8057bb0b02b79de2a56463-image-1664907414331.gif\" style=\"float:right; width: 200px; margin-left: 20px\">\r\n\r\n# Floating Balloon\r\n\r\nIn this animation, a balloon falls to the ground. Let's change it so that the balloon slows down before reaching the ground, and then reverses direction to float away similar to the image to the right.\r\n\r\n# Do This\r\n\r\n1) ::: details [Take a look at the code that makes the balloon move.]\r\n   - Note the current [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) of the balloon sprite.\r\n:::\r\n2) ::: details [Add code to make the balloon slow down and float away.]\r\n   - Drag out a [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) block inside the draw loop.\r\n   - Use the counter pattern with the [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) property to reverse the balloon's direction and float away.\r\n   - Since the balloon starts with a **positive** velocity, you will want to **decrease** it to reverse direction.\r\n   - Try different numbers in the counter pattern to see what matches the image best.\r\n:::"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/6": {
    "long_instructions": "# Looks like Gravity\n\nUh oh! The rock is thrown in the air but it never falls back down!\n\n# Do This\n\n1.  Add code to make the rock slow down and then fall.\n2.  Try different numbers in your counter pattern to see what you like the best.",
    "mini_rubric": {
      "rubric_key_concept": "Model complex movement on a coordinate plane",
      "rubric_performance_level_1": "The rock sprite slows as it goes up the screen, then starts to fall back down, speeding up at is falls.  The rock reaches a reasonable height, and there are no extra blocks of code.",
      "rubric_performance_level_2": "The rock sprite slows as it goes up the screen, then starts to fall back down, speeding up at is falls.",
      "rubric_performance_level_3": "The rock starts to move up the screen, and its velocity continually changes in some way as the program is being run.",
      "rubric_performance_level_4": "There is no change to the rock's velocity as the program is run."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/22/levels/7": {
    "dsls": {
      "description": "Try out these new blocks and challenges with velocity and the counter pattern.",
      "display_name": "Complex Sprite Movement Challenges"
    },
    "sublevels": {
      "CSD U3 complex sprite movement practice parabola_2023": {
        "display_name": "Curve",
        "bubble_choice_description": "Make the plane curve to avoid the two spikes.",
        "long_instructions": "# Curve\r\n\r\nThe plane is going up to avoid the first spike, but it flies offscreen. In the draw loop, update its [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) so that it pulls down to avoid the second spike.\r\n\r\n# Do This\r\n1) Add code that moves the plane down.\r\n   - *You may change the initial X and Y [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityX) of the plane, but you don't have to.*"
      },
      "CSD U3 complex sprite movement practice deceleration_2023": {
        "display_name": "Deceleration",
        "bubble_choice_description": "Make the car slow to a halt before it goes past the top of the screen.",
        "long_instructions": "# Deceleration\r\n\r\nFor this program, you need to make the car slow to a halt before it goes past the top of the screen.\r\n\r\n# Do This\r\n1) Add code to make the car slow down in the draw loop.\r\n2) Use a conditional to detect when the car's velocity is 0.\r\n3) Add code to the conditional to make the car stop."
      },
      "CSD U3 complex sprite movement jump challenge_2023": {
        "display_name": "Jumping Alien",
        "bubble_choice_description": "Make the alien jump and land whenever the space bar is pressed.",
        "long_instructions": "<img src=\"https://images.code.org/0dd6927832719310f144af0ccf0c7b58-image-1664911187490.gif\" style=\"float:right; width: 200px; margin-left: 20px\">\r\n\r\n\r\n# Jumping\r\n\r\nCan you use the counter pattern with the [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) to make the character appear to be jumping?\r\n\r\n# Do This\r\n1) ::: details [Set the alien's velocity to make the alien \"jump up\" when the space bar is pressed.]\r\n\t- Use an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement with the [`keyWentDown()`(#fff176)](/docs/ide/gamelab/expressions/keyWentDown) to program the alien's [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) so that the alien moves up if the space bar is pressed.\r\n    - Hint: To go up, will the [`velocityY`(#f78183)](/docs/ide/gamelab/expressions/velocityY) be positive or negative?\r\n    :::\r\n2) ::: details [Use the counter pattern with the velocity to bring the alien down when it reaches the top of the screen.]\r\n\t- Use the counter pattern with the [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityX) inside an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to reverse the alien's direction if the alien's Y reaches the top of the screen.\r\n    - Hint: Use a watcher to determine a [`y`(#f78183)](/docs/ide/gamelab/expressions/y) location value to use with your [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement.\r\n    :::\r\n3) ::: details [Set the alien's velocity and reset it's starting Y location value to make it land on the ground.]\r\n\t- Use an [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifElseBlock) statement to do the following:\r\n    \t- Set the alien's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) location to it's starting [`y`(#f78183)](/docs/ide/gamelab/expressions/y) value.\r\n        - Set the alien's [`velocity`(#f78183)](/docs/ide/gamelab/expressions/velocityY) to 0 to get it to stop moving.\r\n        - The above two actions should execute if the alien's [`y`(#f78183)](/docs/ide/gamelab/expressions/y) location become greater than it's starting [`y`(#f78183)](/docs/ide/gamelab/expressions/y) location value.\r\n    :::\r\n4) **Bonus Challenge:** Add a sprite that moves across the screen in a loop to give the alien something to jump over.\r\n"
      },
      "CSD U3 L17 Freeplay_2023": {
        "display_name": "Who Will Win?",
        "bubble_choice_description": "Use what you've learned so far to race the cars and slow them down after they reach the finish line.",
        "long_instructions": "# Who Will Win?\r\n\r\nUse what you've learned so far to race the cars and slow them down after they reach the finish line.\r\n\r\nFor example, use the race cars and finish line provided to program the cars to race to the finish line and then slow down once they reach it! Make your scene even more fun by setting the initial velocity of each car to random so that a different car might cross the finish line first each time!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      },
      "CSD U3 L21 Freeplay2_2023": {
        "display_name": "Racing Spaceships",
        "bubble_choice_description": "Use what you've learned so far to race the spaceships and slow them down after they reach the asteroid field.",
        "long_instructions": "# Racing Spaceships\r\n\r\nUse what you've learned so far to race the spaceships and slow them down after they reach the asteroid field.\r\n\r\nFor example, use the spaceships and planets provided to program the spaceships to race to the asteroid field and then slow down once they reach it! Make your scene even more fun by setting the initial velocity of each spaceship to random so that a different spaceship might reach the asteroid field first each time!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      },
      "CSD U3 L21 Freeplay3_2023": {
        "display_name": "Fastest Animal!",
        "bubble_choice_description": "Use what you've learned so far to race the animals and slow them down after they reach the lake.",
        "long_instructions": "# Racing Animals\r\n\r\nUse what you've learned so far to race the animals and slow them down after they reach the lake of water.\r\n\r\nFor example, use the animals and body of water provided to program the animals to race to the lake and then slow down once they reach it! Make your scene even more fun by setting the initial velocity of each animal to random so that a different animal might reach the lake first each time!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/1": {
    "display_name": "Sprite Interactions",
    "long_instructions": "# Sprite Interactions\n\nSo far you've been able to create simple sprite interactions by using the [`sprite.isTouching()`(#f78183)][0] block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.\n\n# Do This\n\n1.  Run the program and observe the interaction between the two sprites.\n2.  Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:\n    -   [`sprite.isTouching()`(#f78183)][1]\n    -   [`sprite.velocityX`(#f78183)][2]\n    -   [`sprite.velocityY`(#f78183)][3]\n    -   [`sprite.x`(#f78183)][4]\n    -   [`sprite.y`(#f78183)][5]\n\nBe ready to share your ideas with your classmates."
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/2": {
    "long_instructions": "# Program a Sprite Interaction\n\nHere's a similar program, but it doesn't work yet.\n\n# Do This\n\n1.  Try out your plan from level 1 to program the giraffe to push the monkey off the screen.\n\n::: details [How do I get the giraffe to push the monkey off the screen?]\n\n-   Drag out an [`if ()`(#64B5F6)][0] statement inside the draw loop.\n-   Use an [`isTouching()`(#f78183)][1] block to detect when the giraffe is touching the monkey.\n-   Add a [`velocityX`(#f78183)][2] block inside the [`if ()`(#64B5F6)][3] statement and use it to have the monkey's velocity match the giraffe's velocity.\n    :::"
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/3": {
    "long_instructions": "# Write Your Own Sprite Interaction\n\nNow the elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.\n\n# Do This\n\n1.  Run the program to see how it works.\n2.  Add code to make the elephant push the hippo off the screen.\n    -   Drag out an [`if ()`(#64B5F6)][0] statement inside the draw loop.\n    -   Use an [`isTouching()`(#f78183)][1] block with the [`if ()`(#64B5F6)][2] statement to detect when the elephant is touching the hippo.\n    -   Inside the  [`if ()`(#64B5F6)][3] statement, assign the hippo's [`velocityY`(#f78183)][4] to match the elephant's [`velocityY`(#f78183)][5]. "
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/4": {
    "long_instructions": "# Displace\n\nThis type of sprite interaction from the previous levels is so common that there's a block for it: [`sprite.displace()`(#f78183)][0]. Someone tried to use the [`sprite.displace()`(#f78183)][1] block to make the **elephant push the hippo**, but there is a bug.\n\n# Do This\n\n1.  Run the program to see what's happening.\n2.  Take a look at the new block and how it is being used.\n3.  Fix the block so that the elephant is pushing the hippo."
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/5": {
    "long_instructions": "# More Collision Blocks\n\nThree new types of sprite interactions have been added to the toolbox, [`sprite.collide()`(#f78183)][0], [`sprite.bounce()`(#f78183)][1], and [`sprite.bounceOff()`(#f78183)][2]. How do you think they'll affect the sprites?\n\n# Do This\n\n1.  Switch out the displace block for the new blocks, one at a time to see what each one does. ( [Show me where][3] )\n    -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._\n2.  Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?\n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]: # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\"",
    "callouts": {
      "CSD_U3_L13_S6_C1": "Change this block."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/6": {
    "dsls": {
      "description": "Practice using the new collisions blocks.",
      "display_name": "Collisions Practice"
    },
    "sublevels": {
      "CSD U3 collisions types_2023": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make the basketball interact with the wooden floor.",
        "long_instructions": "# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: [`displace()`(#f78183)](/docs/ide/gamelab/expressions/displace), [`collide()`(#f78183)](/docs/ide/gamelab/expressions/collide), [`bounce()`(#f78183)](/docs/ide/gamelab/expressions/bounce), and [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff).  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n# Do This\r\n\r\n1) ::: details [Choose the best block to model the basketball's interaction with the floor.]\r\n   - Drag out each of the collision blocks, one at a time. ( [Show me where](#triggercallout=code_triggered) )\r\n   - Keep switching out the collision blocks with a different collision block until you find the one that best matches the ball's interaction with the floor.\r\n   - *You can also read more about each of the collision block in the \"Help and Tips\" tab to see how each works.*\r\n:::",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types2_2023": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make the arrow stop at the apple.",
        "long_instructions": "# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: [`displace()`(#f78183)](/docs/ide/gamelab/expressions/displace), [`collide()`(#f78183)](/docs/ide/gamelab/expressions/collide), [`bounce()`(#f78183)](/docs/ide/gamelab/expressions/bounce), and [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff).  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n\r\n# Do This\r\n\r\n1) ::: details [Choose the best block to make the arrow stop when it reaches the apple.]\r\n   - Drag out each of the collision blocks, one at a time. ( [Show me where](#triggercallout=code_triggered) )\r\n   - Keep switching out the collision blocks with a different collision block until you find the one that  makes the arrow stop when it reaches the apple.\r\n   - *You can also read more about each of the collision block in the \"Help and Tips\" tab to see how each works.*\r\n:::",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types3_2023": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make one cart push the next.",
        "long_instructions": "<img src=\"https://images.code.org/15e2ef8c71f9f194115523cea1305cae-image-1592927136250.2020-06-23 11_45_27.gif\" style=\"float:right\">\r\n\r\n# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: [`displace()`(#f78183)](/docs/ide/gamelab/expressions/displace), [`collide()`(#f78183)](/docs/ide/gamelab/expressions/collide), [`bounce()`(#f78183)](/docs/ide/gamelab/expressions/bounce), and [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff).  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n\r\n# Do This\r\n\r\n1) ::: details [Choose the best block to make the gray minecart stop and push the second cart.]\r\n   - Drag out each of the collision blocks, one at a time. ( [Show me where](#triggercallout=code_triggered) )\r\n   - Keep switching out the collision blocks with a different collision block until you find the one that makes the gray minecart stop and push the second cart.\r\n   - *You can also read more about each of the collision block in the \"Help and Tips\" tab to see how each works.*\r\n:::\r\n",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types4_2023": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Help her push the suitcase.",
        "long_instructions": "<img src=\"https://images.code.org/7429509e250d36baaceb6d1a6ce89f3b-image-1592934922226.2020-06-23 13_54_13.gif\" style=\"float:right\">\r\n\r\n# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: [`displace()`(#f78183)](/docs/ide/gamelab/expressions/displace), [`collide()`(#f78183)](/docs/ide/gamelab/expressions/collide), [`bounce()`(#f78183)](/docs/ide/gamelab/expressions/bounce), and [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff).  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n\r\n# Do This\r\n\r\n1) ::: details [Choose the best block to make the child push the suitcase.]\r\n   - Drag out each of the collision blocks, one at a time. ( [Show me where](#triggercallout=code_triggered) )\r\n   - Keep switching out the collision blocks with a different collision block until you find the one that makes the child push the suitcase.\r\n   - *You can also read more about each of the collision block in the \"Help and Tips\" tab to see how each works.*\r\n:::\r\n\r\n",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/da47c7825bb2cf05125f5b0467895846-image-1585722435633.gif\" style=\"float:right\">\n\n# Sprite Interactions\n\nYou've now seen four different types of sprite interactions.  You'll need them **all** for this challenge.\n\n# Do this\n\n1.  For each pair of animals, choose the sprite interaction that matches the target image on the right.",
    "mini_rubric": {
      "rubric_key_concept": "Model complex movement on a coordinate plane.",
      "rubric_performance_level_1": "The program runs exactly as in the target image, with all sprite interactions shown, and there are no errors in the code.",
      "rubric_performance_level_2": "Multiple sprite interactions are included in the program, and at least two are as shown in the target image.",
      "rubric_performance_level_3": "There is at least one sprite interaction, but it may not be as shown in the target image.",
      "rubric_performance_level_4": "No sprite interactions are in the program."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/23/levels/8": {
    "dsls": {
      "description": "Try out these new blocks and challenges with collisions.",
      "display_name": "Collision Challenges"
    },
    "sublevels": {
      "CSD U3 collisions debug_2023": {
        "display_name": "Debug Colliders",
        "bubble_choice_description": "Set a sprite's debug property to understand how it bounces.",
        "long_instructions": "# Debug\r\n\r\nSometimes sprites will behave in ways that are unexpected. There is a special [`debug`(#f78183)](/docs/ide/gamelab/expressions/debug) property you can use to better understand why the sprites interact the way that they do.\r\n\r\n# Do This\r\n\r\nThese two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!\r\n\r\n1) Run the code and watch the way that the coins interact.\r\n2) Turn \"on\" the debugging feature for both sprites and run the code again.\r\n3) Change the gold coin's starting x position to 51 and run the code again.\r\n4) Discuss with a partner: Why do you think the coins are bouncing strangely?\r\n"
      },
      "CSD U3 collisions setCollider_2023": {
        "display_name": "Collider Shape",
        "bubble_choice_description": "Learn how to change how sprites interact based on their collider shape.",
        "long_instructions": "# setCollider\r\n\r\nSprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the [`setCollider()`(#f78183)](/docs/ide/gamelab/expressions/setCollider) block, which lets you pick between a \"rectangle\" or a \"circle\".  By default all colliders are \"rectangle\".\r\n\r\n# Do This\r\n\r\n1) Change the collider shape for the gold coin from \"rectangle\" to \"circle\".\r\n2) Add a new collider block for the silver coin, and choose \"circle\" for the shape of the collider.\r\n3) Run the code again to see how the sprites bounce.\r\n\r\n\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r\n\r\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r\n"
      },
      "CSD U3 collisions bounciness_2023": {
        "display_name": "Bounciness",
        "bubble_choice_description": "Control how much sprites bounce when they interact.",
        "long_instructions": "<img src=\"https://images.code.org/5976aca3356455b4882d2e5d0a62a26f-image-1585825944588.gif\" style=\"float:right\">\r\n\r\n# Bounciness\r\n\r\nSo far, [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff) has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the new [`bounciness`(#f78183)](/docs/ide/gamelab/expressions/bounciness) block to tell your sprite how much to slow down or speed up when it bounces off something else.\r\n\r\n# Do This\r\n\r\n1) Read the code below and then run the program to see the behavior of the basketball and pool ball.\r\n2) Use the new block to set the **bounciness** of your soccer ball.\r\n3) Run the code again to see how the sprites bounce off the floor.\r\n\r\n\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r\n\r\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r\n\r\n[//]: #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)\r\n\r\n"
      },
      "CSD U3 L18 Freeplay_2023": {
        "display_name": "Collect The Sprites",
        "bubble_choice_description": "Use what you've learned so far to create an animated scene with one sprite \"collecting\" other sprites!",
        "long_instructions": "<img src=\"https://images.code.org/ac739fc7575385c1c4c27de4b8309252-image-1665272521728.gif\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Collect All The Sprites\r\n\r\nUse what you've learned so far to create an animated scene with one sprite \"collecting\" other sprites!\r\n\r\nFor example, you could program a character to collect all the trash and push the items to a recycle bin, or you could have a dog move around or \"herd\" several sheep by pushing them to a corner of the screen, or even an astronaut who collects several stars by pushing them to their spaceship!\r\n\r\nSee image to the right for an example! Feel free to be creative and create whatever animated scene you want!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      },
      "CSD U3 L2 Freeplay2_2023": {
        "display_name": "Deflect The Sprites",
        "bubble_choice_description": "Use what you've learned so far to create an animated scene with one sprite \"deflecting\" other moving sprites!",
        "long_instructions": "<img src=\"https://images.code.org/532a5f285621838539579ded721e60aa-speedGhost.gif\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Deflect The Sprites\r\n\r\nUse what you've learned so far to create an animated scene with one sprite \"deflecting\" other moving sprites!\r\n\r\nFor example, you could program several lemons to fall from the top of the screen and a character that does not like lemons could \"deflect\" them when they touch the lemons.\r\n\r\nGive yourself an added challenge and add a score to your animation so that whenever your sprite touches one of your falling sprites, you get a point!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Flyer Game\n\nIn this flyer game, the player tries to collect coins, and the rocks push the player across the screen.  When the player goes off the screen, the game is over.\n\nPlay the game a few times and discuss it with your partner.  You have already learned all the skills you need to code this game.  You'll be making your own flyer game in this mini-project."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/67d00c99c3715022542ba3ea4a6bd8cf-image-1585726110948.gif\" style=\"float:right\">\n\n# Create Your Sprites\n\nFirst create the sprites you will use in your program. The player sprite has already been created for you, but you can change its animation.\n\nYou'll need at least 4 sprites: a player (the flyer), a target (the coin), and two obstacles (the rocks). You can change their animations to anything you want.\n\n# Do This\n\n1.  Go to the animation tab and make sure that you have the images that you want.\n    -   _The flyer, coin and rock are already there, but you can use whatever images you want._\n2.  Find the code comment `//GAME SETUP`.\n3.  Create three more sprites: the target and two obstacles.\n4.  Set each sprite to the animation you chose for it.\n5.  Scale each one to the size you want.\n6.  Place them where you want them to be on (or off) the screen.\n    -   _In the sample game, the obstacles and coin were placed randomly, but you don't need to do that yet._\n7.  Set the starting velocities of the obstacles. Use the x velocity to move left and right, or use the y velocity to move up and down.\n8.  Test your program. The player and target should be on the screen, and the obstacles should start off screen and move across the screen from left to right and up to down."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/cdddf2fa838574cd428d51a4716b4277-image-1585726786629.gif\" style=\"float:right\">\n\n# Falling\n\nIf the user doesn't press any keys, the player sprite should fall.\n\n# Do This\n\n1.  Find the code comment `// FALLING`.\n2.  Use the counter pattern to with the player sprite's velocityY to make the flyer fall.\n3.  Test your code to make sure that it works. \n    -   _The sprite should fall faster as it goes down the screen._",
    "callouts": {
      "CSD_U3_L13_S8_C1": "Set the velocity here"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/0a7336d6b5107c50e304a4e3cb88b912-image-1585727046118.gif\" style=\"float:right\">\n\n# Jumping\n\nNext, the player sprite needs to jump when the user presses the \"up\" arrow.\n\n# Do This\n\n1.  Find the code comment `// PLAYER CONTROLS`\n2.  Add a conditional ([`if()`(#64B5F6)][0] block) that checks whether the user is pressing the \"up\" arrow.\n3.  Add code inside the conditional that will change the sprite's velocity to move up if the \"up\" arrow is pressed.\n4.  Test your code to see whether it works."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/2e264edbb971f8fd66acb4ddf0a5b907-image-1585727616296.gif\" style=\"float:right\">\n\n# Floating Left and Right\n\nThe flyer should also be able to float left and right.  \n\n# Do This\n\n1.  Find the code comment `//PLAYER CONTROL`\n2.  Add a conditional that decreases the sprite's x velocity when the \"left\" arrow is pressed.\n3.  Add a conditional that increases the sprite's x velocity when the \"right\" arrow is pressed.\n    -   _Hint: Your code should use a counter pattern **and** the [`velocityX`(#f78183)][0] block._\n4.  Test your code to make sure it works."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/3d7349f8509b280e3607bbc83545f63c-image-1585728699723.gif\" style=\"float:right\">\n\n# Looping\n\nWhen the obstacles move off the screen, they should loop back to the other side, at a random position.\n\n# Do This\n\n1.  Find the code comment `// LOOPING`\n2.  Add a conditional that checks the horizontal obstacle's x property to see whether it has moved off the screen.\n3.  If it has moved off the screen...\n    -   Reset its x property to \"loop\" it back to the other side of the screen\n    -   Set its y property to a random number between 50 and 350.\n4.  Test your code to make sure the first obstacle loops.\n5.  Add a conditional that checks the vertical obstacle's y property to see whether it has moved off the screen.\n6.  If it has moved off the screen...\n    -   Reset its y property to \"loop\" it back to the other side of the screen\n    -   Set its x property to a random number between 50 and 350."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/f4c78598af1ce2fa3d368bcd9498a0d2-image-1585729468198.gif\" style=\"float: right;\">\n\n# Sprite Interactions\n\nWhen your character touches the coin you should reset it somewhere on the screen, and the obstacles should push the player across the screen.\n\n# Do This\n\n1.  Find the code comment `SPRITE INTERACTIONS` and read the comments in that section.\n2.  Create a conditional that checks whether the player is touching the target, and moves the target to the random place if it's true.\n3.  Create two new collisions that make the two obstacles push the player across the screen.\n4.  Test your code to make sure it works."
  },
  "https://studio.code.org/s/csd3-2023/lessons/24/levels/8": {
    "long_instructions": "# Review Your Game\n\nTest your game to make sure it has everything it needs.\n\n# Do This\n\n1.  Play your game several times.\n2.  Read over your project guide and check that you have followed your plan.\n3.  Make any last changes."
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/1": {
    "contained levels": [
      {
        "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Functions\n\nThis program creates several functions called `drawBackground`, `drawPlanet`, and `drawStar`, and then calls these functions in order to draw what is inside them. When you run the program, what do you think you will see on the screen?\n\n# Do This\n\n1.  **Read the program** and **discuss with your partner** what will be drawn on the screen and why. \n2.  **Record your prediction** in the box below.\n3.  **Run the program** to see what this program does!\n    -   Tip: Run the program multiple times"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/2": {
    "display_name": "Video: Calling and Defining Functions",
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Calling Functions\n\nFunctions let you build your own blocks and decide what code goes inside of them.  This program has already created two functions, but only one of them is being called.\n\n# Do This\n\n1.  **Call the drawBalloons function** to reveal the full image. \n    -   Drag out a [`myFunction();`(#68D995)][0] block.\n    -   Replace \"myFunction\" with the name of the second function created in the program.\n        -   _Tip:_ Just as with all other blocks, spelling and capitalization are important here.\n    -   Use the function that is being called as a guide.",
    "teacher_markdown": "**Introducing Functions**\n\nIn these first several lessons students are just being shown the syntax of functions and are not asked to write or create their own. It can be useful to explain creating a function as basically “creating a new block” just like another programmer created the “isTouching” or “velocity” blocks that they’ve seen actually contain other more complex code."
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/3": {
    "long_instructions": "# Reordering Code\n\nPlacing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.\n\n# Do This\n\nThis program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.\n\n1.  **Read the 4 functions** to understand what each one does.\n2.  **Call the functions** in an order that draws the scene in the way that looks best to you.\n    -   Drag out a [`myFunction();`(#68D995)][0] block for each of the functions.\n    -   Replace the \"myFunction\" in this block with the name of the functions created in the program.\n    -   Rearrange the order that you call these [`function();`(#68D995)][1] blocks to see the effects of calling them in different orders has on the scene."
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/4": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "The red square will be drawn but the green one will not. You cannot call functions after they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "The green square will be drawn but the red one will not You cannot call functions before they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Both squares will be drawn. You can create functions anywhere you like in your code.",
              "correct": true,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Neither square will be drawn. There is an error in the code.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            }
          ],
          "markdown": "# Does It Matter Where You Create Functions?\n\nSo far all your functions have been created at the bottom of your code. What do you think will happen if you call a function before it's defined?\n\nNotice that the red square is drawn **before** its function is created while the green square is drawn **after** its function is created. Which of these do you think will be drawn?\n"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/5": {
    "dsls": {
      "description": "Practice using functions and learn more about what makes them so useful.",
      "display_name": "Functions Practice"
    },
    "sublevels": {
      "CSD U3 Functions Call Draw Loop_2023": {
        "display_name": "Calling Functions in the Draw Loop",
        "bubble_choice_description": "Call the function to draw the background in the draw loop.",
        "long_instructions": "# Calling Functions in the Draw Loop\r\n\r\nYou can call a function inside the draw loop, just as you would anywhere else in your code.\r\n\r\n# Do This\r\n\r\nA function that will draw a background has been created for you. A sprite has also been created that will move across the background.\r\n\r\n1) Run the program to see what it happening with the scene so far.\r\n2) ::: details [Add a function call to draw the background.]\r\n   - Drag out a [`myFunction();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) block **inside** the draw loop to **call the function**.\r\n   - Make sure to place this function call **before** the draw sprites block so that the background is still being drawn behind your sprites.\r\n:::\r\n**Important Note:** Don't **create** functions inside the draw loop. Make them at the bottom of your code."
      },
      "CSD U3 Functions Reset Sprite_2023": {
        "display_name": "Calling Functions Multiple Times",
        "bubble_choice_description": "Make the flyer reappear on the right side when it goes off the left.",
        "long_instructions": "# Calling Functions Multiple Times\r\n\r\nYou'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\r\n\r\n# Do This\r\n\r\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen?\r\n\r\n1) ::: details [Call the setFlyman() function to make the sprite go back across the screen.]\r\n   - **Note:** The setFlyman() function is already called once at the beginning of your program to make the sprite move across the screen once.\r\n   - Find the [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement inside the draw loop.\r\n   - Read the condition of this [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement to understand what it is checking.\r\n   - Drag out a [`myFunction();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) call inside this [`if ()`(#64B5F6)](/docs/ide/gamelab/expressions/ifBlock) statement to make the sprite move across the screen **multiple times**.\r\n:::",
        "teacher_markdown": "**Why Use Functions** \r\n\r\nThis and the next two levels introduce three uses of functions, namely removing repetition in programs, allowing code to quickly be changed at multiple points, and providing organization in code. Students will need to write more of their own functions in these levels."
      },
      "CSD U3 Functions Randomize Sprite_2023": {
        "display_name": "Making Changes to Functions",
        "bubble_choice_description": "Change the setFlyer() function so that the flyer appears at a random y with random velocity.",
        "long_instructions": "# Making Changes to Functions\r\n\r\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\r\n\r\n# Do This\r\n\r\n1) ::: details [Make changes to the setFlyer() function to make the sprite's location and speed random.]\r\n   - Find where the [`setFlyer();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) is created.\r\n   - Make changes **inside this function** so that the flyer:\r\n      - Starts at a random [`y`(#f78183)](/docs/ide/gamelab/expressions/y) location between 0 and 400.\r\n      - Moves at a random velocity every time the sprite is reset.\r\n:::"
      },
      "CSD U3 Functions Create Function_2023": {
        "display_name": "Creating Functions to Organize Code",
        "bubble_choice_description": "Add code to the drawNight() function to create a night scene.",
        "long_instructions": "# Creating Functions to Organize Code\r\n\r\nIn Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.\r\n\r\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png\" style=\"float:right;width:150px\">\r\n\r\n# Do This\r\n\r\nThis program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.\r\n\r\n1) **Write the drawNight() function** which has been created but is empty.\r\n2) Hint: Look at the picture to the right for how your night image should look. \r\n   - Can you use the drawDay() function to help you at all?"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/6": {
    "long_instructions": "# Using Functions\n\nWhat are three ways that functions can be useful when you are writing programs?\n\n_Hint: Go back to the practice levels for review if you are not sure._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/7": {
    "long_instructions": "# Write Your Own Function\n\nTime to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.\n\n# Do This\n\n1.  **Read and run the code** that already exists to make sure you know how it works.\n2.  **Write the code for the setCoin()** function to do the following:\n    -   Set the coin's velocity to move down.\n    -   Set the coin's y position to the top of the screen\n    -   Randomize the coin's x position\n3.  You can go look at some of the previous levels if you need help.",
    "teacher_markdown": "**Functions in Context** \n\nIn this and the next two lessons, students will use functions to organize code within a simple game. While it is not identical to the side scroller, many of the skills and uses of functions in these levels can and should be used when they complete their side scroller."
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/8": {
    "long_instructions": "# Catch the Coin, Increase the Score\n\nLet's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.\n\n# Do This\n\n1.  Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.\n2.  Make sure you're **calling your function** to reset the coin once it's been caught.\n3.  Play the game and **randomize the velocity of the coin** to a range that you think is fun."
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/9": {
    "long_instructions": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n# Do This\n\n1.  Use an **if-statement** and two separate functions to draw your backgrounds.\n2.  Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"silly\" background are. Have fun with it!",
    "mini_rubric": {
      "rubric_key_concept": "Define and call functions to organize code and make it easier to reuse.",
      "rubric_performance_level_1": "The two functions are defined and called within the if statement as instructed, so that different backgrounds display according to the current score.  Code is correctly organized inside and outside the draw loop, and there are no extra blocks.",
      "rubric_performance_level_2": "At least one new background function is defined and called successfully inside the program, but may not work exactly as instructed.  Code is correctly organized inside and outside the draw loop.",
      "rubric_performance_level_3": "A function is both defined and called inside the program, but there may be major errors that prevent it from running successfully, or code has been incorrectly placed in the draw loop.",
      "rubric_performance_level_4": "There are no new functions in the program."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/25/levels/10": {
    "dsls": {
      "description": "Improve your game and try out these challenges with functions.",
      "display_name": "Functions Challenges"
    },
    "sublevels": {
      "CSD U3 Functions challenge drawscene_2023": {
        "display_name": "Creating Functions to Draw Scenes",
        "bubble_choice_description": "Create two functions to draw two different scenes",
        "long_instructions": "<img src=\"https://images.code.org/0b70fff7d9395197d2ba3a351aa32eeb-image-1591297781924.gif\" style=\"float:right;width:200px;\"/>\r\n\r\n# Creating Functions to Draw Scenes\r\n\r\nThe provided code draws one of two different scenes based on where the mouse is on the screen. It either calls the [`drawScene1();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) function or the [`drawScene2();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) function. However, these functions don't exist yet! \r\n\r\nFeel free to be creative and draw whatever two scenes you want\r\n\r\n# Do This\r\n\r\n1) Create the two functions needed for this program.\r\n2) Fill them in with code to draw two different scenes.\r\n"
      },
      "CSD U3 Functions challenge falling objects_2023": {
        "display_name": "Paddle Game 1",
        "bubble_choice_description": "Use functions to create and organize this paddle game!",
        "long_instructions": "<img src=\"https://images.code.org/6b4d0e5722ef50d6873ebc36a2a6a617-gamelab-level.gif\" style=\"float:right;width:200px;\"/>\r\n\r\n# Creating Functions to Organize a Game\r\n\r\nThe provided code creates your starting animations for a simple paddle game. There are several functions missing that are needed to make the game work! Work through this challenge level and the next challenge level to complete the paddle game.\r\n\r\n# Do This\r\n\r\nCreate the functions for the game background and paddle movement.\r\n\r\n1) ::: details [Create the gameBackground() Function.]\r\n\t- Create a function called gameBackground() and add code to the function to create a background of your choice.\r\n    - Call the gameBackground() function in the draw loop.\r\n    :::\r\n2) ::: details [Create the movePaddle() Function.]\r\n\t- Create a function called movePaddle.\r\n    - Add code to make the paddle move left and right when the left and right keys are pressed.\r\n    - Call the movePaddle() function in the draw loop.\r\n    :::\r\n\r\nMove on to the [next Challenge Level](./3) to make the ball bounce and collect the stars!\r\n"
      },
      "CSD U3 Functions challenge falling objects 2_2023": {
        "display_name": "Paddle Game 2",
        "bubble_choice_description": "Use functions to finish this paddle game!",
        "long_instructions": "<img src=\"https://images.code.org/dc0680abc4530881300b7283f8c2f4d9-image-1664920644792.gif\" style=\"float:right;width:200px;\"/>\r\n\r\n# Creating Functions to Organize a Game\r\n\r\nGreat job! There are still a couple functions missing that are needed to make the game work! Work through this challenge level to complete the paddle game.\r\n\r\n# Do This\r\n\r\nCreate the functions to make the ball bounce off of objects and collect the stars.\r\n\r\n1) ::: details [Create the ballBounce() Function.]\r\n\t- A special sprite has already been created for you called \"EdgeSprite\" (*see line 19*). This creates an \"invisible\" sprite around the edges of your screen which can be used to bounce sprites off of and keep them from going out of \"bounds\"!\r\n    - Create a function called ballBounce() and add code the following code to make the ball bounce off of all necessary objects:\r\n    \t- Add code to make the ball [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff) the paddle.\r\n        - Add code to make the ball [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff) the brick sprites.\r\n        - Add code to make the ball [`bounceOff()`(#f78183)](/docs/ide/gamelab/expressions/bounceOff) the \"topEdge\", \"bottomEdge\", \"leftEdge\", and \"rightEdge\" of the invisible EdgeSprite. **See image below for additional help if needed**.\r\n\t- Call the ballBounce() function in the draw loop.\r\n    :::\r\n2) ::: details [Create the collectStars() Function.]\r\n\t- Create a function called collectStars.\r\n    - Add code to make each of the stars disappear when the ball touches them.\r\n    - Hint: Think about which piece of code makes sprites visible and invisible!\r\n    - Call the collectStars() function in the draw loop.\r\n    :::\r\n3) **Bonus Challenge:** Create a function to set the score whenever a star is collected!\r\n\r\n::: details [**Show Me How to Use the EdgeSprite**]\r\n\r\n<img src=\"https://images.code.org/6d9419b87ef51ad6aecfdcedc668528b-image-1664925138626.gif\" style=\"width:200px;\"/>\r\n:::\r\n"
      },
      "CSD U3 L19 Freeplay_2023": {
        "display_name": "Function Scene Challenge",
        "bubble_choice_description": "Try to draw a single item in a function and then draw that same item multiple times by just calling the single item function several times in a second function.",
        "long_instructions": "<img src=\"https://images.code.org/ef978fb0810b02542a72999dff67882c-fish3.gif\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Calling a Function Multiple Times\r\n\r\nUse what you've learned so far to draw a single item once in a function and then draw that same item multiple times by calling the single item function several times in a second function.\r\n\r\nFor example, you could use the drawing tools to draw a single fish in a function called [`singleFish();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction). Then, you could call [`singleFish();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) multiple times in a new function called [`multipleFish();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) in order to draw the fish more than once! *See below for an image of this example*.\r\n\r\n*Tip: Use drawing tools to practice using functions for this challenge rather than using sprites and the Draw Loop*\r\n\r\nChallenge yourself even more by giving your single item a random location each time the function is called!\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n::: details [**Show Me An Example**]\r\n\r\n<img src=\"https://images.code.org/9f19a9b7059a9b9a2648f4d453cdc776-image-1665431044436.png\" style=\"width:300px; margin:10px\">\r\n\r\n*The function [`fish();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) which uses drawing tools to draw a single fish is not shown.*\r\n:::",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      },
      "CSD U3 L24 Freeplay2_2023": {
        "display_name": "Another Scene Challenge ",
        "bubble_choice_description": "Try to draw several single items in their own functions and then call those functions multiple times to draw them more than once and create a new scene!",
        "long_instructions": "<img src=\"https://images.code.org/4582175201b3fee9a03e96be68d841a1-scene2.gif\" style=\"width:200px; float:right; margin-left:20px\">\r\n\r\n# Create a Scene\r\n\r\nUse what you've learned so far to draw single items once in their own functions and then draw those same items multiple times by calling the single item functions several times to make a scene.\r\n\r\nFor example, you could use the drawing tools to draw a single tree in a function called [`tree();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and a single cloud in a function called [`cloud();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction). Then, you could call [`tree();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) multiple times in a new function called [`manyTrees();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and you could call [`cloud();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) multiple times in a new function called [`manyClouds();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction). The last step would be to just call [`manyTrees();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and [`manyClouds();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction)\r\n in order to draw your scene!\r\n\r\nChallenge yourself even more by giving your single items random locations each time the function is called!\r\n\r\nYou could use functions to be even ***more*** organized with the above example and create a function called [`drawScene();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and call [`manyTrees();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and [`manyClouds();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) within your [`drawScene();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) function. *See below for an example*.\r\n\r\n*Tip: Use drawing tools to practice using functions for this challenge rather than using sprites and the Draw Loop*\r\n\r\n\r\nWhen you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n::: details [**Show Me An Example of Functions Called within Functions**]\r\n\r\n<img src=\"https://images.code.org/06586911da82d7cb91d6c9f11dff587d-image-1665430208793.png\" style=\"width:300px; margin:10px\">\r\n<br>\r\n<img src=\"https://images.code.org/51731a5b1c2e3122a5399789e835da76-image-1665430288731.png\" style=\"width:200px; margin:10px\">\r\n\r\n*The [`tree();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) and [`cloud();`(#68D995)](/docs/ide/gamelab/expressions/callMyFunction) functions not shown.*\r\n:::\r\n\r\n",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a focused free-play level: students are free to design a scene based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their scene, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop a web page of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\nIf you were making this program…\n\n-   What sprites would you need?\n-   What variables would you need?\n-   What functions would you use?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/2": {
    "dsls": {
      "markdown": "# Plan Your Project\n\nTake a look at the project guide, which has already been filled out for you.\n\n* Does the project guide describe the same sprites that you thought of?\n* Does it use the same variables to store information?\n* Are the functions that it describes the same as the functions you described?\n"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/3": {
    "long_instructions": "# Getting Started: Set Animations\n\nBefore you get started, you'll want some better animations for each of your sprites.\n\n# Do This\n\n-   In the Animation Tab are animations for each of your sprites. Go look at what they are.\n-   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/4": {
    "long_instructions": "# Moving The Enemies\n\nYou'll need to get your enemy sprites to a random position and moving across the screen.\n\n# Do This\n\n-   After each enemy sprite is created...\n    -   Set its x position to 0.\n    -   Set its y position to be a random number between 150 and 250.\n    -   Set its x velocity to 2.\n-   Test your program. Your enemy sprites should now be moving across the bridge."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/5": {
    "long_instructions": "# Moving Left and Right\n\nNow you'll just need to get your character moving left and right and changing its animations.\n\n# Do This\n\n-   Inside the `movePlayer` function...\n    -   Use a conditional to detect when the \"right\" arrow is pressed.\n    -   If it is, move the player sprite to the right by 3.\n    -   Use another conditional to move the player to the left when the \"left\" arrow is pressed.\n-   Test your game. Your character sprite should now move left and right when you press the left and right arrows."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/6": {
    "long_instructions": "# Moving Up and Down\n\nYou'll want your player sprite to move up and down as well.\n\n# Do This\n\n-   Inside the `movePlayer` function...\n    -   Use a conditional to detect when the \"up\" arrow is pressed.\n    -   If it is, move the player sprite up by 3.\n    -   Use another conditional to move the player down when the \"down\" arrow is pressed.\n-   Test your code. Your character should now move in all four directions."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/7": {
    "long_instructions": "# Change Player Animations\n\nYou can change the animation when the player changes direction.\n\n# Do This\n\n-   Inside the Animation Tab copy the animation of your player sprite.\n-   Flip each frame of the new animation so that the sprite is facing in the opposite direction.\n-   Rename your new animation.\n-   Inside the `movePlayer` function, set the sprite's animation so that the player changes the direction it is facing when the \"left\" and \"right\" arrows are pressed."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/8": {
    "long_instructions": "# Touching the Cake\n\nIf the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.\n\n# Do This\n\n-   Inside the `enemiesTouchCake` function, use a conditional to detect whether enemy1 has touched the cake.\n-   If it has...\n    -   \"loop\" the enemy back to the left side of the screen\n    -   Set its y position to be a random number between 150 and 250. \n    -   Use the counter pattern to decrease the score by 2.\n-   Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/9": {
    "long_instructions": "# Touching the Cake: Second Ladybug\n\nYour first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.\n\n# Do This\n\nInside the `enemiesTouchCake` function you should have written code that resets `enemy1`.\n\n-   Copy the entire if-statement you wrote in the last level (Ctrl-C).\n-   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\n-   Change the name of the sprite in that code from `enemy1` to `enemy2`.\n\nTest your code. Now both bugs should reset when they touch the cake."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/10": {
    "long_instructions": "# Creating Functions\n\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png\" style=\"float:right; height:90px\">\n\nYour program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.\n\n# Do This\n\n<img src=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png\" style=\"\nfloat:right; height:70px\">\n\n-   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.\n-   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.\n-   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/11": {
    "long_instructions": "# Displace Enemies\n\nIt's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.\n\n# Do This\n\nFor this level you'll be writing code inside the `displaceEnemies` function.\n\n-   Write code that makes player displace both enemy sprites.\n-   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.\n\n_Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/12": {
    "long_instructions": "# Touching the Water\n\nThe last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.\n\n# Do This\n\nFor this level you'll be writing code inside the `enemiesTouchWater` function.\n\n-   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.\n-   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use."
  },
  "https://studio.code.org/s/csd3-2023/lessons/26/levels/13": {
    "dsls": {
      "description": "\nMake It Your Own\nYou just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?",
      "display_name": "Challenges"
    },
    "sublevels": {
      "CSD U3 AnimationsMulti defender background_2023": {
        "display_name": "High Score Background",
        "bubble_choice_description": "Create a new background that shows up when players reaches a good score of your choosing",
        "long_instructions": "# High Score Background\r\n\r\nCreate a new background that shows up when players reaches a good score of your choosing. (e.g. Turn the background pink when the player gets over 10 points)\r\n\r\n# Do This\r\n* When drawing the background, add an if else statement to check if the score is above some number like 10\r\n* Put the normal background in the else branch\r\n* Draw a different background if the score is above that number",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender randomizespeed_2023": {
        "display_name": "Randomize Enemy Speed",
        "bubble_choice_description": "Randomize the speed of the enemies",
        "long_instructions": "# Randomize Enemy Speed\r\n\r\nUse random numbers to make some enemies faster or slower\r\n\r\n# Do This\r\n\r\n* Create two variables to store the speed of `enemy1` and `enemy2`\r\n* Set the velocity of the two enemies using the two speed variables\r\n* When you create each enemy, generate a random speed",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender changevisuals_2023": {
        "display_name": "Change the Visuals",
        "bubble_choice_description": "Change the visuals of the game so that your player, enemies, or cake look different",
        "long_instructions": "# Change the Visuals\r\n\r\nChange the visuals of the game so that your player, enemies, or cake look different.\r\n\r\n# Do This\r\n\r\n* Change the player's sprite\r\n* Change the enemy's sprite\r\n* Change the cake's sprite",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender endgame_2023": {
        "display_name": "End the Game",
        "bubble_choice_description": "End the game after three enemies have gotten to the cake.",
        "long_instructions": "# End the Game\r\n\r\nEnd the game when three enemies get to the cake and print the score.\r\n\r\n# Do This\r\n\r\n* Create a variable that keeps track of how many enemies have gotten to the cake.\r\n* Use a conditional to check whether an enemy has gotten to the cake.\r\n   * If it has, increase your variable.\r\n* Use a conditional to check whether the value of your variable has reached three.\r\n   * If it has, cover the game with an end screen that displays the final score.\r\n",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/1": {
    "display_name": "Sample Platform Jumper Game",
    "long_instructions": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Build a Platform Jumper\n\nAs you build your platform jumper, you'll be using the problem solving process.\n\n## Define\n\nThe problem is clearly defined for this game, because you already looked at a sample version.  However, you might want to make some changes.   Make sure any new features for your game are clearly defined.\n\n## Prepare\n\nBefore you start to code, you need to fill out a project guide.  It will get you ready and make the coding a lot easier.\n\n## Try\n\nYou'll try out your plan when you start coding.  Don't forget all of your resources, such as the documentation and Help and Tip tab, as you begin to code.\n\n## Reflect\n\nAfter finishing your project, you'll want to reflect on whether your game turned out how you planned, and ways that you could improve your process for the next time.\n"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/3": {
    "long_instructions": "# Background\n\nThe first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where][0])\n\nIn order for the background function to do something, you have to call it inside the draw loop. ([Show me where][1])\n\nThere is also an empty function named `background2`. ([Show me where][2])  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.\n\n# Do this\n\n-   Read the code for `background1`.\n-   Fill the `background2` function with new code for a second background.\n-   Test your `background2` function by calling it inside the draw loop.\n\n_Hint: It's much easier to copy, paste, and make small changes to your code in text mode._",
    "callouts": {
      "CSD_U3_L16_S3_C1": "the function that draws the background",
      "CSD_U3_L16_S3_C2": "the code that calls the function",
      "CSD_U3_L16_S3_C3": "Change this function."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/4": {
    "long_instructions": "# Score Variable\n\nNow that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.\n\nYou should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.\n\n# Do This\n\n-   Create a score variable at the beginning of your game program. ( [Show me the block][0] )\n-   Set the score equal to 0.",
    "callouts": {
      "callout": "This block creates a variable."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/5": {
    "long_instructions": "# Choosing your Background\n\nNow that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 25 Level 9][0]\n\n# Do This\n\n-   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.\n-   Test your code by changing the start score to 100, then running to code to see whether the background changes.\n\n_Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/6": {
    "long_instructions": "# Make the Scoreboard\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\" style=\"float:right;\">\n\nYou'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text \"Score\" and not the actual score. ([Show me where][0])  You can see an example of a working scoreboard in [Lesson 25 Level 9][1].\n\n# Do This\n\n-   Read the code in the `showScore` function.\n-   Call the function inside the draw loop, right after you draw the backgrounds.\n-   Use the `text` block to display the score at the top of the screen.",
    "callouts": {
      "CSD_U3_L17_S7_C1": "Score is printed here."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/7": {
    "long_instructions": "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\" style=\"float: right;\"> \n\nNow that you have your background and your variables, it's time to create your sprites.  Usually, it will be easiest to start with the sprites that are part of the environment, such as your platforms.  The sample game had two platform sprites, but you'll make just one first, then test it before copying and pasting the code to make the second.\n\n# Do This\n\n-   Look at your worksheet and choose a platform sprite to create.\n-   In the \"Create sprites\" area at the top of your code, create your new sprite with the `createSprite` block, giving it the correct position and label (name). ([Show me the block][0])\n-   Use the `setAnimation` and `velocityY` blocks to give your sprite the correct image and downward velocity.\n-   Test the sprite to make sure that it's moving in the correct way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go off the screen and not come back.  You'll make it loop back around in the next level._",
    "callouts": {
      "CSD_U3_S17_L8_C1": "This block creates a new sprite."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/8": {
    "long_instructions": "# Loop the Platform Sprite\n\n<img src=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\" style=\"float: right;\">\n\nRight now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 21 Level 5][0] to see an example of a sprite looping around a screen.\n\n# Do This\n\n-   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.\n-   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.\n-   Call the function inside the draw loop, in the \"update sprites\" area.\n-   Run the code to test your sprite.\n\n_Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_"
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/9": {
    "long_instructions": "# Make your Second Platform\n\n<img src=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\" style=\"float:right;\">\n\nMaking a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"platform\", you could name this one \"platform2\".\n-   Change the starting position of your new platform sprite.\n-   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it.\n\n_Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._"
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/10": {
    "long_instructions": "# Create an Item\n\n<img src=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\" style=\"float:right;\">\n\nNext, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.\n\n# Do This\n\n-   Use the `createSprite` block to make an item sprite in the \"create sprites\" section of your code.\n-   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.\n-   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/11": {
    "long_instructions": "# Loop your Item\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\" style=\"float:right\">\nNow that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.\n\n# Do This\n\n-   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.\n-   Call the function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/12": {
    "long_instructions": "# Make your Second Item\n\n<img src=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\" style=\"float: right\">\n\nNext, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"star\", you could name this one \"star2\".\n-   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/13": {
    "long_instructions": "# Create your Player\n\n<img src=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\" style=\"float:right\">\n\nNow you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.\n\n# Do This\n\n-   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.\n-   Use `setAnimation` to give it the correct image.\n-   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 21 Level 3][0].\n-   Call the `playerFall` function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/14": {
    "long_instructions": "# User Controls\n\nNext, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the up arrow is pressed.\n\n# Do This\n\n-   Create a new `controlPlayer` function in the \"functions\" area of your code.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys. Look at [Lesson 16 Level 6][0] for examples.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed. Look at [Lesson 21 Level 4][1] for examples.\n-   Call the `controlPlayer` function inside the draw loop.\n-   Run the game and test your code."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/15": {
    "long_instructions": "# Player Interactions\n\nThe last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.\n\n# Do This\n\n-   Create a `playerLands` function and add it to the \"functions\" area of your code.\n-   Inside the function, use the `collide` block so that your player can land on both the platforms.\n-   Call the function inside the draw loop.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/16": {
    "long_instructions": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n-   Create a `collectItems` function and add it to the \"functions\" area of your code.\n-   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n-   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 25 Puzzle 9][0] for an example.\n-   Call the function inside the draw loop, in the \"update sprites\" area of your code.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/17": {
    "display_name": "Improve Your Game",
    "long_instructions": "# Review Your Game\n\nLook over your project guide, and play your game a few times to make sure you have completed everything.\n\n-   Does the player sprite move the way it should?\n-   Do all of your interactions work?\n-   Are the platforms moving correctly?\n-   Does the scoreboard work?",
    "mini_rubric": {
      "rubric_key_concept": "Using a structured process to plan and develop a program",
      "rubric_performance_level_1": "The project guide accurately reflects the program, both as shown in the example and as coded by the student.  Relevant functions, variables, and sprites are consistent between the project guide and actual project, with very few exceptions.",
      "rubric_performance_level_2": "The project guide is generally consistent with the sample project and student project, with main functions and sprites included.  There may be some inconsistencies.",
      "rubric_performance_level_3": "The project guide mentions some features of the program and associated functions and sprites, but there are major parts of the program missing from the guide.",
      "rubric_performance_level_4": "The project guide is incomplete or does not seem to describe the program."
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/27/levels/18": {
    "dsls": {
      "description": "Improve your game with these challenges!",
      "display_name": "Challenges"
    },
    "sublevels": {
      "CSD U3 platform challenge animationfacing_2023": {
        "display_name": "Animation Change Direction",
        "bubble_choice_description": "Make your player's animation change direction when the player changes direction.",
        "long_instructions": "<img style=\"float: right\" src=\"https://images.code.org/ffa1fc4ceadb146f2054bb0d36fb62fd-image-1589999874975.16.18 PM.png\" width=\"75\">\r\n<img style=\"float: right\" src=\"https://images.code.org/5ee1e16f1d5434da20814f179cfadce2-image-1589999867082.16.07 PM.png\" width=\"100\">\r\n\r\n# Animation Change Direction\r\n\r\nThe Animation tab lets you duplicate sprite animations and make changes such a flipping images horizontally. Locate and experiment with the options shown here for yourself.\r\n\r\nYou can make your player's animation change the direction it faces with the player's left-to-right movement.\r\n\r\n# Do This\r\n- Prepare an animation for facing the player to the left and the right. Name each animation in a way that makes sense to you.\r\n- Within your `controlPlayer` function, add code to:\r\n  - Switch to the \"left\" animation if the left key is pressed.\r\n  - Switch to the \"right\" animation if the right key is pressed."
      },
      "CSD U3 platform challenge lives_2023": {
        "display_name": "Adding Lives",
        "bubble_choice_description": "Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.",
        "long_instructions": "# Adding Lives\r\n\r\nYou can add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\r\n\r\n# Do This\r\n- Create a variable such as a `lives` and give it a starting value like 3.\r\n- Draw text to the screen to show the label `\"Lives: \"` and the value of `lives`.\r\n- Check for the player's y position to be off the screen (`player.y > 400`) and subtract one from the score.\r\n- Extra challenge: Check for 0 lives left and change the sprites or background to show the game has ended."
      },
      "CSD U3 platform challenge differentitem_2023": {
        "display_name": "New Item",
        "bubble_choice_description": "Add a different type of item for the player to collect or avoid.",
        "long_instructions": "# Different Kind of Item\r\n\r\nYou can add a different type of item for the player to collect or avoid.\r\n\r\n# Do This\r\n- Draw or find a new animation for your item.\r\n- Create a new sprite with the animation. It should start a randomized location.\r\n- Adjust the item's velocity to get it moving.\r\n- Program a new interaction inside the `collectItems` function."
      },
      "CSD U3 platform challenge sidewalls_2023": {
        "display_name": "Side Walls",
        "bubble_choice_description": "Prevent your player from going off the side of the screen.",
        "long_instructions": "# Edge Sprites\r\n\r\nThe special command `createEdgeSprites();` creates four large sprites around the border of the screen hidden just out of view. After creating these sprites you can program your other sprites to collide with them, which is an easy way to keep things from moving off the screen!\r\n\r\n![](https://images.code.org/54a4a0d9d8168cd5363316a67d7a6e23-image-1589992067763.gif)![](https://images.code.org/14d133db384e5e45ee7f25dfad3c1241-image-1589991471283.gif)\r\n\r\n*Edge sprites (left) and a collision with edge sprites (right)*\r\n# Do This\r\n- Use the `createEdgeSprites();` command in the main part of your program where you create your other sprites.\r\n- Create a new function called `sideWalls();` that should:\r\n  - Make the player sprite **collide** with the special hidden sprite named `leftEdge`.\r\n  - Make the player sprite **collide** with the special hidden sprite named `rightEdge`.\r\n- Call the `sideWalls();` function somewhere inside your **draw loop**.\r\n\r\n\r\n\r\n"
      },
      "CSD U3 platform challenge animations_2023": {
        "display_name": "Add New Animations",
        "bubble_choice_description": "Give your game a custom theme by giving your sprites new animations.",
        "long_instructions": "# Add New Animations\r\n\r\nGive your game a custom theme by giving your sprites new animations. You can draw your own or select from the ones in Game Lab.\r\n\r\n# Do This\r\n- Give your character a new animation.\r\n  - You can even create a left facing and right facing animation.\r\n- Give the platforms a new animation.\r\n- Give the collectibles a new animation."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/1": {
    "dsls": {
      "description": "Now that you have all the skills you need, it's time to make your own game!\n\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\n\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game.",
      "display_name": "Create your own game"
    },
    "sublevels": {
      "CSD U3 - Design a Game 1 - Example2_2023": {
        "display_name": "Example A",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example3_2023": {
        "display_name": "Example B",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example5_2023": {
        "display_name": "Example C",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example6_2023": {
        "display_name": "Example D",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example7_2023": {
        "display_name": "Example E",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example8_2023": {
        "display_name": "Example F",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      },
      "CSD U3 - Design a Game 1 - Example9_2023": {
        "display_name": "Example G",
        "long_instructions": "# Example Game\r\n\r\nWith a partner, brainstorm some different ideas for your game. You can think about the games you've already seen, or look at some more sample games to give you ideas.\r\n\r\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game. You'll spend the next few levels creating your game."
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/2": {
    "long_instructions": "# Create your Variables\n\nFirst, you'll need to create all of your variables and put them in the variables area of your code.\n\n-   [Show me the block][0]\n-   [Show me the area in the code][1]\n\nDon't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.",
    "callouts": {
      "CSD_U3_S18_L3_C1": "This block creates a new variable.",
      "CSD_U3_L18_S3_C2": "Variables area"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/3": {
    "long_instructions": "# Create your Backgrounds\n\nNext, you'll create at least three different backgrounds in your game.  Your game needs to use different backgrounds that are displayed according to the user's score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.\n\n-   [Show me the block to create a new function][0]\n-   [Show me the area in the code to put my function][1]\n\nAfter you create your functions, test them by calling them inside the draw loop, one background per test.\n\n-   [Show me the block to call my function][2]",
    "callouts": {
      "CSD_U3_S18_L4_C1": "This block calls your function.",
      "CSD_U3_L18_S4_C2": "Functions area"
    }
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/4": {
    "long_instructions": "# Display Boards\n\nNow that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 25, Level 9][0] for an example of how to make a scoreboard.\n\nFor each display board:\n\n-   Create a function to display the information\n-   Call the function in the draw loop\n\nBe sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/5": {
    "long_instructions": "# Choose your Backgrounds\n\nNow that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 25 Level 9][0].\n\nAfter you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/6": {
    "long_instructions": "# Create your Animations\n\nNext you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/7": {
    "long_instructions": "# Create your Sprites\n\nNext you will create your sprites and give them starting properties in the \"Create Sprites\" area of your code.  For each sprite you should:\n\n1.  Create the sprite in the correct place on the screen\n2.  Set its animation (or color and size)\n3.  Set its velocity and rotation speed, if needed\n4.  Set its collider and bounciness, if needed\n\n**Tip:** After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, then move it back off screen once you know that it looks right.\n\n**Tip:** If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/8": {
    "long_instructions": "# Sprite Movement Functions\n\nNow you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 27 Puzzle 8][0] and `playerFall` in [Lesson 27 Puzzle 13][1].\n\nFor each movement:\n\n1.  Create a function that will make the sprite move in that way\n2.  Call the function inside the draw loop"
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/9": {
    "long_instructions": "# User Controls\n\nNext, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 27 Puzzle 14][0] as an example."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/10": {
    "long_instructions": "# Sprite Interactions\n\nThe last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 27 Puzzle 16][0] and `displaceEnemies` in [Lesson 26 Puzzle 11][1] as examples.\n\nFor each interaction:\n\n1.  Create a function in the functions area of your code\n2.  Call the function inside the draw loop\n\nAfter you make each function, run the code to test it before making another."
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/11": {
    "display_name": "Project - Finishing Touches",
    "long_instructions": "# Review Your Game\n\nLook over the rubric and your project guide to make sure your game has everything it needs.\n\n1.  Have you included comments in your code?\n2.  Do you use functions to organize your code and make it easier to read?\n3.  Do the functions and variables have meaningful names?\n4.  Are you using conditionals and sprite interactions to make the game more interesting?"
  },
  "https://studio.code.org/s/csd3-2023/lessons/28/levels/12": {
    "dsls": {
      "title": "End-Of-Unit Survey!"
    },
    "sublevels": {
      "Student End of Unit Survey - Intro+TeacherMD_csd3_2023": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **three quick questions**.\n\n_Code.org takes your privacy seriously._ Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n",
          "teacher_markdown": "**Teacher End-Of-Unit Surveys:** While your students complete the survey, we would appreciate you completing a quick teacher survey\n\n## [Click Here for Teacher Survey](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3)\n"
        }
      },
      "Student End of Unit Survey - Q1_copy4_2023": {
        "dsls": {
          "answers": [
            {
              "text": "all of the concepts ",
              "correct": true
            },
            {
              "text": "most of the concepts, but not all of them",
              "correct": true
            },
            {
              "text": "about half of the concepts, but not all of them",
              "correct": true
            },
            {
              "text": "some of the concepts, but not most of them",
              "correct": true
            },
            {
              "text": "very few or none of the concepts",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Thinking about what I learned in this unit, I feel like I understand..."
            }
          ]
        }
      },
      "Student End of Unit Survey - Q2_copy4_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I can really be myself in this computer science class."
            }
          ]
        }
      },
      "Student End of Unit Survey - Q3_copy4_2023": {
        "long_instructions": "What else would you like your teacher to know about this class? For example: what did you like best about the class, or what is one thing that could make the class better?\r\n\r\n(Your responses are anonymous. Your teacher can see responses for the whole class, but without names attached)"
      }
    }
  },
  "https://studio.code.org/s/csd3-2023/lockable/1/levels/1": {
    "dsls": {
      "title": "Interactive Animations and Games Post-Project Test"
    },
    "sublevels": {
      "CSD U3 MC Q1_2023": {
        "dsls": {
          "answers": [
            {
              "text": "`a`",
              "correct": false
            },
            {
              "text": "`volume`",
              "correct": true
            },
            {
              "text": "`loudest`",
              "correct": false
            },
            {
              "text": "`100`",
              "correct": false
            },
            {
              "text": "`silent`",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "You want to create a variable to store how loud the music is playing on your cell phone. Which of the following would be the best variable name?"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 5**\n\n`volume` is the most meaningful name. `loudest` and `silent` are possible values for how loud the music is playing, but they are not good variable names.\n"
        }
      },
      "CSD U3 MC Q2_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Move `background(\"blue\");` to the end of the program",
              "correct": false
            },
            {
              "text": "Move `drawSprites();` to the end of the program",
              "correct": true
            },
            {
              "text": "Rename the variable `sprite` to `crab`",
              "correct": false
            },
            {
              "text": "Remove the line of code `background(\"blue\");`",
              "correct": false
            },
            {
              "text": "No change, the program already works",
              "correct": false
            }
          ],
          "markdown": "The program below attempts to draw a crab with a blue background. What change needs to be made so that it works correctly?\n<br><br>\n![](https://images.code.org/34bb691c1fd9a278f739d4a6c8385e22-CSDunit3sprite.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 7**\n\n`drawSprites()` should be called after all the sprites have been created.\n"
        }
      },
      "CSD U3 MC Q4_2023": {
        "dsls": {
          "answers": [
            {
              "text": "`drawRect;` should be at the end of the program",
              "correct": false
            },
            {
              "text": "`fill(\"blue\");` should be moved outside of the function and after `drawRect;`",
              "correct": false
            },
            {
              "text": "`fill(\"blue\");` should be moved outside of the function and before `drawRect;`",
              "correct": false
            },
            {
              "text": "`drawRect;` should be `drawRect();`",
              "correct": true
            },
            {
              "text": "`rect(0, 300, 200, 50);` should be `rect(0, 300);`",
              "correct": false
            }
          ],
          "markdown": "The program below attempts to draw a blue rectangle but does not work as intended. What change needs to be made for the blue rectangle to be drawn?\n<br><br>\n![](https://images.code.org/ff53ff4ce4f5e8d5a151ddca8a6ba9ea-CSDunit3function.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 24**\n\nWhenever you want to use a function you need to call it by its name. To do this you just write the name of the function followed by parentheses.\n",
          "title": "Question 1"
        }
      },
      "CSD U3 MC Q5_2023": {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/4c1d34a18bbc96741a3524588f685716-Q4a.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/f8d6d5d2f909e6f0d7a6a7be17fc7ded-Q4b.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2c922712645ffa2bba2e568a881a0e0f-Q4c.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/91d95231884f016ddb39505da590c7d1-Q4d.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/75ebaac84bc91d138d704db0b256e972-Q4e.png)",
              "correct": false
            }
          ],
          "markdown": "Given the functions below, write a program that will draw the scene on the right.\n<br><br>\n\n| Functions      | Scene |\n| ----------- | ----------- |\n| <img src=\"https://images.code.org/2c614e5926ee3fff343ae24f766d6374-CSDunit3usefunctioncode.png\" style=\"height: 300px\">      | <img src=\"https://images.code.org/132715046162dc2a0a43e09f733c35c8-CSDunit3usefunction.png\" style=\"height: 300px\">       |\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 24**\n\nSince the background is yellow, `drawBackground()` must be called. Since the red rectangle is on top of the green ellipse, `drawTwo()` is called after `drawOne()`.\n"
        }
      },
      "CSD U3 MC Q6_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Call `.moveRight()`",
              "correct": false
            },
            {
              "text": "Add a line of code to change `rect.x = 100;`",
              "correct": false
            },
            {
              "text": "Update the first argument of `rect()` to `100`",
              "correct": true
            },
            {
              "text": "No change needed: the rectangle is animated to move right",
              "correct": false
            }
          ],
          "markdown": "The program below draws the scene on the right, but you want the rectangle to be further to the right. How can you change the code to achieve this?\n<br><br>\n\n| Program      | Scene |\n| ----------- | ----------- |\n| <img src=\"https://images.code.org/41a7d5893dada7d524bff6a3a8aa5fc9-Q5code.png\" style=\"width:250px;\">       |   <img src=\"https://images.code.org/14300f79bf6319236ee8f6962b8fda5b-q5Scene.png\" style=\"height: 200px\">    |\n\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 4**\n\nThe first parameter of `rect()` is the x-location. By increasing the x-location to `100`, the rectangle will be further right.\n"
        }
      },
      "CSD U3 MC Q8_2023": {
        "dsls": {
          "answers": [
            {
              "text": "When the right mouse button is pressed, the sprite moves to the right. When the left arrow key is pressed, it rotates.",
              "correct": false
            },
            {
              "text": "When the left mouse button is pressed, the sprite rotates. When the right arrow key is pressed, it moves to the right.",
              "correct": true
            },
            {
              "text": "When both the left mouse button and right arrow key are pressed, the sprite rotates and moves to the right.",
              "correct": false
            },
            {
              "text": "When the left mouse button is pressed, the sprite rotates. When the right arrow key is pressed, it moves to the right. When the left arrow key is pressed, it moves to the left.",
              "correct": false
            },
            {
              "text": "When the left mouse button is pressed, the sprite rotates. When the right arrow key is pressed, it moves to the right. When the left arrow key is pressed, it moves to the left. When the up arrow key is pressed, it moves up. When the down arrow key is pressed, it moves down.",
              "correct": false
            }
          ],
          "markdown": "Describe what will happen in the following program.\n<br><br>\n![](https://images.code.org/ffa87a30850917e891ef424bc415e896-CSDunit3input.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 15, 16**\n"
        }
      },
      "CSD U3 MC Q10_2023": {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/e4ff593bc5e40a2d06fbd2951d856abf-Q7a.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/f59580338cd356b19a777f4f82445f6e-Q7b.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/3078be2fb61a7cf602aca3c4cea94ec7-Q7c.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/4695aeb79a351056af610ab2b34551f1-Q7d.png)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Which of the following programs correctly draws a rectangle at a random x position? (Select two)"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 6**\n"
        }
      },
      "CSD U3 MC Q11_2023": {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/37a23b8e8d04dffa42a74222fea74515-Q8a.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/acc18aa176e905cd1f03eb36d933ea39-Q8b.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/7106ba30085775c3b7dce2d49561127c-Q8c.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/e55f49f640d7b9f9adfecd5eb09ce431-Q8d.png)",
              "correct": false
            }
          ],
          "markdown": "Which program will draw the image below?\n<br><br>\n![](https://images.code.org/766e6f93a1cc4a1fc41b16a3edd1abfc-Q8Q.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 2**\n\nSince the green ellipse is on top of the red rectangle, the red rectangle should be drawn first, then the green ellipse.\n"
        }
      },
      "CSD U3 MC Q12_2023": {
        "dsls": {
          "answers": [
            {
              "text": "`orangeFish.moveLeft();`",
              "correct": false
            },
            {
              "text": "`orangeFish.move = \"left\";`",
              "correct": false
            },
            {
              "text": "`orangeFish.x = orangeFish.x - 2;`",
              "correct": true
            },
            {
              "text": "`orangeFish.x = orangeFish.x + 2;`",
              "correct": false
            },
            {
              "text": "No change, the program already animates the fish to move left",
              "correct": false
            }
          ],
          "markdown": "You need to update the code below to animate the fish to move from the right side of the screen to the left side of the screen. In the draw loop, what line of code do you need to add before `drawSprites()`?\n<br><br>\n![](https://images.code.org/decc7b1884765200536a1081c4efa011-CSDunit3smoothmotion.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 12**\n"
        }
      },
      "CSD U3 MC Q13_2023": {
        "dsls": {
          "answers": [
            {
              "text": "`monkey.displace(rabbit);`",
              "correct": false
            },
            {
              "text": "`​​​​​elephant.collide(hippo);`",
              "correct": false
            },
            {
              "text": "`giraffe.bounce(parrot);`",
              "correct": false
            },
            {
              "text": "`rock.velocityY = rock.velocityY + 0.2;`",
              "correct": true
            },
            {
              "text": "`snake.bounceOff(pig);`",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Your friend has added code to simulate gravity. Which new line of code are you most likely to see in their program?"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 22, 23**\n"
        }
      },
      "CSD U3 MC Q14_2023": {
        "dsls": {
          "answers": [
            {
              "text": "0",
              "correct": false
            },
            {
              "text": "1",
              "correct": false
            },
            {
              "text": "5",
              "correct": false
            },
            {
              "text": "6",
              "correct": true
            },
            {
              "text": "100",
              "correct": false
            }
          ],
          "markdown": "Consider the following program. What is the value of `score` at the end of this program?\n<br><br>\n![](https://images.code.org/b5b627075db961b5cd56afe9447153d4-CSDunit3variable.png)\n",
          "questions": [
            {
              "text": " "
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 5, 6**\n\nAfter the line of code `score = score + 1`, `score` has the value of `1`. Since the condition `health > 90` is true, the line of code `score = score + 5` is run. `score` now has a value of `6`.\n"
        }
      },
      "CSD U3 Match Q1_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Set the scale of the fries sprite to 0.6."
            },
            {
              "text": "Move the x position of the fries sprite to 100."
            },
            {
              "text": "Move the y position of the fries sprite to 50."
            },
            {
              "text": "Rotate the fries sprite."
            }
          ],
          "content1": "Match each line of code with its explanation.",
          "questions": [
            {
              "text": "`fries.scale = 0.6;`"
            },
            {
              "text": "`fries.x = 100;`"
            },
            {
              "text": "`fries.y = 50;`"
            },
            {
              "text": "`fries.rotation = 45;`"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 8**\n\n\n\n\n"
        }
      },
      "CSD U3 Match Q2_2023": {
        "dsls": {
          "answers": [
            {
              "text": "x"
            },
            {
              "text": "y"
            },
            {
              "text": "width"
            },
            {
              "text": "height"
            }
          ],
          "markdown": "Match each parameter of the `rect()` block with it's purpose: `rect(parameter1, parameter2, parameter3, paramter4);` \n<br>*Hint: the following program draws the scene on the right.*\n<br><br>\n\n| Program      | Scene |\n| ----------- | ----------- |\n|   <img src=\"https://images.code.org/2ebb00b797f6554cc0eba4ffe9b1d6fe-CSDunit3parameterscode.png\" style=\"height: 200px\">    | <img src=\"https://images.code.org/5b2afa9ecd953b4716fc7dfafe61ef26-Q13scene.png\" style=\"height: 200px\">     |\n",
          "questions": [
            {
              "text": "parameter1"
            },
            {
              "text": "parameter2"
            },
            {
              "text": "parameter3"
            },
            {
              "text": "parameter4"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 4**\n\n\n\n\n"
        }
      },
      "CSD U3 Match Q3_2023": {
        "dsls": {
          "answers": [
            {
              "text": "Is the panda sprite's x greater than the rhino sprite's x?"
            },
            {
              "text": "Is the panda sprite's x velocity greater than 0?"
            },
            {
              "text": "Is the rhino sprite's scale greater than 1?"
            },
            {
              "text": "Is the panda sprite's height equal to the rhino sprite's height?"
            },
            {
              "text": "Is the panda sprite's height equal to the panda sprite's width?"
            }
          ],
          "content1": "Match each boolean expression to its description.",
          "questions": [
            {
              "text": "`panda.x > rhino.x`"
            },
            {
              "text": "`panda.velocityX > 0`"
            },
            {
              "text": "`rhino.scale > 1`"
            },
            {
              "text": "`panda.height == rhino.height`"
            },
            {
              "text": "`panda.height == panda.width`"
            }
          ],
          "teacher_markdown": "**Content: Unit 3 Lesson 14**\n\n\n\n\n"
        }
      },
      "CSD U3 FR Q1_2023": {
        "long_instructions": "Give one example of an abstraction from this unit and why it is beneficial."
      }
    }
  }
}