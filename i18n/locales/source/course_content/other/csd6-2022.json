{
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/1": {
    "long_instructions": "# Test Your Board\n\nThis level is just a quick test to make sure your board is working. To run this test, do the following:\n\n1.  Plug your board into your computer with a USB cable\n2.  Click \"Run\"\n3.  Wait a few seconds for either a Success or Error screen to pop up\n4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps\n\n## Troubleshooting\n\nThere are a number of things that could prevent your test from passing.\n\n1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)\n2.  Try connecting your board to a different USB port\n3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!\n4.  Try a different board\n5.  Go to [studio.code.org/maker/setup][0] to run a more detailed test",
    "start_html": {
      "Plug in your Circuit Playground and click \"Run\"": "Plug in your Circuit Playground and click \"Run\"",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/2": {
    "long_instructions": "Embedded Prediction",
    "teacher_markdown": "When the button on the screen is clicked, the code will turn on a small red LED near the USB plug of the circuit playground. Students may have expected one of the larger LED lights to turn on, so they may not immediately notice the smaller red LED. ",
    "start_html": {
      "Click Me": "Click Me",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    },
    "contained levels": [
      {
        "long_instructions": "# Using Events\n\nLook at the code with a partner and discuss what you think it will do. Once you have answered the question click \"Run\" to see the program's result. Make sure your Circuit Playground is plugged in."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/3": {
    "long_instructions": "# Using Events\n\nThis program has two buttons.  The \"on\" button works, but the \"off\" button still needs to be programmed.\n\n# Do This\n\n1.  Add code so that the second button turns the LED off.",
    "start_html": {
      "ON": "ON",
      "OFF": "OFF",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/4": {
    "long_instructions": "# Light Switch\n\nThere are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.\n\n# Do This\n\n1.  Try the [`blink`(#f78183)][0], [`toggle`(#f78183)][1] and [`pulse`(#f78183)][2] blocks to see what they do.\n2.  Use one of the blocks to make the button work like a light switch.\n    -   If the LED is off, the button should turn it on.\n    -   If the LED is on, the button should turn it off.",
    "start_html": {
      "change the light": "change the light",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/5": {
    "long_instructions": "Embedded Prediction",
    "teacher_markdown": "This code uses the buzzer on the Circuit Playground to create a sound. The first number in the frequency block controls the note of the buzzer - low numbers create lower bass notes, and high numbers create higher frequency sounds. Students will explore these frequencies in the next few levels",
    "start_html": {
      "Low": "Low",
      "Mid": "Mid",
      "High": "High"
    },
    "contained levels": [
      {
        "long_instructions": "# Events and Sound\n\nLook at the code with a partner and discuss what you think it will do. Once you have answered the question click \"Run\" to see the program's result. Make sure your Circuit Playground is plugged in."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/6": {
    "long_instructions": "# Buzzer Duration\n\nThe [`buzzer.frequency()`(#f78183)][0] block has two parameters: frequency and duration.\n\n-   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.\n-   Duration determines how long the buzzer is going to play a sound for in milliseconds. 1000 milliseconds is the same as 1 second.\n\nYou can read more about how the buzzer works by [clicking here][1]. For right now we're going to focus on duration, the second parameter.\n\n## Do this\n\n1.  Drag out a frequency block to each of the events\n2.  Change the second parameter so the buttons play sounds for different lengths",
    "teacher_markdown": "This code uses the buzzer on the Circuit Playground to create a sound. The first number in the frequency block controls the note of the buzzer - low numbers create lower bass notes, and high numbers create higher frequency sounds. Students will explore these frequencies in the next few levels",
    "start_html": {
      "Short": "Short",
      "Long": "Long"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/7": {
    "long_instructions": "# Correct & Incorrect\n\nSounds can be used to cue the user if they get something correct or incorrect.\n\n## Do this\n\n1.  Decide which of the answers is “correct” based on your preferences.\n2.  Add a frequency block to make a high-pitched sound if someone picks that option.\n3.  Add frequency blocks to the other events for when someone picks an incorrect answer.\n\n**Run your code!** Test out the app with a neighbor to see if they guess the correct answer.",
    "start_html": {
      "Dog": "Dog",
      "Cat": "Cat",
      "Which type of animal makes the best pet?": "Which type of animal makes the best pet?",
      "Lizard": "Lizard",
      "Fish": "Fish"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/8": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Board Outputs - PracA_2222": {
        "display_name": "Alarm Clock",
        "bubble_choice_description": "Create an alarm clock!",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b6680c9d07ed56de86b398e83eab0656-image-1650056929215.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Alarm Clock\r\n\r\nWe can simulate an alarm clock with these lights and music\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the `\"on\"` button is pressed, blink the LED and make a sound]\r\n\t- Use [`led.blink()`(#f78183)](/docs/applab/led.blink/) and [`buzzer.frequency()`(#f78183)](/docs/applab/buzzer.frequency/) blocks to turn on the alarm\r\n    :::\r\n2) ::: details [When the `\"off\"` button is pressed, turn off the LED]\r\n\t- Use a [`led.off()`(#f78183)](/docs/applab/led.off/) to turn off the alarm\r\n    :::",
        "start_html": {
          "On": "On",
          "Off": "Off"
        }
      },
      "CSD U6 - Board Outputs - PracB_2222": {
        "display_name": "Debugging!",
        "bubble_choice_description": "Help fix the bug in the code!",
        "long_instructions": "# Debugging\r\nSomething’s not quite right - read the code and see if you can fix it\r\n## Do This\r\n\r\n- **What I Expected To Happen:** The buzzer makes a high-pitched sound for a short amount of time\r\n- **What Happened Instead:** The buzzer makes a low-pitched sound for a long amount of time\r\n\r\n<!--\r\n\r\nWhat I expected to happen    | What happened instead\r\n----------                   |----------------\r\nThe buzzer makes a high-pitched   | The buzzer makes a low-pitched sound\r\nsound for a short amount of time  | for a long amount of time\r\n\r\n-->",
        "start_html": {
          "Click the mouse to make it squeak!": "Click the mouse to make it squeak!"
        }
      },
      "CSD U6 - Board Outputs - PracC_2222": {
        "display_name": "Debugging!",
        "bubble_choice_description": "Help find the bug in the code!",
        "long_instructions": "# Debugging\r\nSomething's not quite right - read the code and see if you can fix it\r\n## Do This\r\n\r\n- **What I Expected To Happen:** Pressing the on button turns the LED on, and pressing the off button turns the LED off\r\n- **What Happened Instead:** The opposite - pressing the on button turns the LED off, and pressing the off button turns the LED on\r\n\r\n<!--\r\n\r\nWhat I expected to happen    | What happened instead\r\n----------                   |----------------\r\nline 1   | line 1\r\nline 2   | line 2\r\nline 3   | line 3\r\n\r\n-->",
        "start_html": {
          "Light Off": "Light Off",
          "Light On": "Light On"
        }
      },
      "CSD U6 - Board Outputs - PracD_2222": {
        "display_name": "Buzzer Buttons",
        "bubble_choice_description": "Add code to make each button play a certain frequency",
        "long_instructions": "# Buzzer Frequencies\r\n\r\nCreate an app that plays the buzzer at the frequency listed on each button\r\n\r\n## Do This\r\n\r\n1) Add a [`buzzer.frequency()`(#f78183)](/docs/applab/buzzer.frequency/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) to play the buzzer for half a second at the listed frequency\r\n\t- For example: The \"100\" button should play at a frequency of 100 for half a second\r\n\r\n",
        "start_html": {
          "100": "100",
          "200": "200",
          "300": "300",
          "400": "400",
          "900": "900",
          "800": "800",
          "700": "700",
          "500": "500",
          "600": "600"
        }
      },
      "CSD U6 - Board Outputs - PracE_2222": {
        "display_name": "Blinker Speed",
        "bubble_choice_description": "Make the LED blink at different speeds",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4599e67540f15b4cb3f1edd8a667c9d3-image-1650056958493.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Blinker Speed\r\n\r\nCreate an app that blinks the LED at the timings listed on each button\r\n\r\n## Do This\r\n\r\n- Add an [`led.blink()`(#f78183)](/docs/applab/led.blink/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) to have the buzzer blink for the timings listed on each button\r\n\t- For example: The \"1 second\" button should use an interval of 1000 because 1000 miliseconds is the same as 1 second.",
        "start_html": {
          "4 Seconds": "4 Seconds",
          "2 Seconds": "2 Seconds",
          "1 Second": "1 Second",
          "Half a Second": "Half a Second",
          "Quarter of a Second": "Quarter of a Second",
          "100 Milliseconds": "100 Milliseconds"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/9": {
    "long_instructions": "<img src=\"https://images.code.org/2896ac58f26810e3a5f3b52917dc5eb4-image-1634318916183.png\" style=\"float:right; width: 100px; margin: 20px\" />\n\n# Virtual Monster Pet\n\nEva is trying to make an app that simulates a virtual monster pet. The LED represents the monster's eye, and the buzzer will be the noises that it makes. The app lets you control the emotions of the monster in the following way:\n\n-   When you press the Happy button, the pet should stare at you without blinking and make a mid-pitched squeal\n-   When you press the Nervous button, the pet should blink quickly and make a short, high-pitched squeal\n-   When you press the Sleepy button, the pet should close it’s eye and make a long, low growl (like it’s snoring)\n\nThe Happy button has already been coded - we need to add the code for the other two buttons\n\n## Do This\n\n1.  Add code to the Nervous button so it blinks quickly and makes a short, high-pitched squeal\n2.  Add code to the Sleepy button so it closes its eye and makes a long, low growl (like it's snoring)",
    "mini_rubric": {
      "rubric_key_concept": "Respond to user input using the LED and buzzer on the circuit playground\r\n",
      "rubric_performance_level_1": "Each button correctly matches the description of its emotion, using both led and buzzer blocks in each button.\r\n",
      "rubric_performance_level_2": "Each button uses both led and buzzer blocks, but the parameters may not match the correct description (for example: all having the same duration)",
      "rubric_performance_level_3": "Some buttons are missing entire led or buzzer blocks",
      "rubric_performance_level_4": "No additional led or buzzer blocks have been added to the program"
    },
    "start_html": {
      "My Personal Monster": "My Personal Monster",
      "Happy": "Happy",
      "Nervous": "Nervous",
      "Sleepy": "Sleepy",
      "Decorate your Circuit Playground to look like your own personal monster, then use the buttons below to give it different emotions!": "Decorate your Circuit Playground to look like your own personal monster, then use the buttons below to give it different emotions!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/2/levels/10": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Board Outputs - ChalA_2222": {
        "display_name": "Animal Sounds",
        "bubble_choice_description": "Make each animal make a unique sound using the buzzer!",
        "long_instructions": "# Animal Sounds\r\n\r\nAdd code so when you click each animal, it makes a unique sound. Use different frequencies and durations to differentiate each animal."
      },
      "CSD U6 - Board Outputs - ChalB_2222": {
        "display_name": "Hidden Objects",
        "bubble_choice_description": "Make the LED light up when the mouse hovers over a secret object on the screen",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/3ace6b14a749b1454f909677a83ab17d-image-1650058728425.gif)\r\n\r\n<br/>\r\n\r\nClick to see example\r\n\r\n</div>\r\n\r\n# Secret Images\r\n\r\nThis app has several images embedded on the screen. Choose one of them to be your secret image, then add code so that when the user mouses over the image, the LED will light up. This app mimics an \"I Spy\" childrens app.\r\n\r\n## Do This\r\n1) Choose one of the food images to be your secret image.\r\n2) Using the existing [`onEvent()`(#fff176)](/docs/applab/onEvent/) as an example, add a new [`onEvent()`(#fff176)](/docs/applab/onEvent/) that detects when the use moves their mouse over your secret image.\r\n3) Inside the [`onEvent()`(#fff176)](/docs/applab/onEvent/), add code so the red LED lights up\r\n\r\n**Run Your Code!** You should be able to move the mouse around the screen, and the LED will light up only when it hovers over your secret image."
      },
      "CSD U6 - Board Outputs - ChalC_2222": {
        "display_name": "Random Numbers",
        "bubble_choice_description": "Learn how to use the random number block to make the buzzer play a random frequency",
        "long_instructions": "# Random Buzzer!\r\n\r\nCreate an app with a single button. When the user presses the button, the buzzer will play a random frequency for a random amount of time. This app requires you to use the [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) block.\r\n\r\n## Do This:\r\n**In Design Mode:** \r\n1) Drag out a button element and give it a descriptive ID\r\n\r\n**In Code Mode:**\r\n\r\n2) Add an [`onEvent()`(#fff176)](/docs/applab/onEvent/) block for when the user clicks the button\r\n3) Use the [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) block inside the [`buzzer.frequency()`(#f78183)](/docs/applab/buzzer.frequency/) block to play a random frequency for a random duration\r\n\r\n**Run Your Code!** When you press the button, the buzzer should make a different sound each time!"
      },
      "CSD U6 - Board Outputs - ChalD_2222": {
        "display_name": "Educational App",
        "bubble_choice_description": "Create an app prototype that could be used in an educational setting",
        "long_instructions": "# Education App\r\n\r\nCreate an app that uses the buzzer or LED that could be used in an educational setting. For example, your app could ask the user to solve a problem or answer a question and then buzz or blink if they get it correct or incorrect.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Board Outputs - ChalE_2222": {
        "display_name": "Medical App",
        "bubble_choice_description": "Create an app prototype that could be used in a medical setting",
        "long_instructions": "# Medical App\r\n\r\nCreate an app that uses the buzzer or LED that could be used in a medical setting. For example, the app could ask the user to enter information about how they are feeling and then help them decide if they need medical attention by buzzing or blinking in a certain way.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Board Outputs - ChalF_2222": {
        "display_name": "Musical App",
        "bubble_choice_description": "Create an app prototype that could be used in a musical setting",
        "long_instructions": "# Musical App\r\n\r\nCreate an app that uses the buzzer and LED that could be used in a musical setting. For example, the user could click different objects on the screen to simulate playing different notes.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/1": {
    "teacher_markdown": "Students are familiar with design mode to set up the user interface of their app, but this level introduces how to change design elements with code. Students can hover over elements to see their IDs and use that to inform their guesses. When they press Run, the code will run slowly and highlight each line as it runs so students can see step-by-step what each line does. This can be helpful when discussing their prediction and matching the result to specific lines of code.",
    "start_html": {
      "title": "title",
      "You've always wondered what your cat is saying when it meows in the middle of the night. Now you can finally know!": "You've always wondered what your cat is saying when it meows in the middle of the night. Now you can finally know!",
      "Button": "Button"
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/1e226012bfa76c84938097e1ff117150-image-1579828841757.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/dc9e1f761ff6a95542f283e2c700f9f1-image-1579828841754.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/f89441dfc9260030feac9de3af2b7d3a-image-1579828841748.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/b82461e6219e023280c4e22df59071d4-image-1579828841751.png)",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Read the code and predict what this app will look like when run."
            }
          ],
          "title": "Make a Prediction"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/2": {
    "long_instructions": "# Changing Properties\n\nThe [`setProperty()`(#fff176)][0] block can be used to change lots of things about your design elements. We'll practice using [`setProperty()`(#fff176)][1] to update the look of a welcome screen for an app.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._\n\n# Do This\n\n1.  Look at the [`setProperty()`(#fff176)][2] block that is already in the code. This block updates the font used in the title.\n2.  Use another [`setProperty()`(#fff176)][3] block to update the background color of the title\n    -   For the first parameter, select \"title\" (the element's id)\n    -   For the second parameter, select \"background-color\" (the property you want to set)\n    -   For the third parameter, type in a color you would like to use. Make sure your color is in quotes.\n\n(Optional) Add more [`setProperty()`(#fff176)][4] blocks to update the look of your app",
    "start_html": {
      "Welcome To My App!": "Welcome To My App!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/3": {
    "long_instructions": "# Changing Text\n\nYou can also change the text of elements on the screen using the [`setText()`(#fff176)][0] block. Let's update the app so it uses your name in the app.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty` and `setText`, but it'll come back later once you're building apps of your own._\n\n## Do This\n\n1.  Use a [`setText()`(#fff176)][1] block to update the app to display your name\n    -   Drag out a [`setText()`(#fff176)][2] block\n    -   For the first parameter, select \"nameLabel\" (the element's id)\n    -   For the second parameter, type in your name using quotes\n\n(Optional) Use [`setText()`(#fff176)][3] to change the greeting as well - for example, changing it to \"Howdy\" or \"Hola\" or \"你好\"",
    "start_html": {
      "Welcome To My App!": "Welcome To My App!",
      "Hello": "Hello",
      "name": "name"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/4": {
    "long_instructions": "# Changing Position\n\nEvery design element (except for the screen) has an \"x\" and a \"y\" property that controls its position. We can use these properties to re-position elements on the screen.\n\nThe App Lab screen is 320 pixels wide and 450 pixels tall.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._\n\n# Do This\n\n<div markdown=\"1\" style=\"float:right\">\n\n[expandable][0]\n\n</div>\n\n1.  Look at the image to the right (click to see the image in full size). We want to make our app match this picture\n2.  Look at the example code that moves the `greenButton` to the upper-right corner\n3.  Move \"redButton\" so it is in the upper-left corner\n    -   Use two [`setProperty()`(#fff176)][1] blocks to change the `x` and `y` properties of the `\"redButton\"` element"
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/5": {
    "long_instructions": "# Changing With a Click\n\nIt's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an [`onEvent()`(#fff176)][0] block with [`setProperty()`(#fff176)][1], you're able to do things you couldn't do with Design Mode alone.\n\nIn this example, let's move the smiley icon to the center of the screen when it's clicked\n\n## Do This\n\n1.  When you click the smiley, move it to the center of the screen\n    -   Inside the [`onEvent()`(#fff176)][2] block: \n        -   use two [`setProperty()`(#fff176)][3] blocks to move the smiley to the center of the screen.\n        -   You'll need to update the `x` and `y` properties of the smiley icon.\n\n**Run Your Code!** Click the smiley and watch it move to the center of the screen!"
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\" style=\"float:right; max-width: 150px; margin: 10px;\">\n\n# Randomization\n\nMoving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the [`randomNumber`(#FFB74D)][0] block to do just that.\n\n## Do This\n\n1.  Edit your code so it uses the [`randomNumber`(#FFB74D)][1] block inside the [`setProperty()`(#fff176)][2] blocks for the `x` and `y` properties.\n2.  Change the start and end values of [`randomNumber`(#FFB74D)][3] so the smiley will jump across the whole screen\n    -   _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall._\n\n**Run your code!** Every time you click the smiley, it should jump to a new random location"
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Outputs - PracA_2222": {
        "display_name": "Change the Background",
        "bubble_choice_description": "Change the background of your app with a button",
        "long_instructions": "# Changing the Background\r\n\r\nCreate an app that changes the background color according to the button that is clicked\r\n\r\n## Do This\r\n\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) that changes the background color of `screen1` to the color on the button\r\n\r\n(Optional): Add your own button with your own color!",
        "start_html": {
          "White": "White",
          "Red": "Red",
          "Green": "Green",
          "Blue": "Blue"
        }
      },
      "CSD U6 - Screen Outputs - PracB_2222": {
        "display_name": "Changing Icons",
        "bubble_choice_description": "Update the icon image with a button click",
        "long_instructions": "# Changing Icons\r\n\r\nCreate an app that changes the directon of the arrow in the center of the screen depending on the button the user presses.\r\n\r\n## Do This\r\n\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) and set the id to `arrowImg`.\r\n3) Update the `image` property based on the direction that the arrow should be facing:\r\n\t- Up: `icon://fa-arrow-up`\r\n\t- Down: `icon://fa-arrow-down`\r\n\t- Left: `icon://fa-arrow-left`\r\n\t- Right: `icon://fa-arrow-right`",
        "start_html": {
          "up": "up",
          "down": "down",
          "left": "left",
          "right": "right"
        }
      },
      "CSD U6 - Screen Outputs - PracC_2222": {
        "display_name": "Debugging",
        "bubble_choice_description": "Help fix the bugs so the app appears correctly",
        "long_instructions": "<img src=\"https://images.code.org/549ed406305bb6b2aad1f997324d5120-image-1640037426611.png\" style=\"width:200px; float:right;\">\r\n\r\n# Debugging\r\n\r\nErika wanted to practice using Text Mode to create an app that looks like the image on the right. When she finished, she tried running the app but she got a lot of errors. Can you fix all of the errors in the code so her app looks like the example app on he right?\r\n\r\n_Note: This level starts in Text Mode because some of the bugs are typos with the blocks themselves! As you fix the bugs, one way to check your work is by trying to convert the level back into block mode._",
        "start_html": {
          "The App Is Not Running": "The App Is Not Running"
        }
      },
      "CSD U6 - Screen Outputs - PracD_2222": {
        "display_name": "Create a Rainbow",
        "bubble_choice_description": "Use code to change the colors and create a rainbow",
        "long_instructions": "<img src=\"https://images.code.org/b1e2547f7633d983ad4e405990f5665f-image-1645805592400.png\" style=\"width: 150px; float: right; margin: 10px\" />\r\n\r\n# Create a Rainbow\r\n\r\nThis app has seven labels on the screen. Change the background color of each label to be the colors of a rainbow:\r\n- Red\r\n- Orange\r\n- Yellow\r\n- Green\r\n- Blue\r\n- Indigo\r\n- Violet\r\n\r\n## Do This\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block for each label that changes the `background-color` to one of the colors of the rainbow\r\n\r\n**Run your code!** When you do, a rainbow should appear like the image on the right"
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/8": {
    "display_name": "Emotion Machine",
    "bubble_choice_description": "Create an app that uses emoji faces to describe different emotions",
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to enlarge\n\n</div>\n\n# Emotion Machine\n\nCreate an app that lets you select different emotions to display on the screen using the emoji icons.\n\n## Do This\n\n1.  Add an event for when the user clicks the `happy` emoji\n    -   The happy emoji appears (`\"icon://fa-smile-o\"`)\n    -   The icon color changes to yellow\n    -   The text changes to \"Happy\"\n2.  Add an event for when the user clicks the `sad` emoji\n    -   The sad emoji appears (`\"icon://fa-frown-o\"`)\n    -   The icon color changes to blue\n    -   The text changes to \"Sad\"\n3.  Add an event for when the user clicks the `meh` emoji\n    -   The meh emoji appears (`\"icon://fa-meh-o\"`)\n    -   The icon color changes to gray\n    -   The text changes to \"Meh\"",
    "mini_rubric": {
      "rubric_key_concept": "Update properties and text of design elements using code",
      "rubric_performance_level_1": "The finished app matches the description, with each button correctly updating the icon and text",
      "rubric_performance_level_2": "The finished app is similar to the description, but has at most one element that is incomplete (for example, not updating the text or not updating the icon color)",
      "rubric_performance_level_3": "The finished app may have some elements that look correct, but most elements do not update correctly or the app is only partially completed.\r\n",
      "rubric_performance_level_4": "The app has not been updated to match the description"
    },
    "start_html": {
      "Happy": "Happy",
      "Sad": "Sad",
      "I'm feeling...": "I'm feeling...",
      "?": "?",
      "Emotion Machine": "Emotion Machine",
      "Meh": "Meh"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/3/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Outputs - ChalA_2222": {
        "display_name": "Hidden Property",
        "bubble_choice_description": "Learn to use the hidden property to show and hide design elements",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b175cf70203490379ae3c36a97de21b4-image-1650058976738.gif)\r\n\r\n<br/>\r\n\r\nClick to enlarge\r\n\r\n</div>\r\n\r\n# Visibility\r\n\r\nDesign elements can be hidden from the user using the [`hideElement()`(#fff176)](/docs/applab/hideElement/) block, and then re-appear using the [`showElement()`(#fff176)](/docs/applab/showElement/) block. We are going to use these blocks to create an alarm app. \r\n\r\nWe have already set up an [`onEvent()`(#fff176)](/docs/applab/onEvent/) for the `triggerAlarmButton` which will do three things when clicked:\r\n\r\n* Set the text of `statusLabel` to \"On\"\r\n* Hides the `triggerAlarmButton`, since we just turned the alarm on\r\n* Shows the `stopAlarmButton`, so the user has the option to turn off the alarm\r\n\r\nBut, the app is not finished - pressing the `stopAlarmButton` doesn't actually turn off the alarm.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Run the program and click \"Trigger Alarm\" to see how it works\r\n2) ::: details [Using `triggerAlarmButton` as a model, add code so that pressing `stopAlarmButton` resets the alarm]\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `statusLabel` to \"Off\"\r\n    - Use [`hideElement()`(#fff176)](/docs/applab/hideElement/) to hide the `stopAlarmButton`\r\n    - Use [`showElement()`(#fff176)](/docs/applab/showElement/) to show the `triggerAlarmButton`\r\n    :::",
        "start_html": {
          "Alarm:": "Alarm:",
          "Trigger Alarm": "Trigger Alarm",
          "Stop Alarm": "Stop Alarm",
          "OFF": "OFF"
        }
      },
      "CSD U6 - Screen Outputs - A_2222": {
        "display_name": "Recreate an App",
        "bubble_choice_description": "Without using Design Mode, recreate the design of an app using setProperty and setText blocks",
        "long_instructions": "<img src=\"https://images.code.org/a07b3130a5effc22efdd36a3400c8b7b-image-1634321815292.PNG\" style=\"float:right; height: 400px; margin: 10px;\" />\r\n\r\n# Recreate an App Using Code\r\n\r\nWithout using Design Mode and only using [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks, recreate the app on the right.\r\n\r\n## Additional Information\r\n\r\n* The image of Hedy Lamarr is from Pixabay. You can use this link in your code: `https://cdn.pixabay.com/photo/2013/07/13/09/36/hedy-lamarr-155765_960_720.png`\r\n* You can change the color of the icons using the `icon-color` property\r\n* The color of the background is `gold`",
        "start_html": {
          "Hedy Lamarr was an inventor in the 1950swhose ideas laid the groundwork for WiFi, GPS, and Bluetooth used today": "Hedy Lamarr was an inventor in the 1950swhose ideas laid the groundwork for WiFi, GPS, and Bluetooth used today"
        }
      },
      "CSD U6 - Screen Outputs - ChalC_2222": {
        "display_name": "Theme Designer",
        "bubble_choice_description": "Create a custom App Lab theme for label and button elements on the screen",
        "long_instructions": "# Theme Designer\r\n\r\nSome app editors let you add themes to a design, which updates all of the labels and buttons on the screen. In this app, we're creating our own theme designer that we can use to test out different themes.\r\n\r\nAn example theme has already been coded, which updates the properties of the `label` and `button` on the screen. Your task is to design your own theme that updates the look of the app.\r\n\r\n## Do This\r\n\r\n1) Add code to the `myTheme` button that updates the look of the `screen1`, `label`, and `button` elements on the screen",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance.",
        "start_html": {
          "Example Label": "Example Label",
          "Example Button": "Example Button",
          "Example Theme": "Example Theme",
          "My Theme": "My Theme"
        }
      },
      "CSD U6 - Screen Outputs - ChalD_2222": {
        "display_name": "playSpeech",
        "bubble_choice_description": "Learn to use the playSpeech block by creating an \"About Me\" app",
        "long_instructions": "# playSpeech Block\r\n\r\nAnother way to generate output on the screen is using the [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) block. This block uses artificial intelligence and text-to-speech to read text aloud to the user. This can help make apps more accessible, especially for folks who are blind or visually impaired.\r\n\r\n## Do This\r\n1) Look at the example code in the `foodButton` event to see how the [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) block works. \r\n\t- Change the code to say your favorite food instead of the example\r\n2) Add code to read aloud your favorite color when the button is clicked\r\n3) Add code to read aloud your favorite class in school when the button is clicked\r\n4) Add code to read aloud your favorite animal when the button is clicked",
        "start_html": {
          "Favorite Food": "Favorite Food",
          "About Me": "About Me",
          "Click a button to learn more about me": "Click a button to learn more about me",
          "Favorite Color": "Favorite Color",
          "Favorite Class in School": "Favorite Class in School",
          "Favorite Animal": "Favorite Animal"
        }
      },
      "CSD U6 - Screen Outputs - ChalE_2222": {
        "display_name": "Marketing App",
        "bubble_choice_description": "Create an app prototype that could be used in a social media marketing campaign",
        "long_instructions": "# Marketing App\r\n\r\nCreate an app that changes elements on the screen and could be used in a marketing campaign on social media. For example, you could choose your favorite actor or band and create an app that displays different pictures from their career when the user clicks different buttons.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Screen Outputs - ChalF_2222": {
        "display_name": "Local Business App",
        "bubble_choice_description": "Create an app prototype that could be used to promote a local business",
        "long_instructions": "# Local Business App\r\n\r\nCreate an app that changes elements on the screen and could be used to promote a local business. For example, you could find information and images about a business on their website and create an app that displays different information based on the buttons you click.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/1": {
    "long_instructions": "See contained level for markdown",
    "teacher_markdown": "This code uses an event to detect user input, but it waits for an event on the circuit playground instead of the screen. When students run the code, nothing will happen until they press the left button on their circuit playground. Once they do, the red LED will light up. If student’s boards aren’t working, have them [press the Setup button][0] in the maker app or visit [https://studio.code.org/maker/setup][1] on a Chromebook.",
    "contained levels": [
      {
        "long_instructions": "# Board Events\n\nThe [`onBoardEvent()`(#f78183)][0] block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click \"Run\" to check your answer."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/2": {
    "long_instructions": "<div style=\"float:right;\" markdown=1> \n\n[expandable][0] \n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Using Board Events\n\nRight now the LED turns on when the left button (`buttonL`) is pressed down. Add code so it turns off when the right button (`buttonR`) is pressed down.\n\n## Do This\n\n1.  When buttonR is pressed, turn the red LED off.\n    -   Add another [`onBoardEvent()`(#f78183)][1] block to turn the LED off when the right button is pressed down.",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/3": {
    "long_instructions": "# Up Events\n\nInstead of using the right button, you can make the LED turn off when the left button comes back up.\n\n## Do This\n\n1.  When the button is up, turn the LED off\n    -   Use an [`onBoardEvent()`(#f78183)][0] block to create an `up` event for the left button.\n    -   Add code to turn the LED off when the button pops back up.",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/4": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Using the Toggle Switch\n\nThe toggle switch flips between two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.\n\n## Do This\n\n1.  When the switch is flipped to closed, the LED will turn off.\n    -   Use an [`onBoardEvent()`(#f78183)][1] to detect when the `toggleSwitch` is `closed`\n    -   Add code to turn the LED off",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/5": {
    "long_instructions": "# Secret Messages\n\nThis app has a secret message written in white text on the screen. We can use the toggle switch to interact with the screen and change the background to reveal the secret message.\n\n## Do This\n\n1.  When the switch is flipped to closed, change the background-color to black\n    -   Create a new board event to detect when the toggle switch is `close`\n    -   Use a [`setProperty`(#fff176)][0] block to change the `background-color` to black\n2.  When the switch is flipped to open, change the background-color to white\n    -   Create a new board event to detect when the toggle switch is `open`\n    -   Use a [`setProperty`(#fff176)][1] block to change the `background-color` to white\n\n**Run Your Code!** Flipping the toggle switch should reveal the secret message!",
    "start_html": {
      "Nothing to see here...": "Nothing to see here...",
      "The Password is \"Sushi\"": "The Password is \"Sushi\""
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/6": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Board Inputs - PracA_2222": {
        "display_name": "Debugging",
        "bubble_choice_description": "Find the bugs to make the app display the correct information!",
        "long_instructions": "# Debugging\r\n\r\nThe app below is meant to update based on how the user interacts with the board. However, the wrong events are displaying. Can you fix the errors so the correct text appears with the correct event?",
        "start_html": {
          "This is a Label": "This is a Label"
        }
      },
      "CSD U6 - Board Inputs - PracB_2222": {
        "display_name": "Emoji Reactions",
        "bubble_choice_description": "Change the emoji reactions based on button presses",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/39327fe55ee3497a3e9fbb8e37feed82-image-1650057325225.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Emoji Reactions\r\n\r\nMake an app that starts with a neutral emoji on the screen. When the user presses `down` the left button, it changes to a happy face. When the user presses `down` the right button, it changes to a sad face. When the user lets `up` either button, it changes back to a neutral face.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) :::details [When the user presses the left button, show a happy face]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the user presses `\"down\"` on `buttonL`.\r\n    - Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to update the `image` of the emoji to a happy face (`icon://fa-smile-o`)\r\n    :::\r\n2) ::: details [When the user presses the right button, show a sad face]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the user presses `\"down\"` on `buttonR`.\r\n    - Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to update the `image` of the emoji to a frown face (`icon://fa-frown-o`)\r\n    :::\r\n3) ::: details [When a user releases the left button, show a neutral face]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the user presses `\"up\"` on `buttonL`.\r\n    - Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to update the `image` of the emoji to a neutral face (`icon://fa-meh-o`)\r\n    :::\r\n4) ::: details [When the user releases the right button, show a neutral face]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the user presses `\"up\"` on `buttonR`.\r\n    - Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to update the `image` of the emoji to a neutral face (`icon://fa-meh-o`)\r\n    :::\r\n\r\n**Run Your Code!** When you hold a button, the emoji should change to a happy or sad emoji. When you release the button, it should change back to the neutral emoji."
      },
      "CSD U6 - Board Inputs - PracC_2222": {
        "display_name": "LED Blinker",
        "bubble_choice_description": "Create an app that simulates a blinker on a car or bicycle",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/c309a8bf5758b97cb8452424b3249195-image-1650057430153.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# LED Blinker\r\n\r\nCreate an app that simulates a blinker like on a car or bicycle. When the user slides the toggle switch open, the LED should start blinking. When the user slides the toggle switch closed, the LED should stop.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the toggle switch is open, blink the LED]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `toggleSwitch` is `open`\r\n    - Make the LED blink every 500 milliseconds\r\n    :::\r\n2) ::: details [When the toggle switch is closed, stop the LED from blinking]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `toggleSwitch` is `closed`\r\n    - Stop the LED from blinking\r\n    :::\r\n\r\n**Run the app!** You should be able to make the LED start blinking by turning the toggle switch, then stop the LED by moving it to the opposite direction"
      },
      "CSD U6 - Board Inputs - PracD_2222": {
        "display_name": "Morse Code Simulator",
        "bubble_choice_description": "Use buttons and buzzing frequencies to simulate Morse Code",
        "long_instructions": "<img src=\"https://images.code.org/efa3b12272a299813a9160fa33aba778-image-1646152976126.png\" style=\"width: 200px; float: right; margin: 10px\" />\r\n\r\n# Morse Code Simulator\r\n\r\n[Morse Code](https://en.wikipedia.org/wiki/Morse_code) is a system for communicating that uses long and short beeps to represent letters.\r\n\r\nCreate an app that uses the buttons to play beeps for morse code - the left button should play short beeps, and the right button should play long beeps\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the left button is pressed, play a short buzz]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to check when `buttonL` goes `down`.\r\n    - Play the buzzer for `100` milliseconds\r\n    :::\r\n2) ::: details [When the right button is pressed, play a long buzz]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to check when `buttonR` goes `down`.\r\n    - Play the buzzer for `300` milliseconds\r\n    :::\r\n\r\n**Run the app!** Use the chart on the right to try and send the message \"CS\" or to spell your initials"
      },
      "CSD U6 - Board Inputs - PracE_2222": {
        "display_name": "Yes-Or-No Communicator",
        "bubble_choice_description": "Create an app that uses button presses and the buzzer to communicate \"yes\" and \"no\" answers",
        "long_instructions": "# Yes-Or-No Communicator\r\n\r\nCreate an app that uses the buzzer and the left and right buttons to represent answers to yes or no questions. For example, a high-buzz could represent \"yes\" and a low-buzz could represent \"no\". Then, use the buzzer to answer yes-or-no questions with a partner and see if they can understand your responses!\r\n\r\n## Do This\r\n\r\n**In Design Mode:**\r\n- Decide on what buzz represents \"yes\" and what buzz represents \"no\"\r\n- Use a `label` element to describe what type of buzz means \"yes\" and what type of buzz means \"no\"\r\n\t- For example: \"A high-pitched buzz is yes\" or \"A short buzz is yes\"\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the user presses the left button, respond with \"yes\"]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `left` button is pressed `down`\r\n\t- Play the buzzer in a way that represents \"yes\"\r\n    :::\r\n2) ::: details [When the user presses the right button, respond with \"no\"]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `right` button is pressed `down`\r\n\t- Play the buzzer in a way that represents \"no\"\r\n    :::\r\n\r\n**Run The App!** When a partner looks at the app, they should be able to understand how it works without you needing to speak. When they ask yes-or-no questions, they should be able to understand your answers without you needing to speak either!\r\n\r\n_Note: This is an example of an app that focuses on **accessibility**, which makes it easier for people with disabilities to use technology and communicate. This type of app could be used by someone who can't speak but still needs to communicate_"
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/7": {
    "long_instructions": "# Mood Descriptor\n\nAngel is working on an app that lets them communicate their current mood to a screen that can hang outside their door before anyone enters their room. From inside their room, Angel can press buttons on the Circuit Playground, which updates the app on the outside of their room.\n\n1.  Closing the toggle-switch shows a happy emoji (`icon://fa-smile-o`)\n2.  Opening the toggle-switch right shows a sad emoji (`icon://fa-frown-o`)\n3.  Pressing the right button makes the emoji large (200 x 200 pixels), as if to say they are very happy or very sad\n4.  Pressing the left button makes the emoji small (100 x 100 pixels), as if to say they are kind of happy or kind of sad\n\nThe app has already been started for you, but it's missing all of the inputs for when Angel uses their Circuit Playground!\n\n## Do This\n\n-   Update the code to match the app above",
    "mini_rubric": {
      "rubric_key_concept": "Use the buttons and toggle switch on the circuit playground to create an app",
      "rubric_performance_level_1": "The app works as described, with the emojis changing to match the user inputs\r\n",
      "rubric_performance_level_2": "Most of the app works as described, but some of the actions don’t match the description such as changing size or changing the emojis",
      "rubric_performance_level_3": "The app changes elements on the screen, but does not match the description of the program",
      "rubric_performance_level_4": "The app has not been updated to match the description"
    },
    "start_html": {
      "Mood Descriptor": "Mood Descriptor",
      "This app shows how I'm currently feeling.Beware before you knock on the door!": "This app shows how I'm currently feeling.Beware before you knock on the door!",
      "Beware before you knock on the door!": "Beware before you knock on the door!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/4/levels/8": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Board Inputs - ChalA_2222": {
        "display_name": "Random Movement",
        "bubble_choice_description": "Use the buttons on the circuit playground to move an image randomly on the screen",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/72422d06e261209c083b9437fcbc873d-image-1650059388879.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Random Movement\r\n\r\nCreate an app that randomizes the location of the smiley face on the screen:\r\n- Pressing the left button on the circuit playground moves the smiley face to a new random `x` coordinate\r\n- Pressing the right button on the circuit playground moves the smiley face to a new random `y` coordinate\r\n\r\nYou can use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) blocks together to create the random movement.\r\n\r\n## Do This\r\n1) When the left button is pressed, move to a random x coordinate\r\n2) When the right button is pressed, move to a random y coordinate"
      },
      "CSD U6 - Board Inputs - ChalB_2222": {
        "display_name": "Day and Night",
        "bubble_choice_description": "Switch between a day and night environment using the toggle switch",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4bf1fd438e5bd20d5f25e272459a2505-image-1650059526083.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Day and Night\r\n\r\nUse design mode to create two scenes representing daytime and nighttime. Several assets have already been provided in this level, but you can also search for more on the internet. Add code so when the toggle switch is open, the scene is during the day. But when the toggle switch is closed, the scene is at night. \r\n\r\nYou can use [`hideElement()`(#fff176)](/docs/applab/hideElement/) and [`showElement()`(#fff176)](/docs/applab/showElement/) to change what images are displayed based on the toggle switch.\r\n\r\n_Note: Instead of using \"day and night\", you can choose a different pair of opposites to represent with this app (like land and sea, or light and dark). The important thing is that, when you use the toggle switch, it changes between the two opposites_\r\n\r\n## Do This\r\n**In Design Mode:**\r\n1) Create your daytime scene\r\n2) Create your nighttime scene\r\n\t- Note: in design mode, these two scenes will appear at the same time. You can hide some design elements by default by checking the `hidden` checkbox on design elements\r\n    \r\n**In Code Mode:**\r\n3) When the toggle switch is open, display the daytime scene\r\n4) When the toggle switch is closed, display the nighttime scene"
      },
      "CSD U6 - Board Inputs - ChalC_2222": {
        "display_name": "Correct or Incorrect",
        "bubble_choice_description": "Create an app that uses the playSound or playSpeech block to make \"correct\" or \"incorrect\" responses",
        "long_instructions": "# Correct-or-Incorrect Sound Board\r\n\r\nCreate an app that plays a \"correct\" or \"incorrect\" sound when you press a button on the circuit playground. You can use the [`playSound()`(#fff176)](/docs/applab/playSound/) or [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) blocks to make a sound of your choosing. Then use that app to quiz your friends and let them know if they got the answer correct or incorrect.\r\n\r\n## Do This\r\n\r\n1) When you press the left button, the app plays the \"correct\" sound.\r\n2) When you press the right button, the app plays the \"incorrect\" sound.\r\n\r\n**Run Your Code!** Look up 5 trivia questions and ask them to some of your classmates, then use the app to let them know if they got it correct or incorrect!"
      },
      "CSD U6 - Board Inputs - ChalD_2222": {
        "display_name": "Controller App",
        "bubble_choice_description": "Create an app prototype where your circuit playground could be used as a game controller",
        "long_instructions": "# Controller App\r\n\r\nCreate an app that uses the buttons or toggle switches as if the Circuit Playground were a controller for a game where you needed to make a decision. For example, using the left and right button to select which character you will play as or using the toggle switch to change your viewpoint in the game.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Board Inputs - ChalG_2222": {
        "display_name": "Lock/Unlock App",
        "bubble_choice_description": "Create an app prototype where your circuit playground could be used to lock/unlock a device",
        "long_instructions": "# Lock/Unlock App\r\n\r\nCreate an app that uses the buttons or toggle switches as if the Circuit Playground were locking or unlocking a device. For example, using the left and right button to lock or unlock the doors in a house as part of an alarm system, or open and close a garage door. You can use design mode elements to represent when the device is locked or unlocked.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/1": {
    "long_instructions": "See contained level for markdown",
    "teacher_markdown": "Students should notice that the names in the var blocks are repeated in the code. They may guess that the numbers assigned to these names at the top will be substituted in farther down the code. Even if students aren't sure what the screen will look like, they may be more sure that the rectangles will all look the same because they have the same width and height",
    "contained levels": [
      {
        "long_instructions": "# Prediction\n\nThe code below has a new block called `var`. Read the code below, then make a prediction for what will happen on the screen when the code is run. What do you think will happen to the rectangles?"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/500baaceb5ff763bbc1197b1ae39c6aa-image-1650562262146.png\" style=\"float: right; width: 15%; margin: 5px\" />\n\n# Creating a Checkerboard\n\nThe `var` block is short for **variable**, which can store a value to be used throughout your code. For example, if you wanted a lot of objects to have the same color, you could set the color to a **variable** and then re-use that variable every time you wanted to use that color.\n\nLet's use this idea to create a checkerboard on the screen with alternating colors.\n\n## Do This\n\n1.  Look at the top of the code which has several `var` blocks\n2.  Edit the colors and numbers on the right-side of the blocks to make the app match the picture to the right\n    -   You should only need to change the colors and numbers - you won't need to add any new blocks to your code!"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/3": {
    "display_name": "Video: Functions"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/4": {
    "long_instructions": "# Editing Variables\n\nVariables can be used to store information. This can be useful if you want to update multiple things with the same value.\n\nIn this example, Amy wrote a program that creates a shadow text effect under her name using multiple text labels. She's using a variable to update each text label with the same name, but there's a bug in her code - one of the labels isn't updating correctly.\n\n## Do This\n\n-   Run the code to see what's happening. You should notice one of the labels isn't updating like the others\n-   Look at the code and try to determine which label is incorrect, then update it to use the `myName` variable correctly\n-   Replace Amy's name with your name and see the result!",
    "start_html": {
      "Name": "Name"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/5": {
    "long_instructions": "# Using Variables\n\nYou can create a variable using the [`var`(#BB77C7)][0] block. Let's create a variable for the y-position of each rectangle and use it to update the screen. The code has already been started - you need to finish it!\n\n## Do This\n\n1.  Create a variable and assign it a value\n    -   Drag out a [`var`(#BB77C7)][1] block and give it a label on the left-side of the equal sign\n    -   On the right side of the equal sign, type in a number between 0 and 450\n2.  Update the [`setProperty()`(#fff176)][2] blocks so they use your new variable in the last position\n\n**Run the code!** You should see all of the blocks snap together on the same horizontal line! Try re-running the program with different values to see how the image changes."
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/6": {
    "display_name": "Video: Functions"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/7": {
    "long_instructions": "# Counting Presses\n\nEric is creating a program where pressing the left button adds 1 to the value on the screen, and pressing the right button subtracts 1 from the value on the screen. This is sometimes called the **[Counter Pattern][0]**. \n\nThe left button has already been coded - can you update the right button to work correctly too?\n\n## Do This\n\n-   Update the `counter` variable to subtract by 1 when the right button is pressed\n    -   ::: details [**Show Me How**]\n        -   Find the section that says `Add your code here!`\n        -   Drag out a `x = ;`(#BB77C7) block\n        -   Replace the `x` with the variable name: `value`\n        -   Drag out a `-`(#FFB74D) block\n        -   On the left side of the `-`(#FFB74D), type the variable name: `value`\n        -   On the right side of the `-`(#FFB74D), type `1`\n            :::",
    "start_html": {
      "0": "0"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/8": {
    "long_instructions": "# Changing Positions\n\nThe **[Counter Pattern][0]** can also be used to change the position of elements on the screen. Let's make a program where pressing the left button moves the bird up, and pressing the right button moves the bird down\n\n_Note: Remember that y positions are reversed on the screen. Moving up means subtracting, and moving down means adding_\n\n## Do This\n\n1.  Inside the `buttonL` event, subtract one from the `yPosition` variable\n    -   Run your code and test that the bird is able to move up!\n2.  Inside the `buttonR` event, add one to the `yPosition` variable\n    -   Run your program and test that the bird is able to move up and down!\n\nOptional: try changing the amount that the bird changes on each button press. This can simulate moving at different speeds!"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/9": {
    "display_name": "Video: Functions"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/10": {
    "long_instructions": "Predict Level",
    "teacher_markdown": "Students should notice that both if-statements use the value 315, and some students might use their mouse cursor to hover over the app and notice that 315 is close to the horizon created by the hills and trees. Students should also notice that the background changes between two different colors - orange and gray. Connecting these two observations together, students might predict that this will change when the \"sun sets\" behind the horizon, changing colors between day (orange) and night (gray).",
    "contained levels": [
      {
        "long_instructions": "# Prediction\n\nThis code is similar to the last level, where pressing buttons will move the sun up and down. However, this code also includes if statements\n\n## Do This\n\n-   Look at the code, paying attention to the two if-statements\n-   Predict what will happen as the sun moves around on the screen. What will change on the screen? When will it change?"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/11": {
    "long_instructions": "# Increasing Text\n\nThis app is meant to simulate someone whispering for you to come closer, only to surprise you with a loud noise. It uses the **[Counter Pattern][0]** to increase the size of the text on the screen. Once the text reaches 30 pixels, the text should change to \"SURPRISE!\" and a sound from the buzzer should play.\n\n## Do This\n\n1.  Add an [`if-statement`(#64B5F6)][1] to your code to check when the `textSize` variable is greater than 30\n    -   ::: details [**Show Me How**]\n        -   Find the section that says `Add your code here!`\n        -   Drag out a [`if statement`(#64B5F6)][2] block\n        -   Drag out a `>`(#FFB74D) block\n        -   On the left side of the `>`(#FFB74D), type the variable name: `textSize`\n        -   On the right side of the `>`(#FFB74D), type `30`\n            :::\n2.  When it is: change the text of the label to \"SURPRISE!\" and play a sound on the buzzer using [`buzzer.frequency`(#f78183)][3].\n    -   ::: details [**Show Me How**]\n        -   Inside the [`if statement`(#64B5F6)][4]:\n            -   Drag out a [`setText()`(#fff176)][5] and update the `textLabel` element to say \"Surprise!\"\n            -   Drag out a [`buzzer.frequency`(#f78183)][6] block to play a sound\n                :::",
    "start_html": {
      "psst... come closer...": "psst... come closer..."
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/12": {
    "long_instructions": "# Perfect Toast\n\nThis app simulates a toaster with a piece of toast in between two heated sides. The toast needs to be perfectly placed in the middle - if it's too close to one of the sides, the toast will burn! We can help alert the user of the burning toast by using the buzzer to make a noise if the toast is too close to the edges. Then the user can press buttons on the toaster to move the toast closer to the center.\n\n## Do This:\n\n1.  If the toast is too far to the left, play a sound to alert the user\n    -   Add an [`if statement`(#64B5F6)][0] to the `buttonL` event to check if the toast is too far to the left.\n    -   Use the the [`buzzer.frequency`(#f78183)][1] block to play a sound and let the user know\n2.  If the toast is too far to the right, play a sound to alert the user\n    -   Add an [`if statement`(#64B5F6)][2] to the `buttonR` event to check if the toast is too far to the right.\n    -   Use the the [`buzzer.frequency`(#f78183)][3] block to play a sound and let the user know\n\n**Run Your Code!** Use the left and right buttons to reposition the toast. When the toast gets too close to the walls, the device should buzz!"
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/13": {
    "long_instructions": "# Positivity App\n\nHawa is making a positivity app where people can track good deeds or positive statements they make throughout the day by pressing a button on the Circuit Playground. Each time they press a button, the heart grows a little bit in size. When the heart fills the box, the circuit playground should buzz.\n\nHawa has already started the app, but needs help adding the variables and if-statements to her code.\n\n# Do This\n\n-   Add a variable called `size` as the first line of your code and set it to `30` ( [Show me where][0] )\n-   Add code inside your event that increases the `size` variable by 20 each time a button is pressed ( [Show me where][1] )\n-   Add an if-statement that checks when the heart has reached a size of at least 300 pixels ( [Show me where][2] )\n-   Inside the if-statement: Have the buzzer make a noise to let the user know they're reached their goal",
    "callouts": {
      "U6L6.4 - Variable": "Define your variable here",
      "U6L6.4 - Counter": "Increase your variable here",
      "U6L6.4 - If": "Add your if-statement here"
    },
    "mini_rubric": {
      "rubric_key_concept": "Use variables and if-statements to create an app that uses the circuit playground",
      "rubric_performance_level_1": "The program works as described, using variables to keep track of the size and an if-statement to play the buzzer at the correct time",
      "rubric_performance_level_2": "Variables are used to keep track of the size of the element, but the buzzer does not sound once it reaches the correct size",
      "rubric_performance_level_3": "Variables are used for the size, but they do not increase when the button is pressed",
      "rubric_performance_level_4": "The code has not changed"
    },
    "start_html": {
      "Positive Attitude App": "Positive Attitude App",
      "Every time you do a good deed or make a positive comment, press a button on your Circuit Playground to increase the size of the heart. Try to get your heart to fill the whole box with positivity!": "Every time you do a good deed or make a positive comment, press a button on your Circuit Playground to increase the size of the heart. Try to get your heart to fill the whole box with positivity!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/5/levels/14": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - If Variables - ChalA_2222": {
        "display_name": "Text Message Design",
        "bubble_choice_description": "Use variables to recreate the design of a text message exchange",
        "long_instructions": "<img src=\"https://images.code.org/077ce11891f3966e1564cdb7083bad4f-image-1645641750329.png\" style=\"width: 250px; margin: 10px; float: right\" />\r\n\r\n# Text Message Design\r\n\r\nUse variables to change the background color and text color of the text exchange below so it looks similar to the picture to the right. It's okay if the colors don't match exactly as long as each group of messages has the same color scheme. \r\n\r\nYou should use variables to keep the colors consistent between messages from the same person.",
        "start_html": {
          "Hey - what's the name of that Indian restaurant we went to last week?": "Hey - what's the name of that Indian restaurant we went to last week?",
          "Saffron Indian - why?": "Saffron Indian - why?",
          "We want to go back. Their Naan was really good!": "We want to go back. Their Naan was really good!",
          "Oh awesome! You should try their Saag Aloo": "Oh awesome! You should try their Saag Aloo",
          "Oh yah? What's in that?": "Oh yah? What's in that?",
          "Spinach and potatoes - it's yummy!": "Spinach and potatoes - it's yummy!"
        }
      },
      "CSD U6 - If Variables - ChalB_2222": {
        "display_name": "Water Level App",
        "bubble_choice_description": "Create an app that simulates an automatic bathtub filler, where the water level rises to a set point.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/3441200bfbe8b152e33637e0f5b38510-image-1650059782558.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Water Level App\r\n\r\nCreate an app that simulates an automatic bathtub filler, where the water level rises to a set point. You should use the left button to raise the water, and the right button to lower the water. When the water goes past the black line of the bathtub, the Circuit Playground should buzz to let you know you're at risk of overflowing!\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the left button is pressed, the water rises up the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `waterY` variable. Don't forget: moving up means subtracting so the y position gets smaller\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) to update the y position of the water image\r\n    :::\r\n2) ::: details [If the water gets to the black line, the circuit playground should buzz]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the waterY variable.\r\n    - If it's above the black line: have the Circuit Playground buzz!\r\n    :::\r\n3) ::: details [When the right button is pressed, the water lowers on the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `waterY` variable. Don't forget: moving down means adding so the y position gets smaller\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) to update the y position of the water image\r\n    :::",
        "start_html": {
          "Press the left and right buttons to raise and lower the water in the bath tub. If the water gets too close to the edge, the app will buzz to warn you!": "Press the left and right buttons to raise and lower the water in the bath tub. If the water gets too close to the edge, the app will buzz to warn you!"
        }
      },
      "CSD U6 - If Variables - ChalC_2222": {
        "display_name": "Emoji Race",
        "bubble_choice_description": "Create a game that uses the left and right buttons to move characters down the screen. The first person to reach the bottom of the screen is the winner!",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b8b57481f944ac00e0d759cea15798b3-image-1650059926593.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Emoji Race\r\n\r\nCreate a game that uses the left and right buttons to move characters down the screen. The first person to reach the bottom of the screen is the winner!\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the left button is pressed, move the red emoji down the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `redY` variable so it moves down the screen.\r\n    - Update the `y` position of the red emoji using [`setProperty()`(#fff176)](/docs/applab/setProperty/).\r\n    :::\r\n2) ::: details [If the red emoji is at the bottom of the screen, show the `redWinner` screen]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the y-position is past the bottom of the screen.\r\n    - If it is: change the screen to `redWinner`.\r\n    :::\r\n3) ::: details [When the right button is pressed, move the blue emoji down the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `blueY` variable so it moves down the screen.\r\n    - Update the `y` position of the blue emoji using [`setProperty()`(#fff176)](/docs/applab/setProperty/).\r\n    :::\r\n4) ::: details [If the blue emoji is at the bottom of the screen, show the `blueWinner` screen]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the y-position is past the bottom of the screen.\r\n    - If it is: change the screen to `blueWinner`.\r\n    :::\r\n\r\n**Run Your Code!** Try playing with a friend where one person controls the red emoji and the other person controls the blue emoji.",
        "start_html": {
          "Emoji Race!": "Emoji Race!",
          "Press the left button to move the red emoji. Press the right button to move the blue emoji. Whoever reaches the bottom of the screen first is the winner!": "Press the left button to move the red emoji. Press the right button to move the blue emoji. Whoever reaches the bottom of the screen first is the winner!",
          "Red Player Wins!": "Red Player Wins!",
          "Blue Player Wins!": "Blue Player Wins!"
        }
      },
      "CSD U6 - If Variables - ChalD_2222": {
        "display_name": "Age Recommender",
        "bubble_choice_description": "Create an app that recommends something based on the users age. For example: recommend a movie or book or place to visit based on a person's age.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/e28b3e9c8a10af207db2ec4b2ca178ca-image-1650059987366.13.d-finished.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Age Recommender\r\n\r\nCreate an app that recommends something based on somebody's age. For example, you could recommend a PG or PG-13 or R rated movie based on how old someone is. Or, you could recommend baby food vs soft food vs spicy food based on someone's age.\r\n\r\nThe home screen has already been started for you, but the app still needs 4 recommendations and the code needs to be added.\r\n\r\n## Do This\r\n**Planning**\r\n1) Decide what 4 things you would like to recommend based on someone's age. It can be music or movies or books or foods or places to visit - whatever you decide.\r\n\r\n**In Design Mode:**\r\n2) Change to one of the other choice screens (for example: `choice1Screen`), then add labels or images representing this choice\r\n3) Repeat this process for each of the four screens\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n4) ::: details [When the + button is pressed: have it increase the age on the screen by 1]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to add 1 to the age variable\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `ageLabel`\r\n    :::\r\n5) ::: details [When the - button is pressed: have it decrease the age on the screen by 1]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to subtract 1 to the age variable\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `ageLabel`\r\n    :::\r\n6) ::: details [When the \"Recommend\" button is pressed: have it go to a certain screen based on the user's age]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the age variable\r\n    - Use the [`setScreen(screenId)`(#fff176)](/docs/applab/setScreen/) block to change to a specific screen based on their age\r\n    - Repeat this four times for each screen\r\n    :::",
        "start_html": {
          "Use the buttons on the screen to enter your age. Then press the \"Recommend\" button to view a recommendation!": "Use the buttons on the screen to enter your age. Then press the \"Recommend\" button to view a recommendation!",
          "0": "0",
          "+": "+",
          "-": "-",
          "Recommend": "Recommend"
        }
      },
      "CSD U6 - If Variables - ChalE_2222": {
        "display_name": "Debugging!",
        "bubble_choice_description": "The app is supposed to move an arrow across the screen and keep scrolling to the other side, but there are bugs!",
        "long_instructions": "# Debugging: Infinite Scrolling\r\n\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4a82e91b1b6ad15623620fee4383c964-image-1648759745413.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\nThis app is meant to move an arrow across the screen. When the arrow reaches the edge of the screen, it should reset back to the beginning - but, something's wrong!\r\n\r\n- **What I Expected to Happen:** When the arrow reaches the far sides, it teleports to the other side so it can keep moving\r\n- **What Actually Happens:** The arrow moves just once, sometimes off of the screen\r\n\r\n_Note: you may need to switch into text mode to fix this bug_\r\n\r\n(Optional) Even when the bug is fixed, the infinite scroll doesn't look great. Can you adjust the numbers so the scrolling effect looks smoother?",
        "teacher_markdown": "The bug is that the `>` and `<` symbols are swapped in the if-statements. For example, the top if statement checks if `xPos < 320`, which will be true while the arrow is still on the screen. We want the opposite: `xPos > 320`. This correctly checks that the arrow is off of the right-side of the screen. Similarly, the second if statement should be checking that `xPos < 0`.\r\n\r\nStudents can fix this within block mode, but it's a little tedious and requires removing the `<` and `>` blocks completely. It can be easier to switch into text mode and manually change these symbols, then switch back to block mode. For some students, this can be a good excuse to try out text mode if they've never used it before."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/6/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/6/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or making a small buzz on the circuit playground. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/6/levels/3": {
    "long_instructions": "# Add Logic\n\nAdd the core logic to your app, using [`variables`(#BB77C7)][0] and [`if statements`(#64B5F6)][1]. Use your project guide to help complete your code. Test your app several times to see that it behaves as expected. \n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/6/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - [click here to see the rubric][0]. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever your finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/1": {
    "teacher_markdown": "Students may be able to guess the behavior of the code, but they may be slightly off in predicting which lights will light up. There isn't a clear orientation on the circuit playground, but students should be able to \"work backwards\" to determine which lights are which. Students may also notice that the lights start with 0, which is the \"first\" light on the board.\n\nIf student’s boards aren’t working, have them [press the Setup button][0] in the maker app or visit [https://studio.code.org/maker/setup][1] on a Chromebook.",
    "contained levels": [
      {
        "long_instructions": "# colorLEDs\n\nThis program uses a new `colorLEDs` block, which controls the color LEDs in your Circuit Playground. Notice that some blocks use different numbers inside the square brackets \\[] than others.\n\nWhat do you think this code will do? Write your prediction in the box below, then run the code to see what happens."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/2": {
    "long_instructions": "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\" style=\"float: right; margin: 10px;\">\n\n# colorLeds\n\nThe color LEDs can use the same basic commands that you used with the red LED, such as `on`(#f78183) and `off`(#f78183). This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.\n\n# Do This\n\n-   Read and run the code to see how the program turns the bottom left LED on and off.\n-   Add more code to make both bottom LEDs turn on and off.",
    "start_html": {
      "Turn on bottom color LEDs": "Turn on bottom color LEDs",
      "Turn off bottom color LEDs": "Turn off bottom color LEDs"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/3": {
    "long_instructions": "# Adding Some Color\n\nYou probably noticed when you used [`colorLeds[0].on()`(#f78183)][0] in the last level, the LEDs turned on as white. There is now a new command in the toolbox called [`colorLeds[0].color()`(#f78183)][1] which lets you specify a color. Try different colors like \"orange\" or \"yellow\" or \"magenta\" to see which colors work with the LEDs.\n\n# Do This\n\n1.  Use the [`color()`(#f78183)][2] command to set each of the color LEDs to a different color.\n    -   You should have 10 [`color()`(#f78183)][3] blocks in your code when you're finished!",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png\" style=\"width:250px; float:right\">\n\n# Debug: colorLeds\n\nCan you debug the number of each LED so that the rainbow shows up on the board like in the picture?",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/5": {
    "long_instructions": "# Changing Brightness\n\nThe [`intensity()`(#f78183)][0] command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.\n\n# Do This\n\n1.  Read the program and see how the \"Bright\" and \"Dim\" buttons work.\n2.  Add code to make the \"Medium\" button make the rainbow a medium level of brightness (between \"Bright\" and \"Dim\"). ([Show me where][1])",
    "callouts": {
      "CSDU6L10_rainbow": "Add your code here"
    },
    "start_html": {
      "Rainbow Lights!": "Rainbow Lights!",
      "Bright": "Bright",
      "Medium": "Medium",
      "Dim": "Dim"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/6": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Color LEDs - PracA_2222": {
        "display_name": "Change Colors with Toggle",
        "bubble_choice_description": "Change the colors of the LEDs using the toggle switch",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/d17f34d01522f68de08187c8b32b4b56-image-1650057577218.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Changing Colors with a Toggle\r\n\r\nCreate an app that changes the color of the lights when you use the toggle switch. Opening the toggle switch should change the lights to one color, and closing the toggle switch should change the lights to a different color.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the toggle switch is opened, change all of the LEDs to a color]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `toggleSwitch` is `open`\r\n    - Use the [`color(color)`(#f78183)](/docs/applab/color/) block to set each LED from `0-9`\r\n    - Each LED should be the same color\r\n    :::\r\n2) ::: details [When the toggle switch is closed, change all of the LEDs to a different color]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `toggleSwitch` is `closed`\r\n    - Use the [`color(color)`(#f78183)](/docs/applab/color/) block to set each LED from `0-9`\r\n    - Each LED should be a different color\r\n    :::\r\n\r\n**Run the app!** Your circuit playground should change colors as you open and close the toggle switch",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Color LEDs - PracB_2222": {
        "display_name": "Individual Lights",
        "bubble_choice_description": "Use buttons to control individual LED lights",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/d33e13c20061614821ab282e1a3e82e4-image-1650057604169.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Individual Lights\r\n\r\nCreate an app where you can toggle each individual light on the circuit playground by pressing the buttons on the screen. The app has already been started for you - all of the buttons are already on the screen, and each button has its own event. You need to add the code to toggle each light on the circuit playground.\r\n\r\n## Do This\r\n1) Inside each [`onEvent()`(#fff176)](/docs/applab/onEvent/): add code so that light will toggle on or off when you press the button on the screen\r\n\r\n**Run the app!** You should be able to click a button on the screen and that LED will turn on and off!",
        "start_html": {
          "LED 0": "LED 0",
          "LED 1": "LED 1",
          "LED 2": "LED 2",
          "LED 3": "LED 3",
          "LED 4": "LED 4",
          "LED 5": "LED 5",
          "LED 6": "LED 6",
          "LED 7": "LED 7",
          "LED 8": "LED 8",
          "LED 9": "LED 9"
        }
      },
      "CSD U6 - Color LEDs - PracC_2222": {
        "display_name": "Alarm Clock",
        "bubble_choice_description": "Create an app that simulates an alarm clock using LEDs and the buzzer",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/7187b0b2bce669fbc737e8a566d6ba22-image-1650057618952.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Alarm Clock\r\n\r\nCreate an app that simulates an alarm clock. When you press the \"ON\" button on the screen, the circuit playground should start buzzing and turn on all of the lights. When you press the \"OFF\" button on the  screen, the circuit playground should stop buzzing and turn off all of the lights.\r\n\r\nThe app has already been started for you - your task is to add the code inside each [`onEvent()`(#fff176)](/docs/applab/onEvent/) for the circuit playground\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When you press the `onButton`, the alarm turns on with lights and sound]\r\n\t- Turn on all of the LEDs. This will take 10 lines of code!\r\n    - Use the buzzer to make a noise\r\n    :::\r\n2) ::: details [When you press the `offButton`, all lights and sounds turn off]\r\n\t- Turn off all of the LEDs. This will take 10 lines of code\r\n    - Make sure the buzzer stops\r\n    :::\r\n\r\n**Run the program!** Make sure the alarm buzzes and lights up when you press the \"ON\" button, and turns off when you press the \"OFF\" button",
        "start_html": {
          "ON": "ON",
          "OFF": "OFF"
        }
      },
      "CSD U6 - Color LEDs - PracD_2222": {
        "display_name": "Debugging",
        "bubble_choice_description": "The app is supposed to turn on the left and right LEDs when the user presses a button, but the app isn't working correctly",
        "long_instructions": "# Debugging\r\n\r\nThe app is supposed to turn on the left and right LEDs when the user presses a button, but the app isn't working correctly\r\n\r\n## Do This\r\n\r\n- **What I Expected To Happen:** Pressing the buttons turns on each side of the circuit playground\r\n- **What Happened Instead:** I get an error and only some of the lights turn on and off",
        "start_html": {
          "Left": "Left",
          "Right": "Right"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/7": {
    "long_instructions": "# Light Patterns\n\nThis app creates different light patterns on the circuit playground by pressing buttons on the screen. It already has one light pattern, which can be activated by clicking a button on the screen. \n\nAdd your own button to the screen that creates your own light pattern - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.\n\n## Do This\n\n**In Design Mode:**\n\n1.  Add a new button to your screen. Give it a meaningful ID\n\n**In Code Mode:**\n\n2.  When the user clicks the button, a light pattern appears\n    -   Add an [`onEvent()`(#fff176)][0] block for your button\n    -   Add the [`colorLEDs.color()`(#f78183)][1] and [`colorLEDs.intensity()`(#f78183)][2] blocks to create your own light design. You should use each LED on your board.",
    "mini_rubric": {
      "rubric_key_concept": "Use the colored LEDs to create a pattern on the circuit playground",
      "rubric_performance_level_1": "The light pattern uses at least 3 different colors and changes the intensity of some of the LEDs",
      "rubric_performance_level_2": "The light pattern only uses 2 colors, or uses 3 colors but does not change the intensity of the LEDs",
      "rubric_performance_level_3": "The light pattern uses 1 color, or uses 2 colors but does not change the intensity of the LEDs",
      "rubric_performance_level_4": "No pattern is used"
    },
    "start_html": {
      "Red Green Blue": "Red Green Blue"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/7/levels/8": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Color LEDs - ChalA_2222": {
        "display_name": "Random Lights",
        "bubble_choice_description": "Light up a random LED light whenever the mouse moves",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/38af9d9e618d2c503723eb608d23a2b1-image-1648762373285.8.a-finished.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Random Lights\r\n\r\nCreate an app that toggles a random light on the circuit playground when you move your mouse on the screen. This can create a flashing light effect, like stars sparkling in a night sky.\r\n\r\nThe app has already been started for you with an [`onEvent()`(#fff176)](/docs/applab/onEvent/) block that detects when the mouse moves on the screen. Your task is to add code inside this block to make a random LED toggle on the circuit playground. This requires using variables with LEDs - click below to learn more about this.\r\n\r\n::: details [**Using Variables with LEDs**]\r\n![](https://images.code.org/8a296d5c848b17940d695ad95e8e69eb-image-1646089003459.png)\r\n:::\r\n\r\n## Do This\r\n\r\n1) When the mouse moves on the screen, a random LED toggles\r\n\t- Use [`var x = __;`(#BB77C7)](/docs/applab/declareAssign_x/) and [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) blocks to generate a random number between 0 and 9\r\n    - Use the [`toggle`(#f78183)](/docs/applab/toggle/) block, but instead of typing a number as the LED, use your variable instead.\r\n\r\n**Run your code!** As you move your mouse on the screen, you should see different LEDs light up!"
      },
      "CSD U6 - Color LEDs - CA_2222": {
        "display_name": "LED Counter",
        "bubble_choice_description": "Create an app that lights up each LED individually in order",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/89a9c660849cfcd40de22f9e6f2cdad0-image-1648762877958.8.b-preview.gif)\r\n\r\n<br/>\r\n\r\nExpandable Example\r\n\r\n</div>\r\n\r\n# LED Counter\r\n\r\nWe can create a program that toggles the LEDs one at a time in a circle. This requires using variables to keep track of the LED you want to turn on and off, and an if-statement to loop back to the start when you reach the end of the ring. This program has already been started for you - you need to fill in the missing pieces.\r\n\r\n# Do This\r\n\r\n- Use your variable to toggle the LED ([**Show Me Where**](#triggercallout=toggle))\r\n- Use the counter pattern to update the LED so that the next time the button is pressed, it will update the next LED ([**Show Me Where**](#triggercallout=counter))\r\n\r\n::: details [**Using Variables with LEDs**]\r\n![](https://images.code.org/8a296d5c848b17940d695ad95e8e69eb-image-1646089003459.png)\r\n:::",
        "callouts": {
          "CSD U6L7.8b - toggle": "Use your variable here",
          "CSD U6L7.8b - counter": "Increase your variable here!"
        },
        "start_html": {
          "Toggle Next LED": "Toggle Next LED"
        }
      },
      "CSD U6 - Color LEDs - ChalC_2222": {
        "display_name": "Mood Lighting",
        "bubble_choice_description": "Create an app prototype where your circuit playground could be used to create mood lighting in a room.",
        "long_instructions": "# Mood Lights\r\n\r\nCreate an app prototype where your circuit playground could be used to create mood lighting in a room. This is similar to many commercial products where a remote control can change the colors of an LED light bulb to suit different moods.\r\n\r\nYour app should have at least 3 buttons on the screen representing different moods (like \"excited\" or \"calm\" or \"anxious\" or \"tranquil\"). When the user presses one of these buttons on your app, the LEDs should light up to match the mood. Optionally, you could also have the background of the app change to a picture that matches the mood."
      },
      "CSD U6 - Color LEDs - ChalD_2222": {
        "display_name": "Long-Distance Signal",
        "bubble_choice_description": "Create an app prototype that can communicate long distances using the color LEDs.",
        "long_instructions": "# Long-Distance Signal\r\n\r\nCreate an app prototype that can communicate long distances using the color LEDs. This involves coming up with a visual code for certain words or phrases, sharing that code with a partner, then using that code to communicate. For this example, imagine you needed to communicate directions across a long distance or across the classroom.\r\n\r\n::: details [**Wait - is this a real thing? Click here to find out**]\r\n\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/c31a064979cf7d45566264b26db5e81b-image-1646099374771.png)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n<!-- <img src=\"https://images.code.org/c31a064979cf7d45566264b26db5e81b-image-1646099374771.png\" style=\"float:right; border: solid 2px black; margin: 5px; width: 300px;\" /> -->\r\n\r\nBefore the invention of the telephone or even the telegram, people used symbols and visuals to communicate long distances. These methods were especially useful on ships that were traveling together and needed to communicate across the water. A common system was to use flags to symbol letters and numbers to neighboring ships.\r\n\r\n[Click here to learn more about this system](https://www.britannica.com/technology/semaphore)\r\n\r\n:::\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n1) Decide on an LED pattern to represent `North`, `South`, `East`, and `West`. You could use different colors, or turn some LEDs on and leave others off, or come up with completely unique patterns for each direction. You may want to draw a picture to represent your pattern, since you will be sharing it with a partner\r\n\r\n**In Code Mode:**\r\n2) Add code to each of the buttons to match the pattern you decided on above\r\n\r\n**Run Your Code:**\r\n3) Have a partner stand across the room with the code that you created. Set some obstacles in the way that they will need to avoid.\r\n4) Run the app and give your partner directions using the color LEDs\r\n5) Guide them to cross the room and avoid the obstacles\r\n\r\n",
        "start_html": {
          "North": "North",
          "South": "South",
          "East": "East",
          "West": "West",
          "Off": "Off"
        }
      },
      "CSD U6 - Color LEDs - ChalG_2222": {
        "display_name": "Baby Sleep Light",
        "bubble_choice_description": "Create an app prototype where your circuit playground could be used as a light to help a baby go to sleep",
        "long_instructions": "# Baby Sleep Light\r\n\r\nCreate an app prototype where your circuit playground could be used to create a baby sleep light, which is a night light that also plays soothing sounds or music to help a baby go to sleep.\r\n\r\nYour app should use the screen to turn the night light on or off. When the device is on, it should show low lighting and play soothing music or sounds to help a baby go to sleep. When the device is off, the lights and music should turn off."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/1": {
    "long_instructions": "# TODO:\n\n-   Make this into predict level",
    "teacher_markdown": "Two new code blocks are introduced in this level: `getProperty` and `getText`. Students may notice these new blocks are being used with variables, and may predict they are being used to get user input from the screen. They may also notice there are new design elements: text inputs, dropdowns, and sliders. Try to push students to notice that the variables from `getText` and `getProperty` are used again later in the code to update the screen using `setText` and `setProperty` blocks.",
    "start_html": {
      "Name:": "Name:",
      "Profile Editor": "Profile Editor",
      "Red": "Red",
      "Orange": "Orange",
      "Yellow": "Yellow",
      "Green": "Green",
      "Blue": "Blue",
      "Indigo": "Indigo",
      "Violet": "Violet",
      "Fav Color:": "Fav Color:",
      "On a scale from 1-3, how do you feel about dogs?": "On a scale from 1-3, how do you feel about dogs?",
      "Save": "Save",
      "My name is: ": "My name is: ",
      "My favorite color is:": "My favorite color is:",
      "How I feel about dogs:": "How I feel about dogs:"
    },
    "contained levels": [
      {
        "long_instructions": "# Screen Inputs\n\nThis program includes a form for users to fill out and save.\n\nWhat do you think this code will do?  Write your prediction in the box below, then run the code to see what happens."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/2": {
    "long_instructions": "# Get and Set Text\n\nThis app simulates a temperature sensor in certain rooms of the house. You can customize the welcome screen by entering your name and the room of the house that the sensor is in. This app uses a variable and [`getText()`(#fff176)][0] block to get the users name, then a [`setText()`(#fff176)][1] block to update the screen. However, the second input box isn't setup correctly.\n\n## Do This\n\n1.  Update the `roomLabel` element with what the user typed in\n    -   Add a [`var x`(#BB77C7)][2] and [`getText`(#fff176)][3] block to get the input from the `roomInput` element\n    -   Add a [`setText`(#fff176)][4] block to update the `roomLabel` element\n\n**Run your code!** Type in your name and a room, then press the button to see the welcome screen update",
    "start_html": {
      "Welcome": "Welcome",
      "You are in the": "You are in the",
      "82": "82",
      "Set Welcome Screen": "Set Welcome Screen",
      "room of the house. The temperature is": "room of the house. The temperature is"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/3": {
    "long_instructions": "# Dropdowns\n\nYou can also use a dropdown to let the user interact with the screen. A dropdown lets you select from a list of options. You can use the [`getProperty()`(#fff176)][0] block to get the `value` from the dropdown and use it in your app.\n\nThis app should let the user change the background color of the app, but it isn't finished.\n\n## Do This\n\n1.  Get the value from the dropdown\n    -   Add a [`var x`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the `value` from the `colorDropdown` element\n2.  Update the background color\n    -   Add a [`setProperty`(#fff176)][3] block to update the background of the screen to the value from the dropdown\n\n::: details [**Show Me How**]\n<img src=\"https://images.code.org/d9ae7f5b99af8fbd5f5875d822b19124-image-1638223704356.png\" width=\"500px\" />\n:::\n\n**Run the program!** Change the background color, then click the update button to see the background change.",
    "start_html": {
      "Update Background": "Update Background",
      "black": "black",
      "white": "white"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/4": {
    "long_instructions": "# Dropdowns\n\nYou can also edit the dropdown list of options from design mode. For example, you could update the color choices to match two opposing sports teams or the school logo colors.\n\n## Do This\n\n**In Design Mode:**\n\n1.  Select the dropdown element and change the colors in the `options` area.\n    -   For example: colors that match what you're wearing today, or colors that match different sports teams\n    -   ::: details [**Show Me How**]\n        <img src=\"https://images.code.org/8c304f0db270614be52af8eef7d62c8c-image-1638223891063.gif\" width=\"500px\" />\n        :::\n\nYou do not need to make any changes to your code!\n\n**Run Your Program!** The background should should change to the colors you set in design mode",
    "start_html": {
      "Update Background": "Update Background",
      "black": "black",
      "white": "white"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/5": {
    "long_instructions": "# Sliders\n\nSliders let you change values in a range, like when you want to give a rating to something. You can use the same [`getProperty()`(#fff176)][0] block to get the `value` from a slider.\n\nThis app uses two sliders to change the width and height of an image. Right now, only the width is working. Add code to adjust the height of the image too.\n\n## Do This\n\n1.  Get the value from the slider and store it in a variable\n    -   Add a [`var x`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the `value` from the `heightSlider` element\n2.  Update the height of the image on the screen\n    -   Add a [`setProperty`(#fff176)][3] block to update the `height` of the image\n\n**Run Your Code!** You might notice that the image doesn't get very large. In the next level, we'll see how you can change the minimum and maximum values for sliders.",
    "start_html": {
      "Width:": "Width:",
      "Height:": "Height:",
      "Update!": "Update!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/6": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Sliders\n\nYou can use Design Mode to change the minimum and maximum values for your sliders.\n\n## Do This\n\n**In Design Mode:**\n\n1.  Click on the `widthSlider` element and find the **maximum value** property. Change the value from 50 to 300.\n2.  Click on the `heightSlider` element and find the **maximum value** property. Change the value from 50 to 300.\n\n**Run the app!** The image should now be able to grow much larger than before",
    "start_html": {
      "Width:": "Width:",
      "Height:": "Height:",
      "Update!": "Update!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/7": {
    "long_instructions": "# Sliders\n\n<img src=\"https://images.code.org/e446745b0b8db876c506c185e208d63f-image-1638226834987.gif\" style=\"float: right; width: 150px\" />\n\nSliders can also be attached to events so you can see the screen update as the slider moves. This uses the new `input` event, which detects when the slider changes as the user moves it.\n\n## Do This\n\n1.  As the `widthSlider` updates, change the width of the image\n    -   Drag out a new [`onEvent()`(#fff176)][0] block. Change the element to `widthSlider` and the event type to `input`.\n    -   Copy all of the code from the `updateButton` event into this new event. You may need to switch into text mode.\n    -   ::: details [**Show Me How**]\n        <img src=\"https://images.code.org/e5d9310a1007fddd0effecd7f4bacdf6-image-1638226693861.gif\" width=\"500px\" />\n        :::\n2.  Run the code and verify that changing the slider width will change the image on the screen\t\n3.  Drag out a new [`onEvent()`(#fff176)][1] block and repeat these steps for the `heightSlider` element",
    "start_html": {
      "Width:": "Width:",
      "Height:": "Height:",
      "Update!": "Update!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/8": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Inputs - PracA_2222": {
        "display_name": "Pet Scene Creator",
        "bubble_choice_description": "Use dropdowns to create different background and pet combinations",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/22b6d9efd53765a02305fdbd376fb903-image-1648830447189.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Pet Scene Creator\r\n\r\nCreate an app that lets you mix and match different background images with animal images to create different scenes. The images have already been uploaded to your app - you need to add the code that updates the screen when the user presses the \"Create\" button\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the values from the dropdowns and store it in two variables]\r\n\t- Use [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from the `backgroundDropdown` and `petDropdown` elements\r\n:::\r\n\r\n2) ::: details [Update the images on the screen]\r\n\t- Use two [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks to update the `image` property of the `backgroundImage` and `petImage` elements\r\n:::\r\n\r\n\r\n**Run the program!** You should be able to mix and match different images to create new scenes",
        "start_html": {
          "image://bedroom.png": "image://bedroom.png",
          "image://bathroom.png": "image://bathroom.png",
          "image://fireplace.png": "image://fireplace.png",
          "image://kitchen.png": "image://kitchen.png",
          "image://dog.png": "image://dog.png",
          "image://cat.png": "image://cat.png",
          "image://bunny.png": "image://bunny.png",
          "image://pig.png": "image://pig.png",
          "Create!": "Create!",
          "Select Background": "Select Background",
          "Select Pet": "Select Pet"
        }
      },
      "CSD U6 - Screen Inputs - PracB_2222": {
        "display_name": "Digital Menu",
        "bubble_choice_description": "Create an app that lets you customize a digital cafe menu",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/39f01938ced03ef94f30e86edd2b4a47-image-1648831845901.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Digital Menu Creator\r\n\r\nCreate an app that creates a customizable menu for a restaurant. The restaurant can enter their name, a special dish, and the price. Then they can use the menu to display outside their restaurant or on their website.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the values from the text inputs and store it in three variables]\r\n\t- Use three [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from the `restaurantInput`, `specialInput`, and `priceInput` elements\r\n\t:::\r\n2) ::: details [Update the label elements on the screen]\r\n\t- Use three [`setText()`(#fff176)](/docs/applab/setText/) blocks to update the `restaurantLabel`, `specialLabel`, and `priceLabel` elements\r\n    :::\r\n\r\n**Run the program!** You should be able to enter text into the boxes and press \"Create!\", and the menu will update with your customizable text!\r\n\r\n![]()\r\n\r\n![]()",
        "start_html": {
          "Today's Special": "Today's Special",
          "Digital Menu Creator": "Digital Menu Creator",
          "Create!": "Create!",
          "Price: $": "Price: $"
        }
      },
      "CSD U6 - Screen Inputs - PracC_2222": {
        "display_name": "Where You're From",
        "bubble_choice_description": "Create an app that uses sliders to move a cursor around a map",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/88ae9f1336c32c19c4f037d51af163d0-image-1648832484117.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Where You're From\r\n\r\nCreate an app that lets you move a cursor around on a map to identify where you are from. The app should use sliders for the x and y position of the cursor\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Add two `onEvent()`(#fff176) blocks to check when the user adjusts each slider]\r\n\t- Add two [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks for the `xSlider` and `ySlider` elements.\r\n    - Have the events update on the `input` event, which detects when the slider changes\r\n\t:::\r\n2) ::: details [Get the values from the sliders and store them in two variables]\r\n\t- Inside both [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks:\r\n\t\t- Use two [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) blocks to get the values from the `xSlider` and `ySlider` elements\r\n    :::\r\n3) ::: details [Update the position of the pointer arrow]\r\n\t- Use two [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks to update the `x` and `y` properties of the `pointer` element.\r\n    :::\r\n    \r\n**Run the program!** You should be able to use the sliders to move the cursor around on the screen! You can also click the link at the bottom to learn more about where you are from.",
        "start_html": {
          "Click Here to Learn More About Where You Are From": "Click Here to Learn More About Where You Are From",
          "X Position": "X Position",
          "Y Position": "Y Position",
          "Where Are You From?": "Where Are You From?",
          "Use the sliders to move the cursor to indicate where you're from!": "Use the sliders to move the cursor to indicate where you're from!"
        }
      },
      "CSD U6 - Screen Inputs - PracD_2222": {
        "display_name": "Debugging",
        "bubble_choice_description": "This app is meant to ask a series of secret questions to unlock the final screen, but each question has a bug.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f87aa16429422001fc3f6c0e9216f7be-image-1650646971636.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Debugging\r\n\r\nThis app is meant to ask a series of secret questions to unlock the final screen, but each question has a bug. Read through the code and experiment with the app to fix the bugs and reach the final screen! You only need to update the code that already exists - you don't need to add any new lines of code.\r\n\r\n_Note: Some of the bugs may be in design mode as well as code mode_\r\n\r\n## Do This\r\n\r\n1) Screen 1 Bugs\r\n\t- **What I Expected To Happen:** Selecting \"Mountain Ibex\" and pressing \"Check\" takes me to the next screen\r\n\t- **What Happened Instead:** I always get \"Try Again\" and can't continue\r\n2) Screen 2 Bugs\r\n\t- **What I Expected To Happen:** Using the slider to select 35 and pressing \"Check\" will take me to the next screen\r\n\t- **What Happened Instead:** I can't make the slider go past 10\r\n2) Screen 3 Bugs\r\n\t- **What I Expected To Happen:** Typing \"Open Sesame\" and pressing \"Check\" will take me to the next screen\r\n\t- **What Happened Instead:** I get an error in my code and the app stops working",
        "teacher_markdown": "**Screen 1 Bug:** Students need to change the `getProperty` block to get the `value` from the dropdown instead of `options`\r\n\r\n**Screen 2 Bug:** Students need to go into Design Mode and change the max value of the slider from 10 to something greater or equal to 35\r\n\r\n**Screen 3 Bug:** Students need to use the correct variable in the code, replacing `trial3Input` (which is the ID of the design element) with `trial3Answer` (which is the actual variable in the code)",
        "start_html": {
          "Choose the secret animal": "Choose the secret animal",
          "Snow Owl": "Snow Owl",
          "Desert Iguana": "Desert Iguana",
          "Mountain Ibex": "Mountain Ibex",
          "Ocean Dolphin": "Ocean Dolphin",
          "Check!": "Check!",
          "Enter the Secret Code!": "Enter the Secret Code!",
          "Choose the secret number": "Choose the secret number",
          "0": "0",
          "Congratulations! You made it through all the trials!": "Congratulations! You made it through all the trials!"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/9": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Custom Profile\n\nIsaac has started to create an app that lets you set a custom profile to change things like the background color or font size of your app. The user can enter their settings in the top half of the app and press the Preview button, and then the bottom half of the app updates with their changes. The app has already been started, but needs help updating the design elements and code.\n\n## Do This\n\n**In Design Mode:**\n\n-   Update the dropdown menu so it includes at least 4 different colors\n-   Update the slider so it has a minimum value of 12 and a maximum value of 30.\n\n**In Code Mode:**\n\n1.  ::: details [Get the value from the text input, dropdown, and slider and store in three variables]\n    -   You can use [`getText()`(#fff176)][1] and [`getProperty()`(#fff176)][2] to get the values from each screen input\n        :::\n2.  ::: details [Update the text and properties of the `previewLabel` element]\n    -   You can use [`setText()`(#fff176)][3] and [`setProperty()`(#fff176)][4] blocks to update the `previewLabel` element\n        :::\n\n**Run Your Code!** Enter your name and set your own theme, then see if the app updates",
    "mini_rubric": {
      "rubric_key_concept": "Getting user input from the screen and using it to update an app",
      "rubric_performance_level_1": "Each design element has been correctly customized according to the app description, and the code gets the user input and uses it to update the app",
      "rubric_performance_level_2": "The code gets the user input and uses it to update the app, but the design elements may not be correctly customized according to the app description",
      "rubric_performance_level_3": "There are errors when trying to get values from the text input, dropdown, or slider; or the app is incomplete and does not get all of the input elements.",
      "rubric_performance_level_4": "The app does not get input from any of the elements on the screen."
    },
    "start_html": {
      "Customize Your Theme": "Customize Your Theme",
      "Name:": "Name:",
      "Background:": "Background:",
      "Font Size:": "Font Size:",
      "Preview Theme": "Preview Theme",
      "Your Name": "Your Name"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/8/levels/10": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Inputs - ChalA_2222": {
        "display_name": "Excitement Meter",
        "bubble_choice_description": "Create an app that uses a slider and images to show your level of excitement",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/6c0f62f904d02d3764a28b72c4e13114-image-1646239220146.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Excitement Meter\r\n\r\nCreate an app that lets you adjust your level of excitement and displays different images to represent your excitement. Your app should use the `input` event from the slider, then use a variable and if-statements to change the image based on the value. There are some example images you can use, or you can find your own images to use instead!\r\n\r\n## Do This\r\n1) Use an [`onEvent()`(#fff176)](/docs/applab/onEvent/) block to detect when the slider changes\r\n2) Get the value from the slider and store it in a variable\r\n3) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to change the image based on the value of the slider\r\n\t- The slider has values from 1-5, so you will need five if-statements",
        "start_html": {
          "Excitement Meter": "Excitement Meter",
          "Use the slide to represent your excitement! As you move the slider, the image will adjust to reflect your level of excitement": "Use the slide to represent your excitement! As you move the slider, the image will adjust to reflect your level of excitement"
        }
      },
      "CSD U6 - Screen Inputs - ChalB_2222": {
        "display_name": "Background Sliders",
        "bubble_choice_description": "Create an app that lets you adjust the background color of an app using 3 sliders for red, green, and blue color values",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f5a12be73a4ade20548f2e0189436a8e-image-1646239023435.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Background Sliders\r\n\r\nUse 3 sliders to update the background color of the screen using the [`rgb()`(#fff176)](/docs/applab/rgb/) block. The app has already been started for you and has 3 variables to represent the red, green, and blue values.\r\n\r\n## Do This\r\n1) Add three [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks to check the `input` event for each slider\r\n2) Update the value of the color variable using [`getProperty()`(#fff176)](/docs/applab/getProperty/)\r\n3) Use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`rgb()`(#fff176)](/docs/applab/rgb/) block to update the `background-color` of the screen",
        "start_html": {
          "Red": "Red",
          "Green": "Green",
          "Blue": "Blue"
        }
      },
      "CSD U6 - Screen Inputs - ChalC_2222": {
        "display_name": "Pet Adoption",
        "bubble_choice_description": "Create an app prototype that lets the user browse different pets that are available for adoption.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f50124881e143bd72f2e41a70f601665-image-1646241597034.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Pet Adoption App\r\n\r\nCreate an app prototype that lets the user browse different pets that are available for adoption. The app should use a dropdown menu so when the user selects a pet, the screen updates with more information about the pet.\r\n\r\nThe app has already been started for you in design mode - your task is to add the different pets to the app. Your app should have at least 4 different pets up for adoption.\r\n\r\n## Do This\r\n**In Design Mode:**\r\n- Update the dropdown options to include at least 4 different pets. They can be four different animals, or all the same type of animal.\r\n\t- Some sample assets have been uploaded for you, but you can also add different images\r\n\r\n**In Code Mode:**\r\n1) Add an [`onEvent()`(#fff176)](/docs/applab/onEvent/) to detect when the dropdown changes.\r\n\t- You should use the `change` event from the dropdown element\r\n2) Get the value from the dropdown and store it in a variable\r\n3) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to check the value from the dropdown and update the image and text based on the chosen pet\r\n\t- You should have four different if-statements to check each pet\r\n\r\n_Acknowledgement: This level was suggested by the teacher and students at Still Middle School in Aurora, IL._",
        "start_html": {
          "Pet Adoptions!": "Pet Adoptions!",
          "Use the dropdown below to see which pets are available for adoption": "Use the dropdown below to see which pets are available for adoption",
          "Option 1": "Option 1",
          "Option 2": "Option 2",
          "Visit our website to adopt a pet!": "Visit our website to adopt a pet!"
        }
      },
      "CSD U6 - Screen Inputs - ChalD_2222": {
        "display_name": "Story Generator",
        "bubble_choice_description": "Create an app prototype that lets the user generate words to appear in a customized story",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/15386bbb10862ae7af983232f7e169f3-image-1646246117203.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Story Generator\r\n\r\nCreate an app that lets the user generate a unique story by entering different words to be used in the story. These are sometimes called \"Mad-Libs\".\r\n\r\nIn our version, the story will have 3 parts and each part will end with one of the words that the user supplied. For example, one part of the story could say \"The disease had spread to all of the fruits and vegetables, turning them all `______`\", and then the user enters a color to fill in the missing word.\r\n\r\nThe app has already been started for you with the design and buttons, but it still needs to be filled in with a story and updated based on what the user enters.\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n- Think of a 3-part story where each part ends with a word that the user can enter. For example, you can ask the user to enter a type of food, or a place to visit, or someone's name, or a way to describe something. Then each part of your story should end with one of these words\r\n\r\n**In Design Mode:**\r\n- On the `homeScreen`, update each of the `placeholder` properties of the input elements to tell the user what to enter. For example: \"Enter a color\" or \"Enter a name\".\r\n- Update each of the labels on `part1Screen`, `part2Screen`, and `part3Screen` with the parts of your story\r\n\r\n**In Code Mode:**\r\n- Inside the `startButton` [`onEvent()`(#fff176)](/docs/applab/onEvent/): use variables and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from each text input, then use [`setText()`(#fff176)](/docs/applab/setText/) to update the labels on each screen\r\n\r\n**Run Your Code!** You should be able to generate a unique story with different words that the user enters\r\n\r\n_Optional: Add images or colors to your screens to make the story come to life!_",
        "start_html": {
          "Start The Story!": "Start The Story!",
          "Story Generator!": "Story Generator!",
          "Enter words that will be used in a story on the next screens!": "Enter words that will be used in a story on the next screens!",
          "Part 1": "Part 1",
          "In design mode, replace this with the first part of your story!": "In design mode, replace this with the first part of your story!",
          "Next Page": "Next Page",
          "Part 2": "Part 2",
          "In design mode, replace this with the second part of your story!": "In design mode, replace this with the second part of your story!",
          "Part 3": "Part 3",
          "In design mode, replace this with the final part of your story!": "In design mode, replace this with the final part of your story!"
        }
      },
      "CSD U6 - Screen Inputs - ChalG_2222": {
        "display_name": "Order Form App",
        "bubble_choice_description": "Create an app prototype that could be used to order a product from a store, such as ordering groceries online or ordering school supplies from a local business.",
        "long_instructions": "# Order Form App\r\n\r\nCreate an app prototype that could be used to order a product from a store, such as ordering groceries online or ordering school supplies from a local business. The app can use dropdowns and sliders to let the user select what they would like to order, and show a confirmation screen when the order is complete.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play level**: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Screen Inputs - ChalH_2222": {
        "display_name": "Survey App",
        "bubble_choice_description": "Create an app prototype that could be used for a survey to learn more about a person",
        "long_instructions": "# Survey App\r\n\r\nCreate an app prototype that could be used for a survey to learn more about a person, such as asking about someone's interests to make a restaurant recommendation or asking about someone's preferences to help a group make a decision.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play level**: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/1": {
    "long_instructions": "Predict Level (See contained level for markdown)",
    "teacher_markdown": "Student responses may include:\n\n-   The screen is using a dropdown menu and a `getProperty` block for input to see whether the LED should blink or pulse\n-   The screen is using a label and a `setText` block for output to display whether the light is on or off\n-   The circuit playground is using the buttons and an `onBoardEvent` block for input to turn on or off the lights\n-   The circuit playground is using the `colorLEDs` blocks as output to turn on the lights\n\nStudents will also need their circuit playgrounds for this level. If student’s boards aren’t working, have them [press the Setup button][0] in the maker app or visit [https://studio.code.org/maker/setup][1] on a Chromebook.",
    "start_html": {
      "blink": "blink",
      "pulse": "pulse",
      "Choose your LED style, then use the left and right buttons on your Circuit Playground to turn the LED off and on.": "Choose your LED style, then use the left and right buttons on your Circuit Playground to turn the LED off and on.",
      "Off": "Off"
    },
    "contained levels": [
      {
        "long_instructions": "# Combining Inputs and Outputs\n\nThis level doesn't contain any new code - instead, it combines several new concepts you've seen over the last few lessons.\n\nRead through the code, then respond to the following prompts:\n\n-   Identify one way that you think the **screen** is being used for either _input_ or _output_ by the user\n-   Identify one way that you think the **circuit playground** is being used for either _input_ or _output_ by the user\n\nWhen you are done, press \"Run\" to see how the program runs"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/2": {
    "long_instructions": "# Using the Circuit Playground\n\nHere's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.\n\nUsing the LEDs as a model, add variables and an if-statement to play a long or short buzz.\n\n# Do This\n\n1.  Find the section of the code that says \"Add your code here\" [(Show me where)][0]\n2.  Get the value from the dropdown and store it in a variable\n    -   Add a [`var x =`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the value from the `buzzerDropdown` element\n3.  Use two [`if-statements`(#64B5F6)][3] to check the value from the dropdown\n    -   Use the [`==`(#FFB74D)][4] block to check if the value from the dropdown is `short buzz` or `long buzz`\n4.  Play a sound with the buzzer according to what the user chose\n    -   Use a [`buzzer.frequency()`(#f78183)][5] block to play a short or long buzz\n\nRun your code and verify that the buzzer works correctly",
    "callouts": {
      "CSD U6L10.2 - add_code": "Add your code here!"
    },
    "start_html": {
      "blink": "blink",
      "pulse": "pulse",
      "short buzz": "short buzz",
      "long buzz": "long buzz",
      "Choose your LED and buzzer styles, then use the left and right buttons on your Circuit Playground to turn the them on and off.": "Choose your LED and buzzer styles, then use the left and right buttons on your Circuit Playground to turn the them on and off.",
      "Off": "Off"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/3": {
    "long_instructions": "# Sliders\n\nLast time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.\n\nThis slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.\n\n# Do This\n\n-   Look over the code and find the bug that's keeping the duration from being set correctly.\n    -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)",
    "start_html": {
      "Buzzer Control": "Buzzer Control",
      "Choose the duration of the buzz with the slider, then click the left board button to turn it on.": "Choose the duration of the buzz with the slider, then click the left board button to turn it on.",
      "short": "short",
      "long": "long"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/4": {
    "long_instructions": "# Frequency\n\nThis buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.\n\n# Do This\n\n-   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the `frequencySlider` design element.\n-   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.\n-   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)",
    "start_html": {
      "Front Door Buzzer Control": "Front Door Buzzer Control",
      "Welcome to our home please set the buzzer to the frequency and durationof who you would like to answer the door. Once you are set use the left button to activate and the right person will meet you at the door.": "Welcome to our home please set the buzzer to the frequency and durationof who you would like to answer the door. Once you are set use the left button to activate and the right person will meet you at the door.",
      "short": "short",
      "long": "long",
      "low": "low",
      "high": "high",
      "Reggie- Short and HighPat- Long and LowChris- Short and LowMac the Dog- Long and High": "Reggie- Short and HighPat- Long and LowChris- Short and LowMac the Dog- Long and High",
      "Pat- Long and Low": "Pat- Long and Low",
      "Chris- Short and Low": "Chris- Short and Low",
      "Mac the Dog- Long and High": "Mac the Dog- Long and High"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/5": {
    "long_instructions": "# Change\n\nLet's see if we can use a slider to change how fast our LEDs will blink. We'll use the change event so the lights are updated right away instead of pressing a button.\n\n# Do This\n\n1.  Get the value from the slider and store it in a variable\n    -   Use a [`var x = __`(#BB77C7)][0] and [`getProperty()`(#fff176)][1] block to get the value from the dropdown\n2.  Update the blink blocks to use the slider variable\n\n**Run your program!** You can move the slider to see whether the LEDs speed changes automatically.",
    "start_html": {
      "LED Control": "LED Control",
      "Choose the blink speed with the slider, which will update the lights. Turn the lights off with the right button.": "Choose the blink speed with the slider, which will update the lights. Turn the lights off with the right button.",
      "short": "short",
      "long": "long"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/6": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Combine Inputs - PracA_2222": {
        "display_name": "Left vs Right",
        "bubble_choice_description": "Use a dropdown to control the left or right side of the LEDs",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/be40b6e2f326c85086b367e158db115a-image-1650057755219.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Left vs Right Lights\r\n\r\nCreate an app that controls whether the left or right side of the circuit playground is turned on. The app uses a dropdown to select the left or right side, then the user presses the left button on the circuit playground to activate their lights.\r\n\r\n## Do This\r\n1) ::: details [Get the value from the dropdown and store it in a variable]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the dropdown\r\n    :::\r\n2) ::: details [If the value is `\"left\"`: turn on the left LEDs and turn off the right LEDs]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) and [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check the value of your variable from the dropdown\r\n    - Turn on LEDs `0` through `4` and turn off LEDs `5` through `9`.\r\n    :::\r\n3) ::: details [If the value is `\"right\"`: turn on the right LEDs and turn off the left LEDs]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) and [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check the value of your variable from the dropdown\r\n    - Turn on LEDs `5` through `9` and turn off LEDs `0` through `4`\r\n    :::",
        "start_html": {
          "LED Control": "LED Control",
          "Choose which LEDs to turn on with the circuit playground, then click the left board button to turn those on.": "Choose which LEDs to turn on with the circuit playground, then click the left board button to turn those on.",
          "left": "left",
          "right": "right"
        }
      },
      "CSD U6 - Combine Inputs - PracB_2222": {
        "display_name": "Intensity",
        "bubble_choice_description": "Use a slider to change the intensity of the LEDs",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/ae5f1cb5097dae3da0cf7751f2d3f22e-image-1650057767608.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Intensity\r\n\r\nCreate an app that lets you change the intensity of your LEDs using a slider. The user can press the left button to turn on the lights and the right button to turn them off. Then they can use a slider to adjust the intensity\r\n\r\n# Do This\r\n\r\n1) ::: details [Get the value from the slider and store it in a variable]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the slider\r\n    :::\r\n2) ::: details [Set all of the LEDs to the new intensity value from your variable]\r\n\t- You'll need 10 [`intensity()`(#f78183)](/docs/applab/intensity/) blocks, one for each LED\r\n    - Hint: when using a variable, you do _not_ need to use quotes\r\n    :::\r\n\r\n**Run your program!** When you move the slider, the LEDs brightness should change automatically.",
        "start_html": {
          "Bedside Nightlight": "Bedside Nightlight",
          "Whether you are reading your favorite book or just want to keep the monsters away you can choose the light intensity that will light up your night just use the slider, which will update the lights. Turn the lights off with the right button": "Whether you are reading your favorite book or just want to keep the monsters away you can choose the light intensity that will light up your night just use the slider, which will update the lights. Turn the lights off with the right button",
          "dim": "dim",
          "bright": "bright"
        }
      },
      "CSD U6 - Combine Inputs - PracC_2222": {
        "display_name": "LED Color Dropdown",
        "bubble_choice_description": "Create an app that lets the user change the color of the LEDs with a dropdown menu",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/2e8f440a22789518e827252217248758-image-1650057783402.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# LED Color Dropdown\r\n\r\nCreate an app that lets the user select the color of the LEDs using a dropdown menu.\r\n\r\n## Do This\r\n\r\n1) ::: details [Get the value from the dropdown and store it in a variable]\r\n\t- Use a [`var x =`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the dropdown menu\r\n    :::\r\n2) ::: details [Update the color of each LED]\r\n\t- You will need 10 [`color(color)`(#f78183)](/docs/applab/color/) blocks for each LED\r\n\t- Note: When using a variable in a block, you do _not_ need to include quotes\r\n    :::",
        "start_html": {
          "yellow": "yellow",
          "green": "green",
          "blue": "blue",
          "orange": "orange",
          "Use the dropdown to change the color of the LEDs": "Use the dropdown to change the color of the LEDs"
        }
      },
      "CSD U6 - Combine Inputs - PracD_2222": {
        "display_name": "Alarm Clock Settings",
        "bubble_choice_description": "Create an app that lets you customize how an alarm clock looks and sounds when it goes off.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/5dc2e4d2d52ec8cd8d7d1ef83768ec37-image-1650057797540.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Alarm Clock Settings\r\n\r\nCreate an app that lets you customize how an alarm clock looks and sounds when it goes off. There are two settings - `quiet` and `loud`. The quiet setting plays a low frequency and displays teal lights. The loud setting displays a higher frequency and displays red lights.\r\n\r\nThe app has already been started for you with the `quiet` section complete. Your task is to complete the first line of code with the variable, and then add a new if-statement for the `loud` section of the app.\r\n\r\n## Do This\r\n1) Get the value from the dropdown on the screen [**(Show Me Where)**](#triggercallout=variable)\r\n2) Use an if-statement to play a high-pitched note and turn all of the LEDs red [**(Show Me Where)**](#triggercallout=if-statement)",
        "callouts": {
          "CSD U6L9.7 - variable": "Get the value from the dropdown here",
          "CSD U6L9.7 - if-statement": "Add your if-statement here"
        },
        "start_html": {
          "Beach Vacation Alarm Clock": "Beach Vacation Alarm Clock",
          " Use the settings menu below to customize how loud your alarm clock will sound when it goes off, then press the \"Test\" button to see and hear what it sounds like.": " Use the settings menu below to customize how loud your alarm clock will sound when it goes off, then press the \"Test\" button to see and hear what it sounds like.",
          "quiet": "quiet",
          "loud": "loud",
          "Test": "Test"
        }
      },
      "CSD U6 - Combine Inputs - CA_2022": {
        "display_name": "Debugging",
        "bubble_choice_description": "This program is supposed to control the LED and buzzer, but it has some problems. See if you can debug the code to make it work correctly!",
        "long_instructions": "# Debugging\r\n\r\nThis program is supposed to control the LED and buzzer, but it has some problems. See if you can debug the code to make it work correctly!\r\n\r\nYou only need to update the code that's already in this level - you don't need to add any new code!\r\n\r\n## Do This\r\n\r\n1) Turning on the LED\r\n\t- **What I Expected To Happen:** Selecting an option from the dropdown and opening the toggle switch will update the red LED\r\n\t- **What Happened Instead:** Not all of the options are working correctly\r\n2) Turning off the LED\r\n\t- **What I Expected To Happen:** Closing the toggle switch turns off the red LED\r\n\t- **What Happened Instead:** The LED seems to turn off even when it's not supposed to\r\n3) Controlling the Buzzer\r\n\t- **What I Expected To Happen:** Pressing the left button plays the buzzer according to the sliders\r\n\t- **What Happened Instead:** It doesn't sound like the buzzer is playing according to the settings I have",
        "teacher_markdown": "**1) Turning on the LED** - Students need to update the `\"Blink\"` if-statement to be lowercase instead of uppercase\r\n\r\n**2) Turning off the LED** - Students need to update the `onBoardEvent` to use the `closed` event instead of the `change` event\r\n\r\n**3) Controlling the Buzzer** - Students need to switch the sliders that the variables are using so they match correctly (ie: the `duration` variable's `getProperty` also uses the `duration` slider)",
        "start_html": {
          "LED Controls": "LED Controls",
          "on": "on",
          "blink": "blink",
          "pulse": "pulse",
          "fast": "fast",
          "slow": "slow",
          "Buzzer Controls": "Buzzer Controls",
          "Press the left buttonto control the buzzer": "Press the left buttonto control the buzzer",
          "Use the toggle switch to control the LED": "Use the toggle switch to control the LED",
          "short": "short",
          "long": "long",
          "low": "low",
          "high": "high"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/74019d972f7a63e8f4f16cbec2c2662a-image-1634600926494.png\" style=\"width: 150px; float:right; margin: 10px;\" />\n\n# Traffic Control\n\nYou are helping design an app that can control the traffic lights in a construction zone. The app will control the lights to tell drivers whether to merge left or right in order to avoid construction. The app will also control the color and brightness of the lights to make sure they’re not blinding or distracting.\n\nThe app has already been started for you, but the code needs to be finished.\n\n## Do This\n\n1.  Get the value from the color dropdown and store it in a variable [(Show Me Where)][0]\n2.  Get the value from the brightness slider and store it in a variable [(Show Me Where)][1]\n3.  ::: details [If the direction is `\"left\"`: set the left LEDs and turn off the right LEDs]\n    -   Inside the first if-statement [(Show Me Where)][2]:\n        -   Turn on the left side of the board to the appropriate color and intensity\n        -   Turn off the right side of the board\n            :::\n4.  ::: details [If the direction is `\"right\"`: set the right LEDs and turn off the left LEDs]\n    -   Inside the second if-statement [(Show Me Where)][3]:\n        -   Turn on the right side of the board to the appropriate color and intensity\n        -   Turn off the left side of the board\n            :::",
    "callouts": {
      "CSD U6L10.7 - colorVar": "Create your variable here",
      "CSD U6L10.7 - brightnessVar": "Create your variable here",
      "CSD U6L10.7 - leftIf": "Light up the left side of the board",
      "CSD U6L10.7 - rightIf": "Light up the right side of the board"
    },
    "mini_rubric": {
      "rubric_key_concept": "Combining input and output elements from the circuit playground and the screen to create an app",
      "rubric_performance_level_1": "The app works as described, with variables used to get the values from the screen and to turn on the LEDs of the circuit playground in the correct direction.",
      "rubric_performance_level_2": "The app can turn on the LEDs, but one of the inputs (direction, color, or brightness) is not be working correctly",
      "rubric_performance_level_3": "The LEDs turn on, but they do not react to the values that the user enters. Variables are not used correctly in the program.",
      "rubric_performance_level_4": "The app has not been changed."
    },
    "start_html": {
      "Activate Traffic Signal": "Activate Traffic Signal",
      "Traffic Control App": "Traffic Control App",
      "Use this app to control a traffic signal in the road so cars know to avoid construction. You can set the direction to guide traffic, along with the color and brightness of the lightsDirection:Color:Brightness:leftrightredyellowgreenpurple": "Use this app to control a traffic signal in the road so cars know to avoid construction. You can set the direction to guide traffic, along with the color and brightness of the lightsDirection:Color:Brightness:leftrightredyellowgreenpurple",
      "You can set the direction to guide traffic, along with the color and brightness of the lights": "You can set the direction to guide traffic, along with the color and brightness of the lights",
      "Direction:": "Direction:",
      "Color:": "Color:",
      "Brightness:": "Brightness:",
      "left": "left",
      "right": "right",
      "red": "red",
      "yellow": "yellow",
      "green": "green",
      "purple": "purple"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/9/levels/8": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Combine Inputs - ChalA_2222": {
        "display_name": "LED Mood Ring",
        "bubble_choice_description": "Create an app prototype that simulates a Mood Ring, which changes the colors of the LEDs based on the mood of the user",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/cce9c3a7723586f2fc4d590843dc1d2a-image-1648843035099.8.a-finished.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# LED Mood Ring\r\n\r\nA [Mood Ring](https://en.wikipedia.org/wiki/Mood_ring) is a piece of jewelry with a stone that can change color based on your \"mood\" (but really, it changes color based on temperature). These were popular gift items in the 1980's since the ring could change color based on the user.\r\n\r\nCreate an app that lets the user select a mood from a dropdown, then updates the ring of lights to match the mood. You can use some [suggested colorings based on actual Mood Rings](https://upload.wikimedia.org/wikipedia/commons/8/87/Mood_Stone_User_Guide.png), or make your own decisions about which colors or designs represent certain moods.\r\n\r\nYour app should have 4 moods. Two moods - `relaxed` and `excited` have already been created for you, and you need to add two more moods. You can also add more options to the dropdown and make as many moods as you want!\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n- Decide the other moods you would like to include in your app\r\n- Decide which colors or designs you would like to use to represent each mood\r\n\r\n**Design Mode:**\r\n- Add your other moods to the dropdown menu so there are at least four options\r\n\r\n**Code Mode:**\r\n- Add [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the dropdown and update the color LEDs. You will need at least four if-statements for each mood.\r\n\r\n**Run Your Code!**\r\n- Have a partner try out your app. They can pick a mood without you seeing the app and only looking at the Circuit Playground. See if you can tell their mood based only on the lights and design of the LEDs.",
        "start_html": {
          "Mood Ring": "Mood Ring",
          "Choose your mood from the dropdown below and the LED ring will update to reflect it": "Choose your mood from the dropdown below and the LED ring will update to reflect it",
          "Excited": "Excited",
          "Relaxed": "Relaxed",
          "(Add your mood here)": "(Add your mood here)"
        }
      },
      "CSD U6 - Combine Inputs - ChalB_2222": {
        "display_name": "Motorcycle Movement",
        "bubble_choice_description": "Create an app that moves a motorcycle left and right on the screen using the circuit playground buttons",
        "long_instructions": "# Motorcycle Movement\r\n\r\nCreate an app that moves a motorcycle left and right on the screen using the buttons on the circuit playground. The app has already been started for you: pressing the left button will move the motorcycle to the left by 10 units. This app uses the [Counter Pattern](/docs/concepts/app-lab/the-counter-pattern/) to move the motorcycle.\r\n\r\n# Do This\r\n\r\n* Using the working left button as an example, program the right button to make the motorcycle go to the right."
      },
      "CSD U6 - Combine Inputs - ChalC_2222": {
        "display_name": "Trivia Game",
        "bubble_choice_description": "Create an app that asks the user a trivia question, then uses the circuit playground to celebrate when they get the answer correct",
        "long_instructions": "# Trivia Question\r\n\r\nCreate an app that asks the user a trivia question and lets them type in their response. If they answer correctly, the circuit playground should light up and buzz. If they answer incorrectly, nothing should happen.\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n\r\n- Decide on a trivia question you would like to ask the user. Make sure your question has one clear answer!\r\n\r\n**Design Mode:**\r\n\r\n- Edit the label to display your trivia question\r\n\r\n**Code Mode:**\r\n\r\n1) Use a variable and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the answer input box\r\n2) Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the user entered the correct answer. If they did, have the circuit playground buzz and turn on the LEDs\r\n\r\n**Run Your Code!** See if a partner can answer your trivia question!\r\n\r\n**Optional Extensions:**\r\n\r\n3) Experiment with the `else` part of an `if-statement` to make your program do something if the user answers incorrectly\r\n4) Create a new celebration screen that the user sees when they get the answer correct",
        "start_html": {
          "Trivia Game!": "Trivia Game!",
          "[Enter your trivia question here!]": "[Enter your trivia question here!]",
          "Check Answer!": "Check Answer!",
          "Make sure to enter your answer in all lowercase!": "Make sure to enter your answer in all lowercase!"
        }
      },
      "CSD U6 - Combine Inputs - ChalG_2222": {
        "display_name": "LED Sliders",
        "bubble_choice_description": "Create an app that lets you adjust the LED colors of an app using 3 sliders for red, green, and blue color values",
        "long_instructions": "# LED Sliders\r\n\r\nUse 3 sliders to update the color of the LEDs using the [`rgb()`(#fff176)](/docs/applab/rgb/) block. The app has already been started for you and has 3 variables to represent the red, green, and blue values.\r\n\r\n## Do This\r\n\r\n1) Add three [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks to check the `input` event for each slider\r\n2) Update the value of the color variable using [`getProperty()`(#fff176)](/docs/applab/getProperty/)\r\n3) Use the [`color()`(#f78183)](/docs/applab/color/) and [`rgb()`(#fff176)](/docs/applab/rgb/) block to update the color of each LED",
        "start_html": {
          "Red": "Red",
          "Green": "Green",
          "Blue": "Blue"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/10/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever you are finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/10/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or making a small buzz on the circuit playground. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/10/levels/3": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device uses inputs and outputs to function. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/10/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - [click here to see the rubric][0]. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever your finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6-2022/lessons/10/levels/5": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    },
    "sublevels": {
      "csd-pulse-check-survey-preamble_2222": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **five quick questions**.\n\n<small>\n<em>Code.org takes your privacy seriously.</em> Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n</small>\n"
        }
      },
      "csd-pulse-check-survey-1-q1 U6Ch1_2222": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q2 U6Ch1_2222": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I have the ability to learn computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q3 U6Ch1_2222": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q4 U6Ch1_2222": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I feel comfortable in this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q5 U6Ch1_2222": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future."
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/1": {
    "display_name": "Sensor Experiment",
    "long_instructions": "# Sensor Experiment\n\nRun the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:\n\n-   What does this sensor measure?\n-   What is its maximum value?\n-   What is its minimum value?",
    "teacher_markdown": "There are three sensors on the circuit playground: a light sensor, a sound sensor, and a temperature sensor. Encourage students to relate the sensors to their own senses and interact with the circuit playground that way - for example, what happens when we show or hide things from the circuit playground? What happens when the volume changes near the circuit playground?\n\nThrough experimentation, students should notice that the minimum value is 0 and the maximum value is 1023. Students may also notice that one sensor (temperature) doesn't seem to change very much.",
    "start_html": {
      "Sensor 1": "Sensor 1",
      "text": "text",
      "high": "high",
      "low": "low",
      "Sensor 2": "Sensor 2",
      "Sensor 3": "Sensor 3"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/2": {
    "long_instructions": "# Reading the Sound Sensor\n\nThe [`soundSensor.value`(#f78183)][0] block allows you to get the current sound sensor reading. In this app we've already added a text label with the id `soundValue`. Using the [`soundSensor.value`(#f78183)][1] block, display the value of the sound sensor.\n\n# Do This\n\n1.  When the program starts, update the screen with the sound level near the circuit playground\n    -   Drag out a [`setText()`(#fff176)][2] block and set the ID to the label on the screen\n    -   Drag out a [`soundSensor.value`(#f78183)][3] block directly into the [`setText()`(#fff176)][4] block\n        -   ::: details [**Show Me How**]\n            [][5]\n            :::\n\n**Run Your App! Run it multiple times!** Try running the program multiple times at different volumes. You will need to reset and re-run to have the sensor update. Each time the program is run, it will update the label to display the value from the sound sensor.",
    "start_html": {
      "Sound Sensor Reading": "Sound Sensor Reading",
      "value": "value"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/3": {
    "long_instructions": "# Light Sensor Updates\n\nThis app is very similar to the last, but we've added a button with the ID \"updateButton\". Write a program that displays the current value of the light sensor every time the update button is clicked.\n\n# Do This\n\n1.  Inside the [`onEvent()`(#fff176)][0] block, update the text of the `lightValue` element using the [`lightSensor.value`(#f78183)][1] block.\n\n**Run Your Code!** Try covering the circuit playground and updating the screen, then try shining a flashlight on the circuit playground and updating the screen!",
    "start_html": {
      "Light Sensor Reading": "Light Sensor Reading",
      "value": "value",
      "Update": "Update"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/4": {
    "teacher_markdown": "Students should notice two new blocks in this code - `setScale()` and `onBoardEvent` which refers to the `lightSensor`. Students might predict that something will change on the screen related to the light sensor, but they may not be sure how the board event works. They may notice that `setScale` includes the value 450 which is the height of the screen. Once students run the program and see the emoji moving up and down on the screen, they may be able to make the connection between the scale value and the screen height. It's okay if students still aren't sure about the new board event, since this is introduced in the following level.",
    "contained levels": [
      {
        "long_instructions": "# Make a Prediction\n\nRead the code in this program and make a prediction below. What do you think this program will do when you run it?"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/5": {
    "long_instructions": "# Data Event\n\nEach of these analog sensors emits a special event called \"data\" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.\n\n## Do This\n\n1.  Create an event to continuously check the `soundSensor`\n    -   Drag out an [`onBoardEvent()`(#f78183)][0] to check the `soundSensor` for a `data` event\n    -   ::: details [**Show Me How**]\n        [][1]\n        :::\n2.  Inside the event, update the screen to display the value of the sound sensor\n    -   Use the [`setText()`(#fff176)][2] and [`soundSensor.value`(#f78183)][3] blocks to update the screen\n\n**Run Your Code!** You should see the screen update in real-time based on the volume in the room. How low can you make the sensor go? How high can you make it go?",
    "start_html": {
      "Sound Sensor Reading": "Sound Sensor Reading",
      "value": "value"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/6": {
    "long_instructions": "# Set Scale\n\nThe sound and light sensors range from 0-1023, but you can also use a [`setScale()`(#f78183)][0] block to adjust the range of the sensors. These blocks are usually added to the beginning of your code and only need to be used once.\n\n# Do This\n\n1.  Set the range of the `soundSensor` to be between 0 and 100\n    -   Add a [`soundSensor.setScale()`(#f78183)][1] block to the top of your code.\n    -   Set the first parameter to `0` and the second parameter to `100`. This represents a range from 0-100\n    -   ::: details [Show Me How]\n        [][2]\n        :::\n\n**Run Your Code!** You should notice the values now stay between 0 and 100 no matter how loud it is near the sound sensor.",
    "start_html": {
      "Sound Sensor Reading": "Sound Sensor Reading",
      "value": "value"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/7": {
    "long_instructions": "# Change Event\n\nThe `data` event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor `change` event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.\n\nLet's write a program that buzzes and updates the screen anytime the temperature sensor changes.\n\n## Do This\n\n1.  Create an event to check the `tempSensor` when it changes\n    -   Drag out an [`onBoardEvent()`(#f78183)][0] to check the `tempSensor` for a `change` event\n    -   ::: details [**Show Me How**]\n        [][1]\n        :::\n2.  Play a sound and update the screen when the temperature changes\n    -   Inside the [`onBoardEvent()`(#f78183)][2] block:\n        -   Have the buzzer make a sound.\n        -   Update the screen with the new temperature value\n\n**Run Your Code!** Try placing your thumb over the temperature sensor to warm up the sensor and get it to change. See how your program responds!\n\n<hr />\n\n-   (Optional): Change the event type to \"data\" and run the program to see what happens. Don't run the program for very long though - you'll hurt your ears!\n-   ::: details [**Whoa! What Happened?**]\n    The `data` event happens continuously, which means the code inside it is always happening. This is why you constantly hear the buzzer even when the temperature hasn't changed!\n\n    When you use the `change` event, the event only happens when a _change_ occurs, which is much less frequent. This is why you only hear the buzzer when the temperature changes\n\n    Sometimes you can't notice the difference between a \"change\" and \"data\" event, and sometimes it makes a **BIG** difference!\n    :::",
    "start_html": {
      "Temp Sensor Reading": "Temp Sensor Reading",
      "value": "value"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/8": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Sensors - PA_2222": {
        "display_name": "Thermometer App",
        "bubble_choice_description": "Use the temperature sensor to create a thermometer app",
        "long_instructions": "# Make a Thermometer App\r\n\r\nWhile the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties [`tempSensor.F`(#f78183)](/docs/applab/tempSensor.F/) and [`tempSensor.C`(#f78183)](/docs/applab/tempSensor.C/) which convert the raw input value to either Fahrenheit or Celsius.\r\n\r\nLet's use these blocks to display the temperature near the circuit playground like a thermostat does.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to continuously check the `tempSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `tempSensor` has `data`\r\n    :::\r\n2) ::: details [Update the screen to display the temperature in F and C]\r\n\t- Inside the [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n\t\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the Fahrenheit label to [`tempSensor.F`(#f78183)](/docs/applab/tempSensor.F/)\r\n    \t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the Celsius label to [`tempSensor.C`(#f78183)](/docs/applab/tempSensor.C/)\r\n    :::\r\n\r\n**Run your program!** You should see the temperature update in real-time. To test the program, hold your finger over the sensor and see if the temperature increases due to body heat.",
        "start_html": {
          "Current Temperature in Fahrenheit and Celsius": "Current Temperature in Fahrenheit and Celsius"
        }
      },
      "CSD U6 - Sensors - PB_2222": {
        "display_name": "Interactive Birthday Card",
        "bubble_choice_description": "Use the temperature sensor to detect when someone blows out the candles of a card",
        "long_instructions": "# Interactive Birthday Card\r\n\r\nThis app simulates an interactive greeting card that you can find in stores. The app displays several candles and, when the user blows on the circuit playground, the candles should disappear and the app should say \"Happy Birthday!\". This app will need to use the `tempSensor` event to detect a `change` in the temperature.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to check when the `tempSensor` has changed]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `tempSensor` has a `change`\r\n    :::\r\n2) ::: details [When the temperature changes, update the card to hide the candles, say \"Happy Birthday\", and buzz]\r\n\t- Inside the [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n    \t- Use [`hideElement()`(#fff176)](/docs/applab/hideElement/) to hide the candles\r\n        - Use [`setText()`(#fff176)](/docs/applab/setText/) to update the text of the `titleLabel` element to \"Happy Birthday!\"\r\n        - Use [`buzzer.frequency()`(#f78183)](/docs/applab/buzzer.frequency/) to make the card make a noise\r\n   :::\r\n\r\n**Run Your App!** You should be able to blow on the Circuit Playground to trigger the temperature sensor. This will make the candles disappear and the circuit playground will buzz to wish you Happy Birthday!",
        "callouts": {
          "CSD U6L11.PB - boardevent": "Add your board event here!"
        },
        "start_html": {
          "Blow On The Circuit Playground to Blow Out the Candles!": "Blow On The Circuit Playground to Blow Out the Candles!"
        }
      },
      "CSD U6 - Sensors - PC_2222": {
        "display_name": "Light Theremin",
        "bubble_choice_description": "Use the light sensor and buzzer to create sci-fi noises and simulate a theremin",
        "long_instructions": "# Light Theremin\r\n\r\nA Theremin is a musical instrument that creates tones based on how it reacts to the environment. Most spooky otherworldly music is made from Theremin sounds.\r\n\r\nYour app will create spooky sounds by reacting to light. When there is low light, the theremin should make low tones. When there is a lot of light, it should make high tones. But, just so it’s not totally annoying, it should only make noises when turned on using a dropdown on the screen.\r\n\r\n[Click here to see a video of the finished app](https://drive.google.com/file/d/1LlHFrxrXtQim3CJ7tKGA8N90hMQefklQ/view?usp=sharing)\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to continuously check the `lightSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `lightSensor` has `data`\r\n    :::\r\n2) ::: details [Get the value from the dropdown and store it in a variable]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the dropdown\r\n    :::\r\n3) ::: details [If the value is `\"on\"`: play the buzzer using the light sensor's value]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the dropdown variable\r\n    - Use the [`buzzer.frequency()`(#f78183)](/docs/applab/buzzer.frequency/) and [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) blocks to play frequencies that match the light sensor\r\n    :::\r\n4) ::: details [If the value is `\"off\"`: stop the buzzer]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the dropdown variable\r\n    - Use the [`buzzer.stop()`(#f78183)](/docs/applab/buzzer.stop/) block to stop the buzzer\r\n    :::\r\n\r\n**Run Your App!** When you change the dropdown to \"on\", the circuit playground should start buzzing. Shining a flashlight on the circuit playground should create a high-pitched buzz, and keeping the circuit playground in the dark should create a low-pitched buzz.\r\n",
        "teacher_markdown": "You may decide to show this short video clip that helps explain how a Theremin works: [https://www.youtube.com/watch?v=-QgTF8p-284](https://www.youtube.com/watch?v=-QgTF8p-284)",
        "start_html": {
          "The Theremin Is:": "The Theremin Is:",
          "off": "off",
          "on": "on"
        }
      },
      "CSD U6 - Sensors - PD_2222": {
        "display_name": "Volume Meter",
        "bubble_choice_description": "Use the sound sensor to create an interactive volume meter",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/62718fc559646f13520aa1c68a69b4e5-image-1650057902548.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Volume Meter\r\n\r\nThis app simulates a \"Volume Meter\" that displays how loud or quiet your environment is. It uses a button that changes height to react to the sound in the room - the louder the sound, the taller the button.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Set the `soundSensor` scale to match the height of the app screen]\r\n\t- Add a [`soundSensor.setScale()`(#f78183)](/docs/applab/soundSensor.setScale/) block to set the range of values from 30-400\r\n    :::\r\n2) ::: details [Create an event to continuously check the `soundSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `soundSensor` has `data`\r\n    :::\r\n3) ::: details [Update the button's height to match the `soundSensor` value]\r\n\t- Use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`soundSensor.value`(#f78183)](/docs/applab/soundSensor.value/) blocks to update the `height` of the button\r\n    :::\r\n\r\n**Run The App!** As you speak or make noise near the circuit playground, the app should react in real time!",
        "start_html": {
          "Volume Meter!": "Volume Meter!"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/9": {
    "long_instructions": "# Room Monitor\n\nA circuit playground is installed in a secure room and sends data back to a central command post that monitors activity. The app should automatically update and display the following information:\n\n-   The current temperature\n-   The current noise level on a scale from 0-10\n-   The current light level on a scale from 0-10\n\n## Do This\n\n-   Create a program that matches the description above. Make sure that the values are automatically updating as the program is run.",
    "mini_rubric": {
      "rubric_key_concept": "Use the sensors on the circuit playground to create an app",
      "rubric_performance_level_1": "The app displays each sensor value in real-time, and the light and sound sensors are scaled from 0-10",
      "rubric_performance_level_2": "The app displays each sensor value, but it may not be in real-time or the sensors are from 0-1023 instead of 0-10",
      "rubric_performance_level_3": "The app is missing at least one of the sensor values",
      "rubric_performance_level_4": "The app has not been started"
    },
    "start_html": {
      "Room Monitor": "Room Monitor",
      "Light Value": "Light Value",
      "0": "0",
      "Sound Value": "Sound Value",
      "Temperature": "Temperature"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/11/levels/10": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Sensors - CA_2222": {
        "display_name": "Threshold",
        "bubble_choice_description": "Learn to use the threshold block with the sound sensor",
        "long_instructions": "# Change Threshold\r\n\r\nBy default a sensor's `change` event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the `change` event to be a little less responsive. \r\n\r\nThe [`threshold`(#f78183)](/docs/applab/lightSensor.threshold/) property allows you to set how much a sensor should change before considering it a `change` event. For example, setting `soundSensor.threshold = 100` would cause the sound sensor's `change` event only to trigger if its value increased or decreased by at least 100.\r\n\r\n## Do This\r\n\r\nThis app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the [`soundSensor.threshold`(#f78183)](/docs/applab/soundSensor.threshold/) block to fix it.\r\n\r\n1) Add a [`soundSensor.threshold`(#f78183)](/docs/applab/soundSensor.threshold/) block before the event handler\r\n2) Test out how different threshold values impact the \"change\" event\r\n3) Choose a threshold value that makes the screen background change only when a loud noise is sensed.\r\n\r\n_Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._"
      },
      "CSD U6 - Sensors - CB_2222": {
        "display_name": "Colors and Sensors",
        "bubble_choice_description": "Create an app where the background color reacts to the light, sound, and temperature sensors",
        "long_instructions": "# Changing Colors with Sensors\r\n\r\nThe [`setScale()`(#f78183)](/docs/applab/soundSensor.setScale/) block can convert the full range of sensor readings (0-1023) into different ranges, including ranges that can be used for RGB values (0-255). Let's build on that idea to make an app that can changes the background color based on the three sensors.\r\n\r\nThe app has already been started for you and works correctly for the light sensor - if you run the program, the background color will change based on the light sensor's value. Your task is to finish the program so the background color is also affected by the sound and temperature sensors.\r\n\r\n# Do This\r\n\r\n**Planning:**\r\n- Look at the code below in order to understand how the light sensor is affecting the background color.\r\n\r\n**In Code Mode:**\r\n1) Set the `soundSensor` scale to a range of values between 0 and 255\r\n2) Create a variable for the `soundSensor` value\r\n3) Create a variable for the `tempSensor` value\r\n\t- You can use either [`tempSensor.F`(#f78183)](/docs/applab/tempSensor.F/) or [`tempSensor.C`(#f78183)](/docs/applab/tempSensor.C/) for the temperature values\r\n4) Update the background color of the screen\r\n\t- Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block and your sensor variables instead of the `255` values\r\n\r\n**Run Your Code!** You should be able to change the background color by changing the temperature, light, or sound near the circuit playground!"
      },
      "CSD U6 - Sensors - ChalC_2222": {
        "display_name": "Volume Meter Version 2",
        "bubble_choice_description": "Use the sound sensor to create an interactive volume meter that warns the user if the volume gets too loud",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/e89a6d307b6bcda311a64d3d530ef280-image-1648853925073.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Volume Meter Version 2\r\n\r\nThis app is the same as the \"Volume Meter\" practice level, which displays how loud or quiet your environment is. It uses a button that changes height to react to the sound in the room - the louder the sound, the taller the button. \r\n\r\nHowever, this version of the app should also react to how loud or quiet the room is. The button itself and the background should also react based on the volume in the room - if it is too loud, the app gives a warning by changing colors.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Set the `soundSensor` scale to match the height of the app screen]\r\n\t- Add a [`soundSensor.setScale()`(#f78183)](/docs/applab/soundSensor.setScale/) block to set the range of values from 30-400\r\n    :::\r\n2) ::: details [Create an event to continuously check the `soundSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `soundSensor` has `data`\r\n    :::\r\n3) ::: details [Update the button's height to match the `soundSensor` value]\r\n\t- Use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`soundSensor.value`(#f78183)](/docs/applab/soundSensor.value/) blocks to update the `height` of the button\r\n    :::\r\n4) ::: details [If the room is too loud: make the volume button red and the screen background black]\r\n    - Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to detect if the [`soundSensor.value`(#f78183)](/docs/applab/soundSensor.value/) is greater than 200.\r\n    - Update the color of the volume button to red\r\n    - Update the background color of the screen to black\r\n    :::\r\n5) ::: details [If the room is a normal volume: make the volume button blue and the screen background white]\r\n    - Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to detect if the [`soundSensor.value`(#f78183)](/docs/applab/soundSensor.value/) is less than 200.\r\n    - Update the color of the volume button to blue\r\n    - Update the background color of the screen to white\r\n    :::\r\n\r\n**Run The App!** As you speak or make noise near the circuit playground, the app should react in real time!",
        "start_html": {
          "Volume Meter!": "Volume Meter!"
        }
      },
      "CSD U6 - Sensors - ChalE_2222": {
        "display_name": "Automatic Windows",
        "bubble_choice_description": "Create an app prototype that simulates a device that automatically opens and closes window blinds based on the sunlight outside.",
        "long_instructions": "# Automatic Windows\r\n\r\nCreate an app prototype that simulates a device that automatically opens and closes window blinds based on the sunlight outside. The app should use the light sensor to detect the light level in the room: if there is a lot of light, open the blinds to let in the sunlight through the window. If there is not a lot of light, close the blinds to turn on other lights inside the house.\r\n\r\nThis app simulates this effect by using images on the app screen. This app has an image element named `blindsImage` that displays window blinds. If we want to open the window, we need to hide the `blindsImage` element; if we want to close the window, we need to show the `blindsImage` element.\r\n\r\n## Do This\r\n1) Use a `setScale` block to set the scale of the lightSensor from 0-100\r\n2) Use an `onBoardEvent` to detect the data from the lightSensor\r\n3) If the lightSensor value is greater than 50: hide the `blindsImage` element, which simulates opening the window\r\n4) If the lightSensor value is less than 50: show the `blindsImage` element, which simulates closing the window"
      },
      "CSD U6 - Sensors - ChalD_2222": {
        "display_name": "Environmental App",
        "bubble_choice_description": "Create an app prototype that could be used in an environmental or ecology setting to monitor plants or animals in an environment",
        "long_instructions": "# Environmental App\r\n\r\nCreate an app prototype that could be used in an environmental or ecology setting to monitor plants or animals in an environment. For example, the circuit playground could be placed in a pet sleeping area and if the app detects the temperature is too cold, it could recommend the heat be turned on. Or, the circuit playground could be placed with a plant and if the app detects that the light is too low, it could recommend that the plant be moved into the sunlight.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      },
      "CSD U6 - Sensors - ChalG_2222": {
        "display_name": "Safety App",
        "bubble_choice_description": "Create an app prototype that could be used in a safety setting to warn the user of an unsafe environment",
        "long_instructions": "# Safety App\r\n\r\nCreate an app prototype that could be used to detect safety concerns and react or alert the user. For example, it could detect when the temperature is too hot, possibly indicating that there is a fire. Or the app could detect when the noise level is too loud and could hurt someone's ear drums, then give the user a warning. \r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/1": {
    "teacher_markdown": "The accelerometer has two properties: the `roll` and `pitch`. The `roll` corresponds to tilting left and right, and `pitch` corresponds to tilting forwards and backwards. Students should notice this if they're holding their circuit playground level to the ground with the USB cable pointing away from them so all the lettering appears correctly. Students may also experiment with moving their circuit playground in the physical space - moving it up and down or left and right - but this doesn't affect the accelerometer. Only rotating and tilting the circuit playground will change the roll and pitch.",
    "start_html": {
      "roll:": "roll:",
      "pitch:": "pitch:"
    },
    "contained levels": [
      {
        "long_instructions": "# Accelerometer\n\nThe code below uses a new sensor called an **accelerometer**, which can detect the position and rotation of the circuit playground. Take a look at the code below, then predict what will happen on the screen as you move or rotate the circuit playground."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/2": {
    "long_instructions": "# Pitch and Roll\n\nThis program displays the board's pitch and roll, and it will also change colors depending on their values.  \n\n# Do This\n\nMake the program change the following colors by tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch: 0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color: burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div> Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color: yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive pitch?\n\nWhich way should you tilt to get a negative roll?",
    "teacher_markdown": "The last two questions depend on how students are holding their circuit playgrounds. Encourage students to all hold their devices the same way:\n\n-   The board starts flat and level to the ground\n-   The USB cable is pointed away from students so if you looked down on the device, all of the letters and numbers would appear rightside-up",
    "start_html": {
      "pitch:": "pitch:",
      "roll:": "roll:"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/3": {
    "long_instructions": "# Pitch\n\nThis program lights the top LEDs (0 and 9) when you tilt the board forward. Your task is to light up the bottom LEDs (4 and 5) when you tilt the board backwards.\n\n# Do This\n\n1.  When the board is tilted forward, turn off LEDs 4 and 5 [(Show me where)][0].\n2.  When the board is tilted backwards, turn on LEDs 4 and 5 [(Show me where)][1].\n\n**Run your code!** Try tilting the board forward and backwards and seeing if the LEDs light up.",
    "callouts": {
      "CSD U6L12.3 - turn_off": "Add code to turn OFF the LEDS here",
      "CSD U6L12.3 - turn_on": "Add code to turn ON the LEDS here"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/4": {
    "long_instructions": "# Roll\n\nThis program should display \"Left\" or \"Right\" on the screen, depending on which way the board is tilted.\n\n## Do This\n\n1.  Get the `roll` property of the accelerometer and store it in a variable\n    -   Use the [`var x = __;`(#BB77C7)][0] and [`accelerometer.getOrientation()`(#f78183)][1] blocks to get the `roll` value\n2.  If the board is tilted left: update the screen to say \"Left\"\n    -   Use an [`if statement`(#64B5F6)][2] and `<`(#FFB74D) or `>`(#FFB74D) blocks to determine if the board is tilted left\n    -   Use a [`setText()`(#fff176)][3] block to update the label on the screen\n3.  If the board is tilted right: update the screen to say \"Right\"\n    -   Use an [`if statement`(#64B5F6)][4] and `<`(#FFB74D) or `>`(#FFB74D) blocks to determine if the board is tilted left\n    -   Use a [`setText()`(#fff176)][5] block to update the label on the screen\n\n**Run Your Code!** As you tilt the board left and right, you should see the screen update",
    "start_html": {
      "????": "????"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/5": {
    "long_instructions": "# Combining the Accelerometer and Counter Pattern\n\nYou can use the accelerometer with variables and the [counter pattern][0] to move elements on the screen depending on how the circuit playground is tilted.\n\nIn this app the goalie is trying to block the soccer ball. The ball will move automatically across the screen using the counter pattern and the player should move when you tilt the board, but the code isn't finished.\n\n## Do This\n\n1.  Find the section of the code that says \"Add your code here!\"\n2.  Use a [`getProperty()`(#fff176)][1] block to get the `y` position from the `player` element ([**Show Me Where**][2])\n3.  Use the [`accelerometer.getOrientation()`(#f78183)][3] block to get the `pitch` property from the accelerometer ([**Show Me Where**][4])\n4.  Add these two variables together to update the player's y-position ([**Show Me Where**][5])\n    -   You can use a `+`(#FFB74D) block, or you can type in the two variables in the empty box in the block\n\n**Run Your Program!** You should be able to tilt the Circuit Playground to move the player on the screen!",
    "callouts": {
      "CSD U6L12.PB - playery": "Get the player's y position here!",
      "CSD U6L12.PB - pitch": "Update the pitch variable here!",
      "CSD U6L12.PB - adding": "Update the y-position here!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/6": {
    "long_instructions": "# Shake Event\n\nThis program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.\n\n# Do This\n\n1.  Change the event so it triggers every time the board is shaken. [**(Show me where)**][0]\n2.  Add code inside the event so that `steps` increases every time the board is shaken [**(Show me where)**][1].\n    -   _Hint: Use the [Counter Pattern][2] to update your steps variable!_",
    "callouts": {
      "CSD U6L12.5 - shake_event": "Change this event to detect a shake event",
      "CSD U6L12.5 - increase_steps": "Increase steps here!"
    },
    "start_html": {
      "Steps Taken:": "Steps Taken:",
      "0": "0",
      "Shake or tap your board to move the person to the finish line!": "Shake or tap your board to move the person to the finish line!",
      "You Did It!": "You Did It!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Accelerometer - PA_2222": {
        "display_name": "Movement Meter",
        "bubble_choice_description": "Detect how much the Circuit Playground wobbles when passed back and forth",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/87f9ab915956478189e98a9e16ae36fa-image-1648866175432.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Movement Meter\r\n\r\nThis program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.\r\n\r\n\r\n## Do This\r\nThis program has two bugs that you need to fix:\r\n\r\n1) The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.\r\n2) The programmer forgot how to use the counter pattern to increase the movement variable.\r\n\r\nOnce you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.",
        "start_html": {
          "Movement Meter:": "Movement Meter:",
          "Pass your board to the person next to you!": "Pass your board to the person next to you!",
          "Game Over": "Game Over"
        }
      },
      "CSD U6 - Accelerometer - PD_2222": {
        "display_name": "Steering Wheel",
        "bubble_choice_description": "Use the accelerometer to move the car and avoid the obstacles",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/a75459fa7916a89cd5e0820409487432-image-1648866113702.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Steering Wheel\r\n\r\nUse your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!\r\n\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the car's `x` position and store it in a variable]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the `x` position of the car\r\n    :::\r\n2) ::: details [Get the property of the accelerometer and store it in a variable]\r\n\t- Use the [`var x = __;`(#BB77C7)](/docs/applab/declareAssign_x/) and [`accelerometer.getOrientation()`(#f78183)](/docs/applab/accelerometer.getOrientation/) blocks to get either the `pitch` or `roll` value\r\n    :::\r\n3) ::: details [Update the position of the car by combining the two values]\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) to update the x-position of the `car` element\r\n    - You can use a `+`(#FFB74D) block, or you can type in the two variables in the empty box in the block\r\n    :::",
        "start_html": {
          "Get to the checkered flag but don't hit the red ones!": "Get to the checkered flag but don't hit the red ones!",
          "You did it!": "You did it!"
        }
      },
      "CSD U6 - Accelerometer - PE_2222": {
        "display_name": "Confetti Shaker",
        "bubble_choice_description": "Shake the circuit playground to simulate a confetti app",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/8952c029604fd39d51cbad5858b3395e-image-1648866065242.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Confetti Shaker\r\n\r\nThis app simulates a confetti shaker. When you shake the circuit playground, the confetti stars should jump around on the screen.\r\n\r\nRight now, only one star moves around and only once when the app first loads. We need to add an event to detect when the board shakes, and then update the app so _all_ of the stars move on the screen\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to check when the circuit playground shakes]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `accelerometer` has a `shake` event\r\n    :::\r\n2) ::: details [Move each star to a random location]\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) blocks to update the `x` and `y` property of each star\r\n    \t- You will need ten [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks in total - two blocks for each `x` and `y`, repeated for all five stars.\r\n        - You can use the `star1` code as an example for how the other stars should look\r\n\t:::\r\n\r\n**Run Your Code!** You should be able to shake the circuit playground and see the stars move around!"
      },
      "CSD U6 - Accelerometer - PF_2222": {
        "display_name": "Number Tilting Game",
        "bubble_choice_description": "Tilt the circuit playground to get as close as you can to a target number",
        "long_instructions": "# Number Tilting Game\r\n\r\nThis app simulates a game where you try to match a number with a randomly generated target number. You can tilt the circuit playground left and right to adjust your number, trying to get it as close to the target number as possible. Once it's close enough, pressing the right button on the circuit playground will lock in your number.\r\n\r\nThe game has already been started, but the code that updates your number based on the circuit playground is missing. We'll need to use variables and the Counter Pattern to update our number and update the screen\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Detect when the circuit playground tilts left or right and store it in a variable]\r\n\t- Use the [`var x = __;`(#BB77C7)](/docs/applab/declareAssign_x/) and [`accelerometer.getOrientation()`(#f78183) blocks with either `pitch` or `roll` to get the tilt value of the circuit playground\r\n    :::\r\n2) ::: details [Update the value of your number using the circuit playground tilt value]\r\n\t- Use the Counter Pattern to add the circuit playground tilt value to the `yourNumber` variable\r\n    :::\r\n3) ::: details [Update the screen with the new number]\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `yourNumberLabel`\r\n    :::\r\n\r\n**Run Your Code!** You should be able to tilt the circuit playground left and right and see your number update on the screen. Once it's close to the target number, press the right circuit playground button and see how close you were!\r\n\r\n",
        "start_html": {
          "Tilt the board left and right to change your number. Try to get it as close to the target number as possible!Your NumberTarget Number00Press the right button on the circuit playground to lock in your number!": "Tilt the board left and right to change your number. Try to get it as close to the target number as possible!Your NumberTarget Number00Press the right button on the circuit playground to lock in your number!",
          "Try to get it as close to the target number as possible!": "Try to get it as close to the target number as possible!",
          "Your Number": "Your Number",
          "Target Number": "Target Number",
          "0": "0",
          "Press the right button on the circuit playground to lock in your number!": "Press the right button on the circuit playground to lock in your number!"
        }
      },
      "CSD U6 - Accelerometer - PG_2222": {
        "display_name": "Four Corners",
        "bubble_choice_description": "Tilt the Circuit Playground to select one of four possible animals",
        "long_instructions": "# Four Corners\r\n\r\nThis app lets you use the circuit playground to move a cursor to four quadrants on the screen with different animals in them. This is similar to children's games that use a controller to select their favorite animal. This requires using [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to update the position of the cursor based on the tilt of the circuit playground.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the `pitch` and `roll` properties of the accelerometer and store them in two variables]\r\n\t- Use two [`variable`(#BB77C7)](/docs/applab/declareAssign_x/) blocks to determine the `pitch` and `roll` of the circuit playground\r\n    :::\r\n2) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to update the cursor position based on the `pitch` and `roll` values\r\n\t- If the `roll` is `<`(#FFB74D) -20: move the cursor to the left side of the screen by updating the `x` position to `50`\r\n    - If the `roll` is `>`(#FFB74D) 20: move the cursor to the right side of the screen by updating the `x` position to `280`\r\n    - If the `pitch` is `<`(#FFB74D) -20: move the cursor to the top of the screen by updating the `y` position to `50`\r\n    - If the `pitch` is `>`(#FFB74D) 20: move the cursor to the bottom of the screen by updating the `y` position to `400`\r\n\r\n**Run Your Code!** You should be able to tilt the circuit playground and have the cursor jump to one of four quadrants"
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/8": {
    "long_instructions": "# Assistive Mouse\n\nAssistive Technology helps people with disabilities use technology in the same way able-bodied individuals can. For example, someone with a physical disability with their hand or wrist may not be able to use a mouse the same way we can. But, the circuit playground can help then navigate an app in a different way.\n\nThis app is designed to use the accelerometer to move the cursor, then use the sound-sensor to detect when the user says “Click”. The sound sensor has already been coded, but the app still needs the accelerometer.\n\n## Do This\n\n1.  Create an event to continuously check the accelerometer\n2.  Get the `pitch` and `roll` properties of the accelerometer and store them in two variables\n3.  Update the `x` and `y` position of the cursor based on the `pitch` and `roll`",
    "mini_rubric": {
      "rubric_key_concept": "Use the accelerometer in an event and with data to create an app",
      "rubric_performance_level_1": "The app matches the description, using an onBoardEvent to detect accelerometer movement and uses variables and getOrientation blocks to make changes to the x and y positions",
      "rubric_performance_level_2": "The app uses an onBoardEvent, but doesn’t make changes to the x and y positions of the pointer",
      "rubric_performance_level_3": "The app does not use the correct event block and does not make changes to the position of the pointer",
      "rubric_performance_level_4": "The app has not been started"
    },
    "start_html": {
      "Pioneers in Electronics": "Pioneers in Electronics",
      "Click on an image below to learn more about each person": "Click on an image below to learn more about each person"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/12/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Accelerometer - CA_2222": {
        "display_name": "Orange and Purple Bugs",
        "bubble_choice_description": "Use the circuit playground buttons and the accelerometer to move each bug",
        "long_instructions": "# Orange and Purple Bugs\r\n\r\nThis app should move either the orange or purple bug depending on which button on the circuit playground is pressed and how the circuit playground is tilted. Right now, only the purple bug works.\r\n\r\n## Do This\r\n\r\n1) Using the purple bug as an example, update the app so the orange bug will move when the right button is pressed."
      },
      "CSD U6 - Accelerometer - ChalA_2222": {
        "display_name": "Safety Settings",
        "bubble_choice_description": "Create an app that uses the accelerometer to simulate a safety sensor on construction equipment",
        "long_instructions": "# Safety Settings\r\n\r\nMany construction tools or equipment have safety sensors built-in to the devices so they can only be operated under certain conditions. This helps avoid situations where someone injures themselves by accidentally using the device without taking the proper safety precautions.\r\n\r\nCreate an app that simulates firing a laser (aka: the colorLEDs) by pressing a button, but will only work when the device is pointed away from the user so the laser doesn't go into their eyes. This requires using the Accelerometer and detecting the `roll` or `pitch` of the device.\r\n\r\nThe app has already been started for you so that the screen will display the roll and pitch of the circuit playground. Your task is to determine the roll or pitch when the circuit playground is facing away from you, then add code so the colorLEDs only turn on when the circuit playground is in the correct position.\r\n\r\n## Do This\r\n**Planning:**\r\n- Run the app and rotate the Circuit Playground to determine the correct `roll` or `pitch` values that represent when the circuit playground is facing away from you\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Create an event to check when the left button is pressed\r\n2) ::: details [If the circuit playground is facing away from the user: turn on all of the LEDs]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the `roll` or `pitch` that represents when it is turned away from the user\r\n\t- Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/): turn on all of the LEDs, which represents firing the laser\r\n   :::\r\n\r\n**Run Your Code!** If you press the button while the circuit playground is flat on the table, nothing should happen. But if you hold the circuit playground so it is facing away from you, the lights should turn on.",
        "start_html": {
          "pitch:": "pitch:",
          "roll:": "roll:"
        }
      },
      "CSD U6 - Accelerometer - ChalC_2222": {
        "display_name": "Car Wheel Alignment",
        "bubble_choice_description": "Create an app that simulates the sensor in cars and trucks that detects if the wheels are aligned and warns about flat tires",
        "long_instructions": "# Car Wheel Alignment\r\n\r\nMost cars have sensors to detect if the car is level, and will create a warning message if the car detects it is tilted slightly to the right or left. This can indicate a flat tire or that the wheels are out of alignment and the car needs to be taken to a service center.\r\n\r\nCreate an app that simulates this sensor, using the circuit playground to detect if it is level or tilted slightly to the left or right.\r\n- If the circuit playground is level, the status message should say \"Wheels are Aligned\"\r\n- If the circuit playground is tilted to the left, the status message should say \"Check left side tires\"\r\n- If the circuit playground is tilted to the right, the status message should say \"Check right side tires\"\r\n\r\n## Do This\r\n1) Create an event to continuously check the accelerometer\r\n2) Get the `roll` property of the accelerometer and store it in a variable\r\n3) If the circuit playground is tilted to the left: display \"Check left side tires\" on the screen\r\n4) If the circuit playground is tilted to the right: display \"Check right side tires\" on the screen\r\n\r\n**Run Your App!** If the circuit playground is on a level surface, the app should say \"Wheels are Aligned\". If you put the circuit playground on a tilted surface, the app should update to a different status message\r\n\r\n**Optional Extensions:**\r\n- Change the color of the text to make it appear like an error message if the circuit playground is tilted\r\n- Add a buzzer notification if the circuit playground detects it's tilted",
        "start_html": {
          "Wheels Are Aligned": "Wheels Are Aligned"
        }
      },
      "CSD U6 - Accelerometer - ChalG_2222": {
        "display_name": "Accessibility App",
        "bubble_choice_description": "Create an app prototype that could be used in an accessibility setting to make it easier for someone with a disability to use technology",
        "long_instructions": "# Accessibility App\r\n\r\nCreate an app prototype that could be used to increase accessibility and access to technology for people with disabilities. For example, a non-verbal user could use the accelerometer and LEDs or buzzer to communicate. Or the circuit playground could buzz anytime the mouse moves over certain UI elements to let a person with a visual impairment know they can interact with that part of the app. For more ideas around accessibility and computing, you can visit the [Access CSforAll website](https://www.washington.edu/accesscomputing/accesscsforall/videos) for more ideas.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/1": {
    "teacher_markdown": "Students will have a tough time predicting their results here, but that's okay - it's more important that they realize that there should be matching sounds between the left buttons and the right buttons. When students run the code, they can press the buttons multiple times to try and find the matching pairs. They should discover the following pairs create the same sounds:\n\n-   261 \\<> C4\n-   329 \\<> E4\n-   493 \\<> B4\n-   392 \\<> G4\n\nAs students will discover soon, these frequencies correspond to musical notes like they might see on a piano. For now, they should leave this level understanding that certain frequencies correspond to certain \"notes\".",
    "start_html": {
      "261": "261",
      "329": "329",
      "493": "493",
      "392": "392",
      "E4": "E4",
      "B4": "B4",
      "C4": "C4",
      "G4": "G4"
    },
    "contained levels": [
      {
        "long_instructions": "# Frequencies and Notes\n\nThe buttons on the left will make the circuit playground buzz using the `frequency` block. The buttons on the right will make the circuit playground buzz using a new `note` block.\n\nRead through the code and predict if you think any of the buttons will create the same sound. Your answer will be a pair - for example, \"392\" and \"E4\".\n\nAfter making your prediction, run the app and see if you were right. Try to see if any buttons on the left make the same sound as buttons on the right."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/2": {
    "long_instructions": "# Frequency and Music\n\nUsing carefully-chosen frequencies, we can use the [`buzzer.frequency()`(#f78183)][0] block to create a musical instrument like a piano.\n\nIn this app, when you play the piano, the note and the frequency will appear. Using these frequencies in your code will let you simulate musical instruments and play songs\n\n# New Block: Note\n\nInstead of remembering each frequency, you can also use the new [`buzzer.note()`(#f78183)][1] block to play a specific note. For example, playing a \"C\" Note on the piano for one second can be coded using:\n\n[`buzzer.note(\"C4\", 1000)`(#f78183)][2]\n\nThe \"4\" indicates which octave the note is in - \"C5\" and \"C6\" would be higher versions of the same note, and \"C3\" and \"C2\" would be lower versions.\n\n# Do this\n\n-   Try to play a song on the piano! Click below to see some examples\n\n::: details [Mary had a Little Lamb]\nE - D - C - D - E - E - E\n\nD - D - D\n\nE - E - E\n\nE - D - C - D - E - E - E\n\nE - D - D - E - D - C\n:::\n\n::: details [Twinkle Twinkle Little Star]\nC - C - G - G - A - A - G\n\nF - F - E - E - D - D - C\n\nG - G - F - F - E - E - D\n\nG - G - F - F - E - E - D\n\nC - C - G - G - A - A - G\n\nF - F - E - E - D - D - C\n:::\n\n<hr />\n\n<!--\n::: details [**(Optional): Wait - why does this work?!**]\n[[images and explanation about speaker vibrations + string vibrations + getting to be the same frequency = the note]]\n:::\n\n-->",
    "start_html": {
      "C": "C",
      "D": "D",
      "E": "E",
      "F": "F",
      "G": "G",
      "A": "A",
      "B": "B",
      "C#": "C#",
      "D#": "D#",
      "F#": "F#",
      "G#": "G#",
      "A#": "A#",
      "Frequency:": "Frequency:",
      "Note:": "Note:"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/3": {
    "long_instructions": "# Piano Notes\n\nThis is the same piano from the last level, but there are some bugs!\n\n## Do This\n\n1.  Edit the code so that all keys are using a [`buzzer.note()`(#f78183)][0] block to play the corresponding note.\n2.  Make sure that all the values passed in to [`buzzer.note()`(#f78183)][1] are notes, and not frequencies.\n    -   _Hint: Remember to put quotes around the notes! e.g [`buzzer.note(\"A4\", 100)`(#f78183)][2]_\n\nNote: This level starts in text mode because of some of the bugs! As you debug, you can check your work by trying to convert back to block mode and see if it works correctly.",
    "start_html": {
      "C": "C",
      "D": "D",
      "E": "E",
      "F": "F",
      "G": "G",
      "A": "A",
      "B": "B",
      "C#": "C#",
      "D#": "D#",
      "F#": "F#",
      "G#": "G#",
      "A#": "A#"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/4": {
    "long_instructions": "# Notes and Octaves\n\nYou can play the same note at different octaves, such as a \"low note\" or \"high note\". You can represent this in your code by adding a number at the end of a note. For example:\n\n-   [`buzzer.note(\"C1\", 100)`(#f78183)][0] would play a C note at the lowest octave\n-   [`buzzer.note(\"C8\", 100)`(#f78183)][1] would play a C note at the highest octave\n-   [`buzzer.note(\"C\", 100)`(#f78183)][2] would play a C note at the default octave, \"C4\"\n\n## Do This\n\n1.  Complete the app below by filling in the missing notes with the correct octave\n\n**Run Your Code!** Click each button to listen to the notes. Notice that at very low and very high octaves, the sound becomes distorted and unrecognizable",
    "start_html": {
      "C1": "C1",
      "C2": "C2",
      "C3": "C3",
      "C4": "C4",
      "C5": "C5",
      "C6": "C6",
      "C7": "C7",
      "C8": "C8",
      "Press each button to hear the note in that octave!": "Press each button to hear the note in that octave!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/5": {
    "long_instructions": "see contained level",
    "teacher_markdown": "This level formally introduces students to arrays, which are like lists. Students have already been using arrays without realizing it - the [`colorLeds`(#f78183)][0] are an array of lights on the Circuit Playground. The array in this level works similar to the colorLeds. Help students notice the following:\n\n-   Both arrays use square brackets `[]` with numbers inside to represent the position in the array\n-   Both arrays seem to start with 0\n-   The `notes` array is defined at the top of the code with a `var` block, but `colorLEDs` aren't defined anyway\n\nStudents will learn more about arrays in the video in the next lesson",
    "start_html": {
      "Click the buttons from top to bottom to hear a song!": "Click the buttons from top to bottom to hear a song!",
      "Note 1": "Note 1",
      "Note 2": "Note 2",
      "Note 3": "Note 3",
      "Note 4": "Note 4",
      "Note 5": "Note 5",
      "Note 6": "Note 6",
      "Note 7": "Note 7",
      "Note 8": "Note 8"
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThis app will let the user play a song by clicking the buttons from top-to-bottom.\n\nThe code uses a new block called an `array` to keep the notes of the song in order.\n\n## Do This\n\n-   What parts of the code look similar to the [`colorLeds`(#f78183)][0] blocks?\n-   What parts of the code look different from the [`colorLeds`(#f78183)][1] blocks?\n\n**Run the code** to see how the program behaves."
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/6": {
    "display_name": "Video: Introduction to Arrays",
    "long_instructions": "## Questions to Consider\n\n-   When might an array be more useful than a variable?\n-   Why do you always need to assign an array to a variable?\n-   How can you access the elements in your array?",
    "teacher_markdown": "## Discussion Goals\n\nThis is the first introduction to arrays, and students will have an opportunity to try them out in the lesson, so understanding why arrays are helpful and the general ways that can use them is more important than the particular syntax or commands in the video.  Students should understand that arrays are intended to hold several pieces of information, usually all of the same type.  Just like any other piece of information, it needs to be assigned to a variable for a programmer to find it again.  Programmers can access each element of the array by its **index**, or its position number in the array.  Students will have a chance to practice the exact syntax in the lesson."
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/7": {
    "long_instructions": "# Arrays and Songs\n\nThis code is the same as the last level - when you press the buttons in order, they play the beginning of \"Ode To Joy\".\n\nLet's update the song to play the beginning of \"Freres Jacques\" instead. We'll only need to change the values in the `notes` array and the rest of the code should work automatically!\n\n## Do This\n\n1.  Update the `notes` array to use the following notes: `[\"C4\", \"D4\", \"E4\", \"C4\", \"C4\", \"D4\", \"E4\", \"C4\"]`\n    -   ::: details [**Show Me How**]\n        [][0]\n        :::\n\n**Run Your Code!** You should be able to press the buttons and a new song will play.",
    "start_html": {
      "Click the buttons from top to bottom to hear a song!": "Click the buttons from top to bottom to hear a song!",
      "Note 1": "Note 1",
      "Note 2": "Note 2",
      "Note 3": "Note 3",
      "Note 4": "Note 4",
      "Note 5": "Note 5",
      "Note 6": "Note 6",
      "Note 7": "Note 7",
      "Note 8": "Note 8"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/8": {
    "long_instructions": "# Piano with Arrays\n\nThis app has a piano without any of the upper sharp keys (they'll appear in the next level). The app also has all of the notes stored in an array: \n\n-   `var notes = [\"C4\", \"D4\", \"E4\"];`(#BB77C7)\n\nSince the piano has the keys in order, we can play each note by accessing each element of the array in order. For example, we can play the first note on the piano using `buzzer.note(`(#f78183)`notes[0]`(#BB77C7)`)`(#f78183)\n\nIn the program below, all of the keys have been coded correctly, but the array is missing some of the notes on the piano. We need to add more notes to our `notes` array so the keyboard plays correctly.\n\n<img src=\"https://images.code.org/19401eb46cb7b5dac409ed98172f29b9-image-1638808891945.png\" width=\"500px\" />\n\n## Do This\n\n1.  Press the ➡️ at the end of the `notes` array to add a new space to the array. Repeat this until the array has 8 total elements\n2.  Add in the missing notes: `\"F4\", \"G4\", \"A4\", \"B4\", \"C5\"`.\n    -   Don't forget to include quotes when typing them into the array!\n    -   ::: details [**Show Me How**]\n        [][0]\n        :::\n\n**Run the program!** Press each of the keys and verify that the piano works!\n\n<hr />\n\n-   (Optional) Change the numbers at the end of each note to change the octave the piano plays in (for example: change \"C4\" to \"C3\", etc). Then run the app again and see how the piano sounds",
    "start_html": {
      "C": "C",
      "D": "D",
      "E": "E",
      "F": "F",
      "G": "G",
      "A": "A",
      "B": "B"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/9": {
    "long_instructions": "# Piano with Arrays\n\nThis app has a piano with the sharp notes included with a new array:\n\n-   `var sharpNotes = [\"C#4\", \"D#4\", \"F#4\", \"G#4\", \"A#4\"];`(#BB77C7)\n\nIn the program below, all of the natural note keys work correctly, but the top sharp keys still need to be coded.\n\n# Do this\n\n1.  Find the section of the code that has the sharp note events [**(Show Me Where)**][0]\n2.  Add code to play the sharp notes using the `sharpNotes` array\n    -   Using the natural notes as a template, add [`buzzer.note()`(#f78183)][1] blocks and type in the `sharpNotes` array into the block\n    -   Remember to use square brackets `[]` for your array\n    -   ::: details [**Show Me How**]\n        [][2]\n        :::\n\n**Run Your App!** Verify that the piano works correctly.",
    "callouts": {
      "CSD U6L13.6 - sharp_notes": "These events are for the sharp notes"
    },
    "start_html": {
      "C": "C",
      "D": "D",
      "E": "E",
      "F": "F",
      "G": "G",
      "A": "A",
      "B": "B",
      "C#": "C#",
      "D#": "D#",
      "F#": "F#",
      "G#": "G#",
      "A#": "A#"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/10": {
    "long_instructions": "# playNotes\n\nThis app uses the [`buzzer.playNotes()`(#f78183)][0] block to play a sequence of notes in a row like a song. It uses an **array** to tell which notes to play. A few important things to notice are:\n\n-   The array uses `null` to represent a \"rest\" in the music, which is a short pause\n-   The number at the very end is the **tempo** - it determines how long each note lasts.\n    -   _higher_ numbers mean the notes play _faster_, so the song has a _fast tempo_\n    -   _lower_ numbers mean the notes play _slower_, so the song has a _slow tempo_\n\n## Do This\n\n1.  Run the app to see how it works\n2.  Reset the app and change the temp so the song plays twice as fast\n    -   Note: if we want the song to play _faster_, does that mean we want a _bigger number_ or _smaller number_?",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/11": {
    "long_instructions": "# Doorbell\n\nThis app simulates a doorbell. When the user presses the button, a scale of notes should play (C, D, E, F, G, A, B, C) to let them know someone is at the door.\n\n## Do This\n\n1.  When the doorbell button is pressed, play the notes on a scale\n    -   In the [`onEvent()`(#fff176)][0], add a [`buzzer.playNotes()`(#f78183)][1] block\n    -   Replace the default notes with a scale of the natural notes: `\"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"A4\", \"B4\", \"C5\"`\n    -   If necessary, use the ⬅️ icon to remove extra spaces in the array\n\n**Run the app!** When you press the button, the circuit playground should play a song!\n\n(Optional) Add more elements to your array so that the scale also plays in reverse. This means the doorbell would sound like someone playing the piano going up the keys and then going back down to the starting point.",
    "start_html": {
      "Press to Ring the Doorbell!": "Press to Ring the Doorbell!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/12": {
    "long_instructions": "# Musical Emojis\n\nKarla is making an app for young children that helps students identify emotions with images and sounds. Users can click buttons for different emotions and images will appear and music will play that represent that emotion. Karla hopes to eventually turn this into a childrens book where each time someone turns the page, a new song will play to match the emotion on that page.\n\nKarla has already designed the app and added code to make the emojis change, but needs help adding music to her app.\n\n## Do This\n\n-   Add code so a \"happy\" song plays when the happy button is clicked [(Show Me Where)][0]. Your song should include at least four notes and at least one rest.\n-   Add code so a \"sad\" song plays when the sad button is clicked [(Show Me Where)][1]. Your song should include at least four notes and at least one rest.\n\n_Note: Creating \"happy\" and \"sad\" songs is a creative process and there's no single right answer. You can design a simple song that you think sounds happy or sad, or you can try looking up the notes to a song you like and playing part of it. Either way, make sure you have at least four notes and at least one rest for each song_",
    "callouts": {
      "CSD U6L14.8 - happySong": "Add code for your happy song here",
      "CSD U6L14.8 - sadSong": "Add code for your sad song here"
    },
    "mini_rubric": {
      "rubric_key_concept": "Create apps that play music with the circuit playground",
      "rubric_performance_level_1": "The app has two playSong() blocks that play different songs. Each song is at least four notes and includes at least one rest",
      "rubric_performance_level_2": "The app has two playSong() blocks that play different songs, but at least one of the songs is shorter than four notes or does not include a rest",
      "rubric_performance_level_3": "The app has one playSong() block for one of the emojis, but not for both emojis",
      "rubric_performance_level_4": "The app has no playSong() blocks"
    },
    "start_html": {
      "Musical Emojis": "Musical Emojis",
      "Click the buttons below to change the emotion of the emoji. When you do, a song will play to match that emotion.HappySad": "Click the buttons below to change the emotion of the emoji. When you do, a song will play to match that emotion.HappySad",
      "When you do, a song will play to match that emotion.": "When you do, a song will play to match that emotion.",
      "Happy": "Happy",
      "Sad": "Sad"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/13/levels/13": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Music - ChalB_2222": {
        "display_name": "playSong Block",
        "bubble_choice_description": "Learn to use the playSong block to play more songs!",
        "long_instructions": "<img src=\"https://images.code.org/fafb71b6173d526ba4874c073bc40dd8-image-1646862836258.png\" style=\"float: right; margin: 10px;\" />\r\n\r\n# playSong Block\r\n\r\nSongs are a combination of different notes and different tempos, such as quarter-notes or half-notes. For example, the beginning of \"Happy Birthday To You!\" contains two eighth notes, three quarter notes, and a half notes. Each of these types of notes are played at different speeds.\r\n\r\nThe `playSong` block lets you play music like this, where different notes play at different speeds. The block uses an _array_ to represent each note:\r\n\r\n![](https://images.code.org/928fef949ba51d63bf3cd80b75420b55-image-1646863976712.png)\r\n\r\nAnd then **another aray** is used to represent the frequency and duration of each note:\r\n\r\n![](https://images.code.org/27a8bfec1068081d590054d02a096005-image-1646864149162.png)\r\n\r\nThe code above would play a \"C\" quarter-note, a \"D\" half-note, and an \"E\" whole-note.\r\n\r\n## Do This\r\n\r\n1) Run the code below and click the \"Happy Birthday\" button. The circuit playground should play the first part of the song\r\n2) Using the code as an example, create your own song that plays when you press the second button. You may want to look up sheet music online for inspiration.\r\n\t- ::: details [**Show Me How**]\r\n![](https://images.code.org/e39067402845d1eb39fc4da7a914433e-image-1646864551184.gif)\r\n:::",
        "start_html": {
          "Happy Birthday": "Happy Birthday",
          "My Song": "My Song"
        }
      },
      "CSD U6 - Music - ChalC_2222": {
        "display_name": "Alarm Clock Version 3",
        "bubble_choice_description": "Create an app that lets the user choose their alarm settings to play different styles of notes or music.",
        "long_instructions": "# Alarm Clock Version 3\r\n\r\nCreate an app that lets the user set their own alarm clock setting to play different music. The app should have at least 3 different choices in a dropdown that the user can select from\r\n\r\n## Do This\r\n\r\n**In Design Mode:**\r\n\r\n- Add two other alarm choices to the dropdown. You can use your own phone or alarm clock for inspiration.\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Get the value from the dropdown and store it in a variable\r\n2) ::: details [Play a song depending on what the user selected]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of your variable\r\n\t- Use the [`playNotes()`(#f78183)](/docs/applab/buzzer.playNotes/) or [`playSong()`(#f78183)](/docs/applab/buzzer.playSong/) blocks to play different notes based on what the user selected\r\n    :::",
        "start_html": {
          "Alarm Clock Settings": "Alarm Clock Settings",
          "Choose an alarm preference from the dropdown below": "Choose an alarm preference from the dropdown below",
          "Alert": "Alert",
          "[Add your own style here]": "[Add your own style here]",
          "Test the Alarm": "Test the Alarm"
        }
      },
      "CSD U6 - Music - ChalD_2222": {
        "display_name": "Build-A-Song",
        "bubble_choice_description": "Create an app that lets the user build their own songs using a new append block",
        "long_instructions": "# Build-A-Song\r\n\r\nThis app introduces a new block, [`appendItem()`(#BB77C7)](/docs/applab/appendItem/), which can be used to add elements to an array. Using this block, we can add new notes to an array to let the user build their own song. Each time the user clicks on a button, we'll add the note to an array called `song`. Then, when the user clicks the Start button, it will play all of the notes stored in the `song` array.\r\n\r\nThe app has already been started for you, with the \"C\" button using the [`appendItem()`(#BB77C7)](/docs/applab/appendItem/) block to add a new note to our song. Using this as an example, finish the app so the user can build their own song by clicking each of the buttons.\r\n\r\n## Do This\r\n\r\n1) Using the \"C\" button as an example, add code to each of the other buttons to append a new note to the `song` array\r\n\r\n**Run Your App!** You should be able to click each note button, then play the song you created!",
        "start_html": {
          "A": "A",
          "B": "B",
          "C": "C",
          "D": "D",
          "E": "E",
          "F": "F",
          "G": "G",
          "Play Song!": "Play Song!",
          "Clear Song": "Clear Song"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/1": {
    "teacher_markdown": "Students might predict that the screen will update with button presses and the emoji and background colors will change. They may notice that `updateScreen()` appears in three places: within the two button events, and as a larger green block at the bottom of the code. It's okay if they're not completely sure how the green block is working, and they may try to describe what's happening by relating to variables - that a variable can be used in place of a value, and maybe `updateScreen()` is being used as a placeholder for the code at the bottom of the screen. Guide students to notice this is useful because the same code can be used in two different places (the left button and the right button).\n\nIt's okay to not come to a firm conclusion, since students will watch a video in the next level that explains Functions and how to use them in code.",
    "start_html": {
      "Happiness Tracker": "Happiness Tracker",
      "Press the buttons on your circuit playground to track how you're feeling. Based on your happiness value, the screen will change to reflect how you feel": "Press the buttons on your circuit playground to track how you're feeling. Based on your happiness value, the screen will change to reflect how you feel",
      "Current Happiness Value": "Current Happiness Value",
      "0": "0"
    },
    "contained levels": [
      {
        "long_instructions": "# Happiness Tracker\n\nThis app can be used to keep track of your current happiness and update the screen based on the result. When the user presses one of the buttons on the circuit playground, the screen should update.\n\nRead the code below and predict what you think will happen on the screen when the user interacts with the circuit playground. What do you think the green `updateScreen()` block is doing?"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/3": {
    "long_instructions": "# Calling Functions\n\nThis app lets you click on aliens on the screen and the LEDs will light up to match the color of the aliens. The app only has two colors for each alien: yellow or green.\n\nThe app has already been started for you and has already **defined** two functions: `greenLEDs` and `yellowLEDs` [**(Show Me Where)**][0]\n\nYou still need to **call** these functions within your program. Two of the aliens are already working correctly. Your task is to make the other aliens work correctly too!\n\n## Do This:\n\n1.  Look at the two examples that have already been completed [**(Show Me Where)**][1]\n2.  When you click an alien, change the LEDs to the color of that alien\n    -   Inside each [`onEvent()`(#fff176)][2], drag out a green [`myFunction()`(#68D995)][3] block.\n    -   Replace `myFunction` with either `greenLEDs` or `yellowLEDs` to match the alien you click\n\n**Run your code!** Try clicking on each of the aliens and see the circuit playground light up!",
    "callouts": {
      "CSD U6L14.3 - functions": "This section defines two functions",
      "CSD U6L14.3 - examples": "This event has already been completed"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/4": {
    "long_instructions": "# Creating Functions\n\nIn this app, some new aliens have appeared that are red and blue! When the user clicks on an alien, the LEDs should turn on to match the alien.\n\nThe red aliens have already been completed, but the blue aliens still need to be finished. You'll need to **define** a function called `blueLEDs`, then **call** the function inside each event.\n\n## Do This\n\n**1) Defining Our Function**:\n\n-   At the bottom of the code, add a new [`function myFunction() {}`(#68D995)][0] block [**(Show Me Where)**][1].\n-   Name the function `blueLEDs`. Add several [`color()`(#f78183)][2] blocks to make every LED blue\n\n**2) Calling Our Function**:\n\n-   At the top of the code, find the [`onEvent()`(#fff176)][3] blocks for the two blue aliens [**(Show Me Where)**][4].\n-   Add a [`myFunction()`(#68D995)][5] block to each event. Change the function mame to `blueLEDs`.\n\n**Run your code!** When you click an alien, the lights on the LED should light up to match",
    "callouts": {
      "CSD U6L14.4 - define": "Define your function here!",
      "CSD U6L14.4 - call": "Call your function here!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/5": {
    "long_instructions": "# Using Functions for Repeated Code\n\nThis app has the same aliens from before, but they are easily frightened - any loud noises or bright lights will make the aliens jump around on the screen. In the code, this is accomplished with two [`onBoardEvent()`(#f78183)][0] blocks.\n\nWhen we look at those two blocks, a lot of the code is repeated in both places. This is really inefficient! It would be much clearer if all of this code was **defined** in its own function in one place, and then we **call** that function every place we want to use it. This makes our code shorter and easier to read.\n\n## Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][1]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n**1) Defining Your Functions**\n\n-   At the bottom of the code, **define** a new function called `moveAliens` [(**Show Me Where**)][2]\n-   Find the sections of the code that is repeated in multiple places. Move that code into the function you just created\n\n**2) Calling Your Functions**\n\n-   Replace the original code by **calling** the `moveAliens` function\n\n**Check Yourself:** By now, your code should be _shorter_ and still work the same as before. You can run your code and make sure the aliens scatter when a bright light or loud sound is made.",
    "callouts": {
      "CSD U6L5.14B - define": "Add your function here!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/6": {
    "long_instructions": "# Adding New Features!\n\nOne advantage to using functions is it's easy to add new features! Let's add a new feature that lets you shake the circuit playground and causes the aliens to scatter.\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n## Do This\n\n1.  Add a new [`onBoardEvent()`(#f78183)][1] that uses the `accelerometer` to detect a `shake` event.\n2.  Drag out a green [`myFunction()`(#68D995)][2] block to **call** the `moveAliens` function\n\n**Run Your Code!** By making these two small changes, you should be able to shake the circuit playground and have the aliens move around the screen!",
    "callouts": {
      "CSD U6L5.14B - define": "Add your function here!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/7": {
    "teacher_markdown": "Students should notice that the left and right buttons are used, and that the function at the bottom is using the accelerometer to move something on the screen. Students may predict that the function changes depending on which button is pressed - the left button moves the purple bug, and the right button moves the orange bug. Students may also notice that the function has a variable, `bug`, that is included at the top of the function and used throughout. \n\nIn the next level, students will watch a video describing how these functions work and how `bug` is a **parameter** that can be used to change the behavior of a function when the function is called, like moving the orange bug or purple bug.",
    "contained levels": [
      {
        "long_instructions": "# Bug Crawl\n\nThis program uses a function called `crawl`, but something is different about it. Read the code below and predict what you think will happen when we run the code. What do you think is happening when \"purpleBug\" and \"orangeBug\" are used in the parentheses?"
      }
    ]
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/8": {
    "display_name": "Functions with Parameters",
    "long_instructions": "## Questions to Consider\n\n-   How do parameters make functions more useful?\n-   How do you know when you can combine multiple functions into one?",
    "teacher_markdown": "## Discussion Goals\n\nStudents will have a chance to practice defining functions with parameters in the lesson, so it's not necessary for them to understand the exact process. Students should understand that parameters are useful because they let programmers use the same function to solve problems that are very similar, but with slight differences.  If multiple functions are almost alike, but have a small difference, students may want to combine those functions into one, and use a parameter to account for the difference."
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/9": {
    "long_instructions": "# Functions with Parameters\n\nThis app has a new set of aliens with all new colors. We can use a function with **parameters** to make it easier to change colors. \n\nThe `colorLEDs` function has already been defined with a **parameter** called `color`. One alien has already been setup - it calls `colorLEDs(\"cyan\")` to turn all the LEDs cyan to match the alien. We need to make the other aliens work too!\n\n## Do This\n\n1.  Inside each [`onEvent()`(#fff176)][0]: drag out a [`myFunction(n)`(#68D995)][1] block\n2.  Replace the function name with `colorLEDs`\n3.  Replace the **parameter** with the color you want to change to. For example: `\"orange\"`, `\"purple\"`, etc.\n    -   You can try any of the colors listed on this [Color Name website][2].\n\n**Run Your Code!** Verify that the LEDs change colors to match the alien!"
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/10": {
    "long_instructions": "# Defining Functions with Parameters\n\nIn this app, the aliens are hungry and have a choice of foods we can offer them. Clicking on a food should replace _each_ of the empty plates with that food.\n\nEach empty plate is represented by three different image elements - `food1`, `food2`, and `food3`. We'll create a **function** that updates all of the foods with the same image, and that image changes depending on which food you click. This will be the **parameter** in the function.\n\n## Do This:\n\n**1) Define Your Function**\n\n<img src=\"https://images.code.org/7fc23d999761c618688d476f15b12beb-image-1643671307997.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   At the bottom of the code, drag out a [`function myFunction(n) {}`(#68D995)][0] block ([**Show Me Where**][1])\n-   Rename the function to `setFoods`. Change the parameter to `food`\n\n<hr style=\"clear: both\" />\n\n**2) Update the Foods**\n\n<img src=\"https://images.code.org/9fc396415b6bb3abbe669a44df58342f-image-1643671382822.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   Inside the function: use three [`setProperty()`(#fff176)][2] blocks to update the `image` property of the `food1`, `food2`, and `food3` elements\n-   In each [`setProperty()`(#fff176)][3] block, replace the `image` value with the parameter `food`\n\n<hr style=\"clear: both\" />\n\n**3) Call Your Function**\n\n<img src=\"https://images.code.org/2cb1416ae57af6e60ef8cdeb4e88e1be-image-1643671489267.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   Inside each [`onEvent()`(#fff176)][4] for the food buttons: drag out a [`myFunction(n)`(#68D995)][5] block. Replace the function name with `setFoods`\n-   Update the **parameter** with the image that corresponds to each food:\n    -   Birthday Cake: `\"image://BirthdayCake.png\"`\n    -   Pizza Slice: `\"image://PizzaSlice.png\"`\n    -   Ramen: `\"image://Ramen.png\"`\n    -   Taco: `\"image://Taco.png\"`",
    "callouts": {
      "CSD U6L14.6 - define": "Add your function here!"
    },
    "start_html": {
      "Click ona food to offer it to the aliens!": "Click ona food to offer it to the aliens!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/11": {
    "long_instructions": "# Adding Parameters\n\nThis app lets you click on aliens to earn points. Everytime you click an alien, it will relocate to a random place on the map. The app uses a **function** with an `alienID` **parameter** to increase the score and move the aliens to a new location. You can run the app now and see how it works.\n\nRight now, the app increases the score by 1 for each alien. Let's update the app so the score changes depending on which alien you click. This means we'll need to add a **parameter** to our function to represent the different scores we can earn.\n\n## Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to expand\n\n</div>\n\n**1) Define Your Function**\n\n-   Scroll to the bottom of the code and find the `updateScore` function ([**Show Me Where**][1])\n-   Press the `→`(#68D995) arrow next to the function definition. Add a new parameter called `points` in the blank box\n-   In the code for the function, instead of updating the score `+ 1` every time, replace this code to use our parameter instead: `+ points`\n\n<hr style=\"clear: both;\" />\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][2]\n\n<br/>\n\nClick to expand\n\n</div>\n\n**2) Call Your Function**\n\n-   Scroll to the [`onEvent()`(#fff176)][3] blocks at the top of the code ([**Show Me Where**][4])\n-   For each `updateScore` function: press the `→`(#68D995) arrow to add a new parameter\n-   Use the following values for each of the aliens:\n    -   The green alien should add 10 points to the score\n    -   The red alien should add 8 points to the score\n    -   The yellow alien should add 6 points to the score\n    -   The blue alien should add 4 points to the score",
    "callouts": {
      "CSD U6L14.9 - define": "Here are the function definitions",
      "CSD U6L14.9 - events": "Here are the events"
    },
    "start_html": {
      "Click An Alien To Increase Your Score!": "Click An Alien To Increase Your Score!",
      "Score:": "Score:",
      "0": "0"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/12": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Functions - P2A_2222": {
        "display_name": "Clouds",
        "bubble_choice_description": "Create a program that moves the clouds as you blow on the sensor",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/6a78fb12e01bde21792db9ff53caa436-image-1649197807725.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Clouds\r\n\r\nThis program makes the clouds move when you blow on the sound sensor. It has a function called `loopCloud()` which uses the parameter `cloudID` to move a cloud across the screen.\r\n\r\nBut, right now the function only moves `\"cloud0\"` across the screen. We need to update the function to use our parameter to move each cloud instead.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Update the function to use the `cloudID` parameter]\r\n\t* Scroll down to the `loopCloud()` function ([**Show Me Where**](#triggercallout=define))\r\n\t* Update the function so it uses the `cloudID` parameter\r\n    :::\r\n\r\n**Run the code!** Every cloud should move across the screen when you blow on the sensor!",
        "callouts": {
          "CSD U6L14.PA - define": "Here are the functions"
        }
      },
      "CSD U6 - Functions - P2C_2222": {
        "display_name": "Color Picker",
        "bubble_choice_description": "Use functions to help choose different colors for the app screen and LEDs",
        "long_instructions": "# Color Picker\r\n\r\nIn this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs. Right now it only works for the red button. Instead of using the same code for the other buttons, let's create a function with a parameter and use that for each of the other buttons.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create a `changeColor(color)` function]\r\n\t- Create a function `changeColor(color)` at the bottom of your code ([**Show Me Where**](#triggercallout=todo1))\r\n\t- Find the code that's already inside the `redButton` [`onEvent()`(#fff176)](/docs/applab/onEvent/) block ([**Show Me Where**](#triggercallout=todo2)). \r\n    - Move the code inside the `changeColor` function you just created\r\n    - Update the code to use the `color` parameter instead of the `\"red\"` values\r\n    :::\r\n2) ::: details [Call the `changeColor(color)` function with different values]\r\n\t- Inside the [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks at the top of the code: \r\n    \t- Call the `changeColor` function using the correct colors\r\n    :::",
        "callouts": {
          "CSD U6L14.PB - todo1": "Define your function here!",
          "CSD U6L14.PB - todo2": "Move this code into your function"
        },
        "start_html": {
          "Red": "Red",
          "Yellow": "Yellow",
          "Blue": "Blue"
        }
      },
      "CSD U6 - Functions - SB_2222": {
        "display_name": "Light Patterns",
        "bubble_choice_description": "Use functions to create light patterns with the LEDs",
        "long_instructions": "# Light Patterns\r\n\r\nThis app creates a light pattern when the button is clicked. Right now, the pattern always uses the same colors - red and blue. Let's update the app so it can use any two colors by creating a function with two parameters.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Update the function definition to use two parameters]\r\n\t- Find the `twoColors()` function and press the `→`(#68D995) arrow twice to add two parameters `color1` and `color2` ([**Show Me Where**](#triggercallout=todo1))\r\n\t- Update the code inside the function to use the parameters `color1` and `color2` instead of the colors `\"red\"` and `\"blue\"` every time ([**Show Me Where**](#triggercallout=todo2))\r\n    :::\r\n2) ::: details [Update the call to the function so it uses different color values]\r\n\t- Inside the [`onEvent()`(#fff176)](/docs/applab/onEvent/) block, press the `→`(#68D995) arrow twice to update the `twoColors()` function ([**Show Me Where**](#triggercallout=todo3)). Use any two colors you want!\r\n    :::\r\n\r\n**Run your code!** You should be able to see the pattern with your own two colors instead.\r\n\r\n_Bonus_: Add another button that does the same pattern with two _different_ colors. You can add as many buttons as you want!",
        "callouts": {
          "CSD U6L14.PD - todo1": "Update the function here!",
          "CSD U6L14.PD - todo2": "Update the code to use color1 and color2",
          "CSD U6L14.PD - todo3": "Call your function here"
        },
        "start_html": {
          "Light Show!": "Light Show!"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/14/levels/13": {
    "long_instructions": "# Digital Snowglobe\n\nA snowglobe is a toy with lots of glitter and small specks of paper in a glass sphere. When you shake the sphere, it looks like snow is swirling in the globe.\n\nEric is working on creating a digital snowglobe - when you shake the circuit playground, it simulates snow falling on a screen. He has 10 pieces of snow he wants to simulate, but he’s only coded five of them so far because the code is becoming too repetitive. He needs help using a function to simplify his code, and then he needs to use that function to finish his app. He’s already brainstormed an idea for how the finished app can look.\n\n<img src=\"https://images.code.org/c3bd4814896608a73cfa5744d587f8e9-image-1634837984797.PNG\" style=\"border: 2px solid black; height: 200px;\" />\n\n<img src=\"https://images.code.org/b5f722e76d18714da99659690a20a8ce-image-1634838012358.gif\" style=\"border: 2px solid black; height: 200px;\" />\n\n## Do This:\n\n-   Create a function called `moveSnow` that uses two parameters for the element name and the amount to move\n-   Look at the lines of code that are repeated to move each snow element. Copy that code into the new `moveSnow` function\n-   Update the code in the `moveSnow` function to use your parameters\n    -   Hint: Look for places where the code is identical between each snow element, but with just a name or value changed. This is where you can use your parameters instead.\n-   Remove the code inside the `onBoardEvent()` and replace it with calls to the new `moveSnow()` function. Be sure to include all 10 snow elements.",
    "mini_rubric": {
      "rubric_key_concept": "Use functions with parameters to organize apps",
      "rubric_performance_level_1": "The app uses a function with two parameters that correspond to the  name and amount to move. The parameters correctly replace each original snow name and amount value. All 10 snow elements move when the circuit playground is moved.",
      "rubric_performance_level_2": "The app uses a function with only one parameter, or the app uses a function with two parameters but not all of the values are updated using parameters. All 10 snow elements move when the circuit playground is moved.",
      "rubric_performance_level_3": "The app uses a function but it does not use parameters, or not all of the snow elements move on the screen",
      "rubric_performance_level_4": "The code has not changed from the original app"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/15/levels/1": {
    "long_instructions": "# Add Sensors and Debugging\n\nAdd your events and sensors to your app. You can add some labels to your app in Design Mode to help debug your app and display the sensor values, but your final app doesn't need any design elements. Test your device and make sure the sensors are working properly and generating the correct data before adding more to your code.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/15/levels/2": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device reacts to sensor data. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/15/levels/3": {
    "long_instructions": "# Review Your Device\n\nTake a moment to review your device. Double-check that it meets all the requirements in the rubric - [click here to see the rubric][0]. Make any changes or updates you think are necessary, or you may decide that the device is fine.\n\nWhenever your finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/1": {
    "long_instructions": "<img src=\"https://images.code.org/9a23ba6b28dd20527cd26d6e87f46672-image-1644345700471.png\" style=\"width:300px; float:right\" />\n\n# Connecting to an LED\n\nIn this lesson, we'll learn how to connect an LED to your circuit playground to light up\n\n::: details [**Click Here to See an Example**]\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/alligator.png\" width=\"30%\"/>\n:::\n\nYou will need an LED and two wires.\n\n1.  Make sure your Circuit Playground is unplugged from the computer. This helps make sure there isn't any accidental electricity that can damage your board.\n\n2.  Attach a wire so one end is connected to the `A0` pad on the Circuit Playground, and the other end is connected to the positive end of an LED\n\n3.  Attach a wire so one end is connected to the `GND` pad on the Circuit Playground, and the other end is connected to the negative end of an LED\n\n::: details [**How can you tell which end is positive and negative?**]\nA standard LED has two wires coming out of the top: a longer wire and a shorter wire. The longer wire is always **positive** and should be connected to a numbered pin on the circuit playground. The shorter wire is always **negative** and should be connected to a `GND` pad on the circuit playground.\n\nSome LEDs have the positive and negative sides labeled with a + and -\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" width=\"300px\" />\n:::\n\n## When You Are Finished\n\nPlug in your Circuit Playground to your computer and verify it is connected, then press 'Run' on the screen. The LED should light up.\n\nIf something isn't working correctly, **Always unplug your circuit playground from your computer before changing any wires**. This helps avoid any accidental electrical damage to your board.",
    "teacher_markdown": "Students are only required to connect their circuit playground in this level; they do not need to run any code yet. Help students with connecting their boards, managing supplied, and troubleshooting any issues. Make sure students always unplug their their board before changing wires - otherwise, electricity may still be flowing and can damage the circuit playground. This is a good time to emphasize this norm and remind students of safety precautions when working with the circuit playground and their materials.",
    "start_html": {
      "Connect your board to an LED, then plug it in and press Run": "Connect your board to an LED, then plug it in and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/2": {
    "long_instructions": "# Programming External LEDs\n\nThe code below shows how we can get an LED to light up. It uses two new commands: [`pinMode()`(#4dd0e1)][0] and [`digitalWrite()`(#4dd0e1)][1]\n\n<img src=\"https://images.code.org/2e366264534605981ddb429d60e8f668-image-1671210756275.png\" alt=\"a block of code that sets the pin mode for pin 'A4' to output, and then uses the digital write block to set the value to 1, which turns on electricity to that pin\" style=\"width: 400px; margin: 10px\" />\n\n-   [`pinMode()`(#4dd0e1)][2] tells your Circuit Playground that you want to use one of the external pads for either input or output. \"Pin\" is the generic term for the pads on the circuit playground, and pins can look different on other devices.\n-   [`digitalWrite()`(#4dd0e1)][3] tells your Circuit Playground to start or top sending electricity to the device on that pin. 1 means \"on\", and 0 means \"off\"\n\nThe code below is supposed to turn on the LED connected to your board, but right now your LED is connected to pin \"A0\". You’ll need to change how your board is connected before it will work.\n\n## Do This\n\n1.  Unplug your Circuit Playground from the computer\n2.  Disconnect and re-connect your wires so they use pin \"A4\" to match the code above.\n3.  Plug your Circuit Playground back into the computer. You may need to run the Maker Setup again\n\n**Run your code!** See if the LED lights up. If it doesn't light up, press the Reset button then follow the steps above to try re-wiring your board.",
    "teacher_markdown": "**Classroom Safety:** This level is purposefully designed to provide an opportunity to discuss safety and best practices with handling the Circuit Playground. You may decide the emphasize these steps with the class as a full group, and monitor students as they complete these steps during this level. In general, students should always reset the app and unplug from the computer before making any wiring changes. Otherwise, it could ruin the LED or ruin the board.",
    "start_html": {
      "Connect your board to an LED, then plug it in and press Run": "Connect your board to an LED, then plug it in and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/3": {
    "long_instructions": "# Add Another LED\n\nYou can use any of the numbered pads to add additional LEDs. Let's use pin `\"A1\"` to add another LED.\n\n# Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n**Wiring Your Device:**\n\n-   Disconnect your Circuit Playground from the computer\n-   Connect another LED to the circuit playground using two wires:\n    -   One wire goes from the `GND` pin to the negative (-) part of the LED\n    -   One wire goes from the `\"A1\"` pin to the positive (+) part of the LED\n-   Plug your Circuit Playground back into the computer\n\n**Coding Your Device:**\n\n1.  Tell the board to use pin `\"A1\"` for output\n    -   Drag out a [`pinMode()`(#4dd0e1)][1] block. Set the pin to `\"A1\"` and the mode to `\"output\"`\n2.  Turn pin `\"A1\"` on\n    -   Drag out a [`digitalWrite()`(#4dd0e1)][2] block. Set the pin to `\"A1\"` and the value to 1\n\n**Run your program!** If it worked, both LEDs should turn on.\n\n_Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._",
    "teacher_markdown": "**Why Are We Talking Pins?** You may notice that in the early levels of this lesson students are programming in a much different way than they have before, directly manipulating pins. The `digitalWrite()` and `pinMode()` commands are useful to get our wiring set up quickly, but are not the core concerns of this lesson. As soon as students are comfortable wiring LED circuits we will introduce techniques to control those LEDs with the higher level commands that have been used up to this point (like `led.on()` and `led.off()`).",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/4": {
    "long_instructions": "# Using Variables with LEDs\n\nRather than using [`pinMode()`(#4dd0e1)][0] and [`digitalWrite()`(#4dd0e1)][1] all the time, we can also use variables to keep track of our LEDs. This lets us create more useful and descriptive names, like `redLED` or `headlightLED`.\n\nThis app works the same as the last level, but uses the new [`createLed()`(#4dd0e1)][2] block. The first LED for `\"A4\"` has been setup for you and uses the familiar [`led.on()`(#f78183)][3] block, but replaces `led` with the variable name. Using this as a reference, add code for the LED on pin `\"A1\"`.\n\n# Do This\n\n_Note: In order to create this app, you'll need to be in text mode_\n\n**Preparation**\n\n-   Keep your LEDs wired just as they were before\n-   Make sure you're in text mode, not block mode.\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][4]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n**In Code Mode**\n\n1.  Create a new variable `rightLED` attached to pin \"A1\"\n    -   Drag out a [`createLed()`(#4dd0e1)][5] block. \n    -   Replace `myLed` with the variable name `rightLED`, and replace `pin` with the pin `\"A1\"`.\n2.  Turn the `rightLED` on\n    -   Drag out a [`led.on()`(#f78183)][6]\n    -   Replace the text `led` with `rightLED`.\n\n**Run Your Code!** Both LEDs should light up, just like before!",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/5": {
    "long_instructions": "# More LED Blocks\n\nNow that we're using [`createLed()`(#4dd0e1)][0], we can also use some of the additional LED functions like `blink` or `pulse` or `toggle`.\n\nThis app is setup to just turn both LEDs on. Instead, let's edit the app so one LED blinks every 500ms and another LED pulses every 1000ms.\n\n# Do This\n\n_Note: In order to create this app, you'll need to be in text mode_\n\n**Preparation:**\n\n-   Keep your LEDs wired just as they were before\n-   Make sure you're in text mode, not block mode.\n\n**In Code Mode:**\n\n1.  Make the `leftLED` blink every 500 milliseconds\n    -   Replace the line `leftLED.on()` with `leftLED.blink(500)`\n2.  Make the `rightLED` pulse every 1000 milliseconds\n    -   Replace the line `rightLED.on()` with `rightLED.pulse(1000)`\n3.  Check your code for any typos. Make sure there aren't any missing parentheses!\n\n**Run Your Code!** One LED should blink while the other pulses!",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/6": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Output - PA_2222": {
        "display_name": "Buttons and LEDs",
        "bubble_choice_description": "Use the buttons on the app to control an external LED",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/bfb90ad966cc7149ae2b40e6c98d3cd0-image-1650058009247.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Buttons and LEDs\r\n\r\nCreate an app that controls an external LED attached to pin `\"A4\"`. Clicking each of the buttons should make the LED turn on, blink, or turn off.\r\n\r\nYou can start this app in block mode, but you will need to switch to text mode eventually to finish the app\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n**Wiring Your Device**\r\n\r\n- ::: details [Connect an LED to pin `\"A4\"` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A4\"` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create a new LED variable attached to pin `\"A4\"`]\r\n\t- Drag out a [`createLed()`(#4dd0e1)](/docs/applab/createLed/) block. Set the pin to `\"A4\"`\r\n    :::\r\n2) ::: details [When the `onButton` is pressed: turn on the LED]\r\n\t- Drag out an [`led.on()`(#f78183)](/docs/applab/led.on/) block\r\n    - Use text mode to replace `led` with your variable name\r\n    :::\r\n3) ::: details [When the `blinkButton` is pressed: blink the LED]\r\n\t- Drag out an [`led.blink()`(#f78183)](/docs/applab/led.blink/) block\r\n    - Use text mode to replace `led` with your variable name\r\n    :::\r\n4) ::: details [When the `offButton` is pressed: turn off the LED]\r\n\t- Drag out an [`led.off()`(#f78183)](/docs/applab/led.off/) block\r\n    - Use text mode to replace `led` with your variable name\r\n    :::",
        "start_html": {
          "On": "On",
          "Blink": "Blink",
          "Off": "Off"
        }
      },
      "CSD U6 - Physical Output - PB_2222": {
        "display_name": "Controlling LEDs",
        "bubble_choice_description": "Turn on either the circuit playground LEDs, or two external LEDs",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4d3ebc7afabfb5f6ca7448441ec20249-image-1650058011924.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Controlling LEDs\r\n\r\nCreate an app that uses the toggle switch to either turn on the 10 `colorLEDs` on the Circuit Playground, or turns on two external LEDs connected to pins `\"A0\"` or `\"A6\"`.\r\n\r\n_Note: You can start this app in block mode, but you will need to switch to text mode eventually to finish the app_\r\n\r\n## Do This\r\n\r\n**Wiring Your Device**\r\n\r\n1) ::: details [Connect an LED to pin `\"A0\"` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A0\"` pin to the positive (+) part of the LED\r\n    :::\r\n2) ::: details [Connect an LED to pin `\"A6\"` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A6\"` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create two LED variables on pins `\"A0\"` and `\"A6\"`]\r\n\t- Drag out two [`createLed()`(#4dd0e1)](/docs/applab/createLed/) blocks\r\n    - Set the pins to `\"A0\"` and `\"A6\"`\r\n    :::\r\n2) ::: details [When the `toggleSwitch` is closed: turn on the `colorLEDs` and turn off the external LEDs]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect with the `toggleSwitch` is `closed`\r\n\t- Turn on all of the `colorLEDs` using ten [`on()`(#f78183)](/docs/applab/on/) blocks\r\n    - Drag out two [`led.off()`(#f78183)](/docs/applab/led.off/) blocks\r\n    - Use text mode to replace `led` with your two variable names\r\n    :::\r\n3) ::: details [When the `toggleSwitch` is open: turn off the `colorLEDs` and turn on the external LEDs]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect with the `toggleSwitch` is `open`\r\n\t- Turn off all of the `colorLEDs` using ten [`off()`(#f78183)](/docs/applab/off/) blocks\r\n    - Drag out two [`led.on()`(#f78183)](/docs/applab/led.on/) blocks\r\n    - Use text mode to replace `led` with your two variable names\r\n    :::",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Output - PC_2222": {
        "display_name": "LEDs and Sensors",
        "bubble_choice_description": "Simulate a night light by using the light sensor to turn on or off an external LED",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/0919800ceea841a4aa8af933868c4d02-image-1650058014169.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# LEDs and Sensors\r\n\r\nCreate an app that uses the light sensor to turn on or off an external LED connected to pin `\"A6\"`. When it is dark, the light should turn on. When it is bright, the light should turn off.\r\n\r\nYou can start this app in block mode, but you will need to switch to text mode eventually to finish the app\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n**Wiring Your Device**\r\n\r\n1) ::: details [Connect an LED to pin `\"A6\"` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A6\"` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create an LED variable on pin `\"A6\"`]\r\n\t- Drag out a [`createLed()`(#4dd0e1)](/docs/applab/createLed/) block.\r\n    - Set the pin to `\"A6\"`\r\n    :::\r\n2) ::: details [If the room is dark: turn on the LED]\r\n\t- Drag out an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) block. Use it to check if [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) `<`(#FFB74D) `200`.\r\n    - Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/):\r\n    \t- Drag out an [`led.on()`(#f78183)](/docs/applab/led.on/) block\r\n        - Use text mode to replace `led` with your variable name\r\n    :::\r\n3) ::: details [If the room is bright: turn off the LED]\r\n\t- Drag out an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) block. Use it to check if [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) `>`(#FFB74D) `200`.\r\n    - Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/):\r\n\t\t- Drag out an [`led.off()`(#f78183)](/docs/applab/led.off/) block\r\n\t\t- Use text mode to replace `led` with your variable name\r\n    :::\r\n\r\n**Run your code!** If you cover the light sensor, the LED should light up. If you uncover the light sensor and put it in light, the LED should turn off",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/7": {
    "long_instructions": "# Little Alien Friend\n\nRosie is designing a children's toy to look like an alien. it has a physical body that uses 2 LEDs as the eye, and you communicate with it via an app. Each button on the app causes the alien to respond in a different way:\n\n-   Pressing “Wake Up” has the alien open their eyes\n-   Pressing “Listen” has the alien blink slowly as it listens to a story\n-   Pressing “Sleep” puts the alien to sleep and closes its eyes\n\n## Do This\n\n1.  Wire up two LEDs to pins `\"A0\"` and `\"A6\"`\n2.  Create two LED variables on pins `\"A0\"` and `\"A6\"`\n3.  Use an `on` block in the Wake Up event\n4.  Use a `blink` block in the Listen event\n5.  Use an `off` block in the Sleep event",
    "teacher_markdown": "**Assessing Student Work:** It may be appropriate to assess students on this level by having them physically show you the working prototype, since this app involves physical components to be wired together. You could also consider having students record a video of their app working and submitting it in addition to submitting their code.",
    "mini_rubric": {
      "rubric_key_concept": "Connect external LEDs to the circuit playground and create apps that use external LEDs",
      "rubric_performance_level_1": "The program matches the app description using on(), blink(), and off() blocks in the correct location. The LEDs are wired correctly",
      "rubric_performance_level_2": "The program almost matches the app description, but one of the blocks may be matched with the wrong event. The LEDs are wired correctly.\r\n",
      "rubric_performance_level_3": "The program is missing some of the required blocks or the LEDs are not wired correctly.",
      "rubric_performance_level_4": "The program has not been started or there are no LEDs"
    },
    "start_html": {
      "Little Alien Friend": "Little Alien Friend",
      "Wake Up": "Wake Up",
      "Listen": "Listen",
      "Use this app to communicate with the Little Alien Friend toy!": "Use this app to communicate with the Little Alien Friend toy!",
      "Sleep": "Sleep"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/16/levels/8": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Output - ChalA_2222": {
        "display_name": "LED Candle",
        "bubble_choice_description": "Create a device prototype for an LED candle that turns on and off with the circuit playground",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/LED_Candles_Lighting.jpg/1200px-LED_Candles_Lighting.jpg?20190802215038)\r\n\r\n<br/>\r\n\r\nLED Candles\r\n\r\n</div>\r\n\r\n# LED Candle\r\n\r\nCreate a device prototype for an LED Candle. This requires creating a holder for your candle out of physical materials, and then putting an LED through the top to light up. For example, you could roll up paper or use a cardboard toilet paper roll as the base of the candle, then have the LED sticking through the top.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n1) Create your candle holder using physical materials, such as paper or cardboard\r\n2) Place your LED and wires so they are in the correct location in your device\r\n3) Get your Circuit Playground ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create an LED variable\r\n2) Add code so when you press the left button: the external LED turns on\r\n3) Add code so when you press the right button: the external LED turns off\r\n4) Connect your wires to your circuit playground and test your code\r\n\r\n**Run Your Code!** You should be able to turn on and off your candle using the circuit playground.",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Output - ChalB_2222": {
        "display_name": "LED Drawing",
        "bubble_choice_description": "Incorporate LEDs into a drawing, such as the eyes of a face or the headlights on a car",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/a9d58920679c8c8d6113c614bf460c39-image-1646930199612.png)\r\n\r\n<br/>\r\n\r\nExample Drawing\r\n\r\n</div>\r\n\r\n# LED Drawing\r\n\r\nDraw a picture on a sheet of paper, then incorporate at least 2 LEDs into the picture by cutting holes in the paper and replacing them with LEDs. For example:\r\n- A picture of a face, but the eyes are LEDs\r\n- A picture of the night sky, but some stars are LEDs\r\n- A picture of a car, but the headlights are LEDs\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This:\r\n\r\n**Materials:**\r\n\r\n1) Draw your picture on a sheet of paper\r\n2) Decide where the LEDs will go\r\n3) Cut holes in your drawing and place the LEDs underneath. This will let you hide the wires underneath your drawing\r\n4) Get your Circuit Playground ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create two LED variables\r\n2) Turn on the LEDs when the app is run\r\n\r\nConnect your wires to your circuit playground and test your code!",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Output - ChalC_2222": {
        "display_name": "Do Not Disturb Sign",
        "bubble_choice_description": "Create a sign that uses an LED to indicate you shouldn't be disturbed, like when recording a video or meeting with someone important.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://upload.wikimedia.org/wikipedia/commons/3/32/On_air_sign.jpg?20120915061101)\r\n\r\n<br/>\r\n\r\nExample Sign\r\n\r\n</div>\r\n\r\n# Do Not Disturb Sign\r\n\r\nCreate a device prototype that creates a \"Do Not Disturb\" sign that uses an LED to indicate that the sign is on or off. This kind of device is used in a variety of situations such as:\r\n- When recording studios are \"on the air\" and need to indicate they are recording and no one should talk\r\n- When photographers are developing photos in dark rooms and need to indicate that no one should open the door\r\n- When doctors are with a patient and need to indicate that no one should disturb the conversation\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n1) Create your sign to represent \"Do Not Disturb\". You could write out the words in letters, or use a symbol or drawing.\r\n2) Create a place for your LED to go on the sign. Usually the LED is towards the bottom of the sign so people can see it clearly\r\n3) Place your LED and wires so they are in the correct location in your device\r\n4) Position your sign so it is in a prominent place that people can see. This may mean hanging your sign on a wall or creating a little stand for your sign so people can see it as they approach you.\r\n5) Get your Circuit Playground ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create an LED variable\r\n2) When the left button is pressed: turn on the LED\r\n3) When the right button is pressed: turn off the LED\r\n\r\nConnect your wires to your circuit playground and test your code!",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/1": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n<!-- <img src=\"https://images.code.org/440fdae9498a7c8374e883021faf17ec-image-1644430801804.png\" style=\"float: right; width: 250px; margin: 10px\" /> -->\n\n# Wiring External Buttons\n\nIn the last lesson, we saw how you could use external components for **output**, like wiring up an LED. In this lesson, we'll see how you can use external components for **inputs**, like creating your own button \"up\" and \"down\" events.\n\nWe'll start by using two wires connected to the `\"A0\"` and `\"GND\"` pins, like in the diagram to the right. When the wires are disconnected, it represents an \"up\" event or that the button isn't being pressed. When the wires are connected, it represents a \"down\" event or that the button has been pressed.\n\n# Do This\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" style=\"width: 200px; margin: 10px; float: right;\" />\n\n1.  Make sure your Circuit Playground is disconnected from the computer\n2.  Grab two wires.\n3.  Connect one wire to the pin `\"A0\"`.\n4.  Connect the second wire to a `\"GND\"` pin.\n5.  Plug in your Circuit Playground. You may need to re-run the Maker Setup to make sure the board connects correctly.\n\n**Run the program!** With the program running, touch the unconnected ends of both wires together to \"press\" the button. When you do, the Circuit Playground should buzz!",
    "start_html": {
      "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
      "Success!": "Success!",
      "Board Not Detected!": "Board Not Detected!",
      "Try the following:": "Try the following:",
      "Refresh this page and try again": "Refresh this page and try again",
      "Plug the board into a different USB": "Plug the board into a different USB",
      "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/2": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# External Button Events\n\nThis app shows how external buttons are created. This happens in two parts:\n\n1.  A [`createButton()`(#4dd0e1)][1] block lets you assign an external button to a variable\n2.  An [`onBoardEvent()`(#f78183)][2] block uses the same variable name to detect button events like `up` and `down`\n\nRight now, the Circuit Playground makes a low-buzz when the wires touch for a `down` event. Let's add another event to make the Circuit Playground make a high-buzz when the wires release for an `up` event.\n\n# Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][3]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n1.  Use an [`onBoardEvent()`(#f78183)][4] to detect when the `buzzButton` is released `up`\n    -   Add an [`onBoardEvent()`(#f78183)][5] block to your code\n    -   In the first parameter, do not select any of the options from the dropdown. Instead, type in `buzzButton`\n    -   In the second parameter, select \"up\" from the list of options\n2.  When the `buzzButton` is released: make a high-pitched buzz\n    -   Inside the [`onBoardEvent()`(#f78183)][6]: \n        -   Use the [`buzzer.frequency()`(#f78183)][7] block to play a high-pitched buzz\n\nRun the program! The Circuit Playground should now make two buzzes - once when the wires touch, and again when the wires release"
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/3": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Add Another External Button\n\nLet's add another external button to our device on pin `\"A1\"` that toggles the red LED on and off. This will only require **one** new wire connected to pin `\"A1\"` - to press the button, we can use the same `\"GND\"` wire from before.\n\n# Do This\n\n**Wiring Our Device:**\n\n1.  Disconnect your Circuit Playground from the computer\n2.  Connect another wire to pin `\"A1\"`\n3.  Reconnect your Circuit Playground to the computer. You may need to run the Maker Setup again.\n\n**Coding Your Device:**\n\n1.  Create a button variable on pin `\"A1\"`\n    -   Drag out a [`createButton()`(#4dd0e1)][1] block. \n    -   Name the variable `ledButton`\n    -   Change the pin to `\"A1\"`\n2.  Use an [`onBoardEvent()`(#f78183)][2] to detect when `ledButton` is pressed `down`\n    -   Drag out an [`onBoardEvent()`(#f78183)][3]. \n    -   Set the component to `ledButton` by typing in the first parameter\n    -   Set the event to `\"down\"`\n3.  When `ledButton` is pressed: toggle the led\n    -   Use the [`led.toggle()`(#f78183)][4] block to make the red LED turn on and off\n\n**Run the program!** You should use the `\"GND\"` wire to switch between your two buttons - connecting it to the `buzzButton` should make the buzzer sounds from before, and connecting it to the `ledButton` should make the red LED turn on and off."
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/4": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Add an LED\n\nLet's update our device to toggle an external LED rather than the small red LED on the circuit playground!\n\n## Do This\n\n**Wiring Our Device:**\n\n1.  Disconnect your Circuit Playground from the computer\n2.  Use two wires to connect an LED to the Circuit Playground on pin `\"A6\"`\n    -   One wire connects the negative (-) end of the LED to the `GND` pin\n    -   One wire connects the positive (+) end of the LED to the `\"A6\"` pin\n3.  Reconnect your Circuit Playground to the computer. You may need to run the Maker Setup again.\n\n**Coding Your Device:**\n\n1.  Create an LED variable on pin `\"A6\"`\n    -   Drag out a [`createLed()`(#4dd0e1)][1] block.\n    -   Change the pin to `\"A6\"`\n2.  Update the code to use the external LED instead of the small red led\n    -   Change into text mode\n    -   Update `led.toggle()` by replacing `led` with the name of your variable\n\n**Run the program!** You should use the `\"GND\"` wire to switch between your two buttons - connecting it to the `buzzButton` should make the buzzer sounds from before, and connecting it to the `ledButton` should make your external LED turn on and off"
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/5": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Input - PB_2222": {
        "display_name": "Color Changer",
        "bubble_choice_description": "Create an app that uses 3 external buttons to change the background color of the screen.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/a3d085c2c2152e2762493bf326cfaf50-image-1650058134078.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Color Changer\r\n\r\nCreate an app that uses 3 external buttons to change the background color of the screen.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device:**\r\n\r\n1) Make sure your Circuit Playground is unplugged from the computer\r\n2) Connect 3 wires to pins `\"A4\"`, `\"A5\"`, and `\"A6\"`\r\n3) Connect a wire to a `GND` pin\r\n4) Plug your Circuit Playground back into the computer. You may need to rerun the Maker Setup\r\n\r\n**Coding Your Device:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create three button variables on pins `\"A4\"`, `\"A5\"`, and `\"A6\"`]\r\n\t- Drag out three [`createButton()`(#4dd0e1)](/docs/applab/createButton/) blocks\r\n    - Set their pins to `\"A4\"`, `\"A5\"`, and `\"A6\"`\r\n    :::\r\n2) ::: details [Use three `onBoardEvent()`(#f78183) blocks to detect when each of your buttons is `\"down\"`]\r\n\t- Drag out three [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) blocks\r\n    - Type your button variables into the first parameter of each event\r\n\t- Set the event to \"down\"\r\n    :::\r\n3) ::: details [Update the background color when a button is pressed]\r\n\t- Inside each [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n    \t- Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to change the background color to a color of your choosing\r\n    :::\r\n    \r\n**Run Your Code!** You should be able to use the ground wire to press each of the buttons, which will update the background color of your app!"
      },
      "CSD U6 - Physical Input - PC_2222": {
        "display_name": "Mini Piano",
        "bubble_choice_description": "Create an app that uses 3 external buttons to play musical notes, like a mini piano",
        "long_instructions": "# Mini Piano\r\n\r\nCreate an app that uses 3 external buttons to play musical notes, like keys on a piano.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device:**\r\n\r\n1) Make sure your Circuit Playground is unplugged from the computer\r\n2) Connect 3 wires to pins `\"A1\"`, `\"A5\"`, and `\"A6\"`\r\n3) Connect a wire to a `GND` pin\r\n4) Plug your Circuit Playground back into the computer. You may need to rerun the Maker Setup\r\n\r\n**Coding Your Device:**\r\n\r\n1) ::: details [Create three button variables on pins `\"A1\"`, `\"A5\"`, and `\"A6\"`]\r\n\t- Drag out three [`createButton()`(#4dd0e1)](/docs/applab/createButton/) blocks\r\n    - Set their pins to `\"A1\"`, `\"A5\"`, and `\"A7\"`\r\n    :::\r\n\r\n2) ::: details [Use three `onBoardEvent()`(#f78183) blocks to detect when each of your buttons is `\"down\"`]\r\n\t- Drag out three [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) blocks\r\n    - Type your button variables into the first parameter of each event\r\n\t- Set the event to \"down\"\r\n    :::\r\n3) ::: details [When the button is pressed, play a note]\r\n\t- Inside each [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n    \t- Use a [`buzzer.note()`(#f78183)](/docs/applab/buzzer.note/) block to play a musical note of your choosing\r\n    :::\r\n    \r\n**Run Your Code!** You should be able to use the ground wire to press each of the buttons, which will play a musical note!",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Input - PA_2222": {
        "display_name": "Whack-A-Mole",
        "bubble_choice_description": "Create an app that simulates a whack-a-mole game, where you press 3 external buttons to earn points",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/8c543c31e6489b03c6d06e6d24b176e8-image-1650058131598.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Whack-A-Mole Game\r\n\r\nCreate an app that simulates a whack-a-mole game, where there are several animals that appear and you need to \"bop\" them to earn points.\r\n\r\nIn this version, we'll use three external buttons to represent the animals. The user can use the `GND` wire to 'whack' each of the animals and generate points. The app has already been designed for you - your task is to wire up the device and keep track of the score using the Counter Pattern.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device:**\r\n\r\n1) Make sure your Circuit Playground is unplugged from the computer\r\n2) Connect 3 wires to pins `\"A0\"`, `\"A4\"`, and `\"A5\"`\r\n3) Connect a wire to a `GND` pin\r\n4) Plug your Circuit Playground back into the computer. You may need to rerun the Maker Setup\r\n\r\n**Coding Your Device:**\r\n\r\n1) ::: details [Create three button variables on pins `\"A0\"`, `\"A4\"`, and `\"A5\"`]\r\n\t- Drag out three [`createButton()`(#4dd0e1)](/docs/applab/createButton/) blocks\r\n    - Set their pins to `\"A4\"`, `\"A5\"`, and `\"A6\"`\r\n    :::\r\n2) ::: details [Use three `onBoardEvent()`(#f78183) blocks to detect when each of your buttons is `\"down\"`]\r\n\t- Drag out three [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) blocks\r\n    - Type your button variables into the first parameter of each event\r\n\t- Set the event to \"down\"\r\n    :::\r\n3) ::: details [When the user presses one of the animal buttons, increase their score]\r\n\t- Inside each [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/): \r\n    \t- use the Counter Pattern to update the `score` variable. Each of the animal buttons should be worth a different amount of points\r\n        - Use a [`setText()`(#fff176)](/docs/applab/setText/) block to update the score on the screen\r\n   :::\r\n\r\n**Run Your Code!** You should be able to use the ground wire to press each of the buttons, which will update the score on the screen.",
        "start_html": {
          "Score": "Score",
          "0": "0"
        }
      },
      "CSD U6 - Physical Input - PD_2222": {
        "display_name": "Conductive Materials",
        "bubble_choice_description": "Explore what other materials can be used to create buttons, like paper clips or aluminum foil",
        "long_instructions": "This will have contained level",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        },
        "contained levels": [
          {
            "long_instructions": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: right; margin: 10px; width: 250px\" />\r\n\r\n# Conductive Materials\r\n\r\nOur external buttons work because the alligator clips are made of metal, which **conducts electricity**. If you attach the clips to other items that conduct electricity, they can also work as buttons. For example, you can try paperclips or aluminum foil and the buttons will still work.\r\n\r\n## Do This\r\n- Find materials around the classroom that you think will conduct electricity. Find at least 5 different types of items\r\n- Grab two wires and connect them to your Circuit Playground according to the code below so the button will work\r\n- Connect your items to the alligator clips and test your device. See which items are conductive and work as buttons, and which ones do not\r\n\r\n**Record your results in the box below!** Which items worked as buttons? Which ones didn't?\r\n\r\n"
          }
        ]
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/6": {
    "long_instructions": "# Escape Room\n\nPradnya is designing an app that can be used in an Escape Room, which is like a room with puzzles where you find clues to help you escape. The user will need to enter a 3 digit number in the app in order to win, which they can discover by finding 3 hidden buttons around the room. When the user presses a button, one of the digits is revealed. Once all 3 digits are revealed and the user types them into the app, they can escape!\n\nPradnya has already designed the app and created the code that checks for the correct 3-digit number, but she needs help hooking up the buttons and revealing the secret digits.\n\n## Do This\n\n1.  Wire up 3 buttons to pins `\"A1\"`, `\"A5\"`, and `\"A6\"`, with a single ground wire to trigger each button\n2.  Create three button variables on pins `\"A1\"`, `\"A5\"`, and `\"A6\"`\n3.  Use three [`onBoardEvent()`(#f78183)][0] blocks to detect when each of your buttons is \"down\"\n4.  When the user presses a button, hide one of the `blueSquare` elements to reveal the secret digit underneath\n    -   Use the [`hideElement()`(#fff176)][1] block to hide each of the `blueSquare` elements\n    -   Example: `hideElement(\"blueSquare1\")`\n\n**Run the code!** Test that it works, revealing the secret three-digit code and viewing the win screen. The secret digits change every time, so you may need to test more than once.",
    "teacher_markdown": "**Assessing Student Work:** It may be appropriate to assess students on this level by having them physically show you the working prototype, since this app involves physical components to be wired together. You could also consider having students record a video of their app working and submitting it in addition to submitting their code.",
    "mini_rubric": {
      "rubric_key_concept": "Connect external buttons to the circuit playground and create apps that use external buttons",
      "rubric_performance_level_1": "The program matches the description with 3 events that hide the blue squares in the app. The buttons are hooked up correctly using one wire for the ground to signal each button",
      "rubric_performance_level_2": "Some of the buttons hide the blue squares, but not all of them work correctly. Or, the buttons are hooked up correctly but may use multiple ground wires instead of just one.",
      "rubric_performance_level_3": "The buttons are hooked up, but the blue squares are not hidden when the buttons are pressed",
      "rubric_performance_level_4": "The app has not been started or there are no buttons hooked up to the circuit playground"
    },
    "start_html": {
      "Escape Room!": "Escape Room!",
      "In order to escape, you need enter the correct 3-digit number!Find the buttons hidden around the room. When you press a button, one of the digits will be revealed!Once you've found all 3 digits, enter them in to escape the room!122You Won!": "In order to escape, you need enter the correct 3-digit number!Find the buttons hidden around the room. When you press a button, one of the digits will be revealed!Once you've found all 3 digits, enter them in to escape the room!122You Won!",
      "Find the buttons hidden around the room. When you press a button, one of the digits will be revealed!": "Find the buttons hidden around the room. When you press a button, one of the digits will be revealed!",
      "Once you've found all 3 digits, enter them in to escape the room!": "Once you've found all 3 digits, enter them in to escape the room!",
      "1": "1",
      "2": "2",
      "You Won!": "You Won!"
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/17/levels/7": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Input - ChalA_2222": {
        "display_name": "Physical Reactions",
        "bubble_choice_description": "Create a device prototype that simulates an event when two objects touch. For example, two people in love and, when they touch, the circuit playground turns red (to represent love)",
        "long_instructions": "# Physical Reactions\r\n\r\nCreate a device prototype that simulates an event when two objects touch. For example:\r\n\r\n- Two people in love and, when they touch, the circuit playground turns red (to represent love)\r\n- A blue paint brush and a yellow paint brush and, when they touch, the circuit playground turns green (to represent mixing colors)\r\n- An oxygen atom and a carbon atom that, when they touch, the circuit playground buzzes (to represent a [Carbon Monoxide detector](https://en.wikipedia.org/wiki/Carbon_monoxide_detector))\r\n\r\nYou should use physical materials to create your two objects, such as creating figures out of cardboard or popsicle sticks. Your device should use two wires to represent buttons - when the wires touch, the circuit playground reacts.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials**\r\n\r\n- Decide what reaction you would like to represent with this project. You can use one of the examples above, or create your own\r\n- Design and decorate your two objects our of physical materials, like cardboard or paper or popsicle sticks.\r\n- Attach a wire to each of your objects. Try to hide the wires so only the tips are visible for when they touch\r\n- Prepare your circuit playground\r\n\r\n**In Code Mode:**\r\n\r\n1) Add code to detect when the two wires touch as a button event. When they do: have the circuit playground react (such as lighting up or making a sound)\r\n\r\n**Run Your App!** Demonstrate your app for a peer and explain what it represents",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code.",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Input - ChalB_2222": {
        "display_name": "Alarm System Prototype",
        "bubble_choice_description": "Create a device prototype that simulates an alarm system that detects when someone opens a box.",
        "long_instructions": "# Alarm System Prototype\r\n\r\nCreate a device prototype that simulates an alarm system that detects when someone opens a box. This requires creating a box from physical materials like cardboard or paper, and attaching two wires to the inside of the box. When the box is closed, the wires should be touching. But when the box is open, the wires become disconnected and the circuit playground should buzz to warn that someone has opened the box.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n- Create a box our of physical materials, like cardboard or a used tissue box. Design the box so it has a clear lid that can open and close in one place.\r\n- Attach two wires to the inside of the box so that when the lid is closed, the wires are touching. You will probably need one wire on the underside of the lid, and another wire on the inside wall of the box.\r\n- If necessary: cut small holes in the back of the box so the wires can run through and attach the circuit playground\r\n\r\n**In Code Mode:**\r\n\r\n1) Create a button variable\r\n2) When the button is `down`: turn off the buzzer and all the lights on the circuit playground\r\n3) When the button is `up`: turn on the buzzer and lights! Make a bunch of noise!\r\n\r\n**Run the Code!** You could tell a friend that a treat is in the box and ask them to open it, only for them to be surprised when the alarm goes off!",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code.",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      },
      "CSD U6 - Physical Input - ChalC_2222": {
        "display_name": "Create Your Own Button",
        "bubble_choice_description": "Using other conductive materials, like paperclips or aluminum foil or metal tabs, simulate buttons or switches like we're more familiar with.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px; width: 175px; text-align:center\">\r\n\r\n![expandable](https://images.code.org/25cce8f702f27384b3042a6fcbc09803-image-1646938647982.png)\r\n\r\n<br/>\r\n\r\nImage from Red Fern Electronics\r\n\r\n</div>\r\n\r\n# Create Your Own Button\r\n\r\nSo far, we've simulated buttons by having two wires touch. Using other conductive materials, like paperclips or aluminum foil or metal tabs, we can simulate buttons or switches like we're more familiar with. This requires creating a situation where our two wires are close but not touching, then the user interacts with a third physical device which connects the two wires together simulating a button press.\r\n\r\n## Do This\r\n\r\n**Prepare:**\r\n\r\n- Decide how you'd like to setup your button or switch. \r\n\t- You can search the internet for \"DIY Switch\" or \"DIY Button\"\r\n    - Or, you can check out this guide from [Red Fern Electronics: DIY Switches](https://redfernelectronics.co.uk/diy-switches/)\r\n\r\n**Materials:**\r\n\r\n- Gather your conductive materials and wires together\r\n- Arrange your wires so they are close by, but not touching\r\n- Arrange your third conductive material so it can be pressed or toggled or moved to bridge the two other wires\r\n- Try to hide your wires as much as possible so only the button or switch is visible\r\n- Get your Circuit Playground ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create a button variable\r\n2) When the button is pressed: make a noise or light up\r\n3) Attach your wires to your circuit playground and test your code\r\n\r\n**Run Your Code!** You should be able to press your button or toggle your switch like it's a real button or switch.",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code.",
        "start_html": {
          "Follow the instructions in this level, then plug in your board and press Run": "Follow the instructions in this level, then plug in your board and press Run",
          "Success!": "Success!",
          "Board Not Detected!": "Board Not Detected!",
          "Try the following:": "Try the following:",
          "Refresh this page and try again": "Refresh this page and try again",
          "Plug the board into a different USB": "Plug the board into a different USB",
          "Visit studio.code.org/maker/setup": "Visit studio.code.org/maker/setup"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/18/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/18/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or making a small buzz on the circuit playground. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/18/levels/3": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device uses inputs and outputs to function. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6-2022/lessons/18/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - [click here to see the rubric][0]. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever your finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it.",
    "teacher_markdown": "**Exemplars:** See the lesson plan for links to sample rubrics and exemplar projects"
  },
  "https://studio.code.org/s/csd6-2022/lessons/18/levels/5": {
    "dsls": {
      "title": "End-Of-Unit Survey!"
    },
    "sublevels": {
      "Student End of Unit Survey - Intro+TeacherMD_csd6-2022": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **three quick questions**.\n\n_Code.org takes your privacy seriously._ Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n",
          "teacher_markdown": "**Teacher End-Of-Unit Surveys:** While your students complete the survey, we would appreciate you completing a quick teacher survey\n\n## [Click Here for Teacher Survey](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6)\n"
        }
      },
      "Student End of Unit Survey - Q1_2022": {
        "dsls": {
          "answers": [
            {
              "text": "all of the concepts ",
              "correct": true
            },
            {
              "text": "most of the concepts, but not all of them",
              "correct": true
            },
            {
              "text": "about half of the concepts, but not all of them",
              "correct": true
            },
            {
              "text": "some of the concepts, but not most of them",
              "correct": true
            },
            {
              "text": "very few or none of the concepts",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Thinking about what I learned in this unit, I feel like I understand..."
            }
          ]
        }
      },
      "Student End of Unit Survey - Q2_2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I can really be myself in this computer science class."
            }
          ]
        }
      },
      "Student End of Unit Survey - Q3_2022": {
        "long_instructions": "What else would you like your teacher to know about this class? For example: what did you like best about the class, or what is one thing that could make the class better?\r\n\r\n(Your responses are anonymous. Your teacher can see responses for the whole class, but without names attached)"
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lockable/1/levels/1": {
    "dsls": {
      "title": "Physical Computing Post-Project Test"
    },
    "sublevels": {
      "CSD U6 test hardware multi2_2022": {
        "dsls": {
          "answers": [
            {
              "text": "Hardware must be physically controlled by a person, and software can be controlled with code.",
              "correct": false
            },
            {
              "text": "Hardware allows software to interact with the physical world in many different ways.",
              "correct": true
            },
            {
              "text": "Hardware is the type of software used in physical prototypes.",
              "correct": false
            },
            {
              "text": "Hardware and software work together to make computing devices useful.",
              "correct": true
            },
            {
              "text": "In computing devices, hardware controls output and software controls input.",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "What TWO ANSWERS best describe the relationship between hardware (physical devices) and software (programs)?"
            }
          ]
        }
      },
      "CSD U6 test parameters multi_2022": {
        "dsls": {
          "answers": [
            {
              "text": "They can be used with physical devices or hardware.",
              "correct": false
            },
            {
              "text": "They can be used inside a for loop.",
              "correct": false
            },
            {
              "text": "They can be used as a general solution for problems with different specific details.",
              "correct": true
            },
            {
              "text": "They can be used to run the same code in many different places in the program.",
              "correct": false
            },
            {
              "text": "They can be used to detect when the user has provided input.",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "What makes functions with parameters more useful than functions without parameters?"
            }
          ]
        }
      },
      "CSD U6 test debugging multi_2022": {
        "dsls": {
          "answers": [
            {
              "text": "The right button is broken on the board.",
              "correct": true
            },
            {
              "text": "The speakers on the computer are not working.",
              "correct": false
            },
            {
              "text": "The file name for the sad song is incorrect.",
              "correct": false
            },
            {
              "text": "The board is not connected to the computer.",
              "correct": false
            },
            {
              "text": "The event handler does not have the correct parameters.",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "A team is creating a prototype that plays a happy sound on the computer when the left board button is pressed and a sad song on the computer when the right board button is pressed. The happy song is working, but the sad song is not. Choose a HARDWARE problem that could be causing this bug."
            }
          ]
        }
      },
      "CSD U6 test events multi_2022": {
        "dsls": {
          "answers": [
            {
              "text": "I only",
              "correct": false
            },
            {
              "text": "II only",
              "correct": false
            },
            {
              "text": "I and II",
              "correct": false
            },
            {
              "text": "I and III",
              "correct": true
            },
            {
              "text": "I, II, and III",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "What does a programmer need to know when creating an event listener?  \n&nbsp;&nbsp;&nbsp;I. The event that will trigger the change  \n&nbsp;&nbsp;&nbsp;II. When in the program the event will be triggered  \n&nbsp;&nbsp;&nbsp;III. What the program should do when the event is triggered"
            }
          ]
        }
      },
      "CSD U6 test feedback FR_2022": {
        "long_instructions": "What was one piece of feedback that you chose not to use in your final prototype?  Why did you choose not to use it?\r\n"
      },
      "CSD U6 test design FR_2022": {
        "long_instructions": "A friend is having a problem with keeping a fish tank at the right temperature so the fish stay healthy.  Describe how you could use at least one type of input and one type of output to create a physical computing device to help this friend."
      },
      "CSD U6 test challenge FR_2022": {
        "long_instructions": "What is one challenge with using hardware that you did not have using software?  How did you address this challenge?"
      }
    }
  },
  "https://studio.code.org/s/csd6-2022/lessons/19/levels/1": {
    "dsls": {
      "markdown": "# CS Discoveries Post-Course Survey\n\n**Your input and feedback is important to us!** We use it to:\n\n* understand your experience\n* make improvements to the course\n\nThanks for taking the time to help make CS Discoveries even better!\n\n<a class=\"btn btn-large btn-success\" href=\"/s/csd-post-survey-2022/lockable/1/levels/1/page/1\" target=\"top\">Click here to complete the CS Discoveries Post-Course Survey</a>\n\n(opens in a new tab)\n\n<br>\n\n\n\n\n\n",
      "teacher_markdown": "This level appears at the end of every unit. **Please have your students complete this survey at the end of their final unit!** Students only need to take the survey once at the end of the course.\n\n* The results are vital for us (code.org) to sustain our courses and make improvements.\n* There will be a teacher survey as well where you can provide your own input. You will be notified via email about the teacher survey.\n\n**Instructions for Unlocking the Survey for Students:** [[google doc](https://docs.google.com/document/d/170NdiEBwcLEsLHQqgPy_zdNKFZfO-rS9aCAFCcEYhzY/view)] [[pdf](https://docs.google.com/document/d/170NdiEBwcLEsLHQqgPy_zdNKFZfO-rS9aCAFCcEYhzY/export?format=pdf)]\n\nIf students click the link and see an error message about the survey being locked, please follow the steps in the instructions above to unlock the survey for students.\n\n\n"
    }
  }
}