{
  "display_name": {
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/2": "Intro to Design Mode",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/10": "getNumber"
  },
  "short_instructions": {
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/4": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/10": "Fix the layout of the bullseye game. (Click to see full instructions)",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/2": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/4": "Update the ID names and `console.log` messages to match the correct button. (Click to see full instructions.)"
  },
  "long_instructions": {
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/3": "# Design Mode\n\nWelcome to Design Mode in AppLab! This will allow you to easily create a digital version of your sketched wireframes by adding UI elements from the toolbox and and styling them the way you want!\n\n**Goal:** Add a large red button to your app using Design Mode.\n\n# Do This:\n\n-   **Find <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\"> in the Design Toolbox** and drag out a button and resize it. \n\n-   **Change the button text** to say \"Click Me\".\n\n-   **Set the color for the button** to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\" style=\"width: 500px; float: middle\">",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/4": "# IDs\n\nThe `id` (we'll typically write **ID**) is a **unique identifier** used for each element in the app.\n\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console.\n\n# Do This\n\nWhile each element you drag out in Design Mode gets a default ID, they aren't really that helpful (like `button1` and `button2`), so you should get in the habit of creating your own IDs.\n\n-   Change the ID of your \"click me\" button to something useful (like `redButton`)\n-   Drag out a second button\n-   Make the second button blue and give it an ID of `blueButton`",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/6": "# Adding Text\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\" style=\"float: right; width: 75px\"/>\nThe label element lets you add any text you'd like to your app. Just drag out a label block and set its \"text\" property. \n\n# Do This\n\nUse a label element to create a title for this app.\n\n-   Drag out a label and place it on the top of the screen\n-   Change the id to \"titleLabel\"\n-   Change the text to \"My App\"\n-   Increase the font size\n-   Choose a color you like for the title",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/7": "# Input Elements\n\n<img src=\"https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png\" style=\"float: right; width: 150px\"/>\n\nButtons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.\n\n# Do This\n\nChoose at least two of the input elements, and for each one:\n\n-   Drag it out and position it on the screen\n-   Change the id to something meaningful\n-   Read through the properties and experiment with them\n-   Add a label element next to each that describes what they do (don't forget to give it an id too!)",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/8": "# Adding Images\n\nSometimes the functionality you want to represent in your prototype is too complicated to do with just the default buttons and fields. If you want to mock up more advanced interfaces (like a map), the easiest way to do it is with an image\n\n# Do This\n\n-   Find and download an image of a map you like\n-   Drag an image element into your app [][0]\n-   Choose your image [][1]\n    -   **URLs** can be added directly into the \"picture\" field.  \n    -   **Upload images** by clicking \"Choose\".\n    -   **Note:** You can always see all the files you've uploaded by clicking the gear at the top of the toolbox. [][2]\n-   Make sure to give your image a good ID!",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/9": "<img src=\"https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png\" style=\"width: 200px; float:right\">\n\n# Icons\n\nIcons help users find the right functionality while also making your app feel more polished.\n\n# Do This\n\nAdd a few icons to your app. For each icon:\n\n-   Drag out an image element\n-   Next to the \"Picture\" field click \"Choose...\"\n-   Click on the \"Icons\" tab and select one\n-   Make sure to give your image a good ID! (do we still need to say it?)",
    "https://studio.code.org/s/applab-2hour/stage/1/puzzle/10": "# Layering and Deleting\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 200px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is rendered. \n\nIf you **scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **delete or change the depth** of an element.\n\n-   **Delete an Element** by selecting it (clicking on it) in the design view and then clicking **Delete** in the properties tab.\n-   **Change the depth** of elements by using the double or single arrows.\n    -   Click the double arrow to send all the way to front or back.\n    -   Click the single arrow to move up or down one layer.\n\n# Do This:\n\nUse the **delete** and **depth** tools to **create the \"After\" image**\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/2": "# Activate Your Button\n\nIn the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!\n\n**Goal:** Add code using Design Mode to make the button respond to a click.\n\n# Do This\n\nYour starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.\n\n-   In Design Mode, **click on the provided button to edit its properties**\n-   Click on the **Events** tab\n-   Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.\n-   Take a look at the block that was added to the **Code Mode** tab.\n-   Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the _Debug Console_ on the next level.",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/3": "# How Do Events Work?\n\nEvent-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that \"watch\" for certain events to occur in your program, and then run some function when an event occurs.\n\nWhen you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.\n\n# Do This\n\nThe toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.\n\n-   Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)\n-   From the block's dropdown, select \"titleLabel\" (the id of the element you want to change)\n-   In the block's second input, replace \"text\" with a new title for the app\n-   Run your program and click the button to see it work",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/4": "# Updating IDs and Debugging with Console Log\n\nHere we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!\n\nWe should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button?**\n\n# Do This\n\n-   **Change the IDs** of the buttons in Design Mode to more descriptive names.\n\n-   Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)\n\n-   **Update the `console.log` messages** to match the buttons.",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/6": "# Second Screen\n\nMost apps have more than one screen or page that each have different contents. With Design Mode you can quickly add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen to your app and add a button to that screen. Make sure you're using good IDs!\n\n-   Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You now have two screens!\n-   Using Design Mode create a button in your new screen.  <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35 PM.png\" style=\"width: 150px\"> \n-   Set the IDs for your screens and buttons to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_, _\"homeButton\"_, and _\"detailsButton\"_\n\nYou can always use the screen dropdown menu at the top of the app window to switch between your screens <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59 PM.png\" style=\"width: 150px\"> ",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/7": "# Switching Screens\n\nYou can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.\n\n[][0]\n\n# Do This\n\nYou'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.\n\n-   Drag out two `onEvent()` blocks\n-   Set the IDs for your `onEvent()` blocks for each of your two buttons\n-   Place a `setScreen` block inside each of the `onEvent` blocks.\n-   Choose the appropriate screen from the dropdown of each `setScreen` block.\n-   Test out your app to make sure your buttons let you switch back and forth between the two screens",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/8": "# Navigating\n\nOnce you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the \"homepage\" of your app.\n\n# Do This\n\nHere's an app with four different pages, but only the \"red\" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.\n\n-   Add two `onEvent()` blocks, one each for the \"greenButton\" and \"blueButton\"\n-   Use the `setScreen()` block to make each button switch to the appropriate screen\n-   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.",
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/9": "# Navigating Back\n\nSomeone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.\n\n# Do This\n\nCreate buttons and event handlers to help a user navigate back to the \"home\" screen\n\n-   Use Design Mode to create a button inside each of the \"red\", \"green\", and \"blue\" screens. Make sure to give them descriptive IDs.\n-   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.\n-   Inside each `onEvent()` block use the `setScreen()` block that switches back to your \"home\" screen.\n-   Test your app. You should now be able to navigate back to the home screen from each of the other three.",
    "https://studio.code.org/s/applab-2hour/stage/3/puzzle/1": "# Controlling Visibility\n\nEarlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:\n\n-   `hideElement()` makes the specified element invisible\n-   `showElement()` makes the specified element visible\n\n# Do This\n\nThe provided app has an image and two buttons.\n\n-   Attach an event handler to the \"Hide\" button that hides the image when clicked\n-   Attach an event handler to the \"Show\" button that shows the image when clicked",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/2": "# setScreen\n\nLets start with a setter you have used before `setScreen()`. \n\n-   Make the About Me button on the Home page go to the About Me page.\n-   Make the Back button on the About Me go to the Home page.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/3": "# setText\n\nWe are going to start making an alarm app. We have already set up an event handler for the \"triggerAlarmButton\" which will change the \"statusLabel\" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/4": "# Hide and Show\n\nIt is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?\n\n-   You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.\n\nHint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/5": "# getText\n\nTry to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/6": "# setText and getText\n\nOften you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the \"choiceDisplay\" label.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/7": "# setText and getText\n\nYou've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?\n\n_Tip: The \"change\" event is triggered when the user clicks \"enter\" in a field. Use an event handler for the text input watching for the \"change\" event._",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/8": "# getNumber\n\n**Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.\n\nCan you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/10": "# getNumber\n\n**Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**\n\nWe can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/12": "# setProperty\n\n**Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.\n\nCan you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/13": "# setProperty image\n\n**Note:** This level starts in Design Mode.\n\nThere is an image element set up for you but it does not show when you leave Design Mode because it has not been told what image to display. \n\n-   Use the `setProperty()` command to set the image of the UI Image Element on the screen.",
    "https://studio.code.org/s/applab-2hour/stage/4/puzzle/14": "# setProperty background-color\n\nChange the `background-color` of a button to a new random color each time it is clicked using `setProperty()`."
  },
  "callouts": {
    "https://studio.code.org/s/applab-2hour/stage/2/puzzle/3": {
      "": "Use the setText block to change the text of titleLabel"
    }
  }
}