{
  "https://studio.code.org/s/csd3-2021/lessons/1/levels/1": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Stamp Pad\n\nClick \"Run\" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps."
  },
  "https://studio.code.org/s/csd3-2021/lessons/1/levels/2": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Animated Comics\n\nCombining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click \"Run\" to see an example."
  },
  "https://studio.code.org/s/csd3-2021/lessons/1/levels/3": {
    "long_instructions": "# Alien Jumper\n\nPress \"Run\" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change."
  },
  "https://studio.code.org/s/csd3-2021/lessons/1/levels/4": {
    "long_instructions": "# Hungry Bunny\n\nThe bunny is hungry, and it's looking for mushrooms and carrots for dinner.\n\nTo win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.\n\nMake sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!\n\nUse the space bar to jump.  You can squash ladybugs and snails by jumping on them.\n\nClick \"Run\" to start the program."
  },
  "https://studio.code.org/s/csd3-2021/lessons/2/levels/1": {
    "display_name": "Drawing Shapes",
    "long_instructions": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\n-   Choose a color to change the color of the shapes\n-   Click on a shape EVERY TIME you want to draw a new shape\n-   Try turning on the grid by checking the box underneath the \"Run\" button at the bottom.\n\nMake sure you hit \"Run\" to start the program."
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/1": {
    "display_name": "Introduction to Game Lab",
    "long_instructions": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n-   Look at the line of code in the workspace below these instructions ( [Show me where][0] ) and discuss with your partner where you think the shape will be drawn on the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens.\n-   Change the numbers inside the block, then try running the program again.\n-   Try to place the rectangle near the bottom right of the screen.",
    "teacher_markdown": "# Tour of Game Lab\n\nDepending on the age and comfort level of your students, you may choose to use this level to tour the environment as a whole class. Make sure that students can find the level instructions, coding area, display area, and block drawers. This is also a good opportunity to point out some of the useful resources like documentation and the blocks to text button.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/2": {
    "display_name": "Video: Drawing in Game Lab - Part 1",
    "long_instructions": "## Questions to Consider\n\n-   Where can you find more information about how to use the blocks?\n-   What’s an advantage of using block mode?",
    "teacher_markdown": "## Discussion Goals\n\nMake sure students understand how to access the block documentation by clicking on the blocks inside the toolbox and clicking \"see examples\". \n\nAs students think of ideas of why they might prefer to use block mode, make sure that they understand that the block-based version of the programming language is just as legitimate as the text-based version.  Students may offer that blocks make it easier to remember the exact commands or that they don't have to worry about the details of the parentheses or semicolons.  \n\n(Alternatively, advantages to text might be that it's easier to edit or that the text takes up less space.)"
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/3": {
    "display_name": "Using the Grid",
    "long_instructions": "<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png\" style=\"float:right;width:150px\">\n\n# Place Squares in Corners\n\nA big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.\n\n# Do This\n\n-   Place two rectangles exactly in the corners of the screen, just like the picture."
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/4": {
    "display_name": "Video: Drawing in Game Lab - Part 2",
    "long_instructions": "## Questions to Consider\n\n-   What’s the difference between stroke and fill?",
    "teacher_markdown": "## Discussion Goals\n\nStroke controls the border color of the shape, and fill controls the color inside of it."
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png\" style=\"float:right;width:200px;\">\n\n# fill(color)\n\nYou can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.\n\n# Do This\n\n-   Look at the code that sets the color. ( [Show me where][0] )\n-   Change the color from blue to yellow.\n-   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where][1] ).  The new square can go any location on the screen you like.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png\" style=\"float:right\">\n\n# Order Matters\n\nIn Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.\n\n# Do This\n\n-   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.\n-   Change the red rectangle's color to green.\n-   Change the order of the code so the green rectangle appears on top.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png\" style=\"float:right;width:150px;\">\n\n# ellipse\n\nYou can use `ellipse` to make a circle.\n\n# Do This\n\n-   Look at the code that makes the ellipse.\n-   Add a new ellipse of a different color.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/8": {
    "dsls": {
      "description": "Do lots of practice!",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 drawing practice 1_2021": {
        "display_name": "Debug a car",
        "bubble_choice_description": "Debug this code so that the wheels appear.",
        "long_instructions": "<img src=\"https://images.code.org/6edeebac96c298ad4accb05eb7598dc9-image-1560891281318.54.19 PM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Fix a car\r\n\r\nOops, the red part of the car is hiding the wheel!  Fix the program to match the picture on the right.\r\n\r\n# Do This\r\n\r\n* Read the code that makes the car.\r\n* Change the code so the wheels are visible.\r\n",
        "teacher_markdown": "This debugging task tests the student's ability to sequence code correctly.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing practice 2_2021": {
        "display_name": "Debug a Flower",
        "bubble_choice_description": "Move the fallen petals back to the flower.",
        "long_instructions": "<img src=\"https://images.code.org/14f4099599200795902b0623d013b41c-image-1560890438689.JPG\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Attach the petals\r\n\r\nUh oh, the flower is missing some petals. Bring them together with the center of the flower to recreate the picture on the right. \r\n\r\n# Do This\r\n\r\n* Look at the code that makes the flower.\r\n* Change the code so that all the petals are attached to the center of the flower.\r\n* *Hint: use the grid to figure out where the petals should be*",
        "teacher_markdown": "This debugging task helps students understand how to place elements on a screen using a coordinate plane.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing practice 3_2021": {
        "display_name": "Debug a stoplight",
        "bubble_choice_description": "Fix the stoplight so that all colors are visible.",
        "long_instructions": "<img src=\"https://images.code.org/a4bc7d3dbd2ea2fd744ec64a9ee5ac76-image-1560890596053.42.55 PM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Debugging: Fix the stoplight\r\n\r\nThis stoplight is all mixed up.  Fix it so that it looks like the picture on the right.\r\n\r\n# Do This\r\n\r\n* Read the code below. It's intended to create a stoplight, but the colors are incorrect.\r\n* Change the code so the colors are correct.",
        "teacher_markdown": "This debugging task tests the student's ability to sequence code in regards to the `fill` command.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/9": {
    "long_instructions": "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png\" style=\"float:right;width:150px;\">\n\n# Debugging\n\nOften, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.\n\n# Do This\n\n-   Look at the code in the workspace.\n-   Change the code so it makes the picture on the right.\n    -   (You'll need to move one line of code AND change the coordinates of the square.)",
    "teacher_markdown": "This is a good puzzle to use as an assessment of whether or not students understand the basics of sequencing and positioning shapes in Game Lab.",
    "callouts": {
      "CSD_U3_rect_c1": "Here is the code",
      "CSD_U3_rect_c2": "Drag this block into the code area."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/3/levels/10": {
    "dsls": {
      "description": "Try out some challenges!",
      "display_name": "Drawing Challenges"
    },
    "sublevels": {
      "CSD U3 drawing challenge 2_2021": {
        "display_name": "New Block: Point",
        "bubble_choice_description": "Learn how to draw dots on the screen.",
        "long_instructions": "<img src=\"https://images.code.org/cb344be4730b2a4925891adc1989ee01-image-1560899864102.JPG\" style=\"float:right;width:150px;\">\r\n\r\n# Points!\r\n\r\nThere's a new block that lets you draw a single point on the screen.  (`strokeWeight` controls how big the point is.)\r\n\r\n# Do This\r\n\r\n* Read the code that makes the picture.\r\n* Use the `point` block to finish the code so it matches the picture.",
        "teacher_markdown": "This task introduces students to the point block.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing challenge 3_2021": {
        "display_name": "New Blocks: Stroke Weight and Point",
        "bubble_choice_description": "Make the dots bigger using strokeWeight.",
        "long_instructions": "<img src=\"https://images.code.org/d4a374335300d43e25fd903cfbdec7ff-image-1561834319250.51.40 AM.png\" style=\"float:right;width:150px;\">\r\n\r\n# Points and Stroke Weight\r\n\r\nThe `strokeWeight` block can control how big a point is. We can use this block to create a die.\r\n\r\n# Do This\r\n\r\n* Read the code that makes the picture.\r\n* Use the `strokeWeight` block to finish the code so it matches the picture.\r\n\r\n*Hint: The `strokeWeight` block should come before your `point` blocks?*",
        "teacher_markdown": "This task gives students practice with the `strokeWeight` block.",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 drawing challenge no fill_2021": {
        "display_name": "New Blocks: No Fill",
        "bubble_choice_description": "Make shapes that you can see through using noFill.",
        "long_instructions": "<img src=\"https://images.code.org/5293d165d4a9161b75df43128863f315-image-1566856378596.PNG\" style=\"float:right;width:200px;\">\r\n\r\n# No Fill\r\n\r\nThe `noFill` block makes it so created shapes have no fill. We can use it to make cool patterns.\r\n\r\n# Do This\r\n\r\n* Read the code that makes the picture.\r\n* Use the `noFill` block to finish the code so it matches the picture.\r\n",
        "teacher_markdown": "This task gives students practice with the `noFill` block."
      },
      "CSD U3 picture_2021": {
        "display_name": "Challenge: Draw an Image",
        "bubble_choice_description": "Recreate an image from last lesson.",
        "long_instructions": "# Challenge: Draw an Image\r\n\r\nIn the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.  You can choose any of the images that you created!\r\n"
      },
      "CSD U3 challenge face_2021": {
        "display_name": "Challenge: Face",
        "bubble_choice_description": "Make a face out of shapes.",
        "long_instructions": "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\r\n\r\n# Challenge: Face\r\n\r\nWrite a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\r\nOnce you've finished, add your own personal touches to the image.\r\n"
      },
      "CSD U3 challenge new shape_2021": {
        "display_name": "Challenge: Shape of Shapes",
        "bubble_choice_description": "Make a triangle out of circles.",
        "long_instructions": "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\r\n\r\n# Challenge: Shape of Shapes\r\n\r\nUsing only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?\r\n"
      },
      "CSD U3 L3 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/1": {
    "long_instructions": "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# Rectangle Size\n\nThese `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.\n\n# Do This\n\n-   Look at the code and try to figure out how the last two inputs in `rect` work.\n-   Change the numbers in the second `rect` to make red rectangle longer than the blue one."
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n-   Write code that makes an orange ellipse behind the green one.\n-   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one."
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/3": {
    "long_instructions": "# Background\n\nSometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.\n\n# Do This\n\n-   Run the code to see `background` work.\n-   Change the background from yellow to orange.\n\n_Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_"
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png\" style=\"float:right;height:150px\">\n\n# Background\n\n`background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.\n\n# Do This\n\n-   Use `background()` to make a \"black\" background behind the green circle."
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nThis program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.\n\n# Do This\n\n-   Debug this program and correct the error so that the grass extends across the entire bottom.\n-   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/6": {
    "dsls": {
      "display_name": "Practice with Parameters"
    },
    "sublevels": {
      "CSD U3 shapes behind_2021": {
        "display_name": "Debug: Hidden Shapes",
        "bubble_choice_description": "Reveal the picture under the red circle.\r\n",
        "long_instructions": "<img src=\"https://images.code.org/c634f6594ea775e93346e152fe98b5a9-image-1586412462396.05.57 PM.png\" style=\"float:right; width: 150px;\">\r\n\r\n# Debug: Hidden Shapes\r\n\r\nThe code below should be making a pretty picture, but right now only one ellipse is showing up. \r\n\r\n# Do This\r\n\r\n* Debug the code so the picture shows on the right.\r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes missing_2021": {
        "display_name": "Debug: Missing Shapes",
        "bubble_choice_description": "The picture isn't appearing, what's wrong with the code?",
        "long_instructions": "<img src=\"https://images.code.org/122ae9e48210f88c7e1a403ac49e6481-image-1586412828471.11.56 PM.png\" style=\"float: right; width: 150px;\">\r\n\r\n# Debug: Missing Shapes\r\n\r\nWhen the code below is run, nothing shows up. \r\n\r\n# Do This\r\n\r\n* Debug the code so that an image shows up.\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes scene_2021": {
        "display_name": "Finish the Scene",
        "bubble_choice_description": "Be creative and finish the drawing however you want!",
        "long_instructions": "# Finish the Scene\r\n\r\nThe scene below seems to be incomplete. Be creative and finish the drawing however you want!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n-   Debug this program to make the cloud wider than it is tall, like in the image.\n-   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/4/levels/8": {
    "dsls": {
      "description": "Check out one or more of these extra blocks that you can use to make your pictures more interesting.",
      "display_name": "Shapes and Parameters Challenges"
    },
    "sublevels": {
      "CSD U3 shapes polygon_2021": {
        "display_name": "New Block: Regular Polygon",
        "bubble_choice_description": "Learn how to create polygons with any number of sides.",
        "long_instructions": "\r\n# Regular Polygons\r\n\r\nAs of now you have just been drawing ellipses and rectangles. But now there is a new block to help draw other shapes!\r\n<img src=\"https://images.code.org/d1a93722806f1dab50a897dee280b107-image-1566945343071.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Do This\r\n\r\n* Read the code that makes the the current image.\r\n* Use the `regularPolygon` block to finish the code so it matches the picture on the right.\r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes_2021": {
        "display_name": "New Block: Shape",
        "bubble_choice_description": "Learn how to create any shape you want.",
        "long_instructions": "# Shape\r\n\r\nAs of now you have just been drawing ellipses and rectangles. But now there is a new block to help draw other shapes!\r\n<img src=\"https://images.code.org/030e1530fb996ae1c0c1662ec4e3440a-image-1567014400477.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Do This\r\n\r\n* Read the code that makes the picture.\r\n* Use the `shape` block to finish the code so it matches the picture.\r\n* Play around some more with the `shape` block and see what you can make.\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes line_2021": {
        "display_name": "New Block: Line",
        "bubble_choice_description": "Learn how to draw lines.",
        "long_instructions": "# New Block: Line\r\n\r\nAs of now you have just been drawing ellipses and rectangles. But now there is a new block to help draw just lines!\r\n<img src=\"https://images.code.org/095a9251e533c63411f87f4e57ebe919-image-1567026036725.PNG\" style=\"float:right;width:150px;\">\r\n\r\n# Do This\r\n\r\n* Read the code that makes the picture.\r\n* Use the `line` block to finish the code so it matches the picture (it only uses straight lines!).\r\n* Play around some more with the `line` block and see what you can make.\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 shapes arc_2021": {
        "display_name": "New Block: Arc",
        "bubble_choice_description": "Learn how to draw arcs.",
        "long_instructions": "# New Block: Arc\r\n\r\nThe `arc()` commands works just like `ellipse()` except it has two extra parameters. These parameters specify two different angles that are used to create the arc. \r\n\r\n# Do This\r\n\r\n* Read the code and see how the 'arc' block works. Pay close attention to the **last two parameters** in each `arc()` command.\r\n* Play around with the 'arc' block once you think you know how it works!\r\n\r\n**Hints:**\r\n* For both angles, 0 degrees is to the right. 90 degrees is down. 180 degrees is to the left. 270 degrees is up.\r\n* The arc is always drawn clockwise from wherever start falls to wherever stop falls on the ellipse. \r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 parameters shape scene_2021": {
        "display_name": "Make a Shape Scene",
        "bubble_choice_description": "Now that you have some new blocks, decide what you'd like to draw with them.",
        "long_instructions": "# Make a Shape Scene\r\n\r\nNow that you have some new blocks, decide what you'd like to draw with them.\r\n\r\n# Do This\r\n\r\n* Draw a scene.  You can use the scenes below for inspiration.\r\n\r\n<img src=\"https://images.code.org/c4f937728760a22079fc1c38ac300984-image-1566088819489.39.48 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/d8bbcfd08bd76090903eb1eeadab53a9-image-1566088832981.24.42 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/e424ac937fbd5d6a219b1f1744a30084-image-1566088839042.16.14 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/28e9f2963706078d80a8f06e84eaa2fb-image-1566095034917.18.19 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">\r\n\r\n<img src=\"https://images.code.org/4d966b1ce5450d2cbcea8ac40ffd1988-image-1566095039922.23.16 PM.png\" style=\"float:left; height: 200px; margin: 15px;\">",
        "teacher_markdown": "This creative task allows students to use their new knowledge to achieve a goal that they set for themselves, or  to tinker with the code without a specific set goal.  "
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/1": {
    "long_instructions": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Change the number that is stored into the variable ([Show me where][0]) and run the code again.",
    "callouts": {
      "CSD_U3_variables": "Change the number here"
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nRead the code below and make a prediction.\n\n-   Where will the circle be drawn?\n-   What will happen if you change the number in Line 1?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/2": {
    "display_name": "Introduction to Variables",
    "long_instructions": "## Questions to Consider\n\n-   What are variables used to do?\n-   How do you create a variable and assign it a value?\n-   What can go into a variable?",
    "teacher_markdown": "# Discussion Goals\n\nStudents should understand that variables hold information and can be accessed using their labels.  With simple drawings, students may not see the power of variables, so you may want them to think of some different apps that they use and what information needs to be stored for the app to work, or think about a more complex program that they want to use variables for.\n\nNumbers, text, and colors can all go into variables, as well as more complicated data structures that students will see later in the course."
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/3": {
    "callouts": {
      "grid": "Click here to show the grid."
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/4": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad variable labels.  The errors prevent the program from being viewed in block mode, so the code is in text. Below are a few rules for naming variables. Click **\"Help & Tips\"** above to read more.\n\n-   Labels can't have spaces.\n-   Labels can't start with a number.\n-   Capitalization and spelling must be exactly the same.\n\n# Do This\n\n-   Find the rule each variable label violates.\n-   **Correct the errors by picking new names that follow the rules above.**\n\nIf your program works it should draw the image on the right. You should also be able to switch back to blocks mode.",
    "teacher_markdown": "If students use variable names that start with numbers, include spaces, or break other rules, the code may be forced into text mode the next time that they go to that level or refresh the page.  To get back into block mode, students will first need to fix the problem with the variable names.  Use the red error squares to see where the bugs most likely are, and once they are gone, click the \"block mode\" button at the top right of the workspace."
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/5": {
    "long_instructions": "# Using a Variable Many Times\n\nThis program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.\n\n# Do This\n\n-   Change the number assigned to `petalSize` so the red petals touch one another.\n-   Try to find the size that makes the most sense. Compare your answer with someone around you."
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/6": {
    "dsls": {
      "description": "Choose from the following activities to practice using variables.",
      "display_name": "Variables Practice"
    },
    "sublevels": {
      "CSD U3 Variables change circle size_2021": {
        "display_name": "Changing Variable Value",
        "bubble_choice_description": "Make the circle so big it fills up the whole screen.",
        "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
        "long_instructions": "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png\" style=\"float:right; height:150px\">\r\n\r\n# Debug: Using Variables\r\n\r\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\r\n\r\n# Do This\r\n\r\n* Change the value assigned to `circleSize` so that the circle fills the entire screen."
      },
      "CSD U3 Variables names_2021": {
        "display_name": "Debug: Variable Names",
        "bubble_choice_description": "Fix the variable names to make the pink shapes appear.",
        "long_instructions": "<img src=\"https://images.code.org/9acea1199be35dc50df699f0cfe00994-image-1566926202226.PNG\" style=\"float:right; height:120px\">\r\n\r\n# Debug: Variable Names\r\n\r\nSomething is wrong with the program below in which it cannot seem to create the image on the right. Can you fix it?\r\n\r\n::: details [*Hint: Click the arrow for a quick review of the rules.*]\r\n* Variable names can't have spaces.\r\n* Variablenames can't start with a number.\r\n* Capitalization and spelling in names must be exactly the same.\r\n:::\r\n"
      },
      "CSD U3 Variables unused_2021": {
        "display_name": "Debug: Unused Variables",
        "bubble_choice_description": "Make this code easier to read by using variables.",
        "long_instructions": "# Debug: Unused Variables\r\n\r\nIn the code below, variables are created but none of them are actually being used. Can you find spots where they can be used?\r\n"
      },
      "CSD U3 Variables forbidden names_2021": {
        "display_name": "Debug: Bad Naming",
        "bubble_choice_description": "Fix the variable names to make the street light appear.",
        "long_instructions": "# Debug: Bad Naming\r\n\r\nThe following variable here can't be used because of bad naming. Fix the name so you can run the program!\r\n\r\n::: details [*Hint: Click the arrow for a quick review of the rules.*]\r\n* Variable names can't have spaces.\r\n* Variable names can't start with a number.\r\n* Capitalization and spelling in names must be exactly the same.\r\n:::\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/7": {
    "short_instructions": "Change the program to use a variable for the size of the two eyes, and run it a few times with different values assigned to the variable, as in the sample image.",
    "long_instructions": "<img src=\"https://images.code.org/ac772ebf1fe670e3792a898e387b9e65-image-1589486509676.png\" style=\"float:right;height:150px\">\n\n# Using Variables\n\nThis program currently draws a face, but the eyes are two different sizes.  Change the program to use the variable for the size of both eyes, and run the code to make sure both eyes are drawn at the same size.\n\n# Do This\n\n-   **Run the program** to see how it works.\n-   **Change the program** to use the `eyeSize` variable.\n-   **Run the program** with different values for `eyeSize` and choose your favorite size."
  },
  "https://studio.code.org/s/csd3-2021/lessons/5/levels/8": {
    "dsls": {
      "description": "Expand your variables skills with these challenges.",
      "display_name": "Variables Challenges"
    },
    "sublevels": {
      "CSD U3 Variables Draw Challenge_2021": {
        "display_name": "Challenge: Draw an Image",
        "bubble_choice_description": "Draw a picture using the shapes and drawing tools you have learned so far.",
        "long_instructions": "# Challenge: Draw an Image\r\n\r\nUsing variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.\r\n"
      },
      "CSD U3 Variables Challenge_2021": {
        "display_name": "Challenge: Updating Variables",
        "bubble_choice_description": "Test your understanding of variables to draw something more complex.",
        "long_instructions": "# Challenge: Updating Variables\r\n\r\nSo far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.\r\n\r\n\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">"
      },
      "CSD U3 Variables String Challenge_2021": {
        "display_name": "Challenge: String Variables",
        "bubble_choice_description": "Use variables with colors!",
        "long_instructions": "<div class=\"no-pullthrough\" style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n<details>\r\n\r\n<summary>\r\n<strong>What are the possible colors I can use?</strong>\r\n</summary>\r\n\r\nFor a full list of possible colors you can use, go to <a href=\"https://www.w3schools.com/cssref/css_colors.asp\" target=\"_new\">W3Schools - CSS Colors</a>.\r\n</details>\r\n</div>\r\n\r\n# Challenge: String Variables\r\n\r\nSo far we've only ever assigned a number value to a variable, but did you know you can give a string value to a variable?  Read through the example program we've provided and then modify the program create new images with different colors.\r\n"
      },
      "CSD U3 L5 Freeplay_2021": {
        "display_name": "Free Play",
        "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/1": {
    "long_instructions": "# Random Numbers\n\nYou have a new block in the `Math` drawer called `randomNumber()`.  If you make your drawings with random numbers it will look a little bit different every time you run your program.  You can **learn about the block by hovering over it in the toolbox and choosing \"See examples\"**.\n\n[][0]\n\n# Do This\n\n-   Run the program several times to see how it works.\n-   Change the numbers inside `randomNumber` and run the code again a few times to see what changes."
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png\" style=\"float:right;height:150px\">\n\n# Random Numbers\n\nHere's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.\n\n# Do This\n\n-   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.\n-   As long as your circle is appearing at random X and Y positions, you can move on."
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/3": {
    "short_instructions": "Change the value of petalSize multiple times. How does it change your drawing?",
    "long_instructions": "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\" style=\"float:right;height:150px\">\n\n# Variables and Random Numbers\n\nVariables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.\n\n# Do This\n\n-   Assign a random number to the variable `eyeSize` so the the eyes automatically change size every time you run the program.  Remember, the left and right eyes should always match each other!\n\n<details><summary>Show me how...</summary>\n\n`var eyeSize = randomNumber(10,50);`\n\n</details>"
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/4": {
    "long_instructions": "# Changing variable values\n\n<img src=\"https://images.code.org/d6ba52ebdc60eabdd2a76e5d9f9971ac-image-1566250367449.gif\" style=\"float:right; width:150px;\">\n\nThese two flowers use a single variable to store their petal size, but the value stored in the variable changes in the middle of the program.\n\n# Do this\n\n-   Run the program several times to see how it works.\n-   Discuss the code with your partner.\n-   Change the program so that the flowers have random petal sizes as in the image."
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/5": {
    "dsls": {
      "description": "Try out your new skills on these levels.",
      "display_name": "Practice with Random Numbers"
    },
    "sublevels": {
      "CSD U3 Random planets_2021": {
        "display_name": "Modify the Planets",
        "bubble_choice_description": "Make the planets different sizes using random numbers.",
        "long_instructions": "# Modify the Planets\r\n\r\nYou have learned how to randomize things, so it's time to put all the knowledge to use in this scene!\r\n\r\n# Do This\r\n\r\n* Make this scene more fun! Give the planets random sizes so it's always changing. And for added fun, randomize their positions a little bit!\r\n"
      },
      "CSD U3 Random shape position_2021": {
        "display_name": "Debug: Random Shape Position",
        "bubble_choice_description": "Keep the rectangles stacked on top of each other by changing the way random numbers are used.",
        "long_instructions": "<img src=\"https://images.code.org/982d42328e2a44db4f1643df805a37ff-image-1569352188898.gif\" style=\"width:200px;float:right;\">\r\n\r\n# Debug: Random Shape Movement\r\n\r\nRight now in this program each rectangle has its own random position. Can you make it so that the rectangles are always stacked on top of each other, but the entire stack is randomly positioned?\r\n\r\n# Do This\r\n\r\n* Run this program to see how it works.\r\n* Use the variable `xPosition` to draw the bottom two rectangles at the same *x position* as the top pink rectangle.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nThis program draws a rainbow snake. To make the snake draw differently every time you'll need to use random numbers.\n\n# Do This\n\n-   Run the program several times to see how the starter code works.\n-   Add at least three new different colored circles to your rainbow snake.\n-   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.\n\n_Challenge: Can you make the size of some of the circles random, too?_"
  },
  "https://studio.code.org/s/csd3-2021/lessons/6/levels/7": {
    "dsls": {
      "description": "Try out these extra challenges with random numbers.",
      "display_name": "Challenges: Random Numbers"
    },
    "sublevels": {
      "CSD U3 Random rgb_2021": {
        "display_name": "Random RGB",
        "bubble_choice_description": "Randomize the colors of this rainbow.",
        "long_instructions": "# Random RGB\r\n\r\nYou have learned how to randomize things, so it's time to put all the knowledge to use in this scene!\r\n\r\n# Do This\r\n\r\n* Right now all the colors in this scene are set. Using both rgb and random, randomize the colors here!\r\n"
      },
      "CSD U3 Random add_2021": {
        "display_name": "Symmetry",
        "bubble_choice_description": "Use math to restrict the range of random numbers.",
        "long_instructions": "# Symmetry\r\n\r\nYou have learned how to randomize things, but what if you want two random shapes to be related in some way? Using a variable and experimenting with the math operations (+, -, *, /) can let you create effects like symmetry in your work. Butterfly wing patterns are naturally symmetrical. This drawing's red spots are placed randomly, but the second spot is always the same distance from the right side of the screen as the first spot is from the left.\r\n\r\n# Do This\r\n\r\n* Study how the red spots are drawn (lines 23-24). Note how subtraction is used.\r\n* Use this pattern again to create a second yellow spot to give the butterfly better symmetry.\r\n* As a challenge, create a spot3 variable, then add two more ellipses to the butterfly's wings.",
        "callouts": {
          "CSD_U3_butterfly": "Look carefully at this code."
        }
      },
      "CSD U3 Random multiply_2021": {
        "display_name": "Randomize Two Shapes",
        "bubble_choice_description": "Randomize the width of the tree, but make sure the leaves are always big enough.",
        "long_instructions": "# Randomize Two Shapes Together\r\n\r\nSometimes you want to randomize parts of a drawing, but still have the shapes work together. You can often do this by using variables and math operations (+, -, *, /). This tree drawing uses `height` to control the height of the trunk and vertical position of the leaves. It uses `width` to set the width of the trunk. A different `leavesWidth` variable controls the size of the leaves.\r\n\r\n# Do This\r\n\r\n* Notice the ranges of the variables `width` and `leavesWidth`. How are they different?\r\n* Run the program repeatedly until you notice what sometimes goes wrong.\r\n<details><summary>What goes wrong?</summary><em>Sometimes `leavesWidth` is less than `width` which makes the ellipse too small.</em></details>\r\n* Edit the code so that the width of the leaves is always exactly double the width of the tree trunk."
      },
      "CSD U3 Random line_2021": {
        "display_name": "Random Lines",
        "bubble_choice_description": "Randomize all the properties of these lines.",
        "long_instructions": "# Random Lines\r\n\r\nIn the scene below all it is are just a bunch of straight lines. Not very exciting.\r\n# Do This\r\n\r\n* Make this scene more fun! You now know how to randomize things like position, but don't forget about things like stroke color and stroke weight. Have fun!\r\n"
      },
      "CSD U3 Random arc_2021": {
        "display_name": "Random Arcs",
        "bubble_choice_description": "Randomize all the properties of these arcs.",
        "long_instructions": "# Random Arcs\r\n\r\nIn the scene below all it is are just a bunch of arcs that look alike. Not very exciting.\r\n# Do This\r\n\r\n* Make this scene more fun! You now know how to randomize things like position and angle, but don't forget about things like fill color, stroke color,  and stroke weight. Have fun!\r\n\r\n"
      },
      "CSD U3 Random free play_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n\r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/1": {
    "display_name": "Exploring Sprites",
    "long_instructions": "# Exploring Sprites\n\nThis program uses some new blocks that you haven't seen before.\n\n# Do This\n\nWith your partner, read the code and discuss how you think it works.  Change some lines and see what happens.  What do you think each line is doing?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/2": {
    "display_name": "Video: Introduction to Sprites",
    "long_instructions": "## Questions to Consider\n\n-   What is a sprite?\n-   What are properties?\n-   What problem do sprites solve?",
    "teacher_markdown": "## Discussion Goals\n\n**Key Vocabulary:**\n\n-   **Sprite** - A character on the screen with properties that describe its location, movement, and look.\n-   **Property** - A label for a characteristic of a sprite, such as its location and appearance.\n-   **Dot Notation** - the way that sprites' properties are used in Game Lab, by connecting the sprite and property with a dot.\n\nSprites are a very complex concept, and students may have difficulty understanding exactly what they are.  The most important aspect for students to understand is that sprites allow them to organize a lot of information about something that they want to draw to the screen.  \n\nStudents should make the connection between properties and variables, that both hold information that their program needs to run.  Properties are accessed through their sprites, and Game Lab sprites already have specific properties that are automatically created when students create each sprite, such as x position, height, and rotation.  \n\nSprites solve the problem of organizing a lot of information about how something should be drawn to a screen.  Rather than creating new variables to hold all of that information, sprites use properties to hold all of the information about one thing that is drawn to the screen.\n\n**Content Corner:** The sprite is a type of data called an **object**. While we aren't yet explicitly introducing the concept of objects, students do need to understand that a sprite is a different type of value from the ones we've seen before, one that can hold references to many more values."
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/3": {
    "short_instructions": "Do This",
    "long_instructions": "# Sprites\n\n**Creating Sprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png\" style = \"height:30px\">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.\n\n**Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling [][0] will draw all of your created sprites on the screen.\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\nThis program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.\n\n-   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.\n    -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.\n-   Add `drawSprites()` under the comment `Drawing`.\n-   **Run the code** to draw your first sprite on the screen.\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
    "callouts": {
      "": "Use this block to create a sprite"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\" style=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\n\n# Debug\n\nThis program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right."
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/5": {
    "long_instructions": "# Adding Animations\n\nThis program draws four sprites to the screen, and one of them has an animation from the Animation Tab!\n\n# Do This\n\n-   Run the code to see what happens.\n-   Look in the Animation Tab to see what animations are available to you. [(Show me where.)][0]\n    -   Feel free to alter your animations or choose a new one.\n-   Use the `setAnimation` command to change the look of your other sprites.",
    "callouts": {
      "anicallout": "Click this to open the Animation Tab"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/6": {
    "display_name": "Video: The Animation Tab",
    "long_instructions": "## Questions to Consider\n\n-   What are the steps to adding an image to a sprite?\n-   What are the different ways to get an image?",
    "teacher_markdown": "## Discussion Goals\n\nMake sure students understand that they will need to both create the image (or animation) in the Animation Tab and then add the animation to the sprite using the `setAnimation` block.  Students may be confused by the use of the word \"animation\" for single images, but in Game Lab, still images are considered \"animations\" with only one frame.\n\nStudents can use an animation already in the animation tab library, upload one from their computer, or create their own using the provided drawing tools.  Additionally, students can use the drawing tools to modify the images they have chosen from the library or uploaded.\n\n### Misconception Alert!\n\nMany students may now confuse the concepts of a sprite, its animation, and the image that it draws to the screen.  In the next few lessons, watch out for this misconception, and reinforce the idea that a sprite's animation is just one of its properties, the one that controls what image is drawn to the screen.  Remind students that a single sprite may have different animations throughout the course of the program, just as other properties can change, and that two or more sprites might share the same animation."
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/7": {
    "long_instructions": "# Debug some sprites\n\n<img src=\"https://images.code.org/9e62ba920102879979acb2a7f6c216d8-image-1566234200067.36.46 AM.png\" style=\"float: right; width: 150px;\">\n\nThis program draws three sprites to the screen, but it's not working yet.  The wrong sprite is in front, and one sprite's animation isn't showing up.\n\n# Do This\n\n-   Run the code to see what happens.\n-   Fix the two problems in the code.\n\n_Hint: Just like shapes, sprites are drawn in the order they are created._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/8": {
    "dsls": {
      "answers": [
        {
          "text": "https://images.code.org/131282b44fe34cd619a9a21bc68888da-image-1523902103487.58.48 AM.png,300px"
        },
        {
          "text": "https://images.code.org/2fbe4029dc47f6f048e7c9f90ac99cac-image-1523902103485.25.09 AM.png"
        },
        {
          "text": "https://images.code.org/c4cb49e00f7087765865da87cff37549-image-1523902103477.58.00 AM.png"
        },
        {
          "text": "https://images.code.org/7465035fc6701dcb91731fe9d160b638-image-1523902103481.58.28 AM.png"
        }
      ],
      "content1": "Match the code to the image that it will produce.",
      "questions": [
        {
          "text": "https://images.code.org/cd11d762b2cb3e36c3d45157b965c968-image-1523901253224.59.08 AM.png"
        },
        {
          "text": "https://images.code.org/653dff2d49f07341b2f2552747212b34-image-1523901253222.59.21 AM.png"
        },
        {
          "text": "https://images.code.org/db71e0cde6861faabc0b5a55d67c739e-image-1523901253227.58.12 AM.png"
        },
        {
          "text": "https://images.code.org/15d6014329fa3da9b73016af9f1d0d74-image-1523901253226.58.34 AM.png"
        }
      ],
      "title": "drawSprites"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/9": {
    "dsls": {
      "description": "Use your new sprite and animation skills to complete these levels.",
      "display_name": "Creating sprites and animations"
    },
    "sublevels": {
      "CSD U3 Sprites missing_2021": {
        "display_name": "Where Are the Sprites?",
        "bubble_choice_description": "The sprites are being created, but you need to change the code to make the sprites appear.",
        "long_instructions": "# Debug: Missing Sprites\r\n\r\nLooking at the code below, we can see that many sprites are created, and yet when we run the program, nothing shows up. Can you fix it?\r\n"
      },
      "CSD U3 Sprites names_2021": {
        "display_name": "Sprite Animations",
        "bubble_choice_description": "Fix the names of the animations so that the errors go away.",
        "long_instructions": "# Debug: Sprites Animation Error\r\n\r\nErrors are being hit whenever we try to run our program! It looks like something is wrong with our animations, can you try and fix it?\r\n\r\n"
      },
      "CSD U3 Sprites name sprite_2021": {
        "display_name": "Sprite Name",
        "bubble_choice_description": "Fix the sprite name so that all three cherries appear.",
        "long_instructions": "# Debug: Sprite Name\r\n\r\nThe program below is trying to draw the same sprite in three different positions, but only one of them is showing up. What's happening here and can you fix it?\r\n"
      },
      "CSD U3 Sprites order_2021": {
        "display_name": "Sprite Order",
        "bubble_choice_description": "Change the code so that we can see the ladybug and the snail.",
        "long_instructions": "<img src=\"https://images.code.org/737cffe346564b62b9714e9d2c878a99-image-1591294163233.png\" style=\"float:right;\"/>\r\n\r\n# Debug: Sprite Order\r\n\r\nSomething is wrong with the scene below. Some sprites are behind other sprites when they should be in front of them. Can you fix it?\r\n"
      },
      "CSD U3 Sprites fish_2021": {
        "display_name": "Fish Scene",
        "bubble_choice_description": "Get creative and make a fish scene.",
        "long_instructions": "# Create A Scene\r\n\r\nWe've started you off with three different fish sprites. Using anything else that you want like drawings or other sprites, customize the fish sprites to make a fun looking scene!\r\n\r\n"
      },
      "CSD U3 Sprites sprite draw_2021": {
        "display_name": "Combine Ideas",
        "bubble_choice_description": "Create your own scene using both drawing and sprites.",
        "long_instructions": "# Combine Ideas\r\n\r\nYou have now learned how to draw images as well as create sprites in GameLab now. So using both of these techniques, create a fun scene!"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/10": {
    "long_instructions": "# Create your own sprites\n\n<img src=\"https://images.code.org/d823ca4327740a53df3600a0d9bc55b8-image-1566234132679.59.40 AM.png\" style=\"float: right; width: 150px;\">\n\nUse what you've learned to create your own sprites.  The example is just one way to complete the level.  Decide for yourself what you want your sprites to look like.\n\n# Do This\n\n-   Go to the animation tab and add at least two animations to your project.\n-   In the code tab, create at least two sprites in two different places on the screen.\n-   Assign each sprite a different animation.\n-   Draw your sprites to the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/7/levels/11": {
    "dsls": {
      "description": "Try these extra challenges that will help you make your sprites even more special.",
      "display_name": "Challenges: Sprites and Animations"
    },
    "sublevels": {
      "CSD U3 Sprites anitab 2_2021": {
        "display_name": "Find an image online",
        "bubble_choice_description": "Upload an image from another website to complete a kite scene.",
        "long_instructions": "# Uploading Images\r\n\r\nYou can also use the Animation tab to upload! You are going to make a flying kite. You can search the web for an image.\r\n\r\n# Do This\r\n* Search online for an image of a kite. Small images with transparent backgrounds work best.\r\n* Download your kite image. \r\n* Open the animations tab.\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\"> to upload an image.\r\n* Select the file from your computer.\r\n* Rename your image so it is easy to remember. To rename it click the text below the image.\r\n* Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.\r\n\r\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level.",
        "teacher_markdown": "# Recommended Search Engines\r\n\r\nBecause we can't know which sites might be blocked in your district, we've avoided pointing students to a specific search engine. Not all search engines make it easy to set Creative Commons filters - some of the easiest include:\r\n\r\n* <a href=\"https://search.creativecommons.org/\" target=\"new\">Creative Commons Search</a>\r\n* <a href=\"https://www.google.com/advanced_image_search\" target=\"new\">Google Image Advanced Search</a>\r\n* <a href=\"https://commons.wikimedia.org/\" target=\"new\">Wikimedia Commons</a>\r\n* <a href=\"https://www.flickr.com/creativecommons/\" target=\"new\">Flickr Creative Commons</a>\r\n"
      },
      "CSD U3 Sprites draw animation_2021": {
        "display_name": "Draw Your Own Character",
        "bubble_choice_description": "Create a sprite animation from scratch.",
        "long_instructions": "# Drawing your own image\r\n\r\nYou can also use the Animation tab to draw your own image. You are going to make your own character by drawing it.\r\n\r\n# Do This\r\n* Open the animations tab.\r\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/78890d644bbc4baef876a9eb8b6ea436-image-1567790745754.PNG\" style=\"width:50px\"> to draw your own picture to use as a sprite.\r\n* Rename your picture so it is easy to remember. To rename it click the text below the picture.\r\n* Back in code mode, use `sprite.setAnimation()` to make your character sprite show your new animation.\r\n\r\nFor now, don't worry if your character picture is too big or small. You'll learn how to resize sprites in the next lesson.\r\n"
      },
      "CSD U3 Sprites combine_2021": {
        "display_name": "Combine Ideas",
        "long_instructions": "# Combine Ideas\r\n\r\nIt's time to combine all the different ways to create sprites and have fun!\r\n\r\n# Do This\r\nUsing the sprites we give you or by uploading images or drawing your own sprites, create a fun scene with different kinds of sprites! Be creative!\r\n\r\n",
        "teacher_markdown": "# Recommended Search Engines\r\n\r\nBecause we can't know which sites might be blocked in your district, we've avoided pointing students to a specific search engine. Not all search engines make it easy to set Creative Commons filters - some of the easiest include:\r\n\r\n* <a href=\"https://search.creativecommons.org/\" target=\"new\">Creative Commons Search</a>\r\n* <a href=\"https://www.google.com/advanced_image_search\" target=\"new\">Google Image Advanced Search</a>\r\n* <a href=\"https://commons.wikimedia.org/\" target=\"new\">Wikimedia Commons</a>\r\n* <a href=\"https://www.flickr.com/creativecommons/\" target=\"new\">Flickr Creative Commons</a>\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/1": {
    "display_name": "Sprite Properties: Predict",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "a bee sprite in the middle of the screen",
              "correct": false
            },
            {
              "text": "a bee sprite in the bottom right corner",
              "correct": true
            },
            {
              "text": "two bee sprites, one in the middle and one in the bottom right corner",
              "correct": false
            },
            {
              "text": "three bee sprites, all in different places",
              "correct": false
            },
            {
              "text": "nothing, there will be an error",
              "correct": false
            }
          ],
          "content1": "Look at the code below and predict where the bee sprite will appear.",
          "questions": [
            {
              "text": "What will the program show?"
            }
          ],
          "title": "Bee Sprite Positioning"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/2": {
    "long_instructions": "# Sprite Properties\n\nSprite properties keep track of all the information your program needs to know about a sprite, such as its size and location.  You can change the values of these properties just like you do variables, and see the results when your sprite is drawn to the screen.\n\n# Do this\n\n-   Run the program to see where the sprites appear.\n-   Change the x and y properties of the paint brush sprite to move it to the palette."
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/3": {
    "long_instructions": "# New Properties\n\nSprites have lots of properties.  Check out the two new blocks in this activity and try them out for yourself.  Notice that different sprites can use the same animation, and still look different because of properties.\n\n# Do this\n\n-   Run the program to see how the `rotation` and `scale` blocks make the first two notes look different.\n-   Use the `rotation` and `scale` blocks on the last two notes to make them look different, too."
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/4": {
    "dsls": {
      "description": "Try out the sprite properties you have learned here",
      "display_name": "Sprite Properties"
    },
    "sublevels": {
      "CSD Games bubble choice properties scale_2021": {
        "display_name": "Scale Property",
        "bubble_choice_description": "Use the scale property to make the animals the right size.",
        "long_instructions": "<img src=\"https://images.code.org/3a1a5a54a3065e2467e80e71b9ed8732-image-1582072742157.png\" width=200 style=\"float: right;\">\r\n\r\n# Scale Property\r\n\r\nThe `scale` property changes the size of the sprite. Scale of `1` is the normal size, scale of `2` is twice as big, and a scale of `0.5` is half as big.\r\n\r\n# Do this\r\n\r\n* Use the `scale` property to make it look like the picture.\r\n* Make sure that each animal is as big as it should be.\r\n* Make sure the fish fits in the pond.\r\n"
      },
      "CSD Games bubble choice properties rotation_2021": {
        "display_name": "Rotation Property",
        "bubble_choice_description": "Rotate the cars so they fit in the traffic lanes.",
        "long_instructions": "<img src=\"https://images.code.org/4cf2c2d2c61c5e4be4e1a0d47b131afe-image-1592417144547.png\" style=\"float: right;\" width=200/>\r\n\r\n# Rotation\r\n\r\nThe `.rotation` sprite property rotates an image by between 0 and 360 degrees. The image is rotated clockwise. For example, `mySprite.rotation = 90` will turn it one quarter rotation to its right.\r\n\r\n# Do This\r\n- Add `.rotation` blocks to the code to make all of the cars look like they are traveling correctly down the roads."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/5": {
    "long_instructions": "# Make it Fit!\n\n<img src=\"https://images.code.org/3cc33de83a1dee34a3ce07f4d6c24c45-image-1566239215417.25.23 AM.png\" style=\"float: right; width: 150px;\">\n\nThe food is way too big to fit on the plate.  Use your knowledge of sprite properties to make it fit.\n\n# Do this\n\n-   Run the program to see how big the food is.\n-   Use sprite properties to scale all of the food sprites down so they fit on the plate."
  },
  "https://studio.code.org/s/csd3-2021/lessons/8/levels/6": {
    "dsls": {
      "description": "Try these new challenges with sprite properties",
      "display_name": "Challenges: Sprite Properties"
    },
    "sublevels": {
      "CSD U3 properties tint_2021": {
        "display_name": "New Block : Tint",
        "bubble_choice_description": "Adjust the sprite's color with tint.",
        "long_instructions": "# Tint\r\n\r\nTint is a property that will overlay a color on top of a sprite to tint it. This tint doesn't change the existing colors of a sprite, but is more like putting a pane of colored glass over the top of the sprite.\r\n\r\n## Do This:\r\n\r\nUsing either the sprite already created for you or with any other sprites of your choosing, play around with the tint property and see how it works and how it changes on different colored sprites!\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      },
      "CSD U3 properties depth_2021": {
        "display_name": "New Blocks : Height & Width",
        "bubble_choice_description": "Stretch your sprite horizontally or vertically.",
        "long_instructions": "# Height and Width\r\n\r\nYou learned about the scale property, which grows or shrinks a sprite while keeping their height to width ratio the same. But it is possible to only change the height or width of a sprite with other properties!\r\n\r\n## Do This:\r\n\r\nUsing either the sprite already created for you or with any other sprites of your choosing, play around with the height and width properties and think about when you would want to use these properties versus using the scale property. \r\n\r\n",
        "callouts": {
          "CSD_U3_rect_c1": "Here is the code",
          "CSD_U3_rect_c2": "Drag this block into the code area."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/1": {
    "long_instructions": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Change the number that is stored into the variable ([Show me where][0]) and run the code again.",
    "callouts": {
      "CSD_U3_variables": "Change the number here"
    },
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nRead the code below and make a prediction.\n\n-   What will show on the screen?\n-   Where will it be displayed?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/2": {
    "long_instructions": "# Text\n\nYou can put text anywhere you'd like on the screen using `text`.  **Read the documentation by clicking on the block in the toolbox** to see how to change the size and color of your text.\n\n# Do This\n\n-   Change the displayed text in the provided code.\n-   Add a second `text` block to write in a different part of the screen.",
    "callouts": {
      "": "Use this block to put text on the screen"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/3": {
    "long_instructions": "# Text Size\n\nYou can change the size of the text using the `textSize()` block.\n\n# Do This\n\n-   Read the code to see how it works.\n-   Add a new `textSize` block to make the word \"large\" the biggest.",
    "callouts": {
      "": "Use this block to put text on the screen"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/4": {
    "dsls": {
      "description": "Try out your text skills on these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Sprites text debug_2021": {
        "display_name": "Debug: Snake",
        "bubble_choice_description": "Change the order so that the text appears above the bars, but the snake is behind it.",
        "long_instructions": "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\r\n\r\n# Debug\r\n\r\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?\r\n\r\n\r\n_Hint: You often want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._"
      },
      "CSD games text debug quotes_2021": {
        "display_name": "Debug: Flying Riddle",
        "bubble_choice_description": "Fix the bug so that the text appears.",
        "long_instructions": "<img src=\"https://images.code.org/36c5e245e7f6255473b5d967f9dbbc5f-image-1589573721436.png\" style=\"float:right; width:200px;\">\r\n\r\n# Debug Text\r\n\r\nThis scene is supposed to draw a cartoon, but it has a bug.\r\n\r\nWhat I expected to happen | What happened instead\r\n----------|----------\r\nThe image shows on the screen. | The code doesn't run at all, \r\n  |  | and there is an error message.\r\n\r\n# Do this\r\n\r\n* Run the code, and see the error message.\r\n* Look for clues as to where the bug is in the code.\r\n* Once you have found the bug, fix it.\r\n* What clues helped you to find the problem?\r\n\r\n![]()\r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/5": {
    "long_instructions": "# Add Text\n\nHere is a scene, but it needs text.\n\n# Do this\n\n-   Add two pieces of text to the following scene.  \n-   Make the two pieces of text different sizes."
  },
  "https://studio.code.org/s/csd3-2021/lessons/9/levels/6": {
    "dsls": {
      "description": "Try out these new blocks and challenges.",
      "display_name": "Text Challenges"
    },
    "sublevels": {
      "CSD web text stroke_2021": {
        "display_name": "Text Color",
        "bubble_choice_description": "Learn how to change the color of your text.",
        "long_instructions": "# Text Color\r\n\r\nYou can change the color of your text using the `fill` block.\r\n\r\n# Do This\r\n* Read the code to see how it works.\r\n* Add a new block to make the word \"sky\" a different color.\r\n* Add more text with even more colors.\r\n"
      },
      "CSD web challenge stroke_2021": {
        "display_name": "White Text on White Background",
        "bubble_choice_description": "Learn how to make text stand out with a colorful stroke.",
        "long_instructions": "# White Text on White Background\r\n\r\nYou can add a border to your text using the `stroke()` command, shown below. Like other shapes, you can also use the `strokeWeight()` command to change the thickness of the stroke. By running the code below, you'll notice that the normal stroke weight for text doesn't give it much contrast when the background is the same color.\r\n\r\n# Do This\r\n\r\n* Read the code to see how it works.\r\n* Add a `strokeWeight()` command to make the text stand out more.\r\n"
      },
      "CSD web challenge wrap text_2021": {
        "display_name": "Wrap Text",
        "bubble_choice_description": "Learn how to make big text fit inside a text box.",
        "long_instructions": "# Wrapping Text\r\n\r\nYou already know that the first two parameters to the `text()` block indicate the *upper-left* corner of the text area. There are also two more optional parameters that are hidden by default. These last two parameters indicate the *width* and *height* of the text area. If all 5 parameters are used, Game Lab will try to fit the text inside the rectangle defined by this rectangle.\r\n\r\n<img src=\"https://images.code.org/063fbcb347e5c935cd7d0aede7e2ac11-image-1607015001837.png\" width=\"400\">\r\n\r\n\r\n# Do This\r\n\r\n* Read the code to see how it works.\r\n* In Block Mode, use the arrow buttons on the `text()` block to add the optional parameters.\r\n* Enter values into the optional parameters that will make the text fit on the screen. \r\n  * **Hint:** Use values for *width* and *height* that are near the bottom right corner of the screen.\r\n\r\n"
      },
      "CSD games text freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/10/levels/1": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Sprite Scenes\n\nIt's time to put everything together and make a fun scene.  Take a look at this example and think about what you'd like to make.\n\n# Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene.\n\n**Is there anything else that you still need to learn how to do?**\n\n**Are there any skills that you'd like to review?**"
  },
  "https://studio.code.org/s/csd3-2021/lessons/10/levels/2": {
    "long_instructions": "# Create Your Scene - Background\n\nFirst, make the background of your scene, either with shape commands or sprites.\n\n# Do This\n\n-   Use a `background()` command to fill the screen with a color.\n-   Add any necessary shape commands or sprites to draw the background of your scene."
  },
  "https://studio.code.org/s/csd3-2021/lessons/10/levels/3": {
    "long_instructions": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n\n# Do This\n\n-   Add or create all of your sprite animations in the Animation Tab.\n-   Create each sprite and assign it an animation.\n-   Set the value for any sprite properties you'd like to use.\n-   Draw all of your sprites to the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/10/levels/4": {
    "long_instructions": "# Create Your Scene - Text\n\nThe final piece of your scene is to add text.\n\n# Do This\n\n-   Add a text to your project.\n-   Use any other commands to change the appearance of your text."
  },
  "https://studio.code.org/s/csd3-2021/lessons/10/levels/5": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Review Your Scene\n\nCheck over your scene one last time to make sure you have included everything that you want.\n\n# Do this\n\n-   Compare the scene that you drew to your plan.\n-   Make any last changes.\n-   What are you most proud of?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/1": {
    "display_name": "Video: Introduction to the Draw Loop",
    "long_instructions": "## Question to Consider\n\n-   What does the draw function do?",
    "teacher_markdown": "## Discussion Goal\n\nThe draw function runs the same code over and over in a loop, which is why it's often called \"the draw loop\".   This creates an animation effect by changing what is a drawn by a small amount each time the draw function runs. This can be compared to a physical flip book, which can animate an image by changing it slightly on each page.\n\n### Misconception Alert!\n\nWhen the draw loop runs, it does not \"clear\" out previous drawing, so it will continue to show anything that has not been covered up by the new draw loop.  If students do not add a \"background\" at the beginning of the draw loop, they will still see all the images drawn to the screen previously."
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/2": {
    "long_instructions": "# Draw Loop\n\nHere's an example of the draw loop at work.\n\n# Do this\n\n-   Run the code and see how it works.\n-   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/09e7f584150124833884d434ea620531-image-1589575201865.2020-05-15 16_39_52.gif\" style=\"float:right;width:150px\">\n\n# Using the Draw Loop\n\nNow it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.\n\n# Do This\n\n-   Add code to this program so that your drawing has orange circles being drawn, too.\n-   Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/4": {
    "teacher_markdown": "Notice that the blue background is never visible because it is immediately drawn over by the red background. Also there's only ever one yellow dot visible since as the draw loop runs over and over it is placing down new backgrounds.",
    "contained levels": [
      {
        "long_instructions": "# Predict\n\nThis program has one small difference that will make it run a little differently. Again though, remember:\n\n-   All your code outside the draw loop is run first, one time\n-   All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/5": {
    "long_instructions": "# Sprites in the Draw Loop\n\nBy changing sprite properties in the draw loop, you can animate your characters.\n\n# Do This\n\n-   Run the code to see how it works.\n-   Discuss with your partner why some code is inside the draw loop and some code is outside.\n-   Try changing the numbers in the random number block and running the program again."
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis animation already is updating one sprite's x property to make it look like it's shaking.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Edit the code in this program to make the second sprite shake like the first one.\n-   Move on when your program looks like the picture to the right."
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/7": {
    "dsls": {
      "description": "Try out using the draw loop with these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Draw Loop Plugged wiggle sprite rotation_2021": {
        "display_name": "Updating Rotation",
        "bubble_choice_description": "Make both aliens dance in space using their rotation properties.",
        "long_instructions": "<img src=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\" style=\"float:right;height:150px\">\r\n\r\n# Updating Properties\r\n\r\nThis level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.\r\n\r\n# Do This\r\n\r\nThis animation already is updating one sprite's rotation property to make it look like it's shaking\r\n\r\n* Run the program to see how it works.\r\n* Add code to this program to make the other alien shake just like the first.\r\n* Move on when your program looks like the picture to the right."
      },
      "CSD games draw debug blurry_2021": {
        "display_name": "Debug: Blurry Sprite",
        "bubble_choice_description": "Debug a blurry sprite animation.",
        "long_instructions": "<img src=\"https://images.code.org/c9ea20861045987d177e964f7eeb07ad-image-1585823491836.gif\" style=\"float:right;\">\r\n\r\n# Debug: Blurry Sprite\r\n\r\nWhat I expected it to do |  What it is doing instead\r\n ------- | ----------\r\n shake around  |  blurry shaking\r\n\r\n# Do This\r\n\r\n* Run the program to see the bug.\r\n* Use the clues to try to find the bug.\r\n* Once you've found it, fix the program so it shakes like the image on the right.\r\n"
      },
      "CSD games draw debug afterimage_2021": {
        "display_name": "Debug: Repeated Animation",
        "bubble_choice_description": "Some animations have multiple frames, but this one isn't working correctly.",
        "long_instructions": "# Debug: Repeated Animations\r\n\r\nThis \"bubbly\" sprite should have multiple frames of animation that repeat, but it seems to stop almost immediately.\r\n\r\nWhat I expected it to do |  What it is doing instead\r\n ------- | ----------\r\nSprite animates smoothly  | Sprite has after-image and stops animating\r\n\r\n# Do This\r\n\r\n* Run the program to see the bug.\r\n* Use the clues to try to find the bug.\r\n\r\n<details>\r\n  <summary>How To Debug multi-frame animations</summary>\r\n  <p>Some levels in Game Lab will let you use multi-frame animations with your sprites, which makes them seem like they are moving. Whenever you use these animations, make sure to add a <code>background</code> block at the start of your draw loop - otherwise, the it will look like the sprite isn't moving since all of the frames will draw on top of each other.</p>\r\n</details>"
      },
      "CSD games draw debug not moving_2021": {
        "display_name": "Debug: Sprite Not Moving",
        "bubble_choice_description": "Debug why the sprite is not moving even though we update its position in the draw loop.",
        "long_instructions": "# Debug: Sprite Not Moving\r\n\r\nDebug why the sprite is not moving even though we update its position in the draw loop\r\n\r\nWhat I expected it to do |  What it is doing instead\r\n ------- | ----------\r\n shake around  |  not moving at all\r\n\r\n# Do This\r\n\r\n* Run the program to see the bug\r\n* Use the clues to try to find the bug\r\n\r\n::: details [Hint if you get stuck]\r\nWhere is `drawSprites()` placed in the code?\r\n:::\r\n\r\n::: details [Another hint]\r\nIs the screen being cleared at the beginning of the draw loop? How do we normally clear the screen?\r\n:::"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/8": {
    "long_instructions": "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\" style=\"float:right;height:150px\">\n\n# Updating Properties\n\nThis level is very similar to the last, but this time, you'll add in the draw loop yourself.\n\n# Do This\n\n-   Add the draw loop block to the bottom of this program.\n-   Move any blocks that need to be inside the draw loop.\n-   Move on when your program looks like the picture to the right.",
    "callouts": {
      "": ""
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/11/levels/9": {
    "dsls": {
      "description": "Try out these draw loop challenges.",
      "display_name": "Draw Loop Challenges"
    },
    "sublevels": {
      "CSD U3 Draw Loop Plugged update your scene_2021": {
        "display_name": "Challenge: Extend Your Scene",
        "bubble_choice_description": "Use the draw loop to make your sprite from last lesson move.",
        "long_instructions": "# Extend Your Scene\r\n\r\nThis is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.\r\n\r\n<img src=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png\" style=\"float:right;height:100px\">\r\n\r\n# Do This\r\n\r\n* Add a draw loop to your program (you should only have one).\r\n* Use the lasso selector (click, hold and drag) to select the code that will be updated each time and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.\r\n* Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.\r\n"
      },
      "CSD U3 L7 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/1": {
    "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?",
    "contained levels": [
      {
        "long_instructions": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n[][0]\n\nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n-   **Read the program** and make a prediction of what the output will be.\n-   **Run the program** to check your prediction.\n-   **Discuss with a neighbor**. Can you explain what you observed?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/2": {
    "display_name": "Video: Sprite Movement",
    "long_instructions": "## Questions to Consider\n\n-   What is the counter pattern?\n-   How does the counter pattern move sprites across the screen?",
    "teacher_markdown": "## Discussion Goals\n\nStudents may describe the counter patten in various ways.  Make sure that they go beyond just stating the blocks or code that the counter pattern uses.  They should understand that the counter pattern allows the programmer to update the value of a variable in a pattern that counts up (or down) on every iteration of the draw loop.  This can be used for many different things, such as spinning, growing, shrinking, or timers, but it's most often used to move sprites across the screen.\n\nWhen a sprite's x or y property is updated in a counter pattern, its position changes in a consistent way over time, causing it to move across the screen.  Students should be able to explain that movement in an animation is just a change in position, and that changing a sprite's x position will cause it to move horizontally, and changing a sprite's y position will cause it to move vertically."
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/cdf7115bbd6e9c91838cc6c8a78d6607-image-1588350244303.gif\" style=\"float: right; margin-left: 20px\">\n\n# Sprite Movement\n\nUsing the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.\n\n# Do This\n\n-   Read the code that makes the jet go up the screen.\n-   Add code that makes the plane move to the right, as in the sample image."
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\" style=\"float: right; margin-left: 20px\">\n\n# Moving to the Left\n\nIf adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?\n\n# Do This\n\nMake your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.\n\n_Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/72b0e98c58a18f70774c1c565510ebdd-image-1589817494729.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Diagonal Movement\n\n<img src=\"https://images.code.org/d0db80b8f5d486c85c0f1c259f2f5b32-image-1588350637669.29.55 AM.png\" style=\"float: right; margin-left: 20px; width: 150;\">\n\nUpdating both the `x` or `y` properties of a sprite can make it move diagonally.  You can use the watchers under the code area to see how each property is changing.\n\n# Do This\n\n-   Read the code that makes the mouse go down.\n-   Run the program and look at the watchers to see what is happening to the `mouse.x` and `mouse.y` properties.\n-   Add one more line of code that makes the mouse move diagonally.\n-   Run your code again and look at the watchers.\n\n**Challenge:** Set the sprite's `rotation` property so that it faces the direction it is moving."
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/6": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Read this program and predict which of the following animations will be produced."
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/7": {
    "dsls": {
      "description": "Try out using the draw loop with these activities.",
      "display_name": "Practice"
    },
    "sublevels": {
      "CSD U3 Watcher Predict_2021": {
        "display_name": "Spinning",
        "bubble_choice_description": "Make sprites spin with the counter pattern.",
        "long_instructions": "<img src=\"https://images.code.org/c99222106238ae67ca38801ba986f61a-image-1588351042690.gif\" style=\"float: right; margin-left: 20px;\">\r\n\r\n# Rotation and Spinning\r\n\r\nUsing the counter pattern on a sprite's rotation property can make it spin around.\r\n\r\n# Do This\r\n\r\n* Use the counter pattern with the pan sprite's rotation property to make it spin as in the image on the right.\r\n"
      },
      "CSD U3 Watcher Debug_2021": {
        "display_name": "Debug: Watching the Counter Pattern",
        "bubble_choice_description": "Fix the direction the motorcycle is going by looking at the watchers.",
        "long_instructions": "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\" style=\"float: right; margin-left: 20px;\">\r\n\r\n# Debug: Watching the Counter Pattern\r\n\r\nThis program should move the motorcycle from the bottom left to the top right, as in the image to the right. However, the motorcycle moves off screen too quickly to see what's going wrong.\r\n\r\n# Do This\r\n\r\n* Look at the watcher for `cycle.x`.\r\n* Add a watcher for `cycle.y`.\r\n* Run the program to see what happens to the properties and why the motorcycle disappears.\r\n* Debug the code so the program runs like the image to the right.\r\n"
      },
      "CSD U3 Movement Gears_2021": {
        "display_name": "Rotation Direction",
        "bubble_choice_description": "Make the gears rotate together.",
        "long_instructions": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:200px; float:right; margin-left: 20px;\">\r\n\r\n# Rotation Direction\r\n\r\nWhen you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\r\n\r\n# Do This\r\n\r\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.\r\n\r\n* Make the gears rotate so they look like they are working as one system.\r\n* **Hint: They won't all rotate the same direction**."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/8": {
    "display_name": "Fish Animation",
    "bubble_choice_description": "Make the fish move at different speeds using the counter pattern.",
    "long_instructions": "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Fish Animation\n\nUsing the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest."
  },
  "https://studio.code.org/s/csd3-2021/lessons/12/levels/9": {
    "dsls": {
      "description": "Add more to your fish scene or create something new.",
      "display_name": "Sprite Movement Challenges"
    },
    "sublevels": {
      "CSD U3 Movement Fish challenge_2021": {
        "display_name": "More Fish!",
        "bubble_choice_description": "Make the fish wiggle as they move.",
        "long_instructions": "# More fish!\r\n\r\nBefore you learned the counter pattern, you learned to set sprite properties, such as rotation, to random values to animate them. By setting the rotation of the fish to a random number, you can make them appear to wiggle slightly. This will make their movement animation more lifelike!\r\n\r\n## Do this:\r\n* For each fish, randomly set its rotation inside the draw loop.\r\n  * To make it look as realistic as possible, choose a small range of negative and positive values."
      },
      "CSD U3 Movement Fish challenge2_2021": {
        "display_name": "Bubbles",
        "bubble_choice_description": "Use ellipses to make bubbles rise to the surface.",
        "long_instructions": "# Bubbles\r\n\r\nYou can also use the counter pattern to animate shapes, such as rectangles & ellipses. Since this is an underwater scene, let's try to create a bubble that floats to the top of the screen using an ellipse shape. If we use the counter pattern to update the `y` value of the ellipse, we can make it seem like it's floating to the top of the screen!\r\n\r\n## Do this:\r\n* Create at least one new variable to keep track of the changing *y position* of the bubbles.\r\n* Set the value to 400, or another number near the bottom of the grid.\r\n* Use `noFill()`, `stroke()`, `strokeWeight()`, and `ellipse()` to draw at least one bubble.\r\n* Use the variable you created to specify the *y position* of the ellipse.\r\n* Use the counter pattern with subtraction and your variable to make the ellipse slowly rise.\r\n\r\n<details><summary>What code goes above the draw loop?</summary>\r\n\r\nJust the variable you create. \r\n\r\nFor example: `var bubble = 400;`\r\n</details>\r\n\r\n<details><summary>What code goes inside the draw loop?</summary>\r\n\r\nThe blocks used to draw the bubble and the counter pattern.\r\n\r\nFor example: \r\n```\r\nellipse(200, bubble, 25, 25);\r\nbubble = bubble - 2;\r\n```\r\n\r\n</details>"
      },
      "CSD U3 L9 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/1": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Animated Scenes\n\nIt's time to try out an animated scene.  Take a look at this example and think about what you'd like to make.\n\n# Animated Example\n\n1.  **What movements do you see in this scene?**\n2.  **Which movements use random numbers?**\n3.  **Which movements use the counter pattern?**"
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/2": {
    "display_name": "Sprite Scenes",
    "long_instructions": "# Plan Your Scene\n\nBefore moving on, take a second to plan out a scene that you'd like to make.\n\n## Sketch It Out\n\nConsider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. \n\n## Plan the Movemement\n\n1.  What movements do you want in your scene?\n2.  Which will use random numbers?\n3.  Which will use the counterpattern?\n4.  Will you need variables to store information about where something is?\n\n## Learning More\n\n1.  Is there anything else that you still need to learn how to do?\n2.  Are there any skills that you'd like to review?\n3.  Where can you find the information you need?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/3": {
    "long_instructions": "# Create Your Scene - Background\n\nFirst, make the background of your scene, either with shape commands or sprites.\n\n# Do This\n\n-   Use a `background()` command to fill the screen with a color.\n-   Add any necessary shape commands or sprites to draw the background of your scene."
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/4": {
    "long_instructions": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n\n# Do This\n\n-   Add or create all of your sprite animations in the Animation Tab.\n-   Create each sprite and assign it an animation.\n-   Set the value for any sprite properties you'd like to use.\n-   Draw all of your sprites to the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/5": {
    "long_instructions": "# Create Your Scene - Text\n\nThe next piece of your scene is to add text.\n\n# Do This\n\n-   Add a text to your project.\n-   Use any other commands to change the appearance of your text."
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/6": {
    "long_instructions": "# Create Your Scene - Movement\n\nThe final piece of your scene is to animate your scene by adding movement.\n\n# Do This\n\n-   Add movement to your sprites, text, or drawn shapes.\n-   Include one type of **random** movement.\n-   Include one type of **counter pattern** movement."
  },
  "https://studio.code.org/s/csd3-2021/lessons/13/levels/7": {
    "display_name": "Challenge: Extend Your Scene",
    "long_instructions": "# Review Your Scene\n\nCheck over your animated scene one last time to make sure you have included everything that you want.\n\n# Do this\n\n-   Compare the animated scene that you drew to your plan.\n-   Make any last changes.\n-   What are you most proud of?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/1": {
    "short_instructions": "What do you think this code will do when it is run? Predict what each console.log() command will print, then run the program to check your predictions.",
    "callouts": {
      "": "This program will print out a result here"
    },
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "true  \nfalse  \ntrue",
              "correct": true
            },
            {
              "text": "0  \n200  \n100",
              "correct": false
            },
            {
              "text": "true  \nerror  \ntrue",
              "correct": false
            },
            {
              "text": "false  \ntrue  \nfalse",
              "correct": false
            }
          ],
          "markdown": "# Boolean Expressions\n\n**Boolean expression** - an expression that can only evaluate to `TRUE` or `FALSE`\n\n# Predict\n\nRead the code below. There are some new symbols in it which you haven't been introduced to. Take a guess at what they mean and try to answer the following question\n",
          "questions": [
            {
              "text": "Which result will be printed in the console by this program?"
            }
          ],
          "title": "title"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/2": {
    "display_name": "Video: Booleans",
    "long_instructions": "## Questions to Consider\n\n-   What is a Boolean expression?\n-   What’s an expression that would evaluate to true?\n-   What’s an expression that would evaluate to false?",
    "teacher_markdown": "## Discussion Goals\n\n**Key Vocabulary:**\n\n-   **Boolean Expression** - in programming, an expression that evaluates to True or False.\n\nStudents should be able to explain that a Boolean expression is something that is either true or false, similar to a yes or no question.  The more formal way to say this is that Boolean expressions _evaluate_ to either true or false.  That means that when the computer processes a Boolean expression, it checks to see whether the expression describes a situation that is true or false, and then uses the value of either true or false wherever the expression is found.\n\nSome examples of Boolean expressions that evaluate to true are `3 > 1` and `4 <= 7`, but press students to think of expressions that might be better represented by variables, such as `studentAge < 70` or `sizeOfClass > 2`.\n\nSome examples of Boolean expressions that evaluate to false are `4 == 7`, `schoolName == \"Hogwarts\"`, and `currentYear < 1000`. "
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/3": {
    "dsls": {
      "answers": [
        {
          "text": "dog.rotation &lt; cat.rotation"
        },
        {
          "text": "dog.x &lt; cat.x"
        },
        {
          "text": "dog.scale &gt; cat.scale"
        },
        {
          "text": "dog.x &gt; cat.x"
        },
        {
          "text": "dog.x == cat.x"
        }
      ],
      "content1": "Match the boolean expression to the English description.",
      "questions": [
        {
          "text": "Is the dog sprite's rotation less than the cat sprite's rotation?"
        },
        {
          "text": "Is the dog sprite's x less than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's scale greater than the cat sprite's scale?"
        },
        {
          "text": "Is the dog sprite's x greater than the cat sprite's x?"
        },
        {
          "text": "Is the dog sprite's x equal to the cat sprite's x?"
        }
      ],
      "title": "Matching: Comparison Operators"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/4": {
    "long_instructions": "# Booleans\n\nThe program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.\n\n# Do This\n\n-   Add a `console.log` statement inside the draw loop. ( [Show me where][0] )\n-   Add an Boolean expression inside the `console.log` that asks \"Is the x position of the race car less than the x position of the finish line?\"\n-   Look at the output of the program as the car moves. When does the output change? Why?",
    "callouts": {
      "CSD_U3_L8_S6_C1": "Put the console log statement here"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/5": {
    "contained levels": [
      {
        "long_instructions": "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03 PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nBoolean expressions allow us to ask questions, but in order to use those questions to change the program's behavior, we need an `if` statement.\n\n# Do This\n\n-   Read the code for this race car program.\n-   What will the program do when the car reaches the finish line?\n-   Why is the `if` block inside the draw loop?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/6": {
    "display_name": "Video: Conditional Statements",
    "long_instructions": "## Question to Consider\n\n-   When would you want to use an if statement?",
    "teacher_markdown": "## Discussion Goals\n\nThe broad point of this question is that programmers use if statements when they want the program to run differently in response to different situations.  Encourage students to think of particular situations in which this would be the case.  For example, they might want their characters to move faster when a \"bonus\" is in effect, or maybe they want more enemies to appear when the player reaches a certain level.  Maybe they want the program to react in some way if a user presses a key or clicks the mouse, or they want a character to change animations if it touches a particular item."
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/7": {
    "long_instructions": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\"."
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/8": {
    "dsls": {
      "description": "Practice using booleans and conditionals with these activities.",
      "display_name": "Conditionals Practice"
    },
    "sublevels": {
      "CSD U3 Boolean Modify_2021": {
        "display_name": "Boolean Expressions",
        "bubble_choice_description": "Change the sprite properties so that all of the boolean expressions evaluate to true.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "# Boolean Expressions\r\n\r\nThe simplest Boolean expressions are questions that the computer can answer with true or false. \r\nAnother way to say this is that Boolean expressions **evaluate** to `true` or `false`.\r\n\r\n# Do This\r\nCan you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?\r\n\r\n- Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.\r\n- For each of the Boolean expressions, identify the sprite properties being compared.\r\n- Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.\r\n"
      },
      "CSD games conditionals bowl_2021": {
        "display_name": "Dropped Soup",
        "bubble_choice_description": "Empty the soup bowl when it turns upside down.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "<img src=\"https://images.code.org/6a5d714029e7b5357c6f1b14a153b699-image-1585829442849.gif\" style=\"float: right\">\r\n\r\n# Dropped Soup\r\n\r\nThe soup should spill out of the bowl when it turns upside down.\r\n\r\n# Do This\r\n\r\n* Run the program to see how it works.\r\n* Add a conditional that detects when the bowl is upside down and sets the sprite's animation to be an empty bowl. \r\n"
      },
      "CSD games conditionals practice spaceship_2021": {
        "display_name": "Alien Celebration",
        "bubble_choice_description": "Make the alien dance when the spaceship takes off.",
        "short_instructions": "Modify the code so that all of the console.log commands print true",
        "long_instructions": "# Alien Celebration\r\n\r\nMake the alien dance when the spaceship reaches the top of the screen.\r\n\r\n# Do This\r\n\r\n* Run the program to see how it works.\r\n* Add a conditional that detects when the spaceship is in the sky and sets the sprite's animation to `alien_dance`. \r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/9": {
    "long_instructions": "# Magic Dinosaur\n\nMake the dinosaur turn into a pterodactyl when it reaches the sky.\n\n# Do This\n\n-   Run the code to see how it works.\n-   Add a conditional that will change the dinosaur's animation to a pterodactyl when it reaches the sky."
  },
  "https://studio.code.org/s/csd3-2021/lessons/14/levels/10": {
    "dsls": {
      "description": "Try out these challenges with conditionals.",
      "display_name": "Conditionals Challenges"
    },
    "sublevels": {
      "CSD U3 - conditionals - first conditional 2_2021": {
        "display_name": "New Block: Visible",
        "bubble_choice_description": "Learn how to make a sprite appear and disappear using the visible property",
        "long_instructions": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\r\n\r\n# Visible\r\n\r\nSometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.\r\n\r\n# Do This\r\nMake the balloon pop when it hits the edge of the game area!\r\n\r\n* Add a conditional that checks to see whether the balloon has hit the edge.\r\n\t* Use a watcher on `balloon.scale` to help you out.\r\n* Create a pop sprite which uses the \"pop\" visual in the animation tab.\r\n* Use the `visible` property to keep the \"pop\" sprite hidden at the beginning.\r\n* Inside the `if` add two statements.\r\n\t* One that sets the `visible` property to hide the balloon sprite.\r\n    * One that sets the `visible` property to show the pop sprite.\r\n"
      },
      "CSD U3 L11 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/1": {
    "short_instructions": "Modify the code so that all of the console.log commands print true",
    "contained levels": [
      {
        "long_instructions": "# Prediction - keyDown()\n\nSee if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n\n-   Read the program carefully.\n-   **Make a prediction about what will happen when you press the space bar** and write it in the box below. Be specific!\n-   Run the program.\n-   While the program is running, press the space bar on your keyboard.\n-   Were you correct? Were you surprised? Discuss with a classmate."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/2": {
    "long_instructions": "# Changing Sprites\n\nThis program uses the `keyDown` block to detect whether a specific keys are being pressed down.\n\n# Do This\n\n-   Run the code and try pressing the \"p\" and \"h\" keys.\n-   Look inside the `if` statement to see how the code works.\n-   Add a block inside the third `if` statement to change the animation to a different animal.",
    "callouts": {
      "": "Add your block inside this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/3": {
    "long_instructions": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\n-   Add an `if` statement inside your draw loop.\n-   Check whether the right arrow key has been pressed down.\n-   Add code inside the conditional to move the sprite right if the right arrow is down.\n\n_Do you need to change sprite's x or y property to move it right?_",
    "callouts": {
      "": "Add an if statement and place your movement code inside it"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/4": {
    "long_instructions": "# Gears with Conditionals\n\nLet's make the gears spin only when the space key is being held down.\n\n# Do This\n\n-   Add code that checks whether the space key is being pressed down.\n-   Move the code that makes the gears rotate so that they only rotate when the key is pressed down."
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/5": {
    "dsls": {
      "description": "Practice keyboard input with these activities.",
      "display_name": "Keyboard Input Practice"
    },
    "sublevels": {
      "CSD U3 Input Fish_2021": {
        "display_name": "Fish With Arrows",
        "bubble_choice_description": "Make the fish move left only when the left arrow key is pressed.",
        "long_instructions": "# Fish With Arrows\r\n\r\nThe fish are back. Can you make the fish move left only when the left arrow key is pressed down?\r\n\r\n# Do This\r\n\r\n* Add an if statement to check when the left arrow key is pressed down.\r\n* Move the commands for moving the fish inside the if statement.\r\n"
      },
      "CSD games input debug1_2021": {
        "display_name": "Debug Turtle Movement",
        "bubble_choice_description": "Find the bug that breaks the program when the turtle tries to move left.",
        "long_instructions": "# Debug Turtle Movement\r\n\r\nThis turtle program breaks every time it tries to move to the left.\r\n\r\nWhat I expected to happen | What actually happened | How to reproduce the error\r\n------- | ------- | -----\r\nThe turtle moves to the left | everything stops working  | press the left arrow key\r\n\r\n\r\n# Do This\r\n\r\n* Run the program and play with it until you see the bug.\r\n* Use the clues to find the bug and fix it.\r\n"
      },
      "CSD games input debug2_2021": {
        "display_name": "Debug Turtle Movement 2",
        "bubble_choice_description": "Debug why the turtle does not move at all and leaves after images.",
        "long_instructions": "# Debug Turtle Movement 2\r\n\r\nDebug why the turtle does not move at all.\r\n\r\nWhat I expected to happen | What actually happened | How to reproduce the error\r\n------- | ------- | -----\r\n|The turtle moves with the arrow keys | The turtle almost stays in  | Press the arrow keys|\r\n| |the same place and leaves after images | |\r\n\r\n\r\n# Do This\r\n\r\n* Run the program and play with it until you see the bug.\r\n* Use the clues to find the bug and fix it."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/6": {
    "long_instructions": "# Move in All Directions\n\nYou can make a simple game that moves a sprite around the screen.\n\n# Do This\n\n-   Add four separate conditional statements that make the wing bot move in every direction."
  },
  "https://studio.code.org/s/csd3-2021/lessons/15/levels/7": {
    "dsls": {
      "description": "Try out these new blocks and challenges with keyboard input.",
      "display_name": "Keyboard Input Challenges"
    },
    "sublevels": {
      "CSD U3 - complex - key up and down_2021": {
        "display_name": "keyWentDown: Click Counter",
        "bubble_choice_description": "Count how many times someone has clicked the space bar, and learn a new block.",
        "long_instructions": "# Responding to a Single Click\r\n\r\nThis game counts how many times someone pressed the space bar, but it keeps giving points when the space bar is still pressed, even if it's not a new press.\r\n\r\nThe block `keyWentDown` will only give a point for new presses, so it's a better choice for this program.\r\n\r\n# Do This\r\n\r\n* Run the program to see how it works.\r\n* Change the code to use the `keyWentDown` block, so the program only gives you a point for new clicks."
      },
      "CSD U3 Direction Animations_2021": {
        "display_name": "Changing Animation",
        "bubble_choice_description": "Use a separate image for each direction of movement.",
        "long_instructions": "<img src=\"https://images.code.org/0e99dbaf3d16b944fd3352fcb8ccda16-image-1585766511652.gif\" style=\"float: right\">\r\n\r\n# Changing Images as you Move\r\nRight now these conditionals only do one thing (change the sprite's x or y position), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking. You're going make a bug that always faces the direction it is moving.\r\n\r\n# Do This\r\nUsing the provided program and images:\r\n\r\n- Duplicate your chosen bug image four times.\r\n- Edit each of your images to point in one of the four directions.\r\n- Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.\r\n"
      },
      "CSD U3 L12 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/1": {
    "display_name": "Predict",
    "long_instructions": "Predict Level, see contained level for instructions.",
    "contained levels": [
      {
        "long_instructions": "# If/Else Predict\n\nRead through the following program, paying special attention to the `if/else` block on Line 10.  After discussing the following questions with your partner, write down your predictions and run the code to see what the program does.\n\n-   What happens when you press the space bar?\n-   What happens when you **don't** press the space bar?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/2": {
    "display_name": "Video: If/Else Statements",
    "long_instructions": "## Questions to Consider\n\n-   What’s an example of when you would need an “if/else” statement?",
    "teacher_markdown": "## Discussion Goals\n\nMake sure students are thinking of situations in which they want two different things to happen, depending on the situation.  For example, they may say that they want one animation if the sprite is moving to the left and a different animation if the sprite is moving to the right.  Challenge the students to think about when they would just use an `if` block, and when an `if/else` block is necessary.  "
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/3": {
    "long_instructions": "# Reverse the Gears\n\nThese gears already spin one direction when you press the space bar, now you'll want them to spin the other direction when the space bar isn't pressed.\n\n# Do This\n\n-   Make the gears spin the opposite way when the space bar is **not** being pressed."
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/4": {
    "long_instructions": "# Control the Gears\n\nHere is the same program, but with one small difference.\n\n# Do This\n\n-   Read the program carefully, especially Line 13, to figure out how to control the gears.\n-   Run the program and test whether you were correct.\n-   Make the gears spin the opposite way when there is no user input.",
    "teacher_markdown": "This is the first time that students have seen mouse input.  Athough they have not seen the block before, they may be able to predict from Line 13 that the gears will spin when the mouse is pressed.  This level is almost exactly the same as the previous level, so you may also use it as a review of the if/else construct."
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/5": {
    "long_instructions": "# Mouse Clicks\n\nHere's a program that drops a balloon down the screen.  Make the balloon go up and down according to whether the user is pressing the mouse.\n\n# Do This\n\n-   Add code that checks whether the mouse is being pressed.\n-   Move the balloon up if the mouse is down. Otherwise, move the balloon down."
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/6": {
    "display_name": "Mix it up with if/else",
    "long_instructions": "<img src=\"https://images.code.org/6b0df2eb4a2b61ae12ded3249a4ed1ab-image-1585766972590.gif\" style=\"float:right\">\n\n# World.mouseX\n\nThis program uses an `if` block to shake the blender when the mouse is on left side of the screen.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Add an `else` to make the mixer shake when the mouse is on the other side of the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/7": {
    "dsls": {
      "description": "Practice keyboard input and using the if/else block with these activities.",
      "display_name": "Mouse Input and If/else Practice"
    },
    "sublevels": {
      "CSD games mouse mousey_2021": {
        "display_name": "Lady Bug Walk",
        "bubble_choice_description": "Move the ladybug only when the mouse is near the bottom of the screen.",
        "long_instructions": "<img src=\"https://images.code.org/f3af303ba5de68ccdf184ee17b7e1ed0-image-1585832244629.gif\" style=\"float:right\">\r\n\r\n# Ladybug Walk\r\n\r\nThis ladybug should only move when the mouse is near the bottom of the screen. You're going to use a conditional to make sure the ladybug only moves when the mouse is near the bottom of the screen.\r\n\r\n# Do This\r\n* Use an `if` block to check whether the position of the mouse (`World.mouseY`) is below a certain point.\r\n* Add code using the counter pattern to decrease `bug.x` to make it move. The bug should only move if the mouse pointer is near the bottom of the screen."
      },
      "CSD games practice move with mouse_2021": {
        "display_name": "Ghost Moving with the Mouse",
        "bubble_choice_description": "Make this ghost move in different directions depending on where the mouse pointer is.",
        "long_instructions": "<img src=\"https://images.code.org/25ca3c6b3c97eecaad3da2f34ee8baa4-image-1604786816070.gif\" style=\"float:right\" width=\"25%\">\r\n\r\n# Ghost Moving with the Mouse\r\n\r\nIn this level, you'll make the ghost move either left or right depending on the position of the mouse pointer. In the example shown, if the mouse pointer is on the left, the ghost moves left. The opposite is also true.\r\n\r\n# Do This\r\n\r\n* Write at least two if-statements to check for the location of the mouse.\r\n* Make the ghost move in a different direction for each mouse location."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/8": {
    "long_instructions": "# Fix the Program\n\nThis program should only shake the creature when the mouse is pressed, and only show directions when the mouse is **not** pressed.\n\n# Do This\n\n-   Change the code so that the creature only shakes when the mouse is pressed.\n-   Change the code so the directions (\"Press the mouse to shake the creature.\") **only show** when the user is **not** pressing the mouse."
  },
  "https://studio.code.org/s/csd3-2021/lessons/16/levels/9": {
    "dsls": {
      "description": "Try out these new blocks and challenges with mouse input.",
      "display_name": "Mouse Challenges"
    },
    "sublevels": {
      "CSD games mouse scale_2021": {
        "display_name": "Twin Spirals",
        "bubble_choice_description": "Make the spirals move in the opposite way when the mouse is pressed down.",
        "long_instructions": "<img src=\"https://images.code.org/36b8c4f797b3aa62f74948caf0457086-image-1585833223868.gif\" style=\"float:right\">\r\n\r\n# Twin Spirals\r\n\r\nThese spirals turn and change size in opposite ways.\r\n\r\n# Do This\r\n\r\n* Run the code to see what is making the spirals shrink, grow, and turn.\r\n* Add code so that the spirals switch what they are doing when the mouse is pressed down.\r\n"
      },
      "CSD U3 Mouse Input Bee 1_2021": {
        "display_name": "Follow the Mouse - Beginner",
        "bubble_choice_description": "Make the bee follow the mouse as it moves.",
        "long_instructions": "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\" style=\"float:right\">\r\n\r\n# Mouse X and Y\r\n\r\nOne of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.\r\n\r\n# Do This\r\n\r\nYou are going to make a bee sprite follow the mouse around the game area.\r\n\r\n* The bee image is already loaded in the animation tab for you.\r\n* Create a bee sprite that draws in the center of the window.\r\n* Inside the draw loop update the position of the sprite to the position of the mouse:\r\n\t* Set the x position of the sprite to the value of `World.mouseX`.\r\n    * Set the y position of the sprite to the value of `World.mouseY`.\r\n* Run the program to test that it works.\r\n"
      },
      "CSD U3 Mouse Input Bee 2_2021": {
        "display_name": "Follow the Mouse - Advanced",
        "bubble_choice_description": "Make the bee buzz randomly around the mouse.",
        "short_instructions": "Do this",
        "long_instructions": "# Random Around Point\r\n\r\n<img src=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\" style=\"float:right\">\r\n\r\nNow that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**\r\n\r\n# Do This\r\nYou already have a bee sprite that follows the mouse.\r\n\r\n* Update the x and y location to be randomly close to the mouse.\r\n\t* Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.\r\n* If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.\r\n\r\n_Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._"
      },
      "CSD U3 - complex - mouse move_2021": {
        "display_name": "Shake the Salt - Detect Mouse Movement",
        "bubble_choice_description": "Make the salt shaker shake as you move the mouse.",
        "long_instructions": "<img src=\"https://images.code.org/2dc7f2b3aaf8020d94985a62ba81817c-image-1585767324011.gif\" style=\"float:right\">\r\n\r\n# mouseDidMove\r\n\r\nWe can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.\r\n\r\n# Do This\r\nRight now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can \"shake\" the salt by moving the mouse back and forth.\r\n\r\n* Add a conditional that checks if `mouseDidMove`.\r\n* If the conditional is true, rotate the salt sprite randomly to the left or right.\r\n\r\n_Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_\r\n\r\n"
      },
      "CSD U3 L13 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/1": {
    "display_name": "Interactive Card",
    "long_instructions": "# Example Project\n\nRun the program a few times and answer the following questions:\n\n1.  Which elements appear to use drawing commands?\n\n2.  Which elements appear to be sprites?\n\n3.  For each sprite, which properties are being updated?\n\n4.  Where do you see conditionals being used?\n\n5.  Are there elements that you don’t understand?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Your Interactive Card\n\nIn the next few levels, you'll be completing your own interactive card.  Here are some examples to give you some ideas.  Don't forget to look at the code to see how they work.\n\n## Examples\n\n[![](https://images.code.org/7bbdbbb01c354a7c09bb4b9b5182a951-image-1522780803299.png)](https://studio.code.org/projects/gamelab/OzdFqrZ4oHPYsTddaRWaZxtTvdj9NzZVwCq6NkyONXM/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ed307e22854e4958a006d8023636cfd5-image-1522780803295.png)](https://studio.code.org/projects/gamelab/fmFrWsocELzP19CfbGI5P_hsgxN5ewVaB5f0Bw5S1_E/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ae0eca1dab46f13fcb21d4d0e264d637-image-1522780803298.png)](https://studio.code.org/projects/gamelab/z4XDrC0lsqoRY0xzYaXdJfChmyCl5O6YM-EOByecscc/edit)\n"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/3": {
    "long_instructions": "# Laying Out Your Background\n\nBefore beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!\n\n# Do This\n\nRefer to your planning activity sheet to help you lay out the shapes that will become the background to your card.\n\n-   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.\n-   Next, layer each additional drawing block in the order you want them to appear in the stack.\n-   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.\n\n**Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/4": {
    "long_instructions": "# Adding Sprites\n\nNow that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.\n\n# Do This\n\nCheck out the Sprites table on the back of your planning sheet. For each Sprite in your table:\n\n-   Initialize the Sprite at the top of your program with `createSprite()`.\n-   Find or create the image(s) for the Sprite and set it with `setAnimation()`.\n-   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute)."
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/5": {
    "long_instructions": "# User Input\n\nYou've got a background, you've got Sprites, now it's time to give your user something to do!\n\n# Do This\n\nOn the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:\n\n-   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.\n-   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).\n-   Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/6": {
    "long_instructions": "# Other Conditionals\n\nThe _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.\n\n# Do This\n\nFor each of the remaining items on your interactions table:\n\n-   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.\n-   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).\n-   Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/7": {
    "long_instructions": "# Finishing Touches\n\nNow's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.\n\n# Do This\n\nConsider adding any of the following to finish up your card:\n\n-   Text\n-   Additional images for your sprites\n-   Subtle animation in the background\n-   Sound effects  (Can you figure out how to do this?)\n-   More ways for a user to interact with your card"
  },
  "https://studio.code.org/s/csd3-2021/lessons/17/levels/8": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/1": {
    "long_instructions": "# velocityX\n\nOne way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.\n\n# Do This\n\n-   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where][0] )\n-   Write the name of your sprite in the block.\n-   Assign the `velocityX` property a value of 1.\n-   Run the code. What happens?\n-   Re-run the code giving the `velocityX` property a different value. What's changing?",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/2": {
    "display_name": "Video: Velocity",
    "long_instructions": "## Questions to Consider\n\n-   Why might you want to use a velocity block instead of the counter pattern?\n-   Give an example of a counter pattern and how you could use a velocity block instead.",
    "teacher_markdown": "## Discussion Goals\n\nIt may not be obvious to students why the velocity block is so powerful.  The immediate answer is that the velocity block allows a programmer to set the velocity at the beginning of the program and not have to worry about the counter pattern inside the draw loop (as Game Lab will take care of that).  If students are having trouble of thinking of situations in which the velocity block provides a big advantage, assure them that they will tackle some problems in the coming lesson that they will need this block for.\n\nAs students give you examples, try to elicit answers that use both positive and negative numbers, and that use the x and y positions as well as sprite rotation."
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/3": {
    "long_instructions": "# Moving Down\n\nHere is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?\n\n# Do This\n\nFind the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/4": {
    "long_instructions": "# rotationSpeed\n\nYou can use `rotationSpeed` to make your sprites spin. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.\n\n# Do This\n\nMake the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S4_C1": "Use the rotationSpeed block here"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/5": {
    "long_instructions": "# Controlling Speed\n\nYou used `rotationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.\n\n# Do This\n\n-   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where][0] )\n-   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.",
    "teacher_markdown": "# Inside versus outside the draw loop\n\nThis is a good time to remind students that code **outside** the draw loop is used to set up the program.  It is for how you want your program to **start**.  Code **inside** the draw loop is for things that are changing as the program is running, user interaction.  \n\nThere may be some confusion that the new blocks are animation (changing position) and yet have gone outside the draw loop up until this point.  That is because up until this point, the velocity has been set at the beginning of the program and not changed.  When students want the velocity to change during the program, it will need to go inside the draw loop.",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/6": {
    "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.\n\nIn the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.\n\n# Do This\n\n-   Look at `if` statements that check the sprite's position and set its velocity.\n-   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    },
    "contained levels": [
      {
        "long_instructions": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to start the color wheel spinning, and it kept spinning forever. The code below uses if statements to make a fish sprite move in different directions.\n\n# Do This\n\n-   Look at `if` statements that check the sprite's position and set its velocity.\n-   With your partner, discuss what you think the code will do, and write your answer below.\n-   Once you have submitted your answer, run the code."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/7": {
    "long_instructions": "# Back and Forth\n\nThis ball bounces back when it hits the bottom of the screen.  Can you make it bounce back when it hits the top of the screen?\n\n# Do this\n\n-   Run the code and see how it works.\n-   Look at how conditionals and velocity are used to make the ball bounce at the bottom of the screeen.\n-   Add code to make the ball bounce at the top of the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/8": {
    "dsls": {
      "description": "Practice using the velocity blocks with these activities.",
      "display_name": "Velocity Practice"
    },
    "sublevels": {
      "CSD U3 abstraction velocityY control_2021": {
        "display_name": "Controlling Speed",
        "bubble_choice_description": "Make the robot fly once the space bar has been pressed at least once.",
        "long_instructions": "# Controlling Speed\r\n\r\nFor this animation, you'll help the \"Flybot\" to take off. It should start moving up when the space bar is pressed, and it should continue moving up even after the space bar is released.\r\n\r\n# Do This\r\n\r\n* Use an `if` statement inside the draw loop to check when the space bar is pressed.\r\n* Use the `velocityY` block to make the sprite move up when the user presses the space bar.\r\n* Check that your animation behaves the way you'd expect.",
        "callouts": {
          "CSD_U3_L11_S5_C1": "Look at this code."
        }
      },
      "CSD games velocity bee_2021": {
        "display_name": "Paint Brush",
        "bubble_choice_description": "Dip the paint brush in the paint.",
        "long_instructions": "<img src=\"https://images.code.org/63f0da91b98c6211a09ac7fbaf9e0011-image-1585848730692.gif\" style=\"float: right\">\r\n\r\n# Paintbrush\r\n\r\nDip the paintbrush in the paint.\r\n\r\n# Do This\r\n\r\n* Use a conditional to send the paint brush down if the down arrow is pressed.\r\n* Use a different conditional to send the paint brush up if it reaches the palette.\r\n   * Hint: You will need to check its y property.\r\n",
        "callouts": {
          "CSD_U3_L11_S5_C1": "Look at this code."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/9": {
    "long_instructions": "# Swimming Right and Left\n\nThe code below should make the fish start moving right once you press the right-arrow, and then it should continually swim back and forth. You should use conditional statements and the `.velocity` block to make the fish swim.\n\n# Do This\n\n-   Look at the three `if` statements inside the draw loop.\n\n-   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:\n    -   If the user presses the right arrow key, move the fish to the right.\n    -   If the fish gets to the right-hand side of the screen, move the fish to the left.\n    -   If the fish gets to the left-hand side of the screen, move the fish to the right.\n\n-   The fish should always be facing the same direction it's moving, so you will need to update the fish's animation to either `fishL` or `fishR` based on the direction it's facing",
    "callouts": {
      "CSD_U3_L11_S5_C1": "Look at this code."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/18/levels/10": {
    "dsls": {
      "description": "Try out these new blocks and challenges with velocity.",
      "display_name": "Velocity Challenges"
    },
    "sublevels": {
      "CSD games velocity 4 directions_2021": {
        "display_name": "Changing Course",
        "bubble_choice_description": "Can you change velocities four separate times?",
        "long_instructions": "<img src=\"https://images.code.org/08892a209712e5612ed813ecaf34484a-image-1592601350973.2020-06-19 17_13_37.gif\" style=\"float: right; width: 150px;\">\r\n\r\n# Changing Course\r\n\r\nStudy the animation to the right. Notice that the purple alien sprite changes between x and y velocities when it is near each corner of the screen.\r\n\r\n# Do This\r\n\r\n* Run the program and to understand how it works so far.\r\n* Add `.velocityX` and `.velocityY` blocks to each conditional to make the alien complete the full circuit.\r\n\r\n**Be careful!** If the sprite starts moving diagonally, it might mean it has both an x and y velocity. In the first corner the alien needs to *stop moving up* and *start moving right*."
      },
      "CSD U3 L15 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Dinner Time!\n\nRun the program to see the robot bring the bunny dinner.  When the bunny reaches the bowl, they both stop walking and the bowl becomes empty.  What code do you think would help the computer know if two sprites were touching?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/2": {
    "display_name": "Collision Detection",
    "long_instructions": "# Using Math to Figure it Out\n\nComputers use math to figure out whether two things are touching.  Look at the math in this program to see how the sprite properties are compared with their width to see whether they are touching.\n\n# Do This\n\n-   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n-   Discuss the code with your partner.\n-   Why does the code only use the width and x properties, and not the height and y properties?\n-   Would you want to write this code every time you checked whether something was touching?",
    "teacher_markdown": "The code in this level is overwhelming.  The point is not that students understand every line, but that they see that it's possible to check whether sprites are touching just by using their positions.  They should understand that the `isTouching` block used in the next level automatically runs the complicated code that they see here, but that it's hidden inside the block to make programming easier.\n\nThis code does not include the y and height properties because the two sprites are interacting on the same horizontal line.  If the bunny could move diagonally, then the code would be even more complicated.",
    "contained levels": [
      {
        "long_instructions": "# Using Math to Figure it Out\n\nComputers use math to figure out whether two things are touching.  Look at the math on lines 17-18 of this program to see how the sprite properties are compared with their width to see whether they are touching.\n\n# Do This\n\n-   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n-   Discuss the code with your partner.\n-   Why does the code only use the width and x properties, and not the height and y properties?\n-   Would you want to write this code every time you checked whether something was touching?"
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/3": {
    "long_instructions": "# isTouching()\n\nWriting out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.\n\n# Do This\n\n-   Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where][0] )\n-   _Hint: Don't forget to change the \"sprite\" to \"bunny\" and the \"target\" to \"dinner\"._",
    "callouts": {
      "CSD_U3_L12_S2_C1": "Add your block here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/5bba6a59ca6ac44e190f0a56d2c31752-image-1585767709528.gif\" style=\"float:right\">\n\n# Applesauce\n\nThe blender should only turn on when the apple touches it.\n\n# Do This\n\n-   Use the new code you have learned to check whether the blender is touching the apple.\n-   Use a conditional to only shake the blender when the apple is touching it.\n\n_Hint: You will need to drag two blocks into the workspace._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/5": {
    "long_instructions": "# Debugging Collisions\n\nThe balloon is popping before the tack touches it.  You can use the `debug` block to get more information about the bug in the program?\n\n# Do This\n\n-   Run the code and use the arrow keys to move the tack to pop the balloon.\n-   In the code below, change `balloon.debug = false` to `balloon.debug = true`.\n-   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.\n-   Run the code again, then discuss with your partner why the balloon is popping early.",
    "teacher_markdown": "This level does not ask students to fix the bug in the program, which must be done in the animation tab.  In order to make the collision work properly, students will need to crop the empty space around the visible part of the picture.  The easiest way to do this is to click once on the \"crop\" icon in the animation tab, which will tightly crop to the smallest rectangle around the visible parts of the picture.  Students may also use the rectangular select tool to specify what should be cropped away. "
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/6": {
    "dsls": {
      "description": "Practice using collision detection with these activities.",
      "display_name": "Collision Practice"
    },
    "sublevels": {
      "CSD U3 collision detection practice debugistouching_2021": {
        "display_name": "Debug: isTouching",
        "bubble_choice_description": "Figure out why this code is not detecting the collision, even though it calls isTouching.",
        "long_instructions": "# Debug: isTouching\r\n\r\nThe bunny sprite should change to a new animation when it touches the sun sprite. Figure out why the bunny doesn't react to the collision.\r\n\r\n# Do This\r\n- Modify the code so that the collision is detected within the draw loop."
      },
      "CSD U3 collision detection challenge collider circle_2021": {
        "display_name": "Circle Colliders",
        "bubble_choice_description": "Improve collisions for sprites with circular animations.",
        "long_instructions": "# Circular Collider\r\n\r\nThese coins are supposed to stop when they touch, but the colliders are the wrong shape. Change the collider of each coin to a circle.\r\n\r\n# Do This\r\n\r\n* Use `.setCollider()` to change the collider of each sprite to a circle.\r\n\r\n![](https://images.code.org/a42ba3dcc666047d26145a7832493f70-image-1589906306820.2020-05-19 12_37_36.gif)"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/7": {
    "long_instructions": "# Rainbow Horse\n\nWhen the rainbow touches the horse, it should turn into a unicorn.\n\n# Do This\n\n-   Add code that changes the horse sprite's appearance into a unicorn when the rainbow touches it."
  },
  "https://studio.code.org/s/csd3-2021/lessons/19/levels/8": {
    "dsls": {
      "description": "Try out these new blocks and challenges with collisions.",
      "display_name": "Collision Challenges"
    },
    "sublevels": {
      "CSD U3 collision detection challenge collider angle_2021": {
        "display_name": "Collider at an Angle",
        "bubble_choice_description": "Improve collisions for sprites with angled animations.",
        "long_instructions": "# Collider at an Angle\r\n\r\nAngle the collider to fit the rolling pin.\r\n\r\n## .setCollider() with multiple parameters\r\n\r\n`.setCollider()` can take more parameters than just the shape. It also takes parameters to specify the x, y offset, width and height, and angle. Check out the [documentation](https://studio.code.org/docs/gamelab/setCollider/) for an example.\r\n\r\n# Do This\r\n\r\n* Use `.setCollider()` with 6 parameters to give the rolling pin a collider that fits it well.\r\n\r\n**Hint:** Hover over the `setCollider()` block in the toolbox to see an example of how to do this.\r\n"
      },
      "CSD U3 collision detection practice debugpoints_2021": {
        "display_name": "Debug: Add Points on Collision",
        "bubble_choice_description": "Figure out why this code is adding way more points than we want it to",
        "long_instructions": "# Debug: Add Points on Collision\r\n\r\nGames often give you points when two sprites touch. This program does that, but notice what happens to the score as the sprites continue to touch. Your challenge is to get it so only one point is scored. There are multiple ways to do this, but the easiest way is to move one or both sprites to a different location right when the score increases.\r\n\r\n# Do This\r\n- Read and run the code to understand how it works, and what is going wrong.\r\n- Identify the line of code that increases the score.\r\n- Add an additional line of code so that at least one sprite moves to a new (random location).\r\n"
      },
      "CSD U3 L16 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Frog jump\n\nThis frog jumping game is an example of a side scroller.  Side scrolling games have backgrounds that move across the screen from side to side.\n\nIn this game, the player uses the up arrow to make the frog jump.  The frog must avoid the mushrooms while trying to get the flies.  Every fly scores one point, and hitting the mushrooms makes the player health go down.  When the player health hits zero, the game is over.\n\nPlay the game a few times and discuss it with your partner.  You have already learned all the skills you need to code this game.  You'll be making your own side scroller in this mini-project."
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/2": {
    "long_instructions": "# Draw Your Background\n\nThe sample game had a simple background of a blue sky, a white oval cloud, and a brown ground.  You can choose to make your background as simple or complicated as you want.\n\n# Do this\n\n-   Find the code comment `// BACKGROUND`\n-   Use the drawing tools to draw your background.\n-   Run the program to test the background.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/3": {
    "long_instructions": "# Create Your Sprites\n\nNext, create the sprites you will use in your program.  You'll need a player (the frog), a target (the fly), and an obstacle (the mushroom).  You can make them anything you want.\n\n# Do this\n\n-   Go to the animation tab and make sure that you have the images that you want.\n-   The frog, mushroom and fly are already there, but you can use whatever images you want.\n-   Find the code comment `//GAME SETUP`.\n-   Create your three sprites, the player, target, and obstacle.\n-   Set each one to the animation you chose for it.\n-   Scale each one to the size you want.\n-   Place them where you want them to be on (or off) the screen.\n-   Set the starting x velocity of the target and the obstacle.\n-   Test your program.  The player should be on the screen, and the target and obstacle should start off screen and move across the screen from right to left.\n\n_Hint: The obstacle and target sprites should always move at the same speed. You only need to set a velocity for each sprite one time. You can do this outside the draw loop._",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/4": {
    "long_instructions": "# Player Controls\n\nThe up arrow should make the player jump.  There are three parts to jumping: jump up when a key is pressed, go down when you're high enough, and don't fall through the ground!\n\n# Do this\n\n-   Find the code comment `// JUMPING` and read the three comments in that section.\n-   Add a conditional that checks whether the player has pressed the \"up\" key.\n    -   If the up key is pressed, use the velocityY property to start the player (frog) sprite moving up.\n    -   Test your code to see whether the sprite goes up when you press the up arrow.\n-   Add a conditional that uses the sprite's y property to check whether it is high enough.\n    -   If it is far enough up the screen, start the sprite moving back down.\n    -   Test your code to see whether the sprite goes back down when it gets to the top if its jump.\n-   Add a conditional to check whether the sprite is low enough on the screen to be on the ground.\n    -   If it is far enough down the screen, stop the sprite.\n    -   Test to make sure the sprite does not go through the ground at the end of the jump.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement",
      "CSD_U3_L11_S17_C2": "Send the frog back down here"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/5": {
    "long_instructions": "# Looping\n\nThe obstacle (mushroom) and the target (fly) need to loop back to the right of the screen once they go too far.\n\n# Do this\n\n-   Find the code comment that says `// LOOPING`\n-   Add a conditional that uses the obstacle sprite's x property to check whether it has moved off the screen.\n    -   If it has moved off the screen, use its x property to put it back on the right side of the screen.\n    -   Test your code to see whether the obstacle is looping.\n-   Add a conditional that checks whether the target has moved off the screen.\n    -   If it has moved off the screen, use put it back on the right side of the screen.\n    -   Test your code to see whether the target is looping.",
    "callouts": {
      "CSD_U3_L11_S17_C1": "Look at this if statement"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/6": {
    "long_instructions": "# Sprite Interactions\n\nIn the sample game, the obstacle (mushroom) rotated and the health decreased when the player (frog) touched it.  The score increased and the target (fly) moved back to the right of the screen when the player (frog) touched it.\n\n# Do This\n\n-   Find the code comment `// SPRITE INTERACTIONS` and read the comments in that section.\n-   Create a conditional that checks whether the player sprite is touching the obstacle sprite.\n    -   If they are touching, decrease the health and change the obstacle sprite in some way.\n    -   Run the program to test your code.\n-   Create a conditional that checks whether the player sprite is touching the target sprite.\n    -   If they are touching, increase the score and move the target back to the right of the screen.\n    -   Run the program to test your code. \n\n_You may want to use watchers to keep track of your score and health._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/7": {
    "long_instructions": "# Scoreboard\n\nRight now the health is displayed, but the score is not.\n\n# Do This\n\n-   Find the code comment `// SCOREBOARD` and read the code that makes the health information display.\n-   Add code to create a scoreboard.\n-   Run the program to test your code."
  },
  "https://studio.code.org/s/csd3-2021/lessons/20/levels/8": {
    "long_instructions": "# Review Your Game\n\nNow that you've added in all the features, it's time to play your game!\n\n# Do this\n\n-   Play your game a few times to check for bugs.\n-   Look over your project guide to make sure you have not missed anything.\n-   Make any last changes."
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/1": {
    "display_name": "Velocity and the Counter Pattern",
    "teacher_markdown": "!!!tip\n\n    This level introduces the primary new programming pattern of this lesson, combing the counter pattern with sprites' velocity properties. Encourage students to take seriously their predictions before actually running the code.",
    "contained levels": [
      {
        "long_instructions": "# Velocity and the Counter Pattern\n\nUsing the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.\n\n# Predict\n\nWhat do you think will happen when the code is run? Why? Once you're ready you can run the code to find out."
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/2": {
    "long_instructions": "# Velocity and the Counter Pattern\n\nThis program already makes a car move across the screen, but it's going very slowly.  By using the `sprite.velocityX` property with the counter pattern, you can change the sprite's speed during the program. \n\n# Do This\n\n-   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S6_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/3": {
    "long_instructions": "# Falling Rock\n\nThe rock should speed up as it falls down the screen.\n\n# Do This\n\n-   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where][0] )",
    "callouts": {
      "CSD_U3_L11_S7_C1": "Add your code here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/4": {
    "long_instructions": "# Slowing Things Down\n\nThe car is going to run into the water! You'll need to use the counter pattern to slow it down.\n\n# Do This\n\n-   Use the `sprite.velocityX` block with a counter pattern to slow the car down by 0.25 as it moves across the screen.  \n-   Discuss with your Partner: What do you think will happen when the car finally stops?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/5": {
    "dsls": {
      "description": "Practice using the new ways to move sprites.",
      "display_name": "Sprite Movement Practice"
    },
    "sublevels": {
      "CSD U3 abstraction accelerateY up_2021": {
        "display_name": "Rising Bubble",
        "bubble_choice_description": "Make the bubble get faster as it moves higher.",
        "long_instructions": "# Rising Bubble\r\n\r\nThis program makes a bubble rise up the water. Can you make it get faster as it rises?\r\n\r\n# Do This\r\n\r\n* Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.\r\n"
      },
      "CSD U3 practice deceleration_2021": {
        "display_name": "Slow down and reverse",
        "bubble_choice_description": "Help the mouse avoid the watchful cat.",
        "long_instructions": "<img src=\"https://images.code.org/6851c208594b84d47dd15401a8d4ae8c-image-1592923375590.2020-06-23 10_42_38.gif\" style=\"float:right\">\r\n\r\n# Slow down and reverse\r\n\r\nIn this animation, a mouse runs past a cat. Let's change it so that the mouse slows down, stops before reaching the cat, then reverses direction like shown to the right.\r\n\r\n# Do This\r\n\r\n* Note the current *x velocity* of the mouse sprite.\r\n* Use the counter pattern to change the velocity so that it approaches 0 then changes direction.\r\n  * Hint: Since the mouse starts with a **negative** velocity, you'll actually want to **increase** it to slow down.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/6": {
    "long_instructions": "# Looks like Gravity\n\nThe rock is thrown in the air but it never falls back down.\n\n# Do This\n\n-   Use the code you've practiced to make the rock slow down and then fall.\n-   Try different numbers in your counter pattern to see what you like the best."
  },
  "https://studio.code.org/s/csd3-2021/lessons/21/levels/7": {
    "dsls": {
      "description": "Try out these new blocks and challenges with velocity and the counter pattern.",
      "display_name": "Complex Sprite Movement Challenges"
    },
    "sublevels": {
      "CSD U3 complex sprite movement practice parabola_2021": {
        "display_name": "Curve",
        "bubble_choice_description": "Make the plane curve to avoid the two spikes.",
        "long_instructions": "# Curve\r\n\r\nThe plane is going up to avoid the first spike, but it flies offscreen. In the draw loop, update its Y velocity so that it pulls down to avoid the second spike.\r\n\r\n# Do This\r\n- Update the Y velocity in the draw loop so that it moves the plane down.\r\n  - Hint: The velocity starts as negative, going up. To go down, what direction should the velocity be?\r\n- You may change the initial X and Y velocity of the plane, but you don't have to."
      },
      "CSD U3 complex sprite movement practice deceleration_2021": {
        "display_name": "Deceleration",
        "bubble_choice_description": "Make the car slow to a halt before it goes past the top of the screen.",
        "long_instructions": "# Deceleration\r\n\r\nMake the car slow to a halt before it goes past the top of the screen.\r\n\r\n# Do This\r\n- In the draw loop, update the car's Y velocity so that it slows down.\r\n- Use a conditional to prevent the car from moving backwards after it stops."
      },
      "CSD U3 L17 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/1": {
    "display_name": "Sprite Interactions",
    "long_instructions": "# Sprite Interactions\n\nSo far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.\n\n# Do This\n\n-   Run the program and observe the interaction between the two sprites.\n-   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:\n    -   `sprite.isTouching()`\n    -   `sprite.velocityX`\n    -   `sprite.velocityY`\n    -   `sprite.x`\n    -   `sprite.y`\n\nBe ready to share your ideas with your classmates."
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/2": {
    "long_instructions": "# Program a Sprite Interaction\n\nHere's a similar program, but it doesn't work yet.\n\n# Do This\n\n-   Use your plan to program the giraffe to push the monkey off the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/3": {
    "long_instructions": "# Write Your Own Sprite Interaction\n\nNow the elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.\n\n# Do This\n\n-   Run the program to see how it works.\n-   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen."
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/4": {
    "long_instructions": "# Displace\n\nThis type of sprite interaction  is so common that there's a block for it: `sprite.displace()`.  Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug.\n\n# Do This\n\n-   Find the line of code where the `sprite.displace()` block is used and fix the error."
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/5": {
    "long_instructions": "# More Collision Blocks\n\nThree new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?\n\n# Do This\n\n-   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where][0] )\n    -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._\n-   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?\n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]: # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\"",
    "callouts": {
      "CSD_U3_L13_S6_C1": "Change this block."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/6": {
    "dsls": {
      "description": "Practice using the new collisions blocks.",
      "display_name": "Collisions Practice"
    },
    "sublevels": {
      "CSD U3 collisions types_2021": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make the basketball interact with the wooden floor.",
        "long_instructions": "# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n# Do This\r\n\r\n* Choose the best block to model the basketball's interaction with the floor. ( [Show me where](#triggercallout=code_triggered) )\r\n\r\n*Hint: You can try the different blocks out, or read more about them in the \"Help and Tips\" tab.",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types2_2021": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make the arrow stop at the apple.",
        "long_instructions": "# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n# Do This\r\n\r\n* Choose the best block to make the arrow stop when it reaches the apple. ( [Show me where](#triggercallout=code_triggered) )\r\n\r\n*Hint: You can try the different blocks out, or read more about them in the \"Help and Tips\" tab.\r\n",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types3_2021": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Make one cart push the next.",
        "long_instructions": "<img src=\"https://images.code.org/15e2ef8c71f9f194115523cea1305cae-image-1592927136250.2020-06-23 11_45_27.gif\" style=\"float:right\">\r\n\r\n# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n# Do This\r\n\r\n* Choose the best block to make the gray minecart stop and push the second cart. ( [Show me where](#triggercallout=code_triggered) )\r\n\r\n*Hint: You can try the different blocks out, or read more about them in the \"Help and Tips\" tab.*\r\n\r\n",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      },
      "CSD U3 collisions types4_2021": {
        "display_name": "Collision Types",
        "bubble_choice_description": "Help her push the suitcase.",
        "long_instructions": "<img src=\"https://images.code.org/7429509e250d36baaceb6d1a6ce89f3b-image-1592934922226.2020-06-23 13_54_13.gif\" style=\"float:right\">\r\n\r\n# Collision Types\r\n\r\nThere are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\r\n\r\n# Do This\r\n\r\n* Choose the best block to make the child push the suitcase. ( [Show me where](#triggercallout=code_triggered) )\r\n\r\n*Hint: You can try the different blocks out, or read more about them in the \"Help and Tips\" tab.*\r\n\r\n",
        "callouts": {
          "CSD_U3_L13_S6_C1": "Add your code here."
        }
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/da47c7825bb2cf05125f5b0467895846-image-1585722435633.gif\" style=\"float:right\">\n\n# Sprite Interactions\n\nYou've now seen four different types of sprite interactions.  You'll need them all for this challenge.\n\n# Do this\n\n-   For each pair of animals, choose the sprite interaction that matches the target image on the right."
  },
  "https://studio.code.org/s/csd3-2021/lessons/22/levels/8": {
    "dsls": {
      "description": "Try out these new blocks and challenges with collisions.",
      "display_name": "Collision Challenges"
    },
    "sublevels": {
      "CSD U3 collisions debug_2021": {
        "display_name": "Debug Colliders",
        "bubble_choice_description": "Set a sprite's debug property to understand how it bounces.",
        "long_instructions": "# Debug\r\n\r\nSometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.\r\n\r\n# Do This\r\n\r\nThese two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!\r\n\r\n* Run the code and watch the way that the coins interact.\r\n* Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.\r\n* Change the gold coin's starting x position to 51 and run the code again.\r\n* Discuss with a partner: Why do you think the coins are bouncing strangely?\r\n"
      },
      "CSD U3 collisions setCollider_2021": {
        "display_name": "Collider Shape",
        "bubble_choice_description": "Learn how to change how sprites interact based on their collider shape.",
        "long_instructions": "# setCollider\r\n\r\nSprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a \"rectangle\" or a \"circle\".  By default all colliders are \"rectangle\".\r\n\r\n# Do This\r\n\r\n* Find the `sprite.setCollider()` block for the gold coin, and change it from \"rectangle\" to \"circle\".\r\n* Add a new `sprite.setCollider()` block for the silver coin, and choose \"circle\" for the shape of the collider.\r\n* Run the code again to see how the sprites bounce.\r\n\r\n\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r\n\r\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r\n"
      },
      "CSD U3 collisions bounciness_2021": {
        "display_name": "Bounciness",
        "bubble_choice_description": "Control how much sprites bounce when they interact.",
        "long_instructions": "<img src=\"https://images.code.org/5976aca3356455b4882d2e5d0a62a26f-image-1585825944588.gif\" style=\"float:right\">\r\n\r\n# Bounciness\r\n\r\nSo far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.\r\n\r\n# Do This\r\n\r\n* Read the code below and press \"Run\" to see the behavior of the basketball and pool ball.\r\n* Use a `bounciness` block to set the bounciness of your soccer ball.\r\n* Run the code again to see how the sprites bounce off the floor.\r\n\r\n\r\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r\n\r\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r\n\r\n[//]: #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)\r\n\r\n"
      },
      "CSD U3 L18 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Flyer Game\n\nIn this flyer game, the player tries to collect coins, and the rocks push the player across the screen.  When the player goes off the screen, the game is over.\n\nPlay the game a few times and discuss it with your partner.  You have already learned all the skills you need to code this game.  You'll be making your own flyer game in this mini-project."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/67d00c99c3715022542ba3ea4a6bd8cf-image-1585726110948.gif\" style=\"float:right\">\n\n# Create Your Sprites\n\nFirst create the sprites you will use in your program. You already have a player sprite, but you can change its animation.\n\nYou'll need a player (the flyer), a target (the coin), and two obstacles (the rocks). You can make them anything you want.\n\n# Do This\n\n-   Go to the animation tab and make sure that you have the images that you want.\n    -   The flyer, coin and rock are already there, but you can use whatever images you want.\n-   Find the code comment `//GAME SETUP`.\n-   Create three more sprites: the target and two obstacles.\n-   Set each sprite to the animation you chose for it.\n-   Scale each one to the size you want.\n-   Place them where you want them to be on (or off) the screen.\n    -   In the game, the obstacles and coin were placed randomly, but you don't need to do that yet.\n-   Set the starting velocities of the obstacles. Use the x velocity to move left and right, or use the y velocity to move up and down.\n-   Test your program. The player and target should be on the screen, and the obstacles should start off screen and move across the screen from left to right and up to down."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/3": {
    "long_instructions": "<img src=\"https://images.code.org/cdddf2fa838574cd428d51a4716b4277-image-1585726786629.gif\" style=\"float:right\">\n\n# Falling\n\nIf the user doesn't do anything, the player sprite should fall.\n\n# Do This\n\n-   Find the code comment `// FALLING`.\n-   Use the counter pattern to with the player sprite's velocityY to make the flyer fall.\n-   Test your code to make sure that it works.  The sprite should fall faster as it goes down the screen.",
    "callouts": {
      "CSD_U3_L13_S8_C1": "Set the velocity here"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/4": {
    "long_instructions": "<img src=\"https://images.code.org/0a7336d6b5107c50e304a4e3cb88b912-image-1585727046118.gif\" style=\"float:right\">\n\n# Jumping\n\nNext, the player sprite needs to jump when the user presses the \"up\" arrow.\n\n# Do This\n\n-   Find the code comment `// PLAYER CONTROLS`\n-   Add a conditional (`if` block) that checks whether the user is pressing the \"up\" arrow.\n-   Add code inside the conditional that will change the sprite's velocity to move up if the \"up\" arrow is pressed.\n-   Test your code to see whether it works."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/5": {
    "long_instructions": "<img src=\"https://images.code.org/2e264edbb971f8fd66acb4ddf0a5b907-image-1585727616296.gif\" style=\"float:right\">\n\n# Floating Left and Right\n\nThe flyer should also be able to float left and right.  \n\n# Do This\n\n-   Find the code comment `//PLAYER CONTROL`\n-   Add a conditional that decreases the sprite's x velocity when the \"left\" arrow is pressed.\n-   Add a conditional that increases the sprite's x velocity when the \"right\" arrow is pressed.\n    -   Hint: Your code should use a counter pattern **and** the `velocityX` block.\n-   Test your code to make sure it works."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/3d7349f8509b280e3607bbc83545f63c-image-1585728699723.gif\" style=\"float:right\">\n\n# Looping\n\nWhen the obstacles move off the screen, they should loop back to the other side, at a random position.\n\n# Do This\n\n-   Find the code comment `// LOOPING`\n-   Add a conditional that checks the horizonal obstacle's x property to see whether it has moved off the screen.\n-   If it has moved off the screen...\n    -   Reset its x property to \"loop\" it back to the other side of the screen\n    -   Set its y property to a random number between 50 and 350.\n-   Test your code to make sure the first obstacle loops.\n-   Add a conditional that checks the vertical obstacle's y property to see whether it has moved off the screen.\n-   If it has moved off the screen...\n    -   Reset its y property to \"loop\" it back to the other side of the screen\n    -   Set its x property to a random number between 50 and 350."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/7": {
    "long_instructions": "<img src=\"https://images.code.org/f4c78598af1ce2fa3d368bcd9498a0d2-image-1585729468198.gif\" style=\"float: right;\">\n\n# Sprite Interactions\n\nWhen your character touches the coin you should reset it somewhere on the screen, and the obstacles should push the player across the screen.\n\n# Do This\n\n-   Find the code comment `SPRITE INTERACTIONS` and read the comments in that section.\n-   Create a conditional that checks whether the player is touching the target, and moves the target to the random place if it's true.\n-   Create two new collisions that make the two obstacles push the player across the screen.\n-   Test your code to make sure it works."
  },
  "https://studio.code.org/s/csd3-2021/lessons/23/levels/8": {
    "long_instructions": "# Review Your Game\n\nTest your game to make sure it has everything it needs.\n\n# Do This\n\n-   Play your game several times.\n-   Read over your project guide and check that you have followed your plan.\n-   Make any last changes."
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/1": {
    "display_name": "Video: Functions",
    "long_instructions": "## Questions to Consider\n\n-   Think of a time when a function might have helped you write a program.\n    -   What code would go in the **definition** of the function?\n    -   When would you **call** the function?\n    -   What would you name it?",
    "teacher_markdown": "# Discussion Goals\n\n**Key Vocabulary:** \n\n-   **Function** - a named bit of programming instructions\n\nMake sure students understand role of the two steps in using functions, as well as seeing functions as a form of \"chunking\" or abstraction.  The function definition should include all of the code that they want to run, and the name of the function should be a short description of the purpose of the code.    The function should be called at each place in the program that the student wants that block of code to run."
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/2": {
    "display_name": "Video: Calling and Defining Functions",
    "long_instructions": "# Calling Functions\n\nFunctions let you build your own blocks and decide what code goes inside of them.  This program has already created two functions, but only one of them is being called.\n\n# Do This\n\n-   **Call the second function** to reveal the full image. Use the function that is being called as a guide.\n-   **Tip:** Just as with all other blocks, spelling and capitalization are important here.",
    "teacher_markdown": "**Introducing Functions**\n\nIn these first several lessons students are just being shown the syntax of functions and are not asked to write or create their own. It can be useful to explain creating a function as basically “creating a new block” just like another programmer created the “isTouching” or “velocity” blocks that they’ve seen actually contain other more complex code."
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/3": {
    "long_instructions": "# Reordering Code\n\nPlacing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.\n\n# Do This\n\nThis program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.\n\n-   **Read the 4 functions** to know what they do\n-   **Call the functions** in an order that draws the scene in the way that looks best to you"
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/4": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "The red square will be drawn but the green one will not. You cannot call functions after they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "The green square will be drawn but the red one will not You cannot call functions before they are created.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Both squares will be drawn. You can create functions anywhere you like in your code.",
              "correct": true,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            },
            {
              "text": "Neither square will be drawn. There is an error in the code.",
              "correct": false,
              "feedback": "Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!"
            }
          ],
          "markdown": "# Does It Matter Where You Create Functions?\n\nSo far all your functions have been created at the bottom of your code. What do you think will happen if you call a function before it's defined?\n\nNotice that the red square is drawn **before** its function is created while the green square is drawn **after** its function is created. Which of these do you think will be drawn?\n"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/5": {
    "dsls": {
      "description": "Practice using functions and learn more about what makes them so useful.",
      "display_name": "Functions Practice"
    },
    "sublevels": {
      "CSD U3 Functions Call Draw Loop_2021": {
        "display_name": "Calling Functions in the Draw Loop",
        "bubble_choice_description": "Call the function to draw the background in the draw loop.",
        "long_instructions": "# Calling Functions in the Draw Loop\r\n\r\nYou can call a function inside the draw loop, just as you would anywhere else in your code.\r\n\r\n# Do This\r\n\r\nA function that will draw a background has been created for you. A sprite has been created to move across the background.\r\n\r\n* **Call the function inside the draw loop** so that the sprite appears on top of the background.\r\n* **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code."
      },
      "CSD U3 Functions Reset Sprite_2021": {
        "display_name": "Calling Functions Multiple Times",
        "bubble_choice_description": "Make the flyer reappear on the right side when it goes off the left.",
        "long_instructions": "# Calling Functions Multiple Times\r\n\r\nYou'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\r\n\r\n# Do This\r\n\r\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen?\r\n\r\n* **Note:** The function is already called once at the beginning of your program\r\n* Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\r\n* Use this if-statement and the function written for you to make the sprite move across the screen multiple times.",
        "teacher_markdown": "**Why Use Functions** \r\n\r\nThis and the next two levels introduce three uses of functions, namely removing repetition in programs, allowing code to quickly be changed at multiple points, and providing organization in code. Students will need to write more of their own functions in these levels."
      },
      "CSD U3 Functions Randomize Sprite_2021": {
        "display_name": "Making Changes to Functions",
        "bubble_choice_description": "Change the setFlyer() function so that the flyer appears at a random y with random velocity.",
        "long_instructions": "# Making Changes to Functions\r\n\r\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\r\n\r\n# Do This\r\n\r\nMake changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time it is reset."
      },
      "CSD U3 Functions Create Function_2021": {
        "display_name": "Creating Functions to Organize Code",
        "bubble_choice_description": "Add code to the drawNight() function to create a night scene.",
        "long_instructions": "# Creating Functions to Organize Code\r\n\r\nIn Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.\r\n\r\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png\" style=\"float:right;width:150px\">\r\n\r\n# Do This\r\n\r\nThis program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.\r\n\r\n* **Write the `drawNight` function** which has been created but is empty.\r\n* Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/6": {
    "long_instructions": "# Using Functions\n\nWhat are three ways that functions can be useful when you are writing programs?\n\n_Hint: Go back to the practice levels for review if you are not sure._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/7": {
    "long_instructions": "# Write Your Own Function\n\nTime to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.\n\n# Do This\n\n-   **Read and run the code** that already exists to make sure you know how it works.\n-   **Write the code for the `setCoin`** function to do the following:\n    -   Set the coin's velocity to move down.\n    -   Set the coin's y position to the top of the screen\n    -   Randomize the coin's x position\n-   You can go look at some of the previous levels if you need help.",
    "teacher_markdown": "**Functions in Context** \n\nIn this and the next two lessons, students will use functions to organize code within a simple game. While it is not identical to the side scroller, many of the skills and uses of functions in these levels can and should be used when they complete their side scroller."
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/8": {
    "long_instructions": "# Catch the Coin, Increase the Score\n\nLet's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.\n\n# Do This\n\n-   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.\n-   Make sure you're **calling your function** to reset the coin once it's been caught.\n-   Play the game and **randomize the velocity of the coin** to a range that you think is fun."
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/9": {
    "long_instructions": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n# Do This\n\n-   Use an **if-statement** and two separate functions to draw your backgrounds.\n-   Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"silly\" background are. Have fun with it!"
  },
  "https://studio.code.org/s/csd3-2021/lessons/24/levels/10": {
    "dsls": {
      "description": "Improve your game and try out these challenges with functions.",
      "display_name": "Functions Challenges"
    },
    "sublevels": {
      "CSD U3 Functions challenge drawscene_2021": {
        "display_name": "Creating Functions to Draw Scenes",
        "bubble_choice_description": "Create two functions to draw two different scenes",
        "long_instructions": "<img src=\"https://images.code.org/0b70fff7d9395197d2ba3a351aa32eeb-image-1591297781924.gif\" style=\"float:right;width:200px;\"/>\r\n\r\n# Creating Functions to Draw Scenes\r\n\r\nThe provided code draws one of two different scenes based on where the mouse is on the screen. It either calls the `drawScene1()` function or the `drawScene2()` function. However, these functions don't exist yet! \r\n\r\nFeel free to be creative and draw whatever two scenes you want\r\n\r\n# Do This\r\n\r\n- Create the `drawScene1` and `drawScene2` functions\r\n- Fill them in with code to draw two different scenes\r\n"
      },
      "CSD U3 L19 Freeplay_2021": {
        "display_name": "Free Play",
        "long_instructions": "# Free Play\r\n\r\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\r\n\r\n"
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/1": {
    "display_name": "Sample Game",
    "long_instructions": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\nIf you were making this program…\n\n-   What sprites would you need?\n-   What variables would you need?\n-   What functions would you use?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/2": {
    "dsls": {
      "markdown": "# Plan Your Project\n\nTake a look at the project guide, which has already been filled out for you.\n\n* Does the project guide describe the same sprites that you thought of?\n* Does it use the same variables to store information?\n* Are the functions that it describes the same as the functions you described?\n"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/3": {
    "long_instructions": "# Getting Started: Set Animations\n\nBefore you get started, you'll want some better animations for each of your sprites.\n\n# Do This\n\n-   In the Animation Tab are animations for each of your sprites. Go look at what they are.\n-   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/4": {
    "long_instructions": "# Moving The Enemies\n\nYou'll need to get your enemy sprites to a random position and moving across the screen.\n\n# Do This\n\n-   After each enemy sprite is created...\n    -   Set its x position to 0.\n    -   Set its y position to be a random number between 150 and 250.\n    -   Set its x velocity to 2.\n-   Test your program. Your enemy sprites should now be moving across the bridge."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/5": {
    "long_instructions": "# Moving Left and Right\n\nNow you'll just need to get your character moving left and right and changing its animations.\n\n# Do This\n\n-   Inside the `movePlayer` function...\n    -   Use a conditional to detect when the \"right\" arrow is pressed.\n    -   If it is, move the player sprite to the right by 3.\n    -   Use another conditional to move the player to the left when the \"left\" arrow is pressed.\n-   Test your game. Your character sprite should now move left and right when you press the left and right arrows."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/6": {
    "long_instructions": "# Moving Up and Down\n\nYou'll want your player sprite to move up and down as well.\n\n# Do This\n\n-   Inside the `movePlayer` function...\n    -   Use a conditional to detect when the \"up\" arrow is pressed.\n    -   If it is, move the player sprite up by 3.\n    -   Use another conditional to move the player down when the \"down\" arrow is pressed.\n-   Test your code. Your character should now move in all four directions."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/7": {
    "long_instructions": "# Change Player Animations\n\nYou can change the animation when the player changes direction.\n\n# Do This\n\n-   Inside the Animation Tab copy the animation of your player sprite.\n-   Flip each frame of the new animation so that the sprite is facing in the opposite direction.\n-   Rename your new animation.\n-   Inside the `movePlayer` function, set the sprite's animation so that the player changes the direction it is facing when the \"left\" and \"right\" arrows are pressed."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/8": {
    "long_instructions": "# Touching the Cake\n\nIf the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.\n\n# Do This\n\n-   Inside the `enemiesTouchCake` function, use a conditional to detect whether enemy1 has touched the cake.\n-   If it has...\n    -   \"loop\" the enemy back to the left side of the screen\n    -   Set its y position to be a random number between 150 and 250. \n    -   Use the counter pattern to decrease the score by 2.\n-   Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/9": {
    "long_instructions": "# Touching the Cake: Second Ladybug\n\nYour first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.\n\n# Do This\n\nInside the `enemiesTouchCake` function you should have written code that resets `enemy1`.\n\n-   Copy the entire if-statement you wrote in the last level (Ctrl-C).\n-   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\n-   Change the name of the sprite in that code from `enemy1` to `enemy2`.\n\nTest your code. Now both bugs should reset when they touch the cake."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/10": {
    "long_instructions": "# Creating Functions\n\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png\" style=\"float:right; height:90px\">\n\nYour program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.\n\n# Do This\n\n<img src=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png\" style=\"\nfloat:right; height:70px\">\n\n-   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.\n-   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.\n-   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/11": {
    "long_instructions": "# Displace Enemies\n\nIt's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.\n\n# Do This\n\nFor this level you'll be writing code inside the `displaceEnemies` function.\n\n-   Write code that makes player displace both enemy sprites.\n-   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.\n\n_Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/12": {
    "long_instructions": "# Touching the Water\n\nThe last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.\n\n# Do This\n\nFor this level you'll be writing code inside the `enemiesTouchWater` function.\n\n-   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:\n    -   use your `setEnemy1` function to reset the sprite.\n    -   add 1 to the score.\n-   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.\n-   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use."
  },
  "https://studio.code.org/s/csd3-2021/lessons/25/levels/13": {
    "dsls": {
      "description": "\nMake It Your Own\nYou just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?",
      "display_name": "Challenges"
    },
    "sublevels": {
      "CSD U3 AnimationsMulti defender background_2021": {
        "display_name": "High Score Background",
        "bubble_choice_description": "Create a new background that shows up when players reaches a good score of your choosing",
        "long_instructions": "# High Score Background\r\n\r\nCreate a new background that shows up when players reaches a good score of your choosing. (e.g. Turn the background pink when the player gets over 10 points)\r\n\r\n# Do This\r\n* When drawing the background, add an if else statement to check if the score is above some number like 10\r\n* Put the normal background in the else branch\r\n* Draw a different background if the score is above that number",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender randomizespeed_2021": {
        "display_name": "Randomize Enemy Speed",
        "bubble_choice_description": "Randomize the speed of the enemies",
        "long_instructions": "# Randomize Enemy Speed\r\n\r\nUse random numbers to make some enemies faster or slower\r\n\r\n# Do This\r\n\r\n* Create two variables to store the speed of `enemy1` and `enemy2`\r\n* Set the velocity of the two enemies using the two speed variables\r\n* When you create each enemy, generate a random speed",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender changevisuals_2021": {
        "display_name": "Change the Visuals",
        "bubble_choice_description": "Change the visuals of the game so that your player, enemies, or cake look different",
        "long_instructions": "# Change the Visuals\r\n\r\nChange the visuals of the game so that your player, enemies, or cake look different.\r\n\r\n# Do This\r\n\r\n* Change the player's sprite\r\n* Change the enemy's sprite\r\n* Change the cake's sprite",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      },
      "CSD U3 AnimationsMulti defender endgame_2021": {
        "display_name": "End the Game",
        "bubble_choice_description": "End the game after three enemies have gotten to the cake.",
        "long_instructions": "# End the Game\r\n\r\nEnd the game when three enemies get to the cake and print the score.\r\n\r\n# Do This\r\n\r\n* Create a variable that keeps track of how many enemies have gotten to the cake.\r\n* Use a conditional to check whether an enemy has gotten to the cake.\r\n   * If it has, increase your variable.\r\n* Use a conditional to check whether the value of your variable has reached three.\r\n   * If it has, cover the game with an end screen that displays the final score.\r\n",
        "teacher_markdown": "This last level encourages students to make the game their own. If students have made their way to this point they have all the skills they need to progress through the curriculum, so there is no pressure to complete any of the modifications suggested in this level. If you have time, however, getting practice planning and implementing new features will be a useful skill. Even just modifying the animations of the game is an easy way students can make the game their own."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/1": {
    "display_name": "Sample Platform Jumper Game",
    "long_instructions": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Build a Platform Jumper\n\nAs you build your platform jumper, you'll be using the problem solving process.\n\n## Define\n\nThe problem is clearly defined for this game, because you already looked at a sample version.  However, you might want to make some changes.   Make sure any new features for your game are clearly defined.\n\n## Prepare\n\nBefore you start to code, you need to fill out a project guide.  It will get you ready and make the coding a lot easier.\n\n## Try\n\nYou'll try out your plan when you start coding.  Don't forget all of your resources, such as the documentation and Help and Tip tab, as you begin to code.\n\n## Reflect\n\nAfter finishing your project, you'll want to reflect on whether your game turned out how you planned, and ways that you could improve your process for the next time.\n"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/3": {
    "long_instructions": "# Background\n\nThe first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where][0])\n\nIn order for the background function to do something, you have to call it inside the draw loop. ([Show me where][1])\n\nThere is also an empty function named `background2`. ([Show me where][2])  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.\n\n# Do this\n\n-   Read the code for `background1`.\n-   Fill the `background2` function with new code for a second background.\n-   Test your `background2` function by calling it inside the draw loop.\n\n_Hint: It's much easier to copy, paste, and make small changes to your code in text mode._",
    "callouts": {
      "CSD_U3_L16_S3_C1": "the function that draws the background",
      "CSD_U3_L16_S3_C2": "the code that calls the function",
      "CSD_U3_L16_S3_C3": "Change this function."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/4": {
    "long_instructions": "# Score Variable\n\nNow that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.\n\nYou should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.\n\n# Do This\n\n-   Create a score variable at the beginning of your game program. ( [Show me the block][0] )\n-   Set the score equal to 0.",
    "callouts": {
      "callout": "This block creates a variable."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/5": {
    "long_instructions": "# Choosing your Background\n\nNow that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 24 Level 9][0]\n\n# Do This\n\n-   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.\n-   Test your code by changing the start score to 100, then running to code to see whether the background changes.\n\n_Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/6": {
    "long_instructions": "# Make the Scoreboard\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\" style=\"float:right;\">\n\nYou'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text \"Score\" and not the actual score. ([Show me where][0])  You can see an example of a working scoreboard in [Lesson 24 Level 9][1].\n\n# Do This\n\n-   Read the code in the `showScore` function.\n-   Call the function inside the draw loop, right after you draw the backgrounds.\n-   Use the `text` block to display the score at the top of the screen.",
    "callouts": {
      "CSD_U3_L17_S7_C1": "Score is printed here."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/7": {
    "long_instructions": "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\" style=\"float: right;\"> \n\nNow that you have your background and your variables, it's time to create your sprites.  Usually, it will be easiest to start with the sprites that are part of the environment, such as your platforms.  The sample game had two platform sprites, but you'll make just one first, then test it before copying and pasting the code to make the second.\n\n# Do This\n\n-   Look at your worksheet and choose a platform sprite to create.\n-   In the \"Create sprites\" area at the top of your code, create your new sprite with the `createSprite` block, giving it the correct position and label (name). ([Show me the block][0])\n-   Use the `setAnimation` and `velocityY` blocks to give your sprite the correct image and downward velocity.\n-   Test the sprite to make sure that it's moving in the correct way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go off the screen and not come back.  You'll make it loop back around in the next level._",
    "callouts": {
      "CSD_U3_S17_L8_C1": "This block creates a new sprite."
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/8": {
    "long_instructions": "# Loop the Platform Sprite\n\n<img src=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\" style=\"float: right;\">\n\nRight now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 20 Level 6][0] to see an example of a sprite looping around a screen.\n\n# Do This\n\n-   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.\n-   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.\n-   Call the function inside the draw loop, in the \"update sprites\" area.\n-   Run the code to test your sprite.\n\n_Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_"
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/9": {
    "long_instructions": "# Make your Second Platform\n\n<img src=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\" style=\"float:right;\">\n\nMaking a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"platform\", you could name this one \"platform2\".\n-   Change the starting position of your new platform sprite.\n-   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it.\n\n_Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._"
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/10": {
    "long_instructions": "# Create an Item\n\n<img src=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\" style=\"float:right;\">\n\nNext, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.\n\n# Do This\n\n-   Use the `createSprite` block to make an item sprite in the \"create sprites\" section of your code.\n-   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.\n-   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/11": {
    "long_instructions": "# Loop your Item\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\" style=\"float:right\">\nNow that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.\n\n# Do This\n\n-   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.\n-   Call the function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/12": {
    "long_instructions": "# Make your Second Item\n\n<img src=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\" style=\"float: right\">\n\nNext, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.\n\n# Do This\n\n-   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n-   Change the names of the sprite in the new lines.  For example, if you named your original sprite \"star\", you could name this one \"star2\".\n-   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n-   Change the sprite name in the new lines of code.\n-   Run your code to test it."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/13": {
    "long_instructions": "# Create your Player\n\n<img src=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\" style=\"float:right\">\n\nNow you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.\n\n# Do This\n\n-   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.\n-   Use `setAnimation` to give it the correct image.\n-   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 21 Level 4][0].\n-   Call the `playerFall` function inside the draw loop.\n-   Run the code to test your sprite."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/14": {
    "long_instructions": "# User Controls\n\nNext, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.\n\n# Do This\n\n-   Create a new `controlPlayer` function in the \"functions\" area of your code.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys. Look at [Lesson 15 Level 7][0] for examples.\n-   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed. Look at [Lesson 20 Level 5][1] for examples.\n-   Call the `controlPlayer` function inside the draw loop.\n-   Run the game and test your code."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/15": {
    "long_instructions": "# Player Interactions\n\nThe last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.\n\n# Do This\n\n-   Create a `playerLands` function and add it to the \"functions\" area of your code.\n-   Inside the function, use the `collide` block so that your player can land on both the platforms.\n-   Call the function inside the draw loop.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/16": {
    "long_instructions": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n-   Create a `collectItems` function and add it to the \"functions\" area of your code.\n-   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n-   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 24 Puzzle 10][0] for an example.\n-   Call the function inside the draw loop, in the \"update sprites\" area of your code.\n-   Run the code to test your function."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/17": {
    "display_name": "Improve Your Game",
    "long_instructions": "# Review Your Game\n\nLook over your project guide, and play your game a few times to make sure you have completed everything.\n\n-   Does the player sprite move the way it should?\n-   Do all of your interactions work?\n-   Are the platforms moving correctly?\n-   Does the scoreboard work?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/18": {
    "display_name": "Plane Jumper",
    "long_instructions": "# Plane Jumper\n\nHere's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.\n\nChoose one or more of the following changes and add them to your game.\n\n-   Choose new animations for your player, platform, and items.\n-   Make it impossible for your player to go off the left or right of the screen.\n-   Add a different type of item for the player to collect or avoid.\n-   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/19": {
    "display_name": "Bunny Jumper",
    "long_instructions": "# Bunny Jumper\n\nHere's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.\n\nChoose one or more of the following changes and add them to your game.\n\n-   Make your player's animation change direction when the player changes direction.\n-   Add another background and make it appear when the score gets even higher.\n-   Make your items interact with the platforms in some way."
  },
  "https://studio.code.org/s/csd3-2021/lessons/26/levels/20": {
    "dsls": {
      "description": "Improve your game with these challenges!",
      "display_name": "Challenges"
    },
    "sublevels": {
      "CSD U3 platform challenge animationfacing_2021": {
        "display_name": "Animation Change Direction",
        "bubble_choice_description": "Make your player's animation change direction when the player changes direction.",
        "long_instructions": "<img style=\"float: right\" src=\"https://images.code.org/ffa1fc4ceadb146f2054bb0d36fb62fd-image-1589999874975.16.18 PM.png\" width=\"75\">\r\n<img style=\"float: right\" src=\"https://images.code.org/5ee1e16f1d5434da20814f179cfadce2-image-1589999867082.16.07 PM.png\" width=\"100\">\r\n\r\n# Animation Change Direction\r\n\r\nThe Animation tab lets you duplicate sprite animations and make changes such a flipping images horizontally. Locate and experiment with the options shown here for yourself.\r\n\r\nYou can make your player's animation change the direction it faces with the player's left-to-right movement.\r\n\r\n# Do This\r\n- Prepare an animation for facing the player to the left and the right. Name each animation in a way that makes sense to you.\r\n- Within your `controlPlayer` function, add code to:\r\n  - Switch to the \"left\" animation if the left key is pressed.\r\n  - Switch to the \"right\" animation if the right key is pressed."
      },
      "CSD U3 platform challenge lives_2021": {
        "display_name": "Adding Lives",
        "bubble_choice_description": "Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.",
        "long_instructions": "# Adding Lives\r\n\r\nYou can add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\r\n\r\n# Do This\r\n- Create a variable such as a `lives` and give it a starting value like 3.\r\n- Draw text to the screen to show the label `\"Lives: \"` and the value of `lives`.\r\n- Check for the player's y position to be off the screen (`player.y > 400`) and subtract one from the score.\r\n- Extra challenge: Check for 0 lives left and change the sprites or background to show the game has ended."
      },
      "CSD U3 platform challenge differentitem_2021": {
        "display_name": "New Item",
        "bubble_choice_description": "Add a different type of item for the player to collect or avoid.",
        "long_instructions": "# Different Kind of Item\r\n\r\nYou can add a different type of item for the player to collect or avoid.\r\n\r\n# Do This\r\n- Draw or find a new animation for your item.\r\n- Create a new sprite with the animation. It should start a randomized location.\r\n- Adjust the item's velocity to get it moving.\r\n- Program a new interaction inside the `collectItems` function."
      },
      "CSD U3 platform challenge sidewalls_2021": {
        "display_name": "Side Walls",
        "bubble_choice_description": "Prevent your player from going off the side of the screen.",
        "long_instructions": "# Edge Sprites\r\n\r\nThe special command `createEdgeSprites();` creates four large sprites around the border of the screen hidden just out of view. After creating these sprites you can program your other sprites to collide with them, which is an easy way to keep things from moving off the screen!\r\n\r\n![](https://images.code.org/54a4a0d9d8168cd5363316a67d7a6e23-image-1589992067763.gif)![](https://images.code.org/14d133db384e5e45ee7f25dfad3c1241-image-1589991471283.gif)\r\n\r\n*Edge sprites (left) and a collision with edge sprites (right)*\r\n# Do This\r\n- Use the `createEdgeSprites();` command in the main part of your program where you create your other sprites.\r\n- Create a new function called `sideWalls();` that should:\r\n  - Make the player sprite **collide** with the special hidden sprite named `leftEdge`.\r\n  - Make the player sprite **collide** with the special hidden sprite named `rightEdge`.\r\n- Call the `sideWalls();` function somewhere inside your **draw loop**.\r\n\r\n\r\n\r\n"
      },
      "CSD U3 platform challenge animations_2021": {
        "display_name": "Add New Animations",
        "bubble_choice_description": "Give your game a custom theme by giving your sprites new animations.",
        "long_instructions": "# Add New Animations\r\n\r\nGive your game a custom theme by giving your sprites new animations. You can draw your own or select from the ones in Game Lab.\r\n\r\n# Do This\r\n- Give your character a new animation.\r\n  - You can even create a left facing and right facing animation.\r\n- Give the platforms a new animation.\r\n- Give the collectibles a new animation."
      }
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/1": {
    "dsls": {
      "content1": "description here",
      "markdown": "# Create your own game\n\nNow that you have all the skills you need, it's time to make your own game!\n\nWith a partner, brainstorm some different ideas for your game.  You can think about the games you've already seen, or look at some more sample games to give you ideas.\n\n[<img src=\"https://images.code.org/fc2d4cdba80a476b1ff476081991031e-image-1498594631779.png\" style=\"width: 200px; float: left; margin: 10px;\">](https://studio.code.org/projects/gamelab/AwDcX5nehOApfzyywI6BOLT1xbf0MIV1dUj8KjQaNtA)\n\n[<img src=\"https://images.code.org/b89895bdd43be4b729ca9165fc2923cf-image-1498595512898.28.24 PM.png\" style=\"width: 200px; float: left; margin: 10px;\">](https://studio.code.org/projects/gamelab/r9OYVTSj2od8vaCA-nKikTVpx-2Co8qHhuZiBIu30JA)\n\n[<img src=\"https://images.code.org/d430061caab264330da0227b53e2db90-image-1498595505047.27.59 PM.png\" style=\"width: 200px; margin: 10px;\">](https://studio.code.org/projects/gamelab/hAz7RSdqc0c_MSQVUpvz1XrLDr8QLsansWDVI0ZberQ)\n\n[<img src=\"https://images.code.org/c9fb241c5684e10d9ba2b85d4d4a906b-image-1498764384615.25.58 PM.png\" style=\"width: 200px; margin: 10px;\">](https://studio.code.org/projects/gamelab/DmRPNYR3n7bMO--_KkP7r6mOoGynBVyi3BMVPWDiVeI)\n\nOnce you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game.  You'll spend the next few levels creating your game.\n"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/2": {
    "long_instructions": "# Create your Variables\n\nFirst, you'll need to create all of your variables and put them in the variables area of your code.\n\n-   [Show me the block][0]\n-   [Show me the area in the code][1]\n\nDon't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.",
    "callouts": {
      "CSD_U3_S18_L3_C1": "This block creates a new variable.",
      "CSD_U3_L18_S3_C2": "Variables area"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/3": {
    "long_instructions": "# Create your Backgrounds\n\nNext, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.\n\n-   [Show me the block to create a new function][0]\n-   [Show me the area in the code to put my function][1]\n\nAfter you create your functions, test them by calling them inside the draw loop, one background per test.\n\n-   [Show me the block to call my function][2]",
    "callouts": {
      "CSD_U3_S18_L4_C1": "This block calls your function.",
      "CSD_U3_L18_S4_C2": "Functions area"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/4": {
    "long_instructions": "# Display Boards\n\nNow that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 24, Level 9][0] for an example of how to make a scoreboard.\n\nFor each display board:\n\n-   Create a function to display the information\n-   Call the function in the draw loop\n\nBe sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/5": {
    "long_instructions": "# Choose your Backgrounds\n\nNow that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 24 Level 9][0].\n\nAfter you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/6": {
    "long_instructions": "# Create your Animations\n\nNext you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/7": {
    "long_instructions": "# Create your Sprites\n\nNext you will create your sprites and give them starting properties in the \"Create Sprites\" area of your code.  For each sprite your should:\n\n-   Create the sprite in the correct place on the screen\n-   Set its animation (or color and size)\n-   Set its velocity and rotation speed, if needed\n-   Set its collider and bounciness, if needed\n\nAfter you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.\n\nIf your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/8": {
    "long_instructions": "# Sprite Movement Functions\n\nNow you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 26 Puzzle 9][0] and `playerFall` in [Lesson 26 Puzzle 14][1].\n\nFor each movement:\n\n-   Create a function that will make the sprite move in that way\n-   Call the function inside the draw loop"
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/9": {
    "long_instructions": "# User Controls\n\nNext, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 26 Puzzle 13][0] as an example."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/10": {
    "long_instructions": "# Sprite Interactions\n\nThe last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 26 Puzzle 17][0] and `displaceEnemies` in [Lesson 25 Puzzle 12][1] as examples.\n\nFor each interaction:\n\n-   Create a function in the functions area of your code\n-   Call the function inside the draw loop\n\nAfter you make each function, run the code to test it before making another."
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/11": {
    "display_name": "Project - Finishing Touches",
    "long_instructions": "# Review Your Game\n\nLook over the rubric and your project guide to make sure your game has everything it needs.\n\n-   Have you included comments in your code?\n-   Do you use functions to organize your code and make it easier to read?\n-   Do the functions and variables have meaningful names?\n-   Are you using conditionals and sprite interactions to make the game more interesting?"
  },
  "https://studio.code.org/s/csd3-2021/lessons/27/levels/12": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    }
  },
  "https://studio.code.org/s/csd3-2021/lockable/1/levels/1": {
    "dsls": {
      "title": "Interactive Animations and Games Post-Project Test"
    }
  },
  "https://studio.code.org/s/csd3-2021/lessons/28/levels/1": {
    "dsls": {
      "markdown": "# CS Discoveries Post-Course Survey\n\n**Your input and feedback is important to us!** We use it to:\n\n* understand your experience\n* make improvements to the course\n\nThanks for taking the time to help make CS Discoveries even better!\n\n<a class=\"btn btn-large btn-success\" href=\"/s/csd-post-survey-2021/lockable/1/levels/1/page/1\" target=\"top\">Click here to complete the CS Discoveries Post-Course Survey</a>\n\n(opens in a new tab)\n\n<br>\n\n\n\n\n\n",
      "teacher_markdown": "This level appears at the end of every unit. **Please have your students complete this survey at the end of their final unit!** Students only need to take the survey once at the end of the course.\n\n* The results are vital for us (code.org) to sustain our courses and make improvements.\n* There will be a teacher survey as well where you can provide your own input. You will be notified via email about the teacher survey.\n\n**Instructions for Unlocking the Survey for Students:** [[google doc](https://docs.google.com/document/d/170NdiEBwcLEsLHQqgPy_zdNKFZfO-rS9aCAFCcEYhzY/view)] [[pdf](https://docs.google.com/document/d/170NdiEBwcLEsLHQqgPy_zdNKFZfO-rS9aCAFCcEYhzY/export?format=pdf)]\n\nIf students click the link and see an error message about the survey being locked, please follow the steps in the instructions above to unlock the survey for students.\n\n\n"
    }
  }
}