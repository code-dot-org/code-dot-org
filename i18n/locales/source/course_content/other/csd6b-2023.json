{
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/1": {
    "display_name": "Video: Getting Started"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/2": {
    "display_name": "Change Screen Color",
    "long_instructions": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54 AM.png\" style=\"height:150px\"> \n</div>\n\n**Goal:** Make the screen green. \n\n**How:** Drag in a `setProperty()` block. Use the dropdowns to set the screen's `\"background-color\"` to `\"green\"`. Then hit \"Run\".\n\n**Stuck? Click here:** [expandable][0]",
    "callouts": {
      "applab_hoc_finish": "Did the screen turn green? If so, hit 'Finish'. If not, hit 'Reset', change your code, and hit 'Run' again."
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/3": {
    "display_name": "Change Text",
    "long_instructions": "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:200px;\">\n</div>\n\n**Goal:** Make the text bigger and blue.\n\n**How:**  You'll need two lines of code. Give `\"label1\"` a `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/4": {
    "display_name": "Two Buttons",
    "long_instructions": "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png\" style=\"height:200px\">\n</div>\n\n**Goal:** Make the buttons `\"red\"` and `\"blue\"`. Then change the text in the large orange label.\n\n**How:** \n\n-   Remember you can hover over elements to see their `\"id\"`.\n-   Set the `\"background-color\"` of the buttons to `\"red\"` and `\"blue\"`.\n-   Set the `\"text\"` property of the label to anything you want, like `\"Welcome to my app!\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/5": {
    "display_name": "Video: Make It Interactive"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/6": {
    "display_name": "Make Buttons Work",
    "long_instructions": "<img src=\"https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif\" style=\"float:right;height:200px\">\n\n**Goal:** The screen will start out blue. Add code so it turns green when you click the \"Green-ify\" button.\n\n**How:** Add code inside the `onEvent()` that sets the screen's `\"background-color\"` to `\"green\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/7": {
    "display_name": "More onEvent Practice",
    "long_instructions": "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\" style=\"float:right;height:200px\">\n\n**Goal:** Help finish this flashlight app. The \"On\" button already turns the screen white. Run the app and try it out. Then write code so the \"Off\" button makes the screen black again.\n\n**How:** Add code inside the empty `onEvent()` that sets the `\"background-color\"` of the screen to `\"black\"` and `\"text-color\"` of the label to `\"white\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/8": {
    "display_name": "Video: Images and Sounds"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/9": {
    "display_name": "Using playSound",
    "long_instructions": "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52 AM.png\" style=\"float:right;height:200px\">\n\n**Goal:** This sound board is almost done! Run it to see how it works. Then add an image, text, and sound to the last button.\n\n**How:** \n\n-   Add an `onEvent()` to the program and set the \"id\" to `\"button4\"`. Drag a `playSound()` into the `onEvent()` and choose a sound from the library. \n-   Add a `setProperty()` (outside your `onEvent()`) to change the button's `\"image\"` property. Choose an image using the third dropdown.\n-   Add one more `setProperty()` to change the button's `\"text\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/10": {
    "display_name": "Video: Design Mode"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/11": {
    "display_name": "This Or That",
    "long_instructions": "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add a second button to the screen that says \"Right!\" with an `\"id\"` of `\"rightButton\"`.\n\n**How:** In Design Mode drag in a new button. Position and resize it. Then set its `\"id\"`, `\"text\"`, `\"background color\"`, and `\"font size\"`.\n\n**Stuck? Click here:** [expandable][0]",
    "callouts": {
      "AppLabHoCFinal11": "You're now in Design Mode."
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/12": {
    "display_name": "This Or That",
    "long_instructions": "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Create a new screen called `\"rightScreen\"`. Add a text label that says \"You went right!\".\n\n**How:** In Design Mode drag in a new screen element. Change its `\"id\"` to `\"rightScreen\"`. Then drag a label onto the screen and change the text to \"You went right!\".\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/13": {
    "display_name": "This Or That",
    "long_instructions": "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif\" style=\"float:right;height:200px\">\n\n**Goal:** The screen switches to `\"rightScreen\"` when the user clicks the `\"rightButton\"`.\n\n**How:** In Code Mode add a new `onEvent()` to your program for your \"Right!\" button. Add a `setScreen()` block inside of it that switches screens to `\"rightScreen\"`.\n\n**Stuck? Click here:** [expandable][0]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/14": {
    "display_name": "Video: Share Your App"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/1/levels/15": {
    "display_name": "This Or That",
    "long_instructions": "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18 PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05 PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40 PM.png\" style=\"float:right;height:200px\"></a>\n\n**Goal:** Build your own app by extending this project. Then \"Share\" it with someone!\n\n**How:** Decide what type of app you're interested in building. Then go build it by adding more screens, buttons, text, sound, and user interactions to your app. There's a few more blocks in the toolbox that you can experiment with as well. Once you're done click \"Share\" to send it to yourself or a friend! \n\n<details>\n\n<summary><b>Choose Your Own Adventure Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\" target=\"_blank\" rel=\"noopener noreferrer\">Example Choose Your Own Adventure App</a> so you can see how one works. Here's some ideas to help you come up with your own story.\n\n<li>Make an adventure about your favorite character, real or fictional.</li>\n<li>Make an adventure that tells the story of your favorite book, movie, or your own creation.</li>\n<li>Make an adventure that has a lot of unexpected twists or has a difficult moral choice.</li>\n<br>\n</details>\n\n<details><summary><b>Greeting Card Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\" target=\"_blank\" rel=\"noopener noreferrer\">Example Greeting Card App</a> so you can see how one works. Here's some ideas to help you come up with your own card.\n\n<li>Think of a birthday, holiday, or other special day that's coming up. Make a card to celebrate!</li>\n<li>Create a thank you card for someone you appreciate.</li>\n<li>Create an invitation for an upcoming event.</li>\n<br>\n</details>\n\n<details><summary><b>Personality Quiz Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\" target=\"_blank\" rel=\"noopener noreferrer\">Example Personality Quiz App</a> so you can see how one works. Here's some ideas to help you come up with your own quiz.\n\n<li>Make a quiz that suggests something a person might like, for example a meal, a team, a book, or a place.</li>\n<li>Make an quiz that \"predicts the future\" based on their answers.</li>\n<li>Make a quiz to help people make a hard decision.</li>\n\n</details>"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/2/levels/1": {
    "dsls": {
      "description": "Refer to your activity guide to recommend one of these prototype designs to each client based on their needs.",
      "display_name": "Physical Design Prototypes"
    },
    "sublevels": {
      "CSD U6 - Design - prototype1_2023": {
        "dsls": {
          "content1": "Prototype A",
          "markdown": "# Prototype A\n\n_\"This is a prototype for a traffic control light. It can be used in situations where a traffic light is broken or the power is out somewhere. The controller presses the Stop and Go buttons which light up the different colored lights\"_\n\n![](https://images.code.org/abe4d34a23dfa3639954a1949294c67a-image-1679090944337.png)\n"
        }
      },
      "CSD U6 - Design - prototype2_2023": {
        "dsls": {
          "content1": "Prototype B",
          "markdown": "# Prototype B\n\n_\"This is a prototype for plant health monitor. You put a sensor into a potted plant and it sends data back to an app on your phone. The app tells you information about the environment using the sensor, and then you can decide if the plant needs care or attention.\"_\n\n![](https://images.code.org/c1951365031ad4ecc5bfb8d2d8cf4bf2-image-1679091114002.png)\n"
        }
      },
      "CSD U6 - Design - prototype3_2023": {
        "dsls": {
          "content1": "Prototype C",
          "markdown": "# Prototype C\n\n_\"This is a prototype for adding lights and screens to your clothing. You put a screen or some lights into a hat which is connected to an app or buttons in the shirt pocket. When you press buttons, it changes what the lights look like on the clothing.\"_\n\n![](https://images.code.org/a2aae3cb736074696c2a0e630120c9cb-image-1679091222479.png)\n"
        }
      },
      "CSD U6 - Design - prototype4_2023": {
        "dsls": {
          "content1": "Prototype D",
          "markdown": "# Prototype D\n\n_\"This is a prototype for a night light. It uses a sensor to detect when the room is bright or dark. If the room is bright, the night light turns off, and if the room is dark then the night light turns on.\"_\n\n![](https://images.code.org/e0ab1eb4d859b0b74ae5bfa5b51a9abb-image-1679091317359.png)\n"
        }
      },
      "CSD U6 - Design - prototype5_2023": {
        "dsls": {
          "content1": "Prototype E",
          "markdown": "# Prototype E\n\n_\"This is a prototype for a device that lets you control a digital monster pet on your phone. The pet goes through different moods and emotions, and you have to decide how you want to interact with it by pressing buttons. Depending on what button you press, the monster will react in a different way!\"_\n\n![](https://images.code.org/366628bbab217dbd12d294f0d427904e-image-1679091394146.png)\n"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/2/levels/2": {
    "dsls": {
      "title": "Creating Apps with Devices Student Pre-Survey"
    },
    "sublevels": {
      "devices-pre-survey-preamble 1_mb2022": {
        "dsls": {
          "markdown": "### **This survey is anonymous**\n\n* This short survey thing should take **2 minutes or less** to complete.\n* Code.org takes your privacy very seriously.\n* Your responses here will be kept **anonymous**. \n\nYour teacher will see the aggregated responses for the whole class, but won't be able to identify your individual responses\n\nWe do this because we want you to **be as open and honest as possible** . We care about your experience in the course, and we make improvements based on what you say.\n\n***\n### School in general### \n",
          "teacher_markdown": "Why is this survey here?\n* A major goal of this course is to broaden participation in computer science.\n* We attempt to measure how students' attitudes and beliefs about computer science might change during the course through pre and post-surveys.\n* Completing it also helps us understand important improvements we can make to the curriculum to improve the teacher and student experience.\n* Lastly, this data can be helpful for **you** in understanding the students in your room, especially when compared to the post-survey where similar questions are asked.\n\nYou will be able to see the anonymized results of the survey for your students.\n"
        }
      },
      "csp-pre-survey-2017-q4_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "It is important for me to be good at my schoolwork."
            }
          ]
        }
      },
      "interested-in-learning-cs_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I am interested in learning computer science."
            }
          ]
        }
      },
      "confident-ability-to-learn_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I am confident I have the ability to learn computer science."
            }
          ]
        }
      },
      "csp-pre-survey-2017-q31_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future."
            }
          ]
        }
      },
      "csp-pre-survey-2017 preamble 5 demographics_mb2022": {
        "dsls": {
          "markdown": "### Your background in computer science\n"
        }
      },
      "ever-learned-cs-outside-school_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Yes, an after school program",
              "correct": true
            },
            {
              "text": "Yes, independent online activities",
              "correct": true
            },
            {
              "text": "Yes, a camp or summer program",
              "correct": true
            },
            {
              "text": "No, I have never done computer science outside of school",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Have you ever learned any computer science <em>outside of school</em> before? (if yes, please choose your most recent experience)"
            }
          ]
        }
      },
      "csp-pre-survey-2017-q20_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I will feel comfortable in this computer science class."
            }
          ]
        }
      },
      "csp-pre-survey-2017-q22_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I expect that at times I'll feel unsure whether I belong in this class."
            }
          ]
        }
      },
      "will-be-myself-in-cs_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I will really be able to be myself in this computer science class."
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/1": {
    "long_instructions": "# Test Your Board\n\nThis level is just a quick test to make sure your board is working. To run this test, do the following:\n\n1.  Plug your board into your computer with a USB cable\n2.  Click \"Run\"\n3.  Wait a few seconds for either a Success or Error screen to pop up\n4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps\n\n## Troubleshooting\n\nThere are a number of things that could prevent your test from passing.\n\n1.  Open the Help and Tips tab, then click Maker Setup to open the setup page and connect your device to the browser.\n2.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)\n3.  Try connecting your board to a different USB port\n4.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!\n5.  Try a different board"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/2": {
    "long_instructions": "Embedded Prediction",
    "teacher_markdown": "When the button on the screen is clicked, the code will turn on one of the LEDs on the `ledScreen`. Students may predict that one of the \"corners\" will turn on, but will surprised to see that one of the LEDs one-level in turns on instead. This is because the `ledScreen` starts at index `0` - if we wanted to turn on the corner, we should use `ledScreen(0, 0)`.\n\nStudents may also be unsure which corner will illuminate and may be surprised to see the upper-left corner illuminate. This is because the `ledScreen` starts in the upper-left corner with `(0, 0)`. Students will soon receive a resource they can use to keep track of the positions of the LEDs on the micro:bit.",
    "contained levels": [
      {
        "long_instructions": "# Using Events\n\nLook at the code with a partner and discuss what you think it will do. Once you have answered the question click \"Run\" to see the program's result. Make sure your micro:bit is plugged in."
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/3": {
    "long_instructions": "<div style=\"float:right;\" markdown=1> \n\n[expandable][0] \n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Using Events\n\nThis program has two buttons. The \"left eye\" button works, but the \"right eye\" button still needs to be programmed.\n\n# Do This\n\n1.  Add code to turn on another LED on the right side of the `ledScreen`\n    -   Drag out an [`ledScreen.on()`(#f78183)][1] block and change the values to `(3, 1)`.\n\n**Run your code!** Pressing the buttons should turn on two LEDs, as if they're the eyes of your micro:bit. In the next few levels, we'll add a mouth to the micro:bit!\n\n**Having connection issues?** Try re-connecting at the [Maker Setup Page][2]"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/4": {
    "long_instructions": "<div style=\"float:right;\" markdown=1> \n\n[expandable][0] \n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Blink the Eyes\n\nThis program is similar to the last level, but uses the [`ledScreen.toggle()`(#f78183)][1] block. This turns an LED on or off whenever the button is clicked. This can help make it seem like the eyes on the `ledScreen` are \"blinking\".\n\nThe code has already been started for you - the left eye already toggles on and off. Update the code so the right eye does the same.\n\n# Do This\n\n1.  Add code to toggle the right side of the `ledScreen`\n    -   Drag out an [`ledScreen.toggle()`(#f78183)][2] block and change the values to `(3,1)`.\n\n**Run your code!** Press each button multiple times - the LEDs should turn on and off with each button press!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/5": {
    "long_instructions": "<div style=\"float:right;\" markdown=1> \n\n[expandable][0] \n\n<br/>\n\nClick to Expand\n\n</div>\n\n# More ledScreen Practice\n\nNow let's add a mouth to the face so the `ledScreen` looks like this:\n\n[][1]\n\n# Do This\n\n1.  Add code to turn on the LEDs to create a mouth\n    -   Drag out 5 [`ledScreen.on()`(#f78183)][2] blocks\n    -   Change the values in the blocks to light up the mouth on the bottom row\n        -   ::: details [**Show Me How**]\n            [][3]\n            :::\n\n**Run your code!** Pressing the buttons should create a face on your micro:bit!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/6": {
    "long_instructions": "embedded instructions",
    "teacher_markdown": "This code will scroll the text \"Hello World\" across the `ledScreen`. Students may not be sure what it does initially, but should be able to make sense of the block once they see the result on their micro:bit.",
    "contained levels": [
      {
        "long_instructions": "# Scrolling Block\n\nLook at the code with a partner and discuss what you think it will do. Once you have answered the question click \"Run\" to see the program's result. Make sure your micro:bit is plugged in."
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/7": {
    "long_instructions": "# Name Badge\n\nYou can use the [`ledScreen.scrollString()`(#f78183)][0] block to make text appear on your micro:bit. Let's use it to create a digital name badge!\n\n# Do This\n\n1.  Add code to make the micro:bit scroll your name across the `ledScreen`\n    -   Drag out a [`ledScreen.scrollString()`(#f78183)][1] block and type your name into the block\n\n**Run your code!** When you press the button, your name should scroll across the micro:bit!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/8": {
    "long_instructions": "# Roll the Dice\n\nYou can also use the [`ledScreen.scrollNumber()`(#f78183)][0] block to make numbers scroll across your micro:bit. Let's combine this with the `randomNumber()` block to simulate a dice roll!\n\n**Random Numbers:** The `randomNumber(low, high)` block generates a random number between the `low` and `high` values in the block, including both `low` and `high`. For example, `randomNumber(1, 4)` will generate a random number between 1 and 4 (ie: 1, 2, 3, or 4).\n\n# Do This\n\n1.  Add code to make the micro:bit generate a random number between 1 and 6\n    -   Drag out a [`ledScreen.scrollNumber()`(#f78183)][1] block\n    -   Drag out a `randomNumber` block into the [`ledScreen.scrollNumber()`(#f78183)][2] block\n    -   Type in `1` and `6` as the low and high values\n    -   ::: details [**Show me how**]\n        [][3]\n        :::\n\n**Run your code!** When you press the button, a random number should appear simulating a dice roll!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/9": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Board Outputs - PracA_mb2022": {
        "display_name": "Random LED",
        "bubble_choice_description": "Turn on random LEDs by pressing a button",
        "long_instructions": "<!--\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b6680c9d07ed56de86b398e83eab0656-image-1650056929215.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# Random LEDs\r\n\r\nWe're trying to create an app that turns on a random LED on the `ledScreen`, but something isn't work correctly. Can you figure out what the bug is?\r\n\r\n- **What I Expected to Happen:** When you press the button, a random LED on the `ledScreen` pops up\r\n- **What Happens Instead:** Only one LED turns on when you press the button\r\n\r\n## Do This\r\n\r\nUpdate the code below so a random LED turns on when you press the button",
        "teacher_markdown": "This level emphasizes how the `randomNumber` block works. Students need to correct each block to say `(0, 4)` to span the entire length of the `ledScreen`."
      },
      "CSD U6 - Board Outputs - PracB_mb2022": {
        "display_name": "Debugging!",
        "bubble_choice_description": "Help fix the bug in the code!",
        "long_instructions": "# Debugging\r\nSomething’s not quite right - read the code and see if you can fix it\r\n\r\n- **What I Expected To Happen:** Pressing the `on` button turns on the LED, and pressing `off` turns off the LED\r\n- **What Happened Instead:** The LED doesn't turn off even when you press the `off` button\r\n\r\n# Do This\r\n\r\nFix the code below so it matches the expected behavior!\r\n\r\n\r\n\r\n<!--\r\n\r\nWhat I expected to happen    | What happened instead\r\n----------                   |----------------\r\nThe buzzer makes a high-pitched   | The buzzer makes a low-pitched sound\r\nsound for a short amount of time  | for a long amount of time\r\n\r\n-->"
      },
      "CSD U6 - Board Outputs - PracC_mb2022": {
        "display_name": "Smile Face Debugging!",
        "bubble_choice_description": "Help find the bug in the code to create a smiley face!",
        "long_instructions": "# Debugging\r\n\r\nSomething's not quite right - read the code and see if you can fix it\r\n\r\n- **What I Expected To Happen:** When you click the happy icon, a happy face shows up in the `ledScreen`.\r\n- **What Happened Instead:** The mouth is flat and doesn't look like a happy face\r\n\r\n# Do This\r\n\r\nFix the code below so it matches the description!\r\n\r\n<!--\r\n\r\nWhat I expected to happen    | What happened instead\r\n----------                   |----------------\r\nline 1   | line 1\r\nline 2   | line 2\r\nline 3   | line 3\r\n\r\n-->"
      },
      "CSD U6 - Board Outputs - PracD_mb2022": {
        "display_name": "Accessible App",
        "bubble_choice_description": "Design an accessible app that communicates with both audio and visuals.",
        "long_instructions": "# Accessible Apps\r\n\r\nKapua has been asked to design an **accessible** app that allows the user to select from three choices: 1, 2, or 3. **Accessible** apps mean that anyone can use an app, especially folks with a disability such as an auditory or visual impairment. To help make the app accessible, Kapua needs to consider both _audio_ and _visual_ ways to communicate what the user selects. Kapua decides on the following strategy:\r\n\r\n- To communicate _visually_, she will have the number choice scroll across the `ledScreen`\r\n- To communicate _aurally_, she will play a sound representing the number choice\r\n\r\n# Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1. ::: details [When each button is pressed, scroll that number across the `ledScreen`]\r\n\t- Drag out a [`ledScreen.scrollNumber()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollNumber) block to each [`onEvent()`(#fff176)](/docs/ide/applab/expressions/onEvent) and type in the appropriate number.\r\n    :::\r\n    \r\n2. ::: details [When each button is pressed, play a sound representing the number]\r\n\t- Drag out a [`playSound()`(#fff176)](/docs/ide/applab/expressions/playSound) block to each [`onEvent()`(#fff176)](/docs/ide/applab/expressions/onEvent) and select a sound from the Sound Library. \r\n      - Try exploring the Female Voiceover and Male Voiceover sections.\r\n    :::\r\n\r\n"
      },
      "CSD U6 - Board Outputs - ChalB_mb2022": {
        "display_name": "New Language Translator",
        "bubble_choice_description": "Create an app that helps translate words into other languages when they click on items on the screen",
        "long_instructions": "<!-- <div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/3ace6b14a749b1454f909677a83ab17d-image-1650058728425.gif)\r\n\r\n<br/>\r\n\r\nClick to see example\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# Word Translator\r\n\r\nErin is creating an app that helps people learn words in different languages. When the user clicks on different items on the screen, the word for that item should scroll across the micro:bit in a different language. For example, clicking the \"Peach\" should scroll the word for peach in another language.\r\n\r\n## Do This\r\n1) Add an [`onEvent()`(#fff176)](/docs/applab/onEvent/) for each item on the screen\r\n2) Look up the word for this item in another language\r\n\t- If you know someone who speaks a different language, you can ask them!\r\n3) Use a [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to display the word for that item in another language\r\n\r\n**Run Your Code!** You should be able to click items on the screen and words will scroll across the `ledScreen`!"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/10": {
    "long_instructions": "<img src=\"https://images.code.org/2896ac58f26810e3a5f3b52917dc5eb4-image-1634318916183.png\" style=\"float:right; width: 100px; margin: 20px\" />\n\n# Virtual Monster Pet\n\nEva is trying to make an app that simulates a virtual monster pet. The app lets you control the monster in the following way:\n\n-   When you press the Happy button, the pet should make a happy face with the `ledScreen`\n-   When you press the Sad button, the pet should make a sad face with the `ledScreen`\n-   When you press the Name button, the name of the pet should scroll across the screen (you can decide the name!)\n-   When you press the Age button, the age of the pet should scroll across the screen (you can decide the age!)\n\nThe Happy button has already been coded - we need to add the code for the other three buttons!\n\n# Do This\n\n1.  Add code to the Sad button so it shows a sad face\n2.  Add code to the Name button so it scrolls its name across the screen\n3.  Add code to the Age button so it scrolls its age across the screen",
    "mini_rubric": {
      "rubric_key_concept": "Respond to user input using the ledScreen on the micro:bit\r\n",
      "rubric_performance_level_1": "All three buttons correctly matches the description of its emotion and the text and numbers correctly scroll on the screen\r\n",
      "rubric_performance_level_2": "Two buttons match the description from the program, but one button may not work correctly (such as not displaying a name correctly or not showing a sad face)",
      "rubric_performance_level_3": "One button matches the description from the program, but the other buttons may not work correctly (such as not displaying a name correctly or not showing a sad face)",
      "rubric_performance_level_4": "None of the new buttons match the description in the program"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/3/levels/11": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Board Outputs - ChalA_mb2022": {
        "display_name": "Ratings App",
        "bubble_choice_description": "Create an app that lets you respond with a rating",
        "long_instructions": "# Ratings App\r\n\r\nCreate an app that lets you respond to something - for example rating your own understanding of a topic, or rating anything around you. Your app should consider **accessiblity** and respond with both audio and visuals:\r\n\r\n- It should play a sound representing your rating\r\n- It should light up the `ledScreen` representing your rating\r\n\r\n# Do This\r\n\r\n1. Add code to represent the Happy response in your app. Remember that your representation should include both sound and visuals.\r\n2. Add code to represent the Meh response in your app. Remember that your representation should include both sound and visuals.\r\n3. Add code to represent the Sad response in your app. Remember that your representation should include both sound and visuals."
      },
      "CSD U6 - Board Outputs - ChalC_mb2022": {
        "display_name": "Yes / No Responder",
        "bubble_choice_description": "Create an app that lets the user respond with yes or no using sounds and images.",
        "long_instructions": "# Yes / No Buttons\r\n\r\nCreate an app that lets you respond to yes or no questions. The app should consider **accessibility**, which means providing responses with both audio and visuals:\r\n\r\n- For audio, the app should play a sound representing the user's choice\r\n- For visuals, the app should display an image on the `ledScreen`\r\n\r\n# Do This:\r\n\r\n1. Add code to represent the Yes response in your app. Remember that your representation should include both sound and visuals.\r\n2. Add code to represent the No response in your app. Remember that your representation should include both sound and visuals.\r\n\r\n**Run your code!** Try giving the micro:bit to your neighbor and asking them a yes or no question, then seeing if you can tell how they responded just by looking at the micro:bit and listening to the app."
      },
      "CSD U6 - Board Outputs - ChalF_mb2022": {
        "display_name": "LED Grid",
        "bubble_choice_description": "Create an app that controls the LEDs on the micro:bit using buttons on the app screen",
        "long_instructions": "# LED Grid\r\n\r\nCreate an app that lets the user turn on different LEDs by clicking buttons on a grid on the screen.\r\n\r\nThe app has already been started for you - continue the pattern to finish the app!"
      },
      "CSD U6 - Board Outputs - ChalD_mb2022": {
        "display_name": "Educational App",
        "bubble_choice_description": "Create an app prototype that could be used in an educational setting",
        "long_instructions": "# Education App\r\n\r\nCreate an app that uses the `ledScreen` that could be used in an educational setting. For example, you could make\r\nan interactive quiz app for revising any subject or topic. Add buttons with questions on the screen and scroll answers on the micro:bit’s LED display, so you can test yourself without sharing the answers on your screen.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Board Outputs - ChalE_mb2022": {
        "display_name": "Medical App",
        "bubble_choice_description": "Create an app prototype that could be used in a medical setting",
        "long_instructions": "# Medical App\r\n\r\nCreate an app that uses the `ledScreen` that could be used in a medical setting. For example, the app could ask the user to enter information about how they are feeling and then help them decide if they need medical attention by blinking or making sounds in a certain way.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/1": {
    "teacher_markdown": "Students are familiar with design mode to set up the user interface of their app, but this level introduces how to change design elements with code. Students can hover over elements to see their IDs and use that to inform their guesses. When they press Run, the code will run slowly and highlight each line as it runs so students can see step-by-step what each line does. This can be helpful when discussing their prediction and matching the result to specific lines of code.",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/1e226012bfa76c84938097e1ff117150-image-1579828841757.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/dc9e1f761ff6a95542f283e2c700f9f1-image-1579828841754.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/f89441dfc9260030feac9de3af2b7d3a-image-1579828841748.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/b82461e6219e023280c4e22df59071d4-image-1579828841751.png)",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Read the code and predict what this app will look like when run."
            }
          ],
          "title": "Make a Prediction"
        }
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/2": {
    "long_instructions": "# Changing Properties\n\nThe [`setProperty()`(#fff176)][0] block can be used to change lots of things about your design elements. We'll practice using [`setProperty()`(#fff176)][1] to update the look of a welcome screen for an app.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._\n\n# Do This\n\n1.  Look at the [`setProperty()`(#fff176)][2] block that is already in the code. This block updates the font used in the title.\n2.  Use another [`setProperty()`(#fff176)][3] block to update the background color of the title\n    -   For the first parameter, select \"title\" (the element's id)\n    -   For the second parameter, select \"background-color\" (the property you want to set)\n    -   For the third parameter, type in a color you would like to use. Make sure your color is in quotes.\n\n(Optional) Add more [`setProperty()`(#fff176)][4] blocks to update the look of your app"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/3": {
    "long_instructions": "# Changing Text\n\nYou can also change the text of elements on the screen using the [`setText()`(#fff176)][0] block. Let's update the app so it uses your name in the app.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty` and `setText`, but it'll come back later once you're building apps of your own._\n\n## Do This\n\n1.  Use a [`setText()`(#fff176)][1] block to update the app to display your name\n    -   Drag out a [`setText()`(#fff176)][2] block\n    -   For the first parameter, select \"nameLabel\" (the element's id)\n    -   For the second parameter, type in your name using quotes\n\n(Optional) Use [`setText()`(#fff176)][3] to change the greeting as well - for example, changing it to \"Howdy\" or \"Hola\" or \"你好\""
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/4": {
    "long_instructions": "# Changing Position\n\nEvery design element (except for the screen) has an \"x\" and a \"y\" property that controls its position. We can use these properties to re-position elements on the screen.\n\nThe App Lab screen is 320 pixels wide and 450 pixels tall.\n\n_Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._\n\n# Do This\n\n<div markdown=\"1\" style=\"float:right\">\n\n[expandable][0]\n\n</div>\n\n1.  Look at the image to the right (click to see the image in full size). We want to make our app match this picture\n2.  Look at the example code that moves the `greenButton` to the upper-right corner\n3.  Move \"redButton\" so it is in the upper-left corner\n    -   Use two [`setProperty()`(#fff176)][1] blocks to change the `x` and `y` properties of the `\"redButton\"` element"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/5": {
    "long_instructions": "# Changing With a Click\n\nIt's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an [`onEvent()`(#fff176)][0] block with [`setProperty()`(#fff176)][1], you're able to do things you couldn't do with Design Mode alone.\n\nIn this example, let's move the smiley icon to the center of the screen when it's clicked\n\n## Do This\n\n1.  When you click the smiley, move it to the center of the screen\n    -   Inside the [`onEvent()`(#fff176)][2] block: \n        -   use two [`setProperty()`(#fff176)][3] blocks to move the smiley to the center of the screen.\n        -   You'll need to update the `x` and `y` properties of the smiley icon.\n\n**Run Your Code!** Click the smiley and watch it move to the center of the screen!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/6": {
    "long_instructions": "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\" style=\"float:right; max-width: 150px; margin: 10px;\">\n\n# Randomization\n\nMoving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the [`randomNumber`(#FFB74D)][0] block to do just that.\n\n## Do This\n\n1.  Edit your code so it uses the [`randomNumber`(#FFB74D)][1] block inside the [`setProperty()`(#fff176)][2] blocks for the `x` and `y` properties.\n2.  Change the start and end values of [`randomNumber`(#FFB74D)][3] so the smiley will jump across the whole screen\n    -   _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall._\n\n**Run your code!** Every time you click the smiley, it should jump to a new random location"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Outputs - PracA_mb2022": {
        "display_name": "Change the Background",
        "bubble_choice_description": "Change the background of your app with a button",
        "long_instructions": "# Changing the Background\r\n\r\nCreate an app that changes the background color according to the button that is clicked\r\n\r\n## Do This\r\n\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) that changes the background color of `screen1` to the color on the button\r\n\r\n(Optional): Add your own button with your own color!"
      },
      "CSD U6 - Screen Outputs - PracB_mb2022": {
        "display_name": "Changing Icons",
        "bubble_choice_description": "Update the icon image with a button click",
        "long_instructions": "# Changing Icons\r\n\r\nCreate an app that changes the directon of the arrow in the center of the screen depending on the button the user presses.\r\n\r\n## Do This\r\n\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to each [`onEvent()`(#fff176)](/docs/applab/onEvent/) and set the id to `arrowImg`.\r\n3) Update the `image` property based on the direction that the arrow should be facing:\r\n\t- Up: `icon://fa-arrow-up`\r\n\t- Down: `icon://fa-arrow-down`\r\n\t- Left: `icon://fa-arrow-left`\r\n\t- Right: `icon://fa-arrow-right`"
      },
      "CSD U6 - Screen Outputs - PracC_mb2022": {
        "display_name": "Debugging",
        "bubble_choice_description": "Help fix the bugs so the app appears correctly",
        "long_instructions": "<img src=\"https://images.code.org/549ed406305bb6b2aad1f997324d5120-image-1640037426611.png\" style=\"width:200px; float:right;\">\r\n\r\n# Debugging\r\n\r\nErika wanted to practice using Text Mode to create an app that looks like the image on the right. When she finished, she tried running the app but she got a lot of errors. Can you fix all of the errors in the code so her app looks like the example app on he right?\r\n\r\n_Note: This level starts in Text Mode because some of the bugs are typos with the blocks themselves! As you fix the bugs, one way to check your work is by trying to convert the level back into block mode._"
      },
      "CSD U6 - Screen Outputs - PracD_mb2022": {
        "display_name": "Create a Rainbow",
        "bubble_choice_description": "Use code to change the colors and create a rainbow",
        "long_instructions": "<img src=\"https://images.code.org/b1e2547f7633d983ad4e405990f5665f-image-1645805592400.png\" style=\"width: 150px; float: right; margin: 10px\" />\r\n\r\n# Create a Rainbow\r\n\r\nThis app has seven labels on the screen. Change the background color of each label to be the colors of a rainbow:\r\n- Red\r\n- Orange\r\n- Yellow\r\n- Green\r\n- Blue\r\n- Indigo\r\n- Violet\r\n\r\n## Do This\r\n1) Add a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block for each label that changes the `background-color` to one of the colors of the rainbow\r\n\r\n**Run your code!** When you do, a rainbow should appear like the image on the right"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/8": {
    "display_name": "Emotion Machine",
    "bubble_choice_description": "Create an app that uses emoji faces to describe different emotions",
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to enlarge\n\n</div>\n\n# Emotion Machine\n\nCreate an app that lets you select different emotions to display on the screen using the emoji icons.\n\n## Do This\n\n1.  Add an event for when the user clicks the `happy` button\n    -   The happy emoji appears (`\"icon://fa-smile-o\"`)\n    -   The icon color changes to yellow\n    -   The text changes to \"Happy\"\n2.  Add an event for when the user clicks the `sad` button\n    -   The sad emoji appears (`\"icon://fa-frown-o\"`)\n    -   The icon color changes to blue\n    -   The text changes to \"Sad\"\n3.  Add an event for when the user clicks the `meh` button\n    -   The meh emoji appears (`\"icon://fa-meh-o\"`)\n    -   The icon color changes to gray\n    -   The text changes to \"Meh\"",
    "mini_rubric": {
      "rubric_key_concept": "Update properties and text of design elements using code",
      "rubric_performance_level_1": "The finished app matches the description, with each button correctly updating the icon and text",
      "rubric_performance_level_2": "The finished app is similar to the description, but has at most one element that is incomplete (for example, not updating the text or not updating the icon color)",
      "rubric_performance_level_3": "The finished app may have some elements that look correct, but most elements do not update correctly or the app is only partially completed.\r\n",
      "rubric_performance_level_4": "The app has not been updated to match the description"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/4/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Outputs - ChalA_mb2022": {
        "display_name": "Hidden Property",
        "bubble_choice_description": "Learn to use the hidden property to show and hide design elements",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b175cf70203490379ae3c36a97de21b4-image-1650058976738.gif)\r\n\r\n<br/>\r\n\r\nClick to enlarge\r\n\r\n</div>\r\n\r\n# Visibility\r\n\r\nDesign elements can be hidden from the user using the [`hideElement()`(#fff176)](/docs/applab/hideElement/) block, and then re-appear using the [`showElement()`(#fff176)](/docs/applab/showElement/) block. We are going to use these blocks to create an alarm app. \r\n\r\nWe have already set up an [`onEvent()`(#fff176)](/docs/applab/onEvent/) for the `triggerAlarmButton` which will do three things when clicked:\r\n\r\n* Set the text of `statusLabel` to \"On\"\r\n* Hides the `triggerAlarmButton`, since we just turned the alarm on\r\n* Shows the `stopAlarmButton`, so the user has the option to turn off the alarm\r\n\r\nBut, the app is not finished - pressing the `stopAlarmButton` doesn't actually turn off the alarm.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Run the program and click \"Trigger Alarm\" to see how it works\r\n2) ::: details [Using `triggerAlarmButton` as a model, add code so that pressing `stopAlarmButton` resets the alarm]\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `statusLabel` to \"Off\"\r\n    - Use [`hideElement()`(#fff176)](/docs/applab/hideElement/) to hide the `stopAlarmButton`\r\n    - Use [`showElement()`(#fff176)](/docs/applab/showElement/) to show the `triggerAlarmButton`\r\n    :::"
      },
      "CSD U6 - Screen Outputs - A_mb2022": {
        "display_name": "Recreate an App",
        "bubble_choice_description": "Without using Design Mode, recreate the design of an app using setProperty and setText blocks",
        "long_instructions": "<img src=\"https://images.code.org/a07b3130a5effc22efdd36a3400c8b7b-image-1634321815292.PNG\" style=\"float:right; height: 400px; margin: 10px;\" />\r\n\r\n# Recreate an App Using Code\r\n\r\nWithout using Design Mode and only using [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks, recreate the app on the right.\r\n\r\n## Additional Information\r\n\r\n* The image of Hedy Lamarr is from Pixabay. You can use this link in your code: `https://cdn.pixabay.com/photo/2013/07/13/09/36/hedy-lamarr-155765_960_720.png`\r\n* You can change the color of the icons using the `icon-color` property\r\n* The color of the background is `gold`"
      },
      "CSD U6 - Screen Outputs - ChalC_mb2022": {
        "display_name": "Theme Designer",
        "bubble_choice_description": "Create a custom App Lab theme for label and button elements on the screen",
        "long_instructions": "# Theme Designer\r\n\r\nSome app editors let you add themes to a design, which updates all of the labels and buttons on the screen. In this app, we're creating our own theme designer that we can use to test out different themes.\r\n\r\nAn example theme has already been coded, which updates the properties of the `label` and `button` on the screen. Your task is to design your own theme that updates the look of the app.\r\n\r\n## Do This\r\n\r\n1) Add code to the `myTheme` button that updates the look of the `screen1`, `label`, and `button` elements on the screen",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance."
      },
      "CSD U6 - Screen Outputs - ChalD_mb2022": {
        "display_name": "playSpeech",
        "bubble_choice_description": "Learn to use the playSpeech block by creating an \"About Me\" app",
        "long_instructions": "# playSpeech Block\r\n\r\nAnother way to generate output on the screen is using the [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) block. This block uses artificial intelligence and text-to-speech to read text aloud to the user. This can help make apps more accessible, especially for folks who are blind or visually impaired.\r\n\r\n## Do This\r\n1) Look at the example code in the `foodButton` event to see how the [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) block works. \r\n\t- Change the code to say your favorite food instead of the example\r\n2) Add code to read aloud your favorite color when the button is clicked\r\n3) Add code to read aloud your favorite class in school when the button is clicked\r\n4) Add code to read aloud your favorite animal when the button is clicked"
      },
      "CSD U6 - Screen Outputs - ChalE_mb2022": {
        "display_name": "Marketing App",
        "bubble_choice_description": "Create an app prototype that could be used in a social media marketing campaign",
        "long_instructions": "# Marketing App\r\n\r\nCreate an app that changes elements on the screen and could be used in a marketing campaign on social media. For example, you could choose your favorite actor or band and create an app that displays different pictures from their career when the user clicks different buttons.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Screen Outputs - ChalF_mb2022": {
        "display_name": "Local Business App",
        "bubble_choice_description": "Create an app prototype that could be used to promote a local business",
        "long_instructions": "# Local Business App\r\n\r\nCreate an app that changes elements on the screen and could be used to promote a local business. For example, you could find information and images about a business on their website and create an app that displays different information based on the buttons you click.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/1": {
    "long_instructions": "See contained level for markdown",
    "contained levels": [
      {
        "long_instructions": "# Board Events\n\nThe [`onBoardEvent()`(#f78183)][0] block allows you to start taking input from your micro:bit. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click \"Run\" to check your answer."
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/2": {
    "long_instructions": "<div style=\"float:right;\" markdown=1> \n\n[expandable][0] \n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Using Board Events\n\nRight now the LED turns on when the A button (`buttonA`) is pressed down. Add code so it turns off when the B button (`buttonB`) is pressed down.\n\n## Do This\n\n1.  When buttonB is pressed, turn the red LED off.\n    -   Add another [`onBoardEvent()`(#f78183)][1] block to turn the LED off when the B button is pressed down."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/3": {
    "long_instructions": "# Up Events\n\nInstead of using the B button, you can make the LED turn off when the A button comes back up.\n\n## Do This\n\n1.  When the A button is up, turn the LED off\n    -   Use an [`onBoardEvent()`(#f78183)][0] block to create an `up` event for the A button.\n    -   Add code to turn the LED off when the button pops back up."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/4": {
    "long_instructions": "# Updating the Screen\n\nYou can also use buttons on the micro:bit to update elements on the screen. Let's create an app that updates the image to show arrows pointing left and right\n\n## Do This\n\n1.  When the A button is down, show an arrow pointing right\n    -   Use an [`onBoardEvent()`(#f78183)][0] block to create a `down` event for the A button.\n    -   Use a [`setProperty()`(#fff176)][1] block to update the `arrowImg` element so it's `image` property is a right arrow\n        <details>\n        <summary> <strong>Show Me How</strong></summary>\n        <img src=\"https://images.code.org/2c544961336c062b89cc68f0759b6efe-arrow-right.gif\" />\n        </details>\n2.  When the B button is down, show an arrow pointing left\n    -   Use an [`onBoardEvent()`(#f78183)][2] block to create a `down` event for the B button.\n    -   Use a [`setProperty()`(#fff176)][3] block to update the `arrowImg` element so it's `image` property is a left arrow"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/5": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Board Inputs - PracA_mb2022": {
        "display_name": "Debugging",
        "bubble_choice_description": "Find the bugs to make the app display the correct information!",
        "long_instructions": "# Debugging\r\n\r\nThe app below is meant to update based on how the user interacts with the board. However, the wrong events are displaying. Can you fix the errors so the correct text appears with the correct event?"
      },
      "CSD U6 - Board Inputs - PracC_mb2022": {
        "display_name": "LED Blinker",
        "bubble_choice_description": "Create an app that simulates a blinker on a car or bicycle",
        "long_instructions": "<!--\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/c309a8bf5758b97cb8452424b3249195-image-1650057430153.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# LED Blinker\r\n\r\nCreate an app that simulates a turn signal like on a car. When the user presses the A button, the left side of the `ledScreen` should light up. When the user presses the B button, the right side of the `ledScreen` should light up. When either button is released, no lights should be showing.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1. ::: details [When the A button is down, turn on the left side of the `ledScreen`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when `buttonA` is `down`\r\n    - Use `ledScreen.on()` to turn on the left side of the board.\r\n    :::\r\n2. ::: details [When the B button is down, turn on the right side of the `ledScreen`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when `buttonB` is `down`\r\n    - Use `ledScreen.on()` to turn on the right side of the board.\r\n    :::\r\n3. ::: details [When the A button is up, turn off all of the LEDs]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when `buttonA` is `up`\r\n    - Use `ledScreen.clear()` to turn off all of the LEDs\r\n    :::\r\n4. ::: details [When the B button is up, turn off all of the LEDs]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when `buttonB` is `up`\r\n    - Use `ledScreen.clear()` to turn off all of the LEDs\r\n    :::\r\n\r\n**Run the app!** You should be able to make the LEDs start blinking by pressing the A button, then stop the LEDs by pressing the B button."
      },
      "CSD U6 - Board Inputs - PracE_mb2022": {
        "display_name": "Yes-Or-No Communicator",
        "bubble_choice_description": "Create an app that uses button presses and the LED screen communicate \"yes\" and \"no\" answers",
        "long_instructions": "# Yes-Or-No Communicator\r\n\r\nCreate an app that uses the `ledScreen` and the A and B buttons to represent answers to yes or no questions. For example, lighting only the top of the screen could represent \"yes\" and lighting only the bottom could represent \"no\". Then, use the `ledScreen` and buttons to answer yes-or-no questions with a partner and see if they can understand your responses!\r\n\r\n## Do This\r\n\r\n**In Design Mode:**\r\n- Decide on what design represents \"yes\" and what design represents \"no\"\r\n- Add a `label` element to the screen that tells the user what means \"yes\" and what means \"no\"\r\n\t- For example: \"How to use this app: the top LEDs mean yes and the bottom LEDs mean no\"\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the user presses the A button, respond with \"yes\"]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `A` button is pressed `down`\r\n\t- Light up the `ledScreen` in a way that represents \"yes\"\r\n    :::\r\n2) ::: details [When the user presses the right button, respond with \"no\"]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `right` button is pressed `down`\r\n\t- Light up the `ledScreen` in a way that represents \"no\"\r\n    :::\r\n\r\n**Run The App!** When a partner looks at the app, they should be able to understand how it works without you needing to speak. When they ask yes-or-no questions, they should be able to understand your answers without you needing to speak either!\r\n\r\n_Note: This is an example of an app that focuses on **accessibility**, which makes it easier for people with disabilities to use technology and communicate._"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/6": {
    "display_name": "Emoji Reactions",
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Mood Descriptor\n\nAngel is working on an app that lets them communicate their current mood to a screen that can hang outside their door before anyone enters their room. From inside their room, Angel can press buttons on the micro:bit, which updates the app on the outside of their room. Angel started designing the app, but they haven't added any code yet.\n\n## Do This\n\n1.  When Angel presses the A button, show a happy face\n2.  When Angel presses the B button, show a sad face\n3.  When Angel releases the A button, show a neutral face\n4.  When Angel releases the B button, show a neutral face\n\n**Run Your Code!** When you hold a button, the emoji should change to a happy or sad emoji. When you release the button, it should change back to the neutral emoji.",
    "mini_rubric": {
      "rubric_key_concept": "Use the buttons on the micro:bit to create an app",
      "rubric_performance_level_1": "The app works as described, with the emojis changing to match the user inputs\r\n",
      "rubric_performance_level_2": "Most of the app works as described, but some of the actions don’t match the description such as resetting when the user releases a button",
      "rubric_performance_level_3": "The app changes elements on the screen, but does not match the description of the program",
      "rubric_performance_level_4": "The app has not been updated to match the description"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/5/levels/7": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Board Inputs - ChalA_mb2022": {
        "display_name": "Random Movement",
        "bubble_choice_description": "Use the buttons on your device to move an image randomly on the screen",
        "long_instructions": "<!--\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/72422d06e261209c083b9437fcbc873d-image-1650059388879.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n-->\r\n\r\n# Random Movement\r\n\r\nCreate an app that randomizes the location of the smiley face on the screen:\r\n- Pressing the A button moves the smiley face to a new random `x` coordinate\r\n- Pressing the B button moves the smiley face to a new random `y` coordinate\r\n\r\nYou can use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) blocks together to create the random movement.\r\n\r\n## Do This\r\n1. When the A button is pressed, move to a random x coordinate\r\n2. When the B button is pressed, move to a random y coordinate"
      },
      "CSD U6 - Board Inputs - ChalB_mb2022": {
        "display_name": "Day and Night",
        "bubble_choice_description": "Switch between a day and night environment using the toggle switch",
        "long_instructions": "<!-- <div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4bf1fd438e5bd20d5f25e272459a2505-image-1650059526083.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n-->\r\n\r\n# Day and Night\r\n\r\nUse design mode to create two scenes representing daytime and nighttime. Several assets have already been provided in this level, but you can also search for more on the internet. Add code so when A button is pressed, the scene is during the day. But when the B button is pressed, the scene is at night.\r\n\r\nYou can use [`hideElement()`(#fff176)](/docs/applab/hideElement/) and [`showElement()`(#fff176)](/docs/applab/showElement/) to change what images are displayed based on the toggle switch.\r\n\r\n_Note: Instead of using \"day and night\", you can choose a different pair of opposites to represent with this app (like land and sea, or light and dark). The important thing is that, when you press the buttons, it changes between the two opposites_\r\n\r\n## Do This\r\n**In Design Mode:**\r\n1. Create your daytime scene\r\n2. Create your nighttime scene\r\n\t- Note: in design mode, these two scenes will appear at the same time. You can hide some design elements by default by checking the `hidden` checkbox on design elements\r\n    \r\n**In Code Mode:**\r\n3. When A button is pressed, display the daytime scene\r\n4. When B button is pressed, display the nighttime scene"
      },
      "CSD U6 - Board Inputs - ChalC_mb2022": {
        "display_name": "Correct or Incorrect",
        "bubble_choice_description": "Create an app that uses the playSound or playSpeech block to make \"correct\" or \"incorrect\" responses",
        "long_instructions": "# Correct-or-Incorrect Sound Board\r\n\r\nCreate an app that plays a \"correct\" or \"incorrect\" sound when you press a button on the micro:bit. You can use the [`playSound()`(#fff176)](/docs/applab/playSound/) or [`playSpeech()`(#fff176)](/docs/applab/playSpeech/) blocks to make a sound of your choosing. Then use that app to quiz your friends and let them know if they got the answer correct or incorrect.\r\n\r\n## Do This\r\n\r\n1) When you press the A button, the app plays the \"correct\" sound.\r\n2) When you press the B button, the app plays the \"incorrect\" sound.\r\n\r\n**Run Your Code!** Look up 5 trivia questions and ask them to some of your classmates, then use the app to let them know if they got it correct or incorrect!"
      },
      "CSD U6 - Board Inputs - ChalD_mb2022": {
        "display_name": "Controller App",
        "bubble_choice_description": "Create an app prototype where your micro:bit could be used as a game controller",
        "long_instructions": "# Controller App\r\n\r\nCreate an app that uses the buttons or toggle switches as if the micro:bit were a controller for a game where you needed to make a decision. For example, using the A and B buttons to select which character you will play.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Board Inputs - ChalG_mb2022": {
        "display_name": "Lock/Unlock App",
        "bubble_choice_description": "Create an app prototype where your micro:bit could be used to lock/unlock a device",
        "long_instructions": "# Lock/Unlock App\r\n\r\nCreate an app that uses the buttons as if the micro:bit were locking or unlocking a device. For example, using the left and right button to lock or unlock the doors in a house as part of an alarm system, or open and close a garage door. You can use design mode elements to represent when the device is locked or unlocked.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play** level: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/1": {
    "long_instructions": "See contained level for markdown",
    "teacher_markdown": "Students should notice that the names in the var blocks are repeated in the code. They may guess that the numbers assigned to these names at the top will be substituted in farther down the code. Even if students aren't sure what the screen will look like, they may be more sure that the rectangles will all look the same because they have the same width and height",
    "contained levels": [
      {
        "long_instructions": "# Prediction\n\nThe code below has a new block called `var`. Read the code below, then make a prediction for what will happen on the screen when the code is run. What do you think will happen to the rectangles?"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/2": {
    "long_instructions": "<img src=\"https://images.code.org/500baaceb5ff763bbc1197b1ae39c6aa-image-1650562262146.png\" style=\"float: right; width: 15%; margin: 5px\" />\n\n# Creating a Checkerboard\n\nThe `var` block is short for **variable**, which can store a value to be used throughout your code. For example, if you wanted a lot of objects to have the same color, you could set the color to a **variable** and then re-use that variable every time you wanted to use that color.\n\nLet's use this idea to create a checkerboard on the screen with alternating colors.\n\n## Do This\n\n1.  Look at the top of the code which has several `var` blocks\n2.  Edit the colors and numbers on the right-side of the blocks to make the app match the picture to the right\n    -   You should only need to change the colors and numbers - you won't need to add any new blocks to your code!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/3": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Editing Variables\n\nVariables can be used to store information. This can be useful if you want to update multiple things with the same value.\n\nIn this example, Amy wrote a program that creates a shadow text effect under her name using multiple text labels. She's using a variable to update each text label with the same name, but there's a bug in her code - one of the labels isn't updating correctly.\n\n## Do This\n\n1.  Run the code to see what's happening. You should notice one of the labels isn't updating like the others\n2.  Look at the code and try to determine which label is incorrect, then update it to use the `myName` variable correctly\n3.  Replace Amy's name with your name and see the result!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/4": {
    "long_instructions": "# Using Variables\n\nYou can create a variable using the [`var`(#BB77C7)][0] block. Let's create a variable for the y-position of each rectangle and use it to update the screen. The code has already been started - you need to finish it!\n\n## Do This\n\n1.  Create a variable and assign it a value\n    -   Drag out a [`var`(#BB77C7)][1] block and give it a label on the left-side of the equal sign\n    -   On the right side of the equal sign, type in a number between 0 and 450\n2.  Update the [`setProperty()`(#fff176)][2] blocks so they use your new variable in the last position\n\n**Run the code!** You should see all of the blocks snap together on the same horizontal line! Try re-running the program with different values to see how the image changes."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/5": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Counting Presses\n\nEric is creating a program where pressing the A button adds 1 to the value on the screen, and pressing the B button subtracts 1 from the value on the screen. This is sometimes called the **[Counter Pattern][0]**. \n\nThe A button has already been coded - can you update the B button to work correctly too?\n\n## Do This\n\n1.  Update the `counter` variable to subtract by 1 when the B button is pressed\n    -   ::: details [**Show Me How**]\n        -   Find the section that says `Add your code here!`\n        -   Drag out a `x = ;`(#BB77C7) block\n        -   Replace the `x` with the variable name: `value`\n        -   Drag out a `-`(#FFB74D) block\n        -   On the left side of the `-`(#FFB74D), type the variable name: `value`\n        -   On the right side of the `-`(#FFB74D), type `1`\n            :::"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/6": {
    "long_instructions": "# Changing Positions\n\nThe **[Counter Pattern][0]** can also be used to change the position of elements on the screen. Let's make a program where pressing the A button moves the bird up, and pressing the B button moves the bird down\n\n_Note: Remember that y positions are reversed on the screen. Moving up means subtracting, and moving down means adding_\n\n## Do This\n\n1.  Inside the `buttonA` event, subtract one from the `yPosition` variable\n    -   Run your code and test that the bird is able to move up!\n2.  Inside the `buttonB` event, add one to the `yPosition` variable\n    -   Run your program and test that the bird is able to move up and down!\n\nOptional: try changing the amount that the bird changes on each button press. This can simulate moving at different speeds!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/7": {
    "long_instructions": "Predict Level",
    "teacher_markdown": "Students should notice that both if-statements use the value 315, and some students might use their mouse cursor to hover over the app and notice that 315 is close to the horizon created by the hills and trees. Students should also notice that the background changes between two different colors - orange and gray. Connecting these two observations together, students might predict that this will change when the \"sun sets\" behind the horizon, changing colors between day (orange) and night (gray).",
    "contained levels": [
      {
        "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Prediction\n\nThis code is similar to the last level, where pressing buttons will move the sun up and down. However, this code also includes if statements\n\n## Do This\n\n-   Look at the code, paying attention to the two if-statements\n-   Predict what will happen as the sun moves around on the screen. What will change on the screen? When will it change?"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/8": {
    "long_instructions": "# Increasing Text\n\nThis app is meant to simulate someone whispering for you to come closer, only to surprise you with a loud noise. It uses the **[Counter Pattern][0]** to increase the size of the text on the screen. Once the text reaches 30 pixels, the text should change to \"SURPRISE!\" and a sound should play.\n\n## Do This\n\n1.  Add an [`if-statement`(#64B5F6)][1] to your code to check when the `textSize` variable is greater than 30\n    -   ::: details [**Show Me How**]\n        -   Find the section that says `Add your code here!`\n        -   Drag out a [`if statement`(#64B5F6)][2] block\n        -   Drag out a `>`(#FFB74D) block\n        -   On the left side of the `>`(#FFB74D), type the variable name: `textSize`\n        -   On the right side of the `>`(#FFB74D), type `30`\n            :::\n2.  When it is: change the text of the label to \"SURPRISE!\" and play a sound using [`playSound()`(#fff176)][3].\n    -   ::: details [**Show Me How**]\n        -   Inside the [`if statement`(#64B5F6)][4]:\n            -   Drag out a [`setText()`(#fff176)][5] and update the `textLabel` element to say \"Surprise!\"\n            -   Drag out a [`playSound()`(#fff176)][6] block to play a sound\n                :::"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/9": {
    "long_instructions": "# Perfect Toast\n\nThis app simulates a toaster with a piece of toast in between two heated sides. The toast needs to be perfectly placed in the middle - if it's too close to one of the sides, the toast will burn! We can help alert the user of the burning toast by making a noise if the toast is too close to the edges. Then the user can press buttons on the toaster to move the toast closer to the center.\n\n## Do This:\n\n1.  If the toast is too far to the left, play a sound to alert the user\n    -   Add an [`if statement`(#64B5F6)][0] to the `buttonA` event to check if the toast is too far to the left.\n    -   Use the the [`playSound()`(#fff176)][1] block to play a sound\n2.  If the toast is too far to the right, play a sound to alert the user\n    -   Add an [`if statement`(#64B5F6)][2] to the `buttonB` event to check if the toast is too far to the right.\n    -   Use the the [`playSound()`(#fff176)][3] block to play a sound\n\n**Run Your Code!** Use the A and B buttons to reposition the toast. When the toast gets too close to the walls, the device should buzz!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/10": {
    "long_instructions": "# Positivity App\n\nHawa is making a positivity app where people can track good deeds or positive statements they make throughout the day by pressing a button on the micro:bit. Each time they press a button, the heart grows a little bit in size. When the heart fills the box, a sound should play.\n\nHawa has already started the app, but needs help adding the variables and if-statements to her code.\n\n# Do This\n\n1.  Add a variable called `size` as the first line of your code and set it to `30` ( [Show me where][0] )\n2.  Add code inside your event that increases the `size` variable by 20 each time a button is pressed ( [Show me where][1] )\n3.  Add an if-statement that checks when the heart has reached a size of at least 300 pixels ( [Show me where][2] )\n4.  Inside the if-statement: play a sound to let the user know they're reached their goal",
    "callouts": {
      "U6L6.4 - Variable": "Define your variable here",
      "U6L6.4 - Counter": "Increase your variable here",
      "U6L6.4 - If": "Add your if-statement here"
    },
    "mini_rubric": {
      "rubric_key_concept": "Use variables and if-statements to create an app that uses your device",
      "rubric_performance_level_1": "The program works as described, using variables to keep track of the size and an if-statement to play a sound at the correct time",
      "rubric_performance_level_2": "Variables are used to keep track of the size of the element, but the sound does not play once it reaches the correct size",
      "rubric_performance_level_3": "Variables are used for the size, but they do not increase when the button is pressed",
      "rubric_performance_level_4": "The code has not changed"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/6/levels/11": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - If Variables - ChalA_mb2022": {
        "display_name": "Text Message Design",
        "bubble_choice_description": "Use variables to recreate the design of a text message exchange",
        "long_instructions": "<img src=\"https://images.code.org/077ce11891f3966e1564cdb7083bad4f-image-1645641750329.png\" style=\"width: 250px; margin: 10px; float: right\" />\r\n\r\n# Text Message Design\r\n\r\nUse variables to change the background color and text color of the text exchange below so it looks similar to the picture to the right. It's okay if the colors don't match exactly as long as each group of messages has the same color scheme. \r\n\r\nYou should use variables to keep the colors consistent between messages from the same person."
      },
      "CSD U6 - If Variables - ChalB_mb2022": {
        "display_name": "Water Level App",
        "bubble_choice_description": "Create an app that simulates an automatic bathtub filler, where the water level rises to a set point.",
        "long_instructions": "<!--\r\nmarkdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/3441200bfbe8b152e33637e0f5b38510-image-1650059782558.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n--->\r\n\r\n# Water Level App\r\n\r\nCreate an app that simulates an automatic bathtub filler, where the water level rises to a set point. You should use the A button to raise the water, and the B button to lower the water. When the water goes past the black line of the bathtub, the micro:bit should light up the LEDs to let you know you're at risk of overflowing!\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the A button is pressed, the water rises up the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `waterY` variable. Don't forget: moving up means subtracting so the y position gets smaller\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) to update the y position of the water image\r\n    :::\r\n2) ::: details [If the water gets to the black line, light up at least 4 LEDs on the `ledScreen`]\r\n\t- Add an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the waterY variable.\r\n    - If it's above the black line: use [`ledScreen.on()`(#f78183)](/docs/ide/applab/expressions/ledScreen.on) to light up the screen\r\n    :::\r\n3) ::: details [When the B button is pressed, the water lowers on the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `waterY` variable. Don't forget: moving down means adding so the y position gets smaller\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) to update the y position of the water image\r\n    :::"
      },
      "CSD U6 - If Variables - ChalC_mb2022": {
        "display_name": "Emoji Race",
        "bubble_choice_description": "Create a game that uses the left and right buttons to move characters down the screen. The first person to reach the bottom of the screen is the winner!",
        "long_instructions": "<!-- <div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/b8b57481f944ac00e0d759cea15798b3-image-1650059926593.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n--->\r\n\r\n# Emoji Race\r\n\r\nCreate a game that uses the A and B buttons to move characters down the screen. The first person to reach the bottom of the screen is the winner!\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [When the A button is pressed, move the red emoji down the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `redY` variable so it moves down the screen.\r\n    - Update the `y` position of the red emoji using [`setProperty()`(#fff176)](/docs/applab/setProperty/).\r\n    :::\r\n2) ::: details [If the red emoji is at the bottom of the screen, show the `redWinner` screen]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the y-position is past the bottom of the screen.\r\n    - If it is: change the screen to `redWinner`.\r\n    :::\r\n3) ::: details [When the B button is pressed, move the blue emoji down the screen]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to change the `blueY` variable so it moves down the screen.\r\n    - Update the `y` position of the blue emoji using [`setProperty()`(#fff176)](/docs/applab/setProperty/).\r\n    :::\r\n4) ::: details [If the blue emoji is at the bottom of the screen, show the `blueWinner` screen]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the y-position is past the bottom of the screen.\r\n    - If it is: change the screen to `blueWinner`.\r\n    :::\r\n\r\n**Run Your Code!** Try playing with a friend where one person controls the red emoji and the other person controls the blue emoji."
      },
      "CSD U6 - If Variables - ChalD_mb2022": {
        "display_name": "Age Recommender",
        "bubble_choice_description": "Create an app that recommends something based on the users age. For example: recommend a movie or book or place to visit based on a person's age.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/e28b3e9c8a10af207db2ec4b2ca178ca-image-1650059987366.13.d-finished.gif)\r\n\r\n<br/>\r\n\r\nClick to expand\r\n\r\n</div>\r\n\r\n# Age Recommender\r\n\r\nCreate an app that recommends something based on somebody's age. For example, you could recommend a PG or PG-13 or R rated movie based on how old someone is. Or, you could recommend baby food vs soft food vs spicy food based on someone's age.\r\n\r\nThe home screen has already been started for you, but the app still needs 4 recommendations and the code needs to be added.\r\n\r\n## Do This\r\n**Planning**\r\n1. Decide what 4 things you would like to recommend based on someone's age. It can be music or movies or books or foods or places to visit - whatever you decide.\r\n\r\n**In Design Mode:**\r\n2. Change to one of the other choice screens (for example: `choice1Screen`), then add labels or images representing this choice\r\n3. Repeat this process for each of the four screens\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n4. ::: details [When the + button is pressed: have it increase the age on the screen by 1]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to add 1 to the age variable\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `ageLabel`\r\n    :::\r\n5. ::: details [When the - button is pressed: have it decrease the age on the screen by 1]\r\n\t- Use the [Counter Pattern](/docs/concepts/patterns/counter-patterns-with-event/) to subtract 1 to the age variable\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `ageLabel`\r\n    :::\r\n6. ::: details [When the \"Recommend\" button is pressed: have it go to a certain screen based on the user's age]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the age variable\r\n    - Use the [`setScreen(screenId)`(#fff176)](/docs/applab/setScreen/) block to change to a specific screen based on their age\r\n    - Repeat this four times for each screen\r\n    :::"
      },
      "CSD U6 - If Variables - ChalE_mb2022": {
        "display_name": "Debugging!",
        "bubble_choice_description": "The app is supposed to move an arrow across the screen and keep scrolling to the other side, but there are bugs!",
        "long_instructions": "# Debugging: Infinite Scrolling\r\n\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4a82e91b1b6ad15623620fee4383c964-image-1648759745413.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\nThis app is meant to move an arrow across the screen. When the arrow reaches the edge of the screen, it should reset back to the beginning - but, something's wrong!\r\n\r\n- **What I Expected to Happen:** When the arrow reaches the far sides, it teleports to the other side so it can keep moving\r\n- **What Actually Happens:** The arrow moves just once, sometimes off of the screen\r\n\r\n_Note: you may need to switch into text mode to fix this bug_\r\n\r\n(Optional) Even when the bug is fixed, the infinite scroll doesn't look great. Can you adjust the numbers so the scrolling effect looks smoother?",
        "teacher_markdown": "The bug is that the `>` and `<` symbols are swapped in the if-statements. For example, the top if statement checks if `xPos < 320`, which will be true while the arrow is still on the screen. We want the opposite: `xPos > 320`. This correctly checks that the arrow is off of the right-side of the screen. Similarly, the second if statement should be checking that `xPos < 0`.\r\n\r\nStudents can fix this within block mode, but it's a little tedious and requires removing the `<` and `>` blocks completely. It can be easier to switch into text mode and manually change these symbols, then switch back to block mode. For some students, this can be a good excuse to try out text mode if they've never used it before."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/7/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/7/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or turning on some of the LEDs. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/7/levels/3": {
    "long_instructions": "# Add Logic\n\nAdd the core logic to your app, using [`variables`(#BB77C7)][0] and [`if statements`(#64B5F6)][1]. Use your project guide to help complete your code. Test your app several times to see that it behaves as expected. \n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/7/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - <a href=\"https://docs.google.com/document/d/1grIHAJg0yyzPswmJ18W5qS_HG0KaAWFOgDPxP0r6A78/view\" target=\"_blank\">click here to see the rubric</a>. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever you're finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/1": {
    "long_instructions": "# TODO:\n\n-   Make this into predict level",
    "teacher_markdown": "Two new code blocks are introduced in this level: `getProperty` and `getText`. Students may notice these new blocks are being used with variables, and may predict they are being used to get user input from the screen. They may also notice there are new design elements: text inputs, dropdowns, and sliders. Try to push students to notice that the variables from `getText` and `getProperty` are used again later in the code to update the screen using `setText` and `setProperty` blocks.",
    "contained levels": [
      {
        "long_instructions": "# Screen Inputs\n\nThis program includes a form for users to fill out and save.\n\nWhat do you think this code will do?  Write your prediction in the box below, then run the code to see what happens."
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/2": {
    "long_instructions": "# Get and Set Text\n\nThis app simulates a temperature sensor in certain rooms of the house. You can customize the welcome screen by entering your name and the room of the house that the sensor is in. This app uses a variable and [`getText()`(#fff176)][0] block to get the users name, then a [`setText()`(#fff176)][1] block to update the screen. However, the second input box isn't setup correctly.\n\n## Do This\n\n1.  Update the `roomLabel` element with what the user typed in\n    -   Add a [`var x`(#BB77C7)][2] and [`getText`(#fff176)][3] block to get the input from the `roomInput` element\n    -   Add a [`setText`(#fff176)][4] block to update the `roomLabel` element\n\n**Run your code!** Type in your name and a room, then press the button to see the welcome screen update"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/3": {
    "long_instructions": "# Dropdowns\n\nYou can also use a dropdown to let the user interact with the screen. A dropdown lets you select from a list of options. You can use the [`getProperty()`(#fff176)][0] block to get the `value` from the dropdown and use it in your app.\n\nThis app should let the user change the background color of the app, but it isn't finished.\n\n## Do This\n\n1.  Get the value from the dropdown\n    -   Add a [`var x`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the `value` from the `colorDropdown` element\n2.  Update the background color\n    -   Add a [`setProperty`(#fff176)][3] block to update the background of the screen to the value from the dropdown\n\n::: details [**Show Me How**]\n<img src=\"https://images.code.org/01e1b79a5f3074adf5de9b0e3c589491-image-1689634154944.gif\" width=\"600px\" />\n:::\n\n**Run the program!** Change the background color, then click the update button to see the background change."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/4": {
    "long_instructions": "# Dropdowns\n\nYou can also edit the dropdown list of options from design mode. For example, you could update the color choices to match two opposing sports teams or the school logo colors.\n\n## Do This\n\n**In Design Mode:**\n\n1.  Select the dropdown element and change the colors in the `options` area.\n    -   For example: colors that match what you're wearing today, or colors that match different sports teams\n    -   ::: details [**Show Me How**]\n        <img src=\"https://images.code.org/8c304f0db270614be52af8eef7d62c8c-image-1638223891063.gif\" width=\"500px\" />\n        :::\n\nYou do not need to make any changes to your code!\n\n**Run Your Program!** The background should should change to the colors you set in design mode"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/5": {
    "long_instructions": "# Sliders\n\nSliders let you change values in a range, like when you want to give a rating to something. You can use the same [`getProperty()`(#fff176)][0] block to get the `value` from a slider.\n\nThis app uses two sliders to change the width and height of an image. Right now, only the width is working. Add code to adjust the height of the image too.\n\n## Do This\n\n1.  Get the value from the slider and store it in a variable\n    -   Add a [`var x`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the `value` from the `heightSlider` element\n2.  Update the height of the image on the screen\n    -   Add a [`setProperty`(#fff176)][3] block to update the `height` of the image\n\n**Run Your Code!** You might notice that the image doesn't get very large. In the next level, we'll see how you can change the minimum and maximum values for sliders."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/6": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Sliders\n\nYou can use Design Mode to change the minimum and maximum values for your sliders.\n\n## Do This\n\n**In Design Mode:**\n\n1.  Click on the `widthSlider` element and find the **maximum value** property. Change the value from 50 to 300.\n2.  Click on the `heightSlider` element and find the **maximum value** property. Change the value from 50 to 300.\n\n**Run the app!** The image should now be able to grow much larger than before"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/7": {
    "long_instructions": "# Sliders\n\n<img src=\"https://images.code.org/e446745b0b8db876c506c185e208d63f-image-1638226834987.gif\" style=\"float: right; width: 150px\" />\n\nSliders can also be attached to events so you can see the screen update as the slider moves. This uses the new `input` event, which detects when the slider changes as the user moves it.\n\n## Do This\n\n1.  As the `widthSlider` updates, change the width of the image\n    -   Drag out a new [`onEvent()`(#fff176)][0] block. Change the element to `widthSlider` and the event type to `input`.\n    -   Copy all of the code from the `updateButton` event into this new event. You may need to switch into text mode.\n    -   ::: details [**Show Me How**]\n        <img src=\"https://images.code.org/e5d9310a1007fddd0effecd7f4bacdf6-image-1638226693861.gif\" width=\"500px\" />\n        :::\n2.  Run the code and verify that changing the slider width will change the image on the screen\t\n3.  Drag out a new [`onEvent()`(#fff176)][1] block and repeat these steps for the `heightSlider` element"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/8": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Inputs - PracA_mb2022": {
        "display_name": "Pet Scene Creator",
        "bubble_choice_description": "Use dropdowns to create different background and pet combinations",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/22b6d9efd53765a02305fdbd376fb903-image-1648830447189.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Pet Scene Creator\r\n\r\nCreate an app that lets you mix and match different background images with animal images to create different scenes. The images have already been uploaded to your app - you need to add the code that updates the screen when the user presses the \"Create\" button\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the values from the dropdowns and store it in two variables]\r\n\t- Use [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from the `backgroundDropdown` and `petDropdown` elements\r\n:::\r\n\r\n2) ::: details [Update the images on the screen]\r\n\t- Use two [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks to update the `image` property of the `backgroundImage` and `petImage` elements\r\n:::\r\n\r\n\r\n**Run the program!** You should be able to mix and match different images to create new scenes"
      },
      "CSD U6 - Screen Inputs - PracB_mb2022": {
        "display_name": "Digital Menu",
        "bubble_choice_description": "Create an app that lets you customize a digital cafe menu",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/39f01938ced03ef94f30e86edd2b4a47-image-1648831845901.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Digital Menu Creator\r\n\r\nCreate an app that creates a customizable menu for a restaurant. The restaurant can enter their name, a special dish, and the price. Then they can use the menu to display outside their restaurant or on their website.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the values from the text inputs and store it in three variables]\r\n\t- Use three [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from the `restaurantInput`, `specialInput`, and `priceInput` elements\r\n\t:::\r\n2) ::: details [Update the label elements on the screen]\r\n\t- Use three [`setText()`(#fff176)](/docs/applab/setText/) blocks to update the `restaurantLabel`, `specialLabel`, and `priceLabel` elements\r\n    :::\r\n\r\n**Run the program!** You should be able to enter text into the boxes and press \"Create!\", and the menu will update with your customizable text!\r\n\r\n![]()\r\n\r\n![]()"
      },
      "CSD U6 - Screen Inputs - PracC_mb2022": {
        "display_name": "Where You're From",
        "bubble_choice_description": "Create an app that uses sliders to move a cursor around a map",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/88ae9f1336c32c19c4f037d51af163d0-image-1648832484117.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Where You're From\r\n\r\nCreate an app that lets you move a cursor around on a map to identify where you are from. The app should use sliders for the x and y position of the cursor\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Add two `onEvent()`(#fff176) blocks to check when the user adjusts each slider]\r\n\t- Add two [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks for the `xSlider` and `ySlider` elements.\r\n    - Have the events update on the `input` event, which detects when the slider changes\r\n\t:::\r\n2) ::: details [Get the values from the sliders and store them in two variables]\r\n\t- Inside both [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks:\r\n\t\t- Use two [`var x`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) blocks to get the values from the `xSlider` and `ySlider` elements\r\n    :::\r\n3) ::: details [Update the position of the pointer arrow]\r\n\t- Use two [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks to update the `x` and `y` properties of the `pointer` element.\r\n    :::\r\n    \r\n**Run the program!** You should be able to use the sliders to move the cursor around on the screen! You can also click the link at the bottom to learn more about where you are from."
      },
      "CSD U6 - Screen Inputs - PracD_mb2022": {
        "display_name": "Debugging",
        "bubble_choice_description": "This app is meant to ask a series of secret questions to unlock the final screen, but each question has a bug.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f87aa16429422001fc3f6c0e9216f7be-image-1650646971636.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Debugging\r\n\r\nThis app is meant to ask a series of secret questions to unlock the final screen, but each question has a bug. Read through the code and experiment with the app to fix the bugs and reach the final screen! You only need to update the code that already exists - you don't need to add any new lines of code.\r\n\r\n_Note: Some of the bugs may be in design mode as well as code mode_\r\n\r\n## Do This\r\n\r\n1) Screen 1 Bugs\r\n\t- **What I Expected To Happen:** Selecting \"Mountain Ibex\" and pressing \"Check\" takes me to the next screen\r\n\t- **What Happened Instead:** I always get \"Try Again\" and can't continue\r\n2) Screen 2 Bugs\r\n\t- **What I Expected To Happen:** Using the slider to select 35 and pressing \"Check\" will take me to the next screen\r\n\t- **What Happened Instead:** I can't make the slider go past 10\r\n2) Screen 3 Bugs\r\n\t- **What I Expected To Happen:** Typing \"Open Sesame\" and pressing \"Check\" will take me to the next screen\r\n\t- **What Happened Instead:** I get an error in my code and the app stops working",
        "teacher_markdown": "**Screen 1 Bug:** Students need to change the `getProperty` block to get the `value` from the dropdown instead of `options`\r\n\r\n**Screen 2 Bug:** Students need to go into Design Mode and change the max value of the slider from 10 to something greater or equal to 35\r\n\r\n**Screen 3 Bug:** Students need to use the correct variable in the code, replacing `trial3Input` (which is the ID of the design element) with `trial3Answer` (which is the actual variable in the code)"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/9": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Custom Profile\n\nIsaac has started to create an app that lets you set a custom profile to change things like the background color or font size of your app. The user can enter their settings in the top half of the app and press the Preview button, and then the bottom half of the app updates with their changes. The app has already been started, but needs help updating the design elements and code.\n\n## Do This\n\n**In Design Mode:**\n\n-   Update the dropdown menu so it includes at least 4 different colors\n-   Update the slider so it has a minimum value of 12 and a maximum value of 30.\n\n**In Code Mode:**\n\n1.  ::: details [Get the value from the text input, dropdown, and slider and store in three variables]\n    -   You can use [`getText()`(#fff176)][1] and [`getProperty()`(#fff176)][2] to get the values from each screen input\n        :::\n2.  ::: details [Update the text and properties of the `previewLabel` element]\n    -   You can use [`setText()`(#fff176)][3] and [`setProperty()`(#fff176)][4] blocks to update the `previewLabel` element\n        :::\n\n**Run Your Code!** Enter your name and set your own theme, then see if the app updates",
    "mini_rubric": {
      "rubric_key_concept": "Getting user input from the screen and using it to update an app",
      "rubric_performance_level_1": "Each design element has been correctly customized according to the app description, and the code gets the user input and uses it to update the app",
      "rubric_performance_level_2": "The code gets the user input and uses it to update the app, but the design elements may not be correctly customized according to the app description",
      "rubric_performance_level_3": "There are errors when trying to get values from the text input, dropdown, or slider; or the app is incomplete and does not get all of the input elements.",
      "rubric_performance_level_4": "The app does not get input from any of the elements on the screen."
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/8/levels/10": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Screen Inputs - ChalA_mb2022": {
        "display_name": "Excitement Meter",
        "bubble_choice_description": "Create an app that uses a slider and images to show your level of excitement",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/6c0f62f904d02d3764a28b72c4e13114-image-1646239220146.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Excitement Meter\r\n\r\nCreate an app that lets you adjust your level of excitement and displays different images to represent your excitement. Your app should use the `input` event from the slider, then use a variable and if-statements to change the image based on the value. There are some example images you can use, or you can find your own images to use instead!\r\n\r\n## Do This\r\n1) Use an [`onEvent()`(#fff176)](/docs/applab/onEvent/) block to detect when the slider changes\r\n2) Get the value from the slider and store it in a variable\r\n3) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to change the image based on the value of the slider\r\n\t- The slider has values from 1-5, so you will need five if-statements"
      },
      "CSD U6 - Screen Inputs - ChalB_mb2022": {
        "display_name": "Background Sliders",
        "bubble_choice_description": "Create an app that lets you adjust the background color of an app using 3 sliders for red, green, and blue color values",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f5a12be73a4ade20548f2e0189436a8e-image-1646239023435.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Background Sliders\r\n\r\nUse 3 sliders to update the background color of the screen using the [`rgb()`(#fff176)](/docs/applab/rgb/) block. The app has already been started for you and has 3 variables to represent the red, green, and blue values.\r\n\r\n## Do This\r\n1) Add three [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks to check the `input` event for each slider\r\n2) Update the value of the color variable using [`getProperty()`(#fff176)](/docs/applab/getProperty/)\r\n3) Use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`rgb()`(#fff176)](/docs/applab/rgb/) block to update the `background-color` of the screen"
      },
      "CSD U6 - Screen Inputs - ChalC_mb2022": {
        "display_name": "Pet Adoption",
        "bubble_choice_description": "Create an app prototype that lets the user browse different pets that are available for adoption.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/f50124881e143bd72f2e41a70f601665-image-1646241597034.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Pet Adoption App\r\n\r\nCreate an app prototype that lets the user browse different pets that are available for adoption. The app should use a dropdown menu so when the user selects a pet, the screen updates with more information about the pet.\r\n\r\nThe app has already been started for you in design mode - your task is to add the different pets to the app. Your app should have at least 4 different pets up for adoption.\r\n\r\n## Do This\r\n**In Design Mode:**\r\n- Update the dropdown options to include at least 4 different pets. They can be four different animals, or all the same type of animal.\r\n\t- Some sample assets have been uploaded for you, but you can also add different images\r\n\r\n**In Code Mode:**\r\n1) Add an [`onEvent()`(#fff176)](/docs/applab/onEvent/) to detect when the dropdown changes.\r\n\t- You should use the `change` event from the dropdown element\r\n2) Get the value from the dropdown and store it in a variable\r\n3) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to check the value from the dropdown and update the image and text based on the chosen pet\r\n\t- You should have four different if-statements to check each pet\r\n\r\n_Acknowledgement: This level was suggested by the teacher and students at Still Middle School in Aurora, IL._"
      },
      "CSD U6 - Screen Inputs - ChalD_mb2022": {
        "display_name": "Story Generator",
        "bubble_choice_description": "Create an app prototype that lets the user generate words to appear in a customized story",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/15386bbb10862ae7af983232f7e169f3-image-1646246117203.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Story Generator\r\n\r\nCreate an app that lets the user generate a unique story by entering different words to be used in the story. These are sometimes called \"Mad-Libs\".\r\n\r\nIn our version, the story will have 3 parts and each part will end with one of the words that the user supplied. For example, one part of the story could say \"The disease had spread to all of the fruits and vegetables, turning them all `______`\", and then the user enters a color to fill in the missing word.\r\n\r\nThe app has already been started for you with the design and buttons, but it still needs to be filled in with a story and updated based on what the user enters.\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n- Think of a 3-part story where each part ends with a word that the user can enter. For example, you can ask the user to enter a type of food, or a place to visit, or someone's name, or a way to describe something. Then each part of your story should end with one of these words\r\n\r\n**In Design Mode:**\r\n- On the `homeScreen`, update each of the `placeholder` properties of the input elements to tell the user what to enter. For example: \"Enter a color\" or \"Enter a name\".\r\n- Update each of the labels on `part1Screen`, `part2Screen`, and `part3Screen` with the parts of your story\r\n\r\n**In Code Mode:**\r\n- Inside the `startButton` [`onEvent()`(#fff176)](/docs/applab/onEvent/): use variables and [`getText()`(#fff176)](/docs/applab/getText/) blocks to get the values from each text input, then use [`setText()`(#fff176)](/docs/applab/setText/) to update the labels on each screen\r\n\r\n**Run Your Code!** You should be able to generate a unique story with different words that the user enters\r\n\r\n_Optional: Add images or colors to your screens to make the story come to life!_"
      },
      "CSD U6 - Screen Inputs - ChalG_mb2022": {
        "display_name": "Order Form App",
        "bubble_choice_description": "Create an app prototype that could be used to order a product from a store, such as ordering groceries online or ordering school supplies from a local business.",
        "long_instructions": "# Order Form App\r\n\r\nCreate an app prototype that could be used to order a product from a store, such as ordering groceries online or ordering school supplies from a local business. The app can use dropdowns and sliders to let the user select what they would like to order, and show a confirmation screen when the order is complete.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play level**: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      },
      "CSD U6 - Screen Inputs - ChalH_mb2022": {
        "display_name": "Survey App",
        "bubble_choice_description": "Create an app prototype that could be used for a survey to learn more about a person",
        "long_instructions": "# Survey App\r\n\r\nCreate an app prototype that could be used for a survey to learn more about a person, such as asking about someone's interests to make a restaurant recommendation or asking about someone's preferences to help a group make a decision.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work.",
        "teacher_markdown": "This level does not contain an exemplar because of how open-ended the directions are. Instead, we encourage you to consider this as a **focused free-play level**: students are free to design an app based on their own interests and creative expression, but focused in a particular area to give some initial guidance. This can be an opportunity to gain insights and offer feedback on the skills students demonstrate while building their app, even if they do not finish the level completely. This type of level can also reinforce the Problem Solving Process as students ideate and develop an app of their own choosing (Define - Prepare - Try - Reflect).\r\n\r\nAs students develop more skills throughout the unit, they may decide to use an idea from this level as the basis for one of their projects or to continue developing on their own time."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/1": {
    "long_instructions": "Predict Level (See contained level for markdown)",
    "teacher_markdown": "Student responses may include:\n\n-   The screen is using a dropdown menu and a `getProperty` block for input to see whether the LED should blink or pulse\n-   The screen is using a label and a `setText` block for output to display whether the light is on or off\n-   The micro:bit is using the buttons and an `onBoardEvent` block for input to turn on or off the lights\n-   The micro:bit is using the `ledScreen` blocks as output to turn on the lights\n\nStudents will also need their micro:bits for this level. If student’s boards aren’t working, have them visit [https://studio.code.org/maker/setup][0].",
    "contained levels": [
      {
        "long_instructions": "# Combining Inputs and Outputs\n\nThis level doesn't contain any new code - instead, it combines several new concepts you've seen over the last few lessons.\n\nRead through the code, then respond to the following prompts:\n\n-   Identify one way that you think the **screen** is being used for either _input_ or _output_ by the user\n-   Identify one way that you think the **micro:bit** is being used for either _input_ or _output_ by the user\n\nWhen you are done, press \"Run\" to see how the program runs"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/2": {
    "long_instructions": "# Using the micro:bit\n\nHere's the same code you saw in the last level, but this time there's another dropdown menu to control the top and bottom LEDs. You'll have to add the code to make it work.\n\nUsing the first dropdown as a model, add variables and an if-statement to light up the other LEDs.\n\n# Do This\n\n1.  Find the section of the code that says \"Add your code here\" [(Show me where)][0]\n2.  Get the value from the dropdown and store it in a variable\n    -   Add a [`var x =`(#BB77C7)][1] and [`getProperty()`(#fff176)][2] block to get the value from the `LED2Dropdown` element\n3.  Use two [`if-statements`(#64B5F6)][3] to check the value from the dropdown\n    -   Use the [`==`(#FFB74D)][4] block to check if the value from the dropdown is `top row` or `bottom row`\n4.  Light up the top or bottom LEDs depending on what the user chose\n    -   Use [`ledScreen.on()`(#f78183)][5] blocks to light up the top or bottom rows of LEDs\n\nRun your code and verify that program works correctly! Your micro:bit should light up \"corners\" depending on which rows and columns are selected!",
    "callouts": {
      "CSD U6L10.2 - add_code": "Add your code here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/3": {
    "long_instructions": "# Sliders\n\nLast time, your users were only able to choose between the left and right columns to light up. To give the user control over which columns to light up, you can use a slider.\n\nThis slider lets users choose a value between 0 and 4 for each column in the `ledScreen`, but there's something not quite right about how this program is working.\n\n# Do This\n\n1.  Look over the code and find the bug that's keeping the LEDs from being lit up correctly.\n    -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/4": {
    "long_instructions": "# Sliders\n\nLet's expand the app from the last level to also control which row to light up.\n\n# Do This\n\n1.  Using the `column` variable as a model, create a `row` variable that gets the value from the rowSlider design element.\n    -   Use a [`var x = __`(#BB77C7)][0] and [`getProperty()`(#fff176)][1] block to get the value from the slider\n2.  Modify the lines of code that lights up a row of LEDs so that it uses the `row` variable rather than the default row of 0\n\nRun your code! You can use the sliders to change which rows and columns are lit up, creating different crosses on the ledScreen."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/5": {
    "long_instructions": "# Debugging: Updating Automatically\n\nJosh is trying to have the `ledScreen` update automatically instead of with a button press. He's started the program, but it's not working correctly. His pair programming partner, Jessie, said she thinks they need to add an [`ledScreen.clear()`(#f78183)][0] block to their code, but isn't sure where. Can you help debug their code and get the app to work how they're expecting?\n\n-   **What is happening:** When you change the sliders, the rows and columns light up but don't disappear. Eventually, the whole screen is lit up.\n-   **What we expected to happen:** When you change the sliders, only one row and one column light up at a time.\n\n# Do This\n\n1.  Run Josh and Jessie's code to see how it is working\n2.  Add [`ledScreen.clear()`(#f78183)][1] blocks to their code to try and fix their bug\n    -   Hint: You'll need two [`ledScreen.clear()`(#f78183)][2] blocks in total: one for each event.\n\nRun the code until only one row and column appear on the `ledScreen`!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/6": {
    "long_instructions": "# LED Designs\n\nYou can use dropdowns and the [`ledScreen.display()`(#f78183)][0] block to display customized images on the micro:bit `ledScreen`. This app lets uses choose between a circle or an X for a game they are playing. \n\nThe circle has already been setup using an [`if-statement`(#64B5F6)][1] and the [`ledScreen.display()`(#f78183)][2] block. Can you add code to make the X work as well?\n\n# Do This\n\n1.  Find the section of the code that says \"Add your code here\" [(Show me where)][3]\n2.  Using the circle as a model, add an [`if-statements`(#64B5F6)][4] to check the value from the dropdown\n    -   Use the [`==`(#FFB74D)][5] block to check if the value from the dropdown is `X`\n3.  Inside the if-statement: Create an `X` design on the `ledScreen`\n    -   Use the [`ledScreen.display()`(#f78183)][6] block and put a `1` in the spaces to create an `X`\n\nRun your code and verify that program works correctly!",
    "callouts": {
      "CSD U6L10.2 - add_code": "Add your code here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Combine Inputs - PA_mb2022": {
        "display_name": "Smiley Faces",
        "bubble_choice_description": "Choose either a smiley face or frowny face to appear on your ledScreen",
        "long_instructions": "# Smiley Faces\r\n\r\nUse dropdowns and the [`ledScreen.display()`(#f78183)](/docs/ide/applab/expressions/ledScreen.display) block to display different smiley faces to the user.\r\n\r\n# Do This\r\n1. ::: details [Create a variable that gets the value from the dropdown design element.]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the dropdown\r\n    :::\r\n2. ::: details [Add an if-statment to check if the value from the dropdown is `smiley`]\r\n\t- Drag out an [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) block\r\n    - Use the [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check if the value from the dropdown is `smiley` \r\n   :::\r\n3. ::: details [Inside the if-statement: Create a smiley face design on the `ledScreen`]\r\n\t- Use the [`ledScreen.display()`(#f78183)](/docs/ide/applab/expressions/ledScreen.display) block and put a `1` in the spaces to create a smiley face \r\n    :::\r\n4. ::: details [Add an if-statment to check if the value of the dropdown is `frowny`]\r\n\t- Drag out an [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) block\r\n    - Use the [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check if the value from the dropdown is `smiley` \r\n   :::\r\n5. ::: details [Inside the if-statement: Create a frowny face design on the `ledScreen`]\r\n\t- Use the [`ledScreen.display()`(#f78183)](/docs/ide/applab/expressions/ledScreen.display) block and put a `1` in the spaces to create a frowny face\r\n    :::\r\n\r\nRun your code and verify that program works correctly!",
        "callouts": {
          "CSD U6L10.2 - add_code": "Add your code here!"
        }
      },
      "CSD U6 - Combine Inputs - PB_mb2022": {
        "display_name": "Quiz Question",
        "bubble_choice_description": "Use a dropdown and the ledScreen to create a quiz question game",
        "long_instructions": "# Multiple-Choice Quiz\r\n\r\nUse a dropdown and the [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to simulate an interactive quiz question. The app has already been designed, but now needs to be coded.\r\n\r\n# Do This\r\n1. ::: details [Create a variable that gets the value from the dropdown design element.]\r\n\t- Use a [`var x = __`(#BB77C7)](/docs/applab/declareAssign_x/) and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the dropdown\r\n    :::\r\n2. ::: details [Add an if-statment to check for the correct answer]\r\n\t- Drag out an [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) block\r\n    - Use the [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check the value from the dropdown.\r\n   :::\r\n3. ::: details [Inside the if-statement: display \"Correct\" on the `ledScreen`]\r\n\t- Use the [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to display the word \"Correct\"\r\n    :::\r\n4. ::: details [Add three more if-statments to check for the incorrect answers]\r\n\t- Drag out three [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) blocks\r\n    - Use the [`==`(#FFB74D)](/docs/applab/equalityOperator/) block to check the other values from the dropdown.\r\n   :::\r\n5. ::: details [Inside each if-statement: display \"Incorrect\" on the `ledScreen`]\r\n\t- Use the [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to display the word \"Incorrect\"\r\n    :::\r\n\r\nRun your code and verify that program works correctly!"
      },
      "CSD U6 - Combine Inputs - PC_mb2022": {
        "display_name": "Quiz Question",
        "bubble_choice_description": "Use a slider and the ledScreen to notify people if the temperature is too hot or cold",
        "long_instructions": "# Temperature Warning\r\n\r\nThis app simulates a temperature control app - you can use the slider to adjust the temperature in a room somewhere. However, certain temperatures are too hot or too cold - when this happens, the `ledScreen` should display a message warning the people in the room that the temperature has been adjusted:\r\n\r\n- If the temperature is below 40: warn users \"Too cold!\"\r\n- If the temperature is above 90: warn users \"Too hot!\"\r\n\r\n# Do This\r\n1. ::: details [Add an if-statment to check if the temperature is too cold]\r\n\t- Drag out an [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) block\r\n    - Use the [`<`(#FFB74D)](/docs/ide/applab/expressions/lessThanOperator) block to check if the value from the slider is less than 40.\r\n   :::\r\n2. ::: details [Inside the if-statement: display \"Too Cold!\" on the `ledScreen`]\r\n\t- Use the [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to display the words \"Too Cold!\"\r\n    :::\r\n3. ::: details [Add an if-statment to check if the temperature is too hot]\r\n\t- Drag out an [`if-statement`(#64B5F6)](/docs/applab/ifBlock/) block\r\n    - Use the [`>`(#FFB74D)](/docs/ide/applab/expressions/lessThanOperator) block to check if the value from the slider is greater than 90.\r\n   :::\r\n4. ::: details [Inside the if-statement: display \"Too Hot!\" on the `ledScreen`]\r\n\t- Use the [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) block to display the words \"Too Hot!\"\r\n    :::\r\n\r\nRun your code and verify that program works correctly!"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/8": {
    "long_instructions": "<img src=\"https://images.code.org/74019d972f7a63e8f4f16cbec2c2662a-image-1634600926494.png\" style=\"width: 150px; float:right; margin: 10px;\" />\n\n# Traffic Control\n\nYou are helping design an app that can control the traffic lights in a construction zone. The app will control the lights to tell drivers whether to merge left or right in order to avoid construction.\n\nThe app has already been started for you, but the code needs to be finished.\n\n## Do This\n\n1.  Get the value from the direction dropdown and store it in a variable\n2.  Add an [`if-statement`(#64B5F6)][0] to check if the value from the dropdown is `left`\n3.  Inside the if-statement: use the [`ledScreen.display()`(#f78183)][1] block to display an arrow pointing left.\n4.  Add an [`if-statement`(#64B5F6)][2] to check if the value from the dropdown is `right`\n5.  Inside the if-statement: use the [`ledScreen.display()`(#f78183)][3] block to display an arrow pointing right.",
    "mini_rubric": {
      "rubric_key_concept": "Combining input and output elements from the micro:bit and the screen to create an app",
      "rubric_performance_level_1": "The app works as described, with variables and if-statements used to get the values from the screen and to turn on the LEDs in the correct direction.",
      "rubric_performance_level_2": "The app correctly gets the variable from the screen and attempts to update the LEDs with if-statements, but there may be an error with the if-statement",
      "rubric_performance_level_3": "There are multiple errors involving the variables, if-statements, or ledScreen blocks that stop the LEDs from turning on",
      "rubric_performance_level_4": "The app has not been changed."
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/9/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Combine Inputs - ChalA_mb2022": {
        "display_name": "LED Mood Ring",
        "bubble_choice_description": "Create an app prototype that simulates a Mood Ring, which changes the design of the LEDs based on the mood of the user",
        "long_instructions": "<!-- \r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/cce9c3a7723586f2fc4d590843dc1d2a-image-1648843035099.8.a-finished.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n--->\r\n\r\n# LED Mood Ring\r\n\r\nA [Mood Ring](https://en.wikipedia.org/wiki/Mood_ring) is a piece of jewelry with a stone that can change color based on your \"mood\" (but really, it changes color based on temperature). These were popular gift items in the 1980's since the ring could change color based on the user.\r\n\r\nCreate an app that lets the user select a mood from a dropdown, then updates the image on the `ledScreen` to match the mood. Your app should have 4 moods. Two moods - `relaxed` and `excited` have already been designed for you in Design Mode, and you need to add two more moods. You can also add more options to the dropdown and make as many moods as you want!\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n- Decide the other moods you would like to include in your app\r\n- Decide which designs you would like to use to represent each mood\r\n\r\n**Design Mode:**\r\n- Add your other moods to the dropdown menu so there are at least four options\r\n\r\n**Code Mode:**\r\n- Add [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the dropdown and update the color LEDs. You will need at least four if-statements for each mood.\r\n\r\n**Run Your Code!**\r\n- Have a partner try out your app. They can pick a mood without you seeing the app and only looking at the micro:bit. See if you can tell their mood based only on the lights and design of the LEDs."
      },
      "CSD U6 - Combine Inputs - ChalB_mb2022": {
        "display_name": "Motorcycle Movement",
        "bubble_choice_description": "Create an app that moves a motorcycle left and right on the screen using the micro:bit buttons",
        "long_instructions": "# Motorcycle Movement\r\n\r\nCreate an app that moves a motorcycle left and right on the screen using the buttons on the micro:bit. The app has already been started for you: pressing the A button will move the motorcycle to the left by 10 units. This app uses the [Counter Pattern](/docs/concepts/app-lab/the-counter-pattern/) to move the motorcycle.\r\n\r\n# Do This\r\n\r\n* Using the working A button as an example, program the B button to make the motorcycle go to the right."
      },
      "CSD U6 - Combine Inputs - ChalC_mb2022": {
        "display_name": "Trivia Game",
        "bubble_choice_description": "Create an app that asks the user a trivia question, then uses the micro:bit to celebrate when they get the answer correct",
        "long_instructions": "# Trivia Question\r\n\r\nCreate an app that asks the user a trivia question and lets them type in their response. If they answer correctly, the micro:bit should light. If they answer incorrectly, nothing should happen.\r\n\r\n## Do This\r\n\r\n**Planning:**\r\n\r\n- Decide on a trivia question you would like to ask the user. Make sure your question has one clear answer!\r\n\r\n**Design Mode:**\r\n\r\n- Edit the label to display your trivia question\r\n\r\n**Code Mode:**\r\n\r\n1) Use a variable and [`getProperty()`(#fff176)](/docs/applab/getProperty/) block to get the value from the answer input box\r\n2) Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check if the user entered the correct answer. If they did, have the micro:bit display a message on the `ledScreen`\r\n\r\n**Run Your Code!** See if a partner can answer your trivia question!\r\n\r\n**Optional Extensions:**\r\n\r\n3) Experiment with the `else` part of an `if-statement` to make your program do something if the user answers incorrectly\r\n4) Create a new celebration screen that the user sees when they get the answer correct"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/10/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever you are finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/10/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or lighting up the `ledScreen`. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/10/levels/3": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device uses inputs and outputs to function. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/10/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - <a href=\"https://docs.google.com/document/d/12tyPbm7fUlFkQCy_pVjxTcoISKbgXuKxdQOlhtJoSdM/edit#\" target=\"_blank\">click here to view the rubric</a>. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever you're finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/10/levels/5": {
    "dsls": {
      "title": "CS Discoveries Rapid Survey!"
    },
    "sublevels": {
      "csd-pulse-check-survey-preamble_mb2022": {
        "dsls": {
          "markdown": "### Please take a moment to respond to these **five quick questions**.\n\n<small>\n<em>Code.org takes your privacy seriously.</em> Your responses here will be kept <strong>anonymous</strong>. Your teacher can see responses for the whole class, but without names attached.\n</small>\n"
        }
      },
      "csd-pulse-check-survey-1-q1 U6Ch1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q2 U6Ch1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I have the ability to learn computer science."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q3 U6Ch1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I like this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q4 U6Ch1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I feel comfortable in this computer science class."
            }
          ]
        }
      },
      "csd-pulse-check-survey-1-q5 U6Ch1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future."
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/1": {
    "display_name": "Sensor Experiment",
    "long_instructions": "# Sensor Experiment\n\nRun the program and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:\n\n-   What does this sensor measure?\n-   What is its maximum value?\n-   What is its minimum value?",
    "teacher_markdown": "This level takes advantage of two sensors on the micro:bit - a light sensor and a temperature sensor. Micro:bit V2 also have a sound sensor, but these levels focus on the sensors shared between the V1 and V2 versions of the micro:bit.\n\nEncourage students to relate the sensors to their own senses and interact with the micro:bit that way - for example, what happens when we show or hide things from the device?\n\nThrough experimentation, students should notice that the light sensor minimum value is 0 and the maximum value is 255. Students may also notice that one sensor (temperature) doesn't seem to change very much."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/2": {
    "long_instructions": "# Light Sensor Updates\n\nThis app is very similar to the last, but we've added a button with the ID \"updateButton\". Write a program that displays the current value of the light sensor every time the update button is clicked.\n\n# Do This\n\n1.  Inside the [`onEvent()`(#fff176)][0] block, update the text of the `lightValue` element using the [`lightSensor.value`(#f78183)][1] block.\n\n**Run Your Code!** Try covering the micro:bit and updating the screen, then try shining a flashlight on the micro:bit and updating the screen!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/3": {
    "teacher_markdown": "Students should notice two new blocks in this code - `setScale()` and `onBoardEvent` which refers to the `lightSensor`. Students might predict that something will change on the screen related to the light sensor, but they may not be sure how the board event works. They may notice that `setScale` includes the value 450 which is the height of the screen. Once students run the program and see the emoji moving up and down on the screen, they may be able to make the connection between the scale value and the screen height. It's okay if students still aren't sure about the new board event, since this is introduced in the following level.",
    "contained levels": [
      {
        "long_instructions": "# Make a Prediction\n\nRead the code in this program and make a prediction below. What do you think this program will do when you run it?"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/4": {
    "long_instructions": "# Data Event\n\nEach of these sensors emits a special event called \"data\" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.\n\n## Do This\n\n1.  Create an event to continuously check the `lightSensor`\n    -   Drag out an [`onBoardEvent()`(#f78183)][0] to check the `lightSensor` for a `data` event\n    -   ::: details [**Show Me How**]\n        [][1]\n        :::\n2.  Inside the event, update the screen to display the value of the light sensor\n    -   Use the [`setText()`(#fff176)][2] and [`lightSensor.value`(#f78183)][3] blocks to update the screen\n\n**Run Your Code!** You should see the screen update in real-time based on the light in the room. How low can you make the sensor go? How high can you make it go?"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/5": {
    "long_instructions": "# Set Scale\n\nThe light sensor ranges from 0-255, but you can also use a [`setScale()`(#f78183)][0] block to adjust the range of the sensor. These blocks are usually added to the beginning of your code and only need to be used once.\n\n# Do This\n\n1.  Set the range of the `lightSensor` to be between 0 and 100\n    -   Add a [`lightSensor.setScale()`(#f78183)][1] block to the top of your code.\n    -   Set the first parameter to `0` and the second parameter to `100`. This represents a range from 0-100\n    -   ::: details [Show Me How]\n        [][2]\n        :::\n\n**Run Your Code!** You should notice the values now stay between 0 and 100."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/6": {
    "long_instructions": "# Change Event\n\nThe `data` event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor `change` event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.\n\nLet's write a program that updates the screen anytime the temperature sensor changes.\n\n## Do This\n\n1.  Create an event to check the `tempSensor` when it changes\n    -   Drag out an [`onBoardEvent()`(#f78183)][0] to check the `tempSensor` for a `change` event\n    -   ::: details [**Show Me How**]\n        [][1]\n        :::\n2.  Update the screen when the temperature changes\n    -   Inside the [`onBoardEvent()`(#f78183)][2] block:\n        -   Update the screen with the new temperature value\n\n**Run Your Code!** Try placing your thumb over the temperature sensor to warm up the sensor and get it to change. See how your program responds!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Sensors - PA_mb2022": {
        "display_name": "Thermometer App",
        "bubble_choice_description": "Use the temperature sensor to create a thermometer app",
        "long_instructions": "# Make a Thermometer App\r\n\r\nWhile the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties [`tempSensor.F`(#f78183)](/docs/applab/tempSensor.F/) and [`tempSensor.C`(#f78183)](/docs/applab/tempSensor.C/) which convert the raw input value to either Fahrenheit or Celsius.\r\n\r\nLet's use these blocks to display the temperature near the micro:bit like a thermostat does.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to continuously check the `tempSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `tempSensor` has `data`\r\n    :::\r\n2) ::: details [Update the screen to display the temperature in F and C]\r\n\t- Inside the [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n\t\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the Fahrenheit label to [`tempSensor.F`(#f78183)](/docs/applab/tempSensor.F/)\r\n    \t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the Celsius label to [`tempSensor.C`(#f78183)](/docs/applab/tempSensor.C/)\r\n    :::\r\n\r\n**Run your program!** You should see the temperature update in real-time. To test the program, hold your finger over the sensor and see if the temperature increases due to body heat."
      },
      "CSD U6 - Sensors - PB_mb2022": {
        "display_name": "Interactive Birthday Card",
        "bubble_choice_description": "Use the temperature sensor to detect when someone blows out the candles of a card",
        "long_instructions": "# Interactive Birthday Card\r\n\r\nThis app simulates an interactive greeting card that you can find in stores. The app displays several candles and, when the user blows on the micro:bit, the candles should disappear and the app should say \"Happy Birthday!\". This app will need to use the `tempSensor` event to detect a `change` in the temperature.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to check when the `tempSensor` has changed]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `tempSensor` has a `change`\r\n    :::\r\n2) ::: details [When the temperature changes, update the card to hide the candles and have the micro:bit say Happy Birthday]\r\n\t- Inside the [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n    \t- Use [`hideElement()`(#fff176)](/docs/applab/hideElement/) to hide the candles\r\n        - Use [`ledScreen.scrollString()`(#f78183)](/docs/ide/applab/expressions/ledScreen.scrollString) to update the `ledScreen` to say \"Happy Birthday!\"\r\n   :::\r\n\r\n**Run Your App!** You should be able to blow on the micro:bit to trigger the temperature sensor. This will make the candles disappear and the micro:bit will wish you Happy Birthday!"
      },
      "CSD U6 - Sensors - PD_mb2022": {
        "display_name": "Light Meter",
        "bubble_choice_description": "Use the light sensor to create an interactive light meter",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/62718fc559646f13520aa1c68a69b4e5-image-1650057902548.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Light Meter\r\n\r\nThis app simulates a \"Light Meter\" that displays how bright or dark your environment is. It uses a button that changes height to react to the light in the room - the brighter the light, the taller the button.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Set the `lightSensor` scale to match the height of the app screen]\r\n\t- Add a [`lightSensor.setScale()`(#f78183)](/docs/applab/lightSensor.setScale/) block to set the range of values from 30-400\r\n    :::\r\n2) ::: details [Create an event to continuously check the `lightSensor`]\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `lightSensor` has `data`\r\n    :::\r\n3) ::: details [Update the button's height to match the `lightSensor` value]\r\n\t- Use the [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) blocks to update the `height` of the button\r\n    :::\r\n\r\n**Run The App!** Try shining a flashlight on the micro:bit, the app should react in real time!"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/8": {
    "long_instructions": "# Room Monitor\n\nA micro:bit is installed in a secure room and sends data back to a central command post that monitors activity. The app should automatically update and display the following information:\n\n-   The current temperature\n-   The current light level on a scale from 0-10\n\n## Do This\n\n-   Create a program that matches the description above. Make sure that the values are automatically updating as the program is run.",
    "mini_rubric": {
      "rubric_key_concept": "Use the sensors to create an app",
      "rubric_performance_level_1": "The app displays each sensor value in real-time, and the light sensor scaled from 0-10",
      "rubric_performance_level_2": "The app displays each sensor value, but it may not be in real-time or the light sensor is from 0-1023 instead of 0-10",
      "rubric_performance_level_3": "The app is missing at least one of the sensor values",
      "rubric_performance_level_4": "The app has not been started"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/11/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Sensors - CA_mb2022": {
        "display_name": "Threshold",
        "bubble_choice_description": "Learn to use the threshold block with the sound sensor",
        "long_instructions": "# Change Threshold\r\n\r\nBy default a sensor's `change` event fires every time the sensor value changes at all, even by one. The light sensor is constantly fluctuating, so you probably want the `change` event to be a little less responsive.\r\n\r\nThe [`threshold`(#f78183)](/docs/applab/lightSensor.threshold/) property allows you to set how much a sensor should change before considering it a `change` event. For example, setting `lightSensor.threshold = 100` would cause the light sensor's `change` event only to trigger if its value increased or decreased by at least 100.\r\n\r\n## Do This\r\n\r\nThis app changes the background color of the screen whenever the light sensor value changes, but we want to only respond to big changes in light (like a bright flash). Use the [`lightSensor.threshold`(#f78183)](/docs/applab/lightSensor.threshold/) block to fix it.\r\n\r\n1) Add a [`lightSensor.threshold`(#f78183)](/docs/applab/lightSensor.threshold/) block before the event handler\r\n2) Test out how different threshold values impact the \"change\" event\r\n3) Choose a threshold value that makes the screen background change only when a bright flash or suddnen loss of light is sensed.\r\n\r\n_Tip: Your threshold depends on how much ambient light there is in the room, and how much it changes. A threshold that works in a dark room may not work in a bright classroom._"
      },
      "CSD U6 - Sensors - CB_mb2022": {
        "display_name": "Colors and Sensors",
        "bubble_choice_description": "Create an app where the background color reacts to the light in the room",
        "long_instructions": "# Changing Colors with Sensors\r\n\r\nThe [`setScale()`(#f78183)](/docs/applab/soundSensor.setScale/) block can convert the full range of sensor readings into different ranges, including ranges that can be used for RGB values (0-255). Let's build on that idea to make an app that can changes the background color based on the sensors.\r\n\r\n# Do This\r\n\r\n1. Set the `lightSensor` scale to a range of values between 0 and 255\r\n2. Update the background color of the screen to match the value of the light sensor\r\n\t- Inside the [`setProperty()`(#fff176)](/docs/applab/setProperty/) block, replace one of the `255` values with [`lightSensor.value`(#f78183)](/docs/ide/applab/expressions/lightSensor.value)\r\n\r\n**Run Your Code!** You should be able to change the background color by changing the light near the micro:bit!"
      },
      "CSD U6 - Sensors - ChalE_mb2022": {
        "display_name": "Automatic Windows",
        "bubble_choice_description": "Create an app prototype that simulates a device that automatically opens and closes window blinds based on the sunlight outside.",
        "long_instructions": "# Automatic Windows\r\n\r\nCreate an app prototype that simulates a device that automatically opens and closes window blinds based on the sunlight outside. The app should use the light sensor to detect the light level in the room: if there is a lot of light, open the blinds to let in the sunlight through the window. If there is not a lot of light, close the blinds to turn on other lights inside the house.\r\n\r\nThis app simulates this effect by using images on the app screen. This app has an image element named `blindsImage` that displays window blinds. If we want to open the window, we need to hide the `blindsImage` element; if we want to close the window, we need to show the `blindsImage` element.\r\n\r\n## Do This\r\n1) Use a `setScale` block to set the scale of the lightSensor from 0-100\r\n2) Use an `onBoardEvent` to detect the data from the lightSensor\r\n3) If the lightSensor value is greater than 50: hide the `blindsImage` element, which simulates opening the window\r\n4) If the lightSensor value is less than 50: show the `blindsImage` element, which simulates closing the window"
      },
      "CSD U6 - Sensors - ChalD_mb2022": {
        "display_name": "Environmental App",
        "bubble_choice_description": "Create an app prototype that could be used in an environmental or ecology setting to monitor plants or animals in an environment",
        "long_instructions": "# Environmental App\r\n\r\nCreate an app prototype that could be used in an environmental or ecology setting to monitor plants or animals in an environment. For example, the micro:bit could be placed in a pet sleeping area and if the app detects the temperature is too cold, it could recommend the heat be turned on. Or, the micro:bit could be placed with a plant and if the app detects that the light is too low, it could recommend that the plant be moved into the sunlight.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      },
      "CSD U6 - Sensors - ChalG_mb2022": {
        "display_name": "Safety App",
        "bubble_choice_description": "Create an app prototype that could be used in a safety setting to warn the user of an unsafe environment",
        "long_instructions": "# Safety App\r\n\r\nCreate an app prototype that could be used to detect safety concerns and react or alert the user. For example, it could detect when the temperature is too hot, possibly indicating that there is a fire. Or the app could detect when the noise level is too loud and could hurt someone's ear drums, then give the user a warning. \r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/1": {
    "teacher_markdown": "The accelerometer has two properties: the `roll` and `pitch`. The `roll` corresponds to tilting left and right, and `pitch` corresponds to tilting forwards and backwards. Students should notice this if they're holding their micro:bit level to the ground with the USB cable pointing away from them. Students may also experiment with moving their micro:bit in the physical space - moving it up and down or left and right - but this doesn't affect the accelerometer. Only rotating and tilting the micro:bit will change the roll and pitch.",
    "contained levels": [
      {
        "long_instructions": "# Accelerometer\n\nThe code below uses a new sensor called an **accelerometer**, which can detect the position and rotation of the micro:bit. Take a look at the code below, then predict what will happen on the screen as you move or rotate the micro:bit."
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/2": {
    "long_instructions": "# Pitch and Roll\n\nThis program displays the board's pitch and roll, and it will also change colors depending on their values.  \n\n# Do This\n\nMake the program change the following colors by tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch: 0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color: burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div> Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color: yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive pitch?\n\nWhich way should you tilt to get a negative roll?",
    "teacher_markdown": "The last two questions depend on how students are holding their micro:bits. Encourage students to all hold their devices the same way:\n\n-   The board starts flat and level to the ground\n-   The USB cable is pointed away from students so if you looked down on the device, all of the letters and numbers would appear rightside-up"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/3": {
    "long_instructions": "# Pitch\n\nThis program lights the top row of the `ledScreen` when you tilt the board forward. Your task is to light up the bottom row of the `ledScreen` when you tilt the board backwards.\n\n# Do This\n\n1.  When the board is tilted forward, turn off the bottom row of LEDs [(Show me where)][0].\n2.  When the board is tilted backwards, turn on the top row of LEDs [(Show me where)][1].\n\n**Run your code!** Try tilting the board forward and backwards and seeing if the LEDs light up.",
    "callouts": {
      "CSD U6L12.3 - turn_off": "Add code to turn OFF the LEDS here",
      "CSD U6L12.3 - turn_on": "Add code to turn ON the LEDS here"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/4": {
    "long_instructions": "# Roll\n\nThis program should display \"Left\" or \"Right\" on the screen, depending on which way the board is tilted.\n\n## Do This\n\n1.  Get the `roll` property of the accelerometer and store it in a variable\n    -   Use the [`var x = __;`(#BB77C7)][0] and [`accelerometer.getOrientation()`(#f78183)][1] blocks to get the `roll` value\n2.  If the board is tilted left: update the screen to say \"Left\"\n    -   Use an [`if statement`(#64B5F6)][2] and `<`(#FFB74D) or `>`(#FFB74D) blocks to determine if the board is tilted left\n    -   Use a [`setText()`(#fff176)][3] block to update the label on the screen\n3.  If the board is tilted right: update the screen to say \"Right\"\n    -   Use an [`if statement`(#64B5F6)][4] and `<`(#FFB74D) or `>`(#FFB74D) blocks to determine if the board is tilted left\n    -   Use a [`setText()`(#fff176)][5] block to update the label on the screen\n\n**Run Your Code!** As you tilt the board left and right, you should see the screen update"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/5": {
    "long_instructions": "# Combining the Accelerometer and Counter Pattern\n\nYou can use the accelerometer with variables and the [counter pattern][0] to move elements on the screen depending on how the micro:bit is tilted.\n\nIn this app the goalie is trying to block the soccer ball. The ball will move automatically across the screen using the counter pattern and the player should move when you tilt the board, but the code isn't finished.\n\n## Do This\n\n1.  Find the section of the code that says \"Add your code here!\"\n2.  Use a [`getProperty()`(#fff176)][1] block to get the `y` position from the `player` element ([**Show Me Where**][2])\n3.  Use the [`accelerometer.getOrientation()`(#f78183)][3] block to get the `pitch` property from the accelerometer ([**Show Me Where**][4])\n4.  Add these two variables together to update the player's y-position ([**Show Me Where**][5])\n    -   You can use a `+`(#FFB74D) block, or you can type in the two variables in the empty box in the block\n\n**Run Your Program!** You should be able to tilt the micro:bit to move the player on the screen!",
    "callouts": {
      "CSD U6L12.PB - playery": "Get the player's y position here!",
      "CSD U6L12.PB - pitch": "Update the pitch variable here!",
      "CSD U6L12.PB - adding": "Update the y-position here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/6": {
    "long_instructions": "# Shake Event\n\nThis program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.\n\n# Do This\n\n1.  Change the event so it triggers every time the board is shaken. [**(Show me where)**][0]\n2.  Add code inside the event so that `steps` increases every time the board is shaken [**(Show me where)**][1].\n    -   _Hint: Use the [Counter Pattern][2] to update your steps variable!_",
    "callouts": {
      "CSD U6L12.5 - shake_event": "Change this event to detect a shake event",
      "CSD U6L12.5 - increase_steps": "Increase steps here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/7": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Accelerometer - PA_mb2022": {
        "display_name": "Movement Meter",
        "bubble_choice_description": "Detect how much the micro:bit wobbles when passed back and forth",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/87f9ab915956478189e98a9e16ae36fa-image-1648866175432.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Movement Meter\r\n\r\nThis program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the screen will change to game over.\r\n\r\n\r\n## Do This\r\nThis program has two bugs that you need to fix:\r\n\r\n1) The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.\r\n2) The programmer forgot how to use the counter pattern to increase the movement variable.\r\n\r\nOnce you have found the bugs, run the program and try to pass the board to your partner without getting the game over screen."
      },
      "CSD U6 - Accelerometer - PE_mb2022": {
        "display_name": "Confetti Shaker",
        "bubble_choice_description": "Shake the micro:bit to simulate a confetti app",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/8952c029604fd39d51cbad5858b3395e-image-1648866065242.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Confetti Shaker\r\n\r\nThis app simulates a confetti shaker. When you shake the micro:bit, the confetti stars should jump around on the screen.\r\n\r\nRight now, only one star moves around and only once when the app first loads. We need to add an event to detect when the board shakes, and then update the app so _all_ of the stars move on the screen\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create an event to check when the micro:bit shakes]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect when the `accelerometer` has a `shake` event\r\n    :::\r\n2) ::: details [Move each star to a random location]\r\n\t- Use [`setProperty()`(#fff176)](/docs/applab/setProperty/) and [`randomNumber()`(#FFB74D)](/docs/applab/randomNumber_min_max/) blocks to update the `x` and `y` property of each star\r\n    \t- You will need ten [`setProperty()`(#fff176)](/docs/applab/setProperty/) blocks in total - two blocks for each `x` and `y`, repeated for all five stars.\r\n        - You can use the `star1` code as an example for how the other stars should look\r\n\t:::\r\n\r\n**Run Your Code!** You should be able to shake the micro:bit and see the stars move around!"
      },
      "CSD U6 - Accelerometer - PF_mb2022": {
        "display_name": "Number Tilting Game",
        "bubble_choice_description": "Tilt the micro:bit to get as close as you can to a target number",
        "long_instructions": "# Number Tilting Game\r\n\r\nThis app simulates a game where you try to match a number with a randomly generated target number. You can tilt the micro:bit left and right to adjust your number, trying to get it as close to the target number as possible. Once it's close enough, press the B button on the micr:bit to lock in your number.\r\n\r\nThe game has already been started, but the code that updates your number based on the micro:bit is missing. We'll need to use variables and the Counter Pattern to update our number and update the screen\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Detect when the micro:bit tilts left or right and store it in a variable]\r\n\t- Use the [`var x = __;`(#BB77C7)](/docs/applab/declareAssign_x/) and [`accelerometer.getOrientation()`(#f78183)](/docs/ide/applab/expressions/accelerometer.getOrientation) blocks with either `pitch` or `roll` to get the tilt value of the micro:bit\r\n    :::\r\n2) ::: details [Update the value of your number using the micro:bit tilt value]\r\n\t- Use the Counter Pattern to add the micro:bit tilt value to the `yourNumber` variable\r\n    :::\r\n3) ::: details [Update the screen with the new number]\r\n\t- Use [`setText()`(#fff176)](/docs/applab/setText/) to update the `yourNumberLabel`\r\n    :::\r\n\r\n**Run Your Code!** You should be able to tilt the micro:bit left and right and see your number update on the screen. Once it's close to the target number, press the right micro:bit button and see how close you were!\r\n\r\n"
      },
      "CSD U6 - Accelerometer - PG_mb2022": {
        "display_name": "Four Corners",
        "bubble_choice_description": "Tilt the micro:bit to select one of four possible animals",
        "long_instructions": "# Four Corners\r\n\r\nThis app lets you use the micro:bit to move a cursor to four quadrants on the screen with different animals in them. This is similar to children's games that use a controller to select their favorite animal. This requires using [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to update the position of the cursor based on the tilt of the micro:bit.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Get the `pitch` and `roll` properties of the accelerometer and store them in two variables]\r\n\t- Use two [`variable`(#BB77C7)](/docs/applab/declareAssign_x/) blocks to determine the `pitch` and `roll` of the micro:bit\r\n    :::\r\n2) Use [`if statements`(#64B5F6)](/docs/applab/ifBlock/) to update the cursor position based on the `pitch` and `roll` values\r\n\t- If the `roll` is `<`(#FFB74D) -20: move the cursor to the left side of the screen by updating the `x` position to `50`\r\n    - If the `roll` is `>`(#FFB74D) 20: move the cursor to the right side of the screen by updating the `x` position to `280`\r\n    - If the `pitch` is `<`(#FFB74D) -20: move the cursor to the top of the screen by updating the `y` position to `50`\r\n    - If the `pitch` is `>`(#FFB74D) 20: move the cursor to the bottom of the screen by updating the `y` position to `400`\r\n\r\n**Run Your Code!** You should be able to tilt the micro:bit and have the cursor jump to one of four quadrants"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/8": {
    "long_instructions": "# Assistive Mouse\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\nAssistive Technology helps people with disabilities use technology in the same way able-bodied individuals can. For example, someone with a physical disability with their hand or wrist may not be able to use a mouse the same way we can. But, the micro:bit can help them navigate an app in a different way.\n\nThis app is designed to use the accelerometer to move the cursor, then use a button to detect a \"click\". The button click has already been coded, but the app still needs the accelerometer.\n\n## Do This\n\n1.  Create an event to continuously check the accelerometer\n2.  Get the `pitch` and `roll` properties of the accelerometer and store them in two variables\n3.  Update the `x` and `y` position of the cursor based on the `pitch` and `roll`\n    -   _Hint:_ if the cursor is moving too fast when you adjust the micro:bit, try dividing the `pitch` and `roll` values by 10 to make the changes smaller and easier to see!",
    "mini_rubric": {
      "rubric_key_concept": "Use the accelerometer in an event and with data to create an app",
      "rubric_performance_level_1": "The app matches the description, using an onBoardEvent to detect accelerometer movement and uses variables and getOrientation blocks to make changes to the x and y positions",
      "rubric_performance_level_2": "The app uses an onBoardEvent, but doesn’t make changes to the x and y positions of the pointer",
      "rubric_performance_level_3": "The app does not use the correct event block and does not make changes to the position of the pointer",
      "rubric_performance_level_4": "The app has not been started"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/12/levels/9": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Accelerometer - CA_mb2022": {
        "display_name": "Orange and Purple Bugs",
        "bubble_choice_description": "Use the micro:bit buttons and the accelerometer to move each bug",
        "long_instructions": "# Orange and Purple Bugs\r\n\r\nThis app should move either the orange or purple bug depending on which button on the micro:bit is pressed and how the micro:bit is tilted. Right now, only the purple bug works.\r\n\r\n## Do This\r\n\r\n1) Using the purple bug as an example, update the app so the orange bug will move when the B button is pressed."
      },
      "CSD U6 - Accelerometer - ChalA_mb2022": {
        "display_name": "Safety Settings",
        "bubble_choice_description": "Create an app that uses the accelerometer to simulate a safety sensor on construction equipment",
        "long_instructions": "# Safety Settings\r\n\r\nMany construction tools or equipment have safety sensors built-in to the devices so they can only be operated under certain conditions. This helps avoid situations where someone injures themselves by accidentally using the device without taking the proper safety precautions.\r\n\r\nCreate an app that simulates firing a laser (aka: the `ledScreen`) by pressing a button, but will only work when the device is pointed away from the user so the laser doesn't go into their eyes. This requires using the Accelerometer and detecting the `roll` or `pitch` of the device.\r\n\r\nThe app has already been started for you so that the screen will display the roll and pitch of the micro:bit. Your task is to determine the roll or pitch when the micro:bit is facing away from you, then add code so the `ledScreen` only turns on when the micro:bit is in the correct position.\r\n\r\n## Do This\r\n**Planning:**\r\n- Run the app and rotate the micro:bit to determine the correct `roll` or `pitch` values that represent when the micro:bit is facing away from you\r\n\r\n**In Code Mode:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) Create an event to check when the A button is pressed\r\n2) ::: details [If the micro:bit is facing away from the user: turn on all of the LEDs]\r\n\t- Use an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) to check the value of the `roll` or `pitch` that represents when it is turned away from the user\r\n\t- Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/): turn on all of the LEDs, which represents firing the laser\r\n   :::\r\n\r\n**Run Your Code!** If you press the button while the micro:bit is flat on the table, nothing should happen. But if you hold the micro:bit so it is facing away from you, the lights should turn on."
      },
      "CSD U6 - Accelerometer - ChalC_mb2022": {
        "display_name": "Car Wheel Alignment",
        "bubble_choice_description": "Create an app that simulates the sensor in cars and trucks that detects if the wheels are aligned and warns about flat tires",
        "long_instructions": "# Car Wheel Alignment\r\n\r\nMost cars have sensors to detect if the car is level, and will create a warning message if the car detects it is tilted slightly to the right or left. This can indicate a flat tire or that the wheels are out of alignment and the car needs to be taken to a service center.\r\n\r\nCreate an app that simulates this sensor, using the micro:bit to detect if it is level or tilted slightly to the left or right.\r\n- If the micro:bit is level, the status message should say \"Wheels are Aligned\"\r\n- If the micro:bit is tilted to the left, the status message should say \"Check left side tires\"\r\n- If the micro:bit is tilted to the right, the status message should say \"Check right side tires\"\r\n\r\n## Do This\r\n1) Create an event to continuously check the accelerometer\r\n2) Get the `roll` property of the accelerometer and store it in a variable\r\n3) If the micro:bit is tilted to the left: display \"Check left side tires\" on the screen\r\n4) If the micro:bit is tilted to the right: display \"Check right side tires\" on the screen\r\n\r\n**Run Your App!** If the micro:bit is on a level surface, the app should say \"Wheels are Aligned\". If you put the micro:bit on a tilted surface, the app should update to a different status message\r\n\r\n**Optional Extensions:**\r\n- Change the color of the text to make it appear like an error message if the circuit playground is tilted\r\n- Add an error message on the micro:bit itself"
      },
      "CSD U6 - Accelerometer - ChalG_mb2022": {
        "display_name": "Accessibility App",
        "bubble_choice_description": "Create an app prototype that could be used in an accessibility setting to make it easier for someone with a disability to use technology",
        "long_instructions": "# Accessibility App\r\n\r\nCreate an app prototype that could be used to increase accessibility and access to technology for people with disabilities. For example, a non-verbal user could use the accelerometer and LEDs to communicate. For more ideas around accessibility and computing, you can visit the [Access CSforAll website](https://www.washington.edu/accesscomputing/accesscsforall/videos) for more ideas.\r\n\r\nYou may not be able to create the \"perfect\" app yet, but you can develop a **prototype** which shows the general idea of the app and some of the basic features behind how it could work."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/1": {
    "teacher_markdown": "Students might predict that the screen will update with button presses and the emoji and background colors will change. They may notice that `updateScreen()` appears in three places: within the two button events, and as a larger green block at the bottom of the code. It's okay if they're not completely sure how the green block is working, and they may try to describe what's happening by relating to variables - that a variable can be used in place of a value, and maybe `updateScreen()` is being used as a placeholder for the code at the bottom of the screen. Guide students to notice this is useful because the same code can be used in two different places (the A button and the B button).\n\nIt's okay to not come to a firm conclusion, since students will watch a video in the next level that explains Functions and how to use them in code.",
    "contained levels": [
      {
        "long_instructions": "# Happiness Tracker\n\nThis app can be used to keep track of your current happiness and update the screen based on the result. When the user presses one of the buttons on the micro:bit, the screen should update.\n\nRead the code below and predict what you think will happen on the screen when the user interacts with the micro:bit. What do you think the green `updateScreen()` block is doing?"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/2": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Calling Functions\n\nThis app lets you click on aliens on the screen and an iamge on the `ledScreen` will appear to represent the moods of hte aliens. Yellow aliens are _meh_, and green aliens are surprised.\n\nThe app has already been started for you and has already **defined** two functions: `mehImage` and `surprisedImage` [**(Show Me Where)**][0]\n\nYou still need to **call** these functions within your program. Two of the aliens are already working correctly. Your task is to make the other aliens work correctly too!\n\n## Do This:\n\n1.  Look at the two examples that have already been completed [**(Show Me Where)**][1]\n2.  When you click an alien, change the image to match the mood of that alien\n    -   Inside each [`onEvent()`(#fff176)][2], drag out a green [`myFunction()`(#68D995)][3] block.\n    -   Replace `myFunction` with either `mehImage` or `surpriseImage` to match the alien you click\n\n**Run your code!** Try clicking on each of the aliens and see the micro:bit light up!",
    "callouts": {
      "CSD U6L14.3 - functions": "This section defines two functions",
      "CSD U6L14.3 - examples": "This event has already been completed"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/3": {
    "long_instructions": "# Creating Functions\n\nIn this app, some new aliens have appeared that are red and blue! When the user clicks on an alien, the LEDs should turn on to match the mood of these new aliens.\n\n-   **Red** aliens are **happy**.\n-   **Blue** aliens are **sad**.\n\nThe red aliens have already been completed, but the blue aliens still need to be finished. You'll need to **define** a function called `sadImage`, then **call** the function inside each event.\n\n## Do This\n\n**1) Defining Our Function**:\n\n-   At the bottom of the code, add a new [`function myFunction() {}`(#68D995)][0] block [**(Show Me Where)**][1].\n-   Name the function `sadImage`. Add a [`ledScreen.display()`(#f78183)][2] block to create a sad face.\n    -   You can use the `happyImage` display block as a reference\n\n**2) Calling Our Function**:\n\n-   At the top of the code, find the [`onEvent()`(#fff176)][3] blocks for the two blue aliens [**(Show Me Where)**][4].\n-   Add a [`myFunction()`(#68D995)][5] block to each event. Change the function mame to `sadImage`.\n\n**Run your code!** When you click an aliens, the lights should match the mood of the aliens!",
    "callouts": {
      "CSD U6L14.4 - define": "Define your function here!",
      "CSD U6L14.4 - call": "Call your function here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/4": {
    "long_instructions": "# Using Functions for Repeated Code\n\nThis app has the same aliens from before, but they are easily frightened - even pressing buttons on the micro:bit will cause the to aliens jump around on the screen. In the code, this is accomplished with two [`onBoardEvent()`(#f78183)][0] blocks.\n\nWhen we look at those two blocks, a lot of the code is repeated in both places. This is really inefficient! It would be much clearer if all of this code was **defined** in its own function in one place, and then we **call** that function every place we want to use it. This makes our code shorter and easier to read.\n\n## Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][1]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n**1) Defining Your Functions**\n\n-   At the bottom of the code, **define** a new function called `moveAliens` [(**Show Me Where**)][2]\n-   Find the sections of the code that is repeated in multiple places. Move that code into the function you just created\n\n**2) Calling Your Functions**\n\n-   Replace the original code by **calling** the `moveAliens` function\n\n**Check Yourself:** By now, your code should be _shorter_ and still work the same as before. You can run your code and make sure the aliens scatter when either button is pressed.",
    "callouts": {
      "CSD U6L5.14B - define": "Add your function here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/5": {
    "long_instructions": "# Adding New Features!\n\nOne advantage to using functions is it's easy to add new features! Let's add a new feature that lets you shake the micro:bit and causes the aliens to scatter.\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n## Do This\n\n1.  Add a new [`onBoardEvent()`(#f78183)][1] that uses the `accelerometer` to detect a `shake` event.\n2.  Drag out a green [`myFunction()`(#68D995)][2] block to **call** the `moveAliens` function\n\n**Run Your Code!** By making these two small changes, you should be able to shake the circuit playground and have the aliens move around the screen!",
    "callouts": {
      "CSD U6L5.14B - define": "Add your function here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/6": {
    "teacher_markdown": "Students should notice that the left and right buttons are used, and that the function at the bottom is using the accelerometer to move something on the screen. Students may predict that the function changes depending on which button is pressed - the left button moves the purple bug, and the right button moves the orange bug. Students may also notice that the function has a variable, `bug`, that is included at the top of the function and used throughout. \n\nIn the next level, students will watch a video describing how these functions work and how `bug` is a **parameter** that can be used to change the behavior of a function when the function is called, like moving the orange bug or purple bug.",
    "contained levels": [
      {
        "long_instructions": "# Bug Crawl\n\nThis program uses a function called `crawl`, but something is different about it. Read the code below and predict what you think will happen when we run the code. What do you think is happening when \"purpleBug\" and \"orangeBug\" are used in the parentheses?"
      }
    ]
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/7": {
    "long_instructions": "_This level follows a video that you may have watched with your class. If you missed the video, you can watch it in the Help and Tips tab of this level._\n\n# Functions with Parameters\n\nThis app has a new set of aliens who want to communicate in their alien language! When we click an alien, a message should appear on the top and bottom of the app and scrolling across the micro:bit. We can use a function with **parameters** to make it easier to update all of these places at once.\n\nThe `alienMessage` function has already been defined with a **parameter** called `text`. One alien has already been setup - it calls `alienMessage(\"Hello! I'm an alien!\")` to display a message on the screen and the micro:bit. We need to make the other aliens say something too!\n\n## Do This\n\n1.  Inside each [`onEvent()`(#fff176)][0]: drag out a [`myFunction(n)`(#68D995)][1] block\n2.  Replace the function name with `alienMessage`\n3.  Replace the **parameter** with the message you want the aliens to say. For example: `\"We come in peace!\"`, `\"I just flew in and my arms are tired!\"`, etc.\n\n**Run Your Code!** Verify that the messages change to match each alien!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/8": {
    "long_instructions": "# Defining Functions with Parameters\n\nIn this app, the aliens are hungry and have a choice of foods we can offer them. Clicking on a food should replace _each_ of the empty plates with that food.\n\nEach empty plate is represented by three different image elements - `food1`, `food2`, and `food3`. We'll create a **function** that updates all of the foods with the same image, and that image changes depending on which food you click. This will be the **parameter** in the function.\n\n## Do This:\n\n**1) Define Your Function**\n\n<img src=\"https://images.code.org/7fc23d999761c618688d476f15b12beb-image-1643671307997.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   At the bottom of the code, drag out a [`function myFunction(n) {}`(#68D995)][0] block ([**Show Me Where**][1])\n-   Rename the function to `setFoods`. Change the parameter to `food`\n\n<hr style=\"clear: both\" />\n\n**2) Update the Foods**\n\n<img src=\"https://images.code.org/9fc396415b6bb3abbe669a44df58342f-image-1643671382822.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   Inside the function: use three [`setProperty()`(#fff176)][2] blocks to update the `image` property of the `food1`, `food2`, and `food3` elements\n-   In each [`setProperty()`(#fff176)][3] block, replace the `image` value with the parameter `food`\n\n<hr style=\"clear: both\" />\n\n**3) Call Your Function**\n\n<img src=\"https://images.code.org/2cb1416ae57af6e60ef8cdeb4e88e1be-image-1643671489267.png\" style=\"width: 300px; float: right; border: solid 3px black; margin: 5px;\" />\n\n-   Inside each [`onEvent()`(#fff176)][4] for the food buttons: drag out a [`myFunction(n)`(#68D995)][5] block. Replace the function name with `setFoods`\n-   Update the **parameter** with the image that corresponds to each food:\n    -   Birthday Cake: `\"image://BirthdayCake.png\"`\n    -   Pizza Slice: `\"image://PizzaSlice.png\"`\n    -   Ramen: `\"image://Ramen.png\"`\n    -   Taco: `\"image://Taco.png\"`",
    "callouts": {
      "CSD U6L14.6 - define": "Add your function here!"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/9": {
    "long_instructions": "# Adding Parameters\n\nThis app lets you click on aliens to earn points. Everytime you click an alien, it will relocate to a random place on the map. The app uses a **function** with an `alienID` **parameter** to increase the score and move the aliens to a new location. You can run the app now and see how it works.\n\nRight now, the app increases the score by 1 for each alien. Let's update the app so the score changes depending on which alien you click. This means we'll need to add a **parameter** to our function to represent the different scores we can earn.\n\n## Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to expand\n\n</div>\n\n**1) Define Your Function**\n\n-   Scroll to the bottom of the code and find the `updateScore` function ([**Show Me Where**][1])\n-   Press the `→`(#68D995) arrow next to the function definition. Add a new parameter called `points` in the blank box\n-   In the code for the function, instead of updating the score `+ 1` every time, replace this code to use our parameter instead: `+ points`\n\n<hr style=\"clear: both;\" />\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][2]\n\n<br/>\n\nClick to expand\n\n</div>\n\n**2) Call Your Function**\n\n-   Scroll to the [`onEvent()`(#fff176)][3] blocks at the top of the code ([**Show Me Where**][4])\n-   For each `updateScore` function: press the `→`(#68D995) arrow to add a new parameter\n-   Use the following values for each of the aliens:\n    -   The green alien should add 10 points to the score\n    -   The red alien should add 8 points to the score\n    -   The yellow alien should add 6 points to the score\n    -   The blue alien should add 4 points to the score",
    "callouts": {
      "CSD U6L14.9 - define": "Here are the function definitions",
      "CSD U6L14.9 - events": "Here are the events"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/10": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Functions - P2A_mb2022": {
        "display_name": "Clouds",
        "bubble_choice_description": "Create a program that moves the clouds as you blow on the sensor",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/6a78fb12e01bde21792db9ff53caa436-image-1649197807725.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Clouds\r\n\r\nThis program makes the clouds move when you blow on the sound sensor. It has a function called `loopCloud()` which uses the parameter `cloudID` to move a cloud across the screen.\r\n\r\nBut, right now the function only moves `\"cloud0\"` across the screen. We need to update the function to use our parameter to move each cloud instead.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Update the function to use the `cloudID` parameter]\r\n\t* Scroll down to the `loopCloud()` function ([**Show Me Where**](#triggercallout=define))\r\n\t* Update the function so it uses the `cloudID` parameter\r\n    :::\r\n\r\n**Run the code!** Every cloud should move across the screen when you blow on the sensor!",
        "callouts": {
          "CSD U6L14.PA - define": "Here are the functions"
        }
      },
      "CSD U6 - Functions - P2C_mb2022": {
        "display_name": "Color Picker",
        "bubble_choice_description": "Use functions to help choose different colors for the app screen",
        "long_instructions": "# Color Picker\r\n\r\nIn this program, pressing the buttons at the bottom of the screen changes the color of the images. Right now it only works for the red button. Instead of using the same code for the other buttons, let's create a function with a parameter and use that for each of the other buttons.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create a `changeColor(color)` function]\r\n\t- Create a function `changeColor(color)` at the bottom of your code ([**Show Me Where**](#triggercallout=todo1))\r\n\t- Find the code that's already inside the `redButton` [`onEvent()`(#fff176)](/docs/applab/onEvent/) block ([**Show Me Where**](#triggercallout=todo2)). \r\n    - Move the code inside the `changeColor` function you just created\r\n    - Update the code to use the `color` parameter instead of the `\"red\"` values\r\n    :::\r\n2) ::: details [Call the `changeColor(color)` function with different values]\r\n\t- Inside the [`onEvent()`(#fff176)](/docs/applab/onEvent/) blocks at the top of the code: \r\n    \t- Call the `changeColor` function using the correct colors\r\n    :::",
        "callouts": {
          "CSD U6L14.PB - todo1": "Define your function here!",
          "CSD U6L14.PB - todo2": "Move this code into your function"
        }
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/13/levels/11": {
    "long_instructions": "# Digital Snowglobe\n\nA snowglobe is a toy with lots of glitter and small specks of paper in a glass sphere. When you shake the sphere, it looks like snow is swirling in the globe.\n\nEric is working on creating a digital snowglobe - when you shake the micro:bit, it simulates snow falling on a screen. He has 10 pieces of snow he wants to simulate, but he’s only coded five of them so far because the code is becoming too repetitive. He needs help using a function to simplify his code, and then he needs to use that function to finish his app. He’s already brainstormed an idea for how the finished app can look.\n\n<img src=\"https://images.code.org/c3bd4814896608a73cfa5744d587f8e9-image-1634837984797.PNG\" style=\"border: 2px solid black; height: 200px;\" />\n\n<img src=\"https://images.code.org/b5f722e76d18714da99659690a20a8ce-image-1634838012358.gif\" style=\"border: 2px solid black; height: 200px;\" />\n\n## Do This:\n\n-   Create a function called `moveSnow` that uses two parameters for the element name and the amount to move\n-   Look at the lines of code that are repeated to move each snow element. Copy that code into the new `moveSnow` function\n-   Update the code in the `moveSnow` function to use your parameters\n    -   Hint: Look for places where the code is identical between each snow element, but with just a name or value changed. This is where you can use your parameters instead.\n-   Remove the code inside the `onBoardEvent()` and replace it with calls to the new `moveSnow()` function. Be sure to include all 10 snow elements.",
    "mini_rubric": {
      "rubric_key_concept": "Use functions with parameters to organize apps",
      "rubric_performance_level_1": "The app uses a function with two parameters that correspond to the  name and amount to move. The parameters correctly replace each original snow name and amount value. All 10 snow elements move when the micro:bit is moved.",
      "rubric_performance_level_2": "The app uses a function with only one parameter, or the app uses a function with two parameters but not all of the values are updated using parameters. All 10 snow elements move when the micro:bit is moved.",
      "rubric_performance_level_3": "The app uses a function but it does not use parameters, or not all of the snow elements move on the screen",
      "rubric_performance_level_4": "The code has not changed from the original app"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/14/levels/1": {
    "long_instructions": "# Add Sensors and Debugging\n\nAdd your events and sensors to your app. You can add some labels to your app in Design Mode to help debug your app and display the sensor values, but your final app doesn't need any design elements. Test your device and make sure the sensors are working properly and generating the correct data before adding more to your code.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/14/levels/2": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device reacts to sensor data. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/14/levels/3": {
    "long_instructions": "# Review Your Device\n\nTake a moment to review your device. Double-check that it meets all the requirements in the rubric - <a href=\"https://docs.google.com/document/d/1gHFFmcxnroXEHFyWYXR3sXzqoe7QMNL5kDkrZbgwsfE/edit#\" target=\"_blank\"> click here to see the rubric</a>. Make any changes or updates you think are necessary, or you may decide that the device is fine.\n\nWhenever you're finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/1": {
    "long_instructions": "<img src=\"https://images.code.org/159ad29af0f9312bf382c668ae2e03f7-image-1676997882583.png\" style=\"width:300px; float:right\" />\n\n# Connecting to an LED\n\nIn this lesson, we'll learn how to connect an LED to your micro:bit to light up\n\n::: details [**Click Here to See an Example**]\n<img src=\"https://images.code.org/bb6f226c7f3550247eaac76bc639f4fb-image-1676997949784.png\" width=\"30%\"/>\n:::\n\nYou will need an LED and two wires.\n\n1.  Make sure your micro:bit is unplugged from the computer. This helps make sure there isn't any accidental electricity that can damage your board.\n\n2.  Attach a wire so one end is connected to the `0` pad on the micro:bit, and the other end is connected to the positive end of an LED\n\n3.  Attach a wire so one end is connected to the `GND` pad on the micro:bit, and the other end is connected to the negative end of an LED\n\n::: details [**How can you tell which end is positive and negative?**]\nA standard LED has two wires coming out of the top: a longer wire and a shorter wire. The longer wire is always **positive** and should be connected to a numbered pin on the micro:bit. The shorter wire is always **negative** and should be connected to a `GND` pad on the micro:bit.\n\nSome LEDs have the positive and negative sides labeled with a + and -\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" width=\"300px\" />\n:::\n\n## When You Are Finished\n\nPlug in your micro:bit to your computer and verify it is connected, then press 'Run' on the screen. The LED should light up.\n\nIf something isn't working correctly, **Always unplug your micro:bit from your computer before changing any wires**. This helps avoid any accidental electrical damage to your board.",
    "teacher_markdown": "Students are only required to connect their micro:bit in this level; they do not need to edit any code yet. Help students with connecting their boards, managing supplied, and troubleshooting any issues. Make sure students always unplug their their board before changing wires - otherwise, electricity may still be flowing and can damage the micro:bit. This is a good time to emphasize this norm and remind students of safety precautions when working with the micro:bit and their materials."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/2": {
    "long_instructions": "# Programming External LEDs\n\nThe code below shows how we can get an LED to light up. It uses two new commands: [`pinMode()`(#4dd0e1)][0] and [`digitalWrite()`(#4dd0e1)][1]\n\n<img src=\"https://images.code.org/d694d7a6ec39d41288c06f700d3f0b24-image-1676998323099.png\" alt=\"a block of code that sets the pin mode for pin '2' to output, and then uses the digital write block to set the value to 1, which turns on electricity to that pin\" style=\"width: 400px; margin: 10px\" />\n\n-   [`pinMode()`(#4dd0e1)][2] tells your micro:bit that you want to use one of the external pads for either input or output. \"Pin\" is the generic term for the pads on the micro:bit, and pins can look different on other devices.\n-   [`digitalWrite()`(#4dd0e1)][3] tells your micro:bit to start or top sending electricity to the device on that pin. 1 means \"on\", and 0 means \"off\"\n\nThe code below is supposed to turn on the LED connected to your board, but right now your LED is connected to pin `0`. You’ll need to change how your board is connected before it will work.\n\n## Do This\n\n1.  Unplug your micro:bit from the computer\n2.  Disconnect and re-connect your wires so they use pin `2` to match the code above.\n3.  Plug your micro:bit back into the computer.\n\n**Run your code!** See if the LED lights up. If it doesn't light up, press the Reset button then follow the steps above to try re-wiring your board.",
    "teacher_markdown": "**Classroom Safety:** This level is purposefully designed to provide an opportunity to discuss safety and best practices with handling the micro:bit. You may decide the emphasize these steps with the class as a full group, and monitor students as they complete these steps during this level. In general, students should always reset the app and unplug from the computer before making any wiring changes. Otherwise, it could ruin the LED or ruin the board."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/3": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Add Another LED\n\nYou can use any of the numbered pads to add additional LEDs. Lets use pin `1` to add another LED. This requires some new wires: one to connect to the positive end of the LED, and another to connect to the negative end back to the GND. But since there's only one GND pad on the micro:bit, we need to be a little careful and creative on how we do that.\n\n**Strategies for connecting to the GND pin:**\n\n-   Connect a wire from GND to another conductive material (like copper tape or alumnimum foil or a paper clip or brass tack), and then connect additional wires back to the LEDs\n    -   ::: details [**Show me an example**]\n        <div style=\"width: 90%; margin: auto\">\n        <img src=\"https://images.code.org/33af1fd8c3ddf03b110316764f7ab856-image-1677005652852.png\" style=\"width: 100%;\"/>\n        </div>\n        :::\n-   Connect a wire to the GND pin, then connect the other wires to the end of this wire by carefully clipping them to small sections of the wire\n    -   ::: details [**Show me an example**]\n        <div style=\"width: 100%; margin: auto\">\n        <img src=\"https://images.code.org/adb6ebd6659398424355830e520ef619-image-1677005389571.png\" style=\"width: 45%; display: inline\" />\n        <img src=\"https://images.code.org/66ed95fdddf4acc43d89f9986250e511-image-1677005291332.png\" style=\"width: 45%; display:inline\" />\n        </div>\n        :::\n\n# Do This\n\n**Wiring Your Device:**\n\n-   Disconnect your micro:bit from the computer\n-   Prepare your GND wires using one of the strategies above\n-   Connect another LED to the micro:bit using two wires:\n    -   One wire goes from the `GND` pin to the negative (-) part of the LED\n    -   One wire goes from the `1` pin to the positive (+) part of the LED\n-   Plug your micro:bit back into the computer\n\n**Coding Your Device:**\n\n1.  Tell the board to use pin `1` for output\n    -   Drag out a [`pinMode()`(#4dd0e1)][1] block. \n    -   Set the pin to `1` and the mode to `\"output\"`\n2.  Turn pin `1` on\n    -   Drag out a [`digitalWrite()`(#4dd0e1)][2] block. \n    -   Set the pin to `1` and the value to 1\n\n**Run your program!** If it worked, both LEDs should turn on.\n\n_Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._",
    "teacher_markdown": "**Why Are We Talking Pins?** You may notice that in the early levels of this lesson students are programming in a much different way than they have before, directly manipulating pins. The `digitalWrite()` and `pinMode()` commands are useful to get our wiring set up quickly, but are not the core concerns of this lesson. As soon as students are comfortable wiring LED circuits we will introduce techniques to control those LEDs with the higher level commands that have been used up to this point (like `on()` and `off()`)."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/4": {
    "long_instructions": "# Using Variables with LEDs\n\nRather than using [`pinMode()`(#4dd0e1)][0] and [`digitalWrite()`(#4dd0e1)][1] all the time, we can also use variables to keep track of our LEDs. This lets us create more useful and descriptive names, like `redLED` or `leftLED`.\n\nThis app works the same as the last level, but uses the new [`createLed()`(#4dd0e1)][2] block. The first LED for pin `2` has been setup for you and uses a new `___.on()`(#4dd0e1) block, where we can type in a variable name representing the LED we want to turn on. Using this as a reference, add code for the LED on pin `1`.\n\n# Do This\n\n**Preparation**\n\n-   Keep your LEDs wired just as they were before\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][3]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n**In Code Mode**\n\n1.  Create a new variable `rightLED` attached to pin `1`\n    -   Drag out a [`createLed()`(#4dd0e1)][4] block. \n    -   Replace `myLed` with the variable name `rightLED`, and replace `pin` with the pin `1`.\n2.  Turn the `rightLED` on\n    -   Drag out a `___.on()`(#4dd0e1).\n    -   Type `rightLED` into the blank space.\n\n**Run Your Code!** Both LEDs should light up, just like before!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/5": {
    "long_instructions": "# More LED Blocks\n\nNow that we're using [`createLed()`(#4dd0e1)][0], we can also use some of the additional LED functions like `blink` or `toggle`.\n\nThis app is setup to just turn both LEDs on. Instead, let's edit the app so one LED blinks every 500ms and the other LED blinks every 1000 seconds.\n\n# Do This\n\n**Preparation:**\n\n-   Keep your LEDs wired just as they were before\n\n**In Code Mode:**\n\n1.  Make the `leftLED` blink every 500 milliseconds\n    -   Replace the block `leftLED.on()` with a `___.blink()`(#4dd0e1) block.\n    -   Type in `leftLED` in the first blank, and type in `500` for the blink speed.\n2.  Make the `rightLED` blink every 1000 milliseconds\n    -   Replace the block `rightLED.on()` with a `___.blink()`(#4dd0e1) block.\n    -   Type in `rightLED` in the first blank, and type in `1000` for the blink speed.\n\n**Run Your Code!** One LED should blink while the other pulses!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/6": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Output - PA_mb2022": {
        "display_name": "Buttons and LEDs",
        "bubble_choice_description": "Use the buttons on the app to control an external LED",
        "long_instructions": "<!-- <div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/bfb90ad966cc7149ae2b40e6c98d3cd0-image-1650058009247.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# Buttons and LEDs\r\n\r\nCreate an app that controls an external LED attached to pin `1`. Clicking each of the buttons should make the LED turn on, blink, or turn off.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device**\r\n\r\n- ::: details [Connect an LED to pin `1` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `1` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create a new LED variable attached to pin `1`]\r\n\t- Drag out a [`createLed()`(#4dd0e1)](/docs/applab/createLed/) block. \r\n    - Type in a variable name and set the pin to `1`\r\n    :::\r\n2) ::: details [When the `onButton` is pressed: turn on the LED]\r\n\t- Drag out an `___.on()`(#4dd0e1) block\r\n    - Type in the variable name for your LED\r\n    :::\r\n3) ::: details [When the `blinkButton` is pressed: blink the LED]\r\n\t- Drag out an `___.blink()`(#4dd0e1) block\r\n    - Type in the variable name for your LED\r\n    :::\r\n4) ::: details [When the `offButton` is pressed: turn off the LED]\r\n\t- Drag out an `___.off()`(#4dd0e1) block\r\n    - Type in the variable name for your LED\r\n    :::"
      },
      "CSD U6 - Physical Output - PB_mb2022": {
        "display_name": "Left and Right Arrows",
        "bubble_choice_description": "Create arrows that point to external LEDs when you press the A and B buttons",
        "long_instructions": "<!-- \r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/4d3ebc7afabfb5f6ca7448441ec20249-image-1650058011924.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# Controlling LEDs\r\n\r\nCreate an app that uses the two buttons to switch between a left and right arrow on the `ledScreen` that point to two external LEDs connected to pins `0` and `2`.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device**\r\n\r\n1) Since this app uses multipl LEDs, decide how you will setup your GND connection\r\n    - ::: details [Option 1: Connect to another conductive material]\r\n    <div style=\"width: 90%; margin: auto\">\r\n    <img src=\"https://images.code.org/33af1fd8c3ddf03b110316764f7ab856-image-1677005652852.png\" style=\"width: 100%;\"/>\r\n    </div>\r\n    \t:::\r\n\t- ::: details [Option 2: Connect the wires together]\r\n    <div style=\"width: 100%; margin: auto\">\r\n    <img src=\"https://images.code.org/adb6ebd6659398424355830e520ef619-image-1677005389571.png\" style=\"width: 45%; display: inline\" />\r\n    <img src=\"https://images.code.org/66ed95fdddf4acc43d89f9986250e511-image-1677005291332.png\" style=\"width: 45%; display:inline\" />\r\n    </div>\r\n    \t:::\r\n1) ::: details [Connect an LED to pin `0` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A0\"` pin to the positive (+) part of the LED\r\n    :::\r\n2) ::: details [Connect an LED to pin `2` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A6\"` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create two LED variables on pins `0` and `2`]\r\n\t- Drag out two [`createLed()`(#4dd0e1)](/docs/applab/createLed/) blocks\r\n    - Set the pins to `0` and `2`\r\n    :::\r\n2) ::: details [When `buttonA` is pressed: Create a left arrow and light up the LED on the left.]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect with `buttonA` is `down`\r\n    - Drag out an [`ledScreen.clear()`(#f78183)](/docs/ide/applab/expressions/ledScreen.clear) block to clear the `ledScreen`\r\n    - Drag out an [`ledScreen.display()`(#f78183)](/docs/ide/applab/expressions/ledScreen.display) or several [`ledScreen.on()`(#f78183)](/docs/ide/applab/expressions/ledScreen.on) blocks to create a left arrow\r\n    - Drag out an `___.on()`(#4dd0e1) block\r\n    - Type in the variable name for your left LED\r\n    :::\r\n3) ::: details [When `buttonB` is pressed: Create a right arrow and light up the LED on the right.]\r\n\t- Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to detect with `buttonB` is `down`\r\n    - Drag out an [`ledScreen.clear()`(#f78183)](/docs/ide/applab/expressions/ledScreen.clear) block to clear the `ledScreen`\r\n    - Drag out an [`ledScreen.display()`(#f78183)](/docs/ide/applab/expressions/ledScreen.display) or several [`ledScreen.on()`(#f78183)](/docs/ide/applab/expressions/ledScreen.on) blocks to create a right arrow\r\n    - Drag out an `___.on()`(#4dd0e1) block\r\n    - Type in the variable name for your right LED\r\n    :::"
      },
      "CSD U6 - Physical Output - PC_mb2022": {
        "display_name": "LEDs and Sensors",
        "bubble_choice_description": "Simulate a night light by using the light sensor to turn on or off an external LED",
        "long_instructions": "<!-- <div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/0919800ceea841a4aa8af933868c4d02-image-1650058014169.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n-->\r\n\r\n# LEDs and Sensors\r\n\r\nCreate an app that uses the light sensor to turn on or off an external LED connected to pin `1`. When it is dark, the light should turn on. When it is bright, the light should turn off.\r\n\r\n## Do This\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n**Wiring Your Device**\r\n\r\n1) ::: details [Connect an LED to pin `1` using two wires.]\r\n\t- One wire connects the `GND` pin to the negative (-) part of the LED\r\n    - Another wire connects the `\"A6\"` pin to the positive (+) part of the LED\r\n    :::\r\n\r\n**Coding Your Device**\r\n\r\n1) ::: details [Create an LED variable on pin `1`]\r\n\t- Drag out a [`createLed()`(#4dd0e1)](/docs/applab/createLed/) block.\r\n    - Set the pin to `1`\r\n    :::\r\n2) ::: details [If the room is dark: turn on the LED]\r\n\t- Drag out an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) block. Use it to check if [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) `<`(#FFB74D) `50`.\r\n    - Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/):\r\n    \t- Drag out an `___.on()`(#4dd0e1) block\r\n    \t- Type in the variable name for your LED\r\n    :::\r\n3) ::: details [If the room is bright: turn off the LED]\r\n\t- Drag out an [`if statement`(#64B5F6)](/docs/applab/ifBlock/) block. Use it to check if [`lightSensor.value`(#f78183)](/docs/applab/lightSensor.value/) `>`(#FFB74D) `50`.\r\n    - Inside the [`if statement`(#64B5F6)](/docs/applab/ifBlock/):\r\n\t\t- Drag out an `___.off()`(#4dd0e1) block\r\n    \t- Type in the variable name for your LED\r\n    :::\r\n\r\n**Run your code!** If you cover the light sensor, the LED should light up. If you uncover the light sensor and put it in light, the LED should turn off"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/7": {
    "long_instructions": "# Little Alien Friend\n\nRosie is designing a children's toy to look like an alien. it has a physical body that uses 2 LEDs as the eye, and you communicate with it via an app. Each button on the app causes the alien to respond in a different way:\n\n-   Pressing “Wake Up” has the alien open their eyes\n-   Pressing “Listen” has the alien blink slowly as it listens to a story\n-   Pressing “Sleep” puts the alien to sleep and closes its eyes\n\n## Do This\n\n1.  Wire up two LEDs to pins `0` and `2`\n2.  Create two LED variables on pins `0` and `2`\n3.  Use an `___.on()`(#4dd0e1) block in the Wake Up event\n4.  Use a `___.blink()`(#4dd0e1) block in the Listen event\n5.  Use an `___.off()`(#4dd0e1) block in the Sleep event",
    "teacher_markdown": "**Assessing Student Work:** It may be appropriate to assess students on this level by having them physically show you the working prototype, since this app involves physical components to be wired together. You could also consider having students record a video of their app working and submitting it in addition to submitting their code.",
    "mini_rubric": {
      "rubric_key_concept": "Connect external LEDs to the micro:bit and create apps that use external LEDs",
      "rubric_performance_level_1": "The program matches the app description using on(), blink(), and off() blocks in the correct location. The LEDs are wired correctly",
      "rubric_performance_level_2": "The program almost matches the app description, but one of the blocks may be matched with the wrong event. The LEDs are wired correctly.\r\n",
      "rubric_performance_level_3": "The program is missing some of the required blocks or the LEDs are not wired correctly.",
      "rubric_performance_level_4": "The program has not been started or there are no LEDs"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/15/levels/8": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Output - ChalA_mb2022": {
        "display_name": "LED Candle",
        "bubble_choice_description": "Create a device prototype for an LED candle that turns on and off with the micro:bit",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/LED_Candles_Lighting.jpg/1200px-LED_Candles_Lighting.jpg?20190802215038)\r\n\r\n<br/>\r\n\r\nLED Candles\r\n\r\n</div>\r\n\r\n# LED Candle\r\n\r\nCreate a device prototype for an LED Candle. This requires creating a holder for your candle out of physical materials, and then putting an LED through the top to light up. For example, you could roll up paper or use a cardboard toilet paper roll as the base of the candle, then have the LED sticking through the top.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n1) Create your candle holder using physical materials, such as paper or cardboard\r\n2) Place your LED and wires so they are in the correct location in your device\r\n3) Get your micro:bit ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create an LED variable\r\n2) Add code so when you press the A button: the external LED turns on\r\n3) Add code so when you press the B button: the external LED turns off\r\n4) Connect your wires to your micro:bit and test your code\r\n\r\n**Run Your Code!** You should be able to turn on and off your candle using the micro:bit."
      },
      "CSD U6 - Physical Output - ChalB_mb2022": {
        "display_name": "LED Drawing",
        "bubble_choice_description": "Incorporate LEDs into a drawing, such as the eyes of a face or the headlights on a car",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/a9d58920679c8c8d6113c614bf460c39-image-1646930199612.png)\r\n\r\n<br/>\r\n\r\nExample Drawing\r\n\r\n</div>\r\n\r\n# LED Drawing\r\n\r\nDraw a picture on a sheet of paper, then incorporate at least 2 LEDs into the picture by cutting holes in the paper and replacing them with LEDs. For example:\r\n- A picture of a face, but the eyes are LEDs\r\n- A picture of the night sky, but some stars are LEDs\r\n- A picture of a car, but the headlights are LEDs\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This:\r\n\r\n**Materials:**\r\n\r\n1) Draw your picture on a sheet of paper\r\n2) Decide where the LEDs will go\r\n3) Cut holes in your drawing and place the LEDs underneath. This will let you hide the wires underneath your drawing\r\n4) Get your micro:bit ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create two LED variables\r\n2) Turn on the LEDs when the app is run\r\n\r\nConnect your wires to your micro:bit and test your code!"
      },
      "CSD U6 - Physical Output - ChalC_mb2022": {
        "display_name": "Do Not Disturb Sign",
        "bubble_choice_description": "Create a sign that uses an LED to indicate you shouldn't be disturbed, like when recording a video or meeting with someone important.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://upload.wikimedia.org/wikipedia/commons/3/32/On_air_sign.jpg?20120915061101)\r\n\r\n<br/>\r\n\r\nExample Sign\r\n\r\n</div>\r\n\r\n# Do Not Disturb Sign\r\n\r\nCreate a device prototype that creates a \"Do Not Disturb\" sign that uses an LED to indicate that the sign is on or off. This kind of device is used in a variety of situations such as:\r\n- When recording studios are \"on the air\" and need to indicate they are recording and no one should talk\r\n- When photographers are developing photos in dark rooms and need to indicate that no one should open the door\r\n- When doctors are with a patient and need to indicate that no one should disturb the conversation\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n1) Create your sign to represent \"Do Not Disturb\". You could write out the words in letters, or use a symbol or drawing.\r\n2) Create a place for your LED to go on the sign. Usually the LED is towards the bottom of the sign so people can see it clearly\r\n3) Place your LED and wires so they are in the correct location in your device\r\n4) Position your sign so it is in a prominent place that people can see. This may mean hanging your sign on a wall or creating a little stand for your sign so people can see it as they approach you.\r\n5) Get your micro:bit ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create an LED variable\r\n2) When the A button is pressed: turn on the LED\r\n3) When the B button is pressed: turn off the LED\r\n\r\nConnect your wires to your circuit playground and test your code!"
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/1": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n<!-- <img src=\"https://images.code.org/440fdae9498a7c8374e883021faf17ec-image-1644430801804.png\" style=\"float: right; width: 250px; margin: 10px\" /> -->\n\n# Wiring External Buttons\n\nIn the last lesson, we saw how you could use external components for **output**, like wiring up an LED. In this lesson, we'll see how you can use external components for **inputs**, like creating your own button \"up\" and \"down\" events.\n\nWe'll start by using two wires connected to pins `0` and `GND`, like in the diagram to the right. When the wires are disconnected, it represents an \"up\" event or that the button isn't being pressed. When the wires are connected, it represents a \"down\" event or that the button has been pressed.\n\n# Do This\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" style=\"width: 200px; margin: 10px; float: right;\" />\n\n1.  Make sure your micro:bit is disconnected from the computer\n2.  Grab two wires.\n3.  Connect one wire to the pin `0`.\n4.  Connect the second wire to the `GND` pin.\n5.  Plug in your micro:bit.\n\n**Run the program!** With the program running, touch the unconnected ends of both wires together to \"press\" the button. When you do, the micro:bit should say hello!"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/2": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# External Button Events\n\nThis app shows how external buttons are created. This happens in two parts:\n\n1.  A [`createButton()`(#4dd0e1)][1] block lets you assign an external button to a variable\n2.  An [`onBoardEvent()`(#f78183)][2] block uses the same variable name to detect button events like `up` and `down`\n\nRight now, the micro:bit says \"Hello\" when the wires touch for a `down` event. Let's add another event to clear the `ledScreen` when the wires release for an `up` event.\n\n# Do This\n\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][3]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n1.  Use an [`onBoardEvent()`(#f78183)][4] to detect when the `scrollButton` is released `up`\n    -   Add an [`onBoardEvent()`(#f78183)][5] block to your code\n    -   In the first parameter, do not select any of the options from the dropdown. Instead, type in `scrollButton`\n    -   In the second parameter, select \"up\" from the list of options\n2.  When the `scrollButton` is released: clear the `ledScreen`\n    -   Inside the [`onBoardEvent()`(#f78183)][6]: \n        -   Drag out an [`ledScreen.clear()`(#f78183)][7] block\n\nRun the program! micro:bit should now display \"Hello\" when the wires are touching, and the message will clear when the wires are disconnected"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/3": {
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n[expandable][0]\n\n<br/>\n\nClick to Expand\n\n</div>\n\n# Add Another External Button\n\nLet's add another external button to our device on pin `2` that scrolls \"Bonjour\" (hello in French) across the screen. This will only require **one** new wire connected to pin `2` - to press the button, we can use the same `\"GND\"` wire from before.\n\n# Do This\n\n**Wiring Our Device:**\n\n1.  Disconnect your micro:bit from the computer\n2.  Connect another wire to pin `2`\n3.  Reconnect your micro:bit to the computer.\n\n**Coding Your Device:**\n\n1.  Create a button variable on pin `2`\n    -   Drag out a [`createButton()`(#4dd0e1)][1] block.\n    -   Name the variable `bonjourButton`\n    -   Change the pin to `2`\n2.  Use an [`onBoardEvent()`(#f78183)][2] to detect when `bonjourButton` is `down`\n    -   Drag out an [`onBoardEvent()`(#f78183)][3].\n    -   Set the component to `bonjourButton` by typing in the first parameter\n    -   Set the event to `\"down\"`\n3.  When `bonjourButton` is pressed: scroll \"Bonjour\" across the screen\n    -   Use the [`ledScreen.scrollString()`(#f78183)][4] block to scroll \"Bonjour\" across the screen\n4.  Use an [`onBoardEvent()`(#f78183)][5] to detect when `bonjourButton` is `up`\n    -   Drag out an [`onBoardEvent()`(#f78183)][6].\n    -   Set the component to `bonjourButton` by typing in the first parameter\n    -   Set the event to `\"up\"`\n5.  When `bonjourButton` is up: clear the `ledScreen`\n    -   Use the [`ledScreen.clear()`(#f78183)][7] block to clear the screen\n\n**Run the program!** You should use the `\"GND\"` wire to switch between your two buttons - connecting it to `scrollButton` should scroll \"Hello\" across the screen, and connecting it to `bonjourButton` should clear the `ledScreen`."
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/4": {
    "dsls": {
      "display_name": "Practice Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Input - PB_mb2022": {
        "display_name": "Color Changer",
        "bubble_choice_description": "Create an app that uses 3 external buttons to change the background color of the screen.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/8637e7cf974316deb10d6e2b942531da-microbit-a.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Color Changer\r\n\r\nCreate an app that uses 3 external buttons to change the background color of the screen.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device:**\r\n\r\n1) Make sure your micro:bit is unplugged from the computer\r\n2) Connect 3 wires to pins `0`, `1`, and `2`\r\n3) Connect a wire to a `GND` pin\r\n4) Plug your micro:bit back into the computer.\r\n\r\n**Coding Your Device:**\r\n\r\n_Note: You can click the instructions below to expand them and see more specific instructions_\r\n\r\n1) ::: details [Create three button variables on pins `0`, `1`, and `2`]\r\n\t- Drag out three [`createButton()`(#4dd0e1)](/docs/applab/createButton/) blocks\r\n    - Set their pins to `0`, `1`, and `2`\r\n    :::\r\n2) ::: details [Use three `onBoardEvent()`(#f78183) blocks to detect when each of your buttons is `\"down\"`]\r\n\t- Drag out three [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) blocks\r\n    - Type your button variables into the first parameter of each event\r\n\t- Set the event to \"down\"\r\n    :::\r\n3) ::: details [Update the background color when a button is pressed]\r\n\t- Inside each [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/):\r\n    \t- Use a [`setProperty()`(#fff176)](/docs/applab/setProperty/) block to change the background color to a color of your choosing\r\n    :::\r\n    \r\n**Run Your Code!** You should be able to use the ground wire to press each of the buttons, which will update the background color of your app!"
      },
      "CSD U6 - Physical Input - PA_mb2022": {
        "display_name": "Whack-A-Mole",
        "bubble_choice_description": "Create an app that simulates a whack-a-mole game, where you press 3 external buttons to earn points",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/13cfe9b7b78513d6cf5e40c63483f8d1-microbit-b.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# Whack-A-Mole Game\r\n\r\nCreate an app that simulates a whack-a-mole game, where there are several animals that appear and you need to \"bop\" them to earn points.\r\n\r\nIn this version, we'll use three external buttons to represent the animals. The user can use the `GND` wire to 'whack' each of the animals and generate points. The app has already been designed for you - your task is to wire up the device and keep track of the score using the Counter Pattern.\r\n\r\n## Do This\r\n\r\n**Wiring Your Device:**\r\n\r\n1) Make sure your Circuit Playground is unplugged from the computer\r\n2) Connect 3 wires to pins `0`, `1`, and `2`\r\n3) Connect a wire to a `GND` pin\r\n4) Plug your micro:bit back into the computer.\r\n\r\n**Coding Your Device:**\r\n\r\n1) ::: details [Create three button variables on pins `0`, `1`, and `2`]\r\n\t- Drag out three [`createButton()`(#4dd0e1)](/docs/applab/createButton/) blocks\r\n    - Set their pins to `0`, `1`, and `2`\r\n    :::\r\n2) ::: details [Use three `onBoardEvent()`(#f78183) blocks to detect when each of your buttons is `\"down\"`]\r\n\t- Drag out three [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) blocks\r\n    - Type your button variables into the first parameter of each event\r\n\t- Set the event to \"down\"\r\n    :::\r\n3) ::: details [When the user presses one of the animal buttons, increase their score]\r\n\t- Inside each [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/): \r\n    \t- use the Counter Pattern to update the `score` variable. Each of the animal buttons should be worth a different amount of points\r\n        - Use a [`setText()`(#fff176)](/docs/applab/setText/) block to update the score on the screen\r\n   :::\r\n\r\n**Run Your Code!** You should be able to use the ground wire to press each of the buttons, which will update the score on the screen."
      },
      "CSD U6 - Physical Input - PD_mb2022": {
        "display_name": "Conductive Materials",
        "bubble_choice_description": "Explore what other materials can be used to create buttons, like paper clips or aluminum foil",
        "long_instructions": "This will have contained level",
        "contained levels": [
          {
            "long_instructions": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: right; margin: 10px; width: 250px\" />\r\n\r\n# Conductive Materials\r\n\r\nOur external buttons work because the alligator clips are made of metal, which **conducts electricity**. If you attach the clips to other items that conduct electricity, they can also work as buttons. For example, you can try paperclips or aluminum foil and the buttons will still work.\r\n\r\n## Do This\r\n- Find materials around the classroom that you think will conduct electricity. Find at least 5 different types of items\r\n- Grab two wires and connect them to your micro:bit according to the code below so the button will work\r\n- Connect your items to the alligator clips and test your device. See which items are conductive and work as buttons, and which ones do not\r\n\r\n**Record your results in the box below!** Which items worked as buttons? Which ones didn't?\r\n\r\n"
          }
        ]
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/5": {
    "long_instructions": "# Escape Room\n\nPradnya is designing an app that can be used in an Escape Room, which is like a room with puzzles where you find clues to help you escape. The user will need to enter a 3 digit number in the app in order to win, which they can discover by finding 3 hidden buttons around the room. When the user presses a button, one of the digits is revealed. Once all 3 digits are revealed and the user types them into the app, they can escape!\n\nPradnya has already designed the app and created the code that checks for the correct 3-digit number, but she needs help hooking up the buttons and revealing the secret digits.\n\n## Do This\n\n1.  Wire up 3 buttons to pins `0`, `1`, and `2`, with a single ground wire to trigger each button\n2.  Create three button variables on pins `0`, `1`, and `2`\n3.  Use three [`onBoardEvent()`(#f78183)][0] blocks to detect when each of your buttons is \"down\"\n4.  When the user presses a button, hide one of the `blueSquare` elements to reveal the secret digit underneath\n    -   Use the [`hideElement()`(#fff176)][1] block to hide each of the `blueSquare` elements\n    -   Example: `hideElement(\"blueSquare1\")`\n\n**Run the code!** Test that it works, revealing the secret three-digit code and viewing the win screen. The secret digits change every time, so you may need to test more than once.",
    "teacher_markdown": "**Assessing Student Work:** It may be appropriate to assess students on this level by having them physically show you the working prototype, since this app involves physical components to be wired together. You could also consider having students record a video of their app working and submitting it in addition to submitting their code.",
    "mini_rubric": {
      "rubric_key_concept": "Connect external buttons to the micro:bit and create apps that use external buttons",
      "rubric_performance_level_1": "The program matches the description with 3 events that hide the blue squares in the app. The buttons are hooked up correctly using one wire for the ground to signal each button",
      "rubric_performance_level_2": "Some of the buttons hide the blue squares, but not all of them work correctly. Or, the buttons are hooked up correctly but may use multiple ground wires instead of just one.",
      "rubric_performance_level_3": "The buttons are hooked up, but the blue squares are not hidden when the buttons are pressed",
      "rubric_performance_level_4": "The app has not been started or there are no buttons hooked up to the circuit playground"
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/16/levels/6": {
    "dsls": {
      "display_name": "Challenge Levels"
    },
    "sublevels": {
      "CSD U6 - Physical Input - ChalA_mb2022": {
        "display_name": "Physical Reactions",
        "bubble_choice_description": "Create a device prototype that simulates an event when two objects touch. For example, two people in love and, when they touch, the micro:bit shows a heart (to represent love)",
        "long_instructions": "# Physical Reactions\r\n\r\nCreate a device prototype that simulates an event when two objects touch. For example:\r\n\r\n- Two people in love and, when they touch, the `ledScreen` shows a heart (to represent love)\r\n- A blue paint brush and a yellow paint brush and, when they touch, the background of the screen turns green (to represent mixing colors)\r\n- An oxygen atom and a carbon atom that, when they touch, the `ledScreen` shows an X and the app makes a sound(to represent a [Carbon Monoxide detector](https://en.wikipedia.org/wiki/Carbon_monoxide_detector))\r\n\r\nYou should use physical materials to create your two objects, such as creating figures out of cardboard or popsicle sticks. Your device should use two wires to represent buttons - when the wires touch, the micro:bit reacts.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials**\r\n\r\n- Decide what reaction you would like to represent with this project. You can use one of the examples above, or create your own\r\n- Design and decorate your two objects our of physical materials, like cardboard or paper or popsicle sticks.\r\n- Attach a wire to each of your objects. Try to hide the wires so only the tips are visible for when they touch\r\n- Prepare your micro:bit\r\n\r\n**In Code Mode:**\r\n\r\n1) Add code to detect when the two wires touch as a button event. When they do: have the m,icro:bit or app screen react (such as lighting up or making a sound)\r\n\r\n**Run Your App!** Demonstrate your app for a peer and explain what it represents",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code."
      },
      "CSD U6 - Physical Input - ChalB_mb2022": {
        "display_name": "Alarm System Prototype",
        "bubble_choice_description": "Create a device prototype that simulates an alarm system that detects when someone opens a box.",
        "long_instructions": "# Alarm System Prototype\r\n\r\nCreate a device prototype that simulates an alarm system that detects when someone opens a box. This requires creating a box from physical materials like cardboard or paper, and attaching two wires to the inside of the box. When the box is closed, the wires should be touching. But when the box is open, the wires become disconnected and the micro:bit should light up to warn that someone has opened the box.\r\n\r\nThis is a **prototype** for your device, which means it won't be perfect and will probably be a little messy. Instead, focus on demonstrating how all of the pieces would fit together to create your device.\r\n\r\n## Do This\r\n\r\n**Materials:**\r\n\r\n- Create a box our of physical materials, like cardboard or a used tissue box. Design the box so it has a clear lid that can open and close in one place.\r\n- Attach two wires to the inside of the box so that when the lid is closed, the wires are touching. You will probably need one wire on the underside of the lid, and another wire on the inside wall of the box.\r\n- If necessary: cut small holes in the back of the box so the wires can run through and attach the micro:bit\r\n\r\n**In Code Mode:**\r\n\r\n1) Create a button variable\r\n2) When the button is `down`: clear the `ledScreen`\r\n3) When the button is `up`: turn on all the lights on the `ledScreen`!\r\n\r\n**Run the Code!** You could tell a friend that a treat is in the box and ask them to open it, only for them to be surprised when the alarm goes off!",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code."
      },
      "CSD U6 - Physical Input - ChalC_mb2022": {
        "display_name": "Create Your Own Button",
        "bubble_choice_description": "Using other conductive materials, like paperclips or aluminum foil or metal tabs, simulate buttons or switches like we're more familiar with.",
        "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px; width: 175px; text-align:center\">\r\n\r\n![expandable](https://images.code.org/25cce8f702f27384b3042a6fcbc09803-image-1646938647982.png)\r\n\r\n<br/>\r\n\r\nImage from Red Fern Electronics\r\n\r\n</div>\r\n\r\n# Create Your Own Button\r\n\r\nSo far, we've simulated buttons by having two wires touch. Using other conductive materials, like paperclips or aluminum foil or metal tabs, we can simulate buttons or switches like we're more familiar with. This requires creating a situation where our two wires are close but not touching, then the user interacts with a third physical device which connects the two wires together simulating a button press.\r\n\r\n## Do This\r\n\r\n**Prepare:**\r\n\r\n- Decide how you'd like to setup your button or switch. \r\n\t- You can search the internet for \"DIY Switch\" or \"DIY Button\"\r\n    - Or, you can check out this guide from [Red Fern Electronics: DIY Switches](https://redfernelectronics.co.uk/diy-switches/)\r\n\r\n**Materials:**\r\n\r\n- Gather your conductive materials and wires together\r\n- Arrange your wires so they are close by, but not touching\r\n- Arrange your third conductive material so it can be pressed or toggled or moved to bridge the two other wires\r\n- Try to hide your wires as much as possible so only the button or switch is visible\r\n- Get your micro:bit ready\r\n\r\n**In Code Mode:**\r\n\r\n1) Create a button variable\r\n2) When the button is pressed: light up the `ledScreen`\r\n3) Attach your wires to your micro:bit and test your code\r\n\r\n**Run Your Code!** You should be able to press your button or toggle your switch like it's a real button or switch.",
        "teacher_markdown": "**Exemplar:** The solution for this level is similar to previous levels. However, the additional complexity is in designing the physical component to go along with it. To assess this level, consider having students demonstrate their device to you rather than solely checking the completed code."
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lessons/17/levels/1": {
    "long_instructions": "# Design Your App\n\nUse this level to add **design elements** to your app in Design Mode. Use the sketch from your Project Guide to add elements to the screen. Don't worry about adding code yet - you can do that in the next few levels.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/17/levels/2": {
    "long_instructions": "# Add Events\n\nAdd events to your app using [`onEvent()`(#fff176)][0] or [`onBoardEvent()`(#f78183)][1] blocks. Include other blocks that will let you test your events to make sure they are working correctly, such as changing the screen or making a small buzz on the circuit playground. Don't worry about any variables or if-statements for right now - you can do that in the next level.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/17/levels/3": {
    "long_instructions": "# Add Logic and Physical Materials\n\nAdd the core logic to your app, especially how your device uses inputs and outputs to function. Also start attaching your board to the physical materials you created. Your device should start to \"merge together\" with the physical materials you curated, and you may need to make small adjustments so things fit. Use your project guide to help complete your device. Test your app several times to see that it behaves as expected.\n\nWhenever your finished, press Run and then Finish to continue to the next level"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/17/levels/4": {
    "long_instructions": "# Review Your App\n\nTake a moment to review your app. Double-check that it meets all the requirements in the rubric - <a href=\"https://docs.google.com/document/d/1ZaP6QEwtawn12Aw526NlSbavGpGetIhy8qtEVdkhDQ0/edit\" target=\"_blank\">click here to view the rubric</a>. Make any changes or updates you think are necessary, or you may decide that the app is fine.\n\nWhenever you're finished, press Run and then the purple Submit button to submit your project. Once you submit it, you won't be able to edit it.",
    "teacher_markdown": "**Exemplars:** See the lesson plan for links to sample rubrics and exemplar projects"
  },
  "https://studio.code.org/s/csd6b-2023/lessons/17/levels/5": {
    "dsls": {
      "title": "Creating Apps for Devices End of Unit Student Survey"
    },
    "sublevels": {
      "devices-post-survey-preamble_mb2022": {
        "dsls": {
          "markdown": "### **This survey is anonymous**\n\n* This short survey should take **10 minutes or less** to complete.\n\n*Code.org takes your privacy very seriously.* Your responses here will be kept **anonymous**. Your teacher will see the aggregated responses for the whole class, but won't be able to link your individual responses back to you.\n\nWe do this because we want you to **be as open and honest as possible** . We care about your experience in the course, and we make improvements based on what you say.\n\n***\n\n### School in general\n"
        }
      },
      "csp-pre-survey-2017-q4_copy1_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "It is important for me to be good at my schoolwork."
            }
          ]
        }
      },
      "csd-post-survey-interested-cs_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I am interested in learning computer science"
            }
          ]
        }
      },
      "csd-post-survey-confidence-cs_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I am confident I have the ability to learn computer science"
            }
          ]
        }
      },
      "csd-post-survey-take-more-classes_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I want to take more computer science classes in the future"
            }
          ]
        }
      },
      "comfortable-in-cs-class_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I feel comfortable in this class."
            }
          ]
        }
      },
      "csp-post-survey-2017-q22_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Sometimes I feel unsure whether I belong in this class."
            }
          ]
        }
      },
      "be-myself-in-cs_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I can really be myself in this computer science class."
            }
          ]
        }
      },
      "csd-post-survey-solve-real-world_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I understand how what I learned in this computer science class can help solve real-world problems"
            }
          ]
        }
      },
      "csd-post-survey-show-friend_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Yes",
              "correct": true
            },
            {
              "text": "No",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I showed something I made in this class to friends or family outside of class"
            }
          ]
        }
      },
      "curriculum-how-challenging_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "way too easy.",
              "correct": true
            },
            {
              "text": "a little too easy.",
              "correct": true
            },
            {
              "text": "just about right.",
              "correct": true
            },
            {
              "text": "a little too difficult.",
              "correct": true
            },
            {
              "text": "way too difficult.",
              "correct": true
            }
          ],
          "markdown": "<!--\nright 'nothing'  \nright 'too little'\nright 'about the right amount'\nright 'too much'\nright 'way too much'-->\n\n",
          "questions": [
            {
              "text": "How challenging are the lessons and topics in this course for you? I think this course is..."
            }
          ]
        }
      },
      "post-assessment survey q31-a-2017b_mb2022": {
        "dsls": {
          "answers": [
            {
              "text": "Strongly agree",
              "correct": true
            },
            {
              "text": "Agree",
              "correct": true
            },
            {
              "text": "Slightly agree",
              "correct": true
            },
            {
              "text": "Neither",
              "correct": true
            },
            {
              "text": "Slightly disagree",
              "correct": true
            },
            {
              "text": "Disagree",
              "correct": true
            },
            {
              "text": "Strongly disagree",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "I would recommend this computer science class to another student."
            }
          ]
        }
      }
    }
  },
  "https://studio.code.org/s/csd6b-2023/lockable/1/levels/1": {
    "dsls": {
      "title": "Creating Apps with Devices Post-Project Test"
    },
    "sublevels": {
      "CSD U6 MC Q1_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "Left button",
              "correct": true
            },
            {
              "text": "ledScreen",
              "correct": false
            },
            {
              "text": "Light sensor",
              "correct": true
            },
            {
              "text": "Power Cord",
              "correct": false
            },
            {
              "text": "Toggle switch",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Which of the following are inputs of a micro:bit? (Select all that apply)"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 5**\n"
        }
      },
      "CSD U6 MC Q2_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "LED",
              "correct": false
            },
            {
              "text": "Button",
              "correct": false
            },
            {
              "text": "Temperature",
              "correct": false
            },
            {
              "text": "Accelerometer",
              "correct": true
            },
            {
              "text": "Light",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "You want your app to update when you shake the board. Which sensor should you use?"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 2, 7, 16**\n"
        }
      },
      "CSD U6 MC Q3_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "Lights up an led in the upper-right corner of the ledScreen",
              "correct": false
            },
            {
              "text": "Scroll the number \"1\" on the ledScreen 4 times",
              "correct": false
            },
            {
              "text": "Update the ledScreen variable to (1, 4)",
              "correct": false
            },
            {
              "text": "Lights up an led in the lower-left corner of the ledScreen",
              "correct": true
            }
          ],
          "questions": [
            {
              "text": "Describe the following code ![](https://images.code.org/039a84083d04871bd9663520db36c987-image-1681172817788.png)"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 13**\n"
        }
      },
      "CSD U6 MC Q4_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "![](https://images.code.org/b778998d790dc3d539b41e11d13bf99d-answera.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/d731a9bfe76319df23074c93aecfbd72-answerb.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2152cc62ddd70543945774e8f6f27e9f-answerc.png)",
              "correct": true
            },
            {
              "text": "![](https://images.code.org/fd654ac3e5b15020a3e9005986972a97-answerd.png)",
              "correct": false
            },
            {
              "text": "![](https://images.code.org/2af52e1ae04101fce73d4b259165e76f-CSDunit6input5.png)",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "You are designing a program to respond to the A button on the micro:bit. Which line of code are you most likely to see in your program?"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 5**\n\nSince the program should respond to the micro:bit, use `onBoardEvent`. The A button is `buttonA`.\n"
        }
      },
      "CSD U6 MC Q5_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "When the `feelingLabel` is clicked, the text is \"Happy\".",
              "correct": false
            },
            {
              "text": "When the text of the `feelingLabel` is changed to \"Happy\", it makes a click sound.",
              "correct": false
            },
            {
              "text": "When the `happyButton` is clicked, the text of the `feelingLabel` is changed to \"Happy\".",
              "correct": true
            },
            {
              "text": "When the text of `happyButton` is changed to \"clicked\", the text of the `feelingLabel` is changed to \"Happy\".",
              "correct": false
            },
            {
              "text": "When the text of the `feelingLabel` is changed to \"Happy\", the text of `happyButton` is changed to \"clicked\".",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "Which of the following best describes the code? ![](https://images.code.org/7fbc2477b10b1faade290a318cc0657d-CSDunit6eventhandlers.png)"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 3, 4**\n"
        }
      },
      "CSD U6 MC Q6_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "Change the homescreen background color to beige",
              "correct": false
            },
            {
              "text": "See which option the user selected in the dropdown",
              "correct": true
            },
            {
              "text": "Update the width of a picture",
              "correct": false
            },
            {
              "text": "Read the value that the user chose in a slider",
              "correct": true
            },
            {
              "text": "Make the font smaller",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "In which scenarios would you most likely use `getProperty`? (Select all that apply)"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 8**\n\n`getProperty` allows you to access user input on the screen. The incorrect options are updating UI elements, which would use `setProperty`.\n"
        }
      },
      "CSD U6 MC Q7_6b2023": {
        "dsls": {
          "answers": [
            {
              "text": "`updateScore()`",
              "correct": false
            },
            {
              "text": "`updateScore(points)`",
              "correct": false
            },
            {
              "text": "`updateScore points`",
              "correct": false
            },
            {
              "text": "`updateScore(10)`",
              "correct": true
            },
            {
              "text": "`updateScore 10`",
              "correct": false
            }
          ],
          "questions": [
            {
              "text": "You are given the following function that adds points to the score. How would you call the function to add 10 points? ![](https://images.code.org/8e1dd483fb9e788ff0474cba47f0d34d-CSDunit6parameters.png)"
            }
          ],
          "teacher_markdown": "**Content: Unit 6 Lesson 14**\n"
        }
      },
      "CSD U6 FR Q1_6b2023": {
        "long_instructions": "Why should you add parameters to a function?"
      }
    }
  }
}