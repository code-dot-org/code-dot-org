{
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/1": {
    "long_instructions": "# Room Escape\n\nIn today's workshop you are going to be working on making a room escape app!  This level has an example app that you should play around with to get the feel for what you will be creating.\n\n# Do This\n\n-   Click RUN to start the app\n-   Try to find the key that will open the door."
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/2": {
    "dsls": {
      "markdown": "# Welcome to App Lab Design Mode\nIn App Lab \"Design Mode\" lets you drag and drop User Interface elements into the app.\n\n### Vocabulary\n* **User Interface (UI)** - How a person (user) interacts with the computer or app.\n* **UI Elements** or objects, like buttons, images, text boxes, pull down menus, screens and so on.\n\n## Example\n\n<div style=\"column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%\">\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nYou'll see a new set of switches above the app area that let you flip back and forth between \"Design Mode\" and Code Mode\".</p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>Adding an element is as easy as dragging and dropping it into the app where ever you want. Once it's on the app screen you can reposition it, resize it and change lots of other properties about it </p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">3.</span>The <em>Properties</em> tab shows you everything you can change about the look and feel of a UI element.</p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">4.</span>The <strong>element ID</strong> is important because it's how you refer to the element in your code. We'll discuss element IDs later on.</p>\n</div>\n\n![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)\n\n\n<div style=\"column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 66%; float: right\">\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">5.</span>You can make the text that the user sees on the button text be whatever you like.</p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\"><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">6.</span><strong>Note:</strong> Scroll down to see other properties for a UI element might be \"hiding\" down below.</p>\n</div>\n\n<div style=\"clear: both\"></div>\n<hr>\n\n**Now you try!**\n"
    }
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/3": {
    "dsls": {
      "markdown": "# Images\n\n## Enter a URL of an image on the web\n\n<img src=\"https://images.code.org/acf4542eda586e7b73bc27dd8746848c-image-1477675154724.png\" style=\"width: 250px; float: right\">\n\nThere are several ways to get the URL of an image.  \n\nA common technique (shown at right) is to find an image you like on a web page and then right-click (or ctrl-click) and choose an option that says something like \"Copy Image Address\" then you can paste it into the text box in App Lab.\n\nIf you're unsure, you can also choose an option like \"Open Image in New Tab\" which isolate the image by itself and the URL will show in the address bar, which you can copy/paste into App Lab.\n\n**Common Mistake**: Using the URL of an *image search web site* rather than a URL of the image itself.\n\n* Make sure you get the path to an actual image file - something that ends with **.jpg**, **.gif** or **.png**.\n* A URL that starts like this: `https://www.google.com/search?q=cat&espv=2&biw=1497....`  is probably wrong.\n\n\n## Upload your own images\n\nIf you have saved images on your computer you can upload them into app lab's **asset manager**.  Just **click Upload File** and follow the dialogs on screen.\n\nFor images the file must be of type: **.jpg**, **.png**, or **.gif**\n\nOnce you've uploaded the image then you need to **Choose** it to set the image to that file. If you add multiple images you'll see them all listed every time you upload a file and you can choose to use *any* file that you've already uploaded.\n\n![](https://images.code.org/d64d7e3dadc882897e450b00a0fc6cb2-image-1476896824985.gif)\n\n### Click Continue to try it!\n\n\n"
    }
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/4": {
    "long_instructions": "# Setting Up Rooms\n\n<img src=\"https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44 AM.png\" style=\"width:200px; float:right\">\n\nIn order to make your room escape you will need to set up the room the user will be able to adventure around in. Some of the work has already been done for you.  You just need to decide what the different parts of the room will look like by picking pictures!\n\n# Do This\n\n-   The level starts in Design Mode\n-   For each image element that is blank (gray rectangle) add an appropriate image. For example you will need a door image for the image element labeled door.\n-   An example of what the room might look like are on the right."
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/5": {
    "long_instructions": "# Hide the Code\n\n<img src=\"https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png\" style=\"width:400px;float:right\">\n\n1.  In Design Mode Click on the white square where it says \"CODE\". Change it to show a secret code of your choice\n2.  Drag the picture down to cover the secret code\n\n[][0]"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/6": {
    "dsls": {
      "markdown": "# Responding to User Input\n\nYou will need to dive into Code Mode to make it actually respond to users. App Lab waits to respond to certain **events** that occur in a program. The `onEvent` block specifies which UI element to wait for a event on.\n\n## OnEvent\n\n<br><br>\n\n<div style=\"column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nSwitch into Code Mode</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\nDrag an <code>onEvent</code> block from the toolbox into the workspace.</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">3.</span>\nUse the pulldown menu to select the <em>ID</em> of the UI element you want to setup to respond to some event. The IDs of all UI elements added in design mode will be listed here.</p>\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">4.</span>\nUse the pulldown menu to select the <em>type</em> of event you want to respond to. (Just use \"click\" for now).</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">5.</span>\nAdd code inside the function that you want to run <em>when</em> the user triggers the event.  The function will run once every time the user triggers the specific event.</p>\n\n</div>\n\n![](https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png)\n"
    }
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/7": {
    "dsls": {
      "markdown": "# setPosition and Screen Dimensions\n\nThe `setPosition` command lets you move UI elements to an arbitrary position on the screen.\n\n<img src=\"https://images.code.org/ee55080bb341528ca7e8ebc79f9f978b-image-1490369263385.27.12 AM.png\" style=\"display: block; margin: auto\">\n\nYou (perhaps obviously) need to plug actual numbers into these parameters of `setPosition` for it to have any effect.  The numbers for setPosition **x and y coordinates of the screen**.\n\n**Hints:**\n\n* 0,0 is the top left corner.\n* Specify a location by how many pixels from the **left and down** from the top of the screen it is.  \n* The screen is **320 by 450 pixels**.  \n* You can **hover over the screen** to see the x,y coordinate of any point.\n\n<div style=\"width: 100%; text-align: center\">\n<img src=\"https://images.code.org/8b346602d75f2877c64e1793b6a04302-image-1476889124747.png\">\n\n<img src=\"https://images.code.org/fc7e830fa2ea994b885c76618b484dfa-image-1476889137756.gif\">\n</div>\n"
    }
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/8": {
    "long_instructions": "# Move Picture\n\nNow make it so the user can find the secret code by clicking the picture. When they click the picture it should move up and out of the way.\n\n# Do This\n\n-   Pull out an `onEvent` block\n-   Change the id spot in the `onEvent` block to picture (which is the ID of the picture element)\n-   Inside the `onEvent` block add the `setPosition` block with the following inputs\n    -   ID: picture\n    -   The next two inputs are x and y values - test out some numbers to try to get the picture to move like in the pictures on the right"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/9": {
    "long_instructions": "# Setting Up the Safe\n\nYou have generated a secret code and made it so users can navigate to the second room. Lets give the user the ability to enter the secret code when they click on the safe\n\n# Do This\n\n-   Add an `onEvent` block\n    -   Pick the ID for the safe\n-   Inside the `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36 AM.png\" style=\"width:300px\"> block\n    -   On the left side change the _x_ (the name of the variable) to be _guess_ \n    -   On the right side change _\"Enter a value\"_ (the prompt to ask the user) to _\"Enter the code\"_"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/10": {
    "dsls": {
      "markdown": "# If Statement\n\n## How If-statements work\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px\">\n\nIf statements allow you to *make a decision that determines which lines of code should be run next.*\n\nAt the right is a diagram showing the elements of a basic `if` statement in JavaScript.\n\nThere are two basic parts to an if-statement.\n\n1. A condition to be evaluated (A Boolean expression that evaluates to **true** or **false**)\n2. Code that should run *if* the expression was true - enclosed in curly braces\n\n## A worked example\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">1.</span>\nProgram executes line by line as you would expect. It displays a message, then prompts the user to enter a number.  Whatever the user types will be stored in the variable <code>age</code> and then proceeds to the next line...\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">2.</span>\nWhen the <code>if</code> statement is encountered the <em>first</em> thing it does is evaluate the condition in the parentheses. It checks to see if, at this point in the program, the value in a variable <code>age</code> is greater than or equal to 18.  If it is then we say the expression \"<strong>returns true</strong>\".  Otherwise it returns false.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">3.</span>\nThese console.log statements will <em>only</em> execute if the expression was true. The curly braces surround all of the code that should be executed if, and only if, the expression was true.  Otherwise, the entire section of code encapsulated in the if statement is <em>skipped</em>.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">4.</span>\nExecution picks up here, on the first line after the closing curly brace of the if-statement.  This line will <em>always</em> execute, but notice that if the user entered an age less than 18, the entire if statement would be skipped, and it would just say \"Thanks for verifying\".  (We'll fix this awkwardness soon).\n\n</p>\n\n<div style=\"clear: both\">&nbsp;</div>\n\n\n"
    }
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/11": {
    "long_instructions": "# Checking the Secret Code\n\nNow that you have collected a guess of the secret code from the user you will need to check if it is correct! We can do this using an `if` statement. An if statement checks if a condition is true, in this case it will check if the number the user entered is equal to the secret code\n\n# Do This\n\n-   Inside the `onEvent` block for the safe below the prompt command add an <img src=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01 AM.png\" style=\"width:100px\"> statement \n-   Create the condition by pulling out the <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png\" style=\"width:100px\"> block which will check if two things are equal\n-   On one side of <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png\" style=\"width:100px\"> put _guess_ (the name of the value we used to store the users guess)\n-   On the other side put the value for your secret code"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/12": {
    "long_instructions": "# Showing inside the safe\n\n<img src=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37 AM.png\" style=\"width:200px;float:right\">\n\nOnce you have the program working to check the secret code you are going to want to \"open\" the safe and show the key inside. First you will need to create these elements in design mode.\n\n# Do This\n\n-   Go to Design Mode and add a gray square image\n    -   Click and Drag a Image Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13 AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID (maybe _insideSafe_)\n    -   Find an gray square to use as the picture\n    -   This will act as the inside of the safe as it will hide the front of the safe when shown\n-   Add a key image\n    -   Click and Drag a Image Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13 AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID (maybe _key_)\n    -   Find an key image to use \n-   Click the hidden property in Design Mode for the gray square and key. When they are hidden it will look something like below in Design Mode\n\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55 PM.png\" style=\"width:200px\">"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/13": {
    "long_instructions": "# Showing inside the safe\n\nNow set up the code to show the key and the gray square when the user inputs the correct code.\n\n# Do This\n\n-   Inside the `if` statement you created in the `onEvent` command for the safe add:\n    -   The `showElement` block to show the gray square\n    -   The `showElement` block to show the key"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/14": {
    "long_instructions": "# Click Key\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00 PM.png\" style=\"width:170px;float:right\">\n\nOnce a user clicks the key you will want to show they are holding it. You can do this by moving the key to the bottom corner of the room. \n\n# Do This\n\n-   Add an `onEvent` block for when the user clicks the key. \n-   Inside the `onEvent` block:\n    -   Use `setPosition` to move the key to the bottom corner of the screen"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/15": {
    "long_instructions": "# Door Open\n\n<img src=\"https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png\" style=\"width:200px;float:right\">\n\nGetting close! Lets set up the door to get ready for opening it.\n\n# Do This\n\n-   Add image for the outdoors\n-   Give it a good ID (maybe _outside_)\n-   Hide the image for the outdoors (It will be shown when door opens)"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/16": {
    "long_instructions": "# Door Open\n\n<img src=\"https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png\" style=\"width:200px;float:right\">\n\nOpen the door if they have the key!\n\n# Do This\n\n-   Add an `onEvent` block for clicking on the door\n-   Add an `if` statement inside the `onEvent` to check if the key position has moved to the bottom of the screen\n    -   Add an if statement\n    -   In the if statement add the `==`\n    -   On one side of the `==` put the x position you move the key to when it is clicked\n    -   On the other side add the `getXPosition()` block - The ID for that should be the ID of your key!\n-   Inside the `if` statement use `showElement` to show the hidden outdoors image if they got the key"
  },
  "https://studio.code.org/s/applab-1hour/lessons/1/levels/17": {
    "long_instructions": "# You've done it!\n\nYou made a room escape! Now its time to customize it. \n\nConsider:\n\n-   Add more style to the room\n-   Adding more things users can interact with in the room\n-   Try to make your secret code random\n-   Adding more rooms"
  }
}