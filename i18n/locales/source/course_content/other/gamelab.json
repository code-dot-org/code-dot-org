{
  "https://studio.code.org/s/gamelab/lessons/1/levels/1": {
    "long_instructions": "# Start and End Screens\n\nThis tutorial will teach you how to make start and end screens in Game Lab, as well as restart the game from the end screen.\n\nHit run to play the game on the left.  Follow the instructions on the start screen to play.  Once the game is over, follow the instructions on the end screen to restart the game.\n\nIn the next bubble, you'll see the code for game play and start to add your own start and end screens.\n\n## Start Screen\n\nThe start screen is the introductory screen that appears before the user starts playing the game.  It usually has the title of the game and some basic instructions for playing.  It might also include the game developer.\n\n## End Screen\n\nThe end screen appears after the user has won or lost the game.  It sometimes includes the final score, player rankings or other information.  It can also have an option to play the game again."
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/2": {
    "long_instructions": "# Game Code\n\nThis is the code for the game without the start and end screens.  The function `gameStatus` (called on line 43 and defined on line 208) checks whether the user has won or lost, but it only adds a text message to the screen.  Gameplay also continues even after the game is over.\n\n## Do This\n\nRead the code, in particular the code before the draw loop (lines 1-24), inside the draw loop (lines 27-43), and inside the `gameStatus` function (lines 209-224).  It's okay if you don't understand everything in the game, but you should see that the code before the draw loop sets up the sprites, and the code inside the draw loop controls the gameplay."
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/3": {
    "long_instructions": "# Game State Variable\n\nOur sample game had four different scenarios (or **states**) that we need to keep track of in order to display the right screen: \"starting\", \"playing\", \"won\", and \"lost\".  The first step in adding a start or end screen to the game is creating a variable to keep track of any changes in the state of the game.\n\n## Do This\n\n-   Declare a variable called `gameState` at the beginning of the program.  (A good place to do this would be near where `score` and `lives` are declared.\n-   Set the initial value of  your `gameState` variable to \"starting\"\n\n(Because you are not using this variable yet, you will see a warning triangle next to the line where it is declared.  It also will not affect how the program runs.)"
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/4": {
    "long_instructions": "# Checking Game State\n\nNow that you have your game state stored in a variable, you can check it to determine what should be displayed.  This should happen inside the draw loop, since it's something that will change as the program is being run.  The program should check whether the game is in the \"playing\" state, and only run the program if it is.  We can worry about the other states later.\n\n## Do This\n\n-   Inside the draw loop, add a conditional (`if` statement).\n-   For the condition, check if `gameState == \"playing\"`.\n-   Move the rest of the code from the draw loop inside the `if` statement, so it only runs if the game is \"playing\".\n-   Run the program.  Nothing should happen because the game is still in the \"starting\" state.\n-   Go back to where you set the value of your `gameState` variable and change it from \"starting\" to \"playing\".\n-   Run the game again, and it should play normally, because it is now in the \"playing\" state.\n-   Change the value of the variable back to \"starting\".\n\n(It is important to find ways to check your code as you go, rather than wait until the end of many complex changes to run it.  By checking both the playing and starting states, you know that your conditional is working properly and that the game should play while in the \"playing\" state.)"
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/5": {
    "long_instructions": "# Check all States\n\nRight now the only state your program can deal with is \"playing\", but you can add more conditionals to account for the other three states.\n\n## Do this\n\n-   Inside the draw loop, add in three more `if` statements that check for `gameState == \"starting\"`, `gameState == \"won\"`, and `gameState == \"lost\"`, respectively.\n-   Inside each `if` statement, add code that will draw text to the screen, so you can see the results of the different states.  You may also want to use `drawSprites` so you can see the background image and the player sprites, but make sure you are drawing the text on top of the sprites.\n-   Check your code by running the program in the different states.  (Don't worry about making them perfect yet, just make sure that the conditionals are working as they should.)\n\nIn order to keep track of your code, you might find it useful to create a function for each of the different text displays, then call those functions inside the conditionals."
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/6": {
    "long_instructions": "# Changing the State\n\nNow that you can display a different screen according to the state of your program, you will need a way to change between states.  To go from the \"starting\" state to the \"playing\" state, you can have the user press the \"s\" key.  You'll **only** want the program to check for the key press when the program is in the \"starting\" state, so your code for this will go inside the \"starting\" conditional.  Putting one `if` block inside another is called **nesting** conditionals.\n\n## Do this\n\n-   Inside the `if` statement that checks for \"starting\", add in a new `if` statement that checks whether the user has pressed the \"s\" key.  (`if (keyDown(\"s\")) {`)\n-   Inside your new `if` statement, set the value of your `gameState` variable to \"playing\". (`gameState = \"playing\";`)\n-   Test the code by starting the game and pressing \"s\".  The game should start playing after the key is pressed.\n\nIf the game isn't starting on the start screen, double check that when the `gameState` variable is created at the beginning of the program, its value is \"starting\".  (`var gameState = \"starting\";`)"
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/7": {
    "long_instructions": "# Ending the Game\n\nNext, you'll need to add code that changes the state of the game when you lose.   Scroll down to the bottom of the program, to the `gameStatus` function.  Inside the function, the program checks the score and lives variables to check whether the use should win or lose the game.  Instead of displaying a win or lose message, you'll want to change the state of the game to \"won\" or \"lost\";\n\n## Do this\n\n-   Inside the `gameStatus` function, replace the code `text(\"You Won!\", 35, 200);` with `gameState = \"won\"`.\n-   Inside the `gameStatus` function, replace the code `text(\"You Lost!\", 35, 200);` with `gameState = \"lost\"`.\n-   Check your code by running the game and losing.\n-   Check your code by running the game and winning.\n\n(To make the game much easier to win, change the original number of lives to 1000 by replacing `var lives = 3;` to `var lives = 1000;`.)"
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/8": {
    "long_instructions": "# Restarting the Game\n\nLast, you'll need to add code that restarts the game.   This is similar to how you started the game by having the user press the \"s\" key.  This time, you'll need to check during the \"lost\" and \"won\" states.  If the user presses the \"r\" key during on of these states, you should restart the game by setting the `gameState` to \"playing\" and also resetting the `score` and `lives` variables to 0 and 3, respectively.\n\n## Do this\n\n-   Inside the `if (gameState == \"lost\") {` statement, add an if statement that checks whether the user has pressed the \"r\" key.\n-   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to \"playing\".\n-   Inside the `if (gameState == \"won\") {` statement, add an if statement that checks whether the user has pressed the \"r\" key.\n-   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to \"playing\".\n-   Inside the `gameStatus` function, replace the code `text(\"You Lost!\", 35, 200);` with `gameState = \"lost\"`.\n-   Check your code by running the game and losing and restarting the game.\n-   Check your code by running the game and winning and restarting the game."
  },
  "https://studio.code.org/s/gamelab/lessons/1/levels/9": {
    "long_instructions": "# Hide and Show Sprites\n\nYou may prefer that the platform, coin, and rock sprites only be visible when the game is playing.  You can change the game setup to set their visible property to `false` at the beginning of the game, then set it to `true` when you start the game, then `false` again when the game is won or lost.\n\n## Do this\n\n-   Add code after you create your platforms, gold, and rocks sprite groups that sets those sprite groups' visible properties to `false` (e.g. `platforms.setVisibileEach(false);` )\n-   In the same  three places where you set `gameState = \"playing\";`, set the sprite groups' visible properties to `true`.\n-   In the same places where you set `gameState = \"lost\";` and `gameState = \"won\";`, set the sprite groups' visible\n-   Check your code by running the game and losing and restarting the game.\n-   Check your code by running the game and winning and restarting the game."
  }
}