{
  "https://studio.code.org/s/allthethings/lessons/2/levels/1": {
    "short_instructions": "Can you make me move West to get to the pig?"
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/2": {
    "short_instructions": "Get me to the pig! Be sure to use `repeat` loops.",
    "long_instructions": "Get me to the pig!\\\nBe sure to use `repeat` loops."
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/3": {
    "short_instructions": "Can you help me catch the naughty pig? Stack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
    "long_instructions": "Can you help me catch the naughty pig? \n\nStack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
    "authored_hints": {
      "2-3_Maze_1_a": "To use a `move forward` block, drag it from the toolbar area out into the workspace and connect it to the `when run` block."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/4": {
    "short_instructions": "Use the \"repeat\" block to solve the puzzle quickly...",
    "authored_hints": {
      "4-5_Maze_4_a": "If you are having a hard time figuring out where to put the repeat, try coding everything out and looking for a pattern."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/5": {
    "short_instructions": "Use the `if` block to help me decide when to turn. ",
    "long_instructions": "Use the `if` block to help me decide when to turn. "
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/6": {
    "short_instructions": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
    "long_instructions": "_\"This pig is ruffling my feathers.\"_\n\nThere is one extra block that is going to cause the bird to crash.\\\nThrow it away by unhooking it from the grey blocks and dragging it back to the toolbox.",
    "authored_hints": {
      "courseC_maze_programming3_a": "Try running the code first to see where it goes wrong.",
      "courseC_maze_programming3_b": "[][0]\n\nTo delete a block from the middle of your code, drag all of the blocks to another part of the workspace.\n\nDrag the block you want to delete back to the toolbox.\n\nFinally, put your other blocks back where they belong."
    },
    "callouts": {
      "courseC_maze_programming3_2": "You can drag extra blocks to the toolbox to throw them away.",
      "courseC_maze_programming3_3": "These blocks are stone and cannot be thrown away."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/2/levels/7": {
    "short_instructions": "Move me East to get me to the pig!"
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/1": {
    "short_instructions": "Draw the foot of the man with one line"
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/2": {
    "short_instructions": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)",
    "long_instructions": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)",
    "authored_hints": {
      "2-3_Artist_1_new_a": "If you use the block to have me `move forward by 100 pixels`, I will draw a line automatically.",
      "2-3_Artist_1_new_b": "Having trouble turning the corner? Use the `turn right 90 degrees` block."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/3": {
    "short_instructions": "Now, put the function inside of a loop to draw these three squares.",
    "long_instructions": "Now, put the function inside of a loop to draw these three squares.",
    "authored_hints": {
      "2-3_Artist_Functions_4_a": "The artist needs to turn 120 degrees between each square to complete this design."
    },
    "function_definitions": {
      "draw a square": {
        "name": "draw a square"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/4": {
    "short_instructions": "Drag a number block to both the `set length` block and the `repeat _ times` block to draw a set of 50 pixel triangles. ",
    "long_instructions": "Drag a number block to the `set length` block and to the `repeat _ times` block to draw a set of 50 pixel triangles. "
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/5": {
    "short_instructions": "Here is a new type of Block. It is called a `function` block. Click \"edit\" then fill it with the code for drawing a square with 100 pixel sides. \n\nWhen you're done editing the function, click \"Close\" to go back to your program.",
    "long_instructions": "Here is a new type of Block. It is called a `function` block. Click \"edit\" then fill it with the code for drawing a square with 100 pixel sides. \n\nWhen you're done editing the function, click \"Close\" to go back to your program.",
    "callouts": {
      "NEW_Course_4_Artist_Functions_3_1": "Click here to edit the new function so that it creates a square."
    },
    "function_definitions": {
      "draw a square": {
        "name": "draw a square"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/6": {
    "short_instructions": "You can call functions from inside other functions! Using your \"shape\" function as a base, create 3 house shapes each 20 pixels larger than the last starting at 50 pixels in length. Using a counter loop might be helpful. ",
    "function_definitions": {
      "draw a shape": {
        "name": "draw a shape",
        "parameters": {
          "sides": "sides",
          "length": "length"
        }
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/3/levels/9": {
    "short_instructions": "Now, put the function inside of a loop to draw these three squares.",
    "long_instructions": "Now, put the function inside of a loop to draw these three squares.",
    "authored_hints": {
      "2-3_Artist_Functions_4_a": "The artist needs to turn 120 degrees between each square to complete this design."
    },
    "function_definitions": {
      "draw a square": {
        "name": "draw a square"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/4/levels/1": {
    "short_instructions": "Move me to the flower, get the nectar, then move me to the honeycomb, and make honey"
  },
  "https://studio.code.org/s/allthethings/lessons/4/levels/3": {
    "short_instructions": "This time, use a loop to gather all of the nectar."
  },
  "https://studio.code.org/s/allthethings/lessons/4/levels/4": {
    "short_instructions": "Be careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
    "long_instructions": "These magic purple flowers change!\n\nEach time you try the puzzle, purple flowers can have either 1 nectar or none at all...but you won't know the number until you run the code! \n\nBe careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
    "callouts": {
      "Bee_Cond_5_1a": "Purple flowers can have either 1 or 0 nectar...but you won't know until you run the code!"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/4/levels/5": {
    "short_instructions": "Purple flowers may have either 1 or 0 nectar, but you don't know which one! Be careful not to collect nectar from a purple flower if it doesn't have any. Check if the nectar is equal to 1 by using the if block."
  },
  "https://studio.code.org/s/allthethings/lessons/5/levels/3": {
    "short_instructions": "Let's make the dog speak every number from 1 to 100. Use a `for` loop and the counter block to speak the counter variable each time the loop is run.",
    "long_instructions": "Let's make the dog speak every number from 1 to 100. Use a `for` loop and the counter block to speak the counter variable each time the loop is run."
  },
  "https://studio.code.org/s/allthethings/lessons/5/levels/4": {
    "short_instructions": "Now we've got flags that are too high for our current jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple jump heights.  \n\nWe need to add a parameter to our jump function called \"height\".  The up arrow should cause the dog to jump 200 pixels and the down arrow should make it jump only 100 pixels. ",
    "long_instructions": "Now we've got flags that are too high for our current jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple jump heights.  \n\nWe need to add a parameter to our jump function called `height`.  \n\n-   The up arrow should cause the dog to jump 200 pixels \n-   The down arrow should make it jump only 100 pixels. ",
    "authored_hints": {
      "Course_4_Play_Lab_Params_2_a": "You will need to click \"edit\" on the jump function and update it so that it uses the `height` parameter."
    },
    "callouts": {
      "Course_4 _Play_Lab_Params_2_1": "Click \"edit\" to update this function so that it uses the height parameter."
    },
    "function_definitions": {
      "jump": {
        "name": "jump",
        "description": "Makes the main character jump up 'height' pixels"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/5/levels/5": {
    "display_name": "Playlab Free Play"
  },
  "https://studio.code.org/s/allthethings/lessons/6/levels/1": {
    "short_instructions": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.\\\nCan you write a program that keeps using the `fill` block until the ground is even?  ",
    "long_instructions": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.\\\nCan you write a program that keeps using the `fill` block until the ground is even?  "
  },
  "https://studio.code.org/s/allthethings/lessons/6/levels/2": {
    "short_instructions": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs.  Can you write a program that fills it until the ground is even?  Hint:  Try using the while loop this time.",
    "authored_hints": {
      "first_hint": "This is the first hint.\n\nIt has _some_ **basic** `markup`",
      "second_hint": "This is the second hint. It has a hint video.",
      "last_hint": "This is the third and final hint. It doesn't have anything special."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/6/levels/3": {
    "short_instructions": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs.  Can you write a program that fills it until the ground is even?  Hint:  Try using the while loop this time.",
    "authored_hints": {
      "first_hint": "This is the first hint.\n\nIt has _some_ **basic** `markup`",
      "second_hint": "This is the second hint. It has an image.\n\n[][0]",
      "last_hint": "This is the third and final hint. It doesn't have anything special."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/7/levels/1": {
    "short_instructions": "Attach a block to the \"when click\" block, then press \"Run\". Click or tap the screen to move Flappy to the target."
  },
  "https://studio.code.org/s/allthethings/lessons/8/levels/1": {
    "short_instructions": "Attach a block to the \"when left arrow\" block and press \"Run\". Move the paddle using the left arrow to reach the finish target."
  },
  "https://studio.code.org/s/allthethings/lessons/9/levels/1": {
    "dsls": {
      "answers": [
        {
          "text": "/script_assets/k_1_images/unplugged_images/up.png",
          "correct": false
        },
        {
          "text": "/script_assets/k_1_images/unplugged_images/down.png",
          "correct": true
        },
        {
          "text": "/script_assets/k_1_images/unplugged_images/left.png",
          "correct": false
        },
        {
          "text": "/script_assets/k_1_images/unplugged_images/right.png",
          "correct": false
        }
      ],
      "content1": "/script_assets/k_1_images/unplugged_images/happy_maps_1q.png",
      "questions": [
        {
          "text": "Which arrow gets the Flurb to the treasure?"
        }
      ],
      "title": "Multiple Choice"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/9/levels/2": {
    "dsls": {
      "answers": [
        {
          "text": "3 bits",
          "correct": false
        },
        {
          "text": "4 bits",
          "correct": false
        },
        {
          "text": "5 bits",
          "correct": false
        },
        {
          "text": "6 bits",
          "correct": false
        },
        {
          "text": "7 bits",
          "correct": true
        },
        {
          "text": "12 bits",
          "correct": false
        }
      ],
      "questions": [
        {
          "text": "The standard QWERTY keyboard has 47 keys that can place characters on the screen. Each of these keys can also display a second character by holding the “Shift” key at the same time (Assume that all other keys are ignored in this question).\n\nHow many bits would you need to encode everything that could be typed on this keyboard?"
        }
      ],
      "title": "Assessment: Encoding Text"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/9/levels/3": {
    "dsls": {
      "answers": [
        {
          "text": "blue",
          "correct": false
        },
        {
          "text": "green",
          "correct": false
        },
        {
          "text": "teal",
          "correct": false
        },
        {
          "text": "yellow",
          "correct": false
        },
        {
          "text": "real orange of course",
          "correct": true
        },
        {
          "text": "red",
          "correct": false
        }
      ],
      "questions": [
        {
          "text": "What is your favorite color?"
        }
      ],
      "title": "Submittable Multiple choice"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/9/levels/4": {
    "dsls": {
      "answers": [
        {
          "text": "Calling the parameters of a function  \n ![](https://images.code.org/0f141813c72d90d60db0cccede38c5c6-image-1506463453209.png)",
          "correct": false
        },
        {
          "text": "Defining the parameters of a function  \n ![](https://images.code.org/ed7e88443a6c04022684aacf0c2a0692-image-1506699220170.png)",
          "correct": true
        },
        {
          "text": "Moving the turtle around the screen  \n ![](https://images.code.org/cc173669b9c299ead986cfd3519e9360-image-1506463402006.png)",
          "correct": false
        },
        {
          "text": "Orienting the direction of the turtle   \n ![](https://images.code.org/1d9d2d6a43abcb2150686ae2ccddf3a6-image-1506463416525.png)",
          "correct": false
        },
        {
          "text": "Setting pen properties   \n ![](https://images.code.org/47185975f515e79e8712bd19235d8442-image-1506463438591.png)",
          "correct": false
        },
        {
          "text": "None of the above",
          "correct": false
        }
      ],
      "markdown": "Consider these various uses of `randomNumber`.  Each answer describes the use and shows a code example. Which one of the following is NOT a valid use of `randomNumber`\n\n",
      "teacher_markdown": "The answer gets at the difference between defining a function's parameters and calling that function.  Since `randomNumber` returns a value (a number) it can be used in places where you would otherwise provide a numeric value.\n\nFor example, you don't define a function with a numeric parameter.  This doesn't make sense:\n\n`function drawShape(50){ ... }` <-- don't do this.\n\nInstead you *define* the function with a named parameter like so:\n\n`function drawShape(size){ ... }`  \n\nand then *call* it, supplying a value for that parameter like so:\n\n`drawShape(50);` \n\nIn the case of this question we're using randomNumber in place of that value for the function *call*.\n\n`drawShape( randomNumber(25,75) );`\n\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/10/levels/1": {
    "dsls": {
      "answers": [
        {
          "text": "Line 2",
          "correct": true
        },
        {
          "text": "Line 3",
          "correct": true
        },
        {
          "text": "Line 4",
          "correct": false
        },
        {
          "text": "Line 5",
          "correct": false
        }
      ],
      "markdown": "This question uses a robot in a grid of squares. The robot is represented as a triangle, which is initially facing toward the right side of the grid. The robot is moved according to the following instructions.\n\n| Instruction       | Explanation |\n|--------------------|--------|\n|`Move Forward` | The robot moves one square forward in the direction it is facing |\n|`Rotate right` | The robot rotates in place 90 degrees clockwise (i.e., makes an in-place right turn). |\n|`Rotate left` | The robot rotates in place 90 degrees counter-clockwise (i.e., makes an in-place left turn). |\n|`REPEAT n TIMES` | The block of instructions contained between the braces {} is repeated n times. |\n\n&nbsp;\n\nConsider the following incorrect program, which is intended to move the robot around the perimeter of the grid below, as indicated by the arrows.\n\n![](https://images.code.org/4d3177070d1585fc6ad3f9091dd53d76-image-1579897739915.png)\n\n![](/script_assets/csp/instruction_gifs/U3L02-rightSquare.png)\n\n",
      "questions": [
        {
          "text": "Which lines of code should be removed so the program will work as intended? Select <u>two</u> answers"
        }
      ]
    }
  },
  "https://studio.code.org/s/allthethings/lessons/11/levels/1": {
    "dsls": {
      "answers": [
        {
          "text": "/script_assets/k_1_images/move_blocks/EN.png"
        },
        {
          "text": "/script_assets/k_1_images/move_blocks/ENE.png"
        },
        {
          "text": "/script_assets/k_1_images/move_blocks/WW.png"
        },
        {
          "text": "/script_assets/k_1_images/move_blocks/WSS.png"
        }
      ],
      "content2": "Match the puzzles and blocks",
      "questions": [
        {
          "text": "/script_assets/k_1_images/maze_images/maze_EN.png"
        },
        {
          "text": "/script_assets/k_1_images/maze_images/maze_ENE.png"
        },
        {
          "text": "/script_assets/k_1_images/maze_images/maze_WW.png"
        },
        {
          "text": "/script_assets/k_1_images/maze_images/maze_WSS.png"
        }
      ],
      "title": "Matching"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/12/levels/2": {
    "long_instructions": "Is teaching _computer science_ different than teaching other subjects like math or reading? Read this list of strategies and comment below on some of the differences you think you'll encounter when teaching computer science versus other subjects.\n\n[This worksheet][0] is also available in the Teacher Dashboard in the \"Lesson Plans and Resources\" tile. \n\n[image][1]\n\n</br>",
    "placeholder": "I think teaching computer science will be different than teaching other subjects in these ways: ...",
    "title": "Strategies for Teaching Computer Science"
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/1": {
    "short_instructions": "This Evaluation Block is a multiplication function which takes two numbers and returns the product of those numbers. Edit this block so that it multiplies 2 \\* 5",
    "long_instructions": "This Evaluation Block is a multiplication function which takes two numbers and returns the product of those numbers. Edit this block so that it multiplies 2 \\* 5",
    "callouts": {
      "calc_question_marks": "Select the right number from this dropdown"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/2": {
    "short_instructions": "The string-append function takes two Strings and returns a single combined String. Add a String \"Universe\" to the second argument of string-append.",
    "long_instructions": "The `string-append` function takes two Strings and returns a single combined String. Add a String \"Universe\" to the second argument of `string-append`.",
    "callouts": {
      "": "Teal colored blocks, like this one, output string values"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/3": {
    "dsls": {
      "answers": [
        "text|Image|String|Number|String"
      ],
      "content1": "Write a contract for the text function",
      "content2": "Eval Contracts E.solution_blocks, 300",
      "title": "Text Contract"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/4": {
    "short_instructions": "Use the star function to produce a solid red star with a 60 pixel radius",
    "long_instructions": "Use the `star` function to produce a solid red star with a 60 pixel radius"
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/5": {
    "short_instructions": "Variables allow us to name values so that we can easily refer to them repeatedly throughout our programs. Here's a variable called age. Set its value to your age and click run.",
    "long_instructions": "Variables allow us to name values so that we can easily refer to them repeatedly throughout our programs. Here's a variable called `age`. Set its value to your age and click run.",
    "callouts": {
      "Calc Vars 1_edit_option": "Click on edit to change the value of this variable"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/6": {
    "short_instructions": "Let's get started on your Big Game! Here you'll see a whole bunch of placeholder code that you'll eventually replace with your own, but for now we're only going to worry about defining variables. Click \"Run\" to see what the game looks like with the default values.",
    "long_instructions": "Let's get started on your Big Game! Here you'll see a whole bunch of placeholder code that you'll eventually replace with your own, but for now we're only going to worry about defining variables. Click \"Run\" to see what the game looks like with the default values.",
    "callouts": {
      "big_game_finish": "Click the finish button when you're ready to move to the next level."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/7": {
    "short_instructions": "Here's the start of another new function called purple-circle with a domain of one Number (the radius) and a range of Image. The body of the function is broken though - fix it and then make a purple circle with 150 pixel radius",
    "long_instructions": "Here's the start of another new function called `purple-circle` with a domain of one Number (the radius) and a range of Image. The body of the function is broken though, it always draws a circle of 50 pixel radius instead of using the radius parameter. Replace the current Number with the `radius` block from the domain.\n\nWhen you've fixed the function, test your new function with a 150 pixel radius.",
    "callouts": {
      "Eval Define Funcs 3": "Make our function use the radius parameter instead of always having a radius of 50."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/8": {
    "short_instructions": "Can you set the values so that this expression evaluates as true?",
    "long_instructions": "Can you set the values so that this expression evaluates as _true_?",
    "callouts": {
      "Eval Booleans 2 1": "Select a number that will make this expression evaluate to true"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/9": {
    "short_instructions": "Sam's mom wants to make sure that she can always see at least a bit of him, so lets write some functions that help make sure he doesn't go too far out of the yard. Here's a function called safe-left? - it should take a Number for its domain that represents Sam's x-coordinates and return true if he's completely visible on screen. If your function works, Sam shouldn't be able to leave the yard from the left side.",
    "long_instructions": "Sam's mom wants to make sure that she can always see at least a bit of him, so lets write some functions that help make sure he doesn't go too far out of the yard. Here's a function called `safe-left?` - it should take a Number for its domain that represents Sam's x-coordinates and return _true_ if he's completely visible on screen. If your function works, Sam shouldn't be able to leave the yard from the left side."
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/10": {
    "short_instructions": "Welcome to Luigi's Pizza! To order a pizza, type the name of a topping into the cost function, and we'll return the price of that pizza. Try ordering a pepperoni pizza to start.",
    "long_instructions": "Welcome to Luigi's Pizza! To order a pizza, type the name of a topping into the `cost` function, and we'll return the price of that pizza. Try ordering a pepperoni pizza to start.",
    "callouts": {
      "luigi's pizza 1": "Try ordering a pepperoni pizza"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/13/levels/11": {
    "short_instructions": "Here's the start of another new function called purple-circle with a domain of one Number (the radius) and a range of Image. The body of the function is broken though - fix it and then make a purple circle with 150 pixel radius",
    "long_instructions": "Here's the start of another new function called `purple-circle` with a domain of one Number (the radius) and a range of Image. The body of the function is broken though, it always draws a circle of 50 pixel radius instead of using the radius parameter. Replace the current Number with the `radius` block from the domain.\n\nWhen you've fixed the function, test your new function with a 150 pixel radius.",
    "callouts": {
      "Eval Define Funcs 3": "Make our function use the radius parameter instead of always having a radius of 50."
    }
  },
  "https://studio.code.org/s/allthethings/lessons/14/levels/1": {
    "short_instructions": "Develop, document, and test a protocol that allows you to use Internet Simulator to relay a message. See the worksheet for more detailed instructions.  ",
    "long_instructions": "## Coordination and Binary Messages Activity\n\n**Develop your Protocol**\nDevelop a protocol that allows you to use Internet Simulator to relay a message, i.e. one member sends a message and the other member sends the same message back. You or a teacher will say “Go” to begin the exchange but otherwise all communication must be through the widget. As you’re working, consider:\n\n-   How will you know when the exchange is supposed to begin?\n-   How will you know whose turn it is to send or receive the message?\n-   How will you coordinate your actions?\n\nDocument your protocol on the worksheet provided, and test your protocol using the Internet Simulator"
  },
  "https://studio.code.org/s/allthethings/lessons/14/levels/2": {
    "short_instructions": "For this activity, connect to a router with the others in your group. The Internet Simulator now provides a place for you to put the To and From addresses, so you don't have to type out the bits manually."
  },
  "https://studio.code.org/s/allthethings/lessons/14/levels/3": {
    "short_instructions": "Transfer your favicon to a partner across a network in which the larger a packet grows, the more likely it is to be dropped."
  },
  "https://studio.code.org/s/allthethings/lessons/14/levels/4": {
    "short_instructions": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
    "long_instructions": "## The Need for DNS\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\\\n[][0]\n\nThe address of the DNS is always \\<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\\\n[][1]"
  },
  "https://studio.code.org/s/allthethings/lessons/14/levels/5": {
    "short_instructions": "You have loaded NetSim in superuser mode."
  },
  "https://studio.code.org/s/allthethings/lessons/16/levels/1": {
    "short_instructions": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
    "long_instructions": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern."
  },
  "https://studio.code.org/s/allthethings/lessons/17/levels/1": {
    "short_instructions": "Make a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then start entering pixel data.",
    "long_instructions": "<img style=\"float:right; margin:0 20px\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\">\n            # Task 1: Make a 3x5 letter 'A'\n            Start by trying to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation widget. \n          \n            The image is intially setup with the *incorrect* dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then you can start entering pixel data to make the A.\n            "
  },
  "https://studio.code.org/s/allthethings/lessons/17/levels/2": {
    "short_instructions": "We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. Finish off the image by figuring out which two colors are missing and encode them.",
    "long_instructions": "# Color Pixelation: Task 1\n\n**Directions:**\n\n-   We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. \n-   Finish off the image by figuring out which two colors are missing and encode them."
  },
  "https://studio.code.org/s/allthethings/lessons/17/levels/3": {
    "short_instructions": "We start you out with the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4 - shades of gray.",
    "long_instructions": "# Pixelation: Task 3\n\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right; margin:0 20px\" width=200>\n**Directions:**\nWe start you out with the 4x4 image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with colors using _12-bits per pixel_. The result should look something like (but not exactly) the image shown at right.  \n\nHere are the requirements:\n\n-   Row 1 - fill with shades of red. \n-   Row 2 - shades of green. \n-   Row 3 - shades of blue. \n-   Row 4 - shades of gray."
  },
  "https://studio.code.org/s/allthethings/lessons/17/levels/4": {
    "short_instructions": "This pixelation level demonstrates the use of the `hide_encoding_controls` option.  Notice that the level displays the image data in hexadecimal and does not let you change it back to binary.",
    "long_instructions": "# Pixelation: AllTheThings 4\n\nThis pixelation level demonstrates the use of the `hide_encoding_controls` option.  Notice that the level displays the image data in hexadecimal and does not let you change it back to binary.\n            "
  },
  "https://studio.code.org/s/allthethings/lessons/17/levels/5": {
    "short_instructions": "This pixelation level demonstrates the use of the \"Hide sliders\" option.  Notice that the width and height sliders are not available, and the width and height fields are not editable.",
    "long_instructions": "# Pixelation: AllTheThings 5\n\nThis pixelation level demonstrates the use of the \"Hide sliders\" option.  Notice that the width and height sliders are not available, and the width and height fields are not editable."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/1": {
    "short_instructions": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
    "long_instructions": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" style=\"float:right\">\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does “efficient” mean?  In computer science it can actually mean several different things depending on what you’re talking about.  Work on these challenges, try to solve them in a way that you think is best and we’ll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" style=\"float:right\">\n\n# Do This:\n\nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
    "teacher_markdown": "The constraint of working with only 4 commands is important. (See: “What’s the Point?” below.) If students come to the class with prior knowledge of programming they might try to go outside these constraints to reduce the number of lines of code.  \n\nIf you see students using commands beyond the 4 provided - or using parameters with those commands like: `moveForward(150)`, you should tell them that they are not solving the problem; the problem is to create the images using only the 4 commands provided."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/2": {
    "short_instructions": "Define a function called turnAround. Call the function and then move the turtle forward. (Click to see full instructions)",
    "long_instructions": "# Do This:\n\n**Define** a function called `turnAround` which turns the turtle around. Once you've defined the function **call** it to make sure it works as you expect and then move the turtle forward, as shown below. \n\n[][0]\n\n**Remember** typically, you call a function in lines of code _above_ the function definition - this might make you  feel like you are working in reverse, since you first write the code to define the function and _then_ add a line to call it.  Here is the `moveTwice` example from the video. You should do something similar for turnAround:\n\n[][1]"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/3": {
    "short_instructions": "You are going to use loops and random numbers to generate an image of starry night sky similar to one shown here.  We have given you some starter code to generate the ground and sky (just two giant dots), you will add code to this project to make the stars, grass, and moon.  All of the effects are clever applications of turtle dots, lines, and colors.  To get started, follow the series of steps suggested in the accompanying worksheet. ",
    "long_instructions": "You are going to use loops and random numbers to generate an image of starry night sky similar to one shown here.  We have given you some starter code to generate the ground and sky (just two giant dots), you will add code to this project to make the stars, grass, and moon.  All of the effects are clever applications of turtle dots, lines, and colors.  To get started, follow the series of steps suggested in the accompanying worksheet. \n\n<img src=\"https://images.code.org/0f42e475e7600ac33d31bdf5dee70726-image-1459547325746.gif\" style=\"width: 250px\">"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/4": {
    "short_instructions": "You have been provided with starter code for an “Under the Sea” scene which includes three functions, one each for the starfish, seagrass, and fish. Create versions of these functions which accept parameters to allow you to add more variation to your scene.  The student worksheet provides more details and guidance.",
    "long_instructions": "You have been provided with starter code for an “Under the Sea” scene which includes three functions, one each for the starfish, seagrass, and fish. Create versions of these functions which accept parameters to allow you to add more variation to your scene.  The student worksheet provides more details and guidance.\n\n<img src=\"https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L08%20-%20Under%20the%20sea.gif\" style=\"width: 250px\">"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/5": {
    "short_instructions": "Add a button that moves the turtle when clicked.  (Click to see full instructions)",
    "long_instructions": "# Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n\n# Your First Interactive App!\n\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'> A new group of commands has been added to the toolbox called **UI Controls** (User Interface Controls) which are commands that let you interact with, and respond to, the user of your app. To keep it simple, we'll start with just two commands: \n\n-   `onEvent` which let's you run a function in response to some event occuring (such as a button click)\n-   `button` which puts a button on the screen\n\n# Do This\n\nYou will replicate the small app, shown below, which makes the turtle move with a button click. You will do three things:\n\n-   Add a `button`\n-   Add an `onEvent` block\n-   Add `moveForward` inside the the onEvent function block\n\nHere's what you should do - you can come back to watch this as many times as you need to get it right.\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\" style=\"border: solid 1px black; width: 500px; margin: auto\">"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/6": {
    "short_instructions": "Use the image command to replace the text label in your program with an image. (Click to see full instructions)",
    "long_instructions": "# New Elements and Events: Images\n\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25 AM.png\" style=\"float: right; width: 120px\">\n\nImages make applications more visually pleasing and interactive. You can add images to your application using the `image` command. For now, just add an `image` element to your app (the default image link is the Code.org logo) and don't worry about choosing a unique image just yet. We'll do that in the very next exercise!\n\n# Do This:\n\n<img src=\"https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif\" style=\"float: right; width: 250px\">\n\n-   **Modify** the program - change the `textLabel` to an `image` so that the image moves randomly around the screen based on the event you chose.\n-   **Tip:** If you reuse your text label's ID you'll only need to change a single line of code to make your program work! Once you have your program working though, it's probably a good idea to choose a descriptive and meaningful ID for your image and make the appropriate changes in the event handler.\n\n<br>"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/7": {
    "short_instructions": "This level is submittable. For testing only!",
    "long_instructions": "This level is submittable. For testing only! Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/8": {
    "short_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "long_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/9": {
    "short_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "long_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\nEnd of instructions that are long."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/10": {
    "short_instructions": "Backed by a template #1. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script). ",
    "long_instructions": "Backed by a template #1. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script). "
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/11": {
    "short_instructions": "Backed by a template #2. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "long_instructions": "Backed by a template #2. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "teacher_markdown": "This markdown should be visibly **only** to authorized teachers."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/12": {
    "short_instructions": "This level cloned from \"U3 Digital Assistant Target\"",
    "long_instructions": "# Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n\n# Introduction to the Digital Assistant\n\n**While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text** looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, **you're going to build up your own digital assistant that responds \"intelligently\" to a user's question**, by making a decision about what to reply based on the contents.\n\nYou'll now **explore a demo digital assistant**, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do this\n\n**Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter'**\n\n-   'help'\n-   'What is the best PG comedy movie ever?'\n-   'What PG comedy movie should I watch next?'\n-   'Could you please tell me the best romance movie?'\n-   'I waNT To WatCH a MovIE!!!'\n-   'What is the capital of Kentucky?'\n-   Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply"
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/13": {
    "short_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "long_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/14": {
    "dsls": {
      "markdown": "# Test Embedded Video in Markdown\n\nThis level exists to test that we _do not allow_ iframes in our markdown.\n\nIn between the following horizontal rules is a line containing an html iframe that is attempting to embed [this link](https://www.youtube.com/embed/l_a0ecZ2Oe0):\n\n---\n\n<iframe width=\"560\" height = \"315\" src=\"https://www.youtube.com/embed/l_a0ecZ2Oe0\" frameborder=\"0\" allowfullscreen></iframe>\n\n---\n\nIf everything is working correctly, you should **not** see any content between the two horizontal rules.\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/15": {
    "contained levels": [
      {
        "long_instructions": "My free response markdown instructions"
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/16": {
    "short_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "long_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/18": {
    "short_instructions": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
    "long_instructions": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" style=\"float:right\">\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does “efficient” mean?  In computer science it can actually mean several different things depending on what you’re talking about.  Work on these challenges, try to solve them in a way that you think is best and we’ll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" style=\"float:right\">\n\n# Do This:\n\nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
    "teacher_markdown": "The constraint of working with only 4 commands is important. (See: “What’s the Point?” below.) If students come to the class with prior knowledge of programming they might try to go outside these constraints to reduce the number of lines of code.  \n\n            If you see students using commands beyond the 4 provided - or using parameters with those commands like: `moveForward(150)`, you should tell them that they are not solving the problem; the problem is to create the images using only the 4 commands provided."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/19": {
    "short_instructions": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
    "long_instructions": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" style=\"float:right\">\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does “efficient” mean?  In computer science it can actually mean several different things depending on what you’re talking about.  Work on these challenges, try to solve them in a way that you think is best and we’ll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" style=\"float:right\">\n\n# Do This:\n\nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
    "teacher_markdown": "The constraint of working with only 4 commands is important. (See: “What’s the Point?” below.) If students come to the class with prior knowledge of programming they might try to go outside these constraints to reduce the number of lines of code.  \n\n                        If you see students using commands beyond the 4 provided - or using parameters with those commands like: `moveForward(150)`, you should tell them that they are not solving the problem; the problem is to create the images using only the 4 commands provided."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/20": {
    "short_instructions": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
    "long_instructions": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" style=\"float:right\">\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does “efficient” mean?  In computer science it can actually mean several different things depending on what you’re talking about.  Work on these challenges, try to solve them in a way that you think is best and we’ll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" style=\"float:right\">\n\n# Do This:\n\nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
    "teacher_markdown": "The constraint of working with only 4 commands is important. (See: “What’s the Point?” below.) If students come to the class with prior knowledge of programming they might try to go outside these constraints to reduce the number of lines of code.  \n\n                                    If you see students using commands beyond the 4 provided - or using parameters with those commands like: `moveForward(150)`, you should tell them that they are not solving the problem; the problem is to create the images using only the 4 commands provided."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/21": {
    "long_instructions": "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n\n## You try it -- Text Password Checker\n\n**Key idea**: You can use `==` to compare strings as well as numbers.  \n\n-   Let's use an if-statement in an event handler to compare text that a user inputs in a UI element.\n\n**The setup:**\n\n-   Note the setup in Design Mode\n-   There are two images: a red lock, and a green \"unlock\".\n-   The green \"unlock\" is _hidden_ at the start.\n\n## Do this:\n\n**Add an if-statement to the event handler to check the password and display the \"unlock\" only if the password is correct** \n\n-   You can use `==` to compare the text you get from the *password\\_input* text box and a string you want to use as the password. The boolean expression you should use should look like this:\n\n[][0]\n\n-   If the user entered the correct password then **show** the green \"unlock\" and **hide** the red lock.\n    -   We've provide the code to hide and show the images. You just need to add the if-statement.\n-   Otherwise do nothing.  They can try again."
  },
  "https://studio.code.org/s/allthethings/lessons/18/levels/22": {
    "long_instructions": "# It's a Word Search\n\nOn the left side of the screen, click \"Run\" to start the word search.\n\nWorking with a team find the following words in the grid. They may be horizontal, vertical, or diagonal in any direction. \n\n-   DEFINE \n-   PREPARE\n-   TRY\n-   REFLECT\n-   PROBLEM\n-   SOLVE\n-   COMPUTER\n-   SCIENCE\n\n Once you have found the words (or your teacher calls time), click \"Finish\" to move to the next activity."
  },
  "https://studio.code.org/s/allthethings/lessons/19/levels/3": {
    "long_instructions": "# How Many Counter Variables?\n\nYou can use counter variables (`x = x + 1` , `x = x - 1` , `x = x + 0.5`, etc.) to animate a scene. What happens when scenes start to get larger and more complicated? \n\nWatch this animation. With a partner: \n\n-   Decide how many counter variables you would need to create this scene\n-   Decide what you would name your counter variables\n-   **Draw a Labels-Values-Connectors** diagram of your variables at the first frame of this scene. Don't worry about getting the values exactly correct.\n-   Share your answer with another group **and be ready to share your ideas with the class**"
  },
  "https://studio.code.org/s/allthethings/lessons/19/levels/4": {
    "display_name": "Project - Finishing Touches",
    "long_instructions": "# Finishing Touches\n\nNow that you have the basis for your game, it's time to add some finishing touches.\n\nTo make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.\n\n-   Find a way to keep your player from going off the edges of the screen.\n-   Add a different item for your player to collect or avoid that are worth different point values.\n-   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.\n-   Add sprites that move in the background of your game.\n-   Make another background to switch to when the score gets even higher, or when the game ends.\n-   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.\n-   If your game has platforms, try making the objects in your game interact with these platforms in some way."
  },
  "https://studio.code.org/s/allthethings/lessons/20/levels/1": {
    "dsls": {
      "markdown": "## Welcome!\n\n<img style=\"float:left; margin:0 20px\" src=\"//code.org/images/edquote1.png\" height=\"910\" width=\"400\">\n\n<p><strong>Welcome to Code.org&#39;s K-5 Intro to Computer Science Online Professional Development Course.</strong> </p>\n\n<p>Code.org&#39;s professional development program prepares you to integrate computer science into your classroom and supports your growth as a teacher. This online course may be sufficient for some teachers to start using our materials in their classrooms, but if you are looking for further professional development, please see our workshops hosted in the United States for K-5 Educators. These are high-quality workshops taught by seasoned computer science educators. </p>\n\n<p><a href=\"http://code.org/professional-development-workshops\">Sign up for a workshop here</a>.</p>\n\n<p>During this online course, you&#39;ll watch videos, read articles, do online activities, and discuss with other teachers about the basics of computer science and how to use Code.org&#39;s online learning system. We want to let you explore writing computer programs on your own so that you can experience the excitement of teaching computer science.</p>\n\n<p>During the PD program and anytime afterward, Code.org and our community of engaged educators will always be around for support at <a href=\"http://support.code.org\">http://support.code.org</a>.</p>\n\n</br>\n\n\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/20/levels/2": {
    "dsls": {
      "markdown": "## Computer Science Education\n\nDo you see computer science as a foundational skill for your students? Why or why not?\n\n<div id=\"discourse-comments\"></div>\n\n\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/21/levels/2": {
    "short_instructions": "As a block element, we should be able to include XML representing a valid Blockly block or blocks.\n\n[blockly block][0]\n\nWe also support Blockly XML as an inline element like so: [blockly block][1]. The difference in input format being that this one is embedded within a paragraph, whereas the previous one is in a text block of its own. The difference in output is comparable."
  },
  "https://studio.code.org/s/allthethings/lessons/21/levels/3": {
    "short_instructions": "Use three `move west` blocks and one `pick corn` block to solve this puzzle.",
    "long_instructions": "Use [blockly block][0] **three** times to get the harvester to the corn! Don't forget to use [blockly block][1] to pick the corn!"
  },
  "https://studio.code.org/s/allthethings/lessons/23/levels/1": {
    "short_instructions": "Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly! Hint: He's South of me."
  },
  "https://studio.code.org/s/allthethings/lessons/25/levels/1": {
    "short_instructions": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the “destroy block” command to chop it down."
  },
  "https://studio.code.org/s/allthethings/lessons/25/levels/2": {
    "display_name": "Freeplay",
    "short_instructions": "**Freeplay:**  Time to explore on your own!",
    "long_instructions": "**Freeplay:** Now it's up to you! Use the Agent's code to help you explore this world.",
    "authored_hints": {
      "MC_HOC_2017_13_Cole_a": "Try having the Agent build some minecart tracks so you can explore the world!"
    },
    "function_definitions": {
      "function 1": {
        "name": "function 1"
      },
      "function 2": {
        "name": "function 2"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/25/levels/3": {
    "long_instructions": "Get to the Sea Lantern."
  },
  "https://studio.code.org/s/allthethings/lessons/26/levels/1": {
    "dsls": {
      "title": "Test Assessment 1"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/27/levels/1": {
    "long_instructions": "In this module, you learned about how information gets shuttled from place-to-place on the internet, and the major steps along the way.  **Write a lesson plan for your students about how packets are constructed.**\n\n### How this task is reviewed\n\nThis task is peer-reviewed by 2 peers, using the following rubric:\n\n-   Lesson includes lecture\n-   Lesson includes activity on network simulator",
    "title": "Submit a Lesson Plan: Routing and Packets"
  },
  "https://studio.code.org/s/allthethings/lessons/28/levels/1": {
    "dsls": {
      "title": "Sample CSP Assessment"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/1": {
    "short_instructions": "Guide me to the green evilness! (Watch out for TNT)"
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/2": {
    "short_instructions": "Guide me to the green evilness! (Watch out for TNT)"
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/3": {
    "short_instructions": "Keep calm and help me find the bad pig. Otherwise I might get angry!",
    "authored_hints": {
      "2-3_Maze_6_a": "There are two ways to solve this puzzle!"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/5": {
    "short_instructions": "Now use a repeat block to make the cell a shell.",
    "long_instructions": "Now use a repeat block to make the cell a shell.",
    "function_definitions": {
      "draw 3 hexagons": {
        "name": "draw 3 hexagons"
      },
      "draw 4 hexagons": {
        "name": "draw 4 hexagons"
      },
      "draw 5 hexagons": {
        "name": "draw 5 hexagons"
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/6": {
    "short_instructions": "Want to see what happens when we repeat that shape over and over again using a loop?"
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/7": {
    "short_instructions": "Dear person. Me zombie. Must... get... to sunflower."
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/8": {
    "short_instructions": "Get the zombie to the sunflower, but avoid the chomper!"
  },
  "https://studio.code.org/s/allthethings/lessons/29/levels/9": {
    "short_instructions": "Must... get... to sunflower."
  },
  "https://studio.code.org/s/allthethings/lockable/1/levels/1": {
    "dsls": {
      "title": "Pre-survey"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/32/levels/1": {
    "long_instructions": "Make an awesome web page!\n\n1.  Look at the web page we gave you to start with. Look how lame it is. 1996 just called and wants its web page back. But don't get depressed - YOU can fix it!\n2.  Add a background-color attribute in the body style in style.css to make the page background color 'darkcyan'\n3.  Add a text-align attribute to the body style in style.css to center the image and text horizontally\n4.  Change index.html to include an inspiring hashtag\n5.  Add a color attribute to the p style in style.css to make the inspiring hashtag white\n6.  Add a font-size attribute to the p style in style.css to make your inspiring hashtag REALLY BIG! (Try 24px and 3em and see what happens.)"
  },
  "https://studio.code.org/s/allthethings/lessons/36/levels/1": {
    "long_instructions": "All-the-things test level.",
    "behavior_names": {
      "swimming left and right": "swimming left and right",
      "shrinking": "shrinking",
      "patrolling": "patrolling",
      "wandering": "wandering",
      "growing": "growing",
      "jittering": "jittering",
      "moving east": "moving east",
      "moving north": "moving north",
      "moving south": "moving south",
      "moving west": "moving west",
      "spinning right": "spinning right"
    },
    "behavior_descriptions": {
      "Moves back and forth in one direction. To change the direction a sprite is patrolling, change its \"movement direction\"": "Moves back and forth in one direction. To change the direction a sprite is patrolling, change its \"movement direction\""
    }
  },
  "https://studio.code.org/s/allthethings/lessons/36/levels/2": {
    "short_instructions": "Change the tumbleweed into any kind of fish!",
    "long_instructions": "Let's make a fish tank!  \n\nChange the tumbleweed sprite into any kind of fish by clicking [blockly block][0].\n\nBe sure to also update this sprite's costume in [blockly block][1].",
    "teacher_markdown": "This lesson contains a **mini-project** called _Swimming Fish_. This progression may feel very different from what has come earlier in the course for you as well as your students. These levels have some new characteristics you may want to explore before starting. \n\n-   The code your students write in one level will automatically transfer over to the other levels. This allows them to build gradually and iterate on their ideas as they learn.\n-   These levels allow for more open-ended creativity. Empower your students to determine for themselves when they have completed each task. There is no one right answer! \n-   Example solutions are available for this step of the progression which can be viewed by opening the teacher panel to the right.\n\nThis level will validate a student’s code by checking that the following conditions have been met:\n\n-   Student must have at least one fish sprite with an active behavior.",
    "behavior_names": {
      "swimming left and right": "swimming left and right",
      "shrinking": "shrinking",
      "patrolling": "patrolling",
      "wandering": "wandering",
      "growing": "growing",
      "jittering": "jittering",
      "moving east": "moving east",
      "moving north": "moving north",
      "moving south": "moving south",
      "moving west": "moving west",
      "spinning right": "spinning right"
    },
    "behavior_descriptions": {
      "Moves back and forth in one direction. To change the direction a sprite is patrolling, change its \"movement direction\"": "Moves back and forth in one direction. To change the direction a sprite is patrolling, change its \"movement direction\""
    }
  },
  "https://studio.code.org/s/allthethings/lessons/37/levels/1": {
    "long_instructions": "Let's get this moose dancing! Click the `\"dancer1\" do \"Floss\" forever` block onto the \"at 4 measures\" block to make him start flossing at the second measure."
  },
  "https://studio.code.org/s/allthethings/lessons/37/levels/2": {
    "long_instructions": "Let's get this moose dancing! Click the `\"dancer1\" do \"Floss\" forever` block onto the \"at 4 measures\" block to make him start flossing at the second measure."
  },
  "https://studio.code.org/s/allthethings/lessons/38/levels/1": {
    "long_instructions": "This level has a mini rubric associated with it that teachers should be able to give students feedback on. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/38/levels/2": {
    "long_instructions": "This level has a mini rubric associated with it that teachers should be able to give students feedback on. Please sign in to test weblab levels (By design, weblab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/38/levels/3": {
    "long_instructions": "Run\nThis level has a mini rubric associated with it that teachers should be able to give students feedback on. Please sign in to test gamelab levels (By design, gamelab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script)."
  },
  "https://studio.code.org/s/allthethings/lessons/39/levels/1": {
    "dsls": {
      "content1": "description here",
      "markdown": "<h2>\nThis external level should display as unplugged.\n</h2>\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/39/levels/2": {
    "dsls": {
      "content1": "description here",
      "markdown": "<h2>\nThis external level should not be displayed as unplugged.\n</h2>\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/40/levels/1": {
    "dsls": {
      "description": "This is a BubbleChoice level. Choose one of the activities below to practice what you have learned!",
      "display_name": "Bubble Choice: All the Choices"
    },
    "sublevels": {
      "AllTheThings_StandaloneVideo": {
      },
      "Web Lab 1": {
        "long_instructions": "Make an awesome web page!\r\n\r\n1. Look at the web page we gave you to start with. Look how lame it is. 1996 just called and wants its web page back. But don't get depressed - YOU can fix it!\r\n2. Add a background-color attribute in the body style in style.css to make the page background color 'darkcyan'\r\n3. Add a text-align attribute to the body style in style.css to center the image and text horizontally\r\n4. Change index.html to include an inspiring hashtag\r\n5. Add a color attribute to the p style in style.css to make the inspiring hashtag white\r\n6. Add a font-size attribute to the p style in style.css to make your inspiring hashtag REALLY BIG! (Try 24px and 3em and see what happens.)"
      },
      "Overworld Chop Tree - allthethings": {
        "short_instructions": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the “destroy block” command to chop it down."
      }
    }
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/1": {
    "teacher_markdown": "Teacher markdown for the original level.",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "/script_assets/k_1_images/unplugged_images/up.png",
              "correct": false
            },
            {
              "text": "/script_assets/k_1_images/unplugged_images/down.png",
              "correct": true
            },
            {
              "text": "/script_assets/k_1_images/unplugged_images/left.png",
              "correct": false
            },
            {
              "text": "/script_assets/k_1_images/unplugged_images/right.png",
              "correct": false
            }
          ],
          "content1": "/script_assets/k_1_images/unplugged_images/happy_maps_1q.png",
          "questions": [
            {
              "text": "Which arrow gets the Flurb to the treasure?"
            }
          ],
          "title": "Multiple Choice"
        }
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/2": {
    "teacher_markdown": "Teacher markdown for the original level",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "0",
              "correct": false,
              "feedback": "No, that is 1 - 1."
            },
            {
              "text": "1",
              "correct": false,
              "feedback": "No, that is 1 * 1."
            },
            {
              "text": "2",
              "correct": true,
              "feedback": "Yes, you are a genius!"
            },
            {
              "text": "4",
              "correct": false,
              "feedback": "No, that is not even close."
            }
          ],
          "content1": "Here is some information.",
          "markdown": "Test **markdown** _here_\n",
          "questions": [
            {
              "text": "What is 1 + 1?"
            }
          ],
          "title": "Contained Multi"
        }
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/3": {
    "short_instructions": "Here are some instructions. ",
    "teacher_markdown": "Teacher Markdown for the original level",
    "contained levels": [
      {
        "long_instructions": "What do _you_ think will happen? "
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/4": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "Line 2",
              "correct": true
            },
            {
              "text": "Line 3",
              "correct": true
            },
            {
              "text": "Line 4",
              "correct": false
            },
            {
              "text": "Line 5",
              "correct": false
            }
          ],
          "markdown": "This question uses a robot in a grid of squares. The robot is represented as a triangle, which is initially facing toward the right side of the grid. The robot is moved according to the following instructions.\n\n\n| Instruction       | Explanation |\n|--------------------|--------|\n|`Move Forward` | The robot moves one square forward in the direction it is facing |\n|`Rotate right` | The robot rotates in place 90 degrees clockwise (i.e., makes an in-place right turn). |\n|`Rotate left` | The robot rotates in place 90 degrees counter-clockwise (i.e., makes an in-place left turn). |\n|`REPEAT n TIMES` | The block of instructions contained between the braces {} is repeated n times. |\n\n  \n  \nConsider the following incorrect program, which is intended to move the robot around the perimeter of the grid below, as indicated by the arrows.\n\n![](https://images.code.org/4d3177070d1585fc6ad3f9091dd53d76-image-1579897739915.png)\n\n![](/script_assets/csp/instruction_gifs/U3L02-rightSquare.png)\n\n",
          "questions": [
            {
              "text": "Which lines of code should be removed so the program will work as intended? Select <u>two</u> answers"
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/5": {
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "Line 2",
              "correct": true
            },
            {
              "text": "Line 3",
              "correct": true
            },
            {
              "text": "Line 4",
              "correct": false
            },
            {
              "text": "Line 5",
              "correct": false
            }
          ],
          "markdown": "\n\nConsider the following incorrect program, which is intended to move the robot around the perimeter of the grid below, as indicated by the arrows.\n\n```\nLine 1: REPEAT 4 TIMES\n        {\nLine 2:    Move Forward\nLine 3:    Rotate Right\nLine 4:    REPEAT 4 TIMES\n           {\nLine 5:        Move Forward\n           }\nLine 6:    Rotate Right\n        }\n```\n![](/script_assets/csp/instruction_gifs/U3L02-rightSquare.png)\n",
          "questions": [
            {
              "text": "Which lines of code should be removed so the program will work as intended? Select **two** answers"
            }
          ]
        }
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/6": {
    "teacher_markdown": "Original Level Teacher Markdown",
    "contained levels": [
      {
        "long_instructions": "My free response markdown instructions"
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/7": {
    "teacher_markdown": "Teacher markdown for the original level",
    "contained levels": [
      {
        "dsls": {
          "answers": [
            {
              "text": "0",
              "correct": false,
              "feedback": "No, that is 1 - 1."
            },
            {
              "text": "1",
              "correct": false,
              "feedback": "No, that is 1 * 1."
            },
            {
              "text": "2",
              "correct": true,
              "feedback": "Yes, you are a genius!"
            },
            {
              "text": "4",
              "correct": false,
              "feedback": "No, that is not even close."
            }
          ],
          "content1": "Here is some information.",
          "markdown": "Test **markdown** _here_\n",
          "questions": [
            {
              "text": "What is 1 + 1?"
            }
          ],
          "title": "Contained Multi"
        }
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/41/levels/8": {
    "dsls": {
      "markdown": "# The Future of Big Data\n\n[![](https://images.code.org/ff14c09d2036ff65be8af3dd63d2da24-image-1571251950161.52.16 AM.png)](https://www.youtube.com/watch?v=l_a0ecZ2Oe0)\n\n[Source](http://www.fwthinking.com/video/clips/future-big-data-video/)\n\n\n\n\n"
    }
  },
  "https://studio.code.org/s/allthethings/lessons/43/levels/1": {
    "short_instructions": "Here are some short instructions for this test AI Lab level."
  },
  "https://studio.code.org/s/allthethings/lessons/43/levels/2": {
    "short_instructions": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
    "long_instructions": "This is an AI enabled level, which means 1.) There is an additional option \"Manage A.I. Models\" in the settings cog 2.) There is a getPrediction block in the Data section of the toolbox"
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/1": {
    "long_instructions": "This is a sample Java Lab level.",
    "teacher_markdown": "Teachers should see this extra info."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/2": {
    "long_instructions": "## Console-only level\n\nA console-only level should have no visualization space (unlike Theater, Neighborhood, etc). Additionally, the instruction space should take up the entire left column.\n\nA console-only level will always have instructions. Java Lab standalone levels will be Theater levels."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/3": {
    "long_instructions": "This is a sample Java Lab Neighborhood level.",
    "teacher_markdown": "Teachers should see this extra info."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/4": {
    "long_instructions": "## Welcome to the Theater!\n\nHead over to the asset manager and upload an image of yourself. Your picture from the <https://code.org/about/team> page would be a great option!\n\n[][0]\n\nOnce you've finished uploading your image, take a look at the code and replace the sample text with your image name.\n\n[][1]\n\nThat's it! Turn your volume up, click \"Run\" and watch (and hear) your creation come to life!",
    "teacher_markdown": "Teachers should see this extra info."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/5": {
    "display_name": "Word Search",
    "long_instructions": "# The Neighborhood Set-Up Widget\n\nThis widget creates a JSON string that can be copied to a level to display a specific layout of The Neighborhood.\n\n1.  Use the slider to select the size of the Neighborhood. \n2.  Click on a tile to select it. \n3.  Choose a category from the dropdown, and click on a tile to set the image to the selected tile. \n\nMany images are bigger than 1x1. In these cases, you will need to select each individual tile and place them one by one.\n\nThe final step is to copy the output and paste it in the appropriate field in a level on Levelbuilder.\n\n## Edit an existing level\n\n1.  Copy the JSON string from the field in levelbuilder\n2.  Paste the data in a one-line converter like [this one][0]. \n3.  Copy the string from the converter.\n4.  Click the \"Manual\" button. \n5.  Paste in the String.\n6.  Click each tile to edit as normal. "
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/6": {
    "long_instructions": "This is a sample Java Lab level.",
    "teacher_markdown": "Teachers should see this extra info.",
    "contained levels": [
      {
        "long_instructions": "My free response markdown instructions"
      }
    ]
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/7": {
    "long_instructions": "This is a sample Java Lab Neighborhood level.",
    "teacher_markdown": "Teachers should see this extra info."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/9": {
    "long_instructions": "This is a sample Playground level that demonstrates the basics of the mini-app by making a slide puzzle game!\n\n**Note**: you'll need to change the value of the boolean `shuffleTiles` in the `Game.java` file to `true` if you want to play."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/10": {
    "long_instructions": "This is a sample Java Lab level.",
    "teacher_markdown": "Teachers should see this extra info."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/11": {
    "long_instructions": "## Sample Prompter Level\n\nThis level shows an example of the prompter in the theater."
  },
  "https://studio.code.org/s/allthethings/lessons/44/levels/12": {
    "long_instructions": "This is a sample Java Lab level with validation tests."
  }
}