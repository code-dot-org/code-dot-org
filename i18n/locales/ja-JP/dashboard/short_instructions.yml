ja:
  data:
    short_instructions:
      2-3 Artist 1 new: こんにちは、私は芸術家です。プログラムで私にどんな線でも描かせることができます。いくつかのブロックを使用して、写真に灰色の線を引きます。(各ラインの長さは 100 ピクセル)
      2-3 Artist 11: "8 辺、それぞれ 100 ピクセルの長さを持つ八角形を作って一時停止の標識に境界線を加えます。\n何度回す必要がありますか？(ヒント: 360 を 8 で割ると何ですか?)"
      2-3 Artist 12: |-
        目玉をかき上げるために円を作ろう。\r
        \r
        「くり返す」ブロックの中で絵かきさんが1度づつまがるとすれば、ひとつの円をかくためにはそのこーどを何回くり返せばいいでしょうか? 180回? 360回? 500回?
      2-3 Artist 2 new: 'この家の壁は、まだ未完成です。それぞれの面は100必要ですが、50しか終わっていないのです。壁を完成させてください。 '
      2-3 Artist 2: 'この家の壁は、まだ未完成です。それぞれの面は100必要ですが、50しか終わっていないのです。壁を完成させてください。 '
      2-3 Artist 3.4: "ジャンプのブロックを使うと、線をかかずに絵かきさんを動かします。\n「ジャンプ」と「前へ動く」の両方のブロックを使って、点線をかいてみましょう。"
      2-3 Artist 3: この帽子の高さは100ピクセルあり、少し大きすぎます。70ピクセル以下の帽子を描いてください。
      2-3 Artist 3new: "赤いぼうしの高さは100ピクセルです。赤より70ピクセルひくい黒のぼうしをかき上げてください。\\r\n(どちらのぼうしも50ピクセルのはばです。)"
      2-3 Artist 4: この猫のために、家を完成させましょう。
      2-3 Artist 5: '「繰り返し…回」のブロックを使って、ブロック3つだけで同じ家を描いてください。'
      2-3 Artist 6: 'この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。'
      2-3 Artist 7: '子どもたちみんなを外を見ることができるように、学校のまどをぜんぶかき上げてください。それぞれの正方形のまどの辺の長さは25ピクセルです。 '
      2-3 Artist 8: それぞれの動物のために、長方形を2つの同じサイズの四角形に分けて、部屋を完成させてください。長方形の幅は200ピクセルで、高さは100ピクセルです。
      2-3 Artist 9 NEW: この凧（たこ）を完成させてください
      2-3 Artist 9 REPLACEMENT: これらの階段を書き終えてください！
      2-3 Artist 9: この凧（たこ）を完成させてください
      2-3 Artist Assessment 1: '課題: 最後の歯をかき上げてください。歯の大きさはよこ25ピクセル、たて25ピクセルです。'
      2-3 Artist Debugging 1: 帽子のてっぺんのはばを50にしたいのです。直せますか?
      2-3 Artist Debugging 10: "ゲームコントローラの十字キーが細すぎるみたい。\\r\n\\r\nはばをあと10ピクセル広げてください。"
      2-3 Artist Debugging 11: |-
        綺麗な雪結晶を完成させたいんだ。リピートを何回使う必要があるだろう？
      2-3 Artist Debugging 12: このシーンに波を足さなくちゃいけないんだ。助けてくれるかい？
      2-3 Artist Debugging 2: "このねこのヒゲのコードはまちがっています。\n\\r\n\\r\nぜんぶのヒゲを同じ長さにかくように、コードを直してください。"
      2-3 Artist Debugging 3: "ボートに穴が空いちゃった！線を書いて直してくれないかな？ヒント：最後の線が進む角度は15度調整するといいよ"
      2-3 Artist Debugging 4: 何を描こうとしているのかな？きちんとした線と角で、点と点をつなげてみよう！
      2-3 Artist Debugging 5: "このコードで脚と足を描くのだけれど、間違っています。ヒント: 足が長すぎるね。ブロックを取り去る必要があるのかも。"
      2-3 Artist Debugging 6: |-
        脚のない椅子に座っているように見えますね。ブロックを編集して脚を描きましょう。
      2-3 Artist Debugging 7: |-
        C のコードが逆さまに描かれているようですね。C に見えるように直せますか？
      2-3 Artist Debugging 8: |-
        風車が途中までしか描けていませんね。最後まで描き切るには何回繰り返さなければならないでしょうか。
      2-3 Artist Debugging 9: |-
        このコードで柄を描いていますが、正しくありません。ヒント: 角度が 60 度ずれているよ。
      2-3 Artist Debugging Assessment 1: "この形は小さすぎます。もっと大きくしましょう。ヒント：それぞれの辺を75ピクセル伸ばしてみましょう。"
      2-3 Artist Free Play: やった！自由に遊ぼう！なんでも好きなものを描いてね。
      2-3 Artist Functions 1 a: "こんにちは！ゾンビアーティストです。お絵かき大好き！\n四角いメガネを描くので手伝ってください。ヒント：メガネのつなぎ部分は、レンズの四角より25ピクセル短く描きましょう。"
      2-3 Artist Functions 1: "こんにちは！ゾンビアーティストです。お絵かき大好き！\n四角いメガネを描くので手伝ってください。ヒント：メガネのつなぎ部分は、レンズの四角より25ピクセル短く描きましょう。"
      2-3 Artist Functions 10: 'ここに 2 つの関数があります。ひとつは大きな歯車を描く big gear という関数、もうひとつは小さな歯車を描く small gear という関数です。これらを使って、機械の内側を描いてみましょう。'
      2-3 Artist Functions 11 a: "\"draw a square\" という関数の名前を \"draw a hexagon\" に変えました。hexagon は六角形という意味ですが、この関数が描くのは正方形のままです。\"draw a hexagon\" という関数を一辺が 50 ピクセルの六角形を描くように直して、その関数を使って絵を描いてください。"
      2-3 Artist Functions 11.5 a: "さっきと同じ \"draw a hexagon\" という関数です。もしループの中で 60 度しか回転しなかったら何が起こるでしょうか。"
      2-3 Artist Functions 11.5: "さっきと同じ \"draw a hexagon\" という関数です。もしループの中で 60 度しか回転しなかったら何が起こるでしょうか。"
      2-3 Artist Functions 11: "\"draw a square\" という関数の名前を \"draw a hexagon\" に変えました。hexagon は六角形という意味ですが、この関数が描くのは正方形のままです。\"draw a hexagon\" という関数を一辺が 50 ピクセルの六角形を描くように直して、その関数を使って絵を描いてください。"
      2-3 Artist Functions 12 Mike: "関数は、複雑なものを何回も描くのにうってつけです。\"draw a flower\" という関数を使って、花壇の残りの花を描いてください。（ヒント：植物は 100 ビクセルずつ離れています）"
      2-3 Artist Functions 12 a: "関数は、複雑なものを何回も描くのにうってつけです。\"draw a flower\" という関数を使って、花壇の残りの花を描いてください。（ヒント：植物は 100 ビクセルずつ離れています）"
      2-3 Artist Functions 12: "関数は、複雑なものを何回も描くのにうってつけです。\"draw a flower\" という関数を使って、花壇の残りの花を描いてください。（ヒント：植物は 100 ビクセルずつ離れています）"
      2-3 Artist Functions 13: ここに関数が 4 つあります。この関数をループと一緒に使って、友だちとシェアするための絵を作りましょう。[実行] をクリックすると例を見ることができます。
      2-3 Artist Functions 2: "関数を使えば新しいブロックを作ることができます！ここでは、正方形を描くためのブロックを \"draw a square\" という名前の関数の中に移動しました。\"draw a square\" を使って、メガネを作ってみましょう。正方形と正方形の間は 75 ピクセル空いています。"
      2-3 Artist Functions 3: "正方形の一辺の長さが 115 ピクセルになるように関数の中身を変えて、もっと大きなメガネを描いてください。今回は、正方形と正方形の間は 45 ピクセルです。"
      2-3 Artist Functions 4: この 3 つの正方形を「繰り返し」のブロックを使って描いてみましょう。
      2-3 Artist Functions 7: '"draw a house" という関数を使って、家を 2 つ描いてください。別々のパラメータを使いましょう。（ヒント: ひとつ目の家は 100 ピクセルです。）'
      2-3 Artist Functions 9: '雪の絵を描く関数があります。いろいろ試して冬の景色を描いてみましょう！このレベルにはパズルはありません。'
      2-3 Artist Loops 1: 各辺が 100 ピクセルの六角形を描いてセルを完成させましょう。向きを帰るときは、60 度だけ回転させれば大丈夫ですよ！
      2-3 Artist Loops 10: 最後のステップで前に進む距離を半分にするとデザインはどうなるでしょう？
      2-3 Artist Loops 11: 今作ったものの全体を *別の* ループの中に入れましょう。外側のループの最後のところで、角度を変えるブロックを忘れずに足すようにしましょう。
      2-3 Artist Loops 2: 繰り返しブロックを使って、細胞に殻をつくってあげよう。
      2-3 Artist Loops 4: ループを使ってこの形をくり返すと、何が起こるのかみてみないかい？
      2-3 Artist Loops 5: ループを少し変更して、どう写真が変わるのかを試してみよう。
      2-3 Artist Loops 6: ループの内側に、移動するブロックと回転するブロックをひとつずつ足して、デザインがどのように変わるか見てみましょう。
      2-3 Artist Loops 7: ループを使うことでどんな多角形でも作れるんだ。この六角形のなかにひし形を作ってみて！
      2-3 Artist Loops 8: ループのなかに両方とも入れてみよう。
      2-3 Artist Loops 9: |-
        ループを使って同じものをたくさん描くのですが、隣同士の間隔をあけたいと思います。\r
        前と同じコードを使いつつ、外側のループの最後に前進するためのステップを足してください。
      2-3 Artist Loops New 1: ロボットの頭を描きましょう! 100ピクセルの正方形を作れますか?
      2-3 Artist Loops New 10: たくさんの V をひとつにつなぎましょう。V 自体はループの中で描きましょう。
      2-3 Artist Loops New 11: 今度は 24 回描きましょう。30 度左に回転するブロックをこのコードに追加して、全体を繰り返しのブロックの中に入れましょう。
      2-3 Artist Loops New 12: "各辺 100 ピクセルのダイヤモンドを描きましょう。\n"
      2-3 Artist Loops New 13: "今度はループを使って、ダイヤモンドを 3 回描きましょう。"
      2-3 Artist Loops New 14: では、ダイヤモンドを10回描いてみましょう。ただし、各ダイヤモンドを90度ずつ回転させてください。
      2-3 Artist Loops New 15: なにかおもしろいものをえがきましょう。
      2-3 Artist Loops New 2: |-
        正方形を描くために使ったコードがここにあります。もし、繰り返しのブロックを使って、このコードを 4 回実行すると何が起きるでしょうか。
      2-3 Artist Loops New 9: それぞれの辺が50ピクセルのシンプルな「V」の文字を描き、矢印を完成させましょう。
      2-3 Artist Match Hex Pic: '選ぼう: 六角形を完成させましょう'
      2-3 Artist Match Rho Pic: '選ぼう: コードの足りない部分を完成させましょう。'
      2-3 Artist Match Sq Pic: '選ぼう: コードの足りない部分を補いましょう。'
      2-3 Artist Match Tri pic: '選ぼう: コードの足りない部分を埋めましょう。'
      2-3 Artist Nested Loops 1: 前にループを使って図形を書きましたが、ループを別のループの中で使うこともできます。\rループを使ってコード全体を3回繰り返してパターンを書きましょう。
      2-3 Artist Nested Loops 10: パターンを完成させるためにコードを12回繰り返しましょう。
      2-3 Artist Nested Loops 11: このコードを4回ループして絵を完成させましょう。円を描くごとに90度回転してください。
      2-3 Artist Nested Loops 12: このコードを12回ループしてうずまきを完成させましょう。
      2-3 Artist Nested Loops 2: "三角形を6回繰り返しましょう。それぞれの三角形を描くごとに、60度角度を変える必要があります。"
      2-3 Artist Nested Loops 3: "この絵を描くには三角形を12回ループする必要があります。一周分の角度（360）を三角形の数（12）で割れば、三角形を1つ描くごとに何度回転するかがわかります。"
      2-3 Artist Nested Loops 4: "このひし形を 12 回ループして花を描いてみましょう。ヒント：12 個のひし形は、12 個の三角形を描いた時と同じ方法で描けるよ。各図形の後は何度ずつ向きを変える必要があるかな？"
      2-3 Artist Nested Loops 5: "このビルの窓を入れ子のループを使って完成させましょう。窓は一辺の長さが20ピクセルで、間隔も20ピクセルです。"
      2-3 Artist Nested Loops 6: |-
        恐竜のしっぽには、30 ピクセルのスパイクが 8 つあります。三角形を 8 回ループしましょう。各ループの間で前に進むことを忘れずに。
      2-3 Artist Nested Loops 7: "三角形を10回ループして太陽を描きましょう。三角形を1つ描くごとに移動して回転する必要があります。一周分の角度を三角形の個数で割ると、何度回転すればいいかがわかります。"
      2-3 Artist Nested Loops 8: "絵に草を足してみましょう。\n草を50ピクセルずつ離して描いてください。"
      2-3 Artist Nested Loops 9: "最後に花を描いて完成です。ダイヤモンドを12回繰り返すと花が描けます。"
      2-3 Artist Nested Loops Free Play: 自由に遊んでください。入れ子のループを使って好きなものを描こう。
      2-3 Bee Conditionals 1: こんにちは！ハチです。お花からミツを集めるのをてつだってください。
      2-3 Bee Conditionals 10: "紫色の花の蜜は、1 か 0 です。蜜のない紫色の花から蜜を集めないように気をつけてください。\\r\n"
      2-3 Bee Conditionals 11: "にわをとび回って、ミツのある花からミツを集めましょう。 "
      2-3 Bee Conditionals 12: つかうブロックはなるべく少なくして、ぜんぶのミツをとるのを手つだってください。
      2-3 Bee Conditionals 13: |-
        すべてのミツを集めて、ハチミツを作ってください。ムラサキ色の花には、ミツがあるか、わかりませんよ。
      2-3 Bee Conditionals 14: |-
        できるだけ少ないブロック数で、すべてのミツを集めて、はちみつを作ってください。ミツがない花から、ミツはとれませんよ。
      2-3 Bee Conditionals 15: "4つ全部の花からミツを集めてください。"
      2-3 Bee Conditionals 2: "こんにちは！ハチです。なるべく少ないブロックで、すべての花のミツをとって、集めたいです。"
      2-3 Bee Conditionals 3: "花のミツを全部あつめて、ハチミツを作ってください。なるべく少ないブロックをつかってね。  "
      2-3 Bee Conditionals 4: 花の蜜を全部集めてはちみつ作りに手伝って。
      2-3 Bee Conditionals 5: "ムラサキ色の花にはミツが、あるのか、ないのか、わかりません。さいしょに「花のミツ」が 1 かどうか「もし」ブロックを使ってかくにんし、ミツがあったら、とってください。"
      2-3 Bee Conditionals 6: '「もし」ブロックを使って、花にミツがあるか、チェックしてから、ミツを集めて下さい。'
      2-3 Bee Conditionals 7: それぞれの花にミツがあれば、集めてください。
      2-3 Bee Conditionals 8: "この草原には赤色とムラサキ色のお花があります。\n赤い花のミツの数は分かっていますが、ムラサキ色の花のミツの数は分かりません。\nすべてのミツを集めてください。"
      2-3 Bee Conditionals 9: それぞれの花から、すべてのミツをあつめて下さい。
      2-3 Bee Conditionals Assessment 1: 'すべてのミツを集めて下さい。ミツがないときは、ミツをとらないように気をつけましょう。'
      2-3 Bee Debugging 1: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 10: "このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。"
      2-3 Bee Debugging 2: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 3: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 4: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 5: "このブロックがとても邪魔。エラーを取り除いてすべての蜜を集めて蜂蜜を作ってください。実行とステップを使えます。"
      2-3 Bee Debugging 6: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 7: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 8: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging 9: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      2-3 Bee Debugging Assessment 1: |-
        課題：このブロックが気になります。エラーを修正して、蜜を全部とってはちみつを作りましょう。
      2-3 Bee Functions 1: ひとつの作業を行うひとまとまりのコードを関数といいます。"get 2 nectar"（蜜を 2 とる）という関数を使って、それぞれの花から蜜を集めてください。
      2-3 Bee Functions 10: "紫の花には、蜜が 1 か 0 あります。蜜のある紫の花からのみ蜜を集めるため関数を作りましょう。"
      2-3 Bee Functions 2: "ひとつの作業を行うひとまとまりのコードを関数といいます。\"get 5\" という関数を使うと、一度に蜜を 5 とることができます。ループを使って、ブロックの数がなるべく少なくしてください。"
      2-3 Bee Functions 3: それぞれの花から、すべてのミツをあつめて下さい。
      2-3 Bee Functions 4: "「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。"
      2-3 Bee Functions 5: ひとつの花にある蜜の量が増えました。今度は蜜を 4 つ取れるように関数を修正しましょう。
      2-3 Bee Functions 6: 同じ関数を使って 3 つの花から蜜を集めましょう。
      2-3 Bee Functions 7: 花と花の距離が広まりました。関数を修正して、花から蜜を集めましょう。
      2-3 Bee Functions 8: 蜜を 7 つ集め、前に進み、はちみつを 7 つ作るための関数を作りましょう。関数を使って、花で蜜を集め、蜂の巣ではちみつを作りましょう。
      2-3 Bee Functions 9: 道を進み、蜜を集め、はちみつを作り、スタート地点にハチを戻す関数を作りましょう。
      2-3 Bee Functions Assessment 1: '課題：指定の関数を使って花から蜜を集めましょう。'
      2-3 Bee Functions Assessment 2: '課題：蜜を3つずつ集めるための関数を作りましょう。'
      2-3 Bee Loops 1: |-
        花には蜜が 1 ユニットずつあります。蜜を花から集めましょう。 
      2-3 Bee Loops 10: '「以下の間」ループを違う 2 つのループの中で使うことで蜜を全部集められるかな？'
      2-3 Bee Loops 11: '「以下の間」ループを使って花の蜜を集めましょう。'
      2-3 Bee Loops 12: '「以下の間」ループを使って花の蜜を集めましょう。'
      2-3 Bee Loops 13: '課題：「繰り返す」ブロックを使って蜜を全部集めましょう。'
      2-3 Bee Loops 1A: 'こんにちは、ハチです！花から蜜を集めるのを手伝ってください。 '
      2-3 Bee Loops 2: ループを使ってはちみつを作るための蜜を集めましょう。
      2-3 Bee Loops 2A: ループを使えば同じ作業をもっと簡単に行えるかな？
      2-3 Bee Loops 3: それぞれのお花から蜜を集めて、蜂の巣ではちみつを作りましょう。
      2-3 Bee Loops 3A: 全てのはなのみつを集めるのに繰り返しブロックを使ってみましょう。
      2-3 Bee Loops 3B: 今度は新しい繰り返しブロックを利用して、全てのはなのみつを集めてはちみつを作ってみましょう。
      2-3 Bee Loops 4: |-
        先ほどのパズルと同じように繰り返しブロックを使いますが、今度は曲がるブロックも利用してみましょう。
      2-3 Bee Loops 4A: "このブロックの組み合せを３回繰り返したらどうなるでしょうか？\n最後にはちみつを作るのを忘れないでね。"
      2-3 Bee Loops 5: "繰り返しブロックを使って階段を降り、はなのみつを集めましょう。"
      2-3 Bee Loops 6: 繰り返しブロックを使ってそれぞれのお花からみつを集め、蜂の巣ではちみつをつくりましょう。
      2-3 Bee Loops 7: これからのブロックを繰り返しブロックに入れて、それぞれのお花からみつを集めましょう。
      2-3 Bee Loops 8: "紫のお花のみつの量はわかりません。\n以下の間ブロックを使って全てのはなのみつを集めましょう。　この繰り返しは条件が真になるまで続きます。この場合ははなのみつ＞0です。"
      2-3 Bee Loops 9: 以下の間のブロックを繰り返すと、もしかしたらのブロックを繰り返すのと同様のうごきを作ります。　以下の間のブロックを使って、同じ動きになるようにしてみましょう。
      2-3 Bee Loops Assessment 1: '課題 - 以下の間のブロックを使ってこのお花からすべてのみつを集めましょう。'
      2-3 Maze 1: 'いじわるなぶたを捕まえるのを手伝ってくれる? 「前に進む」をふたつ一緒に重ねて「実行」を押してみましょう。 '
      2-3 Maze 10: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze 11: お腹がすいたよ、お花を取って！ひとつのブロックを何度繰り返し利用すればいいでしょうか？
      2-3 Maze 12 (copy 1): 'ブロックを2つだけ使うように先ほどの答えを書きかえられますか？ (ヒント: 「繰り返す」ブロックを使ってループを作ってみましょう。)'
      2-3 Maze 12 (copy 2): 'ブロックを2つだけ使うように先ほどの答えを書きかえられますか？ (ヒント: 「繰り返す」ブロックを使ってループを作ってみましょう。)'
      2-3 Maze 12 (old): ぶたを捕まえて、今度は〜回繰り返すブロック！
      2-3 Maze 12 - One Move Block: ブタのところに行ってください！しかし今回は、「まえにすすむ」ブロックを１つしか使えません。あなたを助ける、他のブロックがわかりますか？
      2-3 Maze 12: この５つのブロックの動きを２つのブロックで置き換えられる？ (ヒント：「〜回繰り返す」ブロックを使って繰り返しの作業を作りましょう)
      2-3 Maze 13 (old): 今度は「繰り返す」ブロックを使って、ブタのところまで行ってみよう。
      2-3 Maze 13: ブロックを2つだけ使ってブタを捕まえよう。
      2-3 Maze 14 (old): '「繰り返す」ブロックを使って、ブタのところまで行こう。'
      2-3 Maze 14: ひまわりまで連れてって！ (「繰り返す」ブロックはどこかな)
      2-3 Maze 15 (old): '「繰り返す」ブロックを使って、ブタのところまで行こう。'
      2-3 Maze 15: ループを2つ使って少ない数のブロックでブタを捕まえてみよう。
      2-3 Maze 16 (old): '「繰り返す」ブロックを使って、ブタのところまで行こう。'
      2-3 Maze 16 before: ブタを捕まえよう。
      2-3 Maze 16: ひまわりまで連れて行って。ブロックの組み合わせをループさせよう。
      2-3 Maze 2: このブタにはイライラさせられるワ。彼を捕まえるのを手伝って！
      2-3 Maze 3: "道をたどってお調子者のブタまで連れて行って。\nでも、TNTの箱には注意してね。羽が飛ばされちゃうよ。"
      2-3 Maze 4: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze 5: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze 6: 落ち着いてブタを一緒に探そう。手伝ってくれなかったら怒るよ！
      2-3 Maze 7: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze 8: ブタを捕まえたい！
      2-3 Maze 9: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze Loops 1: ５つのブロックを使ってわたしをブタの所へ連れて行くことができますか？
      2-3 Maze Loops 17: ひまわりまで行きたい！
      2-3 Maze Loops 18: "ひまわりまで行きたい！"
      2-3 Maze Loops 19: "ひまわりまで行きたい！"
      2-3 Maze Loops 20: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      2-3 Maze Loops 21: ひまわりまで行きたい！
      2-3 Maze Loops Assessment 1: '課題：5ブロックだけ使ってひまわりまで連れていってください。 '
      2-3 Maze sq10: ブタまで連れって。どのブロックが繰り返されているかな？
      2-3 Maze sq10v2: ブタまで連れって。どのブロックが繰り返されているかな？
      2-3 Maze sq2: 足あとをたどってお調子者のブタまで連れて行って。でも、TNTの箱には注意してね。
      2-3 Maze sq3: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      2-3 Maze sq4: 落ち着いてブタを一緒に探そう。手伝ってくれなかったら怒るよ！
      2-3 Maze sq5: ブタを捕まえるには、何回ブロックを繰り返す必要があるかな？
      2-3 Maze sq6: 'ブロックを2つだけ使うように先ほどの答えを書きかえられますか？ (ヒント: 「繰り返す」ブロックを使ってループを作ってみましょう。)'
      2-3 Maze sq7: ブロックを3つだけ使って緑の侵入者を捕まえましょう。
      2-3 Maze sq8: ブタを捕まえたい！ (「繰り返す」ブロックはどこかな)
      2-3 Maze sq9: 少ない数のブロックでブタを捕まえられるようループを作りましょう。
      2-3 maze sq11: ブタまで連れって。どのブロックが繰り返されているかな？
      2-3 maze sq12: '「繰り返す」ブロックを使ってループを作って、先ほどの答えを書き換えられますか？'
      2-3 maze sq13: "こんにちは。ゾンビです。ひまわりに。。。たどり着きたい。。\n「繰り返す」ブロックを使ってループを作ろう。"
      2-3 maze sq14: 4ブロックだけ使ってひまわりにたどり着けますか？
      2-3 maze sq15: 5ブロックだけ使ってひまわりにたどり着けますか？
      2-3 maze sq16: 惜しい！ブロック5つでできるかな？
      2-3level1: トリを前に移動して、お調子者のブタを捕まえるお手伝いをしましょう。
      20hr_farmer_stage9_1: こんにちは、私は農民です。私の畑を平らにするのを助けてください。根付けの準備をします。私を泥山にうごかして「取り除く」ブロックで泥山を取り除いてください
      20hr_farmer_stage9_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったら移動し、穴があったら埋めます。ヒント:"もし"ブロックでオプションのドロップ ダウン メニューを使います'
      20hr_farmer_stage9_2: 次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル分の泥山で一杯にしてください
      20hr_farmer_stage9_3: 私を泥山へ動かしてください、そしてできる限り少ないブロックで、シャベル何杯分で泥山をなくせるかを教えてください
      20hr_farmer_stage9_4: '泥山４つすべてをなくすのを助けてくれませんか？ヒント: できれば繰り返しブロックを使います'
      20hr_farmer_stage9_5: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます'
      20hr_farmer_stage9_6: 可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください
      20hr_farmer_stage9_7: うわー、すごく深い穴を発見 ！何杯分のシャベルの泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？
      20hr_farmer_stage9_8: できる限り少ない数のブロックで、畑のはじの穴を埋めるのを手伝ってください。
      20hr_farmer_stage9_9: 'これらすべての泥山をなくしましょう。できる限り少ない数のブロックを使ってください。ヒント："while"ブロックを使ってみてください'
      20hr_maze_stage2_10: OK。新しい「まで繰り返す(Repeat until)」ブロックを試しましょう。いらいらさせるブタにたどりつくまで繰り返します
      20hr_maze_stage2_11: 最後の問題です。4つのブロックだけを使いパズルを解けますか？
      20hr_maze_stage2_13: OK。似ていますが、ちょっと違います。ブロック5つだけでできますか？
      20hr_maze_stage2_14: '新しい"もし"ブロックを使い、いつ曲がるかを決めてください。ヒント: あともう１つのブロックが必要です、どう設定しているかを学べば、次はひとりでできるようになります'
      20hr_maze_stage2_15: OK。さっきのパズルと同じです、でもどうやって"もし"ブロックと"繰り返し"ブロックを一緒に使ったかをもう一度思い出してみましょう
      20hr_maze_stage2_16: ヒマワリがほしい！"もし"ブロックを使って最小限のブロック数で私をそこまで連れていってください。
      20hr_maze_stage2_17: OK 練習のためにもう一度。 ー　それほど違いはないけれど、 チャンパーたちに気をつけて！
      20hr_maze_stage2_18: '"もし/でなければ"ブロックは条件を確かめて、あること、あるいは別のあることをします。ヒマワリをとってくるためにこの新しいブロックを試しましょう。'
      20hr_maze_stage2_19: '”もし○○でなければ××”ブロックの練習をもう一回やりましょう。一度でクリアできるかな？'
      20hr_maze_stage2_2: このブタはわたしの羽をぐちゃぐちゃにします。ブタをみつけるのを手伝って！
      20hr_maze_stage2_20: ブロックをあと3つ足して、難しい迷路を解くのをたすけてくれますか？もしそれができれば、どんな長くカーブした道でも歩けるようになります
      20hr_maze_stage2_3: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
      20hr_maze_stage2_4: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
      20hr_maze_stage2_5: 落ち着いて、悪いブタを見つけましょう。でないと怒るかも！
      20hr_maze_stage2_6: ブロックを2つだけ使い、緑のブタにたどりつく方法がありますす。わかりますか？
      20hr_maze_stage2_7: ブロックを３つだけ使い、緑の侵入者のところへ連れていって
      20hr_maze_stage2_8: 一番小さい数のブロックを使って、悪いブタを追い出しましょう。「繰り返し」ブロックを使います
      20hr_maze_stage2_9: '灰色のブロックを消すことはできません。「繰り返し」ブロックを使い、3回繰り返し、このパズルを解きましょう。「動く」「動く」「曲がる」の3つのブロックを灰色の「繰り返し」ブロックにいれてみましょう'
      4-5 Artist 1: 'ボックスを絵に描くのを手伝ってください。 (それぞれの線の長さは 300 ピクセル)   '
      4-5 Artist 10: '「実行」を押してコードを走らせます。それをくりかえして、図を完成させます。毎回ちがう色になります。'
      4-5 Artist 11: みどりのラインを完成させます。ラインの長さは 300 ピクセルで、15 ピクセル離してください。
      4-5 Artist 2: このコードをくりかえして、四角を完成させることができますか？
      4-5 Artist 3.5: オーケー、このコードを走らせたらどうなるか考えてみましょう。（「実行」を押してみるのもよいですね。）つぎに、それを繰り返して図を完成させてください。毎回（たぶん）ちがう色になるはずです。
      4-5 Artist 3: 長方形の花だんの周囲の長さは、600です。長辺の長さは 200 です。この長方形をかいてください。
      4-5 Artist 4: くりかえしの回数を入れて、色のついた円を作ってください。ヒント：1回転は何度ですか？
      4-5 Artist 5: どの角度をつかいますか？
      4-5 Artist 6: 正三角形のそれぞれの角度は 60 度です。辺の長さは 200 ピクセルです。図を完成させます。
      4-5 Artist 7: この三角形のそれぞれの頂点の角度は、30°、60°、90°です。斜めの辺の長さは、100ピクセルの高さの倍です。図を完成させてください。
      4-5 Artist 8: "サッカー場の真ん中の線は、サイドラインに対して直角です。このサッカー場の周囲の長さは 800 ピクセルで、長さは 240 ピクセルです。幅はどのくらいでしょう？外側の線と真ん中の線を描いてください。"
      4-5 Artist 9: 図が対称になるように、残りの半分もかいてみましょう。正三角形のそれぞれの辺の長さは 50 ピクセルです。
      4-5 Artist Assessment 1: '課題: ループを使って、正三角形をかきましょう。それぞれの長さは、300 ピクセルです。'
      4-5 Artist For Loops 1: 幅のブロックに、1 から 10の数字をいれてコードを実行しましょう。
      4-5 Artist For Loops 11: 0、20、40、60、80、・・・200 まで数えるように for ブロックを完成させましょう。
      4-5 Artist For Loops 12: 'from と to の数字をいれかえるとどうなりますか？200、180、160、140、120、・・・0と数えるように for ブロックを完成させましょう。'
      4-5 Artist For Loops 13: 'この設計は、for ループがないのでブロックをたくさん使っています！for ブロックを使ってスパイラルを完成させましょう。最後のラインの長さは 250 ピクセルです。'
      4-5 Artist For Loops 14: '誰かがコードを書き始めたあとで、もっといい方法があることに途中で気づきました。ブロックを for ブロックに置き換えて、三角形のスパイラルを完成させましょう。（ヒント: 最後のラインの長さは 300 ピクセルです。）'
      4-5 Artist For Loops 15: '誰かがコードを書き始めたあとで、もっといい方法があることに途中で気づきました。ブロックを for ブロックに置き換えて、六角形のスパイラルを完成させましょう。（ヒント: 最後のラインの長さは 200 ピクセルです。）'
      4-5 Artist For Loops 2: これは for ブロックです。1,2,3…10と入力する代わりに、ブロックの中で実行を繰り返し、回数を数えてくれるのが for ブロックです。for ブロックの中の to の部分に、10と入力します。
      4-5 Artist For Loops 3: どうやって 1 から 50 まで数えますか？for ブロックを使ってください。
      4-5 Artist For Loops 4: 1 から 10 まで、1 ずつ数えるように、for ブロックを完成させましょう。
      4-5 Artist For Loops 6: 1辺の長さが50、60、70、80、90の正方形をそれぞれ作ります。"正方形を描く" 関数を 5 回使ってください。
      4-5 Artist For Loops 7: '大きさを変えるために "カウント" ブロックを使って、同じ正方形をかきましょう。"正方形を描く" 関数の中に "カウンター" ブロックを入れます。ヒント: 変数のカテゴリの中に入っています。'
      4-5 Artist For Loops 8: for ブロックの中に 10 から 200 まで 10 ずつ数えるブロックを入れて、プログラムを完成させましょう。for ブロックは、ループカテゴリの中にあります。
      4-5 Artist For Loops 9: これらの円の大きさは、5、10、15、20、25、30、35です。for ブロックを使って円をかいてみましょう。
      4-5 Artist Free Draw 1: 自由にお絵かき！思いつくままに図をかいてみましょう。
      4-5 Artist Functions 1: 繰り返しループを使って三角形をかきましょう。
      4-5 Artist Functions 10a: このコードを、"雪のかけらをかく" 関数の中に入れて、50 を "サイズ" という変数に置き換えてみましょう。この関数は、100 ピクセルの雪のかけらを作れるようになりました！
      4-5 Artist Functions 10b: '"雪のかけらを描く" 関数を使って、大きさの違うかけらを作りましょう。ヒント: 最初の雪のかけらは、長さが 25 で、前の倍の大きさのかけらを順番に作ります。'
      4-5 Artist Functions 11: 'この "六角形をかく" 関数は、"三角形をかく" 関数を使います。六角形をかく関数を完成させましょう。（ヒント: 六角形は 6 つの辺があり、それぞれの辺の長さは 100 ピクセルです。）'
      4-5 Artist Functions 12: '"波をかく" 関数を完成させましょう。それぞれの波は、上向きの波と下向きの波をひとつずつ使います。ヒント: 5つの青い波をかきましょう。'
      4-5 Artist Functions 13 Free play: ここにある関数は、惑星や、星、ロケットやロボットをかくことができます。これらの関数を自由に使って、友達にシェアしたい絵をかいてみましょう。
      4-5 Artist Functions 14 Free play: ここにいくつかの関数を用意しました。ひとつ以上のループの中でこれらを自由に使って、友達とシェアしたい絵をかいてみましょう。サンプルを見るには、"実行" をクリックします。
      4-5 Artist Functions 15 Assessment: '課題: "正方形をかく" 関数を使って、正方形をかきましょう。それぞれの辺の長さは、50、100、150 ピクセルです。'
      4-5 Artist Functions 2a: こんどは、これらのブロックを新しい関数に入れて、"小さい三角形をかく" 関数として呼び出してみましょう。
      4-5 Artist Functions 2b: こんどは、これらのブロックを使って "小さい三角形をかく" 関数を作ってみましょう。
      4-5 Artist Functions 3: '"中くらいの三角形をかく" 関数と、"大きい三角形をかく" 関数を作ってみましょう。"小さい三角形をかく" 関数は用意されています。三角形の大きさは、50（小）、100（中）、150（大）です。'
      4-5 Artist Functions 4: この新しい "三角形をかく" 関数はパラメータを持っているので、さっきの 3 つの関数と同じことができます。この関数を使って、さっきと同じ三角形をかいてみましょう。
      4-5 Artist Functions 5: '"三角形をかく" 関数を少し変えて、"正方形をかく" 関数にすることができますか？'
      4-5 Artist Functions 6: '"正方形をかく" 関数と "三角形をかく" 関数を使って、家をかいてみましょう。（ヒント: 正方形の各辺の長さは、200 ピクセルです。）'
      4-5 Artist Functions 6b: '"正方形をかく" 関数と "三角形" の関数にその他のブロックを組み合わせ、"家をかく" 関数を作ってそれを呼び出してみましょう。'
      4-5 Artist Functions 7: '"draw a house"（家を描く）という関数を使って 100 ピクセルの家と 50 ピクセルの家を描いてください。家と家の間は 50 ピクセル空けましょう。'
      4-5 Artist Functions 8: '「花を描く」関数には、茎の長さを決めるためのパラメーターがあります。200 に設定したらどうなるかな？'
      4-5 Artist Functions 9: 花を 3 つ描いてみましょう。最初の花の高さを 100 ピクセルにして、その後に続く花は、ひとつ手前の花より 50 ピクセル高いものを並べていきましょう。花と花は 100 ピクセルずつ離して描いてね。
      4-5 Artist Patterns 1: |-
        ループを使って、大きさ 20 ピクセルの正方形を書けるかな？
      4-5 Artist Patterns 10: "このコードは 2 列の六角形を描きます。この全体を 4 回繰り返して、蜂の巣全体を描きましょう。ヒント: アーティストが画面の外に行かないようにするには、外側のループで 120 ピクセル戻る必要があるよ。"
      4-5 Artist Patterns 11: '半円を描くには、このコードを何回繰り返せばよいでしょうか。ヒント: 円を描くには 360 度動く必要があります。1 回のループで 3 度動くとき、円全体を描くには何回ループすればよいでしょう。'
      4-5 Artist Patterns 12: "繰り返しの部分をコピーして、右ではなく左に回るようにしてみてください。何が起きるでしょうか。これを繰り返して波線を描いてみましょう。"
      4-5 Artist Patterns 13: "全体を 4 回ループして、額を作りましょう。角の部分に注意してください。ただ 90 度回ればいいわけではありません！3 度回るという操作を 60 回繰り返すと半円になります。このコードのどの部分を使えば、丸い角の部分（円の 4 分の 1）が描けるでしょうか。"
      4-5 Artist Patterns 2: "「くりかえし」の中に、べつの「くりかえし」を入れることを、「入れ子」と言います。\n「くりかえし」ブロックを足して、15 この正方形を一列に書いてください。"
      4-5 Artist Patterns 3: "では次のレベルに進みましょう！\n入れ子のくりかえしで、この図形を書いて下さい。\n横一列を書き終えたら、アーティストのいちをもどして、それから次の一列を書くようにします。\nこれらのブロックたちの、どれかを、くりかえしで使います。"
      4-5 Artist Patterns 4: この、ひし形は1辺50ピクセルで、角度は120度と60度です。くりかえしを使って、書いてください。
      4-5 Artist Patterns 5.5: くりかえしを上手く使って、この図形を仕上げてください。
      4-5 Artist Patterns 5: "これを繰り返して、1列にひし形を6個並べてみましょう。ダイヤモンドのプログラムを2回ではなく3回繰り返すように変えたことに注意してください。なぜだと思いますか?"
      4-5 Artist Patterns 6: くりかえしを上手く使って、この図形を仕上げてください。
      4-5 Artist Patterns 7: さっきのパズルのコードをいじって、もっと複雑なパターンを作ってみましょう。今ひし形がどれぐらい重複しているか確認してから、最初の「うしろへジャンプする」を100から半分の50に変えてみてください。さて今度は、アーティストは2番目の「うしろにジャンプする」でどれぐらいジャンプしないといけないでしょう?
      4-5 Artist Patterns 8: ループを使って、40ピクセルの辺と60度の角を持つ6角形を書きましょう。
      4-5 Artist Patterns 9.5: このコードをループして、六角形を 2 列分描きましょう。2 列目は右側にずれるので気をつけましょう。
      4-5 Artist Patterns 9: "コードを 3 回繰り返して、列全体を描きましょう。ヒント: 六角形の左端の頂点から右端の頂点までの幅は 80 ピクセルです。"
      4-5 Artist Patterns Free Play: 自由時間です。オリジナルのパターンを作ってみましょう！
      4-5 Bee Conditionals - FC Test: ミツバチは今すぐ蜜が欲しいのです。すべての物が花ではありません。花が隠れているかもしれないので、すべての雲の下をチェックましょう。そうすればあなたは蜜を集められます。
      4-5 Bee Conditionals 1: ハチは花と蜂の巣を見分けることができません。花から蜜を集めるために、まず花か蜂の巣かを確認しましょう。
      4-5 Bee Conditionals 2 (copy 1): ハチは今のところ花のみつだけを探しています。注意する事があります。配置されたもの全てが花とは限りませんので、花に対してだけに花のみつを集めるようにしてみましょう。
      4-5 Bee Conditionals 2: "ハチはいま蜜だけを探しています。蜜を集めようとする前に、それが花かどうかを確認しましょう。"
      4-5 Bee Conditionals 3: 今度はハチミツを作ります。蜂の巣かどうかを確認してハチミツを作りましょう。
      4-5 Bee Conditionals 4: '？は花か蜂の巣です。「もし 実行/他」ブロックを使って、花なら蜜を集め、それ以外 (つまり蜂の巣) ならハチミツを作りましょう。'
      4-5 Bee Conditionals 5: |-
        ？の下には花か蜂の巣があります。「もし 実行/他」ブロックを使って、花なら蜜を集め、他 (つまり蜂の巣) ならハチミツを作りましょう。
      4-5 Bee Conditionals 6: "この紫の花には 3 回分、2 回分、または 1 回分のみつがあります。もし-実行-他のブロックを別のもし-実行-他のブロックと組み合わせると、「もし…ならば…、そうでなくて…ならば…、それでもなければ…」のような複雑な条件のブロックを作ることができます。みつの量がわからなくても集められるように、コードを完成させましょう。"
      4-5 Bee Conditionals 7: "むらさきの花は、花の蜜（みつ）が３つか、２つか、１つのどれかかもしれないことに注意してください。\n関数である「むらさきの花を調べる（check purple flower）」を完成させてください。\nそして、その関数（function）を使って、すべての蜜（みつ）を花から集めてください。"
      4-5 Bee Conditionals 8: "「花を調べ、はちみつを作る（check flower make honey）」という関数の中身を作ってください。\nあなたが関数を作るとき、　「もしむらさきの花の蜜（みつ）が３つか、２つ、または１つ」に注意して、\nすべての花の蜜（みつ）を集めてください。その次に、前へ進み、ハチミツを作ってください。"
      4-5 Bee Conditionals Assessment 1: "評価テスト：　このコードは間違ってます。\n関数の「はなのみつをとる、または、ハチミツを作る（get nectar or make honey）」を完成させ、\nそれから、その関数を使ってすべてのはなのみつとハチミツを集めてください。\nむらさきの花の花の蜜（みつ）の数は３つか、２つか、１つかもしれないことに注意してください。"
      4-5 Bee Debugging 1: "ブロックがたくさん！もっとシンプルにしてみましょう。"
      4-5 Bee Debugging 10: 間違いを見つけて直しましょう。
      4-5 Bee Debugging 11: このコードは正しいかな？
      4-5 Bee Debugging 2: 蜜を集めてハチミツを作るのを手伝いましょう。
      4-5 Bee Debugging 3: 間違いを見つけて直しましょう。
      4-5 Bee Debugging 4: このブロックではハチミツがとれません。間違っているのはどこかな？
      4-5 Bee Debugging 5: 何かがおかしい...
      4-5 Bee Debugging 6: "この紫（むらさき）の花（はな）の花のみつについて、数（かず）がわかりません。ブロックたちを直（なお）して、すべての花のみつを花から集めてください。"
      4-5 Bee Debugging 7: この関数（function）は、何か欠けています・・。
      4-5 Bee Debugging 8: この関数はいいのですが、使われ方が変です。
      4-5 Bee Debugging 9: ハチさんがハチミツを作りきれていないのはなぜでしょうか。
      4-5 Bee Debugging Assessment 1: '評価テストです。　コードを直してください。'
      4-5 Bee Nested Loops 1: '「繰り返し（loop）」を使ってすべての花のみつを集めてください。'
      4-5 Bee Nested Loops 2: '入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 '
      4-5 Bee Nested Loops 3: 入れ子のループ（ネスト・ループ）に最初からあるコードを入れて、すべての花のみつを集めてください。
      4-5 Bee Nested Loops 4: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      4-5 Bee Nested Loops 5: 入れ子の繰り返し（ネスト・ループ）を作り出して、すべての花のみつを集めてください。
      4-5 Bee Nested Loops 6: すべての花のみつを集めてください。
      4-5 Bee Nested Loops 7: 入れ子の繰り返し（ネスト・ループ）の中に、最初から配置されているブロックを入れて、すべての花のみつを集めてください。
      4-5 Bee Nested Loops 8: "「・・まで繰り返す（ループ while loop）」を入れ子の形にして、これらの花からすべての花のみつを集めてください。\n何回繰り返すかを決めて使うブロックと「・・まで」のブロックを入れ換（か）えてみてください。 "
      4-5 Bee Nested Loops 9: '「繰り返し」の内側に「以下の間（while loop）」を入れ子の形にして、これらの花からすべての花のみつを集めてください。'
      4-5 Bee Nested Loops Assessment 1: "課題。「繰り返し（ループ）」を使って、すべての花のみつとすべてのハチミツを集めてください。"
      4-5 Bee Nested Loops Rows: 並んでいる花から花のみつを集めてください。入れ子の繰り返し（ループ）を使ってみてください。
      4-5 Maze 1 (copy 1): にんげんさん。おで、ゾンビだぞ。ひまわり食べる、ぜったい。
      4-5 Maze 1: にんげんさん。おで、ゾンビだぞ。ひまわり食べる、ぜったい。
      4-5 Maze 10: 4ブロックだけ使ってひまわりにたどり着けますか？
      4-5 Maze 11: ブロックを6つだけ使ってひまわりにたどり着けますか？
      4-5 Maze 12: オーケー、これはちょっとだけ違います。６つのブロックだけでやれますか？
      4-5 Maze 13: ブタを捕まえたい！
      4-5 Maze 14: ブタを捕（つか）まえようぜ。「・・まで繰り返し（ループ）」ブロックを使ってみてね。
      4-5 Maze 2 (copy 1): ゾンビをひまわりのところへ連れて行ってください。チャンパーの所へ行かないように気をつけて。
      4-5 Maze 2: ゾンビをひまわりのところへ連れて行ってください。チャンパーの所へ行かないように気をつけて。
      4-5 Maze 3 (copy 1): ひまわりの…ところまで…行かなくては。
      4-5 Maze 3: ひまわりの…ところまで…行かなくては。
      4-5 Maze 4 (copy 1): 使うブロックの数が少なくてすむように、「くりかえし」ブロックを使って見て！
      4-5 Maze 4: 使用するブロックの数が少なくてすむように「リピート」ブロックを使ってみて…
      4-5 Maze 5 (copy 1): 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      4-5 Maze 5: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      4-5 Maze 6 (copy 1): 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      4-5 Maze 6: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      4-5 Maze 7: 人間さん。ゾンビです。ひまわりのところへどうしても行きたいのです。
      4-5 Maze 8: "「リピート」ブロックを使ってゾンビをヒマワリのところまで連れていってください。"
      4-5 Maze 9: "「までを繰り返します」ブロックを使ってループを作ってください。"
      4-5 Maze Assessment 1: '課題：ヒマワリまで辿り着く。'
      4-5 Maze Conditionals 1: '「までを繰り返します」ブロックを使ってゾンビをヒマワリまで連れて行く。'
      4-5 Maze Conditionals 10: "ブロックをあと3つ足して、ゾンビがむずかしい迷路を歩くの助けてくれますか？\\r\n\\rもしそれができれば、どんな長くカーブした道でも歩けるようになります。"
      4-5 Maze Conditionals 2: '「までを繰り返します」ブロックを使ってゾンビをヒマワリまで連れて行く。'
      4-5 Maze Conditionals 3: "「もし」ブロックを使って、いつ曲がるかを決めてください。ヒント：あともう１つのブロックが必要です、どう設定しているかを学べば、次はひとりでできるようになります。"
      4-5 Maze Conditionals 4: Ok。さっきのパズルと同じです、でもどうやって"もし"ブロックと"繰り返し"ブロックを一緒に使ったかをもう一度思い出してみましょう。
      4-5 Maze Conditionals 5: "ひまわり食べたいの！「もし」ブロックを使って、できる限り少ない数のブロックでわたしをそこまで連れて行ってください。"
      4-5 Maze Conditionals 6: |-
        ひまわり食べたいの！「もし」ブロックを使って、できる限り少ない数のブロックでわたしをそこまで連れて行ってください。
      4-5 Maze Conditionals 7: いいね。練習のためにもう一度やりましょう。・・・それほど違いはないけれど、チャンーパーたちに気をつけて！
      4-5 Maze Conditionals 8: "「もし／他」ブロックは条件を調べて、どちらかの処理を実行するものです。このブロックを使ってわたしをひまわりの所へ連れて行って。"
      4-5 Maze Conditionals 9: |-
        「もし／他」ブロックでもう一度練習しよう。１回でクリアできるかな？
      4-5 Maze Conditionals Assessment 1: "「までを繰り返し（ループ）」と「もし／他」ブロックを使いわたしをひまわりの所へ連れて行ってください。できるだけブロックを少なくしてください。"
      4-5 Nested Loops 1: 'これらの三角形を描くためのコードを完成させてください。最初の１つは用意されています。ヒント：３つの三角形を描くのに３６０度回転します。'
      4-5 Nested Loops 10: 与えられたブロックをループさせて、この旗の上で星の絵の最後の一列を描きましょう。この星たちは５０ピクセル離れていますが、星たち自身は３０ピクセルの幅だったことを思い出してください。
      4-5 Nested Loops 11: 入れ子型の「繰り返し（ループ）」を使って、１０個の四角形でできたこの歩道を描く事ができますか？それぞれの四角形は３０ピクセルです。
      4-5 Nested Loops 12: 入れ子型の「繰り返し（ループ）」を使って、これらの３６個の三角形を描けますか？
      4-5 Nested Loops 2: '10回、三角形を書きます。そのためには「くりかえし」ブロックを追加（ついか）し、その中に灰色（はいいろ）のブロックを全部入れます。「くりかえし」のなかに「くりかえし」を入れることを「入れ子」と言います。  '
      4-5 Nested Loops 3: |-
        最初から置かれていたコードを別のループの中に入れることで、太陽を作りましょう。これは入れ子型の「繰り返し（ループ）」と言います。

      4-5 Nested Loops 5: 風車（かざぐるま）を作るために、与えられたコードを繰り返しにしましょう。
      4-5 Nested Loops 6: 三角形のコードを繰り返す事で六角形を描けますか？
      4-5 Nested Loops 7: "このデザインを１０回ループさせましょう。ループする度にどのくらい回転させる必要がありますか？（ヒント：３６０を１０で割ると？）"
      4-5 Nested Loops 8: "このデザインを６回繰り返しましょう。繰り返す毎にどれくらい回転する必要があるでしょうか。（ヒント：３６０割る６は？）"
      4-5 Nested Loops 9: ワニの歯を書いてください！
      4-5 Nested Loops Assessment 1: '入れ子型の繰り返しを使ってこの絵を完成させてください。'
      4-5 While Loops 1: わたしを穴のところまで動かして、シャベル２杯分で穴を埋（う）めましょう。「あなをうめる」ブロックを使ってください。
      4-5 While Loops 2: わたしを土の山へ動かして、スコップ５杯分の土を減らしてください。「つちをかたづける」ブロックを使ってね。
      4-5 While Loops 3: "わたしを山まで動かしてすべての土をかたづけてください。それから穴のところへ行き穴をすべて埋（う）めてください。ヒント：できるだけ少なくブロックを使ってください。"
      4-5 While Loops 4: "すごく大きい穴を見つけてびっくりしました。シャベル何杯分の土が必要かわかりません。穴が他の地面と同じくらいに平になるまで穴を埋めるプログラムをあなたは作れますか？ヒント：「以下の間繰り返し（while loop）」を今回は使ってみてください。"
      4-5 While Loops 5: ２つも大穴があるわ。両方の穴を完全に埋（う）めるプログラムをあなたは作れますか？
      4-5 While Loops 6: あらまあ、大きな土の山が１つあるわよ。平らな地面になるまですべての土をなくすプログラムをあなたは作れますか？
      4-5 While Loops 7: 今そこに３つの土の山を見つけたわよ！地面と同じくらい平らになるまであれらの山をなくすプログラムをあなはた作れるかしら？
      4-5 While Loops 8: " かなり大きな穴１つとびっくりするほど大きな土の山が１つあります。地面と同じ高さにするために、どれくらいの数、土を運びいれ、土を取り除く必要があるでしょうか。ヒント：「以下の間繰り返し（while loop）」を両方に使ってみてください。"
      4-5 While Loops Assessment 1: たくさんの穴と土で盛り上がった所があります。平たい地面にするために土を埋めたり、取り除いたりするのを手伝ってください。
      Alien Defender: 'プロジェクトのアイデア: Play Labでディフェンダーゲームを作ろう！'
      Alien Defender_2018: 'プロジェクトのアイデア: Play Labでディフェンダーゲームを作ろう！'
      App Lab test: テスト
      Artist - Nested Loops 1: 'これらの三角形を描くためのコードを完成させてください。最初の１つは用意されています。ヒント：３つの三角形を描くのに３６０度回転します。'
      Artist - Nested Loops 10: 与えられたブロックをループさせて、この旗の上で星の絵の最後の一列を描きましょう。この星たちは５０ピクセル離れていますが、星たち自身は３０ピクセルの幅だったことを思い出してください。
      Artist - Nested Loops 11: 入れ子型の「繰り返し（ループ）」を使って、１０個の四角形でできたこの歩道を描く事ができますか？それぞれの四角形は３０ピクセルです。
      Artist - Nested Loops 12: 入れ子型の「繰り返し（ループ）」を使って、これらの３６個の三角形を描けますか？
      Artist - Nested Loops 5: 風車（かざぐるま）を作るために、与えられたコードを繰り返しにしましょう。
      Artist - Nested Loops 6: 三角形のコードを繰り返す事で六角形を描けますか？
      Artist - Nested Loops 9: ワニの歯を書いてください！
      Artist - Nested Loops Assessment 1: 入れ子型の繰り返しを使ってこの絵を完成させてください。
      Artist Autorun Test: この 3 つの正方形を「繰り返し」のブロックを使って描いてみましょう。
      Artist Inspiration: "自由に作ってみよう！あなたは、このようなパターンの作りかたを、すべて学びました。この絵が気に入ったら、にたデザインを作ってみて。自分のすきなように、作り直してもいいよ。\nヒントがほしいときは、ランプをクリックしてね。 "
      Bee Recommended Blocks test: 紫の花の蜜は、1（ある）か 0（ない） かのどちらかですが、どのお花に蜜がある（1である）のかは分かりません！蜜のない花から蜜を集めないように気をつけてください。蜜が 1 かどうかは、「もし」ブロックを使って確認しましょう。
      Bergeron Robot Maze1: 'いじわるなぶたを捕まえるのを手伝ってくれる? 「前に進む」をふたつ一緒に重ねて「実行」を押してみましょう。 '
      Brad Spooky House Copy: 'フリープレイ: あなたが作った関数と、おまけのブロックがあります。カッコイイのを、書いてみよう！'
      Brad Spooky House: 'フリープレイ: あなたが作った関数と、おまけのブロックがあります。カッコイイのを、書いてみよう！'
      Building a Foundation Assessment: 三階建てのピラミッドを作ってください、他に指示はありませんので、ピースを使っていろいろ試してみましょう。
      Busy Bee 2: この蜂は、やるべき仕事の多くを持っています! コードを簡単するため、使用できるパターンが分かりますか。
      Busy Bee: この蜂は、やるべき仕事の多くを持っています! コードを簡単するため、使用できるパターンが分かりますか。
      C3-Farmer While Loops 5: ２つも大穴があるわ。両方の穴を完全に埋（う）めるプログラムをあなたは作れますか？
      C3-Farmer While Loops 6: あらまあ、大きな土の山が１つあるわよ。平らな地面になるまですべての土をなくすプログラムをあなたは作れますか？
      C3-Farmer While Loops 7: 今そこに３つの土の山を見つけたわよ！地面と同じくらい平らになるまであれらの山をなくすプログラムをあなはた作れるかしら？
      C3-Farmer While Loops Assessment 1: たくさんの穴と土で盛り上がった所があります。平たい地面にするために土を埋めたり、取り除いたりするのを手伝ってください。
      CSD U5 black white images pixelation 2: スマイリーフェイスを描く (画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 2_2018: スマイリーフェイスを描く (画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 2_2019: スマイリーフェイスを描く (画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 3: イメージを検索するスライダーの幅と高さを変更します(詳細はこちら)
      CSD U5 black white images pixelation 3_2018: イメージを検索するスライダーの幅と高さを変更します(詳細はこちら)
      CSD U5 black white images pixelation 3_2019: イメージを検索するスライダーの幅と高さを変更します(詳細はこちら)
      CSD U5 black white images pixelation 4: スマイリーフェイスに眉毛を追加(画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 4_2018: スマイリーフェイスに眉毛を追加(画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 4_2019: スマイリーフェイスに眉毛を追加(画像を表示するにはここをクリック)
      CSD U5 black white images pixelation 5: 好きなものをかく
      CSD U5 black white images pixelation 5_2018: 好きなものをかく
      CSD U5 black white images pixelation 5_2019: 好きなものをかく
      CSD U5 black white images pixelation: 0 と 1 を入力して X の形を完成させる
      CSD U5 black white images pixelation_2018: 0 と 1 を入力して X の形を完成させる
      CSD U5 black white images pixelation_2019: 0 と 1 を入力して X の形を完成させる
      CSDU6 - Arrays - indexPractice: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 - for loop - color buttons with for: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 - for loop - color buttons: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 - for loop - why for: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 arrays rainbow: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 arrays select rainbow: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 arrays select rainbow_2018: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSDU6 arrays select rainbow_2019: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSP student contact info: Eメールアドレスを入力してください。
      CSPU5_U3 - Arrays - indexPractice: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSPU5_U3 - Arrays - indexPractice_2018: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSPU5_U3 - Arrays - indexPractice_2019: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      CSPU5_U3 - Loops - 4: デバッグ コマンドを使って、6 の前のすべての値のリストを作成します。(クリックして完全な指示を表示)
      CSPU5_U3 - Loops - 4_2018: デバッグ コマンドを使って、6 の前のすべての値のリストを作成します。(クリックして完全な指示を表示)
      CSPU5_U3 - Loops - 4_2019: デバッグ コマンドを使って、6 の前のすべての値のリストを作成します。(クリックして完全な指示を表示)
      CoureE_HOC 2018 Level_7a: これらの海底遺跡からチェストを見つけましょう。
      Course 2 Bee Loops 1: 'こんにちは、ハチです！花から蜜を集めるのを手伝ってください。 '
      Course 2 Maze Loops 1: ５つのブロックを使ってわたしをブタの所へ連れて行くことができますか？
      Course 4 2: ハチは今のところ花のみつだけを探しています。注意する事があります。配置されたもの全てが花とは限りませんので、花に対してだけに花のみつを集めるようにしてみましょう。
      Course 4 Artist 1: '四角形を書いてください。(それぞれの辺は、200ピクセルの長さです) '
      Course 4 Artist 10: |-
        面白い形を書くプログラムです。これを、入れ子でくりかえすと、どうなるでしょうか？くりかえす度に、少しまがると、どうなるでしょう？あなたの、すきな絵を書いて楽しんでください。
      Course 4 Artist 11: これは、むずかしいよ！1回じゃムリだから、色々、やって見てください。ヒントを見たいときは、ランプをクリック。
      Course 4 Artist 12: |-
        もっとカッコいいデザインを作るヒントを見たかったら、ランプをクリックして！自分のすきなデザインを、自由に書いても良いよ！
      Course 4 Artist 13: ここに、真っ白なキャンバスがあります。線のかたちや、スタンプを使って、あなたが書きたいものを、自由に書いてください！
      Course 4 Artist 2: くりかえしを使って、四角形（そとがわの、大きな四角形だけ）を書いてください。(それぞれの辺は300ピクセルです)
      Course 4 Artist 20: ここに、真っ白なキャンバスがあります。線のかたちや、スタンプを使って、あなたが書きたいものを、自由に書いてください！
      Course 4 Artist 3: '「くりかえし」を使えば、かんたんに、このデザインが書けるよ。まずはプログラムを動かして(「実行」をクリックして) 何が起こるか見てみよう。その後に「くりかえし」を、使ってデザインを完成させよう。'
      Course 4 Artist 4: くりかえしの回数を入れて、色のついた円を作ってください。ヒント：1回転は何度ですか？
      Course 4 Artist 5: '図が対称（たいしょう）になるように、下に三角形を3つ書きましょう。正三角形のそれぞれの辺の長さは50ピクセルです。ヒント：少しプログラムをかえたら、実行して、動きをみながら考えましょう。'
      Course 4 Artist 6: 正三角形を3つ書くプログラムを完成（かんせい）させてください。
      Course 4 Artist 7: '10回、三角形を書きます。そのためには「くりかえし」ブロックを追加（ついか）し、その中に灰色（はいいろ）のブロックを全部入れます。「くりかえし」のなかに「くりかえし」を入れることを「入れ子」と言います。  '
      Course 4 Artist 8: 太陽の絵を書いてください。「くりかえし」ブロックを加えて、灰色（はいいろ）のブロック全部を中に入れてみてね。
      Course 4 Artist 8a: この形を、おぼえてますか？ヒントなしで、これを書いてみよう！
      Course 4 Artist 9: "このデザインを書くには、10 回くりかえします。ヒント：1回書いたら、少しまがりましょう。\n"
      Course 4 Artist Binary 1: "‘draw binary' （ドロー バイナリ）は、1 と 0 で表されるバイナリ文字列を受け取り、アーティストが書くべき絵を命令（めいれい）する関数（かんすう）です。\nアーティストは左から右、上から下へと動きながら、1なら正方形をぬりつぶします。0なら何もせずに次へ行きます。\nアーティストが絵を書くために、バイナリをどのように使うのか、プログラムを実行して考えてみて下さい。"
      Course 4 Artist Binary 1a: "‘draw binary' （ドロー バイナリ）は、1 と 0 で表されるバイナリ文字列を受け取り、アーティストが書くべき絵を命令（めいれい）する関数（かんすう）です。\nアーティストは左から右、上から下へと動きながら、1なら正方形をぬりつぶします。0なら何もせずに次へ行きます。\nアーティストが絵を書くために、バイナリをどのように使うのか、プログラムを実行して考えてみて下さい。"
      Course 4 Artist Binary 2: 正しいバイナリ文字列を「draw binary」関数のパラメータに入れて、この絵を書いてください。
      Course 4 Artist Binary 3: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      Course 4 Artist Binary 4: "このプログラムを実行すると、おこった顔が書かれます。\nえがおが書かれるように、プログラムを直してください。"
      Course 4 Artist Binary 5: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      Course 4 Artist Binary 6: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      Course 4 Artist Binary 7: このイメージを完成（かんせい）させてください。
      Course 4 Artist Binary Free Play 2: "自由に書きましょう！\nこのまっさらなキャンバスに、すきな絵を書いてください。さあ何から書きましょうか！"
      Course 4 Artist Binary Free Play 2a: |-
        もっと細かいキャンバスがあります - 16 ピクセル × 16 ピクセルです! \r \rこのビットで何ができるか、見てください。
      Course 4 Artist Binary Free Play 2b: "ヒントを見たい場合は、ここをクリックします。\nすきな絵を書いてもいいですよ。"
      Course 4 Artist Binary Free Play: '自由に描きましょう! 2進数を使って好きなものを描きましょう!'
      Course 4 Artist Binary pre1: "「Draw binary \"01010101\"」ブロックを「実行したとき」にくっつけて、実行してください。\nアーティストは、一番目の行にバイナリで「01010101」を書きます。"
      Course 4 Artist Binary ryan: "バイナリは、 2 つのオプションだけを使って、情報を表すものです。 ここでは、「オフ」(0で表す) と、「オン」(１で表す) を使います。\\r \\rあなたが歩き回って、指定の四角形をオンにし、デザインできる「ピクセル」のグリッドを用意しました。アーティストに、はじめの行に、バイナリで \"01010101\"を、かかせることが出来ますか？"
      Course 4 Artist For Loops 1: '「くりかえす」ブロックを使って、この三角形を書いてください。（一辺の長さは50 ピクセルです）'
      Course 4 Artist For Loops 10: 自由時間です！学んだブロックの使い方をいかして、好きなものを描きましょう。
      Course 4 Artist For Loops 11: "多角形の辺の数を、変数でコントロール出来ることを思い出してください。\nさあ、`counter` 変数を使って、色々な多角形を書いてみましょう。\n三角形、四角形と1辺ずつふやして10角形まで書いて下さい。すべての多角形の一辺は、100 ピクセルの長さです。 \nヒント：まがる角度は360÷`counter` です。 "
      Course 4 Artist For Loops 11a: |-
        これまで学んだことを全部思い出してください！
         `counter` 変数を使ったくりかえしで、この図形を書いてください。3角形から2辺ずつ ふやし、9角形まで書きます。
        ヒント：
        それぞれの辺の長さは、`counter`×10ピクセルです。
        まがる角度は、360÷`counter`度です。
      Course 4 Artist For Loops 14: "ふつうより、ちょっと多めか少なめの角度でまがると、面白いエフェクトがかかります。\nまがる角度を89度にして、さっきのプログラムを使えば、このねじれた四角のグルグルが書けますよ！\nヒント：一辺の長さは、15から300まで15ピクセルずつ ふえます。"
      Course 4 Artist For Loops 15: "くりかえしを使って、自由に図形を書いてみよう。\n `counter` （カウンター）、 `length` （レングス、長さ）、 `size` （サイズ、大きさ）変数を用意したので、使って下さいね。"
      Course 4 Artist For Loops 2: "50から100まで10ずつカウントする くりかえしの中に、三角形を書くプログラムを入れました。実行して、何が書けるか見てください。\n注意：「実行」をクリックする前に、プログラムをよく見て、考えましょう。"
      Course 4 Artist For Loops 3: "さっきのパズルの絵と、同じような絵を書いてみましょう。\n一番小さい三角形の一辺は 20 ピクセルの長さ、一番大きい三角形の一辺は200ピクセルの長さです。それぞれの三角形は、20ピクセルずつ大きくなります。\n"
      Course 4 Artist For Loops 4: 'これまで学んだことを使って、このような四角形を書いて下さい。四角形の一辺の長さは、15 ピクセルから、最大で300 ピクセルまで、15 ピクセルずつ大きくなっています。 '
      Course 4 Artist For Loops 5: '前のパズルでは、グッドジョブ！もう一度「カウンター」変数ブロックを使って、カッコいい絵をかきましょう。 '
      Course 4 Artist For Loops 6a: "さっきのプログラムを、3ヵ所かえるだけで、この絵を書くことが出来ます！\nヒント：\n1. 線の太さは？\n2. まがる向きは？\n3. いくつ「ずつ」カウントする？"
      Course 4 Artist For Loops 8: |-
        さっきのプログラムを、1ヵ所かえるだけで、この絵を書くことが出来ます！
        ヒント：ブロックを１つ消します。
      Course 4 Artist For Loops 8a: さっきのプログラムを、1ヵ所かえるだけで、この絵を書くことが出来ます！
      Course 4 Artist For Loops Challenge: "**ちょうせん:** これまで学んだことをすべて使って、この図形を書いてください。多角形の一辺は、ぜんぶ40ピクセルの長さです。\nヒント： `counter` は２から19まで２ずつカウントして下さい。"
      Course 4 Artist For Loops Challenge_a: |-
        あなたが学んだことをすべて使って、このイメージを作る事ができますか？ \r \r ヒントがほしい？ここをクリックします。
      Course 4 Artist For Loops inspire: |-
        自由研究：あなたは、このようなパターンの書き方を、すべて学びました。この絵が気に入ったら、にたデザインを書いてみて。自分のすきなように、作り直してもいいよ。
        ヒントがほしいときは、ランプをクリックしてね。
      Course 4 Artist Functions 1: くりかえしを使って、一辺が100ピクセルの正方形をかいてください。
      Course 4 Artist Functions 11: 立方体をかくコードを見てください -これを「立方体をかく」関数の中に、動かすことができますか。
      Course 4 Artist Functions 14: 順調ですね。いい感じです。「Draw a line of squares（四角形を描く）」という新しい関数（function）を使って四角形を描きましょう。長さがそれぞれ４０ピクセルということに注意しましょう。
      Course 4 Artist Functions 15: '少し先の段階に進みましょう。「draw a line of squares（四角形の列）」という関数を使って、あなたは星を描けますか？がんばってくださいね。ヒント：１４４度回転する必要があるでしょう。'
      Course 4 Artist Functions 2: 'それぞれ、20ピクセル離（はな）れた、３つの四角形を書けますか？ヒント：それぞれの四角形は100ピクセルの大きさです。'
      Course 4 Artist Functions 3: "「draw a square（四角形を描く）」という関数ブロックを使って、この絵柄を描けますか？ヒント：それぞれの四角形は１２０ピクセル離（はな）れてます。\n"
      Course 4 Artist Functions 5: "「draw a square（四角形を描く）」という関数ブロックを使って、この絵柄を描けますか？ヒント：それぞれの四角形は１２０ピクセル離（はな）れてます。\n"
      Course 4 Artist Functions 8: '関数ブロックのつかいかたを、マスターした？この正方形を200 ピクセルのサイズに、かえてみよう。ヒント: サイズをかえるには、「正方形をかく」関数エディタで、「edit」をクリックします。関数エディターから、もどるときは、「save and close」をクリックします。 '
      Course 4 Artist Functions Inspiration: この図形を書いてください。すきな図形を書いてもよいです。ヒントを見たい場合は、ランプをクリックしてください。
      Course 4 Artist Functions challenge: この図形を書いてください。すきな図形を書いてもよいです。ヒントを見たい場合は、ランプをクリックしてください。
      Course 4 Artist Inspire: |-
        もっとカッコいいデザインを作るヒントを見たかったら、ランプをクリックして！自分のすきなデザインを、自由に書いても良いよ！
      Course 4 Artist Params 13: 'フリープレイ: あなたが作った関数と、おまけ もあります。すごいものを、かいてみよう！'
      Course 4 Artist Params 3: 'すばらしい！新しい関数で、それぞれの三角形をかけますか？始めは 25 、2 番目は 50、3 番目は 75ピクセルの長さです。 '
      Course 4 Artist Params 5: "この図を描くためにあなたが作った関数の両方を使ってみてください。もっと簡単にするために、「カウンター」というパラメーターでの繰り返し（ループ）を使ってみてください。\n"
      Course 4 Artist Params 6: 'この「図形を描く（draw a shape）」という関数（function）を編集してみましょう。この関数は「長さ（length）」のパラメータをすでに持っています。さあ、さらに「辺（sides）」のパラメータを加えるためにこの関数を編集してみましょう。図形の曲がる角度は３６０を辺の数で割ったものであることに注意してください。ヒント：それぞれの図形の長さは、三角形では１００ピクセル、六角形では２５ピクセル、四角形では５０ピクセルです。 '
      Course 4 Artist Params 7: '「？？？」を埋めることでこれらの図形を描けますか？四角形と三角形は長さ１００ピクセルで、六角形のほうは長さ７５ピクセルです。 '
      Course 4 Artist Params 8: "どうやってこの図形を描くのかわかりますか？六角形と呼ばれている６つの辺（sides）の新しい関数（function）を作ることがヒントです。\n"
      Course 4 Artist Params 9: カウンター ループを使って、そこからループを消したのを、おぼえてますか？「辺」と「長さ」パラメーターを使って「図形をかく」関数を使い、楽しい時をすごしましょう。四角形カウンターは、5/100/5、三角形カウンターは、10/100/10、六角形は 2/100/2にしてください。
      Course 4 Artist Var 9: '三角形を描くアルゴリズムがここにあります。　「辺（sides）」の変数を代わりに使ってこのアルゴリズムを変えてください。数字の３を「辺（sides）」の変数に置きかえてください。ヒント：「辺を設定する（set sides to）」ブロックを使う事を忘れないでください。'
      Course 4 Artist Vars 1: "正三角形を書きましょう。それぞれの長さが100ピクセルぴったりの正三角形です。"
      Course 4 Artist Vars 11: 前のパズルを、もっとむずかしくしました。sides 変数にセットする数を変えて、四角形を書くようにしてください。
      Course 4 Artist Vars 12: "五角形を書くために、「sides」変数に 5をセットしてください。「length」変数には、75をセットします。そして「前にうごく？ピクセル」に、lengthを使います。\nこのアルゴリズムでは、辺がふえる度に、全体が大きくなることも、見ておいてください。"
      Course 4 Artist Vars 13: "多角形の辺が多くなっても、画面からはみ出さないためには、それぞれの辺の長さを短くしなければなりません。このパターンを書くために、アルゴリズムを作り直しましょう。ひとつの多角形の辺の長さを全部足すと300 ピクセルです。sides変数を使って、length 変数に入れる数を計算しましょう。\nランプをクリックしたら、ヒントを教えるよ。"
      Course 4 Artist Vars 14: |-
        自由研究: あなたのアルゴリズムは、さらに、もうひとつ入れ子のループの中に入っています。2つの変数にセットする数をかえて、カッコいいパターンが書けるか、ためして下さい。
        色を使えば、もっとカッコよくなります。ループの中で、「てきとうな色」を使って、デザインがどうなるか見てみてね！
      Course 4 Artist Vars 2: '「前に動く"150"ピクセル」のかわりに「前に動く"length"ピクセル」ブロックを使います。"length"は、変数（へんすう）で、あなたの好きな数にできます。この三角形を書くために、"length"に150をセットしてください。'
      Course 4 Artist Vars 4: "高さが、はばの2倍の四角形を書きます。\n\"width\" （ウィドゥス、はばの意味）という変数に100 をセットします。計算ブロックを使ってプログラムを仕上げてください。\nヒント：四角形の高さは、width × 2 です。"
      Course 4 Artist Vars 5: '"sides" 変数を使って、ループが何回くりかえされるかコントロールします。'
      Course 4 Artist Vars 6: |-
        これは、多角形を書くプログラムです。 sidesという変数は4にセットされていますので、四角形を書くはずです。計算ブロックといっしょに sides 変数を使って、プログラムを仕上げてください。
        ランプをクリックするとヒントがあるよ！
      Course 4 Artist Vars 7: |-
        前のパズルで学んだように、sides 変数を使って、6角形を書いてください。
        sides 変数を4にすれば四角形、5にすれば五角形、六角形も八角形も書けることに気がついたかな？
      Course 4 Artist Vars 8: "自由研究：この図形の辺の数（sides）を、色々とかえてみてください。その後で、辺の数がかわっても、全体の長さが同じになるようなアルゴリズムを考えてください。\nヒント：てきとうな長さを辺の数で わり算すれば、辺の数が多くなるほど、辺の長さが短くなります。"
      Course 4 Bee 1: "実行するまで、「？」の下に、何があるかは分かりません！\n「もし」ブロックを使って、「？」の下に、何があるかチェックしてください。そして、もし花だったら、花のミツをとってください。"
      Course 4 Bee 2: '「もし～」ブロックを使って、全ての「？」をチェックしてください。そのとき、「？」が花なら、花のミツをとり、「？」がハチの巣なら、ハチミツを作ります！'
      Course 4 Bee 3: '「？」は、花か、ハチの巣か、のどちらかです。「もし～」ブロックを使って、花の時はミツをとって、ちがう (つまりハチの巣) 時は、ハチミツを作りましょう。'
      Course 4 Bee For Loops 1: '「くりかえし」を使って、すべての花からミツを集めましょう。'
      Course 4 Bee For Loops 10: くりかえしが、カウントダウンなら、それぞれのくりかえしで、カウンター変数から数を引きます。9、6、3 と みつ を集めるには、いくつ数を引くべきですか？
      Course 4 Bee For Loops 2: これは新しい くりかえし "for"ループです。この for ループは、1から5まで1づつカウントし、その度にループの中を実行します。ミツバチが、ハチミツを集めるのを助けてください。
      Course 4 Bee For Loops 6: Forループはカウント ダウンにも使えます。5 から 1 まで1づつカウント ダウンして、みつを集めてください。
      Course 4 Bee For Loops 8: Loop変数で、動きと、みつを集めることをコントロール出来ますか？
      Course 4 Bee For Loops 9: For loopの最後の数字は「増分（ぞうぶん）」といわれ、ループするたび増分の数字をカウンター変数の数字に足していきます。増分を2 にして、これらの花を集めてください。
      Course 4 Bee Loops 5 NEW: 3つ花があり、それぞれの花にはミツがあります。「くりかえし」を上手く使って、少ないブロック数で、全部のミツを集めてください。
      Course 4 Bee Loops 5a NEW: 全ての花のミツを集めながら、ハチの巣（す）へ行きます。ハチの巣についたら、ハチミツを5回、作って下さい。「くりかえし」ブロックを使って、使うブロックの数を出来るだけ少なくしてくださいね！
      Course 4 Bee Params 1: '「get 3 nectar」は、まがる、すすむ、はなのみつをとる、もどるを行います。これを使って、全ての みつを集めてください。'
      Course 4 Bee Params 2: '`get 3 nectar` 関数を直して下さい。「ひだりにまがる」と「みぎにまがる」を入れかえれば、ハチが花のミツをとれるようになりますね。'
      Course 4 Bee Params 3 (copy 1): "こんどは、左右に花があります！'variables'（バリアブルズ、変数）の中に、`left`（レフト、左）と`right'（ライト、右）という変数を足しました。\nさらに、`direction'（ディレクション、方向）パラメータを `get 3 nectar` に加えました。関数が正しく動くように直してください。そして、`left` か `right` かどちらかを、関数の `direction' に わたしてミツバチが正しい方向にまがるようにして下さい。"
      Course 4 Bee Params 3: "こんどは、左右に花があります！'variables'（バリアブルズ、変数）の中に、`left`（レフト、左）と`right'（ライト、右）という変数を足しました。\nさらに、`direction'（ディレクション、方向）パラメータを `get 3 nectar` に加えました。関数が正しく動くように直してください。そして、`left` か `right` かどちらかを、関数の `direction' に わたしてミツバチが正しい方向にまがるようにして下さい。  "
      Course 4 Bee Params 4 (copy 1): あなたが作った `get 3 nectar` 関数を使って、すべての花からミツを集めて下さい。`left` （レフト、左）と `right` （ライト、右）変数を使って下さいね。
      Course 4 Bee Params 4 - Two WhenRun: あなたが作った `get 3 nectar` 関数を使って、すべての花からミツを集めて下さい。`left` （レフト、左）と `right` （ライト、右）変数を使って下さいね。
      Course 4 Bee Params 4 backup: たった1 つの関数で、どんな数のミツでも集められるなんてステキですね。「ミツの数」というパラメータを 'get 5 nectar' 関数に加えて、集めるミツの数を 変えられるようにしましょう。そして、関数の名前もかえてみて下さい！
      Course 4 Bee Params 4: あなたが作った `get 3 nectar` 関数を使って、すべての花からミツを集めて下さい。`left` （レフト、左）と `right` （ライト、右）変数を使って下さいね。
      Course 4 Bee Params 5: "こんどは、「関数を作る」を使って、全部のプログラムを書いてみましょう。\n「方向」をパラメータにして「ミツを五つ取る」関数を作ってください。"
      Course 4 Bee Params 6 (copy 1): '`get many nectar'' （ゲット メニー ネクター）関数を上手く使って、全てのミツを集めてください。'
      Course 4 Bee Params 6: たった1 つの関数で、どんな数のミツでも集められるなんてステキですね。「ミツの数」というパラメータを 'get 5 nectar' 関数に加えて、集めるミツの数を 変えられるようにしましょう。そして、関数の名前もかえてみて下さい！
      Course 4 Bee Params 7 (copy 1): '`get many nectar'' （ゲット メニー ネクター）関数を上手く使って、全てのミツを集めてください。'
      Course 4 Bee Params 7: '`get many nectar'' （ゲット メニー ネクター）関数を上手く使って、全てのミツを集めてください。'
      Course 4 Bee Params 8: "チャレンジ： 今度は、ハチミツが登場です！`get nectar make honey` 関数は、 `direction` （ディレクション、方向）、 `nectar units` （ネクター ユニッツ、花のミツの数）、 `honey units` （ハニー ユニッツ、ハチミツの数）をパラメータに取ります。まず、この関数が `honey units` パラメータの数だけハチミツを作るよう書き直してください。そしてこの関数を上手く使って、すべての花のミツを集めて、ハチミツを作りましょう。\nヒント：「0回くりかえす」と言うのは、何もしないのと同じです。"
      Course 4 Bee Params Ex: '`get many nectar'' （ゲット メニー ネクター）関数を上手く使って、全てのミツを集めてください。'
      Course 4 Binary 1: 1 と 0 のバイナリ文字列を受け取り、農民に指示を与えて、左から右、上から下へ移動し、数値がゼロである場合に、正方形をぬりつぶす関数があります。与えられたコードを実行して、農民がバイナリを使用して、どのようにイメージを描画するかを見て下さい。
      Course 4 Binary 3: たった一つのバイナリ文字列をループして、このパターンを描けるかな？
      Course 4 Binary 5 (copy 1): どのバイナリ文字列が１０回ループしたら、この絵を描くのかな？
      Course 4 Binary 5: どのバイナリ文字列が１０回ループしたら、この絵を描くのかな？
      Course 4 Binary 6 (copy 1): どのバイナリ文字列が１０回ループしたら、この絵を描くのかな？
      Course 4 Binary 6: どのバイナリ文字列が１０回ループしたら、この絵を描くのかな？
      Course 4 Binary 7: どのバイナリ文字列が１０回ループしたら、この絵を描くのかな？
      Course 4 EC 1a: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 1b: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 2a: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 2b: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 2c: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 2d: ルールなし、ヒントなしでちょうせんしてみてね。
      Course 4 EC 3: '前のレベルで学んだことを使って、こんな絵を書いてみよう。ヒント：パラメーターを合体させると、コードはもっと見やすくなるよ。 '
      Course 4 EC 3a: 'すごい挑戦: ルールなし。手がかりなし。挑戦しよう！'
      Course 4 Maze 1: Angry Birdをぶたまでつれていって！
      Course 4 Maze 2: ブタの所までつれていって。でも、TNTばくだんに気をつけて！
      Course 4 Maze 3: 'アングリーバードが、ブタの所に行くよう、プログラムしてね。 '
      Course 4 Maze 4: 使うブロックの数が少なくてすむように、「くりかえし」ブロックを使って見て！
      Course 4 Maze 5: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 Maze 6: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 Play Lab For Loops 2: こんどは、1から100までの奇数（きすう）だけ、数えるようにして下さい。
      Course 4 Play Lab Params 1: '`jump` 関数（かんすう）は、犬を上に100ピクセル ジャンプさせます。プログラムを実行して、すべてのハタを集めてください。'
      Course 4 Play Lab Params 10: "ゲームを面白くするために `level_up` （レベルアップ）関数を用意しました。\n「もし」ブロックを使って、`player_score` が、一定の数より大きくなったら、 `level_up` 関数を よび出すようにプログラムしてください。\nたとえば：'player_score' > 6\nネコに勝って、レベルが 3 になったら、次のパズルに進みます。 "
      Course 4 Play Lab Params 2: "さっきのジャンプでは、とどかない高い所にハタがあります。\n「上矢じるしキー」と「下矢じるしキー」で、それぞれ、ちがう高さのジャンプを行わせましょう。\n `jump`関数に「高さ」パラメータを追加して、ちがう高さのジャンプが出来るようにして下さい。\nそして、「上矢じるしキー」が おされたら、200ピクセルのジャンプをして、「下矢じるしキー」が おされたら100 ピクセルのジャンプをします。\n"
      Course 4 Play Lab Params 3: '全部のキャラがジャンプができるように、 `jump` 関数に `actor` （アクター、キャラの番号を入れる）パラメータを追加しました。それぞれのキャラは、1 から始まる番号で表されます。`actor` パラメータの番号のキャラがジャンプをするように、`jump` 関数を直してください。 '
      Course 4 Play Lab Params 4: "`patrol` （パトロール）関数を編集して、ネコが上下に 400 ピクセル動きつづけるようにして下さい。"
      Course 4 Play Lab Params 5: '`patrol` 関数を編集して、「キャラ」パラメータを加えてください。そして、画面にいる3人のキャラを全部うごかします。3人のキャラは、それぞれ1、2、3 番です。'
      Course 4 Play Lab Params 6: "こんどは、 `patrol` 関数に「スピード」パラメータを追加してください。「スピード」パラメータを「スピード」ブロックに使って、他のキャラよりも早く、ペンギンがハタを取るようにして下さい。\nヒント： `actor' 2がペンギンです。"
      Course 4 Play Lab Params 7: "さあ、お楽しみです。\nまず、プログラムをよく見て、それぞれのブロックが何をしているのか考えてください。\nそのあとで、矢じるしキーを使って、犬をコントロールし、すべてのハタを集めてください。\n注意：プログラムは、いじらないで下さい。"
      Course 4 Play Lab Params 8: 犬が他のキャラにぶつかったら、左上に もどって やり直しにしましょう。「キャラ1が どれかのキャラにさわったら」ブロックと「キャラ1は左上に」ブロックを上手く使ってください。
      Course 4 Play Lab Params 9: "`score_points` （スコア― ポイント）関数は、画面にスコアを書き出します。スコアは、`player_score`（プレイヤー スコア）の数です。\n`score_points` 関数に、「点」パラメータを追加して下さい。そして、`player_score` に、点が 足されるようにして下さい。\nさいごに、犬がネコにパイをぶつけたら、スコアが ふえて、ネコが犬にサンドイッチをぶつけたらスコアが へるようにします。\nヒント：スコアをへらす時は、-1 を使います。\n注意：プログラムを作り終わったら、「実行」をクリックします。 犬が 6 点取ったら、次のパズルに進みます。 "
      Course 4 Play Lab Vars 1: "プログラムは出来ていますので、「実行（じっこう）」ボタンをおして、ゲームをはじめてください。\nこのゲームでは、あなたは犬です。ネコよりも多くのハタを集めたいと思っています。\n犬を動かすには、「下矢じるしキー」を使います。犬をうごかして遊んだら「完了（かんりょう）」ボタンをおして下さい。"
      Course 4 Play Lab Vars 2: "さっきのゲームは、ネコが早すぎだったよね！\n'dog_speed'（ドッグ スピード） は、犬の早さを決めます。'cat_speed（キャット スピード）は、ネコの早さを決めます。\n'dog_speed'の数を大きくして、ネコより多くのハタを集めましょう。先に、10 ハタを集めたほうが勝ちです！"
      Course 4 Play Lab Vars 3: "「左矢じるしキー」と「右矢じるしキー」で左右に動きます。「上矢じるしキー」はジャンプです。\nすべてのハタを集めてください。"
      Course 4 Play Lab Vars 4: "「height（ハイト、高さ）」変数は、犬がどれくらいの高さジャンプするかを決めています。\n犬がすべてのハタを集められるように、「height」の数を大きくしてください。"
      Course 4 Play Lab Vars 5: 'さあ、ゲームを作りましょう！まずは点数です。「points （ポイント、点数）」を 10 にしてください。 '
      Course 4 Play Lab Vars 6: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      Course 4 Play Lab Vars 7: こんどは、ネコがサンドイッチを投げてきます。サンドイッチが犬 (キャラ1) に当たったら、ポイントがへるようにしてください。10点から始めて、点数が０になったら、ゲームオーバーです。
      Course 4 Play Lab Vars 9: "自由時間です！たくさんのブロックがあるので、分類して整理しました。\nこのステージに出てきたブロックや変数だけじゃなく、その他にも、いろいろなブロックがあります。まずは、使えるブロックをすべて見てみましょう。\nそのあとで、 くりかえし、変数、イベントを使って、ゲームやお話を作りましょう。\nヒント: ワークスペース内のすべてのプログラムを見るにはスクロールして下さい。"
      Course 4 Play Labs For Loops 1: "犬が1 から 100 までの数字を話すようにします。\n「キャラ1 言う」ブロックに、 `counter` 変数ブロックを組み合わせて、実行して下さい。"
      Course 4 Play Labs For Loops 2: "こんどは、ネコが1から101までの奇数（きすう）だけ、数えるようにして下さい。\nヒント：奇数とは、1、3、5、・・・のように、2で わり切れない数の事です。"
      Course 4 Play Labs For Loops 3: 同じ時間で、もっと大きな数まで数えられるよう、大きな数ずつカウントします。海ぞくペグレグに、10から1000 まで 10ずつ数えさせて下さい。
      Course 4 Playlab For Loop Freeplay: 'いままで学んだ事をすべて使って、楽しいゲームを作りましょう。'
      Course 4 Playlab For Loops 4b: このままでは、キャラ2はゴールできません。二人ともゴールするためには、 `Actor_2_Counter` を、いくつずつ ふやせば いいでしょう？
      Course 4 Playlab For Loops 5b: くりかえしの「ずつ」の数を調整して、両方のキャラが真ん中の同じ所で止まるようにして下さい。
      Course 4 Playlab For Loops 6b: "実行したら、マダム ユニコーンを出来るだけたくさんクリックします。\nゲームを調整して、24点以上とったら、「完了」ボタンをおして、次のパズルに進みましょう。 "
      Course 4 SCF 1: 用意された関数を仕上げて、4行の六角形を書いて下さい。ぐう数行を右にシフトする方法に注意してください。
      Course 4 SCF 1a: 一番少ないブロック数で、花のミツを全部集めてください。
      Course 4 SCF 1b: 一番少ないブロック数で、全部のハチミツを作ってください。
      Course 4 SCF 2: '前のレベルで学んだことを使って、こんな絵を書いてみよう。ヒント：パラメーターを合体させると、コードはもっと見やすくなるよ。 '
      Course 4 SCF 3: '前のレベルで学んだことを使って、こんな絵を書いてみよう。ヒント：パラメーターを合体させると、コードはもっと見やすくなるよ。 '
      Course 4 SCFL 1: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 SCFL 1a: "スクラットを、ドングリのところまで つれて行って下さい。使うブロックは、出来るだけ少なくしてみてね。\nそれと、氷にヒビが入っているから、気をつけて。"
      Course 4 SCFL 1b: "スクラットを、ドングリのところまで つれて行って下さい。使うブロックは、出来るだけ少なくしてみてね。\nそれと、氷にヒビが入っているから、気をつけて。"
      Course 4 SCFL 2: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 SCFL 3: この図形を書いてみよう！
      Course 4 SCFL 4: この図形を書いてみよう！
      Course 4 SCFL 5: この図形を書いてみよう！
      Course 4 SCFL 6: この図形を書いてみよう！くりかえしを、1回だけ使って書けますか？
      Course 4 SCFL 7: アーティストは波にのります！この図形を書いて下さい！
      Course 4 SCV 1: "この図形を書いて下さい。\nこの中には、ギザギザの線で書かれた五角形が、10コ書かれています。\nギザギザ線の書き方：\n14ピクセルの直線を引き、左に72度まがります。\nそのあと、14ピクセルの直線を引き、右に72度まがります。\nこれを5回くりかえします。\nはじめに「太さは1」プロックを追加して、線の太さを1にしてください。\nヒントが ほしいときは、ランプをクリックしてね。"
      Course 4 SCV 2: "この図形を書いて下さい。\nこの中には、ギザギザの線で書かれた五角形が、10コ書かれています。\nギザギザ線の書き方：\n14ピクセルの直線を引き、左に72度まがります。\nそのあと、14ピクセルの直線を引き、右に72度まがります。\nこれを5回くりかえします。\nはじめに「太さは1」プロックを追加して、線の太さを1にしてください。\nヒントが ほしいときは、ランプをクリックしてね。"
      Course 4 SCV 3: |-
        おに ごっこです！ネコを つかまえたら2点。ペンギンを つかまえたら3点。10点取ったら勝ちです。
        ネコとペンギンが ぶつかったら、これまで取った点は なくなり、0点になります。
        プロックを追加（ついか）して、ゲームを完成（かんせい）させてください。
        ヒント：犬が「矢じるしキー」で全ての方向に動けるようにして下さい。
        点は `points` 変数（へんすう）で数えます。
        犬はキャラ1。ネコはキャラ2。ペンギンはキャラ3です。
      Course 4 SCV 4: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 SCV 5: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      Course 4 SCV 6: "この図形を書いて下さい。\nこの中には、ギザギザの線で書かれた五角形が、10コ書かれています。\nギザギザ線の書き方：\n14ピクセルの直線を引き、左に72度まがります。\nそのあと、14ピクセルの直線を引き、右に72度まがります。\nこれを5回くりかえします。\nはじめに「太さは1」プロックを追加して、線の太さを1にしてください。\nヒントが ほしいときは、ランプをクリックしてね。"
      Course E MC Conditionals1: 地下は暗いけれども、貴重な資源があります。松明を2つ以上置いて、石炭を2個以上掘りましょう。
      Course1BeePuzzle12: ミツを3つゲットして、ハチミツを2つ作りましょう！
      CourseD_Dance_Party_01: '`新しくつくる`ブロックをワークスペースにドラッグしてひっぱってきてください。それを’セットアップ’ブロックの中につなぎましょう。'
      CourseD_Dance_Party_02: 4小節後にムースが新しい動きを始めるようにしましょう！
      CourseD_Dance_Party_03: では、6小節後にダンサーが新しい動きを始めるようにしましょう！
      CourseD_Dance_Party_04: プログラムに背景エフェクトを追加しましょう。
      CourseD_Dance_Party_05: もう1つ新しいブロックを使用して、ダンサーの動きを2小節ごとに変えてみましょう。
      CourseD_Dance_Party_06: '’backup_dancer1’という名前のバックダンサーを追加して、猫と一緒に踊らせてみましょう。'
      CourseD_Dance_Party_08: 両方のバックダンサーを同じ大きさにできますか？
      CourseD_Dance_Party_09: ダンサーの色を変更するには`色合いを設定`ブロックを使用します。
      CourseD_Dance_Party_10: '`続けて始める`を使用して、他のダンサーも音楽に反応させてみましょう。'
      CourseD_Dance_Party_11: '''上キーが押されたとき''ブロックでは、上矢印キーが押された時に実行するコードを設定できます。上矢印キーが押されると、ダンサーが素早い動きをするよう設定してみましょう。'
      CourseD_Dance_Party_11_5: '”すべてのアヒル”ブロックを使用して、アヒルを全員一緒に踊らせましょう。'
      CourseD_Dance_Party_11b: 右矢印キーを押したときにロボットが1回"ドロップ"するようにし、上矢印キーを押したら"フロス"するようにしましょう。 ドロップとフロスを、できるだけ早く繰り返しましょう！
      CourseD_Dance_Party_12: グルーブをつづけて！自分だけのダンスを作成して、友達と共有しましょう。
      CourseE_HOC 2018 Level_1: チェストからボートを回収しましょう。
      CourseE_HOC 2018 Level_10: この海底遺跡の入り口にたどりつきましょう。
      CourseE_HOC 2018 Level_11: '海底遺跡の中にある海晶ブロックでコンジットを作りましょう。'
      CourseE_HOC 2018 Level_2: 'ドックの奥に向かいましょう。'
      CourseE_HOC 2018 Level_3: '開けた海をわたってタラにたどりつきましょう。'
      CourseE_HOC 2018 Level_4: ループを使ってイルカにたどりつきましょう。
      CourseE_HOC 2018 Level_5: 沈没船を探検して、チェストにたどりつきましょう。
      CourseE_HOC 2018 Level_6: 氷を通って鮭にたどりつきましょう。
      CourseE_HOC 2018 Level_7a: これらの海底遺跡からチェストを見つけましょう。
      CourseE_HOC 2018 Level_9b: 'サンゴを道しるべにして、お宝にたどりつきましょう。'
      CourseF_PlayLab_vars10: "自由時間です！たくさんのブロックがあるので、分類して整理しました。\nこのステージに出てきたブロックや変数だけじゃなく、その他にも、いろいろなブロックがあります。まずは、使えるブロックをすべて見てみましょう。\nそのあとで、 くりかえし、変数、イベントを使って、ゲームやお話を作りましょう。\nヒント: ワークスペース内のすべてのプログラムを見るにはスクロールして下さい。"
      CourseF_PlayLab_vars2: "さっきのゲームは、ネコが早すぎだったよね！\n'dog_speed'（ドッグ スピード） は、犬の早さを決めます。'cat_speed（キャット スピード）は、ネコの早さを決めます。\n'dog_speed'の数を大きくして、ネコより多くのハタを集めましょう。先に、10 ハタを集めたほうが勝ちです！"
      CourseF_PlayLab_vars3: "「左矢じるしキー」と「右矢じるしキー」で左右に動きます。「上矢じるしキー」はジャンプです。\nすべてのハタを集めてください。"
      CourseF_PlayLab_vars4: "「height（ハイト、高さ）」変数は、犬がどれくらいの高さジャンプするかを決めています。\n犬がすべてのハタを集められるように、「height」の数を大きくしてください。"
      CourseF_PlayLab_vars5: 'さあ、ゲームを作りましょう！まずは点数です。「points （ポイント、点数）」を 10 にしてください。 '
      CourseF_PlayLab_vars6: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      CourseF_PlayLab_vars7: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      CourseF_PlayLab_vars8: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      CourseF_PlayLab_vars9: こんどは、ネコがサンドイッチを投げてきます。サンドイッチが犬 (キャラ1) に当たったら、ポイントがへるようにしてください。10点から始めて、点数が０になったら、ゲームオーバーです。
      Crack Random Substitution: 'やり方:'
      Crack Random Substitution_2018: 'やり方:'
      Crack Random Substitution_2019: 'やり方:'
      Crack a Caesar Cipher: 'やり方:'
      Crack a Caesar Cipher_2018: 'やり方:'
      Crack a Caesar Cipher_2019: 'やり方:'
      Dance Party 7 - Validated: '「私のベル」という新しいベルスプライトを追加して、それがクリックされたときに、すべてのエイリアンに同じダンスの動きをさせようにします。'
      Dance Party 7: '「私のベル」という新しいベルスプライトを追加して、それがクリックされたときに、すべてのエイリアンに同じダンスの動きをさせようにします。'
      Dance Party 7_2019: '「私のベル」という新しいベルスプライトを追加して、それがクリックされたときに、すべてのエイリアンに同じダンスの動きをさせようにします。'
      Dance Party 7_simple: '「私のベル」という新しいベルスプライトを追加して、それがクリックされたときに、すべてのエイリアンに同じダンスの動きをさせようにします。'
      Dance Party Freeplay: さあ、あなたのエイリアンディスコを作ろう！
      Dance Party Freeplay_2019: さあ、あなたのエイリアンディスコを作ろう！
      Dance Party Freeplay_simple: さあ、あなたのエイリアンディスコを作ろう！
      Dance_Party_01: '`新しくつくる`ブロックをワークスペースにドラッグしてひっぱってきてください。それを’セットアップ’ブロックの中につなぎましょう。'
      Dance_Party_01_low: '`新しくつくる`ブロックをワークスペースにドラッグしてひっぱってきてください。それを’セットアップ’ブロックの中につなぎましょう。'
      Dance_Party_02: 4小節後にムースが新しい動きを始めるようにしましょう！
      Dance_Party_03: では、6小節後にダンサーが新しい動きを始めるようにしましょう！
      Dance_Party_04: プログラムに背景エフェクトを追加しましょう。
      Dance_Party_05: もう1つ新しいブロックを使用して、ダンサーの動きを2小節ごとに変えてみましょう。
      Dance_Party_06: '’backup_dancer1’という名前のバックダンサーを追加して、猫と一緒に踊らせてみましょう。'
      Dance_Party_08: 両方のバックダンサーを同じ大きさにできますか？
      Dance_Party_09: ダンサーの色を変更するには`色合いを設定`ブロックを使用します。
      Dance_Party_10: '`続けて始める`を使用して、他のダンサーも音楽に反応させてみましょう。'
      Dance_Party_11.5_test: '”すべてのアヒル”ブロックを使用して、アヒルを全員一緒に踊らせましょう。'
      Dance_Party_11: '''上キーが押されたとき''ブロックでは、上矢印キーが押された時に実行するコードを設定できます。上矢印キーが押されると、ダンサーが素早い動きをするよう設定してみましょう。'
      Dance_Party_11_5: '”すべてのアヒル”ブロックを使用して、アヒルを全員一緒に踊らせましょう。'
      Dance_Party_11b: 右矢印キーを押したときにロボットが1回"ドロップ"するようにし、上矢印キーを押したら"フロス"するようにしましょう。 ドロップとフロスを、できるだけ早く繰り返しましょう！
      Dance_Party_12: グルーブをつづけて！自分だけのダンスを作成して、友達と共有しましょう。
      Food Fight!: "ゲームを面白くするために `level_up` （レベルアップ）関数を用意しました。\n「もし」ブロックを使って、`player_score` が、一定の数より大きくなったら、 `level_up` 関数を よび出すようにプログラムしてください。\nたとえば：'player_score' > 6\nネコに勝って、レベルが 3 になったら、次のパズルに進みます。 "
      Function intro Ryan: '「橋をかける」関数を 2 回使って、たいまつまでの道を作りましょう。'
      Function intro Ryan_2019: '「橋をかける」関数を 2 回使って、たいまつまでの道を作りましょう。'
      HOC 2018 Level_1: チェストからボートを回収しましょう。
      HOC 2018 Level_10: この海底遺跡の入り口にたどりつきましょう。
      HOC 2018 Level_11: '海底遺跡の中にある海晶ブロックでコンジットを作りましょう。'
      HOC 2018 Level_12: 'あなたの好きなように水中の世界を作ってみましょう!'
      HOC 2018 Level_2: 'ドックの奥に向かいましょう。'
      HOC 2018 Level_3: '開けた海をわたってタラにたどりつきましょう。'
      HOC 2018 Level_4: ループを使ってイルカにたどりつきましょう。
      HOC 2018 Level_5: 沈没船を探検して、チェストにたどりつきましょう。
      HOC 2018 Level_6: 氷を通って鮭にたどりつきましょう。
      HOC 2018 Level_7a: これらの海底遺跡からチェストを見つけましょう。
      HOC 2018 Level_9b: 'サンゴを道しるべにして、お宝にたどりつきましょう。'
      Infinity_catch: やじるしキーをつかってアナのところまでエルサ ("２”のキャラ) をうごかせますか？
      Infinity_finale: すきなものをつくってきょうゆうしましょう！
      Infinity_move_collide: ヒロは"１"のキャラです。ヒロをベイマックスのところまでうごかして、タッチしたらおとをさいせいさせましょう。
      Infinity_move_directions: ベイマックスは"２"のキャラです。「うごかす」ブロックをついかし、やじるしキーをつかいながらベイマックスをうごかします。ほかの２人のキャラにタッチさせましょう。
      Infinity_move_right: ヒロは"１"のキャラです。「うごかす」ブロックをつかって、ヒロをベイマックスのところまでうごかしましょう。
      Infinity_repeat: '「いつまでもくりかえす」ブロックをつかって、アナをじょうげに400ピクセルうごかしましょう。'
      Infinity_say: '「いう」ブロックをつかって、アナに「Hi there.」といわせてみましょう。'
      Infinity_shoot: ベイマックスは"２"のキャラです。ベイマックスにヒロのほうにロケットをうたせてください。
      Infinity_shoot_directions: ヒロは"3"のキャラです。4人のキャラのそれぞれにむかって、ヒロに何か撃たせてみましょう。１回撃ったら、次のを撃つ前に１秒待ちましょう。
      Infinity_touch_faster: さらにおおくのゆきのけっしょうをタッチしましょう！
      Infinity_touch_four: アナをじょうげさゆうにうごかして、４つのゆきのけっしょうそれぞれにタッチしましょう。
      Infinity_touch_score: アナがゆきのけっしょうにタッチしたときに、ポイントをかくとくするようにしましょう。「実行」をクリックして、それぞれのゆきのけっしょうにいちどタッチするようにうごかしましょう。
      Inspirational Artwork: "自由に作ってみよう！あなたは、このようなパターンの作りかたを、すべて学びました。この絵が気に入ったら、にたデザインを作ってみて。自分のすきなように、作り直してもいいよ。\nヒントがほしいときは、ランプをクリックしてね。 "
      K-1 Artist 1 Assessment 1: 短い線を上に、長い線を右に描いてください！
      K-1 Artist Loops 1: 東に四回動かして、この線を描いてください。
      K-1 Artist Loops 2: ループを使用して、同じ線を描くことができますか。
      K-1 Artist Loops 3: これらのブロックをループさせて六本の線を描けますか？
      K-1 Artist Loops 4: ループでこの城の上部を描くことはできますか？
      K-1 Artist Loops 5: 何を四回ループさせるとこの階段を描けますか？
      K-1 Artist Loops 6: 'これは二回のループが必要です。一つは階段をのぼり、もう一つはおります。'
      K-1 Artist Loops 7: この２つのループでこのパターンを終わらせられますか？
      K-1 Artist Loops 8: この階段にはもっと長い段差があります。
      K-1 Artist Loops 9: 課題：階段を描くのにループを使ってください。
      K-1 Artist Loops Free Play: フリータイムです。何か面白いものを描いてください！
      K-1 Artist1 1: １本の線を使って、男性の足を描いてください。
      K-1 Artist1 10: 描くのとジャンプを使って宝物までの点線を作ります。
      K-1 Artist1 2: ２本の線を使って、猫のヒゲを描いてください！
      K-1 Artist1 3: 東に二本、北に二本の線を描いて家を完成させます！
      K-1 Artist1 4: 山のかたちに線を描いてお城を完成させます！
      K-1 Artist1 5.5: 短い線を使って、お城の３つ目のタワーを完成させてください。
      K-1 Artist1 5: ２本の線を使って、このお花の茎を描いてください！
      K-1 Artist1 6: ジャンプするブロックを使って、絵を完成させてください
      K-1 Artist1 7: ジャンプ ブロックを使用して、何も描かずに移動します。上にジャンプし、線を描きます。
      K-1 Artist1 8: ジャンプのブロックと描くブロックの両方を使って、点線を描きます。
      K-1 Artist1 9: 線を引いたりジャンプしたりして、点線を作ってください。
      K-1 Artist1 Assessment 1: 短い線と、長い線を描いてください！
      K-1 Artist1 Assessment 2: 短い点線を描いてください!
      K-1 Artist2 1: 三角形の下に、四角を描いてください。
      K-1 Artist2 2: ジャンプして、家の隣に四角を描いてください。
      K-1 Artist2 3: 四角の上に、別の四角を描いてください。
      K-1 Artist2 4: 長方形を描いて、橋を完成させてください。
      K-1 Artist2 5: 長方形を描いて、橋のささえを完成させましょう。
      K-1 Artist2 6: ２つの四角を描いて、長方形を作ってください！
      K-1 Artist2 Assessment1: '課題：ほかの四角の隣に四角を描きます。'
      K-1 Artist2 Free Draw: なんでも好きなものを描いてみましょう！
      K-1 Artist2_7: 長方形を描いて、たんすに一番上のひきだしをつけてあげましょう！
      K-1 Bee 1: 私を花のところまで動かして、みつを手に入れて、それからハチの巣のところまで動かして、ハチミツを作ってください。
      K-1 Bee 10: みつを4つゲットして、ハチミツを2個作りましょう！
      K-1 Bee 11.5: みつを4つゲットして、ハチミツを4個を作りましょう！
      K-1 Bee 11: みつを3つゲット手して、ハチミツを1個作りましょう。
      K-1 Bee 12: みつを3つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee 13: みつを3つゲットして、ハチミツを1個作りましょう！
      K-1 Bee 14: 私をみつのところまで動かして、みつを拾って、ハチの巣のところまで動かして、そしてハチミツを作りましょう。
      K-1 Bee 15: みつを2つゲットして、ハチミツを2個作りましょう！
      K-1 Bee 2: 私を花のところまで動かして、みつを手に入れて、それからハチの巣のところまで動かして、ハチミツを作ってください。
      K-1 Bee 3: 私を花のところまで動かして、みつを手に入れて、それからハチの巣のところまで動かして、ハチミツを作ってください。
      K-1 Bee 4: みつを2つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee 5: みつを3つゲットして、ハチミツを3個作りましょう！
      K-1 Bee 6: みつを2つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee 7: みつを3つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee 8: みつを2つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee 9: みつを2つゲットして、ハチミツを2個を作りましょう！
      K-1 Bee Assessment 1: みつをゲットしてハチミツを作ってください!
      K-1 Bee Assessment 2: みつをゲットしてハチミツを作ってください!
      K-1 Bee Loops 1: みつをゲットしてハチミツを作ってください!
      K-1 Bee Loops 10: 繰り返しを使って、みつを集めて、はちみつを作って、移動してください!
      K-1 Bee Loops 11: '課題: ループを使って、みつを集めてはちみつを作ってください!'
      K-1 Bee Loops 12: '課題: 繰り返しを使って、みつを集めて、はちみつを作って、移動してください!'
      K-1 Bee Loops 2: 繰り返しを使って移動して、みつを集めて、はちみつを作ってください!
      K-1 Bee Loops 3: 繰り返しを使ってみつを集めて、はちみつを作ってください!
      K-1 Bee Loops 4: 繰り返しを使って、みつを集めて、はちみつを作って、移動してください!
      K-1 Bee Loops 5: 繰り返しを使って、みつを集めてはちみつを作ってください!
      K-1 Bee Loops 6: 繰り返しを使って、みつを集めて、はちみつを作って、移動してください!
      K-1 Bee Loops 7: 繰り返しを使ってみつを集めて、はちみつを作ってください!
      K-1 Bee Loops 8: 繰り返しを使ってみつを集めて、はちみつを作ってください!
      K-1 Bee Loops 9: 繰り返しを使って、みつを集めて、はちみつを作って、移動してください!
      K-1 Bee Loops Assessment 1: みつのところまでいってはちみつを作り、ループをつかって移動します！
      K-1 Bee Loops Assessment 2: はちみつを作るため、ループを使ってみつのところまで行きましょう。
      K-1 Bee Puzzle 12: ミツを3つゲットして、ハチミツを2つ作りましょう！
      K-1 Building a Foundation Assessment: 三階建てのピラミッドを作ってください、他に指示はありませんので、ピースを使っていろいろ試してみましょう。
      K-1 Maze 10: 'TNT の箱をよけつつ、豚さんのところまで連れていってください！'
      K-1 Maze 11: '細い道を通って、おかしなところにいる豚さんのところまで連れていってください。TNT の箱に乗っかると爆発するから気をつけてね。ヒント：豚さんは南の方向にいるよ。'
      K-1 Maze 2: 東に動かして、豚さんのところまで連れていってください！
      K-1 Maze 3: 南に動かして、豚さんのところまで連れていってください！
      K-1 Maze 4: 北に動かして、豚さんのところまで連れていってください！
      K-1 Maze 5: 東に動かして、豚さんのところまで連れていってください！
      K-1 Maze 6: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      K-1 Maze 7: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      K-1 Maze 8: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      K-1 Maze 9: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      K-1 Maze Assessment 1: 課題：私をブタのところまで連れて行ってください！
      K-1 Maze Assessment 12: 課題レベル
      K-1 Maze Assessment 13: 課題レベル
      K-1 Maze Assessment 2: 課題：私をブタのところまで連れて行ってください！
      K-1 Maze Loops 1: ブタを捕まえたい！
      K-1 Maze Loops 10: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 11: "豚さんのところまで連れていってください！繰り返しを使いましょう。"
      K-1 Maze Loops 12: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 2: リピートブロックを使って豚のところまで連れていってください。
      K-1 Maze Loops 3: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 4: ブタを捕まえたい！
      K-1 Maze Loops 5: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 6: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 7: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 8: 豚さんのところまで連れていってください！繰り返しを使いましょう。
      K-1 Maze Loops 9: ブタを捕まえたい！
      K-1 Maze Loops Assessment 1: アセスメント　ーー　ループを使って豚のところまで連れてって！
      K-1 Maze Loops Assessment 2: アセスメント　ーー　ループを使って豚のところまで連れてって！
      K-1 Maze Multi 14: 課題レベル
      K-1 Maze Multi 15: 課題レベル
      K-1 Maze Sequence Assessment 1: |-
        これはテストです！
        一つの方向に進み、次は違う方向に進んで、豚さんのところまで連れていってください。
      K-1 Maze Sequence Assessment 2: "これはテストです！\n一つの方向に進み、次は違う方向に進んで、豚さんのところまで連れていってください。"
      K-1 Maze debug Assessment 1: 課題：このレベルをデバッグするのに、ブロックを並べ替えたり追加したりして私をブタのところまでつれていってください。
      K-1 artist 1 level 10: ジャンプのブロックと描くブロックの両方を使って、点線を描きます。
      K-1 artist 1 level 9: 三本の線を使ってこれを描いてください。
      K-1 maze debug 1: プログラムで、ぼくがブタさんのところに、いけるようにして！
      K-1 maze debug 10: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K-1 maze debug 11: |-
        これはテストです!\r
        ブロックを並べ替えたり足したりして、ブタのところに連れていってください!
      K-1 maze debug 2: 足りないブロックを追加して、僕をブタのところに連れていってください!
      K-1 maze debug 3: 僕がブタに会えるように、間違いを探して、いらないブロックを消してください!
      K-1 maze debug 4: ブロックを実行してみましょう。そして正しく動くように直してください！間違った方向に進んでいるよ。
      K-1 maze debug 5: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K-1 maze debug 6: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K-1 maze debug 7: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K-1 maze debug 8: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K-1 maze debug 9: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      K2.0 sequence 1: プログラムで、ぼくがブタさんのところに、いけるようにして！
      K2.0 sequence 2: プログラムで、ぼくがブタさんのところに、いけるようにして！
      K2.0 sequence 5: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      K2.0 sequence 6: 足りないブロックを追加して、僕をブタのところに連れていってください!
      K2.0 sequence 9: 'TNT の箱をよけつつ、豚さんのところまで連れていってください！'
      KTest2: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
      Kiki_StarWars_Test_3: テキスト
      Kiki_StarWars_Test_4: テキスト
      Kiki_StarWars_Test_5: テキスト
      Kiki_StarWars_Test_5_Example: テキスト
      MC Agent Freeplay: "**自由にプレイ:**  自分の好きなようにプログラミングしてみましょう!"
      MC HOC 2016 Level 10: 自分だけの Minecraft を作ろう！羊やクリーパーをスポーンさせて、思い通りの動きさせよう！
      MC HOC 2016 Level 2-2: ニワトリが凍っています。「まえにすすむ」と「まがる」ブロックを「出現した時」のスロットに追加して、動かしましょう。
      MC HOC 2016 Level 3: '素晴らしい! ニワトリが動いたね!でも、動きが止まってしまったね。Minecraftのゲーム内だと、ニワトリはずっと歩き続けるのにおかしいね。「ずっとくりかえす」ループを使ってニワトリを動かし続けよう。'
      MC HOC 2016 Level 4: ニワトリがすべて同じ方向に動いているのは変だね。Minecraftのゲームの中では、ニワトリはランダムに動くことで本物のように見せているね。「ランダムに向きを変える」ブロックを使って、ニワトリをランダムに動かそう。
      MC HOC 2016 Level 5: 牛たちが迷子になっているよ!「向かって一歩動く」のブロックを「ずっとくりかえす」ループの中に置いて、右下の草の場所まで連れて行ってあげよう。
      MC HOC 2016 Level 6: ゾンビをスポーン(出現)させよう。「スポーン」ブロックを使って、夜が来たら 3 体のゾンビがスポーンするようにプログラムしよう。そして、ゾンビたちがあなたを追いかけるようにして、朝まで生き延びよう。
      MC HOC 2016 Level 8: 羊に向かう道が石の壁(かべ)でふさがれているね。ラッキーなことに、ここにクリーパーがいるよ。クリーパーは触れると、しばらくしてから爆発(ばくはつ)するよ。クリーパーの爆発で壁を吹き飛ばして、羊のところへ行こう!
      MC HOC 2016 New Drop: Minecraft では、羊は羊の毛を落とします。「落とす」のブロックを「使用された時」の中に置おいて、それから歩いて行って羊を使ってアイテムを落とさせよう。
      MC HOC 2016 New Spawn: Minecraftのゲーム内では、「スポーン」とはワールドに何かを出現(しゅつげん)させるすることを意味しているよ。「スポーン」ブロックを「実行した時」の下に置いて、ゲームのスタート時に何かがスポーンするようにしよう。
      MC HOC 2016 New Walk: まずは、世界を探検(たんけん)してみよう!矢印キーで移動して、スペースバーを押すかゲームボードをタップするとアイテムやキャラクターを「使用(しよう)」できるよ。ドアを使用して家の中に入ろう。
      MC HOC 2016 SCORE LEVEL: ゲームに欠かせないものといえば、得点(とくてん)だよね。このレベルから、何かがあったときに得点を追加(ついか)できるようになるよ。このレベルでは、アイアンゴーレムと追いかけっこをするゲームを作ってみよう。「スコアに 1 追加」ブロックを使って、捕まえた時に 1 ポイント獲得できるようにしましょう。5 ポイント獲得で勝利だよ!
      MC HOC 2016 Village Test: 大変だ!ゾンビに囲まれてしまった!アイアンゴーレムをプログラムして、ゾンビを追いかけて攻撃(こうげき)するようにしよう!
      MC_HOC_2017_01_Cole: このマップでは、すべての道具を集める必要があります。**矢印キー** を使って動き、道に置いてあるチェストまでたどり着くとクリアです。
      MC_HOC_2017_01_RETRY: 'Agent を重量感知板の上まで動かしたあと「実行」ボタンを押して、矢印キーでプレイヤーを動かし、家の外にあるチェストを回収しましょう。'
      MC_HOC_2017_01_RETRY_2019: 'Agent を重量感知板の上まで動かしたあと「実行」ボタンを押して、矢印キーでプレイヤーを動かし、家の外にあるチェストを回収しましょう。'
      MC_HOC_2017_02: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_02_Cole: 'Agent を重量感知板まで動かして、{currentPlayerName} が地図にたどり着けるようにしましょう。'
      MC_HOC_2017_02_Cole_2019: 'Agent を重量感知板まで動かして、{currentPlayerName} が地図にたどり着けるようにしましょう。'
      MC_HOC_2017_02_Kiki: Agent を重量感知板の上まで動かして、プレイヤーをオレンジのマスまで動かしましょう。
      MC_HOC_2017_02_Will: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_03_Cole: 'Agent にゲートを開けさせるコードを書きましょう。'
      MC_HOC_2017_03_Cole_2019: 'Agent にゲートを開けさせるコードを書きましょう。'
      MC_HOC_2017_03_Kiki: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04: 前のパズルのループを変えて、Agent がこの川の幅の広いところに道を作るようにしましょう。
      MC_HOC_2017_04POINT5_Cole: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04POINT5_RYAN: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04POINT5_RYAN_2019: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04_Cole: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04_Cole_2019: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_04_Kiki: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_05: 関数を使って、Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_05_Cole: プレイヤーをシャベルまで動かしましょう。
      MC_HOC_2017_05_Cole_2019: プレイヤーをシャベルまで動かしましょう。
      MC_HOC_2017_05_Josh: プレイヤーをシャベルまで動かしましょう。
      MC_HOC_2017_05_Kiki: プレイヤーをオレンジ色のマスまで動かしましょう。
      MC_HOC_2017_06_Cole: このコードを書きかえて、Agent が川に橋をかけるようにしましょう。
      MC_HOC_2017_06_Cole_2019: このコードを書きかえて、Agent が川に橋をかけるようにしましょう。
      MC_HOC_2017_06_Josh: このコードを書きかえて、Agent が川に橋をかけるようにしましょう。
      MC_HOC_2017_06_Kiki: このコードを書きかえて、Agent が川に橋をかけるようにしましょう。
      MC_HOC_2017_07_Cole: 氷を破壊して、{currentPlayerName} がトロッコにたどり着けるようにしましょう。
      MC_HOC_2017_07_Cole_2019: 氷を破壊して、{currentPlayerName} がトロッコにたどり着けるようにしましょう。
      MC_HOC_2017_07_Kiki: 関数を使って、オレンジ色のマスまでの道を作りましょう。
      MC_HOC_2017_07a_Kiki: オレンジ色のマスまでの道を作りましょう。
      MC_HOC_2017_08_Cole: 用意された関数を、このバイオームに合うように変えましょう。
      MC_HOC_2017_08_Kiki: 関数を、このパズルに合うように変えましょう。
      MC_HOC_2017_08_RY: 関数を使って、溶岩をわたれる道を見つけましょう。
      MC_HOC_2017_08_Will: 関数を使って、溶岩をわたれる道を見つけましょう。
      MC_HOC_2017_09_Cole: プレイヤーの通り道を作るように Agent をプログラミングしましょう。
      MC_HOC_2017_09_Kiki: プレイヤーが重量感知板までたどり着けるように Agent をプログラミングしましょう。
      MC_HOC_2017_10_Cole: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_Cole_old: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_Kiki: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_RETRY: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_RETRY_2019: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_RYAN: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_10_RYAN2: このトロッコを完成させる関数を作りましょう。
      MC_HOC_2017_13_Cole: "**自由にプレイ:**  自分の好きなようにプログラミングしてみましょう!"
      MC_HOC_2017_4.5v2: Agent を重量感知板の上まで動かしましょう。
      MC_HOC_2017_Ali: 関数を使って、溶岩をわたれる道を見つけましょう。
      MC_HOC_2017_Ali_2019: 関数を使って、溶岩をわたれる道を見つけましょう。
      MC_HOC_2017_FP10x10: "**自由にプレイ:** このステージにあるすべてのダイヤモンドを集められるか挑戦してみましょう!"
      MC_HOC_2017_FP10x10_RE: "**自由にプレイ:** このステージにあるすべてのダイヤモンドを集められるか挑戦してみましょう!"
      MC_HOC_2017_FP20x20: "**自由にプレイ:**  自分の好きなようにプログラミングしてみましょう!"
      MC_HOC_2017_FP20x20_2019: "**自由にプレイ:**  自分の好きなようにプログラミングしてみましょう!"
      MC_HOC_2017_Ryan_03: ここではループを使って、Agent が水の中にブロックを置いて川に橋をかけるようにしてみましょう。
      MC_HOC_2017_Ryan_05: これらのサボテンを破壊して、プレイヤーがゴールにたどり着けるようにしましょう。
      MC_HOC_Kiki_02: Agent を重量感知板の上まで動かしましょう。
      Mike Test Bee Conditionals 1: ハチは花と蜂の巣を見分けることができません。花から蜜を集めるために、まず花か蜂の巣かを確認しましょう。
      NEW Course 4 Artist Functions 1: '「くりかえし」ブロックを使って、一辺（いっぺん）が100ピクセルの正方形を書いてください。'
      NEW Course 4 Artist Functions 11: "`draw a line of squares` （ドロー ア ライン オブ スクエアー、正方形をならべて書く）関数を作ります。\n `draw a square 20` （ドロー ア スクエア 20、正方形20を書く）関数は、正方形を一つ書く関数です。これを上手く使って、 `draw a line of squares` 関数を仕上げて、6つの正方形を書くようにしてください。"
      NEW Course 4 Artist Functions 12: さっきのパズルの `draw a line of squares` 関数を上手く使って、この図形を書いてください。
      NEW Course 4 Artist Functions 13: 'こんどは `draw a line of squares` 関数を上手く使って、星の形を書いてください。  '
      NEW Course 4 Artist Functions 14: '自由時間です。カッコイイ絵を書いて、友だちに見せよう！ '
      NEW Course 4 Artist Functions 2: それぞれ、20ピクセル離（はな）れた、３つの四角形を書けますか？ヒント：それぞれの四角形は100ピクセルの大きさです。
      NEW Course 4 Artist Functions 3: "新しいブロック `function` （ファンクション、関数、かんすう）ブロックです。関数の名前は `draw a square` （ドロー ア スクエア、四角形を書く）です。\n「編集（へんしゅう）」をクリックして、1辺100ピクセルの四角形を書く関数を作ってください。関数を作り終えたら、「閉じる（とじる）」をクリックします。"
      NEW Course 4 Artist Functions 4: '`draw a square` 関数を使って、この図形を書いてください。'
      NEW Course 4 Artist Functions 7: '関数ブロックの使いかたは分かりましたか？今、 `draw a square` 関数は、100ピクセルの大きさの正方形を書きますが、これを200ピクセルの大きさの正方形を書くように、編集してください。ヒント: `draw a square` 関数の「編集」をクリックしてください。編集が終わったら「閉じる」をクリックします。 '
      NEW Course 4 Artist Functions 8: こんどは、 `draw a triangle` （三角形を書く）関数を作ります。100ピクセルの三角形を書くように、 `draw a triangle`関数を編集（へんしゅう）して下さい。
      NEW Course 4 Artist Functions 9: 1 つだけブロックを足して、この図形を書いて下さい。
      NEW Course 4 Artist Params 1: 一辺の長さが50 ピクセルの正方形を書く関数を作りましょう。「編集（へんしゅう）」をクリックして始めて下さい。
      NEW Course 4 Artist Params 10: "「関数を作る」を使い、六角形を書く関数を作りましょう。\n関数には、「長さ」を表すパラメータを追加して下さい。\nそして、一片の長さが100ピクセルの六角形を書いてください。 "
      NEW Course 4 Artist Params 11: この図形を書くにはどうすればよいでしょう？まず、何角形でも書けるように、関数に「辺数」パラメータを追加してください。そして「辺数」を6にして六角形を書き、それをくりかえして、この図形を仕上げて下さい。
      NEW Course 4 Artist Params 12: "この図形を書いてください。すべての多角形の一辺の長さは100ピクセルです。\nヒント： `length`（レングス）は、一辺の長さを、 `sides` （サイズ）は、辺数（何角形か）を決めるパラメータです。"
      NEW Course 4 Artist Params 12a: さっき使った `draw a polygon` （ドロー ア ポリゴン、多角形を書く）関数と、「カウントする」ブロックのくりかえしを使って、この図形を書いて下さい。
      NEW Course 4 Artist Params 13: "こんどは `draw a polygon` 関数を直します。\n何角形を書くときでも、辺の長さの合計が、200 ピクセルになるようにして下さい。\nヒント：`sides` には、何角形を書くのか（辺数）を入れます。"
      NEW Course 4 Artist Params 14: "`draw a spiral edge` 関数が、「長さ」と「辺数」パラメータを受け取るように編集（へんしゅう）してください。\nそして、この図形を書いてください。"
      NEW Course 4 Artist Params 15: 'フリープレイ: あなたが作った関数と、おまけのブロックがあります。カッコイイのを、書いてみよう！'
      NEW Course 4 Artist Params 2: 50 ピクセルの辺を持つ三角形を書く `draw triangle` 関数を作ります。
      NEW Course 4 Artist Params 3: "こんどは、三角形を五つ書く関数を作りましょう。三角形は 30 ピクセルずつ はなれています。\n"
      NEW Course 4 Artist Params 4: '`length'' （レングス、長さ）の数を かえて、関数を よび出していますね。どのような動きになるか考えながら、実行して下さい。'
      NEW Course 4 Artist Params 5: '`length` パラメーターの入力ブロック「???」に、正しい数を入れてください。五角形の一辺の長さは100 ピクセルです。 '
      NEW Course 4 Artist Params 6: '`length` パラメータは、多角形の一辺の長さを決めます。「???」に正しい数を入れて、 これらの図形を書いてください。三角形と四角形の一辺の長さは100ピクセル、六角形の一辺の長さは75ピクセルです。'
      NEW Course 4 Artist Params 7: "この図形を書いてください！\nヒント：一番小さな三角形のサイズは25ピクセルです。つぎの三角形は25ピクセルずつ大きくします。"
      NEW Course 4 Artist Params 8: この三角形を書く関数は、正しく動きません。 `length` パラメータによって、三角形の大きさが かわるように関数を直してください。そして、25、50、75 の大きさの三角形を書いてください。
      NEW Course 4 Artist Params 9: "`draw a square`関数の「編集」をクリックして、`length` パラメータを追加します。「パラメータを追加（ついか）」ボタンの左のボックスに `length` と入れてから、ボタンをおして下さい。\nそして、正方形を三つ書きます。大きさは、25、50、75ピクセルで、それぞれ100ピクセルはなれています。"
      NEW Course 4 Artist Params inspire: "自由に作ってみよう！あなたは、このようなパターンの作りかたを、すべて学びました。この絵が気に入ったら、にたデザインを作ってみて。自分のすきなように、作り直してもいいよ。\nヒントがほしいときは、ランプをクリックしてね。 "
      NEW Course 4 Artist Vars 12: 前のパズルのアルゴリズムを使って、今度は、辺の長さが150の五角形を書きましょう。
      NEW Course 4 Artist Vars 2: "数のブロックを「セット Length は？」と「？回くりかえす」のところに入れて、50ピクセルの長さの三角形を6つ書いてください。\n"
      NEW Course 4 Artist Vars 4 5: よくできました！今度は、60ピクセルの六角形を描いてみましょう。
      NEW Course 4 Artist Vars 4: "もう一回やってみよう！このカッコイイ六角形を使ったデザインを書くには、「lengh」変数を60にしてみてね。"
      NEW Course 4 Artist Vars 6: "100 ピクセルの辺を持つ五角形のパターンを書くよ！\n「セット length は」に、数のブロックをくっつけて、数は100にします。全部の「前に動く？ピクセル」には「length」ブロックを入れて下さい。\n「length」に入れた数が、その後のプログラムで、どこでも使えることが分ったかな？"
      NEW Course 4 Bee For Loops 1: '「くりかえし」を使って、すべての花からミツを集めましょう。'
      NEW Course 4 Bee For Loops 10a: 'チャレンジの用意はできたかな？くりかえしについて学んだ事を使って、このパズルをクリアして下さい。上手くいくまで、何回でもやり直していいからね。'
      NEW Course 4 Bee For Loops 11: Loop変数で、動きと、みつを集めることをコントロール出来ますか？
      NEW Course 4 Bee For Loops 2: "ミツバチがすべての花のミツを集めるように、プログラムを足してください。\n次のパズルでは、このプログラムをもっと短く書き直しますから、よく見ておいて下さいね。"
      NEW Course 4 Bee For Loops 3: "`counter` （カウンター）を使ったくりかえしで、プログラムがこんなに短くなりました！\nこのプログラムがどのように動くか、よく考えてから、「実行」して見てください。ミツバチは、すべての花のミツを集められるでしょうか？ "
      NEW Course 4 Bee For Loops 4 4: こんどは「counter（カウンター）」回、前にすすんでから、「counter」回、花のミツをとります。「くりかえす」ブロックをもうひとつ足して、このパズルをクリアして下さい。
      NEW Course 4 Bee For Loops 4: 'ミツバチが、すべての花のミツを集めることが出来るように、「???」に正しい数を入れてください。 '
      NEW Course 4 Bee For Loops 5: '`counter` を使ったくりかえしは、カウントダウンにも使えます。5 から 1 まで1ずつカウント ダウンして、花のミツをぜんぶ集めてください。'
      NEW Course 4 Bee For Loops 6: くりかえしのさいごの数字（「ずつ」の前の数字）は、くりかえしのたびに、counterにいくつ数を足すか決めています。2ずつcounterが ふえるようにして、全ての花のミツを集めてください。
      NEW Course 4 Bee For Loops 7: |-
        さあ、こんどは、counter変数と計算ブロックを組み合わせてみよう！
        まず、「counter」変数を使ったくりかえしで、少ないブロック数でミツバチが庭を動き回れるようにしよう。そして、3、6、9、12、15の花のミツを集めるために、counterと計算ブロックを上手く使ってね！
        ヒント：くりかえしのたびに、左にまがるといいよ。
      NEW Course 4 Bee For Loops 8: 3、6、9、12、15の花のミツをとるためには、いくつずつ `counter` を ふやせば良いでしょう？「???」に正しい数をいれて、すべての花のミツを集めてください。
      NEW Course 4 Bee For Loops 9: カウントダウンのくりかえしの場合は、くりかえしの度に、countger変数は、少なくなっていきます。15、12、9、6、3 と花のミツが少なくなっている場合、いくつずつ引けばいいか考えて見ましょう。
      NEW Course 4 Play Lab Params 11: '自由時間です！すきなブロックを使って、楽しいゲームを作ってください。 '
      NEW Course 4 Play Lab Vars 4 5: "「このコードはどんなことができるでしょうか？」「Run」を押して何が起こるか見てみてください。"
      NEW Course 4 Play Labs For Loops 8 Free Play: 'フリープレイの時間です。あなたのツールボックスの中にあるブロックで楽しんで見てください。'
      New Artist Project: カッコイイのを書いてみよう！プログラムは、マイプロジェクトに もどる時に書きこまれるから安心だよ。
      New Basketball Project: 君のバスケットボール ゲームを作ろう。ルールは自由に変更できるよ。完了したら、「完了」ボタンをクリックして、友だちが君のゲームをスマホで試せるようにしよう。
      New Bounce Project: バウンス ゲームを作成してください。デザインやルールは自由に変更できます。終了したら、完了ボタンをクリックしてください。作成したゲームは、他のユーザが携帯電話からアクセスして遊ぶことができます。
      New Course 4 Artist Functions Level 4: '「正方形（せいほうけい）を描く」関数（かんすう）を使って描いてください。'
      New Gumball Project: すきなものをつくってきょうゆうしましょう！
      New Ice Age Project: すきなものをつくってきょうゆうしましょう！
      New Infinity Project: すきなものをつくってきょうゆうしましょう！
      New Minecraft Hero Project: "**自由にプレイ:**  自分の好きなようにプログラミングしてみましょう!"
      New Sports Project: '君の ゲームを作ろう。あなたが全部きめてください。ルールは自由に変更できるし、スポーツをミックスしたり、自由にやろう！完了したら、「完了」ボタンをクリックして、友だちが君のゲームをスマホで試せるようにしよう。'
      Overworld Avoid Monsters: Creeperに出くわすとやっかいです。慎重にやり過ごし、安全な家に戻りましょう。
      Overworld Avoid Monsters_2018: Creeperに出くわすとやっかいです。慎重にやり過ごし、安全な家に戻りましょう。
      Overworld Avoid Monsters_2019: Creeperに出くわすとやっかいです。慎重にやり過ごし、安全な家に戻りましょう。
      Overworld Chop Tree - allthethings: 木はいろいろな物の材料になります。木を切り倒すには、近づいて“ブロックを破壊”コマンドを使います。
      Overworld Chop Tree: 木はいろいろな物の材料になります。木を切り倒すには、近づいて“ブロックを破壊”コマンドを使います。
      Overworld Chop Tree_2018: 木はいろいろな物の材料になります。木を切り倒すには、近づいて“ブロックを破壊”コマンドを使います。
      Overworld Chop Tree_2019: 木はいろいろな物の材料になります。木を切り倒すには、近づいて“ブロックを破壊”コマンドを使います。
      Overworld Chop Trees: 日が暮れる前に家を建てる必要があります。木を3本切り倒しましょう。
      Overworld Chop Trees_2018: 日が暮れる前に家を建てる必要があります。木を3本切り倒しましょう。
      Overworld Chop Trees_2019: 日が暮れる前に家を建てる必要があります。木を3本切り倒しましょう。
      Overworld Free Play 20x20: おめでとうございます！ここで学んだことを使えば、掘ったり、建てたり、作ったり、好きなことができます。
      Overworld Free Play 20x20_2018: おめでとうございます！ここで学んだことを使えば、掘ったり、建てたり、作ったり、好きなことができます。
      Overworld Free Play 20x20_2019: おめでとうございます！ここで学んだことを使えば、掘ったり、建てたり、作ったり、好きなことができます。
      Overworld House Frame Chosen: "家のまだできていないところを、あなたの気にいったものをつかってたててください。\nここでは「繰り返し」コマンドがやくに立つと思いますよ。"
      Overworld House Frame Chosen_2018: "家のまだできていないところを、あなたの気にいったものをつかってたててください。\nここでは「繰り返し」コマンドがやくに立つと思いますよ。"
      Overworld House Frame Chosen_2019: "家のまだできていないところを、あなたの気にいったものをつかってたててください。\nここでは「繰り返し」コマンドがやくに立つと思いますよ。"
      Overworld Move to Sheep: 羊に近づくには"前進"コマンドを追加します。
      Overworld Move to Sheep_2018: 羊に近づくには"前進"コマンドを追加します。
      Overworld Move to Sheep_2019: 羊に近づくには"前進"コマンドを追加します。
      Overworld Place Wall: 家の建設は壁から始まります。リピートループの中に"置く"と"前進"コマンドを入れて、建設を開始しましょう。
      Overworld Place Wall_2018: 家の建設は壁から始まります。リピートループの中に"置く"と"前進"コマンドを入れて、建設を開始しましょう。
      Overworld Place Wall_2019: 家の建設は壁から始まります。リピートループの中に"置く"と"前進"コマンドを入れて、建設を開始しましょう。
      Overworld Plant Crops: 水の両側で作物を育てておくとお腹がすいても困りません。
      Overworld Plant Crops_2018: 水の両側で作物を育てておくとお腹がすいても困りません。
      Overworld Plant Crops_2019: 水の両側で作物を育てておくとお腹がすいても困りません。
      Overworld Powered Minecart: 上出来です！資源をたくさん集め、それなりの家ができました。次はマップの端からドアまでレールを敷きましょう。
      Overworld Powered Minecart_2018: 上出来です！資源をたくさん集め、それなりの家ができました。次はマップの端からドアまでレールを敷きましょう。
      Overworld Powered Minecart_2019: 上出来です！資源をたくさん集め、それなりの家ができました。次はマップの端からドアまでレールを敷きましょう。
      Overworld Shear Sheep: '"刈る"コマンドを使って両方の羊から羊毛を集めましょう。'
      Overworld Shear Sheep_2018: '"刈る"コマンドを使って両方の羊から羊毛を集めましょう。'
      Overworld Shear Sheep_2019: '"刈る"コマンドを使って両方の羊から羊毛を集めましょう。'
      PDK5 Conditionals 1: 紫の花の蜜は、1（ある）か 0（ない） かのどちらかですが、どのお花に蜜がある（1である）のかは分かりません！蜜のない花から蜜を集めないように気をつけてください。蜜が 1 かどうかは、「もし」ブロックを使って確認しましょう。
      PDK5 Functions 2: 関数を使えば新しいブロックを作ることができます！ここでは、正方形を描くためのブロックを "draw a square" という名前の関数の中に移動しました。"draw a square" を使って、メガネを作ってみましょう。正方形と正方形の間は 75 ピクセル空いています。
      PS - test - pixelation: 0 と 1 を入力して X の形を完成させる
      PS copy 2-3 Bee Conditionals 5: "ムラサキ色の花にはミツが、あるのか、ないのか、わかりません。さいしょに「花のミツ」が 1 かどうか「もし」ブロックを使ってかくにんし、ミツがあったら、とってください。"
      Quantum Bee: 紫の花の蜜は、1（ある）か 0（ない） かのどちらかですが、どのお花に蜜がある（1である）のかは分かりません！蜜のない花から蜜を集めないように気をつけてください。蜜が 1 かどうかは、「もし」ブロックを使って確認しましょう。
      Ryan - 4-5 Bee Conditionals 2: ミツバチは今すぐ蜜が欲しいのです。すべての物が花ではありません。花が隠れているかもしれないので、すべての雲の下をチェックましょう。そうすればあなたは蜜を集められます。
      Ryan - Bee Conditionals: ミツバチは今すぐ蜜が欲しいのです。すべての物が花ではありません。花が隠れているかもしれないので、すべての雲の下をチェックましょう。そうすればあなたは蜜を集められます。
      Ryan_Demo: 4小節後にムースが新しい動きを始めるようにしましょう！
      SpecialFrozenLevel: あなたは もう、マスター アーティストよ！じゆうにブロックをつかって、冬のワンダーランドをつくってね。
      Standalone_Artist_1: アーティストへようこそ！はじめに、「前に うごく」ブロックと「右に まがる」ブロックで、正方形をかいてみよう。それぞれの辺は、100 ピクセルの長さだよ。
      Standalone_Artist_2: '「左に まがる 120度」と「左に まがる 60度」で、ダイヤモンドを書くよ。それぞれ「150ピクセル」うごかしてね。'
      Standalone_Artist_3: '「前に うごく 100ピクセル」と「右に まがる60度」をつかって、六角形が書けるかな？'
      Standalone_Artist_4: '「くりかえし」ブロックは、すきな回数プログラムを、くりかえします。ここに出ているプログラムを「くりかえし」ブロックの中に入れて、6回くりかえすと、どうなるかな？'
      Standalone_Artist_5.5: 'ダイヤモンドを書くプログラムを、「くりかえし」ブロックで、かんたんに しました。このプログラムを12回くりかえすと花が書けます。ヒント：ひとつのダイヤモンドを書きおえたら、30度まがりましょう。ずっと同じところにダイヤモンドを書いてたらダメだよ。'
      Standalone_Artist_5: ダイヤモンドを書くプログラムがあります。何回くりかえすと花が書けるかな？
      Standalone_Artist_6: 'このデザインは、六角形を書くプログラムを 6 回くりかえします。くりかえしのたびに、何度まがればいいかな？ヒント：円の角度を、くりかえしの回数で、わり算すればいいよ。'
      Standalone_Artist_7: '関数（かんすう）は、くりかえしと同じように、べんりです。「draw a flower」は、花を書く関数です。「draw a flower」ブロックをつかえば、いっぱつ で、花を書くことが出来ます。これと「前に ジャンプ」ブロックを組み合わせて、3つ花を書いてください。ヒント: 花は 150 ピクセルずつ はなれているよ。'
      Standalone_Artist_8: '「Draw a shape」は、六角形を書くようにプログラムした関数です。まず実行して、この関数が、どう うごくか、みてみてください。さて、正方形や、三角形や、八角形を書くように、この関数の中のプログラムを書き直すことが出来るかな？'
      Standalone_Artist_9: さあ、あなたの好きな絵を書いてみて！すきなことが出来る、空っぽの関数もあるから、つかってね！
      Standalone_Artist_v2: アーティストへようこそ！はじめに、「前に うごく」ブロックと「右に まがる」ブロックで、正方形をかいてみよう。それぞれの辺は、100 ピクセルの長さだよ。
      Testing Quantum Farmer: "すごく大きい穴を見つけてびっくりしました。シャベル何杯分の土が必要かわかりません。穴が他の地面と同じくらいに平になるまで穴を埋めるプログラムをあなたは作れますか？ヒント：「以下の間繰り返し（while loop）」を今回は使ってみてください。"
      The Vigenere Cipher Widget: 'やり方:'
      The Vigenere Cipher Widget_2018: 'やり方:'
      The Vigenere Cipher Widget_2019: 'やり方:'
      The Vigenere Cipher: 'やり方:'
      Total Artist Clone Me: 'フリープレイ: あなたが作った関数と、おまけのブロックがあります。カッコイイのを、書いてみよう！'
      U2 frequency caesar: 'やり方:'
      U2 frequency random sub: 'やり方:'
      U2 vigenere cipher: 'やり方:'
      U3 - Arrays - indexPractice: 配列の内容を順に画面に書き込みます。(クリックして完全な指示を表示)
      U4 vigenere cipher 2: 'やり方:'
      U4L02 - Objects - Template1: テンプレート
      U4L02 - Objects - Template1_2018: テンプレート
      U4L02 - Objects - Template1_2019: テンプレート
      Underground Avoiding Lava: 一部のブロックの下には溶岩が隠れていて、前進する前に"if"コマンドでフタをする必要があります。適切な場所に"前進"コマンドを追加して、ブロックを掘りましょう。
      Underground Avoiding Lava_2018: 一部のブロックの下には溶岩が隠れていて、前進する前に"if"コマンドでフタをする必要があります。適切な場所に"前進"コマンドを追加して、ブロックを掘りましょう。
      Underground Avoiding Lava_2019: 一部のブロックの下には溶岩が隠れていて、前進する前に"if"コマンドでフタをする必要があります。適切な場所に"前進"コマンドを追加して、ブロックを掘りましょう。
      Underground If Statements: 次は溶岩の中に落ちないようにして、レッドストーンを3つ掘りましょう。溶岩を見つけたら、"If"コマンドを使って丸石を置きます。
      Underground If Statements_2018: 次は溶岩の中に落ちないようにして、レッドストーンを3つ掘りましょう。溶岩を見つけたら、"If"コマンドを使って丸石を置きます。
      Underground If Statements_2019: 次は溶岩の中に落ちないようにして、レッドストーンを3つ掘りましょう。溶岩を見つけたら、"If"コマンドを使って丸石を置きます。
      Underground Iron: 溶岩は熱くて危険です。丸石を置いて橋を作り、鉄のブロックを2つ以上掘りましょう。
      Underground Iron_2018: 溶岩は熱くて危険です。丸石を置いて橋を作り、鉄のブロックを2つ以上掘りましょう。
      Underground Iron_2019: 溶岩は熱くて危険です。丸石を置いて橋を作り、鉄のブロックを2つ以上掘りましょう。
      Underground Mining Coal: 地下は暗いけれども、貴重な資源があります。松明を2つ以上置いて、石炭を2個以上掘りましょう。
      Underground Mining Coal_2018: 地下は暗いけれども、貴重な資源があります。松明を2つ以上置いて、石炭を2個以上掘りましょう。
      Underground Mining Coal_2019: 地下は暗いけれども、貴重な資源があります。松明を2つ以上置いて、石炭を2個以上掘りましょう。
      aE7: "繰り返しの部分をコピーして、右ではなく左に回るようにしてみてください。何が起きるでしょうか。これを繰り返して波線を描いてみましょう。"
      aE8: "全体を 4 回ループして、額を作りましょう。角の部分に注意してください。ただ 90 度回ればいいわけではありません！3 度回るという操作を 60 回繰り返すと半円になります。このコードのどの部分を使えば、丸い角の部分（円の 4 分の 1）が描けるでしょうか。"
      artistDebugVideo1: '「リピート」ループを使用して、水を波立たせることができます。'
      artistFunctionsVideo1: 説明に従って、自分の関数を作ってみましょう。
      beeDebugVideo1: 全てのはなのみつを集めるのに繰り返しブロックを使ってみましょう。
      birdsDebugVideo1: "道をたどってお調子者のブタまで連れて行って。\nでも、TNTの箱には注意してね。羽が飛ばされちゃうよ。"
      bounce_1: '「左向きのブロックが押されたとき」のブロックにべつのブロックをつなげて、「実行」ボタンを押してください。左向き矢印を押してパドルをゴールまで動かしましょう'
      bounce_10: 一番上にゴールがあります。ゲームを作るには、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう
      bounce_10_2018: 一番上にゴールがあります。ゲームを作るには、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう
      bounce_10_basketball: 一番上に、ゴールがあります！ゲームを作るには「ポイントを採点する」と「相手のポイントを採点する」ブロックを、「ボールがゴールに入った場合」と「ボールが手を外れた場合」ブロックにつなげます。相手が2回得点する前に、何点とれるか見てみよう。
      bounce_10_sports: 一番上に、ゴールがあります！「ポイントを採点する」と「相手のポイントを採点する」ブロックを、「ボールがゴールに入った場合」と「ボールが手を外れた場合」ブロックにつなげます。相手が2回得点する前に、何点とれるか見てみよう！
      bounce_11: '「実行」ブロックにブロックを足していきましょう。「新しいボールを発射する」ブロックを一箇所以上使いましょう。背景を変更したり、ラケットやボールのスピードを変えてみましょう。対戦相手が二回スコアを決める前に何ポイント得点できるでしょうか？'
      bounce_11_2018: '「実行」ブロックにブロックを足していきましょう。「新しいボールを発射する」ブロックを一箇所以上使いましょう。背景を変更したり、ラケットやボールのスピードを変えてみましょう。対戦相手が二回スコアを決める前に何ポイント得点できるでしょうか？'
      bounce_11_basketball: さあ、「実行した時」ブロックに、ブロックをつなげて行きましょう。「新しいボールを投げる」ブロックを、どこかに使う必要があります。手やボールの、画像やスピードを変えたりして、相手が二回スコアを決める前に、何ポイント得点できるか見てみましょう！
      bounce_11_sports: さあ、「実行した時」ブロックに、ブロックをつなげて行きましょう。「新しいボールを投げる」ブロックを、どこかに使う必要があります。手やボールの、画像やスピードを変えたりして、相手が二回スコアを決める前に、何ポイント得点できるか見てみましょう！
      bounce_12: バウンス ゲームを作成してください。デザインやルールは自由に変更できます。終了したら、完了ボタンをクリックしてください。作成したゲームは、他のユーザが携帯電話からアクセスして遊ぶことができます。
      bounce_12_2018: バウンス ゲームを作成してください。デザインやルールは自由に変更できます。終了したら、完了ボタンをクリックしてください。作成したゲームは、他のユーザが携帯電話からアクセスして遊ぶことができます。
      bounce_12_basketball: 君のバスケットボール ゲームを作ろう。ルールは自由に変更できるよ。完了したら、「完了」ボタンをクリックして、友だちが君のゲームをスマホで試せるようにしよう。
      bounce_12_sports: '君の ゲームを作ろう。あなたが全部きめてください。ルールは自由に変更できるし、スポーツをミックスしたり、自由にやろう！完了したら、「完了」ボタンをクリックして、友だちが君のゲームをスマホで試せるようにしよう。'
      bounce_1_2018: '「左向きのブロックが押されたとき」のブロックにべつのブロックをつなげて、「実行」ボタンを押してください。左向き矢印を押してパドルをゴールまで動かしましょう'
      bounce_1_basketball: '「左向き矢印が押されたとき」のブロックに、べつのブロックをつなげて「実行」ボタンを押してください。左向き矢印を押して、手を、最終目標まで動かしましょう。'
      bounce_1_sports: 旗を取ろう！「左向き矢印が押されたとき」ブロックに、ブロックをつなげて、「実行」を押し、プレイヤーを旗まで動かそう。
      bounce_2: '「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します'
      bounce_2_2018: '「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します'
      bounce_2_basketball: '「右矢印のとき」と「左矢印のとき」ブロックに、ブロックをつなげます。両方の最終目標に到達するように、手を動かします。'
      bounce_2_sports: 旗が 2 つあります!「左向き矢印が押された場合」と「右矢印キーが押された場合」にブロックをつなげて、プレイヤーが、2 方向に移動できるようにしよう。
      bounce_3: '「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します'
      bounce_3_2018: '「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します'
      bounce_4: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
      bounce_4_2018: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
      bounce_5: ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます
      bounce_5_2018: ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます
      bounce_5_basketball: ボールを手の中に落ちるように飛ばします。「ボールが手に当たった場合」ブロックにブロックをくっつけて、ボールが旗に届くようにしてください。
      bounce_5_sports: ホッケー パックが、プレイヤーに向かって投げられます！「ボールが当たった場合」ブロックにブロックをつなげて、旗に当ててください。
      bounce_6: 最終目標は画面の上にあります。パズルを解くために「ボールがあたったとき」ブロックにブロックを接続する必要があります
      bounce_6_2018: 最終目標は画面の上にあります。パズルを解くために「ボールがあたったとき」ブロックにブロックを接続する必要があります
      bounce_6_basketball: 旗がいちばん上にあります。両方の「ボールが～に当たった場合」ブロックに、ブロックをつなげて、パズルを解いてください。
      bounce_6_sports: 旗がいちばん上にあります。両方の「ボールが～に当たった場合」ブロックに、ブロックをつなげて、パズルを解いてください。
      bounce_7: '「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます'
      bounce_7_2018: '「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます'
      bounce_7_basketball: それぞれの「〜の場合」ブロックに、ブロックをつなげます。ボールが旗に当たるまで、ボールをバウンドします。
      bounce_7_sports: それぞれの「〜の場合」ブロックに、ブロックをつなげます。ボールが旗に当たるまで、ボールをバウンドします。
      collector example: 金のカタマリを全部集めてパズルを解くため、これらのブロックを置きましょう。
      collectorDebugVideo2: 金のカタマリを全部集めてパズルを解くため、これらのブロックを置きましょう。
      collectorSkinVideo1: ４つの山をすべて集め、このレベルをクリアしましょう。
      collectorSkinVideo2: 金の山を一つ集めて、このレベルをクリアしましょう。
      course2_maze_seq_challenge1: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
      course2_playlab_stage17_1: 犬のジョージ(Actor 1) に"Hi"と言わせてください。
      course2_playlab_stage17_11: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
      course3_playlab_stage16_1: いぬに「こんにちは」といわせてみましょう。
      course3_playlab_stage16_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
      course3_playlab_stage16_3: いぬがねこのところに行くプログラムを作ってみてください。
      course3_playlab_stage16_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
      course3_playlab_stage16_5: タコがハッピーになるようにブロックを追加してください。
      course3_playlab_stage16_6: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
      course3_playlab_stage17_1: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
      course3_playlab_stage17_2: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
      course3_playlab_stage17_3: '「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。'
      course3_playlab_stage17_4: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
      course3_playlab_stage17_5: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
      course3_playlab_stage17_6: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
      course3_playlab_stage17_7: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
      course4_artist_fwp_challenge1: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
      course4_artist_variables_challenge1: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      course4_artist_variables_challenge2: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseA_artist_loops7: '「リピート」ループを使用して、水を波立たせることができます。'
      courseA_artist_loops7_2018: '「リピート」ループを使用して、水を波立たせることができます。'
      courseA_artist_loops7_2019: '「リピート」ループを使用して、水を波立たせることができます。'
      courseA_artist_loops7_forVideo: '「リピート」ループを使用して、水を波立たせることができます。'
      courseA_bee_seq4: 自分でやってみよう！
      courseA_bee_seq5: 自分でやってみよう！
      courseA_collector_loops_challenge2: '宝を全部ゲットしよう！ '
      courseA_forVideoTest_artist: '「リピート」ループを使用して、水を波立たせることができます。'
      courseA_harvester_seq6: 自分でやってみよう！
      courseA_harvester_seq6_2019: 自分でやってみよう！
      courseA_harvester_seq7: 自分でやってみよう！
      courseA_harvester_seq7_2019: 自分でやってみよう！
      courseA_maze_seq2: プログラムで、ぼくがブタさんのところに、いけるようにして！
      courseA_maze_seq2_2018: プログラムで、ぼくがブタさんのところに、いけるようにして！
      courseA_maze_seq3: プログラムで、ぼくがブタさんのところに、いけるようにして！
      courseA_maze_seq3_2018: プログラムで、ぼくがブタさんのところに、いけるようにして！
      courseA_maze_seq4: ブタさんのところに、いけるように、いらないブロックを けしてください。
      courseA_maze_seq4_2018: ブタさんのところに、いけるように、いらないブロックを けしてください。
      courseA_maze_seq_challenge1: なにかが ちがうよ。プログラムを なおして、トリさんを ブタさんのところに つれていって！
      courseA_maze_seq_challenge1_2018: なにかが ちがうよ。プログラムを なおして、トリさんを ブタさんのところに つれていって！
      courseA_maze_seq_challenge1_2019: なにかが ちがうよ。プログラムを なおして、トリさんを ブタさんのところに つれていって！
      courseB_maze_seq1: "ブロックをつかって、ぼくをブタさんのところに、つれていってください。"
      courseC_artist_prog5: |-
        この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。
      courseC_artist_prog5_2018: |-
        この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。
      courseC_artist_prog5_2019: |-
        この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。
      courseC_maze_debugging10: ブロックを並び替えたり足したりして、僕をブタのところに連れていってください!
      courseD_artist_binary1: "「Draw binary \"01010101\"」ブロックを「実行したとき」にくっつけて、実行してください。\nアーティストは、一番目の行にバイナリで「01010101」を書きます。"
      courseD_artist_binary1_2018: "「Draw binary \"01010101\"」ブロックを「実行したとき」にくっつけて、実行してください。\nアーティストは、一番目の行にバイナリで「01010101」を書きます。"
      courseD_artist_binary1_2019: "「Draw binary \"01010101\"」ブロックを「実行したとき」にくっつけて、実行してください。\nアーティストは、一番目の行にバイナリで「01010101」を書きます。"
      courseD_artist_binary4: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      courseD_artist_binary4_2018: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      courseD_artist_binary4_2019: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      courseD_artist_binary6: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      courseD_artist_binary6_2018: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      courseD_artist_binary6_2019: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      courseD_artist_binary7: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      courseD_artist_binary7_2018: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      courseD_artist_binary7_2019: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      courseD_artist_embed_frozen: 雪の結晶のデザインを見るには実行を押しましょう！
      courseD_artist_embed_frozen2: 雪の結晶のデザインを見るには実行を押しましょう。
      courseD_autorun_binary4_2019: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      courseD_autorun_binary6_2019: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      courseD_autorun_binary7_2019: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      courseD_bee_debugging3: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      courseD_bee_nestedLoops3: 入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 
      courseD_bee_nestedLoops5: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      courseD_bee_nestedLoops6_2018: ひまわりまで行きたい！
      courseD_bee_nestedLoops8: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      courseD_bee_nestedLoops8_2018: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      courseD_bee_nestedLoops8_2019: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      courseD_bounce_events10: 一番上にゴールがあります。ゲームを作るには、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう
      courseD_bounce_events11: '「実行」ブロックにブロックを足していきましょう。「新しいボールを発射する」ブロックを一箇所以上使いましょう。背景を変更したり、ラケットやボールのスピードを変えてみましょう。対戦相手が二回スコアを決める前に何ポイント得点できるでしょうか？'
      courseD_bounce_events12: バウンス ゲームを作成してください。デザインやルールは自由に変更できます。終了したら、完了ボタンをクリックしてください。作成したゲームは、他のユーザが携帯電話からアクセスして遊ぶことができます。
      courseD_bounce_events2: '「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します'
      courseD_bounce_events3: '「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します'
      courseD_bounce_events3s: '「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します'
      courseD_bounce_events4: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
      courseD_bounce_events4s: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
      courseD_bounce_events5: ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます
      courseD_bounce_events6: 最終目標は画面の上にあります。パズルを解くために「ボールがあたったとき」ブロックにブロックを接続する必要があります
      courseD_bounce_events7: '「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます'
      courseD_debugging_3: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      courseD_maze_nestedLoops4: 'ひまわりまで行きたい！'
      courseD_maze_nestedLoops4_2018: 'ひまわりまで行きたい！'
      courseD_maze_nestedLoops4_2019: 'ひまわりまで行きたい！'
      courseD_maze_nestedLoops6: ひまわりまで行きたい！
      courseD_maze_nestedLoops6_2018: ひまわりまで行きたい！
      courseD_maze_nestedLoops6_2019: ひまわりまで行きたい！
      courseE_artist_functions1: "こんにちは！ゾンビアーティストです。お絵かき大好き！\n四角いメガネを描くので手伝ってください。ヒント：メガネのつなぎ部分は、レンズの四角より25ピクセル短く描きましょう。"
      courseE_artist_functions1_2018: "こんにちは！ゾンビアーティストです。お絵かき大好き！\n四角いメガネを描くので手伝ってください。ヒント：メガネのつなぎ部分は、レンズの四角より25ピクセル短く描きましょう。"
      courseE_bee_concept1: 入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 
      courseE_bee_concept1_2018: 入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 
      courseE_bee_concept1_2019: 入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 
      courseE_bee_functions1: それぞれの花から、すべてのミツをあつめて下さい。
      courseE_bee_functions1_2018: それぞれの花から、すべてのミツをあつめて下さい。
      courseE_bee_functions3: ひとつの作業を行うひとまとまりのコードを関数といいます。"get 5" という関数を使うと、一度に蜜を 5 とることができます。ループを使って、ブロックの数がなるべく少なくしてください。
      courseE_bee_functions3_2018: ひとつの作業を行うひとまとまりのコードを関数といいます。"get 5" という関数を使うと、一度に蜜を 5 とることができます。ループを使って、ブロックの数がなるべく少なくしてください。
      courseE_bee_functions4: '「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。'
      courseE_bee_functions4_2018: '「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。'
      courseE_farmer_concept4: "では次のレベルに進みましょう！\n入れ子のくりかえしで、この図形を書いて下さい。\n横一列を書き終えたら、アーティストのいちをもどして、それから次の一列を書くようにします。\nこれらのブロックたちの、どれかを、くりかえしで使います。"
      courseF_artist_for7: "さっきのプログラムを、3ヵ所かえるだけで、この絵を書くことが出来ます！\nヒント：\n1. 線の太さは？\n2. まがる向きは？\n3. いくつ「ずつ」カウントする？"
      courseF_artist_for7_2018: "さっきのプログラムを、3ヵ所かえるだけで、この絵を書くことが出来ます！\nヒント：\n1. 線の太さは？\n2. まがる向きは？\n3. いくつ「ずつ」カウントする？"
      courseF_artist_for7_2019: "さっきのプログラムを、3ヵ所かえるだけで、この絵を書くことが出来ます！\nヒント：\n1. 線の太さは？\n2. まがる向きは？\n3. いくつ「ずつ」カウントする？"
      courseF_artist_for_challenge1: この図形を書いてみよう！
      courseF_artist_for_challenge1_2018: この図形を書いてみよう！
      courseF_artist_for_challenge1_2019: この図形を書いてみよう！
      courseF_artist_for_challenge2: この図形を書いてみよう！くりかえしを、1回だけ使って書けますか？
      courseF_artist_for_challenge2_2018: この図形を書いてみよう！くりかえしを、1回だけ使って書けますか？
      courseF_artist_for_challenge2_2019: この図形を書いてみよう！くりかえしを、1回だけ使って書けますか？
      courseF_artist_fwp9: 'フリープレイ: カッコイイのを、書いてみよう！ペンの太さを かえて見ても いいよね。'
      courseF_artist_fwp9_2018: 'フリープレイ: カッコイイのを、書いてみよう！ペンの太さを かえて見ても いいよね。'
      courseF_artist_variables_challenge1: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge1_2018: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge1_2019: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge1a: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge2: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge2_2018: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_artist_variables_challenge2_2019: あなたは、このようなパターンの作りかたを、すべて学びました。そんなに難しくないから、どうすれば良いか、考えてみよう。
      courseF_bee_for8: 3、6、9、12、15の花のミツをとるためには、いくつずつ `counter` を ふやせば良いでしょう？「???」に正しい数をいれて、すべての花のミツを集めてください。
      courseF_bee_for8_2018: 3、6、9、12、15の花のミツをとるためには、いくつずつ `counter` を ふやせば良いでしょう？「???」に正しい数をいれて、すべての花のミツを集めてください。
      courseF_bee_for8_2019: 3、6、9、12、15の花のミツをとるためには、いくつずつ `counter` を ふやせば良いでしょう？「???」に正しい数をいれて、すべての花のミツを集めてください。
      courseF_bee_for_challenge2: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      courseF_bee_for_challenge2_2018: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      courseF_bee_for_challenge2_2019: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      courseF_bee_for_challenge3: 出来るだけ少ない数のブロックを使って、このパズルをクリアしよう。
      courseF_bee_functions4: '「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。'
      courseF_bee_functions4_2018: '「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。'
      flappy_1: '「クリックしたとき」ブロックに「パタパタする」ブロックを くっつけて、「実行」ボタンを おしてください。クリック（または がめんをタップ）すると、フラッピーは もくひょうにむかって とんでいきます。'
      flappy_11: じぶんのフラッピー ゲームを作ろう。みため、ルール、じゅうりょくも、ぜんぶ かえられます。作りおわったら、「おわり」ボタンをクリックして、ともだちにシェアして あそんでもらおう。
      flappy_11_2018: じぶんのフラッピー ゲームを作ろう。みため、ルール、じゅうりょくも、ぜんぶ かえられます。作りおわったら、「おわり」ボタンをクリックして、ともだちにシェアして あそんでもらおう。
      flappy_1_2018: '「クリックしたとき」ブロックに「パタパタする」ブロックを くっつけて、「実行」ボタンを おしてください。クリック（または がめんをタップ）すると、フラッピーは もくひょうにむかって とんでいきます。'
      flappy_2: こんどは、じめんを みてください。じめんに ぶつかったとき、ゲームがおわる ようにプログラミングしてみよう。「ゲームオーバー」ブロックを つかってね。
      flappy_2_2018: こんどは、じめんを みてください。じめんに ぶつかったとき、ゲームがおわる ようにプログラミングしてみよう。「ゲームオーバー」ブロックを つかってね。
      flappy_3: フラッピーが とぶ はやさを かえてみよう。「実行したとき」ブロックに、スピードをかえるブロックを くっつければいいよ。
      flappy_3_2018: フラッピーが とぶ はやさを かえてみよう。「実行したとき」ブロックに、スピードをかえるブロックを くっつければいいよ。
      flappy_4: 障害物（しょうがいぶつ）にぶつかったときのプログラムがないと、Flappyは障害物を通りぬけてしまいます。「障害物にぶつかったとき」ブロックに、なにかブロックをくっつけてください。Flappyがパイプにぶつかったら、「ゲーム終了」するようにしましょう。
      flappy_4_2018: 障害物（しょうがいぶつ）にぶつかったときのプログラムがないと、Flappyは障害物を通りぬけてしまいます。「障害物にぶつかったとき」ブロックに、なにかブロックをくっつけてください。Flappyがパイプにぶつかったら、「ゲーム終了」するようにしましょう。
      flappy_5: フラッピーが しょうがいぶつを とおりぬけたら、ポイントをゲットするようにプログラミングしよう。「しょうがいぶつを とおりぬけたとき」ブロックで、「1ポイント ゲット」ブロックをつかうんだ。
      flappy_5_2018: フラッピーが しょうがいぶつを とおりぬけたら、ポイントをゲットするようにプログラミングしよう。「しょうがいぶつを とおりぬけたとき」ブロックで、「1ポイント ゲット」ブロックをつかうんだ。
      flappy_6: '「すこしパタパタする」や「たくさんパタパタする」ブロックを つかってみて。そのあとも、ポイントがゲットできるかな。'
      flappy_6_2018: '「すこしパタパタする」や「たくさんパタパタする」ブロックを つかってみて。そのあとも、ポイントがゲットできるかな。'
      flappy_7: はいけいを かえてみよう。「実行したとき」ブロックに、どのブロックをくっつければ いいかな？
      flappy_7_2018: はいけいを かえてみよう。「実行したとき」ブロックに、どのブロックをくっつければ いいかな？
      flappy_8: はいけいは、いつでも かえることが できるよ。しょうがいぶつを とおりぬけたときに、はいけいが ランダムに てきとうに かわるように してみよう。
      flappy_8_2018: はいけいは、いつでも かえることが できるよ。しょうがいぶつを とおりぬけたときに、はいけいが ランダムに てきとうに かわるように してみよう。
      flappy_9: しょうがいぶつに あたったとき、ゲームは おわらず、とくてんが 0 になるように プログラムを かえてください。
      flappy_9_2018: しょうがいぶつに あたったとき、ゲームは おわらず、とくてんが 0 になるように プログラムを かえてください。
      frozen circle function in circle: こんどは、20こ円をかきましょう。いっこ円をかいたら、ジャンプして、18度まがるのよ。
      frozen circle function with parameter: こんどの「円をかく」ブロックは、「おおきさ」を かえることができるわ！このブロックをつかって、おおきさ5の小さい円と、おおきさ10の大きな円をかいてみて。
      frozen circle function: '「円をかく」ブロックをつかって、10こ円をかきましょう。円をかいたらジャンプするのをわすれないでね。'
      frozen circle: 円をかくことが できる？「???」のところに数をいれて、円をかいてみましょう。
      frozen cross rotate dense: 'こんどは、線を90本かきましょう！90回で ちょうど360度になるには、どれくらい まがれば いいかしら？ヒント：とても小さい数よ。'
      frozen cross rotate: こんどは、線を10本かいてみましょう。それぞれの線をかくとき、どれくらい まがれば いいかしら？
      frozen cross: '「くりかえし」ブロックをつかって＋の形をかきましょう。エルサが前にも後ろにもうごけるって、気がついてた？'
      frozen diamond mini snowflake: 雪のけっしょうは、色んな形があるって知ってる？さあ、新しい雪のけっしょうを かきましょう。「くりかえし」ブロックをつかって、ひし形を４つ かいてね。90度まがるのを わすれないで。
      frozen diamond snowflake: ひし形を10こ かいて、新しい雪のけっしょうをつくりましょう。36度まがると ちょうどいいわよ。
      frozen diamond: この4つのブロックを2回くりかえして、ひし形をかいてみましょう。四角形をかくのと にてるけど、まがる角度が ちがうわよ。90 度じゃなくて、60 度と120 度 まがるのよ。
      frozen freeplay: あなたは もう、マスター アーティストよ！じゆうにブロックをつかって、冬のワンダーランドをつくってね。
      frozen line: こんにちは！アレンデール王国のエルサです。1本の線をかくのを手つだってください。
      frozen perpendicular: "つぎに 2 本の線を、90度の かくどで かいてみましょう！\n「まがる」ブロックと「うごく」ブロックをつかうといいわ。"
      frozen snowflake branch: '「雪のけっしょうのエダをかく」ブロックをつかって、３本の えだをかいてみましょう。雪のけっしょうが みえてきたかしら？'
      frozen snowflake full: 8回くりかえして、きれいな雪のけっしょうを かきましょう！
      frozen snowflower: ふくざつな雪のもようも、円をつかって かけるわね。おおきさ５の円を５こ、おおきさ１０の円を５こ つかって、この もようを かいてみて。
      frozen square iterative: もうすこしで、四角がかけるわ。4本の線で、四角をかきましょう！
      frozen square loop 3x: 四角形を 3つ かいてみましょう。ひとつ四角形をかいたら、120度まがると いいわよ。
      frozen square loop: こんにちは、アレンデール王国のアナよ！「くりかえし」ブロックをつかって、四角形をかいてみて。さっきより少ないブロックで かけるはずよ。四角をかくには、何回くりかえせばいいか 考えて、「???」に、数をいれてみましょう。
      frozen square snowflake: この雪のもようが かけるかしら？「くりかえし」ブロックで、四角形を10こ かけばいいわ。四角形をひとつ かいたら、「まがる」ブロックで36度まがるのよ。
      grade1_maze_sequence1: プログラムで、ぼくがブタさんのところに、いけるようにして！
      grade1_maze_sequence2: プログラムで、ぼくがブタさんのところに、いけるようにして！
      grade1_maze_sequence5: 豚さんのところまで連れていってください！2種類のブロックを使う必要があるよ。
      grade1_maze_sequence6: 足りないブロックを追加して、僕をブタのところに連れていってください!
      grade1_maze_sequence9: 'TNT の箱をよけつつ、豚さんのところまで連れていってください！'
      grade2_CaringForNewPet_10: ブタを捕まえたい！
      grade2_CaringForNewPet_5: ブタを捕まえたい！
      grade2_MakeDogTag_10: なにかおもしろいものをえがきましょう。
      grade2_MakeDogTag_3: |-
        この猫のために、家を完成させましょう。
      grade2_MakeDogTag_4: |-
        この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。
      grade2_MakeDogTag_6: 'やった！自由に遊ぼう！なんでも好きなものを描いてね。'
      grade2_MakeDogTag_8: たくさんの V をひとつにつなぎましょう。V 自体はループの中で描きましょう。
      grade2_MakeDogTag_9: 今度は 24 回描きましょう。30 度左に回転するブロックをこのコードに追加して、全体を繰り返しのブロックの中に入れましょう。
      grade2_PuppyLoops_1: ５つのブロックを使ってわたしをブタの所へ連れて行くことができますか？
      grade2_PuppyLoops_10: |-
        風車が途中までしか描けていませんね。最後まで描き切るには何回繰り返さなければならないでしょうか。
      grade2_PuppyLoops_2: この５つのブロックの動きを２つのブロックで置き換えられる？ (ヒント：「〜回繰り返す」ブロックを使って繰り返しの作業を作りましょう)
      grade2_PuppyLoops_4: ループを2つ使って少ない数のブロックでブタを捕まえてみよう。
      grade2_PuppyLoops_5: ブタを捕まえよう。
      grade2_PuppyLoops_7: ひまわりまで行きたい！
      grade2_PuppyLoops_8: "このねこのヒゲのコードはまちがっています。\n\\r\n\\r\nぜんぶのヒゲを同じ長さにかくように、コードを直してください。"
      grade2_PuppyLoops_9: |-
        C のコードが逆さまに描かれているようですね。C に見えるように直せますか？
      grade2_collector_3: 金のカタマリを全部集めてパズルを解くため、これらのブロックを置きましょう。
      grade2_puppy_loops2: この５つのブロックの動きを２つのブロックで置き換えられる？ (ヒント：「〜回繰り返す」ブロックを使って繰り返しの作業を作りましょう)
      grade2_puppy_loops4: ループを2つ使って少ない数のブロックでブタを捕まえてみよう。
      grade3_ConditionalsElse_1: ハチは花と蜂の巣を見分けることができません。花から蜜を集めるために、まず花か蜂の巣かを確認しましょう。
      grade3_ConditionalsElse_2: "ハチはいま蜜だけを探しています。蜜を集めようとする前に、それが花かどうかを確認しましょう。"
      grade3_ConditionalsElse_3: 今度はハチミツを作ります。蜂の巣かどうかを確認してハチミツを作りましょう。
      grade3_ConditionalsElse_4: '？は花か蜂の巣です。「もし 実行/他」ブロックを使って、花なら蜜を集め、それ以外 (つまり蜂の巣) ならハチミツを作りましょう。'
      grade3_ConditionalsElse_5: |-
        ？の下には花か蜂の巣があります。「もし 実行/他」ブロックを使って、花なら蜜を集め、他 (つまり蜂の巣) ならハチミツを作りましょう。
      grade3_ConditionalsElse_6: "この紫の花には 3 回分、2 回分、または 1 回分のみつがあります。もし-実行-他のブロックを別のもし-実行-他のブロックと組み合わせると、「もし…ならば…、そうでなくて…ならば…、それでもなければ…」のような複雑な条件のブロックを作ることができます。みつの量がわからなくても集められるように、コードを完成させましょう。"
      grade3_ConditionalsElse_7: "むらさきの花は、花の蜜（みつ）が３つか、２つか、１つのどれかかもしれないことに注意してください。\n関数である「むらさきの花を調べる（check purple flower）」を完成させてください。\nそして、その関数（function）を使って、すべての蜜（みつ）を花から集めてください。"
      grade3_ConditionalsElse_8: "「花を調べ、はちみつを作る（check flower make honey）」という関数の中身を作ってください。\nあなたが関数を作るとき、　「もしむらさきの花の蜜（みつ）が３つか、２つ、または１つ」に注意して、\nすべての花の蜜（みつ）を集めてください。その次に、前へ進み、ハチミツを作ってください。"
      grade3_ConditionalsElse_9: "評価テスト：　このコードは間違ってます。\n関数の「はなのみつをとる、または、ハチミツを作る（get nectar or make honey）」を完成させ、\nそれから、その関数を使ってすべてのはなのみつとハチミツを集めてください。\nむらさきの花の花の蜜（みつ）の数は３つか、２つか、１つかもしれないことに注意してください。"
      grade3_ConditionalsElse_TeacherIDo: |-
        ？の下には花か蜂の巣があります。「もし 実行/他」ブロックを使って、花なら蜜を集め、他 (つまり蜂の巣) ならハチミツを作りましょう。
      grade3_Conditionals_1 BAD: '「繰り返し（loop）」を使ってすべての花のみつを集めてください。'
      grade3_Conditionals_1: "こんにちは！ハチです。なるべく少ないブロックで、すべての花のミツをとって、集めたいです。"
      grade3_Conditionals_10 BAD: 並んでいる花から花のみつを集めてください。入れ子の繰り返し（ループ）を使ってみてください。
      grade3_Conditionals_10: |-
        すべてのミツを集めて、ハチミツを作ってください。ムラサキ色の花には、ミツがあるか、わかりませんよ。
      grade3_Conditionals_11 BAD: '課題 - 以下の間のブロックを使ってこのお花からすべてのみつを集めましょう。'
      grade3_Conditionals_11: |-
        できるだけ少ないブロック数で、すべてのミツを集めて、はちみつを作ってください。ミツがない花から、ミツはとれませんよ。
      grade3_Conditionals_12: "4つ全部の花からミツを集めてください。"
      grade3_Conditionals_13: 'すべてのミツを集めて下さい。ミツがないときは、ミツをとらないように気をつけましょう。'
      grade3_Conditionals_2: "花のミツを全部あつめて、ハチミツを作ってください。なるべく少ないブロックをつかってね。  "
      grade3_Conditionals_3: "ムラサキ色の花にはミツが、あるのか、ないのか、わかりません。さいしょに「花のミツ」が 1 かどうか「もし」ブロックを使ってかくにんし、ミツがあったら、とってください。"
      grade3_Conditionals_4: '「もし」ブロックを使って、花にミツがあるか、チェックしてから、ミツを集めて下さい。'
      grade3_Conditionals_5: それぞれの花にミツがあれば、集めてください。
      grade3_Conditionals_6: "この草原には赤色とムラサキ色のお花があります。\n赤い花のミツの数は分かっていますが、ムラサキ色の花のミツの数は分かりません。\nすべてのミツを集めてください。"
      grade3_Conditionals_7: それぞれの花から、すべてのミツをあつめて下さい。
      grade3_Conditionals_8: "にわをとび回って、ミツのある花からミツを集めましょう。 "
      grade3_Conditionals_9: つかうブロックはなるべく少なくして、ぜんぶのミツをとるのを手つだってください。
      grade3_Conditionals_TeacherIDo: '「もし」ブロックを使って、花にミツがあるか、チェックしてから、ミツを集めて下さい。'
      grade3_Debugging_1: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      grade3_Debugging_5: "このブロックがとても邪魔。エラーを取り除いてすべての蜜を集めて蜂蜜を作ってください。実行とステップを使えます。"
      grade3_Debugging_6: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      grade3_Debugging_7: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      grade3_Debugging_9: |-
        このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      grade3_Debugging_TeacherIDo: このブロックが気になります。蜜を集めてはちみつを作るためにエラーを直してください。
      grade3_Loops_10: |-
        先ほどのパズルと同じように繰り返しブロックを使いますが、今度は曲がるブロックも利用してみましょう。
      grade3_Loops_11: "繰り返しブロックを使って階段を降り、はなのみつを集めましょう。"
      grade3_Loops_12: 繰り返しブロックを使ってそれぞれのお花からみつを集め、蜂の巣ではちみつをつくりましょう。
      grade3_Loops_2: ループを使えば同じ作業をもっと簡単に行えるかな？
      grade3_Loops_3: 全てのはなのみつを集めるのに繰り返しブロックを使ってみましょう。
      grade3_Loops_4: 今度は新しい繰り返しブロックを利用して、全てのはなのみつを集めてはちみつを作ってみましょう。
      grade3_Loops_5: これからのブロックを繰り返しブロックに入れて、それぞれのお花からみつを集めましょう。
      grade3_Loops_6: "このブロックの組み合せを３回繰り返したらどうなるでしょうか？\n最後にはちみつを作るのを忘れないでね。"
      grade3_Loops_7: |-
        花には蜜が 1 ユニットずつあります。蜜を花から集めましょう。 
      grade3_Loops_8: ループを使ってはちみつを作るための蜜を集めましょう。
      grade3_Loops_9: それぞれのお花から蜜を集めて、蜂の巣ではちみつを作りましょう。
      grade3_Loops_TeacherIDo: |-
        花には蜜が 1 ユニットずつあります。蜜を花から集めましょう。 
      grade3_bee_conditionals_quantum2: "ハチはいま蜜だけを探しています。蜜を集めようとする前に、それが花かどうかを確認しましょう。"
      grade3_maze_Loop1: '課題：5ブロックだけ使ってひまわりまで連れていってください。 '
      grade3_maze_loops2: 'ひまわりまで行きたい！'
      grade3_maze_loops3: ひまわりまで行きたい！
      grade3_maze_loops4: ひまわりまで行きたい！
      grade3_maze_loops5: ひまわりまで行きたい！
      grade3_maze_nestedLoops1: ５つのブロックを使ってわたしをブタの所へ連れて行くことができますか？
      grade3_maze_nestedLoops2: この５つのブロックの動きを２つのブロックで置き換えられる？ (ヒント：「〜回繰り返す」ブロックを使って繰り返しの作業を作りましょう)
      grade3_maze_nestedLoops3: ブロックを2つだけ使ってブタを捕まえよう。
      grade3_maze_nestedLoops4: ループを2つ使って少ない数のブロックでブタを捕まえてみよう。
      grade3_robotFarmer_ConditionalsIntro_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったら移動し、穴があったら埋めます。ヒント:"もし"ブロックでオプションのドロップ ダウン メニューを使います'
      grade3_robotFarmer_ConditionalsIntro_6: 可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます'
      grade4_arist_nested_loop_circles1: '入れ子型の繰り返しを使ってこの絵を完成させてください。'
      grade4_arist_nested_loop_flags1: 風車（かざぐるま）を作るために、与えられたコードを繰り返しにしましょう。
      grade4_arist_nested_loop_polygons1: "このデザインを１０回ループさせましょう。ループする度にどのくらい回転させる必要がありますか？（ヒント：３６０を１０で割ると？）"
      grade4_arist_nested_loop_polygons2: "このデザインを６回繰り返しましょう。繰り返す毎にどれくらい回転する必要があるでしょうか。（ヒント：３６０割る６は？）"
      grade4_arist_nested_loop_squares1: 入れ子型の「繰り返し（ループ）」を使って、１０個の四角形でできたこの歩道を描く事ができますか？それぞれの四角形は３０ピクセルです。
      grade4_arist_nested_loop_triangles2: '10回、三角形を書きます。そのためには「くりかえし」ブロックを追加（ついか）し、その中に灰色（はいいろ）のブロックを全部入れます。「くりかえし」のなかに「くりかえし」を入れることを「入れ子」と言います。  '
      grade4_arist_nested_loop_triangles3: 三角形のコードを繰り返す事で六角形を描けますか？
      grade4_arist_nested_loop_triangles4: ワニの歯を書いてください！
      grade4_arist_nested_loop_triangles5: |-
        最初から置かれていたコードを別のループの中に入れることで、太陽を作りましょう。これは入れ子型の「繰り返し（ループ）」と言います。

      grade4_arist_nested_loop_triangles6: 入れ子型の「繰り返し（ループ）」を使って、これらの３６個の三角形を描けますか？
      grade4_artist_functions1: "こんにちは！ゾンビアーティストです。お絵かき大好き！\n四角いメガネを描くので手伝ってください。ヒント：メガネのつなぎ部分は、レンズの四角より25ピクセル短く描きましょう。"
      grade4_artist_functions2: "関数を使えば新しいブロックを作ることができます！ここでは、正方形を描くためのブロックを \"draw a square\" という名前の関数の中に移動しました。\"draw a square\" を使って、メガネを作ってみましょう。正方形と正方形の間は 75 ピクセル空いています。"
      grade4_artist_functions_challenge: 用意された関数を仕上げて、4行の六角形を書いて下さい。ぐう数行を右にシフトする方法に注意してください。
      grade4_artist_functions_challenge2: 用意された関数を仕上げて、4行の六角形を書いて下さい。ぐう数行を右にシフトする方法に注意してください。
      grade4_artist_nestedLoops_challenge: |-
        面白い形を書くプログラムです。これを、入れ子でくりかえすと、どうなるでしょうか？くりかえす度に、少しまがると、どうなるでしょう？あなたの、すきな絵を書いて楽しんでください。
      grade4_artist_nestedLoops_challenge2: これは、むずかしいよ！1回じゃムリだから、色々、やって見てください。ヒントを見たいときは、ランプをクリック。
      grade4_artist_nested_loop_circles1: '入れ子型の繰り返しを使ってこの絵を完成させてください。'
      grade4_artist_nested_loop_flags1: 風車（かざぐるま）を作るために、与えられたコードを繰り返しにしましょう。
      grade4_artist_nested_loop_polygons1: "このデザインを１０回ループさせましょう。ループする度にどのくらい回転させる必要がありますか？（ヒント：３６０を１０で割ると？）"
      grade4_artist_nested_loop_squares1: 入れ子型の「繰り返し（ループ）」を使って、１０個の四角形でできたこの歩道を描く事ができますか？それぞれの四角形は３０ピクセルです。
      grade4_artist_nested_loop_triangles1: 'これらの三角形を描くためのコードを完成させてください。最初の１つは用意されています。ヒント：３つの三角形を描くのに３６０度回転します。'
      grade4_artist_nested_loop_triangles5: |-
        最初から置かれていたコードを別のループの中に入れることで、太陽を作りましょう。これは入れ子型の「繰り返し（ループ）」と言います。

      grade4_artist_nested_loop_triangles6: 入れ子型の「繰り返し（ループ）」を使って、これらの３６個の三角形を描けますか？
      grade4_artist_parameters_squares1: "`draw a square`関数の「編集」をクリックして、`length` パラメータを追加します。「パラメータを追加（ついか）」ボタンの左のボックスに `length` と入れてから、ボタンをおして下さい。\nそして、正方形を三つ書きます。大きさは、25、50、75ピクセルで、それぞれ100ピクセルはなれています。"
      grade4_artist_parameters_triangles2: '`length'' （レングス、長さ）の数を かえて、関数を よび出していますね。どのような動きになるか考えながら、実行して下さい。'
      grade4_artist_parameters_triangles2b: "この図形を書いてください！\nヒント：一番小さな三角形のサイズは25ピクセルです。つぎの三角形は25ピクセルずつ大きくします。"
      grade4_artist_parameters_triangles3: "この図形を書いてください！\nヒント：一番小さな三角形のサイズは25ピクセルです。つぎの三角形は25ピクセルずつ大きくします。"
      grade4_artist_parameters_triangles4: この三角形を書く関数は、正しく動きません。 `length` パラメータによって、三角形の大きさが かわるように関数を直してください。そして、25、50、75 の大きさの三角形を書いてください。
      grade4_artist_parameters_trianglesx: "この図形を書いてください！\nヒント：一番小さな三角形のサイズは25ピクセルです。つぎの三角形は25ピクセルずつ大きくします。"
      grade4_bee_conditionals_quantum1: ハチは花と蜂の巣を見分けることができません。花から蜜を集めるために、まず花か蜂の巣かを確認しましょう。
      grade4_bee_conditionals_quantum2: "ハチはいま蜜だけを探しています。蜜を集めようとする前に、それが花かどうかを確認しましょう。"
      grade4_bee_conditionals_quantum4: '？は花か蜂の巣です。「もし 実行/他」ブロックを使って、花なら蜜を集め、それ以外 (つまり蜂の巣) ならハチミツを作りましょう。'
      grade4_bee_conditionals_quantum5: |-
        ？の下には花か蜂の巣があります。「もし 実行/他」ブロックを使って、花なら蜜を集め、他 (つまり蜂の巣) ならハチミツを作りましょう。
      grade4_bee_functions1: それぞれの花から、すべてのミツをあつめて下さい。
      grade4_bee_functions2: ひとつの作業を行うひとまとまりのコードを関数といいます。"get 2 nectar"（蜜を 2 とる）という関数を使って、それぞれの花から蜜を集めてください。
      grade4_bee_functions3: ひとつの作業を行うひとまとまりのコードを関数といいます。"get 5" という関数を使うと、一度に蜜を 5 とることができます。ループを使って、ブロックの数がなるべく少なくしてください。
      grade4_bee_functions4: '「動いてみつを集める」の関数は、ハチを回転させ、蜜を集め、スタート地点までハチを戻します。この関数を使って蜜を全部集めましょう。'
      grade4_bee_nestedLoops0: '「繰り返し（loop）」を使ってすべての花のみつを集めてください。'
      grade4_bee_nestedLoops1: 入れ子の繰り返し（ネスト・ループ）を使って、それぞれの花からすべての花のみつを集めてください。　 
      grade4_bee_nestedLoops3: 入れ子の繰り返し（ネスト・ループ）を作り出して、すべての花のみつを集めてください。
      grade4_bee_nestedLoops4: "それぞれの花からすべての花のみつを集めてください。\nそしてそれぞれのハチの巣でハチミツを作ってください。\n入れ子のループ（ネスト・ループ）を使うのです。 "
      grade4_frozen_freeplay: あなたは もう、マスター アーティストよ！じゆうにブロックをつかって、冬のワンダーランドをつくってね。
      grade4_frozen_functions0: 円を描くのにどんな数字が"???"を置きかえられるかわかりますか？
      grade4_frozen_functions1a: '「円をかく」ブロックをつかって、10こ円をかきましょう。円をかいたらジャンプするのをわすれないでね。'
      grade4_frozen_functions2: こんどは、20こ円をかきましょう。いっこ円をかいたら、ジャンプして、18度まがるのよ。
      grade4_frozen_functions3: こんどの「円をかく」ブロックは、「おおきさ」を かえることができるわ！このブロックをつかって、おおきさ5の小さい円と、おおきさ10の大きな円をかいてみて。
      grade4_frozen_functions4: ふくざつな雪のもようも、円をつかって かけるわね。おおきさ５の円を５こ、おおきさ１０の円を５こ つかって、この もようを かいてみて。
      grade4_frozen_nested_loop_diamonds2: 雪のけっしょうは、色んな形があるって知ってる？さあ、新しい雪のけっしょうを かきましょう。「くりかえし」ブロックをつかって、ひし形を４つ かいてね。90度まがるのを わすれないで。
      grade4_frozen_nested_loop_diamonds3: ひし形を10こ かいて、新しい雪のけっしょうをつくりましょう。36度まがると ちょうどいいわよ。
      grade4_frozen_square: こんにちは、アレンデール王国のアナよ！「くりかえし」ブロックをつかって、四角形をかいてみて。さっきより少ないブロックで かけるはずよ。四角をかくには、何回くりかえせばいいか 考えて、「???」に、数をいれてみましょう。
      grade4_frozen_square_loop1: こんにちは、アレンデール王国のアナよ！「くりかえし」ブロックをつかって、四角形をかいてみて。さっきより少ないブロックで かけるはずよ。四角をかくには、何回くりかえせばいいか 考えて、「???」に、数をいれてみましょう。
      grade4_frozen_square_loop2: 四角形を 3つ かいてみましょう。ひとつ四角形をかいたら、120度まがると いいわよ。
      grade4_frozen_square_loop3: この雪のもようが かけるかしら？「くりかえし」ブロックで、四角形を10こ かけばいいわ。四角形をひとつ かいたら、「まがる」ブロックで36度まがるのよ。
      grade4_playlab_freeplay: '自由時間です！すきなブロックを使って、楽しいゲームを作ってください。 '
      grade4_playlab_test: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      grade4_playlab_test2: '`jump` 関数（かんすう）は、犬を上に100ピクセル ジャンプさせます。プログラムを実行して、すべてのハタを集めてください。'
      grade4_review_artist1: こんにちは、私は芸術家です。プログラムで私にどんな線でも描かせることができます。いくつかのブロックを使用して、写真に灰色の線を引きます。(各ラインの長さは 100 ピクセル)
      grade4_review_artist2: 'この家には天井が必要です！三角の屋根をかいてください。ヒント：3つの線はすべて同じ長さです。'
      grade4_review_artist3: "ジャンプのブロックを使うと、線をかかずに絵かきさんを動かします。\n「ジャンプ」と「前へ動く」の両方のブロックを使って、点線をかいてみましょう。"
      grade4_review_bee1: 今度は新しい繰り返しブロックを利用して、全てのはなのみつを集めてはちみつを作ってみましょう。
      grade4_review_bee2: それぞれのお花から蜜を集めて、蜂の巣ではちみつを作りましょう。
      grade4_review_bee3: |-
        先ほどのパズルと同じように繰り返しブロックを使いますが、今度は曲がるブロックも利用してみましょう。
      grade5_artist_binary1: "バイナリは、 2 つのオプションだけを使って、情報を表すものです。 ここでは、「オフ」(0で表す) と、「オン」(１で表す) を使います。\\r \\rあなたが歩き回って、指定の四角形をオンにし、デザインできる「ピクセル」のグリッドを用意しました。アーティストに、はじめの行に、バイナリで \"01010101\"を、かかせることが出来ますか？"
      grade5_artist_binary10: "ヒントを見たい場合は、ここをクリックします。\nすきな絵を書いてもいいですよ。"
      grade5_artist_binary11: "自由に書きましょう！\nこのまっさらなキャンバスに、すきな絵を書いてください。さあ何から書きましょうか！"
      grade5_artist_binary2: "‘draw binary' （ドロー バイナリ）は、1 と 0 で表されるバイナリ文字列を受け取り、アーティストが書くべき絵を命令（めいれい）する関数（かんすう）です。\nアーティストは左から右、上から下へと動きながら、1なら正方形をぬりつぶします。0なら何もせずに次へ行きます。\nアーティストが絵を書くために、バイナリをどのように使うのか、プログラムを実行して考えてみて下さい。"
      grade5_artist_binary3: 正しいバイナリ文字列を「draw binary」関数のパラメータに入れて、この絵を書いてください。
      grade5_artist_binary4: 3ケタのバイナリ文字列（0と1が三つ）で、このパターンを書いて下さい。
      grade5_artist_binary5: "このプログラムを実行すると、おこった顔が書かれます。\nえがおが書かれるように、プログラムを直してください。"
      grade5_artist_binary6: 6ケタのバイナリ文字列を、11回くりかして書けば、このイメージを書くことが出来ますよ。
      grade5_artist_binary7: 一番短いバイナリ文字で、このイメージが書けるように考えて下さい。
      grade5_artist_binary8: このイメージを完成（かんせい）させてください。
      grade5_artist_binary9: |-
        もっと細かいキャンバスがあります - 16 ピクセル × 16 ピクセルです! \r \rこのビットで何ができるか、見てください。
      grade5_artist_for_loops10: |-
        あなたが学んだことをすべて使って、このイメージを作る事ができますか？ \r \r ヒントがほしい？ここをクリックします。
      grade5_artist_for_loops5: |-
        さっきのプログラムを、1ヵ所かえるだけで、この絵を書くことが出来ます！
        ヒント：ブロックを１つ消します。
      grade5_artist_for_loops6: "ふつうより、ちょっと多めか少なめの角度でまがると、面白いエフェクトがかかります。\nまがる角度を89度にして、さっきのプログラムを使えば、このねじれた四角のグルグルが書けますよ！\nヒント：一辺の長さは、15から300まで15ピクセルずつ ふえます。"
      grade5_artist_for_loops7: "さっきのプログラムを、3ヵ所かえるだけで、この絵を書くことが出来ます！\nヒント：\n1. 線の太さは？\n2. まがる向きは？\n3. いくつ「ずつ」カウントする？"
      grade5_artist_for_loops8: "多角形の辺の数を、変数でコントロール出来ることを思い出してください。\nさあ、`counter` 変数を使って、色々な多角形を書いてみましょう。\n三角形、四角形と1辺ずつふやして10角形まで書いて下さい。すべての多角形の一辺は、100 ピクセルの長さです。 \nヒント：まがる角度は360÷`counter` です。 "
      grade5_artist_for_loops9: |-
        これまで学んだことを全部思い出してください！
         `counter` 変数を使ったくりかえしで、この図形を書いてください。3角形から2辺ずつ ふやし、9角形まで書きます。
        ヒント：
        それぞれの辺の長さは、`counter`×10ピクセルです。
        まがる角度は、360÷`counter`度です。
      grade5_artist_for_loopsfreeplay11: |-
        自由研究：あなたは、このようなパターンの書き方を、すべて学びました。この絵が気に入ったら、にたデザインを書いてみて。自分のすきなように、作り直してもいいよ。
        ヒントがほしいときは、ランプをクリックしてね。
      grade5_artist_functionparameters10: "自由に作ってみよう！あなたは、このようなパターンの作りかたを、すべて学びました。この絵が気に入ったら、にたデザインを作ってみて。自分のすきなように、作り直してもいいよ。\nヒントがほしいときは、ランプをクリックしてね。 "
      grade5_artist_functionparameters7: さっき使った `draw a polygon` （ドロー ア ポリゴン、多角形を書く）関数と、「カウントする」ブロックのくりかえしを使って、この図形を書いて下さい。
      grade5_artist_parameters_squares1: "`draw a square`関数の「編集」をクリックして、`length` パラメータを追加します。「パラメータを追加（ついか）」ボタンの左のボックスに `length` と入れてから、ボタンをおして下さい。\nそして、正方形を三つ書きます。大きさは、25、50、75ピクセルで、それぞれ100ピクセルはなれています。"
      grade5_artist_parameters_triangles2a: '`length'' （レングス、長さ）の数を かえて、関数を よび出していますね。どのような動きになるか考えながら、実行して下さい。'
      grade5_artist_parameters_triangles4: この三角形を書く関数は、正しく動きません。 `length` パラメータによって、三角形の大きさが かわるように関数を直してください。そして、25、50、75 の大きさの三角形を書いてください。
      grade5_artist_variables_freeplay10: "自由研究：この図形の辺の数（sides）を、色々とかえてみてください。その後で、辺の数がかわっても、全体の長さが同じになるようなアルゴリズムを考えてください。\nヒント：てきとうな長さを辺の数で わり算すれば、辺の数が多くなるほど、辺の長さが短くなります。"
      grade5_artist_variables_freeplay14: |-
        自由研究: あなたのアルゴリズムは、さらに、もうひとつ入れ子のループの中に入っています。2つの変数にセットする数をかえて、カッコいいパターンが書けるか、ためして下さい。
        色を使えば、もっとカッコよくなります。ループの中で、「てきとうな色」を使って、デザインがどうなるか見てみてね！
      grade5_artist_variables_freeplay15: |-
        もっとカッコいいデザインを作るヒントを見たかったら、ランプをクリックして！自分のすきなデザインを、自由に書いても良いよ！
      grade5_artist_variables_freeplay16: ここに、真っ白なキャンバスがあります。線のかたちや、スタンプを使って、あなたが書きたいものを、自由に書いてください！
      grade5_artist_variables_hexagons1: "もう一回やってみよう！このカッコイイ六角形を使ったデザインを書くには、「lengh」変数を60にしてみてね。"
      grade5_artist_variables_letterT11: 前のパズルを、もっとむずかしくしました。sides 変数にセットする数を変えて、四角形を書くようにしてください。
      grade5_artist_variables_octagons13: "多角形の辺が多くなっても、画面からはみ出さないためには、それぞれの辺の長さを短くしなければなりません。このパターンを書くために、アルゴリズムを作り直しましょう。ひとつの多角形の辺の長さを全部足すと300 ピクセルです。sides変数を使って、length 変数に入れる数を計算しましょう。\nランプをクリックしたら、ヒントを教えるよ。"
      grade5_artist_variables_pentagon8: |-
        前のパズルで学んだように、sides 変数を使って、6角形を書いてください。
        sides 変数を4にすれば四角形、5にすれば五角形、六角形も八角形も書けることに気がついたかな？
      grade5_artist_variables_pentagon9: 前のパズルのアルゴリズムを使って、今度は、辺の長さが150の五角形を書きましょう。
      grade5_artist_variables_pentagons1: "100 ピクセルの辺を持つ五角形のパターンを書くよ！\n「セット length は」に、数のブロックをくっつけて、数は100にします。全部の「前に動く？ピクセル」には「length」ブロックを入れて下さい。\n「length」に入れた数が、その後のプログラムで、どこでも使えることが分ったかな？"
      grade5_artist_variables_pentagons12: "五角形を書くために、「sides」変数に 5をセットしてください。「length」変数には、75をセットします。そして「前にうごく？ピクセル」に、lengthを使います。\nこのアルゴリズムでは、辺がふえる度に、全体が大きくなることも、見ておいてください。"
      grade5_artist_variables_rectangle6: "高さが、はばの2倍の四角形を書きます。\n\"width\" （ウィドゥス、はばの意味）という変数に100 をセットします。計算ブロックを使ってプログラムを仕上げてください。\nヒント：四角形の高さは、width × 2 です。"
      grade5_artist_variables_square7: |-
        これは、多角形を書くプログラムです。 sidesという変数は4にセットされていますので、四角形を書くはずです。計算ブロックといっしょに sides 変数を使って、プログラムを仕上げてください。
        ランプをクリックするとヒントがあるよ！
      grade5_artist_variables_triangles2: '「前に動く"150"ピクセル」のかわりに「前に動く"length"ピクセル」ブロックを使います。"length"は、変数（へんすう）で、あなたの好きな数にできます。この三角形を書くために、"length"に150をセットしてください。'
      grade5_artist_variables_triangles3: "数のブロックを「セット Length は？」と「？回くりかえす」のところに入れて、50ピクセルの長さの三角形を6つ書いてください。\n"
      grade5_bee_for_loops1: '「くりかえし」を使って、すべての花からミツを集めましょう。'
      grade5_bee_for_loops2: "ミツバチがすべての花のミツを集めるように、プログラムを足してください。\n次のパズルでは、このプログラムをもっと短く書き直しますから、よく見ておいて下さいね。"
      grade5_bee_for_loops6: '`counter` を使ったくりかえしは、カウントダウンにも使えます。5 から 1 まで1ずつカウント ダウンして、花のミツをぜんぶ集めてください。'
      grade5_bee_for_loops8: 3、6、9、12、15の花のミツをとるためには、いくつずつ `counter` を ふやせば良いでしょう？「???」に正しい数をいれて、すべての花のミツを集めてください。
      grade5_playlab_freeplay: '自由時間です！すきなブロックを使って、楽しいゲームを作ってください。 '
      grade5_playlab_variables1: "プログラムは出来ていますので、「実行（じっこう）」ボタンをおして、ゲームをはじめてください。\nこのゲームでは、あなたは犬です。ネコよりも多くのハタを集めたいと思っています。\n犬を動かすには、「下矢じるしキー」を使います。犬をうごかして遊んだら「完了（かんりょう）」ボタンをおして下さい。"
      grade5_playlab_variables10: '`patrol` 関数を編集して、「キャラ」パラメータを加えてください。そして、画面にいる3人のキャラを全部うごかします。3人のキャラは、それぞれ1、2、3 番です。'
      grade5_playlab_variables11: "こんどは、 `patrol` 関数に「スピード」パラメータを追加してください。「スピード」パラメータを「スピード」ブロックに使って、他のキャラよりも早く、ペンギンがハタを取るようにして下さい。\nヒント： `actor' 2がペンギンです。"
      grade5_playlab_variables12: "さあ、お楽しみです。\nまず、プログラムをよく見て、それぞれのブロックが何をしているのか考えてください。\nそのあとで、矢じるしキーを使って、犬をコントロールし、すべてのハタを集めてください。\n注意：プログラムは、いじらないで下さい。"
      grade5_playlab_variables13: 犬が他のキャラにぶつかったら、左上に もどって やり直しにしましょう。「キャラ1が どれかのキャラにさわったら」ブロックと「キャラ1は左上に」ブロックを上手く使ってください。
      grade5_playlab_variables14: '自由時間です！すきなブロックを使って、楽しいゲームを作ってください。 '
      grade5_playlab_variables2: "さっきのゲームは、ネコが早すぎだったよね！\n'dog_speed'（ドッグ スピード） は、犬の早さを決めます。'cat_speed（キャット スピード）は、ネコの早さを決めます。\n'dog_speed'の数を大きくして、ネコより多くのハタを集めましょう。先に、10 ハタを集めたほうが勝ちです！"
      grade5_playlab_variables3: "「左矢じるしキー」と「右矢じるしキー」で左右に動きます。「上矢じるしキー」はジャンプです。\nすべてのハタを集めてください。"
      grade5_playlab_variables4: "「height（ハイト、高さ）」変数は、犬がどれくらいの高さジャンプするかを決めています。\n犬がすべてのハタを集められるように、「height」の数を大きくしてください。"
      grade5_playlab_variables6: |-
        「右矢じるしキー」で、犬（キャラ1）がパイを投げます。パイがネコ（キャラ2）に当たったら、点数をふやしましょう。
        「キャラ2が何かに さわったら」イベントで、「point」が1ふえるようにして下さい。数を１ふやすには「points = points + 1」とします。
        あなたの点数が10 になれば、勝ちです。
      grade5_playlab_variables7: こんどは、ネコがサンドイッチを投げてきます。サンドイッチが犬 (キャラ1) に当たったら、ポイントがへるようにしてください。10点から始めて、点数が０になったら、ゲームオーバーです。
      grade5_playlab_variables71: "`score_points` （スコア― ポイント）関数は、画面にスコアを書き出します。スコアは、`player_score`（プレイヤー スコア）の数です。\n`score_points` 関数に、「点」パラメータを追加して下さい。そして、`player_score` に、点が 足されるようにして下さい。\nさいごに、犬がネコにパイをぶつけたら、スコアが ふえて、ネコが犬にサンドイッチをぶつけたらスコアが へるようにします。\nヒント：スコアをへらす時は、-1 を使います。\n注意：プログラムを作り終わったら、「実行」をクリックします。 犬が 6 点取ったら、次のパズルに進みます。 "
      grade5_playlab_variables81: "ゲームを面白くするために `level_up` （レベルアップ）関数を用意しました。\n「もし」ブロックを使って、`player_score` が、一定の数より大きくなったら、 `level_up` 関数を よび出すようにプログラムしてください。\nたとえば：'player_score' > 6\nネコに勝って、レベルが 3 になったら、次のパズルに進みます。 "
      grade5_playlab_variables9: "`patrol` （パトロール）関数を編集して、ネコが上下に 400 ピクセル動きつづけるようにして下さい。"
      grade5_playlab_variables_freeplay: "自由時間です！たくさんのブロックがあるので、分類して整理しました。\nこのステージに出てきたブロックや変数だけじゃなく、その他にも、いろいろなブロックがあります。まずは、使えるブロックをすべて見てみましょう。\nそのあとで、 くりかえし、変数、イベントを使って、ゲームやお話を作りましょう。\nヒント: ワークスペース内のすべてのプログラムを見るにはスクロールして下さい。"
      gradek_artist_loops6: '「リピート」ループを使用して、水を波立たせることができます。'
      k-1 maze 1: 西に動かして、豚さんのところまで連れていってあげましょう。
      level 'grade3_Loops_10: |-
        先ほどのパズルと同じように繰り返しブロックを使いますが、今度は曲がるブロックも利用してみましょう。
      level 'grade3_Loops_11: "繰り返しブロックを使って階段を降り、はなのみつを集めましょう。"
      level 'grade3_Loops_12: 繰り返しブロックを使ってそれぞれのお花からみつを集め、蜂の巣ではちみつをつくりましょう。
      level 'grade3_Loops_2: ループを使えば同じ作業をもっと簡単に行えるかな？
      level 'grade3_Loops_3: 全てのはなのみつを集めるのに繰り返しブロックを使ってみましょう。
      level 'grade3_Loops_4: 今度は新しい繰り返しブロックを利用して、全てのはなのみつを集めてはちみつを作ってみましょう。
      level 'grade3_Loops_5: これからのブロックを繰り返しブロックに入れて、それぞれのお花からみつを集めましょう。
      level 'grade3_Loops_6: "このブロックの組み合せを３回繰り返したらどうなるでしょうか？\n最後にはちみつを作るのを忘れないでね。"
      level 'grade3_Loops_7: |-
        花には蜜が 1 ユニットずつあります。蜜を花から集めましょう。 
      level 'grade3_Loops_8: ループを使ってはちみつを作るための蜜を集めましょう。
      level 'grade3_Loops_9: それぞれのお花から蜜を集めて、蜂の巣ではちみつを作りましょう。
      level grade3_Loops_2: ループを使えば同じ作業をもっと簡単に行えるかな？
      scrat 16 (copy 1): ドングリ ！ドングリ ！ドングリ ！いちばんすくないブロックでぼくをあそこまでつれていくには、"もしも"ブロックをつかってね。
      scrat 16: ドングリ ！ドングリ ！ドングリ ！いちばんすくないブロックでぼくをあそこまでつれていくには、"もしも"ブロックをつかってね。
      scrat 17: よし、練習のためにもう一度やってみよう。さっきとそんなにかわらないけど、壁にきをつけてね。
      scrat 18 (copy 1): '"もし○○そうでなければ××"ブロックは、”もし"の結果によって、○○をするか、××をするかが変わってきます。この新しいブロックをつかって、ぼくをドングリまでつれていってね！'
      scrat 18: '"もし○○そうでなければ××"ブロックは、”もし"の結果によって、○○をするか、××をするかが変わってきます。この新しいブロックをつかって、ぼくをドングリまでつれていってね！'
      scrat 19 (copy 1): '”もし○○でなければ××”ブロックの練習をもう一回やりましょう。一度でクリアできるかな？'
      scrat 19: '”もし○○でなければ××”ブロックの練習をもう一回やりましょう。一度でクリアできるかな？'
      scrat 20: ブロックをあと3つだけ足して、難しい迷路をクリアしてみよう。もしこの迷路をクリアできたら、どんなに長くてクネクネした道でも、ぼくはドングリまで歩くことができるよ。いそいで！氷がとけてきた！
