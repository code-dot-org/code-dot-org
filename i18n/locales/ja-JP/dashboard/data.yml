ja:
  data:
    script:
      name:
        20-hour:
          desc: K-8(アメリカでの中学校）のコンピュータサイエンスコースを紹介
          Unplug1: ステージ 1
          Maze: ステージ 2
          Unplug2: ステージ 3
          Unplug3: ステージ 4
          Artist: ステージ 5
          Unplug4: ステージ 6
          Artist2: ステージ７
          Unplug5: ステージ８
          Farmer: ステージ 9
          Unplug6: ステージ10
          Artist3: ステージ11
          Unplug7: |
            ステージ12
            
            
          Farmer2: |
            ステージ13
            
            
          Unplug8: |
            ステージ14
            
          Artist4: |
            ステージ15
            
          Unplug9: ステージ16
          Farmer3: ステージ17
          Unplug10: ステージ18
          Artist5: ステージ19
          Unplug11: ステージ20
        Hour of Code:
          desc: Hour of Code（コーディングを学ぶ時間）
          Maze: ステージ 1
        Edit Code:
          desc: コードを編集する(ベータ版)
          MazeEC: ステージ 1
        2014 Levels:
          desc: Bounce (beta)
          Bounce: ステージ 1
        Builder Levels:
          desc: User-Created Puzzles (beta)
          Custom: ステージ 1
        Flappy Levels:
          desc: フラッピーバード
          Flappy: ステージ 1
        Jigsaw Levels:
          desc: Jigsaw (beta)
          Jigsaw: ステージ 1
        Step Levels:
          desc: Maze (beta)
          MazeStep: Stage Step
        edit-code:
          desc: コードを編集する(ベータ版)
          MazeEC: ステージ 1
          Webapp: ステージ 2
          ArtistEC: ステージ 3
          StudioEC: ステージ 4
        events:
          desc: Bounce (beta)
          Bounce: ステージ 1
          Studio: ステージ 2
        builder:
          desc: User-Created Puzzles (beta)
          Custom: ステージ 1
        flappy:
          desc: フラッピーバード
          Flappy: ステージ 1
        jigsaw:
          desc: Jigsaw (beta)
          Jigsaw: ステージ 1
        step:
          desc: Maze (beta)
          MazeStep: Stage Step
        wordsearch:
          desc: Spelling Bee (beta)
          WordSearch: ステージ 1
    game:
      name:
        Unplug1: コンピューター・サイエンス入門
        Maze: 迷路
        Multi: Multiple Choice Stuffs
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: プログラミングのグラフ用紙
        Artist: アーティスト
        Unplug4: アルゴリズム
        Artist2: アーティスト 2
        Unplug5: 機能
        Farmer: 農家
        Unplug6: 条件
        Artist3: アーティスト 3
        Unplug7: 作曲
        Farmer2: 農家 2
        Unplug8: 抽象化
        Artist4: アーティスト 4
        Unplug9: プログラミングをリレーする
        Farmer3: 農家 3
        Unplug10: インターネット
        Artist5: アーティスト 5
        Unplug11: まとめ
        MazeEC: 迷路
        Bounce: はずむ
        Flappy: フラッピーバード
        Jigsaw: ジグソーパズル
        MazeStep: Maze Step Mode
        Wordsearch: Wordsearch
        Webapp: Webapp
        ArtistEC: アーティスト
        TextMatch: Text Match
        StudioEC: Play Lab
    trophy:
      name:
        Bronze: 銅
        Silver: 銀
        Gold: 金
    concept:
      description:
        sequence: シークエンス
        if: もしもブロック
        if_else: If else ブロック
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        loop_while: の間にブロック
        loop_for: 数える ブロック
        function: 機能
        parameters: パラメーター付き機能
    level:
      instructions:
        maze_2_2: ブタを捕まえるのを手伝ってくれない？「前に動く」ブロックをつみあげて、「実行」ボタンをおしてね
        maze_2_1: このブタはわたしの羽をぐちゃぐちゃにします。ブタをみつけるのを手伝って！
        maze_2_2_5: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
        maze_2_3: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
        maze_2_4: 落ち着いて、悪いブタを見つけましょう。でないと怒るかも！
        maze_2_5: ブロックを2つだけ使い、緑のブタにたどりつく方法がありますす。わかりますか？
        maze_2_6: ブロックを３つだけ使い、緑の侵入者のところへ連れていって
        maze_2_7: 一番小さい数のブロックを使って、悪いブタを追い出しましょう。「繰り返し」ブロックを使います
        maze_2_8: 灰色のブロックを消すことはできません。「繰り返し」ブロックを使い、3回繰り返し、このパズルを解きましょう。「動く」「動く」「曲がる」の3つのブロックを灰色の「繰り返し」ブロックにいれてみましょう
        maze_2_9: OK。新しい「まで繰り返す(Repeat until)」ブロックを試しましょう。いらいらさせるブタにたどりつくまで繰り返します
        maze_2_10: 最後の問題です。4つのブロックだけを使いパズルを解けますか？
        maze_2_11: 人間のあなた。わたしはzmbie。おなかが減っています。。。ヒマワリが必要です。5つの ブロックだけでわたしを連れていけますか？
        maze_2_12: OK。似ていますが、ちょっと違います。ブロック5つだけでできますか？
        maze_2_13: '新しい"if"ブロックを使い、いつ曲がるかを決めてください。ヒント: あともう１つのブロックが必要です、どう設定しているかを学べば、次はひとりでできるようになります'
        maze_2_14: 'OK。さっきのパズルと同じです、でもどうやって"if"ブロックと"repeat"ブロックを一緒に使ったかをもう一度思い出してみましょう'
        maze_2_15: 'ヒマワリがほしい！一番小さいk座右のの"if"ブロックを使いそこまで連れていってください'
        maze_2_16: OK 練習のためにもう一度。 ー　それほど違いはないけれど、 チャンパーたちに気をつけて！
        maze_2_17: '"If-else"ブロックは条件をきめて、なにかしらのことをします。ヒマワリをとってくるために、新しいブロックを試しましょう'
        maze_2_18: '"if-else"ブロックをもう一度練習。一度でちゃんとできるでしょうか？'
        maze_2_19: ブロックをあと3つ足して、難しい迷路を解くのをたすけてくれますか？もしそれができれば、どんな長くカーブした道でも歩けるようになります
        turtle_1_1: こんにちは、はアーティストです。プログラムを作ればどんな形でも描くことができます。ブロックをいくつか使い、灰色の線をなぞらせてください
        turtle_1_2: '四角形を描きます。注: 新しい「色の設定」ブロックで選択して、好きな色を使用する'
        turtle_1_3: ブロックを３つだけ使い、四角形を作成する
        turtle_1_4: '毎回違う色を選択してくれる"random color"オプションを使い、色の異なる側面をもつ三角形を描きましょう。ヒント：どの程度曲がるかは、回転ブロックの回数をクリックしながら見つけます'
        turtle_1_5: 練習で、三角形を描いて、そして封筒になるように四角形を描く
        turtle_1_6: どうやって、この三角形と四角形を描けるか解決できますか？ヒント：まず三角形を描いてから、次にどのくらいの四角形を描けばよいかを決める
        turtle_1_7: 'OK.もう少し難しくしてみましょう  -もしこれらの緑のメガネを描けるか試しましょう。四角形はそれぞれの側面が100 ピクセルで 50 ピクセル離れています。緑色で描くのを忘れずに ！'
        turtle_1_8: 'OK.  このコーディングを実行 (または「実行する」キーを押して試す)したら何が起こるでしょうか。その後、図が完了まで何回も繰り返します。色は毎回異なるようになります'
        turtle_1_9: '円を描くのにどんな数字が"???"を置きかえられるかわかりますか？'
        turtle_1_10: よくできました！何か描きたいものを描いてみましょう。いくつかの楽しいアイデア： スティック図、雪片、またはスパイラル。新しい「設定幅」ブロックを試みてください。楽しんで！
        turtle_4_1: ブロック３つだけ （100 ピクセルのエッジ) で三角形を描くことができますか？ヒント:「繰り返す」のブロックを使用する
        turtle_4_2: 「90度右に曲がる」ブロックをプログラムのどこかに追加して、指定された三角形を描いてください
        turtle_4_3: 'OK  これがあなたが書いたひとつの三角形を描くコードです。かわいい花を作るために「繰り返し」と「ターン」のブロックを追加できますか？'
        turtle_4_4: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36度だけ回転させました。何回これを繰り返す必要がありますか？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_5: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36回繰り返し回転させました。どのくらいの角度で回転させればいいでしょう？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_6: ブロックを３つだけ使用して、20 ピクセルのエッジを持つ四角形を描くことができますか？
        turtle_4_7: 'これが最後のパズルで四角形を描いたときのコードです。10繰り返して隣同士の四角形ではしごを描けますか？ヒント: ブロックをあと2 つ使うだけです'
        turtle_4_8: ここでは、前のパズルを解決します。図を完成させるためにブロックをあと2つ追加できますか？
        turtle_4_9: ここでは、前のパズルを解決します。図を完成させるのに角度をどのくらいにすればいいでしょうか？（解くのに多少時間がかかるでしょう)
        turtle_4_10: ここでは、前のパズルを解決します。図を完成させるのに何回繰り返せばいいでしょうか？
        turtle_4_11: 違うパターンを作るのに「回転」と「繰り返し」ブロックの中の数字を変えてください。また、残りのコードを自分の好きなように書き変えてみてください
        maze_karel_1_1: こんにちは、私は農民です。私の畑を平らにするのを助けてください。根付けの準備をします。私を泥山にうごかして「取り除く」ブロックで泥山を取り除いてください
        maze_karel_1_2: '次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル分の泥山で一杯にしてください'
        maze_karel_1_3: 私を泥山へ動かしてください、そしてできる限り少ないブロックで、シャベル何杯分で泥山をなくせるかを教えてください
        maze_karel_1_4: '泥山４つすべてをなくすのを助けてくれませんか？ヒント: できれば繰り返しブロックを使います'
        maze_karel_1_5: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます'
        maze_karel_1_6: '可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください'
        maze_karel_1_7: うわー、すごく深い穴を発見 ！何杯分のシャベルの泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？
        maze_karel_1_8: できる限り少ない数のブロックで、畑のはじの穴を埋めるのを手伝ってください。
        maze_karel_1_9: 'これらすべての泥山をなくしましょう。できる限り少ない数のブロックを使ってください。ヒント："while"ブロックを使ってみてください'
        maze_karel_1_10: 遅くまで仕事をしていたので外は真っ暗、積み上がった山がどのくらい大きいのかわかりません。whileブロックにあったようなオプションはもうありません。畑にそって私を移動させ、山があれば移動させます
        maze_karel_1_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったら移動し、穴があったら埋めます。ヒント:"if"ブロックでオプションのドロップ ダウン メニューを使います'
        turtle_2_1: 'こんにちは。私、zombieアーティスト。私、描くのが大好き ！特別な色で四角形を描くのを手伝ってください。重要: ブロックはみんな同じですが、カテゴリーに分かれています'
        turtle_2_2: 新しいブロックを定義させてくれる機能を使いましょう！「機能」カテゴリにある、新しい「四角形を描く」ブロックを試して、小さな 50 x 50 の緑の四角形を描きましょう
        turtle_2_3: 繰り返し」ブロック を使い、「ループ」カテゴリにある、サイズが100、それぞれ120度離れている四角形を３つ描きます。そして３つのランダムで違う色で描いてください
        turtle_2_4: もっと素敵にしてみましょう。コードを変更して、100 ピクセルの幅、それぞれの間が10 度離れている36個の四角形を描きます。ヒント：スライダを使うと早くできます
        turtle_2_5: 50、60、70、80、90ピクセルの辺を持つ四角形を描きます。「四角形を描く」機能を５回使います。
        turtle_2_6: 'OK、 このプログラムは前回と同じ四角形を描くのに、カウンターを使います。四角形をカウンターと同じサイズにしたいので"Counter"ブロックを使います。ヒント： 「変数」のカテゴリにあります'
        turtle_2_7: ブロックが無効なので、スパイラルを描くプログラムが起動しません。「カウント」ブロック(ループ カテゴリ）と「カウンター」ブロックの(変数のカテゴリ) を使用して同じスパイラルを描く新しいプログラムを作ります
        turtle_2_7_5: 新しい「雪だるまお絵描き」機能 (機能のカテゴリ)をつかって高さ 250 と 長さ100 の 雪だるまを2 つ描いてください
        turtle_2_8: これは少しひっかけた問題です。「雪だるまお絵描き」機能と、新しい「前方にジャンプ」のブロック (アクションのカテゴリ)を使って、雪だるまを三つ、100 ピクセルを離れたところに、違う色を使って描きます
        turtle_2_9: '" count "ループを使って、高さ70、80、90 100 110 の雪だるまの家族を描いてください。雪だるまは、 60 ピクセル離します'
        turtle_2_10: 様々なスパイラルを試しにつくるコードはこちら。回転量を変更するとどうなるか？またはループのランダムな色を設定しみたらどうなるか？好きなものを自由に描いてみましょう
        maze_karel_2_1: 'ブロックを使って、泥山をすべて移動させ、地面の穴を全て埋めるのを手伝ってください。たくさんのブロックを使う代わりにループを使います。ヒント: ループの中に別のループを入れることもできます'
        maze_karel_2_2: '"5を埋める"と呼ばれるブロックを作りました。機能カテゴリです。この穴を埋めるために使います'
        maze_karel_2_3: 'すべての穴を埋めるように新しい「5を埋める」 機能のブロックを使います。関数のカテゴリから"5 を埋める"ブロックをドラッグします'
        maze_karel_2_4: 7回シャベルで取り除くという新機能を定義して、その機能を使ってすべての泥山を削除することができるプログラムを書きます
        maze_karel_2_5: 泥山からシャベル6回分を取り除く新機能を作り、それを使ってすべての泥山を平らにするのを手伝ってください
        maze_karel_2_6: 「8 埋める」、「8 削除する」の２つの新しい機能を使い、泥山を平らにして、穴を埋めましょう
        maze_karel_2_7: |
          私の畑に牛がいます！牛を避けながら泥山を除去する新しい機能を作りましょう。新機能の中に全ブロックを置きます
          
          
        maze_karel_2_8: この新しい「牛を避ける、1 削除する」機能を使い、全ての泥山を取り除きましょう
        maze_karel_2_9: |
          縦に並ぶ４つの異なる泥山を削除する機能です。ループ内にこの機能を入れてみましょう。いくつか新しいブロックだけで泥の山を除去できます
          
        maze_karel_2_10: 私を畑のはじに移動させて、 2 つの機能を使い、すべての泥山を削除、すべての穴を埋めてください
        turtle_3_1: このパズルでは、どのように「四角形を描く」か、「円を描く」かの機能がどう定義されるかを学びます。機能の定義づけでは、ブロックそのものが実行されません。実際に四角形を描く「四角形を描く」ブロックが必要になります
        turtle_3_2: 例として「四角形を描く」機能を使い、「三角形を描く」機能作成して、使ってみます
        turtle_3_3: '猫の周りに三角形のフェンス、そして牛の周りに四角形のフェンスを描いてください。ヒント: 実行しながらプログラムをテストする'
        turtle_3_4: |
          ライオンの周りに家を描くのに、「四角形を描く」と「三角形を描く」（他のいくつかのブロック）をどう使うか自分でわかるか確認します
          
        turtle_3_5: さあ、新しい「家を描く」機能を作って、猫の家を描いてみましょう。ヒント：「何かをする」ブロックを使い、新しい機能を作成する。ブロックに自分でつけた名前をテキスト入力します
        turtle_3_6: 「四角形を描く」を手本として、「三角形を描く」という機能を作ってください。「長さ」という名前の入力を追加します。その後、様々なサイズの三角形を描画して見てくださ。 （ヒント：関数に入力を追加するには、星をクリックしてください）
        turtle_3_7: 「家を描く」に「長さ」という入力名を追加します。(エッジ 150 ピクセルの長さ) の大きな象の家を建てましょう
        turtle_3_8: パズルからのブロック、すべてがあります。「家を描く」を修正し、新しい家を描いた後は右下隅で終了するようにしています。この修正機能を使い、3 つの家を描いてみます
        turtle_3_9: ひとりで「家を描く」機能を作れますか。試してみて、住宅の列を作ります
        turtle_3_10: あなたはたくさんのことを学びました！星、スパイイラル、または派手なスノーフレークなど自由に描きましょう
        maze_karel_debug_seq_1: デバッグのせかいへようこそ ！プログラムがただしくうごいてくれません。じめんをたいらにしてたねまきができるように、まちがっているところをみつけて、なおしてもらえませんか？
        maze_karel_debug_seq_2: このプログラムのどこがまちがっていますか？山をなくすにはどこをなおせばいいでしょうか？
        maze_karel_debug_repeat: じめんがたいらになるように、このプログラムのまちがいをなおして（デバッグして）ください
        maze_karel_debug_while: このプログラムのどこをかえれば、あなをうめることができるでしょうか？
        maze_karel_debug_if: たすけて！じめんがぜんぶたいらになるように、このプログラムをなおしてください。
        maze_karel_debug_if_else: やまをぜんぶなくすのと穴をうめることができるように、このプログラムをなおして（デバッグして）ください
        maze_karel_debug_function_1: プログラムのどこをなおせば、やまをぜんぶなくすことができるでしょうか？
        maze_karel_debug_function_2: プログラムのまちがいをなおして（デバッグして）もらえませんか。じめんをたいらにしたいんです
        maze_karel_debug_function_3: このプログラムをすこしかえて、じめんからやまをぜんぶなくしてください
        turtle_5_1: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_2: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_3: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_4: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_5: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_6: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        maze_3_1: ブタをつかまえないといけません。move(); をなんどかコールしてたまごをとりかえしてください
        maze_3_2: ブタのいるとこにいけるプログラムをかいてください
        maze_3_3: ブタのところまでどうやっていけばいい？ばくだんにぶつからないようにきをつけてね
        maze_3_4: うわーん！ばくだんにぶつからずにブタをつかまえるプログラムをかいてよ！
        bounce_1: 「左向きのブロックが押されたとき」のブロックにべつのブロックをつなげて、「実行」ボタンを押してください。左向き矢印を押してパドルをゴールまで動かしましょう
        bounce_2: 「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します
        bounce_3: 「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します
        bounce_4: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
        bounce_5: ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます
        bounce_6: 最終目標は画面の上にあります。パズルを解くために「ボールがあたったとき」ブロックにブロックを接続する必要があります
        bounce_7: 「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます
        bounce_10: 一番上にゴールがあります。ゲームを作るには、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう
        bounce_11: 'You can now attach blocks to the "when run" block. You have to attach the new "launch new ball" block in more than one place. Also, try changing the scene or the speed of the paddle and the ball and see how many points you can score before your opponent scores twice.'
        bounce_12: "Create your own Bounce game. You can change all the visuals and the rules. When you're done, click Finish to let friends try your game on their phones."
        Custom_builder: 'Drag blocks from the toolbox to the workspace to draw the level you wish to create. Press "Run" when you are ready.'
        flappy_1: 「クリックされたとき」のブロックにほかのブロックを1つくっつけて、「実行」ボタンをおしてください。クリック（またはがめんをタップ）すると、Flappyはもくひょうにむかってうごきます
        flappy_2: いくつかの面を追加します。「面にヒットしたとき」ブロックに接続します。Flappyがクラッシュしたとき「ゲームオーバー」のコードが必要です
        flappy_3: 「実行時」ブロック同士をくっつけておくと、ゲームがはじまったときにそのブロックのとおりにうごきます。スピードとはねのうごきのレベルをセットしてみてください
        flappy_4: もしクラッシュさせるコードを書かない場合、Flappyは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されtパイプにクラッシュするときに「ゲーム終了」のコードが必要になります
        flappy_5: とくてんひょうをつくり、Flappyがどかんをとおりぬけたときのてんすうをかぞえましょう。「どかんをとおりぬけたとき」のブロックにぶろっくをくっつけて、とんでいるFlappyがどかんのあいだをとおりぬけたときにてんすうがふえるようにしてください
        flappy_6: Flappyがふらふら飛ぶ量を小さくしたり大きくした後、まだ得点しているかどうか見てください
        flappy_7: 次に、「実行時」ブロックにもう1つのブロックをくっつけて背景を変えてみてください
        flappy_8: |
          ゲームが開始した以外にもいつでもビジュアルを設定できます。例えば、障害物を過ぎたとき、などの状況が起こるランダムな状況を設定するようにしてください
          
        flappy_9: 物事をミックスするため、障害物や地面にヒットした時に、ゲーム終了の代わりに得点を０に戻してください。
        flappy_11: じぶんのFlappyゲームを作ってみましょう。みためやルール、じゅうりょくもすきなようにかえられます。作りおわったら、「完了」ボタンをクリックしてともだちにおしえましょう。ともだちはけいたいでんわをつかって、あなたのゲームであそぶことができます。
        flappy_k1_1: Flappyであそぶ
        flappy_k1_2: 「クリックされたとき」のブロックにほかのブロックを1つくっつけて、「実行」ボタンをおしてください。クリック（またはがめんをタップ）すると、Flappyはもくひょうにむかってうごきます
        flappy_k1_3: いくつかの地面を追加します。「地面にヒットしたとき」ブロックに接続します。Flappyがクラッシュしたとき「ゲームオーバー」のコードが必要です。
        flappy_k1_4: 「実行時」ブロック同士をくっつけておくと、ゲームがはじまったときにそのブロックのとおりにうごきます。スピードとはねのうごきのレベルをセットしてみてください
        flappy_k1_5: もしクラッシュさせるためのコードを書かない場合、Flappyは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されtパイプにクラッシュするときに「ゲームエンド」のコードが必要になります。
        flappy_k1_6: スコアボード（得点表）を追加して Flappyが障害物を過ぎたときの得点を数えましょう。「障害物と過ぎたとき」ブロックを追加して、飛んでいるフラッピーが最初の設定したパイプを過ぎるたびに得点をさせてください。
        flappy_k1_7: どかんをとおりぬけるたびになんかいもてんすうがふえるかどうか、かくにんしてください。
        flappy_k1_8: 次に、「実行時」ブロックにもう1つのブロックをくっつけて背景を変えてみてください
        flappy_k1_9: 「実行時」ブロックに「プレイヤーをセット」のブロックをくっつけて、プレイヤーのみためをかえてみてください。
        jigsaw_1: Click the block
        jigsaw_2: Drag the block to the target
        jigsaw_3: Arrange the blocks to form the image
        jigsaw_4: Arrange the blocks to form the image
        jigsaw_5: Arrange the blocks to form the image
        jigsaw_6: Arrange the blocks to form the image
        jigsaw_7: Arrange the blocks to form the image
        jigsaw_8: Arrange the blocks to form the image
        jigsaw_9: Arrange the blocks to form the image
        jigsaw_10: Arrange the blocks to form the image
        jigsaw_11: Arrange the blocks to form the image
        jigsaw_12: Arrange the blocks to form the image
        jigsaw_13: パズルをといて！
        mazestep_1: Maze step description here
        mazestep_2: Maze step description here
        mazestep_3: Maze step description here
        mazestep_4: Maze step description here
        mazestep_5: Maze step description here
        studio_c2_1: いぬに「こんにちは」といわせてみましょう。
        studio_c2_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_c2_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_c2_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c2_5: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c2_6: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c2_7: 「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。
        studio_c2_8: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c2_9: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c2_10: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c2_11: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_story_1: いぬに「こんにちは」といわせてみましょう。
        studio_c3_story_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_c3_story_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_c3_story_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c3_story_5: Can you add a block to make the octopus happy?
        studio_c3_story_6: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_game_1: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c3_game_2: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c3_game_3: 「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。
        studio_c3_game_4: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c3_game_5: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c3_game_6: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c3_game_7: "Create your own game. When you're done, click Finish to let friends try your game on their phones."
        studio_playlab_1: 'Penguin wants to say "hello" - can you help him?'
        studio_playlab_2: 'Cave Boy (actor 1) and Cave Girl (actor 2) would like to say "hello" to each other. Can you help them by using the "say" block twice?'
        studio_playlab_3: Can you help Tennis Girl get to the flag?
        studio_playlab_4: Can you help Tennis Boy (actor 1) get to Tennis Girl (actor 2) and play a sound when he gets there?
        studio_playlab_5: 'Can you help the Spacebot say "greetings earthlings" when it is clicked? Don’t forget to click it after you click Run'
        studio_playlab_6: Can you help the Witch move around using the up/down/right/left arrow keys to get to all the magical fireballs?
        studio_playlab_7: 'The "repeat forever" block allows you to run code continuously. Can you attach blocks to it to help the wizard move right and left repeatedly?'
        studio_playlab_8: Can you add a block to score a point and a block to play a sound when the unicorn runs into the wizard, and then move him with the arrows until you score?
        studio_playlab_9: Set the background for this alien invasion and help the Spacebot get to the alien faster by changing its speed. Then move him with the arrow keys to get to the Spacebot and alert everyone else
        studio_playlab_10: "Create your own game. When you're done, click Finish to let friends try your game on their phones."
        studio_full_sandbox: "Create your own game. When you're done, click Finish to let friends try your game on their phones."
        studio_k1_1: いぬに「こんにちは」といわせてみましょう。
        studio_k1_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_k1_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_k1_4: 'Make the dog move to the cat and the cat say "hello" when he gets there.'
        studio_k1_5: Can you add a block to make the octopus happy?
        studio_k1_6: Create your own story! Move around the cat and dog, and make them say things.
        maze_wordsearch_k_1: EASTになるように、私をうごかしてください。
        maze_wordsearch_k_2: SOUTHになるように、私を動かしてください。
        maze_wordsearch_k_3: WESTになるように、私を動かしてください。
        maze_wordsearch_k_4: NORTHになるように、私を動かしてください。
        maze_wordsearch_k_6: Move me East and then South to spell the word JUMP
        maze_wordsearch_k_9: Move me one way, then another to spell the word CODE
        maze_wordsearch_k_13: Move me one way, then another to spell the word DEBUG
        maze_wordsearch_k_15: Move me one way, then another to spell the word ABOVE
        maze_wordsearch_k_16: Move me one way, then another to spell the word BELOW
        maze_wordsearch_k_20: This is a test! Move me one way, then another to spell the word STORY
        webapp_ec_simple: Create your web app by using createHtmlBlock.
        turtle_ec_1_2: 'Now, draw a square. NOTE: use your favorite color by picking it in the new "penColor" block.'
        turtle_ec_1_10: 'You made it! Now, draw anything you want. Some fun ideas: a stick figure, snowflake, or spiral. Also try the new "penWidth" block. Have fun!'
        studio_ec_sandbox: "Create your own game. When you're done, click Finish to let friends try your game on their phones."
    levelbuilder:
      frozen line:
        instructions: こんにちは！アレンデール王国のエルサです。１本線を描くのを手伝ってください。
      frozen perpendicular:
        instructions: こんどは、２本の線が９０度になるように描画してみましょう。”移動”ブロックだけでなく、”回転”ブロックも使ってください。
      frozen square iterative:
        instructions: 正方形の描画にはまだ道半ばですね。４本の線を使って正方形を作ってみましょう。
      frozen square loop:
        instructions: こんにちは、アレンデール王国のアナです。”繰り返し”ブロックを使って正方形を描いてみましょう。そうすると少ない数のブロックで同じことができます。正方形を作るには、”繰り返し”ブロックの中を何回(???)繰り返せばよいかしら？
      frozen square loop 3x:
        instructions: 傾いた正方形を３つ作ってみましょう。それぞれの正方形を描画する前に１２０度回転させてくださいね。
      frozen square snowflake:
        instructions: ”繰り返し”ブロックを使い、正方形を１０回描画したら、雪の結晶をつくれるかしら？それぞれの正方形を描画するときに、”回転”ブロックをつかって、３６度回転してくださいね。
      frozen cross:
        instructions: ”繰り返し”ブロックを使って、プラス記号（足し算記号）を描いてください。エルサが前にすすんだり、後ろにすすんだりできることに気がついた？
      frozen cross rotate:
        instructions: では１０回くりかえしてみましょう。それぞれの線を描くときに何度回転したらよいかわかるかしら？
      frozen cross rotate dense:
        instructions: ９０回くりかえしてみましょう！９０を何倍すると３６０度になるかしら？ヒント：とても小さい数ですよ。
      frozen diamond:
        instructions: 平行四辺形を描いてみましょう。正方形みたいだけど角度がちがいます。９０度の代わりに６０度と１２０度をつかいましょう。
      frozen diamond mini snowflake:
        instructions: 雪の結晶の形はぜんぶ違うって知ってたかしら？平行四辺形を９０度回転しながら４回描画して、新しい雪の結晶を描いてみましょう。そのとき、”繰り返し”ブロックをつかってくださいね。
      frozen diamond snowflake:
        instructions: では、平行四辺形を３６度回転しながら１０回繰り返して描くことで新しい雪の結晶を描いてみましょう。
      frozen circle:
        instructions: '円は特別な形です。円を描くのにどんな数字で"???"を置きかえればよいかわかりますか？'
      frozen circle function:
        instructions: ”円を描く”ブロックを使って１０個の重なった円を描画してみましょう。円を描くたびに移動することを忘れないでね。
      frozen circle function in circle:
        instructions: では、２０個の重なった円を描いてみましょう。それぞれの円を描くたびに１８度回転させてくださいね。
      frozen circle function with parameter:
        instructions: ”円を描く”ブロックは色々なサイズの円を描くことができます。サイズが５の小さい円とサイズ１０の大きい円を描くことができるかしら？
      frozen snowflower:
        instructions: ふくざつな雪の結晶もシンプルな形の組み合わせで描くことができます。サイズ５の円を５回、サイズ１０の円を５回くりかえして、模様を描くことができますか？
      frozen snowflake branch:
        instructions: ”結晶の枝を描く”ブロックを使って、３つの枝を描いてみましょう。雪の結晶のように見えてきました。
      frozen snowflake full:
        instructions: では、８回繰り返して美しい雪の結晶を描いてみましょう！
      frozen freeplay:
        instructions: あなたはもう芸術家ですね！あなたの作品を友達に見てもらいましょう。
      scrat 16:
        instructions: 'どんぐり！どんぐり！どんぐり！"if"ブロックを使って、できるだけ少ない数のブロックで私をそこへ連れていってください。'
      scrat 17:
        instructions: いいですね！もういちど練習しましょう。そんなに違いはありません。でも壁には気を付けてね！
      scrat 18:
        instructions: '"if-else"ブロックは条件をチェックして、どちらかの処理を実行するものです。このブロックを使って、僕をドングリまでつれていってください。'
      scrat 19:
        instructions: '"if-else"ブロックをもう一度練習。一度でちゃんとできるでしょうか？'
      scrat 20:
        instructions: ３つのブロックを追加するだけでもっと難しい迷路を解けますか？あなたがちゃんとしてくれれば、私はどんな曲がりくねった道でも、どんなに長くても、歩いて行けるんです。いそいで！氷がとけちゃう！
      Standalone_Artist_1:
        instructions: "Welcome to Artist! First off, let's try to make a simple square using the turn right block and move forward block. Each side should be 100 pixels long."
      Standalone_Artist_2:
        instructions: Draw this diamond with 120 and 60 degree angles and 150 pixel long sides.
      Standalone_Artist_3:
        instructions: Can you draw this hexagon with 100 pixel sides and 60 degree turns?
      Standalone_Artist_4:
        instructions: "Now you've got a new block to play with, the loop. This will repeat a set of commands. What happens if you loop these commands 6 times?"
      Standalone_Artist_5:
        instructions: How many times do you need to loop this diamond to draw the flower?
      Standalone_Artist_5.5:
        instructions: "Notice how we simplified the diamond code by turning it into a loop. You can loop that whole sequence 12 times to draw the flower. Hint: You'll need to turn 30 degrees after your diamond loop so you don't keep drawing over the same diamond."
      Standalone_Artist_6:
        instructions: 'Loop this hexagon code 6 times to create the design. How many degrees will you need to turn each time? Hint: divide the number of degrees in a circle by the number of times you are looping.'
      Standalone_Artist_7:
        instructions: 'A function is another programming tool to help you avoid repeating yourself. This function draws a flower, so you can use it any time you want to draw a flower. Use this and the new jump block to draw these flowers. Hint: The flowers are 150 pixels apart'
      Standalone_Artist_8:
        instructions: |-
          Here's a function called "Draw a shape" that we've programmed to draw hexagons. Run the code to see what it does and then experiment with the function to see what happens. Can you make it draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9:
        instructions: "Now go ahead and make whatever picture you'd like! You've even got an empty function that you can make do whatever you want!"
    video:
      name:
        maze_intro: 迷路入門
        artist_intro: アーティスト紹介
        farmer_intro: 農家入門
        flappy_intro: Flappy入門編
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        if: もしもブロック
        if_else: もしも/他にブロック
        if_else_scrat: もしも/他にブロック
        function: 関数
        loop_while: の間にブロック
        loop_for: 数える ブロック
        parameters: パラメーター付き関数
        hoc_wrapup: Hour of Code（コーディングを学ぶ時間）まとめ
        Unplug1: What is CS?
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: グラフ用紙のプログラミング
        Unplug4: アルゴリズム
        Unplug5: 機能
        Unplug6: 条件
        Unplug7: Songwriting
        Unplug8: 抽象化
        Unplug9: Relay programming
        Unplug10: Internet
        Unplug11: ラップアップ
        C1_happy_maps_unplugged: Happy Maps
        C1_moveitmoveit_unplugged: Move It, Move It
        C1_bigevent_unplugged: The Big Event
        C1_getting_loopy: Getting Loopy
        C1_pair_programming: Pair Programming
        C1_maze_intro_sequencing: Maze Sequencing Intro
        C1_maze_debugging: Maze Debugging
        C1_bee_level_intro: 'Bee Level - Intro'
        C1_artist_intro: アーティスト紹介
        C1_spelling_bee_intro: Spelling Bee Intro
        C1_zuck_repeat_loop: Maze Loops
        C1_bee_loops: Bee Loops
        C1_maze_loops: Maze Loops
        C1_playlab_storytelling: 'Play Lab - Create a Story'
        C1_planting_seed: Planting a Seed
        C1_building_foundation: Building a Foundation
        C1_going_places_safely: 安全な道を通って行く
        C2_maze_intro: 迷路入門
        C2_artist_intro: アーティスト紹介
        C2_zuck_repeat_loop: Maze Loops
        C2_artist_loops: Artist Loops
        C2_artist_debugging: Artist Debugging
        C2_bee_loops: Bee Loops
        C2_bee_debugging: Bee Debugging
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: 'Play Lab - Create a Story'
        C2_graph_paper: グラフ用紙のプログラミング
        C2_conditionals_with_cards: 条件
        C2_binary_bracelets: Binary Bracelets
        C2_relay_programming: プログラミングをリレーする
        C2_paper_airplanes: Paper Airplanes
        C2_digital_footprint: Your Digital Footprint
        C3_maze_level_4: Maze Loops
        C3_artist_intro: アーティスト紹介
        C3_artist_functions: Artist Functions
        C3_bee_functions: Bee Functions
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: Maze Conditionals
        C3_artist_nested_loops: Nested Loops
        C3_farmer_while: While Loops
        C3_bee_nested_loops: Nested Loops
        C3_bee_debugging: Bee Debugging
        C3_bounce: バウンド
        C3_playlab_create_game: 'Play Lab - Create a Game'
        C3_computational_thinking: コンピュテーショナル・シンキング（コンピューターの様に考える）
        C3_dice_race: Dice Race
        C3_internet: Internet
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: Songwriting With Parameters
        C4_intro: Introduction
        C4_bee_conditional: Bee Conditionals
        C4_variables_artist: 'Variables - Artist'
        C4_variables_playlab: 'Variables - Play Lab'
        C4_for_loops: For Loops
        C4_math_artist: Programming the Artist with Math
        C4_function_edit: Editing Functions
        C4_function_create: Creating Functions
        C4_function_parameters: パラメーター付き関数
        C4_conditionals: 条件
        C4_unplugged_algorithms: Algorithms with Tangrams
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variables in Envelopes
        C4_unplugged_forloops: For Loops
        C4_unplugged_parameters: Songwriting with Parameters
        C4_unplugged_binary: Binary
        frozen_intro: Hour of Code Intro
        frozen_loops: Introduction to Loops
        frozen_functions: Introduction to Functions
        playlab_intro: Introduction to Play Lab
        playlab_events: Play Lab Events
        playlab_repeat_forever: Play Lab Repeat Forever
    callout:
      text:
        drag_blocks: 「移動」ブロックをドラッグして、ほかのブロックの下にくっつけてください。
        run: 「実行」ボタンをおして、プログラムをうごかしてみてください。
        watch_again: Click here to watch the video again
        gray_block_explanation: 灰色のブロックは消すことができません。それでもパズルをとくことができるでしょうか？
        show_code_explanation: 自分で書いたプログラムコードを表示する
        instructions_repeat_explanation: それぞれのパズルについてのプログラムはくりかえしになります。
        category_explanation: 前と同じブロックがすべてそろっていますが、種類別になっています
        set_sprite_image: 'Attach a "set actor to image" block to the "when story starts" block to enable an actor for this story'
        studio_say_text: Type what you want your actor to say within these quotes
        jigsaw_click: このブロックをクリックして！
        move_elsa_forward: 'エルサをまえにすすませるために、"まえにうごく"ブロックをドラッグして"実行時"ブロックにくっつけてください。'
        turn_elsa: '"回転"ブロックを使ってエルサの向きを変えてください。ドロップダウンの数字でどれくらいエルサを回転させるかを決めます。'
        replace_questions: 'ドロップダウンを使って"???"を数字に変えてください'
        replace_questions_degree: 'ドロップダウンを使って"???"を回転するための正しい角度に変えてください'
        repeat_blocks: 'Use the "Repeat" block and wrap it around the blocks in the workspace'
        repeat_blocks_1: (1)このブロックを使います。作業領域にある灰色のブロック達のあたりに置いてください
        repeat_blocks_2: '(2)"繰り返し"ブロックをここに移動させて、灰色のブロック達を内側に置いてください'
        snowflake_dropdown: Use this drop-down to create different snowflakes!
        degrees_per_side: Divide 360 by the number of sides to get the size of each angle in degrees.
        set_sides: 'Use this block to set "sides" to the number needed to complete the puzzle.'
        set_length: 'Use this block to set "length" to the correct value.'
        which_equation: Which equation makes each side shorter for shapes with more sides?
        get_nectar: 'Use the new "get nectar" block.'
        actions_category: 'The tool box got a new look! The "Actions" blocks are in here now.'
        draw_square_hint: 'Hint: Use the square loop you just made in the last puzzle.'
        edit_function: Click here to edit your function.
        create_function: 'Click here to open the "Functions" flyout, then click the "Create a Function" button.'
        house_hint: "It's ok if the picture doesn't look like a house yet. We will fix it in the next puzzle."
        edit_draw_square: Use this button to edit the function and add the loop.
        edit_get_nectar: Use this button to edit the function and change the direction the Bee will turn to get the nectar.
        logic_category: 'Open the "Logic" flyout to find the "if/else" block.'
        length_parameter: 'Can you update this function so it uses the "length" parameter?'
        frozen_diamond_repeat: 繰り返しブロックを使ってこの形を作ってください
        frozen_circle_function_in_circle_turn: 円を描くたびに向きを変えることを忘れないでください。
        frozen_circle_function_with_parameter_circle: '"円を描く"ブロックを使い、そして大きさを変えてください。'
        frozen_snowflake_branch: '"雪の結晶の枝を描く"ブロックを使ってください'
        frozen_create_square: 四角形を描くためにもっとブロックをくっつけてください
        playlab_drag_say: 'Drag the "say" block here and type "hello"'
        playlab_use_twice: Use this block twice and remember to change the actor number
        playlab_move_girl: 'Use the "move right" block to move Tennis Girl'
        playlab_play_sound: 'Add "play sound" block here'
        playlab_arrow_keys: Remember to use these to move the witch after clicking on Run
        playlab_add_move: 'Add "move" blocks inside this repeat block'
        playlab_add_score: Add score blocks here
        playlab_add_blocks: Add your blocks here
        set_variable: Drag a number block here to set your variable
        place_variable: Drag your variable inside this block
        bee_for_loop: Drag the largest number of nectar you want the bee to collect here
        place_counter_variable: Drag your counter variable inside this block
        function_editor_draw_square: 'This is your function definition. These blocks run everytime you use the "draw a square" block'
        change_here: Make your change here
        write_draw_square_function: Drag blocks from the toolbox into here that draw a square
        write_draw_triangle_function: Drag blocks from the toolbox into here that draw a triangle
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
        fill_in_actor: Fill in the ??? with numbers that correspond to each actor (1, 2, and 3)
        repeat: Put blocks inside the loop to repeat commands
        if_bee_nectar: 'Use the "if" block to decide if the bee should get nectar'
        if_else_bee: |-
          Use the "if/else" block so that the Bee gets nectar from a flower, and makes honey if it's not a flower
        repeat_full_circle: Enter in the number of times the zombie has to move to make a full circle
        place_length_variable: Drag the length variable here to replace the question marks
        arrows_move_actor: Use the arrows to move the actor
        right_arrow_fireball: Use the right arrow to shoot fireballs
        name_function: Write the name of your function here
