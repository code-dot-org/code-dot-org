ja:
  data:
    script:
      name:
        20-hour:
          desc: K-8(アメリカでの中学校）のコンピュータサイエンスコースを紹介
          Unplug1: ステージ 1
          Maze: ステージ 2
          Unplug2: ステージ 3
          Unplug3: ステージ 4
          Artist: ステージ 5
          Unplug4: ステージ 6
          Artist2: ステージ７
          Unplug5: ステージ８
          Farmer: ステージ 9
          Unplug6: ステージ10
          Artist3: ステージ11
          Unplug7: |
            ステージ12
            
            
          Farmer2: |
            ステージ13
            
            
          Unplug8: |
            ステージ14
            
          Artist4: |
            ステージ15
            
          Unplug9: ステージ16
          Farmer3: ステージ17
          Unplug10: ステージ18
          Artist5: ステージ19
          Unplug11: ステージ20
        Hour of Code:
          desc: Hour of Code（コーディングを学ぶ時間）
          Maze: ステージ 1
        Edit Code:
          desc: コードを編集する(ベータ版)
          MazeEC: ステージ 1
        2014 Levels:
          desc: バウンス (ベータ版)
          Bounce: ステージ 1
        Builder Levels:
          desc: ユーザーが作ったパズル (ベータ版)
          Custom: ステージ 1
        Flappy Levels:
          desc: フラッピーバード
          Flappy: ステージ 1
        Jigsaw Levels:
          desc: ジグソー パズル (ベータ版)
          Jigsaw: ステージ 1
        Step Levels:
          desc: 迷路 (ベータ版)
          MazeStep: ステージ ステップ
        edit-code:
          desc: コードを編集する(ベータ版)
          MazeEC: ステージ 1
          Applab: ステージ 2
          ArtistEC: ステージ 3
          StudioEC: ステージ 4
        events:
          desc: バウンス (ベータ版)
          Bounce: ステージ 1
          Studio: ステージ 2
        builder:
          desc: ユーザーが作ったパズル (ベータ版)
          Custom: ステージ 1
        flappy:
          desc: フラッピーバード
          Flappy: ステージ 1
        jigsaw:
          desc: ジグソー パズル (ベータ版)
          Jigsaw: ステージ 1
        step:
          desc: 迷路 (ベータ版)
          MazeStep: ステージ ステップ
        wordsearch:
          desc: スペリング コンテスト (ベータ版)
          WordSearch: ステージ 1
    game:
      name:
        Unplug1: コンピューター・サイエンス入門
        Maze: 迷路
        Multi: 複数選択の項目
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: プログラミングのグラフ用紙
        Artist: アーティスト
        Unplug4: アルゴリズム
        Artist2: アーティスト 2
        Unplug5: 機能
        Farmer: 農家
        Unplug6: 条件
        Artist3: アーティスト 3
        Unplug7: 作曲
        Farmer2: 農家 2
        Unplug8: 抽象化
        Artist4: アーティスト 4
        Unplug9: プログラミングをリレーする
        Farmer3: 農家 3
        Unplug10: インターネット
        Artist5: アーティスト 5
        Unplug11: まとめ
        MazeEC: 迷路
        Bounce: はずむ
        Flappy: フラッピーバード
        Jigsaw: ジグソーパズル
        MazeStep: 迷路ステップ モード
        Wordsearch: ワードサーチ
        Webapp: アプリ ラボ
        ArtistEC: アーティスト
        TextMatch: テキスト マッチ
        StudioEC: プレイラボ
        Applab: アプリ ラボ
        NetSim: インターネット シミュレータ
        Custom: アーティスト
        CustomStudio: プレイラボ
    trophy:
      name:
        Bronze: 銅
        Silver: 銀
        Gold: 金
    concept:
      description:
        sequence: シークエンス
        if: もしブロック
        if_else: もし/でなければブロック
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        loop_while: の間にブロック
        loop_for: 数える ブロック
        function: 機能
        parameters: パラメーター付き機能
    level:
      instructions:
        maze_2_2: ブタを捕まえるのを手伝ってくれない？「前に動く」ブロックをつみあげて、「実行」ボタンをおしてね
        maze_2_1: このブタはわたしの羽をぐちゃぐちゃにします。ブタをみつけるのを手伝って！
        maze_2_2_5: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
        maze_2_3: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
        maze_2_4: 落ち着いて、悪いブタを見つけましょう。でないと怒るかも！
        maze_2_5: ブロックを2つだけ使い、緑のブタにたどりつく方法がありますす。わかりますか？
        maze_2_6: ブロックを３つだけ使い、緑の侵入者のところへ連れていって
        maze_2_7: 一番小さい数のブロックを使って、悪いブタを追い出しましょう。「繰り返し」ブロックを使います
        maze_2_8: 灰色のブロックを消すことはできません。「繰り返し」ブロックを使い、3回繰り返し、このパズルを解きましょう。「動く」「動く」「曲がる」の3つのブロックを灰色の「繰り返し」ブロックにいれてみましょう
        maze_2_9: OK。新しい「まで繰り返す(Repeat until)」ブロックを試しましょう。いらいらさせるブタにたどりつくまで繰り返します
        maze_2_10: 最後の問題です。4つのブロックだけを使いパズルを解けますか？
        maze_2_11: 人間のあなた。わたしはゾンビ。おなかが減っています。。。ヒマワリが必要です。5つのブロックだけでわたしを連れていけますか？
        maze_2_12: OK。似ていますが、ちょっと違います。ブロック5つだけでできますか？
        maze_2_13: '新しい"もし"ブロックを使い、いつ曲がるかを決めてください。ヒント: あともう１つのブロックが必要です、どう設定しているかを学べば、次はひとりでできるようになります'
        maze_2_14: 'OK。さっきのパズルと同じです、でもどうやって"もし"ブロックと"繰り返し"ブロックを一緒に使ったかをもう一度思い出してみましょう'
        maze_2_15: 'ヒマワリがほしい！"もし"ブロックを使って最小限のブロック数で私をそこまで連れていってください。'
        maze_2_16: OK 練習のためにもう一度。 ー　それほど違いはないけれど、 チャンパーたちに気をつけて！
        maze_2_17: '"もし/でなければ"ブロックは条件を確かめて、あること、あるいは別のあることをします。ヒマワリをとってくるためにこの新しいブロックを試しましょう。'
        maze_2_18: '"もし/でなければ"ブロックをもう一度練習。一度でちゃんとできるでしょうか？'
        maze_2_19: ブロックをあと3つ足して、難しい迷路を解くのをたすけてくれますか？もしそれができれば、どんな長くカーブした道でも歩けるようになります
        turtle_1_1: こんにちは、はアーティストです。プログラムを作ればどんな形でも描くことができます。ブロックをいくつか使い、灰色の線をなぞらせてください
        turtle_1_2: '四角形を描きます。注: 新しい「色の設定」ブロックで選択して、好きな色を使用する'
        turtle_1_3: ブロックを３つだけ使い、四角形を作成する
        turtle_1_4: '毎回違う色を選択してくれる"random color"オプションを使い、色の異なる側面をもつ三角形を描きましょう。ヒント：どの程度曲がるかは、回転ブロックの回数をクリックしながら見つけます'
        turtle_1_5: 練習で、三角形を描いて、そして封筒になるように四角形を描く
        turtle_1_6: どうやって、この三角形と四角形を描けるか解決できますか？ヒント：まず三角形を描いてから、次にどのくらいの四角形を描けばよいかを決める
        turtle_1_7: 'OK.もう少し難しくしてみましょう  -もしこれらの緑のメガネを描けるか試しましょう。四角形はそれぞれの側面が100 ピクセルで 50 ピクセル離れています。緑色で描くのを忘れずに ！'
        turtle_1_8: 'OK.  このコーディングを実行 (または「実行する」キーを押して試す)したら何が起こるでしょうか。その後、図が完了まで何回も繰り返します。色は毎回異なるようになります'
        turtle_1_9: '円を描くのにどんな数字が"???"を置きかえられるかわかりますか？'
        turtle_1_10: よくできました！何か描きたいものを描いてみましょう。いくつかの楽しいアイデア： スティック図、雪片、またはスパイラル。新しい「設定幅」ブロックを試みてください。楽しんで！
        turtle_4_1: ブロック３つだけ （100 ピクセルのエッジ) で三角形を描くことができますか？ヒント:「繰り返す」のブロックを使用する
        turtle_4_2: 「90度右に曲がる」ブロックをプログラムのどこかに追加して、指定された三角形を描いてください
        turtle_4_3: 'OK  これがあなたが書いたひとつの三角形を描くコードです。かわいい花を作るために「繰り返し」と「ターン」のブロックを追加できますか？'
        turtle_4_4: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36度だけ回転させました。何回これを繰り返す必要がありますか？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_5: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36回繰り返し回転させました。どのくらいの角度で回転させればいいでしょう？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_6: ブロックを３つだけ使用して、20 ピクセルのエッジを持つ四角形を描くことができますか？
        turtle_4_7: 'これが最後のパズルで四角形を描いたときのコードです。10繰り返して隣同士の四角形ではしごを描けますか？ヒント: ブロックをあと2 つ使うだけです'
        turtle_4_8: ここでは、前のパズルを解決します。図を完成させるためにブロックをあと2つ追加できますか？
        turtle_4_9: ここでは、前のパズルを解決します。図を完成させるのに角度をどのくらいにすればいいでしょうか？（解くのに多少時間がかかるでしょう)
        turtle_4_10: ここでは、前のパズルを解決します。図を完成させるのに何回繰り返せばいいでしょうか？
        turtle_4_11: 違うパターンを作るのに「回転」と「繰り返し」ブロックの中の数字を変えてください。また、残りのコードを自分の好きなように書き変えてみてください
        maze_karel_1_1: こんにちは、私は農民です。私の畑を平らにするのを助けてください。根付けの準備をします。私を泥山にうごかして「取り除く」ブロックで泥山を取り除いてください
        maze_karel_1_2: '次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル分の泥山で一杯にしてください'
        maze_karel_1_3: 私を泥山へ動かしてください、そしてできる限り少ないブロックで、シャベル何杯分で泥山をなくせるかを教えてください
        maze_karel_1_4: '泥山４つすべてをなくすのを助けてくれませんか？ヒント: できれば繰り返しブロックを使います'
        maze_karel_1_5: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます'
        maze_karel_1_6: '可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください'
        maze_karel_1_7: うわー、すごく深い穴を発見 ！何杯分のシャベルの泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？
        maze_karel_1_8: できる限り少ない数のブロックで、畑のはじの穴を埋めるのを手伝ってください。
        maze_karel_1_9: 'これらすべての泥山をなくしましょう。できる限り少ない数のブロックを使ってください。ヒント："while"ブロックを使ってみてください'
        maze_karel_1_10: 遅くまで仕事をしていたので外は真っ暗、積み上がった山がどのくらい大きいのかわかりません。whileブロックにあったようなオプションはもうありません。畑にそって私を移動させ、山があれば移動させます
        maze_karel_1_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったら移動し、穴があったら埋めます。ヒント:"もし"ブロックでオプションのドロップ ダウン メニューを使います'
        turtle_2_1: 'こんにちは。私、zombieアーティスト。私、描くのが大好き ！特別な色で四角形を描くのを手伝ってください。重要: ブロックはみんな同じですが、カテゴリーに分かれています'
        turtle_2_2: 新しいブロックを定義させてくれる機能を使いましょう！「機能」カテゴリにある、新しい「四角形を描く」ブロックを試して、小さな 50 x 50 の緑の四角形を描きましょう
        turtle_2_3: 繰り返し」ブロック を使い、「ループ」カテゴリにある、サイズが100、それぞれ120度離れている四角形を３つ描きます。そして３つのランダムで違う色で描いてください
        turtle_2_4: もっと素敵にしてみましょう。コードを変更して、100 ピクセルの幅、それぞれの間が10 度離れている36個の四角形を描きます。ヒント：スライダを使うと早くできます
        turtle_2_5: 50、60、70、80、90ピクセルの辺を持つ四角形を描きます。「四角形を描く」機能を５回使います。
        turtle_2_6: 'OK、 このプログラムは前回と同じ四角形を描くのに、カウンターを使います。四角形をカウンターと同じサイズにしたいので"Counter"ブロックを使います。ヒント： 「変数」のカテゴリにあります'
        turtle_2_7: ブロックが無効なので、スパイラルを描くプログラムが起動しません。「カウント」ブロック(ループ カテゴリ）と「カウンター」ブロックの(変数のカテゴリ) を使用して同じスパイラルを描く新しいプログラムを作ります
        turtle_2_7_5: 新しい「雪だるまお絵描き」機能 (機能のカテゴリ)をつかって高さ 250 と 長さ100 の 雪だるまを2 つ描いてください
        turtle_2_8: これは少しひっかけた問題です。「雪だるまお絵描き」機能と、新しい「前方にジャンプ」のブロック (アクションのカテゴリ)を使って、雪だるまを三つ、100 ピクセルを離れたところに、違う色を使って描きます
        turtle_2_9: '" count "ループを使って、高さ70、80、90 100 110 の雪だるまの家族を描いてください。雪だるまは、 60 ピクセル離します'
        turtle_2_10: 様々なスパイラルを試しにつくるコードはこちら。回転量を変更するとどうなるか？またはループのランダムな色を設定しみたらどうなるか？好きなものを自由に描いてみましょう
        maze_karel_2_1: 'ブロックを使って、泥山をすべて移動させ、地面の穴を全て埋めるのを手伝ってください。たくさんのブロックを使う代わりにループを使います。ヒント: ループの中に別のループを入れることもできます'
        maze_karel_2_2: '"5を埋める"と呼ばれるブロックを作りました。機能カテゴリです。この穴を埋めるために使います'
        maze_karel_2_3: 'すべての穴を埋めるように新しい「5を埋める」 機能のブロックを使います。関数のカテゴリから"5 を埋める"ブロックをドラッグします'
        maze_karel_2_4: 7回シャベルで取り除くという新機能を定義して、その機能を使ってすべての泥山を削除することができるプログラムを書きます
        maze_karel_2_5: 泥山からシャベル6回分を取り除く新機能を作り、それを使ってすべての泥山を平らにするのを手伝ってください
        maze_karel_2_6: 「8 埋める」、「8 削除する」の２つの新しい機能を使い、泥山を平らにして、穴を埋めましょう
        maze_karel_2_7: |
          私の畑に牛がいます！牛を避けながら泥山を除去する新しい機能を作りましょう。新機能の中に全ブロックを置きます
          
          
        maze_karel_2_8: この新しい「牛を避ける、1 削除する」機能を使い、全ての泥山を取り除きましょう
        maze_karel_2_9: |
          縦に並ぶ４つの異なる泥山を削除する機能です。ループ内にこの機能を入れてみましょう。いくつか新しいブロックだけで泥の山を除去できます
          
        maze_karel_2_10: 私を畑のはじに移動させて、 2 つの機能を使い、すべての泥山を削除、すべての穴を埋めてください
        turtle_3_1: このパズルでは、どのように「四角形を描く」か、「円を描く」かの機能がどう定義されるかを学びます。機能の定義づけでは、ブロックそのものが実行されません。実際に四角形を描く「四角形を描く」ブロックが必要になります
        turtle_3_2: 例として「四角形を描く」機能を使い、「三角形を描く」機能作成して、使ってみます
        turtle_3_3: '猫の周りに三角形のフェンス、そして牛の周りに四角形のフェンスを描いてください。ヒント: 実行しながらプログラムをテストする'
        turtle_3_4: |
          ライオンの周りに家を描くのに、「四角形を描く」と「三角形を描く」（他のいくつかのブロック）をどう使うか自分でわかるか確認します
          
        turtle_3_5: さあ、新しい「家を描く」機能を作って、猫の家を描いてみましょう。ヒント：「何かをする」ブロックを使い、新しい機能を作成する。ブロックに自分でつけた名前をテキスト入力します
        turtle_3_6: 「四角形を描く」を手本として、「三角形を描く」という機能を作ってください。「長さ」という名前の入力を追加します。その後、様々なサイズの三角形を描画して見てくださ。 （ヒント：関数に入力を追加するには、星をクリックしてください）
        turtle_3_7: 「家を描く」に「長さ」という入力名を追加します。(エッジ 150 ピクセルの長さ) の大きな象の家を建てましょう
        turtle_3_8: 新しい家を書いたときに右下に来るよう「家を描く」を編集してください。この編集した機能を使って家を 3 つ描いてください。
        turtle_3_9: ひとりで「家を描く」機能を作れますか。試してみて、住宅の列を作ります
        turtle_3_10: あなたはたくさんのことを学びました！星、スパイイラル、または派手なスノーフレークなど自由に描きましょう
        maze_karel_debug_seq_1: デバッグのせかいへようこそ ！プログラムがただしくうごいてくれません。じめんをたいらにしてたねまきができるように、まちがっているところをみつけて、なおしてもらえませんか？
        maze_karel_debug_seq_2: このプログラムのどこがまちがっていますか？山をなくすにはどこをなおせばいいでしょうか？
        maze_karel_debug_repeat: じめんがたいらになるように、このプログラムのまちがいをなおして（デバッグして）ください
        maze_karel_debug_while: このプログラムのどこをかえれば、あなをうめることができるでしょうか？
        maze_karel_debug_if: たすけて！じめんがぜんぶたいらになるように、このプログラムをなおしてください。
        maze_karel_debug_if_else: やまをぜんぶなくすのと穴をうめることができるように、このプログラムをなおして（デバッグして）ください
        maze_karel_debug_function_1: プログラムのどこをなおせば、やまをぜんぶなくすことができるでしょうか？
        maze_karel_debug_function_2: プログラムのまちがいをなおして（デバッグして）もらえませんか。じめんをたいらにしたいんです
        maze_karel_debug_function_3: このプログラムをすこしかえて、じめんからやまをぜんぶなくしてください
        turtle_5_1: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_2: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_3: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_4: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_5: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_6: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        maze_3_1: ブタをつかまえないといけません。move(); をなんどかコールしてたまごをとりかえしてください
        maze_3_2: ブタのいるとこにいけるプログラムをかいてください
        maze_3_3: ブタのところまでどうやっていけばいい？ばくだんにぶつからないようにきをつけてね
        maze_3_4: うわーん！ばくだんにぶつからずにブタをつかまえるプログラムをかいてよ！
        bounce_1: 「左向きのブロックが押されたとき」のブロックにべつのブロックをつなげて、「実行」ボタンを押してください。左向き矢印を押してパドルをゴールまで動かしましょう
        bounce_2: 「右矢印のとき」と「左矢印のとき」ブロックにブロックを接続します。両方の最終目標に到達するためにラケットを移動します
        bounce_3: 「上矢印のとき」ブロックと似たことを試しましょう。頂上の最終目標にラケットを移動します
        bounce_4: 今回は 4 つのブロックを追加する必要があります。パズルを完了するために4 つの最終目標にラケットを移動します
        bounce_5: ラケットに飛んでおりるボールを送ります。最終目標にボールが確実に届くために「ラケットにボールがヒットするとき」ブロックにブロックをつけます
        bounce_6: 最終目標は画面の上にあります。パズルを解くために「ボールがあたったとき」ブロックにブロックを接続する必要があります
        bounce_7: 「〜のとき」ブロックにブロックを接続します。最終目標にヒットするまでボールをバウンドさせます
        bounce_10: 一番上にゴールがあります。ゲームを作るには、「得点」と「敵の得点」ブロックを「ボールがゴールにあるとき」と「ボールがラケットに当たらなかったとき」ブロックに接続します。相手が2回得点する前に自分がどれだけ得点するか見てみましょう
        bounce_11: 「実行」ブロックにブロックを足していきましょう。「新しいボールを発射する」ブロックを一箇所以上使いましょう。背景を変更したり、ラケットやボールのスピードを変えてみましょう。対戦相手が二回スコアを決める前に何ポイント得点できるでしょうか？
        bounce_12: バウンス ゲームを作成してください。デザインやルールは自由に変更できます。終了したら、完了ボタンをクリックしてください。作成したゲームは、他のユーザが携帯電話からアクセスして遊ぶことができます。
        Custom_builder: 作成したいレベルを描画するために、ツールボックスからブロックをワークスペースにドラッグします。準備ができたら「実行」を押します。
        flappy_1: 「クリックされたとき」のブロックにほかのブロックを1つくっつけて、「実行」ボタンをおしてください。クリック（またはがめんをタップ）すると、Flappyはもくひょうにむかってうごきます
        flappy_2: いくつかの面を追加します。「面にヒットしたとき」ブロックに接続します。Flappyがクラッシュしたとき「ゲームオーバー」のコードが必要です
        flappy_3: 「実行時」ブロック同士をくっつけておくと、ゲームがはじまったときにそのブロックのとおりにうごきます。スピードとはねのうごきのレベルをセットしてみてください
        flappy_4: もしクラッシュさせるコードを書かない場合、Flappyは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されたパイプにクラッシュするときに「ゲーム終了」のコードが必要になります。
        flappy_5: とくてんひょうをつくり、Flappyがどかんをとおりぬけたときのてんすうをかぞえましょう。「どかんをとおりぬけたとき」のブロックにぶろっくをくっつけて、とんでいるFlappyがどかんのあいだをとおりぬけたときにてんすうがふえるようにしてください
        flappy_6: フラッピーのふらふら飛ぶ量を小さくや大きくした後、まだ得点しているかどうか見てください。
        flappy_7: 次に、「実行時」ブロックにもう1つのブロックをくっつけて背景を変えてみてください
        flappy_8: |
          ゲームが開始した以外にもいつでもビジュアルを設定できます。例えば、障害物を過ぎたとき、などの状況が起こるランダムな状況を設定するようにしてください
          
        flappy_9: 色々な組み合わせを試してみましょう。障害物や地面にヒットした時に、ゲーム終了のかわりにスコアが0にもどるように設定して下さい。
        flappy_11: じぶんのFlappyゲームを作ってみましょう。みためやルール、じゅうりょくもすきなようにかえられます。作りおわったら、「完了」ボタンをクリックしてともだちにおしえましょう。ともだちはけいたいでんわをつかって、あなたのゲームであそぶことができます。
        flappy_k1_1: Flappyであそぶ
        flappy_k1_2: 「クリックされたとき」のブロックにほかのブロックを1つくっつけて、「実行」ボタンをおしてください。クリック（またはがめんをタップ）すると、Flappyはもくひょうにむかってうごきます
        flappy_k1_3: いくつかの地面を追加します。「地面にヒットしたとき」ブロックに接続します。Flappyがクラッシュしたとき「ゲームオーバー」のコードが必要です。
        flappy_k1_4: 「実行時」ブロック同士をくっつけておくと、ゲームがはじまったときにそのブロックのとおりにうごきます。スピードとはねのうごきのレベルをセットしてみてください
        flappy_k1_5: もしクラッシュさせるためのコードを書かない場合、Flappyは障害物を通り抜けて飛びます。「障害物にヒットしたとき」ブロックにブロックを接続します。フラッピーが最初に設置されtパイプにクラッシュするときに「ゲームエンド」のコードが必要になります。
        flappy_k1_6: スコアボード（得点表）を追加して Flappyが障害物を過ぎたときの得点を数えましょう。「障害物と過ぎたとき」ブロックを追加して、飛んでいるフラッピーが最初の設定したパイプを過ぎるたびに得点をさせてください。
        flappy_k1_7: どかんをとおりぬけるたびになんかいもてんすうがふえるかどうか、かくにんしてください。
        flappy_k1_8: 次に、「実行時」ブロックにもう1つのブロックをくっつけて背景を変えてみてください
        flappy_k1_9: 「実行時」ブロックに「プレイヤーをセット」のブロックをくっつけて、プレイヤーのみためをかえてみてください。
        jigsaw_1: ブロックをクリックします。
        jigsaw_2: ブロックをターゲットまでドラッグします。
        jigsaw_3: 絵が完成するようにブロックを配置しましょう。
        jigsaw_4: 絵が完成するようにブロックを配置しましょう。
        jigsaw_5: 絵が完成するようにブロックを配置しましょう。
        jigsaw_6: 絵が完成するようにブロックを配置しましょう。
        jigsaw_7: 絵が完成するようにブロックを配置しましょう。
        jigsaw_8: 絵が完成するようにブロックを配置しましょう。
        jigsaw_9: 絵が完成するようにブロックを配置しましょう。
        jigsaw_10: 絵が完成するようにブロックを配置しましょう。
        jigsaw_11: 絵が完成するようにブロックを配置しましょう。
        jigsaw_12: 絵が完成するようにブロックを配置しましょう。
        jigsaw_13: パズルをといて！
        mazestep_1: 迷路の手順はこちら
        mazestep_2: 迷路の手順はこちら
        mazestep_3: 迷路の手順はこちら
        mazestep_4: 迷路の手順はこちら
        mazestep_5: 迷路の手順はこちら
        studio_c2_1: いぬに「こんにちは」といわせてみましょう。
        studio_c2_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_c2_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_c2_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c2_5: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c2_6: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c2_7: 「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。
        studio_c2_8: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c2_9: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c2_10: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c2_11: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_story_1: いぬに「こんにちは」といわせてみましょう。
        studio_c3_story_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_c3_story_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_c3_story_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c3_story_5: タコがハッピーになるようにブロックを追加してください。
        studio_c3_story_6: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_game_1: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c3_game_2: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c3_game_3: 「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。
        studio_c3_game_4: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c3_game_5: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c3_game_6: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c3_game_7: 自分だけのゲームを作りましょう。ゲームが完成したら「完了」をクリックして、ともだちのパソコンやスマートフォンでも遊んでもらいましょう。
        studio_playlab_1: 'ペンギンが「こんにちは」と言いたがっている - 彼を助けることができますか'
        studio_playlab_2: 'ケイブボーイ(キャラ1)とケイブガール(キャラ2)はお互いに"こんにちは"と言いたいです。"言う"ブロックを2回使って彼らを助けてください。'
        studio_playlab_3: テニス少女が旗に到達するのを助けてください。
        studio_playlab_4: テニス少年(キャラ1)がテニス少女(キャラ2)に到達するのを助けて、そして彼がそこに着いたときに音を鳴らしてください。
        studio_playlab_5: クリックされた時にスペースボットが「やあ、地球人達よ」としゃべれるように手助けしてあげてください。最初に実行ボタンをクリックすることを忘れないでください。
        studio_playlab_6: 魔法の火の玉が獲得できるように、上下左右矢印キーを使って魔女が動けるようにしてください。
        studio_playlab_7: 「永久的に継続」ブロックによってコードを継続的に続けることができます。ウィザードが連続して左右に動けるようにブロックをつなげてください。
        studio_playlab_8: ポイントが獲得できるブロックを追加してください。そして、ユニコーンがウィザードに接近したときにに音ができるようにブロックを追加し、ポイントを獲得するまで矢印キーでユニコーンが動けるようにしてください。
        studio_playlab_9: エイリアン侵入の際の背景を設定し、スペースボットがエリアンをより早く捕まえられるようスピード設定を行ってください。スペースボットに矢印キーで近づけるようにし、周囲に警告できるようにしてください。
        studio_playlab_10: 自分だけのゲームを作りましょう。ゲームが完成したら「完了」をクリックして、ともだちのパソコンやスマートフォンでも遊んでもらいましょう。
        studio_iceage_hello1: シドは新しい冒険に向けてみんなに集まってほしいようです。シドに「こんにちは」と言わせましょう。ワークエリアにブロックをドラッグします。そしてブロックの中に「こんにちは」と書いてみましょう。
        studio_iceage_hello2: シド(キャラ１) がマニー(キャラ２) を見つけて、冒険に誘いたいと思っています。「キャラが話す」のブロックを二回使ってお互いにあいさつをさせましょう。
        studio_iceage_move_to_flag: スクラットがドングリを探しています！「移動」のブロックを使って最後の200ピクセルを進ませてあげましょう。
        studio_iceage_move_to_actor: サンディエゴ (キャラ1) は、マニー (キャラ2) を探しています。マニーに「キャラを移動」ブロックを使用して下に 200 ピクセル移動させてディエゴを助けましょう。次に、彼らはお互いを見つけたときにサウンドを再生するためのブロックを「キャラに触れたとき」 ブロックに接続します。
        studio_iceage_repeat: 'The "repeat forever" block allows you to run code continuously. Can you attach blocks to it to help Granny get some exercise by moving left and right repeatedly?'
        studio_iceage_click_hello: Can you help Sid do a final call for friends when clicked? Don’t forget to click on him after you hit Run.
        studio_iceage_move_events: 'Scrat is still looking for acorns! Help him scamper around by attaching the "move" block to each of the events and changing the direction to work for each arrow key. When you’re done, click Run and try to collect all of the acorns.'
        studio_iceage_sound_and_points: 'We’ve provided most of the code that keeps Granny moving left and right, as well as the code to move Sid around the screen. Can you finish the code and add blocks to the "when actor touches" event to make it so that you both play a sound and score a point when Sid and Granny collide? Press Run to play the game.'
        studio_iceage_warn_ice_age: Everyone needs to move faster because an ice age is coming! Change the background to an icy background and set Sid’s speed to fast, then press Run and move him to Diego to warn him.
        studio_iceage_throw_hearts: |-
          Sid wants to let his grandmother, Granny, know that he loves her. Use the "actor throw" command to have Sid (actor 1) throw hearts at Granny (actor 2)! Set Granny's mood to happy when she gets hit with the hearts.
        studio_iceage_free_play: "Time to create your own game or story! When you're done, click Finish to let friends try your game on their phones, tablets, or computers!"
        studio_gumball_hello1: 'Anais wants to make some new friends. Can you help her say "hello" by dragging the "say" block out into the work area and typing the word "hello" inside?'
        studio_gumball_hello2: 'Darwin (actor 1) and his brother Gumball (actor 2) are heading to school.  Help them greet each other by using the "actor say" block twice.'
        studio_gumball_move_to_flag: 'Banana Joe is about to win a field day race!  Help him go the last 200 pixels using the "move" block.'
        studio_gumball_move_to_actor: 'Gumball (actor 1) and Darwin (actor 2) are late for the field day! Help Gumball move 200 pixels down to Darwin using the "move actor" block.  Next, connect a block to the "when actor touches" event to play a sound when they find each other.'
        studio_gumball_repeat: 'The "repeat forever" block allows you to run code continuously.  Can you attach blocks to it to help Gumball warm up for his race by moving left and right repeatedly?'
        studio_gumball_click_hello: 'Can you help Anton announce the start of a race by saying "Ready, set, go!"? To test your program, don’t forget to click Anton after you click Run!'
        studio_gumball_move_events: 'Darwin is in the flag gathering contest! Help him run around by attaching the "move" block to each of the events. When you’re done, click Run and try to collect all of the flags.'
        studio_gumball_sound_and_points: 'We’ve provided most of the code that keeps Anton (actor 2) moving left and right, as well as the code to move Banana Joe (actor 1) around the screen.  Can you finish the code and add blocks to the "when actor touches" event to make it so that you both play a sound and score a point when Banana Joe and Anton collide?  Press Run to play the game.'
        studio_gumball_warn_food_fight: 'Darwin just escaped a food fight! Change the background to "characters" and set Darwin’s speed to fast, then press Run and move him to Penny to warn her.'
        studio_gumball_join_food_fight: 'Join the food fight! Use the "actor throw item right" command to have Banana Joe (actor 1) throw food at Anton (actor 2)! Set Anton’s mood to angry when he gets hit.'
        studio_gumball_free_play: "Create your own game or story. When you're done, click Finish to let friends try your game on their phones, tablets, or computers!"
        studio_full_sandbox: 自分だけのゲームを作りましょう。ゲームが完成したら「完了」をクリックして、ともだちのパソコンやスマートフォンでも遊んでもらいましょう。
        studio_k1_1: いぬに「こんにちは」といわせてみましょう。
        studio_k1_2: いぬがなにかはなしてから、ねこもなにかをはなすようにしてみましょう。
        studio_k1_3: いぬがねこのところに行くプログラムを作ってみてください。
        studio_k1_4: 犬が猫に近づけるようにし、近づいたら「こんにちは」と猫が言えるようにしてください。
        studio_k1_5: タコがハッピーになるようにブロックを追加してください。
        studio_k1_6: あなたのストーリーを作成してください！猫と犬を動かし話せるようにしてください。
        maze_wordsearch_k_1: EASTになるように、私をうごかしてください。
        maze_wordsearch_k_2: SOUTHになるように、私を動かしてください。
        maze_wordsearch_k_3: WESTになるように、私を動かしてください。
        maze_wordsearch_k_4: NORTHになるように、私を動かしてください。
        maze_wordsearch_k_6: Move me East and then South to spell the word JUMP
        maze_wordsearch_k_9: Move me one way, then another to spell the word CODE
        maze_wordsearch_k_13: Move me one way, then another to spell the word DEBUG
        maze_wordsearch_k_15: Move me one way, then another to spell the word ABOVE
        maze_wordsearch_k_16: Move me one way, then another to spell the word BELOW
        maze_wordsearch_k_20: This is a test! Move me one way, then another to spell the word STORY
        applab_ec_simple: Create your app by using the blocks in the toolbox.
        turtle_ec_1_2: 'Now, draw a square. NOTE: use your favorite color by picking it in the new "penColor" block.'
        turtle_ec_1_10: 'You made it! Now, draw anything you want. Some fun ideas: a stick figure, snowflake, or spiral. Also try the new "penWidth" block. Have fun!'
        studio_ec_sandbox: 自分だけのゲームを作りましょう。ゲームが完成したら「完了」をクリックして、ともだちのパソコンやスマートフォンでも遊んでもらいましょう。
    video:
      name:
        maze_intro: 迷路入門
        artist_intro: アーティスト紹介
        farmer_intro: 農家入門
        flappy_intro: Flappy入門編
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        if: もしブロック
        if_else: もし/でなければブロック
        if_else_scrat: もし/でなければブロック
        function: 関数
        loop_while: の間にブロック
        loop_for: 数える ブロック
        parameters: パラメーター付き関数
        hoc_wrapup: Hour of Code（コーディングを学ぶ時間）まとめ
        Unplug1: コンピュータサイエンスとは？
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: グラフ用紙のプログラミング
        Unplug4: アルゴリズム
        Unplug5: 機能
        Unplug6: 条件
        Unplug7: Songwriting
        Unplug8: 抽象化
        Unplug9: リレープログラミング
        Unplug10: インターネット
        Unplug11: ラップアップ
        C1_happy_maps_unplugged: ハッピーマップ
        C1_moveitmoveit_unplugged: 動かせ！動かせ！
        C1_bigevent_unplugged: The Big Event
        C1_getting_loopy: Getting Loopy
        C1_pair_programming: ペアプログラミング
        C1_maze_intro_sequencing: Maze Sequencing Intro
        C1_maze_debugging: 迷路：デバッグ
        C1_bee_level_intro: 'Bee Level - Intro'
        C1_artist_intro: アーティスト紹介
        C1_spelling_bee_intro: Spelling Bee Intro
        C1_zuck_repeat_loop: 迷路ループ
        C1_bee_loops: 'みつばち: ループ'
        C1_maze_loops: 迷路ループ
        C1_playlab_storytelling: Playラボ：　ストーリーを作成
        C1_planting_seed: 種をまこう
        C1_building_foundation: ピラミッドをたてよう
        C1_going_places_safely: 安全な道を通って行く
        C2_maze_intro: 迷路入門
        C2_artist_intro: アーティスト紹介
        C2_zuck_repeat_loop: 迷路ループ
        C2_artist_loops: アーティスト ループ
        C2_artist_debugging: アーティスト デバッグ
        C2_bee_loops: 'みつばち: ループ'
        C2_bee_debugging: Bee Debugging
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: Playラボ：　ストーリーを作成
        C2_graph_paper: グラフ用紙のプログラミング
        C2_conditionals_with_cards: 条件
        C2_binary_bracelets: バイナリブレスレット
        C2_relay_programming: プログラミングをリレーする
        C2_paper_airplanes: 紙飛行機
        C2_digital_footprint: あなたのデジタルフットプリント
        C2_digital_footprint_v2: あなたのデジタルフットプリント
        C3_maze_level_4: 迷路ループ
        C3_artist_intro: アーティスト紹介
        C3_artist_functions: Artist Functions
        C3_bee_functions: Bee Functions
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: 迷路条件文
        C3_artist_nested_loops: Nested Loops
        C3_farmer_while: While Loops
        C3_bee_nested_loops: Nested Loops
        C3_bee_debugging: Bee Debugging
        C3_bounce: バウンド
        C3_playlab_create_game: プレイラボ：ゲームを作りましょう
        C3_computational_thinking: コンピュテーショナル・シンキング（コンピューターの様に考える）
        C3_dice_race: 言うレース
        C3_internet: インターネット
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: Songwriting With Parameters
        C4_intro: はじめに
        C4_loops_zombie: ループ〔くりかえし〕
        C4_bee_conditional: Bee Conditionals
        C4_variables_artist: 'Variables - Artist'
        C4_variables_playlab: 'Variables - Play Lab'
        C4_for_loops: ループ用
        C4_for_loops_bee: ループ用
        C4_for_loops_no_bee: ループ用
        C4_math_artist: Programming the Artist with Math
        C4_function_edit: Editing Functions
        C4_function_create: Creating Functions
        C4_function_parameters: パラメーター付き関数
        C4_conditionals: 条件
        C4_unplugged_algorithms: Algorithms with Tangrams
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variables in Envelopes
        C4_unplugged_forloops: ループ用
        C4_unplugged_parameters: Songwriting with Parameters
        C4_unplugged_binary: ２しんすう
        frozen_intro: Hour of Codeの概要
        frozen_loops: ループ
        frozen_functions: 関数
        playlab_intro: Playラボの概要
        playlab_events: Play Lab Events
        playlab_repeat_forever: Play Lab Repeat Forever
        tutorial_puzzle_challenge: Tutorial Puzzle Challenge
        infinity_playlab_intro: プレイラボ：イントロダクション
        infinity_playlab_events: 'Play Lab - Events'
        infinity_playlab_repeat_forever: 'Play Lab - Repeat Forever'
        csp_applab_objects: Introduction to Objects
        csp_applab_databases_1: 'Introduction to Databases - Part 1'
        csp_applab_databases_2: 'Introduction to Databases - Part 2'
        csp_applab_processing_lists: Processing Lists with Loops
        csp_applab_lists_1: 'Introduction to Lists - Part 1'
        csp_applab_lists_2: 'Introduction to Lists - Part 2'
        csp_applab_lists_3: 'Introduction to Lists - Part 3'
        csp_applab_lists_4: 'Introduction to Lists - Part 4'
        csp_applab_conditionals_1: 'Introduction to Conditionals - Part 1'
        csp_applab_conditionals_2: 'Introduction to Conditionals - Part 2'
        csp_applab_conditionals_3: 'Introduction to Conditionals - Part 3'
        csp_applab_design: Introduction to Design Mode
        csp_applab_variables_1: 'Introduction to Variables - Part 1'
        csp_applab_variables_2: 'Introduction to Variables - Part 2'
        csp_applab_functions: 関数
        csp_applab_functions_parameters: パラメーター付き関数
        csp_applab_loops: ループ〔くりかえし〕
        csp_applab_turtle: Turtle Programming
        csp_concept_bigdata_medicine: 'Data & Medicine'
        csp_concept_cybercrime: 'The Internet: Cybersecurity & Crime'
        csp_concept_encryption: 'The Internet: Encryption & Public Keys'
        csp_concept_http_html: 'The Internet: HTTP & HTML'
        csp_concept_internet_ip_dns: 'The Internet: IP Addresses & DNS'
        csp_concept_internet_packets_reliability: 'The Internet: Packets, Routing & Reliability'
        csp_concept_internet_wires_cables_wifi: 'The Internet: Wires, Cables & Wifi'
        csp_concept_rgb: A Little Bit About Pixels
        csp_cs_is_changing_everything: Computer Science is Changing Everything
        csp_pixelation_color_1: 'Color pixelation widget - Part 1'
        csp_pixelation_color_2: 'Color pixelation widget - Part 2'
        csp_pixelation_color_3: 'Color pixelation widget - Part 3'
        csp_pixelation_bw: Black and white pixelation widget
        csp_U1L14_tipstricks: 'Unit 1 Lesson 14 Teacher Tips & Tricks'
        csp_textcompression: Text compression widget
        csp_textcompression_new: Text compression widget
        csp_internetsimulator_1: 'Internet Simulator - Part 1'
        csp_internetsimulator_2: 'Internet Simulator - Part 2'
        csp_internetsimulator_3: 'Internet Simulator - Part 3'
        alg_1_intro: 'CS in Algebra - Introduction'
        alg_2_eval_block: 'CS in Algebra - Evaluation Blocks'
        alg_3_pemdas: 'CS in Algebra - Order of Operations'
        alg_4_data_types: 'CS in Algebra - Data Types'
        alg_5_contracts: 'CS in Algebra - Contracts'
        alg_6_variables: 'CS in Algebra - Variables'
        alg_7_function: 'CS in Algebra - Functions'
        alg_8_design_recipe: 'CS in Algebra - Design Recipe'
        alg_9_booleans: 'CS in Algebra - Booleans'
        alg_10_conditionals: 'CS in Algebra - Conditionals'
        alg_11_coordinate_plane: 'CS in Algebra - Coordinate Plane'
        alg_12_biggame_variables: 'CS in Algebra - Big Game Variables'
        alg_13_biggame_animation: 'CS in Algebra - Big Game Animation'
        alg_14_biggame_booleans: 'CS in Algebra - Big Game Booleans'
        alg_15_biggame_update_player: 'CS in Algebra - Big Game Update Player'
        alg_16_biggame_collision_detection: 'CS in Algebra - Big Game Collision Detection'
        alg_17_sambat_compound_booleans: 'CS in Algebra - Compound Booleans'
        hoc2015_preview_blocks: Make your own game blocks
        hoc2015_preview_typing: Make your own game typing
        hoc2015_preview_conclusion: Make your own game conclusion
        starwars_intro: 'スター ・ ウォーズ: コーディングで銀河系を作る - 紹介'
        starwars_typing: 'スター ・ ウォーズ: コーディングで銀河系を作る - JavaScript'
        starwars_events: 'スター ・ ウォーズ: コーディングで銀河系を作る - イベント'
        starwars_congrats: 'スター ・ ウォーズ: コーディングで銀河系を作る - おめでとう'
        starwars_blocks_intro: 'スター ・ ウォーズ: コーディングで銀河系を作る - 紹介'
        starwars_blocks_events: 'スター ・ ウォーズ: コーディングで銀河系を作る - イベント'
        starwars_blocks_congrats: 'スター ・ ウォーズ: コーディングで銀河系を作る - おめでとう'
        mc_intro: 'Minecraft - イントロダクション'
        mc_repeat: 'Minecraft - リピート'
        mc_if_statements: 'Minecraft - IF文(もし...)'
        mc_congrats_share: 'Minecraft - クリア'
        mc_congrats_no_share: 'Minecraft - クリア'
        gumball_intro: 'Gumball Hour of Code - Introduction'
        gumball_events: 'Gumball Hour of Code - Events'
        gumball_repeat: 'Gumball Hour of Code - Repeat statements'
        iceage_intro: 'Ice Age Hour of Code - Introduction'
        iceage_events: 'Ice Age Hour of Code - Events'
        iceage_repeat: 'Ice Age Hour of Code - Repeat statements'
    callout:
      text:
        drag_blocks: 「移動」ブロックをドラッグして、ほかのブロックの下にくっつけてください。
        run: 「実行」ボタンをおして、プログラムをうごかしてみてください。
        watch_again: ここをクリックするともう一度ビデオを見られます
        gray_block_explanation: 灰色のブロックは消すことができません。それでもパズルをとくことができるでしょうか？
        show_code_explanation: 自分で書いたプログラムコードを表示する
        instructions_repeat_explanation: 各パズルの説明はここに再度表示されます
        category_explanation: 前と同じブロックがすべてそろっていますが、種類別になっています
        set_sprite_image: 'Attach a "set actor to image" block to the "when story starts" block to enable an actor for this story'
        studio_say_text: アクターの発言をこちらの引用符の間に入力しよう
        jigsaw_click: このブロックをクリックして！
        move_elsa_forward: 'エルサをまえにすすませるために、"まえにうごく"ブロックをドラッグして"実行時"ブロックにくっつけてください。'
        turn_elsa: '"回転"ブロックを使ってエルサの向きを変えてください。ドロップダウンの数字でどれくらいエルサを回転させるかを決めます。'
        replace_questions: 'ドロップダウンを使って"???"を数字に変えてください'
        replace_questions_degree: 'ドロップダウンを使って"???"を回転するための正しい角度に変えてください'
        repeat_blocks: 'Use the "Repeat" block and wrap it around the blocks in the workspace'
        repeat_blocks_1: (1)このブロックを使います。作業領域にある灰色のブロック達のあたりに置いてください
        repeat_blocks_2: '(2)"繰り返し"ブロックをここに移動させて、灰色のブロック達を内側に置いてください'
        snowflake_dropdown: このドロップダウンリストを使って異なる雪の結晶を作ってみましょう!
        degrees_per_side: Divide 360 by the number of sides to get the size of each angle in degrees.
        set_sides: 'Use this block to set "sides" to the number needed to complete the puzzle.'
        set_length: 'Use this block to set "length" to the correct value.'
        which_equation: Which equation makes each side shorter for shapes with more sides?
        get_nectar: 'Use the new "get nectar" block.'
        actions_category: 'The tool box got a new look! The "Actions" blocks are in here now.'
        draw_square_hint: 'Hint: Use the square loop you just made in the last puzzle.'
        edit_function: Click here to edit your function.
        create_function: 'Click here to open the "Functions" flyout, then click the "Create a Function" button.'
        house_hint: "It's ok if the picture doesn't look like a house yet. We will fix it in the next puzzle."
        edit_draw_square: Use this button to edit the function and add the loop.
        edit_get_nectar: Use this button to edit the function and change the direction the Bee will turn to get the nectar.
        logic_category: 'Open the "Logic" flyout to find the "if/else" block.'
        length_parameter: 'Can you update this function so it uses the "length" parameter?'
        frozen_diamond_repeat: 繰り返しブロックを使ってこの形を作ってください
        frozen_circle_function_in_circle_turn: 円を描くたびに向きを変えることを忘れないでください。
        frozen_circle_function_with_parameter_circle: '"円を描く"ブロックを使い、そして大きさを変えてください。'
        frozen_snowflake_branch: '"雪の結晶の枝を描く"ブロックを使ってください'
        frozen_create_square: 四角形を描くためにもっとブロックをくっつけてください
        playlab_drag_say: '"言う"ブロックをここにドラッグして"こんにちは"と打って'
        playlab_use_twice: このブロックを二回使って、キャラ番号を変えることを忘れずに
        playlab_move_girl: '"移動 右"ブロックを使ってテニス少女を動かして'
        playlab_play_sound: '"サウンドを再生"ブロックをここに加える'
        playlab_arrow_keys: 実行をクリックしたあとに魔女を動かすのにこれらを使うのを忘れずに
        playlab_add_move: 'この繰り返しブロックの中に"移動"ブロックを加えて'
        playlab_add_score: ここに加点ブロックを加えます
        playlab_add_blocks: ここにあなたのブロックを加えます
        set_variable: Drag a number block here to set your variable
        place_variable: Drag your variable inside this block
        bee_for_loop: Drag the largest number of nectar you want the bee to collect here
        place_counter_variable: Drag your counter variable inside this block
        function_editor_draw_square: 'This is your function definition. These blocks run everytime you use the "draw a square" block'
        change_here: Make your change here
        write_draw_square_function: Drag blocks from the toolbox into here that draw a square
        write_draw_triangle_function: Drag blocks from the toolbox into here that draw a triangle
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
        fill_in_actor: Fill in the ??? with numbers that correspond to each actor (1, 2, and 3)
        repeat: Put blocks inside the loop to repeat commands
        if_bee_nectar: 'Use the "if" block to decide if the bee should get nectar'
        if_else_bee: 「if/else」ブロックをつかって、はなからみつをとったり、はちみつをつくったりしましょう。
        repeat_full_circle: Enter in the number of times the zombie has to move to make a full circle
        place_length_variable: Drag the length variable here to replace the question marks
        arrows_move_actor: やじるしをつかって、キャラをうごかそう。
        right_arrow_fireball: Use the right arrow to shoot fireballs
        name_function: ここで関数の名前を書く
        Infinity_move_right_runbutton: うごかすブロックをここに足してください。
        Infinity_move_directions_callout: どのブロックが上矢印を押したときにベイマックスを上に動かすでしょうか。
        Infinity_move_directions_callout_arrow: これらの矢印を使って操縦してください。
        Infinity_move_collide_callout: このイベントが起きたときに音を鳴らしてください。
        Infinity_repeat_callout: 移動ブロックをこの中に置いてください
        craft_run_button_callout: '"実行"を押してプログラムを試します'
        craft_drag_block_callout: '"前進();"ブロックをもう1つのブロックの下にドラッグします'
        craft_callout_preplaced: 用意されたブロックを使って始めましょう
        craft_inside_repeat: ここにブロックを置いて繰り返しましょう
        craft_callout_preplaced_house: このコードで家を建ててみましょう
        craft_what_is_iron: 鉄を掘りましょう！
        craft_callout_moveforward: 溶岩を調べるコードに前進のコマンドを追加しましょう
