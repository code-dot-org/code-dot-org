#Autogenerated locale file.
ja:
  data:
    game:
      name:
        Unplug1: コンピューター・サイエンス入門
        Maze: 迷路
        Multi: 複数選択の項目
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: グラフ用紙のプログラミング
        Artist: アーティスト
        Unplug4: アルゴリズム
        Artist2: アーティスト 2
        Unplug5: 機能
        Farmer: 農家
        Unplug6: 条件
        Artist3: アーティスト 3
        Unplug7: 作曲する
        Farmer2: 農家 2
        Unplug8: 抽象化
        Artist4: アーティスト 4
        Unplug9: プログラミングをリレーする
        Farmer3: 農家 3
        Unplug10: インターネット
        Artist5: アーティスト 5
        Unplug11: ラップアップ
        MazeEC: 迷路
        Bounce: バウンド
        Flappy: フラッピーバード
        Jigsaw: ジグソーパズル
        MazeStep: 迷路ステップ モード
        Wordsearch: ワードサーチ
        Webapp: アプリ ラボ
        ArtistEC: アーティスト
        TextMatch: テキスト マッチ
        StudioEC: プレイラボ
        Applab: アプリ ラボ
        NetSim: インターネット シミュレータ
        Custom: アーティスト
        CustomStudio: プレイラボ
        Gamelab: ゲーム ラボ
        Spritelab: スプライト ラボ
    trophy:
      name:
        Bronze: 銅
        Silver: 銀
        Gold: 金
    concept:
      description:
        sequence: 連続
        if: もしブロック
        if_else: もし/でなければブロック
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        loop_while: の間にブロック
        loop_for: 数える ブロック
        function: 関数(かんすう) 
        parameters: パラメーター付き関数
    level:
      instructions:
        maze_2_2: 'ブタを捕まえるのを手伝ってくれない？「前に動く」ブロックをつみあげて、「実行」ボタンをおしてね'
        maze_2_1: このブタはわたしの羽をぐちゃぐちゃにします。ブタをみつけるのを手伝って！
        maze_2_2_5: 道を通って、おばかなブタまで連れてってね。ばくだんにきをつけて、羽がふきとびます！
        maze_2_3: 緑の悪者のところにつれていって！(ばくだんに気をつけて)
        maze_2_4: 落ち着いて、悪いブタを見つけましょう。でないと怒るかも！
        maze_2_5: ブロックを2つだけ使い、緑のブタにたどりつく方法がありますす。わかりますか？
        maze_2_6: ブロックを３つだけ使い、緑の侵入者のところへ連れていって
        maze_2_7: 一番小さい数のブロックを使って、悪いブタを追い出しましょう。「繰り返し」ブロックを使います
        maze_2_8: '灰色のブロックを消すことはできません。「繰り返し」ブロックを使い、3回繰り返し、このパズルを解きましょう。「動く」「動く」「曲がる」の3つのブロックを灰色の「繰り返し」ブロックにいれてみましょう'
        maze_2_9: OK。新しい「まで繰り返す(Repeat until)」ブロックを試しましょう。いらいらさせるブタにたどりつくまで繰り返します
        maze_2_10: 最後の問題です。4つのブロックだけを使いパズルを解けますか？
        maze_2_11: 人間のあなた。わたしはゾンビ。おなかが減っています。。。ヒマワリが必要です。5つのブロックだけでわたしを連れていけますか？
        maze_2_12: OK。似ていますが、ちょっと違います。ブロック5つだけでできますか？
        maze_2_13: '新しい"もし"ブロックを使い、いつ曲がるかを決めてください。ヒント: あともう１つのブロックが必要です、どう設定しているかを学べば、次はひとりでできるようになります'
        maze_2_14: OK。さっきのパズルと同じです、でもどうやって"もし"ブロックと"繰り返し"ブロックを一緒に使ったかをもう一度思い出してみましょう
        maze_2_15: ヒマワリがほしい！"もし"ブロックを使って最小限のブロック数で私をそこまで連れていってください。
        maze_2_16: OK 練習のためにもう一度。 ー　それほど違いはないけれど、 チャンパーたちに気をつけて！
        maze_2_17: '"もし/でなければ"ブロックは条件を確かめて、あること、あるいは別のあることをします。ヒマワリをとってくるためにこの新しいブロックを試しましょう。'
        maze_2_18: '”もし○○でなければ××”ブロックの練習をもう一回やりましょう。一度でクリアできるかな？'
        maze_2_19: ブロックをあと3つ足して、難しい迷路を解くのをたすけてくれますか？もしそれができれば、どんな長くカーブした道でも歩けるようになります
        turtle_1_1: こんにちは、はアーティストです。プログラムを作ればどんな形でも描くことができます。ブロックをいくつか使い、灰色の線をなぞらせてください
        turtle_1_2: '四角形を描きます。注: 新しい「色の設定」ブロックで選択して、好きな色を使用する'
        turtle_1_3: ブロックを３つだけ使い、四角形を作成する
        turtle_1_4: '毎回違う色を選択してくれる"random color"オプションを使い、色の異なる側面をもつ三角形を描きましょう。ヒント：どの程度曲がるかは、回転ブロックの回数をクリックしながら見つけます'
        turtle_1_5: 練習で、三角形を描いて、そして封筒になるように四角形を描く
        turtle_1_6: 'どうやって、この三角形と四角形を描けるか解決できますか？ヒント：まず三角形を描いてから、次にどのくらいの四角形を描けばよいかを決める'
        turtle_1_7: OK.もう少し難しくしてみましょう  -もしこれらの緑のメガネを描けるか試しましょう。四角形はそれぞれの側面が100 ピクセルで 50 ピクセル離れています。緑色で描くのを忘れずに ！
        turtle_1_8: OK.  このコーディングを実行 (または「実行する」キーを押して試す)したら何が起こるでしょうか。その後、図が完了まで何回も繰り返します。色は毎回異なるようになります
        turtle_1_9: 円を描くのにどんな数字が"???"を置きかえられるかわかりますか？
        turtle_1_10: 'よくできました！何か描きたいものを描いてみましょう。いくつかの楽しいアイデア： スティック図、雪片、またはスパイラル。新しい「設定幅」ブロックを試みてください。楽しんで！'
        turtle_4_1: 'ブロック３つだけ （100 ピクセルのエッジ) で三角形を描くことができますか？ヒント:「繰り返す」のブロックを使用する'
        turtle_4_2: '「90度右に曲がる」ブロックをプログラムのどこかに追加して、指定された三角形を描いてください'
        turtle_4_3: OK  これがあなたが書いたひとつの三角形を描くコードです。かわいい花を作るために「繰り返し」と「ターン」のブロックを追加できますか？
        turtle_4_4: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36度だけ回転させました。何回これを繰り返す必要がありますか？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_5: 'これは前のパズルと同じコードですが、それぞれの三角形を描いた後に36回繰り返し回転させました。どのくらいの角度で回転させればいいでしょう？（ヒント: 360度回転した後は完全な円ができます）'
        turtle_4_6: ブロックを３つだけ使用して、20 ピクセルのエッジを持つ四角形を描くことができますか？
        turtle_4_7: 'これが最後のパズルで四角形を描いたときのコードです。10繰り返して隣同士の四角形ではしごを描けますか？ヒント: ブロックをあと2 つ使うだけです'
        turtle_4_8: ここでは、前のパズルを解決します。図を完成させるためにブロックをあと2つ追加できますか？
        turtle_4_9: ここでは、前のパズルを解決します。図を完成させるのに角度をどのくらいにすればいいでしょうか？（解くのに多少時間がかかるでしょう)
        turtle_4_10: ここでは、前のパズルを解決します。図を完成させるのに何回繰り返せばいいでしょうか？
        turtle_4_11: 違うパターンを作るのに「回転」と「繰り返し」ブロックの中の数字を変えてください。また、残りのコードを自分の好きなように書き変えてみてください
        maze_karel_1_1: こんにちは、私は農民です。私の畑を平らにするのを助けてください。根付けの準備をします。私を泥山にうごかして「取り除く」ブロックで泥山を取り除いてください
        maze_karel_1_2: 次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル分の泥山で一杯にしてください
        maze_karel_1_3: 私を泥山へ動かしてください、そしてできる限り少ないブロックで、シャベル何杯分で泥山をなくせるかを教えてください
        maze_karel_1_4: '泥山４つすべてをなくすのを助けてくれませんか？ヒント: できれば繰り返しブロックを使います'
        maze_karel_1_5: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます'
        maze_karel_1_6: 可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください
        maze_karel_1_7: うわー、すごく深い穴を発見 ！何杯分のシャベルの泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？
        maze_karel_1_8: できる限り少ない数のブロックで、畑のはじの穴を埋めるのを手伝ってください。
        maze_karel_1_9: 'これらすべての泥山をなくしましょう。できる限り少ない数のブロックを使ってください。ヒント："while"ブロックを使ってみてください'
        maze_karel_1_10: 遅くまで仕事をしていたので外は真っ暗、積み上がった山がどのくらい大きいのかわかりません。whileブロックにあったようなオプションはもうありません。畑にそって私を移動させ、山があれば移動させます
        maze_karel_1_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったら移動し、穴があったら埋めます。ヒント:"もし"ブロックでオプションのドロップ ダウン メニューを使います'
        turtle_2_1: 'こんにちは。私、zombieアーティスト。私、描くのが大好き ！特別な色で四角形を描くのを手伝ってください。重要: ブロックはみんな同じですが、カテゴリーに分かれています'
        turtle_2_2: 新しいブロックを定義させてくれる機能を使いましょう！「関数」カテゴリにある、新しい「四角形を描く」ブロックを試して、小さな 50 x 50 の緑の四角形を描きましょう
        turtle_2_3: 繰り返し」ブロック を使い、「ループ」カテゴリにある、サイズが100、それぞれ120度離れている四角形を３つ描きます。そして３つのランダムで違う色で描いてください
        turtle_2_4: 'もっと素敵にしてみましょう。コードを変更して、100 ピクセルの幅、それぞれの間が10 度離れている36個の四角形を描きます。ヒント：スライダを使うと早くできます'
        turtle_2_5: 50、60、70、80、90ピクセルの辺を持つ四角形を描きます。「四角形を描く」機能を５回使います。
        turtle_2_6: 'OK、 このプログラムは前回と同じ四角形を描くのに、カウンターを使います。四角形をカウンターと同じサイズにしたいので"Counter"ブロックを使います。ヒント： 「変数」のカテゴリにあります'
        turtle_2_7: ブロックが無効なので、スパイラルを描くプログラムが起動しません。「カウント」ブロック(ループ カテゴリ）と「カウンター」ブロックの(変数のカテゴリ) を使用して同じスパイラルを描く新しいプログラムを作ります
        turtle_2_7_5: 新しい「雪だるまお絵描き」機能 (機能のカテゴリ)をつかって高さ 250 と 長さ100 の 雪だるまを2 つ描いてください
        turtle_2_8: これは少しひっかけた問題です。「雪だるまお絵描き」機能と、新しい「前方にジャンプ」のブロック (アクションのカテゴリ)を使って、雪だるまを三つ、100 ピクセルを離れたところに、違う色を使って描きます
        turtle_2_9: '" count "ループを使って、高さ70、80、90 100 110 の雪だるまの家族を描いてください。雪だるまは、 60 ピクセル離します'
        turtle_2_10: 様々なスパイラルを試しにつくるコードはこちら。回転量を変更するとどうなるか？またはループのランダムな色を設定しみたらどうなるか？好きなものを自由に描いてみましょう
        maze_karel_2_1: 'ブロックを使って、泥山をすべて移動させ、地面の穴を全て埋めるのを手伝ってください。たくさんのブロックを使う代わりにループを使います。ヒント: ループの中に別のループを入れることもできます'
        maze_karel_2_2: '"5を埋める"と呼ばれるブロックを作りました。機能カテゴリです。この穴を埋めるために使います'
        maze_karel_2_3: すべての穴を埋めるように新しい「5を埋める」 機能のブロックを使います。関数のカテゴリから"5 を埋める"ブロックをドラッグします
        maze_karel_2_4: 7回シャベルで取り除くという新機能を定義して、その機能を使ってすべての泥山を削除することができるプログラムを書きます
        maze_karel_2_5: 泥山からシャベル6回分を取り除く新機能を作り、それを使ってすべての泥山を平らにするのを手伝ってください
        maze_karel_2_6: '「8 埋める」、「8 削除する」の２つの新しい機能を使い、泥山を平らにして、穴を埋めましょう'
        maze_karel_2_7: "私の畑に牛がいます！牛を避けながら泥山を除去する新しい機能を作りましょう。新機能の中に全ブロックを置きます\n\n"
        maze_karel_2_8: この新しい「牛を避ける、1 削除する」機能を使い、全ての泥山を取り除きましょう
        maze_karel_2_9: "縦に並ぶ４つの異なる泥山を削除する機能です。ループ内にこの機能を入れてみましょう。いくつか新しいブロックだけで泥の山を除去できます\n"
        maze_karel_2_10: 私を畑のはじに移動させて、 2 つの機能を使い、すべての泥山を削除、すべての穴を埋めてください
        turtle_3_1: このパズルでは、どのように「四角形を描く」か、「円を描く」かの機能がどう定義されるかを学びます。機能の定義づけでは、ブロックそのものが実行されません。実際に四角形を描く「四角形を描く」ブロックが必要になります
        turtle_3_2: 例として「四角形を描く」機能を使い、「三角形を描く」機能作成して、使ってみます
        turtle_3_3: '猫の周りに三角形のフェンス、そして牛の周りに四角形のフェンスを描いてください。ヒント: 実行しながらプログラムをテストする'
        turtle_3_4: "ライオンの周りに家を描くのに、「四角形を描く」と「三角形を描く」（他のいくつかのブロック）をどう使うか自分でわかるか確認します\n"
        turtle_3_5: 'さあ、新しい「家を描く」機能を作って、猫の家を描いてみましょう。ヒント：「何かをする」ブロックを使い、新しい機能を作成する。ブロックに自分でつけた名前をテキスト入力します'
        turtle_3_6: '「四角形を描く」を手本として、「三角形を描く」という機能を作ってください。「長さ」という名前の入力を追加します。その後、様々なサイズの三角形を描画して見てくださ。 （ヒント：関数に入力を追加するには、星をクリックしてください）'
        turtle_3_7: '「家を描く」に「長さ」という入力名を追加します。(エッジ 150 ピクセルの長さ) の大きな象の家を建てましょう'
        turtle_3_8: 新しい家を書いたときに右下に来るよう「家を描く」を編集してください。この編集した機能を使って家を 3 つ描いてください。
        turtle_3_9: ひとりで「家を描く」機能を作れますか。試してみて、住宅の列を作ります
        turtle_3_10: あなたはたくさんのことを学びました！星、スパイイラル、または派手なスノーフレークなど自由に描きましょう
        maze_karel_debug_seq_1: デバッグのせかいへようこそ ！プログラムがただしくうごいてくれません。じめんをたいらにしてたねまきができるように、まちがっているところをみつけて、なおしてもらえませんか？
        maze_karel_debug_seq_2: このプログラムのどこがまちがっていますか？山をなくすにはどこをなおせばいいでしょうか？
        maze_karel_debug_repeat: じめんがたいらになるように、このプログラムのまちがいをなおして（デバッグして）ください
        maze_karel_debug_while: このプログラムのどこをかえれば、あなをうめることができるでしょうか？
        maze_karel_debug_if: たすけて！じめんがぜんぶたいらになるように、このプログラムをなおしてください。
        maze_karel_debug_if_else: やまをぜんぶなくすのと穴をうめることができるように、このプログラムをなおして（デバッグして）ください
        maze_karel_debug_function_1: プログラムのどこをなおせば、やまをぜんぶなくすことができるでしょうか？
        maze_karel_debug_function_2: プログラムのまちがいをなおして（デバッグして）もらえませんか。じめんをたいらにしたいんです
        maze_karel_debug_function_3: 'このプログラムをすこしかえて、じめんからやまをぜんぶなくしてください'
        turtle_5_1: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_2: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_3: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_4: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_5: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        turtle_5_6: このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)
        maze_3_1: ブタをつかまえないといけません。move(); をなんどかコールしてたまごをとりかえしてください
        maze_3_2: ブタのいるとこにいけるプログラムをかいてください
        maze_3_3: ブタのところまでどうやっていけばいい？ばくだんにぶつからないようにきをつけてね
        maze_3_4: うわーん！ばくだんにぶつからずにブタをつかまえるプログラムをかいてよ！
        Custom_builder: 作成したいレベルを描画するために、ツールボックスからブロックをワークスペースにドラッグします。準備ができたら「実行」を押します。
        jigsaw_1: ブロックをクリックします。
        jigsaw_2: "ブロックをターゲットにドラッグします。\nスマイル マークをうごかして、かさねてください。"
        jigsaw_3: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_4: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_5: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_6: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_7: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_8: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_9: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_10: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_11: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_12: ブロックをうごかして、絵（え）を完成（かんせい）させてください。
        jigsaw_13: パズルをといて！
        mazestep_1: 迷路の手順はこちら
        mazestep_2: 迷路の手順はこちら
        mazestep_3: 迷路の手順はこちら
        mazestep_4: 迷路の手順はこちら
        mazestep_5: 迷路の手順はこちら
        studio_c2_1: イヌに「こんにちは」と いわせて みましょう。
        studio_c2_2: イヌが なにか はなしてから、ネコも なにかを はなすように してみましょう。
        studio_c2_3: イヌが ネコの ところに行くプログラムを作って ください。
        studio_c2_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c2_5: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c2_6: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c2_7: '「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。'
        studio_c2_8: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c2_9: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c2_10: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c2_11: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_story_1: イヌに「こんにちは」と いわせて みましょう。
        studio_c3_story_2: イヌが なにか はなしてから、ネコも なにかを はなすように してみましょう。
        studio_c3_story_3: イヌが ネコの ところに行くプログラムを作って ください。
        studio_c3_story_4: 犬がねこのところに行き、ねこのところに犬が来たらねこが犬に「こんにちは」というプログラムを作ってみてください。
        studio_c3_story_5: タコがハッピーになるように ブロックを たしてください。
        studio_c3_story_6: じぶんの物語を作ってみましょう。作り終わったら、「完了」をクリックして友達に知らせ、携帯電話で物語をみてもらいましょう。
        studio_c3_game_1: タコをクリックしたら「こんにちは」と言うプログラムを作ってみてください。
        studio_c3_game_2: 上向き矢印・下向き矢印・左向き矢印・右向き矢印を使ってペンギンを動かして、ぜんぶのはたにさわらせるプログラムをつくってみましょう。
        studio_c3_game_3: '「ずっと」にくっつけたブロックは、プログラムがうごいているあいだずっとくりかえされます。きょうりゅうが上と下をずっといったりきたりするように、ブロックをくっつけてください。'
        studio_c3_game_4: まず、ペンギンが恐竜にぶつかったら「痛い！」としゃべり、同時に「ヒット」の音が鳴るようにブロックを組み立ててください。それから矢印を使ってペンギンをうごかし、恐竜にぶつけてみましょう。
        studio_c3_game_5: ペンギンがタコにさわったらポイントがもらえるようにブロックをくみたててから、矢印をつかってポイントがもらえるまでタコを動かしましょう。
        studio_c3_game_6: このゲームのはいけいと、ペンギンのうごくはやさをかえるブロックをついかしてから、ポイントがもらえるまで矢印をつかってペンギンをうごかしましょう。
        studio_c3_game_7: 自分だけのゲームを作りましょう。ゲームが出来たら「完了（かんりょう）」をクリックして、ともだちのパソコンやスマホに おくって、あそんで もらいましょう。
        studio_playlab_1: "ペンギンが「こんにちは」と言いたがっています。たすけて あげてください。\nヒント：「言う」ブロックを「実行したとき」の下にくっつけます。そして、「ここに入力」のところに、何か字を入れてください。そのあとに「実行（じっこう）」をクリックします。"
        studio_playlab_2: ケイブボーイ(キャラ1) とケイブガール(キャラ2) は、おたがい、あいさつが したいです。「キャラ が言う」ブロックを2回つかって、かれらを たすけてください。
        studio_playlab_3: テニス少女が、ハタのところに行くのを たすけてください。
        studio_playlab_4: テニス少年(キャラ1) が、テニス少女(キャラ2) にさわったら、音が鳴るようにしてください。そして、テニス少年がテニス少女のところに行くのを たすけてください。
        studio_playlab_5: クリックされた時にスペースボットが「ちきゅうじんよ」としゃべれるように してください。実行ボタンをクリックしてから、スペースボットをクリックしてね。
        studio_playlab_6: 上下左右の矢じるしキーで、まじょが うごけるようにしてください。そして、まほうの玉を ぜんぶ とってください。
        studio_playlab_7: '「ずっと やること」の中に入れたブロックは、ずっと うごき つづけます。ウイザード（魔法使い）が、ずっと左右に うごくように、プログラムしてください。'
        studio_playlab_8: ユニコーン（キャラ1）が、ウイザード（キャラ2）に さわったら、音を鳴らして、点をふやすようにして下さい。そして、ユニコーンをウイザードのところまで うごかしてみましょう。
        studio_playlab_9: 実行したときの背景（はいけい）を、決めてください。そして、スペースボットがエリアンを早く つかまえられるよう、スピードを早くしてください。そのあとで、スペースボットを矢じるしキーでうごかして、エイリアンを つかまえます。
        studio_playlab_10: 自分だけのゲームを作りましょう。ゲームが出来たら「完了（かんりょう）」をクリックして、ともだちのパソコンやスマホに おくって、あそんで もらいましょう。
        studio_iceage_hello1: シドは新しい冒険に向けてみんなに集まってほしいようです。シドに「こんにちは」と言わせましょう。ワークエリアにブロックをドラッグします。そしてブロックの中に「こんにちは」と書いてみましょう。
        studio_iceage_hello2: シド(キャラ１) がマニー(キャラ２) を見つけて、冒険に誘いたいと思っています。「キャラが話す」のブロックを二回使ってお互いにあいさつをさせましょう。
        studio_iceage_move_to_flag: スクラットがドングリを探しています！「移動」のブロックを使って最後の200ピクセルを進ませてあげましょう。
        studio_iceage_move_to_actor: サンディエゴ (キャラ1) は、マニー (キャラ2) を探しています。マニーに「キャラを移動」ブロックを使用して下に 200 ピクセル移動させてディエゴを助けましょう。次に、彼らはお互いを見つけたときにサウンドを再生するためのブロックを「キャラに触れたとき」 ブロックに接続します。
        studio_iceage_repeat: '「永遠に繰り返す」ブロックでは、継続的コードを実行できます。おばあちゃんが左と右に繰り返し移動することによって運動を得るためにブロックをくっつけますか。'
        studio_iceage_click_hello: シドがクリックされたときに友人に最後の電話をかけるようにしてあげますか？実行を押した後、シドをクリックすることを忘れないでください。
        studio_iceage_move_events: スクラットはまだドングリを探しています! 各イベントに”移動”ブロックをくっつけて、矢印キーで方向を変更することで彼が走り回れるようにしてください。作り終わったら、実行クリックし、すべてのドングリを収集してみてください。
        studio_iceage_sound_and_points: 私たちはおばあちゃんを左右に動かすためのコードとシドを動かすためのコードをほとんど提供しています。 「キャラが触れる」イベントにブロックを追加することで、おばあちゃんとシドがぶつかったときにサウンドを再生し、ポイントを獲得するよう、コードを完成させてください。 実行をおしてゲームをプレイします。
        studio_iceage_warn_ice_age: 氷河期が来ているので、みんなが高速に移動する必要があります！背景を氷の背景に変更して、シドの速度を高速に設定してください。そして実行して、ディエゴを警告するためにシドを彼へうごかします。
        studio_iceage_throw_hearts: シドは彼の祖母、おばあちゃん、に彼が彼女を愛していることをおしえてあげたいです。「キャラが撃つ」コマンドを使用して、シド(キャラ1) がおばあちゃん (キャラ2) にハートを投げます！ハートに撃たれたときにおばあちゃんの気分を幸せに設定してください。
        studio_iceage_free_play: 君の ゲームやお話を作る時間です！完了したら、「完了」ボタンをクリックして、友だちが君のゲームをスマホや、タブレット、コンピューターで試せるようにしよう。
        studio_gumball_hello1: アナイスは新しい友だちが作りたいです。彼女が「こんにちは」というのを助けられますか？「言う」ブロックをワーク スペースにドラッグして、「こんにちは」と入力してください。
        studio_gumball_hello2: ダーウィン (キャラ 1) と、彼の兄弟のガムボール (キャラ 2) は、学校に向かっています。 "キャラが言う"ブロックを 2 回使って、お互いに、あいさつをさせてください。
        studio_gumball_move_to_flag: バナナ ジョーは、野外活動レースで勝ちそうです！ 「うごかす」ブロックを使って、あと 200 ピクセル行くのを助けてください。
        studio_gumball_move_to_actor: ガムボール(キャラ 1) とダーウィン (キャラ 2) は、野外活動に遅刻です！「キャラをうごかす」ブロックを使って、ガムボールが 200 ピクセル下のダーウィンのところへ行くのを助けてください。次に、「キャラにさわる」イベントにブロックをつなげて、お互いを見つけたときに、音をならします。
        studio_gumball_repeat: '「ずっとやること」ブロックは、プログラムをずっと動かしつづけます。ブロックをつなげて、ガムボールが左右に動かし、レースのウォーミングアップができるようにしてください。'
        studio_gumball_click_hello: レースを始めるために、アントンが「よーい、ドン！」と言うのを助けてください！プログラムを動かすときは、「実行」をクリックしたあと、アントンをクリックして下さい！
        studio_gumball_move_events: ダーウィンは、はた を集めるコンテストに さんかしました！それぞれのイベントに「うごかす」ブロックをくっつけて、かれが走れるようにしてください。じゅんびが出来たら、「実行」をクリックして、すべての、はた を集めてください。
        studio_gumball_sound_and_points: アントン(キャラ 2) を左右にうごかすプログラムと、バナナジョー(キャラ 1) ががめんを動きまわるプログラムが、すでに出来ています。「キャラにさわる」イベントにブロックをつなげて、アントンにバナナジョーがさわったとき、音をならして、ポイントを加えるようにできますか？「 実行」をおしてゲームをプレイしてください。
        studio_gumball_warn_food_fight: ダーウィンは、フードファイトを脱出！背景を「キャラクター」に、ダーウィンを「はやいスピード」にセットして、ペニーのところへいって、彼女に警告してください。
        studio_gumball_join_food_fight: フードファイトにさんか！「キャラが撃つ～右」コマンドを使って、バナナ ジョー (キャラ 1) がアントン(キャラ 2) に、食べものをなげます！アントンに当たったら、気分を「（おこって）プンプンで」にセットしよう。
        studio_gumball_free_play: 君の ゲームやお話を作ろう。できあがったら、「完了」ボタンをクリックして、友だちが君のゲームをスマホや、タブレット、コンピューターで遊べるようにしよう！
        studio_full_sandbox: 自分だけのゲームを作りましょう。ゲームが出来たら「完了（かんりょう）」をクリックして、ともだちのパソコンやスマホに おくって、あそんで もらいましょう。
        studio_k1_1: イヌに「こんにちは」と いわせて みましょう。
        studio_k1_2: イヌが なにか はなしてから、ネコも なにかを はなすように してみましょう。
        studio_k1_3: イヌが ネコの ところに行くプログラムを作って ください。
        studio_k1_4: イヌが ネコに近づけるようにして、近づいたら「こんにちは」と ネコが 言えるように してください。
        studio_k1_5: タコがハッピーになるように ブロックを たしてください。
        studio_k1_6: あなたの ものがたりを 作ってください！ネコと イヌを うごかして 話をさせてください。
        maze_wordsearch_k_1: EASTになるように、私をうごかしてください。
        maze_wordsearch_k_2: SOUTHになるように、私を動かしてください。
        maze_wordsearch_k_3: WESTになるように、私を動かしてください。
        maze_wordsearch_k_4: NORTHになるように、私を動かしてください。
        maze_wordsearch_k_6: わたしを東(ひがし) と南（みなみ) にうごかして、JUMPとかいてください。
        maze_wordsearch_k_9: わたしをうごかして、CODEのスペリングをかいてください。
        maze_wordsearch_k_13: わたしをうごかして、DEBUGとかいてください。
        maze_wordsearch_k_15: わたしをうごかして、ABOVEとかいてください。
        maze_wordsearch_k_16: わたしをうごかして、BELOWとかいてください。
        maze_wordsearch_k_20: これはテストです。わたしをうごかして、STORYとかいてください。
        applab_ec_simple: アプリを作るには、[ツールボックス] で、ブロックをつかいます。
        turtle_ec_1_2: '四角形をかきます。注: 「ペンの色」ブロックで、すきな色をえらんで、使います。'
        turtle_ec_1_10: 'よく出来ました！かきたいものを、自由にかきましょう。いくつかのアイデア： ひとふでがき、スノーフレーク、うずまき。あたらしい「ペンのはば」ブロックもためしてみてください。楽しんで！'
        studio_ec_sandbox: 自分だけのゲームを作りましょう。ゲームが出来たら「完了（かんりょう）」をクリックして、ともだちのパソコンやスマホに おくって、あそんで もらいましょう。
    video:
      name:
        maze_intro: 迷路入門
        artist_intro: アーティスト紹介
        farmer_intro: 農家入門
        flappy_intro: フラッピー入門
        loop_times: 回ブロックを繰り返す
        loop_until: までブロックを繰り返します
        if: もしブロック
        if_else: もし/でなければブロック
        if_else_scrat: もし/でなければブロック
        function: 関数
        loop_while: の間にブロック
        loop_for: 数える ブロック
        parameters: パラメーター付き関数
        hoc_wrapup: Hour of Code（コーディングを学ぶ時間）まとめ
        Unplug1: コンピュータサイエンスとは？
        Unplug2: コンピュテーショナル・シンキング（コンピューターの様に考える）
        Unplug3: グラフ用紙のプログラミング
        Unplug4: アルゴリズム
        Unplug5: 機能
        Unplug6: 条件
        Unplug7: 作詞作曲
        Unplug8: 抽象化
        Unplug9: リレー プログラミング
        Unplug10: インターネット
        Unplug11: ラップアップ
        C1_happy_maps_unplugged: ハッピーマップ
        C1_moveitmoveit_unplugged: 動かせ！動かせ！
        C1_bigevent_unplugged: ビッグイベント
        C1_getting_loopy: ルーピーをゲット
        C1_pair_programming: ペアプログラミング
        C1_maze_intro_sequencing: 迷路シーケンスのイントロ
        C1_maze_debugging: 迷路：デバッグ
        C1_bee_level_intro: 蜂レベル - イントロ
        C1_artist_intro: アーティスト紹介
        C1_spelling_bee_intro: つづりみつばちのイントロ
        C1_zuck_repeat_loop: 迷路ループ
        C1_bee_loops: 'みつばち: ループ'
        C1_maze_loops: 迷路ループ
        C1_playlab_storytelling: Playラボ：　ストーリーを作成
        C1_planting_seed: 種をまこう
        C1_building_foundation: ピラミッドをたてよう
        C1_going_places_safely: 安全な道を通って行く
        C2_maze_intro: 迷路入門
        C2_artist_intro: アーティスト紹介
        C2_zuck_repeat_loop: 迷路ループ
        C2_artist_loops: アーティスト ループ
        C2_artist_debugging: アーティスト デバッグ
        C2_bee_loops: 'みつばち: ループ'
        C2_bee_debugging: みつばち デバッグ
        C2_bee_conditionals: つづりみつばち　条件文
        C2_playlab_createstory: Playラボ：　ストーリーを作成
        C2_graph_paper: グラフ用紙のプログラミング
        C2_conditionals_with_cards: 条件
        C2_binary_bracelets: バイナリ ブレスレット
        C2_relay_programming: プログラミングをリレーする
        C2_paper_airplanes: 紙飛行機
        C2_digital_footprint: デジタル フットプリント
        C2_digital_footprint_v2: デジタル フットプリント
        C3_maze_level_4: 迷路ループ
        C3_artist_intro: アーティスト紹介
        C3_artist_functions: アーティスト関数
        C3_bee_functions: つづりみつばち 関数
        C3_bee_conditionals: つづりみつばち　条件文
        C3_maze_conditionals: 迷路条件文
        C3_artist_nested_loops: 入れ子のループ
        C3_farmer_while: Whileループ
        C3_bee_nested_loops: 入れ子のループ
        C3_bee_debugging: みつばち デバッグ
        C3_bounce: バウンド
        C3_playlab_create_game: プレイラボ：ゲームを作りましょう
        C3_computational_thinking: コンピュテーショナル・シンキング（コンピューターの様に考える）
        C3_dice_race: 言うレース
        C3_internet: インターネット
        C3_crowdsourcing: クラウドソーシング
        C3_functional_suncatchers: 関数サンキャッチャー
        C3_songwriting_with_parameters: パラメーターで作詞作曲
        C4_intro: はじめに
        C4_loops_zombie: くりかえし
        C4_bee_conditional: つづりみつばち　条件文
        C4_variables_artist: 変数 - アーティスト
        C4_variables_playlab: 変数 - ゲームラブ
        C4_for_loops: ループ用
        C4_for_loops_bee: ループ用
        C4_for_loops_no_bee: forループ
        C4_math_artist: 数学でプログラミングアーティスト
        C4_function_edit: 関数の編集
        C4_function_create: 関数の作成
        C4_function_parameters: パラメーター付き関数
        C4_conditionals: 条件
        C4_unplugged_algorithms: タングラムのアルゴリズム
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: 封筒内の変数
        C4_unplugged_forloops: forループ
        C4_unplugged_parameters: パラメーターで歌や曲をつくる
        C4_unplugged_binary: ２しんすう
        CSF_a_b_artist_loops: アーティストくりかえし
        CSF_artist_angles: アーティストにおける角度
        CSF_collector_k1_blocks: 'CS の基礎: コレクター'
        CSF_collector_repeat_loops: コレクター 繰り返しループ
        CSF_collector_text_blocks: 'CS の基礎: コレクター'
        CSF_create_functions: 関数の作成
        CSF_debugging_k1_blocks: デバッギング
        CSF_debugging_text_blocks: デバッギング
        CSF_EF_cs_matters: コンピュータ科学の問題
        CSF_maze_intro_k1_blocks: コード スタジオ入門
        CSF_maze_intro_text_blocks: コード スタジオ入門
        CSF_my_robotic_friends: 私のロボットの友だち
        CSF_Power_of_Words: 言葉の力
        CSF_Super_Digital_Citizen: スーパー デジタル市民
        CSF_stevie_big_project: スティーヴィーと大きなプロジェクト
        CSF_unspotted_bugs: 気づかれていないバグ
        CSF_zuck_loops_short: ループを繰り返す
        frozen_intro: Hour of Codeの概要
        frozen_loops: ループ
        frozen_functions: 関数
        playlab_intro: Playラボの概要
        playlab_events: ゲームラボのイベント
        playlab_repeat_forever: ゲームラボのずっと
        tutorial_puzzle_challenge: パズル チャレンジのチュートリアル
        infinity_playlab_intro: プレイラボ：イントロダクション
        infinity_playlab_events: ゲームラボ - イベント
        infinity_playlab_repeat_forever: プレイラボ - ずっとくりかえす
        csd_concept_how_computers_work: コンピューターの仕組み入門
        csd_concept_computer: 'コンピューターの仕組み: 何がコンピューターをコンピューターにするのか？'
        csd_concept_binary_data: 'コンピューターの仕組み: バイナリーとデータ'
        csd_concept_circuits_logic: 'コンピューターの仕組み：回路＆ロジック'
        csd_concept_memory_cpu_input_output: 'コンピューターの仕組み: メモリ、CPU、入出力'
        csd_concept_hardware_software: 'コンピューターの仕組み：ハードウェア＆ソフトウェア'
        csd_concept_search: 検索のしくみ
        csd_external_amazon_data: Amazon推奨システムでビッグデータはどのように活用されて、私たちの生活を変えているのでしょうか
        csd_external_netflix_data: Netflixはテレビ番組や映画の提案をどのように行っているのでしょうか？
        csd_external_waze_data: なぜこれほど多くのユーザーがWazeに夢中になっているのでしょうか？
        csd_gamelab_animation_tab: '[アニメーション] タブ'
        csd_gamelab_velocity: 速度
        csd_weblab_intro_1: Webラボ - パート 1 はじめに
        csd_weblab_intro_2: Webラボ - パート 2はじめに
        csd_weblab_css_1: CSS - パート 1 はじめに
        csd_weblab_css_2: CSS - パート 2 はじめに
        csd_weblab_intro_3: Webラボ - パート 3はじめに
        csp_applab_functions: 関数
        csp_applab_functions_parameters: パラメーター付き関数
        csp_applab_loops: くりかえし
        csp_cs_is_changing_everything: コンピューター サイエンスはすべてを変えています
        starwars_intro: 'スター ・ ウォーズ: コーディングで銀河系を作る - 紹介'
        starwars_typing: 'スター ・ ウォーズ: コーディングで銀河系を作る - JavaScript'
        starwars_events: 'スター ・ ウォーズ: コーディングで銀河系を作る - イベント'
        starwars_congrats: 'スター ・ ウォーズ: コーディングで銀河系を作る - おめでとう'
        starwars_blocks_intro: 'スター ・ ウォーズ: コーディングで銀河系を作る - 紹介'
        starwars_blocks_events: 'スター ・ ウォーズ: コーディングで銀河系を作る - イベント'
        starwars_blocks_congrats: 'スター ・ ウォーズ: コーディングで銀河系を作る - おめでとう'
        mc_intro: Minecraft - イントロダクション
        mc_repeat: Minecraft - リピート
        mc_if_statements: Minecraft - IF文(もし...)
        mc_congrats_share: Minecraft - クリア
        mc_congrats_no_share: Minecraft - クリア
        gumball_intro: おかしなガムボール Hour of Code - イントロダクション
        gumball_events: おかしなガムボール Hour of Code - イベント
        gumball_repeat: おかしなガムボール Hour of Code - くりかえし
        iceage_intro: アイス・エイジ Hour of Code - イントロダクション
        iceage_events: 氷河期Hour of Code（コーディングを学ぶ時間） - イベント
        iceage_repeat: 氷河期Hour of Code（コーディングを学ぶ時間） - 繰り返し文
        mc_2016_intro: Minecraft Hour of Code - イントロダクション
        mc_2016_loops: Minecraft Hour of Code - 繰り返し (ループ)
        mc_2016_events: Minecraft Hour of Code - イベント
        mc_2016_spawn: Minecraft Hour of Code - スポーン
        mc_2016_congrats: Minecraft Hour of Code - おめでとう
        applab_hoc_welcome: アプリラボ Hour of Code -ようこそ
        applab_hoc_setproperty: アプリラボ Hour of Code - setProperty
        applab_hoc_onevent: アプリラボ Hour of Code - onEvent
        applab_hoc_designmode: アプリラボ Hour of Code - デザインモード
        applab_hoc_share: アプリラボ Hour of Code - 共有
        mc_2017_agent_intro: Minecraft Hour of Code - エージェント
        mc_2017_repeat: Minecraft Hour of Code - ループを繰り返す
        mc_2017_functions: Minecraft Hour of Code - 関数
        mc_2017_congratulations: Minecraft Hour of Code - おめでとう
        mc_2017_puzzle_1: Minecraft Hour of Code - エージェント
        mc_2017_puzzle_3: Minecraft Hour of Code - ループを繰り返す
        mc_2017_puzzle_8: Minecraft Hour of Code - 関数
        mc_2017_puzzle_12: Minecraft Hour of Code - フリープレイ
        hint_videos_d_11_3_first: 'ヒントビデオ: D.11.3 最初'
        hint_videos_d_11_3_last: 'ヒントビデオ: D.11.3 最後'
        hint_videos_d_11_4_first: 'ヒントビデオ: D.11.4 最初'
        hint_videos_d_11_4_last: 'ヒントビデオ: D.11.4 最後'
        hint_videos_d_11_5_first: 'ヒントビデオ: D.11.5 最初'
        hint_videos_d_11_5_last: 'ヒントビデオ: D.11.5 最後'
        hint_videos_d_11_6_first: 'ヒントビデオ: D.11.6 最初'
        hint_videos_d_11_6_last: 'ヒントビデオ: D.11.6 最後'
        hint_videos_d_11_7_first: 'ヒントビデオ: D.11.7 最初'
        hint_videos_d_11_7_last: 'ヒントビデオ: D.11.7 最後'
        hint_videos_d_11_9_first: 'ヒントビデオ: D.11.9 最初'
        hint_videos_d_11_9_last: 'ヒントビデオ: D.11.9 最後'
        hint_videos_d_11_11_first: 'ヒントビデオ: D.11.11 最初'
        hint_videos_d_11_11_last: 'ヒントビデオ: D.11.11 最後'
        applab_intro_welcome: App Lab - 使用開始
        applab_intro_events: App Lab - インタラクティブにする
        applab_intro_sounds: App Lab - 画像とサウンド
        applab_intro_designmode: App Lab - デザインモード
        applab_intro_share: App Lab - アプリを共有する
        csd_applab_arrays: Introduction to Arrays
        CSF_skinOverview_Harvester: 収穫機
        CSF_bb8_skinOverview_C-F: "BB-8\n"
        CSF_bb8_skinOverview_K-1: "BB-8\n"
        CSF_bb8_loops_C-F: Loops with BB-8
        CSF_harvester_skinOverview_K-1: 収穫機
        CSF_harvester_loops_K1: "Loops in Harvester\n"
        CSF_scrat_loops_K1: アイス・エイジのループ
        CSF_scrat_loops_CF: アイス・エイジのループ
        CSF_if_allskins: Ifブロック
        CSF_ifelse_allskins: If/Elseブロックの使用
        CSF_ifelseifelse_allskins: If/ElseIf/Elseブロックの使用
        CSF_loops_AB: くりかえし
        csd_gamelab_booleans: ブール式
        csd_gamelab_conditional_statements: 条件文
        csd_gamelab_if_else: If/Else 文
        CSF_SpriteLabIntro_CDEF: スプライトラボ
        CSF_Spritelab_MakeSprite_CDEF: スプライトラボでスプライトを作成する方法
        CDEF_Video_SpritesInAction: 実行中のスプライト
        CSF_SpriteLab_SpritesInAction_CDEF: 実行中のスプライト
        CSF_StarWars_ProjectIntro: スターウォーズ プロジェクトの紹介
        mc_2018_intro: 'Minecraft:Voyage Aquatic 紹介'
        MC_2018_loops: 'Minecraft:Voyage Aquatic まで繰り返し'
        mc_2018_conditionals: 'Minecraft:Voyage Aquatic 条件判定文'
        mc_2018_closing: 'Minecraft:Voyage Aquatic おめでとうございます'
        hoc_dance_warmup: ダンスパーティー - ウォームアップ
        hoc_dance_events: ダンスパーティー - イベント
        hoc_dance_properties: ダンスパーティー - プロパティ
        hoc_dance_congrats: ダンスパーティー - パーティーオン！
        c_and_c_great_to_create: 作成してフェアにプレイするのは、素晴らしいことです
        c_and_c_digital_sharing: デジタル共有
        teaching_csf_how_it_works: 'CS入門を教える: コースのしくみ'
        elem_pd_2: 小学校コンピューター サイエンス - PDビデオ2/2
        what_is_cs: コンピューター サイエンスとは？
        repeat_block: 繰り返しブロックの使用
        lesson_planning: レッスンプラン
        opd_closing: 'CS入門を教える: まとめと次のステップ'
        why_unplugged_lessons: '「オフライン」にする'
        writing_first_program: 最初のコンピューター プログラムの作成
        conditionals_with_cards: 実行中のオフラインレッスン - カード付き条件文
        songwriting_with_functions: 実行中のオフラインレッスン - 関数を使った作曲
        what_is_an_event: イベントとは？
        teaching_cs_pair_programming: 'CS入門を教える: ペアプログラミング'
        teaching_problem_solving: 'CS入門を教える: 問題解決を教える'
        csd_applab_designmode: 'CS発見: アプリラボ - デザインモード'
        csd_pair_programming: ペアプログラミング
        csd_gamelab_functions: 関数の呼び出しと定義
        csd_applab_parameters: パラメーター付き関数
        csd_applab_loops: アプリラボのループ
        csd_problem_solving_process: The Problem Solving Process
        CSF_Going_Places_Safely: 私のオンラインネイバーフッド
        CSF_SpriteLab_Intro_v2: スプライトラボの紹介
        CSF_Spritelab_MakeSprite_v2: スプライトの作り方
        CSF_SpriteLab_SpritesInAction_v2: 実行中のスプライト
        csd_debugging: デバッギング
        csd_applab_designmode_short: アプリラボ デザインモード
        csp-pd-welcome: ファミリーへようこそ！
        CSF-Teaching-Problem-Solving: CSF 問題解決を教える
        u5-traversals-get-list-explanation: Code.org [levelbuilder] - パイロットビデオ - データブロック
        u7-libraries-explanation: 'アプリラボ: 独自のブロックを作成する - ライブラリの使用方法'
        how-to-k5-workshops: 'Code.orgのCS入門: 子供はテスト済み、先生は承認済み'
        why-should-teach-unplugged-activities: 'FAQ:「オフライン」アクティビティを教える必要があるのはなぜ？'
        cs-principles-intro-to-objects: 'CS原則: オブジェクト入門'
        oceans_machine_learning: 機械学習
        oceans_training_data: トレーニングデータ
        oceans_societal_implications: 社会的影響
        hoc_dance_congrats_2019: ダンスパーティー2019 - パーティーオン！
        hoc_dance_warmup_2019: ダンスパーティー2019 - ウォームアップ！
        hoc_dance_events_2019: ダンスパーティー2019 - イベント
        hoc_dance_measures_2019: ダンスパーティー2019 - 小節
        hoc_dance_properties_2019: ダンスパーティー2019 - プロパティ
        csd_what_computers_do: コンピューターがすること
        csf_my_online_neighborhood_2020: 私のオンラインネイバーフッド
        csf_follow_the_digital_trail: デジタルトレイルをたどる
        codebreak_e01: 'コードブレーク 1.0: Hill Harperのアルゴリズム'
        codebreak_e02: 'コードブレーク 2.0: Mark CubanとLyndsey Scottのプロトタイプ'
        codebreak_e03: 'コードブレーク 3.0: Ashton KutcherとMia Gil Epnerの暗号化'
        codebreak_e04: 'コードブレーク 4.0: Mike KriegerとAlice Keelerのデジタル情報'
        codebreak_e05: 'コードブレーク 5.0: Bill Gatesのシミュレーションとデータ'
        csd_how_teamwork_works: チームワークのしくみ
        csd_teamwork_and_disagreement: チームワーク - 不一致への対処
        codebreak_e06: 'コードブレイク 6.0: Keegan-Michael ScottとVint Cerfのインターネット'
        codebreak_e07: 'コードブレイク 7.0: Sal KhanとFlo Vaughnの条件文'
        codebreak_e08: 'コードブレーク 8.0: Yara ShahidiとFuzzy Khosrowshahiの変数'
        codebreak_e09: 'コードブレーク 9.0: MacklemoreとScott Forstallのイベント'
        codebreak_e10: 'コードブレーク 10.0: Kat GrahamとKate ParkのAI'
        codebreak_e11: 'コードブレイク 11.0: Susan WojcickiとChina Anne McClainの抽象化'
        codebreak_e12: 'コードブレーク 12.0: Aloe Blacc、Bret TaylorとPaula Mejiaのハードウェア'
        playlab_2021: Playラボの概要
        playlab_2021_reader: Playラボの概要
    callout:
      text:
        drag_blocks: '「移動」ブロックをドラッグして、ほかのブロックの下にくっつけてください。'
        run: '「実行」ボタンをおして、プログラムを動かしてください。'
        watch_again: ここをクリックするともう一度ビデオを見られます
        gray_block_explanation: 灰色のブロックは消すことができません。それでもパズルをとくことができるでしょうか？
        show_code_explanation: 自分で書いたプログラムコードを表示する
        instructions_repeat_explanation: 各パズルの説明はここに再度表示されます
        category_explanation: 前と同じブロックがすべてそろっていますが、種類別になっています
        set_sprite_image: '「キャラをイメージに設定」のブロックを「お話をはじめる」ブロックにつなげて、キャラがお話をはじめます。'
        studio_say_text: アクターの発言をこちらの引用符の間に入力しよう
        jigsaw_click: このブロックをクリックして！
        move_elsa_forward: エルサをまえにすすませるために、"まえにうごく"ブロックをドラッグして"実行時"ブロックにくっつけてください。
        turn_elsa: '"回転"ブロックを使ってエルサの向きを変えてください。ドロップダウンの数字でどれくらいエルサを回転させるかを決めます。'
        replace_questions: ドロップダウンを使って"???"を数字に変えてください
        replace_questions_degree: ドロップダウンを使って"???"を回転するための正しい角度に変えてください
        repeat_blocks: ワークスペースのブロックたちを、「くりかえし」ブロックを使って、かこみます。
        repeat_blocks_1: "(1)このブロックを使います。作業領域にある灰色のブロック達のあたりに置いてください"
        repeat_blocks_2: (2)"繰り返し"ブロックをここに移動させて、灰色のブロック達を内側に置いてください
        snowflake_dropdown: このドロップダウンリストを使って異なる雪の結晶を作ってみましょう!
        degrees_per_side: 360度を辺の数で割って、各角度の大きさを度で求めます。
        set_sides: このブロックを使い、「面」に必要な数をセットして、パズルを完成させます。
        set_length: このブロックを使い、「長さ」を適切な値にセットします。
        which_equation: どの方程式によって、より多くの辺を持つ図形の各辺が短くなりますか？
        get_nectar: 新しい「みつを集める」ブロックを使います。
        actions_category: ツール ボックスが新しくなりました！「アクション」ブロックがここにあります。
        draw_square_hint: 'ヒント: さっきのパズルで作った、正方形のループをつかいます。'
        edit_function: ここをクリックしてあなたの関数を編集します。
        create_function: ここをクリックして「関数」ポップアップを開き、「関数の作成」ボタンをクリックします。
        house_hint: 絵が家に見えなくても、オーケーです。次のパズルでそれを直しましょう。
        edit_draw_square: 関数を編集して、ループを追加するには、このボタンを使います。
        edit_get_nectar: 関数を編集し、はちが みつを集めるために方向を変えるには、このボタンを使います。
        logic_category: '「もし／そうでなければ」ブロックをみつけるには、「ロジック」ポップアップを開きます。'
        length_parameter: '「長さ」パラメーターを使うよう、関数を変更できますか？'
        frozen_diamond_repeat: 繰り返しブロックを使ってこの形を作ってください
        frozen_circle_function_in_circle_turn: 円を描くたびに向きを変えることを忘れないでください。
        frozen_circle_function_with_parameter_circle: '"円を描く"ブロックを使い、そして大きさを変えてください。'
        frozen_snowflake_branch: '"雪の結晶の枝を描く"ブロックを使ってください'
        frozen_create_square: 四角形を描くためにもっとブロックをくっつけてください
        playlab_drag_say: '"言う"ブロックをここにドラッグして"こんにちは"と打って'
        playlab_use_twice: このブロックを二回使って、キャラ番号を変えることを忘れずに
        playlab_move_girl: '"移動 右"ブロックを使ってテニス少女を動かして'
        playlab_play_sound: '「音を鳴らす」ブロックをここに、くっつける'
        playlab_arrow_keys: 実行をクリックしたあとに魔女を動かすのにこれらを使うのを忘れずに
        playlab_add_move: この繰り返しブロックの中に"移動"ブロックを加えて
        playlab_add_score: ここに加点ブロックを加えます
        playlab_add_blocks: ここにあなたのブロックを加えます
        set_variable: ここに番号ブロックをドラッグしてあなたの変数を設定します。
        place_variable: このブロック内に変数をドラッグします。
        bee_for_loop: ここにミツバチが収集する花の蜜の最大数をドラッグします。
        place_counter_variable: このブロック内にカウンター変数をドラッグしてください
        function_editor_draw_square: これは、あなたの関数の定義です。「正方形を描く」ブロックを使用する時に、これらのブロックが毎回実行します。
        change_here: ここに変更します。
        write_draw_square_function: ツールボックスからブロックをドラッグしてここに正方形を描いてください。
        write_draw_triangle_function: ツールボックスからブロックをドラッグしてここに三角形を描いてください。
        edit_add_parameter: 編集をクリックして関数にパラメーターを追加します
        add_and_drag_parameter: ここにパラメーターの名前を書いて、追加をクリックし、関数定義内にドラッグしてください。
        fill_in_actor: キャラ (1、2、および 3) に対応する番号を??? に記入してください
        repeat: コマンドを繰り返すには、ループ内にブロックを配置します。
        if_bee_nectar: '"if"ブロックを使用してミツバチが花の蜜をとるかどうかを決めます。'
        if_else_bee: '「if/else」ブロックをつかって、はなからみつをとったり、はちみつをつくったりしましょう。'
        repeat_full_circle: ゾンビが完璧な円を描くために移動する回数を入力してください。
        place_length_variable: 長さ変数をドラッグして"???"を置きかえてください。
        arrows_move_actor: やじるしをつかって、キャラをうごかそう。
        right_arrow_fireball: 右の矢印を使用して火の玉を撃つ
        name_function: ここで関数の名前を書く
        Infinity_move_right_runbutton: うごかすブロックをここに足してください。
        Infinity_move_directions_callout: どのブロックが上矢印を押したときにベイマックスを上に動かすでしょうか。
        Infinity_move_directions_callout_arrow: これらの矢印を使って操縦してください。
        Infinity_move_collide_callout: このイベントが起きたときに音を鳴らしてください。
        Infinity_repeat_callout: 移動ブロックをこの中に置いてください
        craft_run_button_callout: '「実行」ボタンをおして、プログラムを動かしてください。'
        craft_drag_block_callout: '"前進();"ブロックをもう1つのブロックの下にドラッグします'
        craft_callout_preplaced: 用意されたブロックを使って始めましょう
        craft_inside_repeat: ここにブロックを置いて繰り返しましょう
        craft_callout_preplaced_house: このコードで家を建ててみましょう
        craft_what_is_iron: 鉄を掘りましょう！
        craft_callout_moveforward: 溶岩を調べるコードに前進のコマンドを追加しましょう
