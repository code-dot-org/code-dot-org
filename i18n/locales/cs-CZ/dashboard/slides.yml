cs:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Vítej na své první hodině kódu! Pojďme se ponořit přímo do první ochutnávky programování.
      2:
        image: notes/hoc1_2.jpg
        text: Budeme používat Blockly, vizuální programovací jazyk, kde klikáš a přetahuješ bloky aby jsi napsal kód.
      3:
        image: notes/hoc1_3.jpg
        text: 'Většina kódů je psaná, ale Blockly je vizuální. Každý blok odpovídá jednomu řádku "skutečného" kódu.'
      4:
        image: notes/hoc1_4.jpg
        text: Naučíš se základy počítačových věd, pojmy, které se používají kdekoliv od vytváření aplikací až po řízení vozítka na Marsu.
      5:
        image: notes/hoc1_5.jpg
        text: Program je sada pokynů pro počítač, kterými se řídí.
      6:
        image: notes/hoc1_6.jpg
        text: Cílem tvého prvního programu je dostat ptáčka Angry Bird skrz bludiště k Zelenému Prasátku.
      7:
        image: notes/hoc1_7.jpg
        text: Na levé straně je bludiště, kde bude program probíhat. Instrukce pro každou hádanku budou pod bludištěm.
      8:
        image: notes/hoc1_8.jpg
        text: Prostřední panel obsahuje příkazy pro ptáčka Angry Bird. Právě z nich poskládáš tvůj kód.
      9:
        image: notes/hoc1_9.jpg
        text: Napravo je tvá pracovní plocha, kde budeš skládat program pomocí bloků z panelu. Pro smazání bloku, přetáhni daný blok do koše v rohu.
      10:
        image: notes/hoc1_10.jpg
        text: 'Každý blok je jeden příkaz. Pokud dáš blok "posunout vpřed" na pracovní plochu a stiskneš "Spustit program", ptáček v bludišti se posune o jedno políčko směrem, kam je právě natočen.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Pokud spustíš program a chceš ho opravit a zkusit znovu, klikni na tlačítko "Obnovit".'
      13:
        image: notes/hoc1_13.jpg
        text: Pojďme dostat ty prasátka!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Ahoj, jsem JR. Každý tým automobilových závodníků potřebuje programátory, aby vyhrál. Analyzují data z auta, aby bylo příště rychlejší.
      2:
        image: notes/stage5_2.jpg
        text: V těchto hádankách budeš malíř, který za sebou kreslí čáru kamkoliv jde.
      3:
        image: notes/stage5_3.jpg
        text: 'Tento blok říká "posunout vpřed" o 100 pixelů. Pixel je jedna malá tečka na tvojí obrazovce.'
      4:
        image: notes/stage5_4.jpg
        text: 'Tento blok říká "otočit vpravo o 90 stupňů". To otočí vašeho malíře stejně jako bloky "otočit" v hádankách s bludištěm.'
      5:
        image: notes/stage5_5.jpg
        text: Klikni na šipku v jednom z těchto bloků pro změnu počtu pohybu dopředu či otočení malíře. Vyhraj si, aby ses s těmito novými bloky seznámil.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Ahoj, já jsem Paola! V těchto hádankách jsi farmářka, která chce zarovnat své pole, aby na něm mohla začít pěstovat rostliny.
      2:
        image: notes/stage9_2.jpg
        text: Musíš jí pomoci odstranit všechny hromádky hlíny a vyplnit všechny díry.
      3:
        image: notes/stage9_3.jpg
        text: Nové bloky odstraní 1 lopatu hlíny z hromádky a vyplní díru 1 lopatou hlíny.
      4:
        image: notes/stage9_4.jpg
        text: Hromádky a díry mají různé velikosti, takže musíš farmářce říct, kolik lopat má použít.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Ahoj, jmenuju se Katie! Jedna z nejlepších věcí na počítačové vědě je, že počítač může být interaktivní.
      2:
        image: notes/flappy02.jpg
        text: Kdykoliv někdo klikne nebo ťukne nebo napíše něco na počítači či mobilu, vytvoří to UDÁLOST. Když je dojde k UDÁLOSTI, je tam kód, který rozhodne, co dělat.
      3:
        image: notes/flappy03.jpg
        text: 'Například můžeš mít MANIPULÁTOR UDÁLOSTÍ, který říká "když je myš stisknutá, přehraj zvuk" '
      4:
        image: notes/flappy04.jpg
        text: Už jsi někdy slyšel o hře FlappyBird? S pomocí manipulátoru událostí tě naučíme naprogramovat tvou vlastní verzi FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Kód, který píšeš zahranuje přetahování a pouštění bloků, které předtavují příkazy pro počítač. Pod povrchem každého takového bloku je skrytý skutečný kód.
      6:
        image: notes/flappy06.jpg
        text: 'Pokud se podíváš na pracovní plochu, uvidíš pár zelených bloků, které tam jsou pro tebe - jsou to "manipulátory událsotí" '
      7:
        image: notes/flappy07.jpg
        text: 'Pokud chceš, aby ptáček ZAMÁVAL, když klikneš myší, musíš spojit blok "ZAMÁVAT" s příslušným mnipulátorem událostí a potom, kdykoliv ve své hře klikneš myší, ptáček zamává.'
      8:
        image: notes/flappy08.jpg
        text: V každé části této aktivity si ukážeme nové typy událostí jako zelené bloky na pracovní ploše, a že se můžeš rohodnout přidat příslušné bloky, jako reakci na tyto události.
      9:
        image: notes/flappy09.jpg
        text: 'Když vidíš šipku ukazující dlů, jako je tahle, namená to, že můžeš změnit nastavení - například jaký zvuk přehrát, když se Flappy dotkne země.'
      10:
        image: notes/flappy10.jpg
        text: V poslední části si budeš moct vytvořit vlasntí hru asdílet ji se svými přáteli. Užij si to!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Ahoj, jsem Mark! Seznámím tě se smyčkami. Pomocí smyček můžeš říct počítači, aby opakoval sadu akcí znovu a znovu, tisíckrát či klidně milionkrát.
      2:
        image: notes/hoc2_2.jpg
        text: V této hádance chceme, aby se ptáček posunul vpřed o 5 políček a dostal se k prasátku.
      3:
        image: notes/hoc2_3.jpg
        text: 'Můžeme použít nový blok "opakovat", aby nám trošku vypomohl.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Místo aby si vytáhl 5 bloků "posunout vpřed"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Můžeme vložit blok "posunout vpřed" do bloku "opakovat" a vepsat to tohoto bloku číslo, kolikrát má opakování proběhnout.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Tohle je taky důležité: můžeš do bloku "opakovat" dát i více než jeden příkaz.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Užij si používání nového bloku "opakovat"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Čau, jsem Chris. Než jsem se přidal k Miami Heat, studoval jsem na Georgia Tech informatiku. Pojďme spolu zkusit nový blok "opakovat dokud".'
      2:
        image: notes/hoc3_2.jpg
        text: Co kdybychom nevěděli, jak daleko se ptáček musí posunout, aby se dostal k prasátku?
      3:
        image: notes/hoc3_3.jpg
        text: 'Pokud vložíme blok "posunout vpřed" do bloku "opakovat dokud", ptáček se bude posouvat vpřed až do chvíle, DOKUD nenarazí na prasátko (nebo do zdi).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Toto je důležité: stejně jako před tím, můžeme vložit několik bloků dovnitř bloku "opakovat dokud" a všechny tyto bloky se budou opakovat.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Ahoj, já jsem Bil. Pojďme se naučit nový základní pojem: příkazy "Pokud". Díky těmto příkazům počítač dělá svá rozhodnutí.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Sám používáš příkaz "Pokud" každý den. Ještě než jdeš ráno ven, řekneš si: "POKUD venku prší, budu potřebovat pláštěnku."'
      3:
        image: notes/hoc4_3.jpg
        text: Můžeme říct zombie, aby zjistila, zda je vlevo cesta a POKUD nalezne cestu doleva, můžeme ji přinutit se tímto směrem otočit.
      4:
        image: notes/hoc4_4.jpg
        text: 'Abychom napsali takový kód, vytáhneme náš blok "pokud" a vložíme do něj blok "otočit vlevo".'
      5:
        image: notes/hoc4_5.jpg
        text: 'Teď, když nad něj vložíme blok "posunout vpřed" a blok "opakovat" kolem všeho, pokaždé, když se zombie posune, zkontroluje, jestli je vlevo cesta a zabočí. Příkaz "opakovat" je důležitý pro to, abychom kontrolovali cestu pro zabočení v každém kroku.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Příkazy "pokud" jsou v programování opravdu důležité. Jeden z prvních programů, který jsem napsal byly piškvorky a v něm byl příkaz "pokud", který říkal: POKUD to vypadá, že protivník vyhraje, zablokuj mu čtvereček, který by mu umožnil vyhrát.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Bav se při používání bloků "pokud"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Ahoj, já jsem Brina, inženýrka Instagramu. Funkce jsou určité řádky kódu, které chceš používat znovu a znovu, takže místo aby jsi tento kód psal pokaždé, můžeš použít pouze jeden blok.
      2:
        image: notes/stage13_2.jpg
        text: Naučíme se definovat funkce. Definice funkcí mají v rohu hvězdu. Název funkce je napsán na horním řádku.
      3:
        image: notes/stage13_3.jpg
        text: 'Bloky, které jdou dovnitř definice, nám říkají, co dělá. Takže tato definice funkce se jmenuje "vyplnit 5" a skládá se z bloku "opakovat" a bloku "vyplnit".'
      4:
        image: notes/stage13_4.jpg
        text: 'Definice už je na pracovní ploše, ale naše farmářka nespustí funkci, dokud nepřetáhneme funkční blok "vyplnit 5" z kategorie funkcí.'
      5:
        image: notes/stage13_5.jpg
        text: Pojďme zažít trochu srandy s funkcemi!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Čau, já jsem Makinde! Pojďme si říct něco o bloku "dokud".'
      2:
        image: notes/stage9_6.jpg
        text: 'Blok "dokud" bude provádět cokoliv umístíš dovnitř, DOKUD bude prohlášení ve vrchní části bloku PRAVDA.'
      3:
        image: notes/stage9_7.jpg
        text: Například, pokud farmářka stojí na hromádce, bude neustále odstraňovat 1 lopatu, DOKUD pod ní stále ještě nějaká hromádka je.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Ahoj, já jsem Trina a pracuji pro Pixar. Pracovala jsem na spoustě filmů včetně Shreka.
      2:
        image: notes/stage11_2.jpg
        text: 'Toto je naše nová smyčka "čítač". Bude provádět akce znovu a znovu a pokaždé můžete akci trošku pozměnit.'
      3:
        image: notes/stage11_3.jpg
        text: 'V tomto případě, naše smyčka "čítač" říká, že budeme "počítat s čítačem od 50 do 90 po 10" a uvnitř něj máme náš blok "nakreslit čtverec". Přetáhni blok "čítač" ze sekce "Proměnné" na místo "délka".'
      4:
        image: notes/stage11_4.jpg
        text: To znamená, že náš malíř bude kreslit čtverec, který má stranu o délce 50 pixelů, poté k tomu přidá 10 a nakreslí čtverec se stranou o délce 60 pixelů. Pak bude pokaždé přidávat 10 pixelů a kreslit čtverce dokud nedosáhne 90 pixelů. Takže budeme mít čtverce o velikosti 50, 60, 70, 80 a 90 pixelů.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Ahoj, já jsem Janete a jsem návrhářka v Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Co když chceme nakreslit spoustu trojúhelníků, každý s jinou délkou strany?
      3:
        image: notes/stage15_3.jpg
        text: Mohli bychom ten kód napsat ručně, nebo můžeme použít funkci s parametry.
      4:
        image: notes/stage15_4.jpg
        text: 'Abychom to udělali, klikni na modrou hvězdu u definice funkce "nakreslit trojúhelník". Pak přetáhni "název vstupu" do bloku "vstup".'
      5:
        image: notes/stage15_5.jpg
        text: 'Pak, pokud napíšeš "délka" v místě, kde je nyní "x" a stiskneš "Enter", vytvoříš ve své funkci vstup pro délku.'
      6:
        image: notes/stage15_6.jpg
        text: 'Poté klikni na hvězdu. Nyní musíš kliknout na kategorii proměnné a přetáhnout blok "délka" do bloku "posunout vpřed" své definice funkce. A stáhni pryč starý číselný blok.'
      7:
        image: notes/stage15_7.jpg
        text: 'Chceš-li použít svou funkci s parametry, klikni na kategorii funkce a vytáhni svoji funkci "nakreslit trojúhelník s délkou".'
      8:
        image: notes/stage15_8.jpg
        text: Teď můžeš použít matematický blok k zadání různých čísel, abys nakreslil trojúhelníky různých velikostí.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Blahopřejeme! S poslední hádankou, kterou jsi vyřešil, jsi právě napsal program, který dokáže JAKÉMUKOLIV robotovi říct, jak najít cestu skrz nerozvětvené bludiště nebo skrz tunel libovolné délky, ať už je to zombie, ptáček, vozítko na Marsu nebo dokonce samořídící auto.
      2:
        image: notes/hoc6_2.jpg
        text: Základní pojmy, které jsi použil jsou srdcem každého programu nebo aplikace, kterou kdy spustíš. Naučili jsme se opakovací smyčky, příkazy opakovat dokud, příkazy pokud a příkazy pokud-jinak.
      3:
        image: notes/hoc6_3.jpg
        text: Jestli se ti tvá první hodina kódu líbila, navštiv stránku code.org pro další výuku programování! Jakmile dokončíš náš kurz 20 hodin, budeš ovládat základy programování a můžeš se začít učit psát aplikace pro mobily, instrukce pro roboty, hry...na co si jen vzpomeneš.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technika mění vše, co děláme a nezáleží na tom, jestli jsi mladý nebo starý: programování je zábava, je tvořivé a každý se jej může naučit!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Zobrazení poznámek teprve bude!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
