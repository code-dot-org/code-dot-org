pt:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bem-vindo à tua primeira hora de código! Vamos mergulhar logo no teu primeiro contacto com a programação.
      2:
        image: notes/hoc1_2.jpg
        text: Estaremos a usar o Blockly, uma linguagem de programação visual onde podes arrastar e soltar blocos para escrever código.
      3:
        image: notes/hoc1_3.jpg
        text: 'Grande parte do código é digitado, mas o Blockly é visual. Cada bloco corresponde a uma linha de código "real".'
      4:
        image: notes/hoc1_4.jpg
        text: Vais aprender os fundamentos da ciência da computação, conceitos que são usados para fazer aplicações para telemóveis ou até para controlar o robô que está em Marte.
      5:
        image: notes/hoc1_5.jpg
        text: Um programa é um conjunto de instruções para o teu computador seguir.
      6:
        image: notes/hoc1_6.jpg
        text: O objetivo do teu primeiro programa é conseguir que o Angry Bird atravesse um labirinto para chegar ao Porco Verde.
      7:
        image: notes/hoc1_7.jpg
        text: O lado esquerdo é o labirinto onde o programa é executado. As instruções para cada quebra-cabeça estão abaixo do labirinto.
      8:
        image: notes/hoc1_8.jpg
        text: A caixa de ferramentas do meio possui os comandos para o Angry Bird. Usarás estas para construir o teu código.
      9:
        image: notes/hoc1_9.jpg
        text: À direita está o teu espaço de trabalho, que é a área para onde irás arrastar os blocos da caixa de ferramentas que vais usar para criares o teu programa. Para apagares um bloco, arrasta-o para o lixo que aparece no canto.
      10:
        image: notes/hoc1_10.jpg
        text: 'Cada bloco é uma instrução. Se arrastares o bloco "Avançar" para a tua área de trabalho e pressionares "Executar programa", o pássaro move-se um espaço no labirinto.'
      11:
        image: notes/hoc1_11.jpg
        text: Para fazer mais do que uma ação, você pode arrastar vários blocos para sua área de trabalho e conectá-los uns aos outros. O passarinho obedecerá os comandos de cima para baixo.
      12:
        image: notes/hoc1_12.jpg
        text: 'Se corres um programa e depois quiseres corrigi-lo e tentar novamente, pressiona o botão "Redefinir".'
      13:
        image: notes/hoc1_13.jpg
        text: Vamos apanhar esses porcos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Olá! Eu sou o JR. Qualquer equipa de carros de corrida precisa de um programador de computadores para vencer. Eles analisam os dados do veículo para o tornarem mais rápido.
      2:
        image: notes/stage5_2.jpg
        text: Nesses desafios, você vai ser um artista que desenha por todo lugar que passa.
      3:
        image: notes/stage5_3.jpg
        text: 'Este bloco diz "avançar 100 pixeis." Os pixeis são apenas pequenos pontos no teu ecrã.'
      4:
        image: notes/stage5_4.jpg
        text: 'Este bloco diz "virar à direita 90 graus." Isto fará com que o teu artista se vire tanto quanto os blocos se virarem no labirinto.'
      5:
        image: notes/stage5_5.jpg
        text: Carrega na seta, sobre qualquer destes blocos, para mudares a quantidade que o artista vira ou avança. Ambienta-te com estes passos, de forma a familiarizares-te com estes novos blocos.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Olá! Eu sou a Paola! Nestes puzzles tu serás um agricultor que tem de chegar à sua quinta, completamente plana, para começar a cultivar algo.
      2:
        image: notes/stage9_2.jpg
        text: Você precisa ajudá-la a remover todos os montes de terra e preencher todos os buracos.
      3:
        image: notes/stage9_3.jpg
        text: Os novos blocos removem 1 pá de terra de um monte, e preenchem o buraco com 1 pá de terra.
      4:
        image: notes/stage9_4.jpg
        text: Os montes e buracos têm tamanhos diferentes, pelo que terás de dizer ao agricultor quantas pás serão necessárias usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Oi, eu sou Katie! Uma das coisas mais emocionantes sobre ciência da computação é que um programa de computador pode ser interativo.
      2:
        image: notes/flappy02.jpg
        text: Sempre que alguém clica, digita, ou toca na tela de um celular, é gerado um EVENTO, e existe alguns códigos que decidem o que fazer quando um EVENTO ocorre.
      3:
        image: notes/flappy03.jpg
        text: 'Por exemplo, você poderia ter um MANIPULADOR DE EVENTOS que diz "quando o mouse for clicado, toque um som" '
      4:
        image: notes/flappy04.jpg
        text: Alguma vez ouviste falar do jogo FlappyBird? Se utilizarmos manipuladores de eventos, podemos programar a nossa própria versão do FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: O código que você vai escrever consiste em arrastar e soltar blocos que representam os comandos para o computador. Na verdade, cada um desses blocos é representado pelo código real.
      6:
        image: notes/flappy06.jpg
        text: 'Se você der uma olhada na área de trabalho, existem alguns blocos verdes que são preenchidos para você - esses são os "manipuladores de evento" '
      7:
        image: notes/flappy07.jpg
        text: 'Se você quer que o passarinho VOE quando você CLICAR, você pode anexar o bloco "FLAP" ao manipulador de evento apropriado. Assim, sempre que você clicar, o passarinho vai voar.'
      8:
        image: notes/flappy08.jpg
        text: Em cada desafio dessa atividade, vamos introduzir novos tipos de eventos, como os blocos verdes na área de trabalho, e você pode decidir que blocos são apropriados para adicionar em resposta a esses eventos.
      9:
        image: notes/flappy09.jpg
        text: Quando você observar uma seta suspensa como essa, significa que você pode alterar as configurações, como o som a ser reproduzido quando o pássaro bater no chão.
      10:
        image: notes/flappy10.jpg
        text: No desafio final, você vai poder criar seu próprio jogo e compartilhar com seus amigos. Divirta-se!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Olá, sou o Mark! Vamos aprender sobre ciclos. Usando ciclos podes dizer um computador para repetir qualquer conjunto de ações repetidamente, milhares ou mesmo milhões de vezes.
      2:
        image: notes/hoc2_2.jpg
        text: Neste puzzle, queremos que o pássaro se mova para a frente 5 espaços para chegar ao porco.
      3:
        image: notes/hoc2_3.jpg
        text: 'Podemos usar o novo bloco "repetir" para nos ajudar.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Em vez de arrastares 5 blocos "avançar" ...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Podemos colocar o bloco "avançar" dentro do bloco "repetir" e escrever um número no bloco para definir quantas vezes repetir.'
      6:
        image: notes/hoc2_6.jpg
        text: 'E isto é importante: podes colocar mais do que um comando dentro de um bloco "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: 'Diverte-te a usar o teu novo bloco "repetir"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Olá, eu sou o Chris. Antes de entrar para os Miami Heat, estive na escola Georgia Tech a estudar ciência da computação. Vamos tentar o nosso novo bloco, o bloco "repeat até".'
      2:
        image: notes/hoc3_2.jpg
        text: E se nós não soubéssemos quão longe o pássaro teve que se mover para chegar ao porco?
      3:
        image: notes/hoc3_3.jpg
        text: 'Se pusermos um bloco "avançar" dentro do bloco "repetir até", o pássaro irá mover-se em frente ATÉ que chegue ao porco (ou choque contra o muro).'
      4:
        image: notes/hoc3_4.jpg
        text: 'E isto é importante: tal como anteriormente, podemos por múltiplos blocos dentro de um bloco "repetir até", e todos eles serão repetidos.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Olá, eu sou o Bill! Vamos aprender um novo conceito fundamental: instrução "se". É assim que os computadores tomam decisões.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Usas instruções "se" todos os dias. Antes de saíres de casa todas as manhãs, tu dizes  SE estiver a chover lá fora, vou precisar de levar o meu casaco.'
      3:
        image: notes/hoc4_3.jpg
        text: Podemos dizer ao zombie para verificar SE há algum caminho à esquerda, e se ele encontrar o caminho à esquerda, podemos fazer com que ele vire nessa direção.
      4:
        image: notes/hoc4_4.jpg
        text: 'Para escrever código para este, vamos arrastar o nosso bloco "se" e inserimos dentro dele um bloco "virar esquerda".'
      5:
        image: notes/hoc4_5.jpg
        text: 'Agora, se pusermos um bloco "avançar" acima dele e um bloco "repetir" a envolver tudo, cada vez que o zombie se mova, irá verificar se existe algum caminho à esquerda e vira. O comando "repetir" é fundamental para verificar, a cada passo, se existe uma viragem.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Instruções se são muito importantes nas ciências da computação. Um dos primeiros programas que escrevi foi o jogo do galo, e há uma instrução que diz: SE a outra pessoa estiver perto de ganhar, bloquear o espaço que a permite ganhar.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Diverte-te usando o bloco "se"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Olá, meu nome é Saloni. A ciência da computação me ajuda a resolver problemas das áreas da saúde e medicina. Vamos aprender sobre o bloco "se-senão". Ele parece o bloco "se", mas com uma parte extra no final que diz "senão".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o zumbi vai escolher entre 2 opções. SE existir um caminho à frente, o zumbi vai avançar e, CASO CONTRÁRIO (não há um caminho em frente), o zumbi vai virar à esquerda.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Assim como o bloco "se", nós podemos colocar blocos "se-senão" dentro de blocos "repita", assim o zumbi continuará se movendo, e o bloco "se-senão" continuará verificando se é possível virar para algum lugar.'
      4:
        image: notes/hoc5_4.jpg
        text: Agora, coloque os zumbis em seus devidos lugares!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Um comando se-senão é uma decisão entre duas opções. Vamos ver como podemos usar um comando se-senão com nosso amigo Scrat, o esquilo.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Este bloco parece igual ao bloco "se", mas há uma parte extra no final que diz "senão". Se eu colocar um bloco "avance" na instrução "faça", e um bloco "vire à esquerda" na instrução "senão", significa que o esquilo Scrat vai avançar se houver um caminho à frente. Se não houver caminho à frente, o Scrat vai virar à esquerda.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Significa tomar uma decisão e fazer uma das duas ações com base nessa decisão. E, assim como os blocos "se", você pode colocar blocos "se-senão" dentro de blocos "repita".'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Agora vamos ajudar Scrat, o esquilo, a pegar essa bolota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Oi, eu sou a Brina, uma engenheira do Instagram. Uma função é um conjunto de linhas de código que você deseja usar várias vezes. Então, ao invés de escrever esse código toda vez, você pode usar apenas um bloco.
      2:
        image: notes/stage13_2.jpg
        text: Vamos aprender a definir funções. A definição de funções tem uma estrela na ponta. O nome de uma função é escrito logo na primeira linha.
      3:
        image: notes/stage13_3.jpg
        text: 'Os blocos que vão dentro da definição nos dizem o que ela faz. Então, essa definição de função se chama "preencha 5", e é composta por um bloco "repita" e um bloco "preencha".'
      4:
        image: notes/stage13_4.jpg
        text: 'A definição está na área de trabalho, mas a fazendeira não vai executar a função até que arrastemos o bloco "preencha 5" para fora da categoria funções.'
      5:
        image: notes/stage13_5.jpg
        text: 'Vamos agir em "função" da diversão! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Oi, eu sou o Makinde! Vamos aprender sobre o bloco "enquanto". '
      2:
        image: notes/stage9_6.jpg
        text: 'O bloco "enquanto" vai fazer tudo o que você colocar no seu interior, DESDE QUE a declaração na parte superior seja VERDADEIRA.'
      3:
        image: notes/stage9_7.jpg
        text: Por exemplo, se a fazendeira está em um monte de terra, ela continuará a remover 1 pá ENQUANTO houver terra debaixo dela.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Oi, eu sou a Trina, e trabalho para a Pixar. Já trabalhei em um monte de filmes, incluindo o Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Este é nosso novo laço "contador". Ele executará ações repetidamente, e você pode fazer com que as ações mudem aos poucos.'
      3:
        image: notes/stage11_3.jpg
        text: 'Neste exemplo, nosso laço "contador" diz "conte de 50 até 90, indo de 10 em 10" e, dentro dele, temos o nosso bloco "desenhe um quadrado". Arraste o bloco "contador" da seção "Variáveis" para local que indica "comprimento".'
      4:
        image: notes/stage11_4.jpg
        text: Isso significa que nosso artista vai desenhar um quadrado com lados de 50 pixels de comprimento, e então vai acrescentar 10 e desenhar um quadrado com lados de 60 pixels de comprimento. Ele vai continuar adicionando 10 e desenhando quadrados até que ele atinja 90 pixels. Assim, vamos ter quadrados de 50, 60, 70, 80 e 90 pixels.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Oi, eu sou a Janete, e eu sou uma engenheira da Zynga.
      2:
        image: notes/stage15_2.jpg
        text: E se quisermos desenhar um monte de triângulos de tamanhos diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escrever todo o código à mão, ou podemos usar uma função com parâmetros.
      4:
        image: notes/stage15_4.jpg
        text: 'Para fazer isso, clique na estrela azul sobre a definição da função "desenhe um triângulo". Arraste o "nome de entrada" para o bloco "entrada".'
      5:
        image: notes/stage15_5.jpg
        text: 'Então, se você escrever "comprimento" no local onde há um "x" e apertar "Enter", você vai criar um comprimento de entrada para sua função.'
      6:
        image: notes/stage15_6.jpg
        text: 'Então, clique na estrela. Agora, você vai clicar na categoria de variáveis e arrastar o bloco "comprimento" para dentro do bloco "avance" da sua definição da função. E arraste para fora o antigo bloco de número.'
      7:
        image: notes/stage15_7.jpg
        text: 'Para usar sua função com parâmetros, clique na categoria funções e arraste para fora a função "desenhe um triângulo com comprimento".'
      8:
        image: notes/stage15_8.jpg
        text: Agora você pode usar o bloco de matemática para entrar com números diferentes e desenhar triângulos de tamanhos diferentes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Parabéns! Com o último enigma que resolveste, acabaste de escrever código que pode dizer a qualquer robô como encontrar o seu caminho através de um labirinto de não-ramificação ou túnel de qualquer comprimento, sendo um zombie, um pássaro, uma missão a Marte ou até mesmo um carro de auto-condução.
      2:
        image: notes/hoc6_2.jpg
        text: 'Os conceitos básicos que usaste são o coração de todos os programas ou apps que irás utilizar.  Aprendemos sobre ciclos de repetição, declarações repita até, declarações se e se-então.'
      3:
        image: notes/hoc6_3.jpg
        text: Se gostaste da tua primeira hora de código, visita code.org e continua a tua educação em ciências da computação! Assim que completares as 20 horas de curso, irás dominar as bases da programação e poderás começar a escrever aplicações para telemóveis, instruções para robôs, jogos, etc.
      4:
        image: notes/hoc6_4.jpg
        text: 'A tecnologia está a mudar tudo o que fazemos e não importa se és novo ou menos novo: a programação é divertida, é criativa e toda a gente pode aprender!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Mostrar notas vem em breve!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Olá, meu nome é Lyndsey. Eu sou modelo, atriz e também escrevo meus próprios aplicativos. Vamos usar a programação para explorar a magia e a beleza do gelo com Anna e Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Você vai criar flocos de neve e padrões enquanto esquia, e um país das maravilhas congelante para compartilhar com seus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: Na próxima hora, você vai aprender os conceitos básicos da programação. A programação tradicional é escrita, mas nós usaremos Blockly, blocos visuais que você pode arrastar e soltar para escrever programas. Também é assim que estudantes universitários aprendem o básico. E por trás desses blocos, você está criando códigos.
      4:
        image: notes/frozen1_4.jpg
        text: Um programa é um conjunto de instruções que diz a um computador o que ele deve fazer. Vamos construir um código, ou programa, que ajudará Elsa a criar uma reta simples. Mais adiante, nós vamos usar isso para criar padrões mais complexos.
      5:
        image: notes/frozen1_5.jpg
        text: Sua tela é dividida em três partes principais. À esquerda você tem a superfície de gelo onde vai executar seu programa. As instruções de cada nível estão escritas logo abaixo da superfície.
      6:
        image: notes/frozen1_6.jpg
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma ação que pode ser realizada por Elsa e Anna.
      7:
        image: notes/frozen1_7.jpg
        text: 'O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa. Para se mover pela superfície de gelo, você usará o bloco "avance".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Aqui, o bloco "avance" diz: "avance por 100 pixels". Quando clicamos em "Executar", o que acontece? Elsa se move por uma certa distância na tela, 100 pixels, na verdade! Os pixels são, basicamente, minúsculos quadrados na tela do seu computador.'
      9:
        image: notes/frozen1_9.jpg
        text: 'O outro bloco que temos neste desafio diz "vire à direita 90 graus". Quando usamos o bloco "vire à direita", Elsa faz uma determinada curva. Você pode brincar com o quanto deseja que Elsa vire. O ângulo é medido a partir do caminho à frente de Elsa. Então, este é um giro de 90 graus. E este é um giro de 120 graus.'
      10:
        image: notes/frozen1_10.jpg
        text: Lembre-se de que é possível mudar o número de pixels e graus, clicando nas setas ao lado deles.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Olá, eu sou a Paola! Os computadores são realmente muito bons em repetir ações. Você pode contar até 10, 20 ou até 100, mas um computador pode contar até um bilhão ou um trilhão sem se cansar, e ele só levará alguns segundos. Seja contar, desenhar ou qualquer outra atividade, os computadores podem repetir ações centenas ou até bilhões de vezes.
      2:
        image: notes/frozen2_2.jpg
        text: 'Na programação, isto chama-se um ciclo. Um ciclo é uma repetição contínua de um determinado código. No próximo desafio, o teu objetivo é ajudar a Anna a criar um quadrado com o bloco "repetir".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Todos os blocos de código que colocar dentro do bloco "repita" serão repetidos em sequência, quantas vezes você quiser.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Para desenhar um quadrado, você pode usar os blocos "avance" e "vire à direita" quatro vezes. Mas o modo mais fácil de fazer isso é dizer ao computador "avance" e "vire à direita 90 graus" uma vez e, depois, fazer ele repetir este par de ações quatro vezes. Para isso, você precisa colocar os blocos "avance" e "vire à direita" dentro de um bloco "repita".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Lembre-se de que é possível mudar o valor no bloco "repita" para qualquer número, e ele repetirá o que está dentro do bloco de acordo com o número que você escolher.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Olá, eu sou Chris Bosh. Sou jogador de basquete profissional, e já programei quando estava na faculdade.
      2:
        image: notes/frozen3_2.jpg
        text: Um dos conceitos mais importantes da ciência da computação é como definir novos comandos. A maioria das linguagens de computador tem apenas 100 palavras ou comandos. A arte e a magia estão, então, em definir suas próprias palavras novas a partir do básico.
      3:
        image: notes/frozen3_3.jpg
        text: Depois de ensinar a um computador como fazer uma ação uma vez usando esta sequência de comandos, você pode criar o nome que quiser para essa ação, assim será mais fácil repeti-la depois. Ao definir e nomear seu próprio comando, você estará criando uma função.
      4:
        image: notes/frozen3_4.jpg
        text: Olá, eu sou Jess. Na programação com blocos, use funções quando houver um conjunto de ações que você quer repetir várias vezes. Por exemplo, você escreveu um código para criar um quadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Você pode definir isso como uma função chamada "crie um quadrado". '
      6:
        image: notes/frozen3_6.jpg
        text: Agora você tem um novo bloco que pode ser usado várias vezes para criar diversos quadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Inúmeras formas simples podem ser usadas para criar padrões mais complexos. No próximo desafio, o código que você acabou de escrever para fazer um círculo estará disponível como uma nova função que pode fazer círculos de diferentes tamanhos. Você pode usá-la para ajudar Elsa a criar padrões belos e intrincados na neve?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade.
      2:
        image: notes/playlab_2.png
        text: 'Há os blocos "quando a seta estiver pressionada" e "mova o personagem". Você pode usar esses blocos juntos para mover os personagens usando as teclas de direção.'
      3:
        image: notes/playlab_3.png
        text: E há alguns blocos que fazem outras ações quando os personagens trombam ou são clicados. Dê uma olhada e divirta-se!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nós vamos criar jogos usando o Laboratório. Os bons jogos têm histórias, e toda história tem personagens. Nós vamos aprender como criar nossos personagens, como bruxas, alienígenas e animais que falam, andam e interagem uns com os outros. Ao final deste tutorial, você poderá criar um jogo a partir do zero e compartilhá-lo com seus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: Sua tela está dividida em três partes principais. À esquerda está o espaço do jogo, onde seu programa será executado. As instruções para cada nível estão escritas abaixo.
      3:
        image: notes/playlab_intro_3.png
        text: A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma parte do código. O espaço em branco à direita é chamado de área de trabalho e é onde criaremos nosso programa.
      4:
        image: notes/playlab_intro_4.png
        text: 'Para começar, você terá que conectar seus blocos ao bloco laranja "quando executar". É possível conectar diversos blocos uns aos outros, arrastando-os até ver a linha amarela e, então, eles se encaixam.'
      5:
        image: notes/playlab_intro_5.png
        text: 'Neste primeiro desafio, nosso personagem é um pinguim, e nós o faremos dizer "Olá!", arrastando o bloco "diga", conectando-o ao bloco "quando executar" e digitando "Olá". Nós também podemos fazer com que o pinguim se mova usando os blocos "mova à direita" e "mova à esquerda". Depois que seus blocos estiverem no lugar certo, aperte o botão "executar" para ver o que você programou.'
      6:
        image: notes/playlab_intro_6.png
        text: Comece agora mesmo! Ao final, você conseguirá criar seu próprio jogo, com todos os tipos de jogadores que poderão interagir, ficar felizes ou tristes, marcar pontos ou lançar bolas de fogo, ou até mesmo fazer desaparecer uns aos outros. Depende da sua imaginação e do jogo que você quer criar.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 'Agora, vamos aprender um pouco sobre algo que os programadores de jogos usam todos os dias: os eventos. Um evento diz ao seu programa que ele deve ouvir quando algo acontece. Quando tal coisa acontece, ele realiza uma ação.'
      2:
        image: notes/playlab_events_2.png
        text: 'Alguns exemplos de eventos são: ouvir o clique do rato, pressionar uma seta no teclado ou tocar no ecrã.'
      3:
        image: notes/playlab_events_2.png
        text: 'Agora, vamos fazer o robô espacial cumprimentar os terráqueos quando um jogador clicar nele. Nós usaremos o bloco "quando clicado" e conectaremos o bloco "diga" a ele. Quando o jogador clicar no robô espacial, tudo que estiver conectado ao bloco de evento "quando clicado" será realizado. O que seu alienígena diz?'
      4:
        image: notes/playlab_events_4.png
        text: 'Há também os blocos "quando a seta estiver pressionada". Se você conectar os blocos "mova" a eles, será possível começar a mover seus personagens para cima, para baixo, para esquerda e para a direita. Pouco a pouco, seu jogo está ficando cada vez mais interativo.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Este é o bloco "repita infinitamente". Tudo que estiver contido neste bloco acontecerá repetidamente no jogo.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Se quisermos que um personagem faça algo repetidamente, sem nenhuma ação do jogador, colocaremos esses blocos dentro do bloco "repita infinitamente".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Neste desafio, nosso objetivo é ajudar o mago a proteger as fronteiras do reino, andando da esquerda para a direita e vice-versa, continuamente. Aprender como repetir ações de comandos vai economizar muito do seu tempo no futuro, quando você for criar seu próprio jogo.
