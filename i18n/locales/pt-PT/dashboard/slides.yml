pt:
  slides:
    maze_intro:
      1:
        image: 'notes/hoc1_1.jpg'
        text: "Bem-vindo à tua primeira hora de código! Vamos mergulhar logo no teu primeiro contacto com a programação."
      2:
        image: 'notes/hoc1_2.jpg'
        text: "Estaremos a usar o Blockly, uma linguagem de programação visual onde podes arrastar e soltar blocos para escrever código."
      3:
        image: 'notes/hoc1_3.jpg'
        text: "Grande parte do código é digitado, mas o Blockly é visual. Cada bloco corresponde a uma linha de código \"real\"."
      4:
        image: 'notes/hoc1_4.jpg'
        text: "Vais aprender os fundamentos da ciência da computação, conceitos que são usados para fazer aplicações para telemóveis ou até para controlar o robô que está em Marte."
      5:
        image: 'notes/hoc1_5.jpg'
        text: "Um programa é um conjunto de instruções para o teu computador seguir."
      6:
        image: 'notes/hoc1_6.jpg'
        text: "O objetivo do teu primeiro programa é conseguir que o Angry Bird atravesse um labirinto para chegar ao Porco Verde."
      7:
        image: 'notes/hoc1_7.jpg'
        text: "O lado esquerdo é o labirinto onde o programa é executado. As instruções para cada quebra-cabeça estão abaixo do labirinto."
      8:
        image: 'notes/hoc1_8.jpg'
        text: "A caixa de ferramentas do meio possui os comandos para o Angry Bird. Usarás estas para construir o teu código."
      9:
        image: 'notes/hoc1_9.jpg'
        text: "À direita está o teu espaço de trabalho, que é a área para onde irás arrastar os blocos da caixa de ferramentas que vais usar para criares o teu programa. Para apagares um bloco, arrasta-o para o lixo que aparece no canto."
      10:
        image: 'notes/hoc1_10.jpg'
        text: "Cada bloco é uma instrução. Se arrastares o bloco \"mover para a frente\" para o teu espaço de trabalho e clicares em \"Executar\", o pássaro anda um espaço no labirinto."
      11:
        image: 'notes/hoc1_11.jpg'
        text: "Para fazer mais do que uma ação, você pode arrastar vários blocos para sua área de trabalho e conectá-los uns aos outros. O passarinho obedecerá os comandos de cima para baixo."
      12:
        image: 'notes/hoc1_12.jpg'
        text: "Se corres um programa e depois quiseres corrigi-lo e tentar novamente, pressiona o botão \"Redefinir\"."
      13:
        image: 'notes/hoc1_13.jpg'
        text: "Vamos apanhar esses porcos!"
    artist_intro:
      1:
        image: 'notes/stage5_1.jpg'
        text: "Olá! Eu sou o JR. Qualquer equipa de carros de corrida precisa de um programador de computadores para vencer. Eles analisam os dados do veículo para o tornarem mais rápido."
      2:
        image: 'notes/stage5_2.jpg'
        text: "Nesses desafios, você vai ser um artista que desenha por todo lugar que passa."
      3:
        image: 'notes/stage5_3.jpg'
        text: "Este bloco diz \"avançar 100 pixeis.\" Os pixeis são apenas pequenos pontos no teu ecrã."
      4:
        image: 'notes/stage5_4.jpg'
        text: "Este bloco diz \"virar à direita 90 graus.\" Isto fará com que o teu artista se vire tanto quanto os blocos se virarem no labirinto."
      5:
        image: 'notes/stage5_5.jpg'
        text: "Carrega na seta, sobre qualquer destes blocos, para mudares a quantidade que o artista vira ou avança. Ambienta-te com estes passos, de forma a familiarizares-te com estes novos blocos."
    farmer_intro:
      1:
        image: 'notes/stage9_1.jpg'
        text: "Olá! Eu sou a Paola! Nestes puzzles tu serás um agricultor que tem de chegar à sua quinta, completamente plana, para começar a cultivar algo."
      2:
        image: 'notes/stage9_2.jpg'
        text: "Você precisa ajudá-la a remover todos os montes de terra e preencher todos os buracos."
      3:
        image: 'notes/stage9_3.jpg'
        text: "Os novos blocos removem 1 pá de terra de um monte, e preenchem o buraco com 1 pá de terra."
      4:
        image: 'notes/stage9_4.jpg'
        text: "Os montes e buracos têm tamanhos diferentes, pelo que terás de dizer ao agricultor quantas pás serão necessárias usar."
    flappy_intro:
      1:
        image: 'notes/flappy01.jpg'
        text: "Oi, eu sou Katie! Uma das coisas mais emocionantes sobre ciência da computação é que um programa de computador pode ser interativo."
      2:
        image: 'notes/flappy02.jpg'
        text: "Sempre que alguém clica, digita, ou toca na tela de um celular, é gerado um EVENTO, e existe alguns códigos que decidem o que fazer quando um EVENTO ocorre."
      3:
        image: 'notes/flappy03.jpg'
        text: "Por exemplo, você poderia ter um MANIPULADOR DE EVENTOS que diz \"quando o mouse for clicado, toque um som\" "
      4:
        image: 'notes/flappy04.jpg'
        text: "Alguma vez ouviste falar do jogo FlappyBird? Se utilizarmos manipuladores de eventos, podemos programar a nossa própria versão do FlappyBird!"
      5:
        image: 'notes/flappy05.jpg'
        text: "O código que você vai escrever consiste em arrastar e soltar blocos que representam os comandos para o computador. Na verdade, cada um desses blocos é representado pelo código real."
      6:
        image: 'notes/flappy06.jpg'
        text: "Se você der uma olhada na área de trabalho, existem alguns blocos verdes que são preenchidos para você - esses são os \"manipuladores de evento\" "
      7:
        image: 'notes/flappy07.jpg'
        text: "Se você quer que o passarinho VOE quando você CLICAR, você pode anexar o bloco \"FLAP\" ao manipulador de evento apropriado. Assim, sempre que você clicar, o passarinho vai voar."
      8:
        image: 'notes/flappy08.jpg'
        text: "Em cada desafio dessa atividade, vamos introduzir novos tipos de eventos, como os blocos verdes na área de trabalho, e você pode decidir que blocos são apropriados para adicionar em resposta a esses eventos."
      9:
        image: 'notes/flappy09.jpg'
        text: "Quando você observar uma seta suspensa como essa, significa que você pode alterar as configurações, como o som a ser reproduzido quando o pássaro bater no chão."
      10:
        image: 'notes/flappy10.jpg'
        text: "No desafio final, você vai poder criar seu próprio jogo e compartilhar com seus amigos. Divirta-se!"
    loop_times:
      1:
        image: 'notes/hoc2_1.jpg'
        text: "Olá, sou o Mark! Vamos aprender sobre ciclos. Usando ciclos podes dizer um computador para repetir qualquer conjunto de ações repetidamente, milhares ou mesmo milhões de vezes."
      2:
        image: 'notes/hoc2_2.jpg'
        text: "Neste puzzle, queremos que o pássaro se mova para a frente 5 espaços para chegar ao porco."
      3:
        image: 'notes/hoc2_3.jpg'
        text: "Podemos usar o novo bloco \"repetir\" para nos ajudar."
      4:
        image: 'notes/hoc2_4.jpg'
        text: "Em vez de usares 5 blocos \"mover para a frente\"..."
      5:
        image: 'notes/hoc2_5.jpg'
        text: "Podemos colocar o bloco \"mover para a frente\" dentro do bloco \"repetir\" e escrever um número no bloco para definirmos quantas vezes a instrução será repetida."
      6:
        image: 'notes/hoc2_6.jpg'
        text: 'E isto é importante: podes colocar mais do que um comando dentro de um bloco "repetir".'
      7:
        image: 'notes/hoc2_7.jpg'
        text: "Diverte-te a usar o teu novo bloco \"repetir\"!"
    loop_until:
      1:
        image: 'notes/hoc3_1.jpg'
        text: "Olá, eu sou o Chris. Antes de entrar para os Miami Heat, estive na escola Georgia Tech a estudar ciência da computação. Vamos tentar o nosso novo bloco, o bloco \"repeat até\"."
      2:
        image: 'notes/hoc3_2.jpg'
        text: "E se nós não soubéssemos quão longe o pássaro teve que se mover para chegar ao porco?"
      3:
        image: 'notes/hoc3_3.jpg'
        text: "Se colocarmos um bloco \"mover para a frente\" dentro do bloco \"repetir até\", o pássaro irá mover-se para a frente ATÉ chegar ao porquinho malvado (ou chocar contra o muro)."
      4:
        image: 'notes/hoc3_4.jpg'
        text: 'E isto é importante: tal como anteriormente, podemos por múltiplos blocos dentro de um bloco "repetir até", e todos eles serão repetidos.'
    if:
      1:
        image: 'notes/hoc4_1.jpg'
        text: 'Olá, eu sou o Bill! Vamos aprender um novo conceito fundamental: instrução "se". É assim que os computadores tomam decisões.'
      2:
        image: 'notes/hoc4_2.jpg'
        text: "Usas instruções \"se\" todos os dias. Antes de saíres de casa todas as manhãs, tu dizes  SE estiver a chover lá fora, vou precisar de levar o meu casaco."
      3:
        image: 'notes/hoc4_3.jpg'
        text: "Podemos dizer ao zombie para verificar SE há algum caminho à esquerda, e se ele encontrar o caminho à esquerda, podemos fazer com que ele vire nessa direção."
      4:
        image: 'notes/hoc4_4.jpg'
        text: "Para escrever código para este, vamos arrastar o nosso bloco \"se\" e inserimos dentro dele um bloco \"virar esquerda\"."
      5:
        image: 'notes/hoc4_5.jpg'
        text: "Agora, se pusermos um bloco \"mover para a frente\" por cima e envolvermos tudo num ciclo com o bloco \"repetir\", cada vez que o zombie se mover, irá verificar se existe algum caminho à esquerda e mudar de direção. O comando \"repetir\" é fundamental para verificar, a cada passo, se existe uma mudança de direção."
      6:
        image: 'notes/hoc4_6.jpg'
        text: "Instruções se são muito importantes nas ciências da computação. Um dos primeiros programas que escrevi foi o jogo do galo, e há uma instrução que diz: SE a outra pessoa estiver perto de ganhar, bloquear o espaço que a permite ganhar."
      7:
        image: 'notes/hoc4_7.jpg'
        text: "Diverte-te usando o bloco \"se\"!"
    if_else:
      1:
        image: 'notes/hoc5_1.jpg'
        text: "Olá, meu nome é Saloni. A ciência da computação me ajuda a resolver problemas das áreas da saúde e medicina. Vamos aprender sobre o bloco \"se-senão\". Ele parece o bloco \"se\", mas com uma parte extra no final que diz \"senão\"."
      2:
        image: 'notes/hoc5_2.jpg'
        text: "Se eu colocar um bloco \"avance\" na instrução \"faça\", e um bloco \"vire à esquerda\" na instrução \"senão\", significa que o zumbi vai escolher entre 2 opções. SE existir um caminho à frente, o zumbi vai avançar e, CASO CONTRÁRIO (não há um caminho em frente), o zumbi vai virar à esquerda."
      3:
        image: 'notes/hoc5_3.jpg'
        text: "Assim como o bloco \"se\", nós podemos colocar blocos \"se-senão\" dentro de blocos \"repita\", assim o zumbi continuará se movendo, e o bloco \"se-senão\" continuará verificando se é possível virar para algum lugar."
      4:
        image: 'notes/hoc5_4.jpg'
        text: "Agora, coloque os zumbis em seus devidos lugares!"
    if_else_scrat:
      1:
        image: 'notes/saloni_ifelse_scrat1.jpg'
        text: "Um comando se-senão é uma decisão entre duas opções. Vamos ver como podemos usar um comando se-senão com nosso amigo Scrat, o esquilo."
      2:
        image: 'notes/saloni_ifelse_scrat2.jpg'
        text: "Este bloco parece igual ao bloco \"se\", mas há uma parte extra no final que diz \"senão\". Se eu colocar um bloco \"avance\" na instrução \"faça\", e um bloco \"vire à esquerda\" na instrução \"senão\", significa que o esquilo Scrat vai avançar se houver um caminho à frente. Se não houver caminho à frente, o Scrat vai virar à esquerda."
      3:
        image: 'notes/saloni_ifelse_scrat3.jpg'
        text: "Significa tomar uma decisão e fazer uma das duas ações com base nessa decisão. E, assim como os blocos \"se\", você pode colocar blocos \"se-senão\" dentro de blocos \"repita\"."
      4:
        image: 'notes/saloni_ifelse_scrat4.jpg'
        text: "Agora vamos ajudar Scrat, o esquilo, a pegar essa bolota!"
    function:
      1:
        image: 'notes/stage13_1.jpg'
        text: "Oi, eu sou a Brina, uma engenheira do Instagram. Uma função é um conjunto de linhas de código que você deseja usar várias vezes. Então, ao invés de escrever esse código toda vez, você pode usar apenas um bloco."
      2:
        image: 'notes/stage13_2.jpg'
        text: "Vamos aprender a definir funções. A definição de funções tem uma estrela na ponta. O nome de uma função é escrito logo na primeira linha."
      3:
        image: 'notes/stage13_3.jpg'
        text: "Os blocos que vão dentro da definição nos dizem o que ela faz. Então, essa definição de função se chama \"preencha 5\", e é composta por um bloco \"repita\" e um bloco \"preencha\"."
      4:
        image: 'notes/stage13_4.jpg'
        text: "A definição está na área de trabalho, mas a fazendeira não vai executar a função até que arrastemos o bloco \"preencha 5\" para fora da categoria funções."
      5:
        image: 'notes/stage13_5.jpg'
        text: "Vamos agir em \"função\" da diversão! "
    loop_while:
      1:
        image: 'notes/stage9_5.jpg'
        text: "Oi, eu sou o Makinde! Vamos aprender sobre o bloco \"enquanto\". "
      2:
        image: 'notes/stage9_6.jpg'
        text: "O bloco \"enquanto\" vai fazer tudo o que você colocar no seu interior, DESDE QUE a declaração na parte superior seja VERDADEIRA."
      3:
        image: 'notes/stage9_7.jpg'
        text: "Por exemplo, se a fazendeira está em um monte de terra, ela continuará a remover 1 pá ENQUANTO houver terra debaixo dela."
    loop_for:
      1:
        image: 'notes/stage11_1.jpg'
        text: "Oi, eu sou a Trina, e trabalho para a Pixar. Já trabalhei em um monte de filmes, incluindo o Shrek."
      2:
        image: 'notes/stage11_2.jpg'
        text: "Este é nosso novo laço \"contador\". Ele executará ações repetidamente, e você pode fazer com que as ações mudem aos poucos."
      3:
        image: 'notes/stage11_3.jpg'
        text: "Neste exemplo, nosso laço \"contador\" diz \"conte de 50 até 90, indo de 10 em 10\" e, dentro dele, temos o nosso bloco \"desenhe um quadrado\". Arraste o bloco \"contador\" da seção \"Variáveis\" para local que indica \"comprimento\"."
      4:
        image: 'notes/stage11_4.jpg'
        text: "Isso significa que nosso artista vai desenhar um quadrado com lados de 50 pixels de comprimento, e então vai acrescentar 10 e desenhar um quadrado com lados de 60 pixels de comprimento. Ele vai continuar adicionando 10 e desenhando quadrados até que ele atinja 90 pixels. Assim, vamos ter quadrados de 50, 60, 70, 80 e 90 pixels."
    parameters:
      1:
        image: 'notes/stage15_1.jpg'
        text: "Oi, eu sou a Janete, e eu sou uma engenheira da Zynga."
      2:
        image: 'notes/stage15_2.jpg'
        text: "E se quisermos desenhar um monte de triângulos de tamanhos diferentes?"
      3:
        image: 'notes/stage15_3.jpg'
        text: "Podemos escrever todo o código à mão, ou podemos usar uma função com parâmetros."
      4:
        image: 'notes/stage15_4.jpg'
        text: "Para fazer isso, clique na estrela azul sobre a definição da função \"desenhe um triângulo\". Arraste o \"nome de entrada\" para o bloco \"entrada\"."
      5:
        image: 'notes/stage15_5.jpg'
        text: "Então, se você escrever \"comprimento\" no local onde há um \"x\" e apertar \"Enter\", você vai criar um comprimento de entrada para sua função."
      6:
        image: 'notes/stage15_6.jpg'
        text: "Então, clique na estrela. Agora, você vai clicar na categoria de variáveis e arrastar o bloco \"comprimento\" para dentro do bloco \"avance\" da sua definição da função. E arraste para fora o antigo bloco de número."
      7:
        image: 'notes/stage15_7.jpg'
        text: "Para usar sua função com parâmetros, clique na categoria funções e arraste para fora a função \"desenhe um triângulo com comprimento\"."
      8:
        image: 'notes/stage15_8.jpg'
        text: "Agora você pode usar o bloco de matemática para entrar com números diferentes e desenhar triângulos de tamanhos diferentes."
    hoc_wrapup:
      1:
        image: 'notes/hoc6_1.jpg'
        text: "Parabéns! Com o último enigma que resolveste, acabaste de escrever código que pode dizer a qualquer robô como encontrar o seu caminho através de um labirinto de não-ramificação ou túnel de qualquer comprimento, sendo um zombie, um pássaro, uma missão a Marte ou até mesmo um carro de auto-condução."
      2:
        image: 'notes/hoc6_2.jpg'
        text: "Os conceitos básicos que usaste são o coração de todos os programas ou apps que irás utilizar.  Aprendemos sobre ciclos de repetição, declarações repita até, declarações se e se-então."
      3:
        image: 'notes/hoc6_3.jpg'
        text: "Se gostaste da tua primeira hora de código, visita code.org e continua a tua educação em ciências da computação! Assim que completares as 20 horas de curso, irás dominar as bases da programação e poderás começar a escrever aplicações para telemóveis, instruções para robôs, jogos, etc."
      4:
        image: 'notes/hoc6_4.jpg'
        text: 'A tecnologia está a mudar tudo o que fazemos e não importa se és novo ou menos novo: a programação é divertida, é criativa e toda a gente pode aprender!'
    20_wrapup:
      1:
        image: 'notes/bird.png'
        text: "Mostrar notas vem em breve!"
    frozen_intro:
      1:
        image: 'notes/frozen1_1.jpg'
        text: "Olá, meu nome é Lyndsey. Eu sou modelo, atriz e também escrevo meus próprios aplicativos. Vamos usar a programação para explorar a magia e a beleza do gelo com Anna e Elsa."
      2:
        image: 'notes/frozen1_2.jpg'
        text: "Você vai criar flocos de neve e padrões enquanto esquia, e um país das maravilhas congelante para compartilhar com seus amigos."
      3:
        image: 'notes/frozen1_3.jpg'
        text: "Na próxima hora, você vai aprender os conceitos básicos da programação. A programação tradicional é escrita, mas nós usaremos Blockly, blocos visuais que você pode arrastar e soltar para escrever programas. Também é assim que estudantes universitários aprendem o básico. E por trás desses blocos, você está criando códigos."
      4:
        image: 'notes/frozen1_4.jpg'
        text: "Um programa é um conjunto de instruções que diz a um computador o que ele deve fazer. Vamos construir um código, ou programa, que ajudará Elsa a criar uma reta simples. Mais adiante, nós vamos usar isso para criar padrões mais complexos."
      5:
        image: 'notes/frozen1_5.jpg'
        text: "Sua tela é dividida em três partes principais. À esquerda você tem a superfície de gelo onde vai executar seu programa. As instruções de cada nível estão escritas logo abaixo da superfície."
      6:
        image: 'notes/frozen1_6.jpg'
        text: "A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma ação que pode ser realizada por Elsa e Anna."
      7:
        image: 'notes/frozen1_7.jpg'
        text: "O espaço em branco à direita é chamado de área de trabalho, e é onde vamos criar nosso programa. Para se mover pela superfície de gelo, você usará o bloco \"avance\"."
      8:
        image: 'notes/frozen1_8.jpg'
        text: "Aqui, o bloco \"avance\" diz: \"avance por 100 pixels\". Quando clicamos em \"Executar\", o que acontece? Elsa se move por uma certa distância na tela, 100 pixels, na verdade! Os pixels são, basicamente, minúsculos quadrados na tela do seu computador."
      9:
        image: 'notes/frozen1_9.jpg'
        text: "O outro bloco que temos neste desafio diz \"vire à direita 90 graus\". Quando usamos o bloco \"vire à direita\", Elsa faz uma determinada curva. Você pode brincar com o quanto deseja que Elsa vire. O ângulo é medido a partir do caminho à frente de Elsa. Então, este é um giro de 90 graus. E este é um giro de 120 graus."
      10:
        image: 'notes/frozen1_10.jpg'
        text: "Lembre-se de que é possível mudar o número de pixels e graus, clicando nas setas ao lado deles."
    frozen_loops:
      1:
        image: 'notes/frozen2_1.jpg'
        text: "Olá, eu sou a Paola! Os computadores são realmente muito bons em repetir ações. Você pode contar até 10, 20 ou até 100, mas um computador pode contar até um bilhão ou um trilhão sem se cansar, e ele só levará alguns segundos. Seja contar, desenhar ou qualquer outra atividade, os computadores podem repetir ações centenas ou até bilhões de vezes."
      2:
        image: 'notes/frozen2_2.jpg'
        text: "Na programação, isto chama-se um ciclo. Um ciclo é uma repetição contínua de um determinado código. No próximo desafio, o teu objetivo é ajudar a Anna a criar um quadrado com o bloco \"repetir\"."
      3:
        image: 'notes/frozen2_3.jpg'
        text: "Todos os blocos de código que colocar dentro do bloco \"repita\" serão repetidos em sequência, quantas vezes você quiser."
      4:
        image: 'notes/frozen2_4.jpg'
        text: "Para desenhar um quadrado, você pode usar os blocos \"avance\" e \"vire à direita\" quatro vezes. Mas o modo mais fácil de fazer isso é dizer ao computador \"avance\" e \"vire à direita 90 graus\" uma vez e, depois, fazer ele repetir este par de ações quatro vezes. Para isso, você precisa colocar os blocos \"avance\" e \"vire à direita\" dentro de um bloco \"repita\"."
      5:
        image: 'notes/frozen2_5.jpg'
        text: "Lembre-se de que é possível mudar o valor no bloco \"repita\" para qualquer número, e ele repetirá o que está dentro do bloco de acordo com o número que você escolher."
    frozen_functions:
      1:
        image: 'notes/frozen3_1.jpg'
        text: "Olá, eu sou Chris Bosh. Sou jogador de basquete profissional, e já programei quando estava na faculdade."
      2:
        image: 'notes/frozen3_2.jpg'
        text: "Um dos conceitos mais importantes da ciência da computação é como definir novos comandos. A maioria das linguagens de computador tem apenas 100 palavras ou comandos. A arte e a magia estão, então, em definir suas próprias palavras novas a partir do básico."
      3:
        image: 'notes/frozen3_3.jpg'
        text: "Depois de ensinar a um computador como fazer uma ação uma vez usando esta sequência de comandos, você pode criar o nome que quiser para essa ação, assim será mais fácil repeti-la depois. Ao definir e nomear seu próprio comando, você estará criando uma função."
      4:
        image: 'notes/frozen3_4.jpg'
        text: "Olá, eu sou Jess. Na programação com blocos, use funções quando houver um conjunto de ações que você quer repetir várias vezes. Por exemplo, você escreveu um código para criar um quadrado."
      5:
        image: 'notes/frozen3_5.jpg'
        text: "Você pode definir isso como uma função chamada \"crie um quadrado\". "
      6:
        image: 'notes/frozen3_6.jpg'
        text: "Agora você tem um novo bloco que pode ser usado várias vezes para criar diversos quadrados."
      7:
        image: 'notes/frozen3_7.jpg'
        text: "Inúmeras formas simples podem ser usadas para criar padrões mais complexos. No próximo desafio, o código que você acabou de escrever para fazer um círculo estará disponível como uma nova função que pode fazer círculos de diferentes tamanhos. Você pode usá-la para ajudar Elsa a criar padrões belos e intrincados na neve?"
    playlab_intro:
      1:
        image: 'notes/playlab_intro_1.png'
        text: "Nós vamos criar jogos usando o Laboratório. Os bons jogos têm histórias, e toda história tem personagens. Nós vamos aprender como criar nossos personagens, como bruxas, alienígenas e animais que falam, andam e interagem uns com os outros. Ao final deste tutorial, você poderá criar um jogo a partir do zero e compartilhá-lo com seus amigos."
      2:
        image: 'notes/playlab_intro_2.png'
        text: "Sua tela está dividida em três partes principais. À esquerda está o espaço do jogo, onde seu programa será executado. As instruções para cada nível estão escritas abaixo."
      3:
        image: 'notes/playlab_intro_3.png'
        text: "A parte do meio é onde fica a caixa de ferramentas, e cada um desses blocos representa uma parte do código. O espaço em branco à direita é chamado de área de trabalho e é onde criaremos nosso programa."
      4:
        image: 'notes/playlab_intro_4.png'
        text: "Para começar, você terá que conectar seus blocos ao bloco laranja \"quando executar\". É possível conectar diversos blocos uns aos outros, arrastando-os até ver a linha amarela e, então, eles se encaixam."
      5:
        image: 'notes/playlab_intro_5.png'
        text: "Neste primeiro desafio, nosso personagem é um pinguim, e nós o faremos dizer \"Olá!\", arrastando o bloco \"diga\", conectando-o ao bloco \"quando executar\" e digitando \"Olá\". Nós também podemos fazer com que o pinguim se mova usando os blocos \"mova à direita\" e \"mova à esquerda\". Depois que seus blocos estiverem no lugar certo, aperte o botão \"executar\" para ver o que você programou."
      6:
        image: 'notes/playlab_intro_6.png'
        text: "Comece agora mesmo! Ao final, você conseguirá criar seu próprio jogo, com todos os tipos de jogadores que poderão interagir, ficar felizes ou tristes, marcar pontos ou lançar bolas de fogo, ou até mesmo fazer desaparecer uns aos outros. Depende da sua imaginação e do jogo que você quer criar."
    playlab_events:
      1:
        image: 'notes/playlab_events_1.png'
        text: "Agora, vamos aprender um pouco sobre algo que os programadores de jogos usam todos os dias: os eventos. Um evento diz ao seu programa que ele deve ouvir quando algo acontece. Quando tal coisa acontece, ele realiza uma ação."
      2:
        image: 'notes/playlab_events_2.png'
        text: "Alguns exemplos de eventos são: ouvir o clique do rato, pressionar uma seta no teclado ou tocar no ecrã."
      3:
        image: 'notes/playlab_events_3.png'
        text: "Agora, vamos fazer o robô espacial cumprimentar os terráqueos quando um jogador clicar nele. Nós usaremos o bloco \"quando clicado\" e conectaremos o bloco \"diga\" a ele. Quando o jogador clicar no robô espacial, tudo que estiver conectado ao bloco de evento \"quando clicado\" será realizado. O que seu alienígena diz?"
      4:
        image: 'notes/playlab_events_4.png'
        text: "Há também os blocos \"quando a seta estiver pressionada\". Se você conectar os blocos \"mova\" a eles, será possível começar a mover seus personagens para cima, para baixo, para esquerda e para a direita. Pouco a pouco, seu jogo está ficando cada vez mais interativo."
    playlab_repeat_forever:
      1:
        image: 'notes/playlab_repeat_forever_1.png'
        text: "Este é o bloco \"repita infinitamente\". Tudo que estiver contido neste bloco acontecerá repetidamente no jogo."
      2:
        image: 'notes/playlab_repeat_forever_2.png'
        text: "Se quisermos que um personagem faça algo repetidamente, sem nenhuma ação do jogador, colocaremos esses blocos dentro do bloco \"repita infinitamente\"."
      3:
        image: 'notes/playlab_repeat_forever_3.png'
        text: "Neste desafio, nosso objetivo é ajudar o mago a proteger as fronteiras do reino, andando da esquerda para a direita e vice-versa, continuamente. Aprender como repetir ações de comandos vai economizar muito do seu tempo no futuro, quando você for criar seu próprio jogo."
    C1_artist_intro:
      1:
        image: 'notes/C1_artist_intro_1.png'
        text: "Estes são os teus blocos de desenho. Usa o bloco correto para mover o artista para onde ele precisa ir, para preencher as linhas cinzentas."
      2:
        image: 'notes/C1_artist_intro_2.png'
        text: "Estes são blocos de salto. Quando usares estes blocos o teu artista move-se, mas sem desenhar. Usa estes blocos para saltares para a próxima linha cinzenta."
    C1_bee_level_intro:
      1:
        image: 'notes/C1_bee_level_intro_1.png'
        text: "As abelhas são fantásticas, não são? Neste próximo conjunto de quebra-cabeças, o teu objetivo é ajudar a abelha a chegar às flores, apanhar o néctar das flores e voar até ao favo de mel para fazer mel. Vais precisar de usar os blocos \"apanhar néctar\" e \"fazer mel\" neste exercício."
      2:
        image: 'notes/C1_bee_level_intro_2.png'
        text: 'Cada flor tem um número diferente de néctares: 1, 2, 3 ou mais. Sabemos quanto néctar está nas flores vermelhas, pelo pequeno número no canto. Certifica-te que apanhas todo o néctar das flores antes de continuares. Além disso, cada favo de mel só pode ter tanto mel quanto o indicado: 1, 2, 3 ou mais. Certifica-te que todos os favos de mel estão cheios.'
      3:
        image: 'notes/C1_bee_level_intro_3.png'
        text: "Se conseguires retirar todo o néctar e fazer todo o mel, continuas para o próximo nível. Caso contrário, terás que repetir o quebra-cabeças novamente. Deves ser \"abelhudo\" e experimentares mexer no código para te sentires como um verdadeiro programador!"
    C1_bee_loops:
      1:
        image: 'notes/C1_bee_loops_1.png'
        text: "Um loop é uma repetição de uma atividade ou tarefa. Assim que abro uma colmeia para a inspecionar, retiro uma moldura, inspeciono-a, e depois coloco-a de volta no seu local. Seguidamente, eu repito essa tarefa várias vezes. vezes. Isso é um loop, ou seja, fazer a mesma atividade várias vezes."
      2:
        image: 'notes/C1_bee_loops_2.png'
        text: "Neste nível, queremos que a abelha recolha três néctares das flor. Em vez de usar três blocos \"obter néctar\", vais usar o bloco de repetição para obteres néctar três vezes. Clica em \"Executar\" e vê se conseguiste. Parabéns!"
    C1_bigevent_unplugged:
      1:
        image: 'notes/C1_bigevent_unplugged_1.png'
        text: "Esta lição chama-se o grande evento. É sobre como podemos controlar os nossos programas e realmente mudar a forma como eles são executados em tempo real usando eventos, como o premir de uma tecla ou um clique no rato."
      2:
        image: 'notes/C1_bigevent_unplugged_2.png'
        text: "Para esta lição, vais ser controlado com um controle remoto de papel. É como um jogo de vídeo em direto."
      3:
        image: 'notes/C1_bigevent_unplugged_3.png'
        text: "Um evento é uma ação que faz com que algo aconteça. É como quando clicas no botão do rato e o computador carrega uma nova página Web. Isso é um evento. Quando tocas e arrastas no ecrã de um tablet para rolares o ecrã, isso também é um evento. Os eventos são uma ótima maneira de deixar os utilizadores controlarem um programa sempre que quiserem ou precisarem."
      4:
        image: 'notes/C1_bigevent_unplugged_4.png'
        text: "No nosso dia-a-dia acontecem coisas a que temos que  responder. Sentimos fome e abrimos o frigorífico em busca de algo para comer. Ouvimos o carteiro chegar, ele coloca correio na nossa caixa de correio e depois vamos buscar a correspondência. Estes são eventos iguais a premir um botão no ecrã ou mover o ponteiro do rato. Eles são algo que acontece e que nos leva a fazer alguma coisa."
      5:
        image: 'notes/C1_bigevent_unplugged_5.png'
        text: "Nos jogos vídeo, há um evento chamado \"Atualizar\" que acontece 30 ou 60 vezes por segundo. Para os programadores de jogos, este evento é quase mais importante do que o premir de um botão ou o movimento do rato."
      6:
        image: 'notes/C1_bigevent_unplugged_6.png'
        text: "O evento principal, aquele que faz tudo acontecer é o \"Atualizar\", e funciona como o tic-tac dos ponteiros do relógio. É quando o evento acontece que verificamos se algo aconteceu. É nesse momento que podemos dizer, \" Alguém premiu o botão no ecrã? Sim ou não?\" Sem eventos, o jogador não se podia mover, saltar nem fazer nada. Não serias capaz de controlar o que está a acontecer. O jogo de vídeo seria incapaz de animar qualquer coisa."
    C1_building_foundation:
      1:
        image: 'notes/C1_building_foundation_1.jpg'
        text: "Nas esculturas de areia, em que pequenas partes estão constantemente a cair, já sabemos que o fracasso é parte do processo. Mas se persistires, só melhora e fica mais interessante para ti, Persistência é o nome deste jogo. Continua, vais adorá-lo."
      2:
        image: 'notes/C1_building_foundation_2.jpg'
        text: "Esta lição chama-se construir uma fundação. Nesta lição, vamos trabalhar numa tarefa que é suposto ser realmente difícil. Vais descobrir como fazer uma estrutura pelo menos tão alta quanto um destes copos e que tem que ser forte o suficiente para suportar o peso de um livro."
      3:
        image: 'notes/C1_building_foundation_3.jpg'
        text: "Pode haver momentos em que nossa criação não funciona. Pode haver vezes em ficamos frustrados e queremos desistir. Pode haver muitos desses momentos. Mas se continuamos a tentar e darmos o nosso melhor, uma e outra vez, acabamos por conseguir. E mais cedo que esperamos."
      4:
        image: 'notes/C1_building_foundation_4.jpg'
        text: "Persistência tem tudo a ver com continuar quando o queremos mesmo é desistir. Se queres criar algo novo e diferente, vais falhar muitas vezes ao longo do caminho."
      5:
        image: 'notes/C1_building_foundation_5.jpg'
        text: "O truque da persistência é escolheres continuar sempre em frente, e aprenderes com os teus fracassos em vez de desistires, só porque estás frustrado. A frustração apenas significa realmente que algo maravilhoso está à tua espera logo ao virar da esquina. Não desistas antes de chegares a ele. Wooo!"
    C1_getting_loopy:
      1:
        image: 'notes/C1_getting_loopy_1.png'
        text: "Olá, o meu nome é Miral Kotb e eu sou o criador de Iluminate. No meu trabalho, há algo que usamos em ambas as danças e na programação de lightsuits. E isso são os loops! Os loops são ações que se repetem, uma e outra vez."
      2:
        image: 'notes/C1_getting_loopy_2.png'
        text: "Quando repetes algo múltiplas vezes, como as minhas ações para manter o arco a girar, estou a realizar um loop dessa acção. Isto é um loop. Isto é um loop. E isto é um loop."
      3:
        image: 'notes/C1_getting_loopy_3.png'
        text: "Hoje vamos ter uma festa de dança. Vamos treinar loops com uma nova dança. A Iteração. Vamos aprender sobre loops usando uma dança. Vais aprender alguns passos fáceis e repeti-los várias vezes para completar a dança."
      4:
        image: 'notes/C1_getting_loopy_4.png'
        text: "Aqui estão os passos que precisas aprender. Bate palmas. Coloca as mãos atrás da cabeça. Põe as mãos na cintura. Levanta a mão esquerda. Levante a mão direita. Muito simples, certo? Vais descobrir que podes encurtar as instruções, colocando alguns passos de dança em loops."
      5:
        image: 'notes/C1_getting_loopy_5.png'
        text: "Na verdade usamos loops na nossa dança. Os dançarinos vestem computadores, todos na mesma rede. Eu poderia repetir as luzes nos mesmos dançarinos vezes sem conta. No loop tenho uma iteração onde eu vou dizer para repetir pelos seis dançarinos vezes sem conta e depois dentro do loop dizer para aumentar a velocidade da luz. E que tudo isso é criado através de loops. Loops são importantes na ciência da computação, porque eles fazem nosso trabalho mais curto e fácil."
    C1_happy_maps_unplugged:
      1:
        image: 'notes/C1_happy_maps_unplugged_1.png'
        text: "Esta lição é chamada Mapas felizes. Hoje vamos ajudar o nosso amiguinho peludo Flurb chegar ao seu fruto."
      2:
        image: 'notes/C1_happy_maps_unplugged_2.png'
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: 'notes/C1_happy_maps_unplugged_3.png'
        text: "To get it there you circle the direction that it has to go."
      4:
        image: 'notes/C1_happy_maps_unplugged_4.png'
        text: "Crie o seu algoritmo colando setas no mapa que está a tentar resolver. O segundo é o mesmo, mas vai para baixo."
      5:
        image: 'notes/C1_happy_maps_unplugged_5.png'
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: 'notes/C1_maze_debugging_1.png'
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: 'notes/C1_maze_debugging_2.png'
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: 'notes/C1_maze_debugging_3.png'
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: 'notes/C1_maze_debugging_4.png'
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: 'notes/C1_maze_intro_sequencing_1.png'
        text: "For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take."
      2:
        image: 'notes/C1_maze_intro_sequencing_2.png'
        text: "You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the \"when run\" block and when you think you've got the right solution, then you can click \"Run\" and watch the bird go to the pig."
    C1_maze_loops:
      1:
        image: 'notes/C1_maze_loops_1.png'
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: 'notes/C1_maze_loops_2.png'
        text: "For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday."
      3:
        image: 'notes/C1_maze_loops_3.png'
        text: "To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the \"repeat\" block. Drag the \"repeat\" block on to the workspace and enter the number 3. Then drag the \"move North\" block into the \"repeat\" block and hit \"Run\" to see if you got it right. Congratulations, you got it!"
    C1_moveitmoveit_unplugged:
      1:
        image: 'notes/C1_moveitmoveit_unplugged_1.png'
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: 'notes/C1_moveitmoveit_unplugged_2.png'
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: 'notes/C1_moveitmoveit_unplugged_3.png'
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: 'notes/C1_going_places_safely_1.png'
        text: "My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. \"Mom, can I go on the computer? Sure honey!\""
      2:
        image: 'notes/C1_going_places_safely_2.png'
        text: "I love my mom's computer because I can go on the Internet. The Internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: 'notes/C1_going_places_safely_3.png'
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: 'notes/C1_going_places_safely_4.png'
        text: "Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. \"Yummy, I wish the Internet had smellorama!\" I can talk to different people on the Internet, like my cousin but I only talk to people I know."
      5:
        image: 'notes/C1_going_places_safely_5.png'
        text: "What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!"
      6:
        image: 'notes/C1_going_places_safely_6.png'
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: 'notes/C1_going_places_safely_7.png'
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: 'notes/C1_pair_programming_1.png'
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: 'notes/C1_pair_programming_2.png'
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: 'notes/C1_pair_programming_3.png'
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: 'notes/C1_pair_programming_4.png'
        text: "The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team."
    C1_planting_seed:
      1:
        image: 'notes/C1_planting_seed_1.png'
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: 'notes/C1_planting_seed_2.png'
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: 'notes/C1_planting_seed_3.png'
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: 'notes/C1_planting_seed_4.png'
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: 'notes/C1_planting_seed_5.png'
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: 'notes/C1_playlab_storytelling_1.png'
        text: "Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell."
      2:
        image: 'notes/C1_playlab_storytelling_2.png'
        text: "The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The \"when run\" block starts everything. The \"move\" block will move your character and the \"say\" block will make your character say whatever you type."
      3:
        image: 'notes/C1_playlab_storytelling_3.png'
        text: "This is the \"when actors collide\" block which you can link up to the other blocks."
      4:
        image: 'notes/C1_playlab_storytelling_4.png'
        text: "I was making the dog come over and say \"Hi\" but then the cat got scared so it ran away. \"Ahh\" If there was more time, it would have been a happy ending. The end!"
    C1_spelling_bee_intro:
      1:
        image: 'notes/C1_spelling_bee_intro_1.png'
        text: "This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words."
      2:
        image: 'notes/C1_spelling_bee_intro_2.png'
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: 'notes/C1_zuck_repeat_loop_1.png'
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: 'notes/C1_zuck_repeat_loop_2.png'
        text: "For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday."
      3:
        image: 'notes/C1_zuck_repeat_loop_3.png'
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: 'notes/C1_zuck_repeat_loop_4.png'
        text: "In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward."
      5:
        image: 'notes/C1_zuck_repeat_loop_5.png'
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: 'notes/C2_artist_intro_1.png'
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: 'notes/C2_artist_intro_2.png'
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: 'notes/C2_artist_intro_3.png'
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: 'notes/C2_artist_intro_4.png'
        text: "The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn."
      5:
        image: 'notes/C2_artist_intro_5.png'
        text: "And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!"
    C2_bee_conditionals:
      1:
        image: 'notes/C2_bee_conditionals_1.png'
        text: "This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something."
      2:
        image: 'notes/C2_bee_conditionals_2.png'
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: 'notes/C2_bee_conditionals_3.png'
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: 'notes/C2_binary_bracelets_1.png'
        text: "This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!"
      2:
        image: 'notes/C2_binary_bracelets_2.png'
        text: "Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites."
      3:
        image: 'notes/C2_binary_bracelets_3.png'
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: 'notes/C2_binary_bracelets_4.png'
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: 'notes/C2_conditionals_with_cards_1.png'
        text: "This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear."
      2:
        image: 'notes/C2_conditionals_with_cards_2.png'
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: 'notes/C2_conditionals_with_cards_3.png'
        text: "Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says \"awww.\" Let's try it! \"Awww\" \"cheers\""
      4:
        image: 'notes/C2_conditionals_with_cards_4.png'
        text: "I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action."
      5:
        image: 'notes/C2_conditionals_with_cards_5.png'
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: 'notes/C2_artist_debugging_1.png'
        text: "Here we already have some blocks out in our work space. But there is something wrong."
      2:
        image: 'notes/C2_artist_debugging_2.png'
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: 'notes/C2_artist_debugging_3.png'
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: 'notes/C2_bee_debugging_1.png'
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: 'notes/C2_bee_debugging_2.png'
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: 'notes/C2_bee_debugging_3.png'
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: 'notes/C2_digital_footprint_1.png'
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: 'notes/C2_digital_footprint_2.png'
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: 'notes/C2_digital_footprint_3.png'
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: 'notes/C2_digital_footprint_4.png'
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: 'notes/C2_digital_footprint_5.png'
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: 'notes/C2_digital_footprint_6.png'
        text: "From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
    C2_digital_footprint_v2:
      1:
        image: 'notes/C2_digital_footprint_v2_1.png'
        text: "Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?"
    C2_graph_paper:
      1:
        image: 'notes/C2_graph_paper_1.png'
        text: "This lesson is called \"Graph Paper Programming\" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows."
      2:
        image: 'notes/C2_graph_paper_2.png'
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: 'notes/C2_graph_paper_3.png'
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: 'notes/C2_graph_paper_4.png'
        text: "I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done."
    C2_artist_loops:
      1:
        image: 'notes/C2_artist_loops_1.png'
        text: "Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started."
      2:
        image: 'notes/C2_artist_loops_2.png'
        text: "To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square."
    C2_bee_loops:
      1:
        image: 'notes/C2_bee_loops_1.png'
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: 'notes/C2_bee_loops_2.png'
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: 'notes/C2_maze_intro_1.png'
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: 'notes/C2_maze_intro_2.png'
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: 'notes/C2_maze_intro_3.png'
        text: "If I drag the move block to our work space and press \"Run\", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program."
      4:
        image: 'notes/C2_maze_intro_4.png'
        text: "I'm going to choose the \"turn right\" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press \"Run\" again,  the bird will perform the commands that are stacked from top to bottom on our work space."
      5:
        image: 'notes/C2_maze_intro_5.png'
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: 'notes/C2_paper_airplanes_1.png'
        text: "This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms."
      2:
        image: 'notes/C2_paper_airplanes_2.png'
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: 'notes/C2_paper_airplanes_3.png'
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: 'notes/C2_paper_airplanes_4.png'
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createstory:
      1:
        image: 'notes/C2_playlab_createastory_1.png'
        text: "Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade."
      2:
        image: 'notes/C2_playlab_createastory_2.png'
        text: "Há os blocos \"quando a seta estiver pressionada\" e \"mova o personagem\". Você pode usar esses blocos juntos para mover os personagens usando as teclas de direção."
    C2_relay_programming:
      1:
        image: 'notes/C2_relay_programming_1.png'
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: 'notes/C2_relay_programming_2.png'
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: 'notes/C2_relay_programming_3.png'
        text: "Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it."
      4:
        image: 'notes/C2_relay_programming_4.png'
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: 'notes/C2_zuck_repeat_loop_1.png'
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: 'notes/C2_zuck_repeat_loop_2.png'
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: 'notes/C2_zuck_repeat_loop_3.png'
        text: "In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the \"repeat\" block in order to be able to do this very easily. You can either do this by giving the computer a \"move forward\" command five times in order to advance the bird one step each time to the pig."
      4:
        image: 'notes/C2_zuck_repeat_loop_4.png'
        text: "Or you can just tell the computer to \"move forward\" once, and then tell it to \"repeat\" that 5 times, and it will do the same thing. So in order to do this you drag your \"move forward\" command, and then you put it inside the \"repeat\" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward."
      5:
        image: 'notes/C2_zuck_repeat_loop_5.png'
        text: "Now one more thing is you can put as many commands as you want inside the \"repeat\" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!"
    C3_artist_functions:
      1:
        image: 'notes/C3_artist_functions_1.png'
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: 'notes/C3_artist_functions_2.png'
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: 'notes/C3_artist_intro_1.png'
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: 'notes/C3_artist_intro_2.png'
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: 'notes/C3_artist_intro_3.png'
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: 'notes/C3_artist_intro_4.png'
        text: "The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn."
      5:
        image: 'notes/C3_artist_intro_5.png'
        text: "And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!"
    C3_artist_nested_loops:
      1:
        image: 'notes/C3_artist_nested_loops_1.png'
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: 'notes/C3_artist_nested_loops_2.png'
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: 'notes/C3_bee_conditionals_1.png'
        text: "This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something."
      2:
        image: 'notes/C3_bee_conditionals_2.png'
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: 'notes/C3_bee_conditionals_3.png'
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C3_bee_debugging:
      1:
        image: 'notes/C3_debugging_bee_1.png'
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: 'notes/C3_debugging_bee_2.png'
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: 'notes/C3_debugging_bee_3.png'
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: 'notes/C3_bee_functions_1.png'
        text: "One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks."
      2:
        image: 'notes/C3_bee_functions_2.png'
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: 'notes/C3_bee_functions_3.png'
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: 'notes/C3_bee_functions_4.png'
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: 'notes/C3_bee_nested_loops_1.png'
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: 'notes/C3_bounce_1.png'
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: 'notes/C3_bounce_2.png'
        text: "To get started, we have to link up the paddle controls to the arrow keys on our keyboard."
      3:
        image: 'notes/C3_bounce_3.png'
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: 'notes/C3_computational_thinking_1.png'
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: 'notes/C3_computational_thinking_2.png'
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: 'notes/C3_computational_thinking_3.png'
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: 'notes/C3_computational_thinking_4.png'
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: 'notes/C3_computational_thinking_5.png'
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: 'notes/C3_crowdsourcing_1.png'
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: 'notes/C3_crowdsourcing_2.png'
        text: "In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications."
      3:
        image: 'notes/C3_crowdsourcing_3.png'
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: 'notes/C3_crowdsourcing_4.png'
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: 'notes/C3_dice_race_1.png'
        text: "This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning."
      2:
        image: 'notes/C3_dice_race_2.png'
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: 'notes/C3_dice_race_3.png'
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: 'notes/C3_dice_race_4.png'
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: 'notes/C3_dice_race_5.png'
        text: "An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice."
    C3_farmer_while:
      1:
        image: 'notes/C3_farmer_while_1.png'
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: 'notes/C3_farmer_while_2.png'
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: 'notes/C3_functional_suncatchers_1.png'
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: 'notes/C3_functional_suncatchers_2.png'
        text: "The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function."
      3:
        image: 'notes/C3_functional_suncatchers_3.png'
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: 'notes/C3_functional_suncatchers_4.png'
        text: "Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!"
    C3_internet:
      1:
        image: 'notes/C3_internet_1.png'
        text: "This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly."
      2:
        image: 'notes/C3_internet_2.png'
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: 'notes/C3_internet_3.png'
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: 'notes/C3_internet_4.png'
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: 'notes/C3_internet_5.png'
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: 'notes/C3_internet_6.png'
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: 'notes/C3_maze_conditionals_1.png'
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: 'notes/C3_maze_conditionals_2.png'
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: 'notes/C3_maze_conditionals_3.png'
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: 'notes/C3_maze_conditionals_4.png'
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: 'notes/C3_maze_level_4_1.png'
        text: "In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block."
      2:
        image: 'notes/C3_maze_level_4_2.png'
        text: "This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower."
    C3_playlab_create_game:
      1:
        image: 'notes/C3_playlab_create_game_1.png'
        text: "Até agora, você fez animações ou histórias que fazem exatamente as mesmas coisas quando você as executa. Agora, você pode fazer um jogo interativo e jogá-lo de verdade."
      2:
        image: 'notes/C3_playlab_create_game_2.png'
        text: "Há os blocos \"quando a seta estiver pressionada\" e \"mova o personagem\". Você pode usar esses blocos juntos para mover os personagens usando as teclas de direção."
    C3_songwriting_with_parameters:
      1:
        image: 'notes/C3_songwriting_with_parameters_1.png'
        text: "This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again."
      2:
        image: 'notes/C3_songwriting_with_parameters_2.png'
        text: "We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus."
      3:
        image: 'notes/C3_songwriting_with_parameters_3.png'
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: 'notes/C4_bee_conditional_1.png'
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: 'notes/C4_bee_conditional_2.png'
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: 'notes/C4_conditionals_1.png'
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: 'notes/C4_conditionals_2.png'
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: 'notes/C4_for_loops_1.png'
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: 'notes/C4_for_loops_2.png'
        text: "For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running."
      3:
        image: 'notes/C4_for_loops_3.png'
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: 'notes/C4_for_loops_4.png'
        text: "Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through."
    C4_for_loops_bee:
      1:
        image: 'notes/C4_for_loops_bee_1.png'
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: 'notes/C4_for_loops_bee_2.png'
        text: "For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running."
      3:
        image: 'notes/C4_for_loops_bee_3.png'
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: 'notes/C4_for_loops_bee_4.png'
        text: "Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through."
    C4_for_loops_no_bee:
      1:
        image: 'notes/C4_for_loops_no_bee_1.png'
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: 'notes/C4_for_loops_no_bee_2.png'
        text: "For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop."
    C4_function_create:
      1:
        image: 'notes/C4_function_create_1.png'
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: 'notes/C4_function_create_2.png'
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: 'notes/C4_function_create_3.png'
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: 'notes/C4_function_edit_1.png'
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: 'notes/C4_function_edit_2.png'
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: 'notes/C4_function_edit_3.png'
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: 'notes/C4_function_edit_4.png'
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: 'notes/C4_function_parameters_1.png'
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: 'notes/C4_function_parameters_2.png'
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: 'notes/C4_function_parameters_3.png'
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: 'notes/C4_intro_1.png'
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: 'notes/C4_intro_2.png'
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: 'notes/C4_intro_3.png'
        text: "If I drag the move block to our work space and press \"run\", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program."
      4:
        image: 'notes/C4_intro_4.png'
        text: "I'm going to choose the \"turn right\" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press \"run\" again,  the bird will perform the commands that are stacked from top to bottom on our work space."
      5:
        image: 'notes/C4_intro_5.png'
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C4_math_artist:
      1:
        image: 'notes/C4_math_artist_1.png'
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: 'notes/C4_math_artist_2.png'
        text: "Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall."
    C4_unplugged_algorithms:
      1:
        image: 'notes/C4_unplugged_algorithms_1.png'
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: 'notes/C4_unplugged_algorithms_2.png'
        text: "An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific."
      3:
        image: 'notes/C4_unplugged_algorithms_3.png'
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: 'notes/C4_unplugged_algorithms_4.png'
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: 'notes/C4_unplugged_binary_1.png'
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: 'notes/C4_unplugged_binary_2.png'
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: 'notes/C4_unplugged_binary_3.png'
        text: 'A computer only knows binary but an image, it''s not binary, it''s not ones and zeros so how do you do that? Here''s an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it.'
      4:
        image: 'notes/C4_unplugged_binary_4.png'
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: 'notes/C4_unplugged_forloops_1.png'
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: 'notes/C4_unplugged_forloops_2.png'
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: 'notes/C4_unplugged_forloops_3.png'
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: 'notes/C4_unplugged_forloops_4.png'
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: 'notes/C4_unplugged_forloops_5.png'
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: 'notes/C4_unplugged_madlibs_1.png'
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: 'notes/C4_unplugged_madlibs_2.png'
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: 'notes/C4_unplugged_parameters_1.png'
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: 'notes/C4_unplugged_parameters_2.png'
        text: "Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program."
      3:
        image: 'notes/C4_unplugged_parameters_3.png'
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: 'notes/C4_unplugged_variables_1.png'
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: 'notes/C4_unplugged_variables_2.png'
        text: "Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work."
      3:
        image: 'notes/C4_unplugged_variables_3.png'
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: 'notes/C4_variables_artist_1.png'
        text: "A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable."
      2:
        image: 'notes/C4_variables_artist_2.png'
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: 'notes/C4_variables_artist_3.png'
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: 'notes/C4_variables_playlab_1.png'
        text: "A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable."
      2:
        image: 'notes/C4_variables_playlab_2.png'
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: 'notes/C4_variables_playlab_3.png'
        text: "In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable."
    infinity_playlab_events:
      1:
        image: 'notes/infinity_playlab_events_1.png'
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: 'notes/infinity_playlab_events_2.png'
        text: "Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the \"when up arrow\" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive."
    infinity_playlab_intro:
      1:
        image: 'notes/infinity_playlab_intro_1.png'
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: 'notes/infinity_playlab_intro_2.png'
        text: "A ciência de computação é a base para muitas coisas que os alunos universitários e profissionais irão fazer nos próximos vinte ou trinta anos. Eu gosto de programação porque eu gosto de ajudar as pessoas. Eu tenho a oportunidade de criar algo que vai facilitar a vida das pessoas. Eu acho que é a coisa mais próxima que temos de uma superpotência. A parte mais importante é a de começar. Eu sou um principiante e eu quero aprender comigo próprio."
      3:
        image: 'notes/infinity_playlab_intro_3.png'
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: 'notes/infinity_playlab_intro_4.png'
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: 'notes/infinity_playlab_intro_5.png'
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: 'notes/infinity_playlab_intro_6.png'
        text: "To start off, you'll need to link your blocks to the orange \"when run\" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the \"move right\" block out and linking it to the \"when run\" block. Once you have your blocks in place, hit the \"Run\" button to see what you've programmed."
      7:
        image: 'notes/infinity_playlab_intro_7.png'
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: 'notes/infinity_playlab_repeat_forever_1.png'
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: 'notes/infinity_playlab_repeat_forever_2.png'
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: 'notes/tutorial_puzzle_challenge_1.png'
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: 'notes/tutorial_puzzle_challenge_2.png'
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: 'notes/tutorial_puzzle_challenge_3.png'
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: 'notes/tutorial_puzzle_challenge_4.png'
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: 'notes/tutorial_puzzle_challenge_5.png'
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: 'notes/tutorial_puzzle_challenge_6.png'
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: 'notes/unplug1_1.png'
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: 'notes/unplug1_2.png'
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: 'notes/unplug1_3.png'
        text: "When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before."
      4:
        image: 'notes/unplug1_4.png'
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: 'notes/unplug2_1.png'
        text: "The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan."
      2:
        image: 'notes/unplug2_2.png'
        text: 'Students will break into groups to write instructions and then they''ll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms.'
      3:
        image: 'notes/unplug2_3.png'
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: 'notes/unplug2_4.png'
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: 'notes/unplug3_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug3_2.png'
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: 'notes/unplug4_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug4_2.png'
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: 'notes/unplug5_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug5_2.png'
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: 'notes/unplug6_1.png'
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: 'notes/unplug6_2.png'
        text: "We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable."
    unplug7:
      1:
        image: 'notes/unplug7_1.png'
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: 'notes/unplug7_2.png'
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: 'notes/unplug7_3.png'
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: 'notes/unplug8_1.png'
        text: "Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction."
      2:
        image: 'notes/unplug8_2.png'
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: 'notes/unplug8_3.png'
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: 'notes/unplug9_1.png'
        text: "Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science."
      2:
        image: 'notes/unplug9_2.png'
        text: "You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step."
      3:
        image: 'notes/unplug9_3.png'
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: 'notes/unplug10_1.png'
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: 'notes/unplug10_2.png'
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: 'notes/unplug10_3.png'
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: 'notes/unplug11_1.png'
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: 'notes/unplug11_2.png'
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: 'notes/unplug11_3.png'
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: 'notes/starwars_intro_1.JPG'
        text: 'Hi, I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens.'
      2:
        image: 'notes/starwars_intro_2.JPG'
        text: "Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artists develop rigs which are the parts of the character that move that allow the character to look very believable in a galaxy far far away."
      3:
        image: 'notes/starwars_intro_3.JPG'
        text: "In the next hour, we're going to build our own Star Wars game. We'll teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so that we can drag and drop to write the programs. Under the hood, you're still creating code. After you try the basics with blocks, we'll switch you to JavaScript, one of the most popular programming languages on the web."
      4:
        image: 'notes/starwars_intro_4.JPG'
        text: "To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts. Your screen is split into three parts. On the left is the Star Wars game space, where code will run. The instructions for each level are written below the game space."
      5:
        image: 'notes/starwars_intro_5.JPG'
        text: "This middle area is the toolbox and each of these blocks is a command that BB-8 can understand."
      6:
        image: 'notes/starwars_intro_6.JPG'
        text: "The white space on the right is called the workspace and this is where we are going to build our program."
      7:
        image: 'notes/starwars_intro_7.JPG'
        text: "If I drag the moveLeft(); block to our workspace and press run, what happens? BB-8 moves left one block on the grid."
      8:
        image: 'notes/starwars_intro_8.JPG'
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together."
      9:
        image: 'notes/starwars_intro_9.JPG'
        text: "When I press run again, BB-8 will perform the commands that are stacked from top to bottom on our workspace. If you ever want to delete a block, just remove it from the stack and drag it back into the tool box."
      10:
        image: 'notes/starwars_intro_10.JPG'
        text: "After you've hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_typing:
      1:
        image: 'notes/starwars_typing_1.JPG'
        text: "Inside the blocks we've been using are JavaScript commands. JavaScript is the most popular programming language for professional developers today. Blocks are a great way to get started learning to code and in fact, top universities like Harvard and Berkeley start teaching this way. But once we learn the basics, engineers write code by typing because it allows us to go faster."
      2:
        image: 'notes/starwars_typing_2.JPG'
        text: "We can type hundreds of commands without having to find them in the toolbox or drag them out. Because you're learning typing may be slower at first but we wanted you to give it a try."
      3:
        image: 'notes/starwars_typing_3.JPG'
        text: "In the upper right corner on your workspace, you can click the show text button on any puzzle to switch from blocks to typing code as text."
      4:
        image: 'notes/starwars_typing_4.JPG'
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: 'notes/starwars_typing_5.JPG'
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: 'notes/starwars_typing_6.JPG'
        text: "When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it."
      7:
        image: 'notes/starwars_typing_7.JPG'
        text: "If you get stuck, you can always start over with the start over button and you can switch back to block mode at any time by clicking in the top-right corner. Ok, let's give typing a try! And if you make mistakes, don't get frustrated. It takes everybody a few tries to get it right."
    starwars_events:
      1:
        image: 'notes/starwars_events_1.JPG'
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: 'notes/starwars_events_2.JPG'
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C-3PO."
      3:
        image: 'notes/starwars_events_3.JPG'
        text: 'To make a game, we need to learn about something that game programmers use every day: they''re called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action.'
      4:
        image: 'notes/starwars_events_4.JPG'
        text: "Some examples of events are listening for a mouse click, an arrow button or a tap on the screen."
      5:
        image: 'notes/starwars_events_5.JPG'
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: 'notes/starwars_events_6.JPG'
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: 'notes/starwars_events_7.JPG'
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: 'notes/starwars_events_8.JPG'
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: 'notes/starwars_events_9.JPG'
        text: "Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive."
    starwars_congrats:
      1:
        image: 'notes/starwars_congrats_1.JPG'
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: 'notes/starwars_congrats_2.JPG'
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: 'notes/starwars_congrats_3.JPG'
        text: "[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win."
      4:
        image: 'notes/starwars_congrats_4.JPG'
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: 'notes/starwars_congrats_5.JPG'
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: 'notes/starwars_blocks_intro_1.JPG'
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a spherical droid. Everything he does and every movement that he makes is controlled by computer software. Computer science impacts every industry, from marketing to health care to film. In fact, hundreds of computer engineers worked together to make a film like The Force Awakens.'
      2:
        image: 'notes/starwars_blocks_intro_2.JPG'
        text: "Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the animation and creature development team. In The Force Awakens, I'm responsible for helping the artist develop rigs, which are the parts of the character that move that allow the character to look very believable in a galaxy far, far away."
      3:
        image: 'notes/starwars_blocks_intro_3.JPG'
        text: "In the next hour, we're going to build our own Star Wars game that will teach you the basic concepts of programming. Usually programming is all text but we're going to use blocks here so we can drag and drop to write the programs. To start off, we're going to work with Rey to program BB-8 to walk to collect all of the scrap parts."
      4:
        image: 'notes/starwars_blocks_intro_4.JPG'
        text: "Your screen is split into three parts. On the left is the Star Wars game space where code will run. The instructions for each level are written below the game space."
      5:
        image: 'notes/starwars_blocks_intro_5.JPG'
        text: "This middle area is the toolbox and each of these blocks is a command that BB-8 can understand."
      6:
        image: 'notes/starwars_blocks_intro_6.JPG'
        text: "The white space on the right is called the work space and this is where we're going to build our program."
      7:
        image: 'notes/starwars_blocks_intro_7.JPG'
        text: "If I drag the moveLeft(); block to our workspace, what happens? BB-8 moves left one block on the grid."
      8:
        image: 'notes/starwars_blocks_intro_8.JPG'
        text: "And what if I want BB-8 to do something after the moveLeft(); block? I can add another block to our program. I'm going to choose the moveUp(); block and I'll drag it under my moveLeft(); block until the highlight appears. Then I'll drop it and the two blocks will snap together. When I press run again, BB-8 will perform the commands that are stacked top to bottom on our workspace."
      9:
        image: 'notes/starwars_blocks_intro_9.JPG'
        text: "If you ever want to delete a block, just remove it from the stack and drag it back into the toolbox."
      10:
        image: 'notes/starwars_blocks_intro_10.JPG'
        text: "After you hit run, you can always hit the reset button to get BB-8 back to the start. Now let's get rolling!"
    starwars_blocks_events:
      1:
        image: 'notes/starwars_blocks_events_1.JPG'
        text: "Hello, my name is Charita Carter. I'm a senior creative producer here at Walt Disney Imagineering. I'm responsible for leading teams that actually produce the attractions that our guests get to experience. We are always looking for ways that we can improve and make a better experience for our guests and technology is at the heart of that."
      2:
        image: 'notes/starwars_blocks_events_2.JPG'
        text: "Congratulations, you did it! You programmed BB-8. Now I think we're ready for something harder. Let's go for it. Now that you've learned the basics of programming, we're going to back in time to build your own game, starring R2-D2 and C-3PO."
      3:
        image: 'notes/starwars_blocks_events_3.JPG'
        text: 'To make a game, we need to learn about something that game programmers use every day: they''re called events. Events tell your program to listen or wait for when something happens and then when it does, it performs an action.'
      4:
        image: 'notes/starwars_blocks_events_4.JPG'
        text: "Some examples of events are listening for a mouse click, an arrow button or a tap on the screen."
      5:
        image: 'notes/starwars_blocks_events_5.JPG'
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: 'notes/starwars_blocks_events_6.JPG'
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: 'notes/starwars_blocks_events_7.JPG'
        text: "Step by step, your game is getting more interactive."
    starwars_blocks_congrats:
      1:
        image: 'notes/starwars_blocks_congrats_1.JPG'
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: 'notes/starwars_blocks_congrats_2.JPG'
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: 'notes/starwars_blocks_congrats_3.JPG'
        text: "[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win."
      4:
        image: 'notes/starwars_blocks_congrats_4.JPG'
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: 'notes/starwars_blocks_congrats_5.JPG'
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: 'notes/mc_intro_1.JPG'
        text: "O meu nome é Jens Bergensten, mas conhecem-me por Jeb. Sou o diretor de programação de Minecraft aqui na Mojang, em Estocolmo. Acho que comecei a programar com 11 ou 12 anos, porque queria fazer jogos. Um dos amigos do meu pai disse-me que, para fazer jogos, temos de aprender a programar. Foi assim que comecei. Gosto de conceber e perceber a arquitetura dos jogos. É disso que gosto mesmo em Minecraft."
      2:
        image: 'notes/mc_intro_2.JPG'
        text: "Durante a próxima hora vão aprender o básico da programação ao programarem a Alex ou o Steve para avançarem através de uma simulação de parte de um mundo Minecraft."
      3:
        image: 'notes/mc_intro_3.JPG'
        text: "A programação tradicional faz-se normalmente em texto, mas hoje vamos usar Blockly, um sistema que utiliza blocos visuais de arrastar e largar para escrever programas. No interior, estás a criar código JavaScript. "
      4:
        image: 'notes/mc_intro_4.JPG'
        text: "Os conceitos que vais aprender são os mesmos que os programadores utilizam todos os dias e são a base da programação. Aqui, na Mojang, utilizamos esses mesmos conceitos para fazer com que Minecraft funcione."
      5:
        image: 'notes/mc_intro_5.JPG'
        text: "Antes de começares, vais escolher a tua personagem. Eu vou escolher a Alex. Vamos produzir código para um programa que a ajude a mover-se pelo ecrã. "
      6:
        image: 'notes/mc_intro_6.JPG'
        text: "O teu ecrã está dividido em três partes principais. À esquerda, tens o espaço de jogo de Minecraft, onde o teu programa vai correr. As instruções para cada nível estão escritas em baixo."
      7:
        image: 'notes/mc_intro_7.JPG'
        text: "Esta zona intermédia é a caixa de ferramentas, e cada um destes blocos é um comando que dirige as ações da Alex."
      8:
        image: 'notes/mc_intro_8.JPG'
        text: "O espaço branco à direita é chamado o espaço de trabalho, e é aí que vamos construir o nosso programa. "
      9:
        image: 'notes/mc_intro_9.JPG'
        text: "Se arrastarmos o bloco \"mover para a frente\" para o nosso espaço de trabalho e clicarmos em Correr, o que acontece? A Alex avança um espaço na grelha."
      10:
        image: 'notes/mc_intro_10.JPG'
        text: "E se quisermos fazer qualquer coisa depois de ela avançar um espaço? Podemos adicionar outro bloco ao nosso programa. Vou escolher o bloco \"virar à direita\", e vou arrastá-lo para debaixo do meu bloco \"mover para a frente\" até aparecer esta linha cor-de-laranja. Depois, largo-o e os dois blocos encaixam-se. Quando premirmos Correr outra vez, a Alex vai executar os comandos que estão empilhados de cima a baixo no nosso espaço de trabalho."
      11:
        image: 'notes/mc_intro_11.JPG'
        text: "Se quiseres apagar um bloco, basta arrastá-lo da pilha de volta para a caixa de ferramentas."
      12:
        image: 'notes/mc_intro_12.JPG'
        text: Para anular as mudanças e para voltar ao início do nível, utiliza o botão Começar Outra Vez no extremo superior direito do espaço de trabalho. Mais uma coisa, vês o pequeno triângulo nos blocos de virar? Quando vires esses triângulos, isso quer dizer que podes escolher uma opção diferente. Vamos começar a codificar!
    mc_repeat:
      1:
        image: 'notes/mc_repeat_1.JPG'
        text: "Chamo-me Lydia Winters e sou a diretora de marca da Mojang, e nós fizemos um pequeno jogo chamado Minecraft."
      2:
        image: 'notes/mc_repeat_2.JPG'
        text: "O que eu gosto mais de fazer em Minecraft é explorar. Adoro aventurar-me por grutas e ver o que consigo encontrar. Não sendo uma programadora, estou mesmo empolgada por ver as lições de Minecraft e aprender a programar."
      3:
        image: 'notes/mc_repeat_3.JPG'
        text: "O último nível exigia imensos blocos de \"mover para a frente\". Seria mais fácil se pudéssemos dizer ao computador para executar esse comando quatro ou cinco vezes. Felizmente para nós, os computadores são muito bons a repetir comandos em sequências de repetição. "
      4:
        image: 'notes/mc_repeat_4.JPG'
        text: "Ao construir Minecraft, utilizamos sequências de repetição para colocar todos os materiais iniciais necessários à criação de um novo mundo. São milhares e milhares de blocos. Nós também utilizamos sequências para coisas mais pequenas, como para mover os pés da Alex para a frente e para trás, quando ela caminha. As sequências de repetição são uma parte importante da programação."
      5:
        image: 'notes/mc_repeat_5.JPG'
        text: "Está a chegar a noite. Por isso, nos próximos níveis, vamos construir uma casa para nos mantermos em segurança. Vamos utilizar o bloco de repetição para fazer isto com facilidade. "
      6:
        image: 'notes/mc_repeat_6.JPG'
        text: "Para construir uma parede da nossa casa, podemos dizer à Alex para se \"mover para a frente\" e colocar pranchas quatro vezes, ou então dizemos-lhe para se \"mover para a frente\" e colocar uma prancha, e depois pegamos neste comando e utilizamos o bloco de repetição para que ela repita a ação várias vezes. Agora vamos clicar no bloco de repetição e dizer-lhe quantas vezes queremos que ela repita esta ação. Agora vamos construir a nossa casa antes que a noite caia! Diverte-te."
    mc_if_statements:
      1:
        image: 'notes/mc_if_statements_1.JPG'
        text: "Agora vamos aprender o que são as declarações de \"se\". As declarações de \"se\" são uma parte fundamental da aprendizagem da programação. Elas ajudam os computadores a tomar decisões."
      2:
        image: 'notes/mc_if_statements_2.JPG'
        text: "Todos os computadores utilizam declarações de \"se\", incluindo o meu telemóvel. Por exemplo, quando desbloqueio o meu telemóvel, ele corre programação que diz que se eu introduzir a palavra-passe correta, desbloqueará o telemóvel. Caso contrário, apresentará uma mensagem de erro."
      3:
        image: 'notes/mc_if_statements_3.JPG'
        text: "Podes utilizar declarações de \"se\" na tua programação para fazer com que o Steve e a Alex reajam ao que veem no mundo. Por exemplo, se houver uma rocha à frente deles, podem virar à esquerda. Ou à direita, se encontrarem uma árvore."
      4:
        image: 'notes/mc_if_statements_4.JPG'
        text: "Neste caso, não queremos cair na lava. Planear tendo em conta a lava é fácil. Vemo-la no ecrã. Mas e a lava que não vemos debaixo da pedra?"
      5:
        image: 'notes/mc_if_statements_5.JPG'
        text: "Depois de escavar a pedra, temos de verificar se há lava nesse local antes de avançarmos. Se houver lava, vamos colocar uma pedra à frente da nossa personagem antes de avançarmos. Assim, podemos avançar em segurança. Está na hora de escavar um pouco mais! E lembra-te de utilizar a declaração de \"se\" para te manteres em segurança."
    mc_congrats_share:
      1:
        image: 'notes/mc_congrats_share_1.JPG'
        text: "Parabéns! Acabaste de aprender os fundamentos da programação."
      2:
        image: 'notes/mc_congrats_share_2.JPG'
        text: "Agora podes utilizar estes blocos para construíres a tua própria criação. Acabaram as instruções e os quebra-cabeças. Podes construir o que quiseres. Tu é que escolhes."
      3:
        image: 'notes/mc_congrats_share_3.JPG'
        text: "[estudantes a falar] Agora é que vai ser. Tosquiar. Fiz um L com tochas. Eu fiz um A com pranchas de bétula. Funcionou, funcionou. Construímos uma casa com lã!"
      4:
        image: 'notes/mc_congrats_share_4.JPG'
        text: "Quando acabares a tua criação, escolhe \"partilhar\" para obteres uma hiperligação que te permitirá partilhar com os teus amigos! Diverte-te!"
    mc_congrats_no_share:
      1:
        image: 'notes/mc_congrats_no_share_1.JPG'
        text: "Parabéns! Acabaste de aprender os fundamentos da programação."
      2:
        image: 'notes/mc_congrats_no_share_2.JPG'
        text: "Agora podes utilizar estes blocos para construíres a tua própria criação. Acabaram as instruções e os quebra-cabeças. Podes construir o que quiseres. Tu é que escolhes."
      3:
        image: 'notes/mc_congrats_no_share_3.JPG'
        text: "[estudantes a falar] Agora é que vai ser. Tosquiar. Fiz um L com tochas. Eu fiz um A com pranchas de bétula. Funcionou, funcionou. Construímos uma casa com lã!"
      4:
        image: 'notes/mc_congrats_no_share_4.JPG'
        text: "Agora podes construir o que quiseres. Diverte-te!"
    gumball_intro:
      1:
        image: 'notes/gumball_intro_1.JPG'
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: 'notes/gumball_intro_2.JPG'
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: 'notes/gumball_intro_3.JPG'
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: 'notes/gumball_intro_4.JPG'
        text: "Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below."
      5:
        image: 'notes/gumball_intro_5.JPG'
        text: "This middle area is the tool box and each of these blocks is a piece of code."
      6:
        image: 'notes/gumball_intro_6.JPG'
        text: "O espaço branco à direita é chamado o espaço de trabalho, e é aí que vamos construir o nosso programa. "
      7:
        image: 'notes/gumball_intro_7.JPG'
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: 'notes/gumball_intro_8.JPG'
        text: "In this first puzzle, we'll make the actors say something by linking the \"say\" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed."
      9:
        image: 'notes/gumball_intro_9.JPG'
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: 'notes/gumball_events_1.JPG'
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: 'notes/gumball_events_2.JPG'
        text: "Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen."
      3:
        image: 'notes/gumball_events_3.JPG'
        text: "Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the \"say\" block to it. When the player clicks, all the blocks attached to this block will be performed."
      4:
        image: 'notes/gumball_events_4.JPG'
        text: "There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive."
    gumball_repeat:
      1:
        image: 'notes/gumball_repeat_1.JPG'
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things."
      2:
        image: 'notes/gumball_repeat_2.JPG'
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: 'notes/gumball_repeat_3.JPG'
        text: "In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    iceage_intro:
      1:
        image: 'notes/iceage_intro_1.JPG'
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: 'notes/iceage_intro_2.JPG'
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: 'notes/iceage_intro_3.JPG'
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: 'notes/iceage_intro_4.JPG'
        text: "Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below."
      5:
        image: 'notes/iceage_intro_5.JPG'
        text: "This middle area is the tool box and each of these blocks is a piece of code."
      6:
        image: 'notes/iceage_intro_6.JPG'
        text: "O espaço branco à direita é chamado o espaço de trabalho, e é aí que vamos construir o nosso programa. "
      7:
        image: 'notes/iceage_intro_7.JPG'
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: 'notes/iceage_intro_8.JPG'
        text: "In this first puzzle, we'll make the actors say something by linking the \"say\" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed."
      9:
        image: 'notes/iceage_intro_9.JPG'
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: 'notes/iceage_events_1.JPG'
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: 'notes/iceage_events_2.JPG'
        text: "Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen."
      3:
        image: 'notes/iceage_events_3.JPG'
        text: "Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the \"say\" block to it. When the player clicks, all the blocks attached to this block will be performed."
      4:
        image: 'notes/iceage_events_4.JPG'
        text: "There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive."
    iceage_repeat:
      1:
        image: 'notes/iceage_repeat_1.JPG'
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things."
      2:
        image: 'notes/iceage_repeat_2.JPG'
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: 'notes/iceage_repeat_3.JPG'
        text: "In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    mc_2016_intro:
      1:
        image: 'notes/mc_2016_intro_1.jpg'
        text: "Olá, chamo-me Jens e sou o designer criativo principal de Minecraft. Durante a próxima hora, vais criar o teu próprio jogo Minecraft. Isto parece-se com Minecraft, mas o mundo parou. As ovelhas não se mexem, as galinhas não põem ovos e os mortos-vivos estão parados. Cabe-te a ti adicionar o código para que o mundo Minecraft funcione."
      2:
        image: 'notes/mc_2016_intro_2.jpg'
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m really interested in is how people think and interact with technology and so this job is the perfect job for me to put together the computer engineering with the psychology: como as pessoas pensam e se comportam.'
      3:
        image: 'notes/mc_2016_intro_3.jpg'
        text: "Verás que o teu ecrã está dividido em três partes principais. 1) À esquerda está o jogo Minecraft. Neste momento, o mundo está parado, mas vamos resolver isso com código."
      4:
        image: 'notes/mc_2016_intro_4.jpg'
        text: "2) Esta zona intermédia é a caixa de ferramentas. Cada um destes blocos é um comando que as galinhas, as ovelhas e outras criaturas de Minecraft entendem."
      5:
        image: 'notes/mc_2016_intro_5.jpg'
        text: "3) O espaço à direita chama-se espaço de trabalho e é lá que vamos construir o nosso programa."
      6:
        image: 'notes/mc_2016_intro_6.jpg'
        text: "Se te esqueceres do que tens de fazer, tens as instruções para cada nível ao cimo."
      7:
        image: 'notes/mc_2016_intro_7.jpg'
        text: "Para começar, vamos programar uma galinha. Vamos arrastar o comando “avançar” para o espaço de trabalho. Quando eu clicar em “Executar”, a galinha avança um passo. Para ir mais longe, vou arrastar outro bloco de “avançar” para debaixo do primeiro bloco de “avançar” até aparecer o contorno. Depois, eu largo-o e os dois blocos encaixam-se. Se eu clicar em “Executar” de novo, a galinha anda dois passos."
      8:
        image: 'notes/mc_2016_intro_8.jpg'
        text: "Se quiseres eliminar um bloco, basta removê-lo da pilha e arrastá-lo de volta para a caixa de ferramentas."
      9:
        image: 'notes/mc_2016_intro_9.jpg'
        text: "Depois de clicares em “Executar”, podes clicar no botão “Repor” para reiniciar o jogo e começar de novo. Agora é a tua vez de criar a tua própria versão de Minecraft. Diverte-te!"
    mc_2016_loops:
      1:
        image: 'notes/mc_2016_loops_1.jpg'
        text: "Olá, eu sou a Lisa. Sou programadora em Minecraft e trabalho em alguns dos animais e inimigos no jogo. Um dos animais em que trabalhei foi o ocelote. Trabalhei na parte em que podes dar um peixe ao ocelote para o domesticar e torná-lo no teu gato."
      2:
        image: 'notes/mc_2016_loops_2.jpg'
        text: "Enquanto humanos, aborrecemo-nos muito se tivermos de fazer a mesma coisa vezes sem conta. Mas a coisa boa dos computadores é que eles fazem a mesma coisa milhões ou mesmo milhares de milhões de vezes seguidas sem se aborrecerem. Esta repetição chama-se loop e todas as criaturas em Minecraft as utilizam."
      3:
        image: 'notes/mc_2016_loops_3.jpg'
        text: "Há pouco, conseguimos que uma galinha atravessasse o ecrã, mas depois parou. Em Minecraft, as galinhas andam para sempre para lá e para cá. Vamos utilizar um loop de “fazer para sempre”, da nossa caixa de ferramentas, para manter as nossas galinhas em movimento. O poder dos loops vai poupar-te muito tempo e dar-te muitas opções fixes enquanto constróis a tua própria versão de Minecraft."
    mc_2016_events:
      1:
        image: 'notes/mc_2016_events_1.jpg'
        text: "Neste nível, podes escolher ser Steve ou Alex. Prime as teclas de seta para te moveres para cima, para baixo, para a esquerda e para a direita. Agora podes circular num nível para onde quiseres. Para utilizares uma criatura, avança para ela, vira-te de frente para ela e prime a barra de espaços."
      2:
        image: 'notes/mc_2016_events_2.jpg'
        text: "Se utilizares um ecrã tátil, desliza o dedo para baixo, para a esquerda e para a direita para te moveres. Depois toca no jogo para utilizar o item à tua frente."
      3:
        image: 'notes/mc_2016_events_3.jpg'
        text: "Mas o que acontece quando o utilizas? Em Minecraft, as ovelhas largam lã quando as tosquias, as vacas fogem quando as atinges e os creepers explodem quando te aproximas deles. Estas reações acontecem graças a uma coisa chamada eventos. Os eventos dizem ao teu programa para esperar que algo aconteça. E, quando isso acontece, executam uma ação."
      4:
        image: 'notes/mc_2016_events_4.jpg'
        text: "Até agora, utilizaste um evento. O código que puseste na vaga “quando gerado” é executado quando a tua criatura é criada ou quando o jogo começa. Nos próximos níveis, vais ter novas vagas para eventos como “quando tocado”, que é executado quando tocas na criatura, ou “quando utilizado” para quando utilizas a criatura. Ou, se quiseres que o teu morto-vivo desapareça quando o sol nascer, coloca essa instrução na vaga “quando é dia”."
    mc_2016_spawn:
      1:
        image: 'notes/mc_2016_spawn_1.jpg'
        text: "Nos jogos, gerar significa o mesmo que criar. Neste nível, vamos fazer com que os mortos-vivos se gerem quando o sol se põe. Para isso, vamos utilizar o bloco “quando é noite”."
      2:
        image: 'notes/mc_2016_spawn_2.jpg'
        text: "Como queremos que os mortos-vivos se gerem à noite, vamos adicionar o bloco “gerar morto-vivo” debaixo do bloco “quando é noite”. Logo que são gerados, os mortos-vivos vão executar o código que colocaste na sua vaga de eventos “quando gerado”. Diverte-te a gerar mortos-vivos!"
    mc_2016_congrats:
      1:
        image: 'notes/mc_2016_congrats_1.jpg'
        text: "Parabéns! Aprendeste a utilizar comandos de informática para dar vida ao mundo de Minecraft. Agora, o programador és tu. Desbloqueaste todos os comandos e todas as criaturas. Tu escolhes o que acontece."
      2:
        image: 'notes/mc_2016_congrats_2.jpg'
        text: "Quando acabares de criar o teu jogo, escolhe partilhar para obter uma hiperligação para partilhar com os teus amigos ou para jogar no teu telemóvel. Diverte-te! Estou à espera de jogar a tua versão de Minecraft."
