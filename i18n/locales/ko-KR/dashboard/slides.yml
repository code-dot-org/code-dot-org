ko:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Hour of code 에 오신 것을 환영합니다. 프로그래밍의 재미를 느껴 보세요.
      2:
        image: notes/hoc1_2.jpg
        text: '코드를 작성하기 위해, 드래그 & 드롭 방식의 비주얼 프로그래밍 언어인 블러클리(Blockly)를 사용합니다.'
      3:
        image: notes/hoc1_3.jpg
        text: 대부분의 프로그래밍언어들은 텍스트로 작성해야 하지만, 블러클리는 그래픽 방식의 블럭들을 이용해 프로그래밍 합니다. 각 각의 블럭들은 실제 프로그래밍언어(자바스크립트) 코드와 1:1로 대응합니다.
      4:
        image: notes/hoc1_4.jpg
        text: 화성 탐사선 제어 프로그램과 같이 어디서나 사용될 수 있는, 프로그램들을 만들기 위해 필요한기초적인 개념들과, 컴퓨터과학(정보과학)의 프로그래밍과 알고리즘에 대해 간단히 경험할 수 있습니다.
      5:
        image: notes/hoc1_5.jpg
        text: 프로그램은 컴퓨터가 실행해야하는 명령들의 집합이라고 할 수 있습니다.
      6:
        image: notes/hoc1_6.jpg
        text: 처음 만드는 프로그램의 목표는, 앵그리버드를 움직여 초록 돼지를 잡는 것 입니다.
      7:
        image: notes/hoc1_7.jpg
        text: 왼쪽은 프로그램이 실행되는 미로입니다. 각 퍼즐의 목표들은 미로의 아래쪽에 나타납니다.
      8:
        image: notes/hoc1_8.jpg
        text: 가운데 도구상자는 앵그리버드를 움직이기 위한 명령들이 있습니다. 이 블럭들을 사용해 프로그램의 코드를 만들 수 있습니다.
      9:
        image: notes/hoc1_9.jpg
        text: 오른쪽은, 프로그램을 만들기 위해 도구 상자에서 블럭들을 꺼내어 놓는 곳입니다. 블럭을 삭제하려면, 구석에 있는 휴지통에 버리면 됩니다.
      10:
        image: notes/hoc1_10.jpg
        text: '하나의 블럭은 하나의 명령을 의미합니다. "앞으로 이동하기" 블럭을 오른쪽의 프로그래밍 영역에 가져다 놓은 후, "프로그램 실행"을 누르면, 앵그리버드가 한 칸 앞으로 이동합니다.'
      11:
        image: notes/hoc1_11.jpg
        text: 하나 이상의 동작을 실행하기 위해서, 여러 개의 블럭들을 프로그래밍 작업공간에 드래그해 넣고 서로 붙이면 됩니다. 플래피 버드를 동작시키는 명령어들은 위에서 아래로 순서대로 실행될 것입니다.
      12:
        image: notes/hoc1_12.jpg
        text: '프로그램을 실행시켜 본 후, 수정하거나 다시 실행 하고 싶으면, "처음 상태로" 버튼을 누르면 됩니다.'
      13:
        image: notes/hoc1_13.jpg
        text: 자! 이제, 초록 돼지를 잡으러 갑시다!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: 안녕하세요. 저는 JR 입니다! 카레이싱 경주에서 우승하기 위해서, 카레이서 팀은 반드시 컴퓨터과학(정보과학)이 필요합니다. 컴퓨터과학(정보과학)을 활용해서 자동차를 더 빠르게 달릴 수 있도록, 자동차에서 보내지는 데이터들을 분석해야하기 때문입니다.
      2:
        image: notes/stage5_2.jpg
        text: 이번 퍼즐들에서는, 선을 그리며 돌아다니는 예술가가 되어 보세요.
      3:
        image: notes/stage5_3.jpg
        text: '이것은 "앞으로 이동... 픽셀... " 블럭입니다. 픽셀은 여러 분이 보고 있는 화면을 구성하는 아주 아주 작은 점들입니다.'
      4:
        image: notes/stage5_4.jpg
        text: '이 블럭은 "오른쪽으로 90도 만큼 돌아라!" 라는 명령을 의미합니다. 미로 퍼즐에서 "왼쪽/오른쪽으로 돌기" 블럭을 사용했던 것과 똑같이 돌려줍니다.'
      5:
        image: notes/stage5_5.jpg
        text: 블럭들에 나타나있는 아래쪽 삼각형을 눌러보면, 거리나 각도를 원하는 만큼 지정할 수 있습니다. 새로운 블럭들을 연습하면서 익숙해져 보세요.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: 안녕하세요. 저는 파올라입니다! 이번 퍼즐들에서는 농작물을 기르기 위해서 밭 전체를 고르게 만들어야 하는, 농부 아가씨가 되어 보세요.
      2:
        image: notes/stage9_2.jpg
        text: 여러분들은 농부 아가씨가 흙더미와 구덩이를 모두 없앨 수 있게 도와야 합니다.
      3:
        image: notes/stage9_3.jpg
        text: 새롭게 사용할 수 있는 블럭은, 흙더미를 1번 치우거나 구덩이를 1번 메웁니다.
      4:
        image: notes/stage9_4.jpg
        text: 흙더미의 크기, 구덩이의 깊이가 다르기 때문에 어떤 크기인지 알려주어야 합니다.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: 안녕하세요 저는 케이티입니다. 컴퓨터 과학의 재미있는 점 하나를 이야기하자면 컴퓨터 프로그램이 사람이 원하는데로 상호작용을 하도록 만들 수 있다는 것입니다.
      2:
        image: notes/flappy02.jpg
        text: 컴퓨터나 스마트폰을 클릭하거나 문자를 입력하면 이벤트라는 것이 발생합니다. 이러한 이벤트가 발생했을 때 실행시킬 수 있는 코드들을 마음대로 결정할 수 있습니다.
      3:
        image: notes/flappy03.jpg
        text: '예를 들어, "마우스가 클릭되었을 때, 소리를 출력해라."와 같은 이벤트 핸들러를 사용할 수 있습니다.'
      4:
        image: notes/flappy04.jpg
        text: 플래피버드(FlappyBird) 게임을 들어본 적이 있나요? 이벤트 핸들러들을 이용해서 자기만의 플래피버드 프로그램을 만들어 보도록 할 것입니다.
      5:
        image: notes/flappy05.jpg
        text: 드래그/드롭하는 블럭들은 컴퓨터가 수행해야할 명령들을 의미합니다. 블럭들은 실제 코드로 변환되어 실행됩니다.
      6:
        image: notes/flappy06.jpg
        text: 코드 블럭 편집창을 보면, 연두색 블럭들이 있는데 이것이 이벤트 핸들러입니다.
      7:
        image: notes/flappy07.jpg
        text: '마우스를 클릭 했을 때 날개를 펄럭이려면, "펄럭" 블럭을 이벤트 핸들러에 붙이면 됩니다. 그렇게 하면 마우스를 클릭할 때마다 날개를 펄럭일 것입니다.'
      8:
        image: notes/flappy08.jpg
        text: 이 퍼즐들에서는 연두색의 새로운 이벤트 블럭이 주어지고, 원하는 이벤트가 발생했을 때에 따른 적당한 블럭을 생각해 사용할 수 있습니다.
      9:
        image: notes/flappy09.jpg
        text: 이와 같은 선택 메뉴 화살표가 나타나면 설정을 바꿀 수 있다는 것을 의미합니다. 플래피가 땅에 닿았을 때 소리가 나도록 하는 것과 같은 것이 가능합니다.
      10:
        image: notes/flappy10.jpg
        text: 마지막 퍼즐에서는 자신이 원하는 게임을 만들고 다른 친구들과 공유할 수 있습니다. 재미있게 즐기세요!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: 안녕하세요! 여러분? 저는 마크 입니다. 반복 실행(loop)에 대해 살펴 볼까요? 반복 실행 구조를 사용해, 원하는 작업을 수 천 번... 수 백 만 번, 반복하도록 할 수 있습니다.
      2:
        image: notes/hoc2_2.jpg
        text: '이 퍼즐에서는 앵그리버드가 초록 돼지를 잡을 수 있도록, 5번 "앞으로 이동" 시켜야합니다.'
      3:
        image: notes/hoc2_3.jpg
        text: '새로운 "반복(횟수)" 블럭을 이용해서 해결 할 수 있습니다.'
      4:
        image: notes/hoc2_4.jpg
        text: '"앞으로 이동하기" 블럭 5개를 하나로 붙여 사용하는 대신...'
      5:
        image: notes/hoc2_5.jpg
        text: '"앞으로 이동하기" 블럭 1개를  "반복(횟수)" 블럭 안에 집어 넣고, 반복할 횟수를 숫자로 입력하면 됩니다.'
      6:
        image: notes/hoc2_6.jpg
        text: '그리고 이렇게 하는 것은 매우 중요합니다: 여러 개의 명령 블럭을 "반복(횟수)" 블럭 안에 넣어 실행시킬 수 있기 때문입니다.'
      7:
        image: notes/hoc2_7.jpg
        text: '"반복(횟수)" 블럭을 잘 사용해 보세요!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: '안녕하세요? 저는 크리스 입니다. 저는 마이애미 히트(Miami Heat)에서 일하기 전에, 조지아 공과대학(Georgia Tech)에서 컴퓨터과학(Computer Science) 분야를 공부했습니다. 새로운 블럭인 "반복(~할 때까지)" 블럭을 살펴보도록 하겠습니다.'
      2:
        image: notes/hoc3_2.jpg
        text: 앵그리버드가 초록 돼지를 잡기 위해, 이동해야하는 거리를 모른다면 어떻게 해야 할까요?
      3:
        image: notes/hoc3_3.jpg
        text: '"반복(~할 때까지)" 블럭 안에 "앞으로 이동하기" 블럭을 넣으면, 초록 돼지를 붙잡을 때 까지... 앵그리버드가 앞으로 이동하게 됩니다.'
      4:
        image: notes/hoc3_4.jpg
        text: '이렇게 하는 것은 매우 중요합니다: 이전과 마찬가지로, 여러 개의 블럭들을 "반복(~할 때까지)" 블럭 안에 넣어서, 원하는 작업들을 반복시킬 수 있기 때문입니다.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '안녕하세요? 저는 빌 입니다! 이제 새로운 기초 개념들을 배워 봅시다: "만약" 명령문입니다. 이 명령문을 이용해서, 컴퓨터가 생각하는 것처럼 만들 수 있습니다.'
      2:
        image: notes/hoc4_2.jpg
        text: '"만약"? 이라는 생각은 매우 일상적입니다. "만약"에 밖에 비가 내리면? 우산을 가지고 나가야 합니다.'
      3:
        image: notes/hoc4_3.jpg
        text: '좀비에게, "앞에 길이 있는지", "왼쪽에 길이 있는지"를 먼저 확인하게 한 후, 그 방향으로 회전시킬 수 있습니다.'
      4:
        image: notes/hoc4_4.jpg
        text: '그렇게 만들려면, "만약" 블럭 안에 "왼쪽으로 돌기" 블럭을 넣으면 됩니다.'
      5:
        image: notes/hoc4_5.jpg
        text: '그 다음, "앞으로 이동" 블럭을 그 위에 붙이고, "반복(횟수)" 블럭 안에 넣으면.. 좀비가 움직일 때마다 길을 확인한 다음, 그 쪽으로 움직이게 할 수 있습니다. "반복(횟수)" 명령 안에서, 움직일 때마다 이동 방향을 결정하도록 하는 작업은 매우 중요합니다.'
      6:
        image: notes/hoc4_6.jpg
        text: '컴퓨터과학(정보과학)에서 "만약" 명령은  매우 중요합니다. 제가 처음 만들었던 프로그램 중 하나가, 3*3 크기의 표 안에 O와 X를 번갈아 작성해 넣는 틱택토(tic-tac-toe) 게임이었는데, 그 프로그램에서, 어떤 사람이 이겼는지를 "만약" 명령이 결정해 주었습니다. "만약" 블럭은 이긴 사람을 결정하는 역할을 해 줄 수 있습니다.'
      7:
        image: notes/hoc4_7.jpg
        text: '"만약" 블럭을 재미있게 사용해 보세요!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: '안녕하세요? 저는 살로니 에요. 저는 건강/신약개발 분야에서 컴퓨터과학(정보과학)에서 배운 것들을 활용했어요. "만약.. 아니면" 블럭을 어떻게 사용할 수 있는지 살펴보도록 하죠. "만약" 블럭과 비슷하지만, "아니면" 부분이 더 있어요.'
      2:
        image: notes/hoc5_2.jpg
        text: '"실행" 부분에 "앞으로 이동" 블럭을 넣고, "왼쪽으로 회전" 블럭을 "아니면"이라고 쓰여진 부분에 넣으면, 좀비는 2가지 경우 중에서 하나 만 선택하게 되요. 만약 앞에 길이 있으면, "앞으로 이동"하고, 아니면(즉, 앞에 길이 없으면), "왼쪽으로 회전"을 하게 되요.'
      3:
        image: notes/hoc5_3.jpg
        text: '"만약" 블럭과 똑같이, "만약~아니면" 블럭 안에 "반복" 블럭들을 넣어 좀비를 이동시킬 수 있습니다. "만약-아니면" 블럭을 이용해 회전할 곳인지 아닌지 계속 확인하게 됩니다.'
      4:
        image: notes/hoc5_4.jpg
        text: 자 이제, 좀비들에게 가봅시다!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 하나의 만약-아니면(if-else) 조건/선택실행문은 2가지 중 하나를 반드시 선택/실행하게 됩니다. 자 이제 우리 친구 다람쥐 스크랫(scrat)과 함께 만약-아니면 조건/선택실행문을 어떻게 사용하는지 알아봅시다.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: '이 블럭은 "만약" 블럭과 같은 것처럼 보이지만, 그 아래에 "그렇지 않으면" 부분이 더 있습니다. "실행"이라고 쓰여있는 부분에 "앞으로 이동" 블럭을 넣고, "그렇지 않으면" 부분에 "오른쪽으로 회전" 블럭을 넣으면, 다람쥐 스크랫은 앞쪽에 길이 있으면 앞으로 이동하라는 것을 의미합니다. 앞쪽에 길이 없으면, 스크랫은 오른쪽으로 회전 할 것입니다.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: '조건/선택에 따라 2가지 동작 중 반드시 하나를 결정합니다. 그리고 "만약" 블럭과 거의 똑같습니다, "만약-아니면(if-else)" 블럭안에서 "반복(repeat)" 블럭들을 사용할 수 있습니다.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: 이제 다람쥐 스크랫이 도토리를 잡을 수 있게 도와주세요!
    function:
      1:
        image: notes/stage13_1.jpg
        text: '안녕하세요. 저는 인스타그램(Instagram)에서 엔지니어로 일하고 있는 브리나입니다. 함수는 많이 사용하는 명령들을 원하는  이름으로 정의해 둔 것으로, 필요한 명령 블럭들을 모두 사용할 필요 없이, 미리 정의해 둔 블럭을 하나 만 사용해서 같은 작업들을 실행할 수 있게 해 줍니다.'
      2:
        image: notes/stage13_2.jpg
        text: 이제, 어떤 함수를 만드는 방법을 살펴보겠습니다. 함수가 실행 해야하는 명령들은, 별 모양이 그려져 있는 블럭을 이용해 만들 수 있습니다. 그리고 그렇게 만든 함수의 이름도 지어 넣을 수 있습니다.
      3:
        image: notes/stage13_3.jpg
        text: '별이 그려져 있는 함수 정의 블럭 안에 넣어진 블럭들은, 그 함수가 실행될 때 실행해야 할 명령들을 의미합니다. 따라서, "메우기 5번" 이라는 함수는 "반복(횟수)" 블럭과 "메우기" 블럭으로 채워져(정의되어) 있는 것입니다.'
      4:
        image: notes/stage13_4.jpg
        text: '하지만, 이렇게 만들어(정의해)두기만 해서는 실행하지 않습니다. 함수 분류에서 "메우기 5번" 이라는 함수 블럭을 끌어와서 사용해야만 실행이 됩니다.  '
      5:
        image: notes/stage13_5.jpg
        text: '자 이제, 재미("fun")있게 함수("FUNction")를 사용해 보세요! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '안녕하세요? 마킨데입니다. 이번에는 "반복(~인 동안)" 블럭에 대해서 알아보겠습니다 '
      2:
        image: notes/stage9_6.jpg
        text: '"반복(~인 동안)" 블럭은 어떤 상황에서 계속 반복 해야하는 명령들을 넣을 수 있게 해 줍니다. 반복 해야 하는 조건이 블럭 위에 적혀있고, 그 상황이 참(TRUE)이면 계속 반복시켜줍니다.'
      3:
        image: notes/stage9_7.jpg
        text: '예를 들어, 농부 아가씨가 흙더미 위에 있다면, 계속해서 "치우기 1번"을 수행할 것입니다.'
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: 안녕하세요. 트리나입니다. 저는 픽사(Pixar)에서 일하고 있는데, 슈렉을 비롯한 여러 가지 애니메이션을 만드는 작업을 해 왔습니다.
      2:
        image: notes/stage11_2.jpg
        text: '이건 "카운터" 라는 반복 블럭입니다. 이 카운터 블럭을 사용하면 원하는 작업을 반복할 수 있는데,  반복 할 때마다 어떤 값을 조금씩 바꿔가면서도 이용할 수 있습니다. '
      3:
        image: notes/stage11_3.jpg
        text: '이 예제에서, "카운터" 반복 블럭에는 "카운트 : 50 부터 90까지, 증가 10"라고 쓰여 있여있고, 그 안에 "사각형 그리기" 블럭이 들어있습니다. 변수 분류에서 "카운터" 블럭을 가져와 "길이" 부분에 넣어보세요.'
      4:
        image: notes/stage11_4.jpg
        text: 이렇게 하면, 예술가가 50 픽셀 길이인 사각형 부터 그리기 시작해서, 10 픽셀 크기만큼 늘려 60 픽셀 길이의 사각형을 그리고, 다시 10 픽셀 크기만큼 늘려 70 길이로 그리고.... 그렇게 반복하면서 90을 넘지 않을 때까지 증가시키면서 반복합니다. 그래서 50, 60, 70, 80, 90 길이의 사각형들을 그리게 되는 것이죠.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: 안녕하세요. 징가(Zynga)에서 엔지니어로 일하고 있는 자넷입니다.
      2:
        image: notes/stage15_2.jpg
        text: 크기가 다른 삼각형들을 아주 많이 그려야 한다면 어떻게 해야할까요?
      3:
        image: notes/stage15_3.jpg
        text: 일일이 모두 각각 코드를 작성하는 방법도 있지만, 값을 전달받는 함수를 사용할 수도 있습니다.
      4:
        image: notes/stage15_4.jpg
        text: '그러기 위해, "삼각형 그리기" 함수의 파랑별을 눌러 보세요. 그 다음에 "전달받을값"(input name)을 "전달값"(input) 블럭에 끼워 넣으세요.'
      5:
        image: notes/stage15_5.jpg
        text: '그 다음에 "x"라고 쓰여진 부분을 "길이"(length)라고 수정하면 됩니다. 그렇게 하면 함수에게 전달되는 값을 사용할 수 있게 됩니다.'
      6:
        image: notes/stage15_6.jpg
        text: '그 다음 다시 별을 누르고, 변수 분류에 들어가서 "길이"(length) 블럭을 가져와서 "앞으로 이동"(move forward) 블럭에 넣어주면 됩니다. 이전 블럭은 치워버리면 됩니다.'
      7:
        image: notes/stage15_7.jpg
        text: '함수 분류를 열어 "삼각형 그리기 사용:" 블럭을 가져와 사용하면 됩니다.'
      8:
        image: notes/stage15_8.jpg
        text: 또한, 삼각형의 크기를 원하는데로 바꾸기 위해서, 계산 블럭을 사용할 수 있습니다.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 축하합니다! 여러분은 마지막 퍼즐을 해결함으로서, 복잡한 미로/동굴/터널 속에서도 스스로 길을 찾아 움직일 수 있는 로봇을 만들 수 있게 되었습니다. 좀비, 새, 화성탐사선, 스스로 움직이는 자동차 등에도 모두 적용시킬 수 있겠죠?
      2:
        image: notes/hoc6_2.jpg
        text: '지금까지 사용한 기초적인 개념들은, 매일 사용하는 앱(응용프로그램)들을 만들어 내는 가장 기본적인 방법들입니다. 지금까지 반복 실행을 위한, "반복(횟수)", "반복(~할 때까지)" 명령과 선택 실행을 위한 "만약", "만약....아니면" 명령들에 대해 배워 보았습니다.'
      3:
        image: notes/hoc6_3.jpg
        text: '처음 해 본, Hour of Code 가 재미있으면, http://code.org 를 통해 컴퓨터과학(정보과학)의 기초개념들을 더 배워보세요!  그 과정을 끝내고 나면, 프로그래밍을 위한 기초적인 지식을 모두 배울 수 있게 됩니다. 여러분들은 스마트폰 앱 만들기, 로봇 조종, 게임 만들기 등, 원하는 것을 모두 할 수 있는 기본적인 지식들을 얻게 되는 거에요!'
      4:
        image: notes/hoc6_4.jpg
        text: '컴퓨터과학(정보과학)에서 배우는 지식과 기술들은 모든 사람들의 생활 방식을 바꿔가고 있습니다 : 프로그래밍은 재미있고, 창의적인 과정이며, 누구나 배울 수 있습니다!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: 프레젠테이션 준비 중!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: 안녕하세요, 제 이름은 린지입니다. 저는 모델이고, 연극도하고, 앱들을 직접만들고 있습니다. 얼음의 마술과 아름다움을 탐구하는 안나, 엘사와 함께 코드를 배워보세요.
      2:
        image: notes/frozen1_2.jpg
        text: 스케이트를 타면서 눈송이들과 패턴을 만들고, 겨울왕국을 만들어서 친구들에게 보여주세요.
      3:
        image: notes/frozen1_3.jpg
        text: 이제부터, 코드를 만들어낼 수 있는 기초/개념/원리들을 배우게 될 것입니다. 일반적인 프로그래밍은 텍스트(문자들)를 사용하지만, 여기서는 비주얼 블럭들로 프로그래밍하는 블러클리(Blockly)를 이용해 블럭들을 드래그 앤 드롭해서 프로그램을 만들 수 있습니다. 때때로 처음 배우는 대학생들도 해보는 방법입니다. 하지만, 여러분들도 똑같이 코드를 만들고 있는 것입니다.
      4:
        image: notes/frozen1_4.jpg
        text: 하나의 프로그램은 컴퓨터가 실행해야 할 작업들을 알려주는 명령어들의 집합에 불과합니다. 자 이제, 엘사가 간단한 선을 그리도록 하는 코드, 프로그램을 만들어 봅시다. 이 간단한 방법을 이용해서 나중에 보다 복잡한 패턴들을 만들어낼 수 있게 될 것입니다.
      5:
        image: notes/frozen1_5.jpg
        text: 화면은 3개의 부분으로 나뉘어져 있습니다. 왼쪽 부분은 프로그램을 실행시키고 그 결과를 확인하는 얼음판입니다. 각 단계에서 해결해야하는 목표들은 그 아래에 적혀있습니다.
      6:
        image: notes/frozen1_6.jpg
        text: 가운데 영역은 도구상자이고, 각각의 블럭들은 엘사와 안나가 실행할 수 있는 동작들을 나타냅니다.
      7:
        image: notes/frozen1_7.jpg
        text: '오른쪽의 아무것도 없는 흰 공간은 작업공간(workspace)이라고 부르고, 그 곳에서 프로그램의 코드를 만들게 될 것입니다. 얼음판에서 이리 저리 움직이기 위해, "앞으로 이동"블럭을 사용하게 될 것입니다.'
      8:
        image: notes/frozen1_8.jpg
        text: '여기 "앞으로 이동" 블럭의 의미는 "앞으로 100 픽셀만큼 이동해라" 입니다. "실행하기"를 누르면 어떤 일이 일어날까요? 화면에서 엘사가 어느 정도 만큼 앞으로 움직일 것입니다. 정확히 100 픽셀만큼 움직입니다! 픽셀은 기본적으로 컴퓨터 화면의 그림을 만들어내는 아주 작은 단위의 사각형을 의미합니다.'
      9:
        image: notes/frozen1_9.jpg
        text: '이 퍼즐에서 주어진 다른 블럭은 "오른쪽으로 90도 만큼 회전하라"라는 것을 의미합니다. "오른쪽으로 회전" 블럭을 사용하면 엘사가 오른쪽으로 어느 정도 회전합니다. 원하는 만큼 엘사가 회전하도록 할 수 있습니다. 회전할 각도는 엘사가 바라보고 있는 앞을 기준으로 측정됩니다. 따라서 이것은 90도 회전하는 것이고, 이것은 120도 만큼 회전하는 것입니다.'
      10:
        image: notes/frozen1_10.jpg
        text: 각 블럭에서 아래쪽 화살표 부분을 클릭하면 원하는 픽셀만큼의 거리나, 회전할 각도의 값을 바꿀 수 있습니다.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 안녕하세요! 저는 파올라라고 합니다! 컴퓨터들은 반복적인 작업을 진짜 아주 잘 합니다. 여러분들은 10, 20, 100까지 셀수 있습니다. 하지만 컴퓨터는 10억?, 1조 까지도 셀 수 있습니다. 컴퓨터는 전혀 지루해 하지도 않으면서 몇 초만에 다 셀 수 있습니다. 수를 세던, 그림을 그리던, 다른 어떤 것들을 하던지--컴퓨터들은 수백번~ 수십억번까지 반복해서 할 수 있습니다.
      2:
        image: notes/frozen2_2.jpg
        text: '이러한 것을 프로그래밍에서 루프(loop)라고 합니다. 루프를 이용하면 원하는 코드를 계속, 계속 반복해서 실행할 수 있습니다. 다음 퍼즐에서, 여러분의 목표는 "반복(Repeat)" 블럭을 이용해서 안나가 사각형을 그릴 수 있도록 도와주는 것입니다.'
      3:
        image: notes/frozen2_3.jpg
        text: '"반복(Repeat)" 블럭 안에 넣는 블럭들은 순서대로 실행되면서, 원하는 만큼 반복적으로 실행될 것입니다.'
      4:
        image: notes/frozen2_4.jpg
        text: '사각형을 그리기 위해서, "앞으로 이동" 블럭과 "오른쪽으로 회전" 블럭을 4번 사용할 수 있습니다. 하지만, 컴퓨터에게 "앞으로 이동", "오른쪽으로 90도 회전"을 한 번 실행시켰다면, 똑같은 방법을 4번 반복하라고 하면 매우 편리합니다. 그렇게 하기 위해, "앞으로 이동"블럭과 "오른쪽으로 회전" 블럭을 "반복(Repeat)" 블럭 안에 넣으면 됩니다.'
      5:
        image: notes/frozen2_5.jpg
        text: '"반복(Repeat)" 블럭안에 반복되어야 할 수를 마음대로 넣을 수 있습니다. 넣은 수만큼 반복해서 실행할 것입니다.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: '안녕하세요. 저는 크리스 보쉬(Crish Bosh) 입니다.  저는 프로 농구 선수이면서, 대학에서 코딩을 하고 있습니다.'
      2:
        image: notes/frozen3_2.jpg
        text: 컴퓨터과학(정보과학)에서 가장 중요한 기초/개념/원리들 중 하나는 새로운 명령어들을 정의해서 만들어내는 것입니다. 대부분의 컴퓨터 프로그래밍언어는 기껏해야 100 단어 보다 작은 명령어들만으로 구성되어있습니다. 그리고 실제로 예술적이면서도 마법같은 것은 이러한 블럭들을 이용해, 자신이 원하는 새로운 블럭을 만들어낼 수 있다는 것입니다.
      3:
        image: notes/frozen3_3.jpg
        text: 일단, 한 번만 컴퓨터가 실행해야할 명령들을 컴퓨터에게 알려주었다면, 그러한 명령들을 묶어 새로운 이름을 붙일 수 있고, 그렇게하면 나중에 매우 쉽게 반복시킬 수 있게 됩니다. 명령들을 조합하고 거기에 원하는 이름을 붙이면, 그것을 바로 함수(function)라고 합니다.
      4:
        image: notes/frozen3_4.jpg
        text: 안녕하세요, 저는 제스입니다. 블럭을 사용해 프로그래밍을 할 때 어떤 동작들을 여러 번 반복해야 한다면 함수를 사용해 볼 수 있습니다. 예를 들어, 앞에서 만들었던 사각형을 그리는 코드를 생각해보세요.
      5:
        image: notes/frozen3_5.jpg
        text: '이 코드는 "사각형 그리기"라는 함수로 정의할 수 있습니다. '
      6:
        image: notes/frozen3_6.jpg
        text: 이제, 여러개의 사각형을 만들기 위해, 여러번 사용할 수 있는 새로운 블럭이 만들어졌습니다.
      7:
        image: notes/frozen3_7.jpg
        text: 여러 가지의 많은 단순한 모양들은 보다 복잡한 패턴들을 만들어내는데 사용될 수 있습니다. 다음 퍼즐들에서는 바로 전에 원을 만들기 위해 작성했던 코드를 새로운 함수로 정의하고, 그 함수를 이용해서 서로 다른 크기의 원들을 만들 수 있게 됩니다. 그 함수를 이용해서 복잡하고 아름다운 패턴의 눈을 만들어낼 수 있도록 엘사를 도와주세요.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: 지금까지 여러분들은 애니메이션이나 이야기들을 만들어보았습니다. 그리고 여러분들이 실행시켜보는 다른 모든 것들과 똑같은 것이었습니다. 이제는 여러분들이 실제로 플레이할 수 있는 인터랙티브 게임을 만들 수 있습니다.
      2:
        image: notes/playlab_2.png
        text: '"방향키" 블럭과 "움직이기" 블럭이 있습니다. 이 블럭들을 이용해서 방향키로 캐릭터들을 이리 저리 이동시킬 수 있습니다.'
      3:
        image: notes/playlab_3.png
        text: 캐릭터들이 닿거나, 캐릭터들을 클릭했을 때 어떤 동작들을 시킬 수 있는 블럭들이 있습니다. 그 블럭들을 살펴보고 재미있게 이용해 보세요!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 이제 플레이 랩을 이용해 게임을 만들어보려고 합니다. 좋은 게임은 이야기가 있고, 모든 이야기들에는 주인공 캐릭터들이 있습니다. 이제 캐릭터들을 마녀, 외계인, 동물들로 설정하고 말하고, 움직이고 서로 서로 같이 이야기/반응하게 할 수 있습니다. 이 튜토리얼을 마칠 때 쯤이면 여러분들은 처음부터 시작해서 게임을 만들고 친구들에게 공유할 수 있게 될 것입니다.
      2:
        image: notes/playlab_intro_2.png
        text: 화면은 3개의 부분으로 구분해 볼 수 있습니다. 왼쪽의 공간은 프로그램이 실행되는 공간입니다. 각 단계에서 해결해야할 목표들은 그 아래에 작성되어있습니다.
      3:
        image: notes/playlab_intro_3.png
        text: 가운데 공간은 도구 상자이며, 이 블럭들은 각각 어떤 코드 조각을 의미합니다. 오른쪽의 흰색 빈 공간은 작업공간(workspace)이라고 부르는 곳으로 그곳에서 프로그램을 만들게 됩니다.
      4:
        image: notes/playlab_intro_4.png
        text: '처음 시작하기 위해서, 사용할 블럭들을 "실행하면" 이라는 주황색 블럭에 붙이면 됩니다. 필요한 여러개의 블럭들을 함께 사용하려면 드래그해서 노란색 줄이 보일 때까지 끌여당긴 후 붙이면 됩니다.'
      5:
        image: notes/playlab_intro_5.png
        text: '이 첫번째 퍼즐에서, 캐릭터는 펭귄이고 말하기(say) 블럭을 이용해 "Hello!"라고 말하도록 만들것입니다. 실행하면 블럭에 붙인 후 "Hello"라고 입력하면 됩니다. 그리고 오른쪽으로 이동, 왼쪽으로 이동 블럭을 이용해 펭귄을 움직이도록 할 수도 있습니다. 블럭을 붙여본 후에 실행하기 버튼을 눌러 어떻게 실행되는지 살펴보세요.'
      6:
        image: notes/playlab_intro_6.png
        text: 시작하고나서 마지막 쯤에는, 여러분이 직접 여러가지 캐릭터들을 이용해 게임을 만들고, 표정을 바꾸게하고, 점수를 올리거나 서로 파이어볼을 쏘거나 사라지게 할 수 있습니다. 게임을 어떻게 만들지는 여러분의 생각에 달려있습니다. 자유롭게 만들어보세요.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 이제, 모든 게임 프로그래머들이 매일 매일 사용하는 것들을 배워보도록 하겠습니다. 이벤트라고 합니다. 하나의 이벤트는 어떤 일이 일어났는지 여러분이 만든 프로그램에게 알려줄 수 있습니다. 따라서, 어떤 일(이벤트)가 일어났을 때 어떤 동작을 실행하게 할 수 있는 것입니다.
      2:
        image: notes/playlab_events_2.png
        text: 여러 가지 이벤트들 중 몇가지 예시는, 마우스 클릭, 방향 버튼, 화면 터치 등 입니다.
      3:
        image: notes/playlab_events_3.png
        text: '이제, 캐릭터를 클릭했을 때 지구인들에게 인사하는 우주 로봇을 만들어보도록 하겠습니다. "클릭하면"이라는 블럭을 이용하고 "말하기"블럭을 붙이면 됩니다. 플레이어가 우주 로봇을 클릭하면, "클릭하면" 블럭에 붙어있는 모든 것들이 순서대로 실행될 것입니다. 여러분의 외계인 캐릭터가 어떻게 동작할까요?'
      4:
        image: notes/playlab_events_4.png
        text: '"방향키 누름"블럭이 있습니다. 이 블럭들에 "이동하기" 블럭을 붙이면 방향키를 눌렀을 때, 위로, 아래로, 왼쪽으로, 오른쪽으로 이동시킬 수 있습니다. 한 단계씩 여러분이 만든 게임이 더 인터랙티브하게 변화해 갈 것입니다.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: '이번에는 "무한 반복"블럭입니다. 이 블럭의 안에 넣은 블럭들은 게임이 실행되는 동안 계속해서 무한히 실행될 것입니다.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: '만약에 캐릭터를 어떤 동작에 대해서 반복적으로 실행하게 하려면, 반복시킬 블럭들을 "무한 반복" 블럭 안에 넣으면 됩니다.'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: 이 퍼즐에서, 우리의 목표는 마법사 캐릭터가 왕국의 경계를 순찰하도록 하는 것입니다. 왼쪽에서 오른쪽으로 계속 반복해서 움직이도록 하는 것입니다. 반복 실행 명령어를 배우고 이용하면, 여러분이 만든 게임에서 일일이 모두 반복적으로 작성할 필요가 없이, 한 번만 작성한 후에 계속해서 여러번 사용할 수 있게 되는 것입니다.
