ko:
  data:
    long_instructions:
      "'pre-assessment survey q25A'": "그렇다면 현재 컴퓨터 과학 수업을 받기 전에 어떤 컴퓨터 과학 과정을 들었습니까?\n"
      2-3 Artist 1 new: "안녕하세요. 저는 화가입니다. 여러분들이 코드를 작성하면 원하는 모든 것들을 그릴 수 있습니다.\n블록들을 사용해서 그림의 회색 선들을 그려보세요.(각 선들은 100 픽셀 길이입니다.)\\r\n\\r\n"
      2-3 Artist 11: '각 변의 길이가 100 픽셀인, 8각형을 만들어 정지 표지판을 만들어보세요.  '
      2-3 Artist 12: "눈을 완성하기 위해서 원을 그려보세요.\n\\r\n\\r\n화가가 한 번에 1도 만큼씩 회전한다면 원을 그리기 위해서 몇 번을 반복해야할까요? "
      2-3 Artist 2 new: 이 집의 벽은 아직 완성되지 않았습니다. 각 측면의 벽은 100이지만, 완성되지 않은 벽은 50입니다. 벽을 완성해보세요.
      2-3 Artist 3.4: "점프 블록은 선을 그리지 않고 이동하게 해줍니다.\n앞으로 점프, 앞으로 이동하기 블록들을 이용해서 파선을 그려보세요."
      2-3 Artist 3new: "빨간 모자의 높이는 100픽셀입니다.\n조금 더 낮은 70픽셀 높이의 검은 모자를 그려보세요.\\r\n\\r\n(주의: 각 모자의 너비는 50픽셀입니다.)"
      2-3 Artist 4: 고양이를 위한 집을 완성해주세요.
      2-3 Artist 6: "이 집에는 지붕이 필요합니다! 삼각형을 그려주세요. \\r\n\\r\n힌트:\n세 변의 길이는 모두 같습니다.\\r\n\\r\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"\nwidth=\"300\"/>"
      2-3 Artist 7: "교실의 모두가 창밖을 볼 수 있도록, 학교의 창문들을 완성해주세요. \\r\n\\r\n각 창 틀의 길이는 25 픽셀 입니다. "
      2-3 Artist 8: "헛간 만들기 \\r\n2개의 같은 크기 사각형으로 헛간을 나누어 각 동물들의 방을 만드세요 \\r\n힌트:\n사각형은 가로 200픽셀, 세로 100픽셀 \\r\n이 퍼즐을 풀기 위한 다양한 방법이 있습니다. "
      2-3 Artist 9 NEW: 이 연을 완성해주세요.
      2-3 Artist 9 REPLACEMENT: 계단 그리기 완료!
      2-3 Artist 9: 이 연을 완성해주세요.
      2-3 Artist Assessment 1: "**평가**  마지막 칸 그리기를 완료하세요. (가로 25, 세로 25)"
      2-3 Artist Debugging 1: "모자의 너비는 50픽셀이어야 합니다. \\r\n수정할 수 있나요? \\r\n\\r\n<br/>\\r"
      2-3 Artist Debugging 10: "내 게임 콘트롤러위의 방향패드의 폭이 너무 좁습니다. \\r\n\\r\n10픽셀 더 넓게 할 수 있나요? \\r\n무엇이 잘못 되었는지 보기 위해 먼저 코드를 실행하세요. \n"
      2-3 Artist Debugging 11: |-
        내 눈송이가 부서지고 있어요!\r
        \r
        어디가 잘못 된 것 일까요?
      2-3 Artist Debugging 2: "고양이 수염을 그리는 코드에 문제가 있습니다.\n\\r\n\\r\n고양이 수염의 길이가 같도록 코드를 고쳐주세요."
      2-3 Artist Debugging 3: "내 보트에 구멍이 났어요!\\r\n\\r\n선의 끝을 맞추기 위해서는 어떻게 해야할까요?"
      2-3 Artist Debugging 5: "다리와 발을 그리는 코드에 오류가 있습니다.\\r\n\\r\n어떻게 고쳐야 할까요?"
      2-3 Artist Debugging 6: |-
        다리가 없는 의자에 앉아있는 것 같아요.
        \r
        \r
        코드를 수정해서 나머지 의자 다리를 그려주세요.
      2-3 Artist Debugging 7: |-
        C가 왼쪽으로 그려지는 코드 같습니다!\r
        \r
        C를 정확하게 그리려면 어떻게 해야할까요?
      2-3 Artist Debugging 8: |-
        바람개비가 완성되지 않았습니다. 완성하려면 얼마나 반복해야 할까요?
      2-3 Artist Debugging 9: |-
        뭔가 이상해요!\r
        \r
        줄기를 그리는 코드가 틀렸네요. 화가가 줄기를 정확히 그리려면 어떻게 해야할까요?
      2-3 Artist Debugging Assessment 1: "**평가**\\r\n왜 이 사각형의 각면이 75픽셀로 될까요?\\r\n\\r\n코드의 어느부분이 잘못되었나요?"
      2-3 Artist Free Play: '자유 플레이: 원하는 것을 그려보세요.'
      2-3 Artist Functions 1 a: "나는 좀비 예술가. 나는 그림그리기를 좋아해요!\n\\r\n\\r\n사각테두리 안경을 그리도록 도와주세요 \\r\n안경알 사이의 다리는 안경알의 너비보다 25픽셀 작습니다. 즉 100픽셀입니다. "
      2-3 Artist Functions 1: "나는 좀비 예술가. 나는 그림그리기를 좋아해요!\n\\r\n\\r\n사각테두리 안경을 그리도록 도와주세요 \\r\n안경알 사이의 다리는 안경알의 너비보다 25픽셀 작습니다. 즉 100픽셀입니다. "
      2-3 Artist Functions 10: "**Freeplay** 2개의 함수(큰기어 그리기, 작은 기어그리기)가 있습니다. \\r\n\\r\n기계의 내부 그리기에 두 함수를 사용하세요\n"
      2-3 Artist Functions 11 a: "우리는 `사각형 그리기` 함수의 이름을 `육각형 그리기`로 바꾸었지만,\n이 함수는 아직도 사각형만 그립니다! \\r\n\\r\n`육각형 그리기` 함수를 수정해서 각 변의 길이가 50픽셀인 육각형을 그려보세요.\n\\r\n\\r\n새 함수를 사용해서 이미지를 그려보세요!"
      2-3 Artist Functions 11.5: "똑같은 '육각형 그리기' 함수가 있습니다. \\r\n\\r\n반복할 때마다 60도씩 회전하는 프로그램을 6번 반복시키면 어떻게 될까요?"
      2-3 Artist Functions 11: "우리는 `사각형 그리기` 함수의 이름을 `육각형 그리기`로 바꾸었지만,\n이 함수는 아직도 사각형만 그립니다! \\r\n\\r\n`육각형 그리기` 함수를 수정해서 각 변의 길이가 50픽셀인 육각형을 그려보세요.\n\\r\n\\r\n새 함수를 사용해서 이미지를 그려보세요!"
      2-3 Artist Functions 12 Mike: "함수를 사용하면 복잡한 모양을 가진 그림을 그리기에 아주 좋습니다. \\r\n\\r\n\"꽃 그리기\" 함수를 사용해서 나머지 꽃 묘목 상자를 채워주세요.\\r\n꽃들은 100 픽셀 간격으로 놓여져 있습니다."
      2-3 Artist Functions 12 a: "함수를 사용하면 복잡한 모양을 가진 그림을 그리기에 아주 좋습니다. \\r\n\\r\n\"꽃 그리기\" 함수를 사용해서 나머지 꽃 묘목 상자를 채워주세요.\\r\n꽃들은 100 픽셀 간격으로 놓여져 있습니다."
      2-3 Artist Functions 12: "함수를 사용하면 복잡한 모양을 가진 그림을 그리기에 아주 좋습니다. \\r\n\\r\n\"꽃 그리기\" 함수를 사용해서 나머지 꽃 묘목 상자를 채워주세요.\\r\n꽃들은 100 픽셀 간격으로 놓여져 있습니다."
      2-3 Artist Functions 2: "함수들로 새로운 블록들을 만들어낼 수 있습니다! \\r\n\\r\n\"사각형 그리기\" 라는 함수에 사각형 1개를 그리는 블록들을 넣었습니다.\n\"사각형 그리기\" 함수를 이용해서 안경을 그려보세요. \n\\r\n\\r\n사각형들은 75 픽셀 만큼 떨어져 있습니다."
      2-3 Artist Functions 3: "한 변의 길이가 115 인 사각형을 그려 더 큰 안경을 만들어보세요. \\r\n\\r\n사각형들은 이제 45 픽셀 만큼 떨어져 있습니다."
      2-3 Artist Functions 4: 이제, 함수를 "반복" 블록 안에 넣고 3개의 사각형을 그려보세요.
      2-3 Artist Functions 9: "여기 눈송이의 함수가 있습니다. 이것을 응용해서 겨울풍경을 만들어보세요! 여기에는 풀어야 할 퍼즐이 없습니다. 자유롭게 놀아보세요!\\r\\rfunction"
      2-3 Artist Loops 1: "셀을 완성하기 위해서, 한 변의 길이가 100 픽셀인 육각형을 만들어보세요.\n생각해보면, 60 도씩 회전하면 됩니다!"
      2-3 Artist Loops 2: 이제 반복 블럭을 사용해 셀을 조개로 만들어 봅니다.
      2-3 Artist Loops New 1: |
        로봇의 머리 부분을 그려봅시다! 
        한 변의 길이가 100 픽셀인 사각형을 그릴 수 있나요?
        \r\r
        <br/>\r

      2-3 Artist Loops New 10: 이제 여러 개의 'V'자를 연결해서, 반복 실행 구조 안에 넣어보세요.
      2-3 Artist Loops New 11: "뭔가 멋진 작업을 할 시간이에요!\n\\r\n\\r\n마지막 퍼즐에서 만든 코드를 새로 구성할겁니다. 이번에는, 루프 안에서 왼쪽으로 30도 돌게 추가하세요. 이제 8번이 아니라 24번 이걸 반복하세요."
      2-3 Artist Loops New 12: "한 변의 길이가 100 픽셀인 다이아몬드를 그려보세요.\n"
      2-3 Artist Loops New 13: "우리는 몇 개의 코드(회색) 를 가지고 하나의 다이아몬드를 만들어 볼 거에요.\\r\\r 재밌는 패턴을 만들기 위해 회색 코드를 반복해보세요!"
      2-3 Artist Loops New 14: "다이아몬드 코드를 살펴보고 어떤 패턴들을 만들어낼 수 있는지 생각해보세요.\\r\n\\r\n각도가 얼마나 변경되는지와 반복 횟수가 얼마나 되는지 변경해가며 테스트 해보세요."
      2-3 Artist Loops New 15: |+
        원하는 그림을 그려 보세요.\r
        <br/><br/>\r
        \r

      2-3 Artist Loops New 2: |-
        방금 풀었던 퍼즐과 같지만, 이번에는 한 개의 '앞으로 직진' 블럭과 한 개의 '돌기' 블럭만 사용할 수 있습니다.\r
        \r
        이번 퍼즐을 해결하기 위해 '반복' 블럭을 사용할 수 있나요?
      2-3 Artist Loops New 9: 화살 그림을 완성하기 위해서(양쪽 모두 50 픽셀인) 간단한 V 자를 그려보세요.
      2-3 Artist Nested Loops 1: |+
        이전에 반복(loop) 명령문을 이용하여 그렸는데 이번에는 반복(loop) 명령문 안에 반복(loop) 명령문을 추가 할 것입니다.\r
        \r
        패턴을 그리기 위해 이 코드 전체 '반복' 블럭에 넣으세요.\r
        \r
        <br/>\r
        \r

      2-3 Artist Nested Loops 10: 패턴을 완성시키기 위해서 이 코드를 12번 반복해 보세요.
      2-3 Artist Nested Loops 11: "이 코드를 4번 반복해서 패턴을 완성해 보세요.\n원을 한 번 그리고 나면, 90도 만큼 회전하세요."
      2-3 Artist Nested Loops 12: 이 코드를 12번 반복시켜서 곱슬곱슬한 그림을 그려보세요.
      2-3 Artist Nested Loops 2: "삼각형을 6번 반복해 그리세요. \\r\n\\r\n삼각형을 한 번 그리고 난 후에, 다음 삼각형을 위해 60도씩 회전해야 합니다."
      2-3 Artist Nested Loops 3: "이 패턴을 그리려면 삼각형을 12번 반복해서 그려야 합니다. \\r\n\\r\n원 중심의 각(360 도) 을 그리려고 하는 모양의 개수(12 개) 로 나누면,\n모양을 한 번 그린 후 몇 도를 회전시켜야 하는지 알 수 있습니다."
      2-3 Artist Nested Loops 4: "이 다이아몬드 모양을 12번 반복시켜서 꽃을 그려보세요!\\r\n\\r\n힌트: 12 개의 다이아몬드는 12 개의 삼각형을 그렸던 것과 같은 방법으로 만들면 됩니다. \\r \n한 번 모양을 그린 후에 얼마나 회전시켜야 할까요?"
      2-3 Artist Nested Loops 5: "이 건물의 창들을 반복문 안에 반복문을 이용해 채워보세요. \\r\n\\r\n창들은 20 픽셀 크기로 20 픽셀 만큼 씩 떨어져 있습니다."
      2-3 Artist Nested Loops 6: "이 공룡은 꼬리에 8개의 뾰족한 뿔이 나 있습니다.\\r\n\\r\n각 뿔의 길이는 30 픽셀입니다.\n\\r\n삼각형을 8번 반복해 그려주세요. 1개를 그리면 그 다음에는 앞으로 이동해야 합니다.\\r"
      2-3 Artist Nested Loops 7: "이 삼각형을 10번 반복시켜서 태양을 그려보세요. \\r\n\\r\n삼각형 1개를 그리고 난 후에는 이동하고 회전해야 합니다. \\r\n\\r\n원의 각도 수를 삼각형 수로 나눔으로써 회전 각도를 알 수 있습니다."
      2-3 Artist Nested Loops 8: "그림에 잔디를 그려보세요.\n\\r\n\\r\n잔디 1개는 50 픽셀 만큼 씩 떨어져 있습니다."
      2-3 Artist Nested Loops 9: "이 그림에 꽃을 더 그리면 그림이 완성될 것입니다. \\r\n\\r\n꽃을 그리기 위해서 다이아몬드를 12번 반복시켜 그려보세요."
      2-3 Artist Nested Loops Free Play: "자유 플레이시간입니다.\n중첩 반복을 이용해서 원하는 것을 그려보세요."
      2-3 Bee Conditionals 11: "뭐가 있을까요!\\r\n\\r\n꽃밭을 돌아다니면서 꽃꿀이 있는 꽃들에서만 꽃꿀을 모을 수 있게 도와주세요. "
      2-3 Bee Conditionals 13: |-
        와 이번에는 여러 가지들이 있네요!\r
        \r
        여러분들이 배운 것들을 이용해 꽃꿀을 모아 꿀을 만들어보세요.
      2-3 Bee Conditionals 14: "이제 모든 것을 함께 사용해 봅시다!\\r\n\\r\n지금까지 배운 것들을 이용해서 최소한의 블록들로 꽃꿀이 있는 꽃에서 꽃꿀을 모아 보세요.\\r\n\\r\n마지막에는 꿀을 만들어야 합니다."
      2-3 Bee Conditionals 15: "계단 모양의 패턴은 많이 익숙합니다. \\r\n\\r\n최소한의 블록들만 사용해서 꽃꿀이 있는 꽃에서만 꽃꿀을 모아보세요."
      2-3 Bee Conditionals 2: "저는 배고픈 꿀벌입니다! \\r\n\\r\n\\r\n최소한의 블록만 사용해서 꽃꿀을 모두 모을 수 있게 도와 주세요."
      2-3 Bee Conditionals 3: "저 꽃꿀들을 보세요!\\r\n\\r\n최소한의 블록들을 사용해서 꽃꿀을 모아 꿀을 만들어보세요.  "
      2-3 Bee Conditionals 5: "이 마술 자주색 꽃들은 변화 합니다!\\r\n\\r\n퍼즐을 실행 할때마다 1개의 꽃꿀을 가지고 있을 수도 있고 없을 수도 있습니다.\n하지만 꽃꿀을 가지고 있는지는 코드를 실행전에 알 수 없습니다.\\r\n\\r\n꽃꿀이 없는 자주색 꽃에서 꽃꿀을 모으지 않도록 주의하세요.\\r\n먼저 '꽃꿀이 있으면' 블록을 이용해서 꽃꿀의 양이 1인지(=있는지) 확인해야합니다."
      2-3 Bee Conditionals Assessment 1: "형성평가: 꽃꿀을 모두 모아주세요.\\r\n자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요."
      2-3 Bee Debugging 1: |-
        이 블록들에는 오류들이 있어서 짜증이 나네요!\r
        \r
        모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류(들) 을 수정해주세요.
      2-3 Bee Debugging 10: "이 블록들에는 오류들이 있어서 짜증이 나네요!\n\\r\n\\r\n모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류(들) 을 수정해주세요."
      2-3 Bee Debugging 2: |-
        문제점을 찾을 수 있으세요?\r
        \r
        모든 꽃꿀을 모을 수 있도록 오류(들) 을 수정해주세요.
      2-3 Bee Debugging 3: |-
        으, 골치아프네요!\r
        \r
        모든 꽃꿀을 모을 수 있도록 오류(들)을 수정해주세요.
      2-3 Bee Debugging 5: "꽃들이 맛있어보여요! \\r\n\\r\n모든 꽃꿀들을 모을 수 있도록 오류(들) 을 고쳐주세요.\\r\n코드 확인시 단계별 또는 실행을 사용할 수 있습니다."
      2-3 Bee Debugging 6: |-
        달콤한 도전이네요! \r
        \r
        모든 꽃꿀들을 모을 수 있도록 오류(들)을 고쳐주세요.
      2-3 Bee Debugging 9: |-
        "벌벌" 떨지 마세요! \r
        \r
        모든 꽃꿀들을 모아 꿀을 만들 수 있도록, 이 프로그램의 오류들을 고쳐야 합니다.
      2-3 Bee Debugging Assessment 1: |-
        형성평가: 이제 여러분들이 아는 것들을 보여줄 시간입니다!\r
        \r
        모든 꽃꿀들을 모아 꿀을 만들 수 있도록 오류(들) 을 고쳐주세요.
      2-3 Bee Functions 1: "함수들은 어떤 작업을 수행할 때 사용하는 블럭들의 모임이라고 할 수 있습니다.\\r\n\\r\n\"꽃꿀 2번 모으기\" 를 이용해서 각 꽃들에서 꽃꿀을 모아보세요."
      2-3 Bee Functions 10: "퍼즐을 실행 할때마다 자주색 꽃들에는 꽃꿀이 1개 또는 0 개 있을 수 있습니다.   \\r\n\\r\n자주색 꽃에 꽃꿀이 있을 때에만 꽃꿀을 모으는 함수를 만들어보세요."
      2-3 Bee Functions 2: "함수들은 어떤 작업을 수행하는데 블럭들의 모임이라고 볼 수 있습니다.  \\r\n\\r\n\"5번 모으기\" 함수를 이용해서 한 번에 5개의 꽃꿀을 모아보세요."
      2-3 Bee Functions 4: "\"움직여서 꽃꿀 얻기\" 함수는 꿀벌이 회전하고, 꽃꿀을 얻은 후 원래의 위치로 돌아오도록하는 함수입니다.  \\r\n\\r\n이 함수를 사용해서 모든 꽃꿀을 모아보세요."
      2-3 Bee Functions Assessment 1: "형성평가: 주어진 함수를 이용해서 각 꽃에서 꽃꿀을 모아보세요."
      2-3 Bee Functions Assessment 2: "형성평가: 꿀벌이 방향을 돌려 앞으로 이동해서 3개의 꿀을 만들고, 다시 돌아와 원래 방향으로 회전하는 함수를 만들어보세요."
      2-3 Bee Loops 1: |-
        저 꽃들이 달콤해 보여요!\r
        \r
        최대한 적은 블록들을 사용해 각 꽃들에서 꽃꿀을 모아보세요.
      2-3 Bee Loops 13: "형성평가: 최대한 적은 블록들을 사용해서 꽃꿀을 모아보세요."
      2-3 Bee Loops 3A: 모든 꽃꿀을 모으기 위해, 반복 구조를 사용해보세요.
      2-3 Bee Loops 3B: 반복 블록을 사용해서, 꽃꿀을 모두 모으고 꿀을 만들어보세요.
      2-3 Bee Loops 4: |-
        꿀벌이 엄청 바쁘네요!\r
        \r
        최대한 적은 블록들을 사용해서
        꽃꿀을 모으고 꿀을 만들 수 있도록 꿀벌을 도와 주세요.
      2-3 Bee Loops 4A: "이 퍼즐을 해결하려면 몇 번 반복해야할까요? \\r\n\\r\n반복 실행 구조는 매우 편리합니다!\n반복 실행 구조를 사용해서 최대한 적은 블록들로 해결해 보세요."
      2-3 Bee Loops 5: "이 길의 모양은 다른 것들과 다릅니다. \\r\n\\r\n최대한 적은 블록들을 사용해서 꽃꿀을 모두 모아보세요."
      2-3 Bee Loops 7: "와 꽃밭이 이쁘네요!\\r\n\\r\n7 블록보다 적은 블록을 사용해서 꿀벌이 모든 꽃들을 살펴볼 수 있게 해주세요."
      2-3 Bee Loops 8: "퍼즐을 실행 할때마다 자주색 꽃들이 몇 개의 꽃꿀을 가지고 있는지 알 수 없습니다. \\r\n\\r\n\"꽃꿀이 있으면\" 반복 블록을 이용해서 모든 꽃꿀을 모아보세요. \\r\n\\r\n이 반복 구조는 조건이 참인 동안 계속 반복됩니다. 이 경우에서는 '꽃꿀의 개수>0' 인 동안 반복되는 것입니다."
      2-3 Bee Loops Assessment 1: "형성평가: '~인 동안' 반복 구조를 이용해서, 이 꽃에서 꽃꿀을 모두 모아보세요."
      2-3 Maze 1: "나쁜 돼지를 잡을 수 있게 도와주세요!\\r\n\\r\n \"실행하면\" 블록 아래에 \"앞으로 이동\" 블록들을 여러 개 쌓아 붙인 후, \"실행\"을 눌러보세요.\n"
      2-3 Maze 12 - One Move Block: |-
        평균 돼지를 잡아! 이번에는 한개의 '앞으로' 블럭만 사용할 수 있습니다...\r
        \r
        아, 가까워 보이네요.
        거기에 도착하기 위해 다른 블럭들이 보이나요?
      2-3 Maze 15: 이 퍼즐에서는 두 개의 반복(횟수) 블록을 이용하면 블록들을 최소한으로 사용할 수 있습니다.
      2-3 Maze Loops 18: "블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\\r\n\\r\n반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요."
      4-5 Artist 10: "\"실행\"을 눌러 코드를 확인하세요. 그 다음에\n그림을 완성하기 위해서 충분히 반복시키세요. 색은 그때마다 바뀔 것입니다."
      4-5 Artist 2: 사각형을 완성할 수 있도록 '반복' 블록으로 이 코드를 반복시켜주세요.
      4-5 Artist 5: 좀비가 주어진 루프를 이용하여 이 그림을 정확하게 완성하도록 하려면 "???"를 무엇으로 바꿔야 할까요?
      4-5 Artist 6: "이 정삼각형의 안쪽 각도는 60, 60, 60 도 입니다.\n각 변의 길이는 200 픽셀입니다. 그림을 완성해 보세요."
      4-5 Artist Free Draw 1: "자유롭게 그려보세요!\n무엇이든지 그리고 싶은 것을 그려보세요."
      4-5 Artist Patterns 1: |-
        반복 구조를 이용해서 이 사각형을 그려주세요. \r
        \r
        각 변은 20 픽셀 입니다.
      4-5 Artist Patterns 12: "반복하는 것을 복사하는데 오른쪽으로 돌기를 왼쪽으로 돌기로 바꾸면 어떻게 될까요? \\r\n\\r\n이 웨이브를 만들기 위해서 반복해 주세요."
      4-5 Artist Patterns 13: "그림 틀을 만들기 위해서 전체를 4번 반복시켜 보세요. 모서리에 주의하세요 - 90도만 돌면 안됩니다! \\r\n\\r\n3도씩 60번 돌면 반 원을 만들 수 있습니다. 이 코드 블록들 중 어느 것으로 모서리에 사분원(1/4 원) 을 만들 수 있을까요?"
      4-5 Artist Patterns 3: 좀더 어려운 것을 해보아요! 반복 구조 안에 반복 구조를 넣어봤는데, 다음 줄을 그리려면 화가를 다시 이전 위치로 돌려 놓아야 해요. 전체 격자를 그리기 위해서 가장 바깥쪽 반복의 끝에 어떤 블록들을 놓아야 할까요?
      4-5 Artist Patterns 8: 반복 구조를 사용해서 각 변의 길이가 40 픽셀이면서 내각의 크기가 60 도인 육각형을 만들어 보세요.
      4-5 Artist Patterns 9: "주어진 코드를 3번 반복시켜서 모든 줄을 그려보세요. \\r\n\\r\n각각의 6각형들은 왼쪽 끝에서 오른쪽 끝까지의 너비가 80픽셀입니다."
      4-5 Artist Patterns Free Play: 마음대로 그리기 - 원하는 패턴을 직접 만들어보세요.
      4-5 Bee Conditionals 2: "구름들이 더 많습니다! \\r\n\\r\n모든 구름 아래에 꽃들이 있는 것은 아니기 때문에 구름 아래에 꽃이 숨어있는지 살펴보고 꽃꿀을 모아야 합니다. \\r\n\\r\n기억하세요: 모든 구름들 아래에 똑같은 것들이 숨겨진 것은 아닙니다!"
      4-5 Bee Conditionals 5: |-
        이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다.\r
        \r
        '만약/그렇지않으면' 블록을 이용해서 꽃이면 꽃꿀을 모으고\r
        아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요.
      4-5 Bee Conditionals 6: "이 자주색 꽃에는 꽃꿀이 1, 2, 3개 있을 수 있습니다. \\r\n\\r\n이 \"만약\" 블록은 다른 \"만약/아니면\" 블록과 결합되어서, \"만약/(아니고 만약/모두 아니면)\" 명령을 만들어낼 수 있습니다. \n\\r\n\\r\n꽃꿀의 양을 모르는 경우에도 꽃꿀을 모두 얻을 수 있게 해보세요."
      4-5 Bee Conditionals 7: "자주색 꽃은 꽃꿀이 3, 2, 1 중 하나입니다. \n\\r\n\\r\n\"자주색 꽃 확인\" 함수를 완성하고 이용해서 꽃의 모든 꽃꿀들을 모을 수 있도록 해보세요."
      4-5 Bee Conditionals 8: "\"꽃을 확인하고 꿀 만들기\" 함수의 내부를 완성해 주세요. \\r\n\\r\n자주색 꽃의 꽃꿀이 3, 2, 1 인 경우에는 모든 꽃꿀을 모으세요. \\r\n그 후에 앞으로 이동해서 꿀을 만들면 됩니다."
      4-5 Bee Conditionals Assessment 1: "**형성평가:** 이 구름은 한 개의 꽃꿀을 가지고 있는 꽃 아니면 한 개의 꿀을 필요로 하는 벌집을 숨기고 있습니다. \\r\n\\r\n\"꽃꿀을 모으거나 꿀 만들기\" 함수를 완성하고 나서 그 함수를 사용하여 꽃꿀이나 꿀을 모으도록 만들어 주세요.\\r\n"
      4-5 Bee Debugging 1: "이 블록들이 왜 안되는지 진짜 잘 모르겠어요. \\r\n\\r\n고쳐주세요."
      4-5 Bee Debugging 6: "자주색 꽃에는 꽃꿀이 얼마나 있는지 알 수가 없습니다. \\r\n\\r\n퍼즐이 실행될 때마다 꽃에서 모든 꽃꿀을 뽑을 수 있도록, 블록들을 수정해보세요."
      4-5 Bee Nested Loops 4: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      4-5 Bee Nested Loops Assessment 1: "**형성평가:** 반복 구조들을 사용해서 모든 꽃꿀을 모으고 꿀을 만드세요."
      4-5 Maze 9: "\"~할 때까지 반복\" 이라고 부르는 새로운 블럭이 있습니다. \\r\n이 블록은 좀비가 해바라기에게 갈 때까지 명령을 반복하도록 해줍니다. \\r\n\\r\n\"~할 때까지 반복\" 블록을 사용하고 가능한 적은 블록으로 퍼즐을 해결해 보세요."
      4-5 Maze Conditionals 1: "\"~할 때까지 반복\" 블록을 이용해서,\n좀비를 해바라기로 이동시켜주세요."
      4-5 Maze Conditionals 10: "블럭을 3개 더 붙여서, 좀비가 좀 더 복잡한 미로를 빠져나갈 수 있도록 도와주세요.\\r \n\\r \n성공한다면 아무리 크고 복잡한 미로라고 하더라도 거뜬히 통과할 수 있을거예요."
      4-5 Maze Conditionals 2: "\"~할 때까지 반복\" 블록을 이용해서,\n좀비를 해바라기로 이동시켜주세요."
      4-5 Maze Conditionals 3: "\"만약\" 블록을 이용하면, 언제 돌아야 할지 판단할 수 있습니다. \\r\n"
      4-5 Maze Conditionals 4: 음... 이번이 마지막 퍼즐입니다! "만약" 블록과 "반복" 블록을 함께 사용해야 합니다.
      4-5 Maze Conditionals 5: "\"나 해바라기 원해!\" \\r\n\\r\n\"만약\" 블록을 사용하고 최대한 적은 블록만 사용해서 좀비를 해바라기로 보내주세요."
      4-5 Maze Conditionals 6: |-
        "해바라기 먹어!" \r
        \r
        "만약" 블록을 사용하고 최대한 적은 블록만 사용해서 좀비를 해바라기로 보내주세요.
      4-5 Maze Conditionals 7: 이 퍼즐을 해결하는 것이 그리 어렵지는 않지만, 식충 식물을 조심하세요!
      4-5 Maze Conditionals 8: "\"조건/선택\" 블럭은 조건을 검사한 다음에 그 결과에 따라 하나의 작업을 선택해 실행해 줍니다. \\r\n\\r\n이 블록을 사용해서 저를 해바라기로 보내주세요."
      4-5 Maze Conditionals 9: |-
        "조건/선택" 블록을 다시 한 번 사용해 보겠습니다. \r
        \r
        손가락으로 따라가 보세요. 한 번에 성공할 수 있겠어요?
      4-5 Maze Conditionals Assessment 1: "**형성평가:** \"~할 때까지 반복\" 블록과 \"만약/아니면\" 블록을 사용하고 가능한 적은 블록으로 저를 해바라기로 보내주세요."
      4-5 Nested Loops 12: 중첩 반복을 이용해서 36개의 삼각형들을 그려주세요.
      4-5 Nested Loops 3: |-
        다른 반복 안에 시작 코드를 중첩시켜 넣어서 해를 만들어 주세요. \r
        \r
        이렇게 가운데가 빈 멋진 디자인을 얻기 위해서는 회전하기 전에 삼각형의 길이만큼 앞으로 점프해야 합니다.
      4-5 Nested Loops 5: 주어진 코드를 반복시켜서 풍차를 만들어 주세요.
      4-5 Nested Loops 6: 삼각형 코드를 반복시켜서 육각형을 그려 주세요.
      4-5 Nested Loops 7: "이 디자인을 10번 반복시켜주세요. \\r\n\\r \n한 번 반복하고나서 얼마나 회전해야 할까요? (힌트: 360을 10으로 나누면 얼마일까요?)"
      4-5 Nested Loops 8: "이 디자인을 6번 반복시켜주세요. \\r\n\\r\n한 번 반복하고나서 얼마나 회전해야 할까요? (힌트: 360을 6으로 나누면 얼마일까요?) "
      4-5 Nested Loops 9: 악어 입 안에 이빨을 그려주세요!
      4-5 While Loops 1: 구덩이로 이동해서 "메우기" 블록으로 흙을 2번 메우기 해주세요.
      4-5 While Loops 2: 흙더미로 이동하고 "치우기 1" 블록으로 흙을 5번 치우기 해주세요.
      4-5 While Loops 3: "블록을 가능한 적게 사용해서 퍼즐을 해결하세요. \\r\n\\r\n흙더미로 이동해서 흙을 모두 치우고, 구덩이로 이동해서 흙을 모두 메워 주세요."
      4-5 While Loops 4: "와! 진짜 깊은 구덩이를 발견했습니다. \\r\n\\r\n얼마나 흙을 메워야 할지 모르겠어요. \\r\n\"메우기\" 블록을 사용하여 구덩이가 다 메워질 때까지 계속 흙을 채우는 프로그램을 작성해 보세요.  "
      Artist Autorun Test: 이제, 함수를 "반복" 블록 안에 넣고 3개의 사각형을 그려보세요.
      Bergeron Robot Maze1: "나쁜 돼지를 잡을 수 있게 도와주세요!\\r\n\\r\n \"실행하면\" 블록 아래에 \"앞으로 이동\" 블록들을 여러 개 쌓아 붙인 후, \"실행\"을 눌러보세요.\n"
      Course 4 Artist 13: 계속 하고 있나요? 빈 캔버스가 있습니다. 마음대로 그려보세요.
      Course 4 Artist 6: "이 삼각형들을 그리기 위한 코드를 완성시켜보세요. \\r\n\\r\n각 정삼각형의 한 변의 길이는 100 픽셀입니다. "
      Course 4 Artist 8: 이 코드 블록을 여러번 반복시켜 해를 그려보세요.
      Course 4 Artist 8a: 이 모양이 기억이 나나요? 이제 처음에 아무 블록들이 없는 상태로 만들어내야 합니다!
      Course 4 Artist Binary 1a: "여기에 1, 0 로만 이루어진 문자열을 입력해서, 화가를 왼쪽에서 오른쪽으로, 위에서 아래로 움직이는 함수가 있습니다. 화가는 1을 보면 사각형을 채우고, 0이면 무시할 것입니다. \\r\n\\r\n이 코드를 실행시킨 후, 화가가 2진 정보를 이용해서 이 패턴을 그려내는 것을 살펴보세요."
      Course 4 Artist For Loops 13: 흠, 저 모양들은 점점 더 커지는 군요! 이전에 이 문제를 변수를 이용해 해결했었습니다. 카운트 변수를 이용해서 어떻게 각 변의 크기를 줄일 수 있을까요? 일정 거리 만큼 앞으로 움직이지말고, 앞으로 (100/카운터) 픽셀 만큼 움직여 보세요.
      Course 4 Artist For Loops 4: "이 사각형들을 그리려면 배웠던 것들에서 어떤 것을 바꾸면 될까요?\n한 변의 길이가 15 픽셀인 사각형으로 시작하고, 가장 큰 사각형은 한 변이 300 픽셀입니다.\n각 사각형은 바로 전 사각형 보다 15 픽셀 만큼 씩 더 큽니다. "
      Course 4 Artist For Loops 6: '자유 플레이: 점점 커지는 도형들을 반복(~동안) 을 이용해 자유롭게 만들어 보세요.'
      Course 4 Artist For Loops 6a: 이 레벨을 완료하기 위해서 지난 번 코드에서 3가지만 수정하면 됩니다.
      Course 4 Artist For Loops 8a: 이전 이미지에서 1가지만 바꾸면 이 이미지를 만들 수 있습니다. 어떤 것을 바꾼 것인지 찾아낼 수 있나요?
      Course 4 Artist For Loops Challenge_a: "이 이미지를 만들어내기 위해서 어떤 것들을 어떻게 써야 할 지 생각해 낼 수 있을까요?\\r\n\\r\n힌트가 필요한가요? 여기를 클릭하세요."
      Course 4 Artist Vars 3: "여기에 사각형을 그릴 수 있는 반복 구조가 있는데, 뭔가 빠진 것 같습니다.\n각 변의 길이를 얼마로 해야할지 가늠하기 위해서 \"길이\" 변수를 사용하는 함수를 수정해 주세요. "
      Course 4 Bee 7: "꽃꿀을 얻어내기 위해 필요한 모든 것을 배웠습니다.\n이 자주색 꽃에는 꽃꿀이 3, 2, 1 만큼 있을 수 있습니다."
      Course 4 Bee For Loops 11: "이 코드에 어떤 오류가 있을까요?\n오류를 찾아 고칠 수 있는지 살펴보고, 벌이 모든 꽃꿀을 모을 수 있도록 해주세요."
      Course 4 Bee Params 1: '"꽃꿀 3번 모으기" 를 이용해서 꽃꿀을 모두 모으기 위한 순서를 만들어 보세요. 꽃꿀을 모으기 위해 돌고 움직인 다음에 원래 위치로 돌아오면 됩니다.'
      Course 4 Play Lab Params 4: "\"순찰\" 함수가 있습니다.\n함수를 수정해서 고양이가 400 픽셀 위로 이동 했다가, 다시 400 픽셀 아래로 이동하게 해보세요."
      Course 4 Play Lab Params 8: '"캐릭터가 닿으면" 블록을 이용해서, 강아지 캐릭터다 다른 캐릭터들에 닿으면, 처음의 가장 위쪽의 가장 왼쪽으로 이동되도록 해 보세요.'
      Course 4 Play Lab Vars 2: 이전 퍼즐은 공정하지 않았습니다! "강아지 속도" 변수의 값을 바꿔서 고양이보다 더 많은 깃발을 모을 수 있도록 해보세요. 10 개의 깃발을 먼저 모으면 이깁니다!
      Course 4 Play Labs For Loops 1: "강아지가 1부터 100까지 모든 자연수를 말하도록 해보세요.\n1개의 반복 구조와 카운터 블록을 이용해서, 한 번 실행될 때마다 카운터 값을 말하도록 하면 됩니다."
      Course 4 Playlab For Loops 5b: 두 캐릭터가 정확히 같은 장소에서 끝내도록 "for(~동안)" 반복문의 간격을 조절하세요.
      Course 4 SCFP 1: "매개 변수들을 이용해서 화가가 왼쪽/오른쪽/위쪽/아래쪽으로 x 필셀 만큼 점프 뛰는 함수를 만들어보세요.\n(음수, 양수 모두 사용 가능하도록 만들면 됩니다.)"
      Course 4 SCVP 1: "매개 변수들을 이용해서 화가가 왼쪽/오른쪽/위쪽/아래쪽으로 x 필셀 만큼 점프 뛰는 함수를 만들어보세요.\n(음수, 양수 모두 사용 가능하도록 만들면 됩니다.)"
      CourseF_PlayLab_vars2: 이전 퍼즐은 공정하지 않았습니다! "강아지 속도" 변수의 값을 바꿔서 고양이보다 더 많은 깃발을 모을 수 있도록 해보세요. 10 개의 깃발을 먼저 모으면 이깁니다!
      Dance_Party_01: |-
        *댄스 파티를 해볼까요!*

        `새로 만들기` 블록을 작업공간에 드래그하고, `설정` 블록 안에 연결하여 첫 번째 댄서를 만들어보세요.

        * *더 자세한 정보나 추가 과제를 원하면 왼쪽 전구를 클릭해보세요.*
      Dance_Party_01_low: |-
        *댄스 파티를 해볼까요!*

        `새로 만들기` 블록을 작업공간에 드래그하고, `설정` 블록 안에 연결하여 첫 번째 댄서를 만들어보세요.

        * *더 자세한 정보나 추가 과제를 원하면 왼쪽 전구를 클릭해보세요.*
      Dance_Party_02: |-
        이 사슴을 춤추게 해볼까요!

        <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new&#95;dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> 블록을 작업공간에 드래그하세요. <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> 블록 밑에 연결하세요. 4번째 마디 후에는 댄서가 새로운 동작을 시작해야 합니다.


        **박자**는 음악에서 시간 계산에 사용됩니다. 이 튜토리얼에서 한 마디는 네 박자 길이입니다.
      Dance_Party_03: "*이제 춤을 춰볼까요!*\n\n<xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml> 블록을 작업공간에 추가하세요. 6번째 마디 후 댄서가 새로운 움직임을 시작하도록 하세요."
      Dance_Party_04: |-
        *이 댄스에 플래시가 필요합니다!*

        댄서 뒤에 배경 효과를 추가하는 도구 상자에서 새 블록을 찾아보세요. 음악에 맞춰 변하는 효과를 보세요!
      Dance_Party_05: |-
        **두 마디마다** 댄서가 동작을 변경하도록 새로운 블록을 사용하세요!

        *선택 '(다음)', '(이전)', 또는 '(무작위)'를 선택하면 코드가 실행될 때마다 댄서가 여러 동작을 실행하도록 합니다.
      Dance_Party_06: |-
        *댄서가 더 필요해요!*

        고양이와 함께 춤을 추는 'backup_dancer1'라는 백업 댄서를 만드세요.
      Dance_Party_08: |-
        모든 댄서마다 어떻게 보일지를 제어하는 _properties_ 집합이 있습니다.

        댄서의 _size_를 축소하여 댄서가 백그라운드에 있는 것처럼 보이게 할 수 있습니다. 두 백업 댄서를 모두 같은 크기로 만들 수 있나요?
      Dance_Party_09: |-
        댄서는 색상의 레이어를 추가할 수 있는 "색조" 속성이 있습니다. 댄서 중 한 명의 색조를 변경해 보세요.
        *색조는 선택하신 색상을 댄서의 색상과 혼합합니다.
      Dance_Party_10: |-
        이제 우리는 댄서의 속성을 변경하는 방법을 알게 되었습니다. 또한 이 블록을 사용하여 음악에 자동으로 응답하는 동일한 속성을 만들 수 있습니다.
        <xml>
        <block type="Dancelab_startMapping">
        <title name="SPRITE">right_pineapple</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        이 프로그램은 한 댄서의 높이를 제어하는 데 음악의 "베이스" 볼륨(저음)를 사용합니다. 다른 댄서도 음악에 반응하도록 만들 수 있나요?
      Dance_Party_11.5_test: "이 블록을 확인하세요.\n\n<xml>\n<block type=\"Dancelab_makeNewDanceSpriteGroup\">\n<title name=\"N\">6</title>\n<title name=\"COSTUME\">\"DUCK\"</title>\n<title name=\"LAYOUT\">\"circle\"</title>\n</block></xml>\n\n이제 한 번에 댄서 여러 명을 만들 수 있어요!\n\n“모든 오리” 블록을 사용하여 모든 오리가 함께 춤추도록 만드는 코드를 작성해보세요."
      Dance_Party_11: "<xml><block type=\"Dancelab_whenKey\"></block></xml> 블록을 이용하면 위쪽 화살표를 누를 때 코드를 실행할 수 있습니다.\n\n댄스의 움직임 변경, 댄서의 속성 변경 또는 한 번에 빠른 이동하기 등을 할 수 있습니다. 창의성을 발휘해서 새로운 블록을 찾아보세요!"
      Dance_Party_11_5: "이 블록을 확인하세요.\n\n<xml>\n<block type=\"Dancelab_makeNewDanceSpriteGroup\">\n<title name=\"N\">6</title>\n<title name=\"COSTUME\">\"DUCK\"</title>\n<title name=\"LAYOUT\">\"circle\"</title>\n</block></xml>\n\n이제 한 번에 댄서 여러 명을 만들 수 있어요!\n\n“모든 오리” 블록을 사용하여 모든 오리가 함께 춤추도록 만드는 코드를 작성해보세요."
      Dance_Party_11b: |-
        이제 본격적인 댄스 시간이에요! 왼쪽 화살표 키를 누르면 고양이가 살짝 움직입니다. 오른쪽 화살표 키를 누르면 로봇이 "드롭"합니다.
      Dance_Party_12: 이제 리듬을 타보세요! 자신만의 댄스를 만들어 친구와 공유하세요.
      Dance_Party_extras_battle: |-
        # 댄스 크루

        두 명의 댄스 크루가 댄스 대결을 펼칩니다. 화살표 키는 댄서 한 명을 제어하고 "w, a, s, d" 키는 다른 댄서를 제어합니다. 친구와 댄스 대결을 펼치고 댄스 대결을 향상하도록 노력해보세요.

        * 춤을 제어하는 키 추가
        * 키를 누를 때 백댄서도 반응하게 하기
        * 가시성을 설정하여 4마디마다 댄서 교체
      Dance_Party_extras_every_beat: |-
        # 4분 음표

        우리 댄스의 대부분은 전체 마디를 사용했지만 각 마디는 4분 음표 네 개로 구성됩니다. ‘0.25 마디마다’를 사용하여 댄서가 4분 음표마다 박수치게 하는 춤입니다.

        또한 이 댄스는 _조건_ 블록을 사용하여 ‘0.25 마디마다’ 블록이 댄스를 변경할 수 있는 타이밍을 제어합니다. 조건 블록의 숫자를 변경하며 댄스가 어떻게 변하는지 확인하세요.

        * 다른 음표 길이로 실험하세요.(2분 음표의 경우 0.5, 8분 음표의 경우 0.125)
        * ‘마디 이후’ 이벤트를 추가하세요.
        * "마디"를 "초"로 전환하는 방식으로 댄스의 타이밍을 시험해보세요.
      Dance_Party_extras_layout: |-
        # 대형 만들기

        댄스 전체에서 백댄서의 대형을 변경하기 위해 '레이아웃' 블록을 사용하는 댄스입니다. 한번 확인해보세요. 다음의 아이디어를 통해 확장해보세요.

        * 다른 레이아웃으로 두 번째 댄서 그룹 만들기
        * 키를 누를 때 레이아웃 변경
        * 댄서 대형을 바꿀 때 속성 변경
      Dance_Party_extras_on_beat: |-
        # 저음, 중간음, 고음

        음악의 다른 부분의 소리가 커지면 “피크” 이벤트를 사용하여 코드를 실행하는 댄스입니다. 다양한 음악을 이용하면서 댄스가 어떻게 변하는지 확인해보세요.
      Dance_Party_extras_speed: |-
        # 속도를 높이고 속도를 낮추세요

        이 마지막 댄스에서는 '스피드 설정' 블록을 사용하여 댄서 각각이 얼마나 빨리 움직이는지 제어해봅니다. 음악의 다른 지점에서 다른 속도로 실험해보세요. 이 댄스를 다양하게 만들어보거나 이전 댄스 중 원하는 댄스로 돌아가 더욱 멋지게 만들어보세요.
      Dance_Party_extras_visible: |-
        # 그들이 어디로 갔나요?

        이 댄스는 두 개의 댄서 그룹을 보여주고 숨깁니다. 확인해 보시고 나만의 솜씨를 추가하세요.

        * 다른 댄서 그룹 추가
        * 화살표 키를 사용하여 댄서 보이기 및 숨기기
        * 모든 댄서를 숨기고 흥미로운 배경 효과로 바꾸기
      Function intro Ryan: "작업 공간에 있는 '다리 짓기' **함수가** 보이죠?  강을 건너는 해결 방법은 이미 주어졌어요! \\r\n \\r\n녹색의 작은 블록을 작업 공간으로 두 번 가져와 길을 만들고 {currentPlayerName}이(가) 레드스톤 횃불 [redstone_torch] 쪽으로 갈 수 있게 도와주세요."
      Function intro Ryan_2019: "작업 공간에 있는 '다리 짓기' **함수가** 보이죠?  강을 건너는 해결 방법은 이미 주어졌어요! \\r\n \\r\n녹색의 작은 블록을 작업 공간으로 두 번 가져와 길을 만들고 {currentPlayerName}이(가) 레드스톤 횃불 [redstone_torch] 쪽으로 갈 수 있게 도와주세요."
      HOC 2018 Level_1: "항해를 앞둔 여러분에게는 보급품이 필요합니다. **상자**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png)에서 **보트**![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)를 얻으세요.\n\n"
      HOC 2018 Level_10: "이것은 바다 유적 어딘가에 숨어 있는 **오징어**![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)입니다. 여러분은 발견할 수 있을까요?\n\n"
      HOC 2018 Level_11: 검은색 콘크리트 주변에 **프리즈머린** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png) 벽을 만듭니다. 이것은 **도관**![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)을 활성화하여 챌린지를 완료합니다!
      HOC 2018 Level_12: 축하합니다! 활짝 열린 수중 월드가 여러분을 기다립니다. 산호초를 만드세요! 화산을 만드세요! 난파선을 만드세요! 모든 것은 여러분에게 달렸습니다.
      HOC 2018 Level_2: 넓은 바다에서는 헤엄치는 것보다 보트를 타는 것이 훨씬 쉽습니다! 부두 끝으로 가서 탑승하세요.
      HOC 2018 Level_3: 노를 쥐고 보트를 조종하여 바다를 건너 **대구**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)를 잡으세요.
      HOC 2018 Level_4: 대구를 **돌고래**![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)에게 먹여 봅시다. 반복 블록을 사용해서 바다를 빠르게 건너세요.
      HOC 2018 Level_5: 어딘가에 **앵무조개**![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)가 숨어 있어요! 난파선을 탐험하고 **상자**![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)에 도달하세요.
      HOC 2018 Level_6: 밖은 추워 보이네요! 수중 유적으로 가는 길에 **연어**![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)를 잡으세요.
      HOC 2018 Level_7a: "수중 유적을 발견했습니다. 사암에서 **프리즈머린**![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png) 보물이 들어 있는 **상자**![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)를 찾으세요.\n\n"
      HOC 2018 Level_8: "처음에는 빙산이더니 이제는 용암인가요? 이 화산 섬을 지나 산호초에서 **열대어**![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)를 찾으세요.\n\n"
      HOC 2018 Level_9b: "산호초에 도달했습니다. 이제 **바다의 심장**![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)을 찾을 시간이에요! 파란색과 빨간색 산호를 사용해서 보물 **상자**![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)에 도달하세요.\n\n"
      HOC Dance 4_draft: |-
        **두 마디마다** 댄서가 동작을 변경하도록 새로운 블록을 사용하세요!

        *선택 '(다음)', '(이전)', 또는 '(무작위)'를 선택하면 코드가 실행될 때마다 댄서가 여러 동작을 실행하도록 합니다.
      HOC Dance 5_draft: |-
        *댄서가 더 필요해요!*

        고양이와 함께 춤을 추는 'backup_dancer1'라는 백업 댄서를 만드세요.
      HOC Dance 9_draft: "<xml><block type=\"Dancelab_whenKey\"></block></xml> 블록을 이용하면 위쪽 화살표를 누를 때 코드를 실행할 수 있습니다.\n\n댄스의 움직임 변경, 댄서의 속성 변경 또는 한 번에 빠른 이동하기 등을 할 수 있습니다. 창의성을 발휘해서 새로운 블록을 찾아보세요!"
      HOC Dance Freeplay: 이제 리듬을 타보세요! 자신만의 댄스를 만들어 친구와 공유하세요.
      HOC Dance Freeplay_draft: 이제 리듬을 타보세요! 자신만의 댄스를 만들어 친구와 공유하세요.
      HOC Dance Predraw: 이제 리듬을 타보세요! 자신만의 댄스를 만들어 친구와 공유하세요.
      K-1 Bee Loops 2: 1개의 반복 구조를 사용해서 이동한 후, 꽃꿀을 모으고, 꿀을 만드세요!
      K-1 Bee Loops 3: 3개의 반복(횟수) 구조를 사용해서, 꽃꿀을 모으고 꿀을 만들어보세요!
      K-1 Bee Loops 4: 반복(횟수) 구조를 사용해서, 꽃꿀을 모으고 꿀을 만들고, 이동해 보세요!
      K-1 Bee Loops 5: 반복(횟수) 구조를 사용해서, 꽃꿀과 꿀을 모아보세요!
      K-1 Bee Loops 6: 1개의 반복(횟수) 구조를 사용해서, 꽃꿀과 꿀을 모으고, 이동해 보세요!
      K-1 Maze Loops 11: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하면 쉽습니다."
      K-1 Maze Loops 12: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하면 쉽습니다."
      K-1 Maze Loops 2: 돼지에게 갈 수 있도록, 반복(횟수) 블록을 사용해보세요.
      K-1 Maze Loops 8: 돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하세요.
      MC Agent Freeplay: "**무료플레이:** 이제 실력을 발휘할 시간입니다! Agent의 코드를 사용해 월드를 탐험하세요."
      MC HOC 2016 SCORE LEVEL: "일부 게임에서는 점수를 얻을 수 있습니다. 철 골렘과 술래잡기를 하세요. 철 골렘을 건드리면 점수를 얻을 수 있도록 '1점 추가' 블록을 사용하세요. 5점을 획득하여 승리하세요!"
      MC_HOC_2017 Agent Test: "'실행'을 클릭한 다음 **화살키**를 사용해 플레이어를 움직이세요.  \\r\n\\r\n이 레벨을 통과하려면 문까지 이동한 다음 **스페이스바**를 사용해 문을 열고 그 안에 있는 주황색 네모 칸에 도달해야 합니다."
      MC_HOC_2017_01: "'실행'을 클릭한 다음 **화살키**를 사용해 플레이어를 움직이세요.  \\r\n\\r\n이 레벨을 통과하려면 문까지 이동한 다음 **스페이스바**를 사용해 문을 열고 그 안에 있는 주황색 네모 칸에 도달해야 합니다."
      MC_HOC_2017_01_Cole: 여정에 필요한 도구를 모두 확보해야 합니다. **방향키**를 사용해 원하는 방향으로 이동하세요. 길목에 있는 상자에 도달하면 성공입니다.
      MC_HOC_2017_01_Kiki: '이 레벨을 플레이하려면 플레이 화면 아래에 있는 주황색 ''실행'' 버튼을 클릭한 다음 **방향키**를 사용해 플레이어를 움직이세요.  '
      MC_HOC_2017_01_RETRY: |-
        {currentPlayerName}이(가) 집 안에 갇혀 버렸어요. 하지만 Agent가 있으니 걱정할 필요는 없답니다!   \r
         \r
           \r\'앞으로 이동하기' 블록을 작업 공간의 '실행하면' 블록에 연결해서 Agent가 감압판 [PressurePlate_Up] 위로 가게 하세요. 그런 다음 '실행'을 누르고 방향키를 사용해 {currentPlayerName}을(를) 집 밖으로 움직여 **상자** [chest]를 집게 하세요. 
      MC_HOC_2017_01_RETRY_2019: |-
        {currentPlayerName}이(가) 집 안에 갇혀 버렸어요. 하지만 Agent가 있으니 걱정할 필요는 없답니다!   \r
         \r
           \r\'앞으로 이동하기' 블록을 작업 공간의 '실행하면' 블록에 연결해서 Agent가 감압판 [PressurePlate_Up] 위로 가게 하세요. 그런 다음 '실행'을 누르고 방향키를 사용해 {currentPlayerName}을(를) 집 밖으로 움직여 **상자** [chest]를 집게 하세요. 
      MC_HOC_2017_02: 비밀의 숲길로 플레이어를 이동해야 합니다.  Agent가 감압판 위로 움직여 플레이어 대신 문을 열 수 있게 코드를 만드세요.
      MC_HOC_2017_02_Cole: "{currentPlayerName}의 모험이 시작되었어요! 모험에 필요한 **지도** [map_empty]를 얻으려면 오른쪽에 있는 잠긴 문을 열어야 합니다. \\r\n \\r\n작업 공간으로 코드를 가져온 다음 Agent를 감압판 [PressurePlate_Up] 위로 움직여 {currentPlayerName}이(가) 들어갈 수 있게 해주세요. "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName}의 모험이 시작되었어요! 모험에 필요한 **지도** [map_empty]를 얻으려면 오른쪽에 있는 잠긴 문을 열어야 합니다. \\r\n \\r\n작업 공간으로 코드를 가져온 다음 Agent를 감압판 [PressurePlate_Up] 위로 움직여 {currentPlayerName}이(가) 들어갈 수 있게 해주세요. "
      MC_HOC_2017_02_Kiki: "플레이어가 본격적으로 모험을 시작하려면 먼저 저쪽에 있는 잠긴 문을 열고 그 안에 숨겨진 횃불을 찾아야 해요. \\r\n\\r\n흰색으로 표시된 길을 따라 Agent를 앞으로 두 번 움직여 감압판 위로 올라가게 하세요. 그럼 문이 열리고 플레이어가 안으로 들어갈 수 있어요."
      MC_HOC_2017_02_Will: "이 레벨을 완료하려면 플레이어를 비밀의 숲길에 있는 주황색 네모 칸으로 움직여야 합니다. 이 길은 잠긴 문으로 막혀 있죠.  \\r\n\\r\n작업 공간에 있는 코드를 사용해 Agent를 앞으로 두 칸 움직여 감압판 위로 올라가게 하면 알렉스나 스티브를 위해 문을 열 수 있습니다."
      MC_HOC_2017_03_Cole: "{currentPlayerName}이(가) 모험을 계속하려면 **나침반** [compass]이 필요합니다.  \\r\n   \\r\nAgent가 문을 열게 코드를 만드세요. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName}이(가) 모험을 계속하려면 **나침반** [compass]이 필요합니다.  \\r\n   \\r\nAgent가 문을 열게 코드를 만드세요. "
      MC_HOC_2017_03_Kiki: "플레이어가 모험을 시작하려면 비밀의 숲길에 있는 잠긴 문을 열어야 합니다.  \\r\n\\r\n\\r\n코드를 만들어 Agent가 감압판으로 가서 문을 열 수 있게 도와주세요."
      MC_HOC_2017_04: 마지막 퍼즐에 사용된 루프의 내용을 바꿔서 Agent가 강폭이 넓은 곳을 건너는 길을 만들 수 있게 도와주세요.
      MC_HOC_2017_04POINT5_Cole: |-
        늪지 탈출에 성공했네요!  자, 이제 플레이어를 안전한 주황색 네모 칸으로 움직이세요. 


        간단한 패턴을 찾고 루프를 사용해 Agent를 움직여 두 개의 감압판을 밟으면 길을 열 수 있어요.
      MC_HOC_2017_04POINT5_RYAN: "무사히 건넜군요! \\r\n\\r\n이제 {currentPlayerName}이(가) 안전하게 미로를 통과해 **도끼** [diamond_axe]를 찾을 수 있게 도와주세요.\\r\n"
      MC_HOC_2017_04POINT5_RYAN_2019: "무사히 건넜군요! \\r\n\\r\n이제 {currentPlayerName}이(가) 안전하게 미로를 통과해 **도끼** [diamond_axe]를 찾을 수 있게 도와주세요.\\r\n"
      MC_HOC_2017_04_Cole: "Agent는 물을 그냥 건널 수 있어요!  \\r\n \\r\n'반복' 루프를 사용해 이 퍼즐을 해결하고 {currentPlayerName}이(가) 문 안쪽에 있는 **양동이** [bucket_empty]를 찾게 도와주세요."
      MC_HOC_2017_04_Cole_2019: "Agent는 물을 그냥 건널 수 있어요!  \\r\n \\r\n'반복' 루프를 사용해 이 퍼즐을 해결하고 {currentPlayerName}이(가) 문 안쪽에 있는 **양동이** [bucket_empty]를 찾게 도와주세요."
      MC_HOC_2017_04_Kiki: "비밀의 숲길 입구는 아름다운 오아시로 연결된답니다!  이 레벨을 통과하려면 플레이어를 집 안의 주황색 네모 칸으로 움직여야 합니다.  \\r\n\\r\n'반복' 루프를 사용해 Agent를 감압판으로 보내 집의 문을 열 수 있게 도와주세요."
      MC_HOC_2017_05: |-
        루프가 항상 최고의 해결책인 것은 아니에요. 


        이 선인장들은 패턴에 따라 자라고 있기 때문에 루프를 사용해서는 제대로 제거할 수 없어요. 대신 앞으로는 새롭게 제공된 '제거하고 이동하기' 함수를 사용해보세요.
      MC_HOC_2017_05_Cole: "이런, 다리가 무너져 버렸어요! \\r\n\\r\nAgent가 블록을 '설치'해 다리를 다시 짓게 코드를 만들어 {currentPlayerName}이(가) **삽** [diamond_shovel]까지 갈 수 있게 도와주세요."
      MC_HOC_2017_05_Cole_2019: "이런, 다리가 무너져 버렸어요! \\r\n\\r\nAgent가 블록을 '설치'해 다리를 다시 짓게 코드를 만들어 {currentPlayerName}이(가) **삽** [diamond_shovel]까지 갈 수 있게 도와주세요."
      MC_HOC_2017_05_Josh: |-
        이런, 다리가 무너져 버렸어요! 


        Agent를 통해 다리를 다시 짓고 플레이어가 **삽**까지 갈 수 있도록 도와주세요.
      MC_HOC_2017_05_Kiki: "이제 플레이어가 비밀의 숲길을 떠나 모험을 계속할 시간입니다. 하지만 다리가 무너져 버렸네요! \\r\n\nAgent를 도와 다리를 다시 짓고 나무 판자로 이동해 플레이어가 주황색 네모 칸으로 갈 수 있게 해주세요."
      MC_HOC_2017_06_Cole: "이번에 만난 강은 훨씬 폭이 넓군요! \\r\n \\r\nAgent가 다리를 지을 수 있게 코드를 바꿔서 짓게 도와 {currentPlayerName}이(가) **곡괭이** [diamond_pickaxe]까지 갈 수 있게 도와주세요. "
      MC_HOC_2017_06_Cole_2019: "이번에 만난 강은 훨씬 폭이 넓군요! \\r\n \\r\nAgent가 다리를 지을 수 있게 코드를 바꿔서 짓게 도와 {currentPlayerName}이(가) **곡괭이** [diamond_pickaxe]까지 갈 수 있게 도와주세요. "
      MC_HOC_2017_06_Josh: "이번에 만난 강은 훨씬 폭이 넓군요!  \\r\n\\r\nAgent가 강을 건너는 다리를 지을 수 있게 코드를 바꿔주세요."
      MC_HOC_2017_06_Kiki: "이번에 만난 강은 훨씬 폭이 넓군요!  \\r\n\\r\n이 코드를 수정해서 Agent가 강 너머로 다리를 지을 수 있게 도와주세요."
      MC_HOC_2017_07_Cole: "얼음이 길목을 막고 있네요!  \\r\n \\r\n`경로 확보하기` 함수를 사용하면 얼음을 제거해 {currentPlayerName}이(가) 광물 수레 [minecart_normal까지 갈 수 있어요]! "
      MC_HOC_2017_07_Cole_2019: "얼음이 길목을 막고 있네요!  \\r\n \\r\n`경로 확보하기` 함수를 사용하면 얼음을 제거해 {currentPlayerName}이(가) 광물 수레 [minecart_normal까지 갈 수 있어요]! "
      MC_HOC_2017_07_Kiki: "루프를 사용하지 않아도 코드를 반복할 수 있는 방법이 있어요!  \\r\n\\r\n새로 주어진 '선인장 제거하기' 함수를 사용하면 사용할 때마다 선인장을 세 그루씩 제거합니다. '선인장 제거하기' 함수를 두 번 사용해 주황색 네모 칸으로 향하는 길을 만드세요. "
      MC_HOC_2017_07a_Kiki: 이제 루프를 사용해 Agent가 주황색 네모 칸으로 가는 길을 만들 수 있게 도와주세요.
      MC_HOC_2017_08_Cole: "이번에는 블록을 제거해 길을 만드는 것이 아니라 블록을 설치해서 길을 만들어야 합니다. \\r\n\\r\n주어진 함수를 사막에서 사용할 수 있게 바꾸세요."
      MC_HOC_2017_08_Kiki: "이번에는 선인장을 제거하는 대신 용암 위로 돌을 설치한 다음 사암을 제거해야 합니다. \\r\n\\r\n이 레벨에서 사용할 수 있게 함수를 바꾸세요."
      MC_HOC_2017_08_RY: |-
        이번에는 선택할 수 있는 함수가 **두 개**나 있네요! 


        함수를 사용해 신속하게 다리를 지어 {currentPlayerName}이(가) 용암을 건널 수 있게 도와주세요.
      MC_HOC_2017_08_Will: |-
        이번에는 선택할 수 있는 함수가 **두 개**나 있네요! 


        함수를 사용해 신속하게 다리를 지어 플레이어가 용암을 건널 수 있게 도와주세요.
      MC_HOC_2017_09_Cole: 함수를 사용해 Agent가 거대한 흙 블록 무더기를 제거하고 플레이어가 감압판으로 갈 수 있는 길을 만들게 도와주세요.
      MC_HOC_2017_09_Kiki: "이번 시작 코드는 삭제할 수 없습니다.\\r\n\\r\n'길 만들기' 함수에 명령을 추가해 Agent가 감압판으로 갈 수 있게 작업 공간에 프로그래밍하세요. "
      MC_HOC_2017_09_RS_CLONE: 이 함수를 사용해 빈 공간을 블록으로 채우고 감압판 위로 움직여 횃불까지 가는 경로를 확보하세요.
      MC_HOC_2017_10_Cole: 이 함수를 사용해 광물 수레로 가는 길을 확보하고 네더 포탈을 통과하세요.
      MC_HOC_2017_10_Cole_old: Agent를 통해 광물 수레를 완성하고 플레이어를 주황색 네모 칸으로 이동할 수 있는 함수를 처음부터 만들어 보세요.
      MC_HOC_2017_10_Kiki: Agent를 통해 광물 수레를 완성하고 플레이어를 주황색 네모 칸으로 이동할 수 있는 함수를 처음부터 만들어 보세요.
      MC_HOC_2017_10_RETRY: "작업 공간에 있는 두 함수가 어떻게 다른지 아시겠어요? \\r\n \\r\n각 함수를 툴 박스의 다른 코드와 함께 사용해 광물 수레로 가는 길을 확보하고 **부싯돌과 부시** [flint_and_steel]를 찾으세요. \\r\n "
      MC_HOC_2017_10_RETRY_2019: "작업 공간에 있는 두 함수가 어떻게 다른지 아시겠어요? \\r\n \\r\n각 함수를 툴 박스의 다른 코드와 함께 사용해 광물 수레로 가는 길을 확보하고 **부싯돌과 부시** [flint_and_steel]를 찾으세요. \\r\n "
      MC_HOC_2017_10_RYAN: Agent를 통해 광물 수레를 완성하고 플레이어를 주황색 네모 칸으로 이동할 수 있는 여러 함수를 처음부터 만들어 보세요.
      MC_HOC_2017_10_RYAN2: Agent를 통해 광물 수레를 완성하고 플레이어를 주황색 네모 칸으로 이동할 수 있는 여러 함수를 처음부터 만들어 보세요.
      MC_HOC_2017_11_Kiki: 이제 실력을 발휘할 시간입니다! 얼음 호수 주변에 무언가를 만들어 보세요.
      MC_HOC_2017_13_Cole: "**무료플레이:** 이제 실력을 발휘할 시간입니다! Agent의 코드를 사용해 월드를 탐험하세요."
      MC_HOC_2017_4.5v2: |-
        늪지 탈출에 성공했네요!  자, 이제 플레이어를 안전한 주황색 네모 칸으로 움직이세요. 


        간단한 패턴을 찾고 루프를 사용해 Agent를 움직여 두 개의 감압판을 밟으면 길을 열 수 있어요.
      MC_HOC_2017_Ali: '아래 함수들을 살펴 보고 이 함수들을 사용해 {currentPlayerName}이(가) 가스트를 피해 **효과부여 책** [book_enchanted]까지 안전하게 갈 수 있는 방법을 생각해보세요. '
      MC_HOC_2017_Ali_2019: '아래 함수들을 살펴 보고 이 함수들을 사용해 {currentPlayerName}이(가) 가스트를 피해 **효과부여 책** [book_enchanted]까지 안전하게 갈 수 있는 방법을 생각해보세요. '
      MC_HOC_2017_FP10x10: "**무료플레이:** 이제 실력을 발휘할 시간입니다! 이 레벨에 있는 다이아몬드를 모두 모으는 데 도전해보는 건 어떠신가요? "
      MC_HOC_2017_FP10x10_RE: "**무료플레이:** 이제 실력을 발휘할 시간입니다! 이 레벨에 있는 다이아몬드를 모두 모으는 데 도전해보는 건 어떠신가요? "
      MC_HOC_2017_FP20x20: "**무료플레이:** 이제 실력을 발휘할 시간입니다! Agent의 코드를 사용해 월드를 탐험하세요."
      MC_HOC_2017_FP20x20_2019: "**무료플레이:** 이제 실력을 발휘할 시간입니다! Agent의 코드를 사용해 월드를 탐험하세요."
      MC_HOC_2017_Ryan_03: "루프 안에는 코드를 하나 이상 추가할 수 있어요. \\r\n\\r\n'반복' 루프를 사용해 Agent가 물 속에 블록을 설치해 강 너머로 연결되는 다리를 짓게 도와주세요."
      MC_HOC_2017_Ryan_05: "플레이어의 길목이 막혀 있어 길을 뚫어야 하는 경우가 있습니다. \\r\n'제거' 블록을 사용해 Agent가 감압판으로 가는 길을 막고 있는 선인장을 모두 제거하세요."
      MC_HOC_Kiki_02: 누군가가 감압판에 올라가서 문을 열어줘야겠군요. Agent를 감압판으로 움직여 플레이어가 집을 나올 수 있게 도와주세요.
      Mike Test Bee Conditionals 2: "형성평가: 꽃꿀을 모두 모아주세요.\\r\n자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요."
      NEW Course 4 Artist Functions 10.1: 이 패턴을 그리기 위해서 이전 퍼즐들의 함수들을 사용해보세요.
      NEW Course 4 Artist Functions 12: "이 패턴을 그리기 위해서, 마지막 퍼즐에서 사용했던\n\"사각형 한 줄 그리기\" 함수를 사용해보세요."
      NEW Course 4 Artist Functions 3: "여기에 \"함수\"라는 새로운 블록이 있습니다. \"수정하기\"를 눌러 한 변의 길이가 100 픽셀인 사각형을 그릴 수 있도록 코드를 채워보세요. \\r\n\\r\n함수를 모두 수정하면 \"닫기\"를 누른 후 프로그램을 실행시켜보세요."
      NEW Course 4 Artist Functions 9: 블록 1개 만 더 추가해서 이 문제를 풀어보세요.
      NEW Course 4 Artist Params 4: "이 함수 블록들이 뭔가 다르다는 것을 알아차리셨나요?\n\"실행\"을 눌러 어떤 일이 일어나나 살펴보세요."
      NEW Course 4 Artist Vars 12: "자 이제, 이전 레벨에서의 알고리즘을 다시 만든 후,\n한 변의 길이가 150인 오각형을 만들어보세요."
      NEW Course 4 Artist Vars 4: "다시 한 번 해보세요. \\r\n\\r\n육각형들로 이런 멋진 디자인을 만들기 위해 \"길이\" 변수값을 60으로 설정해 보세요."
      NEW Course 4 Artist Vars 6: "\"길이\" 변수의 값을 정확히 입력하고 이 변수를 모든 알맞은 위치에 넣어서 100 픽셀짜리 오각형 패턴을 그려보세요. \\r\n\\r\n길이 변수의 값을 한 번만 입력하면, 그 값을 계속 사용할 수 있다는 것을 알 수 있습니다."
      New Minecraft Hero Project: "**무료플레이:** 이제 실력을 발휘할 시간입니다! Agent의 코드를 사용해 월드를 탐험하세요."
      Overworld Chop Tree: 나무는 매우 중요한 자원입니다. 나무로 많은 것들을 만들 수 있지요. 나무로 걸어간 후 "블록 부수기" 명령을 이용해 나무를 베세요.
      Overworld Chop Tree_2018: 나무는 매우 중요한 자원입니다. 나무로 많은 것들을 만들 수 있지요. 나무로 걸어간 후 "블록 부수기" 명령을 이용해 나무를 베세요.
      Overworld Chop Tree_2019: 나무는 매우 중요한 자원입니다. 나무로 많은 것들을 만들 수 있지요. 나무로 걸어간 후 "블록 부수기" 명령을 이용해 나무를 베세요.
      Overworld House Frame Chosen: 여러분이 원하는 재료를 이용해서, 집의 나머지 부분을 완성해보세요. "repeat" 명령은 편리하게 사용할 수 있습니다.
      Overworld House Frame Chosen_2018: 여러분이 원하는 재료를 이용해서, 집의 나머지 부분을 완성해보세요. "repeat" 명령은 편리하게 사용할 수 있습니다.
      Overworld House Frame Chosen_2019: 여러분이 원하는 재료를 이용해서, 집의 나머지 부분을 완성해보세요. "repeat" 명령은 편리하게 사용할 수 있습니다.
      Overworld Move to Sheep: 두 번째 "앞으로 이동" 명령을 더해서 양에게 도달하세요.
      Overworld Move to Sheep_2018: 두 번째 "앞으로 이동" 명령을 더해서 양에게 도달하세요.
      Overworld Move to Sheep_2019: 두 번째 "앞으로 이동" 명령을 더해서 양에게 도달하세요.
      Overworld Place Wall: 모든 집은 벽을 짓는 것부터 시작합니다. "놓기"와 "앞으로 이동" 명령을 반복문 안에 놓아서 집의 첫 번째 부분을 지어보세요.
      Overworld Place Wall_2018: 모든 집은 벽을 짓는 것부터 시작합니다. "놓기"와 "앞으로 이동" 명령을 반복문 안에 놓아서 집의 첫 번째 부분을 지어보세요.
      Overworld Place Wall_2019: 모든 집은 벽을 짓는 것부터 시작합니다. "놓기"와 "앞으로 이동" 명령을 반복문 안에 놓아서 집의 첫 번째 부분을 지어보세요.
      Overworld Shear Sheep: 양털 깎기 시간이에요! 두 마리 양에게서 양털을 채집하려면, "털 깎기" 명령을 사용하세요.
      Overworld Shear Sheep_2018: 양털 깎기 시간이에요! 두 마리 양에게서 양털을 채집하려면, "털 깎기" 명령을 사용하세요.
      Overworld Shear Sheep_2019: 양털 깎기 시간이에요! 두 마리 양에게서 양털을 채집하려면, "털 깎기" 명령을 사용하세요.
      PS copy 2-3 Bee Conditionals 5: "이 마술 자주색 꽃들은 변화 합니다!\\r\n\\r\n퍼즐을 실행 할때마다 1개의 꽃꿀을 가지고 있을 수도 있고 없을 수도 있습니다.\n하지만 꽃꿀을 가지고 있는지는 코드를 실행전에 알 수 없습니다.\\r\n\\r\n꽃꿀이 없는 자주색 꽃에서 꽃꿀을 모으지 않도록 주의하세요.\\r\n먼저 '꽃꿀이 있으면' 블록을 이용해서 꽃꿀의 양이 1인지(=있는지) 확인해야합니다."
      Testing Quantum Farmer: "와! 진짜 깊은 구덩이를 발견했습니다. \\r\n\\r\n얼마나 흙을 메워야 할지 모르겠어요. \\r\n\"메우기\" 블록을 사용하여 구덩이가 다 메워질 때까지 계속 흙을 채우는 프로그램을 작성해 보세요.  "
      Underground Avoiding Lava: 이 블록들 아래에 용암이 숨어있습니다. 앞으로 이동하기 전에 덮어야 해요. "if"(만약) 명령은 여기서 유용할 거에요. 올바른 곳에 "앞으로 이동" 명령을 더해서 이 블록을 채굴하세요.
      Underground Avoiding Lava_2018: 이 블록들 아래에 용암이 숨어있습니다. 앞으로 이동하기 전에 덮어야 해요. "if"(만약) 명령은 여기서 유용할 거에요. 올바른 곳에 "앞으로 이동" 명령을 더해서 이 블록을 채굴하세요.
      Underground Avoiding Lava_2019: 이 블록들 아래에 용암이 숨어있습니다. 앞으로 이동하기 전에 덮어야 해요. "if"(만약) 명령은 여기서 유용할 거에요. 올바른 곳에 "앞으로 이동" 명령을 더해서 이 블록을 채굴하세요.
      Underground If Statements: 점점 더 어려워지고 있어요. 레드스톤 3개를 채굴하세요. 하지만 용암으로 떨어지지는 마세요. "if"(만약) 명령을 사용해서 용암을 발견하면 조약돌을 놓으세요.
      Underground If Statements_2018: 점점 더 어려워지고 있어요. 레드스톤 3개를 채굴하세요. 하지만 용암으로 떨어지지는 마세요. "if"(만약) 명령을 사용해서 용암을 발견하면 조약돌을 놓으세요.
      Underground If Statements_2019: 점점 더 어려워지고 있어요. 레드스톤 3개를 채굴하세요. 하지만 용암으로 떨어지지는 마세요. "if"(만약) 명령을 사용해서 용암을 발견하면 조약돌을 놓으세요.
      course4_artist_fwp_challenge1: 프로그램을 실행시켜보고 어떤 일이 일어나는지 살펴보세요. 이해할 수 있을까요?(블럭들을 모두 지우고 완전히 새로 만들어 봐도 됩니다.)
      courseD_bee_nestedLoops5: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      courseD_bee_nestedLoops8: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      courseD_bee_nestedLoops8_2018: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      courseD_bee_nestedLoops8_2019: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      courseD_bounce_events1: 깃발을 잡으세요! "왼쪽 방향키를 누르면" 블록에 다른 블록을 붙이고, "실행하기"를 눌러 깃발로 이동시키세요.
      courseD_maze_nestedLoops4: "블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\\r\n\\r\n반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요."
      courseD_maze_nestedLoops4_2018: "블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\\r\n\\r\n반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요."
      courseD_maze_nestedLoops4_2019: "블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\\r\n\\r\n반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요."
      courseE_bee_functions2: "함수들은 어떤 작업을 수행할 때 사용하는 블럭들의 모임이라고 할 수 있습니다.\\r\n\\r\n\"꽃꿀 2번 모으기\" 를 이용해서 각 꽃들에서 꽃꿀을 모아보세요."
      courseE_bee_functions2_2018: "함수들은 어떤 작업을 수행할 때 사용하는 블럭들의 모임이라고 할 수 있습니다.\\r\n\\r\n\"꽃꿀 2번 모으기\" 를 이용해서 각 꽃들에서 꽃꿀을 모아보세요."
      courseE_bee_functions3: "함수들은 어떤 작업을 수행하는데 블럭들의 집합이라고 볼 수 있습니다.  \\r\n\\r\n\"5번 모으기\" 함수를 이용해서 한 번에 5개의 꽃꿀을 모아보세요."
      courseE_bee_functions3_2018: "함수들은 어떤 작업을 수행하는데 블럭들의 집합이라고 볼 수 있습니다.  \\r\n\\r\n\"5번 모으기\" 함수를 이용해서 한 번에 5개의 꽃꿀을 모아보세요."
      courseE_farmer_concept4: 좀더 어려운 것을 해보아요! 반복 구조 안에 반복 구조를 넣어봤는데, 다음 줄을 그리려면 화가를 다시 이전 위치로 돌려 놓아야 해요. 전체 격자를 그리기 위해서 가장 바깥쪽 반복의 끝에 어떤 블록들을 놓아야 할까요?
      courseF_bee_for_challenge2: 최대한 가장 적은 개수의 블록을 사용해서 이 퍼즐을 풀어보세요.
      courseF_bee_for_challenge2_2018: 최대한 가장 적은 개수의 블록을 사용해서 이 퍼즐을 풀어보세요.
      courseF_bee_for_challenge2_2019: 최대한 가장 적은 개수의 블록을 사용해서 이 퍼즐을 풀어보세요.
      frozen circle function in circle: 이제 20개의 원을 겹치고, 각각을 18도씩 회전시키세요.
      frozen circle function with parameter: 원하는 크기로 그릴 수 있는 "원 그리기" 블럭이 있습니다. 이 블럭을 사용해 5 크기의 원과 10 크기의 원을 그릴 수 있겠어요?
      frozen circle function: 새로운 "원 그리기" 블럭을 이용해 10개의 원을 겹쳐 그리세요. 원을 그리기 위해 점프 하는 것을 잊지 마세요.
      frozen circle: 원은 특별한 도형입니다. 원을 그리기 위해서 물음표 부분에 어떤 수가 들어가야 할까요?
      frozen cross rotate dense: '이제 90번 반복해 보세요. 360도를 회전하려면 90도를 몇 번 회전해야 할까요? 힌트: 생각보다 작은 수입니다.'
      frozen cross rotate: 이제 10번 반복해보세요. 각 선들을 그리면서 회전하기 위해서 몇 도가 필요할까요?
      frozen cross: "더하기 기호를 만들기 위해서 이 명령어들을 \"반복\" 블럭 안에 넣어보세요.\n엘사가 앞 뒤로 움직일 수 있는 것 아시죠?"
      frozen diamond mini snowflake: 모든 눈송이들이 서로 다른 모양을 하고 있다는 것을 아시나요? 평행 사변형을 4번 그리기 위해 "반복"블럭을 사용하고, 각각을 90도 만큼씩 회전시켜 새로운 눈송이를 만들어보세요.
      frozen diamond snowflake: 이제, 평행 사변형을 10번 그릴 수 있도록 반복 블럭을 사용하고, 각각을 36도 만큼씩 오른쪽으로 돌려 새로운 눈송이를 그려보겠습니다.
      frozen diamond: "이 블록들을 반복 블록 안에 넣어서 평행사변형을 만들어보세요.\n사각형하고 비슷하지만 각이 다릅니다. 4개의 각이 모두 90도가 아니라, 한 가지는 60도 이고 다른 한가지는 120도 입니다."
      frozen freeplay: 여러분은 이제 진짜 화가가 된 것 같아요! 겨울왕국을 만들어 보세요.
      frozen perpendicular: 이제 두 개의 선을 90도 만큼 교차시켜 그릴 수 있는지 살펴보세요. "회전"블럭과 "이동" 블럭을 사용해야 할 것 입니다.
      frozen snowflake branch: '"눈송이 가지 만들기" 블럭을 이용해 3개의 가지로 뻗어나가는 그럴 듯한 눈송이를 만들어보세요.'
      frozen snowflake full: 이제 이쁜 눈송이를 만들기 위해 8번 반복해 보세요.
      frozen snowflower: 아주 복잡한 눈송이 모양도 아주 간단한 모양들을 이용해 만들 수 있습니다. 5크기의 원을 5개, 10크기의 원을 5개 이용해 패턴을 만들 수 있겠어요?
      frozen square iterative: 사각형을 만들기 위한 과정에 반 정도 왔습니다. 4개의 선을 모아 사각형을 그려보세요.
      frozen square loop 3x: 이제 3개의 사각형을 회전시켜 만들어 보세요! 새로운 사각형을 그리기 전에 120도 만큼 회전하는 것을 잊지 마세요.
      frozen square loop: "안녕하세요. 저는 아렌델의 안나입니다!\n더 적은 블록들을 사용하는 \"반복\" 블록을 이용해서 사각형을 1개 만들어보세요.\n사각형 1개를 만들기 위해서 \"반복\" 블록 안 (???) 값으로 얼마나 넣어야 할까요?"
      frozen square snowflake: "\"반복\" 블록을 사용해서 사각형을 10번 만들어 보세요.\n삼각형을 한 번씩 그릴 때마다, 회전 블록을 이용해서 36 도 만큼 씩 회전시켜주세요."
      grade2_MakeDogTag_8: 이제 여러 개의 'V'자를 연결해서, 반복 실행 구조 안에 넣어보세요.
      grade2_MakeDogTag_9: "뭔가 멋진 작업을 할 시간이에요!\n\\r\n\\r\n마지막 퍼즐에서 만든 코드를 새로 구성할겁니다. 이번에는, 루프 안에서 왼쪽으로 30도 돌게 추가하세요. 이제 8번이 아니라 24번 이걸 반복하세요."
      grade2_PuppyLoops_10: |-
        바람개비가 완성되지 않았습니다. 완성하려면 얼마나 반복해야 할까요?
      grade2_PuppyLoops_4: 이 퍼즐에서는 두 개의 반복(횟수) 블록을 이용하면 블록들을 최소한으로 사용할 수 있습니다.
      grade2_PuppyLoops_8: "고양이 수염을 그리는 코드에 문제가 있습니다.\n\\r\n\\r\n고양이 수염의 길이가 같도록 코드를 고쳐주세요."
      grade2_PuppyLoops_9: |-
        C가 왼쪽으로 그려지는 코드 같습니다!\r
        \r
        C를 정확하게 그리려면 어떻게 해야할까요?
      grade2_puppy_loops4: 이 퍼즐에서는 두 개의 반복(횟수) 블록을 이용하면 블록들을 최소한으로 사용할 수 있습니다.
      grade3_ConditionalsElse_2: "구름들이 더 많습니다! \\r\n\\r\n모든 구름 아래에 꽃들이 있는 것은 아니기 때문에 구름 아래에 꽃이 숨어있는지 살펴보고 꽃꿀을 모아야 합니다. \\r\n\\r\n기억하세요: 모든 구름들 아래에 똑같은 것들이 숨겨진 것은 아닙니다!"
      grade3_ConditionalsElse_5: |-
        이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다.\r
        \r
        '만약/그렇지않으면' 블록을 이용해서 꽃이면 꽃꿀을 모으고\r
        아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요.
      grade3_ConditionalsElse_6: "이 자주색 꽃에는 꽃꿀이 1, 2, 3개 있을 수 있습니다. \\r\n\\r\n이 \"만약\" 블록은 다른 \"만약/아니면\" 블록과 결합되어서, \"만약/(아니고 만약/모두 아니면)\" 명령을 만들어낼 수 있습니다. \n\\r\n\\r\n꽃꿀의 양을 모르는 경우에도 꽃꿀을 모두 얻을 수 있게 해보세요."
      grade3_ConditionalsElse_7: "자주색 꽃은 꽃꿀이 3, 2, 1 중 하나입니다. \n\\r\n\\r\n\"자주색 꽃 확인\" 함수를 완성하고 이용해서 꽃의 모든 꽃꿀들을 모을 수 있도록 해보세요."
      grade3_ConditionalsElse_8: "\"꽃을 확인하고 꿀 만들기\" 함수의 내부를 완성해 주세요. \\r\n\\r\n자주색 꽃의 꽃꿀이 3, 2, 1 인 경우에는 모든 꽃꿀을 모으세요. \\r\n그 후에 앞으로 이동해서 꿀을 만들면 됩니다."
      grade3_ConditionalsElse_9: "**형성평가:** 이 구름은 한 개의 꽃꿀을 가지고 있는 꽃 아니면 한 개의 꿀을 필요로 하는 벌집을 숨기고 있습니다. \\r\n\\r\n\"꽃꿀을 모으거나 꿀 만들기\" 함수를 완성하고 나서 그 함수를 사용하여 꽃꿀이나 꿀을 모으도록 만들어 주세요.\\r\n"
      grade3_ConditionalsElse_TeacherIDo: |-
        이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다.\r
        \r
        '만약/그렇지않으면' 블록을 이용해서 꽃이면 꽃꿀을 모으고\r
        아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요.
      grade3_Conditionals_1: "저는 배고픈 꿀벌입니다! \\r\n\\r\n\\r\n최소한의 블록만 사용해서 꽃꿀을 모두 모을 수 있게 도와 주세요."
      grade3_Conditionals_10: |-
        와 이번에는 여러 가지들이 있네요!\r
        \r
        여러분들이 배운 것들을 이용해 꽃꿀을 모아 꿀을 만들어보세요.
      grade3_Conditionals_11 BAD: "형성평가: '~인 동안' 반복 구조를 이용해서, 이 꽃에서 꽃꿀을 모두 모아보세요."
      grade3_Conditionals_11: "이제 모든 것을 함께 사용해 봅시다!\\r\n\\r\n지금까지 배운 것들을 이용해서 최소한의 블록들로 꽃꿀이 있는 꽃에서 꽃꿀을 모아 보세요.\\r\n\\r\n마지막에는 꿀을 만들어야 합니다."
      grade3_Conditionals_12: "계단 모양의 패턴은 많이 익숙합니다. \\r\n\\r\n최소한의 블록들만 사용해서 꽃꿀이 있는 꽃에서만 꽃꿀을 모아보세요."
      grade3_Conditionals_13: "형성평가: 꽃꿀을 모두 모아주세요.\\r\n자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요."
      grade3_Conditionals_2: "저 꽃꿀들을 보세요!\\r\n\\r\n최소한의 블록들을 사용해서 꽃꿀을 모아 꿀을 만들어보세요.  "
      grade3_Conditionals_3: "이 마술 자주색 꽃들은 변화 합니다!\\r\n\\r\n퍼즐을 실행 할때마다 1개의 꽃꿀을 가지고 있을 수도 있고 없을 수도 있습니다.\n하지만 꽃꿀을 가지고 있는지는 코드를 실행전에 알 수 없습니다.\\r\n\\r\n꽃꿀이 없는 자주색 꽃에서 꽃꿀을 모으지 않도록 주의하세요.\\r\n먼저 '꽃꿀이 있으면' 블록을 이용해서 꽃꿀의 양이 1인지(=있는지) 확인해야합니다."
      grade3_Conditionals_8: "뭐가 있을까요!\\r\n\\r\n꽃밭을 돌아다니면서 꽃꿀이 있는 꽃들에서만 꽃꿀을 모을 수 있게 도와주세요. "
      grade3_Debugging_1: |-
        이 블록들에는 오류들이 있어서 짜증이 나네요!\r
        \r
        모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류(들) 을 수정해주세요.
      grade3_Debugging_5: "꽃들이 맛있어보여요! \\r\n\\r\n모든 꽃꿀들을 모을 수 있도록 오류(들) 을 고쳐주세요.\\r\n코드 확인시 단계별 또는 실행을 사용할 수 있습니다."
      grade3_Debugging_6: |-
        달콤한 도전이네요! \r
        \r
        모든 꽃꿀들을 모을 수 있도록 오류(들)을 고쳐주세요.
      grade3_Debugging_9: |-
        "벌벌" 떨지 마세요! \r
        \r
        모든 꽃꿀들을 모아 꿀을 만들 수 있도록, 이 프로그램의 오류들을 고쳐야 합니다.
      grade3_Loops_10: |-
        꿀벌이 엄청 바쁘네요!\r
        \r
        최대한 적은 블록들을 사용해서
        꽃꿀을 모으고 꿀을 만들 수 있도록 꿀벌을 도와 주세요.
      grade3_Loops_11: "이 길의 모양은 다른 것들과 다릅니다. \\r\n\\r\n최대한 적은 블록들을 사용해서 꽃꿀을 모두 모아보세요."
      grade3_Loops_3: 모든 꽃꿀을 모으기 위해, 반복 구조를 사용해보세요.
      grade3_Loops_4: 반복 블록을 사용해서, 꽃꿀을 모두 모으고 꿀을 만들어보세요.
      grade3_Loops_6: "이 퍼즐을 해결하려면 몇 번 반복해야할까요? \\r\n\\r\n반복 실행 구조는 매우 편리합니다!\n반복 실행 구조를 사용해서 최대한 적은 블록들로 해결해 보세요."
      grade3_Loops_7: |-
        저 꽃들이 달콤해 보여요!\r
        \r
        최대한 적은 블록들을 사용해 각 꽃들에서 꽃꿀을 모아보세요.
      grade3_Loops_TeacherIDo: |-
        저 꽃들이 달콤해 보여요!\r
        \r
        최대한 적은 블록들을 사용해 각 꽃들에서 꽃꿀을 모아보세요.
      grade3_bee_conditionals_quantum2: "구름들이 더 많습니다! \\r\n\\r\n모든 구름 아래에 꽃들이 있는 것은 아니기 때문에 구름 아래에 꽃이 숨어있는지 살펴보고 꽃꿀을 모아야 합니다. \\r\n\\r\n기억하세요: 모든 구름들 아래에 똑같은 것들이 숨겨진 것은 아닙니다!"
      grade3_maze_loops2: "블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\\r\n\\r\n반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요."
      grade3_maze_nestedLoops4: 이 퍼즐에서는 두 개의 반복(횟수) 블록을 이용하면 블록들을 최소한으로 사용할 수 있습니다.
      grade4_arist_nested_loop_flags1: 주어진 코드를 반복시켜서 풍차를 만들어 주세요.
      grade4_arist_nested_loop_polygons1: "이 디자인을 10번 반복시켜주세요. \\r\n\\r \n한 번 반복하고나서 얼마나 회전해야 할까요? (힌트: 360을 10으로 나누면 얼마일까요?)"
      grade4_arist_nested_loop_polygons2: "이 디자인을 6번 반복시켜주세요. \\r\n\\r\n한 번 반복하고나서 얼마나 회전해야 할까요? (힌트: 360을 6으로 나누면 얼마일까요?) "
      grade4_arist_nested_loop_triangles3: 삼각형 코드를 반복시켜서 육각형을 그려 주세요.
      grade4_arist_nested_loop_triangles4: 악어 입 안에 이빨을 그려주세요!
      grade4_arist_nested_loop_triangles5: |-
        다른 반복 안에 시작 코드를 중첩시켜 넣어서 해를 만들어 주세요. \r
        \r
        이렇게 가운데가 빈 멋진 디자인을 얻기 위해서는 회전하기 전에 삼각형의 길이만큼 앞으로 점프해야 합니다.
      grade4_arist_nested_loop_triangles6: 중첩 반복을 이용해서 36개의 삼각형들을 그려주세요.
      grade4_artist_functions2: "함수들로 새로운 블록들을 만들어낼 수 있습니다! \\r\n\\r\n\"사각형 그리기\" 라는 함수에 사각형 1개를 그리는 블록들을 넣었습니다.\n\"사각형 그리기\" 함수를 이용해서 안경을 그려보세요. \n\\r\n\\r\n사각형들은 75 픽셀 만큼 떨어져 있습니다."
      grade4_artist_nested_loop_flags1: 주어진 코드를 반복시켜서 풍차를 만들어 주세요.
      grade4_artist_nested_loop_polygons1: "이 디자인을 10번 반복시켜주세요. \\r\n\\r \n한 번 반복하고나서 얼마나 회전해야 할까요? (힌트: 360을 10으로 나누면 얼마일까요?)"
      grade4_artist_nested_loop_triangles5: |-
        다른 반복 안에 시작 코드를 중첩시켜 넣어서 해를 만들어 주세요. \r
        \r
        이렇게 가운데가 빈 멋진 디자인을 얻기 위해서는 회전하기 전에 삼각형의 길이만큼 앞으로 점프해야 합니다.
      grade4_artist_nested_loop_triangles6: 중첩 반복을 이용해서 36개의 삼각형들을 그려주세요.
      grade4_artist_parameters_triangles2: "이 함수 블록들이 뭔가 다르다는 것을 알아차리셨나요?\n\"실행\"을 눌러 어떤 일이 일어나나 살펴보세요."
      grade4_bee_conditionals_nested_loops: "형성평가: 꽃꿀을 모두 모아주세요.\\r\n자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요."
      grade4_bee_conditionals_new1: "형성평가: 꽃꿀을 모두 모아주세요.\\r\n자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요."
      grade4_bee_conditionals_quantum2: "구름들이 더 많습니다! \\r\n\\r\n모든 구름 아래에 꽃들이 있는 것은 아니기 때문에 구름 아래에 꽃이 숨어있는지 살펴보고 꽃꿀을 모아야 합니다. \\r\n\\r\n기억하세요: 모든 구름들 아래에 똑같은 것들이 숨겨진 것은 아닙니다!"
      grade4_bee_conditionals_quantum5: |-
        이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다.\r
        \r
        '만약/그렇지않으면' 블록을 이용해서 꽃이면 꽃꿀을 모으고\r
        아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요.
      grade4_bee_functions2: "함수들은 어떤 작업을 수행할 때 사용하는 블럭들의 모임이라고 할 수 있습니다.\\r\n\\r\n\"꽃꿀 2번 모으기\" 를 이용해서 각 꽃들에서 꽃꿀을 모아보세요."
      grade4_bee_functions3: "함수들은 어떤 작업을 수행하는데 블럭들의 집합이라고 볼 수 있습니다.  \\r\n\\r\n\"5번 모으기\" 함수를 이용해서 한 번에 5개의 꽃꿀을 모아보세요."
      grade4_bee_nestedLoops4: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. \\r\n\\r\n중첩 반복을 사용하면 됩니다. "
      grade4_frozen_freeplay: 여러분은 이제 진짜 화가가 된 것 같아요! 겨울왕국을 만들어 보세요.
      grade4_frozen_functions0: 원은 특별한 도형입니다. 원을 그리기 위해서 물음표 부분에 어떤 수가 들어가야 할까요?
      grade4_frozen_functions1a: 새로운 "원 그리기" 블럭을 이용해 10개의 원을 겹쳐 그리세요. 원을 그리기 위해 점프 하는 것을 잊지 마세요.
      grade4_frozen_functions2: 이제 20개의 원을 겹치고, 각각을 18도씩 회전시키세요.
      grade4_frozen_functions3: 원하는 크기로 그릴 수 있는 "원 그리기" 블럭이 있습니다. 이 블럭을 사용해 5 크기의 원과 10 크기의 원을 그릴 수 있겠어요?
      grade4_frozen_functions4: 아주 복잡한 눈송이 모양도 아주 간단한 모양들을 이용해 만들 수 있습니다. 5크기의 원을 5개, 10크기의 원을 5개 이용해 패턴을 만들 수 있겠어요?
      grade4_frozen_nested_loop_diamonds2: 모든 눈송이들이 서로 다른 모양을 하고 있다는 것을 아시나요? 평행 사변형을 4번 그리기 위해 "반복"블럭을 사용하고, 각각을 90도 만큼씩 회전시켜 새로운 눈송이를 만들어보세요.
      grade4_frozen_nested_loop_diamonds3: 이제, 평행 사변형을 10번 그릴 수 있도록 반복 블럭을 사용하고, 각각을 36도 만큼씩 오른쪽으로 돌려 새로운 눈송이를 그려보겠습니다.
      grade4_frozen_square: "안녕하세요. 저는 아렌델의 안나입니다!\n더 적은 블록들을 사용하는 \"반복\" 블록을 이용해서 사각형을 1개 만들어보세요.\n사각형 1개를 만들기 위해서 \"반복\" 블록 안 (???) 값으로 얼마나 넣어야 할까요?"
      grade4_frozen_square_loop1: "안녕하세요. 저는 아렌델의 안나입니다!\n더 적은 블록들을 사용하는 \"반복\" 블록을 이용해서 사각형을 1개 만들어보세요.\n사각형 1개를 만들기 위해서 \"반복\" 블록 안 (???) 값으로 얼마나 넣어야 할까요?"
      grade4_frozen_square_loop2: 이제 3개의 사각형을 회전시켜 만들어 보세요! 새로운 사각형을 그리기 전에 120도 만큼 회전하는 것을 잊지 마세요.
      grade4_frozen_square_loop3: "\"반복\" 블록을 사용해서 사각형을 10번 만들어 보세요.\n삼각형을 한 번씩 그릴 때마다, 회전 블록을 이용해서 36 도 만큼 씩 회전시켜주세요."
      grade4_review_artist2: "이 집에는 지붕이 필요합니다! 삼각형을 그려주세요. \\r\n\\r\n힌트:\n세 변의 길이는 모두 같습니다.\\r\n\\r\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"\nwidth=\"300\"/>"
      grade4_review_artist3: "점프 블록은 선을 그리지 않고 이동하게 해줍니다.\n앞으로 점프, 앞으로 이동하기 블록들을 이용해서 파선을 그려보세요."
      grade4_review_bee1: 반복 블록을 사용해서, 꽃꿀을 모두 모으고 꿀을 만들어보세요.
      grade4_review_bee3: |-
        꿀벌이 엄청 바쁘네요!\r
        \r
        최대한 적은 블록들을 사용해서
        꽃꿀을 모으고 꿀을 만들 수 있도록 꿀벌을 도와 주세요.
      grade5_artist_for_loops1: 반복 블록을 1개 사용하여 너비가 50 픽셀인 삼각형을 그려주세요.
      grade5_artist_for_loops10: "이 이미지를 만들어내기 위해서 어떤 것들을 어떻게 써야 할 지 생각해 낼 수 있을까요?\\r\n\\r\n힌트가 필요한가요? 여기를 클릭하세요."
      grade5_artist_for_loops5: |-
        이전 그림에서 1가지만 바꾸면 이 그림을 만들 수 있습니다. 어떤 것을 바꾼 것인지 찾아낼 수 있나요?\r
        \r
        힌트: 뭔가 제거하면 됩니다!
      grade5_artist_parameters_triangles2a: "이 함수 블록들이 뭔가 다르다는 것을 알아차리셨나요?\n\"실행\"을 눌러 어떤 일이 일어나나 살펴보세요."
      grade5_artist_variables_hexagons1: "다시 한 번 해보세요. \\r\n\\r\n육각형들로 이런 멋진 디자인을 만들기 위해 \"길이\" 변수값을 60으로 설정해 보세요."
      grade5_artist_variables_pentagon9: "자 이제, 이전 레벨에서의 알고리즘을 다시 만든 후,\n한 변의 길이가 150인 오각형을 만들어보세요."
      grade5_artist_variables_pentagons1: "\"길이\" 변수의 값을 정확히 입력하고 이 변수를 모든 알맞은 위치에 넣어서 100 픽셀짜리 오각형 패턴을 그려보세요. \\r\n\\r\n길이 변수의 값을 한 번만 입력하면, 그 값을 계속 사용할 수 있다는 것을 알 수 있습니다."
      grade5_playlab_variables13: '"캐릭터가 닿으면" 블록을 이용해서, 강아지 캐릭터다 다른 캐릭터들에 닿으면, 처음의 가장 위쪽의 가장 왼쪽으로 이동되도록 해 보세요.'
      grade5_playlab_variables2: 이전 퍼즐은 공정하지 않았습니다! "강아지 속도" 변수의 값을 바꿔서 고양이보다 더 많은 깃발을 모을 수 있도록 해보세요. 10 개의 깃발을 먼저 모으면 이깁니다!
      grade5_playlab_variables9: "\"순찰\" 함수가 있습니다.\n함수를 수정해서 고양이가 400 픽셀 위로 이동 했다가, 다시 400 픽셀 아래로 이동하게 해보세요."
      level 'grade3_Loops_10: |-
        꿀벌이 엄청 바쁘네요!\r
        \r
        최대한 적은 블록들을 사용해서
        꽃꿀을 모으고 꿀을 만들 수 있도록 꿀벌을 도와 주세요.
      level 'grade3_Loops_11: "이 길의 모양은 다른 것들과 다릅니다. \\r\n\\r\n최대한 적은 블록들을 사용해서 꽃꿀을 모두 모아보세요."
      level 'grade3_Loops_3: 모든 꽃꿀을 모으기 위해, 반복 구조를 사용해보세요.
      level 'grade3_Loops_4: 반복 블록을 사용해서, 꽃꿀을 모두 모으고 꿀을 만들어보세요.
      level 'grade3_Loops_5: "와 꽃밭이 이쁘네요!\\r\n\\r\n7 블록보다 적은 블록을 사용해서 꿀벌이 모든 꽃들을 살펴볼 수 있게 해주세요."
      level 'grade3_Loops_6: "이 퍼즐을 해결하려면 몇 번 반복해야할까요? \\r\n\\r\n반복 실행 구조는 매우 편리합니다!\n반복 실행 구조를 사용해서 최대한 적은 블록들로 해결해 보세요."
      level 'grade3_Loops_7: |-
        저 꽃들이 달콤해 보여요!\r
        \r
        최대한 적은 블록들을 사용해 각 꽃들에서 꽃꿀을 모아보세요.
