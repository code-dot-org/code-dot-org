pt-BR:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Oi, eu sou um artista. Você pode escrever códigos para me fazer desenhar quase qualquer coisa. Use alguns blocos para me fazer desenhar sobre as linhas cinzas na imagem. (Cada linha tem o comprimento de 100 pixels)
      2-3 Artist 11_instruction: |
        Faça uma borda na placa de pare criando um octógono
        com 8 lados, com 100 pixels de comprimento cada. Quantos graus você deve virar? (Dica:
        quanto é 360 divido por 8?) 
      2-3 Artist 12_instruction: |
        Configure o bloco "repita vezes" para que ele crie
        um "círculo" para terminar o globo ocular. Se cada movimento virar um grau para a direita,
        quantas vezes você precisa repetir para completar o círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: |
        Esta casa tem uma parede inacabada. Cada lado
        tem 100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede. 
      2-3 Artist 2_instruction: |
        Esta casa tem uma parede inacabada. Cada lado tem
        100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede. 
      2-3 Artist 3.4_instruction: |
        O bloco pule move o artista sem desenhar.
        Desenhe a linha tracejada usando os bloco pule e desenhe.
      2-3 Artist 3_instruction: Esse chapéu tem 100 pixels de altura. Desenhe um chapéu que tenha 70 pixels a menos.
      2-3 Artist 3new_instruction: |
        O chapéu vermelho tem 100 pixels de altura. Termine o desenho
        de um chapéu preto que seja 70 pixels menor. A largura do chapéu preto é de 50 pixels.
      2-3 Artist 4_instruction: Ajude-me a completar a casa para o gato.
      2-3 Artist 5_instruction: |
        Substitua esse código por um bloco "repita vezes"
        para desenhar a mesma casa usando apenas 3 blocos.
      2-3 Artist 6_instruction: 'Essa casa precisa de um telhado! Desenhe o triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      2-3 Artist 7_instruction: |
        Termine de desenhar a metade direita da última janela.
        Cada quadrado da janela tem 25 pixels. 
      2-3 Artist 8_instruction: |2
        Complete os quartos para cada um dos animais dividindo
         o retângulo em 2 quadrados de mesmo tamanho. O retângulo tem 200 pixels de largura
        e 100 pixels de altura.
      2-3 Artist 9_instruction: Termine esta pipa
      2-3 Artist Assessment 1_instruction: 'Avaliação: termine de desenhar o último dente, 25 pixels de largura e 25 pixels de altura.'
      2-3 Artist Debugging 1_instruction: Você consegue fazer esse chapéu com 100 pixels de altura?
      2-3 Artist Debugging 10_instruction: |
        O controlador de direção do controle do meu jogo
        é muito estreito. Dica: faça-o 10 pixels mais largo
      2-3 Artist Debugging 11_instruction: 'Ajude-me a terminar meu lindo floco de neve. Quantas vezes preciso "repetir" para terminá-lo?'
      2-3 Artist Debugging 12_instruction: Eu devo adicionar uma onda do mar nessa cena. Você pode me ajudar?
      2-3 Artist Debugging 2_instruction: 'O código para os três bigodes que você vê está errado. Dica: cada bigode tem o comprimento de 75 pixels. Corrija esse código para desenhar os bigodes.'
      2-3 Artist Debugging 3_instruction: |
        Meu barco tem um buraco! Você consegue corrigi-lo
        alterando o ângulo da linha? Dica: o último ângulo está 15 graus fora de lugar.
      2-3 Artist Debugging 4_instruction: |
        Qual é a imagem que estamos tentando
        desenhar? Termine de conectar os pontos usando as linhas e ângulos apropriados.
      2-3 Artist Debugging 5_instruction: |
        O código para a perna e para o pé que você vê
        está errado. Dica: o pé está muito comprido, pode ser necessário excluir um passo (pé... passo... trocadilho)
      2-3 Artist Debugging 6_instruction: |
        Parece que estou sentado em uma cadeira
        sem uma perna. Edite os blocos para desenhar a perna.
      2-3 Artist Debugging 7_instruction: |
        Parece que o C no código está desenhado ao contrário.
        Você consegue fazê-lo parecer com um C?
      2-3 Artist Debugging 8_instruction: |
        Meu cata-vento não está pronto. Quantas
        vezes eu preciso repetir para terminá-lo?
      2-3 Artist Debugging 9_instruction: |
        O código para este caule está incorreto. Dica:
        o ângulo está 60 graus fora de lugar
      2-3 Artist Debugging Assessment 1_instruction: |
        Esta forma é muito pequena. Você
        pode fazê-la maior? Dica: ela deve ter 75 pixels a mais de cada lado.
      2-3 Artist Free Play_instruction: Atividade livre! Desenhe o que você quiser.
      2-3 Artist Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim ama desenhar!
        Me ajude a desenhar os óculos quadrados. Dica: a haste entre as lentes é
        25 pixels menor que o comprimento do quadrado.
      2-3 Artist Functions 10_instruction: |
        Aqui temos duas funções, uma para desenhar uma
        engrenagem grande e outra para desenhar uma engrenagem pequena. Use-as para desenhar o interior de uma máquina!
      2-3 Artist Functions 11.5_instruction: |
        Aqui está a mesma função "Desenhe um hexágono".
        O que acontece se você virar apenas 60 graus a cada repetição?
      2-3 Artist Functions 11_instruction: |
        Renomeamos a função "desenhe um quadrado"
        como "desenhe um hexágono", mas ela ainda desenha apenas quadrados! Você consegue
        modificar a função "desenhe um hexágono" para desenhar um hexágono com lados de 50 pixels, e
        desenhar a imagem usando a função?
      2-3 Artist Functions 12_instruction: |
        Funções são ótimas para desenhar
        coisas complexas várias vezes. Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas? (Dica: as plantas estão todas separadas
        por um comprimento de 100 pixels)  
      2-3 Artist Functions 13_instruction: |
        Fornecemos quatro funções para você.
        Use-as da forma que quiser dentro de um ou mais laços para criar imagens que
        você pode compartilhar com seus amigos. Pressione "Executar" para ver um exemplo.
      2-3 Artist Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      2-3 Artist Functions 3_instruction: |
        Edite a função para desenhar um quadrado com
        lados de 115 pixels de comprimento e desenhe os óculos maiores. Agora, os quadrados estão separados por 45 pixels.
      2-3 Artist Functions 4_instruction: |
        Use o bloco "repita" para desenhar esses
        3 quadrados.
      2-3 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        duas casas usando dois parâmetros diferentes. (Dica: a primeira casa tem 100 pixels).
      2-3 Artist Functions 9_instruction: |
        Esta é uma função para flocos de neve. Experimente
        usá-la para criar uma cena de inverno! Esse nível é livre, então não há
        desafios para resolver. Divirta-se!
      2-3 Artist Loops 1_instruction: |
        Você consegue fazer um hexágono com lados de
        100 pixels de comprimento para terminar a célula? Lembre-se, isso significa que você só vai
        precisar virar 60 graus!
      2-3 Artist Loops 10_instruction: |
        O que acontece com o design quando fazemos nossa
        etapa final com metade do comprimento?
      2-3 Artist Loops 11_instruction: |
        Agora, vamos colocar *outro* laço em torno de toda
        a criação! Não se esqueça de adicionar um ângulo ao final do laço externo.
      2-3 Artist Loops 2_instruction: |
        Agora, use um bloco "repita" para transformar a célula em uma
        concha.
      2-3 Artist Loops 4_instruction: |
        Quer ver o que acontece quando repetimos essa
        forma várias vezes usando um laço?
      2-3 Artist Loops 5_instruction: |
        Agora, vamos fazer uma pequena alteração no laço
        e ver como nossas imagens ficam diferentes.
      2-3 Artist Loops 6_instruction: |
        Adicione mais um movimento e outra ação de virar dentro
        do laço e veja como seu design muda.
      2-3 Artist Loops 7_instruction: |
        Podemos usar laços para criar todos os tipos de polígonos. Você 
        consegue criar um losango dentro desse hexágono?
      2-3 Artist Loops 8_instruction: Vamos colocar ambos os elementos dentro de um laço.
      2-3 Artist Loops 9_instruction: "Vamos repetir os mesmos elementos, mas \nagora vamos adicionar alguma distância entre eles.\\r\nUse o mesmo código usado \nanteriormente, mas adicione um passo à frente no final do laço externo."
      2-3 Artist Loops New 1_instruction: |
        Vamos desenhar a cabeça do robô! Você pode
        fazer um quadrado com lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Agora vamos conectar um monte de V's,
        desenhando-os em um laço.
      2-3 Artist Loops New 11_instruction: |
        Dessa vez, vamos desenhar 24 vezes. Adicione
        uma ação de virar à esquerda em 30 graus ao código e coloque tudo em um bloco repita.
      2-3 Artist Loops New 12_instruction: |
        Desenhe um diamante com lados de 100 pixels.
        
      2-3 Artist Loops New 13_instruction: Agora, desenhe o diamante 3 vezes em um laço.
      2-3 Artist Loops New 14_instruction: |
        Agora, vamos desenhar o diamante 10 vezes,
        mas vamos rotacionar 90 graus entre cada diamante.
      2-3 Artist Loops New 15_instruction: Desenhe algo divertido.
      2-3 Artist Loops New 2_instruction: |
        Aqui temos alguns dos códigos que você usou para desenhar
        aquele quadrado. O que acontece se você usar o bloco repita para executar esse código 4 vezes?
      2-3 Artist Loops New 9_instruction: |
        Desenhe um V simples com ambos os lados com 50
        pixels para completar a seta.
      2-3 Artist Match Hex Pic_instruction: 'Correspondência: ajude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondência: termine o código que falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondência: complete o código que falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondência: preencha o código que falta.'
      2-3 Artist Nested Loops 1_instruction: "Você usou laços para desenhar formas antes,\nmas você sabia que pode colocar um laço dentro de outro laço?\\r\nRepita este bloco\nde código inteiro 3 vezes para desenhar o padrão."
      2-3 Artist Nested Loops 10_instruction: |
        Repita este código 12 vezes para completar
        o padrão.
      2-3 Artist Nested Loops 11_instruction: |
        Repita este código 4 vezes para completar
        o padrão, vire 90 graus após cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Repita este código 12 vezes para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |
        Agora, repita o triângulo 6 vezes. Depois
        de cada triângulo, você precisa virar 60 graus antes de desenhar o próximo.
      2-3 Artist Nested Loops 3_instruction: |
        Você vai precisar repetir o triângulo 12
        vezes para desenhar este padrão. Divida o número de graus em um círculo (360)
        pelo número de formas que você está desenhando (12) para descobrir quanto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |
        Repita este diamante 12 vezes para desenhar
        uma flor. Dica: 12 diamantes são como os 12 triângulos que você fez - quanto
        você precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |
        Preencha as janelas deste edifício com
        um laço aninhado. As janelas têm 20 pixels de comprimento e são separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |
        Esse dinossauro tem 8 espinhos ao longo
        de sua cauda. Cada espinho tem 30 pixels de comprimento. Repita o triângulo 8 vezes, mas
        lembre-se de avançar depois de cada um.
      2-3 Artist Nested Loops 7_instruction: |
        Repita esse triângulo 10 vezes para desenhar
        o sol. Você vai precisar mover e virar depois de cada triângulo. Você pode descobrir
        quanto virar dividindo o número de graus em um círculo pelo
        número de formas que o compõem.
      2-3 Artist Nested Loops 8_instruction: |
        Agora, vamos adicionar um pouco de grama à imagem.
        Cada tufo de grama é separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |
        Vamos terminar essa imagem adicionando
        uma flor. Repita o diamante 12 vezes para desenhar sua flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        Atividade livre. Desenhe algo legal
        com laços aninhados.
      2-3 Bee Conditionals 1_instruction: |
        Olá! Eu sou uma abelha. Ajude-me a coletar o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: "As flores roxas podem ter 1 ou 0 néctar.\nTenha cuidado para não coletar néctar de uma flor roxa se ela não\ntiver néctar.\\r\n"
      2-3 Bee Conditionals 11_instruction: Colete néctar onde as flores têm néctar.
      2-3 Bee Conditionals 12_instruction: |
        Use um laço para verificar e coletar o néctar
        de todas essas flores.
      2-3 Bee Conditionals 13_instruction: |
        Colete néctar e produza mel. Dica:
        o que acontece se você usar a condição "se houver néctar" em uma flor vermelha? Você pode
        completar isso com um laço?
      2-3 Bee Conditionals 14_instruction: |
        Colete néctar e produza mel. Tenha cuidado
        para não coletar néctar de uma flor roxa se ela não tiver néctar.
      2-3 Bee Conditionals 15_instruction: Colete néctar das quatro flores.
      2-3 Bee Conditionals 2_instruction: |
        Olá, eu sou uma abelha! Ajude-me a coletar todo
        o néctar das flores. Use um laço.
      2-3 Bee Conditionals 3_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir mel. Use um laço.
      2-3 Bee Conditionals 4_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir todo o mel.
      2-3 Bee Conditionals 5_instruction: |
        As flores roxas podem ter 1 ou 0
        néctar, mas você não sabe quanto! Tenha cuidado para não coletar néctar de
        uma flor roxa se ela não tiver néctar. Verifique se o néctar é igual a 1
        usando o bloco se.
      2-3 Bee Conditionals 6_instruction: |
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      2-3 Bee Conditionals 7_instruction: |
        Colete o néctar de cada flor que
        tiver néctar disponível.
      2-3 Bee Conditionals 8_instruction: |
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      2-3 Bee Conditionals 9_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |
        Avaliação: Colete todo o
        néctar. Tenha cuidado para não coletar néctar de uma flor roxa se ela não
        tiver néctar.
      2-3 Bee Debugging 1_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 10_instruction: |
        Esses blocos estão me incomodando. Conserte
        o(s) erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 2_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 3_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 4_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 5_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel. Agora você pode
        usar os botões Executar e Passo.
      2-3 Bee Debugging 6_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar.
      2-3 Bee Debugging 7_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 8_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 9_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Avaliação:  Esses blocos estão
        me incomodando. Conserte o(s) erro(s) para coletar todo o néctar e produzir
        todo o mel.
      2-3 Bee Functions 1_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |
        As flores roxas podem ter 1 ou 0 néctar.  Crie
        uma função que coleta néctar apenas das flores que têm néctar.
      2-3 Bee Functions 2_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 5" para coletar 5 néctares de uma vez. Lembre-se também
        de usar um laço para obter um contador de bloco ideal.
      2-3 Bee Functions 3_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. Use
        a função para coletar todo o néctar.
      2-3 Bee Functions 5_instruction: |
        Agora há mais néctar nas flores.
        Edite a função dada para que ela colete 4 néctares e use-a para coletar
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |
        Agora, use a mesma função para coletar néctar
        das três flores.
      2-3 Bee Functions 7_instruction: |
        Agora as flores estão mais longe. Edite a
        função dada e use-a para coletar todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |
        Crie sua própria função que coleta 7 néctares,
        avança e produz 7 unidades de mel. Use a função para coletar néctar em todas as
        flores e produzir mel em todas as colmeias.
      2-3 Bee Functions 9_instruction: |
        Crie sua própria função que vai por um
        caminho, obtém néctar, produz mel, e então retorna a abelha para o início do
        caminho.
      2-3 Bee Functions Assessment 1_instruction: |
        Avaliação: Use a função dada
        para coletar o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |
        Avaliação: Crie uma função
        para produzir 3 unidades de mel de uma vez.
      2-3 Bee Loops 1_instruction: |
        Cada flor contém uma unidade de néctar. Colete
        o néctar de cada uma das flores. 
      2-3 Bee Loops 10_instruction: |
        Você pode usar um laço enquanto dentro de outros dois
        laços para coletar todo o néctar?
      2-3 Bee Loops 11_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 12_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      2-3 Bee Loops 1A_instruction: |
        Olá, eu sou uma abelha. Você pode me ajudar a coletar
        o néctar dessas flores? 
      2-3 Bee Loops 2_instruction: |
        Use um laço para coletar o néctar e produzir o
        mel.
      2-3 Bee Loops 2A_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      2-3 Bee Loops 3_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      2-3 Bee Loops 3A_instruction: Você consegue usar um laço para coletar todo o néctar?
      2-3 Bee Loops 3B_instruction: Agora, use o novo bloco repita para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Loops 4_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      2-3 Bee Loops 4A_instruction: O que acontece se você repetir esta sequência 3 vezes? Não se esqueça de fazer o mel no final!
      2-3 Bee Loops 5_instruction: |
        Use um laço para descer as escadas e coletar o
        néctar.
      2-3 Bee Loops 6_instruction: |
        Use um laço para coletar o néctar de cada flor
        e produzir mel em cada colmeia.
      2-3 Bee Loops 7_instruction: |
        Coloque esses blocos em um laço para coletar o néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Essas flores roxas têm uma quantidade desconhecida de
        néctar. Use o laço "enquanto houver néctar" para coletar todo o néctar. Esse laço
        será executado enquanto a condição for verdadeira, neste caso, enquanto néctar > 0.
      2-3 Bee Loops 9_instruction: |
        O laço enquanto pode realizar a mesma ação que
        um comando se em um laço. Adicione um laço enquanto a esse código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |
        Avaliação - use um laço enquanto para coletar
        todo o néctar dessa flor.
      2-3 Maze 1_instruction: |
        Você pode me ajudar a pegar o porco malvado? Junte alguns
        blocos "avance" e clique em "Executar". 
      2-3 Maze 10_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 11_instruction: |
        Estou com fome, leve-me até a flor! Quantas vezes
        você precisa repetir um bloco?
      2-3 Maze 12 (copy 1)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (copy 2)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        vezes!
      2-3 Maze 12_instruction: |
        Você pode substituir esses cinco blocos por apenas dois blocos?
        (Dica: você precisa criar um laço usando um bloco "repita" para passar deste nível.)
      2-3 Maze 13 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        até!
      2-3 Maze 13_instruction: "Leve-me até o porco usando apenas dois blocos.\\r\n(Dica:\nvocê precisa usar o bloco \"repita\" para passar deste nível)"
      2-3 Maze 14 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 14_instruction: |
        Leve-me até o girassol! (Onde está o bloco "repita
        vezes" quando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 15_instruction: 'Use dois laços "repita" para chegar até o porco usando o menor número de blocos.'
      2-3 Maze 16 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 16 before_instruction: Leve-me até o porco.
      2-3 Maze 16_instruction: Leve-me até o girassol. Repita a sequência!
      2-3 Maze 2_instruction: Esse porco está me irritando. Ajude-me a chegar até ele!
      2-3 Maze 3_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze 4_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 5_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 6_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze 7_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 8_instruction: Leve-me até o porco!
      2-3 Maze 9_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      2-3 Maze Loops 17_instruction: Leve-me até o girassol!
      2-3 Maze Loops 18_instruction: "Leve-me até o girassol!\\r\n(Dica: você\nterá de usar um laço \"repita\" dentro de outro\npara passar deste nível.)"
      2-3 Maze Loops 19_instruction: Leve-me até o girassol!
      2-3 Maze Loops 20_instruction: Leve-me até o girassol!
      2-3 Maze Loops 21_instruction: Leve-me até o girassol!
      2-3 Maze Loops Assessment 1_instruction: |
        Avaliação: Leve-me até o girassol
        usando apenas 5 blocos! 
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq10v2_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq11_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq12_instruction: |
        Você pode substituir a resposta anterior por um laço
        usando um bloco "repita vezes"?
      2-3 maze sq13_instruction: |
        Querida pessoa. Mim zumbi. Deve... chegar... girassol.
        Crie um laço com o bloco "repita até".
      2-3 maze sq14_instruction: Você pode chegar até o girassol usando apenas quatro blocos?
      2-3 maze sq15_instruction: Você pode chegar até o girassol usando apenas blocos?
      2-3 maze sq16_instruction: |
        Ok, isso é parecido, mas um pouco diferente. Você pode
        fazer isso em apenas cinco blocos?
      2-3 Maze sq2_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze sq4_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze sq5_instruction: |
        Leve-me até o porco! Quantas vezes você precisa
        repetir um bloco?
      2-3 Maze sq6_instruction: |
        Você pode substituir a resposta anterior por apenas dois
        blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze sq7_instruction: Leve-me até o intruso verde usando apenas três blocos.
      2-3 Maze sq8_instruction: |
        Leve-me até o porco! (Onde está o bloco "repita vezes"
        quando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie laços para chegar até o porco usando menos blocos.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajude o pássaro a pegar o porco safado movendo-o para frente
      4-5 Artist 1_instruction: |
        Ajude-me a terminar de desenhar minha caixa. (Cada linha
        tem 300 pixels de comprimento) 
      4-5 Artist 10_instruction: |
        Pressione "Executar" para testar o código. Em seguida, repita o código
        o número suficiente de vezes para completar o desenho. As cores serão diferentes toda vez.
      4-5 Artist 11_instruction: |
        Complete as retas verdes. As retas têm 300 pixels
        de comprimento e são separadas por 15 pixels.
      4-5 Artist 2_instruction: Você pode repetir esse código para completar o quadrado?
      4-5 Artist 3.5_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou pressione "Executar" para testar o código). Em seguida, repita o código o número suficiente de vezes para completar
        o desenho. As cores serão (provavelmente) diferentes toda vez.
      4-5 Artist 3_instruction: |
        Esse canteiro de flores retangular tem um perímetro de 600.
        O lado comprido tem 200 de comprimento. Desenhe o retângulo.
      4-5 Artist 4_instruction: |
        Quantos graus há em um círculo? Repita os blocos
        para criar um círculo de cores.
      4-5 Artist 5_instruction: Que ângulo você usa?
      4-5 Artist 6_instruction: |
        Esse triângulo equilátero tem ângulos de 60, 60
        e 60 graus. Cada lado tem 200 pixels. Complete o desenho.
      4-5 Artist 7_instruction: |
        O triângulo reto tem ângulos de 30, 60 e 90
        graus. O comprimento do lado inclinado é o dobro da altura de 100 pixels. Complete
        o desenho.
      4-5 Artist 8_instruction: |
        A linha do meio-campo em um campo de futebol é perpendicular
        às linhas laterais. O campo tem um perímetro de 800 pixels e tem 240 pixels
        de comprimento. Qual é sua largura? Desenhe as bordas e a linha do meio-campo.
      4-5 Artist 9_instruction: |
        Desenhe a outra metade de forma que o design seja simétrico.
        Os triângulos são equiláteros e têm 50 pixels de comprimento.
      4-5 Artist Assessment 1_instruction: |
        Avaliação: Use um laço para desenhar o triângulo
        equilátero. Cada lado tem 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Coloque os números de 1 a 10 nos
        blocos de largura e execute o código.
      4-5 Artist For Loops 11_instruction: |
        Complete o bloco "para" para que ele
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: |
        O que acontece se você inverter os números que estão em "de"
        e "até"? Complete o bloco "para" de forma que ele conte 200, 180,
        160, 140, 120...0. 
      4-5 Artist For Loops 13_instruction: |
        Esse design foi iniciado sem um laço "para"
        e está usando muitos blocos! Use um bloco "para" e complete a espiral. Dica:
        a última linha tem 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral triangular. (Dica: a última linha tem 300 pixels).
      4-5 Artist For Loops 15_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral hexagonal. (Dica: a última linha tem 200 pixels).
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: |
        Como podemos contar de 1 até 50? Edite o
        bloco "para".
      4-5 Artist For Loops 4_instruction: |
        Complete o bloco "para" para que ele
        conte de 1 até 10, de 1 em 1.
      4-5 Artist For Loops 6_instruction: |
        Desenhe quadrados com lados de 50, 60, 70,
        80 e 90 pixels. Você vai precisar usar a função "desenhe um quadrado" cinco
        vezes.
      4-5 Artist For Loops 7_instruction: |
        Desenhe os mesmos quadrados, mas use um bloco "conte
        com" para alterar os tamanhos. Coloque o bloco "contador" na função "desenhe
        um quadrado". Dica: ele está na categoria Variáveis.
      4-5 Artist For Loops 8_instruction: |
        Você pode completar o programa colocando
        os blocos dentro de um bloco "para" que conta de 10 até 200, de 10 em 10? Você pode
        encontrar o bloco "para" na categoria Laços.
      4-5 Artist For Loops 9_instruction: |
        Esses círculos são de tamanhos 5, 10, 15, 20,
        25, 30 e 35. Desenhe os círculos usando um bloco "para".
      4-5 Artist Free Draw 1_instruction: |
        Desenho livre! Desenhe o que você estiver inspirado
        a criar.
      4-5 Artist Functions 1_instruction: Use um laço repita para desenhar esse triângulo.
      4-5 Artist Functions 10a_instruction: |
        Coloque esse código na função "desenhe um floco de neve"
        e substitua o 50 pelo parâmetro "tamanho". A função já é
        chamada para criar um floco de neve que tem 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use a função "desenhe um floco de neve"
        para criar flocos de tamanhos diferentes. Dica: o primeiro floco de neve tem 25 de comprimento
        e cada floco de neve tem duas vezes o tamanho do floco anterior.
      4-5 Artist Functions 11_instruction: |
        Essa função "desenhe um hexágono" usa
        a função "desenhe um triângulo". Complete a função do hexágono. (Dica: um
        hexágono tem 6 lados, cada um com 100 pixels de comprimento)
      4-5 Artist Functions 12_instruction: |
        Complete a função "desenhe ondas". Cada
        onda é feita de uma onda superior e uma onda inferior. Dica: desenhe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |
        Temos aqui algumas funções para
        desenhar planetas, estrelas, foguetes e robôs. Use-as da forma que quiser para criar
        imagens que você pode compartilhar com seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |
        Aqui, fornecemos
        várias funções para você. Use-as da forma que quiser dentro de um ou mais laços
        para criar imagens que você pode compartilhar com seus amigos. Clique em "Executar" para ver
        um exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |
        Avaliação: use a função "desenhe
        um quadrado" para criar os quadrados. Os quadrados têm 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Agora coloque esses blocos em uma nova função
        chamada "desenhe um triângulo pequeno" e chame-a.
      4-5 Artist Functions 2b_instruction: |
        Agora crie uma função chamada "desenhe um
        triângulo pequeno" usando os blocos fornecidos.
      4-5 Artist Functions 3_instruction: |
        Agora crie as funções "desenhe um triângulo
        médio" e "desenhe um triângulo grande". A função "desenhe um triângulo pequeno"
        está pronta para você. Os triângulos têm comprimentos de 50 (pequeno), 100 (médio)
        e 150 (grande). 
      4-5 Artist Functions 4_instruction: |
        Essa nova função "desenhe um triângulo"
        tem um parâmetro e pode fazer o trabalho das três funções de antes. Desenhe os
        mesmos triângulos usando essa nova função.
      4-5 Artist Functions 5_instruction: |
        Você pode transformar a função "desenhe um triângulo"
        em uma função "desenhe um quadrado" para alterar o desenho?
      4-5 Artist Functions 6_instruction: |
        Use as funções "desenhe um quadrado" e "desenhe um
        triângulo" para desenhar uma casa. (Dica: os lados do quadrado têm 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use as funções desenhe um quadrado e desenhe um triângulo
        junto com outros blocos para criar uma casa, adicionando-as à função "desenhe uma casa"
        e chamando-a.
      4-5 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        casas de 100 pixels e 50 pixels. As duas casas são separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        A função "desenhe uma flor" tem um parâmetro
        que permite que você defina a altura do caule. Defina a altura como 200 e veja o que acontece.
      4-5 Artist Functions 9_instruction: |
        Desenhe essas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre tem 50 pixels de altura a mais que
        a anterior. As flores também são separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |
        Você pode desenhar esse quadrado usando um laço?
        Cada lado tem 20 pixels de comprimento.
      4-5 Artist Patterns 10_instruction: |
        O código desenha duas fileiras de hexágonos -
        repita todo o código 4 vezes para desenhar a colmeia inteira. Dica: você vai precisar
        recuar 120 pixels no laço mais externo para garantir que o artista não
        desenhe fora da tela.
      4-5 Artist Patterns 11_instruction: |
        Quantas vezes você precisa repetir isso
        para desenhar um semicírculo? Dica: se há 360 graus em um círculo e cada
        repetição move 3 graus, quantas vezes você precisaria repetir para desenhar um círculo completo?
      4-5 Artist Patterns 12_instruction: |
        Se você copiar esse laço e virar para a esquerda ao invés
        da direita, o que acontece? Você pode repetir isso para desenhar essa onda?
      4-5 Artist Patterns 13_instruction: |
        Agora vamos repetir tudo quatro
        vezes para criar a moldura dessa imagem. Preste atenção aos cantos - você não pode
        simplesmente virar 90 graus! Se repetir uma ação de virar 3 graus 60 vezes faz um semicírculo,
        qual desses blocos de código vai fazer um quarto de círculo para os cantos?
      4-5 Artist Patterns 2_instruction: |
        Se você colocar seu laço do quadrado dentro
        de outro laço, o chamamos de laço aninhado. O que você precisa adicionar ao seu laço externo
        para garantir que todos os 15 quadrados fiquem alinhados?
      4-5 Artist Patterns 3_instruction: |
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      4-5 Artist Patterns 4_instruction: |
        Esse diamante tem lados de 50 pixels e ângulos
        de 120 e 60 graus. Use um laço para desenhá-lo.
      4-5 Artist Patterns 5.5_instruction: |
        Quantas vezes você precisa repetir
        esse bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Vamos repetir isso para fazer uma fileira de 6 diamantes.
        Perceba que alteramos nosso código do diamante para repetir 3 vezes ao invés de 2 - por que
        você acha que fizemos isso?
      4-5 Artist Patterns 6_instruction: |
        Quantas vezes você precisa repetir esse
        bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |
        Vamos modificar o código do último desafio
        para fazer esse padrão mais complexo. Perceba como os diamantes se sobrepõem agora. Tente
        alterar o primeiro "pule para trás" de 100 para 50 (metade da distância) - agora, quão
        longe o artista deve ir no segundo "pule para trás"?
      4-5 Artist Patterns 8_instruction: |
        Use um laço para desenhar esse hexágono com
        lados de 40 pixels e ângulos de 60 graus.
      4-5 Artist Patterns 9.5_instruction: |
        Vamos repetir esse código para desenhar duas fileiras
        de hexágonos. Perceba como nossa segunda fileira está deslocada para a direita.
      4-5 Artist Patterns 9_instruction: |
        Agora, repita o código 3 vezes para desenhar a
        a linha inteira. Dica: cada hexágono tem 80 pixels de largura da extrema esquerda
        à extrema direita.
      4-5 Artist Patterns Free Play_instruction: |
        Atividade livre - experimente criar
        seu próprio padrão!
      4-5 Bee Conditionals - FC Test_instruction: |
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        A abelha não sabe se isso é
        uma flor ou uma colmeia. Colete néctar apenas das flores, mas primeiro verifique
        se o objeto é uma flor ou uma colmeia.
      4-5 Bee Conditionals 1_instruction: |
        A abelha não sabe se isso é uma flor ou
        uma colmeia. Colete néctar apenas das flores, mas primeiro verifique se o objeto é
        uma flor ou uma colmeia.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        Agora a abelha só quer néctar.
        Lembre-se, nem todos os objetos são flores, então faça a verificação para coletar néctar apenas
        das flores.
      4-5 Bee Conditionals 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então veja se o objeto abaixo da nuvem é
        uma flor. Se ele for, então você pode coletar o néctar.
      4-5 Bee Conditionals 3_instruction: |
        Agora a abelha só quer produzir mel.
        Faça a verificação para produzir mel apenas nas colmeias.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        O objeto desconhecido pode ser
        uma flor ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for
        uma flor, senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 4_instruction: |
        O objeto desconhecido pode ser uma flor
        ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for uma flor,
        senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 5_instruction: |
        Deve haver uma flor ou uma colmeia
        sob essas nuvens. Use o bloco se/senão para coletar néctar se houver uma
        uma flor, senão para produzir mel (porque há, então, uma colmeia).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        Essa flor roxa pode ter
        1, 2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco
        se-senão para criar um bloco se, senão-se, senão. Complete a solução para coletar
        a quantidade desconhecida de néctar.
      4-5 Bee Conditionals 6_instruction: |
        Essa flor roxa pode ter 1,
        2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco se-senão
        para criar um bloco se, senão-se, senão. Complete a solução para coletar a
        quantidade desconhecida de néctar.
      4-5 Bee Conditionals 7_instruction: |
        Lembre-se de que as flores roxas podem ter
        1, 2 ou 3 néctares. Complete a função "verifique a flor roxa" e use-a
        para coletar todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |
        Escreva dentro da função "verifique flor e
        produza mel". Sua função deve verificar se a flor roxa tem 3, 2 ou
        1 néctar e coletar todo o néctar. Então, siga em frente e produza mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Avaliação: esse código está errado.
        Complete a função "colete néctar ou produza mel" e então chame-a para coletar
        todo o néctar e produzir o mel. Lembre-se, as flores roxas podem ter 1, 2 ou 3 néctares.
      4-5 Bee Debugging 1_instruction: |
        Estes blocos estão me incomodando. Você pode
        consertá-los?
      4-5 Bee Debugging 10_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 11_instruction: Isso conta corretamente?
      4-5 Bee Debugging 2_instruction: Ajude a abelha a coletar o néctar e fabricar o mel.
      4-5 Bee Debugging 3_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 4_instruction: Esses blocos não funcionam. Qual é o padrão?
      4-5 Bee Debugging 5_instruction: Algo não está certo aqui...
      4-5 Bee Debugging 6_instruction: |
        A flor roxa tem uma quantidade desconhecida de
        néctar. Conserte os blocos para coletar todo o néctar da flor.
      4-5 Bee Debugging 7_instruction: Está faltando alguma coisa na função...
      4-5 Bee Debugging 8_instruction: |
        Essa função está certa, mas não é usada
        corretamente.
      4-5 Bee Debugging 9_instruction: Por que a abelha não está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliação: conserte o código.'
      4-5 Bee Nested Loops 1_instruction: Use um laço para coletar todo o néctar.
      4-5 Bee Nested Loops 2_instruction: |
        Colete todo o néctar de cada flor.
        Use um laço aninhado. 
      4-5 Bee Nested Loops 3_instruction: |
        Colete todo o néctar colocando o
        código inicial dentro de um laço aninhado.
      4-5 Bee Nested Loops 4_instruction: |
        Colete todo o néctar de cada flor
        e produza mel em cada colmeia. Use um laço aninhado. 
      4-5 Bee Nested Loops 5_instruction: |
        Colete todo o néctar criando
        um laço aninhado.
      4-5 Bee Nested Loops 6_instruction: Colete todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |
        Coloque esse laço dentro de outro laço para criar
        um laço aninhado e coletar todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto. Substitua o bloco interno repita vezes por um bloco
        enquanto. 
      4-5 Bee Nested Loops 9_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto dentro de um bloco repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Avaliação - colete todo o
        néctar e produza todo o mel usando laços.
      4-5 Bee Nested Loops Rows_instruction: |
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      4-5 Maze 1 (copy 1)_instruction: |
        Querida pessoa. Mim zumbi. Precisa... chegar...
        girassol.
      4-5 Maze 1_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 10_instruction: Você consegue chegar até o girassol usando apenas quatro blocos?
      4-5 Maze 11_instruction: Você pode chegar até o girassol usando apenas seis blocos?
      4-5 Maze 12_instruction: |
        Ok, isso é um pouco diferente. Você pode fazer isso em
        apenas seis blocos?
      4-5 Maze 13_instruction: Leve-me até o porco!
      4-5 Maze 14_instruction: Leve-me até o porco! Use o bloco repita até.
      4-5 Maze 2 (copy 1)_instruction: |
        Leve o zumbi até o girassol, mas desvie
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o girassol, mas desvie da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... girassol.
      4-5 Maze 3_instruction: Precisa... chegar... girassol.
      4-5 Maze 4 (copy 1)_instruction: 'Experimente o bloco "repita" para usar menos blocos...'
      4-5 Maze 4_instruction: 'Experimente o bloco "repita" para usar menos blocos...'
      4-5 Maze 5 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 6 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 7_instruction: Querida pessoa. Mim zumbi. Precisa... chegar... girassol.
      4-5 Maze 8_instruction: |
        Use o bloco "repita" para levar o zumbi até o
        girassol. (Desvie das carnívoras!)
      4-5 Maze 9_instruction: 'Crie um laço com o bloco "repita até".'
      4-5 Maze Assessment 1_instruction: 'Avaliação: chegue até o girassol.'
      4-5 Maze Conditionals 1_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 10_instruction: |
        Você pode adicionar apenas 3 blocos para me ajudar
        a resolver um labirinto mais complexo? Se você fizer isso corretamente, eu poderei andar por qualquer caminho cheio de curvas,
        não importa o comprimento.
      4-5 Maze Conditionals 2_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloco "se" para me deixar decidir
        quando virar. Dica: você precisa de somente mais um bloco, mas aprenda como o configuramos
        para que você possa fazer isso sozinho na próxima vez.
      4-5 Maze Conditionals 4_instruction: |
        Ok, esse desafio é como o último,
        mas você precisa se lembrar de como usou o bloco "se" e o bloco "repita"
        juntos.
      4-5 Maze Conditionals 5_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 6_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 7_instruction: |
        Ok, vamos praticar mais uma vez
        - essa parte não é muito diferente, mas fique de olho nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |
        O bloco "se-senão" verifica uma condição
        e, em seguida, faz uma coisa OU outra. Para me levar ao girassol, tente
        usar esse novo bloco.
      4-5 Maze Conditionals 9_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma
        vez, você consegue fazer corretamente na primeira tentativa?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use um bloco "repita até" e
        um bloco "se-senão" para me levar até o girassol no menor número de blocos possível.
      4-5 Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      4-5 Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      4-5 Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      4-5 Nested Loops 2_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.  
      4-5 Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro de outro laço. Chamamos isso de laço aninhado.\\r\n"
      4-5 Nested Loops 5_instruction: Repita o código dado para criar um moinho de vento.
      4-5 Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      4-5 Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      4-5 Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      4-5 Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      4-5 While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      4-5 While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      4-5 While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      4-5 While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado? Dica: dessa vez, tente usar o laço enquanto.
      4-5 While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      4-5 While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      4-5 While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: teste
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      Artist - Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      Artist - Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      Artist - Nested Loops 2_instruction: |
        Agora aninhe esse laço dentro de outro laço
        para desenhar 10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos
        completam uma rotação de 360 graus.  
      Artist - Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro de outro laço. Chamamos isso de laço aninhado.\\r\n"
      Artist - Nested Loops 5_instruction: Repita o código dado para criar um moinho de vento.
      Artist - Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      Artist - Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      Artist - Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      Artist - Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      Artist - Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      Auto Open Function Editor_instruction: |
        Você pode chamar funções de dentro
        de outras funções! Usando sua função "forma" como base, crie 3 formas
        de casa, cada uma 20 pixels maior que a anterior, começando com um comprimento de 50 pixels. Usar
        um laço com contador pode ser útil. 
      Bee Recommended Blocks test_instruction: |
        Flores roxas podem ter 1
        ou 0 néctar, mas você não sabe quais delas têm! Tome cuidado para não coletar néctar
        de uma flor roxa quando ela não tem néctar algum. Verifique se o néctar é igual
        a 1 usando o bloco se.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Agora que você aprendeu a escrever funções lineares
        simples, vamos usá-las para adicionar um pouco de movimento ao nosso jogo.
        Clique em "Executar" para ver o que seu jogo pode fazer (não muito!), atualizar as variáveis que
        você quiser e depois clique em Concluir para seguir em frente.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        A função "atualize-alvo" recebe o
        valor atual de x do alvo e retorna um valor atualizado. Complete a função "atualize-alvo"
        para que ela some ao valor de x toda vez que for chamada. Quanto mais você
        adicionar a x, mais rápido será o alvo.
      Big Game Animation 3_instruction: |
        A função "atualize-inimigo" deve funcionar
        como a função "atualize-alvo", exceto pelo fato de o inimigo deve se mover do lado direito
        para o lado esquerdo. Complete a função "atualize-inimigo" para fazer
        o inimigo voar pela tela.
      Big Game Animation 4_instruction: |
        Nesse ponto do seu jogo, seu inimigo deve
        percorrer a tela da direita para a esquerda e seu alvo deve percorrer a tela
        da esquerda para a direita. Eles nunca voltam para a tela uma vez que tenham saído,
        mas cuidaremos disso depois. Analise seu jogo para ver se ele está
        funcionando como você gostaria e então clique em "Concluir" para seguir em frente.
      Big Game Booleans 1_instruction: |
        Da última vez que você trabalhou em seu jogo fizemos
        nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em "Executar" para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Booleans 2_instruction: |
        Vá até a seção "Funções" da caixa de ferramentas e complete a função esquerda-segura? para que ela retorne
        verdadeiro se a coordenada de x do inimigo for mais que -50. Se você for bem-sucedido,
        você deve ver o inimigo sair pelo lado esquerdo e retornar pelo lado direito.
      Big Game Booleans 3_instruction: |
        Agora que você completou esquerda-segura?, vamos preencher
        a direita-segura? - ela deve receber a coordenada de x do alvo e retornar verdadeiro
        se essa coordenada for menor que 450. Uma vez que você tenha completado a direita-segura?,
        você deve ver o alvo sair pelo lado direito da tela e retornar pela
        esquerda.
      Big Game Booleans 4_instruction: |
        Complete a função na-tela? para que ela verifique se esquerda-segura? e direita-segura?
        são verdadeiras.
      Big Game Booleans 5_instruction: |
        Nesse ponto do seu jogo, seu inimigo deve percorrer
        a tela da direita para a esquerda, seu alvo deve percorrer a tela da esquerda para
        a direita e eles devem retornar para o lado oposto, repetidamente. Veja
        se seu jogo está funcionando como você gostaria e então clique em
        Concluir para seguir em frente.
      Big Game Collision 1 (copy 1)_instruction: |
        Da última vez que você trabalhou em seu jogo
        fizemos nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em Executar para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Collision 1_instruction: |
        Até agora você programou um jogo
        com um alvo e um inimigo que se movem, sendo que ambos retornam à tela quando
        saem, e um jogador que responde à entrada do teclado. Clique em Executar para
        ver como seu jogo está funcionando e então vamos para o que
        está faltando - a detecção de colisão!
      Big Game Collision 2_instruction: |
        Para mover o jogador para cima e para baixo, vamos precisar
        usar um bloco condicional para descobrir qual tecla está pressionada e responder
        de acordo. Os computadores leem teclas pressionadas como códigos numéricos - a seta para
        cima é 38 e a seta para baixo é 40. Você pode consultar outros códigos de teclas em seu material.
        Edite a função "atualizar-jogador" para que ela mova o jogador para cima quando 
        a seta para cima está pressionada, ou para baixo quando a seta para baixo está pressionada.
      Big Game Collision 3_instruction: |
        Use a fórmula da distância para que a função
        de distância retorne a distância entre as coordenadas centrais do jogador (px,
        py) e as coordenadas centrais de outro objeto (cx, cy).
      Big Game Collision 4_instruction: |
        Complete a função colisão? para que ela retorne
        verdadeiro se a distância entre dois pontos for menor que 100 pixels.
      Big Game Complete_instruction: |
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Final_instruction: |
        Você conseguiu! Agora seu jogo deve estar
        funcionando completamente. Aproveite seu novo jogo e faça alguns ajustes
        finais. Quando você estiver feliz com o produto final, clique em Concluir e
        você terá a oportunidade de compartilhar um link para o seu jogo. Bom trabalho!
      Big Game Player 1_instruction: |
        Estamos quase terminando o jogo!
        Da última vez que você trabalhou no seu jogo, você usou booleanos para fazer seu alvo e
        seu inimigo retornarem à tela quando saírem. Clique em Executar para ver como seu
        jogo está agora e então vamos fazer seu jogador se mover para cima e para
        baixo.
      Big Game Player 2_instruction: |
        Para mover o jogador para cima e para baixo, vamos precisar
        usar um bloco condicional para descobrir qual tecla está pressionada e responder de acordo.
        Os computadores leem teclas pressionadas como códigos numéricos - a seta para cima é 38
        e a seta para baixo é 40. Você pode consultar outros códigos de teclas em seu material. Edite
        a função "atualize-jogador" para que ela mova o jogador para cima quando  a seta para
        cima estiver pressionada e para baixo quando a seta para baixo estiver pressionada.
      Big Game Testing_instruction: |
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Vars 1 (copy 1)_instruction: |
        Vamos começar o seu Grande Jogo!
        Aqui você vai ver um monte de trechos de código para reservar espaço que você eventualmente
        vai substituir pelo seu próprio código, mas por enquanto vamos nos preocupar somente
        em definir as variáveis. Clique em "Executar" para ver como é o jogo com os
        valores-padrão.
      Big Game Vars 1_instruction: |
        Vamos começar o seu Grande Jogo! Aqui você vai
        ver um monte de trechos de código para reservar espaço que você eventualmente vai substituir
        pelo seu próprio código, mas por enquanto vamos nos preocupar somente em definir as variáveis.
        Clique em "Executar" para ver como é o jogo com os valores-padrão.
      Big Game Vars 2 (copy 1)_instruction: |
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título"
        e "subtítulo" e altere-as para algo novo.
      Big Game Vars 2_instruction: |
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título" e "subtítulo" e
        altere-as para algo novo.
      Big Game Vars 3 (copy 1)_instruction: |
        Agora, vamos definir o pano de fundo para seu
        novo jogo. Edite a variável "bg" e selecione uma nova imagem de pano de fundo no
        menu.
      Big Game Vars 3_instruction: |
        Agora, vamos definir o pano de fundo para seu novo jogo.
        Edite a variável "bg" e selecione uma nova imagem de pano de fundo no menu.
      Big Game Vars 4 (copy 1)_instruction: |
        Incrível, agora você pode atualizar as variáveis
        para seu jogador, alvo e inimigo. Fique à vontade para brincar com as variáveis
        para deixar o seu jogo do jeito que você quiser. Clique em "Concluir"
        quando estiver pronto.
      Big Game Vars 4_instruction: |
        Incrível! Agora você pode atualizar as variáveis para
        o jogador, o alvo e o inimigo. Fique à vontade para brincar com todas as variáveis
        e assim deixar seu jogo do jeito que você quer. Clique em "Concluir"
        quando você terminar.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      Busy Bee 2_instruction: |
        Essa abelha tem muito trabalho a fazer! Você notou algum
        padrão que possa usar para simplificar seu código?
      Busy Bee_instruction: |
        Essa abelha tem muito trabalho a fazer! Você notou algum
        padrão que possa usar para simplificar seu código?
      C3-Farmer While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      C3-Farmer While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      C3-Farmer While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      C3-Farmer While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado. Dica: dessa vez, tente usar o laço enquanto.
      C3-Farmer While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      C3-Farmer While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      C3-Farmer While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      C3-Farmer While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      C3-Farmer While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      Calc Circles of Eval .1_instruction: |
        Você vai escrever um tipo de código chamado
        Bloco de cálculo, porque cada bloco de código retorna um único valor.
        Altere o ??? nesse código para que o bloco retorne 5.
      Calc Circles of Eval .2_instruction: |
        Esse bloco de cálculo é uma função
        de multiplicação que recebe dois números e retorna o produto desses números.
        Edite esse bloco para que ele multiplique 2 * 5
      Calc Circles of Eval .3_instruction: |
        Esta é uma função de Adição que
        usa dois números e retorna sua soma. Use este bloco Adição para somar 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Temos aqui um bloco de adição aninhado
        dentro de um bloco de multiplicação. Complete esse código para que ele multiplique 3 por (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 1_instruction: |
        Todo operador matemático (+, -, *,
        /, e assim por diante) pode ser representado por um bloco de cálculo. Altere o
        bloco de cálculo para associá-lo à expressão.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 2_instruction: |
        Use um bloco de multiplicação para completar
        esse código.
      Calc Circles of Eval 3_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 4_instruction: |
        Nesse código estão faltando alguns blocos de
        cálculo - lembre-se de colocar tudo na ordem correta.
      Calc Circles of Eval 5_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 6_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa expressão.
      Calc Circles of Eval 7_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 8_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 9_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval Free Play_instruction: |
        Atividade livre: tente usar um bloco de cálculo
        para escrever algumas equações você mesmo. Como aninhar os blocos de
        formas diferentes interfere no cálculo?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Agora, vamos ver mais algumas funções
        algébricas. Temos aqui uma função traduzida a partir de uma função algébrica simples
        f(x) = x + 1. O que você poderia esperar como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 1_instruction: |
        Agora, vamos olhar para algumas funções algébricas
        mais tradicionais. Temos aqui uma função traduzida da função algébrica simples
        f(x) = x + 1. O que você esperaria como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 2_instruction: |
        Escreva uma função "f" que recebe um parâmetro
        "x" e retorna x - 10. Teste sua função usando f(15).
      Calc Define Funcs 3_instruction: |
        Não precisamos chamar nossa função "f"
        toda vez. Crie uma função chamada "vezes-dez" que deve receber um parâmetro
        "x" e retornar x * 10. Quando você criar a função, execute vezes-dez(50).
      Calc Define Funcs 4_instruction: |
        Escreva uma função chamada "metade" que recebe
        um número "x" e retorna metade desse número. Quando você escrever a função,
        use-a para calcular metade(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Vamos usar a receita de design para criar uma
        função chamada "cubo" - essa função deve ter um domínio de número, uma imagem
        de número e retornar o número dado elevado à terceira potência. Lembre-se de escrever
        dois casos de exemplo! Quando você terminar, use sua nova função para calcular 7
        elevado ao cubo.
      Calc Design Recipe 2_instruction: "Sua escola está promovendo uma venda de cookies e\nvocê precisa controlar o custo de produção de cada cookie, o dinheiro pago e o\nlucro total. Os cookies custam R$0,25 cada para produzir, e são vendidos por R$1,50/cookie.\\r\nEscreva\na função `custo`, que recebe o número de cookies que você pretende vender\ne retorna o custo de produção desses cookies."
      Calc Design Recipe 3_instruction: |
        Escreva a função `vendas` que recebe o
        número de cookies vendidos e retorna a quantidade de dinheiro que os clientes gastaram
        para comprar esses cookies (cada cookie é vendido por R$1,50).
      Calc Design Recipe 4_instruction: |
        Usando as duas funções que acabamos de escrever, escreva
        a função `lucro`, que recebe o número de cookies que você vendeu e
        retorna o lucro total que você obteve com a venda dos cookies, levando em conta
        o custo para produzi-los.
      Calc Free Play_instruction: |
        Atividade livre: escreva funções e algoritmos com seu
        próprio design!
      Calc Rocket 1 (copy 1)_instruction: "No último desafio você escreveu um contrato\npara a função \"altura-foguete\" que diz que ela tem uma imagem numérica, um domínio\nnumérico, e deve retornar a altura do foguete viajando a 15 m/s\napós um dado número de segundos. Agora vamos escrever um caso de exemplo para a\naltura do foguete em 3 segundos.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: "No último desafio você escreveu um contrato para a\nfunção \"altura-foguete\" que tem um domínio numérico, uma imagem\nnumérica, e deve retornar a altura do foguete que viaja a 15 m/s após\num dado número de segundos. Agora, vamos escrever um caso de exemplo para a altura\ndo foguete em 3 segundos.\\r\n\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 2_instruction: |
        Excelente, vamos fazer mais um exemplo antes de escrever
        a função - qual deve ser a altura do foguete após 30 segundos?
      Calc Vars 1.1_instruction: |
        Aqui, definimos a variável "idade" como 17 anos.
        Você consegue escrever uma expressão que calcula "idade" em dias?
      Calc Vars 1_instruction: |
        As variáveis nos permitem dar nome a valores para que possamos
        facilmente nos referir a eles repetidamente ao longo dos nossos programas. Temos aqui uma
        variável chamada "idade". Defina seu valor como sua idade e clique em Executar.
      Calc Vars 2 (copy 1)_instruction: |
        Aqui, definimos a variável "idade" como
        17 - você pode escrever uma expressão que calcula "idade" em meses?
      Calc Vars 2.1_instruction: |
        Aqui temos uma variável chamada "idade-em-meses"
        - use a variável "idade" para definir "idade-em-meses"
      Calc Vars 2_instruction: |
        Você pode escrever uma expressão que calcula "idade"
        em meses?
      Calc Vars 3 (copy 1)_instruction: |
        Você pode fazer uma adição a esse código para que ele calcule
        quantas horas há em "idade" anos?
      Calc Vars 3_instruction: |
        Você pode fazer uma adição a esse código para que ele use a variável "idade"
        para calcular a idade em horas?
      Calc Vars 4_instruction: |
        Também podemos definir variáveis usando outras variáveis.
        Vamos supor que você tenha um irmão que é dois anos mais novo que você - você pode
        definir uma nova variável "idade-irmão" usando sua variável "idade"?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Desenhe a reta. Ela tem
        200 pixels de comprimento. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Desenhe a reta. Ela tem 200
        pixels de comprimento. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Mova a abelha até a flor
        e colete todo o néctar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Mova a abelha até as flores
        e colete todo o néctar de cada uma.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Desenhe essa reta usando
        a variável "comprimento". Cada segmento de reta tem 75 pixels de comprimento.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Desenhe um quadrado usando
        a variável comprimento fornecida.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        Isso é como um
        laço "para". Complete o código para desenhar seis retas que crescem de 50, 60, 70,
        80, 90, até 100 pixels de comprimento. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        Isso é como um
        laço "para". Complete o laço para desenhar 4 quadrados que crescem de 80, 100,
        120, até 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Agora, adicione uma ação de virar e outra
        reta. As retas têm 200 pixels de comprimento.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Desenhe o quadrado. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Desenhe o octógono. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Mova a abelha até
        a flor e colete o néctar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        As flores contêm uma quantidade
        específica de néctar. Mova a abelha até a flor e colete o néctar com o bloco
        obtenha néctar.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        As colmeias podem guardar uma quantidade
        específica de mel. Colete o néctar da flor e produza um pouco de mel.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Mova a abelha até a flor
        e colete o néctar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Desenhe
        a reta. Cada segmento tem 100 pixels de comprimento. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete o
        código para desenhar a reta. Cada segmento tem 100 pixels de comprimento. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Desenhe a reta.
        Cada segmento tem 100 pixels. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Mova a abelha até as
        flores e pegue todo o néctar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Desenhe um quadrado
        usando a variável comprimento fornecida.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Desenhe uma reta usando
        uma variável "comprimento" definida como 180.
      Course 2 Bee Loops 1_instruction: |
        Olá, eu sou uma abelha. Você pode me ajudar a coletar
        o néctar dessas flores? 
      Course 2 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      Course 2 Bee Loops 2_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      Course 2 Bee Loops 3_instruction: |
        Agora, use o novo bloco repita para coletar
        todo o néctar e produzir todo o mel.
      Course 2 Bee Loops 3__instruction: |
        Você consegue usar um laço para coletar todo
        o néctar?
      Course 2 Bee Loops 4_instruction: |
        O que acontece se você repetir esta sequência 3
        vezes? Não se esqueça de fazer o mel no final!
      Course 2 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      Course 4 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se, nem
        todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      Course 4 Artist 1_instruction: |
        Ajude-me a desenhar uma caixa. (Cada linha tem
        200 pixels de comprimento) 
      Course 4 Artist 10_instruction: "Clique aqui para ver as dicas novamente!\\r\n\\r\nApresentamos\naqui um código para uma forma interessante. O que acontece quando você o repete várias\nvezes, virando a cada iteração? Observe que as viradas nessa forma\nsomam 420 graus, o que significa que quando seu artista terminar de desenhar,\nele estará apontando para uma direção diferente do que quando você começou. Essa nova direção\né exatamente 60 graus à direita de onde você iniciou."
      Course 4 Artist 11_instruction: |
        Agora um desafio!  Temos aqui um design que
        usa apenas blocos que já foram mostrados. Você consegue descobrir como
        recriá-lo? Fique à vontade para usar tentativa e erro. Não esperamos que você
        seja perfeito na primeira vez. Quer ver mais dicas? Clique aqui!
      Course 4 Artist 12_instruction: "Quer ver o design de inspiração ou as\ndicas? Clique aqui!\\r\n\\r\nCaso contrário, crie um design você mesmo!"
      Course 4 Artist 13_instruction: |
        Ainda jogando?  Temos aqui uma tela em branco
        na qual você pode projetar o que quiser!
      Course 4 Artist 2_instruction: |
        Você consegue repetir este código para desenhar
        o quadrado em cinza?
      Course 4 Artist 20_instruction: |
        Ainda jogando?  Temos aqui uma tela em branco na qual
        você pode criar o que quiser!
      Course 4 Artist 3_instruction: |
        Tente descobrir o que acontece se você executar
        esse código (ou clique em "Executar" para ver). Em seguida, execute-o várias vezes para completar
        o desenho.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Desenhe a outra metade desse design para que ele
        fique simétrico. Os triângulos são equiláteros e têm 50 pixels de comprimento. Dica:
        talvez você precise executar o código várias vezes para descobrir quais blocos
        precisam ser adicionados.
      Course 4 Artist 6_instruction: |
        Complete o código para desenhar esses triângulos.
        Dica: há 3 triângulos em uma rotação de 360 graus... quantas vezes o número
        3 cabe em 360?
      Course 4 Artist 7_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.  
      Course 4 Artist 8_instruction: |
        Desenhe esse sol repetindo todo este bloco de código
        várias vezes.
      Course 4 Artist 8a_instruction: "Lembra-se dessa forma? Agora vamos deixar\nvocê construí-la sem dar nenhum bloco inicial!\\r\nDica: há\n3 triângulos dentro da rotação de 360 graus... quantas vezes 3 cabe em\n360?"
      Course 4 Artist 9_instruction: |
        Repita esse design 10 vezes e certifique-se de virar
        a cada figura desenhada. Uma dica sobre o quanto você
        precisa virar: quanto é 360 dividido por 10?
      Course 4 Artist Binary 1_instruction: "Temos aqui uma função que recebe uma string\nbinária de 1's e 0's e instrui o artista a mover-se da esquerda para\na direita, de cima para baixo. O artista vai preencher os quadrados nos quais vir um 1 e ignorar\nos que tiverem um 0.\\r\n\\r\nExecute este código para ver como\no artista usa números binários para desenhar este padrão."
      Course 4 Artist Binary 1a_instruction: "Temos aqui uma função que recebe uma string\nbinária de 1's e 0's e instrui o artista a mover-se da esquerda para\na direita, de cima para baixo. O artista vai preencher os quadrados nos quais vir um 1 e ignorar\nos que tiverem um 0.\\r\n\\r\nExecute este código para ver como\no artista usa números binários para desenhar este padrão."
      Course 4 Artist Binary 2_instruction: |
        Qual dessas strings binárias você poderia
        repetir 8 vezes para desenhar esta imagem?
      Course 4 Artist Binary 3_instruction: |
        Você consegue desenhar este padrão usando
        a repetição de uma string binária de 3 dígitos?
      Course 4 Artist Binary 4_instruction: |
        Cada string binária representa uma linha dessa
        imagem. Você consegue reorganizá-las de forma que elas desenhem um rostinho feliz
        ao invés de um rostinho triste?
      Course 4 Artist Binary 5_instruction: |
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      Course 4 Artist Binary 6_instruction: |
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      Course 4 Artist Binary 7_instruction: Termine o desenho.
      Course 4 Artist Binary Free Play 2_instruction: |
        Atividade livre: aqui temos uma tela em branco
        para você desenhar. Divirta-se!
      Course 4 Artist Binary Free Play 2a_instruction: "Temos aqui uma tela de maior\nresolução para desenhar - 16 pixels por 16 pixels!\\r\n\\r\nVocê viu o que acontece quando\ncomeçamos ser criativos com os bits?"
      Course 4 Artist Binary Free Play 2b_instruction: Clique aqui para ver algumas dicas.
      Course 4 Artist Binary Free Play_instruction: |
        Atividade livre: desenhe o que quiser
        com números binários!
      Course 4 Artist Binary pre1_instruction: "Binário é uma forma de representar informações\nusando apenas duas opções. Aqui, vamos usar as opções \"desligado\" (representada\npelo número 0) e \"ligado\" (representada pelo número 1).  \\r\n\\r\nFoi fornecida\numa grade de \"pixels\" pela qual você pode andar e criar\ndesigns virando em certos quadrados. Você consegue fazer o artista desenhar\n\"01010101\" em binário na primeira fileira?"
      Course 4 Artist Binary ryan_instruction: "Binário é uma forma de representar informações\nusando apenas duas opções. Aqui, vamos usar as opções \"desligado\" (representada\npelo número 0) e \"ligado\" (representada pelo número 1).  \\r\n\\r\nFoi fornecida\numa grade de \"pixels\" pela qual você pode andar e criar\ndesigns virando em certos quadrados. Você consegue fazer o artista desenhar\n\"01010101\" em binário na primeira fileira?"
      Course 4 Artist For  Functions 10_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |
        Desenhe este triângulo que tem 50 pixels.
        Dica: use um bloco repita.
      Course 4 Artist For Loops 10_instruction: |
        Atividade livre! Divirta-se desenhando
        o que quiser com os blocos que você aprendeu a usar
      Course 4 Artist For Loops 11_instruction: |
        Você se lembra de quando usamos
        uma variável para controlar o número de lados de uma forma em uma fase anterior? Faremos
        a mesma coisa com a variável "contador" agora. Esse padrão
        começa com um triângulo e adiciona um lado de cada vez até que seja desenhado um decágono
        (10 lados). Cada lado deve ter 100 pixels de comprimento. Dica: 360 dividido pelo
        número de lados que uma forma possui é o número de graus que você precisará girar.
      Course 4 Artist For Loops 11a_instruction: "Vamos juntar tudo!  Usando\nseu conhecimento em \"laços para\" e o \"contador\", crie este desenho no qual\ncada forma tem dois lados a mais que a anterior. Lembre-se de que cada lado é\n10 vezes maior que o número de lados do polígono.\\r\n\\r\nApenas uma pequena parte\ndo código foi fornecida para você."
      Course 4 Artist For Loops 12_instruction: |
        Isso foi muito legal, mas agora
        eu gostaria de desenhar uma forma do lado da outra. Desta vez, cada lado tem
        20 pixels. Use um bloco pule para avançar 40 pixels após cada forma. 
      Course 4 Artist For Loops 13_instruction: |
        Hmm, essas formas estão ficando cada vez
        maiores! Já não tínhamos resolvido esse problema com variáveis? Como
        podemos usar a variável contador para deixar os lados menores conforme a forma tem
        mais lados? Ao invés de avançar por uma quantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14_instruction: |
        Se você virar um pouco mais ou
        um pouco menos do que normalmente faria para uma forma, você conseguirá um efeito legal. Tente
        usar algum código do último nível, mas virando 89 graus para criar
        esta espiral quadrada retorcida.
      Course 4 Artist For Loops 15_instruction: |
        Atividade livre: tente fazer alguns desenhos
        usando laços para. Adicionamos algumas variáveis genéricas para você
        usar também.
      Course 4 Artist For Loops 2_instruction: |
        Eu coloquei o código para desenhar
        um triângulo dentro de um laço para que conta de 50 até 100, de 10 em 10. NOTA: Não deixe de ver
        o código antes de clicar em "Executar".
      Course 4 Artist For Loops 3_instruction: |
        Use o desafio anterior como referência
        para fazer este desafio. O menor triângulo tem lados de 20 pixels,
        o maior tem lados de 200 pixels, e cada triângulo é 20 pixels maior que o anterior.
        
      Course 4 Artist For Loops 4_instruction: |
        Use um laço "para" para desenhar esses quadrados.
        Eles começam com 15 pixels de comprimento, o maior tem 300 pixels de comprimento, e cada quadrado
        é 15 pixels maior que o anterior. Foi fornecida a maior parte do código
        de que você vai precisar - está faltando um bloco, qual?
      Course 4 Artist For Loops 5_instruction: |
        Você fez um bom trabalho no último desafio!
        Vamos usar o bloco da variável "contador" mais uma vez para desenhar esta imagem. 
      Course 4 Artist For Loops 6_instruction: |
        Atividade livre: tente usar um laço "para"
        para desenhar um padrão crescente de formas com seu próprio design.
      Course 4 Artist For Loops 6a_instruction: |
        Faça três pequenas alterações no
        código do último nível para conseguir isso!
      Course 4 Artist For Loops 7_instruction: |
        O que acontece se você remover "Repita 3"
        desse algoritmo, mantendo os blocos "mova" e "vire" no laço
        para? Neste triângulo espiralado, cada lado é 20 pixels mais comprido que o anterior.
      Course 4 Artist For Loops 8_instruction: "Apenas uma pequena alteração no código\nda última imagem pode criar este desenho. Você consegue descobrir qual é\nessa alteração?\\r\n\\r\nDica: algo precisa ser removido!"
      Course 4 Artist For Loops 8a_instruction: |
        Apenas uma pequena alteração no código
        da última imagem pode criar esta imagem. Você consegue descobrir qual é essa
        alteração?
      Course 4 Artist For Loops 9_instruction: |
        Você consegue fazer uma espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist For Loops Challenge_instruction: "Você consegue descobrir como\nusar todas as coisas que você aprendeu para criar esta imagem?\\r\n\\r\nPrecisa de uma\ndica? Clique aqui."
      Course 4 Artist For Loops inspire_instruction: "Atividade livre - Inspiração: agora você\naprendeu tudo o que precisa saber para criar um padrão como esse! Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie algo\nvocê mesmo.\\r\n\\r\nPrecisa de uma dica? Clique aqui."
      Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com 100
        pixels de comprimento usando um laço?
      Course 4 Artist Functions 10_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 11_instruction: |
        Veja esse código para desenhar um
        cubo - você consegue movê-lo para dentro de uma função chamada "desenhe um cubo"?
      Course 4 Artist Functions 12.1_instruction: |
        Vamos criar uma função chamada
        "desenhe um octógono 20" que desenha um octógono no qual cada lado tem 20 pixels
        de comprimento.
      Course 4 Artist Functions 12_instruction: Repita a função quadrado para desenhar uma reta
      Course 4 Artist Functions 13.1_instruction: "Agora, vamos criar uma função chamada\n\"pule para a parte superior direita\" que move o artista para a parte superior direito do octógono\nque você acabou de desenhar para terminarmos esse padrão.\\r\n\\r\nDica: para ir para o\ncanto superior direito, tente usar um padrão que faz apenas 3/8 do\noctógono."
      Course 4 Artist Functions 13_instruction: |
        Confira nossa nova função
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        e ver como a construímos. Clique em "Executar" quando estiver pronto para o
        próximo desafio.
      Course 4 Artist Functions 14.1_instruction: |
        Agora, vamos criar uma função chamada
        "pule para a parte superior direita" que move o artista para a parte superior direita do octógono
        que você acabou de desenhar, assim podemos terminar esse padrão.
      Course 4 Artist Functions 14_instruction: |
        Excelente! Vamos usar
        sua nova função "desenhe uma linha de quadrados" para desenhar uma forma de quadrado. Lembre-se,
        cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 15_instruction: 'Vamos acelerar um pouco, você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"? Boa sorte! Dica: você terá de virar 144 graus'
      Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      Course 4 Artist Functions 3_instruction: "Usando o bloco de função \"desenhe um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão a 120 pixels de distância um do outro.\\r\n"
      Course 4 Artist Functions 4_instruction: |
        Você está pronto para criar seu próprio
        "bloco de função"? Clique no bloco "Funções" na caixa de ferramentas, nomeie-o
        como "desenhe um triângulo", e então crie um triângulo como você fez anteriormente
        com os blocos de ação e de laços. Então, clique em salvar e fechar no canto
        superior direito. Dica: crie um triângulo que tenha 100 pixels de comprimento.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |
        Vamos tentar usar nossas duas funções
        para desenhar uma casa - o que precisa ser corrigido neste código para desenhar a casa corretamente?
      Course 4 Artist Functions 5_instruction: "Usando o bloco de função \"desenhe um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão a 120 pixels de distância um do outro.\\r\n"
      Course 4 Artist Functions 6_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 7_instruction: |
        Você consegue desenhar uma linha de quadrados usando
        uma função Quadrado? Cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 8_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para alterar o tamanho de "desenhe um quadrado"
        no editor da função. Lembre-se de clicar em "Salvar e Fechar" para sair do
        editor da função. 
      Course 4 Artist Functions 9_instruction: |
        A maior parte do código para
        criar uma função foi dada a você. Contudo, parece que algo está faltando. Você consegue
        completar este bloco de função?
      Course 4 Artist Functions challenge_instruction: |
        Clique aqui para ver as dicas
        novamente.
      Course 4 Artist Functions Inspiration_instruction: |
        Clique aqui para ver as dicas
        novamente.
      Course 4 Artist Functions inspire_instruction: |
        Clique aqui para ver a figura
        de inspiração novamente.
      Course 4 Artist Inspire_instruction: "Quer ver o design de inspiração ou as\ndicas? Clique aqui!\\r\n\\r\nCaso contrário, crie um design você mesmo!"
      Course 4 Artist Params 1_instruction: |
        Vamos editar uma função que desenha um
        quadrado com lados de 50 pixels
      Course 4 Artist Params 10_instruction: |
        Você pode chamar funções de dentro
        de outras funções! Usando sua função "forma" como base, crie 3 formas
        de casa, cada uma 20 pixels maior que a anterior, começando com um comprimento de 50 pixels. Usar
        um laço com contador pode ser útil. 
      Course 4 Artist Params 11_instruction: |
        Que tal uma função chamada "cata-vento"
        que recebe três parâmetros - "lados," "comprimento" e "repita"? Você pode
        calcular o quanto virar depois de cada forma usando os mesmos cálculos que você usou
        para descobrir as ações de virar para uma forma de "lados". Você consegue recriar esta imagem?
        Dica: cada forma tem 100 pixels de comprimento.
      Course 4 Artist Params 12_instruction: |
        Use sua função "cata-vento" para desenhar
        cada uma dessas formas. O comprimento do lado de cada imagem é 50.
      Course 4 Artist Params 13_instruction: |
        Atividade livre: aqui estão as funções que você escreveu
        e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      Course 4 Artist Params 2_instruction: |
        Essa função triângulo seria muito mais útil
        se pudesse desenhar triângulos de tamanhos diferentes. Foi adicionado
        um parâmetro para o comprimento da reta, mas ele ainda não faz coisa alguma. Você pode atualizar
        a função para que ela use o parâmetro "comprimento" para desenhar cada lado?
        Os tamanhos dos triângulos são 150 pixels, 75 pixels e 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Incrível! Você consegue desenhar cada um desses triângulos
        com essa nova função? O primeiro tem 25 pixels de comprimento, o segundo
        tem 50 e o terceiro tem 75. 
      Course 4 Artist Params 4_instruction: |
        Você consegue adicionar uma nova função chamada quadrado?
        Ela também deve receber um parâmetro comprimento, como a função triângulo. Dessa vez,
        desenhe 3 quadrados, de 25, 50, e 75 pixels de comprimento, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use suas duas novas funções para desenhar
        esta imagem. Para facilitar, você pode usar um laço com um parâmetro "contador".
        
      Course 4 Artist Params 6_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função para adicionar também
        um parâmetro "lados". Lembre-se de que o ângulo para virar para uma determinada forma é
        360 dividido pelos lados que ela tem. Dica: o triângulo tem 100 pixels de comprimento, o hexágono tem 25 pixels e o quadrado tem 50 pixels. 
      Course 4 Artist Params 7_instruction: |
        Você consegue desenhar essas formas, preenchendo
        o "???"? O quadrado e o triângulo têm 100 pixels, enquanto o hexágono
        tem 75 pixels. 
      Course 4 Artist Params 8_instruction: |
        Você consegue descobrir como desenhar esta
        forma? Dica: crie uma nova função com 6 lados chamada hexágono.
        
      Course 4 Artist Params 9_instruction: |
        Você se lembra de quando usamos o laço contador,
        mas removemos um laço de dentro? Vamos nos divertir um pouco e usar a função "desenhe uma
        forma" com os parâmetros "lados" e "comprimento". Você pode recriar
        essas formas? O contador do quadrado deve ser 5/100/5, o do triângulo deve ser
        10/100/10 e o do hexágono deve ser 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Aqui está o algoritmo para desenhar um triângulo.
        Modifique-o para que ele use a variável "lados". Substitua o número 3
        pela variável "lados". Dica: lembre-se de usar o bloco "defina os lados para".
      Course 4 Artist Vars 1_instruction: |
        Você pode me ajudar a desenhar um triângulo equilátero?
        Ele deve ter exatamente 100 pixels de comprimento em cada lado.
      Course 4 Artist Vars 10_instruction: |
        Aqui temos um algoritmo que desenha um triângulo
        a partir de triângulos menores. Você pode modificá-lo para que ele use a variável "lados"
        para desenhar cada triângulo? Olhe para o código e, toda vez que você
        vir o número 3, substitua-o pela variável "lados". Lembre-se de usar
        o bloco "defina os lados".
      Course 4 Artist Vars 11_instruction: |
        Este é um código mais complicando com os mesmos conceitos que usamos
        no último desafio - qual deve ser o valor atribuído à variável "lados"
        para desenhar essa imagem de quadrados?
      Course 4 Artist Vars 12_instruction: |
        Vamos definir a variável "lados" como
        5. Quanto mais lados adicionarmos a esse algoritmo, maior será o
        padrão! Observe que existe uma nova variável chamada "comprimento". Agora podemos usá-la onde há
        um bloco "avance". Para essa forma, defina a variável "comprimento" como 75.
      Course 4 Artist Vars 13_instruction: "Quando uma forma tem muitos lados, cada\nlado deve ser menor se você quiser que todo o padrão caiba na tela.\n\\r\nVamos recriar o algoritmo para este padrão incrível, mas, em vez de\ndefinir manualmente a variável \"comprimento\", vamos usar um bloco de matemática com\na variável \"lados\" dentro para nos certificar de que cada forma se encaixe corretamente. O\nperímetro de cada polígono é de 300 pixels.\\r\nPrecisa de dicas? Clique aqui."
      Course 4 Artist Vars 14_instruction: "Atividade livre: Veja só! Agora seu algoritmo\nestá aninhado dentro de mais um laço. Experimente alterar os valores das\nsuas duas variáveis para desenhar padrões legais.\\r\n\\r\nPara conseguir mais efeito, experimente brincar com\nas cores! Use cores aleatórias dentro dos laços para ver como isso muda seu design."
      Course 4 Artist Vars 2_instruction: |
        Ao invés de usar "avance por 150,"
        o bloco "mova" está referenciando agora uma variável chamada "comprimento." Você consegue
        definir "comprimento" como150 para desenhar esse novo triângulo?
      Course 4 Artist Vars 3_instruction: |
        Temos aqui um laço que desenha um quadrado, mas
        algo está faltando. Você pode consertá-lo para que ele use a variável "comprimento"
        para descobrir qual deve ser o tamanho de cada lado? 
      Course 4 Artist Vars 4_instruction: |
        Agora eu quero fazer um retângulo que tenha
        a altura duas vezes maior que a largura. Temos uma variável chamada "largura" que
        deve ser definida como 100. Você pode usar os blocos matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |
        Use a variável "lados" para controlar
        quantas vezes esse laço é executado.
      Course 4 Artist Vars 6_instruction: "Temos aqui um código que pode desenhar qualquer polígono\nregular. Há uma nova variável chamada lados que está definida como 4. Você consegue usar\na variável lados (junto com o bloco matemático) para virar a quantidade certa independentemente\nde quantos lados o polígono tem?\\r\n\\r\nClique aqui para voltar para\na dica!"
      Course 4 Artist Vars 7_instruction: "Use o que você aprendeu no último desafio\npara criar esse hexágono usando a variável \"lados\".\\r\n\\r\nPercebe como você pode\nalterar apenas um valor para desenhar um triângulo, um quadrado, um pentágono ou um octógono?"
      Course 4 Artist Vars 8_instruction: |
        Atividade livre: Brinque com o número
        de lados desta forma. Você consegue alterar o algoritmo para que o tamanho geral
        da forma permaneça o mesmo, independentemente do número de lados? Dica: Se
        você dividir seu comprimento inicial pelo número de lados, o comprimento de cada
        lado ficará menor à medida que o número de lados crescer.
      Course 4 Artist Vars 9_instruction: |
        Modifique esse algoritmo para que ele use a variável
        "lados" ao invés de um número fixo para desenhar um triângulo. Não deixe de usar
        o bloco "defina os lados para".
      Course 4 Bee 1_instruction: |
        A abelha não sabe o que há atrás da nuvem! Primeiro, 
        use o bloco "se" para verificar se há uma flor atrás da nuvem, em seguida,
        colete néctar apenas se for uma flor. 
      Course 4 Bee 2_instruction: |
        Use o bloco "se/senão" para verificar cada objeto
        e ver se ele é uma flor ou uma colmeia. Se for uma flor, colete néctar... caso contrário,
        produza mel!
      Course 4 Bee 3_instruction: |
        O objeto desconhecido pode ser uma flor ou uma colmeia.
        Desta vez, use o bloco se/senão para coletar néctar se for uma flor, senão produza mel
        (porque então ele seria uma colmeia).
      Course 4 Bee 4_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Aqui um bloco se/senão é combinado com outro bloco se/senão para criar
        um bloco "se/senão-se/senão". Complete a solução para coletar a quantidade desconhecida
        de néctar.
      Course 4 Bee 5_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Adicione um bloco se-senão para criar um bloco se, senão-se, senão. Complete
        a solução para coletar a quantidade desconhecida de néctar.
      Course 4 Bee 6_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Crie um bloco se, senão-se, senão para coletar a quantidade desconhecida de
        néctar.
      Course 4 Bee 7_instruction: |
        Use tudo o que você aprendeu até agora para coletar
        todo o néctar. A flor roxa pode ter 1, 2 ou 3 néctares.
      Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      Course 4 Bee For Loops 11_instruction: |
        O que está errado nesse laço? Veja se
        você consegue arrumá-lo e fazer a abelha coletar todo o néctar.
      Course 4 Bee For Loops 2_instruction: |
        Temos aqui um novo tipo de laço, chamado de
        laço "para". Esse laço para em particular vai contar de 1 até 5, de 1 em 1, e executar
        o conteúdo do laço a cada contagem. Ajude a abelha a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |
        Você pode resolver esse desafio usando um
        laço "para" para contar de 1 até 3, de 1 em 1. Agora vamos coletar um pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |
        Colete todo o néctar dessas
        flores. Eu gostaria de saber se existe uma forma mais fácil de fazer isso...
      Course 4 Bee For Loops 5_instruction: |
        Ah, o laço para deixa isso muito mais fácil!
        Estamos usando a variável "contador" do laço "para" para repetir o bloco "obtenha néctar"
        o mesmo número de vezes que o laço se repete. Ufa! São muitas repetições.
        Todo o código que você precisa está aqui, dê uma olhada nele e então
        clique em Executar para ver como ele funciona. 
      Course 4 Bee For Loops 6_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      Course 4 Bee For Loops 7_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      Course 4 Bee For Loops 8_instruction: |
        Você pode usar a variável do laço para controlar
        o movimento e a coleta de néctar?
      Course 4 Bee For Loops 9_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e, a cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Temos aqui três flores. Você consegue encontrar
        o padrão das instruções que você precisa repetir 3 vezes para coletar o
        néctar com o menor número de blocos?
      Course 4 Bee Loops 5a NEW_instruction: |
        Agora, use laços para ajudar a abelha a coletar
        todo o néctar em seu caminho até a colmeia com o menor número de blocos possível. Quando
        chegar lá, não se esqueça de produzir mel!
      Course 4 Bee Params 1_instruction: |
        Use a função "obtenha 3 néctares" que
        vira, move-se para coletar o néctar e então retorna à posição original.
        Escreva uma sequência para coletar todo o néctar usando "obtenha 3 néctares".
      Course 4 Bee Params 2_instruction: |
        Modifique a função "obtenha 2 néctares" para
        que ela me faça virar para a direita ao invés da esquerda para chegar às flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Agora há flores em ambos os
        lados! Talvez você possa usar um parâmetro para que a mesma função funcione para flores
        dos dois lados. Eu adicionei um parâmetro chamado "direção" à função.
        Se o parâmetro "direção" for igual a 0 eu devo virar à esquerda, se ele for 1 eu devo
        virar à direita.
      Course 4 Bee Params 3_instruction: |
        Agora, há flores em ambos os lados! Adicionamos
        variáveis chamadas "esquerda" e "direita" para você usar, e adicionamos um
        parâmetro chamado "direção" para "obtenha 3 néctares". Edite "obtenha 3 néctares"
        para que a abelha vire na direção correta quando as variáveis "esquerda" ou
        "direita" forem passadas para a função.  
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todas as flores. Lembre-se, 0 = esquerda e 1 = direita.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Tente usar sua nova função
        para coletar todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 4 backup_instruction: |
        Não seria legal se pudéssemos
        coletar todo o néctar com uma única função? Tente adicionar um novo
        parâmetro à função chamado "néctares" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 4_instruction: |
        Tente usar sua nova função para coletar
        néctar de todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 5_instruction: |
        Vamos começar do princípio - você pode criar
        uma nova função chamada "obtenha 5 néctares" com um parâmetro de direção?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 6_instruction: |
        Não seria legal se pudéssemos coletar
        todo o néctar com uma única função? Tente adicionar um novo parâmetro
        à função chamado "unidades de néctar" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 7_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Bee Params 8 Clone 2_instruction: |
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 clone 3_instruction: |
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 Clone_instruction: |
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 new_instruction: |
        Ah, agora também é preciso lidar com o
        mel! Como você poderia atualizar sua função para coletar néctar ou produzir mel?
      Course 4 Bee Params 8_instruction: |
        Desafio: Agora você também precisa lidar com
        mel! Reescreva sua função para receber tanto o número de unidades de mel quanto o
        número de unidades de néctar. Como você usaria esses números para decidir o que
        fazer?
      Course 4 Bee Params Ex_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Binary 1_instruction: |
        Temos aqui uma função que recebe uma string binária
        de 1's e 0's e instrui a fazendeira a se mover da esquerda para a direita,
        de cima para baixo, passando pelos quadrados nos quais o número tem um zero. Execute o
        código fornecido para ver como a fazendeira usa números binários para desenhar uma imagem.
      Course 4 Binary 2_instruction: |
        Qual string binária você poderia repetir 8 vezes para
        desenhar essa imagem? Dica o número "1" preenche um buraco.
      Course 4 Binary 3_instruction: |
        Você pode desenhar esse padrão repetindo uma única
        string binária?
      Course 4 Binary 5 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 5_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 6 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 6_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 7_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 8_instruction: |
        Você pode completar a maior parte dessa imagem
        repetindo um número binário de 5 bits - então você vai precisar de mais um número de 4 bits
        para completar o canto inferior direito.
      Course 4 EC 1a_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 1b_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 2a_instruction: |
        **Desafio Extremo:** Sem regras. Sem pistas. Só
        o desafio!
      Course 4 EC 2b_instruction: |
        **Desafio Extremo:** Sem regras. Sem pistas. Só
        o desafio!
      Course 4 EC 2c_instruction: |
        **Desafio Extremo:** Sem regras. Sem pistas. Só
        o desafio!
      Course 4 EC 3_instruction: |
        Use o que você aprendeu no nível anterior para desenhar
        uma imagem como esta. Nota: O código se torna mais simples se você incorporar
        parâmetros. 
      Course 4 EC 3a_instruction: 'Desafio Extremo: Sem regras. Sem pistas. Só o desafio!'
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvie do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: |
        Experimente o bloco "repita" para usar menos blocos
        na resolução deste desafio...
      Course 4 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Play Lab For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Lab Params 1_instruction: |
        Aqui temos uma função chamada "pule"
        que faz seu personagem principal pular 100 pixels. Use a função pule
        para coletar todas as bandeiras.
      Course 4 Play Lab Params 10_instruction: "Adicionamos uma última função para\nque você use.\\r\n\\r\nUse uma instrução \"se\" para que seu jogo chame a função \"suba de nível\"\nsomente quando \"pontos_jogador\" for maior que um determinado número. \\r\n\\r\nPor\nexemplo: \"pontos_jogador\" > 6\\r\n\\r\nJogue o jogo e chegue até o nível\n4 para ir para o próximo desafio. "
      Course 4 Play Lab Params 2_instruction: "Agora temos bandeiras que estão altas\ndemais para nosso pulo atual! Vamos usar as setas \"para cima\" e \"para baixo\"\npara termos diversas alturas de pulos. \\r\n\\r\nPrecisamos adicionar um parâmetro\nà função pule chamado \"altura\". A seta para cima deve fazer o cão\npular 200 pixels, e a seta para baixo deve fazê-lo pular somente 100 pixels.\n\\r\n\\r\nDica: clique em \"editar\" na função pule e atualize-a para que\nela use o parâmetro \"altura\"."
      Course 4 Play Lab Params 3_instruction: |
        Adicionamos outro parâmetro à
        função pule para que possamos usá-la com outros personagens. Cada personagem é representado
        por um número, começando em um. Edite a função "pule" para que
        use o parâmetro "personagem" para fazer o personagem certo pular. 
      Course 4 Play Lab Params 4_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |
        Edite a função chamada "patrulhe" para
        adicionar um parâmetro "personagem", assim podemos chamá-la para todos os personagens
        da tela. Lembre-se, os personagens correspondem aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |
        Adicione outro parâmetro chamado "velocidade"
        à função "patrulhe". Tente usar um bloco "defina velocidade" com o novo parâmetro "velocidade"
        para ajudar o Pinguim a pegar as duas bandeiras antes que os outros personagens peguem
        uma.
      Course 4 Play Lab Params 7_instruction: "Vamos nos divertir! Analise o\ncódigo fornecido para ver se você consegue descobrir o que cada bloco faz.  \\r\n\\r\nQuando terminar, use as\nsetas do teclado para controlar o cão e coletar todas as bandeiras."
      Course 4 Play Lab Params 8_instruction: |
        Use um bloco "quando o personagem tocar" para enviar
        o cão de volta para a parte superior esquerda SOMENTE se ele tocar em qualquer outro personagem.
      Course 4 Play Lab Params 9_instruction: "Temos aqui nosso jogo de uma fase anterior, mas\na maior parte do código está oculta. Há uma nova função chamada \"marcar_pontos\".\\r\n\\r\nEdite\na função para que um parâmetro \"pontos\" seja adicionado à variável \"pontos_do_jogador\".\n\\r\n\\r\nA variável \"pontos_do_jogador\" deve aumentar toda vez\nque o cão marcar o gato com corações e diminuir toda vez que o gato marcar o cão com corações.\\r\n\\r\nObservação:\nQuando estiver pronto, clique em \"Executar\" para jogar. Quando o cão marcar 6 pontos, você\nvai para o próximo desafio. "
      Course 4 Play Lab Vars 1_instruction: |
        Desta vez você não precisa escrever código algum, apenas
        clique em "Executar" para jogar! Nesse jogo, você é o cão que está tentando
        coletar mais bandeiras do que o gato. Use a seta para baixo para controlar o cão.
        Pressione "Terminar" quando você terminar de jogar.
      Course 4 Play Lab Vars 2_instruction: |
        A corrida do último desafio não foi muito justa! Altere
        a variável "velocidade_cão" para garantir que você possa coletar mais bandeiras do que o
        gato. O primeiro a coletar 10 bandeiras vence!
      Course 4 Play Lab Vars 3_instruction: |
        Temos aqui um novo tipo de jogo! Use as
        setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se você
        consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras.
      Course 4 Play Lab Vars 5_instruction: |
        Vamos criar um jogo! Primeiro precisamos de
        uma pontuação. Reconstrua o código que você viu no último nível para definir a pontuação
        com valor 10. 
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Legal, agora temos nossa variável
        pontuação, mas como vamos torná-la útil? Que tal somar à variável
        pontuação toda vez que você acertar o inimigo com uma bola de fogo? Use o evento
        "quando o personagem 2 tocar em alguma coisa" para disparar uma atualização para a pontuação
        quando sua bola de fogo atingir o gato. Você pode incrementar a pontuação fazendo pontuação
        = pontuação + 1. Faça sua pontuação chegar até 10 (um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 6_instruction: "Use a seta para a direita para atirar corações.\\r\n\\r\nEm\nem nosso jogo, como podemos marcar pontos? Adicione 1 a sua variável \"pontos\" toda\nvez que o cão atingir o gato com um coração. Use o evento \"quando o personagem 2 tocar em alguma coisa\"\npara disparar uma atualização em sua pontuação. Você pode incrementar sua variável\ndefinindo \"pontos = pontos + 1.\" Aumente sua pontuação até 10 (um ponto\nde cada vez!) para passar de nível."
      Course 4 Play Lab Vars 7_instruction: |
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil - sempre que o cão (personagem 1) for atingido por uma bola de fogo
        do gato (personagem 2), você deve perder um ponto. Comece com 10 pontos para que o jogo não seja muito difícil. Faça sua
        pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Certo, uma última coisa para
        esse jogo - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito
        para verificar o valor da pontuação - se a pontuação for maior que 20, faça
        o inimigo desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
        Clique em "Terminar" quando o jogo funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 8_instruction: |
        Vamos configurar o jogo para que o cão possa
        ganhar (ou perder). Use um laço infinito para para verificar o valor da pontuação - se a pontuação
        for maior que 20, faça o inimigo (o gato) desaparecer. Se a pontuação for
        menor que 0, faça o jogador (o cão) desaparecer. Clique em "Terminar" quando o jogo
        funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 9_instruction: "Hora da atividade livre! Temos aqui todas as\nvariáveis que usamos até agora essa etapa, bem como algumas a mais caso\nvocê queira usá-las. \\r\n\\r\nObserve que agora há muitos blocos em nossa\ncaixa de ferramentas e eles precisam ser organizados! Aqui, colocamos cada peça em\numa categoria apropriada. Reserve um tempo para explorar tudo o que está disponível.\nQuando terminar de explorar, crie um jogo ou uma história usando repetições, variáveis\ne eventos.  \\r\n\\r\nDica: deslize a tela para baixo para ver todos os comandos na área de trabalho."
      Course 4 Play Lab Vars_instruction: |
        Certo, uma última coisa para esse jogo
        - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito para
        verificar o valor da pontuação - se a pontuação for maior que 20, faça o inimigo
        desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |
        Vamos fazer o cão falar todos
        os números de 1 a 100. Use um laço para e o bloco contador para que ele fale o valor da variável
        contador a cada vez que o laço for executado.
      Course 4 Play Labs For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Se contarmos usando números maiores,
        podemos contar até números ainda maiores no mesmo intervalo de tempo. Tente fazer o cão
        contar de 10 até 1000, contando de 10 em 10.
      Course 4 Play Labs For Loops 4_instruction: |
        Alterar o incremento pode ser
        útil, mas ainda estamos contando linearmente (cada número está separado pela mesma
        distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 4a_instruction: "Agora, vamos combinar as variáveis\nda Fase 7 com sua variável \"contador\" para fazer algo mágico acontecer.   \\r\n\\r\nNesse\ndesafio, o cão vai contar de 0 até 1000 usando \"incremento\".  Defina a variável \"incremento\"\ncomo 10 no começo do seu código para ver o que acontece."
      Course 4 Play Labs For Loops 5_instruction: |
        Na última etapa contamos o
        quadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "Nesse desafio, o cão vai ser seu\nguardião do tempo.\\r\n\\r\nO cão vai contar de 0 até 30 usando \"incremento\".  A variável \"incremento\"\nvai começar com um valor de 1.\\r\n\\r\nVocê consegue fazer com que a cada\nvez que você clicar no cão, o incremento aumente em 2?  Clique na seta para a frente\npara executar o laço para.\\r\n\\r\nExecute o laço algumas vezes, clicando no cão antes\nde cada vez."
      Course 4 Play Labs For Loops 6_instruction: |
        Você deve se lembrar de que um número primo
        é qualquer número inteiro que é divisível apenas por ele mesmo e por 1. Use a função "é_primo"
        para falar apenas os números primos de 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: "O cão vai continuar contando\ncom nosso \"laço para\" usando \"incremento\", mas dessa vez vamos adicionar o mago\nà mistura. Você consegue alterar o código para que \"incremento\" aumente em duas unidades\ntoda vez que o mago for clicado?\\r\n\\r\nAtenção! O mago se move rápido!"
      Course 4 Play Labs For Loops 7_instruction: |
        Você poderia usar um laço "para" para me
        ajudar a falar a sequência 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Agora estamos chegando em algum lugar! E\nse começarmos a contar quantas vezes conseguimos clicar no mago antes do cão chegar\naté 30?  \\r\n\\r\nTermine adicionando blocos ao mago para que toda vez que ele for\nclicado a variável \"clicado\" aumente por um. Você pode ignorar \"incremento\"\npor enquanto.\\r\n\\r\nO cão vai começar a contar quando você clicar em \"Executar\"."
      Course 4 Play Labs For Loops 8_instruction: "Agora, ajude os personagens a se moverem enquanto\ncontam  \\r\n\\r\nO cão deve se mover e contar adicionando 2 (contador + 2) a cada vez. O gato\nvai se mover e contar multiplicando por 2 (contador * 2)  a cada vez. O pinguim\nvai se mover e contar fazendo a potência de 2 (contador ^ 2) a cada vez.  Quem vai chegar\nprimeiro à bandeira?"
      Course 4 Play Labs For Loops 8a_instruction: "Para terminar nosso jogo, precisamos\ntrazer de volta a variável \"incremento\"!    Vamos relacioná-la ao nível do\njogo.\\r\n\\r\n1) Guarde o número de vezes que o mago é clicado.\\r\n2)\nSe o mago for clicado pelo menos 10 vezes antes do cão contar até 30, aumente\n\"incremento\" em 1 unidade e comece de novo.\\r\n3) Se o mago não for clicado\npelo menos 10 vezes, o jogo acaba."
      Course 4 SCF 1_instruction: |
        Use as funções sugeridas para desenhar quatro
        linhas de hexágonos. Você percebeu como nossas linhas numeradas são deslocadas para a direita?
      Course 4 SCF 1a_instruction: |
        Você consegue descobrir como coletar todos esse
        néctar com o menor número possível de blocos?
      Course 4 SCF 1b_instruction: |
        Você consegue descobrir como coletar todos esse
        néctar com o menor número possível de blocos?
      Course 4 SCF 2_instruction: |
        Use o que você aprendeu no nível anterior
        para desenhar uma imagem como esta. Nota: O código se torna mais simples se você incorporar
        parâmetros. 
      Course 4 SCF 3 Fail 1_instruction: Você consegue descobrir como...
      Course 4 SCF 3 Fail 2_instruction: Você consegue descobrir como...
      Course 4 SCF 3_instruction: |
        Use o que você aprendeu no nível anterior
        para desenhar uma imagem como esta. Nota: O código se torna mais simples se você incorporar
        parâmetros. 
      Course 4 SCFL 1_instruction: |
        Resolva este desafio usando o menor número
        possível de blocos.
      Course 4 SCFL 1a_instruction: |
        Você consegue levar Skrat até a sua bolota usando
        o mínimo possível de blocos?
      Course 4 SCFL 1b_instruction: |
        Você consegue levar Skrat até a sua bolota usando
        o mínimo possível de blocos?
      Course 4 SCFL 2_instruction: |
        Resolva este desafio usando o menor número
        possível de blocos.
      Course 4 SCFL 3_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 4_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 5_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 6_instruction: |
        Você consegue descobrir como recriar esse desenho
        com um único laço?
      Course 4 SCFL 7_instruction: |
        O artista quer pegar umas ondas! Você consegue
        descobrir como recriar este desenho?
      Course 4 SCFP 1_instruction: |
        Crie uma função com parâmetros que permitem
        ao artista saltar para trás e para frente por x pixels, e também para cima e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 SCV 1_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCV 2_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCV 3_instruction: "Agora um jogo de pega-pega! Pegue o gato para ganhar 2 pontos.\nPegue o pinguim para ganhar 3 pontos. Chegue a 10 pontos para ganhar!\\r\nMas atenção, quando\no gato e o pinguim se encontram, eles tiram seus pontos.\\r\n\\r\nAdicione os blocos\nnecessários para fazer esse jogo funcionar como foi explicado. Como você vai\nfazer o cão se mover em todas as direções usando as setas do teclado? Como você vai\nadicionar pontos quando o cão pega o gato ou o pinguim? Como você vai subtrair pontos\nquando o gato e o pinguim se tocam?"
      Course 4 SCV 4_instruction: |
        Resolva este desafio com o menor número de blocos
        possível.
      Course 4 SCV 5_instruction: |
        Resolva este desafio com o menor número de blocos
        possível.
      Course 4 SCV 6_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCVP 1_instruction: |
        Crie uma função com parâmetros que permitem
        ao artista saltar para trás e para frente por x pixels, e também para cima e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 Variables Assessment_instruction: |
        Você consegue criar essa imagem usando
        uma variável para os lados? Cada linha deve ter 50 pixels de comprimento.
      Course1BeePuzzle12_instruction: Obtenha três néctares e então fabrique duas unidades de mel
      Course1MazeAssessment1_instruction: "Isso é um teste!\\r\nMova-me por um caminho e então\npor outro para me levar até o porco"
      Course1MazeAssessment2_instruction: "Isso é um teste!\\r\nMova-me por um caminho e então\npor outro para me levar até o porco."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Operadores booleanos (como >, <, =) nos permitem
        comparar valores diferentes, retornando "verdadeiro" ou "falso". Clique em "Executar"
        para ver o que essa expressão retorna.
      Eval Booleans 2_instruction: |
        Você pode definir os valores para que essa expressão
        seja "verdadeira"?
      Eval Booleans 3_instruction: |
        A função "comprimento-string" retorna o número
        de caracteres em uma string (incluindo espaços!) - faça esse código retornar
        "verdadeiro".
      Eval Booleans 4_instruction: |
        Aqui temos um bloco de avaliação chamado E - ele retorna
        verdadeiro se ambos os parâmetros forem verdadeiros, caso contrário ele retorna falso. Edite
        a variável x para que essa expressão retorne verdadeiro.
      Eval Booleans 5_instruction: |
        Esse bloco OU retorna verdadeiro se algum dos seus parâmetros
        for verdadeiro. Caso contrário, se ambos os parâmetros forem falsos, ele vai retornar falso. Defina
        a variável y com um valor que vai fazer com que a expressão retorne falso.
      Eval Booleans 6_instruction: |
        Aqui temos mais um bloco booleano chamado NÃO. Esse
        bloco transforma verdadeiro em falso, ou falso em verdadeiro. Se você envolver esse bloco
        de código em um bloco NÃO, ele deve retornar verdadeiro (porque estamos perguntando se as
        duas expressões NÃO produzem valores iguais).
      Eval Booleans Free Play_instruction: |
        Atividade livre: experimente criar algo
        você mesmo usando booleanos.
      Eval Booleans_instruction: |
        Booleanos nos permitem comparar valores diferentes,
        retornando "verdadeiro" se eles forem iguais, ou "falso" se eles não forem. O que
        você acha que esse código vai retornar?
      Eval Cond 1_instruction: |
        O bloco cond verifica as expressões booleanas na
        coluna esquerda, e assim que ele encontra uma que retorna "verdadeiro", ele executa
        o código correspondente na direita. Se nenhuma das expressões retornarem
        "verdadeiro", ele executa o bloco da parte inferior. Atualize a variável "temperatura" para
        que esse bloco retorne "Está certo".
      Eval Cond 2 (copy 1)_instruction: |
        Essa condição retorna uma forma diferente
        com base no valor da variável "lados" - altere o valor de "lados"
        para que a condição retorne um triângulo.
      Eval Cond 2_instruction: |
        Essa condição retorna uma forma diferente com base no
        valor da variável "lados" - altere o valor de "lados" para que
        a condição retorne um triângulo.
      Eval Cond 3 (copy 1)_instruction: |
        Você consegue escrever uma condição que verifica
        a variável "idade" e retorna "idade suficiente para votar e dirigir" se idade >
        17, "idade suficiente para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se
        nenhuma das condições for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha
        - lembre-se de colocar as condições na ordem certa.
      Eval Cond 3_instruction: |
        Você pode escrever uma condição que verifica a variável
        "idade" e retorna "idade suficiente para votar e dirigir" se idade > 17, "idade suficiente
        para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se nenhuma das condições
        for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha - lembre-se de
        colocar as condições na ordem certa.
      Eval Cond 4_instruction: |
        Podemos usar a função "string=?" para criar condições
        que respondam à entrada de texto. Aqui temos uma função chamada "forma verde" que
        recebe um parâmetro string para a forma. Complete as condições para que a
        forma correta seja desenhada quando a função for executada com "círculo", "triângulo",
        "quadrado" ou "retângulo".
      Eval Cond 5_instruction: |
        Aqui temos uma função "forma vermelha" semelhante com um
        parâmetro adicional para o tamanho. Complete as condições para que a imagem correta
        seja desenhada para "círculo", triângulo" e "estrela".
      Eval Cond 6_instruction: "Escreva uma função chamada crítica-culinária, que recebe\no nome de um prato e produz uma string que diz o que você acha desse\nprato. Por exemplo, (crítica-culinária \"pizza\") deve retornar \"deliciosa\", mas\n(crítica-culinária \"ovos estragados\") deve retornar \"horrível!\". Escolha pelo menos dois\npratos para avaliar, mas você pode escrever mais se quiser! Não se esqueça de\nadicionar uma cláusula \"senão\"!\\r\nUm exemplo - e parte da definição - já foram\nfeitos para você!"
      Eval Cond 7_instruction: "Atividade livre: escreva uma função chamada forma-verde, que\nrecebe o nome de uma forma e produz uma forma verde sólida. Sua função\ndeve funcionar pelo menos com \"círculo\", \"estrela\" e \"retângulo\", mas você pode adicionar\noutras formas se quiser. Você pode escolher o tamanho de cada forma. Não se esqueça\nde adicionar uma cláusula “senão”!\\r\nUm exemplo - e parte da definição - já\nestão prontos para você!\\r\n"
      Eval Cond 8_instruction: "Atividade livre: suponha que você queira ter um carro aos 21 anos, ou\nter seu próprio negócio aos 30 anos. Escreva uma função chamada objetivos-vida, que recebe\numa idade e produz uma string que descreve seus objetivos de vida nessa idade. Não\nse esqueça de adicionar uma cláusula \"senão\"!\\r\n"
      Eval Contracts 1_instruction: |
        Use a função "estrela" para produzir uma estrela vermelha
        com um raio de 60 pixels
      Eval Contracts 10A_instruction: |
        Certo, vamos completar esse desafio com um
        quadrado verde que tem 175 pixels de tamanho.
      Eval Contracts 11A_instruction: |
        Você consegue completar esse desafio e fazer aparecer "Olá,
        mundo" no cartaz?
      Eval Contracts 2_instruction: |
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts 3_instruction: |
        Tente usar a função "texto" para escrever esse
        texto azul com tamanho 40.
      Eval Contracts 4 A_instruction: |
        A função "escala" retorna uma imagem redimensionada
        para um tamanho menor ou maior que a imagem de entrada. Tente redimensionar
        esse círculo por um fator de 10 - como a imagem resultante é diferente do que seria se você
        simplesmente fizesse um círculo desse tamanho em primeiro lugar?
      Eval Contracts 4_instruction: |
        A função "escala" retorna uma imagem que
        é maior ou menor que a imagem de entrada. Tente escalar esse círculo
        por um fator de 10. Como a imagem retornada é diferente da que você teria se você
        tivesse feito um círculo desse tamanho a princípio?
      Eval Contracts 8A_instruction: |
        Você pode completar esse desafio? O triângulo grande
        tem 200 pixels de tamanho e é roxo?
      Eval Contracts A_instruction: |
        Use a função "estrela" para produzir uma estrela
        vermelha sólida com raio de 60 pixels
      Eval Contracts C_instruction: |
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts E_instruction: |
        Experimente usar a função "texto" para escrever
        "Olá, mundo!" na cor azul e com tamanho 40.
      Eval Contracts shrink_instruction: |
        Você pode completar essa imagem usando o bloco
        de função "encolha"? O raio é 20. 
      Eval Define Funcs 1_instruction: |
        Aqui temos uma nova função chamada "triângulo-verde"
        que recebe um único número para o tamanho e produz um triângulo verde. Use a
        nova função para criar um triângulo verde de 125 pixels
      Eval Define Funcs 2_instruction: |
        Vamos olhar dentro da função "triângulo-verde"
        para ver como ela funciona. Você pode modificá-la para que a função "triângulo-verde"
        sempre desenhe triângulos verdes delineados?
      Eval Define Funcs 3_instruction: |
        Temos aqui o começo de outra nova função
        chamada "círculo-roxo" com um domínio de um número (o raio) e um intervalo
        de imagem. Contudo, o corpo da função está errado, e ela sempre desenha um círculo
        de 50 pixels de raio ao invés de usar o parâmetro raio. Substitua o número atual
        pelo bloco "raio" do domínio. 
      Eval Define Funcs 4_instruction: |
        Crie uma nova função chamada "estrela-aqua"
        que tem um domínio de um único número para o raio e retorna uma estrela aqua do
        raio dado. Execute sua nova função com um raio de 75.
      Eval Define Funcs 5_instruction: |
        Vamos usar a função "estrela-aqua" para
        criar uma fileira com estrelas de tamanhos diferentes. Da esquerda para a direita, as estrelas
        devem ter raios de 25, 50 e 75.
      Eval Define Funcs Test_instruction: |
        Temos aqui o começo de outra nova função
        chamada "círculo-roxo" com um domínio de um número (o raio) e um intervalo
        de imagem. Contudo, o corpo da função está errado, e ela sempre desenha um círculo
        de 50 pixels de raio ao invés de usar o parâmetro raio. Substitua o número atual
        pelo bloco "raio" do domínio. 
      Eval Defining Vars Free Play 1_instruction: |
        Atividade livre: fornecemos uma função
        que preenche sua tela com minha-imagem. Altere minha-imagem para ver que padrão
        você pode fazer.
      Eval Design Recipe .1_instruction: |
        Temos aqui uma receita de design para uma função
        chamada "quadrado-círculo" com domínio de número e string e intervalo de imagem. Clique
        em Editar para escrever a definição da função (você vai ver dois exemplos fornecidos).
      Eval Design Recipe 1 (copy 1)_instruction: |
        Vamos escrever uma função
        que desenha um retângulo sólido de qualquer cor e que tenha a largura duas vezes maior que
        sua altura. Comece com um exemplo - desenhe um retângulo verde sólido que tem uma altura de
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Certo, agora, dado o contrato ret-largo:
        string de números -> imagem, escreva um exemplo - desenhe um retângulo verde sólido que
        tenha altura de 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Vamos fazer mais um exemplo antes de
        escrever a definição da função - dessa vez, desenhe um retângulo vermelho sólido com
        uma altura de 75 pixels.
      Eval Design Recipe 2_instruction: |
        Vamos fazer mais um exemplo antes de escrever
        a definição da função - dessa vez, desenhe um retângulo vermelho sólido com uma altura
        de 75 pixels.
      Eval Design Recipe 3_instruction: |
        A receita de design para "ret-largo" já
        tem um contrato e um exemplo. Você consegue escrever um segundo exemplo e então completar
        a definição? A função "ret-largo" deve produzir um retângulo de uma determinada
        cor e que tenha a largura duas vezes maior que a altura.
      Eval Design Recipe 4_instruction: |
        Use a receita de design para criar uma função
        "starburst" que tem dois domínios. 1) um número de pontos e 2) um raio.
        "starburst" retorna uma estrela radial amarela com os pontos dados e um raio
        interno que tem metade do tamanho do raio externo.
      Eval Design Recipe 5_instruction: |
        Usando a receita de design, escreva uma função
        "bandeira-listrada" que recebe duas cores e produz uma bandeira de 250 pixels
        de largura, 150 pixels de altura e com três listras horizontais de cores determinadas, na ordem cor2, cor1 e cor2.
      Eval Design Recipe 6_instruction: |
        Usando a receita de design, escreva uma função
        "polígono-grande" que deve retornar um polígono de lados e cor determinados que
        cobre a maior parte da janela, independentemente do número de lados. Para garantir
        que o polígono não fique muito grande conforme você aumenta o número de lados, o
        comprimento do lado deve ser inversamente proporcional ao número de lados, com um
        comprimento de (800/lados).
      Eval Design Recipe Free Play_instruction: |
        Atividade livre: use a receita de design
        para criar algumas funções com seu próprio design
      Eval Free Play_instruction: 'Atividade livre: faça arte com código!'
      Eval Strings Images .1_instruction: |
        Até agora, lidamos com um único
        tipo de dado, os números. Outro tipo de dados é a string, que é uma combinação
        de letras, números, ou outros caracteres envolvidos entre aspas. Execute a
        string "Olá, mundo!" e veja o que acontece.
      Eval Strings Images .2_instruction: |
        A função "acrescentar-string" recebe duas
        strings e retorna uma única string combinada. Adicione uma string "universo"
        ao segundo argumento de "acrescentar-string".
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Atividade livre: todos os blocos de cálculo estão identificados por cores
        para que você saiba que tipo de dados eles retornam e que tipo de dados eles precisam para seus
        parâmetros. O último parâmetro da função triângulo recebe uma string que
        controla sua cor - experimente algumas cores diferentes para ver o que acontece.
      Eval Strings Images 3_instruction: |
        Algumas funções podem receber somente um conjunto específico
        de strings, tais como o segundo argumento dessa função círculo, que
        controla seu estilo. Desenhe esse círculo laranja contornado usando o bloco de string
        especial com um menu suspenso para garantir que você use apenas estilos válidos.
      Eval Strings Images 4_instruction: |
        Tente usar o bloco "retângulo" para desenhar
        esse retângulo vermelho sólido - ele tem 175 pixels de largura e 100 pixels de altura.
      Eval Strings Images 5_instruction: |
        Tente usar esse novo bloco de cálculo chamado
        "sobreposição" para desenhar um triângulo branco de 100 pixels em cima de um círculo
        vermelho de 200 pixels.
      Eval Strings Images 6_instruction: |
        Use a função sobreposição para colocar uma estrela
        amarela com raio de 75 pixels em cima de um quadrado azul com 150 pixels de comprimento.
      Eval Strings Images 7_instruction: |
        O bloco "deslocamento" permite que você mova uma imagem
        com relação a onde ela normalmente seria colocada. Use esse bloco para deslocar o
        quadrado por 100 pixels no eixo y.
      Eval Strings Images 8_instruction: |
        Temos aqui um tipo diferente de bloco de estrela
        - ele é chamado "estrela-radial" e permite que você desenhe estrelas com qualquer número
        de pontos! Use-o para criar uma estrela laranja sólida com um raio interno de 75
        pixels e um raio externo de 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Atividade livre: explore os blocos disponíveis
        para criar algo interessante. Lembre-se de compartilhar suas criações favoritas.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: |
        Agora vamos criar 20 círculos
        sobrepostos, virando 18 graus entre cada círculo.
      frozen circle function with parameter_instruction: |
        Temos aqui um bloco "crie um círculo"
        que pode fazer círculos de tamanhos diferentes. Você pode usar isso para criar
        um pequeno círculo de tamanho 5 e um círculo maior de tamanho 10?
      frozen circle function_instruction: |
        Use o novo bloco "crie um círculo" para
        criar 10 círculos sobrepostos. Não se esqueça de avançar entre os círculos.
      frozen circle_instruction: |
        Um círculo é uma forma especial. Você pode descobrir
        que número usar para substituir os pontos de interrogação para desenhar um círculo?
      frozen cross rotate dense_instruction: |
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |
        Envolva um bloco "Repita" em torno desses comandos para criar
        um sinal de adição. Você notou que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |
        Você sabia que cada floco de neve
        tem uma forma diferente? Vamos criar um novo floco de neve usando o bloco "Repita"
        para repetir um paralelogramo 4 vezes, virando 90 graus à direita entre
        cada paralelogramo.
      frozen diamond snowflake_instruction: |
        Agora, vamos criar um novo floco de neve
        usando o bloco repita para repetir um paralelogramo 10 vezes, virando 36 graus
        à direita entre cada um.
      frozen diamond_instruction: |
        Use um bloco "Repita" em torno desses blocos para criar um paralelogramo.
        É como um retângulo mas tem ângulos diferentes. Este tem ângulos de 60 graus
        e 120 graus em vez de todos os ângulos terem 90 graus.
      frozen freeplay_instruction: |
        Você se tornou oficialmente um artista mestre! Crie
        um país das maravilhas de gelo.
      frozen line_instruction: |
        Oi! Eu sou Elsa de Arendelle. Ajude-me a criar uma
        reta.
      frozen perpendicular_instruction: |
        Agora, vamos ver se podemos criar duas retas
        que formam um ângulo de 90 graus entre si. Você vai precisar usar o bloco "vire"
        e também o bloco "mova".
      frozen snowflake branch_instruction: |
        Tente usar o bloco "crie um floco de neve do tipo ramificado”
        para criar três ramificações, o que começa a parecer um floco de neve.
      frozen snowflake full_instruction: |
        Agora, vamos repetir isso 8 vezes para fazer um
        belo floco de neve!
      frozen snowflower_instruction: |
        Padrões de neve complexos podem ser criados com
        formas muito simples. Você pode criar um padrão repetindo 5 círculos de tamanho
        5 e 5 círculos de tamanho 10?
      frozen square iterative_instruction: |
        Parece que estamos na metade do caminho para fazer
        um quadrado. Vamos juntar 4 retas para criar um quadrado.
      frozen square loop 3x_instruction: |
        Vamos criar três quadrados, virando depois
        de cada quadrado. Lembre-se de virar 120 graus antes de cada novo quadrado.
      frozen square loop_instruction: |
        Oi, eu sou Anna de Arendelle! Vamos fazer um quadrado
        com o bloco "repita", que usa menos blocos. Quantas vezes (???) o bloco
        "repita" deve repetir os blocos dentro dele para fazer um quadrado?
      frozen square snowflake_instruction: |
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      Infinity_catch_instruction: |
        Você pode fazer Elsa ("personagem 2") alcançar
        Anna usando as setas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |
        Hiro é o "personagem 1". Mova-o em direção a
        Baymax e reproduza um som quando eles se tocarem.
      Infinity_move_directions_instruction: |
        Baymax é o "personagem 2". Adicione blocos "mova"
        e então mova Baymax usando as setas. Faça com que ele toque os outros dois personagens.
      Infinity_move_right_instruction: |
        Hiro é o "personagem 1". Use o bloco "mova"
        para mover Hiro para que ele toque Baymax.
      Infinity_repeat_instruction: |
        Use um bloco "repita infinitamente" para fazer Anna se mover
        400 pixels para cima e para baixo.
      Infinity_say_instruction: 'Faça Anna dizer "Oi." usando o bloco "diga".'
      Infinity_shoot_instruction: |
        Baymax é o "personagem 2". Faça Baymax lançar um foguete
        em Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro é o "personagem 3". Faça Hiro lançar
        um projétil em cada um dos quatro personagens. Espere um segundo entre cada
        lançamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque ainda mais flocos de neve!
      Infinity_touch_four_instruction: |
        Mova Anna para cima, para a esquerda e para a direita para tocar
        cada um dos quatro flocos de neve.
      Infinity_touch_score_instruction: |
        Faça Anna marcar um ponto quando ela tocar
        em um floco de neve. Depois clique em "Executar" e faça ela tocar uma vez em cada floco de neve.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 artist 1 level 10_instruction: Desenhe linhas tracejadas usando os blocos pule e desenhe
      K-1 artist 1 level 9_instruction: Faça o desenho usando três retas
      K-1 Artist Loops 1_instruction: Desenhe esta reta usando o movimento para o leste 4 vezes.
      K-1 Artist Loops 2_instruction: Você pode desenhar a mesma reta usando um laço?
      K-1 Artist Loops 3_instruction: Você pode repetir esses blocos para desenhar 6 retas?
      K-1 Artist Loops 4_instruction: |
        Um laço poderia nos ajudar a desenhar o topo desse
        castelo?
      K-1 Artist Loops 5_instruction: O que você pode repetir 4 vezes para desenhar essas escadas?
      K-1 Artist Loops 6_instruction: |
        São necessários dois laços: um para subir as
        escadas e outro para descer.
      K-1 Artist Loops 7_instruction: Você pode terminar este padrão com dois laços?
      K-1 Artist Loops 8_instruction: Esta escada tem degraus mais longos.
      K-1 Artist Loops 9_instruction: 'Avaliação: use um laço para desenhar as escadas'
      K-1 Artist Loops Free Play_instruction: Atividade livre, desenhe algo divertido!
      K-1 Artist1 1_instruction: Desenhe o pé do homem com uma reta
      K-1 Artist1 10_instruction: |
        Desenhe e pule para fazer o caminho tracejado até o tesouro
        X
      K-1 Artist1 2_instruction: Desenhe o bigode no gato com duas retas!
      K-1 Artist1 3_instruction: |
        Desenhe duas retas para o leste e duas retas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Desenhe retas para cima, sobre e para baixo para completar o castelo!
      K-1 Artist1 5.5_instruction: |
        Complete a terceira torre do castelo usando
        retas curtas
      K-1 Artist1 5_instruction: Desenhe o caule desta flor com duas retas!
      K-1 Artist1 6_instruction: Termine a imagem usando um bloco pule!
      K-1 Artist1 7_instruction: |
        Use o bloco pule para se mover sem desenhar. Pule
        e desenhe uma reta.
      K-1 Artist1 8_instruction: |
        Desenhe linhas tracejadas usando os blocos pule e
        desenhe
      K-1 Artist1 9_instruction: Desenhe e pule para fazer a reta tracejada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Desenhe um quadrado abaixo do triângulo.
      K-1 Artist2 2_instruction: Pule e desenhe um quadrado próximo à casa.
      K-1 Artist2 3_instruction: Desenhe um quadrado sobre o outro quadrado
      K-1 Artist2 4_instruction: Desenhe um retângulo para completar a ponte.
      K-1 Artist2 5_instruction: Desenhe um retângulo para completar os suportes da ponte
      K-1 Artist2 6_instruction: Desenhe dois quadrados para criar um retângulo!
      K-1 Artist2 Assessment1_instruction: |
        Avaliação: desenhe um quadrado ao lado do
        outro quadrado.
      K-1 Artist2 Free Draw_instruction: Desenhe qualquer coisa!
      K-1 Artist2_7_instruction: Desenhe um retângulo para dar uma gaveta à cômoda!
      K-1 Bee 1_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 10_instruction: Colete quatro néctares e então fabrique duas unidades de mel!
      K-1 Bee 11.5_instruction: Colete quatro néctares para fabricar quatro unidades de mel!
      K-1 Bee 11_instruction: Colete três néctares e então fabrique uma unidade de mel
      K-1 Bee 12_instruction: Colete três néctares e então fabrique duas unidades de mel!
      K-1 Bee 13_instruction: Colete três néctares e então fabrique uma unidade de mel!
      K-1 Bee 14_instruction: |
        Leve-me até o néctar e colete-o, leve-me até o mel
        e produza mel
      K-1 Bee 15_instruction: Colete dois néctares para fabricar duas unidades de mel!
      K-1 Bee 2_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 3_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 4_instruction: Colete dois néctares e então fabrique duas unidades de mel!
      K-1 Bee 5_instruction: Colete três néctares e então fabrique três unidades de mel!
      K-1 Bee 6_instruction: Colete dois néctares e então fabrique duas unidades de mel!
      K-1 Bee 7_instruction: Colete três néctares e então fabrique duas unidades de mel!
      K-1 Bee 8_instruction: Colete dois néctares e então fabrique duas unidades de mel!
      K-1 Bee 9_instruction: Colete dois néctares e então fabrique duas unidades de mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Colete o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: |
        Colete todo o néctar e faça todo o
        mel.
      K-1 Bee Loops 11_instruction: Colete todo o néctar e o mel!
      K-1 Bee Loops 12_instruction: Colete todo o néctar e todo o mel.
      K-1 Bee Loops 2_instruction: |
        Use um laço "repita" para mover e então coletar o néctar e
        produzir mel!
      K-1 Bee Loops 3_instruction: |
        Use três laços "repita" para coletar o néctar
        e
        fabricar o mel!
      K-1 Bee Loops 4_instruction: |
        Use laços "repita" para obter néctar, produzir
        mel e
        para mover!
      K-1 Bee Loops 5_instruction: 'Use laços "repita" para obter néctar e mel!'
      K-1 Bee Loops 6_instruction: 'Use um laço "repita" para coletar néctar, fabricar mel, e para mover!'
      K-1 Bee Loops 7_instruction: Colete o néctar e produza mel!
      K-1 Bee Loops 8_instruction: Colete o néctar e produza mel!
      K-1 Bee Loops 9_instruction: Colete todo o néctar e produza todo o mel.
      K-1 Bee Loops Assessment 1_instruction: |
        Obtenha néctar para produzir mel e use laços
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando laços!
      K-1 Bee Puzzle 12_instruction: Obtenha três néctares e então fabrique duas unidades de mel
      K-1 Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      k-1 maze 1_instruction: Você pode me mover para o oeste para chegar até o porco?
      K-1 Maze 10_instruction: 'Desvie do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar! Dica: ele está ao sul de onde estou.
      K-1 Maze 2_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Mova-me para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Mova-me para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Mova-me por um caminho, e então por outro para me levar até o porco!
      K-1 Maze 7_instruction: Mova-me por um caminho, e então por outro para me levar até o porco!
      K-1 Maze 8_instruction: Mova-me por um caminho, e então por outro para me levar até o porco!
      K-1 Maze 9_instruction: Mova-me por um caminho, e então por outro para me levar até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliação de nível
      K-1 Maze Assessment 13_instruction: Avaliação de nível
      K-1 Maze Assessment 2_instruction: 'Avaliação: leve-me até o porco!'
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 11_instruction: "Isso é um teste!\\r\nDepure esse nível reorganizando\ne trocando blocos para me levar até o porco"
      K-1 maze debug 2_instruction: |
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K-1 maze debug 3_instruction: |
        Descubra o que está faltando e então REMOVA
        blocos
        para me levar até o porco!
      K-1 maze debug 4_instruction: |
        Passe por esses blocos e conserte-os! Eu acho
        que estou indo na direção errada.
      K-1 maze debug 5_instruction: |
        Depure esse nível reorganizando e trocando blocos
        para me levar até o porco!
      K-1 maze debug 6_instruction: |
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 7_instruction: |
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 8_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos
        para me levar até o porco!
      K-1 maze debug 9_instruction: |
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 Maze debug Assessment 1_instruction: |
        Avaliação -- depure esse nível
        reorganizando e adicionando blocos para me levar até o porco!
      K-1 Maze Loops 1_instruction: Leve-me até o porco!
      K-1 Maze Loops 10_instruction: |
        Leve-me até o porco! O laço "repita"
        vai tornar tudo muito mais fácil.
      K-1 Maze Loops 11_instruction: "Leve-me até o porco!\\r\nO laço \"repita\" vai\nfacilitar as coisas."
      K-1 Maze Loops 12_instruction: |
        Leve-me até o porco! O laço "repita" vai
        facilitar as coisas.
      K-1 Maze Loops 2_instruction: 'Use o bloco "repita" para me levar até o porco!'
      K-1 Maze Loops 3_instruction: 'Leve-me até o porco! Não deixe de usar laços "repita".'
      K-1 Maze Loops 4_instruction: Leve-me até o porco!
      K-1 Maze Loops 5_instruction: 'Leve-me até o porco! Use laços "repita".'
      K-1 Maze Loops 6_instruction: 'Leve-me até o porco! Use laços "repita".'
      K-1 Maze Loops 7_instruction: 'Leve-me até o porco! Use laços "repita".'
      K-1 Maze Loops 8_instruction: 'Use o laço "repita" para me levar até o porco.'
      K-1 Maze Loops 9_instruction: Leve-me até o porco!
      K-1 Maze Loops Assessment 1_instruction: |
        Veja só o que nós aprendemos! Use um
        laço "repita" para me levar até o porco!
      K-1 Maze Loops Assessment 2_instruction: 'Use um laço "repita" para me levar até o porco!'
      K-1 Maze Multi 14_instruction: Avaliação de nível
      K-1 Maze Multi 15_instruction: Avaliação de nível
      K-1 Maze Sequence Assessment 1_instruction: "Vejamos o que você aprendeu!\\r\nMova-me\npor um caminho e então por outro para me levar até o porco."
      K-1 Maze Sequence Assessment 2_instruction: |
        Mova-me por um caminho e então
        por outro para me levar até o porco.
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Bem-vindo à pizzaria do Luigi! Para pedir uma pizza,
        digite o nome de um sabor na função "custo" e vamos retornar o
        preço da pizza. Tente pedir uma pizza de pepperoni para começar.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Agora há apenas quatro opções disponíveis
        na pizzaria do Luigi - vamos arrumar isso! Adicione alguns novos sabores ao bloco condicional
        na função "custo". Quando adicionar seus sabores, teste
        a função para ver se ela funciona.
      Luigi's Pizza 3 (copy 1)_instruction: |
        Assim está melhor, todos adoram uma maior
        variedade nos sabores de pizza! Mas você ainda não consegue agradar a todos, e
        algumas pessoas estão vindo pedir sabores que Luigi não tem. Ao invés de
        dizer não a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos
        cobrar a mais deles por sabores que normalmente não oferecemos?
      Luigi's Pizza 3_instruction: |
        Assim está melhor, todos adoram uma maior variedade nos
        sabores de pizza! Mas você ainda não consegue agradar a todos, e algumas pessoas estão
        vindo pedir sabores que Luigi não tem. Ao invés de dizer não
        a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos cobrar a
        mais deles por sabores que normalmente não oferecemos? Vamos cobrar R$10.000
        por um sabor que não está disponível.
      Luigi's Pizza 4_instruction: "Atividade livre: o que você pode fazer para deixar a função de custo do Luigi\nainda melhor? Tente usar uma (ou mais) das seguintes opções:\\r\n- Mostrar uma\nimagem da pizza escolhida\\r\n- Permitir a combinação de vários sabores\\r\n-\nPermitir o pedido de várias pizzas\\r\n- Adicionar um cupom com código para um desconto de 50%"
      MSM Big Game Empty_instruction: |
        Todas as variáveis e funções atualmente são
        campos vazios. A progressão de cada desafio será concentrada na definição e em vários
        deles e, portanto, na adição de funcionalidade.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        Na caixa de ferramentas de variáveis você vai
        ver diversas variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars 1_instruction: |
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars Backup_instruction: |
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Escreva um programa que produz um triângulo
        verde sólido de 50 pixels.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        Se quiséssemos fazer 50 triângulos verdes,
        seria horrível repetir esse bloco de código 50 vezes. Vamos criar uma
        variável chamada "minha-forma" e colocar o código para um triângulo verde sólido de 50 pixels
        dentro dela.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Pegue sua variável "minha-forma" e use-a
        com esse código fornecido para desenhar dois triângulos verdes idênticos que têm
        50 pixels.
      MSM Defining Vars 4_instruction: |
        Edite sua variável "minha-forma" para que ela
        desenhe estrelas vermelhas sólidas de 75 pixels.
      MSM Play Lab Butterfly 1_instruction: |
        Ajude Sam a ficar na tela para que
        você sempre possa ver pelo menos uma pequena parte dele. Usando as setas do teclado, veja
        quão longe Sam pode ir para a esquerda enquanto permanece na tela. Você vai descobrir que
        Sam fica na tela enquanto sua coordenada x for maior que -50. Então, complete
        o código para fazer Sam permanecer na tela.
      MSM Play Lab Butterfly 2_instruction: |
        Agora, faça Sam ficar no lado direito
        da tela. Você precisa fazer experimentos para ver o quão longe ele pode ir e ainda
        ficar parcialmente visível na tela.
      MSM Play Lab Butterfly 3_instruction: |
        Agora, combine seu trabalho para fazer Sam permanecer
        em ambos os lados da tela.
      MSM Play Lab Game 2_instruction: |
        Variáveis também podem ser usadas para controlar
        a velocidade de jogadores em um jogo. Defina a velocidade do jogador e do inimigo e veja
        como os movimentos mudam. A velocidade pode ficar entre 2 e 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        Nessa versão do simulador, você vai
        se conectar a um roteador ao invés de se conectar diretamente a outro aluno. Insira um
        endereço no campo "para" para enviar uma mensagem a outro aluno.
      NetSim_AutomaticDNS_instruction: |
        Nessa versão do simulador um serviço DNS
        é fornecido para você. Envie uma mensagem no formulário GET [hostname] para o serviço
        DNS no endereço 15 para obter o endereço de um aluno.
      NetSim_ManualDNS_instruction: |
        Nessa versão do simulador você não pode
        ver o endereço de outros alunos. Ao invés disso, um de vocês deve agir como um
        serviço de nome, para ajudar a compartilhar os endereços entre si.
      NetSim_SendAB_instruction: |
        Conecte-se a outro aluno. Cada um pode definir
        o valor do fio entre si mesmo e "A" ou "B".  Veja se você consegue enviar
        uma mensagem completa!
      NetSim_SendAscii_instruction: |
        Nessa versão do simulador, vocês podem enviar
        números ou caracteres ASCII uns para os outros, um bit por vez.
      NetSim_SendBits_instruction: |
        Conecte-se a outro aluno. Agora você pode definir
        seu fio como "0" ou "1".  Envie uma mensagem ao seu parceiro!
      NetSim_SendingABTest_instruction: |
        Esse é o teste de Sarah para fazer um nível
        netsim
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: Você carregou o NetSim no modo superusuário.
      NetSim_Variant1_instruction: |
        NetSim: Variante 1 permite que os alunos elaborem
        manualmente o tempo de envio de bits para trás e para a frente.
      NetSim_Variant2_instruction: |
        NetSim: Variante 2: Os alunos se conectam diretamente
        uns aos outros e enviam pacotes inteiros para trás e para a frente, explorando sistemas de
        codificação de dados.
      NetSim_Variant3_instruction: |
        NetSim: Variante 3: Conecta grupos de 2 a 6 alunos
        com um roteador e explora questões sobre roteamento e DNS
      New Artist Project_instruction: |
        Desenhe algo incrível! Seu código é salvo
        como um projeto e você pode retornar a ele a qualquer momento.
      NEW Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com
        100 pixels de comprimento usando um laço?
      NEW Course 4 Artist Functions 10.1_instruction: |
        Use as funções dos desafios
        anteriores para desenhar esse padrão.
      NEW Course 4 Artist Functions 10_instruction: |
        Clique em "editar" para preencher
        os blocos na definição da função para fazer um quadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: "Agora, queremos criar uma nova\nfunção chamada \"desenhe uma linha de quadrados\" que desenha seis quadrados em sequência. Você consegue criar essa função usando a função \"desenhe um quadrado 20\"\nque já criamos? Observação: alteramos a caneta para que ela fique muito mais\nfina. Clique em \"editar\" na função \"desenhe um quadrado 20\" para ver como!\\r\n"
      NEW Course 4 Artist Functions 12_instruction: |
        Use a função "desenhe uma linha de quadrados"
        do último desafio para desenhar esse padrão."
      NEW Course 4 Artist Functions 13_instruction: |
        Você consegue desenhar uma forma de estrela usando
        a função "desenhe uma linha de quadrados"? Dica: Edite a função "desenhe uma linha de quadrados"
        para que você não precise chamá-la duas vezes.  Observe que você terá de avançar
        um certo número de pixels e virar 144 graus.
      NEW Course 4 Artist Functions 14_instruction: 'Atividade livre! '
      NEW Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      NEW Course 4 Artist Functions 3_instruction: |
        Temos aqui um novo tipo de bloco.
        Ele é chamado de "bloco de função". Clique em "editar" e então preencha-o com o código
        para desenhar um quadrado com lados de 100 pixels. Quando você terminar de editar a função,
        clique em "Fechar" para retornar ao programa.
      NEW Course 4 Artist Functions 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão. Dica: você vai precisar usar um bloco "vire 120 graus à direita"
        após cada quadrado.
      NEW Course 4 Artist Functions 5_instruction: |
        Como o bloco "desenhe um quadrado"
        sabia que comandos executar? Clique em "editar" no bloco de função "desenhe um quadrado".
        Os blocos no editor da função são a definição que
        compõe "desenhe um quadrado". Quando você terminar de analisar, clique em "Salvar
        e Fechar" e então em "Executar".
      NEW Course 4 Artist Functions 6_instruction: "Usando o bloco de função \"desenhe um quadrado\",\nvocê pode desenhar esta imagem? Dica: cada quadrado está separado por 20 pixels.\\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para acessar o editor da função "desenhe um quadrado".
        Lembre-se de clicar em "Fechar" para sair do editor da função. 
      NEW Course 4 Artist Functions 8_instruction: |
        Criamos uma nova função
        para você chamada "desenhe um triângulo". Você consegue editar a definição da função
        para desenhar um triângulo com lados de 100 pixels?
      NEW Course 4 Artist Functions 9_instruction: |
        Você consegue resolver isso adicionando
        apenas um bloco?
      NEW Course 4 Artist Functions inspire_instruction: |
        Clique aqui para ver a figura
        de inspiração novamente.
      New Course 4 Artist Functions Level 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      NEW Course 4 Artist Params 1_instruction: |
        Vamos definir essa função para desenhar
        um quadrado com lados de 50 pixels. Clique em "editar" para começar.
      NEW Course 4 Artist Params 10_instruction: |
        Crie um bloco de função "desenhe um hexágono"
        com um parâmetro comprimento. Dica: esse hexágono tem lados de 100 pixels
        de tamanho. 
      NEW Course 4 Artist Params 11_instruction: |
        Você consegue descobrir como desenhar
        essa forma? Edite a função para usar o parâmetro "lados".
      NEW Course 4 Artist Params 12_instruction: |
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      NEW Course 4 Artist Params 12a_instruction: |
        Esta imagem é semelhante à anterior.
        Você consegue usar um "laço para" com sua função para criar deste design?
      NEW Course 4 Artist Params 13_instruction: "Vamos editar a função \"desenhe um polígono\".\nEla já tem um parâmetro \"lados\". Agora, vamos adicionar um parâmetro\n\"comprimento\". \\r \nDica: O perímetro de cada forma tem 200 pixels de comprimento. Você\nse lembra da equação para fazer as formas ficarem do mesmo tamanho quando elas têm\num número diferente de lados?"
      NEW Course 4 Artist Params 14_instruction: |
        Edite "desenhe uma borda espiral" para
        usar os parâmetros "comprimento" e "lados" e então recrie essas formas.
      NEW Course 4 Artist Params 15_instruction: |
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas para você usar. Desenhe algo incrível!
        Brinque com a largura da caneta para ver como seus desenhos ficam diferentes!
      NEW Course 4 Artist Params 2_instruction: |
        Crie uma função "desenhe um triângulo"
        com lados de 50 pixels desde o início
      NEW Course 4 Artist Params 3_instruction: "Agora, vamos usar a função para desenhar\n5 triângulos em uma linha. Dica: cada triângulo está separado por 30 pixels.\\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: |
        Preencha o ??? no bloco de entrada
        do parâmetro comprimento. Dica: o tamanho do pentágono é de 100 pixels. 
      NEW Course 4 Artist Params 6_instruction: |
        Preencha o parâmetro "comprimento"
        para desenhar essa formas substituindo o "???" pelos números corretos. O
        quadrado e o triângulo têm lados de 100 pixels, enquanto o hexágono tem lados de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |
        Você consegue completar este desenho? Dica:
        cada triângulo é 25 pixels maior que o anterior. O primeiro triângulo
        tem lados de 25 pixels de comprimento.
      NEW Course 4 Artist Params 8_instruction: |
        O código da função deste triângulo
        está corrompido. Você consegue editar a função para corrigi-lo e criar triângulos
        de 25, 50 e 75 pixels de comprimento?
      NEW Course 4 Artist Params 9_instruction: |
        Clique em "editar" para preencher a definição
        da função "desenhe um quadrado" e adicionar um parâmetro. Ela deve receber um parâmetro
        comprimento, como no triângulo. Dessa vez, desenhe 3 quadrados: 25, 50 e 75
        pixels de comprimento e separados por 100 pixels cada.
      NEW Course 4 Artist Params inspire_instruction: "Atividade livre - Inspiração: agora você\naprendeu tudo o que precisa saber para criar um padrão como esse! Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie algo\nvocê mesmo.\\r\n \\r\nQuer saber como nosso padrão de inspiração foi feito? "
      NEW Course 4 Artist Vars 1.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação. 
      NEW Course 4 Artist Vars 12_instruction: |
        Agora, recrie o algoritmo do último
        nível para criar um pentágono de lados 150.
      NEW Course 4 Artist Vars 2.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação. 
      NEW Course 4 Artist Vars 2_instruction: |
        Arraste um bloco numérico para o bloco "defina o comprimento"
        para desenhar um conjunto de triângulos de 50 pixels. 
      NEW Course 4 Artist Vars 4 5_instruction: |
        Belo trabalho no último desafio,
        vamos tentar novamente. Desta vez, vamos fazer esse design bacana com hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |
        Vamos tentar novamente. Você consegue definir
        a variável "comprimento" para fazer este design bacana com hexágonos? Dica: é um
        múltiplo de 10.
      NEW Course 4 Artist Vars 6_instruction: "Desenhe esse padrão colocando a\nvariável comprimento nos lugares corretos e definindo o valor correto para\ncomprimento. (Dica: é um múltiplo de 10).  \\r\n\\r\nPercebe como você define o valor de\ncomprimento apenas uma vez e o código usa o valor correto em todos os lugares?\\r\n\\r\n\\r\n"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Pronto para um desafio? Pegue o que
        você aprendeu sobre laços e tente resolver esse problema. Lembre-se: você pode
        ter que executar sua solução várias vezes antes de descobrir todas as
        etapas.
      NEW Course 4 Bee For Loops 11_instruction: |
        Você pode usar a variável do laço para
        controlar o movimento e a coleta de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |
        Adicione o código necessário para garantir que
        a abelha colete todo o néctar. Olhe quanto código você precisa para esse desafio!
        (Vamos aprender uma maneira mais simples no próximo desafio).
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, o "laço para" torna isso muito mais
        fácil! Todo o código que você precisa está lá, dê uma olhada em como ele é feito
        e então clique em "Executar" para ver como ele funciona. 
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Agora, precisamos mover para a frente "contador"
        vezes, e então obter o néctar "contador" vezes. Você consegue usar dois laços "repita"
        para resolver esse desafio?
      NEW Course 4 Bee For Loops 4_instruction: |
        Substitua o ??? no "laço para"
        pela maior quantidade de néctar que a abelha tem que coletar. 
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Você está pegando o jeito de como usar
        o "laço para"? Vamos ajudar a abelha a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        O último número em seu laço para é
        chamado de "incremento". A cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando
        um incremento de 2.
      NEW Course 4 Bee For Loops 7_instruction: "Agora, vamos combinar a variável \"contador\"\ncom um bloco matemático! Como você pode usar a variável \"contador\" para navegar\npor esse jardim com o menor número de blocos possível? O que você precisa fazer para\ncoletar 3, 6, 9, 12 ou 15 néctares dessa vez? O segredo está na variável\n\"contador\"!\\r\n\\r\nLembre-se: se seu laço estiver contando de forma crescente, o incremento é adicionado\nà variável \"contador\" a cada repetição."
      NEW Course 4 Bee For Loops 8_instruction: "Você conseguiu! Qual deve ser seu incremento\npara coletar 3, 6, 9, 12, 15 néctares?\\r\nDica: quanto você precisa\nadicionar a cada número para obter o número seguinte?"
      NEW Course 4 Bee For Loops 9_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      NEW Course 4 Bee For Loops 95_instruction: |
        Dê uma olhada em cada parte do
        "laço para" que você acabou de criar. Você consegue descobrir quais números
        você precisa dobrar para resolver esse desafio? Por que isso funciona?
      NEW Course 4 Play Lab Params 11_instruction: |
        É hora da atividade livre! Divirta-se
        com todos os blocos da sua caixa de ferramentas. 
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Vamos tentar novamente, mas agora com
        menos ajuda. O que você precisa editar desta vez para fazer com que os personagens patrulhem?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        "O que você acha que esse código vai
        fazer? Pressione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Usando o que você aprendeu até
        agora, você consegue fazer o dinossauro dar um passo à frente toda vez que o pinguim contar?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        É hora da atividade livre,
        divirta-se com todos os blocos da sua caixa de ferramentas. 
      NEW Course 4 Play Labs For Loops 8a_instruction: |
        Desafio: como você
        usaria o "laço para" para fazer cada ator andar e dizer seu número de ator,
        e então sumir da tela? 
      New Play Lab Project_instruction: |
        Crie sua própria história ou jogo! Seu código
        está salvo como um projeto para o qual você pode retornar a qualquer hora.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nVamos começar explorando um video game\nsimples e então descobrir como ele funciona. Você pode usar as setas do teclado\npara mover o ninja para a esquerda, para a direita e para pular - tente pegar o unicórnio e\ndesvie do dragão!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Vamos começar explorando um jogo simples
        e então vamos descobrir como ele funciona. Você pode usar as setas do teclado para mover o
        ninja para cima e para baixo - tente capturar o unicórnio e desviar do dragão! Quando você
        achar que já descobriu como o jogo funciona, clique em "Concluir"
      Ninjacat Demo No Animate_instruction: |
        Vamos começar explorando um jogo simples
        e então vamos descobrir como ele funciona. Você pode usar as setas do teclado para mover o
        ninja para cima e para baixo - tente capturar o unicórnio e desviar do dragão! Quando você
        achar que já descobriu como o jogo funciona, clique em "Concluir"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Não é uma boa ideia topar com um Creeper. Passe com cuidado pelos Creepers e chegue na sua casa em segurança.
      Overworld Chop Tree_instruction: 'Madeira é um recurso muito importante. Muitas coisas são feitas com ela. Ande até a árvore e use o comando "destruir bloco" para derrubá-la.'
      Overworld Chop Trees_instruction: Precisamos construir uma casa antes que o sol se ponha. Casas utilizam muita madeira. Corte todas as 3 árvores.
      Overworld Free Play 20x20_instruction: Parabéns! Você concluiu todas as nossas tarefas! Agora, minere, construa e crie algo único, usando tudo que você já aprendeu.
      Overworld Free Play_instruction: Este cenário é todo seu para você criar. Você escolhe o que irá construir.
      Overworld House Frame - A_instruction: |
        Vamos fazer nossa própria casa! Este lugar
        parece bom. Construa a fundação sobre os blocos de terra.
      Overworld House Frame - C_instruction: |
        Vamos fazer nossa própria casa! Este lugar
        parece bom. Construa a fundação sobre os blocos de terra.
      Overworld House Frame B_instruction: |
        Uma parede está pronta, vamos construir
        o resto da casa seguindo a sua planta! Você vai precisar repetir suas ações
        bastante aqui.
      Overworld House Frame B2_instruction: |
        Uma parede está pronta, vamos construir
        o resto da casa seguindo a sua planta! Você vai precisar repetir suas ações
        bastante aqui.
      Overworld House Frame C_instruction: |
        Uma parede está pronta, vamos construir
        o resto da casa seguindo a sua planta! Você vai precisar repetir suas ações
        bastante aqui.
      Overworld House Frame Chosen_instruction: |
        Construa o resto da sua casa com
        qualquer material que quiser. O comando "repita" vai ser bem útil.
      Overworld House Frame_instruction: Vamos fazer nossa própria casa! Este local parece bom. Construa uma estrutura nos blocos de terra.
      Overworld Minecart Track_instruction: Você voltou à superfície com muitos recursos subterrâneos. Agora, vamos construir um trilho ao longo do caminho de terra que começa na sua casa. O primeiro passo é limpar o caminho. Siga o caminho e remova as árvores.
      Overworld Move to Sheep_instruction: 'Adicione um segundo comando "andar à frente" para chegar à ovelha.'
      Overworld Place Wall_instruction: 'Toda casa começa com uma parede. Construa a primeira parte da sua casa colocando os comandos "colocar" e "andar à frente" dentro do loop de repetição.'
      Overworld Plant Crops_instruction: É sempre bom pensar no futuro. Plante colheitas nos dois lados da água para você não passar fome depois.
      Overworld Powered Minecart_instruction: Ótimo trabalho! Você coletou vários recursos e construiu uma casinha modesta. Agora, construa o trilho desde a borda do mapa até a porta da sua casa.
      Overworld Shear Sheep_instruction: 'Hora de tosquiar ovelhas! Use o comando "tosquiar" para obter lã das duas ovelhas.'
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        As flores roxas podem ter 1 ou 0 néctar,
        mas você não sabe quanto ela tem! Tome cuidado para não coletar néctar de uma flor roxa
        que não tenha néctar algum. Verifique se o néctar é igual a 1 usando
        o bloco se.
      PDK5 Conditionals 2_instruction: |
        Experimente esse desafio que usa condicionais e
        laços em conjunto. Use o bloco "se" para decidir quando virar. Dica: você só
        precisa de mais um bloco para completar este desafio. 
      PDK5 Events 1_instruction: |
        Até agora, todos os programas que escrevemos são executados
        em ordem, de cima para baixo. Nesse desafio, vamos usar "Eventos" para responder
        a uma ação em demanda. Faça o polvo dizer "Olá" somente quando você
        clicar nele. 
      PDK5 Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim amar desenhar! Ajude-me
        a desenhar os óculos quadrados. Dica: a haste entre os óculos é 25 pixels
        menor que o comprimento do quadrado.
      PDK5 Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      PDK5 Loops 1_instruction: |
        Ao invés de usar 5 blocos "avance", use
        o bloco "repita" com um bloco "avance" dentro dele. Em ciência da
        computação, isso é chamado de "laço". 
      PDK5 Loops 3_instruction: |
        Temos aqui outro desafio para praticar o uso de laços. O que acontece
        se você usar o bloco repita para executar o código fornecido na área de trabalho
        4 vezes?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        Um foguete é lançado, viajando a 15 metros
        por segundo... clique em "Executar" para ver como é esse problema em forma de animação.
      Play Lab Rocket 2_instruction: |
        Começamos a receita de design para a altura do foguete
        usando o contrato e os exemplos que você escreveu. Complete a definição da função
        para a altura do foguete e execute sua animação.
      Play Lab Rocket 2B_instruction: |
        Um foguete decola, viajando a 15 metros
        por segundo. Usando a receita de design, escreva uma função chamada altura-foguete
        que recebe o número de segundos passados desde a decolagem do foguete
        e retorna a altura do foguete passado esse tempo.
      Play Lab Rocket 3_instruction: |
        Excelente! Agora, você consegue atualizar essa função para
        que nosso foguete se mova mais rapidamente? Lembre-se de atualizar a instrução de finalidade,
        os exemplos e a definição da função para lançar um foguete a 40 metros por segundo.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Foguetes de verdade começam devagar e ganham velocidade
        com o passar do tempo - então vamos adicionar uma aceleração simples ao nosso! Você pode
        escrever uma função que descreve um foguete que está a 10 metros em 1 segundo, 40 metros
        em 2 segundos, 90 metros em 3 segundos, 160 em 4 segundos e assim por diante?
      Play Lab Rocket 5_instruction: |
        Muito melhor, mas vamos escrever mais uma função
        com aceleração simples. Dessa vez o foguete deve estar a 15 metros em 1 segundo,
        45 metros em 2 segundos, 95 metros em 3 segundos e 165 metros em 4 segundos.
      Play Lab Rocket Free Play_instruction: |
        Atividade livre: faça uma experiência com sua função altura-foguete
        para fazer o foguete voar de formas diferentes. Clique em "Concluir" quando você
        terminar.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Ryan - 4-5 Bee Conditionals 2_instruction: |
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      Ryan - Bee Conditionals_instruction: |
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      Ryan Test Locked Blocks_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        Essa borboleta se chama Sam e
        a área do jogo é o quintal de Sam. O quintal de Sam tem 400 pixels de largura por 400 de
        altura! Como você pode ver, Sam é livre para andar pelo quintal, e as coordenadas na parte
        superior da tela são atualizadas para que você saiba sua localização. Use as setas do teclado
        para mover Sam pelo quintal. Ajude Sam a coletar todas as bandeiras para seguir em frente.
      Sam the Butterfly 1_instruction: |
        Esse morcego se chama Sam e a área do jogo é o quintal
        de Sam. O quintal de Sam tem 400 pixels de largura por 400 de altura! Como você pode
        ver, Sam é livre para andar pelo quintal e as coordenadas na parte superior da tela são
        atualizadas para que você saiba sua localização. Use as setas do teclado para mover Sam
        pelo quintal, anotando as coordenadas de Sam em diferentes localizações.
        Clique em "Concluir" quando você estiver pronto para seguir em frente.
      Sam the Butterfly 2_instruction: |
        A mãe de Sam quer garantir que ela sempre possa
        ver pelo menos uma parte dele, então vamos escrever algumas funções que ajudem a garantir
        que ele não vá muito longe no quintal. Aqui temos uma função chamada "esquerda-segura?"
        - ela deve receber um número para seu domínio que representa as coordenadas de x de Sam
        e retornar verdadeiro se ele estiver dentro do limite esquerdo do quintal (x > -25). Se
        sua função funcionar, Sam não deve poder sair do quintal pelo lado
        esquerdo.
      Sam the Butterfly 3_instruction: |
        No último desafio, impedimos Sam de sair
        pela esquerda, agora vamos fazer o mesmo com a direta. Preencha a função "direita-segura?"
        para que Sam não passe de x = 425.
      Sam the Butterfly 4_instruction: |
        Hmm, podemos impedir que Sam saia pela
        esquerda, ou podemos impedi-lo de sair pela direita, mas como podemos impedi-lo
        de sair por ambas as direções? Tente usar o bloco "E" para programar a função
        "na-tela?" para verificar se Sam tem a esquerda-segura? E a direita-segura?
      Sam the Butterfly 5_instruction: |
        Atividade livre: Incrível, agora Sam não pode sair do quintal
        nem pela esquerda, nem pela direita, mas e quanto às partes de cima e de baixo? Adicionamos
        um parâmetro adicional "y" para a função "na-tela?". Você consegue atualizar
        seu programa para que Sam não possa sair nem por cima (y = 425) nem por baixo (y= -25)?
        Teste seu programa movendo Sam o mais longe que ele puder ir em todas as quatro direções.
        Clique em Concluir quando Sam estiver completamente protegido.
      Sam the Butterfly 6_instruction: |
        Adicionamos um novo parâmetro "y" à
        função "na-tela?". Atualize a função para que ela verifique se "esquerda-segura?"
        E "direita-segura?" E "superior-segura?" são todas verdadeiras. Quando você consertar a
        função, tente sair do quintal pela direita, pela esquerda e por cima.
      Sam the Butterfly 7_instruction: |
        Agora temos apenas uma única direção com a qual nos preocupar! Crie
        uma função "inferior-segura?" e atualize a função "na-tela?" para que ela
        verifique as partes de cima, de baixo, esquerda e direita.
      Sam the Butterfly Complete_instruction: |
        Agora temos apenas uma única direção com a qual nos preocupar!
        Crie uma função "inferior-segura?" e atualize a função "na-tela?" para
        que ela verifique as partes de cima, de baixo, esquerda e direita.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Bolota! Bolota! Bolota! Use um bloco "se" para me levar até lá
        com o menor número de blocos.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |
        Ok, vamos fazer novamente para pegar a prática - este não é
        muito diferente, mas cuidado com a parede!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        Os blocos "se-senão" verificam uma condição e, em seguida,
        fazem uma coisa OU outra. Para que eu chegue até a bolota, tente usar este novo bloco.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma vez. Você consegue
        acertar na primeira tentativa?
      scrat 20_instruction: |
        Você consegue adicionar somente 3 blocos para me ajudar a resolver um labirinto mais
        complexo? Se você fizer isso corretamente, eu posso percorrer qualquer caminho cheio de curvas,
        não importa o comprimento. Depressa! O gelo está derretendo!
      SpecialFrozenLevel_instruction: |
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      Standalone_Artist_1_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Standalone_Artist_2_instruction: |
        Desenhe esse diamante com ângulos de 120 e 60
        graus e lados de 150 pixels de comprimento.
      Standalone_Artist_3_instruction: |
        Você consegue desenhar este hexágono com lados de
        100 pixels e ângulos de 60 graus?
      Standalone_Artist_4_instruction: |
        Agora você tem um novo bloco para brincar,
        o laço. Ele vai repetir um conjunto de comandos. O que acontece se você repetir esses
        comandos 6 vezes?
      Standalone_Artist_5.5_instruction: |
        Observe como simplificamos o código do diamante,
        transformando-o em um laço. Você pode repetir toda a sequência 12 vezes para desenhar
        a flor. Dica: você terá que virar 30 graus depois do laço do seu diamante
        para não continuar desenhando o mesmo diamante todas as vezes.
      Standalone_Artist_5_instruction: |
        Quantas vezes você precisa repetir esse diamante
        para desenhar a flor?
      Standalone_Artist_6_instruction: |
        Repita esse código do hexágono 6 vezes para criar
        o design. Quantos graus você precisa virar a cada vez? Dica: divida
        o número de graus em um círculo pelo número de vezes que você está repetindo.
      Standalone_Artist_7_instruction: |
        Uma função é mais uma ferramenta de programação para que
        você não tenha que repetir as mesmas ações. Essa função desenha uma flor, então
        você pode usá-la sempre que quiser desenhar uma flor. Use-a juntamente com o novo bloco
        "pule" para desenhar essas flores. Dica: as flores são separadas por 150 pixels
      Standalone_Artist_8_instruction: |
        Temos aqui uma função chamada "Desenhe uma forma",
        que programamos para desenhar hexágonos. Execute o código para ver o que ele faz e,
        em seguida, tente usá-lo com a função para ver o que acontece. Você consegue fazer
        com que ela desenhe um padrão de quadrados, triângulos ou octógonos?
      Standalone_Artist_9_instruction: |
        Agora vá em frente e faça a imagem que
        quiser! Você tem até uma função vazia para usar para fazer o que
        quiser!
      Standalone_Artist_v2_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Envie uma mensagem configurando o estado do
        fio como A ou B.
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instruções
      U2 frequency random sub_instruction: Instruções
      U2 vigenere cipher_instruction: Instruções
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Sua vez de tentar! Fornecemos a você um
        código inicial com dois botões e dois manipuladores de evento na tela, mas deixamos
        os Ids padrões de "id". Você precisa alterar esses ids para conectar
        o manipulador de eventos ao botão correto. (Curiosamente, o programa
        incorreto funciona, mas ele tem um comportamento bizarro. Vamos discutir mais
        sobre isso na próxima lição. Por enquanto, faça os botões funcionarem corretamente).
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito. Veja: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito.
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Agora a função "virar" é 
        fornecida no código. Use a função virar() para desenhar um T conforme
        descrito.
      U3L03 draw diamond_instruction: "Use qualquer função que você escreveu\nantes para fazer uma forma de \"diamante\" conforme mostrado na imagem.\\r\n\\r\nOBSERVAÇÃO:\nessa é mais uma pegadinha.  Os 4 lados do diamante são feitos desenhando\ntrês etapas com outro movimento feito entre as chamadas.  Dica: você deve criar\noutra função que desenha um lado do diamante. "
      U3L03 Three Steps_instruction: |
        Desenhe 3 "passos", movendo para cima e para a direita. Observe
        o padrão do movimento. Você deve definir uma função chamada desenharPasso()
        que desenha um dos passos e então chamá-la 3 vezes para obter o efeito desejado.
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.
      U3L04 diamond solution_instruction: |
        Estude essa solução para o problema da função desenharDiamante
        Observe que todo programa começa chamando desenharDiamante() no
        começo.  Então, o programa segue uma cadeia de chamadas. Você pode acompanhar
        o que está acontecendo no código para ver as funções reutilizadas.  Também é fácil
        de ler porque os nomes das funções descrevem o comportamento esperado.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Vamos revisitar o problema da grade 3x3
        que você resolveu algumas lições atrás.  Desta vez o desafio é programar
        a solução da forma "mais eficiente possível".  Agora que você sabe como escrever
        funções, deve ser mais fácil dividir o problema e seu código deve ser
        mais fácil de ler e depurar. Veja a rubrica para mais detalhes sobre os requisitos
        e as expectativas.
      U3L05_draw3x3GridEfficiently_instruction: |
        Desenhe uma grade 3x3 acima e para a
        direita da tartaruga. Tente fazer isso com o menor número de comandos possível.
        OBSERVAÇÃO: esse problema é bastante desafiador. Você deve precisar passar um tempo
        resolvendo-o e ajustando-o. Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Desta vez vamos aprender
        um pouco sobre como alterar a caneta da tartaruga. Leia a documentação para encontrar
        larguraCaneta() e corCaneta(), e então desenhe o quadrado roxo como foi mostrado.
      U3L06 Challenge 3 fill pink_instruction: |
        Agora, vamos tentar preencher todo o fundo
        da tela. Para deixar as coisas um pouco mais fáceis para você, podemos lhe dizer
        que a cor que escolhemos é uma das 140 cores nomeadas. Se você não souber os
        nomes das cores, dê uma olhada na documentação de corCaneta()
        novamente. Dica: você precisa usar ponto().
      U3L06 Challenge 4 bullseye_instruction: |
        Vamos tentar mais uma vez.
        Desta vez as cores NÃO são chamadas pelo nome - você precisa usar o número hexadecimal
        cor para defini-la. Assim, para que você não fique tentando adivinhar aleatoriamente, vamos
        lhe dar uma dica -- cada uma das cores mostradas na imagem-alvo é uma das
        cinco listadas a seguir:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  Você deve acertar o palpite se aplicar o que sabe sobre
        cores RGB.
      U3L06 Challenge 5 overlapping circles_instruction: |
        Esta imagem é criada apenas
        usando ponto() e corCaneta(), mas como vamos fazer esses círculos ficarem
        transparentes? Se você ainda não recebeu a dica: leia a documentação!
      U3L06 Challenge 6 squiggles_instruction: |
        Em seguida, vamos adicionar algumas
        curvas ao nosso desenho. Leia a documentação para os comandos de "arco" e
        então desenhe os rabiscos como mostrado. Para facilitar as coisas, temos aqui uma dica: todos
        os parâmetros são múltiplos de 10 e as cores são da seguinte lista de
        nomes de cores: azulCeleste, azulClaro, azulTurquesa, Roxo e Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        Para fazer essa carinha feliz você vai
        precisar olhar a documentação do comando mova() e então usá-lo com os
        outros que você aprendeu. Você pode fazer suposições razoáveis sobre as cores.
      U3L06 Challenge 8 make your own_instruction: |
        Use as ferramentas que você aprendeu
        hoje para criar um desenho próprio. Se você tiver tempo, desafie seus
        amigos para ver se eles conseguem duplicar sua imagem. Vamos mostrar para você os
        desenhos que nós mesmos fizemos. Você pode tentar duplicá-los, se quiser.
        Caso não queira, divirta-se criando o seu próprio desenho!
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Atividade livre! Use o que você aprendeu
        sobre laços e aleatoriedade para criar sua própria pequena cena. Divirta-se.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        Você vai usar laços e números
        aleatórios para gerar uma imagem do céu em uma noite estrelada parecida com uma
        mostrada aqui. Fornecemos um código inicial para gerar o chão e o céu
        (apenas dois pontos gigantes) e você vai adicionar código a esse projeto para fazer as
        estrelas, a grama e a lua.  Todos os efeitos são aplicações inteligentes dos pontos,
        linhas e cores da tartaruga.  Para começar, siga a série de etapas sugerida na
        planilha de acompanhamento. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Arraste um botão para fora da tela e
        defina seu texto como "Vá em frente!".  Execute o programa para ver se você consegue enxergar
        o botão.
      U3L13 - Debug Id plus logic problem_instruction: "O último problema foi um exemplo\nde erro de sintaxe. O laboratório de aplicativo não entendeu qual objeto ele deveria ouvir \npara um evento \"clique\", então ele mostrou uma mensagem de erro no console para\ninformá-lo. Outro tipo de erro é um erro lógico - o programa é válido,\nmas não faz o que você quer que ele faça.\\r\n\\r\nEsse programa tem dois erros.\nUm erro de sintaxe (complicado) e um erro lógico.  Encontre-os, conserte-os e faça\no programa funcionar como esperado."
      U3L13 - Debug Id Problem_instruction: |
        Esse programa tem um problema! Você pode descobrir
        qual? Execute o programa e veja se você pode descobrir a partir das mensagens de erro
        no console qual é o problema. Não há muito código para ver, então você deve ser capaz
        de descobrir o problema simplesmente lendo o código com atenção. Faça uma alteração
        que permita que o programa funcione como esperado.
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Desafio: crie uma "tartaruga motorista"
        com pelo menos três botões na tela para mover a tartaruga para a frente e
        virá-la para a direita e para a esquerda. Se quiser, você pode copiar/colar de um nível anterior,
        mas você vai exercitar seus músculos de programação se criar
        esse pequeno programa desde o início. Se tiver tempo, adicione botões extras! Você
        também pode se divertir alterando os parâmetros nas funções da tartaruga, usando cores,
        etc.
      U3L13 - Turtle move with button_instruction: |
        Arraste um botão para fora da tela e
        defina seu texto como "Vá em frente!". Adicione um manipulador de eventos para o botão que
        faz a tartaruga se mover para a frente. Execute o programa para ver se ele funciona. 
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Siga a planilha de "Eventos
        infelizes" e insira seu código aqui para testá-lo. Carregamos previamente
        o código que você precisa para começar.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introdução de textInput, getText e write.  Primeiro,
        execute o código inicial várias vezes. Tente alterar o que é escrito na
        tela quando o botão for clicado. Então, use getText para escrever na tela
        o que o usuário digitou na caixa de texto. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introdução do comando setPosition!  Substitua
        o moveTo no manipulador de eventos de clique do botão para usar setPosition para mover o
        botão para uma posição aleatória quando ele for clicado.
      U3L16 - images and text labels_instruction: |
        Introdução de objetos diferentes de
        botões! - textLabels e imagens.  Primeiro, tente substituir seu botão por um
        textLabel.  O texto vai responder a eventos da mesma forma que o botão?  Tente conectá-lo
        a um manipulador de eventos. Fornecemos um código inicial similar ao resultado do
        último nível, então você pode copiar o código do último nível aqui se
        preferir. 
      U3L16 - images_instruction: |
        Introdução de imagens. Tente substituir o textLabel
        por uma imagem. A imagem vai responder aos eventos como o botão respondia? Tente 
        conectá-la a um manipulador de eventos. Fornecemos um código inicial similar
        ao resultado do último nível, então você pode copiar o código do último nível
        aqui se você preferir. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      U3L16 - setPositionMoveButton_instruction: Use setPosition para moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Vamos nos basear em alguns códigos
        iniciais simples para esta lição. Sua primeira tarefa: use moveTo e randomNumber
        para fazer a tartaruga se mover para uma posição aleatória a cada clique do botão. Fornecemos
        a você o código inicial para nossa configuração comum: um botão que move a tartaruga
        quando é clicado. Você deve modificar esse código.  
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Introdução de textLabels.  Primeiro, tente substituir
        seu botão por um textLabel.  O texto vai responder a eventos da mesma forma que o
        botão?  Tente conectá-lo a um manipulador de eventos. Fornecemos um código
        inicial similar ao resultado do último nível, então você pode copiar o código do
        último nível aqui se você preferir. 
      U3L16 - textInput getText write_instruction: |
        Introdução de textInput, getText
        e write.  Primeiro, execute o código inicial várias vezes. Tente alterar o que
        é escrito na tela quando o botão for clicado. Então, use getText para escrever
        na tela o que o usuário digitou na caixa de texto.
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use esta área de laboratório do aplicativo para melhorar
        seu jogo no estilo clicker.  Você deve começar copiando/colando o código do seu jogo antigo
        aqui. Estamos mostrando um conjunto mais completo de blocos na caixa de ferramentas -
        você pode não ter usado algumas coisas ainda. Fique à vontade para explorar e
        testar o que você quiser. Tudo o que você precisa deve ser mostrado.
        Divirta-se!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "Demos a você um trecho\nde código da tela anterior. Tente alterar o valor atribuído a foo\npara ver a string ser alterada. \\r\nFaça o seguinte: \\r\n1. Tente alterar o valor atribuído\na foo para ver a string ser alterada. \\r\n2. Modificando apenas as linhas de código\nque lhe foram dadas, tente fazer a saída ser: “O valor de foo é:\n9.  Quem achar diferente que prove.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: "Demos a você um trecho de código\ncom um erro. Ele não reconhece a variável. Você consegue descobrir o motivo? Conserte\no erro e execute o programa. Observe também a mensagem de erro, já que ela\npode aparecer em algum momento da sua vida.\\r\n\\r\n"
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: "Faça o seguinte:\\r\nDemos a você\ntrês linhas de código mostradas na página anterior. Adicione três linhas de\ncódigo abaixo das mostradas aqui para criar sua própria variável, atribuir um\nvalor a ela e escrevê-la na tela.  OBSERVAÇÃO: altere o nome da variável de\nx para alguma outra coisa.\\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        Here is the code from
        previous page that has a subtle problem with it.  FIRST: run the app and try
        it to see the problem. NOTE: NaN stands for "Not a Number".   DO THIS: figure
        out what's happening, where, and fix the problem.  We'll explain the issue
        on the next page. 
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Agora, veja este
        exemplo. Adicionamos outra declaração de escrita. Antes de executar o código, veja
        se você consegue prever qual será a saída. É sério, anote sua previsão. DEPOIS,
        execute o código, mexa nele, se quiser, e vá para a próxima página para
        ver uma explicação.
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Desenhe um quadrado usando apenas avance
        e vireEsquerda.  O quadrado deve ser desenhado acima e à esquerda da posição
        inicial da tartaruga.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Desenhe uma grade 3x3 acima e à direita da
        tartaruga. Tente fazer isso com o menor número de comandos possível. OBSERVAÇÃO:
        Esse problema é bastante desafiador. Você deve precisar passar um tempo resolvendo-o
        e ajustando-o.  Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L2_TurtleSquare_right_instruction: |
        Desenhe um quadrado usando apenas avance
        e vireEsquerda, mas, desta vez, faça o quadrado aparecer ACIMA e À DIREITA
        da posição inicial.
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Modelo
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 'Há lava escondida sob alguns destes blocos, que você precisará cobrir antes de avançar. Um comando "se" será útil aqui. Adicione um comando "andar à frente" no local correto para minerar estes blocos.'
      Underground If Statements_instruction: 'Agora, a situação complicou um pouco. Minere 3 redstone, mas não caia na lava. Use um comando "se" para colocar paralelepípedos sobre qualquer lava que você descobrir.'
      Underground Iron_instruction: Não é uma boa ideia tentar andar sobre lava incandescente. Coloque os paralelepípedos para criar uma ponte, depois minere pelo menos dois dos blocos de ferro.
      Underground Mine in a Circle_instruction: Descubra uma forma de obter 5 diamantes e 7 redstone! Tente usar um comando de repetição dentro de um comando de repetição para andar em um quadrado.
      Underground Mining Coal_instruction: Você encontrará os recursos mais valiosos no subterrâneo, mas pode ficar escuro lá dentro. Coloque pelo menos 2 tochas e minere pelo menos 2 carvões.
      Underground Test Level_instruction: Colete todos os minerais!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Use este nível de teste para pegar xml para testes de unidade
