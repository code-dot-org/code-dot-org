tg:
  data:
    callouts:
      2-3 Artist 1 new_callout: [ ]
      2-3 Artist Debugging 1_callout:
        2-3_Artist_Debugging_1_a: Artist doesn't have a "Step" button, but you can drag the slider left to watch your program run more carefully.
      2-3 Bee Conditionals 5_callout:
        Bee_Cond_5_1a: Purple flowers can have either 1 or 0 nectar...but you won't know until you run the code!
      4-5 Artist Patterns Free Play_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      4-5 Bee Conditionals - FC Test_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      4-5 Bee Conditionals 2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      AppLab_test02_callout: [ ]
      Applab test_callout: [ ]
      Big Game Animation 1 (copy 1)_callout: [ ]
      Big Game Animation 1_callout: [ ]
      Big Game Animation 2 (copy 1)_callout:
        Big Game Animation 2: Edit this function to animate the target
      Big Game Animation 2_callout:
        Big Game Animation 2_callout1: Edit this function to animate the target
        Big Game Animation 2_callout2: Delete this block and complete the definition
      Big Game Animation 3_callout:
        Big Game Animation 3_callout1: Edit this function to animate the danger
        Big Game Animation 3_callout2: Delete this block and complete the definition
      Big Game Animation 4_callout: [ ]
      Big Game Booleans 1_callout: [ ]
      Big Game Booleans 2_callout:
        Big Game Booleans 2: Open this drawer to edit the safe-left? function
      Big Game Booleans 3_callout: [ ]
      Big Game Booleans 4_callout:
        Big Game Booleans 3: Edit the onscreen? function to check both safe-left? and safe-right?
      Big Game Booleans 5_callout: [ ]
      Big Game Collision 1 (copy 1)_callout: [ ]
      Big Game Collision 1_callout: [ ]
      Big Game Collision 2_callout: [ ]
      Big Game Collision 3_callout:
        Big Game Collision 3: Fix this 'distance' function to make your collision detection work. You can use the existing 'line-length' function to calculate the distance from px to cx, and from py to cy.
      Big Game Collision 4_callout:
        Big Game Collision 4: Complete the collide? function so that it checks whether the distance between a given pair of coordinates is close enough for them to be touching.
      Big Game Final_callout: [ ]
      Big Game Player 1_callout: [ ]
      Big Game Player 2_callout: [ ]
      Big Game Vars 1_callout:
        big_game_finish: Click the finish button when you're ready to move to the next level.
      Big Game Vars 2 (copy 1)_callout:
        big_game_title: Edit this variable to change the title of your game
      Big Game Vars 2_callout:
        Big Game Vars 2_callout1: Click "edit" to change the title of your game
        Big Game Vars 2_callout2: Change the value of the title variable here
      Big Game Vars 3 (copy 1)_callout:
        big_game_bg: Edit this variable to change the background image of your game
      Big Game Vars 3_callout:
        big_game_bg: Click "edit" to change the background image of your game
      Big Game Vars 4 (copy 1)_callout: [ ]
      Big Game Vars 4_callout: [ ]
      CSD U3 - complex - compound conditionals_callout: [ ]
      CSD U3 - complex - key up and down_callout: [ ]
      CSD U3 - complex - mouse down_callout: [ ]
      CSD U3 - complex - mouse move_callout: [ ]
      CSD U3 - complex - nested conditional_callout: [ ]
      CSD U3 - conditionals - first conditional 2_callout: [ ]
      CSD U3 - conditionals - first conditional_callout: [ ]
      CSD U3 - conditionals - transition 2_callout: [ ]
      CSD U3 - conditionals - transition_callout:
        CSD_U3_L8_S6_C1: Put the console log statement here
      CSD U3 - images - first sprite with image_callout: [ ]
      CSD U3 Boolean Modify_callout: [ ]
      CSD U3 Boolean Predict_callout: [ ]
      CSD U3 Compound Nested Challenge_callout: [ ]
      CSD U3 Compound Nested Examples_callout: [ ]
      CSD U3 Conditional Project_callout: [ ]
      CSD U3 Conditionals Apple 2_callout: [ ]
      CSD U3 Conditionals Apple_callout: [ ]
      CSD U3 Diagonal Movement_callout: [ ]
      CSD U3 Direction Animations_callout: [ ]
      CSD U3 Direction Arrows_callout: [ ]
      CSD U3 Draw Loop Plugged update your scene_callout: [ ]
      CSD U3 Else_callout: [ ]
      CSD U3 If Else_callout: [ ]
      CSD U3 Keyboard Input Challenge_callout: [ ]
      CSD U3 Keypress Boolean_callout: [ ]
      CSD U3 Keypress Watchers_callout: [ ]
      CSD U3 Property Conditional Multi_callout: [ ]
      CSD U3 Property Conditional_callout: [ ]
      CSD U3 Random Choice_callout: [ ]
      CSD U3 Random Intro_callout: [ ]
      CSD U3 Random Min Max_callout: [ ]
      CSD U3 Simple Drawing - Animation 2_callout: [ ]
      CSD U3 Sprites anitab 1_callout: [ ]
      CSD U3 Sprites intro debug_callout: [ ]
      CSD U3 Sprites intro predict_callout: [ ]
      CSD U3 Sprites intro sprites_callout: [ ]
      CSD U3 Sprites scene challenge_callout: [ ]
      CSD U3 Sprites scene drawing_callout: [ ]
      CSD U3 Sprites scene sprites_callout: [ ]
      CSD U3 Sprites scene template_callout: [ ]
      CSD U3 Sprites scene text_callout: [ ]
      CSD U3 Sprites text debug_callout: [ ]
      CSD U3 Sprites text_callout: [ ]
      CSD U3 UP_ARROW_callout: [ ]
      CSD U3 Variables Predict Where X_callout:
        CSD_U3_variables: Change the number here
      CSD U3 Variables Predict Where XY Embed_callout:
        grid: Click here to show the grid.
      CSD U3 Variables Predict Where XY_callout:
        grid: Click here to show the grid.
      CSD U3 Variables TEMPLATE square_callout: [ ]
      CSD U3 Variables make a big square_callout: [ ]
      CSD U3 Variables make a square_callout: [ ]
      CSD U3 Watcher Debug_callout: [ ]
      CSD U3 abstraction accelerateX_callout:
        CSD_U3_L11_S6_C1: Add your code here.
      CSD U3 abstraction accelerateY_callout:
        CSD_U3_L11_S7_C1: Add your code here.
      CSD U3 abstraction change velocityX_callout:
        CSD_U3_L11_S5_C1: Add your block here.
      CSD U3 abstraction change velocityXY_callout:
        CSD_U3_L12_S4_C1: The velocity is updated here.
      CSD U3 abstraction change velocityY_callout:
        CSD_U3_L11_S6_C1: Add your block here.
      CSD U3 abstraction circle_callout:
        CSD_U3_L12_S7_C1: Look at this line.
      CSD U3 abstraction dragonfly (OLD)_callout:
        CSD_U3_L11_S5_C1: Add your block here.
      CSD U3 abstraction dragonfly OLD_callout:
        CSD_U3_L11_S5_C1: Add your block here.
      CSD U3 abstraction horse_callout:
        CSD_U3_L11_S13_C1: Set your sprite's velocityX and velocityY here
        CSD_U3_L11_S13_C2: Change your sprite's velocityY here.
      CSD U3 abstraction horse2_callout:
        CSD_U3_L11_S15_C1: Set your sprite's velocityY here
      CSD U3 abstraction horse3_callout:
        CSD_U3_L11_S16_C1: Use the counter pattern to make the horse fall here.
        CSD_U3_L11_S16_C2: Stop the horse from falling here.
      CSD U3 abstraction jump_callout:
        CSD_U3_L11_S17_C1: Look at this if statement
        CSD_U3_L11_S17_C2: Send the frog back down here
      CSD U3 abstraction jumper intro_callout:
        CSD_U3_L11_S17_C1: Set the sprite's starting position here.
        CSD_U3_L11_S17_C2: Set the hay bale's velocity here
        CSD_U3_L11_S17_C3: Add your if statement here.
      CSD U3 abstraction jumper template_callout:
        CSD_U3_L11_S17_C1: Set the sprite's starting position here.
        CSD_U3_L11_S17_C2: Set the hay bale's velocity here
        CSD_U3_L11_S17_C3: Add your if statement here.
      CSD U3 abstraction jumping_callout:
        CSD_U3_L13_S8_C1: Set the velocity here
      CSD U3 abstraction looping_callout:
        CSD_U3_L11_S17_C1: Look at this if statement
      CSD U3 abstraction parabola_callout:
        CSD_U3_L11_S13_C1: Add your block here.
      CSD U3 abstraction rotation accelerate_callout:
        CSD_U3_L11_S5_C1: Look at this code.
        CSD_U3_L11_S5_C2: Add your code here.
      CSD U3 abstraction rotation control_callout:
        CSD_U3_L11_S5_C1: Look at this code.
      CSD U3 abstraction rotation_callout:
        CSD_U3_L11_S4_C1: Use the rotationSpeed block here
      CSD U3 abstraction setSpeed accelerate_callout:
        CSD_U3_L11_S14_C1: Add your code here.
      CSD U3 abstraction sidescroll intro_callout:
        CSD_U3_L11_S17_C1: Set the sprite's starting position here.
        CSD_U3_L11_S17_C2: Set the hay bale's velocity here
        CSD_U3_L11_S17_C3: Add your if statement here.
      CSD U3 abstraction sidescroll template_callout:
        CSD_U3_L11_S17_C1: Set the sprite's starting position here.
        CSD_U3_L11_S17_C2: Set the hay bale's velocity here
        CSD_U3_L11_S17_C3: Add your if statement here.
      CSD U3 abstraction sidescroll_callout:
        CSD_U3_L11_S17_C1: Set the sprite's starting position here.
        CSD_U3_L11_S17_C2: Set the hay bale's velocity here
        CSD_U3_L11_S17_C3: Add your if statement here.
      CSD U3 abstraction tumbleweed_callout:
        CSD_U3_L11_S17_C1: Look at this if statement
      CSD U3 abstraction velocityX control_callout:
        CSD_U3_L11_S5_C1: Look at this code.
      CSD U3 abstraction velocityX if-statements_callout:
        CSD_U3_L11_S5_C1: Look at this code.
      CSD U3 abstraction velocityX_callout:
        CSD_U3_L11_S4_C1: Add your block here.
      CSD U3 abstraction velocityY 2_callout:
        CSD_U3_L11_S5_C1: Add your block here.
      CSD U3 abstraction velocityY control_callout:
        CSD_U3_L11_S5_C1: Look at this code.
      CSD U3 abstraction velocityY_callout:
        CSD_U3_L11_S5_C1: Add your block here.
      CSD U3 challenge face_callout: [ ]
      CSD U3 challenge new shape_callout: [ ]
      CSD U3 collisions getSpeed_callout:
        CSD_U3_L11_S2_C1: Add your code for the compass here.
        CSD_U3_L11_S2_C2: Change the code to display speed here.
      CSD U3 collisions isTouching intro_callout:
        CSD_U3_L12_S2_C1: Add your block here.
      CSD U3 collisions pinball2_callout:
        CSD_U3_L14_S16_C1: Sprite interactions go in this function.
      CSD U3 collisions scoreboard_callout:
        CSD_U3_L12_S8_C1: These blocks display the score.
        CSD_U3_L12_S8_C2: The blocks that determine whether the bunny has caught the carrot go here.
      CSD U3 collisions try blocks_callout:
        CSD_U3_L13_S6_C1: Change this block.
      CSD U3 collisions types_callout:
        CSD_U3_L13_S6_C1: Add your code here.
      CSD U3 debug_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Drag this block into the code area.
      CSD U3 ellipse_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Drag this block into the code area.
      CSD U3 fill_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Drag this block into the code area.
      CSD U3 game backgrounds_callout:
        CSD_U3_S18_L4_C1: This block calls your function.
        CSD_U3_L18_S4_C2: Functions area
      CSD U3 game variables_callout:
        CSD_U3_S18_L3_C1: This block creates a new variable.
        CSD_U3_L18_S3_C2: Variables area
      CSD U3 keydown conditional_callout: [ ]
      CSD U3 my-rect_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Here is the "Run" button.
      CSD U3 picture_callout: [ ]
      CSD U3 platform background1_callout:
        CSD_U3_L16_S3_C1: the function that draws the background
        CSD_U3_L16_S3_C2: the code that calls the function
        CSD_U3_L16_S3_C3: Change this function.
      CSD U3 platform platform1_callout:
        CSD_U3_S17_L8_C1: This block creates a new sprite.
      CSD U3 platform scoreboard_callout:
        CSD_U3_L17_S7_C1: Score is printed here.
      CSD U3 platform variable1_callout:
        callout: This block creates a variable.
      CSD U3 rect_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Here is the "Run" button.
      CSD U3 sequence_callout:
        CSD_U3_rect_c1: Here is the code
        CSD_U3_rect_c2: Drag this block into the code area.
      CSDU4 - Design Mode - 3_callout: [ ]
      CSPU5_U3L16 - setPosition to fixed location_callout:
        firstTimeSetPosition: Drag this inside the event handler function. Then click the arrows to get rid of the width and height parameters.
      CSPU5_U3L16 - setPosition to move button_callout:
        randNumReminder: Use this as the the value for the x and y coordinates in setPosition.  Just drag it into the parameter you want.
      CSPU5_setPosition to fixed location_callout:
        firstTimeSetPosition: Drag this inside the event handler function. Then click the arrows to get rid of the width and height parameters.
      Calc Circles of Eval .1_callout:
        Calc Circles of Eval .1: This is the evaluation block. Click on the drop down box to change the number
      Calc Circles of Eval .2_callout:
        calc_question_marks: Select the right number from this dropdown
      Calc Circles of Eval 3_callout:
        Calc Circles of Eval 3_callout1: Replace the ???'s with the correct number to complete this puzzle
      Calc Design Recipe 1_callout:
        calc design recipe 1: Open the Functions drawer and click the "Create a Function" button
      Calc Vars 1.1_callout:
        Calc Vars 1.1_age: What number should you multiply to calculate age in days?
      Calc Vars 1_callout:
        Calc Vars 1_edit_option: Click on edit to change the value of this variable
      Calc Vars 2.1_callout:
        Calc Vars 2.1_num_months: Drop the number of months in a year here
      Code Studio Puzzle Challenge 1 - Artist_callout: [ ]
      Code Studio Puzzle Challenge 12 - Artist_callout:
        Code Studio Puzzle Challenge 12 - Artist_callout1: Click "Clear Puzzle" to return to the original code.
      Code Studio Puzzle Challenge 5 - Bee_callout:
        Code Studio Puzzle Challenge 5 - Bee_callout1: 3. Press "Run" to execute your code
        Code Studio Puzzle Challenge 5 - Bee_callout2: 2. Connect blocks to the "When Run" block
        Code Studio Puzzle Challenge 5 - Bee_callout3: 1. Drag blocks from the toolbox
      Code Studio Puzzle Challenge 6 - Bee_callout:
        Code Studio Puzzle Challenge 6 - Bee_callout1: Drag blocks into the trash can to delete them
      Code Studio Puzzle Challenge Var - Artist_callout: [ ]
      Counting_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      Course 4 Artist 4_callout:
        repeat_full_circle: Enter in the number of times the zombie has to move to make a full circle
      Course 4 Artist 7_callout:
        repeat_blocks: Use the "Repeat" block and wrap it around the blocks in the workspace
      Course 4 Artist For Loops 4_callout:
        place_counter_variable: Drag your counter variable inside this block
      Course 4 Artist Functions 4_callout:
        create_function: Click here to open the "Functions" flyout, then click the "Create a Function" button.
      Course 4 Artist Functions 5 OLD_callout:
        house_hint: It's ok if the picture doesn't look like a house yet. We will fix it in the next puzzle.
      Course 4 Artist Functions 8_callout:
        edit_function: Click here to edit your function.
      Course 4 Artist Functions challenge_callout:
        Course_4_Artist_Functions_challenge_1: Notice that we've sorted all of blocks and put them behind categories to keep things tidy.  Click here to find all of the blocks that you need.
      Course 4 Artist Params 2_callout:
        length_parameter: Can you update this function so it uses the "length" parameter?
      Course 4 Artist Params 4_callout:
        create_function: Click here to open the "Functions" flyout, then click the "Create a Function" button.
      Course 4 Artist Vars 1_callout:
        repeat_blocks: Use the "Repeat" block and wrap it around the blocks in the workspace
      Course 4 Artist Vars 10_callout:
        set_sides: Use this block to set "sides" to the number needed to complete the puzzle.
      Course 4 Artist Vars 12_callout:
        set_length: Use this block to set "length" to the correct value.
      Course 4 Artist Vars 13_callout: [ ]
      Course 4 Artist Vars 2_callout:
        set_length: Use this block to set "length" to the correct value.
      Course 4 Artist Vars 3_callout:
        place_variable: Drag your variable inside this block
      Course 4 Artist Vars 6_callout:
        degrees_per_side: Divide 360 by the number of sides to get the size of each angle in degrees.
      Course 4 Artist Vars 8_callout:
        Course_4_Artist_Vars_8_a: Need more space?  Pull this bar over to make the coding area wider.
      Course 4 Artist Vars 9_callout:
        set_sides: Use this block to set "sides" to the number needed to complete the puzzle.
      Course 4 Bee 1_callout:
        if_bee_nectar: Use the "if" block to decide if the bee should get nectar or make honey
      Course 4 Bee 3_callout:
        if_else_bee: Use the "if/else" block so that the Bee gets nectar from a flower and makes honey if it's not a flower
      Course 4 Bee For Loops 1_callout:
        get_nectar: Use the new "get nectar" block.
      Course 4 Bee For Loops 6_callout:
        actions_category: The tool box got a new look! The "Actions" blocks are in here now.
      Course 4 Bee Params 2_callout:
        edit_get_nectar: Use this button to edit the function and change the direction the Bee will turn to get the nectar.
      Course 4 Bee Params 3_callout: [ ]
      Course 4 Bee Params 4 - Two WhenRun_callout:
        Course_4_Bee_Params_4: Setting these variables to either "0" or "1" is called setting a "flag". This flag can signal our function with the direction that our bee needs to go.
      Course 4 Bee Params 4_callout: [ ]
      Course 4 Maze 1_callout:
        Course 4 Maze 1_callout1: Hit "Run" to try your program
        Course 4 Maze 1_callout2: Drag the "move" block and snap it below the other blocks in the workspace
      Course 4 Maze 4_callout:
        repeat: Put blocks inside the loop to repeat commands
      Course 4 Play Lab Params 2_callout:
        Course_4 _Play_Lab_Params_2_1: Click "edit" to update this function so that it uses the height parameter.
      Course 4 Play Lab Params 3_callout:
        edit_function: Click here to edit your function.
      Course 4 Play Lab Params 5_callout: [ ]
      Course 4 Play Lab Params 6_callout:
        edit_add_parameter: Click edit to add a parameter in your function
      Course 4 Play Lab Vars 1_callout:
        arrows_move_actor: Use the arrows to move the actor
      Course 4 Play Lab Vars 6_callout: [ ]
      Course 4 Play Lab Vars 9_callout:
        Course_4_Play_Lab_Vars_9_1: All of your blocks are now organized behind categories! Click on a label to see the pieces inside.
      Course 4 Play Labs For Loops 5_callout:
        Course_4_Play_Labs_For_Loops_5: Woah!  My code exploded!  Can you put it back together to solve this puzzle?
      Course 4 Playlab For Loop Freeplay_callout: [ ]
      Course 4 Playlab For Loops 4b_callout:
        Course_4_Playlab_For_Loops_4b_1: Notice that the `counter` variable has a different name for each character?  That's so each `for` loop can control its own counter.
        Course_4_Playlab_For_Loops_4b_2: In this puzzle, you are only allowed to change the "increment" of the `for` loops.
      Course 4 Playlab For Loops 5b_callout: [ ]
      Course 4 Playlab For Loops 6b_callout: [ ]
      Course 4 SCV 6_callout:
        Course_4_SCV_6: This block allows you to customize your color to almost anything you want to see!  Play around with the numbers to see what happens!
      Eval Booleans 2_callout:
        Eval Booleans 2 1: Select a number that will make this expression evaluate to true
      Eval Cond 1_callout:
        Eval Cond 1 1: Click edit to change the value of this variable
      Eval Define Funcs 2_callout:
        Eval Define Funcs 2 triangle: Change the triangle's style here
      Eval Define Funcs 3_callout:
        Eval Define Funcs 3: Make our function use the radius parameter instead of always having a radius of 50.
      Eval Define Funcs 4_callout:
        Eval Define Funcs 4: Go to the Functions drawer to "Create a Function"
        Eval Define Funcs 4B: Click "Add" to add a domain radius, of type Number
        Eval Define Funcs 4C: Set the range to Image
      Eval Define Funcs Test_callout:
        Eval Define Funcs 3: Make our function use the radius parameter instead of always having a radius of 50.
      Eval Design Recipe .1_callout:
        edit_function: Click here to edit your function.
      Eval Design Recipe 3_callout:
        eval_design_recipe_3: This is your function definition. This code runs every time you use the 'wide-rect' function
      Eval Strings Images .1_callout:
        type_string: 'Drag this string into the evaluate block in the workspace. '
      Eval Strings Images .2_callout: [ ]
      Eval Strings Images 1_callout:
        purple_image_block: Purple colored blocks output Image values
      Eval Strings Images 2_callout:
        string_block_color: Try typing in a color as a String here
      Eval Strings Images 3_callout:
        Eval Strings Images 3: Use this style block and select "outline"
      Eval Strings Images 5_callout:
        Eval Strings Images 5_callout1: Overlay a triangle by filling in this slot
      Eval Strings Images 7_callout: [ ]
      Geometric Pattern_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Geometric Sun_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Infinity_move_collide_callout:
        Infinity_move_collide_callout: Play a sound when this event occurs.
      Infinity_move_directions_callout:
        Infinity_move_directions_callout: Which block will make Baymax move up when the up arrow is pressed?
        Infinity_move_directions_callout_arrow: Use these arrows to steer
      Infinity_move_right_callout:
        Infinity_move_right_runbutton: Add move block here
      Infinity_repeat_callout:
        Infinity_repeat_callout: Place Move blocks inside here
      Luigi's Pizza 1 (copy 1)_callout:
        luigi's pizza 1: Try ordering a pepperoni pizza
      Luigi's Pizza 1_callout:
        luigi's pizza 1: Try ordering a pepperoni pizza
      Luigi's Pizza 2 (copy 1)_callout:
        luigi's pizza 2: Edit this function to add your own toppings
      Luigi's Pizza 2_callout:
        luigi_pizza_2: Edit this function to add your own toppings
      Luigi's Pizza 3 (copy 1)_callout: [ ]
      Luigi's Pizza 3_callout: [ ]
      Luigi's Pizza 4_callout: [ ]
      MC HOC 2016 Level 1_callout: [ ]
      MC HOC 2016 Level 2-2_callout:
        craft2_run_button_callout: When you are ready, hit "Run" to try your program.
      MC HOC 2016 Level 6_callout: [ ]
      MC HOC 2016 Nerop_callout: [ ]
      MC HOC 2016 New Drop_callout: [ ]
      MC HOC 2016 New Spawn_callout: [ ]
      MC HOC 2016 New Walk_callout:
        MC_HOC_2016_New_Walk_callout2: Hit "Run" to start moving.
      MC HOC 2016 New pn_callout: [ ]
      MSM Defining Vars 2_callout:
        MSM Defining Vars 2_callout1: Click "edit" to open the function editor to update the function
        MSM Defining Vars 2_callout2: Define the triangle here
      MSM Defining Vars 3_callout:
        MSM Defining Vars 3: Click here to find your variables
      Mike Playlab Project_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      Modular Arithmetic_callout: [ ]
      NEW Course 4 Artist Functions 10_callout: [ ]
      NEW Course 4 Artist Functions 3_callout:
        NEW_Course_4_Artist_Functions_3_1: Click here to edit the new function so that it creates a square.
      NEW Course 4 Artist Functions 5_callout:
        edit_function: Click here to edit your function.
        function_editor_draw_square: This is your function definition. These blocks run everytime you use the "draw a square" block
      NEW Course 4 Artist Functions 7_callout:
        edit_function: Click here to edit your function.
      NEW Course 4 Artist Functions 8_callout:
        edit_function: Click here to edit your function.
      NEW Course 4 Artist Params 10_callout:
        create_function: Click here to open the "Functions" flyout, then click the "Create a Function" button.
      NEW Course 4 Artist Params 2_callout:
        create_function: ""
        name_function: ""
        write_draw_triangle_function: ""
      NEW Course 4 Artist Params 9_callout:
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
      NEW Course 4 Artist Vars 6_callout:
        place_length_variable: Drag the length variable here to replace the question marks
      NEW Course 4 Bee For Loops 4_callout:
        bee_for_loop: Enter the largest number of nectar you want the bee to collect here
      NEW Course 4 Bee For Loops 5_callout:
        actions_category: The tool box got a new look! The "Actions" blocks are in here now.
      New App Lab Project_callout: [ ]
      New Artist Project_callout:
        New Artist Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace to add them to your program
        New Artist Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      New Maker Lab Project_callout: [ ]
      New Play Lab Project_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      Ninjacat Demo B_callout:
        Ninjacat Demo B: Click `Run` to try out the game
      Ninjacat Demo No Animate_callout:
        Ninjacat Demo B: Click `Run` to try out the game
      Overworld Chop Trees_callout:
        craft_callout_preplaced: We've put some blocks here to get you started
      Overworld House Frame Chosen_callout:
        craft_callout_preplaced_house: This code will start building your house. Can you finish it?
      Overworld Move to Sheep_callout:
        craft_run_button_callout: Hit "Run" to try your program
        craft_drag_block_callout: Drag a "move forward" block and snap it below the other block
      Overworld Place Wall_callout:
        craft_inside_repeat: Repeat actions by placing blocks in here
      PDAlg 13-16 Sam Extension Puzzle_callout: [ ]
      PDAlg 17-20 Luigi Extension Puzzle_callout: [ ]
      PDAlg Big Game History_callout: [ ]
      PDAlg Big Game Remix_callout: [ ]
      PDAlg Design Recipe Delete_callout: [ ]
      PS copy - CSD U3 Variables Predict Where XY Embed_callout:
        grid: Click here to show the grid.
      PS copy 2-3 Bee Conditionals 5_callout:
        Bee_Cond_5_1a: Purple flowers can have either 1 or 0 nectar...but you won't know until you run the code!
      PS copy CSD U3 Variables Predict Where XY_callout:
        grid: Click here to show the grid.
      Pizza on a Plate_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Play Lab Rocket 2_callout:
        pass_function: This start(function) block lets you pass your function (not the value your function returns with some input) into the rocket animation library. The animation you see on screen is actually using your function to move the rocket!
        play lab rocket 2: Define your rocket-height function here
      Play Lab Rocket 2B_callout:
        pass_function: This black block lets you pass your function (not the value your function returns with some input) into the rocket animation library. The animation you see on screen is actually using your function to move the rocket!
      Play Lab Rocket 3_callout:
        Play Lab Rocket 3 1: Update the purpose statement before moving on to the examples and definition.
      Play Lab Rocket Free Play_callout: [ ]
      Poorva copy U3L2 Using Simple Commands_callout: [ ]
      Quantum Bee - Ryan_callout:
        feeling_stuck_callout_test: " Feeling Stuck?<br />Click the lightbulb for a hint!"
      Robot Doodle_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Robot Drawing_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Robot_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      Rock Paper Scissors_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      Rocket Height Course A_callout:
        pass_function: This start(function) block lets you pass your function (not the value your function returns with some input) into the rocket animation library. The animation you see on screen is actually using your function to move the rocket!
      Ryan - 4-5 Bee Conditionals 2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      Ryan - Bee Conditionals_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      Sam the Butterfly 3_callout:
        Sam the Butterfly 3 1: Edit this function to keep Sam from going off the right side
      Sam the Butterfly 5_callout: [ ]
      Test Play Lab Project With Walls_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      TestLab_callout: [ ]
      U3 - Simple Drawing - Ellipse and No Fill_callout: [ ]
      U3 - Simple Drawing - Fill_callout: [ ]
      U3 - Simple Drawing - No Fill_callout: [ ]
      U3 - Simple Drawing - Order of Blocks_callout: [ ]
      U3 - Simple Drawing - Oval_callout: [ ]
      U3 - Simple Drawing - Rectangle Width and Height_callout: [ ]
      U3 - Simple Drawing - Rectangle_callout: [ ]
      U3 - Simple Drawing - Stroke and Stroke Weight_callout: [ ]
      U3 - Simple Drawing - X and Y values_callout: [ ]
      U3 - Simple Drawing - regular polygon_callout: [ ]
      U3 - Simple Drawing - text_callout: [ ]
      U3 - Sprites - Intro Sprites_callout: [ ]
      U3 Variables flower example_callout: [ ]
      U3 Variables gray square_callout: [ ]
      U3 Variables make a square_callout: [ ]
      U3L05_3x3GridEfficiencyChallenge_callout: [ ]
      U3L05_draw3x3GridEfficiently_callout: [ ]
      U3L2 Using Simple Commands (no tooltips)_callout: [ ]
      U3L2 Using Simple Commands_callout: [ ]
      U3L2_Turtle3by3Grid_callout: [ ]
      U3L2_TurtleSquare_right_callout: [ ]
      U5 ColorSleuth Template_callout: [ ]
      Underground Avoiding Lava_callout:
        craft_callout_moveforward: This code will check for lava, can you add a command to move forward?
      Underground Iron_callout:
        craft_what_is_iron: Mine this iron!
      WebLab PS test - 1-12_callout:
        version_history_button: Check out version history
      WhileAdventure_callout:
        sample1_1: This will be an adventurer collecting coins, not a farmer digging.
      aE1_callout:
        aE1_1: There will only be two of these and two turns
      aE2_callout:
        aE2_1: Still only two of these and two turns
      aE3_callout:
        aE3_1: Only a handful of these available
      aE3alternate_callout:
        aE3_1: Only a handful of these available
      aE3alternateB_callout:
        aE3_1: Only a handful of these available
      aE4_callout:
        aE3_1: Only a handful of these available
      aE5_callout:
        aE3_1: Only a handful of these available
      aE6_callout:
        aE6_1: Only 1 move forward and 1 turn block
      aEfreeplay_callout:
        aEfreeplay_1: Note that starting the artist in the middle can be awkward.  We're looking at adding actions that can move the artist to absolute positions.
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_callout: [ ]
      artistLoopsK2_callout:
        artistLoopsK2_1: This number tells you how many of these blocks you can use in this puzzle.
      artistLoopsK2gradek_artist_loops3_callout:
        artistLoopsK2_1: This number tells you how many of these blocks you can use in this puzzle.
      courseA_artist_loops4_callout:
        courseA_artist_loops4_1: This number tells you how many of these blocks you can use in this puzzle.
      courseA_artist_loops7_callout:
        courseA_artist_loops7_1: This number means that only one of this kind of block can be used in the final answer.
      courseA_artist_loops8_callout:
        courseA_artist_loops8_1: Did you know that you can draw back over a line whenever you need to?
      courseA_collector_loops1_callout:
        courseA_collector_loops1_1: Do you see some new blocks in the toolbox?  Don't worry, we will show you how to use them later in the stage.
      courseA_collector_loops3_callout:
        gradek_adventurer_loops2_1: This number tells you how many of these blocks you can use in this puzzle.
      courseA_collector_loops3_predict1_callout: [ ]
      courseA_forVideoTest_artist_callout: [ ]
      courseA_maze_seq1_callout:
        courseA_maze_seq1_1: Click the lightbulb when you need a hint!
      courseA_maze_seq2_callout:
        courseA_maze_seqA_callout1: Use the step button to go step-by-step through the program. This will help you find the bug!
      courseA_maze_seq4_callout:
        courseA_maze_seq4_1: These blocks are made of stone.  You can move them, but you can't delete them!
      courseA_maze_seq4a_callout: [ ]
      courseA_playLab_events2_callout: [ ]
      courseA_playLab_events3_callout: [ ]
      courseA_playLab_events4_callout:
        courseA_playlab_events4_callout1: This is a callout
      courseA_playLab_events5_callout:
        courseA_playLab_events5_1: Click here to change the direction of the event arrow.
      courseA_playLab_events6_callout:
        courseA_playLab_events6_1: This let's you choose a "random" sound, which means that you don't know what you are going to get until you hear it!
      courseA_toMakeLoopsVideo_Collector_callout: [ ]
      courseB_artist_loops3_callout:
        courseB_artist_loops3_1: There is only one of these blocks in the toolbox.  How will you use it?
      courseB_artist_loops5_callout:
        courseB_artist_loops5_1: This number means that there are no more of this block left in the toolbox.
      courseB_collector_loops1_callout:
        courseB_collector_loops1_1: Do you see some new blocks in the toolbox?  Don't worry, we will show you how to use them later in the stage.
      courseB_maze_seq1_callout:
        courseB_maze_seq1: Click the lightbulb when you need a hint!
      courseB_maze_seq2_callout:
        courseB_maze_seq2_callout1: Use the step button to go step-by-step through the program. This will help you find the bug!
      courseB_maze_seq3_callout:
        courseB_maze_seq3_1: The grey blocks are made of stone and can't be thrown away.
      courseB_maze_seq7_callout: [ ]
      courseC_artist_prog1_callout: [ ]
      courseC_artist_prog2_callout: [ ]
      courseC_collector_loops_challenge2_callout: [ ]
      courseC_collector_prog1_callout:
        courseC_collector_prog1_1: Do you see some new blocks in the toolbox?  Don't worry, we will show you how to use them later in the stage.
      courseC_collector_prog7_callout:
        courseC_collector_prog7_1: You can take more blocks from the toolbox if you need them!
      courseC_collector_prog8_callout: [ ]
      courseC_collector_prog9_callout: [ ]
      courseC_collector_progA_callout: [ ]
      courseC_collector_progB_callout: [ ]
      courseC_collector_prog_challenge1_callout: [ ]
      courseC_collector_prog_challenge2_callout: [ ]
      courseC_harvester_loops1_callout:
        courseC_harvester_loops1_callout1: The number four on the pumpkin tells you that there are four pumpkins available to pick.
      courseC_maze_loops2_callout:
        courseC_maze_loops2_1: You only have one of these blocks available in this puzzle.
      courseC_maze_loops2_predict1_callout: [ ]
      courseC_maze_loops_challenge2_callout: [ ]
      courseC_maze_programming1_callout:
        grade2_CaringForNewPet_0_1: After connecting all the blocks, press "Run" to start your program.
      courseC_maze_programming2_callout:
        courseC_maze_programming2_1: This is the toolbox. It’s where you’ll find extra blocks to complete your puzzles.
      courseC_maze_programming3_callout:
        courseC_maze_programming3_2: You can drag extra blocks to the toolbox to throw them away.
        courseC_maze_programming3_callout2: Use the step button to go step-by-step through the program. This will help you find the bug!
      courseC_maze_programming4_callout:
        courseC_maze_programming4_1: This is your block limit.  It tells you how many of these blocks you have left to use.
      courseC_maze_programming5_callout: [ ]
      courseC_maze_programming7_callout:
        courseC_maze_programming7_1: This is your first challenge puzzle! These are meant to be hard and may take several tries.
        courseC_maze_programming7_2: These blocks are made of stone and can't be thrown away.
      courseC_starWars_loops10_callout: [ ]
      courseC_starWars_loops10_predict2_callout: [ ]
      courseC_starWars_loops11_callout: [ ]
      courseC_starWars_loops2_callout:
        courseC_starWars_loops2: You only have one of these blocks available in this puzzle.
      courseC_starWars_loops4_callout: [ ]
      courseC_starWars_loops5_callout: [ ]
      courseC_starWars_loops6_callout: [ ]
      courseC_starWars_loops7_callout: [ ]
      courseC_starWars_loops8_callout: [ ]
      courseC_starWars_loops9_callout: [ ]
      courseD_artist_functions2_callout:
        courseD_artist_functions2_1: When this green block runs, all of the code in the function will run. What should the artist do after drawing the first square?
      courseD_artist_functions8_callout:
        courseD_artist_functions8_1: Your blocks to create functions have been moved under this label in the toolbox.
      courseD_artist_nestedLoops1a_callout:
        courseD_artist_nestedLoops1a_1: You don't have to use colors to get this puzzle right. If you want to, this `random color` block makes it easy!
      courseD_artist_nestedLoops_challenge2_callout:
        courseD_artist_nestedLoops_challenge2_callout1: This loop should create an octagon.
        courseD_artist_nestedLoops_challenge2_callout2: This loop should create a hexagon.
        courseD_artist_nestedLoops_challenge2_callout3: This loop should create a square.
      courseD_artist_ramp11_callout:
        courseD_artist_ramp11_1: You can change this number.
        courseD_artist_ramp11_2: Click here to type in the number of times to repeat your code.
      courseD_artist_ramp12_callout: [ ]
      courseD_bee_conditionals2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      courseD_bee_conditionals_challenge2_callout:
        courseD_bee_conditionals_challenge2_1: Use this loop to collect all of the nectar (or honey) from one flower (or honeycomb).
      courseD_bee_conditionals_challenge3_callout:
        courseD_bee_conditionals_challenge3_1: Try repeating the move forward block using this loop.
      courseD_bee_debugging_challenge1_callout:
        courseD_bee_debugging_challenge1_callout1: Use this command to move the bee backward.
      courseD_bee_debugging_challenge2_callout:
        courseD_bee_debugging_challenge1_callout1: Use this command to move the bee backward.
      courseD_bee_nested_loops_challenge1_callout: [ ]
      courseD_bee_nested_loops_challenge2_callout: [ ]
      courseD_collector_debugging_challenge2_callout: [ ]
      courseD_collector_nested_loops_challenge2_callout: [ ]
      courseD_collector_ramp10_callout: [ ]
      courseD_collector_ramp8_callout:
        courseD_collector_ramp8_1: 'Use this block to collect a single piece of treasure.  '
      courseD_collector_ramp9_callout: [ ]
      courseD_collector_until_challenge1_callout: [ ]
      courseD_farmer_until_challenge2_callout: [ ]
      courseD_harvester_nested_loops_challenge1-broken_callout: [ ]
      courseD_maze_loops_challenge1_callout: [ ]
      courseD_maze_ramp1_callout:
        grade2_CaringForNewPet_0_1: After connecting all the blocks, press "Run" to start your program.
      courseD_maze_ramp2_callout:
        courseC_maze_programming2_1: This is the toolbox. It’s where you’ll find extra blocks to complete your puzzles.
      courseD_maze_ramp3_callout:
        courseC_maze_programming3_2: You can drag extra blocks to the toolbox to throw them away.
        courseC_maze_programming3_callout2: Use the step button to go step-by-step through the program. This will help you find the bug!
      courseD_maze_ramp4_callout:
        courseC_maze_programming4_1: This is your block limit.  It tells you how many of these blocks you have left to use.
      courseD_maze_ramp5_callout: [ ]
      courseD_maze_ramp6_callout:
        courseD_maze_ramp6_1: Whatever code you put in here will repeat as many times as you tell it to, then continue to run the rest of the program.
      courseD_maze_ramp7_callout: [ ]
      courseD_playLab_condFP_callout:
        courseD_playLab_condFP_1: we have organized the blocks into categories to give you more code to play with!  Click here to see where everything went.
      courseE_artist_functions1_callout:
        courseD_artist_functions1_1: Let's start by using this block to help create the first square.
      courseE_artist_functions2_callout:
        courseD_artist_functions2_1: When this green block runs, all of the code in the function will run. What should the artist do after drawing the first square?
      courseE_artist_functions8_callout:
        courseD_artist_functions8_1: Your blocks to create functions have been moved under this label in the toolbox.
      courseE_artist_functions_challenge_callout:
        courseE_artist_functions_challenge_callout1: Keep this program going by adding more code to the bottom.
        courseE_artist_functions_challenge_callout2: If you don't like this design, change it to anything you want!
      courseE_artist_functions_challenge1_callout:
        courseE_artist_functions_challenge1_callout1: Keep this program going by adding more code to the bottom.
        courseE_artist_functions_challenge1_callout2: If you don't like this design, change it to anything you want!
      courseE_artist_functions_challenge2_callout:
        courseE_artist_functions_challenge2_callout1: Keep this program going by adding more code to the bottom.
        courseE_artist_functions_challenge2_callout2: If you don't like this design, change it to anything you want!
      courseE_artist_functions_predict1_callout: [ ]
      courseE_artist_predict1_callout: [ ]
      courseE_artist_ramp10_callout: [ ]
      courseE_artist_ramp11_callout:
        courseD_artist_ramp11_1: You can change this number.
        courseD_artist_ramp11_2: Click here to type in the number of times to repeat your code.
      courseE_artist_ramp12_callout: [ ]
      courseE_artist_ramp8_callout:
        courseE_artist_ramp8_1: You can change this number.
        courseE_artist_ramp8_2: Click here to type in the number of times to repeat your code.
      courseE_artist_ramp9_callout: [ ]
      courseE_collector_ramp10_callout: [ ]
      courseE_collector_ramp8_callout:
        courseD_collector_ramp8_1: 'Use this block to collect a single piece of treasure.  '
      courseE_collector_ramp9_callout: [ ]
      courseE_farmer_functions10b_callout: [ ]
      courseE_farmer_functions11_predict_callout: [ ]
      courseE_farmer_functions1a_callout:
        courseE_farmer_functions1a_1: This veggie is unknown.  It changes each time you run the program.
      courseE_farmer_functions2a_callout:
        courseE_farmer_functions2a_2: This code might not look exactly like what you wrote, but it will get the job done!
      courseE_farmer_functions2aALT_callout:
        courseE_farmer_functions2a_2: This code might not look exactly like what you wrote, but it will get the job done!
      courseE_farmer_functions2b_callout:
        courseE_farmer_functions1a_1: This veggie is unknown.  It changes each time you run the program.
      courseE_farmer_functions3b_callout:
        courseE_farmer_functions1a_1: This veggie is unknown.  It changes each time you run the program.
      courseE_farmer_functions3c_callout: [ ]
      courseE_farmer_functions4b_callout: [ ]
      courseE_farmer_functions5b_callout: [ ]
      courseE_farmer_functions5c_callout: [ ]
      courseE_farmer_functions6b_callout: [ ]
      courseE_farmer_functions6c_callout: [ ]
      courseE_farmer_functions7b_callout: [ ]
      courseE_farmer_functions8b_callout: [ ]
      courseE_farmer_functions9b_callout: [ ]
      courseE_maze_predict1_callout: [ ]
      courseE_maze_ramp1_callout:
        grade2_CaringForNewPet_0_1: After connecting all the blocks, press "Run" to start your program.
      courseE_maze_ramp13_callout: [ ]
      courseE_maze_ramp2_callout:
        courseC_maze_programming2_1: This is the toolbox. It’s where you’ll find extra blocks to complete your puzzles.
      courseE_maze_ramp3_callout:
        courseC_maze_programming3_2: You can drag extra blocks to the toolbox to throw them away.
      courseE_maze_ramp4_callout:
        courseC_maze_programming4_1: This is your block limit.  It tells you how many of these blocks you have left to use.
      courseE_maze_ramp5_callout: [ ]
      courseE_maze_ramp6_callout:
        courseD_maze_ramp6_1: Whatever code you put in here will repeat as many times as you tell it to, then continue to run the rest of the program.
      courseE_maze_ramp7_callout:
        courseD_maze_ramp7_1: This is your first challenge puzzle! These are meant to be hard and may take several tries.
      courseE_maze_ramp_predict1_callout: [ ]
      courseE_multi_maze_ramp5_callout: [ ]
      courseE_playLab_scaffold3_callout:
        courseE_playLab_scaffold3_1: Get the actor to this flag to move on to the next level.
      courseF_artist_for1_callout:
        courseF_artist_for1_1: The toolbox is in "category" mode to make more room for your code.  The `for` loops live in here.
      courseF_artist_for4_callout: [ ]
      courseF_artist_fwp1_callout:
        courseF_artist_fwp1_1: Click the "edit" button to change the code inside the function.
      courseF_artist_fwp4_callout:
        courseF_artist_fwp4_1: To complete your polygon, make sure you are always turning by 360 ÷ `sides` degrees.
      courseF_artist_fwp5_callout:
        courseF_artist_fwp5_1: You will find the polygon function in here.
      courseF_artist_predict1_callout: [ ]
      courseF_artist_ramp10_callout: [ ]
      courseF_artist_ramp8_callout:
        courseE_artist_ramp8_1: You can change this number.
        courseE_artist_ramp8_2: Click here to type in the number of times to repeat your code.
      courseF_artist_ramp9_callout: [ ]
      courseF_artist_variables1_callout:
        courseF_artist_variables1_1: Notice that blocks now have a new way to enter numbers. These `math` blocks can be pulled out and moved around!
      courseF_artist_variables10_callout: [ ]
      courseF_artist_variables2_callout: [ ]
      courseF_artist_variables3_callout:
        courseF_artist_variables3_a: Use this to set the value of the variable `length`
      courseF_artist_variables3a_predict1_callout: [ ]
      courseF_artist_variables4_callout: [ ]
      courseF_artist_variables5_callout: [ ]
      courseF_artist_variables6_callout:
        courseF_artist_variables6_1: Variables can be helpful when you have to change a lot of copies of the same number.
      courseF_artist_variables6a_callout:
        courseF_artist_variables6a_1: Variables can be helpful when you have to change a lot of copies of the same number.
      courseF_artist_variables7_callout: [ ]
      courseF_artist_variables8_callout: [ ]
      courseF_artist_variables9_callout: [ ]
      courseF_artist_variablesFP_callout: [ ]
      courseF_artist_variables_10_callout: [ ]
      courseF_artist_variables_2_callout: [ ]
      courseF_artist_variables_3_callout:
        courseF_artist_variables_3_a: Use this to set the value of the variable `length`
      courseF_artist_variables_4_callout: [ ]
      courseF_artist_variables_5_callout: [ ]
      courseF_artist_variables_6_callout:
        courseF_artist_variables_6_1: Variables can be helpful when you have to change a lot of copies of the same number.
      courseF_artist_variables_6a_callout:
        courseF_artist_variables6a_1: Variables can be helpful when you have to change a lot of copies of the same number.
      courseF_artist_variables_7_callout: [ ]
      courseF_artist_variables_8_callout: [ ]
      courseF_artist_variables_9_callout: [ ]
      courseF_artist_variables_FP_callout: [ ]
      courseF_bee_conditionals2_callout:
        courseF_bee_conditionals2_2: The toolbox is now in category mode.  All of the blocks you need are beneath these labels!
      courseF_bee_conditionals5_callout:
        courseF_bee_conditionals5_1: Use this block when the length of the path changes (as in the sides of the rectangle!)
      courseF_bee_for3_callout:
        courseF_bee_for3_1: The `for` loop is so wide that we have changed the toolbox into category mode to save space.  You will find the new `for` loop in here!
      courseF_bee_for3_predict1_callout: [ ]
      courseF_bee_for4_callout: [ ]
      courseF_bee_for6_callout: [ ]
      courseF_bee_for9_callout:
        courseF_bee_for9_1: You will find the `math` block in here.
      courseF_bee_for_challenge1_callout: [ ]
      courseF_bee_functions2_callout:
        courseF_bee_functions2_1: This block calls a function.  Click this "edit" button to see what is inside!
      courseF_bee_functions6_callout:
        courseF_bee_functions6_1: Don't forget to look in here for more blocks that might help make this easier!
      courseF_bee_functions_challenge1_callout:
        courseF_bee_functions_challenge1_1: What code should you put in this function?
        courseF_bee_functions_challenge1_2: The "check nectar or honey" function can be used here if edit it to make honey multiple times.
      courseF_bee_functions_challenge2_callout: [ ]
      courseF_bee_fwp1_callout:
        courseF_bee_fwp1_1: You can find `if` statements in here.
      courseF_bee_fwp3_callout:
        courseF_bee_fwp3_1: This same function can be used when checking for empty spaces as well as clouds.
      courseF_bee_fwp4_callout:
        courseF_bee_fwp4_1: Press the "edit" button to add a parameter to this function.
      courseF_maze_predict1_callout: [ ]
      courseF_maze_ramp1_callout:
        grade2_CaringForNewPet_0_1: After connecting all the blocks, press "Run" to start your program.
      courseF_maze_ramp13_callout: [ ]
      courseF_maze_ramp15_callout:
        courseF_maze_ramp7_1: This is your first challenge puzzle! These are meant to be hard and may take several tries.
      courseF_maze_ramp2_callout:
        courseC_maze_programming2_1: This is the toolbox. It’s where you’ll find extra blocks to complete your puzzles.
      courseF_maze_ramp4_callout:
        courseC_maze_programming4_1: This is your block limit.  It tells you how many of these blocks you have left to use.
      courseF_maze_ramp5_callout: [ ]
      courseF_maze_ramp6_callout:
        courseD_maze_ramp6_1: Whatever code you put in here will repeat as many times as you tell it to, then continue to run the rest of the program.
      courseF_maze_ramp7_callout:
        courseF_maze_ramp7_1: This is your first challenge puzzle! These are meant to be hard and may take several tries.
      courseF_playLab_func2_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      courseF_playlab_variables1a_callout:
        courseF_playlab_variables1a_1: The toolbox has been organized into categories to make it easier to find the blocks you need.
      courseF_playlab_variables2_callout:
        course_playlab_variables2_1: This is how you set the value of your variable.  Change the text connected to this block to change what is being held in your variable.
      courseF_playlab_variables2a_callout: [ ]
      courseF_playlab_variables3_callout: [ ]
      courseF_playlab_variables4_callout: [ ]
      courseF_playlab_variables5_callout: [ ]
      courseF_playlab_variables5c RYAN Copy_callout:
        courseF_playlab_variables5c_1: You will find your variable block in here.
      courseF_playlab_variables5c_callout:
        courseF_playlab_variables5c_1: You will find your variable block in here.
      courseF_playlab_variables6c_callout:
        courseF_playlab_variables5c_1: You will find your variable block in here.
      courseF_playlab_variables7c_callout: [ ]
      courseF_playlab_variables8c_callout: [ ]
      courseF_playlab_variablesTemplate_callout:
        courseF_playlab_variables5c_1: You will find your variable block in here.
      course_playlab_variables2_callout:
        course_playlab_variables2_1: This is how you set the value of your variable.  Change the text connected to this block to change what is being held in your variable.
      course_playlab_variables3_callout:
        course_playlab_variables3_1: This is how you set the value of your variable.
      coursef_maze_ramp3_callout:
        courseC_maze_programming3_2: You can drag extra blocks to the toolbox to throw them away.
      drawings!_callout: [ ]
      frozen circle function with parameter_callout:
        frozen_circle_function_with_parameter_circle: Use the "create a circle" block and change the size.
      frozen cross rotate_callout:
        replace_questions_degree: Use the drop-down to replace "???" with a number
      frozen cross_callout:
        repeat_blocks_1: "(1) Use this block and put it around the grey blocks in the workspace"
        repeat_blocks_2: (2) Move the "Repeat" block here, and place the gray blocks inside
      frozen diamond snowflake_callout:
        frozen_diamond_repeat: Use the repeat block to create this shape.
      frozen diamond_callout:
        frozen_diamond_repeat: Use the repeat block to create this shape.
      frozen freeplay_callout:
        snowflake_dropdown: Use this drop-down to create different snowflakes!
      frozen line_callout:
        run: Hit "Run" to try your program!
        move_elsa_forward: Drag a "Move Forward" block and snap it below the "When Run" block to make Elsa move forward
      frozen perpendicular_callout:
        turn_elsa: Use the "Turn" block to make Elsa turn. The number in the drop-down determines how much Elsa turns
      frozen snowflake branch_callout:
        frozen_snowflake_branch: Use the "create a snowflake branch" block
      frozen square iterative_callout:
        frozen_create_square: Attach more blocks here to create a square
      frozen square loop 3x_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      frozen square loop_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      frozen square snowflake_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      grade1_artist_loops2_callout:
        grade1_artist_loops2_1: There is only one of these blocks in the toolbox.  How will you use it?
      grade1_maze_sequence6_callout:
        grade1_maze_sequence6_1: These grey blocks are made of stone!  That means that they can't be trashed.
      grade2_CaringForNewPet_0_callout:
        grade2_CaringForNewPet_0_1: After connecting all the blocks, press "Run" to start your program.
      grade2_CaringForNewPet_1_callout:
        grade2_CaringForNewPet_1_1: This is the toolbox. It’s where you’ll find extra blocks to complete your puzzles.
      grade2_CaringForNewPet_2_callout:
        grade2_CaringForNewPet_2_1: Throw this extra block away so it doesn't cause problems.
        grade2_CaringForNewPet_2_2: You can drag extra blocks to the toolbox to throw them away.
      grade2_CaringForNewPet_2courseC_maze_programming3_callout:
        courseC_maze_programming3_2: You can drag extra blocks to the toolbox to throw them away.
      grade2_CaringForNewPet_3_callout:
        grade2_CaringForNewPet_3_1: This is your block limit.  It tells you how many of these blocks you have left to use.
      grade2_CaringForNewPet_3D_callout: [ ]
      grade2_CaringForNewPet_7D_callout:
        grade2_CaringForNewPet_7D: This is your first challenge puzzle! These are meant to be harder and may take several tries.
      grade2_MakeDogTag_1_callout: [ ]
      grade2_MakeDogTag_BFP_callout: [ ]
      grade2_collector_10_callout: [ ]
      grade2_collector_7_callout:
        grade2_collector_7_1: You can take more blocks from the toolbox if you need them!
      grade2_collector_8_callout: [ ]
      grade2_collector_9_callout: [ ]
      grade2_collector_9a_callout: [ ]
      grade2_collector_A_callout: [ ]
      grade2_collector_A_predict1_callout: [ ]
      grade2_maze_intro10_callout: [ ]
      grade2_maze_intro2_callout:
        grade2_maze_intro2_callout1: This is the run button. Press this button to run your program.
      grade2_maze_intro3_callout:
        grade2_maze_intro3_callout1: This is the workspace where you will create all of your programs. Can you guess what this program does?  Press the “Run” button to find out.
      grade2_maze_intro4_callout:
        grade2_maze_intro4_callout1: This is the toolbox area, to add a block to your program, drag it from here into the workspace.
      grade2_maze_intro5_callout:
        grade2_maze_intro5_callout1: This area also works as a garbage can. If there is a block in your workspace that you don’t need, simply drag it back here to toss it away.
      grade2_maze_intro6_callout: [ ]
      grade2_maze_intro7_callout: [ ]
      grade2_maze_intro8_callout: [ ]
      grade2_maze_intro9_callout: [ ]
      grade2_puppy_loops2_callout:
        grade2_puppy_loops2_callout1: You only have one of these blocks available in this puzzle.
      grade3_ConditionalsElse_2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      grade3_Conditionals_3_callout:
        Bee_Cond_5_1a: Purple flowers can have either 1 or 0 nectar...but you won't know until you run the code!
      grade3_bee_conditionals_quantum2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      grade3_playLab_buildGame_1_callout:
        Playlab_cond_1_1: Think of this block as the computer's way of rolling a die, and you get to decide how many sides the die has.
      grade3_playLab_buildGame_2_callout:
        Playlab_cond_2_1: 'This block is your way to tell the computer to remember your value: when you use the block labeled `j`, the program will give you the number you generate here at the top. '
      grade4_artist_freeplay_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      grade4_artist_functions1_callout:
        grade4_artist_functions1_1: Let's start by using this block to help create the first square.
      grade4_artist_functions2_callout:
        grade4_artist_funcions2_1: When this green block runs, all of the code in the function will run. What should the artist do after drawing the first square?
      grade4_artist_functions_freeplay_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      grade4_artist_functions_stars3_callout:
        grade4_artist_functions_stars3_1: Drag this block into your program. Every time you use this block, all of the commands in the function will be executed!
      grade4_artist_parameters_squares1_callout:
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
      grade4_bee_conditionals_quantum2_callout:
        4_5_Bee_Conditionals_2_1: Remember, check to see if EVERY cloud has a FLOWER. You don't have to check for honeycombs at all.
      grade4_frozen_freeplay_callout:
        snowflake_dropdown: Use this drop-down to create different snowflakes!
      grade4_frozen_functions3_callout:
        frozen_circle_function_with_parameter_circle: Use the "create a circle" block and change the size.
      grade4_frozen_nested_loop_diamonds1_callout:
        frozen_diamond_repeat: Use the repeat block to create this shape.
      grade4_frozen_nested_loop_diamonds3_callout:
        frozen_diamond_repeat: Use the repeat block to create this shape.
      grade4_frozen_nested_loop_rectangle1_callout:
        frozen_diamond_repeat: Use the repeat block to create this shape.
      grade4_frozen_square_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      grade4_frozen_square_loop1_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      grade4_frozen_square_loop2_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      grade4_frozen_square_loop3_callout:
        replace_questions: Use the drop-down to replace "???" with a number
      grade4_playLab_proj_example1_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
      grade4_playLab_proj_example2_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      grade4_playlab_test_callout: [ ]
      grade4_review_artist1_callout: [ ]
      grade5_artist_for_loops1b_callout:
        grade5_artist_for_loops1b_1: The toolbox has been changed into "category" mode to make more room for your code.  Now, `for` loops live in here.
      grade5_artist_for_loops4_callout: [ ]
      grade5_artist_freeplay_callout:
        4-5_Artist_Patterns_Free_Play_1: All of your favorite blocks are now organized into categories.  Click on these words to see where everything went!
      grade5_artist_functionparameters8_callout:
        grade5_artist_functionparameters8_1: You will find the polygon function in here.
      grade5_artist_functionparameters_6_callout:
        grade5_artist_functionparameters_6_1: To complete your polygon, make sure you are always turning by 360 ÷ `sides` degrees.
      grade5_artist_parameters_squares1_callout:
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
      grade5_artist_parameters_squares1a_callout:
        grade5_artist_parameters_triangles1_1: Click the "edit" button to change the code inside the function.
      grade5_artist_parameters_stars1_callout:
        grade4_artist_functions_stars3_1: Drag this block into your program. Every time you use this block, all of the commands in the function will be executed!
      grade5_artist_parameters_triangles1_callout:
        grade5_artist_parameters_triangles1_1: Click the "edit" button to change the code inside the function.
      grade5_artist_parameters_triangles1aa_callout:
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add, and then drag it into your function definition
      grade5_artist_variables_freeplay10_callout:
        Course_4_Artist_Vars_8_a: Need more space?  Pull this bar over to make the coding area wider.
      grade5_artist_variables_octagons13_callout: [ ]
      grade5_artist_variables_pentagons1_callout:
        place_length_variable: Drag the length variable here to replace the question marks
      grade5_artist_variables_pentagons12_callout:
        set_length: Use this block to set "length" to the correct value.
      grade5_artist_variables_square7_callout:
        degrees_per_side: Divide 360 by the number of sides to get the size of each angle in degrees.
      grade5_artist_variables_triangles1_callout:
        grade5_artist_variables_triangles1_1: Notice that blocks now have a new way to enter numbers. These `math` blocks can be pulled out and moved around!
      grade5_artist_variables_triangles2_callout:
        set_length: Use this block to set "length" to the correct value.
      grade5_bee_for_loops3_callout:
        grade5_bee_for_loops3_1: The `for` loop is so large, that the toolbox has to change into category mode.  You will find the new `for` loop in here!
      grade5_bee_for_loops4_callout: [ ]
      grade5_bee_for_loops6_callout: [ ]
      grade5_bee_parameters_new1_callout:
        grade5_bee_parameters_new1_a: You can find `if` statements in here.
      grade5_bee_parameters_new3_callout:
        grade5_bee_parameters_new3_1: This same function can be used when checking for empty spaces as well as clouds.
      grade5_bee_parameters_new4_callout:
        grade5_bee_parameters_new4_1: Press the "edit" button to add a parameter to this function.
      grade5_playlab_variables1_callout:
        arrows_move_actor: Use the arrows to move the actor
      grade5_playlab_variables10_callout: [ ]
      grade5_playlab_variables11_callout:
        edit_add_parameter: Click edit to add a parameter in your function
      grade5_playlab_variables1ask_callout:
        arrows_move_actor: Use the arrows to move the actor
      grade5_playlab_variables6_callout: [ ]
      grade5_playlab_variables6ask_callout: [ ]
      grade5_playlab_variables_freeplay_callout:
        Course_4_Play_Lab_Vars_9_1: All of your blocks are now organized behind categories! Click on a label to see the pieces inside.
      grade5_playlab_variables_jump1_callout:
        Course_4_Play_Lab_Vars_9_1: All of your blocks are now organized behind categories! Click on a label to see the pieces inside.
      gradek_adventurer_loops2_callout:
        gradek_adventurer_loops2_1: This number tells you how many of these blocks you can use in this puzzle.
      gradek_artist_loops3_callout:
        artistLoopsK2_1: This number tells you how many of these blocks you can use in this puzzle.
      gradek_artist_loops7_callout:
        gradek_artist_loops7_1: Did you know that you can draw back over a line whenever you need to?
      gradek_playlab_events1c_callout: [ ]
      gradek_playlab_events2c_callout: [ ]
      gradek_playlab_events3c_callout: [ ]
      gradek_playlab_events4c_callout: [ ]
      gradek_playlab_events5c_callout:
        gradek_playlab_events5c_1: This let's you choose a "random" sound, which means that you don't know what you are going to get until you hear it!
      kikiTesta_callout:
        sample1_1: This will be an adventurer collecting coins, not a farmer digging.
      playLabDebugVideo1_callout: [ ]
      sample1_callout:
        sample1_1: This will be an adventurer collecting coins, not a farmer digging.
      sample10a_callout: [ ]
      sample2_callout:
        sample2_1: Notice that there is only one 'move forward' block available in this toolbox.
      sample3_callout:
        sample3_1: This is also only one available
      sample4_callout:
        sample4_1: This will be an adventurer collecting coins, not a farmer digging.
      sample5_callout:
        sample5_1: There will be two of these for this puzzle
      sample6_callout:
        sample6_1: One less of these than needed to do the puzzle with just one set of loops.
      sample8_callout:
        sample8_1: We won't force nested loops, but hope that they take this opportunity to discover them on their own.  If they don't, it won't affect the rest of the stage.
      sample9_callout:
        sample9_1: This should be something other than artist, but it's here to connect the previous levels to freeplay
      sample9a_callout:
        sample9a_1: This would be a puzzle to connect stage to freeplay, but playlab does not have "turn" or "move forward". Also, the goals are not flexible (size or sprites).
      small_actors_playlab_projects_callout:
        New Play Lab Project_callout1: Click the categories to see the blocks in your toolbox! Drag blocks to the workspace add them to your program
        New Play Lab Project_callout2: Hit "Run" to save and run your program
        sign_in_to_save_project: Want to access your project later? Sign in to save this project to your account!
      testing code callout_callout:
        testing_code_callout: This makes the sprite move!
