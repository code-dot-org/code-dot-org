pl:
  data:
    instructions:
      2-3 Artist 1 new_instruction: 'Witam, jestem artystą. Jeżeli napiszesz mi kod - mogę narysować prawie wszystko. Użyj kilku bloków, abym rysował wzdłuż szarych linii. (Każda linia ma długość 100 pikseli)'
      2-3 Artist 11_instruction: 'Utwórz znak stopu na granicy tworząc ośmiokąt o 8 bokach, każdy długości 100 pikseli. O ile stopni musisz się obrócić? (Podpowiedź: ile wynosi 360 podzielone przez 8?) '
      2-3 Artist 12_instruction: 'Ustaw blok "powtórz razy" tak, aby rysował on "okrąg" na zakończenie tworzenia gałki ocznej. Jeśli każdy ruch polega na obrocie w prawo o jeden stopień, to ile razy należy powtórzyć ten ruch, aby utworzyć okrąg? 180? 360? 500?'
      2-3 Artist 2 new_instruction: 'Ten dom ma ścianę wybudowaną w połowie. Każdy bok ma długość 100, ale ściana w połowie ukończona ma 50. Ukończ tę ścianę. '
      2-3 Artist 2_instruction: |
        This house has a half-finished wall. Each side is
        100, but the half-finished wall is only 50. Complete the wall. 
      2-3 Artist 3.4_instruction: 'Blok "skocz" przesuwa artystę bez rysowania. Narysuj linię przerywaną za pomocą obu bloków, skoku i rysowania.'
      2-3 Artist 3_instruction: Ten kapelusz jest wysoki na 100 pikseli. Narysuj kapelusz, który jest o 70 pikseli niższy.
      2-3 Artist 3new_instruction: Czerwony kapelusz ma 100 pikseli wysokości. Dokończ rysowanie czarnego kapelusza, który jest o 70 pikseli niższy. Szerokość czarnego kapelusza wynosi 50 pikseli.
      2-3 Artist 4_instruction: Pomóż mi dokończyć domek dla tego kota.
      2-3 Artist 5_instruction: 'Zastąp ten kod blokiem "powtórz razy", aby narysować taki sam dom przy użyciu tylko 3 bloków.'
      2-3 Artist 6_instruction: 'Ten dom potrzebuje dachu ! Narysuj trójkąt. Wskazówka: Wszystkie trzy boki mają taką samą długość.'
      2-3 Artist 7_instruction: 'Dokończ rysowanie prawej połowy ostatniego okna. Każdy kwadrat okna jest szeroki na 25 pikseli. '
      2-3 Artist 8_instruction: Utwórz pokoje dla każdego ze zwierząt, dzieląc prostokąt na 2 równej wielkości kwadraty. Prostokąt jest 200 pikseli szeroki i 100 pikseli wysoki.
      2-3 Artist 9_instruction: Dokończ ten latawiec
      2-3 Artist Assessment 1_instruction: 'Sprawdzian: Zakończ rysowanie ostatniego zęba, szerokiego na 25 pikseli i wysokiego na 25 pikseli.'
      2-3 Artist Debugging 1_instruction: Czy możesz wykonać ten kapelusz z górną częścią długości 100?
      2-3 Artist Debugging 10_instruction: 'Podkładka kierunkowa mojego kontrolera gier jest zbyt wąska. Wskazówka: Poszerz ją o 10 pikseli'
      2-3 Artist Debugging 11_instruction: 'Pomóż mi ukończyć mój piękny płatek śniegu. Ile razy muszę wykonać "powtórz", aby go skończyć?'
      2-3 Artist Debugging 12_instruction: 'Powinienem dodać falę oceanu do tej sceny.  Czy możesz mi pomóc?'
      2-3 Artist Debugging 2_instruction: 'Kod dla trzech wąsów, które widzisz, jest zły. Wskazówka: każdy wąs ma długość 75 pikseli. Napraw ten kod, by rysował te wąsy.'
      2-3 Artist Debugging 3_instruction: 'Moja łódź ma dziurę! Możesz ją naprawić zmieniając kąt nachylenia linii? Wskazówka: Ostatni kąt jest zły o 15 stopni.'
      2-3 Artist Debugging 4_instruction: Co jest na obrazku, który staramy się narysować? Ukończ rysunek, łącząc punkty za pomoc właściwych linii i kątów.
      2-3 Artist Debugging 5_instruction: 'Kod nogi i stopy, które widzisz, jest zły. Wskazówka: Stopa jest za długa, może to wymagać usunięcia bloku'
      2-3 Artist Debugging 6_instruction: Wygląda na to, że siedzę na krześle, któremu brakuje nogi. Przystosuj bloki, aby narysować nogę.
      2-3 Artist Debugging 7_instruction: Wygląda na to, że C w kodzie jest rysowane odwrotnie. Czy mógłbyś je poprawić, by wyglądało jak C?
      2-3 Artist Debugging 8_instruction: 'Mój wiatraczek nie jest ukończony. Ile razy trzeba wykonać "powtórz", aby go skończyć?'
      2-3 Artist Debugging 9_instruction: 'Kod tej łodygi nie jest prawidłowy. Wskazówka: Kąt jest o 60 stopni za mały'
      2-3 Artist Debugging Assessment 1_instruction: 'Ten kształt jest za mały. Czy mógłbyś go powiększyć? Wskazówka: każdy bok powinien być o 75 pikseli dłuższy.'
      2-3 Artist Free Play_instruction: Czas na zabawę! Narysuj cokolwiek chcesz.
      2-3 Artist Functions 1_instruction: 'Cześć. Mnie jest zombie artysta. Mnie podoba się rysowanie! Pomóż mi narysować kwadratowe okulary.  Wskazówka: połączenie między szkłami okularów jest o 25 pikseli krótsze niż wielkość kwadratu.'
      2-3 Artist Functions 10_instruction: 'Oto dwie funkcje, jedna do rysowania dużego trybu ("big gear"), a druga do rysowania małego trybu ("small gear"). Użyj ich, by narysować wnętrze maszyny!'
      2-3 Artist Functions 11.5_instruction: 'Tutaj jest ta sama funkcja "draw a hexagon" (rysuj sześciokąt). Co się stanie, jeśli obrócisz się tylko o 60 stopni w każdym obrocie pętli?'
      2-3 Artist Functions 11_instruction: 'Zmieniliśmy nazwę funkcji "draw a square" (rysuj kwadrat) na "draw a hexagon" (rysuj sześciokąt), ale ona nadal rysuje tylko kwadraty! Czy mógłbyś zmodyfikować funkcję "draw a hexagon", by rysowała sześciokąt o boku 50 pikseli, i wykonaj rysunek używając tej funkcji?'
      2-3 Artist Functions 12_instruction: 'Funkcje są naprawdę świetne do rysowania złożonych rzeczy wiele razy. Czy mógłbyś użyć funkcji "draw a flower" (rysuj kwiat), aby wypełnić resztę pola plantatora? (Wskazówka: Wszystkie rośliny są oddalone od siebie o 100 pikseli)  '
      2-3 Artist Functions 13_instruction: 'Daliśmy ci cztery funkcje. Skorzystaj z nich, jak chcesz, wewnątrz jednej lub więcej pętli, by wykonać obrazek, którym mógłbyś podzielić się ze swoimi znajomymi. Naciśnij przycisk "Uruchom", aby zobaczyć przykład.'
      2-3 Artist Functions 2_instruction: 'Funkcje umożliwiają definiowanie nowych bloków! Przenieśliśmy bloki służące do rysowania kwadratu do funkcji o nazwie "draw a square" (rysuj kwadrat). Czy mógłbyś posłużyć się tą funkcją, aby narysować okulary? Kwadraty są oddalone od siebie o 75 pikseli.'
      2-3 Artist Functions 3_instruction: Zmodyfikuj funkcję, aby narysować kwadrat o boku długości 115 i narysuj większe okulary. Kwadraty są teraz oddalone od siebie o 45 pikseli.
      2-3 Artist Functions 4_instruction: 'Użyj bloku "powtórz", aby narysować te 3 kwadraty.'
      2-3 Artist Functions 7_instruction: 'Użyj funkcji "draw a house" (rysuj dom), aby narysować dwa domy używając dwóch różnych parametrów. (Wskazówka: pierwszy dom ma 100 pikseli).'
      2-3 Artist Functions 9_instruction: 'Tutaj jest funkcja "draw a snowflake" (rysuj płatek śniegu). Poeksperymentuj z nią, by utworzyć zimową scenę! To jest zabawa, nie ma więc łamigłówki do rozwiązania. Baw się dobrze!'
      2-3 Artist Loops 1_instruction: Czy mógłbyś utworzyć sześciokąt o bokach długości 100 pikseli, aby ukończyć rysowanie komórki? Pamiętaj, że oznacza to, iż będzie trzeba obracać się o 60 stopni!
      2-3 Artist Loops 10_instruction: Jaki będzie efekt, jeśli nasz ostatni krok do przodu będzie o połowę krótszy?
      2-3 Artist Loops 11_instruction: Teraz umieśćmy cały nasz wytwór w pętli! Nie zapomnij dodać kąta na końcu zewnętrznej pętli.
      2-3 Artist Loops 2_instruction: 'Teraz użyj bloku "powtórz", aby z komórki utworzyć powłokę.'
      2-3 Artist Loops 4_instruction: Czy chcesz zobaczyć, co się stanie, kiedy będziemy powtarzać ten kształt wiele razy za pomocą pętli?
      2-3 Artist Loops 5_instruction: Zmieńmy nieco pętlę i zobaczmy, jak zmieni się obrazek.
      2-3 Artist Loops 6_instruction: Dodaj jeszcze jeden ruch i obrót wewnątrz pętli i zobacz, jak zmieni się twój obrazek.
      2-3 Artist Loops 7_instruction: 'Posługując się pętlami możemy tworzyć różnego rodzaju wielokąty.  Czy mógłbyś utworzyć romb wewnątrz tego sześciokąta?'
      2-3 Artist Loops 8_instruction: Umieśćmy oba elementy wewnątrz pętli.
      2-3 Artist Loops 9_instruction: "Mamy zamiar powtórzyć te same elementy w pętli, ale teraz chcemy dodać pewne odległości między nimi.\\r Użyj tego samego kodu jak poprzednio, ale dodaj krok do przodu na końcu zewnętrznej pętli."
      2-3 Artist Loops New 1_instruction: Narysujmy głowę tego robota! Czy mógłbyś utworzyć kwadrat o boku 100 pikseli?
      2-3 Artist Loops New 10_instruction: Teraz połączmy kilka V rysując je w pętli.
      2-3 Artist Loops New 11_instruction: 'Tym razem narysujmy to 24 razy. Dodaj do tego kodu skręt (obrót) w lewo o 30 stopni i wszystko umieść w bloku "powtórz".'
      2-3 Artist Loops New 12_instruction: |
        Narysuj diament o bokach 100 pikseli.
        
      2-3 Artist Loops New 13_instruction: Teraz narysuj diament 3 razy w pętli.
      2-3 Artist Loops New 14_instruction: Teraz narysujmy diament 10 razy, ale wykonując obrót o 90 stopni między każdym diamentem.
      2-3 Artist Loops New 15_instruction: Narysuj coś fajnego.
      2-3 Artist Loops New 2_instruction: 'Oto jeden z kodów, który używałeś do rysowania tego kwadratu. Co się stanie, jeśli użyjesz bloku "powtórz", aby uruchomić ten kod 4 razy?'
      2-3 Artist Loops New 9_instruction: Narysuj prosty V, gdzie oba boki mają długość 50 pikseli, aby wykonać strzałkę.
      2-3 Artist Match Hex Pic_instruction: 'Dopasuj: Pomóż ukończyć sześciokąt.'
      2-3 Artist Match Rho Pic_instruction: 'Dopasuj: Ukończ brakujący kod.'
      2-3 Artist Match Sq Pic_instruction: 'Dopasuj: Ukończ brakujący kod'
      2-3 Artist Match Tri pic_instruction: 'Dopasuj: Wypełnij brakujący kod.'
      2-3 Artist Nested Loops 1_instruction: "Używałeś wcześniej pętli do rysowania kształtów, ale czy wiesz, że możesz umieścić pętlę wewnątrz innej pętli? \\r Powtórz w pętli cały ten blok kodu 3 razy, aby narysować ten wzór."
      2-3 Artist Nested Loops 10_instruction: Powtórz w pętli ten kod 12 razy, aby ukończyć ten rysunek.
      2-3 Artist Nested Loops 11_instruction: Powtórz w pętli ten kod 4 razy, aby ukończyć ten obrazek, obróć się o 90 stopni po każdym obiegu.
      2-3 Artist Nested Loops 12_instruction: Powtórz w pętli ten kod 12 razy, aby otrzymać te loki.
      2-3 Artist Nested Loops 2_instruction: Teraz powtórz w pętli trójkąt 6 razy. Po każdym trójkącie, musisz wykonać obrót o 60 stopni przed narysowaniem kolejnego trójkąta.
      2-3 Artist Nested Loops 3_instruction: Musisz powtórzyć w pętli trójkąt 12 razy, aby narysować ten wzór. Liczbę stopni w okręgu (360) należy podzielić przez liczbę kształtów do narysowania (12), aby określić, ile wynosi obrót po każdym kształcie.
      2-3 Artist Nested Loops 4_instruction: 'Powtórz w pętli ten diament 12 razy, aby narysować kwiat. Wskazówka: 12 diamentów jest jak 12 trójkątów, które wykonałeś - ile powinien wynosić obrót po każdym diamencie?'
      2-3 Artist Nested Loops 5_instruction: Wypełnij okna w tym budynku zagnieżdżającą się pętlą. Okna mają długość 20 pikseli i znajdują się 20 pikseli od siebie.
      2-3 Artist Nested Loops 6_instruction: Ten dinozaur ma 8 kolców wystających z jego ogona; każdy kolec ma długość 30 pikseli. Powtórz w pętli trójkąt 8 razy, ale bądź pewien, że przesuwasz się do przodu po każdym z nich.
      2-3 Artist Nested Loops 7_instruction: Powtórz w pętli ten trójkąt 10 razy, aby narysować słońce. Po każdym trójkącie będziesz musiał wykonać ruch i obrót. Aby określić, ile ma wynieść obrót, podziel liczbę stopni w okręgu przez liczbę kształtów, które go tworzą.
      2-3 Artist Nested Loops 8_instruction: Teraz dodajmy trochę trawy do naszego obrazka. Kępy trawy są oddalone od siebie o 50 pikseli.
      2-3 Artist Nested Loops 9_instruction: Ukończymy ten obrazek dodając kwiat. Powtórz diament 12 razy w pętli, aby narysować swój kwiat.
      2-3 Artist Nested Loops Free Play_instruction: Masz wolną rękę, narysuj coś fajnego używając zagnieżdżonych pętli.
      2-3 Bee Conditionals 1_instruction: Cześć, jestem pszczółka! Pomóż mi zebrać nektar z kwiatka.
      2-3 Bee Conditionals 10_instruction: "Fioletowe kwiaty mogą mieć 1 lub 0 nektaru. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. \\r\n"
      2-3 Bee Conditionals 11_instruction: Zbieraj nektar z kwiatów, które go mają.
      2-3 Bee Conditionals 12_instruction: Użyj pętli, aby sprawdzać i zbierać nektar z wszystkich tych kwiatów.
      2-3 Bee Conditionals 13_instruction: 'Zbierz nektar i zrób miód. Wskazówka: co się stanie, jeśli użyjesz warunku "jeśli nektar" na czerwonym kwiatku? Czy możesz to wykonać z pomocą pętli?'
      2-3 Bee Conditionals 14_instruction: Zbierz nektar i zrób miód. Uważaj, aby nie zbierać nektaru z fioletowego kwiatka, który go nie ma.
      2-3 Bee Conditionals 15_instruction: Zbierz nektar z wszystkich czterech kwiatów.
      2-3 Bee Conditionals 2_instruction: Cześć, jestem pszczółka! Pomóż mi zebrać cały nektar z kwiatów. Użyj pętli.
      2-3 Bee Conditionals 3_instruction: Pomóż mi zebrać cały nektar z kwiatów i zrobić miód. Użyj pętli.
      2-3 Bee Conditionals 4_instruction: Pomóż mi zebrać cały nektar z kwiatów i zrobić miód.
      2-3 Bee Conditionals 5_instruction: 'Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, ale nie wiesz który. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. Sprawdzaj, czy nektar jest równy 1 przy użyciu bloku "jeśli".'
      2-3 Bee Conditionals 6_instruction: 'Sprawdź ten kwiat za pomoc bloku "jeśli", czy zawiera nektar.'
      2-3 Bee Conditionals 7_instruction: Zbierz nektar z każdego kwiatka, który go zawiera.
      2-3 Bee Conditionals 8_instruction: To pole zawiera czerwone i fioletowe kwiaty. Czerwone kwiaty zawierają znaną ilość nektaru, ale ilość nektaru na fioletowym kwiatku jest nieznana. Zbierz cały nektar.
      2-3 Bee Conditionals 9_instruction: Zbierz cały nektar z każdego kwiatka.
      2-3 Bee Conditionals Assessment 1_instruction: 'Sprawdzian: Zbierz cały nektar. Uważaj, aby nie zbierać nektaru z fioletowego kwiatka, który go nie ma.'
      2-3 Bee Debugging 1_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 10_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 2_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 3_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 4_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 5_instruction: 'Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód. Możesz teraz użyć "Uruchom" i "Krok".'
      2-3 Bee Debugging 6_instruction: Te bloki naprawdę zaczynają mnie już męczyć. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 7_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 8_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging 9_instruction: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.
      2-3 Bee Debugging Assessment 1_instruction: 'Sprawdzian: Te bloki naprawdę bugging mnie. Napraw błędy, aby zebrać cały nektar i zrobić miód.'
      2-3 Bee Functions 1_instruction: 'Funkcje są blokami kodu, które wykonują określone zadanie. Użyj funkcji "get 2 nectar" (pobierz 2 nektary), aby zebrać nektar z każdy kwiatka.'
      2-3 Bee Functions 10_instruction: 'Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, Utwórz funkcję "collect purple nectar" (zbierz fioletowy nektar), która zbiera nektar tylko z tych fioletowych kwiatów, które mają nektar.'
      2-3 Bee Functions 2_instruction: 'Funkcje są blokami kodu, które wykonują określone zadanie. Użyj funkcji "get 5" (pobierz 5), aby pobrać 5 nektarów. Użyj pętli, aby otrzymać użyć małej liczby bloków.'
      2-3 Bee Functions 3_instruction: Zbierz cały nektar z każdego kwiatka.
      2-3 Bee Functions 4_instruction: 'Funkcja "move and get nectar" (przejdź i pobierz nektar) uruchamia pszczołę, zbiera nektar, a następnie prowadzi pszczołę do miejsca, gdzie zaczęła. Użyj tej funkcji, aby zebrać cały nektar.'
      2-3 Bee Functions 5_instruction: 'Teraz jest więcej nektaru na kwiatkach. Zmodyfikuj daną funkcję "move and get 4" tak, że zbiera ona 4 nektary i użyj jej, aby zebrać cały nektar z kwiatów.'
      2-3 Bee Functions 6_instruction: Teraz użyj tej samej funkcji, aby zebrać nektar z trzech kwiatów.
      2-3 Bee Functions 7_instruction: Kwiaty znajdują się dalej. Zmodyfikuj daną funkcję i użyj jej, aby zebrać cały nektar z kwiatów.
      2-3 Bee Functions 8_instruction: 'Utwórz własną funkcję "get 7 nectar make 7 honey", która pobiera 7 nektarów, porusza się do przodu i tworzy 7 miodów. Użyj tej funkcji, aby zebrać nektar z każdego kwiatka i zrobić miód na każdym plastrze miodu.'
      2-3 Bee Functions 9_instruction: 'Utwórz własną funkcję "get 7 make 7" (zbierz 7 zrób 7), dzięki której pszczółka idzie wzdłuż ścieżki, zbiera nektar, robi miód i wraca na ścieżkę.'
      2-3 Bee Functions Assessment 1_instruction: 'Sprawdzian: Użyj danej funkcji "get 7", aby zebrać nektar z każdego kwiatka.'
      2-3 Bee Functions Assessment 2_instruction: 'Sprawdzian: Utwórz funkcję "make 3", która robi 3 miody.'
      2-3 Bee Loops 1_instruction: 'Każdy kwiat zawiera jedną jednostkę nektaru. Zbierz nektar z każdego z kwiatów. '
      2-3 Bee Loops 10_instruction: 'Czy potrafisz użyć pętli "dopóki" wewnątrz dwóch innych pętli, by zebrać cały nektar?'
      2-3 Bee Loops 11_instruction: 'Użyj pętli "dopóki", aby zebrać cały nektar z kwiatów na tej łące.'
      2-3 Bee Loops 12_instruction: 'Użyj pętli "dopóki", aby zebrać cały nektar z kwiatów na tej łące.'
      2-3 Bee Loops 13_instruction: 'Sprawdzian: Użyj bloku "powtarzaj", aby zebrać cały nektar.'
      2-3 Bee Loops 1A_instruction: 'Witam, jestem Pszczółka. Czy mógłbyś mi pomóc zebrać nektar z tych kwiatów? '
      2-3 Bee Loops 2_instruction: Użyj pętli, by zebrać nektar i zrobić miód.
      2-3 Bee Loops 2A_instruction: Czy potrafisz zrobić to samo prościej z użyciem pętli?
      2-3 Bee Loops 3_instruction: Zbierz nektar z każdego kwiatka i zrób miód na każdym plastrze miodu.
      2-3 Bee Loops 3A_instruction: Czy potrafisz użyć pętli, by zebrać cały nektar?
      2-3 Bee Loops 3B_instruction: 'Teraz użyj nowego bloku "powtórzj", aby zebrać cały nektar i zrobić cały miód.'
      2-3 Bee Loops 4_instruction: Użyj podobnej pętli, jak w poprzedniej łamigłówce, ale wprowadź do niej obrót.
      2-3 Bee Loops 4A_instruction: Co się stanie, jeśli powtórzysz w pętli tę sekwencję 3 razy? Nie zapomnij zrobić na końcu miodu!
      2-3 Bee Loops 5_instruction: Użyj pętli, by zejść stopniami na dół i zebrać cały nektar.
      2-3 Bee Loops 6_instruction: Użyj pętli, by zebrać nektar z każdego kwiatka i zrobić miód na każdy plastrze miodu.
      2-3 Bee Loops 7_instruction: Umieść te bloki w pętli, by zebrać nektar z każdego kwiatka.
      2-3 Bee Loops 8_instruction: 'Te fioletowe kwiaty zawierają nieznaną ilość nektaru. Użyj pętli "dopóki nektar", aby zebrać cały nektar. Ta pętla działa tak długo, jak długo warunek jest prawdziwy, w tym przypadku nektar > 0.'
      2-3 Bee Loops 9_instruction: 'Pętla "dopóki" może wykonywać te same działania, jak blok "jeśli" w pętli. Dodaj pętlę "dopóki" do tego kodu, aby wykonać to samo zadanie.'
      2-3 Bee Loops Assessment 1_instruction: 'Sprawdzian: Użyj pętli "dopóki", aby zebrać cały nektar z tego kwiatu.'
      2-3 Maze 1_instruction: 'Czy pomożesz mi złapać tę niegrzeczną świnkę? Ustaw razem kilka bloków "idź do przodu" i naciśnij przycisk "Uruchom". '
      2-3 Maze 10_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 11_instruction: Doprowadź mnie do kwiatu, jestem głodny! Ile razy musisz powtórzyć blok?
      2-3 Maze 12 (copy 1)_instruction: 'Czy możesz zastąpić poprzednią odpowiedź przez tylko dwa bloki? (Wskazówka: utwórz pętlę z użyciem bloku "powtórz razy")'
      2-3 Maze 12 (copy 2)_instruction: 'Czy możesz zastąpić poprzednią odpowiedź przez tylko dwa bloki? (Wskazówka: utwórz pętlę z użyciem bloku "powtórz razy")'
      2-3 Maze 12 (old)_instruction: 'Doprowadź mnie do świnki, teraz z użyciem bloku "powtórz razy"!'
      2-3 Maze 12_instruction: 'Czy możesz zastąpić te pięć bloków tylko dwoma blokami? (Wskazówka: Utwórz pętlę z użyciem bloku "powtórz", by przejść ten poziom.)'
      2-3 Maze 13 (old)_instruction: 'Doprowadź mnie do świnki, teraz z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 13_instruction: "Doprowadź mnie do świnki z użyciem tylko dwóch bloków.\\r (Wskazówka: Musisz użyć bloku \"powtórz\", by przejść ten poziom.)"
      2-3 Maze 14 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 14_instruction: 'Doprowadź mnie do słonecznika! (Gdzie jest ten blok "powtórz razy", kiedy go potrzebuję?)'
      2-3 Maze 15 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 15_instruction: 'Użyj dwóch pętli "powtórz", aby dotrzeć do świnki za pomocą mniejszej liczby bloków.'
      2-3 Maze 16 (old)_instruction: 'Doprowadź mnie do świnki z użyciem bloku "powtarzaj aż"!'
      2-3 Maze 16 before_instruction: Doprowadź mnie do świnki.
      2-3 Maze 16_instruction: Doprowadź mnie do słonecznika. Ustaw ciąg bloków w pętli!
      2-3 Maze 2_instruction: Ta świnka jeży moje piórka. Pomóż mi, by ją dopaść!
      2-3 Maze 3_instruction: Wyznacz trasę i prowadź mnie do tej głupiej świnki. Unikaj TNT lub inaczej będą latać pióra!
      2-3 Maze 4_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 5_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 6_instruction: Zachowaj spokój i pomóż mi znaleźć tę złą świnkę. W przeciwnym razie mogę się rozgniewać!
      2-3 Maze 7_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze 8_instruction: Doprowadź mnie do świnki!
      2-3 Maze 9_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze Loops 1_instruction: Czy potrafisz doprowadzić mnie do świnki przy użyciu 5 bloków?
      2-3 Maze Loops 17_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 18_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 19_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 20_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops 21_instruction: Doprowadź mnie do słonecznika!
      2-3 Maze Loops Assessment 1_instruction: 'Sprawdzian: Doprowadź mnie do słonecznika przy użyciu tylko 5 bloków! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 Maze sq10v2_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 maze sq11_instruction: Doprowadź mnie do świnki! Które bloki powtórzysz?
      2-3 maze sq12_instruction: 'Czy potrafisz zastąpić poprzednią odpowiedź z pętlą stosując blok "powtórz razy"?'
      2-3 maze sq13_instruction: 'Drodzy. Mnie zombie. ... Muszę dostać ... do słonecznika. Utwórz pętlę z blokiem "powtarzaj aż".'
      2-3 maze sq14_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko czterech bloków?
      2-3 maze sq15_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko pięciu bloków?
      2-3 maze sq16_instruction: OK, to jest podobne, ale nieco inne. Czy potrafisz to wykonać z zaledwie pięcioma blokami?
      2-3 Maze sq2_instruction: Wyznacz trasę i prowadź mnie do tej głupiej świnki. Unikaj TNT lub inaczej będą latać pióra!
      2-3 Maze sq3_instruction: Prowadź mnie do tego zielonego zła! (Uważaj na pola z TNT)
      2-3 Maze sq4_instruction: Zachowaj spokój i pomóż mi znaleźć tę złą świnkę. W przeciwnym razie mogę się rozgniewać!
      2-3 Maze sq5_instruction: Doprowadź mnie do świnki! Ile razy musisz powtórzyć blok?
      2-3 Maze sq6_instruction: 'Czy potrafisz zastąpić poprzednią odpowiedź tylko z dwoma blokami? (Wskazówka: Utwórz pętlę z użyciem bloku "powtórz razy".)'
      2-3 Maze sq7_instruction: Doprowadź mnie do tego zielonego intruza używając tylko trzech bloków.
      2-3 Maze sq8_instruction: 'Doprowadź mnie do świnki! (Gdzie jest ten blok "powtórz razy", kiedy go potrzebuję?)'
      2-3 Maze sq9_instruction: Utwórz pętlę, aby dotrzeć do świnki używając mniejszej liczby bloków.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Pomóż ptakowi złapać niegrzeczną świnkę przesuwając go do przodu
      4-5 Artist 1_instruction: 'Pomóż mi skończyć rysować moje pudełko. (Każda linia ma długość 300 pikseli) '
      4-5 Artist 10_instruction: 'Naciśnij przycisk "Uruchom", aby sprawdzić kod. Następnie, powtórz to tyle razy, aby zakończyć rysowanie. Kolory będą różne za każdym razem.'
      4-5 Artist 11_instruction: Dokończ zielone linie. Linie mają długość 300 pikseli i leżą 15 pikseli od siebie.
      4-5 Artist 2_instruction: Czy potrafisz powtórzyć ten kod w pętli, aby utworzyć kwadrat?
      4-5 Artist 3.5_instruction: 'OK, zobacz, co się dzieje, gdy uruchomisz ten kod (lub naciśnij przycisk "Uruchom"). Następnie powtórz to kilka razy, aby ukończyć rysowanie. Kolory (najprawdopodobniej) będą za każdym razem inne.'
      4-5 Artist 3_instruction: To prostokątne pole kwiatowe ma obwód 600. Dłuższy bok ma długość 200. Narysuj ten prostokąt.
      4-5 Artist 4_instruction: 'Ile stopni jest w okręgu?  Umieść bloki w pętli, aby utworzyć koło kolorów.'
      4-5 Artist 5_instruction: Jakiego używasz kąta?
      4-5 Artist 6_instruction: Ten równoboczny trójkąt ma kąty 60, 60 i 60 stopni. Każdy z boków ma długość 200 pikseli. Ukończ rysunek.
      4-5 Artist 7_instruction: Ten prostokątny trójkąt ma kąty 30, 60 i 90 stopni. Długość pochyłego boku jest równa podwójnej wysokości wynoszącej 100 pikseli. Ukończ rysunek.
      4-5 Artist 8_instruction: Linia w połowie boiska do piłki nożnej jest prostopadła do linii bocznej. To boisko ma obwód 800 pikseli i jest 240 pikseli długie. Jaką ma szerokość? Narysuj boki boiska i linię w jego połowie.
      4-5 Artist 9_instruction: Narysuj drugą połowę tak, że rysunek jest symetryczny. Trójkąty są równoboczne i mają boki o długości 50 pikseli.
      4-5 Artist Assessment 1_instruction: 'Sprawdzian: Użyj pętli, aby narysować trójkąt równoboczny. Każdy bok ma długość 300 pikseli.'
      4-5 Artist For Loops 1_instruction: Umieść liczby od 1 do 10 w blokach szerokości i uruchom kod.
      4-5 Artist For Loops 11_instruction: 'Uzupełnij blok "dla" tak, aby liczył: 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Co się stanie, jeżeli zamienisz miejscami liczby "od" i "do"? Uzupełnij blok "dla" tak, że on liczy 200, 180, 160, 140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Ten rysunek rozpoczęto bez użycia pętli "dla" i użyto zbyt wielu bloków!  Użyj bloku "dla" do wykonania spirali.  Wskazówka: Długość ostatniej linii wynosi 250 pikseli.'
      4-5 Artist For Loops 14_instruction: 'Ktoś zaczął pisać kod, ale uświadomił sobie, że musi istnieć szybszy sposób! Użyj bloku "dla", by zastąpić inne bloki i ukończyć trójkątną spiralę. Wskazówka: Długość ostatniej linii wynosi 300 pikseli.'
      4-5 Artist For Loops 15_instruction: 'Ktoś zaczął pisać kod, ale uświadomił sobie, że musi istnieć szybszy sposób! Użyj bloku "dla", by zastąpić inne bloki i ukończyć sześciokątną spiralę. Wskazówka: Długość ostatniej linii wynosi 200 pikseli.'
      4-5 Artist For Loops 2_instruction: 'To jest blok "dla". Zamiast wypisywać 1, 2, 3,..., 10, blok "dla" służy do powtarzania bloków w nim zawartych, może także zliczać liczby. Umieść liczbę 10 w sekcji "do" w bloku "dla".'
      4-5 Artist For Loops 3_instruction: 'Jak możemy liczyć od 1 do 50? Zmodyfikuj blok "dla".'
      4-5 Artist For Loops 4_instruction: 'Uzupełnij blok "dla" tak, że liczy on od 1 co 1 do 10.'
      4-5 Artist For Loops 6_instruction: 'Narysuj kwadraty o bokach 50, 60, 70, 80 i 90 pikseli. Musisz użyć funkcji "draw a square" (rysuj kwadrat) pięć razy.'
      4-5 Artist For Loops 7_instruction: 'Narysuj takie same kwadraty, ale użyj bloku "count with" (licz z), dla zmiany rozmiaru. Umieść blok "counter" (licznik) w funkcji "draw a square" (rysuj kwadrat). Wskazówka: ten blok znajduje się w kategorii "Variables" (Zmienne).'
      4-5 Artist For Loops 8_instruction: 'Czy potrafisz ukończyć program umieszczając w bloku "dla" bloki, które liczą od 10 do 200 co 10? Blok "dla" możesz znaleźć w kategorii "Loops" (Pętle).'
      4-5 Artist For Loops 9_instruction: 'Te okręgi mają rozmiar 5, 10, 15, 20, 25, 30 i 35. Narysuj je przy użyciu bloku "dla".'
      4-5 Artist Free Draw 1_instruction: 'Wolny wybór!  Narysuj cokolwiek, co inspiruje Cię do kreatywności.'
      4-5 Artist Functions 1_instruction: 'Użyj pętli "powtórz", aby narysować ten trójkąt.'
      4-5 Artist Functions 10a_instruction: 'Umieść ten kod w funkcji "draw a snowflake" (rysuj płatek śniegu) i zastąp 50 przez parametr "size" (rozmiar). Ta funkcja jest już wywoływana, by utworzyć płatek śniegu, który ma 100 pikseli.'
      4-5 Artist Functions 10b_instruction: 'Użyj funkcji "draw a snowflake" (rysuj płatek śniegu) do tworzenia płatków różnej wielkości.  Wskazówka: pierwszy płatek śniegu ma długość 25 i każdy następny płatek śniegu jest dwa razy większy niż poprzedni płatek.'
      4-5 Artist Functions 11_instruction: 'Funkcja "draw a hexagon" (rysuj sześciokąt) wykorzystuje funkcję "draw a triangle" (rysuj trójkąt). Ukończ funkcję rysującą sześciokąt. (Wskazówka: sześciokąt ma 6 boków, każdy o długości 100 pikseli)'
      4-5 Artist Functions 12_instruction: 'Ukończ funkcję "draw waves" (rysuj fale).  Każda fala składa się z jednej fali górnej i jednej fali dolnej.   Wskazówka: Narysuj 5 błękitnych fal.'
      4-5 Artist Functions 13 Free play_instruction: Oto niektóre funkcje do rysowania planet, gwiazd, rakiet i robotów. Skorzystaj z nich, by wykonać rysunki, którymi podzielisz się ze swoim znajomymi.
      4-5 Artist Functions 14 Free play_instruction: 'Tutaj udostępniamy Ci kilka funkcji.  Użyj ich jak uważasz wewnątrz jednej lub wielu pętli, by wykonać rysunki, którymi podzielisz się ze swoimi znajomymi. Kliknij przycisk "Uruchom", aby zobaczyć, jak wyglądają.'
      4-5 Artist Functions 15 Assessment_instruction: 'Sprawdzian: Użyj funkcji "draw a square" (rysuj kwadrat), by tworzyć kwadraty. Kwadraty mają boki długości 50, 100 i 150 pikseli.'
      4-5 Artist Functions 2a_instruction: 'Teraz umieść te bloki w nowej funkcji o nazwie "draw a small triangle" (rysuj mały trójkąt) i wywołaj ją.'
      4-5 Artist Functions 2b_instruction: 'Teraz utwórz funkcję o nazwie "draw a small triangle" (rysuj mały trójkąt) przy użyciu dostępnych bloków.'
      4-5 Artist Functions 3_instruction: 'Teraz utwórz funkcje "draw a medium triangle" (rysuj średni trójkąt) i "draw a large triangle" (rysuj duży trójkąt). Funkcję "draw a small triangle" (rysuj mały trójkąt) wykonaliśmy już dla Ciebie. Długości boków trójkątów wynoszą 50 (mały), 100 (średni) i 150 (duży). '
      4-5 Artist Functions 4_instruction: 'Ta nowa funkcja "draw a triangle" (rysuj trójkąt) ma parametr i może wykonać to, co robią wszystkie trzy wcześniejsze funkcje. Narysuj te same trójkąty przy użyciu tej nowej funkcji.'
      4-5 Artist Functions 5_instruction: 'Czy potrafisz zmodyfikować funkcję "draw a triangle" (rysuj trójkąt) jako "draw a square" (rysuj kwadrat), aby zmienić rysunek?'
      4-5 Artist Functions 6_instruction: 'Użyj funkcji "draw a square" (rysuj kwadrat) i "draw a triangle" (rysuj trójkąt), aby narysować dom. (Wskazówka: Boki kwadratu mają długość 200 pikseli)'
      4-5 Artist Functions 6b_instruction: 'Użyj funkcji służących do rysowania kwadratu i trójkąta wraz z innymi blokami, aby utworzyć dom, dodając je do funkcji "draw a house" (rysuj dom) a następnie wywołaj ją.'
      4-5 Artist Functions 7_instruction: 'Użyj funkcji "draw a hause" (rysuj dom), aby narysować domy, które mają 100 pikseli i 50 pikseli. Te dwa domy są oddalone od siebie o 50 pikseli.'
      4-5 Artist Functions 8_instruction: 'Funkcja "draw a flower" (rysuj kwiat) ma parametr, który pozwala ustawić wysokość łodygi.  Ustaw go na 200 i obserwuj, co się dzieje.'
      4-5 Artist Functions 9_instruction: Narysuj te 3 kwiaty. Pierwszy ma ma wysokość 100 i kolejny kwiat jest zawsze 50 pikseli wyższy niż poprzedni kwiat. Odległość między kwiatami wynosi 100 pikseli.
      4-5 Artist Patterns 1_instruction: Czy potrafisz narysować ten kwadrat używając pętli? Każdy z boków ma długość 20 pikseli.
      4-5 Artist Patterns 10_instruction: 'Ten kod rysuje dwa rzędy sześciokątów - całość powtórz w pętli 4 razy, by narysować cały plaster miodu. Wskazówka: Musisz skoczyć z powrotem 120 pikseli w najbardziej zewnętrznej pętli, by mieć pewność, że artysta nie rysuje poza ekranem.'
      4-5 Artist Patterns 11_instruction: 'Ile razy trzeba wykonać to w pętli, by narysować półokrąg? Wskazówka: Jeśli okrąg ma 360 stopni i w każdym obrocie pętli następuje przesunięcie o 3 stopnie, to ile razy trzeba wykonać pętlę, by narysować pełny okrąg?'
      4-5 Artist Patterns 12_instruction: Jeśli skopiujesz tę pętlę i zamiast skrętu w lewo wykonasz skręt w prawo, to co się stanie? Czy możesz to powtórzyć, by narysować tę falę?
      4-5 Artist Patterns 13_instruction: 'Teraz powtórz to wszystko 4 razy w pętli, aby utworzyć ramkę na obrazek. Uważaj na rogi - nie możesz tak po prostu obrócić się o 90 stopni! Jeśli powtórzenie w pętli trzech stopni 60 razy tworzy półokrąg, to które z tych bloków kodu spowodują utworzenie ćwiartki okręgu na rogach?'
      4-5 Artist Patterns 2_instruction: Jeśli umieścisz pętlę dla kwadratu w innej pętli, to otrzymasz zagnieżdżoną pętlę. Co powinieneś dodać do swojej zewnętrznej pętli, aby mieć pewność, że wszystkie 15 kwadratów będzie leżeć w linii obok siebie?
      4-5 Artist Patterns 3_instruction: Przejdźmy teraz jeden poziom dalej! Zagnieździliśmy cały blok kodu w innej pętli, ale teraz musisz wydostać artystę z powrotem do miejsca, w którym narysuje następną linię. Które z tych bloków kodu możesz umieścić na końcu najbardziej zewnętrznej pętli, aby narysować całą siatkę?
      4-5 Artist Patterns 4_instruction: Ten diament ma boki długości 50 pikseli i kąty 120 oraz 60 stopni. Użyj pętli, by go narysować.
      4-5 Artist Patterns 5.5_instruction: Ile razy trzeba powtórzyć ten blok, by narysować pełną siatkę diamentów?
      4-5 Artist Patterns 5_instruction: 'Powtórzmy to, aby otrzymać rząd 6 diamentów. Zauważ, że zmieniliśmy nasz kod diamentu, by powtarzać 3 razy zamiast 2 - jak uważasz, dlaczego?'
      4-5 Artist Patterns 6_instruction: Ile razy trzeba powtórzyć ten blok, by narysować pełną siatkę diamentów?
      4-5 Artist Patterns 7_instruction: 'Zmodyfikujmy kod z ostatniej łamigłówki, aby utworzyć ten bardziej złożony wzór. Zauważ, jak diamenty pokrywają się teraz, spróbuj zmienić pierwszy blok "skocz do tyłu" ze 100 na 50 (o połowę bliżej) - a teraz jak daleko powinien pójść artysta w drugim bloku "skocz do tyłu"?'
      4-5 Artist Patterns 8_instruction: Użyj pętli, by narysować ten sześciokąt z bokami o długości 40 pikseli i kątami 60 stopni.
      4-5 Artist Patterns 9.5_instruction: Umieść ten kod w pętli, by narysować dwa rzędy sześciokątów. Zauważ, w jaki sposób nasz drugi rząd jest przesunięty w prawo.
      4-5 Artist Patterns 9_instruction: 'Teraz powtórz ten kod 3 razy, aby narysować cały rząd. Wskazówka: Każdy sześciokąt jest szeroki na 80 pikseli od lewej do prawej.'
      4-5 Artist Patterns Free Play_instruction: 'Czas na zabawę - spróbuj swoich sił tworząc własny wzór!'
      4-5 Bee Conditionals - FC Test_instruction: Pszczółka chce teraz tylko nektaru. Nie wszystkie obiekty są kwiatami, więc sprawdź pod KAŻDĄ CHMURKĄ, czy ukrywa kwiatek. Jeśli tak, to wtedy możesz zebrać nektar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: Pszczółka nie rozpoznaje, czy to jest kwiat czy plaster miodu. Zbierz nektar z kwiatów, ale najpierw sprawdź, czy to jest kwiat czy plaster miodu.
      4-5 Bee Conditionals 1_instruction: Pszczółka nie rozpoznaje, czy to jest kwiat czy plaster miodu. Zbierz nektar z kwiatów, ale najpierw sprawdź, czy to jest kwiat czy plaster miodu.
      4-5 Bee Conditionals 2 (copy 1)_instruction: Pszczółka chce teraz tylko nektaru. Pamiętaj, że nie wszystkie obiekty są kwiatami, upewniaj się więc, że nektar jest zbierany tylko z kwiatów.
      4-5 Bee Conditionals 2_instruction: Pszczółka chce teraz tylko nektaru. Nie wszystkie obiekty są kwiatami, więc sprawdź pod KAŻDĄ CHMURKĄ, czy ukrywa kwiatek. Jeśli tak, to wtedy możesz zebrać nektar.
      4-5 Bee Conditionals 3_instruction: Teraz pszczółka chce robić miód. Upewniaj się, że miód jest robiony tylko na plastrze miodu.
      4-5 Bee Conditionals 4 (copy 1)_instruction: 'Nieznany obiekt jest kwiatem lub plastrem miodu. Użyj bloku "jeśli-w przeciwnym razie", by zebrać nektar, jeśli jest to kwiat, lub w przeciwnym razie robić miód (bo to jest plaster miodu).'
      4-5 Bee Conditionals 4_instruction: 'Nieznany obiekt jest kwiatem lub plastrem miodu. Użyj bloku "jeśli-w przeciwnym razie", by zebrać nektar, jeśli jest to kwiat, lub w przeciwnym razie robić miód (bo to jest plaster miodu).'
      4-5 Bee Conditionals 5_instruction: 'Może to być kwiat lub plaster miodu. Użyj bloku "jeśli-w przeciwnym razie", by zbierać nektar, jeśli jest to kwiat, lub w przeciwnym razie robić miód (bo to jest plaster miodu).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektaru. Tutaj, blok "jeśli-w przeciwnym razie" jest połączony z innym blokiem "jeśli-w przeciwnym razie", by utworzyć blok "jeśli-w przeciwnym razie/jeśli-w przeciwnym razie". Ukończ rozwiązanie, by zebrać nieznaną ilość nektaru.'
      4-5 Bee Conditionals 6_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektaru. Tutaj, blok "jeśli-w przeciwnym razie" jest połączony z innym blokiem "jeśli-w przeciwnym razie", by utworzyć blok "jeśli-w przeciwnym razie/jeśli-w przeciwnym razie". Ukończ rozwiązanie, by zebrać nieznaną ilość nektaru.'
      4-5 Bee Conditionals 7_instruction: 'Pamiętaj, że fioletowe kwiaty mogą mieć 3, 2 lub 1 nektarów. Ukończ funkcję "check purple flower" (sprawdź fioletowy kwiat) i użyj jej, by zebrać cały nektar z kwiatów.'
      4-5 Bee Conditionals 8_instruction: 'Wypełnij wnętrze funkcji "check flower make honey" (sprawdź kwiat zrób miód). Twoja funkcja powinna sprawdzać, czy fioletowy kwiat ma 3, 2, czy 1 nektary i zebrać cały nektar, a następnie przejść dalej i zrobić miód.'
      4-5 Bee Conditionals Assessment 1_instruction: 'Sprawdzian: Ten kod nie jest poprawny. Ukończ funkcję "get nectar or make honey" (zbierz nektar lub zrób miód), a następnie wywołaj ją, by zebrać cały nektar i miód. Pamiętaj, że fioletowe kwiaty mogą mieć 3, 2 lub 1 nektarów.'
      4-5 Bee Debugging 1_instruction: Te bloki nie odpowiadaj mi. Czy mógłbyś je naprawić?
      4-5 Bee Debugging 10_instruction: Znajdź błędy i napraw je.
      4-5 Bee Debugging 11_instruction: Czy to działa poprawnie?
      4-5 Bee Debugging 2_instruction: Pomóż pszczółce zebrać nektar i zrobić miodu.
      4-5 Bee Debugging 3_instruction: Znajdź błędy i napraw je.
      4-5 Bee Debugging 4_instruction: Te bloki nie działają. W czym jest błąd?
      4-5 Bee Debugging 5_instruction: Coś tu nie gra ...
      4-5 Bee Debugging 6_instruction: Fioletowy kwiatek zawiera nieznaną ilość nektaru. Napraw bloki, aby zebrać cały nektar z kwiatka.
      4-5 Bee Debugging 7_instruction: Czegoś brakuje w tej funkcji...
      4-5 Bee Debugging 8_instruction: Ta funkcja jest w porządku, ale nie jest prawidłowo wykorzystana.
      4-5 Bee Debugging 9_instruction: Dlaczego pszczółka nie robi wystarczająco dużo miodu?
      4-5 Bee Debugging Assessment 1_instruction: 'Sprawdzian: Popraw kod.'
      4-5 Bee Nested Loops 1_instruction: Użyj pętli, by zebrać cały nektar.
      4-5 Bee Nested Loops 2_instruction: 'Zbierz cały nektar z każdego kwiatka. Użyj zagnieżdżonej pętli. '
      4-5 Bee Nested Loops 3_instruction: Zbierz cały nektar umieszczając dany kod w zagnieżdżonej pętli.
      4-5 Bee Nested Loops 4_instruction: 'Zbierz cały nektar z każdego kwiatka i zrób miód na każdym plastrze miodu. Użyj zagnieżdżonej pętli. '
      4-5 Bee Nested Loops 5_instruction: Zbierz cały nektar tworząc zagnieżdżoną pętlę.
      4-5 Bee Nested Loops 6_instruction: Zbierz cały nektar.
      4-5 Bee Nested Loops 7_instruction: Umieść tę pętlę wewnątrz innej pętli, by utworzyć zagnieżdżoną pętlę i zebrać cały nektar z kwiatów.
      4-5 Bee Nested Loops 8_instruction: 'Zbierz cały nektar z tych kwiatów używając zagnieżdżonej pętli "dopóki". Zastąp wewnętrzny blok "powtórz razy" przez blok "dopóki". '
      4-5 Bee Nested Loops 9_instruction: 'Zbierz cały nektar z tych kwiatów umieszczając pętlę "dopóki" w pętli "powtórz".'
      4-5 Bee Nested Loops Assessment 1_instruction: 'Sprawdzian: Zbierz cały nektar i zrób cały miód używając pętli.'
      4-5 Bee Nested Loops Rows_instruction: Zbierz nektar z rzędów kwiatów! Użyj zagnieżdżonych pętli.
      4-5 Maze 1 (copy 1)_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 1_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 10_instruction: Czy możesz dostać się do słonecznika przy użyciu tylko czterech bloków?
      4-5 Maze 11_instruction: Czy możesz dotrzeć do słonecznika przy użyciu tylko sześciu bloków?
      4-5 Maze 12_instruction: OK, to jest nieco inne. Czy możesz to zrobić w zaledwie sześciu blokach?
      4-5 Maze 13_instruction: Doprowadź mnie do świnki!
      4-5 Maze 14_instruction: 'Doprowadź mnie do świnki! Użyj bloku "powtarzaj aż".'
      4-5 Maze 2 (copy 1)_instruction: Doprowadź zombie do słonecznika, ale unikaj chrupacza!
      4-5 Maze 2_instruction: Doprowadź zombie do słonecznika, ale unikaj chrupacza!
      4-5 Maze 3 (copy 1)_instruction: Muszę ... dotrzeć ... do słonecznika.
      4-5 Maze 3_instruction: Muszę ... dotrzeć ... do słonecznika.
      4-5 Maze 4 (copy 1)_instruction: 'Spróbuj użyć bloku "powtórz", by użyć mniej bloków...'
      4-5 Maze 4_instruction: 'Spróbuj użyć bloku "powtórz", by użyć mniej bloków...'
      4-5 Maze 5 (copy 1)_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 5_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 6 (copy 1)_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 6_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      4-5 Maze 7_instruction: Drodzy. Mnie zombie. ... Musi dotrzeć... do słonecznika.
      4-5 Maze 8_instruction: 'Użyj bloku "powtórz", aby doprowadzić zombie do słonecznika. (Unikaj chrupacza!)'
      4-5 Maze 9_instruction: 'Utwórz pętlę z użyciem bloku "powtarzaj aż".'
      4-5 Maze Assessment 1_instruction: 'Sprawdzian: Dostać się do słonecznika.'
      4-5 Maze Conditionals 1_instruction: 'Użyj bloku "powtarzaj aż", by doprowadzić zombie do słonecznika.'
      4-5 Maze Conditionals 2_instruction: 'Użyj bloku "powtarzaj aż", by doprowadzić zombie do słonecznika.'
      4-5 Maze Conditionals 3_instruction: 'Użyj bloku "jeśli", abym mógł decydować, kiedy skręcić. Wskazówka: wystarczy użyć tylko jednego więcej bloku, ale zobacz, jak to zrobiliśmy, byś następnym razem mógł to wykonać samodzielnie.'
      4-5 Maze Conditionals 4_instruction: 'OK, to jest podobne do poprzedniej łamigłówki, ale musisz pamiętać, jak użyłeś bloków "jeśli" i "powtórz" razem.'
      4-5 Maze Conditionals 5_instruction: 'Potrzeba mi słonecznik! Użyj bloku "jeśli", aby doprowadzić mnie tam z najmniejszą liczbę bloków.'
      4-5 Maze Conditionals 6_instruction: 'Potrzeba mi słonecznik! Użyj bloku "jeśli", aby doprowadzić mnie tam z najmniejszą liczbę bloków.'
      4-5 Maze Conditionals 7_instruction: 'OK, zróbmy to ponownie dla wprawy - to nie jest specjalnie inne, ale uważaj na chrupaczy!'
      4-5 Maze Conditionals 8_instruction: 'Blok "jeśli-w przeciwnym razie" sprawdza warunek, a następnie wykonuje jedno albo drugie. Użyj tego nowego bloku, aby doprowadzić mnie do słonecznika.'
      4-5 Maze Conditionals 9_instruction: 'Jeszcze jedno ćwiczenie z wykorzystaniem bloczku "Jeśli-w przeciwnym razie". Ciekawe, czy uda Ci się za pierwszym razem?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Użyj bloków "powtarzaj aż" i "jeśli-w przeciwnym razie", aby doprowadzić mnie do słonecznika za pomocą możliwie najmniejszej liczby bloków.'
      4-5 Nested Loops 1_instruction: 'Uzupełnij kod do rysowania tych trójkątów.  Pierwszy z nich już wykonano dla Ciebie.  Wskazówka: 3 trójkąty w rotacji 360 stopni.'
      4-5 Nested Loops 10_instruction: Narysuj ostatni rząd gwiazd na tej fladze powtarzając dane bloki. Gwiazdy są oddalone o 50 pikseli, ale pamiętaj, że same gwiazdy są szerokie na 30 pikseli.
      4-5 Nested Loops 11_instruction: Czy potrafisz narysować te 10 kwadratów na tym chodniku przy użyciu zagnieżdżonej pętli? Każdy kwadrat ma bok długości 30 pikseli.
      4-5 Nested Loops 12_instruction: Czy potrafisz narysować tych 36 trójkątów za pomocą zagnieżdżonej pętli?
      4-5 Nested Loops 2_instruction: 'Teraz umieść tę pętlę wewnątrz innej pętli, by narysować 10 trójkątów.  To się nazywa zagnieżdżoną pętlą.  Wskazówka: Te 10 trójkątów wykonuje obrót o 360 stopni.  '
      4-5 Nested Loops 3_instruction: "Utwórz słońce zagnieżdżając początkowy kod w innej pętli. To się nazywa zagnieżdżoną pętlą. \\r\n"
      4-5 Nested Loops 5_instruction: Umieść w pętli dany kod, aby utworzyć wiatrak.
      4-5 Nested Loops 6_instruction: Czy potrafisz narysować sześciokąt powtarzając kod trójkąta?
      4-5 Nested Loops 7_instruction: 'Powtórz ten wzór 10 razy. O ile trzeba skręcić w każdym obrocie pętli? (Wskazówka:  ile wynosi 360 podzielone przez 10?)'
      4-5 Nested Loops 8_instruction: 'Powtórz ten wzór 6 razy. O ile trzeba skręcić w każdym obrocie pętli? (Wskazówka:  ile wynosi 360 podzielone przez 6?)'
      4-5 Nested Loops 9_instruction: Narysuj zęby w paszczy aligatora!
      4-5 Nested Loops Assessment 1_instruction: Użyj zagnieżdżonej pętli, aby ukończyć projekt.
      4-5 While Loops 1_instruction: 'Doprowadź mnie do otworu i wypełnij go z dwoma szufelkami śmieci przy użyciu bloku "wypełnij".'
      4-5 While Loops 2_instruction: 'Doprowadź mnie do kupy śmieci i usuń je za pomocą 5 szufelek przy użyciu bloku "usuń".'
      4-5 While Loops 3_instruction: 'Doprowadź mnie do sterty śmieci i usuń je, a następnie przejdź do otworu i wypełnij go całkowicie.  Wskazówka: Użyj możliwie jak najmniej bloków.'
      4-5 While Loops 4_instruction: 'Wow, znalazłem naprawdę głęboki otwór! Nie wiem, ile szufelek śmieci potrzeba.  Czy potrafisz napisać program, który wypełni go do poziomu ziemi?  Wskazówka: Spróbuj użyć pętli "dopóki".'
      4-5 While Loops 5_instruction: Wow, teraz są dwa głębokie otwory! Czy potrafisz napisać program, który wypełni je do poziomu ziemi?
      4-5 While Loops 6_instruction: Wow, tam jest duża kupa śmieci! Czy mógłbyś napisać program, który usuwa wszystko do poziomu ziemi?
      4-5 While Loops 7_instruction: Wow, teraz tam są trzy kupy śmieci! Czy mógłbyś napisać program, który usuwa każdą z nich aż do poziomu ziemi?
      4-5 While Loops 8_instruction: ' To naprawdę jest głęboki dół i duża kupa śmieci.  Ile trzeba usunąć szufli śmieci, aby wyrównać teren do poziomu ziemi?  Wskazówka: Użyj pętli "dopóki".'
      4-5 While Loops Assessment 1_instruction: 'Jest tutaj wiele otworów i stert.  Pomóż mi wypełnić otwory i usunąć sterty, by wyrównać teren.'
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: 'Dodaj przycisk, który przesuwa żółwia po kliknięciu.  (Kliknij, aby zobaczyć pełne instrukcje)'
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Użyj zagnieżdżonej pętli, aby ukończyć projekt.
      Auto Open Function Editor_instruction: 'Możesz wywoływać funkcje z wnętrza innych funkcji! Za pomocą swojej funkcji "draw a shape" (rysuj kształt), utwórz 3 kształty domów, każdy o 20 pikseli większy niż poprzedni, zaczynając od 50 pikseli. Pomocne może być użycie pętli licznikowej. '
      Bee Recommended Blocks test_instruction: 'Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, ale nie wiesz który. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. Sprawdzaj, czy nektar jest równy 1 przy użyciu bloku "jeśli".'
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Ta pszczółka ma wiele do zrobienia! Czy widzisz jakieś wzorce, które mógłbyś użyć, by uprościć swój kod?
      Busy Bee_instruction: Ta pszczółka ma wiele do zrobienia! Czy widzisz jakieś wzorce, które mógłbyś użyć, by uprościć swój kod?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: Co się stanie, jeśli powtórzysz w pętli tę sekwencję 3 razy? Nie zapomnij zrobić na końcu miodu!
      Course 2 Maze Loops 1_instruction: Czy potrafisz doprowadzić mnie do świnki przy użyciu 5 bloków?
      Course 4 2_instruction: Pszczółka chce nektaru. Pamiętaj, że nie wszystkie obiekty są kwiatami, upewniaj się więc, że nektar jest zbierany tylko z kwiatów.
      Course 4 Artist 1_instruction: 'Pomóż mi ukończyć rysowanie mojego pudełka. (Każda linia ma długość 200 pikseli) '
      Course 4 Artist 10_instruction: "Kliknij tutaj, aby ponownie zobaczyć wskazówki! \\r\n\\r\nTutaj jest kod ciekawego kształtu. Co się dzieje, kiedy go powtórzysz wiele razy, skręcając między każdą iteracją? Zauważ, że suma skrętów przy rysowaniu tego kształtu wynosi 420 stopni. Oznacza to, że gdy twój artysta wykona rysunek, to będzie skierowany w innym kierunku niż wtedy, kiedy zaczynał rysować. Ten nowy kierunek jest dokładnie 60 stopni w prawo od kierunku, w którym zaczynał."
      Course 4 Artist 11_instruction: Czas na wyzwanie! Oto kompozycja, która używa tylko tych bloków, które już poznałeś. Czy mógłbyś określić, jak została utworzona? Nie bój się popełniać błędów i próbować. Nie oczekuj, że wszystko będzie doskonałe za pierwszym razem. Kliknij tutaj, jeśli chcesz zobaczyć więcej wskazówek!
      Course 4 Artist 12_instruction: "Czy potrzebujesz ponownie spojrzeć na inspirującą kompozycję lub na wskazówkę? Kliknij tutaj!\\r\n\\r\nW przeciwnym razie wykonaj własną kompozycję!"
      Course 4 Artist 13_instruction: Nadal grasz? Tutaj jest czyste płótno, na którym możesz zaprojektować cokolwiek chcesz!
      Course 4 Artist 2_instruction: Czy potrafisz powtórzyć ten kod, aby pomalować na szaro obszar poza kwadratem?
      Course 4 Artist 20_instruction: Nadal grasz? Tutaj jest czyste płótno, na którym możesz utworzyć cokolwiek chcesz!
      Course 4 Artist 3_instruction: 'OK, zorientuj się, co się dzieje, jeśli uruchomisz ten kod (naciśnij przycisk "Uruchom"). Następnie, powtórz to dość razy, aby ukończyć rysunek.'
      Course 4 Artist 4_instruction: 'Ile stopni jest w okręgu?  Uzupełnij blok "powtórz" tą liczbą, by otrzymać koło kolorów.'
      Course 4 Artist 5_instruction: Narysuj drugą połowę tego wzoru tak, aby był symetryczny. Trójkąty są równoboczne i mają boki o długości 50 pikseli.
      Course 4 Artist 6_instruction: 'Uzupełnij kod, by narysować te trójkąty. Wskazówka: 3 trójkąty w rotacji 360 stopni.'
      Course 4 Artist 7_instruction: 'Umieść tę pętlę wewnątrz innej pętli, aby narysować 10 trójkątów. To się nazywa zagnieżdżoną pętlą. Wskazówka: Te 10 trójkątów wypełnia obrót o 360 stopni.  '
      Course 4 Artist 8_instruction: Narysuj to słońce powtarzając ten blok kodu 12 razy.
      Course 4 Artist 8a_instruction: "Czy pamiętasz ten kształt?  Teraz chcemy zachęcić Cię do utworzenia tego samego kształtu, ale nie dajemy Ci żadnych bloków, abyś mógł zacząć! \\r Wskazówka: Mamy 3 trójkąty w rotacji w zakresie 360 stopni... ile razy ma 3 mieści się 360?"
      Course 4 Artist 9_instruction: 'Powtórz ten wzór 10 razy i bądź pewien, że skręcasz między każdymi dwoma kształtami. Oto wskazówka, ile ma wynosić skręt: ile wynosi 360 podzielone przez 10?'
      Course 4 Artist Binary 1_instruction: "Oto funkcja, która na podstawie binarnego łańcucha złożonego z jedynek i zer kieruje artystę od lewej do prawej, od góry do dołu. Artysta wypełnia kwadraty, kiedy widzi 1, a ignoruje kwadraty, gdy widzi 0. \\r\n\\r\nUruchom ten kod, aby zobaczyć, jak artysta wykorzystuje binarny łańcuch, by narysować ten wzorek."
      Course 4 Artist Binary 1a_instruction: "Oto funkcja, która na podstawie binarnego łańcucha złożonego z jedynek i zer kieruje artystę od lewej do prawej, od góry do dołu. Artysta wypełnia kwadraty, kiedy widzi 1, a ignoruje kwadraty, gdy widzi 0. \\r\n\\r\nUruchom ten kod, aby zobaczyć, jak artysta wykorzystuje binarny łańcuch, by narysować ten wzorek."
      Course 4 Artist Binary 2_instruction: Które z tych binarnych łańcuchów możesz powtórzyć 8 razy, aby narysować ten obraz?
      Course 4 Artist Binary 3_instruction: Czy potrafisz narysować ten wzorek powtarzając binarny łańcuch złożony z trzech cyfr?
      Course 4 Artist Binary 4_instruction: Każdy binarny łańcuch reprezentuje jeden wiersz tego obrazka. Czy potrafisz je zmienić tak, aby była rysowana uśmiechnięta buźka, a nie zmartwiona twarz?
      Course 4 Artist Binary 5_instruction: Który 6-cyfrowy binarny łańcuch, powtórzony 11 razy, narysuje ten obraz?
      Course 4 Artist Binary 6_instruction: Jaki jest najkrótszy łańcuch binarny, który możesz powtórzyć, by narysować ten obraz?
      Course 4 Artist Binary 7_instruction: Ukończ ten rysunek.
      Course 4 Artist Binary Free Play 2_instruction: 'Czas na zabawę: Tutaj jest dla Ciebie czyste płótno do rysowania na nim. Dobrej zabawy!'
      Course 4 Artist Binary Free Play 2a_instruction: "Oto obszar do rysowania o większej rozdzielczości - 16 na 16 pikseli!\\r\\r Co się stanie, kiedy zaczniemy tworzyć z użyciem bitów?"
      Course 4 Artist Binary Free Play 2b_instruction: Kliknij tutaj, by zobaczyć podpowiedzi.
      Course 4 Artist Binary Free Play_instruction: 'Czas na zabawę: Narysuj z binary cokolwiek chcesz!'
      Course 4 Artist Binary pre1_instruction: "Kod binarny to sposób reprezentowania informacji przy użyciu tylko dwóch stanów. Tutaj będziemy używać stanu \"off\" (wyłączony), reprezentowanego przez 0, i \"on\" (włączony), reprezentowanego przez 1). \\r \\r Udostępniliśmy Ci siatkę \"pikseli\", po której możesz chodzić i tworzyć wzory przez włączanie pewnych kwadratów. Czy mógłbyś spowodować, by artysta narysował \"01010101\" binarnie w pierwszym rzędzie?"
      Course 4 Artist Binary ryan_instruction: "Kod binarny to sposób reprezentowania informacji przy użyciu tylko dwóch stanów. Tutaj będziemy używać stanu \"off\" (wyłączony), reprezentowanego przez 0, i \"on\" (włączony), reprezentowanego przez 1). \\r \\r Udostępniliśmy Ci siatkę \"pikseli\", po której możesz chodzić i tworzyć wzory przez włączanie pewnych kwadratów. Czy mógłbyś spowodować, by artysta narysował \"01010101\" binarnie w pierwszym rzędzie?"
      Course 4 Artist For  Functions 10_instruction: 'Idźmy dalej, czy potrafisz narysować gwiazdę za pomocą funkcji "draw a square line" (rysuj rząd kwadratów)? Powodzenia!'
      Course 4 Artist For  Functions 11_instruction: 'Idźmy dalej, czy potrafisz narysować gwiazdę za pomocą funkcji "draw a square line" (rysuj rząd kwadratów)? Powodzenia!'
      Course 4 Artist For Loops 1_instruction: 'Narysuj ten trójkąt, który ma boki długości 50 pikseli. Wskazówka: Użyj bloku "powtórz".'
      Course 4 Artist For Loops 10_instruction: Czas dowolnej zabawy! Ciesz się rysując cokolwiek chcesz za pomocą bloków, których nauczyłeś się używać
      Course 4 Artist For Loops 11_instruction: 'Czy pamiętasz, gdy na poprzednim poziomie użyliśmy zmiennej do kontroli liczby boków w kształcie? Teraz wykonamy to samo ze zmienną "counter" (licznik). Ten wzór zaczyna się od trójkąta i dodawany jest jeden bok, aż zostanie narysowany dziesięciokąt foremny (z 10 bokami). Każdy bok powinien mieć 100 pikseli długości. Wskazówka: 360 podzielone przez liczbę boków w kształcie jest liczbą stopni, o którą należy skręcić.'
      Course 4 Artist For Loops 11a_instruction: "Połączmy to wszystko razem! Korzystając z tego, co wiesz o pętli \"dla\" i \"licznika\" (counter), utwórz ten rysunek, na którym każdy kształt ma dwa więcej boki niż poprzedni.  Upewnij się, że każdy bok jest 10 razy dłuższy niż liczba boków w wielokącie.\\r\n\\r\nPodaliśmy Ci niewiele kodu."
      Course 4 Artist For Loops 12_instruction: 'To wygląda całkiem fajnie, ale teraz chciałbym narysować każdy kształt obok poprzedniego. Tym razem każdy bok ma długość 20 pikseli. Użyj bloku skoku, by przejść do przodu 40 pikseli po każdym kształcie. '
      Course 4 Artist For Loops 13_instruction: Hmmm, te kształty stają się coraz większe za każdym razem! Czy nie rozwiązaliśmy już tego problemu z użyciem zmiennych? Jak można użyć zmiennej będącej licznikiem, aby zmniejszać boki, gdy jest ich więcej? Zamiast posuwać się do przodu o ustaloną wielkość, spróbuj przesuwać się do przodu o (100/licznik) pikseli.
      Course 4 Artist For Loops 14_instruction: Jeśli skręcisz trochę więcej lub trochę mniej, to otrzymasz zgrabny kształt. Wykorzystaj kod z poprzedniej łamigłówki, ale skręcić o 89 stopni, aby utworzyć tę skręcaną spiralę kwadratową.
      Course 4 Artist For Loops 15_instruction: 'Czas na zabawę: Spróbuj wykonać własne rysunki za pomocą pętli "dla". Dodaliśmy kilka użytecznych zmiennych, byś mógł je użyć.'
      Course 4 Artist For Loops 2_instruction: 'Umieściliśmy kod do rysowania trójkąta wewnątrz pętli, która liczy od 50 do 100 co 10. Przejrzyj ten kod zanim klikniesz na "Uruchom".'
      Course 4 Artist For Loops 3_instruction: |
        Skorzystaj z poprzedniej łamigłówki, by wykonać tę. Najmniejszy trójkąt ma boki o długości 20 pikseli, największy ma boki o długości 200 pikseli, i każdy trójkąt ma boki o 20 pikseli większe niż poprzedni trójkąt.
        
      Course 4 Artist For Loops 4_instruction: 'Jak wykorzystasz to, czego nauczyłeś się, by narysować te kwadraty? Pierwszy ma boki o długości 15 pikseli, a boki największego mają długość 300 pikseli, i każdy kwadrat ma bok o 15 pikseli dłuższy niż poprzedni. '
      Course 4 Artist For Loops 5_instruction: 'Dobrze wykonałeś ostatnią łamigłówkę! Użyj ponownie tego bloku zmiennej "counter" (licznik), by narysować ten fajny obrazek. '
      Course 4 Artist For Loops 6_instruction: 'Dobra zabawa! Spróbuj użyć pętli "dla", by narysować powiększający się wzór własnego pomysłu.'
      Course 4 Artist For Loops 6a_instruction: Zrób trzy niewielkie zmiany w kodzie z poprzedniego poziomu, aby to otrzymać!
      Course 4 Artist For Loops 7_instruction: 'Co się stanie, jeśli usuniesz blok "powtórz 3" z tego algorytmu, pozostawiając bloki "idź" i "skręć" w pętli? W tym spiralnym trójkącie każdy bok jest o 20 pikseli dłuższy niż poprzedni.'
      Course 4 Artist For Loops 8_instruction: "Tylko jedna niewielka zmiana kodu ostatniego obrazu spowoduje utworzenie tego obrazu. Czy mógłbyś określić, co to za zmiana?\\r\n\\r\nWskazówka: Powinieneś coś usunąć!"
      Course 4 Artist For Loops 8a_instruction: Tylko jedna niewielka zmiana kodu ostatniego obrazu spowoduje utworzenie tego obrazu. Czy mógłbyś określić, co to za zmiana?
      Course 4 Artist For Loops 9_instruction: Czy potrafisz wykonać spiralę? Idź do przodu od 1 do 75 pikseli, zwiększając krok o 1 piksel za każdym razem.
      Course 4 Artist For Loops Challenge_instruction: "Czy potrafisz skorzystać z tego, czego nauczyłeś się, by utworzyć ten obraz? \\r \\r Jeśli potrzebujesz wskazówki, to kliknij tutaj."
      Course 4 Artist For Loops inspire_instruction: "Dowolne inspiracje: Nauczyłeś się wszystkiego, co musisz wiedzieć, aby utworzyć podobny wzór! Jeśli ten obraz Cię inspiruje, to spróbuj utworzyć coś podobnego. W przeciwnym razie, utwórz coś według własnego pomysłu.\\r\n\\r\nJeśli potrzebujesz wskazówki, to kliknij tutaj."
      Course 4 Artist Functions 1_instruction: Czy potrafisz za pomocą pętli narysować kwadrat, który ma bok o długości 100 pikseli?
      Course 4 Artist Functions 10_instruction: Który blok musisz dodać, aby otrzymać trójkąt leżący na kwadracie?
      Course 4 Artist Functions 11_instruction: 'Sprawdź ten kod, który rysuje kostkę (sześcian) - czy potrafisz zamienić go na funkcję o nazwie "draw a cube" (rysuj sześcian)'
      Course 4 Artist Functions 12.1_instruction: 'Stwórzmy funkcję o nazwie "draw an octagon 20" (rysuj ośmiokąt 20), która rysuje ośmiokąt z bokami o długości 20 pikseli.'
      Course 4 Artist Functions 12_instruction: Powtórz w pętli funkcję rysującą kwadrat, by narysować rząd kwadratów
      Course 4 Artist Functions 13.1_instruction: "Teraz utwórzmy funkcję \"jump to upper right\" (skocz do prawego górnego rogu), która przeniesie artystę do prawego górnego rogu ośmiokąta, właśnie narysowanego, abyśmy mogli zakończyć wzór.\\r\n\\r\nWskazówka: Aby dostać się do prawego górnego roku, spróbuj przeskakiwać według wzoru, który tworzy 3/8 ośmiokąta."
      Course 4 Artist Functions 13_instruction: 'Sprawdź, mamy nową funkcję "draw a line of squares" (rysuj rząd kwadratów). Przyjrzyj się, jak ta funkcja została utworzona. Kliknij "Uruchom", kiedy jesteś gotowy na następną łamigłówkę.'
      Course 4 Artist Functions 14.1_instruction: 'Teraz utwórzmy funkcję "jump to upper right" (skocz do prawego górnego rogu), która przeniesie artystę do prawego górnego rogu ośmiokąta, właśnie narysowanego, abyśmy mogli zakończyć wzór.'
      Course 4 Artist Functions 14_instruction: 'Świetnie sobie radzisz! Użyj swojej nowej funkcji "draw a line of squares" (rysuj rząd kwadratów), by narysować kwadratowy kształt. Pamiętaj, że każdy kwadrat ma bok o długości 40 pikseli.'
      Course 4 Artist Functions 15_instruction: 'Zróbmy krok dalej - czy potrafisz narysować kształt gwiazdy za pomocą funkcji "draw a line od squares" (rysuj rząd kwadratów)? Powodzenia! Wskazówka: być może musisz skręcić o 144 stopnie'
      Course 4 Artist Functions 2_instruction: 'Czy mógłbyś narysować 3 kwadraty oddalone od siebie o 20 pikseli? Wskazówka: bok każdego kwadratu ma 100 pikseli'
      Course 4 Artist Functions 3_instruction: "Używając funkcji \"draw a square\" (narysuj kwadrat), czy mógłbyś narysować ten obrazek? Wskazówka: kwadraty są oddalone od siebie o 120 pikseli.\\r\n"
      Course 4 Artist Functions 4_instruction: 'Czy jesteś gotowy do utworzenia własnej funkcji? Kliknij na "Functions" (Funkcje) w polu narzędzi, a później na "Utwórz funkcję" i nazwij funkcję "draw a triangle" (rysuj trójkąt), a następnie utwórz trójkąt, jak to zrobiłeś wcześniej z użyciem bloków działania i pętli. Następnie kliknij przyciski "Zamknij" w prawym górnym rogu. Wskazówka: Utwórz trójkąt, który ma boki o długości 100 pikseli. Powodzenia!'
      Course 4 Artist Functions 5 OLD_instruction: 'Spróbujmy użyć naszych dwóch funkcji, by narysować dom - co trzeba ustalić w tym kodzie, aby prawidłowo narysować dom?'
      Course 4 Artist Functions 5_instruction: "Używając bloku \"draw a square\" (rysuj kwadrat), czy mógłbyś narysować ten obrazek? Wskazówka: kwadraty są oddalone od siebie o 120 pikseli.\\r\n"
      Course 4 Artist Functions 6_instruction: Który blok musisz dodać, aby otrzymać trójkąt leżący na kwadracie?
      Course 4 Artist Functions 7_instruction: Czy potrafisz narysować rząd kwadratów przy użyciu funkcji do rysowania kwadratu? Każdy kwadrat ma bok o długości 40 pikseli.
      Course 4 Artist Functions 8_instruction: 'Czy poznałeś już, jak używać bloków funkcyjnych? Zmodyfikujmy ten kwadrat tak, aby miał boki o długości 200 pikseli. Wskazówka: Kliknij na "edytuj", aby zmienić w edytorze funkcji "draw a square" (rysuj kwadrat) rozmiar kwadratu. Kliknij na "Zamknij", by wyjść z edytora funkcji. '
      Course 4 Artist Functions 9_instruction: Daliśmy Ci większość kodu, aby utworzyć funkcję. Jednak wydaje się, że czegoś brakuje. Czy potrafisz zakończyć tworzenie tego bloku funkcji?
      Course 4 Artist Functions challenge_instruction: Kliknij tutaj, aby ponownie zobaczyć wskazówki.
      Course 4 Artist Functions Inspiration_instruction: Kliknij tutaj, aby ponownie zobaczyć wskazówki.
      Course 4 Artist Functions inspire_instruction: Kliknij tutaj, aby ponownie zobaczyć inspirujący obraz.
      Course 4 Artist Inspire_instruction: "Czy potrzebujesz ponownie spojrzeć na inspirującą kompozycję lub na wskazówkę? Kliknij tutaj!\\r\n\\r\nW przeciwnym razie wykonaj własną kompozycję!"
      Course 4 Artist Params 1_instruction: Napisz funkcję, która rysuje kwadrat o boku 50 pikseli
      Course 4 Artist Params 10_instruction: 'Możesz wywoływać funkcje z wnętrza innych funkcji! Za pomocą swojej funkcji "draw a shape" (rysuj kształt), utwórz 3 kształty domów, każdy o 20 pikseli większy niż poprzedni, zaczynając od 50 pikseli. Pomocne może być użycie pętli licznikowej. '
      Course 4 Artist Params 11_instruction: 'Co z funkcją "pinweel" (wiatraczek), który przyjmuje trzy parametry - "sides" (boki), "length" (długość) i "repeat" (powtórz). Możesz obliczyć wielkość obrotu po każdym kształcie za pomocą tej samej matematyki, której użyłeś obliczenia wielkości obrotu dla kształtu "sides" (boki). Czy potrafisz odtworzyć ten obrazek? Oto wskazówka: każdy kształt ma długość 100 pikseli.'
      Course 4 Artist Params 12_instruction: 'Użyj funkcji "pinwheel" (wiatraczek), aby narysować każdy z tych kształtów. Bok każdego z obrazków ma długość 50.'
      Course 4 Artist Params 13_instruction: 'Czas na zabawę: Masz tutaj funkcje, które napisałeś i inne, abyś mógł pobawić się nimi. Narysuj coś niesamowitego!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Niesamowite, czy potrafisz narysować każdy z tych trójkątów przy użyciu tej nowej funkcji? Pierwszy z nich ma bok długości 25 pikseli, drugi 50 pikseli, a trzeci 75 pikseli. '
      Course 4 Artist Params 4_instruction: |
        Czy potrafisz dodać nową funkcję o nazwie "draw a square" (rysuj kwadrat)? 
        Podobnie, jak w przypadku rysowania trójkąta, powinna mieć parametr "length" (długość). Tym razem narysuj 3 kwadraty o bokach długości 25, 50 i 75 pikseli, oddalone od siebie o 100 pikseli.
      Course 4 Artist Params 5_instruction: |
        Użyj obu swoich nowych funkcji, aby narysować ten obrazek. Aby ułatwić to sobie, użyj pętli z parametrem "counter" (licznik).
        
      Course 4 Artist Params 6_instruction: 'Przeredaguj tę funkcję "draw a shape" (rysuj kształt). Ma ona już parametru "length" (długość). Teraz, dodaj parametr "sides" (boki). Pamiętaj, że kąt obrotu dla danego kształtu wynosi 360 podzielone przez liczbę boków, które zawiera. Wskazówka: długości poszczególnych kształtów wynoszą 100 pikseli dla trójkąta, 25 pikseli dla sześciokąta i 50 pikseli dla kwadratu. '
      Course 4 Artist Params 7_instruction: 'Czy potrafisz narysować ten kształt wypełniając znaki "???" Kwadrat i trójkąt mają boki o długości 100 pikseli, a sześciokąt - 75 pikseli. '
      Course 4 Artist Params 8_instruction: |
        Czy domyślasz się, jak narysować ten kształt? Oto podpowiedź: utwórz nową funkcję z 6 bokami, zwaną sześciokątem.
        
      Course 4 Artist Params 9_instruction: 'Czy pamiętasz, jak użyliśmy pętli z "counter" (licznikiem), ale z usuniętą pętlą wewnętrzną? Zabawmy się teraz i użyjmy funkcji "draw a shape" (rysuj kształt) z parametrami "sides" (boki) i "length" (długość). Czy potrafisz ponownie utworzyć te kształty? Licznik dla kwadratu powinien być 5/100/5, dla trójkąta - 10/100/10 i dla sześciokąta - 2/100/2.'
      Course 4 Artist Var 9_instruction: 'Oto jest algorytm do rysowania trójkąta. Zmodyfikuj go tak, aby używał zmiennej "sides" (boki). Zastąp liczbę 3 zmienną "sides" (boki). Wskazówka: Pamiętaj, aby użyć bloku "przypisz sides wartość".'
      Course 4 Artist Vars 1_instruction: Czy możesz mi pomóc narysować trójkąt? Wszystkie jego boki mają długość 100 pikseli.
      Course 4 Artist Vars 10_instruction: 'Tutaj jest algorytm, który rysuje trójkąt z mniejszych trójkątów. Czy mógłbyś go tak zmodyfikować, by używał zmiennej "sides" (boki) do narysowania każdego trójkąta? Przejrzyj kod i za każdym razem, gdy widzisz liczbę 3, zastąp ją przez zmienną "sides" (boki). Pamiętaj, aby użyć bloku "przypisz sides wartość".'
      Course 4 Artist Vars 11_instruction: 'Tutaj jest bardziej skomplikowany kod wykorzystujący pojęcia z ostatniej łamigłówki - co należy przypisać zmiennej "sides" (boki), aby narysować tę kompozycję złożoną z kwadratów?'
      Course 4 Artist Vars 12_instruction: 'Ustawmy wartość zmiennej "sides" (boki) na 5. Im więcej boków dodamy do tego algorytmu, tym większy otrzymamy rysunek! Mamy teraz nową zmienną o nazwie "length" (długość) i możemy jej użyć wszędzie tam, gdzie mamy "iść do przodu." Ustaw wartość zmiennej "length" na 75 dla tego kształtu.'
      Course 4 Artist Vars 13_instruction: "Kiedy kształt składa się z wielu boków, każdy bok powinien być krótszy, jeśli cały wzór ma zmieścić się na ekranie.\n\\r\nUtwórzmy jeszcze raz algorytm dla tego niesamowitego wzoru, lecz zamiast ręcznie ustawiać zmienną \"length\" (długość), użyjmy bloku matematycznego ze zmienną \"sides\" (boki), by zapewnić, że każdy kształt zmieści się prawidłowo. Obwód każdego wielokąta ma 300 pikseli. \\r\nJeśli potrzebujesz wskazówek - kliknij tutaj."
      Course 4 Artist Vars 14_instruction: "Czas na zabawę: Sprawdź, teraz Twój algorytm jest zagnieżdżony w dodatkowej pętli. Poeksperymentuj ze zmianą wartości dwóch zmiennych, by rysować fajne wzorki.\\r\n\\r\nBy uzyskać więcej efektów, pobaw się kolorami! Użyj losowych kolorów wewnątrz pętli, by zobaczyć, jak zmieniają Twój obrazek."
      Course 4 Artist Vars 2_instruction: 'Zamiast bloku "idź do przodu o 150," blok "idź" odwołuje się teraz do zmiennej "length" (długość). Czy mógłbyś ustawić wartość zmiennej "length" na 150, by narysować ten nowy trójkąt?'
      Course 4 Artist Vars 3_instruction: 'Tutaj jest pętla, która rysuje kwadrat, ale czegoś brakuje. Czy mógłbyś ją naprawić tak, aby używała zmiennej "length" (długość) do określania, jaka powinna być długość każdego boku? '
      Course 4 Artist Vars 4_instruction: 'Teraz chcę utworzyć prostokąt, który jest dwa razy wyższy niż szeroki. Mamy zmienną o nazwie "width" (szerokość), która ma mieć wartość 100. Czy mógłbyś użyć bloków matematycznych, by ukończyć ten kod?'
      Course 4 Artist Vars 5_instruction: 'Użyj zmiennej "sides" (boki), by kontrolować liczbę przebiegów pętli.'
      Course 4 Artist Vars 6_instruction: "Tutaj jest kod, który może posłużyć do narysowania dowolnego regularnego wielokąta. Pojawiła się nowa zmienna o nazwie \"sides\" (boki), która ma wartość 4. Czy potrafisz użyć tej zmiennej \"sides\" (wraz z blokiem matematycznym), aby zapewnić, że jest wykonywany odpowiedni skręt bez względu na liczbę boków w wielokącie?\\r\n\\r\nKliknij tutaj, aby wrócić na podpowiedź!"
      Course 4 Artist Vars 7_instruction: "Skorzystaj z tego, czego dowiedziałeś się w poprzedniej łamigłówce, aby utworzyć ten sześciokąt używając zmiennej \"sides\" (boki).\\r\n\\r\nZorientuj się, jak mógłbyś zmienić jedną wartość, by narysować trójkąt, kwadrat, pięciokąt lub ośmiokąt."
      Course 4 Artist Vars 8_instruction: 'Czas na zabawę: Poeksperymentuj z liczbę boków tego kształtu. Czy potrafisz zmienić algorytm tak, aby całkowity rozmiar kształtu pozostał taki sam niezależnie od liczby boków? Wskazówka: Jeśli podzielisz początkową długość przez liczbę boków, to długość każdego boku zmniejszy się, gdy liczba boków zwiększy się.'
      Course 4 Artist Vars 9_instruction: 'Zmodyfikuj ten algorytm, by rysując trójkąt używał zmiennej "sides" (boki) zamiast ustalonej liczby. Zastąp liczbę 3 zmienną "sides" i użyj bloku "przypisz sides wartość".'
      Course 4 Bee 1_instruction: 'Pszczółka nie może stwierdzić, czy to jest kwiat, czy plaster miodu. Najpierw użyj bloku "jeśli", by sprawdź, czy to jest kwiat, a następnie, zbierz nektar, jeśli jest to kwiat. '
      Course 4 Bee 2_instruction: 'Użyj bloku "jeśli-w przeciwnym razie", aby sprawdź każdy obiekt, czy jest to kwiat czy plaster miodu. Jeśli jest to kwiat, to zbierz nektar, a w przeciwnym razie zrób miód!'
      Course 4 Bee 3_instruction: 'Nieznany obiekt jest kwiatem lub plastrem miodu. Tym razem użyj bloku "jeśli-w przeciwnym razie", by zebrać nektar, jeśli jest to kwiat, w przeciwnym razie zrób miód (gdyż jest to plaster miodu).'
      Course 4 Bee 4_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektaru. Tutaj, blok "jeśli-w przeciwnym razie" jest połączony z innym blokiem "jeśli-w przeciwnym razie", by utworzyć instrukcję "jeśli-w przeciwnym razie/jeśli-w przeciwnym razie". Ukończ rozwiązanie, by zebrać nieznaną ilość nektaru.'
      Course 4 Bee 5_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektary. Dodaj blok "jeśli-w przeciwnym razie", aby utworzyć blok "jeśli-w przeciwnym razie/jeśli-w przeciwnym razie". Uzupełnij rozwiązanie, aby zebrać nieznaną ilości nektaru.'
      Course 4 Bee 6_instruction: 'Ten fioletowy kwiat może mieć 3, 2 lub 1 nektary. Utwórz blok "jeśli-w przeciwnym razie/jeśli-w przeciwnym razie", aby zebrać nieznaną ilości nektaru.'
      Course 4 Bee 7_instruction: Użyj wszystkiego, czego nauczyłeś się do tej pory, aby zebrać cały nektar. Fioletowy kwiat może mieć 3, 2 lub 1 nektary.
      Course 4 Bee For Loops 1_instruction: Użyj pętli, by zebrać cały nektar z każdego kwiatka.
      Course 4 Bee For Loops 10_instruction: Jeśli Twoja pętla odlicza do dołu, to przyrost jest odejmowany od licznika w każdej pętli. Jaki powinien być przyrost, aby zebrać 9, potem 6, a następnie 3 nektary?
      Course 4 Bee For Loops 11_instruction: Co złego jest w tej pętli? Czy potrafisz to naprawić, aby pszczółka zebrała cały nektar.
      Course 4 Bee For Loops 2_instruction: 'Oto nowy rodzaj pętli "dla", o nazwie "licz". Ta szczególna pętla liczy od 1 co 1 do 5 i za każdym razem powtarza zawartość pętli. Pomóż pszczółce zebrać nektar.'
      Course 4 Bee For Loops 3_instruction: 'Możesz rozwiązać tę łamigłówkę za pomoc pętli "licz" licząc od 1 co 1 do 3. Teraz zbierzmy trochę nektaru!'
      Course 4 Bee For Loops 4_instruction: Zbierz cały nektar z tych kwiatów. Ciekawe, czy istnieje łatwiejszy sposób, by to zrobić...
      Course 4 Bee For Loops 5_instruction: 'Ach, pętla "licz z" znacznie to ułatwia! Używając zmiennej "counter" (licznik) wykonaj w pętli blok "zbierz nektar" taką samą liczbę razy. Ufff! Dużo tych pętli. Masz cały potrzebny kod, przyjrzyj się, jak został utworzony, a następnie kliknij na "Uruchom", by zobaczyć, jak działa. '
      Course 4 Bee For Loops 6_instruction: 'Możesz również użyć pętli "licz", by odliczać do dołu. Spróbuj zebrać ten nektar odliczając w dół od 5 co 1 do 1.'
      Course 4 Bee For Loops 7_instruction: 'Użyj zmiennej "counter" (licznik) w pętli "licz z", by kontrolować, jak daleko iść w kierunku poziomym.'
      Course 4 Bee For Loops 8_instruction: Czy potrafisz użyć zmiennej w pętli, aby kontrolować ruch i zbieranie nektaru?
      Course 4 Bee For Loops 9_instruction: 'Ostatnia liczba w Twojej pętli "licz z" ma nazwę "przyrost", i za każdym obrotem pętli licznik pętli zmienia się o ten "przyrost". Spróbuj zebrać te kwiaty używając przyrostu o wartości 2.'
      Course 4 Bee Loops 5 NEW_instruction: Tutaj są trzy kwiaty. Czy potrafisz znaleźć układ instrukcji, które trzeba powtórzyć 3 razy, aby zebrać nektar z użyciem możliwie najmniejszej liczby bloków?
      Course 4 Bee Loops 5a NEW_instruction: Teraz użyj pętli, aby pomóc pszczółce zebrać cały nektar na jej drodze do plastra miodu, z jak najmniejszą liczbą bloków. Kiedy tam dotrze, nie zapomnij by zrobiła miód!
      Course 4 Bee Params 1_instruction: 'Użyj funkcji "get 3 nectar" (zbierz 3 nektary), w której pszczółka skręca, porusza się i zbiera nektar, a następnie wraca do początkowej lokalizacji. Zbierz cały nektar używając sekwencji funkcji "get 3 nectar".'
      Course 4 Bee Params 2_instruction: 'Zmodyfikuj funkcję "get 3 nectar" (zbierz 3 nektary) tak, by pszczółka skręcała do kwiatów w prawo zamiast w lewo.'
      Course 4 Bee Params 3 (copy 1)_instruction: 'Teraz kwiaty są po obu stronach! Może potrafisz tak użyć parametru, aby ta sama funkcja działała dla kwiatów po obu stronach. Dodano do funkcji parametr o nazwie "direction" (kierunek). Jeśli ten parametr jest równy 0, to należy skręcić w lewo, jeśli jest równy 1, to należy skręcić w prawo.'
      Course 4 Bee Params 3_instruction: 'Teraz kwiaty są po obu stronach! Dodaliśmy zmienne "left" (w lewo) i "right" (w prawo) i oraz parametr "direction" (kierunek) do funkcji "get 3 nectar" (zbierz 3 nektary). Zmodyfikuj tę funkcję tak, aby pszczółka skręcała w odpowiednim kierunku, kiedy zmienne "left" lub "right" są przekazywane do funkcji.  '
      Course 4 Bee Params 4 (copy 1)_instruction: Spróbuj używając swojej nowej funkcji zebrać wszystkie kwiaty. Pamiętaj, 0 = w lewo i 1 = w prawo.
      Course 4 Bee Params 4 - Two WhenRun_instruction: 'Używając swojej nowej funkcji spróbuj zebrać z wszystkich kwiatów. Pamiętaj, aby użyć zmiennych "left" (w lewo) i "right" (w prawo).'
      Course 4 Bee Params 4 backup_instruction: 'Byłoby miło, gdybyśmy mogli zebrać cały nektar za pomocą jednej funkcja. Spróbuj dodać nowy parametr do swojej funkcji o nazwie "nectars" (nektary), aby kontrolować ilości nektaru do zebrania. Prawdopodobnie będziesz chciał również zmienić nazwę funkcji!'
      Course 4 Bee Params 4_instruction: 'Spróbuj używając swojej nowej funkcji zebrać nektar z wszystkich kwiatów. Pamiętaj, aby użyć zmiennych "left" (w lewo) i "right" (w prawo).'
      Course 4 Bee Params 5_instruction: 'Zacznijmy od szkicu - czy potrafisz utworzyć nową funkcję o nazwie "zbierz 5 nektarów" z parametrem "kierunek"?'
      Course 4 Bee Params 6 (copy 1)_instruction: Spróbuj stosując swoją nową funkcję zebrać cały ten nektar.
      Course 4 Bee Params 6_instruction: 'Byłoby miło, gdybyśmy mogli zebrać cały nektar za pomocą jednej funkcja. Spróbuj dodać nowy parametr do swojej funkcji o nazwie "nectar units" (ilość nektarów), aby kontrolować ilości nektaru do zebrania. Prawdopodobnie będziesz chciał również zmienić nazwę funkcji!'
      Course 4 Bee Params 7 (copy 1)_instruction: Spróbuj stosując swoją nową funkcję zebrać cały ten nektar.
      Course 4 Bee Params 7_instruction: Spróbuj użyć swojej nowej funkcji, aby zebrać cały ten nektar.
      Course 4 Bee Params 8 Clone 2_instruction: Ah, teraz musimy sobie jeszcze poradzić z miodem! Jak zmienisz swoją funkcję, żeby albo zebrać nektar albo zrobić miód.
      Course 4 Bee Params 8 clone 3_instruction: Ah, teraz musimy sobie jeszcze poradzić z miodem! Jak zmienisz swoją funkcję, żeby albo zebrać nektar albo zrobić miód.
      Course 4 Bee Params 8 Clone_instruction: Ah, teraz musimy sobie jeszcze poradzić z miodem! Jak zmienisz swoją funkcję, żeby albo zebrać nektar albo zrobić miód.
      Course 4 Bee Params 8 new_instruction: Ah, teraz musimy sobie jeszcze poradzić z miodem! Jak zmienisz swoją funkcję, żeby albo zebrać nektar albo zrobić miód.
      Course 4 Bee Params 8_instruction: 'Wyzwanie: Teraz pojawił się miód! Zmodyfikuj swoją funkcję, by uwzględniała liczbę jednostek nektaru i liczbę jednostek miodu. Jak wykorzystasz te liczby, by decydować, co należy zrobić?'
      Course 4 Bee Params Ex_instruction: Spróbuj użyć swojej nowej funkcji, aby zebrać cały ten nektar.
      Course 4 Binary 1_instruction: Oto funkcja, która dla binarnego łańcucha złożonego z jedynek i zer, kieruje rolnikiem, aby skręcał z lewa na prawo, z góry do dołu, skręcał na kwadratach, gdzie liczba ma wartość zero. Uruchom ten kod, aby zobaczyć, jak rolnicy używają binarnych łańcuchów do tworzenia rysunku.
      Course 4 Binary 2_instruction: 'Powtórzenie 8 razy jakiego łańcucha binarnego spowoduje narysowanie tego obrazka? Wskazówka: liczba  "1" wypełnia otwór.'
      Course 4 Binary 3_instruction: Czy potrafisz narysować ten wzór powtarzając pojedynczy łańcuch binarny?
      Course 4 Binary 5 (copy 1)_instruction: Który łańcuch binarny, powtórzony 10 razy, posłuży do narysowania tego obrazu?
      Course 4 Binary 5_instruction: Który łańcuch binarny, powtórzony 10 razy, posłuży do narysowania tego obrazu?
      Course 4 Binary 6 (copy 1)_instruction: Który łańcuch binarny, powtórzony 10 razy, posłuży do narysowania tego obrazu?
      Course 4 Binary 6_instruction: Który łańcuch binarny, powtórzony 10 razy, posłuży do narysowania tego obrazu?
      Course 4 Binary 7_instruction: Który łańcuch binarny, powtórzony 10 razy, posłuży do narysowania tego obrazu?
      Course 4 Binary 8_instruction: 'Możesz wykonać większość tego obrazka powtarzając w pętli 5-cio bitową liczbę - następnie będziesz potrzebować 4-bitową liczbę, aby otrzymać prawy dolny róg.'
      Course 4 EC 1a_instruction: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!
      Course 4 EC 1b_instruction: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!
      Course 4 EC 2a_instruction: '** Ekstremalne Wyzwanie: ** Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!'
      Course 4 EC 2b_instruction: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!
      Course 4 EC 2c_instruction: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!
      Course 4 EC 2d_instruction: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!
      Course 4 EC 3_instruction: |
        Wykorzystaj to, czego nauczyłeś się na poprzednim poziomie, aby narysować taki oto rysunek.
        Uwaga: Kod stanie się prostszy, jeśli wprowadzisz parametry. 
      Course 4 EC 3a_instruction: 'Ekstremalne Wyzwanie: Żadnych reguł. Żadnych wskazówek. Po prostu wyzwanie!'
      Course 4 Maze 1_instruction: Doprowadź łego ptaka do świnki!
      Course 4 Maze 2_instruction: Unikaj TNT!
      Course 4 Maze 3_instruction: 'Zaprogramuj łego ptaka, aby dostał się do świnki. '
      Course 4 Maze 4_instruction: 'Spróbuj użyć bloku "powtórz", by użyć mniej bloków...'
      Course 4 Maze 5_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      Course 4 Maze 6_instruction: Czy potrafisz rozwiązać tę łamigłówkę używając możliwie najmniejszej liczby bloków?
      Course 4 Play Lab For Loops 2_instruction: Tym razem, spróbujmy policzyć, ile jest nieparzystych liczb między 1 a 100.
      Course 4 Play Lab Params 1_instruction: 'Tutaj jest funkcja o nazwie "jump" (skocz), która powoduje, że Twój główny bohater skacze do 100 pikseli. Użyj tej funkcji, by zebrać wszystkie flagi.'
      Course 4 Play Lab Params 10_instruction: "Dodaliśmy dla Ciebie jeszcze jedną funkcję. \\r\n\\r\nUżyj instrukcji \"jeśli\" i zaprogramuj swoją grę wywołując funkcję \"level_up\" (poziom wyżej), jeśli \"player_score\" (wynik gracza) przekroczy pewną liczbę. \\r\n\\r\nNa przykład: \"player_score\" > 6\\r\n\\r\nZagraj w tę grę i spowoduj, że przejdziesz poziom 4, aby przejść do następnej łamigłówki. "
      Course 4 Play Lab Params 2_instruction: "Mamy tutaj flagi, które są zbyt wysokie dla aktualnego skoku! Używaj strzałek \"do góry\" (up) i \"do dołu\" (down), by wielokrotnie skakać. \\r\n\\r\nMusimy dodać parametr \"height\" (wysokość) do naszej funkcji \"jump\" (podskocz). Strzałka do góry powinna powodować skok o 200 pikseli, a do dołu - tylko o 100 pikseli. \n\\r\n\\r\nWskazówka: Kliknij przycisk \"edytuj\" na funkcji \"jump\" i popraw ją, by używała parametru \"height\"."
      Course 4 Play Lab Params 3_instruction: 'Dodaliśmy kolejny parametr do funkcji "jump" (skocz), by mogła być użyta z innymi postaciami. Każda postać jest reprezentowana przez liczbę, począwszy od 1. Zmodyfikuj funkcję "jump", by używała parametru "actor" (postać) i zapewniała właściwy skok postaci. '
      Course 4 Play Lab Params 4_instruction: |
        Mamy tu funkcję, która nosi nazwę "patrol" (patrol).
        Zmień ją tak, by Kot poruszał się 400 pikseli w górę, po czym 400 pikseli w dół.
      Course 4 Play Lab Params 5_instruction: 'Zmień funkcję "patrol" (patrol) dodając parametr "actor" (postać), by można było wywołać tę funkcję dla każdej postaci na ekranie. Pamiętaj, postaciom odpowiadają liczby 1, 2 i 3.'
      Course 4 Play Lab Params 6_instruction: 'Dodaj kolejny parametr "speed" (prędkość) do funkcji "patrol" (patrol). Używając bloku "set speed" (ustaw prędkość) z nowym parametrem "speed", spróbuj pomóc Pingwinowi zdobyć obie flagi zanim inne duszki zdobędą chociaż jedną.'
      Course 4 Play Lab Params 7_instruction: "Zabawmy się. Przejrzyj ten kod i spróbuj określić, co robi każdy z bloków. \\r\n\\r\nJeśli już wiesz, użyj klawiszy ze strzałkami, by pokierować Psem, i zbierz wszystkie flagi."
      Course 4 Play Lab Params 8_instruction: 'Użyj bloku "kiedy postać dotyka", by wysłać Psa z powrotem do góry po lewej tylko wtedy, kiedy dotknie on jakąkolwiek inną postać.'
      Course 4 Play Lab Params 9_instruction: "Oto nasza gra z wcześniejszego etapu, ale większość kodu jest ukryta. Jest też nowa funkcja \"score_points\" (zdobądź punkty)\\r\n\\r\nZmień tę funkcję tak, aby parametr \"points\" (punkty) został dodany do zmiennej \"player_score\" (wynik gracza). \\r\n\\r\nWartość \"player_score\" powinna się zwiększać za każdym razem, kiedy Pies dosięgnie Kota sercami, i zmniejszać, kiedy Kot dosięgnie Psa sercami. \\r\n\\r\nUwaga:\nGdy skończysz kliknij \"Uruchom\", by uruchomić grę. Kiedy Pies zdobędzie 6 punktów, przejdziesz do następnej łamigłówki. "
      Course 4 Play Lab Vars 1_instruction: 'Tym razem nie musisz pisać żadnego kodu, wystarczy nacisnąć "Uruchom", aby zagrać! W tej grze jesteś Psem, który stara się zebrać więcej flag niż Kot. Użyj strzałki w dół do poruszania psa. Naciśnij przycisk "Zakończ", po zakończeniu gry.'
      Course 4 Play Lab Vars 2_instruction: 'Wyścig w poprzedniej łamigłówce nie był zbyt uczciwy! Zmień wartość zmiennej "dog_speed" (prędkość psa), aby być pewnym, że możesz zebrać więcej flag niż kot. Wygrywa ten, kto pierwszy zbierze 10 flag!'
      Course 4 Play Lab Vars 3_instruction: Oto nowy rodzaj gry! Używaj strzałek w lewo i w prawo, aby się przesunąć, i strzałki do góry, aby podskoczyć. Spróbuj, czy potrafisz zebrać wszystkie flagi.
      Course 4 Play Lab Vars 4_instruction: 'Używamy teraz zmiennej "height" (wysokość) do ustalenia, jak wysoko pies może podskoczyć. Zaktualizuj wartość zmiennej "height" (wysokość) tak, że pies podskakuje wystarczająco wysoko, aby dosięgnąć wszystkich flag. Wskazówka: nowe flagi są na wysokości 200 pikseli.'
      Course 4 Play Lab Vars 5_instruction: 'Zbudujmy grę! Najpierw potrzebujemy wyniku. Zmodyfikuj kod z poprzedniej łamigłówki, aby ustawić wynik na 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: 'Spoko, mamy zmienną na wynik, ale jak z niej skorzystać? A co, jeśli zwiększysz zmienną wynik za każdym razem, kiedy trafisz przeciwnika? Użyj zdarzenia "kiedy postać 2 dotyka czegoś", by uaktualnić wynik, kiedy pocisk trafi kota. Możesz zwiększyć wartość wyniku (points) przypisując points = points + 1. Aby ukończyć tę grę, otrzymaj wynik równy 10 (powiększając go co jeden!).'
      Course 4 Play Lab Vars 6_instruction: "Użyj strzałki w prawo, aby strzelać sercami. \\r \\r \nJak powinniśmy zdobywać punkty w naszej grze? Dodaj 1 do zmiennej \"points\" za każdym razem, gdy Pies trafi Kota sercem. Użyj zdarzenia \"kiedy postać 2 dotyka czegoś\", by uaktualnić wynik, Możesz zwiększyć wartość wyniku (points) przypisując \"points = points + 1\". Aby ukończyć tę grę, otrzymaj wynik równy 10 (powiększając go co jeden!)."
      Course 4 Play Lab Vars 7_instruction: 'Ładnie, teraz spowodujmy, że ta gra nie jest zbyt łatwa - za każdym razem, gdy pies (postać 1) zostaje trafiony żółtymi sercami przez kota (postać 2) powinieneś stracić punkt. Zacznij z 10 punktami, aby nie było to zbyt trudne. Do ukończenia tej łamigłówki, niech Twój wynik zmniejszy się od 10 do 0.'
      Course 4 Play Lab Vars 8 (copy 1)_instruction: 'OK, ostatnia już rzecz dla tej gry - tak ustawmy, by gracz mógł wygrać (lub przegrać). Użyj pętli "powtarzaj w nieskończoność" (forever) do sprawdzania wyniku (score) - jeśli wynik jest większy niż 20, to powoduj zniknięcie wroga. Jeśli wynik jest mniejszy niż 0, to powoduj zniknięcie gracza. Kliknij przycisk "Zakończ", gdy gra działa, jak tego chcesz.'
      Course 4 Play Lab Vars 8_instruction: 'Ustawmy tę grę tak, aby Pies mógł wygrać (lub przegrać). Za pomocą pętli "powtarzaj w nieskończoność" sprawdzaj wartość wyniku (score) - jeśli wynik jest większy niż 20, to powoduj, że wróg (Kot) znika. Jeśli wynik jest mniejszy od 0, to powoduj, że gracz (Pies) znika. Kliknij przycisk "Zakończ", gdy gra działa, jak chcesz go.'
      Course 4 Play Lab Vars 9_instruction: "Czas na zabawę! Mamy tutaj wszystkie zmienne, których używaliśmy na tym etapie, jak również kilka dodatkowych, gdyby były potrzebne. \\r\n\\r\nMamy teraz w przyborniku tak wiele bloków, że powinny być uporządkowane. Każdy z nich przydzieliliśmy więc do odpowiedniej kategorii. Poświęć trochę czasu, by poznać, jakie bloki są dostępne. Kiedy już przejrzysz wszystko, utwórz grę lub historyjkę, która korzysta z powtórzeń, zmiennych i zdarzeń. \\r\n\\r\nWskazówka: przewiń ekran do dołu, aby zobaczyć wszystkie polecenia w polu roboczym."
      Course 4 Play Lab Vars_instruction: 'OK, ostatnia już rzecz dla tej gry - tak ustawmy, by gracz mógł wygrać (lub przegrać). Użyj pętli "powtarzaj w nieskończoność" (forever) do sprawdzania wyniku (score) - jeśli wynik jest większy niż 20, to powoduj zniknięcie wroga. Jeśli wynik jest mniejszy niż 0, to powoduj zniknięcie gracza.'
      Course 4 Play Labs For Loops 1_instruction: 'Spowoduj, aby pies wypowiadał każdą liczbę między 1 i 100. Użyj pętli i bloku "counter" (licznik), aby wartość "counter" była wypowiadana przy każdym obrocie pętli.'
      Course 4 Play Labs For Loops 2_instruction: Tym razem, spróbujmy policzyć, ile jest nieparzystych liczb między 1 a 100.
      Course 4 Play Labs For Loops 3_instruction: Licząc z większym krokiem (przyrostem) możemy w tym samym czasie policzyć do większej liczby. Spowoduj, by pies liczył od 10 co 10 aż do 1000.
      Course 4 Play Labs For Loops 4_instruction: Zmiana wartości przyrostu może być pomocna, ale wciąż liczymy liniowo (każda liczba jest w takiej samej odległości od poprzedniej). A co zrobić, jeśli chcielibyśmy liczyć wykładniczo? Bez zmiany ustawień w tej pętli, czy potrafisz liczyć 1, 4, 9, 16, 25... (kolejne kwadraty)?
      Course 4 Play Labs For Loops 4a_instruction: "Teraz połączmy zmienne z Etapu 7 z Twoją zmienną \"counter\" (licznika), aby stworzyć coś magicznego.  \\r\n\\r\nW tej łamigłówce, Pies będzie odliczał od 0 do 1000, używając zmiennej \"przyrost\". Na początku swojego kodu ustaw wartość tej zmiennej na 10 i zobacz, co się stanie."
      Course 4 Play Labs For Loops 5_instruction: 'W poprzedniej łamigłówce liczyliśmy kwadraty kolejnych liczb. Spróbuj zamienić "counter ^ 2" na "counter ^ 3", aby liczyć sześciany kolejnych liczb (1, 8, 27, 64, 125, 216, 343...)'
      Course 4 Play Labs For Loops 5a_instruction: |
        W tym puzzlu, pies będzie zatrzyma Twój czas.
        Pies będzie przeliczał od 0 do 30 poprzez "inkrementację". Zmienna "inkrementacji" na początku przyjmie wartość 1.
        
        Czy potrafisz zrobić to tak, aby za każdym razem, kiedy klikniesz na psa, zmienna inkrementacji zwiększyła się o 2? Kliknij strzałkę do przodu aby uruchomić pętlę.
        
        Uruchom pętlę kilka razy, klikając na psa przed każdą z nich.
      Course 4 Play Labs For Loops 6_instruction: 'Przypomnij sobie, że liczba pierwsza to liczba całkowita, która dzieli się tylko przez siebie i przez 1. Użyj funkcji "is_prime" (czy to liczba pierwsza), by wypowiadać tylko liczb pierwsze miedzy 1 a 100.'
      Course 4 Play Labs For Loops 6a_instruction: "Pies będzie nadal pilnował czasu licząc za pomocą pętli \"dla\" używając zmiennej \"przyrost\", ale teraz wmieszamy w to jeszcze Czarodzieja.  Czy możesz zmienić kod tak, aby zmienna \"przyrost\" zwiększała się o dwa za każdym razem, gdy klikniemy na Czarodzieju?\\r\n\\r\nUważaj! Czarodziej porusza się bardzo szybko!"
      Course 4 Play Labs For Loops 7_instruction: 'Czy mógłbyś użyć pętli "dla", aby mi pomóc wypowiedzieć ciąg: 1, 4, 7, 10, 13, 16, 19, 22, 25?'
      Course 4 Play Labs For Loops 7a_instruction: "Nareszcie dokądś zmierzamy! Co powiesz, byśmy zaczęli liczyć, ile razy możemy kliknąć na Czarodzieju zanim Pies osiągnie 30?\\r\n\\r\nZakończ dodając bloki do Czarodzieja tak, by za każdym razem, kiedy się na niego kliknie, zmienna \"clicked\" (kliknięty) zwiększa się o jeden. Możesz pominąć \"przyrost\" na razie.\\r\n\\r\nPies zacznie liczyć, kiedy klikniesz \"Uruchom\"."
      Course 4 Play Labs For Loops 8_instruction: "Teraz pomóż postaciom poruszać się, gdy liczą.  \\r \\r Pies powinien poruszać się i liczyć co 2 (counter + 2) za każdym razem.  Kot będzie przemieszczał się i liczył mnożąc przez 2 (counter * 2) za każdym razem. Pingwin będzie przemieszczał się i podnosił do potęgi 2 (counter ^ 2) za każdym razem.  Kto pierwszy dojdzie do swoich flag?"
      Course 4 Play Labs For Loops 8a_instruction: "Aby zakończyć naszą grę, musimy przywrócić zmienną \"przyrost\"! Powiążmy ją z poziomem gry.\\r\n\\r\n1) Śledź, ile razy Czarodziej będzie kliknięty \\r\n2) Jeśli Czarodziej zostanie kliknięty co najmniej 10 razy, zanim pies doliczy do 30, zwiększ \"przyrost\" o 1 i zacznij od nowa.\\r\n3) Jeśli Czarodziej nie zostanie kliknięty co najmniej 10 razy, gra kończy się."
      Course 4 SCF 1_instruction: Użyj sugerowanych funkcji, aby narysować cztery rzędy sześciokątów. Czy widzisz, jak nasze parzyste rzędy są przesunięte w prawo?
      Course 4 SCF 1a_instruction: Spróbuj zebrać cały nektar, używając jak najmniejszej liczby bloków.
      Course 4 SCF 1b_instruction: Spróbuj zebrać cały nektar, używając jak najmniejszej liczby bloków.
      Course 4 SCF 2_instruction: |
        Wykorzystaj to, czego nauczyłeś się na poprzednim poziomie, aby narysować taki oto rysunek.
        Uwaga: Kod stanie się prostszy, jeśli wprowadzisz parametry. 
      Course 4 SCF 3 Fail 1_instruction: Czy wiesz, jak...
      Course 4 SCF 3 Fail 2_instruction: Czy wiesz, jak...
      Course 4 SCF 3_instruction: |
        Wykorzystaj to, czego nauczyłeś się na poprzednim poziomie, aby narysować taki oto rysunek.
        Uwaga: Kod stanie się prostszy, jeśli wprowadzisz parametry. 
      Course 4 SCFL 1_instruction: Rozwiąż tę łamigłówkę używając jak najmniejszej liczby bloków.
      Course 4 SCFL 1a_instruction: Czy pomożesz Skratowi dotrzeć do jego żołędzia, używając jak najmniejszej liczby bloków?
      Course 4 SCFL 1b_instruction: Czy pomożesz Skratowi dotrzeć do jego żołędzia, używając jak najmniejszej liczby bloków?
      Course 4 SCFL 2_instruction: Rozwiąż tę łamigłówkę używając jak najmniejszej liczby bloków.
      Course 4 SCFL 3_instruction: Czy wiesz, jak odtworzyć ten rysunek?
      Course 4 SCFL 4_instruction: Czy wiesz, jak odtworzyć ten rysunek?
      Course 4 SCFL 5_instruction: Czy wiesz, jak odtworzyć ten rysunek?
      Course 4 SCFL 6_instruction: Czy wiesz, jak odtworzyć ten rysunek używając pojedynczej pętli?
      Course 4 SCFL 7_instruction: Artysta chce łapać fale! Czy wiesz, jak odtworzyć ten rysunek?
      Course 4 SCFP 1_instruction: Utwórz funkcję z parametrami, która pozwoli artyście skoczyć do przodu i do tyłu o x pikseli oraz w górę i w dół o y pikseli (stosując liczby dodatnie i ujemne).
      Course 4 SCV 1_instruction: Kliknij tutaj, aby ponownie zobaczyć instrukcje.
      Course 4 SCV 2_instruction: Kliknij tutaj, aby ponownie zobaczyć instrukcje.
      Course 4 SCV 3_instruction: "Teraz gra w oznaczanie!  Zaznacz Kota, aby zdobyć 2 punkty. Znacz Pingwina, aby zdobyć 3 punkty.  Uzyskaj 10 punktów, aby wygrać! \\r Ale uważaj, gdy Kot i Pingwin oznaczą się nawzajem, zabierają punkty z powrotem. \\r \\r Dodaj niezbędne bloki, by gra przebiegała, jak to zostało wyjaśnione.  Jak spowodujesz, by Pies poruszał się we wszystkich kierunkach przy użyciu klawiszy ze strzałkami?  Jak będziesz dodawać punkty, kiedy Pies zaznaczy Kota lub Pingwina?  Jak będziesz odejmować punktów, kiedy dotkną się Kot z Pingwinem?"
      Course 4 SCV 4_instruction: Rozwiąż tę łamigłówkę używając jak najmniejszej liczby bloków.
      Course 4 SCV 5_instruction: Rozwiąż tę łamigłówkę używając jak najmniejszej liczby bloków.
      Course 4 SCV 6_instruction: Kliknij tutaj, aby ponownie zobaczyć instrukcje.
      Course 4 SCVP 1_instruction: Utwórz funkcję z parametrami, która pozwoli artyście skoczyć do przodu i do tyłu o x pikseli oraz w górę i w dół o y pikseli (stosując liczby dodatnie i ujemne).
      Course 4 Variables Assessment_instruction: Czy mógłbyś utworzyć ten obraz używając zmiennej dla boków? Każda linia powinna mieć długość 50 pikseli.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSD Hackathon Pt 1_instruction: (Click to see full instructions)
      CSD Hackathon Pt 2_instruction: (Click to see full instructions)
      CSD Hackathon Week 1_instruction: (Click to see full instructions)
      CSD Hackathon Week 2_instruction: (Click to see full instructions)
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Frame Rate_instruction: "Slow down Gamelab Gary's animation with frameRate()"
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape function and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: 'Create your own variable '
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Teraz utwórzmy 20 nakładających się na siebie okręgów, skręcając o 18 stopni przy każdym okręgu.
      frozen circle function with parameter_instruction: 'Tutaj jest blok "utwórz okrąg", który rysuje okręgi o różnych rozmiarach. Czy możesz przy jego pomocy narysować mały okrąg o rozmiarze 5 i duży o rozmiarze 10?'
      frozen circle function_instruction: 'Użyj nowego bloku "utwórz okrąg", aby narysować 10 nakładających się na siebie okręgów. Nie zapomnij skoczyć do przodu między okręgami.'
      frozen circle_instruction: 'Okrąg ma specjalny kształt. Czy domyślisz się, jaką liczbą należy zastąpić znak zapytania w bloku "powtórz"?'
      frozen cross rotate dense_instruction: 'Powtórzmy to 90 razy! Ile razy 90 zmieści się w 360? Wskazówka: To naprawdę mała liczba.'
      frozen cross rotate_instruction: Teraz spróbuj powtórzyć to 10 razy. O ile stopni obracasz się pomiędzy liniami?
      frozen cross_instruction: 'Aby narysować znak plusa, umieść te polecenia w bloku "powtórz". Czy zauważyłeś, że Elsa może poruszać się do przodu i do tyłu?'
      frozen diamond mini snowflake_instruction: 'Czy wiesz, że każdy płatek śniegu ma inny kształt? Utwórzmy nowy płatek przy użyciu bloku "powtórz", rysując równoległobok 4 razy i obracając się w prawo o 90 stopni między kolejnymi równoległobokami.'
      frozen diamond snowflake_instruction: 'Teraz stwórzmy nowy płatek śniegu, używając bloku "powtórz", żeby powtórzyć rysowanie równoległoboku 10 razy, obracając się między nimi w prawo o 36 stopni.'
      frozen diamond_instruction: 'Umieść te bloki w bloku "powtórz", aby utworzyć równoległobok. Wygląda jak prostokąt, ale ma różne kąty. Ten ma kąty 60 i 120 stopni, zamiast 90 stopni.'
      frozen freeplay_instruction: Zostałeś oficjalnie mistrzem sztuki! Stwórz zimową krainę cudów.
      frozen line_instruction: Cześć! jestem Elsa z Arendelle. Proszę pomóż mi utworzyć pojedynczą linię.
      frozen perpendicular_instruction: 'Teraz sprawdźmy, czy potrafisz utworzyć dwie linie, które są pod kątem 90 stopni. Będziesz musiał użyć bloku "skręć" razem z blokiem "idź".'
      frozen snowflake branch_instruction: 'Spróbuj użyć bloku "utwórz ramię śnieżynki", aby narysować trzy ramiona, które przypominają płatek śniegu.'
      frozen snowflake full_instruction: Teraz powtórzymy to 8 razy, aby utworzyć piękny płatek śniegu!
      frozen snowflower_instruction: Skomplikowane wzory śnieżek mogą być tworzone przy użyciu bardzo prostych kształtów. Czy potrafisz utworzyć wzór, powtarzając 5 okręgów o rozmiarze 5 oraz 5 okręgów o rozmiarze 10?
      frozen square iterative_instruction: Wygląda na to, że jesteśmy w połowie drogi, by narysować kwadrat. Połącz 4 linie, by powstał kwadrat.
      frozen square loop 3x_instruction: Utwórzmy trzy kwadraty, obracając się po każdym kwadracie. Upewnij się, że obrót przed każdym nowym kwadratem wynosi 120 stopni.
      frozen square loop_instruction: 'Cześć. Jestem Anna z Arendelle! Narysujmy kwadrat używając bloku "powtórz", który zmniejszy nam liczbę potrzebnych bloków. Ile razy (???) należy powtórzyć blok "powtórz", aby utworzyć kwadrat?'
      frozen square snowflake_instruction: 'Czy potrafisz narysować śnieżynkę używając bloku "powtórz", powtarzając tworzenie kwadratu 10 razy i bloku "skręć" aby obrócić się o 36 stopni po każdym kwadracie?'
      Infinity_catch_instruction: 'Czy za pomocą klawiszy ze strzałkami możesz spowodować, że Elsa ("postać 2") dogoni Annę?'
      Infinity_finale_instruction: Utwórz cokolwiek, co Ci się podoba, i podziel się tym!
      Infinity_move_collide_instruction: 'Hiro to "postać 1".  Przenieś go blisko Baymax i zagraj jakiś dźwięk, kiedy się dotkną.'
      Infinity_move_directions_instruction: 'Baymax to "postać 2".  Dodaj bloki "przenieś postać", a następnie przenieś Baymax za pomocą klawiszy ze strzałkami.  Spowoduj, że dotknie dwie inne postacie.'
      Infinity_move_right_instruction: 'Hiro to "postać 1". Użyj bloku "przenieś postać", aby Hiro dotknął Baymax.'
      Infinity_repeat_instruction: 'Użyj bloku "powtarzaj w nieskończoność", aby Anna przeniosła się w górę i w dół 400 pikseli.'
      Infinity_say_instruction: 'Spowoduj przy użyciu bloku "powiedz", by Anna powiedziała "Hi there.".'
      Infinity_shoot_instruction: 'Baymax to "postać 2".  Spowoduj, by Baymax rzucił rakietą w Hiro.'
      Infinity_shoot_directions_instruction: 'Hiro to "postać 3".  Spowoduj, by Hiro rzucił rakietą w każdą z czterech postaci. Odczekaj sekundę między dwoma rzutami.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Dotknij nawet więcej płatków śniegu!
      Infinity_touch_four_instruction: Przenieś Annę w górę, do dołu na lewo i na prawo, aby dotknęła każdego z czterech płatków śniegu.
      Infinity_touch_score_instruction: 'Dodaj punkt do wyniku Anny, kiedy dotyka płatka śniegu.  Następnie kliknij "Uruchom" i pokieruj nią, aby dotknęła każdy płatek śniegu raz.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Narysuj krótką linię do góry a długą w prawo!
      K-1 artist 1 level 10_instruction: 'Narysuj przerywaną linię używając obu bloków "skocz" i "rysuj"'
      K-1 artist 1 level 9_instruction: Narysuj to używając trzech linii
      K-1 Artist Loops 1_instruction: 'Narysuj tę linię poruszając się na wschód (E - East) 4 razy.'
      K-1 Artist Loops 2_instruction: 'Czy potrafisz narysować taką samą linię używając pętli ("powtórz")?'
      K-1 Artist Loops 3_instruction: Czy potrafisz powtórzyć te bloki, by narysować 6 linii?
      K-1 Artist Loops 4_instruction: Czy pętla może nam pomóc narysować szczyt tego zamku?
      K-1 Artist Loops 5_instruction: Co należy powtórzyć 4 razy, by narysować te schody?
      K-1 Artist Loops 6_instruction: 'To wymaga dwóch pętli: jednej, by wejść po schodach, drugiej, by zejść schodami.'
      K-1 Artist Loops 7_instruction: Czu potrafisz ukończyć ten wzór za pomocą dwóch pętli?
      K-1 Artist Loops 8_instruction: Te schody mają dłuższe stopnie.
      K-1 Artist Loops 9_instruction: 'Sprawdzian: Użyj pętli do rysowania schodów'
      K-1 Artist Loops Free Play_instruction: 'Czas na zabawę: narysuj coś ciekawego!'
      K-1 Artist1 1_instruction: Narysuj stopę człowieka za pomocą jednej linii
      K-1 Artist1 10_instruction: 'Narysuj przerywaną linię używając obu bloków "rysuj" i "skocz"'
      K-1 Artist1 2_instruction: Dorysuj kotu wąsy złożone z dwóch linii!
      K-1 Artist1 3_instruction: Narysuj dwie linie na wschód i dwie linie na północ, aby zakończyć rysowanie domu!
      K-1 Artist1 4_instruction: Dorysuj linie w prawo, do góry i na dół, by narysować zamek!
      K-1 Artist1 5.5_instruction: Zakończ rysowanie trzeciej wieży zamku używając krótkich linii
      K-1 Artist1 5_instruction: Narysuj łodygę tego kwiatka używając dwóch linii!
      K-1 Artist1 6_instruction: 'Ukończ ten obrazek przy użyciu bloku "skocz"!'
      K-1 Artist1 7_instruction: Rysuj i skacz, by narysować przerywaną linię.
      K-1 Artist1 8_instruction: Rysuj i skacz, by narysować przerywaną ścieżkę do skarbu X.
      K-1 Artist1 9_instruction: Rysuj i skacz, by utworzyć przerywaną linię
      K-1 Artist1 Assessment 1_instruction: Narysuj krótkie i długie linie!
      K-1 Artist1 Assessment 2_instruction: Narysuj krótkie linie przerywane!
      K-1 Artist2 1_instruction: Narysuj kwadrat poniżej trójkąta.
      K-1 Artist2 2_instruction: Skocz i narysuj kwadrat obok domu.
      K-1 Artist2 3_instruction: Narysuj kwadrat nad innym kwadratem
      K-1 Artist2 4_instruction: Narysuj prostokąt, aby ukończyć most.
      K-1 Artist2 5_instruction: Narysuj prostokąt, aby ukończyć podpory mostu
      K-1 Artist2 6_instruction: Narysuj dwa kwadraty, aby utworzyć prostokąt!
      K-1 Artist2 Assessment1_instruction: 'Sprawdzian: Narysuj kwadrat obok innego kwadratu.'
      K-1 Artist2 Free Draw_instruction: Narysuj cokolwiek!
      K-1 Artist2_7_instruction: Narysuj prostokąt, aby utworzyć górną szufladę w kredensie (garderobie)!
      K-1 Bee 1_instruction: Przenieś mnie do kwiatka, zbierz nektar, a następnie przenieś mnie do plastra miodu i zrób miód
      K-1 Bee 10_instruction: Pobierz cztery nektary i zrób dwa miody!
      K-1 Bee 11.5_instruction: Pobierz cztery nektary, by zrobić cztery miody!
      K-1 Bee 11_instruction: Zbierz trzy nektary i następnie zrób jeden miód
      K-1 Bee 12_instruction: Zbierz trzy nektary i następnie zrób dwa miody!
      K-1 Bee 13_instruction: Zbierz trzy nektary i następnie zrób jeden miód!
      K-1 Bee 14_instruction: Doprowadź mnie do nektaru, weź go, doprowadź mnie do miodu i zrób miód
      K-1 Bee 15_instruction: Zbierz dwa nektary, by zrobić dwa miody!
      K-1 Bee 2_instruction: Przenieś mnie do kwiatka, zbierz nektar, a następnie przenieś mnie do plastra miodu i zrób miód
      K-1 Bee 3_instruction: Przenieś mnie do kwiatka, zbierz nektar, a następnie przenieś mnie do plastra miodu i zrób miód
      K-1 Bee 4_instruction: Zbierz dwa nektary i następnie zrób dwa miody!
      K-1 Bee 5_instruction: Zbierz trzy nektary i następnie zrób trzy miody!
      K-1 Bee 6_instruction: Zbierz dwa nektary i następnie zrób dwa miody!
      K-1 Bee 7_instruction: Zbierz trzy nektary i następnie zrób dwa miody!
      K-1 Bee 8_instruction: Zbierz dwa nektary i następnie zrób dwa miody!
      K-1 Bee 9_instruction: Zbierz dwa nektary i następnie zrób dwa miody!
      K-1 Bee Assessment 1_instruction: Zbierz nektar, aby zrobić miód!
      K-1 Bee Assessment 2_instruction: Zbierz nektar, aby zrobić miód!
      K-1 Bee Loops 1_instruction: Zbierz nektar, aby zrobić miód!
      K-1 Bee Loops 10_instruction: Zbierz cały nektar i zrób cały miód.
      K-1 Bee Loops 11_instruction: Zbierz cały nektar i miód!
      K-1 Bee Loops 12_instruction: Zbierz cały nektar i cały miód.
      K-1 Bee Loops 2_instruction: 'Użyj pętli "powtórz", aby przesunąć się a później zebrać nektar i zrobić miód!'
      K-1 Bee Loops 3_instruction: 'Użyj trzech pętli "powtórz", aby zebrać nektar i zrobić miód!'
      K-1 Bee Loops 4_instruction: 'Użyj pętli "powtórz", aby zebrać nektar, zrobić miód i przesunąć się!'
      K-1 Bee Loops 5_instruction: 'Użyj pętli "powtórz", aby zebrać nektar i zrobić miód!'
      K-1 Bee Loops 6_instruction: 'Użyj pętli "powtórz", aby zebrać nektar, zrobić miód i przesunąć się!'
      K-1 Bee Loops 7_instruction: Zbierz nektar i zrób miód!
      K-1 Bee Loops 8_instruction: Zbierz nektar i zrób miód!
      K-1 Bee Loops 9_instruction: Zbierz cały nektar i zrób cały miód.
      K-1 Bee Loops Assessment 1_instruction: Zbierz nektar, aby zrobić miód i użyj pętli, aby się przemieszczać!
      K-1 Bee Loops Assessment 2_instruction: Za pomoc pętli, zbierz nektar, by zrobić miód!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: 'Zbuduj trzy poziomową  piramidę. Nie dajemy Ci żadnej podpowiedzi, użyj danych bloków, aż otrzymasz tę piramidę!'
      k-1 maze 1_instruction: 'Czy mógłbyś przenieść mnie na zachód (W - West), aby dotrzeć do świnki?'
      K-1 Maze 10_instruction: 'Obejdź TNT, aby doprowadzić mnie do świnki! '
      K-1 Maze 11_instruction: 'Znajdź drogę i doprowadź mnie do tej głupiej świnki. Unikaj TNT, bo inaczej pióra będą latać! Wskazówka: Ona jest na południe od mnie.'
      K-1 Maze 2_instruction: 'Przenieś mnie na wschód (E - East), aby doprowadzić mnie do świnki!'
      K-1 Maze 3_instruction: 'Przenieś mnie na południe (S - South), aby doprowadzić mnie do świnki!'
      K-1 Maze 4_instruction: 'Przenieś mnie na północ (N - North), aby doprowadzić mnie do świnki!'
      K-1 Maze 5_instruction: 'Przenieś mnie na wschód (E - East), aby doprowadzić mnie do świnki!'
      K-1 Maze 6_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 7_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 8_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze 9_instruction: Przenieś mnie w jedną stronę, a później w drugą, by doprowadzić mnie do świnki!
      K-1 Maze Assessment 1_instruction: 'Sprawdzian: Doprowadź mnie do świnki!'
      K-1 Maze Assessment 12_instruction: Poziom Sprawdzianu
      K-1 Maze Assessment 13_instruction: Poziom Sprawdzianu
      K-1 Maze Assessment 2_instruction: 'Sprawdzian: Doprowadź mnie do świnki!'
      K-1 maze debug 1_instruction: Zmień kod, aby doprowadzić mnie do świnki!
      K-1 maze debug 10_instruction: Napraw ten program przestawiając lub zmieniając bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 11_instruction: "To jest test! \\r Napraw ten program przestawiając lub zmieniając bloki, aby doprowadzić mnie do świnki"
      K-1 maze debug 2_instruction: Zorientuj się, czego brakuje, a następnie dodaj bloki, by doprowadzić mnie do świnki!
      K-1 maze debug 3_instruction: Coś tutaj nie gra. Usuń bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 4_instruction: Przejrzyj te bloki i popraw je! Wydaje mi się, będę podążać w złym kierunku.
      K-1 maze debug 5_instruction: Napraw ten program przestawiając lub dodając bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 6_instruction: Napraw ten program przestawiając lub zmieniając bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 7_instruction: Napraw ten program przestawiając lub zmieniając bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 8_instruction: Napraw ten program przestawiając lub dodając bloki, aby doprowadzić mnie do świnki!
      K-1 maze debug 9_instruction: Napraw ten program przestawiając lub zmieniając bloki, aby doprowadzić mnie do świnki!
      K-1 Maze debug Assessment 1_instruction: 'Sprawdzian - Napraw ten program przestawiając lub dodając bloki, aby doprowadzić mnie do świnki!'
      K-1 Maze Loops 1_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops 10_instruction: 'Doprowadź mnie do świnki! Użycie pętli "powtórz" ułatwi Ci zadanie.'
      K-1 Maze Loops 11_instruction: "Doprowadź mnie do świnki! \\r Użycie pętli \"powtórz\" ułatwi Ci zadanie."
      K-1 Maze Loops 12_instruction: 'Doprowadź mnie do świnki! Użycie pętli "powtórz" ułatwi Ci zadanie.'
      K-1 Maze Loops 2_instruction: 'Użyj bloku "powtórz", aby doprowadzić mnie do świnki!'
      K-1 Maze Loops 3_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtórz".'
      K-1 Maze Loops 4_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops 5_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtórz".'
      K-1 Maze Loops 6_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtórz".'
      K-1 Maze Loops 7_instruction: 'Doprowadź mnie do świnki! Użyj pętli "powtórz".'
      K-1 Maze Loops 8_instruction: 'Użyj pętli "powtórz", aby doprowadzić mnie do świnki.'
      K-1 Maze Loops 9_instruction: Doprowadź mnie do świnki!
      K-1 Maze Loops Assessment 1_instruction: 'Zobacz, czego nauczyliśmy się! Użyj pętli "powtórz", aby doprowadzić mnie do świnki!'
      K-1 Maze Loops Assessment 2_instruction: 'Użyj pętli "powtórz", aby doprowadzić mnie do świnki!'
      K-1 Maze Multi 14_instruction: Poziom Sprawdzianu
      K-1 Maze Multi 15_instruction: Poziom Sprawdzianu
      K-1 Maze Sequence Assessment 1_instruction: "Zobacz, czego nauczyliśmy się!\\r Idź w jedną stronę, a później w drugą, by doprowadzić mnie do świnki."
      K-1 Maze Sequence Assessment 2_instruction: Idź w jedną stronę, a później w drugą, by doprowadzić mnie do świnki.
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: (Click to see full instructions)
      Middle School Hackathon Pt 2_instruction: (Click to see full instructions)
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Narysuj coś niesamowitego! Twój kod zostaje zapisany jako projekt i możesz wrócić do niego w dowolnym momencie.
      NEW Course 4 Artist Functions 1_instruction: 'Czy stosując pętlę "powtórz" potrafisz narysować kwadrat, który ma boki o długości 100 pikseli?'
      NEW Course 4 Artist Functions 10.1_instruction: Użyj funkcji z poprzednich łamigłówek, aby narysować ten wzór.
      NEW Course 4 Artist Functions 10_instruction: 'Kliknij na "edytuj", by wypełnić bloki w definicji funkcji, aby utworzyć kwadrat o bokach 40 pikseli.'
      NEW Course 4 Artist Functions 11_instruction: "Teraz chcemy utworzyć nową funkcję \"draw a line of squares\" (rysuj rząd kwadratów), która rysuje sześć kwadratów w rzędzie. Czy możesz ją zbudować korzystając z funkcji \"draw a square 20\" (rysuj kwadrat 20), którą już utworzyliśmy? Uwaga: Zauważ, że zmieniliśmy pióro na znacznie cieńsze. Kliknij przycisk \"edytuj\" na funkcji \"draw a square 20\", aby zobaczyć jak! \\r\n"
      NEW Course 4 Artist Functions 12_instruction: 'Użyj funkcji "draw a line of square" (rysuj rząd kwadratów) z poprzedniej łamigłówki, by narysować ten wzór'
      NEW Course 4 Artist Functions 13_instruction: 'Czy potrafisz narysować kształt gwiazdy używając funkcji "draw a line of squares" (rysuj rząd kwadratów)? Wskazówka: Zmień funkcję draw a line of squares", by nie wywoływać jej dwa razy. Zauważ, będziesz musiał iść do przodu pewną liczbę pikseli i obrócić się o 144 stopnie.'
      NEW Course 4 Artist Functions 14_instruction: 'Czas zabawy! '
      NEW Course 4 Artist Functions 2_instruction: 'Czy mógłbyś narysować 3 kwadraty oddalone od siebie o 20 pikseli? Wskazówka: bok każdego kwadratu ma 100 pikseli'
      NEW Course 4 Artist Functions 3_instruction: 'Oto nowy typ bloku. Nazywa się "Funkcja". Kliknij przycisk "edytuj" a następnie wypełnij go kodem do rysowania kwadratu o boku 100 pikseli. Po zakończeniu edycji funkcji, kliknij przycisk "Zamknij", aby wrócić do programu.'
      NEW Course 4 Artist Functions 4_instruction: 'Użyj funkcji "draw a square" (rysuj kwadrat), by narysować ten wzór. Wskazówka: Będziesz musiał użyć bloku "skręć w prawo o 120 stopni" po każdym kwadracie.'
      NEW Course 4 Artist Functions 5_instruction: 'Jak blok "draw a square" (rysuj kwadrat) wie, które wykonać polecenie? Kliknij na "edytuj" w bloku funkcji "draw a square". Bloki w edytorze funkcji definiują znaczenie funkcji. Po ukończeniu edycji funkcji, kliknij przycisk "Zamknij" a następnie "Uruchom"'
      NEW Course 4 Artist Functions 6_instruction: "Czy potrafisz narysować ten obrazek używając funkcji \"draw a square\" (rysuj kwadrat)? Wskazówka: każdy kwadrat jest oddalony o 20 pikseli.\\r\n"
      NEW Course 4 Artist Functions 7_instruction: 'Czy poznałeś już, jak używać bloków funkcyjnych? Zmodyfikuj ten kwadrat tak, aby miał bok o długości 200 pikseli. Wskazówka: Kliknij na "edytuj", aby zmienić w edytorze funkcji "draw a square" (rysuj kwadrat) rozmiar kwadratu. Pamiętaj, aby kliknąć na "Zamknij", by wyjść z edytora funkcji. '
      NEW Course 4 Artist Functions 8_instruction: 'Utworzyliśmy dla Ciebie nową funkcję "draw a triangle" (rysuj trójkąt).  Czy mógłbyś wypełnić definicję tej funkcji, by rysowała trójkąt o bokach 100 pikseli?'
      NEW Course 4 Artist Functions 9_instruction: Czy mógłbyś to rozwiązać dodając tylko jeden blok?
      NEW Course 4 Artist Functions inspire_instruction: Kliknij tutaj, aby ponownie zobaczyć inspirujący obraz.
      New Course 4 Artist Functions Level 4_instruction: 'Użyj funkcji "draw a square" (rysuj kwadrat) do narysowania tego wzoru.'
      NEW Course 4 Artist Params 1_instruction: 'Zdefiniuj funkcję do rysowania kwadratu o boku długości 50 pikseli. Kliknij "edytuj", aby zacząć.'
      NEW Course 4 Artist Params 10_instruction: |
        Utwórz blok funkcji "draw a hexagon" (rysuj sześciokąt), która będzie mieć parametr "length" (długość boku). 
        Wskazówka: ten sześciokąta ma boki długości 100 pikseli. 
      NEW Course 4 Artist Params 11_instruction: |
        Czy wiesz, jak narysować ten kształt? 
        Edytuj funkcję, aby użyć parametru "sides" (boki).
      NEW Course 4 Artist Params 12_instruction: |
        Czy możesz dokończyć rysowanie?
        Boki wszystkich kształtów mają długość 100 pikseli.
      NEW Course 4 Artist Params 12a_instruction: 'Ten obraz jest podobny do poprzedniego. Czy potrafisz użyć pętli "dla" ze swoją funkcją, by utworzyć ten obraz?'
      NEW Course 4 Artist Params 13_instruction: "Zredaguj funkcję \"draw a polygon\" (rysuj wielokąt). Ma ona już parametr \"sides (boki). Teraz dodaj parametr \"length\" (długość). \\r\nWskazówka: Obwód każdego kształtu ma 200 pikseli. Czy pamiętasz równanie do rysowania kształtów o tym samym obwodzie, ale o różnej liczbie boków?"
      NEW Course 4 Artist Params 14_instruction: 'Zmodyfikuj funkcję "draw a spiral edge" (rysuj spiralną krawędź), by korzystała z parametrów "length" (długość) i "sides" (boki), a następnie odtwórz te kształty.'
      NEW Course 4 Artist Params 15_instruction: 'Czas na zabawę: To są funkcje, które napisałeś do tej pory, oraz kilka dodatkowych. Narysuj coś wspaniałego! Poeksperymentuj z szerokością pisaka, żeby zobaczyć jak zmieniają się Twoje rysunki!'
      NEW Course 4 Artist Params 2_instruction: 'Utwórz funkcję "draw a triangle" (rysuj trójkąt) o długości boków 50 pikseli'
      NEW Course 4 Artist Params 3_instruction: "Teraz użyj funkcji, by narysować rząd 5 trójkątów. Wskazówka: trójkąty są oddalone o 30 pikseli.\\r\n"
      NEW Course 4 Artist Params 4_instruction: 'Czy zauważyłeś jakieś różnice w tych blokach funkcji? Kliknij przycisk "Uruchom", aby zobaczyć co się dzieje.'
      NEW Course 4 Artist Params 5_instruction: 'Wypełnij ??? w bloku wejściowym parametru "length" (długość). Wskazówka: Pięciokąt ma boki o długości 100 pikseli. '
      NEW Course 4 Artist Params 6_instruction: 'Wypełnij parametr "length" (długość), aby rysować te kształty, zastępując "???" odpowiednią liczbą. Kwadrat i trójkąt mają boki o długości 100 pikseli, a bok sześciokąta ma długość 75 pikseli.'
      NEW Course 4 Artist Params 7_instruction: 'Czy mógłbyś ukończyć ten rysunek? Wskazówka: każdy trójkąt ma o 25 pikseli dłuższe boki niż poprzedni trójkąt. Pierwszy trójkąt ma boki długości 25 pikseli.'
      NEW Course 4 Artist Params 8_instruction: Kod tej funkcji trójkąta jest uszkodzony. Czy mógłbyś w opcji edycji funkcji naprawić ten błąd a następnie tworzyć trójkąty o długościach boków 25, 50 i 75?
      NEW Course 4 Artist Params 9_instruction: 'Kliknij przycisk "edytuj", aby wypełnić definicję funkcji "draw a square" (rysuj kwadratu) i dodać parametr. Parametr powinien odpowiadać długości boków, jak w przypadku trójkąta. Tym razem narysuj 3 kwadraty o długościach boków 25, 50 i 75 pikseli oddalone od siebie o 100 pikseli.'
      NEW Course 4 Artist Params inspire_instruction: "Dowolne inspiracje: Nauczyłeś się wszystkiego, co musisz wiedzieć, aby utworzyć podobny wzór! Jeśli ten obraz Cię inspiruje, to spróbuj utworzyć coś podobnego. W przeciwnym razie, utwórz coś według własnego pomysłu.\\r\n\\r\nCzy chcesz wiedzieć, jak powstał nasz wzór? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Przejrzyj ten kod. Czy widzisz, jak bloki "przypisz length " (set length) i "length" (długość) współpracują ze sobą? Kliknij na "Uruchom", aby zobaczyć je w akcji. '
      NEW Course 4 Artist Vars 12_instruction: Zmodyfikuj algorytm z poprzedniej łamigłówki i utwórz pięciokąt o bokach długości 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Przejrzyj ten kod. Czy widzisz, jak bloki "przypisz length " (set length) i "length" (długość) współpracują ze sobą? Kliknij na "Uruchom", aby zobaczyć je w akcji. '
      NEW Course 4 Artist Vars 2_instruction: 'Przeciągnij blok z liczbą do bloku "przypisz length wartość", aby narysować zbiór trójkątów o bokach 50 pikseli. '
      NEW Course 4 Artist Vars 4 5_instruction: Niesamowita praca przy poprzedniej łamigłówce, spróbuj ponownie utworzyć ten fajny wzór z sześciokątów o bokach 60 pikseli.
      NEW Course 4 Artist Vars 4_instruction: 'Spróbuj ponownie. Czy mógłbyś ustawić wartość zmiennej "length" (długość), aby utworzyć ten fajny wzór z sześciokątów? Wskazówka: Jest ona wielokrotnością 10.'
      NEW Course 4 Artist Vars 6_instruction: "Narysuj ten wzór przenosząc blok ze zmienną \"length\" (długość) w odpowiednie miejsca, a następnie ustalając odpowiednią wartość tej zmiennej. (Wskazówka: jest to wielokrotnością 10).  \\r \\r Zauważ, wartość długości została ustalona raz, a kod używa odpowiedniej wartości wszędzie. \\r \\r \\r\n"
      NEW Course 4 Bee For Loops 1_instruction: Użyj pętli, by zebrać cały nektar z każdego kwiatka.
      NEW Course 4 Bee For Loops 10_instruction: 'Użyj zmiennej "counter" (licznik) w pętli "licz z", by kontrolować, jak daleko iść w kierunku poziomym.'
      NEW Course 4 Bee For Loops 10a_instruction: 'Gotowi na wyzwanie?  Korzystając z tego, czego nauczyliście się o pętlach, spróbujcie rozwiązać ten problem. Pamiętajcie: Możecie uruchomiać swoje rozwiązanie wiele razy, aż poznacie wszystko, co potrzeba.'
      NEW Course 4 Bee For Loops 11_instruction: Czy mógłbyś użyć zmiennej w pętli, aby kontrolować ruchu i zbieranie nektaru?
      NEW Course 4 Bee For Loops 2_instruction: Dodaj kod, aby być pewnym, że pszczółka zbierze cały nektar. Zorientuj się, ile potrzebujesz dodatkowego kodu dla tej łamigłówki! (W następnej łamigłówce poznasz łatwiejszy sposób.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ach, pętla "dla/licz" sprawia, że jest to znacznie łatwiejsze! Cały kod, jaki potrzebujesz, jest tutaj, zobacz, jak został utworzony a następnie kliknij przycisk "Uruchom", aby zobaczyć, jak to działa. '
      NEW Course 4 Bee For Loops 4 4_instruction: 'Teraz musimy przejść do przodu "counter" (licznik) razy, następnie zebrać nektar "counter" (licznik) razy.  Czy mógłbyś użyć dwóch pętli "powtórz", by rozwiązać ten problem?'
      NEW Course 4 Bee For Loops 4_instruction: 'Zastąp ??? w pętli "dla", aby pszczółka zebrała największą ilość nektaru. '
      NEW Course 4 Bee For Loops 5 5_instruction: 'Czy nie masz już dość używania pętli "dla"? Pomóż pszczółce zebrać cały nektar.'
      NEW Course 4 Bee For Loops 5_instruction: 'Możesz również użyć pętli "ile/dla", by odliczać do dołu. Spróbuj zebrać ten nektar odliczając w dół od 5 co 1 do 1.'
      NEW Course 4 Bee For Loops 6_instruction: 'Ostatnia liczba w pętli "licz z" to "przyrost", i za każdym obrotem pętli "counter" (licznik) zmienia się o ten przyrost. Spróbuj zebrać cały nektar z tych kwiatów używając przyrostu o wartości 2.'
      NEW Course 4 Bee For Loops 7_instruction: "Teraz połączmy zmienną \"counter\" (licznik) z blokiem matematycznym! Jak użyjesz zmiennej \"counter\" (licznik), aby przejść przez ten ogród z możliwie najmniejszą liczbą bloków? Co trzeba zrobić, aby zebrać 3, 6, 9, 12, 15 nektarów tym razem? Tajemnica tkwi w zmiennej \"counter\" (licznik)! \\r \\r Pamiętaj: Jeśli Twoja pętla liczy do przodu, to przyrost jest dodawany do zmiennej \"counter\" (licznik) w każdym obrocie pętli."
      NEW Course 4 Bee For Loops 8_instruction: "Masz teraz to! Jaki powinien być przyrost, aby zebrać 3, 6, 9, 12, 15 nektarów? \\r\nWskazówka: Ile należy dodać do liczby, aby otrzymać liczbę po niej?"
      NEW Course 4 Bee For Loops 9_instruction: Jeśli Twoja pętla odlicza do dołu, to przyrost jest odejmowany od licznika w każdej pętli. Jaki powinien być przyrost, aby zebrać 9, potem 6, a następnie 3 nektary?
      NEW Course 4 Bee For Loops 95_instruction: 'Spójrz na każdą część pętli "ile/dla", którą właśnie utworzyłeś.  Czy potrafisz określić, które liczby trzeba podwoić, by rozwiązać tę łamigłówkę? Dlaczego to działa?'
      NEW Course 4 Play Lab Params 11_instruction: 'Czas na zabawę! Miłej zabawy z wszystkimi blokami. '
      NEW Course 4 Play Lab Params 5 5_instruction: Spróbuj to zrobić ponownie, ale z mniejszą pomoc. Co musisz poprawić tym razem, aby utworzyć patrol postaci?
      NEW Course 4 Play Lab Vars 4 5_instruction: 'Jak myślisz, co robi ten kod? Naciśnij przycisk "Uruchom", aby zobaczyć, co się dzieje.'
      NEW Course 4 Play Labs For Loops 7a_instruction: Korzystając z tego, czego się nauczyłeś do tej pory, czy mógłbyś spowodować, że Dinozaur robi krok do przodu, za każdym razem, gdy Pingwin odlicza?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Czas na zabawę. Miłej zabawy z wszystkimi blokami. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Wyzwanie: Jak użyjesz pętli "licz/dla", aby każda postać pokręciła się i wypowiedziała swój numer, a następnie zniknęła z ekranu? '
      New Play Lab Project_instruction: Utwórz własną historyjkę lub grę! Twój kod jest zapisywany jako projektu i możesz do niego wrócić w dowolnym momencie.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Wpadnięcie na creepera to zły pomysł. Ostrożnie omijaj creepery, aby bezpiecznie dotrzeć do domu.
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: 'Drewno to bardzo ważny materiał. Można z niego zbudować wiele rzeczy. Podejdź do drzewa i skorzystaj z polecenia "zniszcz blok", aby je ściąć.'
      Overworld Chop Trees_instruction: Musimy wybudować dom, zanim zajdzie słońce. Na dom potrzeba dużo drewna. Zetnij wszystkie 3 drzewa.
      Overworld Free Play 20x20_instruction: 'Gratulacje! Udało Ci się ułożyć wszystkie nasze układanki! Teraz wydobywaj, buduj i twórz co tylko zechcesz, korzystając ze swoich nowych umiejętności. '
      Overworld Free Play_instruction: Możesz grać w tym świecie. Zdecyduj, co chcesz wybudować.
      Overworld House Frame - A_instruction: Zbudujmy własny dom! To miejsce wygląda dobrze. Zbuduj ramę na blokach ziemi.
      Overworld House Frame - C_instruction: Zbudujmy własny dom! To miejsce wygląda dobrze. Zbuduj ramę na blokach ziemi.
      Overworld House Frame B_instruction: Jedna ściana jest gotowy, Zbudujmy resztę domu zgodnie z projektem! Będziesz musiał powtórzyć tutaj dość dużo.
      Overworld House Frame B2_instruction: Jedna ściana jest gotowy, Zbudujmy resztę domu zgodnie z projektem! Będziesz musiał powtórzyć tutaj dość dużo.
      Overworld House Frame C_instruction: Jedna ściana jest gotowy, Zbudujmy resztę domu zgodnie z projektem! Będziesz musiał powtórzyć tutaj dość dużo.
      Overworld House Frame Chosen_instruction: 'Zbuduj resztę domu z materiałów, jakie chcesz. Przydatne tutaj będzie polecenie "powtórz".'
      Overworld House Frame_instruction: Wybudujmy własny dom! To miejsce wygląda dobrze. Zrób zarys fundamentu na blokach ziemi.
      Overworld Minecart Track_instruction: Wracasz na powierzchnię z całą masą podziemnych zasobów. Teraz zbudujemy tory wzdłuż ziemnej ścieżki prowadzącej do domu. Pierwszym krokiem będzie oczyszczenie drogi. Podążaj wzdłuż ścieżki i usuń drzewa.
      Overworld Move to Sheep_instruction: 'Dodaj jeszcze jedno polecenie "idź do przodu", aby dosięgnąć owcy.'
      Overworld Place Wall_instruction: 'Każdy dom powinien mieć ściany. Zbuduj pierwszą część swojego domu, korzystając z poleceń "umieść" i "idź do przodu" umieszczonych w pętli powtórzeń.'
      Overworld Plant Crops_instruction: Dobrze jest planować z wyprzedzeniem. Zasadź rośliny po obu stronach wody, aby później nie konać z głodu.
      Overworld Powered Minecart_instruction: Świetna robota! Udało Ci się zgromadzić wiele zasobów i zbudować skromny dom. Teraz ułóż tory prowadzące od drzwi swojego domu do końca mapy.
      Overworld Shear Sheep_instruction: 'Nadszedł czas strzyży! Używając polecenia "strzyż" pozyskaj wełnę z obu owiec.'
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Funkcje umożliwiają definiowanie nowych bloków! Przenieśliśmy bloki służące do rysowania kwadratu do funkcji o nazwie "draw a square" (rysuj kwadrat). Czy mógłbyś posłużyć się tą funkcją, aby narysować okulary? Kwadraty są oddalone od siebie o 75 pikseli.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: 'Fioletowe kwiaty mogą mieć 1 lub 0 nektaru, ale nie wiesz który. Uważaj, by nie zbierać nektaru z fioletowego kwiatka, jeśli go nie ma. Sprawdzaj, czy nektar jest równy 1 przy użyciu bloku "jeśli".'
      Ryan - 4-5 Bee Conditionals 2_instruction: Pszczółka chce teraz tylko nektaru. Nie wszystkie obiekty są kwiatami, więc sprawdź pod KAŻDĄ CHMURKĄ, czy ukrywa kwiatek. Jeśli tak, to wtedy możesz zebrać nektar.
      Ryan - Bee Conditionals_instruction: Pszczółka chce teraz tylko nektaru. Nie wszystkie obiekty są kwiatami, więc sprawdź pod KAŻDĄ CHMURKĄ, czy ukrywa kwiatek. Jeśli tak, to wtedy możesz zebrać nektar.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: |
        Mamy tu funkcję, która nosi nazwę "patrol" (patrol).
        Zmień ją tak, by Kot poruszał się 400 pikseli w górę, po czym 400 pikseli w dół.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Żołądź! Żołądź! Żołądź! Użyj bloku "Jeśli", aby przenieść mnie tam używając jak najmniejszej liczby bloków.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, zróbmy to jeszcze raz, aby potrenować. To ćwiczenie nie różni się bardzo od poprzedniego, ale uważaj na ścianę!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 'Blok "jeśli - w przeciwnym razie" sprawdza warunek, a następnie wykonuje jedno lub drugie. Spróbuj użyć tego bloku, abym dotarł do żołędzia.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Jeszcze jedno ćwiczenie z blokiem "jeśli-w przeciwnym razie", czy potrafisz je wykonać za pierwszym razem?'
      scrat 20_instruction: Czy mógłbyś dodać tylko 3 bloki, aby pomóc mi rozwiązać bardziej skomplikowany labirynt? Jeśli zrobisz to dobrze, to mogę chodzić jakąkolwiek krętą ścieżką bez względu na jej długość. Pospiesz się! Lód topnieje!
      SpecialFrozenLevel_instruction: Oficjalnie stałeś się mistrzem artystą! Utwórz zimową krainę cudów.
      Standalone_Artist_1_instruction: 'Artysta zaprasza! Najpierw, spróbuj utworzyć kwadrat przy użyciu bloków "skręć w prawo" i "idź do przodu". Każdy bok powinien mieć długość 100 pikseli.'
      Standalone_Artist_2_instruction: Narysuj ten diament z kontami 120 i 60 stopni i długościami boków 150 pikseli.
      Standalone_Artist_3_instruction: Czy potrafisz narysować ten sześciokąt o bokach 100 pikseli i obrotach 60 stopni?
      Standalone_Artist_4_instruction: Teraz masz do dyspozycji nowy blok. Służy on do powtarzania zestawu poleceń. Co się stanie, jeśli powtórzysz w pętli te polecenia 6 razy?
      Standalone_Artist_5.5_instruction: 'Zwróć uwagę, jak uprościliśmy kod diamentu wykorzystując pętlę. Możesz teraz powtórzyć całą tę sekwencję 12 razy, aby narysować kwiat. Wskazówka: Musisz wykonać obrót o 30 stopni po każdym diamencie, by nie rysować cały czas tego samego diamentu.'
      Standalone_Artist_5_instruction: Ile razy musisz powtórzyć w pętli ten diament, aby narysować kwiat?
      Standalone_Artist_6_instruction: 'Powtórz 6 razy w pętla ten kod sześciokąta, aby utworzyć ten wzór. O ile stopni będziesz musiał skręcić za każdym razem? Wskazówka: podziel liczbę stopni w kole przez liczbę obrotów w pętli.'
      Standalone_Artist_7_instruction: 'Funkcja jest kolejnym narzędziem programowania, które pomaga unikać powtarzania. Ta funkcja rysuje kwiat, możesz zatem użyć jej za każdym razem, gdy tylko chcesz narysować kwiat. Użyj tej funkcji i nowego bloku "skocz", by narysować te kwiaty. Wskazówka: Kwiaty są oddalone od siebie o 150 pikseli'
      Standalone_Artist_8_instruction: 'Tutaj jest funkcja o nazwie "rysuj kształt", którą zaprogramowaliśmy, by rysować sześciokąty. Uruchom kod, aby zobaczyć, co robi, a następnie eksperymentuj z tą funkcją, aby zobaczyć co się dzieje. Czy mógłbyś spowodować, by rysowała wzory złożone z kwadratów, trójkątów lub ośmiokątów?'
      Standalone_Artist_9_instruction: |
        Teraz przejdź dalej i wykonaj rysunek, na jaki masz ochotę! 
        Dostępna jest pusta funkcja, z którą możesz zrobić, co chcesz!
      Standalone_Artist_v2_instruction: 'Artysta zaprasza! Najpierw, spróbuj utworzyć kwadrat przy użyciu bloków "skręć w prawo" i "idź do przodu". Każdy bok powinien mieć długość 100 pikseli.'
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instrukcje
      U2 frequency random sub_instruction: Instrukcje
      U2 vigenere cipher_instruction: Instrukcje
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: Zmień kod, by dźwięk był grany tylko po naciśnięciu strzałki do góry. (Kliknij, aby zobaczyć pełne instrukcje)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Szablon
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 'Pod niektórymi z tych bloków ukrywa się lawa, którą musisz przykryć, zanim przejdziesz po niej. Przyda się do tego warunek "jeżeli". Dodaj polecenie "idź do przodu" we właściwym miejscu, aby wydobyć coś z tych bloków.'
      Underground If Statements_instruction: 'Teraz sprawy się skomplikowały. Wydobądź 3 czerwone kamienie, nie wpadając w lawę. Skorzystaj z polecenia "jeżeli", aby ułożyć bruk na każdym polu odkrytej lawy.'
      Underground Iron_instruction: Wchodzenie w płynną lawę nie jest dobrym pomysłem. Umieść na niej bruk, aby stworzyć most, a następnie wydobądź żelazo z co najmniej 3 bloków.
      Underground Mine in a Circle_instruction: Znajdź sposób na zdobycie 5 diamentów i 7 czerwonych kamieni! Spróbuj użyć powtórzenia wewnątrz powtórzenia, aby poruszać się po kwadracie.
      Underground Mining Coal_instruction: Najcenniejsze surowce znajdują się pod ziemią, ale robi się ciemno. Umieść co najmniej 2 pochodnie i wydobądź węgiel z co najmniej 2 bloków.
      Underground Test Level_instruction: Zbierz wszystkie minerały!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
