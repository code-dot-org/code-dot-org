pl:
  slides:
    maze_intro:
      1:
        image: uwagi/hoc1_1.jpg
        text: Witaj podczas swojej pierwszej Godziny Kodowania! Zanurkuj w swoją pierwszą przygodę z programowaniem.
      2:
        image: uwagi/hoc1_2.jpg
        text: Będziemy używać Blockly, wizualnego języka programowania, który umożliwia pisanie kodu za pomocą przeciągania i upuszczania bloków.
      3:
        image: uwagi/hoc1_3.jpg
        text: Większość kodów jest pisana, ale Blockly jest wizualny. Każdy blok odpowiada rzeczywistej linii kodu.
      4:
        image: uwagi/hoc1_4.jpg
        text: Nauczysz się podstaw informatyki, pojęć, które są używane w wielu sytuacjach, od tworzenia aplikacji komputerowych po kierowanie pojazdem na Marsie.
      5:
        image: uwagi/hoc1_5.jpg
        text: Program jest zestawem poleceń, które ma wykonać komputer.
      6:
        image: uwagi/hoc1_6.jpg
        text: Twój pierwszy program ma spowodować, że Angry Bird trafi w labiryncie na Zieloną Świnkę.
      7:
        image: uwagi/hoc1_7.jpg
        text: Po lewej stronie znajduje się labirynt, w którym ma być uruchomiony Twój program. Polecenia dla każdej łamigłówki znajdują obok labiryntu.
      8:
        image: uwagi/hoc1_8.jpg
        text: Przybornik pośrodku ekranu zawiera polecenia dla Angry Bird. Możesz ich użyć do zbudowania swojego programu.
      9:
        image: uwagi/hoc1_9.jpg
        text: Po prawej stronie znajduje się Twój obszar roboczy, do którego możesz przeciągać bloki z przybornika, by budować swój program. Aby usunąć blok z programu, przeciągnij go do kosza w rogu po prawej stronie.
      10:
        image: uwagi/hoc1_10.jpg
        text: Każdy blok jest instrukcją. Jeśli przeciągniesz blok idź do przodu do obszaru roboczego i naciśniesz przycisk Uruchom program, to ptak przesunie się o jedno pole w labiryncie.
      11:
        image: uwagi/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: uwagi/hoc1_12.jpg
        text: Jeśli uruchomiłeś program i chcesz go później poprawić i uruchomić ponownie, to naciśnij przycisk Reset.
      13:
        image: uwagi/hoc1_13.jpg
        text: Dopadnijmy te świnie!
    artist_intro:
      1:
        image: uwagi/stage5_1.jpg
        text: Cześć, jestem JR! Każdy zespół wyścigów samochodowych potrzebuje informatyków, aby wygrać. Analizują oni dane z samochodu i sprawiają, że jedzie szybciej.
      2:
        image: uwagi/stage5_2.jpg
        text: W tych łamigłówkach będziesz artystą, który rysuje za sobą linię, wszędzie tam, gdzie idzie.
      3:
        image: uwagi/stage5_3.jpg
        text: Ten blok mówi idź do przodu przez 100 pikseli. Piksele to tak naprawdę małe kropki na Twoim ekranie.
      4:
        image: notes/stage5_4.jpg
        text: Ten blok mówi, skręć w prawo o 90 stopni. Spowoduje to obrót Twojego artysty o tyle samo, jak w bloku obróć w łamigłówkach na labiryncie.
      5:
        image: notes/stage5_5.jpg
        text: 'Kliknij na strzałkę w jednym z tych bloków, aby zmieć, jak daleko artysta ma pójść do przodu lub obrócić się.  Pobaw się, by zapoznać się z tymi nowymi blokami.'
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Witam, jestem Paola! W tych łamigłówkach Ty jesteś rolnikiem, który ma otrzymać pole całkowicie płaskie, aby rozpocząć sadzenie roślin.
      2:
        image: uwagi/stage9_2.jpg
        text: Musisz pomóc jej usunąć wszystkie sterty śmieci i wypełnić wszystkie otwory.
      3:
        image: uwagi/stage9_3.jpg
        text: 'Nowe bloki: usuń 1 szuflę śmieci ze sterty i wypełnij otwór 1 szuflą śmieci.'
      4:
        image: uwagi/stage9_4.jpg
        text: Sterty i otwory są różnych rozmiarów, musisz więc powiedzieć rolnikowi, ile szufli ma użyć.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Witam jestem Katie! Jedną z najbardziej ekscytujących rzeczy związanych z informatyką jest to, że program komputerowy może być interaktywny.
      2:
        image: notes/flappy02.jpg
        text: Za każdym razem, kiedy ktoś klika, stuka lub pisze na komputerze czy telefonie, generuje tym samym ZDARZENIE i jakaś część kodu decyduje co zrobić, kiedy ZDARZENIE występuje.
      3:
        image: notes/flappy03.jpg
        text: 'Na przykład, możesz stworzyć PROCEDURĘ OBSŁUGI ZDARZENIA, która mówi "po kliknięciu myszy odtwórz dźwięk" '
      4:
        image: notes/flappy04.jpg
        text: Czy słyszałeś kiedykolwiek o grze FlappyBird? Używając Procedur obsługi zdarzeń nauczymy się jak stworzyć własną wersję FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Kod, który będziesz pisał polega na przeciąganiu i upuszczaniu bloków, które reprezentują polecenia dla komputera. Za kulisami, każdy z tych bloków jest reprezentowany przez prawdziwy kod.
      6:
        image: notes/flappy06.jpg
        text: 'Jeśli przyjrzysz się obszarowi roboczemu, znajdziesz tam przygotowane dla Ciebie zielone bloki - są to "obsługiwacze zdarzeń" '
      7:
        image: notes/flappy07.jpg
        text: 'Jeśli chcesz, żeby ten ptak LATAŁ po KLIKNIĘCIU myszką, możesz to zrobić dołączając blok "Lot" do obsługi odpowiedniego zdarzenia, i teraz w grze gdziekolwiek klikniesz myszką, ptak będzie latał.'
      8:
        image: notes/flappy08.jpg
        text: W każdej łamigłówce tego rodzaju, będziemy wprowadzać nowe rodzaje zdarzeń w postaci zielonych bloków do obszaru roboczego. Sam będziesz decydował które bloki są odpowiednie aby ich użyć w celu reakcji na występujące zdarzenia.
      9:
        image: notes/flappy09.jpg
        text: 'Gdy zobaczysz rozwijaną strzałką jak ta, oznacza to, że możesz zmienić ustawienia - takie jak dźwięk odtwarzany Flappy spadnie na ziemię.'
      10:
        image: notes/flappy10.jpg
        text: W końcowej łamigłówce będziesz w stanie stworzyć własną grę i podzielić się nią ze swoimi przyjaciółmi. Baw się dobrze!
    loop_times:
      1:
        image: uwagi/hoc2_1.jpg
        text: Cześć, jestem Mark! Zaczynamy naukę o pętlach. Za pomocą pętli można powiedzieć komputerowi powtarzaj jakikolwiek zestaw działań w kółko, tysiące lub nawet miliardy razy.
      2:
        image: uwagi/hoc2_2.jpg
        text: W tej łamigłówce chcemy, aby ptak przesunął się 5 pól do przodu, by dosięgnąć świnkę.
      3:
        image: uwagi/hoc2_3.jpg
        text: Możemy użyć nowego bloku powtórz, by sobie pomóc.
      4:
        image: uwagi/hoc2_4.jpg
        text: Zamiast 5 razy przeciągać blok idź do przodu...
      5:
        image: uwagi/hoc2_5.jpg
        text: Możemy umieścić blok idź do przodu wewnątrz bloku powtórz i wpisać w nim liczbę powtórzeń, aby określić, ile razy ma powtórzyć.
      6:
        image: uwagi/hoc2_6.jpg
        text: 'Ważna uwaga: Możesz umieścić więcej niż jedno polecenie w bloku powtórz.'
      7:
        image: uwagi/hoc2_7.jpg
        text: Miłego korzystania z Twojego nowego bloku powtórz!
    loop_until:
      1:
        image: uwagi/hoc3_1.jpg
        text: Hi, jestem Chris. Przed dołączeniem do Miami Heat, wstąpiłem na Georgia Tech, by studiować informatykę. Spróbujmy użyć naszego nowego bloku powtórz aż do.
      2:
        image: uwagi/hoc3_2.jpg
        text: Co zrobić, jeśli nie wiedzieliśmy, jak daleko ten ptak miał przenieść się, by dosięgnąć świnkę?
      3:
        image: uwagi/hoc3_3.jpg
        text: Jeśli umieścimy blok idź do przodu wewnątrz bloku powtórz aż do, to wtedy ptak będzie poruszał się naprzód, AŻ (UNTIL) dotrze do świni (lub zderzy się ze ścianą).
      4:
        image: uwagi/hoc3_4.jpg
        text: 'I to jest ważne: tak jak wcześniej, możemy umieścić wiele bloków wewnątrz bloku powtórz aż do, i wszystkie będą powtarzane.'
    if:
      1:
        image: uwagi/hoc4_1.jpg
        text: 'Witam, jestem Bill! Nauczmy się nowego podstawowego pojęcia: instrukcji jeśli. To dzięki nim komputery podejmują decyzje.'
      2:
        image: uwagi/hoc4_2.jpg
        text: Bloku jeśli używasz codziennie. Przed wyjściem z domu każdego poranka, mówisz jeśli pada na zewnątrz, to muszę założyć kurtkę.
      3:
        image: uwagi/hoc4_3.jpg
        text: Możemy powiedzieć, zombie, by sprawdził, czy istnieje droga w lewo, i jeśli znajdzie drogę w lewo, możemy pozwolić mu skręcić w tę stronę.
      4:
        image: uwagi/hoc4_4.jpg
        text: Aby napisać kod dla tego, przeciągnijmy nasz blok jeśli i umieśćmy w nim blok obróć się w lewo.
      5:
        image: uwagi/hoc4_5.jpg
        text: Teraz, jeśli umieścimy blok idź do przodu nad nim i blokiem powtórz obejmiemy wszystko, wtedy za każdym razem, gdy zombie poruszy się, będzie sprawdzał, czy istnieje droga w lewo i ewentualnie skręcał. Polecenie powtórz jest ważne, by sprawdzać za każdym razem, czy można skręcić.
      6:
        image: uwagi/hoc4_6.jpg
        text: 'Instrukcje jeśli są bardzo ważne w informatyce. Jednym z pierwszych programów, jakie napisałem, była gra w kółko i krzyżyk, i była w nim instrukcja jeśli, której zadaniem było: jeśli przeciwnik ma zaraz wygrać, to zablokuj pole, które dałoby mu wygraną.'
      7:
        image: uwagi/hoc4_7.jpg
        text: Miłej zabawy przy korzystaniu z bloku jeśli!
    if_else:
      1:
        image: uwagi/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: uwagi/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: uwagi/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: uwagi/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: uwagi/stage13_1.jpg
        text: Witam, jestem Brina, inżynier w Instagram. Funkcja składa się z pewnych linii kodu, które chcesz używać wiele razy, zamiast więc pisać ten kod za każdym razem, możesz użyć jednego bloku.
      2:
        image: uwagi/stage13_2.jpg
        text: Dowiemy się, jak definiować funkcję. Definicja funkcji ma gwiazdkę w rogu. Nazwa funkcji jest zapisana w pierwszej linijce.
      3:
        image: uwagi/stage13_3.jpg
        text: Bloki, które znajdują się wewnątrz definicji określają, co robi funkcja. Na przykład, to jest definicja funkcji o nazwie wypełnij 5 i zawiera bloki powtórz i wypełnij.
      4:
        image: uwagi/stage13_4.jpg
        text: Definicja funkcji znajduje się na obszarze roboczym, ale nasz rolnik nie może jej uruchomić, aż nie wyciągnie bloku wypełnij 5 z kategorii Funkcje.
      5:
        image: uwagi/stage13_5.jpg
        text: 'Umieśćmy zabawy (ang. fun) z powrotem w kategorii FUNkcje!" '
    loop_while:
      1:
        image: uwagi/stage9_5.jpg
        text: 'Witam, jestem Makinde! Poznajmy blok dopóki '
      2:
        image: uwagi/stage9_6.jpg
        text: Blok dopóki będzie wykonywał to, co w nim umieścisz, TAK DŁUGO, JAK DŁUGO warunek znajdujący się na górze ma wartość PRAWDA (TRUE).
      3:
        image: uwagi/stage9_7.jpg
        text: Na przykład, jeśli rolnik stoi na stercie, to tak długo będzie usuwał 1 szufelkę śmieci, DOPÓKI pod nim znajduje się sterta śmieci.
    loop_for:
      1:
        image: uwagi/stage11_1.jpg
        text: Witam, jestem Trina, i pracuję dla Pixar. Pracowałam przy kilku filmach, w tym przy Shreku.
      2:
        image: uwagi/stage11_2.jpg
        text: To jest nasza nowa pętla licznik. Wykonuje wielokrotnie działania i możesz za każdym razem nieco zmienić działania.
      3:
        image: uwagi/stage11_3.jpg
        text: 'W tym przykładzie, pętla licznik oznacza "liczy z licznikiem od 50 do 90 co 10" a w jej wnętrzu mamy blok narysuj kwadrat. Przeciągnij blok licznik z kategorii Zmienne na miejsce długość.'
      4:
        image: uwagi/stage11_4.jpg
        text: Oznacza to, że nasz artysta narysuje kwadrat, który ma bok długości 50 pikseli, następnie doda 10 i narysuje kwadrat o boku 60 pikseli. Następnie będzie dodawał 10 i rysował kwadraty, aż osiągnie 90. Otrzymamy w ten sposób kwadraty o bokach 50, 60, 70, 80 i 90.
    parameters:
      1:
        image: uwagi/stage15_1.jpg
        text: Witam, jestem Janete i jestem inżynierem w Zynga.
      2:
        image: uwagi/stage15_2.jpg
        text: Co zrobić, jeśli chcemy narysować kilka trójkąty o różnych długościach boków?
      3:
        image: uwagi/stage15_3.jpg
        text: Moglibyśmy napisać poszczególne kody lub możemy użyć funkcji z parametrami.
      4:
        image: uwagi/stage15_4.jpg
        text: Aby to zrobić, kliknij przycisk blue star (niebieska gwiazda) w definicji funkcji rysuj trójkąt. Następnie przeciągnij nazwa wejścia do bloku wejście.
      5:
        image: uwagi/stage15_5.jpg
        text: Następnie, jeśli wpiszesz długość w miejscu, gdzie stoi x i naciśniesz klawisz Enter, to utworzysz wejście długość w Twojej funkcji.
      6:
        image: uwagi/stage15_6.jpg
        text: Następnie kliknij na gwiazdce. Teraz kliknij na kategorii Zmienne i przeciągnij blok długość do bloku idź do przodu w definicji Twojej funkcji. I usuń przez przeciągnięcie stary blok liczba.
      7:
        image: uwagi/stage15_7.jpg
        text: Aby użyć funkcji z parametrami, kliknij na kategorię Funkcje i wyciągnij funkcję narysuj trójkąt o długości.
      8:
        image: uwagi/stage15_8.jpg
        text: Teraz można użyć bloku matematyki do wprowadzenia różnych liczb, by rysować trójkąty o różnych rozmiarach.
    hoc_wrapup:
      1:
        image: uwagi/hoc6_1.jpg
        text: Gratulacje! Z ostatnimi łamigłówkami, które rozwiązałeś, napisałeś kod, który może pomóc jakiemukolwiek robotowi, jak znaleźć drogę przez labirynt bez rozgałęzień lub przez tunel o dowolnej długości, bez względu na to, czy jest to zombie, ptak, pojazd na marsie lub nawet samojezdny samochód.
      2:
        image: uwagi/hoc6_2.jpg
        text: Podstawowe pojęcia, które wykorzystałeś, są sednem każdego programu lub aplikacji, które kiedykolwiek będziesz używał. Dowiedzieliśmy się o powtarzaniu w pętli, instrukcji powtórz aż do, instrukcji jeśli i instrukcji jeśli-w przeciwnym razie.
      3:
        image: uwagi/hoc6_3.jpg
        text: Jeśli podoba Ci się Twoja pierwsza godzina kodowania, odwiedź code.org, aby kontynuować swoją edukację informatyczną! Po zakończeniu naszego 20-godzinnego kursu będziesz mieć opanowane podstawy programowania i będziesz mógł rozpocząć naukę, jak pisać aplikacje dla telefonów komórkowych, instrukcje dla robotów, czy nawet gry.
      4:
        image: uwagi/hoc6_4.jpg
        text: 'Technologia zmienia wszystko, co robimy, i nie ma znaczenia czy jesteś młody czy starszy: programowanie to zabawa, jest kreatywne i każdy może się nauczyć !'
    20_wrapup:
      1:
        image: Notes/Bird.png
        text: 'Pokaż uwagi - wkrótce dostępne!'
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
