it:
  slides:
    maze_intro:
      1:
        image: 'notes/hoc1_1.jpg'
        text: "Benvenuto alla tua prima Ora del Codice! Tuffati subito in un primo assaggio di programmazione."
      2:
        image: 'notes/hoc1_2.jpg'
        text: "Useremo \"Blockly\", un linguaggio visuale di programmazione in cui usi blocchi colorati per scrivere programmi."
      3:
        image: 'notes/hoc1_3.jpg'
        text: "Gran parte del codice reale viene digitato, mentre Blockly è un linguaggio visuale. Ogni \"blocco\" corrisponde ad una riga di codice reale."
      4:
        image: 'notes/hoc1_4.jpg'
        text: "Imparerai i fondamenti dell'informatica: concetti che sono utilizzati dovunque, dalla creazione di app per gli smart-phone al controllo del robot che esplora il pianeta Marte."
      5:
        image: 'notes/hoc1_5.jpg'
        text: "Un programma è un insieme di istruzioni che il tuo computer deve eseguire."
      6:
        image: 'notes/hoc1_6.jpg'
        text: "L'obiettivo del tuo primo programma è quello di far attraversare un labirinto ad un uccello di \"Angry Birds\" e fargli catturare un maiale verde."
      7:
        image: 'notes/hoc1_7.jpg'
        text: "Sul lato sinistro viene visualizzato il labirinto attraverso cui il tuo programma deve guidare l'uccello. Le spiegazioni per ciascun esercizio sono scritte al di sotto del labirinto."
      8:
        image: 'notes/hoc1_8.jpg'
        text: "La \"cassetta degli attrezzi\" visualizzata nel mezzo contiene le istruzioni per guidare un uccello di Angry Birds. Le devi usare per costruire il tuo programma."
      9:
        image: 'notes/hoc1_9.jpg'
        text: "Sulla destra c'è la tua area di lavoro, nella quale devi spostare i blocchi, prendendoli dalla cassetta degli attrezzi, ed unirli in modo da costruire il tuo programma. Per eliminare un blocco, spostalo nel cestino nell'angolo."
      10:
        image: 'notes/hoc1_10.jpg'
        text: "Ogni blocco è un'istruzione. Se sposti un blocco \"vai avanti\" (move forward) nell'area di lavoro e premi \"Esegui\" (Run Program), l'uccello si sposta di una casella in avanti nel labirinto."
      11:
        image: 'notes/hoc1_11.jpg'
        text: "Per fare più di un'azione, sposta più blocchi nell'area di lavoro e attaccali uno sotto l'altro. L'uccello eseguirà le istruzioni associate ai blocchi procedendo dall'alto verso il basso."
      12:
        image: 'notes/hoc1_12.jpg'
        text: "Se dopo aver eseguito un programma vuoi cambiarlo ed eseguirlo di nuovo, clicca su \"Riprova\"."
      13:
        image: 'notes/hoc1_13.jpg'
        text: "Andiamo a prendere quei maiali!"
    artist_intro:
      1:
        image: 'note/stadio5_1.jpg'
        text: "Ciao, sono JR! Ogni squadra di corse automobilistiche ha bisogno degli informatici per vincere. Analizzano i dati dell'auto per farla andare più velocemente."
      2:
        image: 'note/stadio5_2.jpg'
        text: "In questi esercizi, sarai un artista che disegna una linea dietro di sé dovunque va."
      3:
        image: 'note/stadio5_3.jpg'
        text: "Questo blocco dice \"vai avanti di 100 pixel\" (move forward by 100 pixels) . I pixel sono i minuscoli puntini del tuo schermo."
      4:
        image: 'note/stadio5_4.jpg'
        text: "Questo blocco dice \"gira a destra di 90 gradi\" (turn right by 90 degrees). Questo fa girare il tuo artista della stessa quantità, come fa il blocco \"gira\" nell'esercizio del labirinto."
      5:
        image: 'note/stadio5_5.jpg'
        text: "Se in questi blocchi clicchi sui numeri puoi cambiare di quanto l'artista si sposta in avanti o gira. Fai qualche prova per prendere confidenza con questi nuovi blocchi."
    farmer_intro:
      1:
        image: 'note/stadio9_1.jpg'
        text: "Ciao, sono Paola! In questi esercizi devi aiutare una contadina che deve completamente livellare il suo terreno per iniziare a seminarlo."
      2:
        image: 'note/stadio9_2.jpg'
        text: "Devi aiutarla a rimuovere tutti i mucchi di terra e a riempire tutte le buche."
      3:
        image: 'note/stadio9_3.jpg'
        text: "Il nuovo blocco \"rimuovi 1\" (remove 1) toglie 1 palata di terra da un mucchio. Il nuovo blocco \"riempi 1\" (fill 1) mette 1 palata di terra dentro una buca."
      4:
        image: 'note/stadio9_4.jpg'
        text: "I mucchi e le buche sono di dimensioni differenti, quindi devi dire alla contadina quante palate deve utilizzare."
    flappy_intro:
      1:
        image: 'notes/flappy01.jpg'
        text: "Ciao, io sono Katie! Una delle cose più eccitanti nell'informatica è che un programma per calcolatore può essere interattivo."
      2:
        image: 'notes/flappy02.jpg'
        text: "Ogni volta che qualcuno fa clic o tocca o preme un tasto su un calcolatore o un telefono, questo genera un EVENTO, e c'è del codice che decide cosa fare quando si verifica un EVENTO."
      3:
        image: 'notes/flappy03.jpg'
        text: "Ad esempio, si potrebbe avere un GESTORE DI EVENTI che dice \"quando il mouse viene cliccato, riproduci un suono\" "
      4:
        image: 'notes/flappy04.jpg'
        text: "Hai mai sentito parlare del gioco FlappyBird? Tramite i gestori di eventi, imparerai a programmare la tua versione personalizzata di FlappyBird!"
      5:
        image: 'notes/flappy05.jpg'
        text: "Scriverai il codice unendo i blocchi colorati che rappresentano i comandi per il calcolatore. Ognuno di questi blocchi rappresenta del codice vero e proprio."
      6:
        image: 'notes/flappy06.jpg'
        text: "Se dai un'occhiata all'area di lavoro, ci sono alcuni blocchi verdi che sono stati riempiti per te: questi sono i \"gestori di eventi\" "
      7:
        image: 'notes/flappy07.jpg'
        text: "Se desideri che l'uccello SBATTA LE ALI quando tu CLICCHI il mouse, puoi farlo attaccando il blocco \"sbatti le ali\" (flap) al gestore di eventi appropriato, ed adesso nel tuo gioco ogni volta che si clicca il mouse, l'uccello sbatterà le ali."
      8:
        image: 'notes/flappy08.jpg'
        text: "In ogni esercizio di questa attività introduciamo nuovi tipi di eventi, rappresentati come blocchi verdi nell'area di lavoro, e tu puoi decidere i blocchi appropriati da aggiungere in risposta a questi eventi."
      9:
        image: 'notes/flappy09.jpg'
        text: "Quando vedi un triangolino con la punta verso il basso come qui, significa che è possibile modificare le impostazioni - come il suono da riprodurre quando l'uccello precipita a terra."
      10:
        image: 'notes/flappy10.jpg'
        text: "Nell'esercizio finale sarai in grado di creare il tuo gioco e condividerlo con i tuoi amici. Buon divertimento!"
    loop_times:
      1:
        image: 'notes/hoc2_1.jpg'
        text: "Ciao, sono Mark! Impariamo ad usare i blocchi di ripetizione. Con questi puoi dire a un calcolatore di ripetere qualsiasi serie di azioni più e più volte, migliaia o addirittura miliardi di volte."
      2:
        image: 'notes/hoc2_2.jpg'
        text: "In questo esercizio, vogliamo fare in modo che l'uccello si sposti di 5 caselle in avanti per raggiungere il maiale."
      3:
        image: 'notes/hoc2_3.jpg'
        text: "Puoi usare il blocco di ripetizione \"ripeti ... volte\" (repeat ... times) per aiutarci."
      4:
        image: 'notes/hoc2_4.jpg'
        text: "Invece di usare 5 blocchi \"vai avanti\" (move forward) ..."
      5:
        image: 'notes/hoc2_5.jpg'
        text: "Puoi mettere il blocco \"vai avanti\" all'interno del blocco di ripetizione \"ripeti ... volte\" e scrivere un numero nel blocco \"ripeti ... volte\" per stabilire quante ripetizioni fare."
      6:
        image: 'notes/hoc2_6.jpg'
        text: 'Fai attenzione: è possibile inserire più di un blocco all''interno di un blocco di ripetizione "ripeti ... volte" .'
      7:
        image: 'notes/hoc2_7.jpg'
        text: "Divertiti ad usare il blocco di ripetizione \"ripeti ... volte\" !"
    loop_until:
      1:
        image: 'notes/hoc3_1.jpg'
        text: "Ciao, sono Chris. Prima di entrare nel Miami Heat, ho studiato informatica al Georgia Tech. Proviamo il nuovo blocco di ripetizione, il blocco \"ripeti fino a che\" (repeat until)."
      2:
        image: 'notes/hoc3_2.jpg'
        text: "Cosa succede se non sappiamo di quanto l'uccello deve spostarsi in avanti per raggiungere il maiale?"
      3:
        image: 'notes/hoc3_3.jpg'
        text: "Se mettiamo un blocco \"vai avanti\" (move forward) all'interno del blocco di ripetizione \"ripeti fino a che\" (repeat until), l'uccello si sposta in avanti FINO A CHE raggiunge il maiale (o sbatte contro un muro)."
      4:
        image: 'notes/hoc3_4.jpg'
        text: 'Fai attenzione: proprio come prima, possiamo mettere più blocchi all''interno del blocco di ripetizione "ripeti fino a che", ed essi verranno tutti ripetuti.'
    if:
      1:
        image: 'notes/hoc4_1.jpg'
        text: 'Ciao, sono Bill! Impariamo un nuovo concetto fondamentale: l''istruzione "se". I calcolatori prendono le decisioni utilizzando proprio questa istruzione.'
      2:
        image: 'notes/hoc4_2.jpg'
        text: "Tu stesso usi le istruzioni \"se\" ogni giorno. Prima di uscire di casa al mattino ti dici: SE (IF) fuori piove ALLORA (THEN) devo prendere l'impermeabile."
      3:
        image: 'notes/hoc4_3.jpg'
        text: "Possiamo dire allo zombie di verificare \"se c'è strada a sinistra\" (if path to the left), e se trova strada a sinistra, possiamo farlo girare in quella direzione."
      4:
        image: 'notes/hoc4_4.jpg'
        text: "Per scrivere il codice per fare questo, sposta nell'area di lavoro un blocco \"se c'è strada a sinistra\" e metti un blocco \"gira a sinistra\" (turn left) all'interno di esso."
      5:
        image: 'notes/hoc4_5.jpg'
        text: "Ora, se mettiamo un blocco \"vai avanti\" (move forward) al di sopra di esso e un blocco di ripetizione \"ripeti fino a che\" (repeat until) intorno a tutto, ogni volta che lo zombie si muove controllerà se c'è strada a sinistra e in caso positivo girerà. L'istruzione \"ripeti fino a che\" è fondamentale per effettuare il controllo ad ogni passo."
      6:
        image: 'notes/hoc4_6.jpg'
        text: "Le istruzioni \"se\" sono davvero importanti nell'informatica. Uno dei primi programmi che ho scritto era un gioco di tris, e c'era un'istruzione \"se\" che diceva \"se l'altra persona sta per vincere, blocca la casella che le consente di vincere\"."
      7:
        image: 'notes/hoc4_7.jpg'
        text: "Divertiti utilizzando l'istruzione \"se\"!"
    if_else:
      1:
        image: 'notes/hoc5_1.jpg'
        text: "Ciao, mi chiamo Saloni. Uso l'informatica per aiutare a risolvere problemi nella sanità e nella medicina. Impariamo ad usare il blocco \"se-altrimenti\" (if-else). Assomiglia al blocco \"se\", ma ha una parte supplementare alla fine che dice \"altrimenti\" (else)."
      2:
        image: 'notes/hoc5_2.jpg'
        text: "Se metti un blocco \"vai avanti\" (move forward) dove dice \"fai\" (do) e un blocco \"gira a sinistra\" (turn left) dove dice \"altrimenti\" (else) questo significa che lo zombie sceglierà tra 2 alternative. SE c'è strada in avanti, lo zombie si sposterà in avanti e ALTRIMENTI (cioè se non c'è strada in avanti), lo zombie svolterà a sinistra."
      3:
        image: 'notes/hoc5_3.jpg'
        text: "Proprio come con il blocco \"se\", quando mettiamo un blocco \"se-altrimenti\" all'interno un blocco di ripetizione, lo zombie continuerà a muoversi mentre il blocco \"se-altrimenti\" continuerà a controllare se esiste un posto per girare."
      4:
        image: 'notes/hoc5_4.jpg'
        text: "Ora, rimanda quegli zombie là da dove sono venuti!"
    if_else_scrat:
      1:
        image: 'notes/saloni_ifelse_scrat1.jpg'
        text: "Un blocco \"se-altrimenti\" (if-else) decide tra due possibilità. Vediamo come possiamo utilizzare un blocco \"se-altrimenti\" con il nostro amico Scrat lo scoiattolo."
      2:
        image: 'notes/saloni_ifelse_scrat2.jpg'
        text: "Questo blocco assomiglia al blocco \"se\", ma ha una parte supplementare alla fine che dice \"altrimenti\" (else). Se metti un blocco \"vai avanti\" (move forward) dove dice \"fai\" (do) e un blocco \"gira a sinistra\" (turn left) dove dice \"altrimenti\", questo significa che lo scoiattolo Scrat andrà avanti SE c'è strada in avanti. ALTRIMENTI (cioè se non c'è strada in avanti), Scrat svolterà a sinistra."
      3:
        image: 'notes/saloni_ifelse_scrat3.jpg'
        text: "Si tratta di prendere una decisione e compiere una delle due azioni in base a tale decisione. E proprio come i  blocchi \"se\", si possono mettere i blocchi \"se-altrimenti\" all'interno di blocchi \"ripeti\"."
      4:
        image: 'notes/saloni_ifelse_scrat4.jpg'
        text: "Ora aiutiamo lo scoiattolo Scrat a prendere quella ghianda!"
    function:
      1:
        image: 'note/stadio13_1.jpg'
        text: "Ciao, sono Brina, un'ingegnera di Instagram. Una funzione è fatta da alcune righe di codice che vuoi utilizzare più e più volte. Se hai definito una funzione, invece di scrivere ogni volta le stesse righe puoi usare un unico blocco."
      2:
        image: 'note/stadio13_2.jpg'
        text: "Adesso impariamo come definire le funzioni. Le definizioni di funzioni hanno una stella nell'angolo. Il nome della funzione è scritto sulla linea in alto."
      3:
        image: 'note/stadio13_3.jpg'
        text: "I blocchi che vanno all'interno della definizione ci dicono che cosa viene eseguito. Questa definizione di funzione è chiamata \"riempi 5\" (fill 5) e si compone di un blocco di ripetizione \"ripeti ... volte\" (repeat ... times) e di un blocco \"riempi 1\" (fill 1)."
      4:
        image: 'note/stadio13_4.jpg'
        text: "La definizione si trova nell'area di lavoro, ma per far eseguire la funzione alla contadina devi prendere  il blocco funzione \"riempi 5\" dalla categoria \"Funzioni\" ed unirlo al blocco \"vai avanti\" (move forward)."
      5:
        image: 'note/stadio13_5.jpg'
        text: "Mettiamo il \"divertimento\" in \"FUNZIONE!\" "
    loop_while:
      1:
        image: 'note/stadio9_5.jpg'
        text: "Ciao, sono Makinde! Impariamo il blocco di ripetizione \"mentre\" "
      2:
        image: 'note/stadio9_6.jpg'
        text: "Il blocco \"mentre\" (while) farà qualunque cosa si trova all'interno di esso PER TUTTO IL TEMPO IN CUI la condizione scritta accanto a \"mentre\" è VERA."
      3:
        image: 'Note/stadio9_7.jpg'
        text: "In questo esempio, se la contadina è sopra un mucchio, il blocco \"mentre\" gli farà rimuovere 1 palata di terra (remove 1) PER TUTTO IL TEMPO IN CUI c'è ancora un mucchio (while there is a pile) sotto di lei."
    loop_for:
      1:
        image: 'note/stadio11_1.jpg'
        text: "Ciao, sono Trina, e lavoro per Pixar. Ho lavorato in molti film, tra cui Shrek."
      2:
        image: 'note/stadio11_2.jpg'
        text: "Questo è il nuovo blocco di ripetizione \"ripeti con contatore\" (count with counter). Si usa per eseguire alcune azioni più e più volte facendo in modo che ogni volta le azioni cambino un po'."
      3:
        image: 'note/stadio11_3.jpg'
        text: "In questo esempio, il blocco \"ripeti con contatore\" dice \"ripeti con il contatore che va da 50 a 90 aumentando di 10 per volta\" e all'interno di esso abbiamo il blocco \"disegna un quadrato\" (draw a a square). Se prendi il blocco \"contatore\" (counter) dalla categoria \"Variabili\" (Variables) e lo inserisci al fianco di \"lunghezza\" (length) ..."
      4:
        image: 'note/stadio11_4.jpg'
        text: "...questo significa che il nostro artista inizia disegnando un quadrato con lati lunghi 50 pixel. Poi aggiungerà 10 e disegnerà un quadrato con lati lunghi 60 pixel. Poi continuerà ad aggiungere 10 e disegnare quadrati con lati sempre più lunghi fino a quando raggiungerà 90. Così avremo quadrati di 50, 60, 70, 80 e 90 pixel."
    parameters:
      1:
        image: 'note/stadio15_1.jpg'
        text: "Ciao, sono Janete, e sono un'ingegnera di Zynga."
      2:
        image: 'note/stadio15_2.jpg'
        text: "Come fai per disegnare un po' di triangoli con lati di differenti lunghezze?"
      3:
        image: 'note/stadi15_3.jpg'
        text: "Puoi scrivere esplicitamente tutto il codice o puoi utilizzare una funzione con parametri."
      4:
        image: 'note/stadio15_4.jpg'
        text: "Per fare ciò, clicca la stella bianca su sfondo blu nella definizione della funzione \"disegna un triangolo\" (draw a triangle). Poi sposta il blocco \"nome del parametro\" (input name) nel blocco \"parametri\" (inputs)."
      5:
        image: 'note/stadio15_5.jpg'
        text: "Poi se scrivi \"lunghezza\" (length) nel punto dove c'è la \"X\" e premi \"Invio\" creerai il parametro \"lunghezza\" per la tua funzione."
      6:
        image: 'note/stadio15_6.jpg'
        text: "Poi clicca sulla stella per terminare la definizione del parametro. Ora, clicca sulla categoria \"Variabili\" (Variables) e sposta il blocco \"lunghezza\" nel blocco \"vai avanti\" (move forward) della tua definizione di funzione. E trascina via il vecchio blocco col numero."
      7:
        image: 'note/stadio15_7.jpg'
        text: "Per usare la tua funzione con parametri, clicca sulla categoria \"Funzioni\" (Functions) e sposta la tua funzione \"disegna un triangolo con lunghezza\" (draw a triangle with length) nell'area di lavoro."
      8:
        image: 'note/stadio15_8.jpg'
        text: "Ora puoi usare i blocchi nella categoria \"Matematica\" (Math) per inserire numeri diversi e disegnare triangoli di dimensioni diverse."
    hoc_wrapup:
      1:
        image: 'notes/hoc6_1.jpg'
        text: "Complimenti! Con l'ultimo esercizio che hai risolto, hai appena scritto il codice che dice a QUALUNQUE robot come trovare la sua strada attraverso un labirinto senza ramificazioni o attraverso un tunnel di qualsiasi lunghezza, sia che si tratti di uno zombie, di un uccello, di un robot che esplora il pianeta Marte o anche una macchina che si guida da sola."
      2:
        image: 'notes/hoc6_2.jpg'
        text: "I concetti di base che hai usato sono al centro di ogni programma o applicazione che scriverai.  Hai imparato le istruzioni di ripetizione \"ripeti\" e \"ripeti fino a che\", e le istruzioni \"se\" e \"se-altrimenti\"."
      3:
        image: 'notes/hoc6_3.jpg'
        text: "Se ti è piaciuta la tua prima Ora del Codice, visita code.org per continuare la tua formazione sull'informatica! Dopo che avrai completato il nostro corso in 20 lezioni, avrai imparato i concetti base della programmazione e potrai iniziare ad imparare come scrivere applicazioni per smart-phone, programmi per robot, giochi, e molto altro."
      4:
        image: 'notes/hoc6_4.jpg'
        text: 'La tecnologia sta cambiando tutto ciò che facciamo e non importa se sei giovane o anziano: la programmazione è divertente, è creativa, e chiunque può impararla!'
    20_wrapup:
      1:
        image: 'notes/bird.png'
        text: "Le note sono in corso di preparazione!"
    frozen_intro:
      1:
        image: 'notes/frozen1_1.jpg'
        text: "Ciao, mi chiamo Lyndsey. Faccio la modella, recito e ... scrivo le mie app. Usiamo la programmazione per unirci a Anna ed Elsa mentre esplorano la magia e la bellezza del ghiaccio."
      2:
        image: 'notes/frozen1_2.jpg'
        text: "Potrai creare fiocchi di neve e trame di ghiaccio mentre pattini e realizzare un meraviglioso paesaggio invernale da condividere con i tuoi amici."
      3:
        image: 'notes/frozen1_3.jpg'
        text: "Nella prossima ora, imparerai le basi della programmazione. I programmi tradizionali sono di solito del testo detto \"codice\".  Tu invece scriverai programmi con Blockly, che usa blocchi colorati. I blocchi vengono uniti per scrivere programmi. Anche gli studenti universitari imparano le basi della programmazione in questo modo. Anche se usi i blocchi, in realtà stai sempre scrivendo del codice."
      4:
        image: 'notes/frozen1_4.jpg'
        text: "Un programma è un insieme di istruzioni che dice al computer cosa fare. Adesso costruiamo un programma, cioè scriviamo del \"codice\", che aiuta Elsa a disegnare una semplice linea. Più avanti lo useremo per creare figure più complesse."
      5:
        image: 'notes/frozen1_5.jpg'
        text: "Lo schermo è diviso in tre parti principali. A sinistra, c'è la superficie di ghiaccio dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto la superficie di ghiaccio."
      6:
        image: 'notes/frozen1_6.jpg'
        text: "Questa zona centrale è la \"cassetta degli attrezzi\"; ognuno di questi blocchi corrisponde  ad un'azione che Elsa e Anna possono compiere."
      7:
        image: 'notes/frozen1_7.jpg'
        text: "Lo spazio bianco sulla destra si chiama \"area di lavoro\", e qui costruisci il tuo programma. Per spostarti sulla superficie di ghiaccio, usa il blocco \"vai avanti\"."
      8:
        image: 'notes/frozen1_8.jpg'
        text: "Qui, il blocco \"vai avanti\" dice \"vai avanti di 100 pixel\" (move forward by 100 pixels). Quando clicco su \"Esegui\" che cosa succede? Elsa si sposta in avanti sullo schermo di 100 pixel! I pixel sono i minuscoli puntini sullo schermo del tuo computer."
      9:
        image: 'notes/frozen1_9.jpg'
        text: "L'altro blocco che c'è in questo esercizio dice \"gira a destra di 90 gradi\". Quando usi questo blocco \"gira a destra\" Elsa gira a destra. Puoi fare dei tentativi per capire di quanto far girare Elsa. L'angolo è misurato rispetto al percorso davanti ad Elsa. Quindi, questo è un giro di 90 gradi. E questo è un giro di 120 gradi."
      10:
        image: 'notes/frozen1_10.jpg'
        text: "Ricorda, è possibile modificare il numero dei pixel e dei gradi cliccando sui triangolini con la punta verso il basso accanto a loro."
    frozen_loops:
      1:
        image: 'notes/frozen2_1.jpg'
        text: "Ciao, sono Paola! I computer sono davvero bravi nel ripetere le cose. Tu puoi contare sino a 10, 20 o 100. Ma un computer può contare fino a un miliardo o a mille miliardi. Non si annoia e ci mette solo pochi secondi. Che si tratti di contare, o disegnare, o di fare qualsiasi cosa - i computer possono ripeterlo centinaia o persino miliardi di volte."
      2:
        image: 'notes/frozen2_2.jpg'
        text: "Nella programmazione, questo si chiama ciclo (loop). Un ciclo permette di ripetere le istruzioni più e più volte. Nel prossimo esercizio il tuo obiettivo è quello di aiutare Anna a creare un quadrato usando il blocco \"Ripeti\"."
      3:
        image: 'notes/frozen2_3.jpg'
        text: "Tutti i blocchi di codice che inserisci all'interno del blocco \"ripeti\" (repeat) vengono ripetuti in sequenza, tutte le volte che vuoi."
      4:
        image: 'notes/frozen2_4.jpg'
        text: "Per disegnare un quadrato, puoi usare i blocchi \"vai avanti\" (move forward) e \"gira a destra\" (turn right) per 4 volte. Ma il modo più semplice è quello di dire una volta sola al computer \"vai avanti\" e \"gira a destra di 90 gradi\" e poi dirgli di ripetere queste due azioni per 4 volte. Per farlo, è necessario mettere i blocchi \"vai avanti\" e \"gira a destra\" all'interno del blocco \"ripeti\"."
      5:
        image: 'notes/frozen2_5.jpg'
        text: "Ricorda che puoi sostituire il numero nel blocco \"ripeti\" con qualunque altro numero. In questo modo tutte le istruzioni all'interno del blocco verranno ripetute per il numero di volte che hai impostato."
    frozen_functions:
      1:
        image: 'notes/frozen3_1.jpg'
        text: "Ciao, sono Chris Bosh. Sono un giocatore di basket professionista. Ho programmato quando ero all'università."
      2:
        image: 'notes/frozen3_2.jpg'
        text: "Uno dei meccanismi più importanti in informatica è la definizione di nuovi comandi. La maggior parte dei linguaggi di programmazione hanno solo circa 100 parole o comandi. Ed è davvero arte e magia la possibilità di definire le tue nuove parole mediante i blocchi già esistenti."
      3:
        image: 'notes/frozen3_3.jpg'
        text: "Una volta che hai insegnato ad un computer come fare un'azione utilizzando una certa sequenza di comandi, puoi dare un tuo nome a questa azione così che sia facile ripeterlo nuovamente. Quando definisci un tuo comando e gli dai un nome, hai realizzato una \"funzione\"."
      4:
        image: 'notes/frozen3_4.jpg'
        text: "Ciao, sono Jess. Quando programmi con i blocchi utilizzi le funzioni quando c'è un insieme di azioni che vuoi usare più volte. Ad esempio, hai scritto il codice per disegnare un quadrato."
      5:
        image: 'notes/frozen3_5.jpg'
        text: "Puoi definire questo codice come una funzione chiamata \"disegna un quadrato\" (create a square)."
      6:
        image: 'notes/frozen3_6.jpg'
        text: "Ora hai un nuovo blocco che puoi usare più volte per disegnare più quadrati."
      7:
        image: 'notes/frozen3_7.jpg'
        text: "Figure complesse possono essere create usando molte forme semplici. Nel prossimo esercizio il codice che hai appena scritto per disegnare un cerchio è disponibile come una nuova funzione (disegna un cerchio) che può creare cerchi di diverse dimensioni. Puoi usarla per aiutare Elsa a creare delle belle figure complesse sulla neve?"
    playlab_intro:
      1:
        image: 'notes/playlab_intro_1.png'
        text: "Creiamo giochi usando il Laboratorio. I giochi migliori hanno una storia ed ogni storia ha i suoi personaggi. Impariamo a far sì che i nostri personaggi, quali streghe, alieni e animali, parlino, si muovano ed interagiscano tra loro. Alla fine di questo corso, saprai realizzare un gioco a partire da zero e condividerlo con i tuoi amici."
      2:
        image: 'notes/playlab_intro_2.png'
        text: "Lo schermo è suddiviso in tre parti principali. Sulla sinistra c'è l'area di gioco dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto quest'area."
      3:
        image: 'notes/playlab_intro_3.png'
        text: "La zona centrale è la \"cassetta degli attrezzi\". Ognuno di questi blocchi è un pezzo di codice. Lo spazio bianco sulla destra si chiama \"area di lavoro\" e qui costruisci il tuo programma."
      4:
        image: 'notes/playlab_intro_4.png'
        text: "Per cominciare, è necessario collegare i blocchi al blocco arancione 'quando si clicca su \"Esegui\" '. È possibile collegare più blocchi insieme trascinandoli fino a che non vedrai formarsi la linea gialla di contorno e non si attaccheranno tra loro."
      5:
        image: 'notes/playlab_intro_5.png'
        text: "In questo primo esercizio il personaggio è un pinguino. Fagli dire \"Ciao!\" trascinando il blocco \"il personaggio dice ...\" dalla cassetta degli attrezzi, collegandolo al blocco 'quando si clicca su \"Esegui\" ' e scrivendo al suo interno \"Ciao!\". Puoi anche fare muovere il pinguino utilizzando i blocchi \"sposta a destra\" e \"sposta a sinistra\". Una volta che i blocchi sono stati posizionati, clicca il pulsante \"Esegui\" per vedere quello che hai programmato."
      6:
        image: 'notes/playlab_intro_6.png'
        text: "Inizia a lavorarci su e alla fine sarai in grado di creare il tuo gioco con tanti tipi di giocatori che possono interagire, andare in giro felici o tristi, guadagnare punti, lanciare palle di fuoco o perfino farsi scomparire l'un l'altro. Dipende tutto da te e dal gioco che vuoi creare."
    playlab_events:
      1:
        image: 'notes/playlab_events_1.png'
        text: "Adesso impari un meccanismo che tutti i programmatori di giochi usano ogni giorno. Parliamo degli eventi. Un evento dice al programma quando succede qualcosa. Quando quella cosa accade il programma svolge una azione."
      2:
        image: 'notes/playlab_events_2.png'
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      3:
        image: 'notes/playlab_events_3.png'
        text: "In questo esercizio il robot spaziale saluta i terrestri quando un giocatore lo clicca. Usa il blocco \"quando si clicca sul personaggio\" ('when actor clicked') attaccandoci sotto un blocco \"il personaggio dice ...\" ('say'). Quando il giocatore clicca sul robot spaziale, tutto ciò che è attaccato al blocco \"quando si clicca sul personaggio\" viene eseguito. Cosa dice il tuo robot?"
      4:
        image: 'notes/playlab_events_4.png'
        text: "Ci sono anche i blocchi  \"quando si preme la freccia ...\" ('when ... arrow'). Se gli colleghi i blocchi \"sposta il personaggio ...\" ('move ...'), puoi iniziare a muovere gli attori in su, in giù, a sinistra o a destra. Passo dopo passo, il tuo  gioco diventa sempre più interattivo."
    playlab_repeat_forever:
      1:
        image: 'notes/playlab_repeat_forever_1.png'
        text: "Questo è il blocco \"ripeti per sempre\". Qualsiasi istruzione all'interno di questo blocco verrà ripetuta in continuazione durante il gioco."
      2:
        image: 'notes/playlab_repeat_forever_2.png'
        text: "Se vogliamo che un personaggio faccia qualcosa in continuazione, senza che il giocatore faccia nulla,  metteremo i relativi blocchi all'interno del blocco \"ripeti per sempre\"."
      3:
        image: 'notes/playlab_repeat_forever_3.png'
        text: "In questo esercizio il nostro obiettivo è aiutare il mago a sorvegliare i confini del regno, muovendosi in continuazione a destra e a sinistra. Imparare come funziona il comando \"ripeti\" ti risparmierà moltissimo tempo quando costruirai il tuo gioco."
    C1_artist_intro:
      1:
        image: 'notes/C1_artist_intro_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-8#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br>\n<br>\nQuesti sono i blocchi per disegnare. Usa quello corretto per far spostare l'artista e farlo disegnare sulle linee grigie."
      2:
        image: 'notes/C1_artist_intro_2.png'
        text: "Questi sono i blocchi per saltare (<i>jump</i>). Quando usi questi blocchi, l'artista si sposta ma non disegna. Usali per saltare alla prossima linea grigia senza disegnare."
    C1_bee_level_intro:
      1:
        image: 'notes/C1_bee_level_intro_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-7#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br>\n<br>\nLe api non sono super mitiche? In questa serie di esercizi, il tuo obiettivo è quello di aiutare l'ape a raggiungere i fiori, a raccogliere il nettare dai fiori e a volare verso il favo per produrre il miele. Per questo esercizio, devi usare i blocchi \"prendi il nettare\" e \"fai il miele\"."
      2:
        image: 'notes/C1_bee_level_intro_2.png'
        text: 'Ogni fiore ha una quantità diversa di nettare: 1, 2, 3 o più. Sappiamo quanto nettare è presente nei fiori rossi grazie al numerino visibile nell''angolo in basso. In questo modo sei sicuro di raccogliere tutto il nettare da un fiore prima di volare via. Inoltre, ogni favo può contenere solo una certa quantità di miele: 1, 2, 3 o più. In questo modo sei sicuro di produrre tanto miele quanto il favo può contenerne.'
      3:
        image: 'notes/C1_bee_level_intro_3.png'
        text: "Se sei capace di raccogliere tutto il nettare e produrre tutto il miele, hai risolto l'esercizio e puoi passare al prossimo. Altrimenti, devi cercare di nuovo di risolverlo. Giocherella un po' e vedi come ci si sente ad essere un'ape che programma!"
    C1_bee_loops:
      1:
        image: 'notes/C1_bee_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-14#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br>\n<br>\nUn ciclo consiste nel ripetere una serie di attività. Se devo ispezionare un alveare, guardo un telaio e lo rimetto a posto, quindi ripeto queste stesse azioni più volte. E' un circuito chiuso, ripeto più volte le stesse attività."
      2:
        image: 'notes/C1_bee_loops_2.png'
        text: "In questo esercizio, l'ape deve raccogliere tre dosi di nettare dal fiore. Invece di usare tre blocchi \"prendi il nettare\", prova ad usare il blocco \"ripeti\" per raccogliere il nettare tre volte. Premi \"Esegui\" e controlla se la soluzione è corretta. Bello, no?"
    C1_bigevent_unplugged:
      1:
        image: 'notes/C1_bigevent_unplugged_1.png'
        text: "Questa lezione è chiamata il grande evento. Tratta di come controlliamo i nostri programmi e di come cambiare il comportamento di un programma utilizzando gli eventi, come premere un pulsante o fare click con il mouse."
      2:
        image: 'notes/C1_bigevent_unplugged_2.png'
        text: "In questa lezione, sarai controllato da remoto con una foglio interattivo. E' come un videogioco dal vivo."
      3:
        image: 'notes/C1_bigevent_unplugged_3.png'
        text: "Un evento è un'azione che fa accadere qualcosa. E' come quando premi il pulsante del mouse e una pagina web viene caricata. Questo è un evento. Quando tocchi il tuo schermo del tablet per scorrere, anche quello è un evento. Gli eventi sono un ottimo modo per consentire all'utente di interagire con il tuo programma ogni volta che ne ha bisogno o che lo desidera."
      4:
        image: 'notes/C1_bigevent_unplugged_4.png'
        text: "Accadono cose a cui noi dobbiamo reagire. Ci sentiamo affamati e andiamo nel frigo. Sentiamo il postino arrivare e mettere la posta nella cassetta delle lettere e andiamo a prendere la posta. Questi sono proprio come gli eventi di premere un pulsante o muovere un joystick. E' qualcosa che accade e che ci spinge a fare qualcos'altro."
      5:
        image: 'notes/C1_bigevent_unplugged_5.png'
        text: "Nei video giochi, c'è un evento chiamato 'Aggiornamento' che si verifica 30 o 60 volte al secondo. Per gli sviluppatori di videogiochi è una cosa quasi più importante dei pulsanti o del joystick."
      6:
        image: 'notes/C1_bigevent_unplugged_6.png'
        text: "L'evento principale sta guardando per che accada un \"Aggiornamento\". E poi controlliamo il joystick nel segno di spunta. Così ci dicono, \"Oh, qualcuno ha spinto il pulsante questo telaio? Sì o no?\" Senza eventi, il giocatore non poteva muoversi, non poteva saltare, non saresti in grado di controllare cosa sta succedendo. Il videogioco non sarebbe in grado di animare qualsiasi cosa."
    C1_building_foundation:
      1:
        image: 'notes/C1_building_foundation_1.jpg'
        text: "Quando sei al mare e vuoi costruire un castello di sabbia sai già che potrebbe formarsi una crepa e far crollare tutto. Ma se insisti, non farai altro che migliorarti. Insistere è il nome del gioco. Continua ad insistere e vedrai che otterrai dei risultati strabilianti."
      2:
        image: 'notes/C1_building_foundation_2.jpg'
        text: "Questa lezione si chiama costruire una fondazione. Lavoreremo su una mansione davvero impegnativa. Capirai come costruire una struttura alta almeno tanto quanto una di queste tazze e dovrà essere sufficientemente forte per reggere il peso di un libro."
      3:
        image: 'notes/C1_building_foundation_3.jpg'
        text: "Accade, a volte, che le nostre creazioni non funzionino come vogliamo. In alcuni momenti vorremmo arrenderci e lasciare il progetto. Purtroppo, potrebbe accadere spesso. Ma se facciamo del nostro meglio per risolvere i nostri problemi e a migliorare il nostro lavoro, possiamo stare sicuri di ottenere i risultati che cerchiamo."
      4:
        image: 'notes/C1_building_foundation_4.jpg'
        text: "Persistere è quello che si deve fare quando viene voglia di smettere. Se vuoi creare qualcosa di nuovo e diverso, gli errori lungo la strada sono inevitabili."
      5:
        image: 'notes/C1_building_foundation_5.jpg'
        text: "Il trucco per persistere è scegliere di andare avanti e imparare dai propri errori invece di smettere perché sei frustrato. Dietro la frustrazione vi è l'attesa che ci sia qualcosa di meraviglioso dietro l'angolo. Non mollare, quindi, prima di arrivare."
    C1_getting_loopy:
      1:
        image: 'notes/C1_getting_loopy_1.png'
        text: "Ciao, mi chiamo Miral Kotb e sono il creatore di Illuminate. Nel mio lavoro c'è una cosa che usiamo sia nella danza che nella programmazione dei lightsuits. E sono i loops! I loops sono ripetizioni di un'azione più e più volte."
      2:
        image: 'notes/C1_getting_loopy_2.png'
        text: "Quando ripeti qualcosa tante volte, come le azioni che faccio per mantenere in rotazione l'hula hoop, sto eseguendo un ciclo di questa azione. Questo è un ciclo. Questo è un ciclo. E questo è un ciclo."
      3:
        image: 'notes/C1_getting_loopy_3.png'
        text: "Oggi avremo una festa danzante. Metteremo in atto i loops con un nuovo ballo. L'iterazione. Impareremo i loops tramite un ballo. Imparerai un paio di facili passi e li ripeterai più volte per completare il ballo."
      4:
        image: 'notes/C1_getting_loopy_4.png'
        text: "Qui ci sono dei passi che devi imparare. Batti le mani. Metti le mani dietro la testa. Metti le mani sul bacino. Alza la mano sinistra. Alza la mano destra. Semplice, no? Scoprirai che puoi abbreviare i consigli mettendo alcuni passi di danza in ciclo."
      5:
        image: 'notes/C1_getting_loopy_5.png'
        text: "Realmente facciamo uso di cicli nel nostro ballo. I ballerini stanno indossando cuputers, tutti nella stessa rete. Io potrei mettere in ciclo le luci attrverso gli stessi ballerini continuamente. Nel ciclo potrei avere una ripetizione dove ti dirò se vuoi andare in ciclo attraverso questi ballerini continuamente e poi dentro al ciclo puoi aumentare la velocità della luce. E ciò è tutto creatoattraverso i cicli. I cicli sono importanti nell'informatica perchè fanno il nostro lavoro più brevemente e più facilmente."
    C1_happy_maps_unplugged:
      1:
        image: 'notes/C1_happy_maps_unplugged_1.png'
        text: "Questa lezione si chiama Mappe Felici. Oggi aiuteremo il nostro piccolo amico peloso Flurb a raggiungere la sua frutta."
      2:
        image: 'notes/C1_happy_maps_unplugged_2.png'
        text: "Fai arrivare Flurb alla frutta. Per farlo dovrai capire quale strada debba fare Flurb e dargli indicazioni con le frecce. Per fare in modo che Flurb riesca ad arrivare alla mela, quale direzione deve seguire? Traccia una linea per farlo salire."
      3:
        image: 'notes/C1_happy_maps_unplugged_3.png'
        text: "Per farlo arrivare in quel punto cerchia la direzione in cui deve andare."
      4:
        image: 'notes/C1_happy_maps_unplugged_4.png'
        text: "Crea l'algoritmo incollando le frecce vicino alla mappa che stai provando a risolvere. La seconda è la stessa ma sta andando in giù."
      5:
        image: 'notes/C1_happy_maps_unplugged_5.png'
        text: "E' come programmare con la carta. Tutto qui!"
    C1_maze_debugging:
      1:
        image: 'notes/C1_maze_debugging_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-5#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nLa \"correzione di errori\" (<i>debugging</i>) consiste nel trovare e risolvere i problemi. Ci sono molti modi per trovare e risolvere i problemi. Uno dei modi più semplici consiste nel muoversi passo dopo passo fino a che qualcosa non va storto. Qui sto cercando di fare una capovolta all'indietro sulla trave, ma continuo a cadere."
      2:
        image: 'notes/C1_maze_debugging_2.png'
        text: "Ho ripercorso il mio esercizio passo dopo passo e ho capito dov'era il mio errore. Non stavo mettendo correttamente le mani sulla trave. Così ho provato a fare una nuova capovolta all'indietro sulla trave mettendo le mani in modo diverso e ce l'ho fatta. Sono stata veramente contenta di aver trovato e corretto il mio errore."
      3:
        image: 'notes/C1_maze_debugging_3.png'
        text: "Per imparare a trovare e correggere gli errori, in questi esercizi inizi con una serie di blocchi già pronti. Noterai che con questi blocchi non riesci a risolvere gli esercizi. Devi quindi trovare e correggere gli errori. Cos'è che non funziona con i blocchi già pronti?"
      4:
        image: 'notes/C1_maze_debugging_4.png'
        text: "Correggi l'errore del primo esercizio aggiungendo un altro blocco verso ovest e premi \"Esegui\" per verificare se questa è la soluzione corretta. Evviva, ce l'hai fatta!"
    C1_maze_intro_sequencing:
      1:
        image: 'notes/C1_maze_intro_sequencing_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-4#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br>\n<br>\nPer risolvere questo esercizio, devi far arrivare l'uccellino fino al maialino. Osserva il percorso per decidere quali direzioni deve prendere l'uccellino."
      2:
        image: 'notes/C1_maze_intro_sequencing_2.png'
        text: "Devi trascinare i blocchi dalla cassetta degli attrezzi all'area di lavoro. Assicurati di posizionare i blocchi sotto il blocco \"quando si clicca su Esegui\" (when run) e, quando pensi di aver trovato la soluzione giusta, clicca su \"Esegui\" (Run) e osserva se l'uccellino raggiunge il maialino."
    C1_maze_loops:
      1:
        image: 'notes/C1_maze_loops_1.png'
        text: "Una cosa in cui i computer sono veramente bravi è la ripetizione di istruzioni. Una persona si annoierebbe a morte se dovesse ripetere le stesse operazioni tante volte di seguito. Un computer, invece, può fare la stessa cosa milioni, o anche miliardi di volte, senza annoiarsi e riuscendo ad eseguirla davvero bene."
      2:
        image: 'notes/C1_maze_loops_2.png'
        text: "Ad esempio, se volessi augurare un buon compleanno a tutti su Facebook mandando un messaggio di posta elettronica, impiegherei più di un secolo per scriverli. Mi bastano invece poche linee di codice per creare un programma che invia un messaggio a tutti su Facebook, augurando loro un buon compleanno."
      3:
        image: 'notes/C1_maze_loops_3.png'
        text: "Per far arrivare l'uccellino al maialino nell'esercizio 3, invece di usare tre blocchi \"Nord\", sposta nell'area di lavoro il blocco \"ripeti\" ed inserisci il numero 3 al posto dei punti interrogativi. Poi sposta il blocco \"Nord\" all'interno del blocco \"ripeti\" e clicca su \"Esegui\" per verificare se hai fatto tutto correttamente."
    C1_moveitmoveit_unplugged:
      1:
        image: 'notes/C1_moveitmoveit_unplugged_1.png'
        text: "Questa lezione è chiamata muoversi, muoversi. Insieme scriveremo un programma per portare i nostri amici dal punto di partenza con la bussola rosa, all'obiettivo faccina sorridente."
      2:
        image: 'notes/C1_moveitmoveit_unplugged_2.png'
        text: "Ma lo smiley è a faccia in giù e solo una persona sà come arrivarci. Diamo inizio a questo programma."
      3:
        image: 'notes/C1_moveitmoveit_unplugged_3.png'
        text: "Un programma è un algoritmo che è stato codificato in qualcosa che può essere fatto funzionare da una macchina. Molti di noi pensano ad un programma come una cosa che scriviamo per un computer. I programmi sono ottimi per tale scopo, ma sono anche utili in altri ambienti. Puoi creare un gioco o anche programmare un robot che faccia cose per te."
    C1_going_places_safely:
      1:
        image: 'notes/C1_going_places_safely_1.png'
        text: "Il mio nome è Jeremiah. Ciao! Ho sette anni. Amo giocare nel computer di mia mamma ma solo quando me ne dà il permesso. \"Mamma, posso usare il computer? Certo tesoro!\""
      2:
        image: 'notes/C1_going_places_safely_2.png'
        text: "Mi piace il computer della mamma perchè posso andare su internet. Internet è un po' come il vicinato. Puoi visitare bei posti, parlare con la famiglia e gli amici e imparare un sacco di cose nuove."
      3:
        image: 'notes/C1_going_places_safely_3.png'
        text: "Ieri, ho visitato uno zoo vicino a casa mia. Ho visto un cucciolo di zebra. Le ho fatto una foto e ho cambiato il colore delle sue strisce, poi le ho aggiunto un cappello e l'ho aggiunta alla mia collezione di animali stravaganti. Bellissimo! Poi, sono andato in un posto molto molto lontano. Ho visitato il Kenya. E' un paese in Africa. Lì ci vivono molte zebre."
      4:
        image: 'notes/C1_going_places_safely_4.png'
        text: "A volte in Internet parlo con persone che conosco, come mia nonna che vive in un altro stato. Ciao nonna! Sta facendo i biscotti che mi invierà per il mio compleanno. \"Yummy, se solo si potessero sentire gli odori su Internet!\" Posso parlare con diverse persone su Internet, come mio cugino ma parlo solo a persone che conosco."
      5:
        image: 'notes/C1_going_places_safely_5.png'
        text: "Ciò che mi piace di più in Internet è che posso fare giochi divertenti. Ho fatto punto! Mi piace anche disegnare e creare cose nuove e condividerle con i miei amici. Bello! A volte visito siti dove posso imparare cose nuove, ma rimango sempre in siti che conosco. Wow, dinosauri!"
      6:
        image: 'notes/C1_going_places_safely_6.png'
        text: 'Internet è un posto fantastico. Ma come devi stare attento ad attraversare la strada nel tuo quartiere, devi stare anche attento quando vai online. Qui ci sono tre regole da ricordare. Regola numero 1: Chiedi sempre ai tuoi genitori prima. Regola numero 2: Parla solo con persone che conosci. Regola numero 3: Rimani in siti che conosci.'
      7:
        image: 'notes/C1_going_places_safely_7.png'
        text: "Wow, è stato divertente! E' ora di cena. Sto spegnendo. Non vedo l'ora di ricollegarmi per visitare qualcosa di nuovo."
    C1_pair_programming:
      1:
        image: 'notes/C1_pair_programming_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-3#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nOggi imparerai la Programmazione in Coppia. Nella programmazione in coppia si lavora in squadra. Perché due persone dovrebbero usare un solo computer? Perché due teste sono meglio di una. Nella programmazione in coppia tu e il tuo compagno vi sedete insieme davanti allo stesso computer e lavorate entrambi allo stesso progetto."
      2:
        image: 'notes/C1_pair_programming_2.png'
        text: "Nella programmazione in coppia, una persona è il conducente e l'altra è il navigatore, proprio come quando si guida una macchina. Il conducente siede davanti al computer ed è quello che usa la tastiera e il mouse, o lo schermo tattile (il touchscreen), e controlla le azioni principali del computer. L'altra persona è il navigatore. il navigatore aiuta il conducente rispondendo alle sue domande, oppure segnalando eventuali problemi o errori."
      3:
        image: 'notes/C1_pair_programming_3.png'
        text: "La comunicazione è la chiave del successo nella programmazione in coppia. Non ci si insulta, si deve essere rispettosi, non ci si comporta da navigatore prepotente, perché a nessuno piace un passeggero che critica il conducente. Tu e il tuo compagno dovete sempre comunicare. Il conducente dovrebbe spiegare cosa sta facendo. Il navigatore dovrebbe aiutare il conducente suggerendo cosa fare in seguito."
      4:
        image: 'notes/C1_pair_programming_4.png'
        text: "Il navigatore dovrebbe pensare al quadro generale del problema, mentre il conducente dovrebbe concentrarsi sui dettagli. Entrambi i ruoli sono importanti. La programmazione in coppia è il riuscire a lavorare insieme come una squadra."
    C1_planting_seed:
      1:
        image: 'notes/C1_planting_seed_1.png'
        text: "Questa lezione si chiama piantare un seme e ci aiuterà a capire gli algoritmi. Gli algoritmi sono istruzioni specifiche che spiegano l'ordine nel quale fare qualcosa. Perfino le cose di tutti i giorni come fare colazione o lavarsi i denti sono algoritmi che richiedono piccoli passaggi per portare a termine un lavoro."
      2:
        image: 'notes/C1_planting_seed_2.png'
        text: "I computer possono essere molto intelligenti ma possono capirti solo se gli spieghi esattamente cosa fare, passo dopo passo. La cosa bella degli algoritmi è che se non segui le istruzioni in ordine, puoi imparare qualcosa che non sapevi come fare prima che ti venga spiegato. E' come seguire una ricetta."
      3:
        image: 'notes/C1_planting_seed_3.png'
        text: "Oggi impianteremo il nostro seme usando un algritmo. Crea il tuo algoritmo tagliando in pezzi le immagini. Seleziona le immagini che mostrano i passaggi per piantare il seme e posiziona queste immagini nell'ordine corretto."
      4:
        image: 'notes/C1_planting_seed_4.png'
        text: "Ora, è tempo che tu veda se il tuo algoritmo funziona. Segui i passaggi nell'algoritmo molto attentamente. Sono nell'ordine corretto? Sei riuscito a piantare il seme seguendo l'algoritmo? E' come programmare con le immagini!"
      5:
        image: 'notes/C1_planting_seed_5.png'
        text: "Quando facciamo la cioccolata, ci sono molti passaggi da seguire e ognuno di questi comprende un insieme di altri piccoli passi passaggi e ci sono diverse ricette o algoritmi che dipendono dal sapore che vogliamo far ottenere alla cioccolata. Ogni passaggio è importante, anche quelli più piccoli, così importanti che senza di uno di loro tutto il resto crollerebbe. Creare algoritmi che altri possono capire è molto importante. Ecco perchè ogni passaggio deve essere scritto in modo che non importa chi lo fa, ma il risultato sia sempre lo stesso."
    C1_playlab_storytelling:
      1:
        image: 'notes/C1_playlab_storytelling_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-16#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nE' il momento di essere creativi e usare le tue capacità di scrivere codice per raccontare una storia. La tua storia avrà dei personaggi e sarai in grado di farli parlare e interagire tra di loro. Inizia a pensare a che tipo di storia vuoi raccontare."
      2:
        image: 'notes/C1_playlab_storytelling_2.png'
        text: "I gatti hanno sempre avuto paura dei cani, ma cosa succede se il gatto capisce che il cane sta cercando di essere gentile? Il blocco \"quando si clicca su Esegui\" (when run) fa iniziare ogni attività. Il blocco \"sposta\" (move) farà muovere il tuo personaggio e il blocco \"il personaggio dice ...\" (say) farà in modo che il tuo personaggio dica qualunque cosa tu scriva."
      3:
        image: 'notes/C1_playlab_storytelling_3.png'
        text: "Questo è il blocco per far accadere qualcosa \"quando i personaggi si toccano\". Mettilo nell'area di lavoro ed attaccaci sotto altri blocchi, che verranno eseguiti quando i personaggi si toccano."
      4:
        image: 'notes/C1_playlab_storytelling_4.png'
        text: "Ecco la mia storia: Il cane si è fatto avanti e ha detto \"Ciao\", ma il gatto ha avuto paura ed è scappato via. \"Ah...\" se ci fosse stato più tempo, ci sarebbe potuto essere un lieto fine. Fine!"
    C1_spelling_bee_intro:
      1:
        image: 'notes/C1_spelling_bee_intro_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-11#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuesta lezione è con l'ape sapiente. Usa i blocchi a tua disposizione per far spostare l'ape. Ogni volta che l'ape si muove raccoglie le lettere su cui si posa. Queste lettere ti permettono di scrivere le parole."
      2:
        image: 'notes/C1_spelling_bee_intro_2.png'
        text: "Vedi se riesci a scrivere la parola che ti appare nella casella sotto la figura. Ma stai attento! Se ti sposti nella direzione sbagliata aggiungi delle lettere che non ti servono."
    C1_zuck_repeat_loop:
      1:
        image: 'notes/C1_zuck_repeat_loop_1.png'
        text: "Una cosa in cui i computer sono veramente bravi è la ripetizione di istruzioni. Una persona si annoierebbe a morte se dovesse ripetere le stesse operazioni tante volte di seguito. Un computer, invece, può fare la stessa cosa milioni, o anche miliardi di volte, senza annoiarsi e riuscendo ad eseguirla davvero bene."
      2:
        image: 'notes/C1_zuck_repeat_loop_2.png'
        text: "Ad esempio, se volessi augurare un buon compleanno a tutti su Facebook mandando un messaggio di posta elettronica, impiegherei più di un secolo per scriverli. Mi bastano invece poche linee di codice per creare un programma che invia un messaggio a tutti su Facebook, augurando loro un buon compleanno."
      3:
        image: 'notes/C1_zuck_repeat_loop_3.png'
        text: "In questo esercizio, il tuo obiettivo è di far arrivare l'uccellino al maialino. Puoi raggiungere l'obiettivo dando al computer l'istruzione \"vai avanti\" (move forward) per cinque volte, così da far avanzare l'uccellino di un passo alla volta verso il maialino oppure puoi dare al computer l'istruzione \"vai avanti\" una sola volta, e poi dargli l'istruzione \"ripeti 5 volte\" (repeat 5 times), per ottenere lo stesso risultato."
      4:
        image: 'notes/C1_zuck_repeat_loop_4.png'
        text: "Per fare questo, devi trascinare il blocco \"vai avanti\" all'interno del blocco \"ripeti ... volte\". Puoi cliccare sul numero per dirgli quante volte ripetere il blocco al suo interno, cioè per dirgli - in questo caso - di quante posizioni vuoi avanzare."
      5:
        image: 'notes/C1_zuck_repeat_loop_5.png'
        text: "Un ultima cosa, puoi mettere quanti blocchi vuoi all'interno di un blocco \"ripeti ... volte\". In questo esempio, gli dici di avanzare di una casella e poi girare a sinistra, e gli dici che vuoi che lo faccia cinque volte. E' tutto, buon lavoro e buon divertimento!"
    C2_artist_intro:
      1:
        image: 'notes/C2_artist_intro_1.png'
        text: "Vista la quantità di dati che le macchine da corsa raccolgono, non potresti nemmeno qualificarti per la gara, se non ci fossero delle persone esperte di informatica in grado di scrivere programmi che possano aiutarci a capire come poter continuare a migliorare le prestazioni delle macchine da corsa."
      2:
        image: 'notes/C2_artist_intro_2.png'
        text: "In questi esercizi, sei un artista che usa un pennello per disegnare diverse figure. Dovunque fai andare il tuo artista, questo disegna una linea dietro di sé."
      3:
        image: 'notes/C2_artist_intro_3.png'
        text: "Per muovere l'artista, devi usare il blocco\"vai avanti\". Qui, il blocco \"vai avanti\" dice \"vai avanti di 100 pixel\" (move forward by 100 pixels). Quando clicco su \"Esegui\" che cosa succede? L'artista si sposta in avanti sullo schermo di 100 pixel! I pixel sono i minuscoli puntini sullo schermo del tuo computer."
      4:
        image: 'notes/C2_artist_intro_4.png'
        text: "Gli altri due blocchi in questo esercizio dicono \"gira a destra di 90 gradi\" e \"gira a sinistra di 90 gradi\". Quando usi il blocco \"gira a destra\" l'artista ruota a destra. Puoi fare dei tentativi per capire di quanto far girare l'artista. L'angolo è misurato rispetto al percorso davanti all'artista. In questo disegno la linea verso l'alto è ciò che disegna l'artista andando avanti dopo aver fatto una rotazione a sinistra di 90 gradi al termine della linea orizzontale."
      5:
        image: 'notes/C2_artist_intro_5.png'
        text: "E questo disegno rappresenta una rotazione a sinistra di 120 gradi. Ricorda, puoi modificare il numero dei pixel e dei gradi cliccando sui triangolini con la punta verso il basso accanto a loro. Divertiti a disegnare con il tuo artista!"
    C2_bee_conditionals:
      1:
        image: 'notes/C2_bee_conditionals_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-13#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuesto è il blocco condizionale. Questo blocco dice \"SE\" (if) c'è del nettare oppure del miele che è minore, uguale o maggiore di un certo valore, \"ALLORA\" fai (do) qualcosa."
      2:
        image: 'notes/C2_bee_conditionals_2.png'
        text: "Questo blocco è utile quando non sai quanto nettare puoi prendere o quanto miele puoi fare, come in questo caso in cui, al posto della quantità di nettare, c'è un punto interrogativo."
      3:
        image: 'notes/C2_bee_conditionals_3.png'
        text: "In questo esempio, in cui i fiori viola hanno una quantità di nettare pari a 0 oppure 1, è sufficiente dire \"SE\" il fiore viola ha una quantità di nettare maggiore di 0, raccogli il nettare. Fatto!"
    C2_binary_bracelets:
      1:
        image: 'notes/C2_binary_bracelets_1.png'
        text: "Questa è la lezione dei braccialetti binari. Andremo a creare un codice con le nostre iniziali in un braccialetto che potremo anche indossare e mostrare a tutti i nostri amici!"
      2:
        image: 'notes/C2_binary_bracelets_2.png'
        text: "Il binario è un modo di rappresentare informazioni usando solo due opzioni. A volte la gente pensa a questo sistema soltanto come 1 e 0. Ma puoi rappresentare il binario con combinazioni di acceso o spento, su e giù, dentro e fuori o qualsiasi altra combinazione di opposti."
      3:
        image: 'notes/C2_binary_bracelets_3.png'
        text: "Ciao, sono Orione e programmo robot qui a Play-im. Tutti i computer e i cervelli robotici al loro livello più fondamentale sono cancelli elettronici. Quando il cancello si apre, l'elettricità può scorreci attraverso mentre, quando è chiuso, non può."
      4:
        image: 'notes/C2_binary_bracelets_4.png'
        text: "Un esempio di binario nei robot sono i loro occhi. Gli occhi dei robot sono LED e queste luci sono entrambe accese o spente. E' un sistema binario, uno o l'altro. Possiamo usare le luci per rappresentare i numeri binari. Se abbiamo un set di robot, possiamo dire che il primo robot è al primo posto e il secondo robot è al secondo posto, il terzo robot è al quarto posto e così via. Così è come rappresentare un numero binario. I robot lo faranno con con i loro occhi binari e lo contano per te."
    C2_conditionals_with_cards:
      1:
        image: 'notes/C2_conditionals_with_cards_1.png'
        text: "Questa lezione si chiama condizionali con le carte. Ogni giorno prendi delle decisioni basandoti su ciò che senti e vedi."
      2:
        image: 'notes/C2_conditionals_with_cards_2.png'
        text: "Voglio camminare al parco ma prima devo decidere se dovrei portare l'ombrello o no. Quindi guardo fuori dalla finestra. Se è nuvoloso prenderò l'ombrello. Altrimenti, prendrerò gli occhiali da sole. Penso che sia meglio prendere un ombrello. Ciò che vedo e sento determina cosa porterò al parco."
      3:
        image: 'notes/C2_conditionals_with_cards_3.png'
        text: "I condizionali sono usati anche nei giochi. Oggi faremo pratica nell'usare i condizionali con le carte da gioco. In questo gioco, le carte che pesco andranno a determinare ciò faranno i miei amici. Se pescassi un sette, tutti devono battere le mani. Altimenti, tutti dovranno dire \"awww.\" Proviamo! \"Awww\" \"evviva\""
      4:
        image: 'notes/C2_conditionals_with_cards_4.png'
        text: "Scommetto che puoi creare giochi ancora più divertenti con i condizionali. Provaci! I condizionali sono ciò che fanno sembrare intelligente il computer. Un programma per il computer che include condizionali può reagire all'utente e cambiare il suo corso d'azione."
      5:
        image: 'notes/C2_conditionals_with_cards_5.png'
        text: "Pensa al tuo gioco preferito. Guadagni più punti per alcune azioni rispetto ad altre? Succede perchè il computer usa i condizionali. E' il modo in cui un computer fa le sue decisioni. Mettiamola così, se colpisci il bersaglio, guadagni 10 punti. Se lo manchi, ne perdi tre. Quando inizi a capire come funzionano i condizionali, puoi creare qualsiasi gioco."
    C2_artist_debugging:
      1:
        image: 'notes/C2_artist_debugging_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-11#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nC'è una sequenza di blocchi già pronti nell'area di lavoro. Ma c'è qualcosa che non va."
      2:
        image: 'notes/C2_artist_debugging_2.png'
        text: "Eseguiamo la \"correzione di errori\" (<i>debugging</i>) per questo programma rallentandone la velocità e osservando il modo in cui, passo dopo passo, viene eseguito ciascun blocco."
      3:
        image: 'notes/C2_artist_debugging_3.png'
        text: "Ah, ecco il problema! I baffi del gatto sono lunghi 75 pixel, non 25."
    C2_bee_debugging:
      1:
        image: 'notes/C2_bee_debugging_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-10#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nHai mai sentito parlare di \"correzione di errori\" (<i>debugging</i>) di un programma? È quando cerchi di capire cosa non funziona. Quando effettui la correzione di errori, identifichi e rimuovi gli errori."
      2:
        image: 'notes/C2_bee_debugging_2.png'
        text: "Hai a tua disposizione una serie di blocchi già pronti nell'area di lavoro. Clicca su \"Fai un passo\" (step) per eseguire questi blocchi passo dopo passo e verificare se la soluzione è giusta, oppure se è necessario correggere un errore."
      3:
        image: 'notes/C2_bee_debugging_3.png'
        text: "Sembra proprio che ci sia un problema! Devi aggiungere un altro blocco \"vai avanti\" (move forward). Il pulsante \"Fai un passo\" ti aiuta ad individuare dove si è verificato l'errore, così da permetterti di correggerlo."
    C2_digital_footprint:
      1:
        image: 'notes/C2_digital_footprint_1.png'
        text: "Sulla tua testa mantieni il tuo cappello e metà della tua intelligenza ti dirà dove sei e pensare allo zoo, e dire ciao con un cenno del capo a te e tu! Usi la tua testa quando sei in linea per mantenere ciò che dentro la tua mente e per sapere come essere salvo, come dare alla tua vita dello spazio privato! Dalla tua testa giù alle dita dei piedi, pausa, ci pensi. Dai tuoi piedi su per il tuo naso, pausa e pensi in linea!"
      2:
        image: 'notes/C2_digital_footprint_2.png'
        text: "Usa il tuo cuore per crescere e crescere. e dai a te stesso un colorito sano e per fare un biglietto di SanValentino, di a qualcuno che tu sarai mio! Usa il tuo cuore quando sei in linea, senti ciò che e giusto e sempre gentile e mostra rispetto ai tuoi amici, essere onesto e carino su internet. Dalla tua testa giù alle dita dei tuoi piedi, pausa, pensaci. Dai tuoi piedi su per il tuo naso, pausa e pensa in linea!"
      3:
        image: 'notes/C2_digital_footprint_3.png'
        text: "Usa le tue braccia per abbracciare il tuo animale, per evitare i tuoi vestiti di far bagnare, e per indossare le tue magliette preferite e per aiutarti a volare ed essere felice. Usa le tue braccia quando sei connesso, per fare un pausa e dividere il tempo con compromesso, e della tecnologia scordarti e trovare un albero su cui arrampicarti. Dalla testa fino ai tuoi piedi, fermati, riflettici adesso. Dai tuoi piedi fino al naso, fermati e pensa connesso!"
      4:
        image: 'notes/C2_digital_footprint_4.png'
        text: "Usa la tua pancia per il mangiare e per ascoltare il suo brontolare, per dare una panciata e per sentire il gas nella bevanda gassata. Usa la tua pancia quando sei connesso, per riconoscere un segnale espresso e per farti guidare bene e dirti quando non conviene. Dalla testa fino ai tuoi piedi, fermati, riflettici adesso. Dai tuoi piedi fino al naso, fermati e pensa connesso!"
      5:
        image: 'notes/C2_digital_footprint_5.png'
        text: "Quindi, pensa con la tua testa e senti con il tuo cuore, stai in equilibrio con le braccia e ascolta la tua pancia, online. Usa le tue gambe per correre e calciar, per saltare e rimbalzare sui trampoli con molla e per ballare intorno al blocco e per saltare lungo coi tuoi calzini maleodoranti. Usa le tue gambe quando sei online, per alzarti davanti ai bulli che attraversano la linea e ricordati di puntare in alto, sii gentile con creature grandi e piccole."
      6:
        image: 'notes/C2_digital_footprint_6.png'
        text: "Dalla tua testa verso sotto fino alle tue dita dei piedi, pausa, e pensa in questo. Dalle tue gambe verso sopra fino al tuo naso, pausa, e pensa online! Quindi pensa con la tua testa, e senti con il tuo cuore, bilancia con le tue braccia, ascolta il tuo intestino, alzati con le tue gambe. Dalle tue gambe verso sopra fino al naso, pausa e pensa online!"
    C2_digital_footprint_v2:
      1:
        image: 'notes/C2_digital_footprint_v2_1.png'
        text: "Ogni volta che vai online, lasci una impronta digitale che può essere rintracciata, copiata, condivisa, trasmessa ed è permanente. Che tipo di impronta digitale stai lasciando? Quale tipo di impronta digitale vuoi lasciare?"
    C2_graph_paper:
      1:
        image: 'notes/C2_graph_paper_1.png'
        text: "Questa lezione si chiama \"Grafico di Programmazione di Carta\" e è tutto sugli algoritmi. Oggi impareremo a scrivere programmi che mostrano agli a vicenda come ricreare semplici immagini in bianco e nero, usando solamente freccette disegnate a mano."
      2:
        image: 'notes/C2_graph_paper_2.png'
        text: "Un algoritmo è una lista di istruzioni per completare una mansione. Seguiremo questa lista di istruzioni per creare una ciotola. Gli algoritmi sono molto utili quando devi far capire a qualcuno come fare qualcosa."
      3:
        image: 'notes/C2_graph_paper_3.png'
        text: "Se stai scrivendo un algoritmo per un computer, è necessario scomporlo in tanti piccoli passaggi. Una volta completata una riga, si procede alla prossima, poi quella dopo ancora e via dicendo."
      4:
        image: 'notes/C2_graph_paper_4.png'
        text: "Uso algoritmi nel mio lavoro. Se scrivo tutti i passaggi posso ricreare quel pezzo, o posso insegnare a qualcun altro come fare. Metti il vetro nella fornace, fondilo, ora segui il resto delle istruzioni per creare la ciotola. Gli algoritmi ti fanno da mappa per raggiungere il tuo obiettivo."
    C2_artist_loops:
      1:
        image: 'notes/C2_artist_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-7#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nOra usiamo il blocco \"ripeti ... volte\" (<i>repeat ... times</i>) per usare meno blocchi mentre programmiamo con il nostro artista. Trovi già pronti alcuni blocchi che sono solo un punto di partenza."
      2:
        image: 'notes/C2_artist_loops_2.png'
        text: "Per disegnare l'intero quadrato devi ripetere questi blocchi quattro volte. Ti basta spostare nell'area di lavoro il blocco \"ripeti 4 volte\" e mettere al suo interno i blocchi \"vai avanti\" (move forward) e \"gira a destra\" (turn right) . Quando clicchi sul pulsante \"Esegui\", l'artista ripete queste istruzioni 4 volte e completa il quadrato."
    C2_bee_loops:
      1:
        image: 'notes/C2_bee_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-8#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nUn ciclo consiste nel ripetere una serie di attività. Se devo ispezionare un alveare, guardo un telaio e lo rimetto a posto, quindi ripeto queste stesse azioni più volte. È un circuito chiuso, ripeto più volte le stesse attività."
      2:
        image: 'notes/C2_bee_loops_2.png'
        text: "Questo è il blocco \"ripeti ... volte\" (repeat ... times). Qualunque cosa inserisci all'interno di un blocco \"ripeti ... volte\" verrà ripetuto il numero di volte che gli hai detto di eseguirlo. Ad esempio, in questo esercizio, invece di spostare nell'area di lavoro un blocco \"vai avanti\" (move forward) e un blocco \"prendi il nettare\" (get nectar) per tre volte, prova a spostarli nell'area di lavoro una sola volta e a ripetere queste azioni per tre volte. È semplice!"
    C2_maze_intro:
      1:
        image: 'notes/C2_maze_intro_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-3#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nI programmi tradizionali sono di solito del testo detto \"codice\". Tu invece scriverai programmi con Blockly, che usa blocchi colorati. I blocchi vengono attaccati per scrivere programmi. Anche se usi i blocchi, in realtà stai sempre scrivendo del codice. Per iniziare, dovrai creare il codice per un programma che aiuti l'uccellino arrabbiato (Angry Bird) a spostarsi all'interno di un labirinto per raggiungere il malvagio maialino che ha rubato le sue uova."
      2:
        image: 'notes/C2_maze_intro_2.png'
        text: "Blockly è diviso in tre parti principali. Sulla sinistra c'è il labirinto dell'uccellino, dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto il labirinto. La zona centrale è la \"cassetta degli attrezzi\"; ognuno di questi blocchi corrisponde ad un comando che l'uccellino può comprendere. Lo spazio bianco sulla destra si chiama \"area di lavoro\" e qui costruisci il tuo programma."
      3:
        image: 'notes/C2_maze_intro_3.png'
        text: "Se sposti un blocco \"vai avanti\" nell'area di lavoro e premi \"Esegui\" che cosa succede? L'uccello si sposta di una casella in avanti nel labirinto. E se desideri che l'uccello faccia qualcosa dopo essersi spostato di una casella in avanti? Puoi aggiungere un altro blocco al tuo programma."
      4:
        image: 'notes/C2_maze_intro_4.png'
        text: "Per aggiungere il blocco \"gira a sinistra\" trascinalo sotto il blocco \"vai avanti\" fino a che non appare una linea gialla sul contorno. A quel punto rilascialo, e i due blocchi si attaccheranno insieme. Se premi nuovamente \"Esegui\", l'uccellino eseguirà le istruzioni associate ai blocchi presenti nella tua area di lavoro, procedendo dall'alto verso il basso."
      5:
        image: 'notes/C2_maze_intro_5.png'
        text: "Se desideri eliminare un blocco, basta rimuoverlo dalla sequenza di blocchi e trascinarlo nel cestino. Dopo che hai cliccato su \"Esegui\", puoi sempre cliccare su \"Ricomincia\" per far tornare l'uccellino al punto di partenza. Ora andiamo a prendere quei maialini!"
    C2_paper_airplanes:
      1:
        image: 'notes/C2_paper_airplanes_1.png'
        text: "Questa lezione si chiama Algoritmi in Vita Reale. Gli algoritmi descrivono le cose che le persone fanno ogni giorno. Le ricette dei biscotti e le istruzioni per costruire un nido per gli uccelli sono entrambi algoritmi."
      2:
        image: 'notes/C2_paper_airplanes_2.png'
        text: "Oggi andremo a creare e testare un algoritmo per fare un aereoplano di carta. Ma prima, dobbiamo scomporre questo grande progetto in passaggi semplici da seguire. Per la creazione di un aereoplano di carta, dobbiamo decidere quali passaggi prendere ed in quale ordine seguirli."
      3:
        image: 'notes/C2_paper_airplanes_3.png'
        text: "Prima di poter creare il tuo algoritmo dovrai tagliare in diversi pezzi le immagini. Poi, dovrai selezionare le 6 immagini che mostrano i passi necessari per creare un aereoplano di carta e disporle nell'ordine corretto. Una volta che avrai ordinato il tutto, dovrai scambiare gli algoritmi con un altro studente del gruppo per capire se l'algoritmo funziona. Un algoritmo ben progettato è molto importante per creare il miglior aereoplano di carta."
      4:
        image: 'notes/C2_paper_airplanes_4.png'
        text: "Quando vogliamo fare la cioccolata, ci sono molti grandi passaggi da seguire. E ognuno di questi grandi passaggi ha la sua lista di passaggi più piccoli. E ci sono diverse ricette, o algoritmi, che dipendono da che sapore vogliamo dare alla nostra cioccolata. Ogni passaggio è importante, anche quelli più piccoli. Quindi senza un passaggio, tutto il resto non potrebbe essere completato. Creare algoritmi che gli altri possono capire è molto importante. Ecco perchè ogni passaggio deve essere scritto, non importa chi lo fa, il risultato deve essere lo stesso."
    C2_playlab_createstory:
      1:
        image: 'notes/C2_playlab_createastory_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-17#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nFinora hai realizzato un'animazione o una storia che fanno sempre le stesse cose ogni volta che le avvii. Ora è possibile realizzare un gioco interattivo con cui puoi giocare davvero."
      2:
        image: 'notes/C2_playlab_createastory_2.png'
        text: "Ci sono dei nuovi blocchi da provare. C'è il blocco \"quando si preme la freccia ...\" ('when ... arrow') e il blocco \"sposta il personaggio ...\" ('move actor ...'). Puoi usare insieme questi due blocchi per far muovere i personaggi con i tasti freccia. E ci sono dei blocchi che realizzano azioni quando i personaggi si toccano o sono cliccati. Provali e divertiti!"
    C2_relay_programming:
      1:
        image: 'notes/C2_relay_programming_1.png'
        text: "Oggi si svolgerà una staffetta di programmazione. Si tratta di programmare sotto pressione e correggere gli errori che talvolta vengono commessi quando lavori davvero velocemente o in team. Useremo la carta millimetrata per simulare il codice e faremo una staffetta per simulare le scadenze."
      2:
        image: 'notes/C2_relay_programming_2.png'
        text: "Nella programmazione a staffetta, le squadre gareggeranno a chi finisce il programma per primo. Dovrai controllare il lavoro dei tuoi compagni e debuggarlo, correggere gli errori se presenti; aggiungi la tua freccia e torna indietro a taggare il tuo compagno."
      3:
        image: 'notes/C2_relay_programming_3.png'
        text: "I programmatori usano moltissimo il debug per trovare e correggere eventuali errori nei loro algoritmi o codici. Esistono diversi metodi per rintracciare gli errori. Uno dei più semplici è quello di controllare l'algoritmo passaggio dopo passaggio fino a trovare il problema, e risolverlo."
      4:
        image: 'notes/C2_relay_programming_4.png'
        text: "Qui, sto cercando di fare un salto mortale all'indietro, ma continuo a cadere. Rieprcorro ogni momento, passo dopo passo, e mi rendo conto di quale sia stato il mio errore. Il mio allenatore mi ha mostrato che non stavo mettendo le mani sulla trave in modo corretto. Così ho provato un altro salto mortale all'indietro sulla trave con una nuova posizione della mano, e ce l'ho fatta! Sono stato davvero felice di aver corretto gli errori [debug] del mio salto mortale all'indietro. L'abbiamo capito! Debug è trovare e risolvere i problemi. Bello, buon lavoro!"
    C2_zuck_repeat_loop:
      1:
        image: 'notes/C2_zuck_repeat_loop_1.png'
        text: "Una cosa in cui i computer sono veramente bravi è la ripetizione di istruzioni. Una persona si annoierebbe a morte se dovesse ripetere le stesse operazioni tante volte di seguito. Un computer, invece, può fare la stessa cosa milioni, o anche miliardi di volte, senza annoiarsi e riuscendo ad eseguirla davvero bene."
      2:
        image: 'notes/C2_zuck_repeat_loop_2.png'
        text: "Ad esempio, se volessi augurare un buon compleanno a tutti su Facebook mandando un messaggio di posta elettronica, impiegherei più di un secolo per scriverli. Mi bastano invece poche linee di codice per creare un programma che invia un messaggio a tutti su Facebook, augurando loro un buon compleanno. Questo è ciò che fanno le istruzioni di ripetizione (dette \"cicli\"), che sono così preziose perché i computer possono eseguirle davvero molto bene."
      3:
        image: 'notes/C2_zuck_repeat_loop_3.png'
        text: "In questo esercizio, il tuo obiettivo è di far arrivare l'uccellino al maialino. Puoi raggiungere l'obiettivo dando al computer l'istruzione \"vai avanti\" (move forward) per cinque volte, così da far avanzare l'uccellino di un passo alla volta verso il maialino."
      4:
        image: 'notes/C2_zuck_repeat_loop_4.png'
        text: "Oppure puoi dare al computer l'istruzione \"vai avanti\" una sola volta, e poi dargli l'istruzione \"ripeti 5 volte\" (repeat 5 times), per ottenere lo stesso risultato. Per fare questo, devi trascinare il blocco \"vai avanti\" all'interno del blocco \"ripeti ... volte\". Puoi cliccare sul numero per dirgli quante volte ripetere il blocco al suo interno, cioè per dirgli - in questo caso - di quante posizioni vuoi avanzare."
      5:
        image: 'notes/C2_zuck_repeat_loop_5.png'
        text: "Un ultima cosa, puoi mettere quanti blocchi vuoi all'interno di un blocco \"ripeti ... volte\". In questo esempio, gli dici di avanzare di una casella e poi girare a sinistra, e gli dici che vuoi che lo faccia cinque volte. E' tutto, buon lavoro e buon divertimento!"
    C3_artist_functions:
      1:
        image: 'notes/C3_artist_functions_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-12#VIDEO\" target=\"_blank\">Video doppiato in italiano</a> (solo la seconda parte)<br><br>\nUna delle cose più utili della programmazione è che una volta che hai insegnato ad un computer come fare un'azione, puoi richiamare nuovamente quella \"funzione\" (<i>function</i>). Le dai un nome e dopo puoi richiamarla. È proprio come ampliare il linguaggio."
      2:
        image: 'notes/C3_artist_functions_2.png'
        text: "Nel programma che hai costruito, hai imparato come disegnare un quadrato avanzando e poi girando per quattro volte. Puoi prendere quella funzione e darle un nome, ad esempio \"disegna un quadrato\" (<i>draw a square</i>), in modo tale che ogni volta che vorrai farlo, potrai semplicemente dire \"disegna un quadrato\" e il computer richiamerà la stessa funzione, eseguendo sempre quello stesso codice. Hai aggiunto quel concetto al tuo linguaggio di programmazione."
    C3_artist_intro:
      1:
        image: 'notes/C3_artist_intro_1.png'
        text: "Vista la quantità di dati che le macchine da corsa raccolgono, non potresti nemmeno qualificarti per la gara, se non ci fossero delle persone esperte di informatica in grado di scrivere programmi che possano aiutarci a capire come poter continuare a migliorare le prestazioni delle macchine da corsa."
      2:
        image: 'notes/C3_artist_intro_2.png'
        text: "In questi esercizi, sei un artista che usa un pennello per disegnare diverse figure. Dovunque fai andare il tuo artista, questo disegna una linea dietro di sé."
      3:
        image: 'notes/C3_artist_intro_3.png'
        text: "Per muovere l'artista, devi usare il blocco\"vai avanti\". Qui, il blocco \"vai avanti\" dice \"vai avanti di 100 pixel\" (move forward by 100 pixels). Quando clicco su \"Esegui\" che cosa succede? L'artista si sposta in avanti sullo schermo di 100 pixel! I pixel sono i minuscoli puntini sullo schermo del tuo computer."
      4:
        image: 'notes/C3_artist_intro_4.png'
        text: "Gli altri due blocchi in questo esercizio dicono \"gira a destra di 90 gradi\" e \"gira a sinistra di 90 gradi\". Quando usi il blocco \"gira a destra\" l'artista ruota a destra. Puoi fare dei tentativi per capire di quanto far girare l'artista. L'angolo è misurato rispetto al percorso davanti all'artista. In questo disegno la linea verso l'alto è ciò che disegna l'artista andando avanti dopo aver fatto una rotazione a sinistra di 90 gradi al termine della linea orizzontale."
      5:
        image: 'notes/C3_artist_intro_5.png'
        text: "E questo disegno rappresenta una rotazione a sinistra di 120 gradi. Ricorda, puoi modificare il numero dei pixel e dei gradi cliccando sui triangolini con la punta verso il basso accanto a loro. Divertiti a disegnare con il tuo artista!"
    C3_artist_nested_loops:
      1:
        image: 'notes/C3_artist_nested_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-11#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuando inserisci un ciclo all'interno di un altro ciclo ottieni quello che in programmazione viene detto \"ciclo annidato\". Ad esempio, in questo esercizio trovi già pronto il codice per disegnare un triangolo con i lati lunghi 100 pixel che usa il blocco \"ripeti ... volte\" (<i>repeat ... times</i>) impostato a 3, cioè una volta per ogni lato del triangolo."
      2:
        image: 'notes/C3_artist_nested_loops_2.png'
        text: "In questo esercizio vogliamo disegnare più di un triangolo. Per fare ciò, dobbiamo prendere quel ciclo e metterlo all'interno di un altro blocco \"ripeti ... volte\". Forte, no?"
    C3_bee_conditionals:
      1:
        image: 'notes/C3_bee_conditionals_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-13#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuesto è il blocco condizionale. Questo blocco dice \"SE\" (if) c'è del nettare oppure del miele che è minore, uguale o maggiore di un certo valore, \"ALLORA\" fai (do) qualcosa."
      2:
        image: 'notes/C3_bee_conditionals_2.png'
        text: "Questo blocco è utile quando non sai quanto nettare puoi prendere o quanto miele puoi fare, come in questo caso in cui, al posto della quantità di nettare, c'è un punto interrogativo."
      3:
        image: 'notes/C3_bee_conditionals_3.png'
        text: "In questo esempio, in cui i fiori viola hanno una quantità di nettare pari a 0 oppure 1, è sufficiente dire \"SE\" il fiore viola ha una quantità di nettare maggiore di 0, raccogli il nettare. Fatto!"
    C3_bee_debugging:
      1:
        image: 'notes/C3_debugging_bee_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-10#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nHai mai sentito parlare di \"correzione di errori\" (<i>debugging</i>) di un programma? È quando cerchi di capire cosa non funziona. Quando effettui la correzione di errori, identifichi e rimuovi gli errori."
      2:
        image: 'notes/C3_debugging_bee_2.png'
        text: "Hai a tua disposizione una serie di blocchi già pronti nell'area di lavoro. Clicca su \"Fai un passo\" (step) per eseguire questi blocchi passo dopo passo e verificare se la soluzione è giusta, oppure se è necessario correggere un errore."
      3:
        image: 'notes/C3_debugging_bee_3.png'
        text: "Sembra proprio che ci sia un problema! Devi aggiungere un altro blocco \"vai avanti\" (move forward). Il pulsante \"Fai un passo\" ti aiuta ad individuare dove si è verificato l'errore, così da permetterti di correggerlo."
    C3_bee_functions:
      1:
        image: 'notes/C3_bee_functions_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-6#VIDEO\" target=\"_blank\">Video doppiato in italiano</a> (solo la seconda parte)<br><br>\nUno dei meccanismi più importanti in informatica è la definizione di nuovi comandi, la possibilità di aggiungere le tue parole ad un linguaggio di programmazione. La maggior parte dei linguaggi di programmazione hanno solo circa 100 parole o comandi. Ed è davvero arte e magia la possibilità di definire le tue nuove parole mediante i blocchi già esistenti."
      2:
        image: 'notes/C3_bee_functions_2.png'
        text: "Nello sport noi facciamo esattamente la stessa cosa. Per esempio, nella pallacanestro si inizia imparando come dribblare, come tirare da sotto, come prendere un rimbalzo. Una volta che hai imparato i movimenti basilari, puoi impararne di nuovi e combinarli con quelli esistenti, come il \"blocco\" o il \"dai e vai\". Puoi quindi passare da questi a schemi più complessi. Una volta che impari uno schema e gli dai un nome, tutti i tuoi compagni di squadra sanno come farlo."
      3:
        image: 'notes/C3_bee_functions_3.png'
        text: "Allo stesso modo, una volta che hai insegnato ad un computer come fare un'azione utilizzando una certa sequenza di comandi, puoi dare un tuo nome a questa azione così che sia facile ripeterla nuovamente. Quando definisci un tuo comando e gli dai un nome, hai realizzato una \"funzione\" (FUNCTION). Ora proviamo ad usare le funzioni per aiutare l'ape."
      4:
        image: 'notes/C3_bee_functions_4.png'
        text: "In questo esempio, la nostra funzione si chiama \"prendi 2 dosi di nettare\" (<i>get 2 nectar</i>) ed è il blocco verde. Puoi sapere cosa fa \"prendi 2 dosi di nettare\" osservando questo blocco grigio che è la definizione della funzione. Se guardi al suo interno ti accorgi che \"prendi 2 dosi di nettare\" è formata da un blocco \"prendi il nettare\" (<i>get nectar</i>) seguito da un altro blocco \"prendi il nettare\". Guarda sempre cosa c'è nel blocco grigio per sapere cosa possono fare i blocchi verdi delle funzioni."
    C3_bee_nested_loops:
      1:
        image: 'notes/C3_bee_nested_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-13#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nOra usiamo i \"cicli annidati\" con l'ape. Nell'esercizio 3 trovi del codice già pronto che dice all'ape di andare avanti e raccogliere una dose di nettare, di ripetere queste azioni per tre volte e quindi girare a destra. Prendi tutto questo codice, inseriscilo all'interno di un altro blocco \"ripeti ... volte\" (<i>repeat ... times</i>) ed impostagli a 3 il numero di ripetizioni. Hai realizzato un ciclo annidato!"
    C3_bounce:
      1:
        image: 'notes/C3_bounce_1.png'
        text: "Crea la tua versione del Ping-Pong! Puoi anche condividerla con i tuoi amici! Che emozione!\n\nhttps://studio.code.org/s/course3/stage/15/puzzle/10???"
      2:
        image: 'notes/C3_bounce_2.png'
        text: "Per iniziare, devi far sì che i blocchi per spostare la racchetta siano guidati dai tasti freccia."
      3:
        image: 'notes/C3_bounce_3.png'
        text: "Puoi farlo collegando il blocco \"sposta a sinistra\" al blocco \"quando si preme sulla freccia verso sinistra\" e il blocco \"sposta a destra\" al blocco \"quando si preme sulla freccia verso destra\". Ora prosegui ed in poco tempo avrai realizzato la tua versione del Ping-Pong!"
    C3_computational_thinking:
      1:
        image: 'notes/C3_computational_thinking_1.png'
        text: "Questa lezione si chiama pensiero computazionale. A volte imparare un ad usare un nuovo gioco può risultare difficile, non è vero? All'inizio potrebbe risultare confusionevole e a volte, non c'è nessuno che possa aiutarti a capirne le regole, quindi devi immaginartele da solo."
      2:
        image: 'notes/C3_computational_thinking_2.png'
        text: "La buona notizia è che grazie a dei trucchetti con la mente potrai migliorare la tua tecnica per capire le cose da solo. In questa lezione imparerai quattro metodi unici per riuscire a cercare o risolvere i problemi, praticali con i tuoi amici per capire le regole di un gioco."
      3:
        image: 'notes/C3_computational_thinking_3.png'
        text: "Quando scomponi un grande problema in pezzi più piccoli, stai usando il tuo cervello per dividerlo in pezzi più piccoli. Una volta che avremo scomposto il grande problema in tanti pezzi più piccoli, possiamo passare al prossimo passaggio, chiamato pattern match."
      4:
        image: 'notes/C3_computational_thinking_4.png'
        text: "E' quando cerchiamo delle somiglianze fra delle cose. Una volta che riesco a trovare delle cose uguali, riesco a capire più facilmente quali sono quelle diverse. Quando rimuovo queste ultime, tutto ciò viene chiamato astrazione."
      5:
        image: 'notes/C3_computational_thinking_5.png'
        text: "Una volta che ho capito i passaggi per risolvere un problema, posso distribuire questi passaggi in un ordine specifico chiamato algoritmo in modo che chiunque possa usare le mie indicazioni per risolvere il problema. Useremo questi quattro passaggi per capire come giocare a questo gioco senza regole. Entro la fine del gioco, sarai in grado di giocare a qualcosa simile a questo!"
    C3_crowdsourcing:
      1:
        image: 'notes/C3_crowdsourcing_1.png'
        text: "Questa lezione si chiama ricerca di gruppo. In questa lezione useremo un mazzo di carte per capire quanto più semplice sia fare le cose in gruppo anzichè provare a farle da soli. Quindi trova degli amici e crea qualcosa di fantastico con loro. La ricerca di gruppo raccoglie un grande gruppo di persone per potrare a termine un lavoro più velocemente."
      2:
        image: 'notes/C3_crowdsourcing_2.png'
        text: "Nell'informatica, usiamo la ricerca di gruppo tutto il tempo. Centinaia di amatori e professionisti si connettono insieme per cercare attraverso miliardi e milioni di pezzi di informazione. Alla ricerca di cose come il prossimo numero primo di Marsenne, o perfino la possibile comunicazone con gli alieni."
      3:
        image: 'notes/C3_crowdsourcing_3.png'
        text: "Quando vedi un film, ogni secondo del film sono 24 immagini individuali, le chiamiamo fotogrammi. Ognuna di queste immagini dev'essere creata, raffigurata ed unita insieme alle altre. Io e il mio gruppo, siamo tutti sviluppatori di software. Lavoriamo tutti insieme per creare un pezzo del software che crea realmente un' immagine, crea l'immagine finale che vedi sullo schermo. E' uno strumento che gli artisti ed altri sviluppatori possono usare come parte del loro lavoro di gruppo e del loro processo per essere in grado di creare le immagini che vogliono sullo schermo."
      4:
        image: 'notes/C3_crowdsourcing_4.png'
        text: "Ad esempio, in \"Alla ricerca di Nemo\", quando Crush, Squirt e tutti i loro amici stanno volando attraverso la corrente australiana orientale, si vede un flusso d'acqua che scorre, si vedono i colori sulla parte posteriore della tartaruga, si vedono i lati del pesce. Tutte queste cose vengono generate grazie alla matematica e ai programmi informatici che scriviamo, dati al creativo al fine di creare l'immagine finale e modificarla in modo che sembri bella e divertente."
    C3_dice_race:
      1:
        image: 'notes/C3_dice_race_1.png'
        text: "Questa lezione si chiama corsa dei dadi. A tutti piacciono i giochi per il computer. Hai mai pensato a come i programmatori di computer facciano a trasforamare i passaggi di un gioco in un programma? Il primo passo per creare un gioco per il computer e per risolvere un qualsiasi problema richiede un pensiero ed una pianificazione."
      2:
        image: 'notes/C3_dice_race_2.png'
        text: "Il pensiero dietro alla risoluzione di un problema produce un algoritmo, una pianificazione passaggio per passaggio per portare a termine un lavoro. In questa lezione, andremo a creare un algoritmo per un gioco chiamato corsa dei dadi. Poi dovrai chiedere ai tuoi amici di provare il tuo piano per capire se riescono a seguire i passaggi per giocare al tuo gioco. Una volta che il programmatore si sarà assicurato che i passaggi sono corretti, arriverà il momento di trasformare l'algoritmo in un programma in una lingua che il computer possa capire."
      3:
        image: 'notes/C3_dice_race_3.png'
        text: "Tutto ciò che facciamo ogni giorno richiede un algoritmo, una lista di passaggi da seguire per portare a termine un lavoro. Pensa a ciò che fai per prepararti per andare a scuola o pianificare una bella giornata con gli amici o preparare uno spuntino. Per completare quasiasi di queste cose, devi dividerle in piccoli passaggi e qualche volta, questi passaggi, devono seguire un ordine specifico."
      4:
        image: 'notes/C3_dice_race_4.png'
        text: "Pensa a come si fa un sandwich. Non importa quali ingredienti metti prima. Ma non puoi spalmare la marmellata prima di aver aperto il barattolo. I computer hanno bisogno di algoritmi e programmi per fargli capire come fare cose cui noi non abbiamo bisogno di pensare."
      5:
        image: 'notes/C3_dice_race_5.png'
        text: "Un algoritmo è il pensiero che sta dietro a ciò che succede, mentre il programma è l'effettiva istruzione data al computer per farlo funzionare. Un algoritmo deve essere tradotto in un programma prima che un computer possa eseguirlo. Scomporre una mansione in passaggi, tuttavia, è a volte difficile. Ma come per ogni cosa, con la pratica si può migliorare."
    C3_farmer_while:
      1:
        image: 'notes/C3_farmer_while_1.png'
        text: "Il blocco di ripetizione \"mentre\" (while) è simile a ciò che si fa nella vita di tutti i giorni. Immagina che stai lavando la tua auto: continuerai a strofinarla fino a quando non sarà pulita. In altre parole, \"mentre\" è sporca, continui a strofinarla. Quindi, valuti ripetutamente lo stato della macchina. "
      2:
        image: 'notes/C3_farmer_while_2.png'
        text: "Ecco il nuovo blocco per dare una mano alla contadina. Si chiama blocco di ripetizione \"mentre\" (while). Il suo funzionamento è piuttosto semplice: per tutto il tempo in cui la condizione scritta a fianco al \"mentre\" è vera, \"fai\" (do) qualcosa. Per esempio, per tutto il tempo in cui c'è un mucchio (while there is a pile) rimuovi una palata di terra. Prova ad usarlo aiutare la contadina."
    C3_functional_suncatchers:
      1:
        image: 'notes/C3_functional_suncatchers_1.png'
        text: "Questa lezione è funzionale alla creazione di cristalli multicolore. Sono immagini carine che si creano usando funzioni. Ci sono diversi passaggi nella creazione di uno di questi cristalli. Alcuni dei passaggi vanno ripetuti diverse volte."
      2:
        image: 'notes/C3_functional_suncatchers_2.png'
        text: "Il primo passo è semplificare il processo per creare un cattura sole è capire cosa dobbiamo far ripetere di continuo. Possiamo raggruppare questi passi in ciò che chiamiamo funzione."
      3:
        image: 'notes/C3_functional_suncatchers_3.png'
        text: "Ma c'è di più per creare un magnifico cattura sole che seguire dei passi precisi. A volte vogliamo essere creativi e cambiare il colore delle cose che stiamo usando. Possiamo creare ogni cattura sole uno diverso dall'altro se usiamo per ciascuno colori diversi."
      4:
        image: 'notes/C3_functional_suncatchers_4.png'
        text: "Il tuo suncatcher sarà proprio tuo solo quando imparerai a pensare alle perle come variabili: tale parola indica un segnaposto destinato per informazioni che possono cambiare. Divertiti a creare belle Giveaway utilizzando funzioni e variabili!"
    C3_internet:
      1:
        image: 'notes/C3_internet_1.png'
        text: "Questa lezione riguarda completamente Internet. Internet è un posto molto affollato e simile ad una strada trafficata. Le macchine sono come dei messaggi che devono raggiungere la loro destinazione. I messaggi si muovono molto rapidamente attraverso Internet."
      2:
        image: 'notes/C3_internet_2.png'
        text: "Imparare come funziona Internet ti aiuterà a capire cosa sta succedendo quando lo usi. Capire come i messaggi passano dal tuo computer al tuo sito preferito o da un amico a una casella di posta elettronica. Allo stesso modo in cui è più facile percorrere strade trafficate quando conosci le vie e sai leggere i segnali, navigare su internet non è così complicato quando sai cosa succede dietro le quinte."
      3:
        image: 'notes/C3_internet_3.png'
        text: "Inviare messaggi in Internet è un po' come inviare messaggi per posta ma con delle differenze. Sono su Google.com. L'indirizzo IP per questo sito è un numero. L'indirizzo IP è come l'indirizzo del mittente nella posta. Immagina di inviare un messaggio per posta a qualcuno nell'ufficio di sotto. Vedi l'URL e l'indirizzo IP nella porta? Ho scritto questo messaggio e l'ho inviato."
      4:
        image: 'notes/C3_internet_4.png'
        text: "A differenza del Servizio Postale, la prima cosa che succede dopo l'invio è lo spezzettamento del messaggio in parti più piccole in modo tale da poter essere inviato più facilmente. Queste piccole parti sono chiamate pacchetti. Ogni pacchetto del messaggio viene inviato uno alla volta alla destinazione. Questi pacchetti vengono ricomposti nell'ordine corretto in modo che il ricevente del messaggio possa leggerlo correttamente. Certo, ci sono molte altre cose da imparare su come funziona Internet ma questo è un buon inizio. Sei sulla buona strada per diventare un utente esperto di Internet! Racconta a tutti i tuoi amici e la tua famiglia cos'hai imparato!"
      5:
        image: 'notes/C3_internet_5.png'
        text: "Il mio nome è Amanda Camp e sono un ingeniere di Google. Lavoro in un gruppo che lavora su un server di salvataggio che immagazzina profili e contatti. Nel mio lavoro, pensiamo molto su come i contatti possano essere inviati agli altri dispositivi, come il tuo telefono. Molta gente ha tanti contatti, potresti avere, 1000 contatti e non vogliamo inviare tutti questi contatti sul tuo telefono in una volta perchè sarebbe un messaggio troppo pesante. Simile al modo in cui Internet spezza i messaggi pesanti in piccoli pacchetti, usiamo un concetto chiamato paging dove possiamo inviare al tuo telefono solo 100 contatti alla volta e permettere al tuo telefono di risponderci e chiedere i prossimi 100."
      6:
        image: 'notes/C3_internet_6.png'
        text: "La cosa più eccitante del software è il fatto che può avere un impatto sul mondo intero. Ho imparato a programmare quando avevo circa 19 anni. Penso quando ero già al secondo anno o un junior college. Come primo programma ricordo di aver scritto qualcosa per convertire Celsius in Fahrenheit. Mi piace programmare perché mi piace aiutare le persone. Posso scrivere programmi di Google che aiutano le persone in tutto il mondo ed è veramente da capogiro ed eccitante."
    C3_maze_conditionals:
      1:
        image: 'notes/C3_maze_conditionals_1.png'
        text: "Le persone prendono decisioni ogni giorno. Ad esempio, prima di uscire di casa, hai dentro di te una specie di istruzione SE che dice \"se\" (if) piove, \"allora\" (then) devo prendere l'impermeabile. I computer sono fantastici nel trattare questo tipo di istruzioni: sono affidabili e riescono ad eseguirle a velocità incredibile. Quindi, un programma per computer in pratica è un po' di matematica e alcune istruzioni SE, con le quali vengono prese delle decisioni."
      2:
        image: 'notes/C3_maze_conditionals_2.png'
        text: "Il blocco \"se\" (if) aiuta lo zombie a prendere una decisione controllando qualcosa. Per esempio, usiamo il blocco che dice \"se c'è strada a sinistra\" (if path to the left), e mettiamo il blocco \"gira a sinistra\" (turn left) all'interno di esso. In questo modo, stiamo dicendo allo zombie di controllare l'ambiente circostante, verificare se c'è una strada sulla sinistra e, in caso affermativo, girare a sinistra."
      3:
        image: 'notes/C3_maze_conditionals_3.png'
        text: "Adesso usiamo un blocco \"vai avanti\" (move forward) all'interno di un blocco \"ripeti fino a che\" (repeat until) per far avanzare lo zombie di una casella. Poi, se c'è strada a sinistra, il blocco \"se\" fa girare lo zombie a sinistra. Come puoi osservare, facendo così, ossia andando sempre avanti e girando a sinistra quando è possibile, lo zombie raggiungerà l'obiettivo."
      4:
        image: 'notes/C3_maze_conditionals_4.png'
        text: "Questo è solo un esempio di utilizzo di un blocco \"se\", che è davvero un'istruzione fondamentale nell'informatica. Una delle prima cose che ho imparato è stata come scrivere un programma per giocare a Tris. Ho usato un'istruzione \"se\" che diceva \"se l'avversario sta per vincere, blocca la casella che gli consente di vincere\". Divertiti imparando ad usare le istruzioni \"se\", sono molto importanti."
    C3_maze_level_4:
      1:
        image: 'notes/C3_maze_level_4_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-2#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nIn questo esempio, il tuo obiettivo è quello di far arrivare lo zombie fino al girasole. Puoi raggiungere l'obiettivo dando al computer l'istruzione \"vai avanti\" (<i>move forward</i>) per cinque volte, così da far avanzare lo zombie di un passo alla volta verso il girasole. Oppure puoi ottenere lo stesso risultato usando una volta sola l'istruzione \"vai avanti\" e ripetendola 5 volte usando il blocco \"ripeti 5 volte\" (<i>repeat 5 times</i>)."
      2:
        image: 'notes/C3_maze_level_4_2.png'
        text: "Questa seconda possibilità ti consente di risolvere l'esercizio in maniera più semplice e veloce. Per utilizzarla, inserisci il blocco \"vai avanti\" all'interno del blocco \"ripeti ... volte\". Clicca su \"Esegui\" e lo zombie si sposterà cinque volte in avanti fino ad arrivare al girasole saporito."
    C3_playlab_create_game:
      1:
        image: 'notes/C3_playlab_create_game_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-17#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nFinora hai realizzato un'animazione o una storia che fanno sempre le stesse cose ogni volta che le avvii. Ora è possibile realizzare un gioco interattivo con cui puoi giocare davvero."
      2:
        image: 'notes/C3_playlab_create_game_2.png'
        text: "Ci sono dei nuovi blocchi da provare. C'è il blocco \"quando si preme la freccia ...\" ('when ... arrow') e il blocco \"sposta il personaggio ...\" ('move actor ...'). Puoi usare insieme questi due blocchi per far muovere i personaggi con i tasti freccia. E ci sono dei blocchi che realizzano azioni quando i personaggi si toccano o sono cliccati. Provali e divertiti!"
    C3_songwriting_with_parameters:
      1:
        image: 'notes/C3_songwriting_with_parameters_1.png'
        text: "Questa è una lezione per imparare a scrivere una canzone. La musica è come un programma per il computer. Le note scritte e le parole dicono al cantante esattamente cosa fare. Alcune parti della musica sono riutilizzate di continuo."
      2:
        image: 'notes/C3_songwriting_with_parameters_2.png'
        text: "Questo lo chiamiamo coro. In un programma per il computer, le parti del programma che vengono riutilizzate sono chiamate funzioni. Quando leggi il testo di una canzone e dice la parola coro, canti la parola coro? No, guardi in cima alla pagina per vedere quali parole si riferiscano al coro."
      3:
        image: 'notes/C3_songwriting_with_parameters_3.png'
        text: "In questa lezione, imparererai una canzoncina chiamata piccolo coniglietto fu fu. La canzone ha un coro che canterai molte volte a ripetizione. Una funzione è un pezzo di codice che puoi chiamare e usare di continuo. Rende la programmazione più semplice e più efficiente in modo che tu non debba sempre riscrivere i passi di una funzione. Ti basta scriverla una volta!"
    C4_bee_conditional:
      1:
        image: 'notes/C4_bee_conditional_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-2#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuesto è il blocco condizionale. Il blocco controlla una certa condizione, ad esempio \"se sei su un fiore (<i>if at flower</i>), oppure \"se sei su un favo\" (<i>at honeycomb</i>). Se (<i>if</i>) la condizione è vera allora \"esegui\" (<i>do</i>) qualche azione. Questo blocco è utile quando non sappiamo quanto nettare possiamo raccogliere o quanto miele possiamo produrre, come nell'esercizio della figura successiva in cui vediamo solo un punto interrogativo."
      2:
        image: 'notes/C4_bee_conditional_2.png'
        text: "Nell'esercizio di questo esempio devi usare due blocchi \"se\". Col primo blocco devi dire \"se c'è un fiore prendi il nettare\". Poi col secondo blocco devi dire \"se c'è un favo fai il miele\". Qualunque dei due trovi sotto la nuvoletta, hai risolto!"
    C4_conditionals:
      1:
        image: 'notes/C4_conditionals_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-2#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nAbbiamo un nuovo blocco chiamato blocco \"se-altrimenti\" (<i>if-else</i>). Si tratta di un'istruzione condizionale proprio come il blocco \"se\" (<i>if</i>) che hai usato nell'esercizio precedente. Il blocco \"se-altrimenti\" fa scegliere all'ape cosa fare tra due insiemi di azioni possibili. Se l'ape è su un fiore, l'ape eseguirà l'insieme di azioni che sono inserite nella prima parte, dove c'è scritto \"esegui\" (<i>do</i>). Se l'ape non è su un fiore, l'ape eseguirà l'insieme di azioni che sono inserite nella seconda parte, dove c'è scritto \"altrimenti\" (<i>else</i>)."
      2:
        image: 'notes/C4_conditionals_2.png'
        text: "Le istruzioni condizionali consentono ai computer di prendere delle decisioni. Le persone impostano delle condizioni che dicono al computer “SE (if) si verifica una determinata situazione fai questo. ALTRIMENTI (else), ossia in caso contrario, fai quest'altro.” Nella figura precedente il blocco “se-altrimenti” dice “se c'è un fiore” (if at flower), mentre nella figura qui accanto “se ci sono 2 dosi di nettare” (if nectar = 2), ma potremmo dire altre cose, ad esempio “se c'è strada in avanti”. Il comportamento del blocco “se-altrimenti” è sempre lo stesso, ossia, “se” l'istruzione nella parte alta del blocco è vera, allora viene eseguito il primo insieme di azioni; “altrimenti”, se l'istruzione nella parte alta del blocco è falsa, viene eseguito il secondo insieme di azioni."
    C4_for_loops:
      1:
        image: 'notes/C4_for_loops_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-10#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuando usi un blocco \"ripeti … volte\" per eseguire più volte una parte del tuo codice, come fa il computer a sapere quando il codice è stato ripetuto a sufficienza? Il blocco \"ripeti … volte\" in realtà utilizza un blocco più sofisticato detta \"ciclo con contatore\" che conta, a partire da un valore iniziale fino ad un valore finale, con un incremento stabilito."
      2:
        image: 'notes/C4_for_loops_2.png'
        text: "Per esempio, un blocco \"ripeti 3 volte\" conta da 1 a 3 con un incremento di 1. Ogni volta che conta, esegue il codice all'interno del ciclo. Il \"ciclo con contatore\" sa quante volte è stato eseguito grazie alla variabile \"contatore\" (<i>counter</i>) che viene impostata al valore iniziale all'inizio del ciclo e a cui viene aggiunto l'incremento ogni volta che il ciclo viene eseguito. Non appena la variabile \"contatore\" diventa più grande del valore finale, il ciclo si arresta. Il vantaggio di usare un \"ciclo con contatore\" al posto di un blocco \"ripeti … volte\" sta nel fatto che si può vedere la variabile \"contatore\" (<i>counter</i>) e usarla nel ciclo."
      3:
        image: 'notes/C4_for_loops_3.png'
        text: "Il vantaggio di usare un vero \"ciclo con contatore\" (repeat counter times) al posto di un blocco \"ripeti … volte\" sta nel fatto che si può effettivamente vedere la variabile \"contatore\" (counter) e usarla nel ciclo. Per esempio, se ho una fila di fiori e il primo ha una dose di nettare, il secondo ne ha due e il terzo ne ha tre, posso usare il \"ciclo con contatore\" per dire all'ape di raccogliere \"contatore\" dosi di nettare ogni volta, ossia una dose dal primo fiore, due dal secondo e tre dal terzo."
      4:
        image: 'notes/C4_for_loops_4.png'
        text: "Inoltre in un \"ciclo con contatore\", puoi far sì che il 'contatore' venga incrementato ogni volta di un numero diverso da uno. Puoi contare di 2 alla volta, di 4 alla volta o addirittura di una quantità ogni volta diversa."
    C4_for_loops_bee:
      1:
        image: 'notes/C4_for_loops_bee_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-10#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuando usi un blocco \"ripeti … volte\" per eseguire più volte una parte del tuo codice, come fa il computer a sapere quando il codice è stato ripetuto a sufficienza? Il blocco \"ripeti … volte\" in realtà utilizza un blocco più sofisticato detta \"ciclo con contatore\" che conta, a partire da un valore iniziale fino ad un valore finale, con un incremento stabilito."
      2:
        image: 'notes/C4_for_loops_bee_2.png'
        text: "Per esempio, un blocco \"ripeti 3 volte\" conta da 1 a 3 con un incremento di 1. Ogni volta che conta, esegue il codice all'interno del ciclo. Il \"ciclo con contatore\" sa quante volte è stato eseguito grazie alla variabile \"contatore\" (<i>counter</i>) che viene impostata al valore iniziale all'inizio del ciclo e a cui viene aggiunto l'incremento ogni volta che il ciclo viene eseguito. Non appena la variabile \"contatore\" diventa più grande del valore finale, il ciclo si arresta. Il vantaggio di usare un \"ciclo con contatore\" al posto di un blocco \"ripeti … volte\" sta nel fatto che si può vedere la variabile \"contatore\" (<i>counter</i>) e usarla nel ciclo."
      3:
        image: 'notes/C4_for_loops_bee_3.png'
        text: "Il vantaggio di usare un vero \"ciclo con contatore\" (repeat counter times) al posto di un blocco \"ripeti … volte\" sta nel fatto che si può effettivamente vedere la variabile \"contatore\" (counter) e usarla nel ciclo. Per esempio, se ho una fila di fiori e il primo ha una dose di nettare, il secondo ne ha due e il terzo ne ha tre, posso usare il \"ciclo con contatore\" per dire all'ape di raccogliere \"contatore\" dosi di nettare ogni volta, ossia una dose dal primo fiore, due dal secondo e tre dal terzo."
      4:
        image: 'notes/C4_for_loops_bee_4.png'
        text: "Inoltre in un \"ciclo con contatore\", puoi far sì che il 'contatore' venga incrementato ogni volta di un numero diverso da uno. Puoi contare di 2 alla volta, di 4 alla volta o addirittura di una quantità ogni volta diversa."
    C4_for_loops_no_bee:
      1:
        image: 'notes/C4_for_loops_no_bee_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-10#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nQuando usi un blocco \"ripeti … volte\" per eseguire più volte una parte del tuo codice, come fa il computer a sapere quando il codice è stato ripetuto a sufficienza? Il blocco \"ripeti … volte\" in realtà utilizza un blocco più sofisticato detta \"ciclo con contatore\" che conta, a partire da un valore iniziale fino ad un valore finale, con un incremento stabilito."
      2:
        image: 'notes/C4_for_loops_no_bee_2.png'
        text: "Per esempio, un blocco \"ripeti 3 volte\" conta da 1 a 3 con un incremento di 1. Ogni volta che conta, esegue il codice all'interno del ciclo. Il \"ciclo con contatore\" sa quante volte è stato eseguito grazie alla variabile \"contatore\" (counter) che viene impostata al valore iniziale all'inizio del ciclo e a cui viene aggiunto l'incremento ogni volta che il ciclo viene eseguito. Non appena la variabile \"contatore\" diventa più grande del valore finale, il ciclo si arresta. Il vantaggio di usare un \"ciclo con contatore\" al posto di un blocco \"ripeti … volte\" sta nel fatto che si può vedere la variabile \"contatore\" (counter) e usarla nel ciclo."
    C4_function_create:
      1:
        image: 'notes/C4_function_create_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nOra che hai modificato i blocchi funzione, è arrivato il momento di provare a creare un nuovo blocco funzione partendo da zero. È davvero semplice. Guarda nella cassetta degli attrezzi: c'è una categoria chiamata \"Funzioni\" (<i>Functions</i>). Cliccandoci sopra visualizzi il blocco \"Crea un funzione\". Se lo clicchi si apre l'editor che hai già usato per modificare un blocco funzione già esistente."
      2:
        image: 'notes/C4_function_create_2.png'
        text: "Proprio come prima, inizia dando un nome alla tua funzione e subito dopo scrivi una descrizione di cosa la funzione dovrebbe fare, per esempio, se serve per disegnare un quadrato o un triangolo. Infine trascina i blocchi che ti servono dalla cassetta degli attrezzi all'area di lavoro (\"workspace\"), ossia lo spazio bianco più in basso. Ricordati di inserirli all'interno del blocco verde della funzione."
      3:
        image: 'notes/C4_function_create_3.png'
        text: "Quando hai finito, clicca su \"Chiudi\" per salvare le modifiche. Questo ti farà tornare all'area di lavoro principale dell'esercizio. La nuova funzione che hai creato apparirà come un nuovo blocco verde all'interno della categoria \"Funzioni\" (Functions) nella cassetta degli attrezzi. Trascina questo nuovo blocco all'interno della tua area di lavoro e usalo come qualunque altro blocco per risolvere l'esercizio."
    C4_function_edit:
      1:
        image: 'notes/C4_function_edit_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-12#VIDEO\" target=\"_blank\">Video doppiato in italiano</a> (solo la seconda parte)<br><br>\nUna delle cose più utili della programmazione è che una volta che hai insegnato ad un computer come fare un'azione, puoi richiamare nuovamente quella \"funzione\" (<i>function</i>). Le dai un nome e dopo puoi richiamarla. È proprio come ampliare il linguaggio."
      2:
        image: 'notes/C4_function_edit_2.png'
        text: "Nel programma che hai costruito, hai imparato come disegnare un quadrato avanzando e poi girando per quattro volte. Puoi prendere quella funzione e darle un nome, ad esempio \"disegna un quadrato\" (<i>draw a square</i>), in modo tale che ogni volta che vorrai farlo, potrai semplicemente dire \"disegna un quadrato\" e il computer richiamerà la stessa funzione, eseguendo sempre quello stesso codice. Hai aggiunto quel concetto al tuo linguaggio di programmazione."
      3:
        image: 'notes/C4_function_edit_3.png'
        text: "In questo esercizio, trovi già pronta nella cassetta degli attrezzi il blocco funzione \"disegna un quadrato\" (<i>draw a square</i>). L'abbiamo creato noi per te, è un blocco verde, ma è vuoto. Ciò che devi fare è scrivere lo stesso codice che hai già scritto per disegnare un quadrato e metterlo in questa funzione. Per farlo, clicca sul pulsante blu \"modifica\" (<i>edit</i>). Questo ti aprirà l'editor della funzione che è suddiviso in tre parti. Una parte in alto in cui puoi dare un nome alla funzione. Poi c'è una parte centrale in cui puoi descrivere brevemente cosa dovrebbe fare la funzione."
      4:
        image: 'notes/C4_function_edit_4.png'
        text: "In questo caso, la funzione dovrebbe disegnare un quadrato. La parte bianca al di sotto della descrizione è l'area di lavoro e funziona esattamente come l'area di lavoro che stai già usando. Puoi prendere i blocchi dalla cassetta degli attrezzi e spostarli in quest'area di lavoro. Ricordati di mettere i blocchi che creano un quadrato all'interno del blocco verde della funzione. Quando hai finito clicca su \"Chiudi\" (<i>Close</i>). In questo modo ritorni all'area di lavoro dell'esercizio. Ora, per risolvere l'esercizio, puoi usare il blocco funzione \"disegna un quadrato\" (<i>draw a square</i>) proprio come qualunque altro blocco."
    C4_function_parameters:
      1:
        image: 'notes/C4_function_parameters_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nEcco una funzione che disegna un quadrato con i lati di 50 pixel. Ottimo, ma cosa succede se voglio disegnare un quadrato con i lati di 50 pixel e un altro quadrato con i lati di 100 pixel? Non è necessario creare due funzioni distinte per fare quasi la stessa cosa. Possiamo invece usare una funzione con un parametro."
      2:
        image: 'notes/C4_function_parameters_2.png'
        text: "I parametri ti permettono di passare ad una funzione dei valori che vengono utilizzati come variabili all'interno della funzione stessa. Aggiungi a questa funzione un parametro chiamato \"Lunghezza\" (\"<i>Length</i>\") da utilizzare per creare quadrati di diverse dimensioni. Nell'editor della funzione, come abbiamo già visto, puoi modificare il nome e la descrizione della funzione, ma puoi anche aggiungere un parametro. Scrivi il nome del parametro nello spazio a sinistra del pulsante \"Aggiungi un parametro\" e poi clicca sul pulsante. In questo modo viene creato un blocco rosso con il nome del parametro che hai appena creato. Ora nel blocco \"vai avanti ...\" (<i>move forward</i> ...) puoi inserire il blocco \"Lunghezza\" in modo tale da andare avanti di \"Lunghezza” pixel."
      3:
        image: 'notes/C4_function_parameters_3.png'
        text: "Quando hai finito, clicca su \"Chiudi\" per salvare le modifiche. Puoi trovare il nuovo blocco della funzione all'interno della categoria \"Funzioni\" (<i>Functions</i>) nella cassetta degli attrezzi. Noterai che c'è uno spazio vuoto vicino al parametro \"Lunghezza\" perché la funzione vuole sapere che valore dovrebbe avere il parametro. Trascina un blocco numerico dalla categoria \"Matematica\" (<i>Math</i>) e inseriscilo in questo spazio. Sai che è possibile usare la funzione più e più volte con lunghezze differenti per creare quadrati di diverse dimensioni? Prova per credere!"
    C4_intro:
      1:
        image: 'notes/C4_intro_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-3#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nI programmi tradizionali sono di solito del testo detto \"codice\". Tu invece scriverai programmi con Blockly, che usa blocchi colorati. I blocchi vengono attaccati per scrivere programmi. Anche se usi i blocchi, in realtà stai sempre scrivendo del codice. Per iniziare, dovrai creare il codice per un programma che aiuti l'uccellino arrabbiato (Angry Bird) a spostarsi all'interno di un labirinto per raggiungere il malvagio maialino che ha rubato le sue uova."
      2:
        image: 'notes/C4_intro_2.png'
        text: "Blockly è diviso in tre parti principali. Sulla sinistra c'è il labirinto dell'uccellino, dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto il labirinto. La zona centrale è la \"cassetta degli attrezzi\"; ognuno di questi blocchi corrisponde ad un comando che l'uccellino può comprendere. Lo spazio bianco sulla destra si chiama \"area di lavoro\" e qui costruisci il tuo programma."
      3:
        image: 'notes/C4_intro_3.png'
        text: "Se sposti un blocco \"vai avanti\" nell'area di lavoro e premi \"Esegui\" che cosa succede? L'uccello si sposta di una casella in avanti nel labirinto. E se desideri che l'uccello faccia qualcosa dopo essersi spostato di una casella in avanti? Puoi aggiungere un altro blocco al tuo programma."
      4:
        image: 'notes/C4_intro_4.png'
        text: "Per aggiungere il blocco \"gira a sinistra\" trascinalo sotto il blocco \"vai avanti\" fino a che non appare una linea gialla sul contorno. A quel punto rilascialo, e i due blocchi si attaccheranno insieme. Se premi nuovamente \"Esegui\", l'uccellino eseguirà le istruzioni associate ai blocchi presenti nella tua area di lavoro, procedendo dall'alto verso il basso."
      5:
        image: 'notes/C4_intro_5.png'
        text: "Se desideri eliminare un blocco, basta rimuoverlo dalla sequenza di blocchi e trascinarlo nel cestino. Dopo che hai cliccato su \"Esegui\", puoi sempre cliccare su \"Ricomincia\" per far tornare l'uccellino al punto di partenza. Ora andiamo a prendere quei maialini!"
    C4_math_artist:
      1:
        image: 'notes/C4_math_artist_1.png'
        text: "Se voglio disegnare un rettangolo avente un'altezza pari a 50 pixel e una larghezza doppia rispetto all'altezza, in che modo posso programmare il computer per disegnarlo? Beh, posso dire all'artista di andare verso l'alto per 50 pixel, girare a destra e poi proseguire per 100 pixel e poi di ripetere l'intera sequenza due volte. Ma in questo modo sto facendo io i calcoli al posto del computer."
      2:
        image: 'notes/C4_math_artist_2.png'
        text: "Moltiplicare 50 per due può sembrarti semplice, ma siccome i computer sono veramente bravi a fare i calcoli, dovremmo lasciarglieli fare ogni volta che è possibile. In questo caso basta usare una variabile \"altezza\" (height), impostarne (set) il valore a 50, e quindi modificare l'algoritmo per dire all'artista di andare verso l'alto di \"altezza\" pixel, girare a destra, poi proseguire per \"altezza\" x 2 pixel, girare ancora a destra e ripetere il tutto due volte. In questo modo si disegna un rettangolo la cui larghezza è il doppio dell'altezza."
    C4_unplugged_algorithms:
      1:
        image: 'notes/C4_unplugged_algorithms_1.png'
        text: "Questa lezione è chiamata algoritmo Tangram. Un tangram è un puzzle con sette pezzi che possono essere messi insieme per realizzare altre forme. Si utilizzerà un algoritmo per spiegare al vostro compagno come mettere insieme il puzzle."
      2:
        image: 'notes/C4_unplugged_algorithms_2.png'
        text: "Un algoritmo non è altro che una lista di azioni che puoi compiere per completare un compito. Li usiamo ogni giorno per cose come liste della spesa o ricette. Se il tuo algoritmo è semplice, allora esistono molti modi diversi di interpretarlo e chi lo esegue potrebbe non ottenere esattamente quello che volevi tu. Se vuoi essere sicuro che ognuno ottenga esattamente la stessa cosa, allora il tuo algoritmo deve essere dettagliato e molto specifico."
      3:
        image: 'notes/C4_unplugged_algorithms_3.png'
        text: "Sto usando oggi un algoritmo per la realizzazione di un dipinto. Ho voluto provare a fare un dipinto di alcuni lupi, ma io non sono un pittore esperto. Fortunatamente per le persone come me, c'è da dipingere basandosi su dei numeri. Ci sono quaranta colori e la tavola riporta lettere e numeri che indicano quale colore usare per dipingere ogni sezione. Dipingere usando i numeri mi consenete di usare i colori corretti e mi indica dove."
      4:
        image: 'notes/C4_unplugged_algorithms_4.png'
        text: "È molto specifico quindi sono in grado di seguire le indicazioni e il dipinto risulterà meraviglioso. È un ottimo algoritmo. Se le istruzioni non fossero state abbastanza specifiche, i miei lupi non sarebbero venuti così bene. Quando si vuole che qualcosa diventi esattamente come la si è pianificata, è meglio essere estremamente precisi."
    C4_unplugged_binary:
      1:
        image: 'notes/C4_unplugged_binary_1.png'
        text: "In ogni squadra, colui che sta istruendo chi ha in mano la carta, deve capire quale sia il simbolo off e quale sia il proprio simbolo in realtá. In formato binario, è un po' come avere a che fare con un alfabeto con due lettere. Come avere A e B per alfabeto, solo che si chiamano 0 e un 1."
      2:
        image: 'notes/C4_unplugged_binary_2.png'
        text: "Il modo più comune di utilizzare il codice binario è in un'istruzione if ... then ... (se ... allora ...). È un classico della programmazione. Il programma viene eseguito e ci dice se qualcosa è true (vero), allora procedi. O se non lo è, fa' qualcos'altro. Cosa succede se si desidera fare qualcosa di forse un po' più complicato? Al posto di un'istruzione if ... then ... , puoi voler trattare un'immagine o un suono al computer."
      3:
        image: 'notes/C4_unplugged_binary_3.png'
        text: Un computer conosce solo il codice binario ma un'immagine, non è binaria, non si tratta di zeri e uno. Come fare allora a farlo? Ecco un esempio con questa bella foto. Ora una foto è sostanzialmente un insieme di informazioni. Tutte le informazioni possono essere codificate in binario in un modo o in un altro, devi solo capire come farlo.
      4:
        image: 'notes/C4_unplugged_binary_4.png'
        text: "Immagina di mettere una griglia su un panda. Per ogni quadrato di questa griglia, decideremo se sia più nero o più bianco. Una volta presa la decisione, lo coloreremo di conseguenza.\nA questo punto, ogni quadrato della griglia sarà per forza tutto nero o tutto bianco.\nAi quadrati neri assegneremo lo zero, a quelli bianchi l'altra cifra binaria. Dunque ci ritroveremo davanti nient'altro che un mucchio di \"uno\" e di \"zero\".\nEcco, questa è la rappresentazione di un'immagine attraverso il sistema binario."
    C4_unplugged_forloops:
      1:
        image: 'notes/C4_unplugged_forloops_1.png'
        text: "Questa lezione si chiama \"Divertiamoci col ciclo for\". In questa lezione useremo una linea numerica per giocare a dadi. Ogni giocatore tira i dadi tre volte per stabilire il valore iniziale, il valore finale e l'intervallo. Ad ogni turno, disegneremo un cerchio intorno al valore iniziale e intorno a tutti i numeri stabiliti dall'intervallo, fino a raggiungere il valore finale. Sommeremo dunque tutti i numeri che abbiamo cerchiato e la persona col totale più alto vince!"
      2:
        image: 'notes/C4_unplugged_forloops_2.png'
        text: "I cicli for possono tornare utili in un sacco di occasioni e, se tu diventassi un metereologo, useresti i cicli for in continuazione. Ciao, sono Becky. Lavoro per la EverPower Renewables come metereologo del vento. Prevedo la velocità dei venti nell'area della Columbia River Gorge, cioè dove la compagnia possiede i suoi impianti eolici."
      3:
        image: 'notes/C4_unplugged_forloops_3.png'
        text: "Cerchiamo di capire quanto vento ci sarà, in maniera tale da capire quanta energia saremo in grado di produrre. Quindi passiamo queste informazioni ai commercianti d'energia in tempo reale. Costoro comprano e vendono energia basandosi sulle nostre previsioni, assicurandosi che la rete elettrica sia sempre equilibrata, che le vostre luci siano sempre accese e che noi riusciamo sempre a massimizzare la quantità di energia ottenibile dalle nostre aziende."
      4:
        image: 'notes/C4_unplugged_forloops_4.png'
        text: "Noi ci troviamo al centro di controllo nazionale per la EverPower Renewables, qui a Portland. E' qui che riceviamo tutte le informazioni provenienti dalle le nostre aziende sparse per il Paese.\nAnche i computer più potenti in circolazione non sono in grado di simulare ovunque l'atmosfera. \nNei modelli di previsione computerizzati, esiste una cosa che chiamiamo \"la griglia\". Ogni punto di questa griglia ha una sua latitudine e longitudine. Dobbiamo quindi calcolare la fisica, cercando di scoprire la velocità del vento, la temperatura, la pressione, insomma questo genere di cose."
      5:
        image: 'notes/C4_unplugged_forloops_5.png'
        text: "Dal momento che queste griglie sono molto grandi e dobbiamo analizzare un sacco di punti, torniamo su queste cose ciclicamente per milioni e milioni di volte. Per tutto ciò che faccio, uso i cicli for. Ecco, ad esempio, un altro ciclo for. Quando si fanno delle previsioni sul vento, ci sono in gioco talmente tanti parametri che sarebbe impossibile per un essere umano sedersi e mettersi a fare calcoli. Ci sono così tanti aspetti che influenzano ciò che succede al vento, da dover utilizzare per forza un modello computerizzato per poter fare delle previsioni."
    C4_unplugged_madlibs:
      1:
        image: 'notes/C4_unplugged_madlibs_1.png'
        text: "In questa lezione, giocheremo a completare delle parti di una storia. Hai un modello che è possibile compilare per creare storie simili in modo che presentino delle differenze molto divertenti."
      2:
        image: 'notes/C4_unplugged_madlibs_2.png'
        text: "In questa lezione abbiamo imparato anche a fare un modello astratto da due storie che sono già state create. Astrazione è l'arte di rimuovere le differenze e i dettagli in modo che si possa vedere come una soluzione potrebbe funzionare per problemi diversi tra di loro. È molto utile in informatica perché permette di creare funzioni che possono servire in molte situazioni."
    C4_unplugged_parameters:
      1:
        image: 'notes/C4_unplugged_parameters_1.png'
        text: "Questa lezione si chiama \"Comporre canzoni coi parametri\". Adesso ci mettiamo a scrivere qualche canzone. A volte il coro è un pochino diverso ogni volta che lo si canta. Ti ricordi \"Nella Vecchia Fattoria\"? Il coro è un pochino diverso per ogni animale che lo fa. \"C'è la mucca, muu, mucca, muuu, ia-ia-ooooh\".\nQuella piccola differenza in ogni coro può essere spiegata utilizzando qualcosa che chiameremo \"parametri\"."
      2:
        image: 'notes/C4_unplugged_parameters_2.png'
        text: "A volte una funzione necessita di un parametro. Un parametro è un ulteriore pezzo di informazione che è possibile passare a una funzione per personalizzarla per una particolare necessità. Quando preparate delle coppe di gelato con i tuoi amici, si utilizza un processo simile alla parametrizzazione in un programma per computer."
      3:
        image: 'notes/C4_unplugged_parameters_3.png'
        text: "Il disco di gelato alla vaniglia sarà anche lo stesso per ogni Sundae, ma quando chiedi ai tuoi amici quali guarnizioni perferiscono, otterrai sicuramente risposte diverse.\nEcco, la guarnizione è come se fosse una funzione, mentre il tipo di guarnizione è il parametro.\nFunzioni e parametri lavorano insieme per creare grandiosi programmi per computer (e grandiosi Sundae, naturalmente)."
    C4_unplugged_variables:
      1:
        image: 'notes/C4_unplugged_variables_1.png'
        text: "Questa lezione si chiama \"Variabili in busta chiusa\". Impareremo come costruire una frase anche se ci mancano alcune informazioni. Molti di noi sanno cosa significa compilare un modulo;facciamo qualcosa di simile,ad esempio,quando scriviamo il nostro nome prima dei compiti.\nPuò capitare che all'interno di un modulo ci siano diversi spazi da riempire. Così,prima di ogni spazio,c'è una dicitura,per aiutarci a capire che in un determinato spazio va inserita una determinata informazione."
      2:
        image: 'notes/C4_unplugged_variables_2.png'
        text: "Le variabili sono dei segnaposto per pezzi di informazione che possono cambiare. Utilizzando una variabile per le informazioni mancanti, possiamo continuare a lavorare su qualunque cosa stessimo facendo e lasciare che qualcun altro inserisca le informazioni mancanti più tardi. Nel software, si usano molto le variabili. Le usiamo come segnaposto per il nome, indirizzo e-mail e nome utente. In questo modo possiamo far sapere al programma che quei dettagli appariranno soltanto dopo che l'utente li abbia inseriti. Nel nostro lavoro, le variabili vengono utilizzate di continuo."
      3:
        image: 'notes/C4_unplugged_variables_3.png'
        text: "In qualsiasi momento avete bisogno di memorizzare una informazione per un successivo utilizzo, usate una variabile. Supponiamo che abbiamo bisogno di contare il numero di volte che l'utente ha twittato. Ogni volta che l'utente invia un Tweet, aggiungeremo uno a quel numero e ogni volta che l'utente elimina un tweet lo toglieremo. Ogni volta che abbiamo bisogno di sapere quante volte che l'utente ha twittato ci basterà guardare le variabile."
    C4_variables_artist:
      1:
        image: 'notes/C4_variables_artist_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-6#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nUna variabile è un contenitore in cui puoi memorizzare un valore. Quando usi quella variabile in un programma, questo apre il contenitore ed esamina il valore contenuto al suo interno. Questo ti permette di scrivere programmi più flessibili, che si comportano in maniera differente a seconda del valore memorizzato nella variabile."
      2:
        image: 'notes/C4_variables_artist_2.png'
        text: "Ad esempio, se voglio scrivere un programma per dire al mio fratellino \"Buon Compleanno, sei arrivato a 10 anni!\", non ho alcun problema per quest'anno. Però vorrei che, mandandolo in esecuzione l'anno prossimo, dicesse \"Buon Compleanno, sei arrivato a 11 anni!\". Posso allora creare una variabile \"età\" (<i>age</i>) per memorizzare l'età di mio fratello e poi scrivere un programma che dica \"Buon Compleanno, sei arrivato a 'età' \" (<i>Happy birthday, you're turning \"age\"</i>). Dato che una variabile può essere modificata, ogni anno io posso aggiornare la variabile da \"età\" ad \"età\"+1 e il programma rimane sempre uguale."
      3:
        image: 'notes/C4_variables_artist_3.png'
        text: "In questo esercizio, utilizziamo una variabile \"lunghezza\" (<i>length<i>) per impostare (<i>set</i>) la lunghezza della linea che l'artista deve disegnare. Più avanti nel codice, il blocco \"vai avanti\" (<i>move forward</i>) esamina il contenuto della variabile \"lunghezza\" per vedere a quale valore è stata impostata e l'artista si sposta di questo valore."
    C4_variables_playlab:
      1:
        image: 'notes/C4_variables_playlab_1.png'
        text: "<a href=\"https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-7#VIDEO\" target=\"_blank\">Video doppiato in italiano</a><br><br>\nUna variabile è un contenitore in cui puoi memorizzare un valore. Quando usi quella variabile in un programma, questo apre il contenitore ed esamina il valore contenuto al suo interno. Questo ti permette di scrivere programmi più flessibili, che si comportano in maniera differente a seconda del valore memorizzato nella variabile."
      2:
        image: 'notes/C4_variables_playlab_2.png'
        text: "Stai per provare il Laboratorio in cui ti verranno proposti diversi giochi in cui potrai cambiare i valori di alcune variabili come la velocità, l'altezza o il punteggio, in modo tale da personalizzare il gioco proposto. Non dovrai modificare il codice del gioco per cambiarne il comportamento, dovrai concentrarti solo sulle variabili."
      3:
        image: 'notes/C4_variables_playlab_3.png'
        text: "Nel mio lavoro per il lettore Kindle e sulla radiografia per i libri, noi usiamo le variabili in molti modi. Uno dei modi in cui si può usare una variabile è per memorizzare il numero di pagine di un libro. Un utente può aumentare o diminuire la grandezza dei caratteri di una pagina. A seconda della grandezza del carattere, il numero di pagine di un libro può cambiare. Possiamo gestire questa situazione usando una variabile per memorizzare il numero di pagine."
    infinity_playlab_events:
      1:
        image: 'notes/infinity_playlab_events_1.png'
        text: "Adesso imparerai un meccanismo che tutti i programmatori di giochi usano ogni giorno. Parliamo degli eventi. Un evento dice al programma quando succede qualcosa. Quando quella cosa accade il programma svolge un'azione. Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      2:
        image: 'notes/infinity_playlab_events_2.png'
        text: "In questo esercizio, quando il giocatore usa i pulsanti freccia verso l'alto o verso il basso, faremo spostare Baymax verso l'alto fino a toccare Hiro e poi lo faremo spostare verso il basso per toccare Rapunzel. Per far spostare Baymax devi attaccare al blocco \"quando si preme sulla freccia verso l'alto\" il blocco \"sposta Baymax verso l'alto\". Quando il giocatore usa il pulsante freccia verso l'alto verrà eseguita qualunque istruzione attaccata al blocco \"quando si preme sulla freccia verso l'alto\". E facciamo la stessa cosa per far spostare Baymax verso il basso. Passo dopo passo, il tuo gioco diventa sempre più interattivo."
    infinity_playlab_intro:
      1:
        image: 'notes/infinity_playlab_intro_1.png'
        text: "Che classe frequenti? Seconda elementare. Le superiori. Prima elementare. Io ero in terza media quando ho iniziato a programmare. Ho avuto il mio primo computer quando ero in prima media. Mi entusiasmo quando riesco a risolvere i problemi delle persone. Con un computer puoi esprimerti, puoi realizzare delle cose partendo da un'idea."
      2:
        image: 'notes/infinity_playlab_intro_2.png'
        text: "L'informatica è alla base di molte delle cose che gli studenti universitari e i professionisti faranno per i prossimi venti o trenta anni. Mi piace la programmazione perché mi piace aiutare la gente. Ho l'opportunità di costruire qualcosa che può rendere la vita più facile per molte persone. Io penso che la programmazione sia quasi come avere un Superpotere. L'inizio è la parte più importante. Anche io sono un principiante e voglio che tu impari con me."
      3:
        image: 'notes/infinity_playlab_intro_3.png'
        text: "Ciao, io sono John Vechey, uno dei co-fondatori della PopCap Games. Abbiamo creato giochi come Plants vs Zombies, Bejeweled e Peggle. La maggior parte dei giochi non è perfetta quanto vorresti, né così perfetta come immagini, ma quello che conta è come ti fa sentire il gioco e quanto è divertente. Puoi provare quella sensazione solo provando, facendo, imparando, adattando e migliorando la tua capacità di creare giochi."
      4:
        image: 'notes/infinity_playlab_intro_4.png'
        text: "Hai un videogioco preferito? Beh, stiamo per fare il primo passo verso la creazione di un gioco proprio come hai fatto nel Laboratorio. I buoni giochi hanno una storia e ogni storia ha dei personaggi. I personaggi fanno delle cose, come parlare, spostarsi e interagire l'un l'altro. Potrebbero anche guadagnare dei punti in base alle regole del gioco. Oggi impareremo come fare tutte queste cose, una alla volta, con dei personaggi della Disney come Anna, Elsa, Hiro, Baymax e Rapunzel. Costruirai un gioco a partire da zero e poi potrai condividerlo con i tuoi amici e giocarci sul tuo telefono."
      5:
        image: 'notes/infinity_playlab_intro_5.png'
        text: "Lo schermo è diviso in tre parti principali. Sulla sinistra c'è l' \"area di gioco\", dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto quest'area. La zona centrale è la \"cassetta degli attrezzi\": ognuno di questi blocchi corrisponde ad un'istruzione. Lo spazio bianco sulla destra si chiama \"area di lavoro\" e qui costruisci il tuo programma."
      6:
        image: 'notes/infinity_playlab_intro_6.png'
        text: "Per cominciare, è necessario collegare i blocchi al blocco arancione 'quando si clicca su \"Esegui\" '. È possibile collegare più blocchi insieme trascinandoli fino a che non vedrai formarsi la linea gialla di contorno e non si attaccheranno tra loro. In questo primo esercizio, Hiro è il personaggio 1 e Baymax il personaggio 2. Dobbiamo far spostare Hiro fino a raggiungere Baymax, per farlo devi attaccare un blocco \"sposta il personaggio 1 a destra\" sotto al blocco 'quando si clicca su \"Esegui\" '. Una volta che hai posizionato i blocchi, clicca sul pulsante \"Esegui\" per vedere ciò che hai programmato."
      7:
        image: 'notes/infinity_playlab_intro_7.png'
        text: "Inizia a lavorarci su e alla fine sarai in grado di creare il tuo gioco con questi fantastici personaggi che possono interagire, guadagnare punti, lanciare micro-bot, ciliegie, padelle, palle di fuoco e ghiaccio o perfino farsi scomparire l'un l'altro. Dipende tutto da te!"
    infinity_playlab_repeat_forever:
      1:
        image: 'notes/infinity_playlab_repeat_forever_1.png'
        text: "Puoi immaginare di dover ripetere qualcosa per sempre? Fortunatamente non dovrai mai farlo visto che i computer sono veramente bravi nel ripetere le cose. Questo è il blocco \"ripeti per sempre\". Qualunque istruzione venga messa all'interno di questo blocco verrà ripetuta in continuazione durante il gioco."
      2:
        image: 'notes/infinity_playlab_repeat_forever_2.png'
        text: "Quindi, se vogliamo che un personaggio faccia qualcosa in continuazione, senza che il giocatore faccia nulla, metteremo i relativi blocchi all'interno del blocco \"ripeti per sempre\". In questo esercizio, il nostro obiettivo è aiutare Anna a muoversi in continuazione in su e in giù. Imparare come funziona il comando \"ripeti per sempre\" ti risparmierà moltissimo tempo quando costruirai il tuo gioco."
    tutorial_puzzle_challenge:
      1:
        image: 'notes/tutorial_puzzle_challenge_1.png'
        text: "Cosa vuoi diventare da grande, Olivia? Un astronauta. Per caso, sai cosa sia un programmatore informatico? Sì.... anzi, no. Cosa? Davvero? Ecco..... non saprei come spiegartelo ma.... programmare al computer è una cosa piuttosto semplice. E'un elenco di istruzioni, come una ricetta. Devi semplicemente seguirle passo per passo per arrivare al risultato desiderato."
      2:
        image: 'notes/tutorial_puzzle_challenge_2.png'
        text: "Posso cambiare il numero dei pixel o la lunghezza della linea usando questo menù a tendina.\nQuanto era lunga? Non ricordo.....\nSe hai bisogno di rivedere le istruzioni, le trovi sotto il bottone \"Esegui\". In questo caso ho utilizzato il blocco \"Vai avanti\" e sceglierò 100 pixels. Posso cancellare un blocco trascinandolo nella cassetta degli attrezzi oppure nel cestino dei rifiuti. Adesso lo rimetto a posto."
      3:
        image: 'notes/tutorial_puzzle_challenge_3.png'
        text: "Esegui il codice premendo \"Esegui\". Qualcosa non ha funzionato! Premi \"Reset\" e scopri cosa c'è che non va. Puoi provare a risolvere un puzzle quante volte vuoi, puoi anche saltarli e riprenderli più avanti. Assicurati sempre di fare del tuo meglio e non mollare mai! Ecco, facciamo un'altra mossa in avanti. No, non è servito a nulla. Posso mettere un blocco in mezzo ad altri due."
      4:
        image: 'notes/tutorial_puzzle_challenge_4.png'
        text: "Prendi un blocco \"Gira a....\" e piazzalo in mezzo a due mosse in avanti. Gira a sinistra di 45 gradi. Eseguiamolo di nuovo. Resetta, esegui..... meraviglioso! Ecco un altro puzzle. A volte si tratta di completare la prima parte di un codice che ti viene dato. Qui devo aggiungere la giusta lunghezza e i gradi."
      5:
        image: 'notes/tutorial_puzzle_challenge_5.png'
        text: "Se accidentalmente dovessi cancellare il codice iniziale, puoi premere \"Ripristina\" ed iniziare da capo. Adesso trascinerò questo blocco numerico all'interno delle diverse aree di pixel.\nScegli 100 per i pixel, 45 per i gradi e di nuovo 100 per i pixel. Grandioso! Ecco l'ape del Code Studio.\nDevo far posare l'ape su ogni fiore per ottenere del nettare."
      6:
        image: 'notes/tutorial_puzzle_challenge_6.png'
        text: "Il primo fiore è lontano tre blocchi, quindi ho bisogno di tre mosse in avanti. 1, 2, 3. Quindi un \"ottieni nettare\", poi un altro \"ottieni nettare\". Ecco, non ha funzionato! Metterò un'altra mossa in avanti tra i due \"ottieni nettare\" e proverò ad eseguire di nuovo. Sìììì! Stavolta funziona! Hai appena imparato ad usare il corso Artista di Code Studio e a creare i puzzle dell'ape. Buona fortuna con le sfide dei puzzle di Code Studio."
    unplug1:
      1:
        image: 'notes/unplug1_1.png'
        text: "Cosa vuoi diventare da grande, Olivia? Un astronauta. Per caso, sai cosa sia un programmatore informatico? Sì.... anzi, no. Cosa? Davvero? Ecco..... non saprei come spiegartelo ma.... programmare al computer è una cosa piuttosto semplice. E'un elenco di istruzioni, come una ricetta. Devi semplicemente seguirle passo per passo per arrivare al risultato desiderato."
      2:
        image: 'notes/unplug1_2.png'
        text: "L'informatica è un modo per avere un impatto sul mondo. Può trattarsi di video musicali, di giochi, di scoprire se qualcuno è imparentato con qualcun altro. E' un modo per trovare degli amici. Puoi fare qualunque cosa ti venga in mente e magari salvare davvero la vita di qualcuno. Penso che nella vita tutti debbano avere una vocazione. E' qualcosa di simile ad un pennello per dipingere. Penso cioè che programmare ad alto livello non sia poi così diverso dal fare arte ad alto livello."
      3:
        image: 'notes/unplug1_3.png'
        text: "Quando ho imparato a programmare ad un certo livello, il muro che avevo davanti si è trasformato in un mucchio di porte. Le ho aperte tutte e dietro ad ognuna di esse c'erano dei corridoi pieni di altre porte. Programmare è facile e divertente. Puoi fare qualunque cosa ti venga in mente. Quando avrai aperto un numero sufficiente di porte, entrerà la luce. Per me un programma finito è come una struttura interamente illuminata, perfino negli angoli più remoti. Il numero di persone con il quale puoi entrare in contatto ed interagire è qualcosa che non si era mai visto prima."
      4:
        image: 'notes/unplug1_4.png'
        text: "La prima lezione di questa serie riguarda ciò che l'informatica è, cosa un informatico fa e come tu possa essere maggiormente responsabile nell'uso delle tecnologie. E' una lezione molto importante, anche se un po' pesante da leggere. Al termine, dovrai scrivere del codice in maniera personalizzata, utilizzando cioè le tue iniziali. \nE' un'attività molto divertente e ti fornisce uno strumento importante, poiché il linguaggio binario è qualcosa che a prima vista può sembrare molto tecnico, ma una volta compreso sarà come parlare una specie di linguaggio segreto."
    unplug2:
      1:
        image: 'notes/unplug2_1.png'
        text: "La lezione sul pensiero computazionale ha come obiettivo quello di insegnarvi ad affrontare un complesso e difficile problema e a scomporlo in diversi problemi più semplici. L'obiettivo di questa lezione è quello di scrivere un insieme di istruzioni che qualcuno possa seguire per disegnare uno dei mostri inclusi nel piano della lezione."
      2:
        image: 'notes/unplug2_2.png'
        text: 'Gli studenti dovranno dividersi in gruppi per scrivere le istruzioni. Successivamente, dovranno cambiare gruppo per disegnare il mostro. I gruppi dovranno scrivere le istruzioni utilizzando i quattro passi del pensiero informatico: scomposizione, individuazione di un modello, astrazione ed algoritmi.'
      3:
        image: 'notes/unplug2_3.png'
        text: "Per prima cosa i gruppi dovranno scomporre il compito loro affidato, il che significa creare un piano di gioco. Subito dopo dovranno cercare dei modelli tra tutti i mostri presenti nel catalogo. Quando s'imbatteranno in alcune differenze tra un mostro e l'altro, dovranno astrarre ossia rimuovere quelle differenze. Per esempio, un mostro possiede gli occhi da Vegitas mentre un altro possiede gli occhi da Spritem. Dal momento che entrambi hanno gli occhi, possiamo scrivere una riga per dire che il mostro ha degli occhi, senza specificarne il tipo."
      4:
        image: 'notes/unplug2_4.png'
        text: "Dunque gli studenti saranno in grado di scrivere una serie di istruzioni, chiamata \"algoritmo\", che elenchi tutte le parti del mostro, lasciando degli spazi in bianco per poter specificare il tipo di quelle parti. Questa serie di istruzioni andrà poi passata ad altri studenti, affinché possano ricreare il loro mostro personalizzato."
    unplug3:
      1:
        image: 'notes/unplug3_1.png'
        text: "L'utilizzo della carta millimetrata ci aiuta a spiegare cosa significhi scrivere del codice, chiedendo alla gente di ricreare un determinato disegno utilizzando soltanto frecce e scarabocchi.\nAd una persona verrà consegnato un piccolo disegno su carta millimetrata. Attraverso l'uso di particolari frecce, questa persona dovrà cercare di spiegare come ricreare il disegno ricevuto."
      2:
        image: 'notes/unplug3_2.png'
        text: 'Per questo compito, gli unici simboli che puoi usare sono questi: muovi un quadrato avanti, muovi un quadrato indietro, muovi un quadrato su, muovi un quadrato giù, passa al colore successivo, riempi il quadrato col colore. Una volta scritto il codice, lo passeremo ad un''altra persona che sia in grado di leggerlo, affinché possa provare a ricreare l''immagine.'
    unplug4:
      1:
        image: 'notes/unplug4_1.png'
        text: "L'utilizzo della carta millimetrata ci aiuta a spiegare cosa significhi scrivere del codice, chiedendo alla gente di ricreare un determinato disegno utilizzando soltanto frecce e scarabocchi.\nAd una persona verrà consegnato un piccolo disegno su carta millimetrata. Attraverso l'uso di particolari frecce, questa persona dovrà cercare di spiegare come ricreare il disegno ricevuto."
      2:
        image: 'notes/unplug4_2.png'
        text: "In questa seconda parte dell'attività, chiederemo agli studenti in quanti modi diversi siano in grado di piegare un pezzo di carta per ottenere 16 rettangoli identici. Poi discuteremo su come si possano usare più soluzioni per arrivare al medesimo risultato e sul perché, in determinate situazioni, sia preferibile utilizzare una certa soluzione anziché un'altra."
    unplug5:
      1:
        image: 'notes/unplug5_1.png'
        text: "L'utilizzo della carta millimetrata ci aiuta a spiegare cosa significhi scrivere del codice, chiedendo alla gente di ricreare un determinato disegno utilizzando soltanto frecce e scarabocchi.\nAd una persona verrà consegnato un piccolo disegno su carta millimetrata. Attraverso l'uso di particolari frecce, questa persona dovrà cercare di spiegare come ricreare il disegno ricevuto."
      2:
        image: 'notes/unplug5_2.png'
        text: "In questa seconda parte dell'attività, chiederemo agli studenti in quanti modi diversi siano in grado di piegare un pezzo di carta per ottenere 16 rettangoli identici. Poi discuteremo su come si possano usare più soluzioni per arrivare al medesimo risultato e sul perché, in determinate situazioni, sia preferibile utilizzare una certa soluzione anziché un'altra."
    unplug6:
      1:
        image: 'notes/unplug6_1.png'
        text: "Questa lezione si chiama \"Scriviamo il codice con le carte\" ed è utile a tutte le età. Come hai già imparato con le \"affermazioni if\" nelle precedenti lezioni, durante Blocky, si tratta di scoprire se tali affermazioni siano vere o false. Questo si chiama \"condizionale\" e si può usare in un sacco di modi."
      2:
        image: 'notes/unplug6_2.png'
        text: "Ne approfitteremo creando dei programmi su carta che tu potrai eseguire pescando casualmente da un mazzo di carte da gioco. Potresti ad esempio avere un' \"affermazione if\" che dica: se la carta che hai pescato ha un valore superiore a 8, guadagni un punto. Se invece il valore è inferiore a 8, il tuo avversario guadagna un punto. Puoi semplificare o complicare il gioco come vuoi, naturalmente."
    unplug7:
      1:
        image: 'notes/unplug7_1.png'
        text: "Hai presente quando leggi il testo di una canzone? Ad un certo punto ci sono le parole che vanno cantate in coro. Quando il coro si ripresenta più avanti nella canzone, le parole non vengono riscritte; viene semplicemente scritto \"coro\", che rimanda alle parole scritte in precedenza.\nQuesto era solo un esempio per spiegare cosa sia una \"funzione\"."
      2:
        image: 'notes/unplug7_2.png'
        text: "In questa lezione, definiremo il coro all'inizio della nostra canzone. Andremo quindi avanti a cantare e quando giungeremo alla parola \"coro\", i nostri occhi torneranno in cima al testo e canteremo rileggendo quelle stesse frasi.\nQuesto esempio è un'ottima introduzione per capire cosa un programma stia facendo quando definisce e richiama una funzione."
      3:
        image: 'notes/unplug7_3.png'
        text: "Usiamo canzoni tradizionali come \"Nella Vecchia Fattoria\", per spiegare come un coro possa ripresentarsi più volte all'interno di una canzone e come, a volte, questo coro possa cambiare.\nIn una canzone come \"Nella Vecchia Fattoria\", dove alcune parole cambiano, è possibile inserire l'idea di \"parametri\". Passare attraverso determinate parole al fine di fornire informazioni in più alla tua funzione. Dopo esservi assicurati che tutti abbiano capito, potete prendere una qualunque delle vostre canzoni tradizionali e scomporla allo stesso modo. Cercate di lavorarci sopra insieme."
    unplug8:
      1:
        image: 'notes/unplug8_1.png'
        text: "La nostra lezione sull'astrazione utilizza un concetto piuttosto familiare: quello dei Mad Libs, dove in pratica un testo contiene un certo numero di spazi bianchi, i quali possono essere riempiti con delle parole a scelta. Sulla base di questa idea, sfidiamo i ragazzi ad inventare termini per le loro storie, spiegando contemporaneamente il concetto di astrazione."
      2:
        image: 'notes/unplug8_2.png'
        text: "Gira tutto intorno alle funzioni e su come ottenerle. Proprio come \"Nella Vecchia Fattoria\", dove esiste una struttura fissa che è il coro, ma dove ogni volta questo coro viene cantato in maniera diversa.\nSi tratta quindi di astrarre, immaginando che il coro sia uno spazio bianco da riempire in maniera diversa di volta in volta. Può capitare che a dover essere cambiate siano soltanto tre parole; in questo caso sarebbe utile impiegare tre parametri."
      3:
        image: 'notes/unplug8_3.png'
        text: "Una singola funzione può gestire tanti diversi problemi. Tante volte la gente scrive una funzione per ogni problema, senza rendersi conto che tra tutti questi problemi esiste solo qualche piccola differenza. Se si riuscisse a trovare un modo per gestire queste piccole differenze, si potrebbe riutilizzare la stessa funzione in tutti i casi, anziché scrivere 14 funzioni diverse."
    unplug9:
      1:
        image: 'notes/unplug9_1.png'
        text: "\"Programmare a staffetta\" è una lezione estremamente divertente che risulterà di gran lunga più comprensibile dell'informatica vera e propria. A volte qualcuno inizia ad essere un po' nervoso e ci vuole qualcosa per tranquillizzarlo un po'. Questa lezione è un ottimo modo per rendere l'informatica più entusiasmante."
      2:
        image: 'notes/unplug9_2.png'
        text: "Dividete gli studenti in due gruppi e fateli mettere in fila: dovranno correre come in una staffetta. Il primo della fila di ogni squadra dovrà correre dall'altra parte della stanza, dove ad attenderlo ci saranno un disegno su carta millimetrata ed un foglio bianco. Su quest'ultimo, lo studente dovrà scrivere il primo simbolo utile per ricreare l'immagine. Tornerà quindi verso la sua squadra per dare il cambio al giocatore successivo, il quale dovrà scrivere il secondo simbolo, e così via."
      3:
        image: 'notes/unplug9_3.png'
        text: "Questo è un ottimo modo per far passare l'idea di debug, della necessità di revisionare il proprio lavoro e di controllare il lavoro fatto da altri prima di voi. Capirete subito come sia importante essere attenti e precisi nella realizzazione del codice quando un'intera squadra è dipende da te."
    unplug10:
      1:
        image: 'notes/unplug10_1.png'
        text: "Questa attività spiega in un modo facile da capire come funziona Internet. Spieghiamo tutta la terminologia di cui hai bisogno in termini semplici di modo che gli studenti possano simulare la trasmissione dei messaggi, come per la posta elettronica."
      2:
        image: 'notes/unplug10_2.png'
        text: "Gli studenti dovranno trasmettere dei messaggi fingendo di essere uno di questi tre metodi di trasmissione: Wireless, ADSL o fibra ottica. Gli studenti che rappresenteranno la connessione Wireless dovranno portare il loro messaggio sulla testa, poiché le connessioni Wi-Fi sono quelle più inclini alla perdita di alcuni dati."
      3:
        image: 'notes/unplug10_3.png'
        text: "Gli studenti che fingeranno di essere una linea ADSL o la fibra ottica porteranno il messaggio sul dorso della mano, dal momento che questi metodi perdono meno informazioni. Chi ha scelto la fibra ottica porterà il messaggio su entrambe le mani. Questo è un bel modo per far capire qualcosa che utilizziamo tutti i giorni."
    unplug11:
      1:
        image: 'notes/unplug11_1.png'
        text: "Adesso è giunto il momento di fare un passo indietro e dare uno sguardo generale a tutto ciò che hai fatto nelle passate diciannove lezioni. E' il momento di comunicare a tutti gli studenti che ciò che hanno appena raggiunto è un risultato davvero importante. Hanno appreso molte più cose loro attraverso queste lezioni che la maggior parte degli adulti, per quanto riguarda l'informatica."
      2:
        image: 'notes/unplug11_2.png'
        text: "Discutete con l'intera classe o a piccoli gruppi quali siano state le lezioni preferite. Dopo aver ridato uno sguardo a tutto ciò che avete imparato, ecco un'occasione per testare la creatività degli studenti. Divideteli in gruppi e spingeteli a creare loro stessi una lezione senza il computer. Assegnate a ciascun gruppo un concetto chiave, come le funzioni o gli algoritmi, lasciando loro tutto il materiale che possa tornare utile. Permettete dunque a ciascun gruppo di presentare la propria lezione o addirittura organizzate una giornata per utilizzare le lezioni create dagli studenti stessi."
      3:
        image: 'notes/unplug11_3.png'
        text: "Tutti qui a Code.org speriamo che tu ti sia divertito un sacco durante questo corso. E se il tuo sogno è quello di creare la nuova app più bella, usare la programmazione per curare malattie, o vuoi solo essere un problem-solver stellare, questo corso è stato il primo passo per realizzare quei sogni."
    starwars_intro:
      1:
        image: 'notes/starwars_intro_1.JPG'
        text: 'Ciao, sono Kathleen Kennedy e sono la produttrice di Guerre Stellari: Episodio VII - Il Risveglio della Forza. Oggi lavoreremo con una delle nostre celebrità, BB-8. BB-8 è un droide sferico. Tutto ciò che fa e ogni movimento che fa è controllato dal software, cioè da programmi informatici. L''informatica influisce su ogni settore industriale, dal marketing alle cure sanitarie e perfino nel cinema. Infatti, per realizzare un film come Il Risveglio della Forza, hanno lavorato insieme centinaia di informatici.'
      2:
        image: 'notes/starwars_intro_2.JPG'
        text: "Ciao, sono Rachel Rose, un'informatica senior nel settore Ricerca e Sviluppo alla ILM e mi occupo dell'animazione e del gruppo di sviluppo delle creature. Nel Risveglio della Forza, mi occupo di aiutare gli artisti a sviluppare gli equipaggiamenti che costituiscono quelle parti che permettono ai personaggi di apparire credibili come creature di una galassia lontana lontana..."
      3:
        image: 'notes/starwars_intro_3.JPG'
        text: "Nella prossima ora, costruirai la tua versione di un gioco basato su Guerre Stellari. Ti insegneremo i concetti fondamentali della programmazione. I programmi di solito sono interamente testuali ma, in questo caso, per scrivere i programmi, uniamo dei blocchi. In realtà stai sempre scrivendo del codice. Dopo che avrai appreso i concetti di base usando i blocchi, passeremo al JavaScript, uno dei linguaggi di programmazione più popolari per il web."
      4:
        image: 'notes/starwars_intro_4.JPG'
        text: "Per cominciare, lavoriamo con Ray per programmare BB-8 in modo tale da fargli raccogliere tutti i rottami metallici. Il tuo schermo è suddiviso in tre parti. Sulla sinistra c'è l'area di gioco (\"game space\") di Guerre Stellari, in cui viene eseguito il codice. Le spiegazioni di ogni esercizio (\"instructions\") sono scritte sotto quest'area."
      5:
        image: 'notes/starwars_intro_5.JPG'
        text: "Al centro dello schermo c'è la cassetta degli attrezzi (\"tool box\") che contiene i blocchi. Ognuno di questi blocchi è un'istruzione che BB-8 può eseguire."
      6:
        image: 'notes/starwars_intro_6.JPG'
        text: "Lo spazio bianco sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      7:
        image: 'notes/starwars_intro_7.JPG'
        text: "Se sposti il blocco \"moveLeft();\" (vai a sinistra) sull'area di lavoro come illustrato e clicchi su \"Esegui\" (Run), cosa succede? BB-8 si sposta di una casella a sinistra sulla griglia."
      8:
        image: 'notes/starwars_intro_8.JPG'
        text: "E cosa puoi fare se vuoi che BB-8 faccia qualcosa dopo essere andato a sinistra? Puoi aggiungere un altro blocco al programma. Scegli il blocco \"moveUp();\" (vai in alto) e spostalo sotto il blocco \"moveLeft();\" che hai aggiunto prima. Non appena appare una linea gialla sul contorno puoi rilasciarlo e i due blocchi si agganceranno."
      9:
        image: 'notes/starwars_intro_9.JPG'
        text: "Se premo nuovamente \"Esegui\" (Run), BB-8 esegue le istruzioni associate ai blocchi presenti nell'area di lavoro, procedendo dall'alto verso il basso. Se vuoi cancellare un blocco, basta rimuoverlo dalla tua area di lavoro e rimetterlo nella cassetta degli attrezzi."
      10:
        image: 'notes/starwars_intro_10.JPG'
        text: "Dopo aver mandato in esecuzione il programma, puoi sempre cliccare su \"Ricomincia\" (Reset) per riportare BB-8 al punto di partenza. E ora, iniziamo!"
    starwars_typing:
      1:
        image: 'notes/starwars_typing_1.JPG'
        text: "All'interno dei blocchi che abbiamo usato ci sono delle istruzioni JavaScript. JavaScript è uno dei linguaggi di programmazione più popolari per gli sviluppatori professionali di oggi. I blocchi sono un ottimo modo per iniziare ad imparare a scrivere codice: infatti, alcune tra le migliori università del mondo, come ad es. Harvard e Berkeley, li usano. Però, una volta appresi i concetti fondamentali, gli informatici preferiscono scrivere il codice in maniera testuale perché gli permette di essere più veloci."
      2:
        image: 'notes/starwars_typing_2.JPG'
        text: "Scrivendo il codice in modo testuale, si possono scrivere centinaia di istruzioni di seguito senza doverle ogni volta prendere dalla cassetta degli attrezzi e spostarle nell'area di lavoro. A te che stai imparando, scrivere le istruzioni in maniera testuale potrà all'inizio richiedere più tempo, ma abbiamo voluto darti la possibilità di provare."
      3:
        image: 'notes/starwars_typing_3.JPG'
        text: "Nell'angolo in alto a destra della tua area di lavoro, puoi cliccare il pulsante \"Visualizza il testo\" per passare dalla modalità a blocchi a quella testuale."
      4:
        image: 'notes/starwars_typing_4.JPG'
        text: "Nella prossima lezione, inizieremo in modalità testuale. In questa modalità puoi sempre trascinare i blocchi dalla tua cassetta degli attrezzi, però puoi anche scrivere tu il nome dell'istruzione. Non appena inizi a scrivere il nome dell'istruzione, vedrai apparire, sotto a ciò che stai scrivendo, i nomi delle istruzioni che puoi selezionare. Invece di digitare tutto il nome dell'istruzione, puoi selezionare una di quelle che ti vengono suggerite, per essere più veloce. Nel mio lavoro uso sempre questa funzionalità di \"auto-completamento\" quando scrivo del codice."
      5:
        image: 'notes/starwars_typing_5.JPG'
        text: "Quando scrivi del codice in modo testuale, devi essere estremamente preciso, altrimenti il computer non potrà capirti. E' necessario scrivere l'istruzione esattamente com'è, stando attenti alle maiuscole e includendo anche le parentesi e i punti e virgola. Se c'è anche un solo piccolo errore di battitura, BB-8 non potrà comprendere il codice e non sarà in grado di muoversi."
      6:
        image: 'notes/starwars_typing_6.JPG'
        text: "Se commetti un errore su una riga, l'editor di testo la evidenzierà in modo tale che tu possa modificare la tua istruzione e risolvere il problema."
      7:
        image: 'notes/starwars_typing_7.JPG'
        text: "Se ti blocchi, puoi sempre ricominciare premendo il pulsante “Ricomincia” e puoi passare alla modalità a blocchi ogni volta che vuoi, cliccando sull'angolo in alto a destra dell'area di lavoro. Ok, facciamo un tentativo! E se sbagli, non scoraggiarti. Tutti hanno bisogno di un po' di tentativi per imparare bene."
    starwars_events:
      1:
        image: 'notes/starwars_events_1.JPG'
        text: "Ciao, il mio nome è Charita Carter e sono un produttore creativo senior qui alla Walt Disney Imagineering. Io sono a capo dei gruppi che producono le attrazioni per i nostri visitatori. Siamo sempre alla ricerca di nuovi modi per migliorare e rendere più piacevoli le esperienze che vivono i nostri ospiti e la tecnologia è al centro di tutto ciò."
      2:
        image: 'notes/starwars_events_2.JPG'
        text: "Complimenti, ce l'hai fatta! Hai programmato BB-8. Ora sei pronto per qualcosa di un po' più difficile. Facciamola. Ora che hai imparato i concetti fondamentali della programmazione, torniamo indietro e impara a costruire la tua versione del gioco con R2-D2 e C-3PO."
      3:
        image: 'notes/starwars_events_3.JPG'
        text: 'Per costruire un gioco, abbiamo bisogno di imparare qualcosa che i programmatori di giochi utilizzano ogni giorno: gli "eventi". Gli "eventi" dicono al programma di ascoltare o aspettare qualcosa che succederà: quando questo avviene, il programma esegue un''azione.'
      4:
        image: 'notes/starwars_events_4.JPG'
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      5:
        image: 'notes/starwars_events_5.JPG'
        text: "In questo esempio, vogliamo far andare R2-D2 verso l'alto per consegnare un messaggio a un pilota dell'Alleanza Ribelle e poi verso il basso per andare dall'altro pilota dell'Alleanza Ribelle. Useremo gli eventi per spostarlo quando il giocatore usa i pulsanti freccia verso l'alto o verso il basso."
      6:
        image: 'notes/starwars_events_6.JPG'
        text: "Usiamo il blocco evento \"whenUp()\" (quando si preme sulla freccia verso l'alto) e attacchiamo al suo interno un blocco \"goUp()\" (vai in alto). In questo modo, quando il giocatore preme sul tasto freccia verso l'alto, verrà eseguito il codice associato al blocco \"whenUp()\". E facciamo la stessa cosa per far muovere R2-D2 verso il basso."
      7:
        image: 'notes/starwars_events_7.JPG'
        text: "Per fare ciò, usiamo un'istruzione chiamata \"whenUp()\" (quando si preme sulla freccia verso l'alto). Quando la trascini fuori dalla cassetta degli attrezzi, vedrai che l'istruzione termina con delle parentesi graffe (aperta e chiusa) invece che con un punto e virgola. Questa istruzione ha lo spazio necessario a contenere altre istruzioni al suo interno. Ogni istruzione che poniamo all'interno di queste parentesi graffe verrà eseguita quando il giocatore userà la freccia verso l'alto."
      8:
        image: 'notes/starwars_events_8.JPG'
        text: "Noi vogliamo che R2-D2 vada verso l'alto e quindi mettiamo un blocco \"goUp();\" (vai in alto) all'interno dell'istruzione. Poi facciamo la stessa cosa per far andare R2-D2 verso il basso."
      9:
        image: 'notes/starwars_events_9.JPG'
        text: "Ora, invece di dover scrivere in anticipo tutto il codice necessario a controllare il nostro droide, lasciamo che R2-D2 reagisca agli eventi legati alla pressione dei pulsanti spostandosi sullo schermo. Passo dopo passo, il nostro gioco è sempre più interattivo."
    starwars_congrats:
      1:
        image: 'notes/starwars_congrats_1.JPG'
        text: "Ciao, mi chiamo Alice e gestisco i gruppi di progettazione e produzione qui a Code.org. Ho realizzato il corso che stai facendo adesso."
      2:
        image: 'notes/starwars_congrats_2.JPG'
        text: "Sei già arrivato all'ultimo esercizio. Complimenti! Hai già imparato tutto quello che ti serve per creare la tua versione personale del gioco basato su Guerre Stellari. Non ci sono più istruzioni, né enigmi da risolvere. Puoi creare il tuo gioco personale e decidere come funzionerà! Un'ultima cosa: hai a disposizione nuovi suoni e nuove istruzioni per fare ancora di più."
      3:
        image: 'notes/starwars_congrats_3.JPG'
        text: "[parlano gli studenti] Abbiamo fatto un gioco in cui si ottengono punti quando raggiungi i Porco-Palla. Il colpo di scena è che ogni volta che raggiungi un Porco-Palla viene visualizzato un Assaltatore. Alla fine l'intero schermo è pieno di Porco-Palla e quando ne tocchi 10.000, vinci."
      4:
        image: 'notes/starwars_congrats_4.JPG'
        text: "[parlano gli studenti] Abbiamo fatto un gioco in cui non si può perdere e tutto ciò che uccidi ti dà punti. Per il mio programma, ho invertito i tasti in modo che ogni volta che si preme la freccia verso l'alto, il personaggio va giù e quando si preme la freccia verso destra, il tuo personaggio va a sinistra. È molto difficile! A volte basta avere un vantaggio, e se sei lo sviluppatore del gioco puoi darti un vantaggio sleale. Ce l'ho fatta? Sìì!"
      5:
        image: 'notes/starwars_congrats_5.JPG'
        text: "Quando hai finito di creare la tua versione del gioco, clicca su condividi per ottenere un link da condividere con i tuoi amici o per giocare sul tuo telefono con la tua versione del gioco. Buon divertimento!"
    starwars_blocks_intro:
      1:
        image: 'notes/starwars_blocks_intro_1.JPG'
        text: 'Ciao, sono Kathleen Kennedy e sono la produttrice di Guerre Stellari: Episodio VII - Il Risveglio della Forza. Oggi lavoreremo con una delle nostre celebrità, BB-8. BB-8 è un droide sferico. Tutto ciò che fa e ogni movimento che fa è controllato dal software, cioè da programmi informatici. L''informatica influisce su ogni settore industriale, dal marketing alle cure sanitarie e perfino nel cinema. Infatti, per realizzare un film come Il Risveglio della Forza, hanno lavorato insieme centinaia di informatici.'
      2:
        image: 'notes/starwars_blocks_intro_2.JPG'
        text: "Ciao, sono Rachel Rose, un'informatica senior nel settore Ricerca e Sviluppo alla ILM e mi occupo dell'animazione e del gruppo di sviluppo delle creature. Nel Risveglio della Forza, mi occupo di aiutare gli artisti a sviluppare gli equipaggiamenti che costituiscono quelle parti che permettono ai personaggi di apparire credibili come creature di una galassia lontana lontana..."
      3:
        image: 'notes/starwars_blocks_intro_3.JPG'
        text: "Nella prossima ora, costruirai la tua versione di un gioco basato su Guerre Stellari. Ti insegneremo i concetti fondamentali della programmazione. I programmi di solito sono interamente testuali ma, in questo caso, per scrivere i programmi, uniamo dei blocchi. Per cominciare, lavoriamo con Ray per programmare BB-8 in modo tale da fargli raccogliere tutti i rottami metallici."
      4:
        image: 'notes/starwars_blocks_intro_4.JPG'
        text: "Il tuo schermo è suddiviso in tre parti. Sulla sinistra c'è l'area di gioco (\"game space\") di Guerre Stellari, in cui viene eseguito il codice. Le spiegazioni di ogni esercizio (\"instructions\") sono scritte sotto quest'area."
      5:
        image: 'notes/starwars_blocks_intro_5.JPG'
        text: "Al centro dello schermo c'è la cassetta degli attrezzi (\"tool box\") che contiene i blocchi. Ognuno di questi blocchi è un'istruzione che BB-8 può eseguire."
      6:
        image: 'notes/starwars_blocks_intro_6.JPG'
        text: "Lo spazio bianco sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      7:
        image: 'notes/starwars_blocks_intro_7.JPG'
        text: "Se sposti il blocco \"move left\" (vai a sinistra) nell'area di lavoro come illustrato e clicchi su \"Esegui\" (Run), cosa succede? BB-8 si sposta di una casella a sinistra sulla griglia."
      8:
        image: 'notes/starwars_blocks_intro_8.JPG'
        text: "E cosa puoi fare se vuoi che BB-8 faccia qualcosa dopo essere andato a sinistra? Puoi aggiungere un altro blocco al programma. Scegli il blocco \"move up\" (vai in l'alto) e spostalo sotto il blocco \"move left\" che hai aggiunto prima. Non appena appare una linea gialla sul contorno puoi rilasciarlo e i due blocchi si agganceranno. Se premi nuovamente \"Esegui\" (Run), BB-8 esegue le istruzioni associate ai blocchi presenti nell'area di lavoro, procedendo dall'alto verso il basso."
      9:
        image: 'notes/starwars_blocks_intro_9.JPG'
        text: "Se vuoi cancellare un blocco, basta rimuoverlo dalla tua area di lavoro e rimetterlo nella cassetta degli attrezzi."
      10:
        image: 'notes/starwars_blocks_intro_10.JPG'
        text: "Dopo aver mandato in esecuzione il programma, puoi sempre premere il pulsante \"Ricomincia\" (Reset) per riportare BB-8 al punto di partenza. E ora, iniziamo!"
    starwars_blocks_events:
      1:
        image: 'notes/starwars_blocks_events_1.JPG'
        text: "Ciao, il mio nome è Charita Carter e sono un produttore creativo senior qui alla Walt Disney Imagineering. Io sono a capo dei gruppi che producono le attrazioni per i nostri visitatori. Siamo sempre alla ricerca di nuovi modi per migliorare e rendere più piacevoli le esperienze che vivono i nostri ospiti e la tecnologia è al centro di tutto ciò."
      2:
        image: 'notes/starwars_blocks_events_2.JPG'
        text: "Complimenti, ce l'hai fatta! Hai programmato BB-8. Ora sei pronto per qualcosa di un po' più difficile. Facciamola. Ora che hai imparato i concetti fondamentali della programmazione, torniamo indietro e impara a costruire la tua versione del gioco con R2-D2 e C-3PO."
      3:
        image: 'notes/starwars_blocks_events_3.JPG'
        text: 'Per costruire un gioco, abbiamo bisogno di imparare qualcosa che i programmatori di giochi utilizzano ogni giorno: gli "eventi". Gli "eventi" dicono al programma di ascoltare o aspettare qualcosa che succederà: quando questo avviene, il programma esegue un''azione.'
      4:
        image: 'notes/starwars_blocks_events_4.JPG'
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      5:
        image: 'notes/starwars_blocks_events_5.JPG'
        text: "In questo esempio, vogliamo far andare R2-D2 verso l'alto per consegnare un messaggio a un pilota dell'Alleanza Ribelle e poi verso il basso per andare dall'altro pilota dell'Alleanza Ribelle. Useremo gli eventi per spostarlo quando il giocatore usa i pulsanti freccia verso l'alto o verso il basso."
      6:
        image: 'notes/starwars_blocks_events_6.JPG'
        text: "Usiamo il blocco evento \"whenUp()\" (quando si preme sulla la freccia verso l'alto) e attacchiamo al suo interno un blocco \"goUp()\" (vai in alto). In questo modo, quando il giocatore preme sul tasto freccia verso l'alto, verrà eseguito il codice associato al blocco \"whenUp()\". E facciamo la stessa cosa per far muovere R2-D2 verso il basso. Ora, invece di dover scrivere in anticipo tutto il codice necessario a controllare il nostro droide, lasciamo che R2-D2 reagisca agli eventi legati alla pressione dei pulsanti spostandosi sullo schermo."
      7:
        image: 'notes/starwars_blocks_events_7.JPG'
        text: "Passo dopo passo, il nostro gioco è sempre più interattivo."
    starwars_blocks_congrats:
      1:
        image: 'notes/starwars_blocks_congrats_1.JPG'
        text: "Ciao, mi chiamo Alice e gestisco i gruppi di progettazione e produzione qui a Code.org. Ho realizzato il corso che stai facendo adesso."
      2:
        image: 'notes/starwars_blocks_congrats_2.JPG'
        text: "Sei già arrivato all'ultimo esercizio. Complimenti! Hai già imparato tutto quello che ti serve per creare la tua versione personale del gioco basato su Guerre Stellari. Non ci sono più istruzioni, né enigmi da risolvere. Puoi creare il tuo gioco personale e decidere come funzionerà! Un'ultima cosa: hai a disposizione nuovi suoni e nuove istruzioni per fare ancora di più."
      3:
        image: 'notes/starwars_blocks_congrats_3.JPG'
        text: "[parlano gli studenti] Abbiamo fatto un gioco in cui si ottengono punti quando raggiungi i Porco-Palla. Il colpo di scena è che ogni volta che raggiungi un Porco-Palla viene visualizzato un Assaltatore. Alla fine l'intero schermo è pieno di Porco-Palla e quando ne tocchi 10.000, vinci."
      4:
        image: 'notes/starwars_blocks_congrats_4.JPG'
        text: "[parlano gli studenti] Abbiamo fatto un gioco in cui non si può perdere e tutto ciò che uccidi ti dà punti. Per il mio programma, ho invertito i tasti in modo che ogni volta che si preme la freccia verso l'alto, il personaggio va giù e quando si preme la freccia verso destra, il tuo personaggio va a sinistra. È molto difficile! A volte basta avere un vantaggio, e se sei lo sviluppatore del gioco puoi darti un vantaggio sleale. Ce l'ho fatta? Sìì!"
      5:
        image: 'notes/starwars_blocks_congrats_5.JPG'
        text: "Quando hai finito di creare la tua versione del gioco, clicca su condividi per ottenere un link da condividere con i tuoi amici o per giocare sul tuo telefono con la tua versione del gioco. Buon divertimento!"
    mc_intro:
      1:
        image: 'notes/mc_intro_1.JPG'
        text: "Il mio nome è Jens Bergensten, ma tutti mi chiamano Jeb. Sono il capo sviluppatore di Minecraft, qui alla Mojang di Stoccolma. Penso di aver avuto undici anni, o forse dodici, quando ho cominciato a programmare, perché volevo creare dei giochi. Uno degli amici di mio padre mi aveva detto che, per creare dei giochi, dovevo imparare a programmare. Ecco come ho iniziato. Mi piace immaginare e progettare l'architettura dei giochi. Questo è ciò che mi piace veramente di Minecraft."
      2:
        image: 'notes/mc_intro_2.JPG'
        text: "Nella prossima ora, imparerai i concetti base dell'informatica dando istruzioni a Steve o Alex in modo da farli muovere nel mondo virtuale di Minecraft."
      3:
        image: 'notes/mc_intro_3.JPG'
        text: "I programmi tradizionali sono di solito del testo detto \"codice\". Tu invece scriverai programmi con Blockly, che usa blocchi colorati. I blocchi vengono uniti per scrivere programmi. Anche se usi i blocchi, in realtà stai scrivendo del codice JavaScript."
      4:
        image: 'notes/mc_intro_4.JPG'
        text: "I concetti che stai per apprendere (\"commands\"=istruzioni, \"repeat blocks\"=blocchi di ripetizione, \"if statements\"=istruzioni 'se') sono usati ogni giorno dai programmatori di computer e sono le basi dell'informatica. Qui a Mojang, utilizziamo questi stessi concetti per realizzare Minecraft."
      5:
        image: 'notes/mc_intro_5.JPG'
        text: "Prima di iniziare, devi scegliere il tuo personaggio. Io scelgo Alex. Realizziamo del codice per un programma che la fa muovere sullo schermo."
      6:
        image: 'notes/mc_intro_6.JPG'
        text: "Il tuo schermo è suddiviso in tre parti principali. Sulla sinistra si trova l'area di gioco (\"play space\") di Minecraft, dove viene eseguito il programma. Le spiegazioni di ogni esercizio (\"instructions\") sono scritte sotto quest'area."
      7:
        image: 'notes/mc_intro_7.JPG'
        text: "Questa zona centrale è la cassetta degli attrezzi (\"tool box\"). Ognuno di questi blocchi è un'istruzione che dirige le azioni di Alex."
      8:
        image: 'notes/mc_intro_8.JPG'
        text: "Lo spazio bianco sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      9:
        image: 'notes/mc_intro_9.JPG'
        text: "Se sposti il blocco \"moveForward\" (vai avanti) nell'area di lavoro come illustrato e clicchi su \"Esegui\", cosa succede? Alex si sposta di una casella avanti sulla griglia."
      10:
        image: 'notes/mc_intro_10.JPG'
        text: "E cosa puoi fare se vuoi che Alex faccia qualcosa dopo essere avanzata di una casella? Puoi aggiungere un altro blocco al programma. Scegli il blocco \"turnRight\" (gira a destra) e spostalo sotto il blocco \"moveForward\" che hai aggiunto prima. Non appena appare una linea gialla sul contorno puoi rilasciarlo e i due blocchi si agganceranno. Se premi nuovamente \"Esegui\", Alex esegue le istruzioni associate ai blocchi presenti nell'area di lavoro, procedendo dall'alto verso il basso."
      11:
        image: 'notes/mc_intro_11.JPG'
        text: "Se vuoi cancellare un blocco, basta rimuoverlo dalla tua area di lavoro e rimetterlo nella cassetta degli attrezzi."
      12:
        image: 'notes/mc_intro_12.JPG'
        text: 'Per annullare le modifiche e tornare nella situazione iniziale, usa il pulsante "Ripristina" che trovi sull''angolo in alto a destra della tua area di lavoro. Un''ultima cosa: hai notato il triangolino con la punta verso il basso nei blocchi "gira a ...."? Ogni volta che vedi questi triangolini, significa che puoi selezionare una tra più opzioni a tua disposizione. Inizia a programmare!'
    mc_repeat:
      1:
        image: 'notes/mc_repeat_1.JPG'
        text: "Sono Lydia Winters, sono \"brand director\" alla Mojang, che ha realizzato questo gioco chiamato Minecraft."
      2:
        image: 'notes/mc_repeat_2.JPG'
        text: "La cosa che preferisco fare in Minecraft è esplorare. Amo avventurarmi nelle grotte e vedere cosa riesco a trovare. Come chiunque altro che non sia un programmatore, sono davvero entusiasta di seguire queste lezioni con Minecraft e d'imparare anch'io un po' di codice."
      3:
        image: 'notes/mc_repeat_3.JPG'
        text: "L'ultimo esercizio ha richiesto un bel po' di blocchi \"vai avanti\" (move forward). Sarebbe stato più semplice se avessimo potuto dire al computer di eseguire quattro o cinque volte l'istruzione \"vai avanti\". Fortunatamente, i computer sono davvero bravi a ripetere le istruzioni usando il blocco \"ripeti ... volte\" (repeat ... times)."
      4:
        image: 'notes/mc_repeat_4.JPG'
        text: "Durante la creazione di Minecraft, usiamo i blocchi di ripetizione (detti anche \"cicli\") per posizionare tutti i materiali necessari a creare un nuovo mondo. Sono migliaia e migliaia di blocchi. Usiamo i cicli anche in altri modi, ad esempio per far muovere i piedi di Alex avanti e indietro mentre cammina. I cicli giocano un ruolo importantissimo nella programmazione."
      5:
        image: 'notes/mc_repeat_5.JPG'
        text: "Sta per scendere la notte e quindi, nei prossimi due livelli, devi costruire una casa per stare al sicuro. Useremo il blocco \"ripeti ... volte\" per farlo in maniera molto semplice."
      6:
        image: 'notes/mc_repeat_6.JPG'
        text: "Per costruire un muro della tua casa, puoi dire ad Alex di andare avanti e mettere le assi di legno per quattro volte di fila, oppure puoi dirle di andare avanti e mettere le assi di legno una sola volta, poi spostare queste due istruzioni all'interno di un blocco \"ripeti ... volte\" per farle eseguire queste azioni più volte. Poi inserisci nel blocco \"ripeti ... volte\" il numero di volte che vuoi che ripeta queste azioni. Ed ora costruisci la tua casa prima che scenda la notte! E buon divertimento."
    mc_if_statements:
      1:
        image: 'notes/mc_if_statements_1.JPG'
        text: "Stai per imparare le istruzioni \"se\" (if). Le istruzioni \"se\" sono una parte fondamentale della programmazione. Danno al computer la possibilità di prendere delle decisioni."
      2:
        image: 'notes/mc_if_statements_2.JPG'
        text: "Tutti i computer usano le istruzioni \"se\", compreso il mio telefono. Per esempio, quando sblocco il mio telefono, lui esegue del codice che dice che se inserisco la password correttamente, allora il telefono si deve sbloccare. Altrimenti, deve mostrare un messaggio di errore."
      3:
        image: 'notes/mc_if_statements_3.JPG'
        text: "Nel tuo codice puoi usare le istruzioni \"se\" per far agire Steve e Alex in base a ciò che vedono nel mondo. Per esempio, se di fronte a loro c'è una roccia, possono girare a sinistra. Oppure possono girare a destra se si imbattono in un albero."
      4:
        image: 'notes/mc_if_statements_4.JPG'
        text: "In questo caso, non vuoi che cadano nella lava. È facile evitare la lava quando la vedi sullo schermo. Ma cosa puoi fare se la lava è nascosta sotto la roccia?"
      5:
        image: 'notes/mc_if_statements_5.JPG'
        text: "Dopo che hai scavato la roccia, devi controllare se c'è della lava prima di poter andare avanti. Se c'è della lava, devi mettere una lastra di pietra prima di proseguire. In questo modo puoi avanzare tranquillamente. È il momento di scavare altra roccia! E ricordati di usare l'istruzione \"se\" per fare attenzione a dove metti i piedi."
    mc_congrats_share:
      1:
        image: 'notes/mc_congrats_share_1.JPG'
        text: "Complimenti! Hai appena imparato i concetti di base dell'informatica."
      2:
        image: 'notes/mc_congrats_share_2.JPG'
        text: "Ora puoi usare questi blocchi per creare qualcosa di tuo. Non ci sono più indicazioni o esercizi da risolvere. Puoi costruire qualunque cosa tu voglia. A te la scelta."
      3:
        image: 'notes/mc_congrats_share_3.JPG'
        text: "[parlano gli studenti] Sembra reale. Tosare. Io ho fatto una L con le torce. Io ho fatto una A con le assi di betulla. Funziona, funziona. Abbiamo costruito una casa di lana!"
      4:
        image: 'notes/mc_congrats_share_4.JPG'
        text: "Quando hai finito di creare la tua versione del gioco, clicca su \"Condividi\" (Share) per ottenere un link da condividere con i tuoi amici o per giocare sul tuo telefono con la tua versione del gioco. Buon divertimento!"
    mc_congrats_no_share:
      1:
        image: 'notes/mc_congrats_no_share_1.JPG'
        text: "Complimenti! Hai appena imparato i concetti di base dell'informatica."
      2:
        image: 'notes/mc_congrats_no_share_2.JPG'
        text: "Ora puoi usare questi blocchi per creare qualcosa di tuo. Non ci sono più indicazioni o esercizi da risolvere. Puoi costruire qualunque cosa tu voglia. A te la scelta."
      3:
        image: 'notes/mc_congrats_no_share_3.JPG'
        text: "[parlano gli studenti] Sembra reale. Tosare. Io ho fatto una L con le torce. Io ho fatto una A con le assi di betulla. Funziona, funziona. Abbiamo costruito una casa di lana!"
      4:
        image: 'notes/mc_congrats_no_share_4.JPG'
        text: "Ora puoi costruire qualunque cosa tu voglia. Buon divertimento!"
    gumball_intro:
      1:
        image: 'notes/gumball_intro_1.JPG'
        text: "Se vuoi creare un gioco per conto tuo, puoi farlo! Tutto ciò che ti serve sono alcuni concetti fondamentali di programmazione e potrai iniziare a giocare ad un gioco fatto da te."
      2:
        image: 'notes/gumball_intro_2.JPG'
        text: "Hai un videogioco preferito? Beh, stiamo per fare il primo passo verso la creazione di un gioco proprio come hai fatto nel Laboratorio. I buoni giochi hanno una storia e ogni storia ha dei personaggi. I personaggi fanno delle cose, come parlare, spostarsi e interagire l'un l'altro. Potrebbero anche guadagnare dei punti in base alle regole del gioco. Oggi impareremo come fare tutte queste cose, una alla volta, con dei personaggi divertenti. Costruirai un gioco a partire da zero e poi potrai condividerlo con i tuoi amici e giocarci sul tuo telefono."
      3:
        image: 'notes/gumball_intro_3.JPG'
        text: "Oggi impareremo come fare tutte queste cose, una alla volta, con dei personaggi divertenti. Costruirai un gioco a partire da zero e poi potrai condividerlo con i tuoi amici e giocarci sul tuo telefono."
      4:
        image: 'notes/gumball_intro_4.JPG'
        text: "Lo schermo è diviso in tre parti principali. Sulla sinistra c'è l' \"area di gioco\", dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto quest'area."
      5:
        image: 'notes/gumball_intro_5.JPG'
        text: "La zona centrale è la \"cassetta degli attrezzi\": ognuno di questi blocchi corrisponde ad un'istruzione."
      6:
        image: 'notes/gumball_intro_6.JPG'
        text: "Lo spazio bianco sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      7:
        image: 'notes/gumball_intro_7.JPG'
        text: "Per cominciare, è necessario collegare i blocchi al blocco arancione 'quando si clicca su \"Esegui\" '. È possibile collegare più blocchi insieme trascinandoli fino a che non vedrai formarsi la linea gialla di contorno e non si attaccheranno tra loro."
      8:
        image: 'notes/gumball_intro_8.JPG'
        text: "In questo primo esercizio, faremo dire qualcosa ai personaggi attaccando il blocco \"il personaggio dice ...\" al blocco 'quando si clicca su \"Esegui\" ' e scrivendo qualcosa al suo interno. Una volta che i blocchi sono stati posizionati, clicca il pulsante \"Esegui\" per vedere quello che hai programmato."
      9:
        image: 'notes/gumball_intro_9.JPG'
        text: "Inizia a lavorarci su e alla fine sarai in grado di creare il tuo gioco con tanti tipi di giocatori che possono interagire, guadagnare punti, lanciare oggetti o perfino farsi scomparire l'un l'altro. Dipende tutto da te!"
    gumball_events:
      1:
        image: 'notes/gumball_events_1.JPG'
        text: "Adesso imparerai un meccanismo che tutti i programmatori di giochi usano ogni giorno. Parliamo degli eventi. Un evento dice al programma quando succede qualcosa. Quando quella cosa accade il programma svolge una azione."
      2:
        image: 'notes/gumball_events_2.JPG'
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      3:
        image: 'notes/gumball_events_3.JPG'
        text: "In questo esercizio, faremo dire qualcosa al personaggio quando il giocatore clicca su di lui. Usa il blocco \"quando si clicca sul personaggio\" ('when actor clicked') attaccandoci sotto un blocco \"il personaggio dice ...\" ('say'). Quando il giocatore clicca sul personaggio, tutto ciò che è attaccato al blocco \"quando si clicca sul personaggio\" viene eseguito."
      4:
        image: 'notes/gumball_events_4.JPG'
        text: "Ci sono anche i blocchi  \"quando si preme la freccia ...\" ('when ... arrow'). Se gli colleghi i blocchi \"sposta il personaggio ...\" ('move ...'), puoi iniziare a muovere gli attori in su, in giù, a sinistra o a destra. Passo dopo passo, il tuo  gioco diventa sempre più interattivo."
    gumball_repeat:
      1:
        image: 'notes/gumball_repeat_1.JPG'
        text: "Puoi immaginare di dover ripetere qualcosa per sempre? Fortunatamente non dovrai mai farlo visto che i computer sono veramente bravi nel ripetere le cose."
      2:
        image: 'notes/gumball_repeat_2.JPG'
        text: "Questo è il blocco \"ripeti per sempre\". Qualsiasi istruzione all'interno di questo blocco verrà ripetuta in continuazione durante il gioco. Se vogliamo che un personaggio faccia qualcosa in continuazione, senza che il giocatore faccia nulla, metteremo i relativi blocchi all'interno del blocco \"ripeti per sempre\"."
      3:
        image: 'notes/gumball_repeat_3.JPG'
        text: "In questo esercizio, il nostro obiettivo è di aiutare il personaggio a fare un lavoro in continuazione. Imparare come funzionano i comandi di ripetizione ti farà risparmiare un sacco di tempo più tardi quando costruirai il tuo gioco."
    iceage_intro:
      1:
        image: 'notes/iceage_intro_1.JPG'
        text: "Se vuoi creare un gioco per conto tuo, puoi farlo! Tutto ciò che ti serve sono alcuni concetti fondamentali di programmazione e potrai iniziare a giocare ad un gioco fatto da te."
      2:
        image: 'notes/iceage_intro_2.JPG'
        text: "Hai un videogioco preferito? Beh, stiamo per fare il primo passo verso la creazione di un gioco proprio come hai fatto nel Laboratorio. I buoni giochi hanno una storia e ogni storia ha dei personaggi. I personaggi fanno delle cose, come parlare, spostarsi e interagire l'un l'altro. Potrebbero anche guadagnare dei punti in base alle regole del gioco. Oggi impareremo come fare tutte queste cose, una alla volta, con dei personaggi divertenti. Costruirai un gioco a partire da zero e poi potrai condividerlo con i tuoi amici e giocarci sul tuo telefono."
      3:
        image: 'notes/iceage_intro_3.JPG'
        text: "Oggi impareremo come fare tutte queste cose, una alla volta, con dei personaggi divertenti. Costruirai un gioco a partire da zero e poi potrai condividerlo con i tuoi amici e giocarci sul tuo telefono."
      4:
        image: 'notes/iceage_intro_4.JPG'
        text: "Lo schermo è diviso in tre parti principali. Sulla sinistra c'è l' \"area di gioco\", dove viene eseguito il programma. Le spiegazioni per ciascun esercizio sono scritte sotto quest'area."
      5:
        image: 'notes/iceage_intro_5.JPG'
        text: "La zona centrale è la \"cassetta degli attrezzi\": ognuno di questi blocchi corrisponde ad un'istruzione."
      6:
        image: 'notes/iceage_intro_6.JPG'
        text: "Lo spazio bianco sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      7:
        image: 'notes/iceage_intro_7.JPG'
        text: "Per cominciare, è necessario collegare i blocchi al blocco arancione 'quando si clicca su \"Esegui\" '. È possibile collegare più blocchi insieme trascinandoli fino a che non vedrai formarsi la linea gialla di contorno e non si attaccheranno tra loro."
      8:
        image: 'notes/iceage_intro_8.JPG'
        text: "In questo primo esercizio, faremo dire qualcosa ai personaggi attaccando il blocco \"pronuncia\" al blocco 'quando si clicca su \"Esegui\" ' e scrivendo qualcosa al suo interno. Una volta che i blocchi sono stati posizionati, clicca il pulsante \"Esegui\" per vedere quello che hai programmato."
      9:
        image: 'notes/iceage_intro_9.JPG'
        text: "Inizia a lavorarci su e alla fine sarai in grado di creare il tuo gioco con tanti tipi di giocatori che possono interagire, guadagnare punti, lanciare oggetti o perfino farsi scomparire l'un l'altro. Dipende tutto da te!"
    iceage_events:
      1:
        image: 'notes/iceage_events_1.JPG'
        text: "Adesso imparerai un meccanismo che tutti i programmatori di giochi usano ogni giorno. Parliamo degli eventi. Un evento dice al programma quando succede qualcosa. Quando quella cosa accade il programma svolge una azione."
      2:
        image: 'notes/iceage_events_2.JPG'
        text: "Alcuni esempi di eventi sono quelli rappresentati da un clic del mouse, dall'uso di un tasto freccia o dalla pressione di un dito sullo schermo."
      3:
        image: 'notes/iceage_events_3.JPG'
        text: "In questo esercizio, faremo dire qualcosa al personaggio quando il giocatore clicca su di lui. Usa il blocco \"quando si clicca sul personaggio\" ('when actor clicked') attaccandoci sotto un blocco \"pronuncia\" ('say'). Quando il giocatore clicca sul personaggio, tutto ciò che è attaccato al blocco \"quando si clicca sul personaggio\" viene eseguito."
      4:
        image: 'notes/iceage_events_4.JPG'
        text: "Ci sono anche i blocchi  \"quando si preme la freccia ...\" ('when ... arrow'). Se gli colleghi i blocchi \"sposta il personaggio ...\" ('move ...'), puoi iniziare a muovere gli attori in su, in giù, a sinistra o a destra. Passo dopo passo, il tuo  gioco diventa sempre più interattivo."
    iceage_repeat:
      1:
        image: 'notes/iceage_repeat_1.JPG'
        text: "Puoi immaginare di dover ripetere qualcosa per sempre? Fortunatamente non dovrai mai farlo visto che i computer sono veramente bravi nel ripetere le cose."
      2:
        image: 'notes/iceage_repeat_2.JPG'
        text: "Questo è il blocco \"ripeti per sempre\". Qualsiasi istruzione all'interno di questo blocco verrà ripetuta in continuazione durante il gioco. Se vogliamo che un personaggio faccia qualcosa in continuazione, senza che il giocatore faccia nulla, metteremo i relativi blocchi all'interno del blocco \"ripeti per sempre\"."
      3:
        image: 'notes/iceage_repeat_3.JPG'
        text: "In questo esercizio, il nostro obiettivo è di aiutare il personaggio a fare un lavoro in continuazione. Imparare come funzionano i comandi di ripetizione ti farà risparmiare un sacco di tempo più tardi quando costruirai il tuo gioco."
    mc_2016_intro:
      1:
        image: 'notes/mc_2016_intro_1.jpg'
        text: "Ciao, mi chiamo Jens e sono il capo progettista creativo di Minecraft. Nella prossima ora svilupperai la tua versione di Minecraft. All'inizio il tempo sembra essersi fermato in Minecraft. Le pecore non si muovono, le galline non depongono uova e gli zombie sono immobili. Devi scrivere tu il codice che mette in moto il mondo di Minecraft."
      2:
        image: 'notes/mc_2016_intro_2.jpg'
        text: 'Mi chiamo Melissa e sono una studiosa dell''interazione con l''utente a Minecraft. Quello che mi interessa davvero è come la gente pensa e interagisce con la tecnologia e quindi questo lavoro è il lavoro perfetto per me perché unisce l''informatica e la psicologia: come pensano e si comportano le persone.'
      3:
        image: 'notes/mc_2016_intro_3.jpg'
        text: "La schermata è suddivisa in tre aree principali. 1) Sulla sinistra abbiamo lo scenario di gioco di Minecraft. All'inizio è tutto immobile, ma presto lo animeremo con il codice."
      4:
        image: 'notes/mc_2016_intro_4.jpg'
        text: "2) La zona centrale è la \"cassetta degli attrezzi\". Ciascun blocco corrisponde a un comando che i polli, le pecore e le altre creature di Minecraft possono comprendere."
      5:
        image: 'notes/mc_2016_intro_5.jpg'
        text: "3) Lo spazio sulla destra è la tua area di lavoro (\"workspace\") ed è il posto in cui costruisci il tuo programma."
      6:
        image: 'notes/mc_2016_intro_6.jpg'
        text: "Se non ricordi cosa fare, le istruzioni per ogni esercizio sono mostrate in alto."
      7:
        image: 'notes/mc_2016_intro_7.jpg'
        text: "Per iniziare, programmiamo il comportamento di un pollo. Trascina il blocco \"vai avanti\" nell'area di lavoro. Quando clicchi su \"Esegui\", il pollo avanza di un passo. Per fargli fare un altro passo, trascina un altro blocco \"vai avanti\" sotto il primo finché il suo bordo non viene evidenziato. Se adesso lo rilasci, i due blocchi si uniscono. Cliccando di nuovo \"Esegui\", il pollo avanza di due passi."
      8:
        image: 'notes/mc_2016_intro_8.jpg'
        text: "Se vuoi cancellare un blocco, basta rimuoverlo dalla tua area di lavoro e rimetterlo nella cassetta degli attrezzi."
      9:
        image: 'notes/mc_2016_intro_9.jpg'
        text: "Dopo aver cliccato su \"Esegui\" puoi sempre cliccare su \"Ricomincia\" per interrompere il gioco e ripartire da capo. Ora tocca a te creare la tua versione di Minecraft. Buon divertimento!"
    mc_2016_loops:
      1:
        image: 'notes/mc_2016_loops_1.jpg'
        text: "Ciao, sono Lisa. Sono una programmatrice di Minecraft e nel gioco mi occupo del comportamento di alcuni animali e nemici. Uno degli animali su cui ho lavorato è il gattopardo. Ho realizzato la scena in cui offri un pesce al gattopardo per addomesticarlo."
      2:
        image: 'notes/mc_2016_loops_2.jpg'
        text: "Noi umani ci annoiamo a ripetere le stesse azioni più e più volte. Ma il bello dei computer è che possono ripetere le stesse operazioni milioni o persino miliardi di volte senza mai stancarsi. Queste ripetizioni si chiamano \"cicli\" e ogni creatura di Minecraft ne fa uso."
      3:
        image: 'notes/mc_2016_loops_3.jpg'
        text: "Prima abbiamo fatto muovere un pollo sullo schermo, ma dopo un po’ si è fermato. In Minecraft i polli si spostano continuamente. Usiamo il ciclo \"ripeti per sempre\" in modo che anche i nostri polli non si fermino mai. I cicli ti fanno risparmiare parecchio tempo e sono un alleato prezioso per creare la tua versione di Minecraft."
    mc_2016_events:
      1:
        image: 'notes/mc_2016_events_1.jpg'
        text: "Nel prossimo esercizio puoi scegliere se controllare Steve o Alex. Premi i tasti di direzione sulla tastiera per muoverti in su, in giù, a sinistra e a destra. Ora puoi spostarti dove vuoi all’interno dello scenario di gioco. Per usare una creatura, avvicinati, girati verso di essa e premi la barra spaziatrice."
      2:
        image: 'notes/mc_2016_events_2.jpg'
        text: "Se utilizzi un <i>touchscreen</i>, puoi muoverti scorrendo verso l’alto, il basso, a sinistra e a destra. Quindi tocca lo schermo per utilizzare l’oggetto che hai di fronte."
      3:
        image: 'notes/mc_2016_events_3.jpg'
        text: "Cosa succede quando usi una creatura? In Minecraft, le pecore producono lana quando le tosi, le mucche scappano se le colpisci e i Creeper esplodono quando ti avvicini. Queste reazioni sono rese possibili dai cosiddetti \"gestori di eventi\". I gestori di eventi sono blocchi che permettono al programma di attendere e riconoscere determinate circostanze, \"gli eventi\". Se gli eventi si verificano, i gestori di evento attivano delle azioni."
      4:
        image: 'notes/mc_2016_events_4.jpg'
        text: "Per ora abbiamo utilizzato un solo gestore di evento. Il codice che inserisci nel gestore di evento \"quando viene creato\" viene eseguito quando la tua creatura viene creata oppure all’avvio del gioco. Nei prossimi livelli disporrai di altri blocchi per gestire eventi. Per esempio \"quando viene toccato\", il cui codice viene eseguito quando tocchi la creatura, o \"quando viene usato\", che viene eseguito quando la usi. Se invece vuoi che il tuo zombie scompaia al sorgere del sole, inseriscilo nel blocco \"di giorno\""
    mc_2016_spawn:
      1:
        image: 'notes/mc_2016_spawn_1.jpg'
        text: "Nei giochi, \"creare\" significa inserire qualcosa nello scenario del gioco. In questo livello creeremo degli zombi al calare del sole. A questo scopo ci servirà il blocco \"di notte\"."
      2:
        image: 'notes/mc_2016_spawn_2.jpg'
        text: "Visto che gli zombie devono comparire di notte, inseriamo il blocco \"crea zombie\" nel blocco \"di notte\". Appena viene creato, ciascuno zombie eseguirà il codice che hai inserito nel gestore di evento \"quando viene creato\". Buon divertimento con gli zombie!"
    mc_2016_congrats:
      1:
        image: 'notes/mc_2016_congrats_1.jpg'
        text: "Congratulazioni! Hai imparato a utilizzare la programmazione per dare vita a nuovi mondi di Minecraft. Ora sei tu lo sviluppatore. Hai a disposizione tutti i comandi e le creature. Ora sei tu a stabilire cosa accadrà."
      2:
        image: 'notes/mc_2016_congrats_2.jpg'
        text: "Quando hai completato il tuo gioco, clicca su \"Termina\" per ottenere un link per condividerlo con gli amici o provare il tuo gioco su smartphone. Buon divertimento! Non vedo l’ora di giocare la tua versione di Minecraft."
