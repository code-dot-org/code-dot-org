it:
  data:
    instructions:
      2-3 Artist 1 new_instruction: "Ciao, io sono un artista. Puoi scrivere del codice per farmi disegnare quasi qualunque cosa. Usa i blocchi per farmi disegnare lungo le linee grigie dell'immagine. (Ciascuna riga è lunga 100 pixel)"
      2-3 Artist 11_instruction: 'Disegna il bordo del segnale di stop creando un ottagono di 8 lati, ciascun lungo 100 pixel. Di quanti gradi devi girare adesso per completare il bordo del segnale di stop? (Suggerimento: quanto fa 360 diviso 8?) '
      2-3 Artist 12_instruction: 'Imposta il numero di ripetizioni del blocco "ripeti ??? volte" in modo tale da disegnare il "cerchio" che rappresenta il bulbo oculare. Se ad ogni movimento giri a destra di un grado, quante volte devi ripetere il movimento per completare il cerchio? 180? 360? 500?'
      2-3 Artist 2 new_instruction: 'Questa casa ha una parete lasciata a metà. Ogni parete è lunga 100 pixel, ma della parete a destra ne è stata disegnata solo una metà. Completala. '
      2-3 Artist 2_instruction: |
        This house has a half-finished wall. Each side is
        100, but the half-finished wall is only 50. Complete the wall. 
      2-3 Artist 3.4_instruction: |-
        Il blocco "salta" consente di muovere l'artista senza disegnare. Disegna la linea tratteggiata usando sia i blocchi "salta" che quelli per disegnare.
      2-3 Artist 3_instruction: Questo cappello è alto 100 PIXEL. Disegna un cappello che sia 70 PIXEL più piccolo.
      2-3 Artist 3new_instruction: "Il cappello rosso ha un'altezza pari a 100 pixel. Completa il disegno con un cappello nero che sia più corto di quello rosso di 70 pixel. Il cappello nero è largo 50 pixel."
      2-3 Artist 4_instruction: Aiutami a completare la casa per questo gatto.
      2-3 Artist 5_instruction: 'Sostituisci questo codice con un blocco "ripeti ??? volte" per disegnare la stessa case utilizzando solo 3 blocchi.'
      2-3 Artist 6_instruction: 'Questa casa ha bisogno di un tetto! Disegna un triangolo. Suggerimento: tutti e tre i lati hanno la stessa lunghezza.'
      2-3 Artist 7_instruction: "Finisci di disegnare la metà destra dell'ultima finestra. Ciascun riquadro della finestra è un quadrato largo 25 pixel. "
      2-3 Artist 8_instruction: Completa le camere per ciascun animale suddividendo il rettangolo in 2 quadrati di uguale dimensione. Il rettangolo è largo 200 pixel e alto 100 pixel.
      2-3 Artist 9_instruction: Finisci di disegnare questo aquilone
      2-3 Artist Assessment 1_instruction: "Questo è un esercizio di verifica -- Finisci di disegnare l'ultimo dente, è largo 25 pixel e alto 25 pixel."
      2-3 Artist Debugging 1_instruction: Riesci a disegnare questo cappello facendo in modo che la sua parte superiore sia lunga 100 pixel?
      2-3 Artist Debugging 10_instruction: 'Il tastierino direzionale del controller del mio gioco è troppo stretto. Suggerimento: allargalo di 10 pixel'
      2-3 Artist Debugging 11_instruction: |
        Aiutami a completare il mio bellissimo fiocco di neve.
        Quante volte devo eseguire il blocco "ripeti" per completarlo?
      2-3 Artist Debugging 12_instruction: "Dovrei aggiungere un'onda dell'oceano a questa scena.  Puoi aiutarmi?"
      2-3 Artist Debugging 2_instruction: 'Il codice che disegna i tre baffi a destra è sbagliato, correggilo. Suggerimento: tutti i baffi hanno la stessa lunghezza.'
      2-3 Artist Debugging 3_instruction: "La mia barca ha un buco! Riesci a ripararla modificando l'angolazione di una linea? Suggerimento: nell'ultimo angolo c'è un errore di 15 gradi."
      2-3 Artist Debugging 4_instruction: "Qual è l'immagine che stiamo cercando di disegnare? Finisci di unire i punti utilizzando le giuste linee ed angoli."
      2-3 Artist Debugging 5_instruction: 'Il codice che disegna la gamba e il piede è sbagliato. Suggerimento: Il piede è troppo lungo, potrebbe essere necessario eliminare un blocco'
      2-3 Artist Debugging 6_instruction: Sembra che mi sia seduto su una sedia a cui manca una gamba. Modifica i blocchi per disegnare la gamba mancante.
      2-3 Artist Debugging 7_instruction: 'Questo codice disegna la C al contrario nella parola "CODE". Riesci a farla disegnare correttamente?'
      2-3 Artist Debugging 8_instruction: 'La mia girandola non è finita. Quante volte devo eseguire il blocco "ripeti" per completarla?'
      2-3 Artist Debugging 9_instruction: "Il codice per disegnare questo gambo non è corretto. Suggerimento: nel primo angolo c'è un errore di 60 gradi."
      2-3 Artist Debugging Assessment 1_instruction: 'Questa figura è troppo piccola. Riesci a farla più grande? Suggerimento: ogni lato dovrebbe essere 75 pixel più lungo della lunghezza attuale.'
      2-3 Artist Free Play_instruction: 'Tempo di giocare: disegna qualunque cosa ti piaccia.'
      2-3 Artist Functions 1_instruction: "Ciao. Io artista zombie. Mi piace disegnare! Aiutami a disegnare questi occhiali quadrati. Suggerimento: l'asta tra le lenti è di 25 pixel più corta della lunghezza di ciascuna lente."
      2-3 Artist Functions 10_instruction: "Qui ci sono due funzioni, una per disegnare un ingranaggio grande e una per disegnare un ingranaggio piccolo. Usale per disegnare l'interno di una macchina!"
      2-3 Artist Functions 11.5_instruction: |-
        Qui abbiamo sempre la funzione "disegna un esagono". Cosa succede se nel ripetere l'esecuzione della funzione come nell'esercizio precedente adesso giri ogni volta solo di 60 gradi?
      2-3 Artist Functions 11_instruction: 'Abbiamo rinominato la funzione "disegna un quadrato" in "disegna un esagono", ma realizza ancora quadrati! Puoi modificare la funzione "disegna un esagono" in modo che produca un esagono con i lati lunghi 50 pixel, e riprodurre poi tutta la figura usando la nuova funzione?'
      2-3 Artist Functions 12_instruction: |-
        Le funzioni sono davvero utili per disegnare più volte oggetti complessi. Puoi usare la funzione "disegna un fiore" per riempire il resto della fioriera? (Suggerimento: le piante sono tutte distanti 100 pixel l'una dall'altra)  
      2-3 Artist Functions 13_instruction: |-
        Ti abbiamo dato quattro funzioni. Usale come preferisci all'interno di uno o più cicli per realizzare immagini da condividere con i tuoi amici. Premi "run" per vedere un esempio.
      2-3 Artist Functions 2_instruction: |-
        Le funzioni ti permettono di definire nuovi blocchi! Abbiamo spostato i blocchi per disegnare un quadrato all'interno di una funzione chiamata "disegna un quadrato". Puoi usare la funzione "disegna un quadrato" per creare gli occhiali?  I quadrati sono distanti 75 pixel.
      2-3 Artist Functions 3_instruction: Modifica la funzione in modo da disegnare adesso un quadrato con i lati lunghi 115 pixel e creare occhiali più grandi. I quadrati sono ora distanti 45 pixel.
      2-3 Artist Functions 4_instruction: 'Usa il blocco "ripeti ... volte" per disegnare questi tre quadrati.'
      2-3 Artist Functions 7_instruction: 'Usa la funzione "disegna una casa" per disegnare due case, utilizzando diversi parametri. (Suggerimento: la prima casa è di 100 pixel).'
      2-3 Artist Functions 9_instruction: |-
        Qui trovi la funzione "disegna un fiocco di neve". Sperimentala per creare una scena invernale! Questo è un esercizio libero, quindi non c'è alcun problema da risolvere. Buon divertimento!
      2-3 Artist Loops 1_instruction: Puoi creare un esagono con i lati lunghi 100 pixel per completare la cella? Ricordati, questo significa che avrai bisogno di girare di soli 60 gradi!
      2-3 Artist Loops 10_instruction: Cosa succede al disegno se facciamo il nostro ultimo passo in avanti lungo metà?
      2-3 Artist Loops 11_instruction: |-
        Ora mettiamo un "altro" ciclo intorno all'intera creazione! Non dimenticare di aggiungere un angolo alla fine del ciclo esterno.
      2-3 Artist Loops 2_instruction: 'Ora utilizza un blocco "ripeti" per rendere la cella una conchiglia.'
      2-3 Artist Loops 4_instruction: Vuoi vedere cosa succede quando ripetiamo quella forma molte volte utilizzando un ciclo?
      2-3 Artist Loops 5_instruction: Ora facciamo una piccola modifica al ciclo e vediamo come cambia la nostra figura.
      2-3 Artist Loops 6_instruction: "Aggiungi un'altra mossa e un altro giro all'interno del ciclo e vedi come cambia il tuo disegno."
      2-3 Artist Loops 7_instruction: "Possiamo utilizzare i cicli per creare tutti i tipi di poligono. Puoi creare un rombo all'interno dell'esagono?"
      2-3 Artist Loops 8_instruction: "Mettiamo entrambi gli elementi all'interno di un ciclo."
      2-3 Artist Loops 9_instruction: "Stiamo per inserire in un ciclo gli stessi elementi, ma ora aggiungeremo un po' di distanza tra loro.\r Usa lo stesso codice di prima, ma aggiungi un passo avanti alla fine del ciclo esterno."
      2-3 Artist Loops New 1_instruction: Disegniamo la testa di questo robot! Riesci a disegnare un quadrato i cui lati siano tutti lunghi 100 pixel?
      2-3 Artist Loops New 10_instruction: 'Adesso cerca di collegare una serie di V: per disegnarle crea un ciclo usando il blocco "ripeti ??? volte".'
      2-3 Artist Loops New 11_instruction: 'Questa volta dobbiamo disegnare la V per 24 volte. Aggiungi a questo codice un blocco "gira a sinistra di 30 gradi" e metti il tutto in un blocco "ripeti ??? volte".'
      2-3 Artist Loops New 12_instruction: |
        Disegna un rombo i cui lati siano lunghi 100 pixel.
        
      2-3 Artist Loops New 13_instruction: Disegna il rombo per 3 volte usando un ciclo.
      2-3 Artist Loops New 14_instruction: "Ora disegna il rombo per 10 volte ma, tra un rombo e l'altro, effettua una rotazione di 90 gradi."
      2-3 Artist Loops New 15_instruction: Disegna qualcosa di divertente.
      2-3 Artist Loops New 2_instruction: 'Ecco una parte del codice che hai usato per disegnare il quadrato. Cosa succede se usi il blocco "ripeti 4 volte" per eseguire questo codice 4 volte?'
      2-3 Artist Loops New 9_instruction: Per completare la freccia disegna semplicemente una V i cui lati siano entrambi di 50 pixel.
      2-3 Artist Match Hex Pic_instruction: "Sfida: Aiuta a finire l'esagono."
      2-3 Artist Match Rho Pic_instruction: 'Sfida: Completa il codice mancante.'
      2-3 Artist Match Sq Pic_instruction: 'Sfida: Completa il codice mancante'
      2-3 Artist Match Tri pic_instruction: Esercizio di Verifica (Associazioni)
      2-3 Artist Nested Loops 1_instruction: "Hai già utilizzato i cicli per disegnare, ma sapevi che puoi inserire un ciclo all'interno di un altro ciclo?\r Crea un ciclo che ripete per 3 volte tutti i blocchi di codice in grigio, allo scopo di disegnare la figura indicata."
      2-3 Artist Nested Loops 10_instruction: Ripeti 12 volte questo codice per completare la figura.
      2-3 Artist Nested Loops 11_instruction: Ripeti 4 volte questo codice per completare la figura, girando di 90 gradi alla fine di ciascun cerchio.
      2-3 Artist Nested Loops 12_instruction: Ripeti 12 volte questo codice per completare la figura.
      2-3 Artist Nested Loops 2_instruction: Ora disegna il triangolo 6 volte. Dopo ogni triangolo, devi girarti di 60 gradi prima di disegnare il successivo.
      2-3 Artist Nested Loops 3_instruction: Per disegnare questa figura devi ripetere il triangolo 12 volte. Per sapere di quanti gradi girare dopo ciascun triangolo, dividi il numero di gradi in un cerchio (360) per il numero di triangoli che stai disegnando (12).
      2-3 Artist Nested Loops 4_instruction: 'Per disegnare un fiore devi ripetere il rombo 12 volte. Suggerimento: i 12 rombi sono come i 12 triangoli che hai già disegnato - di quanti gradi devi girare dopo aver disegnato ciascun rombo?'
      2-3 Artist Nested Loops 5_instruction: "Riempi le finestre di questo edificio usando un ciclo annidato. Le finestre sono grandi 20 pixel e distanti 20 pixel l'una dall'altra."
      2-3 Artist Nested Loops 6_instruction: Lungo la coda del dinosauro ci sono 8 punte; ogni punta è lunga 30 pixel. Disegna il triangolo 8 volte, ma assicurati di spostarti in avanti dopo aver disegnato ciascun triangolo.
      2-3 Artist Nested Loops 7_instruction: Per disegnare un sole ripeti 10 volte questo triangolo. Dopo ogni triangolo devi spostarti e anche girarti. Puoi capire di quanto devi girarti dividendo il numero di gradi in un cerchio per il numero di figure che compongono il disegno.
      2-3 Artist Nested Loops 8_instruction: "Ora aggiungi un po' di erba all'immagine. I ciuffi d'erba distano tra loro 50 pixel."
      2-3 Artist Nested Loops 9_instruction: "Completa quest'immagine aggiungendo un fiore. Per disegnare il tuo fiore devi ripetere il rombo 12 volte."
      2-3 Artist Nested Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa di carino usando i cicli annidati.'
      2-3 Bee Conditionals 1_instruction: "Ciao, sono un'ape. Aiutami a raccogliere il nettare dai fiori."
      2-3 Bee Conditionals 10_instruction: I fiori viola possono avere 0 oppure 1 dose di nettare. Fai attenzione a non raccogliere il nettare da un fiore viola SE non ne ha.
      2-3 Bee Conditionals 11_instruction: Raccogli il nettare dai fiori che ne hanno.
      2-3 Bee Conditionals 12_instruction: Usa un ciclo per controllare la presenza del nettare e raccoglierlo da tutti questi fiori.
      2-3 Bee Conditionals 13_instruction: 'Raccogli il nettare e fai il miele. Domanda: cosa succede se usi un blocco condizionale "se nettare" su un fiore rosso? Puoi risolvere questo esercizio usando il blocco "ripeti ... volte" (ciclo)?'
      2-3 Bee Conditionals 14_instruction: Raccogli il nettare e fai il miele. Fai attenzione a non raccogliere nettare dai fiori viola, se non ne hanno.
      2-3 Bee Conditionals 15_instruction: Raccogli il nettare da tutti e quattro i fiori.
      2-3 Bee Conditionals 2_instruction: |-
        Ciao, sono un'ape! Aiutami a raccogliere tutto il nettare dai fiori. Usa il blocco "ripeti ... volte" (ciclo).
      2-3 Bee Conditionals 3_instruction: 'Aiutami a raccogliere tutto il nettare dai fiori e a produrre tutto il miele. Usa il blocco "ripeti ... volte" (ciclo).'
      2-3 Bee Conditionals 4_instruction: Aiutami a raccogliere tutto il nettare dai fiori e a produrre tutto il miele.
      2-3 Bee Conditionals 5_instruction: 'I fiori viola possono avere una quantità di nettare pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere nettare da un fiore viola se ne ha una quantità pari a 0. Usa il blocco "se" per controllare se la quantità è 0 oppure 1.'
      2-3 Bee Conditionals 6_instruction: 'Controlla questo fiore con un blocco "se" per verificare se ha del nettare.'
      2-3 Bee Conditionals 7_instruction: Raccogli il nettare da ogni fiore, se ne ha.
      2-3 Bee Conditionals 8_instruction: Su questo campo ci sono fiori rossi e viola. I fiori rossi possiedono una quantità nota di nettare, ma la quantità dei fiori viola è ignota. Raccogli tutto il nettare.
      2-3 Bee Conditionals 9_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Conditionals Assessment 1_instruction: 'Questo è un esercizio di verifica -- Raccogli tutto il nettare. Fai attenzione a non raccogliere il nettare dai fiori viola se non ne hanno.'
      2-3 Bee Debugging 1_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 10_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e trasformarlo in miele. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 2_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 3_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 4_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 5_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Da ora in avanti puoi usare, oltre al comando "Fai un passo", anche il comando "Esegui" per eseguire tutti i blocchi.'
      2-3 Bee Debugging 6_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 7_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 8_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging 9_instruction: 'Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.'
      2-3 Bee Debugging Assessment 1_instruction: 'Questo è un esercizio di verifica -- Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare.'
      2-3 Bee Functions 1_instruction: 'Una funzione è una sequenza di blocchi di codice che esegue un compito. Usa la funzione "raccogli 2 dosi di nettare" per raccogliere il nettare da ogni fiore.'
      2-3 Bee Functions 10_instruction: I fiori viola possono avere una quantità di nettare pari a 0 oppure 1. Definisci una funzione che raccoglie il nettare da un fiore viola solo se ne ha.
      2-3 Bee Functions 2_instruction: 'Una funzione è una sequenza di blocchi di codice che esegue un compito. Usa la funzione "raccogli 5 dosi" per raccogliere ogni volta 5 dosi di nettare. Assicurati anche di usare un ciclo per contare nel modo migliore.'
      2-3 Bee Functions 3_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Functions 4_instruction: |-
        La funzione "vai a prendere il nettare" sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava. Usa questa funzione per raccogliere tutto il nettare.
      2-3 Bee Functions 5_instruction: "Ora c'è più nettare nei fiori. Modifica la funzione data in modo che raccolga 4 dosi di nettare ed usala per raccogliere tutto il miele dai fiori."
      2-3 Bee Functions 6_instruction: Adesso usa la stessa funzione per raccogliere il nettare dai tre fiori.
      2-3 Bee Functions 7_instruction: I fiori adesso sono nuovamente fuori. Modifica la funzione e utilizzala per raccogliere tutto il polline e trasformarlo in miele.
      2-3 Bee Functions 8_instruction: Definisci la tua funzione per prendere 7 dosi di nettare, spostarsi in avanti e fare 7 dosi di miele. Usa questa funzione per raccogliere il nettare da ogni fiore e fare il miele su ogni favo.
      2-3 Bee Functions 9_instruction: "Definisci la tua funzione che si avvia lungo un cammino per prendere il nettare e fare il miele, per poi tornare all'inizio del cammino."
      2-3 Bee Functions Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa la funzione data per raccogliere il nettare da ogni fiore.'
      2-3 Bee Functions Assessment 2_instruction: 'Questo è un esercizio di verifica -- Definisci una funzione per fare 3 dosi di miele alla volta.'
      2-3 Bee Loops 1_instruction: "Ogni fiore contiene un'unità di nettare. Raccogli il nettare da ciascun fiore. "
      2-3 Bee Loops 10_instruction: |-
        Riesci ad usare un ciclo "mentre" all'interno di altri due cicli per raccogliere tutto il nettare?
      2-3 Bee Loops 11_instruction: 'Usa un ciclo mentre "while" per raccogliere il polline dai fiori in questo campo.'
      2-3 Bee Loops 12_instruction: 'Usa un ciclo mentre "while" per raccogliere il polline dai fiori in questo campo.'
      2-3 Bee Loops 13_instruction: 'Questo è un esercizio di verifica -- Usa il blocco "ripeti" per raccogliere tutto il nettare.'
      2-3 Bee Loops 1A_instruction: "Ciao, sono un'ape. Riesci ad aiutarmi a raccogliere il nettare da questi fiori? "
      2-3 Bee Loops 2_instruction: Usa un ciclo per raccogliere il nettare e trasformarlo in miele.
      2-3 Bee Loops 2A_instruction: Riesci a raccogliere il nettare con meno blocchi, usando un ciclo?
      2-3 Bee Loops 3_instruction: Raccogli il nettare da ogni fiore e fai il miele ad ogni favo.
      2-3 Bee Loops 3A_instruction: Riesci ad usare un ciclo per raccogliere tutto il nettare?
      2-3 Bee Loops 3B_instruction: 'Adesso usa il blocco "ripeti" sia per raccogliere tutto il nettare che per produrre tutto il miele.'
      2-3 Bee Loops 4_instruction: |-
        Usa un ciclo simile a quello del precedente esercizio, ma usa l'istruzione "gira".
      2-3 Bee Loops 4A_instruction: Cosa succede se ripeti questa sequenza per 3 volte? Non dimenticarti di produrre il miele alla fine!
      2-3 Bee Loops 5_instruction: Usa un ciclo per scendere la scala e raccogliere tutto il nettare.
      2-3 Bee Loops 6_instruction: Usa un ciclo per raccogliere il nettare da ciascun fiore e fare miele in ogni favo.
      2-3 Bee Loops 7_instruction: "Metti questi blocchi all'interno di un ciclo in modo tale da raccogliere il nettare da ciascun fiore."
      2-3 Bee Loops 8_instruction: |-
        I fiori viola possiedono una quantità imprecisata di nettare. Usa il ciclo "mentre" per raccoglierlo tutto. Il blocco "mentre" farà qualunque cosa si trova all'interno di esso PER TUTTO IL TEMPO IN CUI la condizione scritta accanto a "mentre" è VERA, in questo caso per tutto il tempo in cui "nettare > 0".
      2-3 Bee Loops 9_instruction: "Il ciclo while può essere usato come un'istruzione if all'interno di un ciclo. Aggiungi un ciclo while in questo programma per completare lo stesso compito."
      2-3 Bee Loops Assessment 1_instruction: 'Questo è un esercizio di verifica - Usa un ciclo annidato per raccogliere tutto il nettare da questi fiori.'
      2-3 Maze 1_instruction: |-
        Puoi aiutarmi a catturare il maialino cattivo? Accosta due blocchi "vai avanti" uno sopra l'altro e poi premi "Esegui" per aiutarmi a raggiungerlo. 
      2-3 Maze 10_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze 11_instruction: Ho fame, fammi arrivare al fiore! Quante volte devi ripetere il mattoncino?
      2-3 Maze 12 (copy 1)_instruction: 'Riesci a sostituire la risposta precedente con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (copy 2)_instruction: 'Riesci a sostituire la risposta precedente con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (old)_instruction: 'Portami al maiale, ora con il comando Ripeti il blocco "n" volte!'
      2-3 Maze 12_instruction: |
        Riesci a sostituire questi cinque blocchi con due soli blocchi?
        (Suggerimento: Crea un ciclo usando il blocco "ripeti 5 volte".)
      2-3 Maze 13 (old)_instruction: 'Portami al maiale, ora con il blocco "Ripeti fino a"!'
      2-3 Maze 13_instruction: Fammi arrivare al maialino, usando solo 2 blocchi.
      2-3 Maze 14 (old)_instruction: 'Fammi arrivare al maialino con il blocco "ripeti ... fino a che"!'
      2-3 Maze 14_instruction: |-
        Portami al girasole! (Dov'è quel blocco "Ripeti n volte" quando ne ho bisogno?)
      2-3 Maze 15 (old)_instruction: 'Fammi arrivare al maialino con il blocco "ripeti ... fino a che"!'
      2-3 Maze 15_instruction: Usa due cicli per arrivare al maialino usando meno blocchi possibile.
      2-3 Maze 16 (old)_instruction: 'Fammi arrivare al maialino con il blocco "ripeti ... fino a che"!'
      2-3 Maze 16 before_instruction: Fammi arrivare al maialino.
      2-3 Maze 16_instruction: Fammi arrivare al girasole. Ripeti la sequenza!
      2-3 Maze 2_instruction: Questo maialino mi fa arricciare le penne. Aiutami a prenderlo!
      2-3 Maze 3_instruction: Fammi fare il percorso per arrivare a quello sciocco maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze 4_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze 5_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze 6_instruction: Mantieni la calma e aiutami a trovare quel cattivone di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze 7_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze 8_instruction: Fammi arrivare al maialino!
      2-3 Maze 9_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando 5 blocchi?
      2-3 Maze Loops 17_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 18_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 19_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 20_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 21_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Fammi arrivare al girasole, usando solo 5 blocchi! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 Maze sq10v2_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 maze sq11_instruction: Fammi arrivare al maialino! Quale blocco viene ripetuto?
      2-3 maze sq12_instruction: 'Puoi sostituire la precedente risposta con un ciclo usando un blocco "ripeti n volte"?'
      2-3 maze sq13_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.
        Crea un ciclo col blocco "ripeti fino a che".
      2-3 maze sq14_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      2-3 maze sq15_instruction: Puoi arrivare al girasole usando solo cinque blocchi?
      2-3 maze sq16_instruction: Questo esercizio è simile al precedente, ma leggermente diverso. Puoi risolverlo usando solo cinque blocchi?
      2-3 Maze sq2_instruction: Fammi fare il percorso per arrivare a quello sciocco maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze sq3_instruction: Guidami verso quel cattivone verde! Fai attenzione alla dinamite (TNT)
      2-3 Maze sq4_instruction: Mantieni la calma e aiutami a trovare quel cattivone di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze sq5_instruction: Portami dal maiale! Quante volte devi ripetere un blocco?
      2-3 Maze sq6_instruction: 'Puoi sostituire la precedente risposta con solo due blocchi? (Suggerimento: Crea un ciclo usando il blocco "ripeti n volte".)'
      2-3 Maze sq7_instruction: "Portami dall'intruso verde usando solo tre blocchi."
      2-3 Maze sq8_instruction: |-
        Portami dal maiale! (Dov'è quel blocco "Ripeti n volte" quando ne ho bisogno?)
      2-3 Maze sq9_instruction: Crea dei cicli per raggiungere il maiale usando meno blocchi.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: "Aiuta l'uccellino a catturare il maialino cattivo muovendosi in avanti"
      4-5 Artist 1_instruction: Aiutami a disegnare il quadrato. (Ogni linea è lunga 300 pixel)
      4-5 Artist 10_instruction: 'Premi "Esegui" per provare il codice. Poi, ripetilo abbastanza volte per completare il disegno. I colori saranno diversi ogni volta.'
      4-5 Artist 11_instruction: Completa le linee verdi. Le linee sono lunghe 300 pixel e distanziate di 15 pixel.
      4-5 Artist 2_instruction: Riesci a ripetere questo codice per completare il quadrato?
      4-5 Artist 3.5_instruction: 'Cerca di immaginare cosa succede se si esegue questo codice (o premi "Esegui" per verificarlo). Dopo, ripetilo una quantità di volte sufficiente a completare il disegno. I colori saranno diversi ogni volta.'
      4-5 Artist 3_instruction: Questa aiuola rettangolare ha un perimetro di 600 pixel. Il lato lungo ha una lunghezza di 200. Disegna il rettangolo.
      4-5 Artist 4_instruction: 'Quanti gradi ci sono in un cerchio?  Inserisci questo valore nel blocco "ripeti ... volte" in modo da creare un cerchio tutto colorato.'
      4-5 Artist 5_instruction: Che angolo devi usare in questo esercizio?
      4-5 Artist 6_instruction: 'Questo triangolo è equilatero: tutti gli angoli sono quindi di 60 gradi. Ogni lato è lungo 200 pixel. Completa il disegno.'
      4-5 Artist 7_instruction: Questo triangolo rettangolo ha gli angoli di 30, 60 e 90 gradi. Il lato obliquo è lungo il doppio del lato verticale, che è alto 100 pixel. Completa il disegno.
      4-5 Artist 8_instruction: La linea di centrocampo in un campo di calcio è perpendicolare alle linee laterali. Questo campo ha un perimetro di 800 pixel ed è lungo 240 pixel. Quanto è lunga la linea di centrocampo? Disegnare i bordi del campo e la linea di centrocampo.
      4-5 Artist 9_instruction: "Disegna l'altra metà in modo che il disegno sia simmetrico. I triangoli sono equilateri e con un lato di 50 pixel."
      4-5 Artist Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa un ciclo per disegnare il triangolo equilatero. Ogni lato è lungo 300 pixel.'
      4-5 Artist For Loops 1_instruction: Metti i numeri da 1 a 10 nei blocchi larghi ed esegui il codice.
      4-5 Artist For Loops 11_instruction: 'Completa il blocco "for" in modo che conti 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Cosa succede se inverti i numeri di "from" con quelli di "to"? Completa il blocco "for" così che conti 200, 180, 160, 140, 120... 0.'
      4-5 Artist For Loops 13_instruction: |-
        Questo disegno è iniziato senza un ciclo "for" ed impiega troppi blocchi! Usa un blocco "for" per completare la spirale. Suggerimento: la lunghezza dell'ultima linea è di 250 pixel.
      4-5 Artist For Loops 14_instruction: |-
        Qualcuno ha iniziato il codice, ma poi si è accorto che ci deve essere un modo più veloce! Usa un blocco "per" per sostituire i blocchi e completare la spirale triangolare. (Aiuto: la lunghezza dell'ultima linea è di 300 pixel.
      4-5 Artist For Loops 15_instruction: |-
        Qualcuno ha lanciato il codice, ma poi ha realizzato che ci deve essere un modo più veloce! Usa il blocco "for" per sostituire i blocchi e completa la spirale esagonale. (Suggerimento: la lunghezza dell'ultima linea è 200 pixel.)
      4-5 Artist For Loops 3_instruction: 'Come possiamo contare da 1 a 50? Modifica il blocco "for".'
      4-5 Artist For Loops 4_instruction: 'Completa il blocco "for" così che conti da 1 a 10 a passi di 1.'
      4-5 Artist For Loops 6_instruction: 'Disegna dei quadrati con lato di 50, 60, 70, 80, e 90 pixel. Devi usare la funzione "disegna un quadrato" 5 volte.'
      4-5 Artist For Loops 7_instruction: |-
        Disegna lo stesso quadrato ma usa il blocco "conta con" per cambiare le dimensioni. Posiziona il blocco "contatore" nella funzione "disegna un quadrato". Suggerimento: E' nella categoria Variabili.
      4-5 Artist For Loops 8_instruction: |-
        Puoi completare il programma ponendo i blocchi all'interno di un blocco "for" che conta da 10 a 200 a passi di 10? Puoi trovare il blocco "for" nella categoria Loop.
      4-5 Artist For Loops 9_instruction: 'Questi cerchi hanno dimensione di 5, 10, 15, 20, 25, 30 e 35. Disegna i cerchi utilizzando un blocco "for".'
      4-5 Artist Free Draw 1_instruction: "Disegna liberamente!  Disegna qualunque cosa ti venga l'ispirazione di creare."
      4-5 Artist Functions 1_instruction: Usa un ciclo ipetuto per disegnare questo triangolo.
      4-5 Artist Functions 10a_instruction: |-
        Posiziona questo codice nella funzione "disegna un fiocco di neve" e sostituisci il 50 con il parametro 'dimensione'. La funzione è già richiamata per creare un fiocco di neve di 100 pixel.
      4-5 Artist Functions 10b_instruction: "Usa la funzione 'disegna un fiocco di neve' per creare fiocchi di varie misure. Suggerimento: il primo fiocco è lungo 25 e ogni fiocco è grande il doppio del precedente."
      4-5 Artist Functions 11_instruction: 'Questa funzione "disegna un esagono" usa la funzione " disegna un triangolo". Completa la funzione esagono. (Suggerimento: Un esagono ha 6 facce uguali di 100 pixel)'
      4-5 Artist Functions 12_instruction: "Completa la funzione 'disegna le onde'. Ogni onda è composta da un'onda Alta e da un'onda Bassa. Suggerimento: Disegna 5 onde blu."
      4-5 Artist Functions 13 Free play_instruction: |
        Qui ci sono alcune funzioni per
        disegnare pianeti, stelle, razzi, e robot. Usali nel modo che preferisci per creare
        immagini che puoi condividere con i tuoi amici.
      4-5 Artist Functions 14 Free play_instruction: 'Qui, ti abbiamo fornito di diverse funzioni. usale nel modo che preferisci in uno o più cicli per creare immagini che puoi condividere con i tuoi amici. Clicca "Esegui" per vedere un esempio.'
      4-5 Artist Functions 15 Assessment_instruction: 'Questo è un esercizio di verifica -- Usa la funzione "disegna un quadrato" per creare i quadrati. I quadrati hanno i lati di 50, 100 e 150 pixel.'
      4-5 Artist Functions 2a_instruction: 'Ora inserisci questi blocchi in una nuova funzione chiamata "disegna un triangolo piccolo" e richiamala.'
      4-5 Artist Functions 2b_instruction: 'Ora crea una funzione chiamata "disegna un triangolo piccolo" usando i blocchi assegnati.'
      4-5 Artist Functions 3_instruction: 'Ora crea le funzioni "disegna un triangolo medio" e "disegna un triangolo grande". La funzione "disegna un triangolo piccolo" è già stata creata per voi. I triangoli hanno i lati lunghi 50 (piccoli), 100 (medi) e 150 (grandi).'
      4-5 Artist Functions 4_instruction: 'Questa nuova funzione "disegna un triangolo" ha un parametro e può essere utilizzata per le tre funzioni precedenti. Disegna gli stessi triangoli usando questa nuova funzione.'
      4-5 Artist Functions 5_instruction: 'Riesci a modificare la funzione "disegna un triangolo" nella funzione "disegna un quadrato" per cambiare il disegno?'
      4-5 Artist Functions 6_instruction: 'Usa le funzioni "disegna un triangolo" e "disegna un quadrato" per disegnare una casa. (Suggerimento: I lati del quadrato sono di 200 pixel)'
      4-5 Artist Functions 6b_instruction: 'Usa le funzioni disegna un quadrato e un triangolo insieme con gli altri blocchi per creare una casa aggiungendo la funzione "disegna una casa" e lanciandola.'
      4-5 Artist Functions 7_instruction: 'Usa la funzione "disegna una casa" per costruire due case di 100 e 50 pixel. Le due case sono separate da 50 pixel.'
      4-5 Artist Functions 8_instruction: 'La funzione "disegna un fiore" ha un parametro che determina la lunghezza dello stelo. Impostalo a 200 e guarda cosa succede.'
      4-5 Artist Functions 9_instruction: "Disegna questi 3 fiori. L'altezza del primo è 100 e il successivo sempre 50 pixel più alto del precedente. I fiori sono distanti 100 pixel tra di loro."
      4-5 Artist Patterns 1_instruction: Riesci a disegnare questo quadrato usando un ciclo? Ogni lato è lungo 20 pixel.
      4-5 Artist Patterns 10_instruction: "Questo codice disegna due righe di esagoni. Per disegnare tutto il favo devi eseguire l'intero codice 4 volte. Suggerimento: per essere sicuro che l'artista non disegni fuori dallo schermo, assicurati di tornare indietro di 120 pixel nel ciclo più esterno."
      4-5 Artist Patterns 11_instruction: 'Quante volte devi eseguire questo codice per disegnare un semicerchio? Suggerimento: se in un cerchio ci sono 360 gradi e ogni ciclo avanza di 3 gradi, quante volte dovresti ripetere il ciclo per disegnare un cerchio intero?'
      4-5 Artist Patterns 12_instruction: "Che cosa succede se copi il ciclo che ti è stato dato, ma fai girare l'artista a sinistra invece che a destra? Usando un ciclo annidato riesci a disegnare quest'onda?"
      4-5 Artist Patterns 13_instruction: 'Per creare questa cornice devi ripetere 4 volte tutto il codice che trovi già pronto. Attento agli spigoli, non basta girare di 90 gradi! Suggerimento: se, avanzando di 3 gradi per ciclo, hai bisogno di 60 ripetizioni per disegnare mezzo cerchio, quale di questi blocchi di codice ti permette di disegnare un quarto di cerchio per gli spigoli?'
      4-5 Artist Patterns 2_instruction: "Se posizioni il ciclo per disegnare il quadrato all'interno di un altro ciclo, ottieni un ciclo annidato. Cosa devi aggiungere al ciclo più esterno per essere sicuro che tutti i 15 quadrati siano allineati l'uno all'altro?"
      4-5 Artist Patterns 3_instruction: "Andiamo ancora più a fondo! Abbiamo annidato il ciclo, che ti consente di disegnare una riga della griglia, all'interno di un altro ciclo. Per completare la griglia, devi far tornare l'artista indietro in modo tale da disegnare le righe successive. Quale sequenza di blocchi devi  posizionare alla fine del ciclo più esterno per disegnare l'intera griglia?"
      4-5 Artist Patterns 4_instruction: 'Questo rombo ha tutti i lati di 50 pixel, e due tipi di angoli: da 120 e da 60 gradi. Usa un ciclo per disegnarlo.'
      4-5 Artist Patterns 5.5_instruction: Quante volte devi ripetere questo blocco per disegnare un intero reticolo di diamanti?
      4-5 Artist Patterns 5_instruction: "Ripetiamo il disegno 6 volte per ottenere una fila di rombi. Fai attenzione! Il codice per disegnare il rombo viene ora ripetuto 3 volte invece di 2 - secondo te qual'è il motivo?"
      4-5 Artist Patterns 6_instruction: "Quante volte devi ripetere questo codice per disegnare l'intera griglia di rombi?"
      4-5 Artist Patterns 7_instruction: |-
        Modifichiamo il codice dell'esercizio precedente per disegnare una figura più complessa. Osserva il modo in cui si sovrappongono i rombi in questa figura e prova a dimezzare il primo "salta all'indietro" impostando 50 al posto di 100.  Di quanto deve essere modificato il secondo "salta all'indietro" per completare la figura?
      4-5 Artist Patterns 8_instruction: Disegna un esagono con lati di 40 pixel e angoli di 60 gradi usando un ciclo.
      4-5 Artist Patterns 9.5_instruction: "Per disegnare due righe di esagoni devi inserire questo codice all'interno di un altro ciclo.  Osserva il modo in cui la seconda riga viene spostata verso destra."
      4-5 Artist Patterns 9_instruction: 'Ripetiamo il disegno 3 volte per ottenere una fila di esagoni. Suggerimento: gli estremi, sinistro e destro, di ciascun esagono distano 80 pixel.'
      4-5 Artist Patterns Free Play_instruction: 'Tempo di giocare: prova a fare un disegno tutto tuo!'
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: "L'ape non può sapere se dietro la nuvola c'è un fiore oppure un favo. Può raccogliere il nettare solo da un fiore, quindi controlla prima se c'è un fiore oppure un favo!"
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "Adesso l'ape vuole solo del nettare. Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla in modo da raccogliere il nettare solo quando ci sono fiori."
      4-5 Bee Conditionals 3_instruction: "Ora l'ape vuole solo fare il miele. Quindi controlla, in modo che l'ape faccia il miele solo quando ci sono favi."
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |-
        L'oggetto nascosto può essere un fiore oppure un favo. Usa il blocco "se-altrimenti" per raccogliere il nettare "se" si tratta di un fiore, "altrimenti" per fare il miele (dato che, in questo caso, si tratta sicuramente di un favo).
      4-5 Bee Conditionals 5_instruction: 'Potrebbe esserci un fiore oppure un favo dietro quelle nuvole. Usa un blocco "se-altrimenti" per raccogliere il nettare "se" si tratta di un fiore, "altrimenti" per fare il miele (dato che, in questo caso, si tratta sicuramente di un favo).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha!
        
        In questo esercizio un blocco "se-altrimenti" viene combinato con un altro blocco "se-altrimenti" per creare un blocco con tre ramificazioni: "se", "altrimenti-se" , "altrimenti". Prova a completare il programma in modo tale da raccogliere tutto il nettare.
      4-5 Bee Conditionals 7_instruction: 'Ricordati che un fiore viola può avere 1, 2, 3 dosi di nettare. Completa la funzione "controlla fiore viola" ed usala per raccogliere tutto il nettare dai fiori.'
      4-5 Bee Conditionals 8_instruction: |-
        Scrivi una funzione "controlla fiore - fai miele". La tua funzione deve controllare quanto nettare c'è nel fiore viola e raccoglierlo TUTTO, poi andare avanti e fare UNA SOLA dose di miele.
      4-5 Bee Conditionals Assessment 1_instruction: 'Questo è un esercizio di verifica -- La funzione "raccogli il nettare o fai il miele" è sbagliata e incompleta. Correggila e completala per raccogliere tutto il nettare e fare il miele. Ricorda che i fiori viola possono avere 1, 2 o 3 dosi di nettare.'
      4-5 Bee Debugging 1_instruction: Questi blocchi sbagliati mi fanno perdere tempo. Riesci a correggerli?
      4-5 Bee Debugging 10_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 11_instruction: Stai effettuando ogni ripetizione il numero di volte corretto?
      4-5 Bee Debugging 2_instruction: "Aiuta l'ape a raccogliere tutto il nettare dai fiori e a produrre tutto il miele."
      4-5 Bee Debugging 3_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 4_instruction: Questa sequenza di blocchi è sbagliata. Qual è lo schema di percorso corretto da ripetere?
      4-5 Bee Debugging 5_instruction: "C'è qualcosa che non va..."
      4-5 Bee Debugging 6_instruction: Il fiore viola ha una quantità imprecisata di nettare. Correggi la sequenza di blocchi in modo da raccogliere tutto il nettare dal fiore.
      4-5 Bee Debugging 7_instruction: Al codice della funzione che trovi già pronto manca qualcosa...
      4-5 Bee Debugging 8_instruction: Il codice della funzione che trovi già pronto è corretto, ma la funzione non viene usata nel modo giusto.
      4-5 Bee Debugging 9_instruction: "Perché l'ape non riesce a produrre tutto il miele?"
      4-5 Bee Debugging Assessment 1_instruction: 'Questo è un esercizio di verifica -- Correggi il codice.'
      4-5 Bee Nested Loops 1_instruction: Usa un ciclo per raccogliere tutto il nettare.
      4-5 Bee Nested Loops 2_instruction: Raccogli tutto il nettare da ogni fiore. Usa un ciclo annidato.
      4-5 Bee Nested Loops 3_instruction: "Raccogli tutto il nettare inserendo il codice che trovi già pronto (che contiene un ciclo) all'interno di un ciclo (ciclo annidato)."
      4-5 Bee Nested Loops 4_instruction: Raccogli tutto il nettare da ogni fiore e fai il miele in ogni favo. Usa un ciclo annidato.
      4-5 Bee Nested Loops 5_instruction: Usa un ciclo annidato per raccogliere tutto il nettare.
      4-5 Bee Nested Loops 6_instruction: Raccogli tutto il nettare.
      4-5 Bee Nested Loops 7_instruction: "Inserisci all'interno di un altro ciclo il codice che trovi già pronto, così da creare un ciclo annidato e raccogliere tutto il nettare dai fiori."
      4-5 Bee Nested Loops 8_instruction: 'Raccogli tutto il nettare da questi fiori utilizzando un ciclo WHILE nidificato. Sostituisci il blocco "Ripeti n Volte" interno con un blocco WHILE. '
      4-5 Bee Nested Loops 9_instruction: |-
        Raccogli tutto il nettare da questi fiori inserendo un ciclo "mentre" all'interno di un ciclo "ripeti".
      4-5 Bee Nested Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa i cicli per raccogliere tutto il nettare e trasformarlo in miele.'
      4-5 Bee Nested Loops Rows_instruction: Raccogli tutto il nettare da queste file di fiori! Usa i cicli annidati.
      4-5 Maze 1 (copy 1)_instruction: Caro umano, me zombie. Devo... arrivare... girasole.
      4-5 Maze 1_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.
        
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 10_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      4-5 Maze 11_instruction: Puoi arrivare al girasole usando solo sei blocchi?
      4-5 Maze 12_instruction: Questo esercizio è leggermente diverso. Puoi arrivare al girasole usando solo sei blocchi?
      4-5 Maze 13_instruction: Fammi arrivare al maialino!
      4-5 Maze 14_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti fino a che".'
      4-5 Maze 2 (copy 1)_instruction: Fai arrivare lo zombie fino al girasole, ma evita la tagliola!
      4-5 Maze 2_instruction: Fai arrivare lo zombie fino al girasole, ma evita la tagliola!
      4-5 Maze 3 (copy 1)_instruction: Devo... arrivare... girasole.
      4-5 Maze 3_instruction: Devo... arrivare... girasole.
      4-5 Maze 4 (copy 1)_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...
        
        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      4-5 Maze 4_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...
        
        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      4-5 Maze 5 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      4-5 Maze 5_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      4-5 Maze 6 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      4-5 Maze 6_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      4-5 Maze 7_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.
        
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 8_instruction: 'Usa il blocco "ripeti" per far arrivare lo zombie fino al girasole. (Evita le tagliole!)'
      4-5 Maze 9_instruction: |
        Crea un ciclo usando il nuovo blocco "ripeti fino a che".
        
        Esso mi farà "ripetere" le azioni "fino a che" raggiungo il girasole.
      4-5 Maze Assessment 1_instruction: 'Questo è un esercizio di verifica -- Fammi arrivare al girasole.'
      4-5 Maze Conditionals 1_instruction: 'Usa il blocco "ripeti fino a che" per far arrivare lo zombie fino al girasole.'
      4-5 Maze Conditionals 10_instruction: Riesci ad aggiungere solo 3 blocchi per farmi uscire da un labirinto più complesso? Se lo fai correttamente, riuscirò a camminare lungo un percorso tortuoso di qualsiasi lunghezza.
      4-5 Maze Conditionals 2_instruction: 'Usa il blocco "ripeti fino a che" per far arrivare lo zombie fino al girasole.'
      4-5 Maze Conditionals 3_instruction: |-
        Usa il blocco "se c'è strada" per decidere quando farmi svoltare. Attenzione: in questo caso devi aggiungere solo un blocco! Osserva, però, il modo in cui abbiamo impostato questo programma in modo tale che, la prossima volta, tu riesca a farlo tutto da solo.
      4-5 Maze Conditionals 4_instruction: |-
        Ok, questo è quasi come l'esercizio precedente, ma devi ricordarti come hai usato insieme i blocchi "se c'è strada" e "ripeti fino a che".
      4-5 Maze Conditionals 5_instruction: |
        Me ... volere ... girasole!
        
        Usa un blocco "se c'è strada" per farmi arrivare là con il minor numero possibile di blocchi.
      4-5 Maze Conditionals 6_instruction: |
        Me ... volere ... girasole!
        
        Usa un blocco "se c'è strada" per farmi arrivare là con il minor numero possibile di blocchi.
      4-5 Maze Conditionals 7_instruction: 'Ok, esercitiamoci di nuovo per far pratica: questo esercizio non è molto diverso, ma stai attento alle piante carnivore!'
      4-5 Maze Conditionals 8_instruction: |-
        Il blocco "se-altrimenti" controlla una condizione: SE è vera fa una cosa ALTRIMENTI ne fa un'altra. Prova ad usare questo nuovo blocco per farmi arrivare al girasole.
      4-5 Maze Conditionals 9_instruction: 'Ancora un esercizio con il blocco "se-altrimenti": riesci a risolverlo correttamente al primo tentativo?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa i blocchi "ripeti fino a che" e "se-altrimenti" per arrivare al girasole usando meno blocchi possibile.'
      4-5 Nested Loops 1_instruction: 'Completa il codice per disegnare questi triangoli. Le istruzioni per disegnare il primo sono già pronte. Suggerimento: il disegno dei 3 triangoli richiede in totale una rotazione complessiva di 360 gradi.'
      4-5 Nested Loops 10_instruction: "Disegna l'ultima fila di stelle su questa bandiera inserendo i blocchi forniti in un ciclo. Le stelle sono distanti 50 pixels, ma ricorda che le stelle sono larghe 30 pixels."
      4-5 Nested Loops 11_instruction: Riesci a disegnare i 10 quadrati di questo marciapiede utilizzando un ciclo annidato? Ogni quadrato è largo 30 pixel.
      4-5 Nested Loops 12_instruction: Riesci a disegnare questi 36 triangoli utilizzando un ciclo annidato?
      4-5 Nested Loops 2_instruction: |-
        Ora inserisci le istruzioni già presenti (che contengono un ciclo) all'interno di un altro ciclo, in modo da disegnare 10 triangoli. Un ciclo inserito all'interno di un altro ciclo viene detto "ciclo annidato". Suggerimento: il disegno dei 10 triangoli richiede in totale una rotazione complessiva di 360 gradi.
      4-5 Nested Loops 3_instruction: 'Disegna un sole inserendo in un ciclo il codice (che è un ciclo) che trovi già pronto. Un ciclo inserito in un altro ciclo si chiama "ciclo annidato".'
      4-5 Nested Loops 5_instruction: Inserisci in un ciclo il codice che trovi già pronto, così da disegnare un mulino a vento.
      4-5 Nested Loops 6_instruction: Riesci a disegnare un esagono inserendo in un ciclo le istruzioni per disegnare un triangolo?
      4-5 Nested Loops 7_instruction: 'Ripeti 10 volte la figura disegnata dal codice che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento: quanto fa 360 diviso 10?)'
      4-5 Nested Loops 8_instruction: 'Ripeti 6 volte la figura disegnata dal codice che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento: quanto fa 360 diviso 6?)'
      4-5 Nested Loops 9_instruction: Finisci di disegnare i denti del coccodrillo!
      4-5 Nested Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa un ciclo annidato per completare il disegno.'
      4-5 While Loops 1_instruction: 'Spostami verso la buca e riempila con 2 palate di terra, usando il blocco "riempi 1".'
      4-5 While Loops 2_instruction: 'Spostami verso il mucchio di terra e rimuovilo con 5 palate di terra, usando il blocco "rimuovi 1".'
      4-5 While Loops 3_instruction: 'Spostami verso il mucchio di terra e rimuovilo del tutto, poi spostami verso la buca e riempila completamente. Suggerimento: Usa il minor numero di blocchi possibile.'
      4-5 While Loops 4_instruction: 'Wow, ho trovato una buca davvero profonda! Non so quante palate di terra saranno necessarie per riempirla completamente. Riesci a scrivere un programma che la riempie fino a quando il terreno è livellato? Suggerimento: usa le opzioni nel menu a discesa del blocco "mentre".'
      4-5 While Loops 5_instruction: Wow, ora ci sono due buche davvero profonde! Riesci a scrivere un programma che le riempie entrambe fino a quando il terreno è livellato?
      4-5 While Loops 6_instruction: "Wow, c'è un grande mucchio di terra! Riesci a scrivere un programma che lo rimuove completamente fino a quando il terreno è livellato?"
      4-5 While Loops 7_instruction: Wow, ora ci sono 3 grandi mucchi di terra! Riesci a scrivere un programma che li rimuove completamente fino a quando il terreno è livellato?
      4-5 While Loops 8_instruction: 'Ci sono una buca davvero profonda e un grande mucchio di terra. Quante palate di terra sono necessarie per livellare il terreno? Suggerimento: Usa il blocco "mentre" per entrambi.'
      4-5 While Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Ci sono molte buche e mucchi di terra. Aiutami a riempire le buche e a rimuovere i mucchi di terra per rendere livellato il terreno.'
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      App Lab test_instruction: test
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa un ciclo annidato per completare il disegno.'
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click Finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Targer should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a number return that number
        to the power of 3. Make sure to write two example cases! When you're done,
        use your new function to calculate 7 cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction rocket-height that states it has a range of Number, domain of Number,\nand should return the height of the rocket traveling at 15 m/s after a given\nnumber of seconds. Let's write an example case now for the height of the\nrocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: 'Questo è un esercizio di verifica -- Usa il blocco "ripeti" per raccogliere tutto il nettare.'
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando 5 blocchi?
      Course 4 2_instruction: "Adesso l'ape vuole solo del nettare. Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla in modo da raccogliere il nettare solo quando ci sono fiori."
      Course 4 Artist 1_instruction: Aiutami a disegnare un quadrato. (Ogni linea è lunga 200 pixel)
      Course 4 Artist 10_instruction: 'Tempo di giocare: divertiti a disegnare qualunque cosa ti piaccia.'
      Course 4 Artist 11_instruction: 'Ora prova tu!  Ecco un disegno che utilizza solo i blocchi che ti sono stati già mostrati.  Puoi capire come ricrearlo senza altre informazioni?  Suggerimento: sentitevi liberi di procedere per prove ed errori. Non ci si aspetta certo di farlo perfetto al primo tentativo.'
      Course 4 Artist 12_instruction: "Free Play Inspiration: ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se questa immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo. \r \n\n\r \nVuoi sapere come è stato realizzato il nostro modello di ispirazione? Visita il link https://studio.code.org/c/105671120/edit per scoprirlo."
      Course 4 Artist 13_instruction: 'Giochi ancora?  Ecco una tela bianca dove è possibile disegnare qualsiasi cosa desideriate!'
      Course 4 Artist 2_instruction: Riesci ad inserire questo codice in un ciclo in modo da contornare di grigio il quadrato?
      Course 4 Artist 20_instruction: 'Giochi ancora?  Ecco una tela bianca dove è possibile creare qualsiasi cosa desideriate!'
      Course 4 Artist 3_instruction: 'Cerca di immaginare cosa succede se si esegue questo codice (o premi "Esegui" per verificarlo). Dopo, ripetilo una quantità di volte sufficiente a completare il disegno. I colori saranno diversi ogni volta.'
      Course 4 Artist 4_instruction: 'Quanti gradi ci sono in un cerchio?  Inserisci questo valore nel blocco "ripeti ... volte" in modo da creare un cerchio tutto colorato.'
      Course 4 Artist 5_instruction: "Disegna l'altra metà di questo disegno in modo che sia simmetrica. I triangoli sono equilateri con i lati di 50 pixel. Suggerimento: potrebbe essere necessario eseguire il codice più volte per capire tutti i blocchi che devono essere aggiunti."
      Course 4 Artist 6_instruction: 'Completa il codice per disegnare i triangoli. Suggerimento: 3 triangoli in una rotazione di 360 gradi.'
      Course 4 Artist 7_instruction: 'Ora nidifica questo ciclo in un altro per disegnare 10 triangoli. Questa operazione è chiamata ciclo nidificato. Suggerimento: i 10 triangoli formano una rotazione di 360 gradi.  '
      Course 4 Artist 8_instruction: "Disegna il Sole inserendo l'intero blocco di codice in un ciclo e ripetendolo 12 volte."
      Course 4 Artist 8a_instruction: "Ricordi questa forma? Ora te la faremo costruire senza darti alcun blocco per iniziare! \r Suggerimento: ci sono 3 triangoli all'interno la rotazione di 360 gradi... quante volte ci sta il 3 in 360?"
      Course 4 Artist 9_instruction: "Ripeti 10 volte la figura disegnata dal codice che trovi già pronto e assicurati di ruotare un po' tra una figura e l'altra. Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento: quanto fa 360 diviso 10?)"
      Course 4 Artist Binary 1_instruction: "Ecco una funzione che riceve una stringa binaria, cioè fatta di 1 e 0, e istruisce l'artista su come muoversi da sinistra a destra e dall'alto al basso riempendo i quadratini quando incontra un 1 e ignorandoli quando invece incontra uno 0. Esegui il codice per vedere come l'artista usa gli elementi binari 1 e 0 per disegnare la figura."
      Course 4 Artist Binary 2_instruction: Quale di queste stringhe binarie puoi ripetere 8 volte per disegnare questa immagine?
      Course 4 Artist Binary 3_instruction: Riesci a disegnare questo motivo ripetendo una stringa binaria a 3 cifre?
      Course 4 Artist Binary 4_instruction: Ogni stringa binaria rappresenta una riga di questo disegno. Riesci a spostarli in modo da disegnare una faccia allegra invece che triste?
      Course 4 Artist Binary 5_instruction: Quale stringa binaria di 6 cifre, ripetuta 11 volte, serve per disegnare questa immagine?
      Course 4 Artist Binary 6_instruction: Quale è la più piccola stringa binaria che puoi ripetere per disegnare questa immagine?
      Course 4 Artist Binary 7_instruction: Completa il disegno.
      Course 4 Artist Binary Free Play 2_instruction: 'Spazio Libero.  Ecco un spazio con risoluzione maggiore su cui disegnare -  16 bits x 16 bits!'
      Course 4 Artist Binary Free Play_instruction: 'Spazio Libero: Disegna qualsiasi cosa ti piaccia con i numeri binari!'
      Course 4 Artist For  Functions 10_instruction: 'Facciamo un passo avanti, Riesci a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!'
      Course 4 Artist For  Functions 11_instruction: 'Facciamo un passo avanti, Riesci a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!'
      Course 4 Artist For Loops 1_instruction: 'Disegna questo triangolo che ha il lato di 50 pixels. Suggerimento: usa il blocco RIPETI.'
      Course 4 Artist For Loops 10_instruction: Spazio Libero! Divertiti disegnando quello che vuoi con i blocchi che hai imparato ad usare
      Course 4 Artist For Loops 11_instruction: 'Ti ricordi quando abbiamo usato una variabile per controllare il numero dei lati di un poligono? La figura di questo esercizio inizia con un triangolo ed aggiunge un lato per volta fino a che arriva a disegnare un decagono (10 lati). Ogni lato dovrebbe essere lungo 100 pixel. Nota: 360 diviso il numero dei lati del poligono è il numero di gradi di cui devi girare.'
      Course 4 Artist For Loops 11a_instruction: "Mettiamo ora tutto insieme!  Usando le conoscenze che hai acquisito sui cicli for (for loop) e sul contatore, crea questo disegno dove \nogni figura ha due lati in più della precedente.  Accertati che ogni lato sia \n10 volte più lungo del numero di lati del poligono.\r\n\r\nUna piccola porzione\ndel codice necessario è già stata predisposta."
      Course 4 Artist For Loops 12_instruction: 'Andava piuttosto bene, ma adesso vorrei disegnare ogni forma vicino alla precedente. Questa volta ogni lato è di 20 pixel. Usa un blocco "salta" per saltare avanti di 40 pixel dopo ogni forma.'
      Course 4 Artist For Loops 13_instruction: 'Hmmm, queste forme stanno diventando sempre più grandi! Non avevamo già risolto questo problema usando le variabili? Come possiamo usare la variabile "contatore" per rendere i lati più piccoli man mano che ce ne sono sempre di più? Invece di spostarti in avanti di una quantità sempre fissa, prova a spostarti di una quantità di pixel pari a  (100 / contatore).'
      Course 4 Artist For Loops 14_instruction: "Se ruoti un po' di più o di meno di quanto solitamente fai, puoi creare un effetto diverso. Prova a ruotare di 89 gradi per creare una spirare quadrata avvitata."
      Course 4 Artist For Loops 15_instruction: 'Spazio Libero: Prova a fare alcuni disegni usando il ciclo FOR. Abbiamo aggiutno alcune variabili generiche che tu puoi utilizzare.'
      Course 4 Artist For Loops 2_instruction: |-
        Ho inserito il codice per disegnare un triangolo in un CICLO che conta da 50 a 100 con passo 10. Guarda come ho costruito l'algoritmo, poi, quando hai compreso come funziona, clicca su "Run" per vederlo in azione. 
      Course 4 Artist For Loops 3_instruction: Il triangolo più piccolo ha il lato di 20 pixels, il triangolo più grande ha il lato di 200 pixels ed ogni triangolo è 20 pixels più grande del precedente. Modifica il ciclo FOR per disegnare questi triangoli.
      Course 4 Artist For Loops 4_instruction: "Usa il ciclo FOR per disegnare questi quadrati. Il primo ha il lato di 50 pixels e l'ultimo ha il lato di 300 pixels, ed il lato di ogni quadrato è 25 pixels maggiore del precedente. L'algoritmo è quasi completo - manca solo un blocco, quale è?"
      Course 4 Artist For Loops 5_instruction: "Ottimo lavoro sull'ultimo puzzle!, Usiamo di nuovo il blocco con la variabile COUNTER per disegnare questa immagine. "
      Course 4 Artist For Loops 6_instruction: Spazio Libero! Prova ad usare un ciclo FOR per disegnare un modello di forma crescente a piacere.
      Course 4 Artist For Loops 7_instruction: Cosa succede se rimouvi il blocco RIPETI 3 da questo algoritmo, mantenendo i blocchi MUOVI e RUOTA nel ciclo RIPETI? In questo triangolo a spirale ogni lato è 20 pixels più lungo del precedente.
      Course 4 Artist For Loops 8_instruction: La linea più piccola di questo quadrato è 10 pixels, la linea più grande è 200 pixels ed ogni linea è 10 pixels più lung adella precedente. Riesci ad inserire dei blocchi per completare questo bel disegno?
      Course 4 Artist For Loops 8a_instruction: La linea più piccola di questo quadrato è 10 pixels, la linea più grande è 200 pixels ed ogni linea è 10 pixels più lung adella precedente. Riesci ad inserire dei blocchi per completare questo bel disegno?
      Course 4 Artist For Loops 9_instruction: Riesci a disegnare una spirale? Sposa in avanti da 1 a 75 pixels incrementando di 1 pixel ogni volta.
      Course 4 Artist For Loops Challenge_instruction: "Can you figure out how to\nuse all of the things you've learned to create this image?\r\n\r\nNeed a\nhint? Click here."
      Course 4 Artist For Loops inspire_instruction: "Free Play Inspiration: ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se questa immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo. \r \n\n\r \nVuoi sapere come è stato realizzato il nostro modello di ispirazione? Visita il link https://studio.code.org/c/106387604 per scoprirlo."
      Course 4 Artist Functions 1_instruction: Riesci a disegnare un quadrato con lato di 100 pixels, usando un CICLO?
      Course 4 Artist Functions 10_instruction: Quale blocco è necessario aggiungere per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 11_instruction: 'Controlla questo codice e disegna un cubo - Riesci ad inserirla nella funzione chiamata "Disegna un Cubo" (Draw a Cube)'
      Course 4 Artist Functions 12_instruction: Ripeti la funzione Quadrato per disegnare una linea
      Course 4 Artist Functions 13_instruction: 'Come puoi vedere, abbiamo una nuova funzione chiamata "Disegna una serie di quadrati".  Cerca di comprendere come è costruita. Clicca su ESEGUI per vederla in azione.'
      Course 4 Artist Functions 14_instruction: 'Grandissimo! Usa la tua nuova funzione "Disegna una serie di quadrati" per disegnare una forma quadrata. Ricorda che ogni quadrato ha il lato di 40 pixel.'
      Course 4 Artist Functions 15_instruction: |-
        Ora accelleriamo un po', riesci a disegnare una stella usando la funzione "disegna una serie di quadrati"? Buona fortuna! Suggerimento: potrebbe essere necessario ruotare di 144 gradi
      Course 4 Artist Functions 2_instruction: 'Sapresti disegnare 3 quadrati ciascuno distanziato di 20 pixels? Suggerimento: ogni quadrato è largo 100 pixels'
      Course 4 Artist Functions 3_instruction: "Riesci a disegnare questa immagine usando la funzione \"Disegna un Quadrato\"? Suggerimento: ogni quadrato è spostato di 120 pixels.\r"
      Course 4 Artist Functions 4_instruction: |-
        Sei pronto per creare la tua FUNZIONE? Clicca sul blocco FUNZIONI nella casetta degli attrezzi, dalle il nome "Disegna un Triangolo", quindi disegna un triangolo come hai fatto precedentemente con i blocchi RIPETI. Quindi clicca sul pulsante "Salva e Chiudi" posto nell'angolo in alto a destra. Suggerimento: crea un triangolo con lato di 100 pixels. Buona fortuna!
      Course 4 Artist Functions 5 OLD_instruction: 'Cerchiamo di usare le nostre due funzioni per disegnare una casa - Cosa deve essere modificato nel codice per disegnare correttamente la casa?'
      Course 4 Artist Functions 5_instruction: "Riesci a disegnare questa immagine usando la funzione \"Disegna un Quadrato\"? Suggerimento: ogni quadrato è spostato di 120 pixels.\r"
      Course 4 Artist Functions 6_instruction: Quale blocco è necessario aggiungere per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 7_instruction: 'Riesci a disegnare una serie di quadrati usando una funzione "quadrato"? Ogni quadrato ha il lato di 40 pixel.'
      Course 4 Artist Functions 8_instruction: |-
        Stai imparando ad usare le funzioni a blocchi? Modifica questo quadrato così che abbia le dimensioni di 200 pixel. Suggerimento: clicca su "modifica" per cambiare le dimensioni nell'editor della funzione "disegna un quadrato". Ricorda di cliccare su "salva e chiudi" per uscire dall'editor della funzione. 
      Course 4 Artist Functions 9_instruction: Vi abbiamo fornito la maggior parte del codice ncessario per creare una funzione. Tuttavia ci sembra ci sia qualcosa che manca. Riouscite a fare in modo che questa funzione sia completa?
      Course 4 Artist Inspire_instruction: "Free Play Inspiration: ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se questa immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo. \r\n\n\r \nVuoi sapere come è stato realizzato il nostro modello di ispirazione? Visita il link https://studio.code.org/c/105765376/edit per scoprirlo."
      Course 4 Artist Params 1_instruction: Modifichiamo ora una funzione che disegna un quadrato con lati di 50 pixel
      Course 4 Artist Params 10_instruction: |-
        Puoi chiamare funzioni dall'interno di altre funzioni! Usando la tua funzione "forma" come base, crea 3 forme di una casa, ognuna più larga di 20 pixel rispetto alla precedente, iniziando da una lunghezza di 50 pixel. Può essere utile utilizzare un ciclo contatore. 
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 'Usa la tua funzione "pinwheel" per disegnare ognuna delle forme. La lunghezza del lato per ogni immagine è 50.'
      Course 4 Artist Params 13_instruction: 'Freeplay: Qui ci sono le funzioni che hai scritto e alcune altre con cui puoi giocare. Disegna qualcosa di spettacolare!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Magnifico, puoi disegnare ognuno di questi triangoli con questa nuova funzione? Il primo è lungo 25 pixel, il secondo 50 e il terzo 75. '
      Course 4 Artist Params 4_instruction: "Potete aggiungere una nuova funzione denominata quadrato? La funzione dovrebbe anche prendere un parametro di lunghezza, proprio come per il triangolo. Questa volta disegnate 3 quadrati con lunghezza di 25, 50 e 75 pixel e che distano 100 pixel uno dall'altro."
      Course 4 Artist Params 5_instruction: |
        Usa ambedue le nuove funzioni per disegnare questa immagine. Per semplificare questa operazione usate un ciclo con un parametro "contatore".
        
      Course 4 Artist Params 6_instruction: |
        Modifichiamo questa funzione: "disegna una forma".
        Questa ha già un parametro "lunghezza". Ora modifichiamo la funzione per aggiungere anche un parametro "lati". Ricorda che l'angolo per una data forma è 360 diviso i lati che ha. Suggerimento: le lunghezze per ogni forma sono: per il trianogolo 100 pixel, per l'esagono 25 pixel e per il quadrato 50 pixel. 
      Course 4 Artist Params 7_instruction: |-
        Riesci a disegnare queste forme completando i "???". Il quadrato e il triangolo sono 100 pixel di dimensioni mentre l'esagono è di 75 pixel. 
      Course 4 Artist Params 8_instruction: |2
        Riesci a capire come disegnare questa
         forma? Ecco un suggerimento per creare una nuova forma con 6 lati chiamati un esagono.
        
      Course 4 Artist Params 9_instruction: |-
        Ti ricordi quando abbiamo usato il ciclo contatore ma abbiamo rimosso un ciclo dal suo interno? Divertiamoci ora e usiamo la funzione per disegnare una figura con i parametri "lati" e "lunghezza". Sei in grado di creare questa figura? Il contatore del quadrato deve essere  5/100/5, quello del triangolo 10/100/10 e quello dell'esagono 2/100/2.
      Course 4 Artist Var 9_instruction: |-
        Ecco l'algoritmo per disegnare un triangolo. Modificalo in modo da usare la vriabile "lati". Sostituite il numero 3 con la variabile "lati". Suggerimento: ricordatevi di usare il blocco "imposta i lati a".
      Course 4 Artist Vars 1_instruction: Mi aiutate a disegnare un triangolo? Ha i lati tutti da 100 pixel.
      Course 4 Artist Vars 10_instruction: |-
        Questo è un algoritmo che disegna un triangolo all'esterno di triangoli più piccoli. Modificatelo in modo che venga utilizzata la variabile "lati" disegnare ogni triangolo. Studiate il codice e ogni volta che vedete il numero 3, sostituitelo con la variabile "lati". Ricordatevi di utilizzare il blocco che imposta i lati.
      Course 4 Artist Vars 11_instruction: |-
        Questo è lo stesso algoritmo che abbiamo escogitato per l'ultimo puzzle. Quale vaòlore devi assegnare alla variabile "lati" per disegnare questa immagine fatta da quadrati?
      Course 4 Artist Vars 12_instruction: 'Imposta la variabile "lati" a 5. Più lati aggiungiamo a questa funzione più il modello complessivo diviene grande. Aggiungiamo una nuova variabile chiamata "lunghezza" e utilizziamola dove ci si deve muovere in avanti. Imposta la variabile "lunghezza" a 75 per questa figura.'
      Course 4 Artist Vars 13_instruction: |
        Più lati ha una forma, più piccolo deve essere ciascuno dei lati affinché l'intero disegno si possa adattare allo schermo. 
        Anziché impostare manualmente la variabile "lunghezza", usiamo la variabile "lati" e un blocco di matematica per impostare la "lunghezza". 
        Scegli l'equazione corretta dalla Toolbox per impostare la variabile "lunghezza" ed aggiornare la variabile "lati".
      Course 4 Artist Vars 14_instruction: "Giochiamo. Verifica ora come l'algoritmo sia nidificato all'interno di un altro ciclo. Esperimenta modificando i valori delle due variabili per disegnare accattivanti modelli."
      Course 4 Artist Vars 2_instruction: 'Invece di "sposta in avanti di 100," il blocco muovi fa ora riferimento alla variabile "lunghezza". Imposta la "lunghezza" a 150 per disegnare questo nuovo triangolo?'
      Course 4 Artist Vars 3_instruction: 'Il ciclo proposto disegna un quadrato, ma manca qualcosa. Correggi in modo che utilizzi la variabile "lunghezza" per capire quanto lungo deve essere ogni lato? '
      Course 4 Artist Vars 4_instruction: 'Ora voglio fare un rettangolo che sia due volte alto come è largo. Abbiamo una variabile denominata "larghezza" impostata a 100. Puoi utilizzare i blocchi di matematica per completare il codice?'
      Course 4 Artist Vars 5_instruction: 'Utilizzare la variabile "lati" per controllare quante volte questo ciclo debba essere eseguito.'
      Course 4 Artist Vars 6_instruction: |-
        Hmmm, nell'ultimo esercizio ho provato a impostare  la variabile "lati" a 4, ma ha disegnato ancora un triangolo. Riesci ad usare la variabile "lati" (insieme a un blocco matematico) per far sì che imposti la giusta quantità? Suggerimento: 360 diviso per il numero dei lati ti darà il numero di gradi da ruotare.
      Course 4 Artist Vars 7_instruction: 'Potete modificate la variabile "lati" per aiutarmi a disegnare questo esagono?'
      Course 4 Artist Vars 8_instruction: |
        Free Play: Esperimento con il numero di lati che ha questa forma. Riesci a modificare l'algoritmo affinché la dimensione complessiva della forma rimanga la stessa, indipendentemente dal numero dei lati? 
        Suggerimento: Potrebbe essere necessario utilizzare i blocchi di matematica (360 diviso per i "lati" in due posti questa volta) 
      Course 4 Artist Vars 9_instruction: 'Modificare questo algoritmo in modo che utilizzi la variabile "lati" invece di un numero fisso per disegnare un triangolo. Sostituisci il numero 3 con la variabile "lati" e utilizzare il blocco "imposta i lati".'
      Course 4 Bee 1_instruction: "L'ape non può sapere cosa si nasconde dietro la nuvola, potrebbe esserci un fiore oppure un favo. Se dietro la nuvola si nasconde un fiore, raccogli il nettare, ma fai attenzione a non raccogliere il nettare da un favo!"
      Course 4 Bee 2_instruction: Controllare ogni oggetto per vedere se sia un fiore. Se lo è, raccolgono il nettare... in caso contrario è possibile ignorarlo!
      Course 4 Bee 3_instruction: |-
        L'oggetto nascosto può essere un fiore oppure un favo. Usa il blocco "se-altrimenti" per raccogliere il nettare "se" si tratta di un fiore, "altrimenti" per fare il miele (dato che, in questo caso, si tratta sicuramente di un favo).
      Course 4 Bee 4_instruction: |
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha!
        
        In questo esercizio un blocco "se-altrimenti" viene combinato con un altro blocco "se-altrimenti" per creare un blocco con tre ramificazioni: "se", "altrimenti-se" , "altrimenti". Prova a completare il programma in modo tale da raccogliere tutto il nettare.
      Course 4 Bee 5_instruction: |
        Questo fiore viola può avere 3, 2 o 1 nettare. 
        Aggiungi un blocco if-else per creare un'istruzione if, else-if, else. 
        Completa la soluzione per raccogliere la quantità sconosciuta di nettare.
      Course 4 Bee 6_instruction: |
        Questo fiore viola può avere 3, 2 o 1 nettare. 
        Crea un'istruzione if, else-if, else per raccogliere la quantità sconosciuta di nettare.
      Course 4 Bee 7_instruction: Utilizzate tutto quanto avete imparato finora per raccogliere tutto il nettare. Il fiore viola può avere 3, 2 o 1 di nettare.
      Course 4 Bee For Loops 1_instruction: Usa un ciclo (loop) per raccogliere il nettare da ogni fiore.
      Course 4 Bee For Loops 10_instruction: "Se il ciclo è conto alla rovescia, l'incremento viene sottratto dalla variabile contatore a ogni ciclo. Quale dovrebbe essere l'incremento per raccogliere 9, poi 6 e poi 3 di nettare?"
      Course 4 Bee For Loops 11_instruction: "Che cosa è sbagliato con questo ciclo (loop)? Vedi se puoi risolvere il problema e fare in modo che l'ape raccolga tutto il nettare."
      Course 4 Bee For Loops 2_instruction: |-
        Ecco un nuovo tipo di ciclo, chiamato il ciclo "for". Questo particolare ciclo conta da 1 a 5 di 1 ed esegue il contenuto del ciclo ogni volta che viene eseguito. Aiutate l'ape a ottenere il nettare.
      Course 4 Bee For Loops 3_instruction: 'Potete risolvere questo puzzle utilizzando un ciclo "for" per contare da 1 a 3 di 1. Andiamo ora a prendere del nettare!'
      Course 4 Bee For Loops 4_instruction: Raccogliamo tutto il nettare da questi fiori. Mi chiedo se ci sia un modo più semplice per farlo...
      Course 4 Bee For Loops 5_instruction: |-
        L'uso dei cicli (loop) rende il tutto molto più facile! Utilizza la variabile "contatore" del ciclo per ripetere il blocco per prendere il nettare lo stesso numero di volte del ciclo. Ci sono un sacco di cicli. Tutto il codice necessario è disponibile, dai un'occhiata a come è stato messo insieme, quindi fai clic su Esegui per vedere come funziona. 
      Course 4 Bee For Loops 6_instruction: 'È inoltre possibile utilizzare un ciclo "for" per il conto alla rovescia. Provate a raccogliere il nettare con un conto alla rovescia da 5 a 1 di 1.'
      Course 4 Bee For Loops 7_instruction: 'Usa la variabile "contatore" del ciclo per controllare lo spostamento in senso orizzontale.'
      Course 4 Bee For Loops 8_instruction: È possibile utilizzare la variabile del ciclo per controllare il movimento e la raccolta di nettare?
      Course 4 Bee For Loops 9_instruction: "L'ultimo numero del ciclo indica l'incremento, e ogni volta che il ciclo viene eseguite la variabile contatore aumenta dell'incremento indicato. Provate a raccogliere questi fiori usando un valore 2 per l'incremento."
      Course 4 Bee Loops 5 NEW_instruction: "Metti tutti i blocchi all'interno di un ciclo per raccogliere il nettare da ogni fiore."
      Course 4 Bee Loops 5a NEW_instruction: "Utilizza ora un ciclo (loop) per aiutare l'ape a raccogliere tutto il nettare che trova sulla strada per il favo con il minor numero di blocchi possibile.  Arrivati, non dimenticate di fare il miele!"
      Course 4 Bee Params 1_instruction: 'Utilizza la funzione "ottieni 3 di nettare" che consnete di ruotare e muoversi per raccogliere il nettare e che alla fine riporta alla posizione originale. Scrivi una sequenza per raccogliere tutto il nettare utilizzando la funzione "ottieni 3 di nettare."'
      Course 4 Bee Params 2_instruction: 'Modifica la funzione di "ottini 3 di nettare" in modo da girare a destra invece che a sinistra per i fiori.'
      Course 4 Bee Params 3 (copy 1)_instruction: |-
        Ora ci sono fiori su entrambi i lati! E' possibile utilizzare un parametro in modo che la stessa funzione operi per i fiori su entrambi i lati. E' stata aggiunto un parametro denominato "direzione" alla funzione. Se il parametro "direzione" è uguale a 0 si gira a sinistra, se è 1 si gira a destra.
      Course 4 Bee Params 3_instruction: 'Ora ci sono fiori su entrambi i lati! Ho aggiunto un parametro denominato "direzione" alla funzione. Utilizzare le variabili di "sinistra" e "destra" per controllare la direzione. Riempire il resto della definizione della funzione e quindi fare clic su "Salva e Chiudi".'
      Course 4 Bee Params 4 (copy 1)_instruction: Provare a utilizzare la nuova funzione per raccogliere tutti i fiori. Ricordate, 0 = sinistra e 1 = destra.
      Course 4 Bee Params 4 backup_instruction: 'Non sarebbe bello se avessimo potuto raccogliere tutto il nettare con una singola funzione? Prova ad aggiungere un nuovo parametro alla funzione chiamata "nettari" per controllare la quantità di nettare da raccogliere. Probabilmente conviene rinominare anche la funzione!'
      Course 4 Bee Params 4_instruction: Provate a utilizzare la vostra nuova funzione per raccogliere tutti i fiori. Ricordatevi di usare le variabili sinistra e destra.
      Course 4 Bee Params 5_instruction: 'Partiamo da zero - sai creare una nuova funzione chiamata "raccogli 5 dosi di nettare" con un parametro di direzione?'
      Course 4 Bee Params 6 (copy 1)_instruction: Prova a utilizzare la nuova funzione per raccogliere tutto questo nettare.
      Course 4 Bee Params 6_instruction: 'Non sarebbe bello se avessimo potuto raccogliere tutto il nettare con una singola funzione? Prova ad aggiungere un nuovo parametro alla funzione chiamata "nettari" per controllare la quantità di nettare da raccogliere. Probabilmente conviene rinominare anche la funzione!'
      Course 4 Bee Params 7 (copy 1)_instruction: Prova a utilizzare la nuova funzione per raccogliere tutto questo nettare.
      Course 4 Bee Params 7_instruction: Provate a utilizzare la nuova funzione per raccogliere tutto il nettare.
      Course 4 Bee Params 8_instruction: "Oooh, ora c'è miele di cui occuparsi! Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il miele."
      Course 4 Bee Params Ex_instruction: Provate a utilizzare la nuova funzione per raccogliere tutto il nettare.
      Course 4 Binary 1_instruction: "Ecco una funzione che accetta una stringa binaria di 1 e di 0 e istruisce l'agricoltore per attivare il movimento da sinistra a destra, dall'alto verso il basso, accendendo i quadrati in cui il numero ha uno zero. Esegui il codice fornito per vedere come l'agricoltore usa i numeri binari per disegnare un'immagine."
      Course 4 Binary 2_instruction: 'Quale stringa binaria potresi ripetere 8 volte per disegnare questa immagine? Suggerimento: il numero "1" consente di riempire un buco.'
      Course 4 Binary 3_instruction: Potete disegnare questo modello ripetendo una singola stringa binaria?
      Course 4 Binary 5 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà questa immagine?
      Course 4 Binary 5_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà questa immagine?
      Course 4 Binary 6 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà questa immagine?
      Course 4 Binary 6_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà questa immagine?
      Course 4 Binary 7_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà questa immagine?
      Course 4 Binary 8_instruction: "Puoi completare la maggior parte di questa immagine impostando un ciclo con un numero binario a 5 bit - poi avrai bisogno di un altro numero a 4 bit per ottenere l'angolo in basso a destra."
      Course 4 Maze 1_instruction: "Fai arrivare l'uccellino arrabbiato (Angry Bird) fino al maialino!"
      Course 4 Maze 2_instruction: Evitare il TNT!
      Course 4 Maze 3_instruction: "Scrivi il codice per far arrivare l'uccellino arrabbiato (Angry Bird) fino al maialino!"
      Course 4 Maze 4_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...
        
        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      Course 4 Maze 5_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      Course 4 Maze 6_instruction: Prova a risolvere questo esercizio usando meno blocchi possibile.
      Course 4 Play Lab For Loops 2_instruction: Proviamo ora a contare i numeri dispari da 1 a 100.
      Course 4 Play Lab Params 1_instruction: 'Questa funzione chiamata "salto" consente al tuo personaggio principale di saltare di 100 pixel. Utilizzate la funzione di salto per raccogliere tutte le bandiere.'
      Course 4 Play Lab Params 10_instruction: |-
        Abbiamo aggiunto un'ultima funzione che puoi usare. Programma il tuo gioco per chiamare la funzione "su di un livello" se "punti_giocatore">10. Gioca e supera il livello 4 per passare al gioco successivo.
      Course 4 Play Lab Params 2_instruction: "Ora abbiamo bandiere/flag che sono troppo alte per il salto attuale! Usiamo entrambe le frecce \"su\" e \"giù\" in modo da avere salti di diverse altezze.  \r \r \nAbbiamo bisogno di aggiungere un parametro \"altezza\" alla funzione salto.  La freccia in su dovrebbe permettere al cane di fare un salto di 200 pixel e la freccia in giù un salto di soli 100 pixel. \r \r \nSuggerimento: sarà necessario cliccare \"modifica\" sulla funzione salto e aggiornarla in modo che utilizzi il parametro \"altezza\"."
      Course 4 Play Lab Params 3_instruction: 'Aggiungiamo un altro parametro alla funzione di salto in modo da poterla usare con altri attori. Ogni attore è rappresentato da un numero, a partire da uno. Modifica la funzione di "salto" in modo che la definizione includa il parametro "attore". '
      Course 4 Play Lab Params 4_instruction: |
        Ecco una funzione chiamata "pattuglia".
        Modificala per muovere il gatto in su di 400 pixel e poi in giù di 400 pixel.
      Course 4 Play Lab Params 5_instruction: |
        Compila il parametro di input "attore" in modo che si possa chiamare la funzione "ricognizione" per ciascuno degli attori. 
        Ricorda, gli attori corrispondono ai numeri 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: 'Aggiungi un altro parametro chiamato "velocità" per la funzione "pattuglia". Utilizza un blocco "imposta la velocità" con il nuovo parametro "velocità".'
      Course 4 Play Lab Params 7_instruction: Utilizzare i tasti freccia per controllare il movimento del cane e raccogliere tutte le bandiere.
      Course 4 Play Lab Params 8_instruction: 'Utilizzate un blocco "quando si tocca" per portare il cane in alto a sinistra quando il cane tocca uno qualsiasi degli altri attori.'
      Course 4 Play Lab Params 9_instruction: 'Ecco uno dei giochi di che cui stavamo lavorando in precedenza. Abbiamo aggiunto una funzione chiamata "score_points" che accetta un parametro "punti". Modifica la funzione in modo che il parametro "punti" sia aggiunto alla variabile "player_points". Il cane deve raggiungere i 10 punti per passare al prossimo puzzle. '
      Course 4 Play Lab Vars 1_instruction: 'Non devi scrivere alcun codice. Devi solo premere "Esegui" per giocare! In questo gioco, sei il cane che sta cercando di raccogliere più bandiere del gatto. Utilizza la freccia verso il basso per controllare il cane. Premere "Fine" quando hai finito di giocare.'
      Course 4 Play Lab Vars 2_instruction: 'Non è stata un bella gara! Modificate la variabile "dog_speed" per assicurarsi che vi sia possibile raccogliere più bandiere del gatto. Il primo che raccoglie 10 bandiera vince!'
      Course 4 Play Lab Vars 3_instruction: Ecco un nuovo tipo di gioco! Utilizzate i tasti freccia a sinistra e a destra muovervi e il tasto freccia su per saltare. Verificate se sia possibile raccogliere tutte le bandiere.
      Course 4 Play Lab Vars 4_instruction: 'Ora stiamo usando una variabile chiamata "altezza" per controllare quanto il cane può saltare. Aggiorna la variabile "altezza" in modo che il cane possa saltare abbastanza in alto per raggiungere tutte le bandiere. Suggerimento: le nuove bandiere sono poste a una altezza di 200 pixel.'
      Course 4 Play Lab Vars 5_instruction: 'Costruiamo un gioco! In primo luogo abbiamo bisogno di un punteggio. Utilizzare il blocco di "imposta punteggio a" per impostarlo a 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to shoot hearts.\r\n\r\nIn\nour game, how should we score points? Add 1 to your \"points\" variable each\ntime Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent to trigger an update to your score. You can increment your variable\nby setting \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to pass the level."
      Course 4 Play Lab Vars 7_instruction: 'Bello. Ora facciamo in modo che questo gioco non sia troppo facile - in qualsiasi momento il cane (attore 1) venga colpito da una palla di fuoco, si dovrebbe perdere un punto. Inizia con 10 punti così non è troppo difficile. Lasciate che il vostro punteggio scenda da 10 a 0 per superare il livello.'
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |-
        Bene. Un'ultima cosa per questo gioco. Predisponiamolo in modo che il giocatore possa vincere (o perdere). Usiamo un blocco "ripeti per sempre" per controllare il valore del punteggio. Quando il punteggio diventa maggiore di 20, fai scomparire il nemico. Quando il punteggio diventa 0, fai scomparire il giocatore. Clicca su "Termina" quando il gioco funziona come volevi tu.
      Course 4 Play Lab Vars 8_instruction: 'Predisponiamo ora il gioco in modo che il cane possa vincere (o perdere). Usiamo un blocco "ripeti per sempre" per controllare il valore del punteggio. Quando il punteggio diventa maggiore di 20, fai scomparire il nemico (il gatto). Quando il punteggio diventa 0, fai scomparire il giocatore (il cane). Clicca su "Termina" quando il gioco funziona come volevi tu.'
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables we've played with so far in this stage, as well as a few more in\ncase you want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox that they need to be organized!  Here, we've put each piece into\nan appropriate category.  Take some time to explore everything that is available.\nWhen you're done browsing, make a game or story using repeats, variables,\nand events.  \r\n\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Lab Vars_instruction: |-
        Bene. Un'ultima cosa per questo gioco. Predisponiamolo in modo che il giocatore possa vincere (o perdere). Usiamo un blocco "ripeti per sempre" per controllare il valore del punteggio. Quando il punteggio diventa maggiore di 20, fai scomparire il nemico. Quando il punteggio diventa 0, fai scomparire il giocatore.
      Course 4 Play Labs For Loops 1_instruction: Facciamo parlare il cane in modo che indichi ogni numero da 1 a 100. Usate un ciclo (loop) e il blocco del contatore per fafe in modo che indichi la variabile contatore ogni volta che il ciclo viene eseguito.
      Course 4 Play Labs For Loops 2_instruction: Proviamo ora a contare i numeri dispari da 1 a 100.
      Course 4 Play Labs For Loops 3_instruction: Se stessimo contando per numeri più grandi, potremmo contare ancora nello stesso lasso di tempo. Provate a fare in modo che il cane conti da 10 fino a 1000, di 10 in 10.
      Course 4 Play Labs For Loops 4_instruction: Cambiare il passo può essere utile, ma stiamo ancora contando in modo lineare (la distanza tra due valori successivi è sempre la stessa). Come potremmo fare se volessimo contare in modo esponenziale? Senza cambiare le impostazioni del ciclo con contatore, riesci a contare 1, 4, 9, 16, 25... (il contatore al quadrato)?
      Course 4 Play Labs For Loops 5_instruction: |-
        Nell'ultima fase abbiamo contato il quadrato di ogni numero. Prova a cambiare "contatore ^ 2" in "contatore ^ 3" per contare il cubo di ogni numero (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 6_instruction: 'Ricorda che un numero è primo solo se è divisbile per 1 e per se stesso. Utilizzare la funzione "is_prime" per ottenre solo i numeri primi da 1 a 100.'
      Course 4 Play Labs For Loops 7_instruction: 'Potresti usare un ciclo "per" per aiutarmi a dire la sequenza 1, 4, 7, 10, 13, 16, 19, 22, 25?'
      Course 4 Play Labs For Loops 8_instruction: Quale ciclo con contatore mi farebbe pronunciare la sequenza 19, 27, 35, 43, 51?
      Course 4 Variables Assessment_instruction: È possibile creare questa immagine utilizzando una variabile per i lati? Ogni latio dovrebbe essere lungo 50 pixel.
      Course1BeePuzzle12_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\r\nOne example - and part of the definition -  has\nalready been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |-
        La funzione "ridimensiona" restituisce l'immagine in ingresso ingrandita o rimpicciolita di un certo fattore. Prova a ridimensionare questo cerchio di un fattore 10: l'immagine che ne risulta quanto è diversa dall'immagine che avresti ottenuto disegnando subito un cerchio di quelle dimensioni?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Tempo di giocare: crea qualcosa di artistico col codice!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: "Ora creiamo 20 cerchi sovrapposti, ruotando di 18 gradi tra un cerchio l'altro."
      frozen circle function with parameter_instruction: 'Ecco un blocco "crea cerchio" che può fare cerchi di diverse dimensioni. Puoi usarlo per creare un piccolo di cerchio di dimensione 5 e un cerchio più grande di dimensione 10?'
      frozen circle function_instruction: |-
        Usa il nuovo blocco "crea cerchio" per creare 10 cerchi sovrapposti. Non dimenticare di saltare in avanti tra un cerchio e l'altro.
      frozen circle_instruction: Il cerchio è una forma speciale. Riesci a capire che numero sostituire al posto dei punti interrogativi per disegnare un cerchio?
      frozen cross rotate dense_instruction: 'Ripetiamolo 90 volte! Quante volte il 90 sta in 360? Suggerimento: È un numero molto piccolo.'
      frozen cross rotate_instruction: Adesso prova a ripeterlo 10 volte. Di quanti gradi devi girare tra ogni linea?
      frozen cross_instruction: 'Usa il blocco "ripeti" per creare un segno più. Hai notato che Elsa può muoversi in avanti e indietro?'
      frozen diamond mini snowflake_instruction: 'Lo sapevi che ogni fiocco di neve ha una forma diversa? Creiamo un altro fiocco di neve usando il blocco "ripeti" per ripetere il parallelogramma 4 volte, girando a destra di 90 gradi tra ciascun parallelogramma.'
      frozen diamond snowflake_instruction: 'Adesso, creiamo un altro fiocco di neve usando il blocco "ripeti" per ripetere il parallelogramma 10 volte, girando a destra di 36 gradi tra ciascuno.'
      frozen diamond_instruction: 'Creiamo un parallelogramma. È proprio come un quadrato, ma ha angoli diversi: angoli di 60 e 120 gradi invece di 90 gradi.'
      frozen freeplay_instruction: Sei ufficialmente diventato un mastro artista! Crea un meraviglioso paesaggio invernale.
      frozen line_instruction: Ciao! Sono Elsa di Arendelle. Aiutami a creare una linea.
      frozen perpendicular_instruction: 'Adesso vediamo se possiamo creare due linee a angolo 90 gradi. Dovrai usare il blocco "gira" e anche il blocco "muovi".'
      frozen snowflake branch_instruction: 'Prova a usare il blocco "crea un ramo di fiocco di neve" per creare tre rami, che inizia a sembrare come un vero fiocco di neve.'
      frozen snowflake full_instruction: Adesso ripetiamo 8 volte per creare un magnifico fiocco di neve!
      frozen snowflower_instruction: Disegni intricati possono essere creati usando forme molto semplici. Puoi creare un disegno ripetendo 5 cerchi di dimensione 5 e 5 cerchi di dimensione 10?
      frozen square iterative_instruction: Sembra che siamo a metà strada per creare un quadrato. Mettiamo insieme 4 linee per creare un quadrato.
      frozen square loop 3x_instruction: Creiamo tre quadrati, girando dopo ogni quadrato. Assicurati di girare di 120 gradi prima di ogni quadrato.
      frozen square loop_instruction: 'Ciao, sono Anna di Arendelle! Facciamo un quadrato con il blocco "ripeti", che usa un minor numero di blocchi. Quante volte (???) il blocco "ripeti" deve fare un ciclo dei blocchi al suo interno per ottenere un quadrato?'
      frozen square snowflake_instruction: |-
        Riesci a creare un fiocco di neve usando il blocco "ripeti" per fare un quadrato 10 volte, e il blocco "gira" per girare di 36 gradi tra un quadrato e l'altro?
      hoc2015_free_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      hoc2015_intro_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      hoc2015_maze_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      hoc2015_random_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      hoc2015_sandbox_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      hoc2015_square_instruction: 'Hiro è "attore 1".  Utilizzate il blocco di spostamento per muovere Hiro a destra in modo da toccare Baymax.'
      Infinity_catch_instruction: 'Riesci a fare in modo che Elsa (il "personaggio 2") raggiunga Anna usando i tasti freccia?'
      Infinity_finale_instruction: Crea qualunque cosa ti piaccia e condividila!
      Infinity_move_collide_instruction: 'Hiro è il "personaggio 1". Spostalo verso Baymax e riproduci un suono quando si toccano.'
      Infinity_move_directions_instruction: 'Baymax è il "personaggio 2". Puoi far muovere Baymax  aggiungendo i blocchi "sposta il personaggio 2 in alto" e "sposta il personaggio 2 in basso". Clicca sul pulsante "Esegui" e fai toccare a Baymax gli altri due personaggi usando i tasti freccia.'
      Infinity_move_right_instruction: 'Hiro è il "personaggio 1". Usa il blocco "sposta il personaggio 1" per far spostare Hiro verso destra fino a toccare Baymax.'
      Infinity_repeat_instruction: 'Usa un blocco "ripeti per sempre" per far spostare Anna in continuazione in su e in giù di 400 pixel.'
      Infinity_say_instruction: 'Fai dire "Ciao" ad Anna usando un blocco "pronuncia".'
      Infinity_shoot_instruction: 'Baymax è il "personaggio 2". Fai lanciare a Baymax un razzo contro Hiro.'
      Infinity_shoot_directions_instruction: 'Hiro è il "personaggio 3". Fai in modo che Hiro scagli qualcosa contro ognuno degli altri quattro personaggi. Tra un lancio e il successivo, aspetta un secondo.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Tocca ancora più fiocchi di neve!
      Infinity_touch_four_instruction: Muovi Anna su, giù, a sinistra e a destra per toccare ognuno dei quattro fiocchi di neve.
      Infinity_touch_score_instruction: 'Fai in modo che Anna segni un punto quando tocca un fiocco di neve. Poi clicca su "Esegui" e guidala in modo tale da farle toccare ogni fiocco di neve una sola volta.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: "Disegna una linea breve verso l'alto e una lunga verso destra!"
      K-1 artist 1 level 10_instruction: 'Questo è un esercizio di verifica -- Disegna la linea tratteggiata usando sia i blocchi "salta" che quelli per disegnare.'
      K-1 artist 1 level 9_instruction: 'Questo è un esercizio di verifica -- Disegna la figura usando tre linee.'
      K-1 Artist Loops 1_instruction: "Disegna questa linea spostando 4 volte l'artista verso Est."
      K-1 Artist Loops 2_instruction: 'Riesci a disegnare la stessa linea usando un blocco "ripeti" (detto anche "ciclo")?'
      K-1 Artist Loops 3_instruction: Riesci a ripetere i blocchi già pronti per disegnare le 6 linee in grigio?
      K-1 Artist Loops 4_instruction: 'Un blocco "ripeti", o "ciclo", può aiutarti a disegnare la parte superiore di questo castello?'
      K-1 Artist Loops 5_instruction: Che cosa puoi ripetere per 4 volte per disegnare gli scalini di questo esercizio?
      K-1 Artist Loops 6_instruction: |-
        Per completare questo disegno hai bisogno di due blocchi "ripeti", o "cicli": uno per salire le scale e l'altro per scenderle.
      K-1 Artist Loops 7_instruction: Puoi completare questa figura usando due cicli?
      K-1 Artist Loops 8_instruction: La scala di questo esercizio ha i gradini più larghi.
      K-1 Artist Loops 9_instruction: Usa un ciclo per disegnare gli scalini.
      K-1 Artist Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa di divertente!'
      K-1 Artist1 1_instruction: Disegna il piede della persona con una linea.
      K-1 Artist1 10_instruction: Disegna e Salta per costruire la linea tratteggiata fino al tesoro.
      K-1 Artist1 2_instruction: Disegna il baffo del gatto con due linee!
      K-1 Artist1 3_instruction: Disegna due linee verso est e due linee verso nord per completare la casa!
      K-1 Artist1 4_instruction: Disegna linee in su, in orizzontale, e in basso per completare il castello!
      K-1 Artist1 5.5_instruction: Completa la terza torre del castello usando linee brevi
      K-1 Artist1 5_instruction: Disegna il gambo di questo fiore con due linee!
      K-1 Artist1 6_instruction: 'Il blocco "salta" ti consente di muoverti senza disegnare. Completa il disegno usando il blocco "salta"!'
      K-1 Artist1 7_instruction: 'Usa il blocco "salta" per muoverti senza disegnare. Salta su e disegna una linea.'
      K-1 Artist1 8_instruction: 'Disegna la linea tratteggiata usando sia i blocchi "salta" che quelli per disegnare'
      K-1 Artist1 9_instruction: Disegna e Salta per costruire la linea tratteggiata.
      K-1 Artist1 Assessment 1_instruction: Disegna le linee corte e quelle lunghe!
      K-1 Artist1 Assessment 2_instruction: Disegna le linee corte tratteggiate!
      K-1 Artist2 1_instruction: Disegna un quadrato sotto il triangolo.
      K-1 Artist2 2_instruction: Salta e disegna un quadrato accanto alla casa.
      K-1 Artist2 3_instruction: "Disegna un quadrato sopra l'altro quadrato."
      K-1 Artist2 4_instruction: Disegna un rettangolo per completare il ponte.
      K-1 Artist2 5_instruction: Disegna un rettangolo per completare i pilastri del ponte.
      K-1 Artist2 6_instruction: Disegna due quadrati per costruire un rettangolo!
      K-1 Artist2 Assessment1_instruction: "Questo è un esercizio di verifica -- Salta e disegna un quadrato vicino all'altro quadrato."
      K-1 Artist2 Free Draw_instruction: Disegna qualunque cosa tu voglia disegnare!
      K-1 Artist2_7_instruction: Disegna un rettangolo per dare alla cassettiera il cassetto superiore!
      K-1 Bee 1_instruction: Spostami sul fiore, prendi il nettare, poi fammi arrivare al favo e fai il miele.
      K-1 Bee 10_instruction: Prendi quattro dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 11.5_instruction: Prendi quattro dosi di nettare per fare quattro dosi di miele!
      K-1 Bee 11_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 12_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 13_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 14_instruction: 'Questo è un esercizio di verifica -- Spostami sul fiore, prendi il nettare, poi fammi arrivare al favo e fai il miele.'
      K-1 Bee 15_instruction: 'Questo è un esercizio di verifica -- Prendi due dosi di nettare e fai due dosi di miele!'
      K-1 Bee 2_instruction: Spostami sul fiore, prendi il nettare, poi fammi arrivare al favo e fai il miele.
      K-1 Bee 3_instruction: Spostami sul fiore, prendi il nettare, poi fammi arrivare al favo e fai il miele.
      K-1 Bee 4_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 5_instruction: Prendi tre dosi di nettare e poi fai tre dosi di miele!
      K-1 Bee 6_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 7_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 8_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 9_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee Assessment 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Assessment 2_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 10_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare, fare il miele e spostarti!'
      K-1 Bee Loops 11_instruction: 'Questo è un esercizio di verifica -- Usa i blocchi "ripeti", o "cicli", per prendere il nettare e fare il miele!'
      K-1 Bee Loops 12_instruction: 'Questo è un esercizio di verifica -- Usa i blocchi "ripeti", o "cicli", per prendere il nettare, fare il miele e spostarti!'
      K-1 Bee Loops 2_instruction: 'Usa un blocco "ripeti" (detto anche "ciclo") per muoverti,  quindi raccogli il nettare e fai il miele!'
      K-1 Bee Loops 3_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare e fare il miele!'
      K-1 Bee Loops 4_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare, fare il miele e spostarti!'
      K-1 Bee Loops 5_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare e fare il miele!'
      K-1 Bee Loops 6_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare, fare il miele e spostarti!'
      K-1 Bee Loops 7_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare e fare il miele!'
      K-1 Bee Loops 8_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare e fare il miele!'
      K-1 Bee Loops 9_instruction: 'Usa i blocchi "ripeti" (detti anche "cicli") per prendere il nettare, fare il miele e spostarti!'
      K-1 Bee Loops Assessment 1_instruction: Prendi il nettare per fare il miele e usa i cicli per spostarti!
      K-1 Bee Loops Assessment 2_instruction: Prendi il nettare per fare il miele usando i cicli!
      K-1 Bee Puzzle 12_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele
      K-1 Building a Foundation Assessment_instruction: "Costruisci una piramide a tre livelli, non ci sono altre indicazioni. Gioca un po' con i blocchi finché non riesci a costruirla!"
      k-1 maze 1_instruction: Riesci a spostarmi verso Ovest per prendere il maialino?
      K-1 Maze 10_instruction: Gira intorno alla dinamite (TNT) per farmi prendere il maialino!
      K-1 Maze 11_instruction: 'Fammi fare il percorso per arrivare a quello sciocco maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria! Suggerimento: è a Sud rispetto a me.'
      K-1 Maze 2_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 3_instruction: Spostami verso Sud per farmi prendere il maialino!
      K-1 Maze 4_instruction: Spostami verso Nord per farmi prendere il maialino!
      K-1 Maze 5_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 6_instruction: "Spostami in una direzione e poi in un'altra per farmi prendere il maialino!"
      K-1 Maze 7_instruction: "Spostami in una direzione e poi in un'altra per farmi prendere il maialino!"
      K-1 Maze 8_instruction: "Spostami in una direzione e poi in un'altra per farmi prendere il maialino!"
      K-1 Maze 9_instruction: "Spostami in una direzione e poi in un'altra per farmi prendere il maialino!"
      K-1 Maze Assessment 1_instruction: 'Questo è un esercizio di verifica -- Fammi arrivare al maialino!'
      K-1 Maze Assessment 12_instruction: Esercizio di verifica
      K-1 Maze Assessment 13_instruction: Esercizio di verifica
      K-1 Maze Assessment 2_instruction: 'Questo è un esercizio di verifica -- Fammi arrivare al maialino!'
      K-1 maze debug 1_instruction: Modifica il codice per farmi arrivare al maialino!
      K-1 maze debug 10_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 11_instruction: "Questo è un esercizio di verifica --\r Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!"
      K-1 maze debug 2_instruction: Cerca di capire che cosa manca, quindi aggiungi i blocchi necessari per farmi arrivare al maialino!
      K-1 maze debug 3_instruction: Cerca di capire che cosa va eliminato, quindi rimuovi i blocchi necessari per farmi arrivare al maialino!
      K-1 maze debug 4_instruction: Esegui questi blocchi di codice e poi correggili! Credo che ci sia un errore nel percorso.
      K-1 maze debug 5_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 6_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 7_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 8_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 9_instruction: Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!
      K-1 Maze debug Assessment 1_instruction: "Questo è un esercizio di verifica --\r Correggi questo programma riordinando, aggiungendo o cancellando blocchi, per farmi arrivare al maialino!"
      K-1 Maze Loops 1_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 10_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 11_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 12_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 2_instruction: |-
        Prova ad usare il nuovo blocco "ripeti" (detto anche "ciclo") per farmi arrivare al maialino! Esso mi farà "ripetere", per il numero di volte che hai impostato, tutte le azioni all'interno del blocco.
      K-1 Maze Loops 3_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 4_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 5_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 6_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 7_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 8_instruction: 'Fammi arrivare al maialino! Usa il blocco "ripeti".'
      K-1 Maze Loops 9_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops Assessment 1_instruction: 'Questo è un esercizio di verifica -- Usa i blocchi "ripeti", o "cicli", per farmi arrivare al maialino!'
      K-1 Maze Loops Assessment 2_instruction: 'Questo è un esercizio di verifica -- Usa i blocchi "ripeti", o "cicli", per farmi arrivare al maialino!'
      K-1 Maze Multi 14_instruction: Esercizio di verifica
      K-1 Maze Multi 15_instruction: Esercizio di verifica
      K-1 Maze Sequence Assessment 1_instruction: "Questo è un esercizio di verifica --\r Spostami in una direzione e poi in un'altra per farmi prendere il maialino."
      K-1 Maze Sequence Assessment 2_instruction: "Questo è un esercizio di verifica --\r Spostami in una direzione e poi in un'altra per farmi prendere il maialino!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Disegnare qualcosa di geniale! Il vostro codice viene salvato come un progetto su cui è possibile tornare in qualsiasi momento.
      NEW Course 4 Artist Functions 1_instruction: 'Riesci a disegnare un quadrato con lato di 100 pixels, usando un ciclo ("loop")?'
      NEW Course 4 Artist Functions 10_instruction: 'Premi "modifica" per inserire i blocchi nella definizione della funzione per fare un quadrato di 40 pixel.'
      NEW Course 4 Artist Functions 11_instruction: |-
        Abbiamo una nuova funzione denominata "disegna un lato del quadrato". Date un'occhiata all'interno al codice della funzione per vedere come l'abbiamo costruita. Fai clic su "Esegui" quando sei pronto per il prossimo puzzle.
      NEW Course 4 Artist Functions 12_instruction: |-
        Utilizzate la funzione di per tracciare una linea dei quadrati, usata dall'ultimo puzzle, per disegnare questo modello."
      NEW Course 4 Artist Functions 13_instruction: 'Riesci a disegnare una stella usando la funzione "disegna una serie di quadrati"? Suggerimento: potrebbe essere necessario andare avanti di 60 pixel e ruotare di 144 gradi'
      NEW Course 4 Artist Functions 14_instruction: 'Tempo di giocare! '
      NEW Course 4 Artist Functions 2_instruction: 'Sapresti disegnare 3 quadrati ciascuno distanziato di 20 pixels? Suggerimento: ogni quadrato è largo 100 pixels'
      NEW Course 4 Artist Functions 3_instruction: 'Ecco un nuovo tipo di blocco. Si chiama "funzione". Fai clic su "Esegui" per vedere cosa fa. Poi, se sei curioso, clicca su "modifica" per vedere come lo realizza. Altrimenti prosegui, lo vedrai più avanti.'
      NEW Course 4 Artist Functions 4_instruction: 'Utilizza la funzione "disegna un quadrato" per disegnare questo modello. Suggerimento: si dovrà utilizzare un blocco "gira a destra 120 gradi" dopo ogni quadrato.'
      NEW Course 4 Artist Functions 5_instruction: 'Come sapeva il blocco "disegna un quadrato" quali comandi per eseguire? Clicca su "modifica" del blocco della funzione "disegna un quadrato". I diversi blocchi della funzione definiscono come "disegnare un quadrato". Quando hai finito, fai clic su "Salva e Chiudi" e poi su "Esegui".'
      NEW Course 4 Artist Functions 6_instruction: "Utilizzando il blocco funzione \"disegna un quadrato\", potete disegnare questa immagine? Suggerimento: ogni quadrato è separato di 20 pixel.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |-
        Stai imparando ad usare i blocchi di funzione? Modifica questo quadrato in modo che abbia le dimensioni di 200 pixel. Suggerimento: clicca su "modifica" per cambiare le dimensioni nell'editor della funzione "disegna un quadrato". Ricorda di cliccare su "salva e chiudi" per uscire dall'editor della funzione. 
      NEW Course 4 Artist Functions 8_instruction: Vi abbiamo dato la maggior parte del codice necessario a creare una funzione. Tuttavia sembra esserci qualcosa che manca. Modificate la definizione di funzione per disegnare il triangolo.
      NEW Course 4 Artist Functions 9_instruction: Quale blocco è necessario aggiungere per ottenere il triangolo posto sopra al quadrato?
      NEW Course 4 Artist Functions inspire_instruction: "Free Play Inspiration:\nYou've now learned everything you need to know to make a pattern like this!\nIf this picture inspires you, try to make something similar. Otherwise, create\nsomething all your own.\r\n \r\nWant to know how our inspiration pattern was\nmade? Visit https://studio.code.org/c/106387801 for the solution."
      New Course 4 Artist Functions Level 4_instruction: 'Utilizzate la funzione "disegna un quadrato" per disegnare questo modello.'
      NEW Course 4 Artist Params 1_instruction: 'Definiamo ora  una funzione per disegnare un quadrato con lati di 50 pixel. Fare clic su "modifica" per iniziare.'
      NEW Course 4 Artist Params 10_instruction: 'Create un blocco di funzione "disegnare un esagono" con un parametro per la lunghezza. Suggerimento: questo esagono ha il lato di 100 pixel. '
      NEW Course 4 Artist Params 11_instruction: 'Riesci a figurarti come disegnare questa forma? Modificare la funzione per utilizzare il parametro "lati".'
      NEW Course 4 Artist Params 12_instruction: "E' possibile completare questo disegno? I lati di tutte le forme sono lunghi 100 pixel."
      NEW Course 4 Artist Params 12a_instruction: "Questa immagine è simile all'ultima. Potete utilizzare un ciclo for con la funzione in modo da riprodurre questo disegno?"
      NEW Course 4 Artist Params 13_instruction: "Modifichiamo ora la funzione per disegnare una figura. La funzione ha già un parametro per la lunghezza. Aggiungiamo alla funzione un parametro per definire il numero dei lati. Ricorda che l'angolo da utilizzare per una figura è dato da 360 diviso il suo numero dei lati. Suggerimento: le lunghezza per ogni figura sono 100 pixel per il triangolo, 25 pixel per l'esagono e 50 pixel per il quadrato."
      NEW Course 4 Artist Params 14_instruction: 'Riuscite a ricreare queste forme? Trascinare il parametro "lunghezza" nella definizione della funzione. '
      NEW Course 4 Artist Params 15_instruction: Gioco libero. Ecco sono le funzioni che hai scritto e delle altre con cui poete giocare. Disegnate qualcosa di incredibile!
      NEW Course 4 Artist Params 2_instruction: 'Crea da zero una funzione "disegna un triangolo di 50 pixel di lato"'
      NEW Course 4 Artist Params 3_instruction: "Ora usiamo la funzione per disegnare 3 triangoli dall'ultimo puzzle in fila. Suggerimento: ogni triangolo varia di 50 pixel.\r\n"
      NEW Course 4 Artist Params 4_instruction: 'Notate qualcosa di diverso in questi blocchi di funzione? Fare clic su "Esegui" per vedere cosa succede.'
      NEW Course 4 Artist Params 5_instruction: 'Compilare il campo ??? nel blocco di input del parametro lunghezza. Suggerimento: Il pentagono ha dimensioni di 100 pixel. '
      NEW Course 4 Artist Params 6_instruction: |-
        Compilate il parametro "lunghezza" per disegnare queste forme sostituendo a "???" i valori corretti. Il quadrato e il triangolo hanno le dimensioni di 100 pixel e l'esagono è di 75 pixel.
      NEW Course 4 Artist Params 7_instruction: 'Puoi completare questo disegno? Suggerimento: ogni triangolo è 25 pixel più grande del precedente.  Il primo triangolo ha le dimensioni di 25 pixel.'
      NEW Course 4 Artist Params 8_instruction: Il codice della funzione per la costrruzione del triangolo non è corretto. Modificate la funzione per risolvere il problema e poi creatye dei triangoli con le misure di 25, 50 e 75.
      NEW Course 4 Artist Params 9_instruction: 'Fai clic su "modifica" per completare la definizione della funzione che disegna il quadrato e aggiungi un parametro. Dovrebbe usare un parametro di lunghezza, proprio come per il triangolo. Questa volta, disegnare 3 quadrati: di 25, 50 e 75 pixel in lunghezza e che distano tra loro 100 pixel.'
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow learned everything you need to know to make a pattern like this! If this\npicture inspires you, try to make something similar. Otherwise, create something\nall your own.\r\n \r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387530 for the solution."
      NEW Course 4 Artist Vars 1.5_instruction: |-
        Date un'occhiata al codice. Potete vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano insieme? Clicca su "Esegui" per vederlo in azione. 
      NEW Course 4 Artist Vars 12_instruction: 'Modificare questo algoritmo in modo che utilizzati la variabile "lati" invece di un numero fisso per disegnare un pentagono. Sostituite il numero 5 con la variabile "lati" e utilizzate il blocco "imposta i lati".'
      NEW Course 4 Artist Vars 2.5_instruction: |-
        Date un'occhiata al codice. Potete vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano insieme? Clicca su "Esegui" per vederlo in azione. 
      NEW Course 4 Artist Vars 2_instruction: 'Trascina un blocco numerico sul blocco "imposta lunghezza" in modo da disegnare un insieme di triangoli da 50 pixel. '
      NEW Course 4 Artist Vars 4 5_instruction: "Lavoro impressionante sull'ultimo puzzle, proviamo di nuovo facendo stavolta questo fenomenale disegno utilizzando esagoni di 60 pixel."
      NEW Course 4 Artist Vars 4_instruction: Proviamo di nuovo. Adesso facciamo questo fenomenale disegno utilizzando esagoni di 60 pixel.
      NEW Course 4 Artist Vars 6_instruction: 'Mi potete aiutare a disegnare questo modello inserendo il blocco della variabile "lunghezza" nel posto giusto?'
      NEW Course 4 Bee For Loops 1_instruction: 'Usa un clico ("loop") per raccogliere il nettare da ogni fiore.'
      NEW Course 4 Bee For Loops 10_instruction: 'Usa la variabile "contatore" del ciclo per controllare lo spostamento in senso orizzontale.'
      NEW Course 4 Bee For Loops 10a_instruction: 'Pronto per una sfida?  Dovete usare tutto quello che avete imparato sui cicli (loop) e cercare di risolvere questo problema. Potrebbe essere necessario eseguire la tua soluzione più volte prima di capire tutti i passaggi necessari.'
      NEW Course 4 Bee For Loops 11_instruction: È possibile utilizzare la variabile del ciclo per controllare il movimento e la raccolta di nettare?
      NEW Course 4 Bee For Loops 2_instruction: "Aggiungi il codice necessario per assicurarti che l'ape raccolga tutto il nettare. Guarda la quantità di codice necessaria per questo puzzle! (vedremo una soluzione più semplice nel prossimo puzzle)"
      NEW Course 4 Bee For Loops 3_instruction: |-
        Grazia all'uso di ciclo (loop) tutto è molto più facile! Il codice necessario è a tua disposizione. Osserva come è stato messo insieme e, quindi, fai clic su "Esegui" per vedere come funziona. 
      NEW Course 4 Bee For Loops 4 4_instruction: |-
        Potete aiutare l'ape a raccogliere il resto del miele usando questo ciclo "for"? 
      NEW Course 4 Bee For Loops 4_instruction: "Sostituite il ??? nel ciclo con la più grande quantità di nettare l'ape deve raccogliere. "
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: 'È inoltre possibile utilizzare un ciclo "for" per il conto alla rovescia. Provate a raccogliere il nettare con un conto alla rovescia da 5 a 1 di 1.'
      NEW Course 4 Bee For Loops 6_instruction: "L'ultimo numero del ciclo indica l'incremento e ogni volta che il ciclo viene eseguite la variabile contatore aumenta dell'incremento indicato. Provate a raccogliere questi fiori usando un valore 2 per l'incremento."
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable with a math block! How can you use the \"counter\" variable to navigate\nthis garden with the fewest number of blocks possible? What do you need to\ndo to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember: If your loop is counting up, the increment is added\nto your \"counter\" variable each time through."
      NEW Course 4 Bee For Loops 8_instruction: "Se il ciclo esegue il conteggio, l'incremento viene aggiunto alla variabile contatore a ogni ciclo. Quale dovrebbe essere l'incremento per raccogliere 3, 6, 9 di nettare? \r\n"
      NEW Course 4 Bee For Loops 9_instruction: "Se il ciclo è conto alla rovescia, l'incremento viene sottratto dalla variabile contatore a ogni ciclo. Quale dovrebbe essere l'incremento per raccogliere 9, poi 6 e poi 3 di nettare?"
      NEW Course 4 Bee For Loops 95_instruction: "Date un'occhiata a ogni parre del ciclo for che hai appena creato.  Puoi capire quali numeri si devono raddoppiare per risolvere questo puzzle? Perché funziona?"
      NEW Course 4 Play Lab Params 11_instruction: 'È tempo di giocare! Divertiti usando tutti i blocchi presenti nella vostra cassetta degli attrezzi. '
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Che cosa pensi faccia questo codice? Premere "Esegui" per vedere cosa succede."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Utilizzando quello che hai imparato finora, si può fare in modo che il dinosauro faccia un passo in avanti ogni volta che il pinguino conta?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'È tempo di giocare. Divertiti con tutti i blocchi della cassetta degli attrezzi. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Sfida. Come useresti il ciclo for per fare in kodo che ogni ogni attore vada in giro e dica il che gli corrisponde per poi sparire dallo schermo? '
      New Play Lab Project_instruction: Create la vostra storia o il vostro gioco! Il codice viene salvato come un progetto ed è possibile tornarci in qualsiasi momento.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n  \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |-
        Le funzioni ti permettono di definire nuovi blocchi! Abbiamo spostato i blocchi per disegnare un quadrato all'interno di una funzione chiamata "disegna un quadrato". Puoi usare la funzione "disegna un quadrato" per creare gli occhiali?  I quadrati sono distanti 75 pixel.
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Ghianda! Ghianda! Ghianda! Usa un blocco "se" per condurmi là con il minor numero di blocchi.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Ok, facciamolo ancora una volta per far pratica - non è molto diverso da prima, ma fai attenzione al muro!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |-
        Il blocco "se-altrimenti" controlla una condizione: SE è vera fa una cosa ALTRIMENTI ne fa un'altra. Prova ad usare questo nuovo blocco per farmi arrivare alla ghianda.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Ancora un esercizio con il blocco "se-altrimenti": riesci a risolverlo correttamente al primo tentativo?'
      scrat 20_instruction: Riesci ad aggiungere solo 3 blocchi per farmi uscire da un labirinto più complesso? Se lo fai correttamente, riuscirò a camminare lungo un percorso tortuoso di qualsiasi lunghezza. Fai in fretta! Il ghiaccio si sta sciogliendo!
      SpecialFrozenLevel_instruction: Sei ufficialmente diventato un mastro artista! Crea un meraviglioso paesaggio invernale.
      Standalone_Artist_1_instruction: |-
        Benvenuto all'Artista! Prima di tutto, cerchiamo di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      Standalone_Artist_2_instruction: Disegna questo rombo che ha gli angoli da 120 e 60 gradi e i lati lunghi 100 pixel.
      Standalone_Artist_3_instruction: Come fai a disegnare questo esagono che ha i lati lunghi 100 pixel e gli angoli da 60 gradi?
      Standalone_Artist_4_instruction: |-
        Adesso c'è il nuovo blocco "ripeti 6 volte". Questo blocco di ripetizione, detto anche "ciclo", ripete 6 volte quello che si trova al suo interno. Cosa succede se si ripete 6 volte il codice in grigio che trovi già pronto?
      Standalone_Artist_5.5_instruction: 'Osserva come abbiamo semplificato il codice utilizzando il blocco "ripeti ... volte" (ciclo). Per disegnare un fiore devi adesso ripetere per 12 volte tutta la sequenza di blocchi in grigio. Attenzione: ruota di 30 gradi dopo ogni ciclo del rombo altrimenti disegni sempre la stessa figura.'
      Standalone_Artist_5_instruction: Quante volte è necessario ripetere il codice che trovi già pronto per disegnare il fiore?
      Standalone_Artist_6_instruction: "Ripeti 6 volte il codice che trovi già pronto (che disegna un esagono) per realizzare l'intera figura. Di quanti gradi devi girare ogni volta? Suggerimento: dividi il numero di gradi di un cerchio per il numero di ripetizioni."
      Standalone_Artist_7_instruction: 'Una funzione è un altro strumento di programmazione che aiuta ad evitare inutili ripetizioni. Questa funzione disegna un fiore, e puoi usarla ogni volta che vuoi disegnare un fiore. Usala insieme al nuovo blocco "salta" per disegnare questi fiori. Suggerimento: i fiori sono distanti tra loro 150 pixel.'
      Standalone_Artist_8_instruction: 'Qui trovi la funzione "disegna una forma" che è stata costruita in modo che disegni degli esagoni. Clicca su "Esegui" per vedere cosa fa il codice che trovi già pronto e poi fai degli esperimenti per vedere cosa succede. Puoi variare la funzione in modo che disegni una composizione di quadrati, triangoli o ottagoni? Cosa succede se vari anche altri valori?'
      Standalone_Artist_9_instruction: Ora continua e realizza qualsiasi figura desideri! Hai anche una funzione vuota che puoi riempire a tuo piacere!
      Standalone_Artist_v2_instruction: |-
        Benvenuto all'Artista! Prima di tutto, cerchiamo di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      Test Play Lab_instruction: This is a test play lab level.
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly 6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: |
        Create a turnRight()
        function and draw a rectangle twice as tall as it is wide by having the turtle
        navigate clockwise to draw the rectangle. 
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with other movement made between calls.  HINT: you might want\nto make another function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: |
        Drag a button out onto the screen
        and set its text to "Go forth!".  Add an event handler for the button, that
        makes the turtle move forward.  Run the program to make sure it works. 
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd event handler to textInput with the event type ‘input’ that shows\nthe “Say hi” button when that event occurs.\r\nAdd event handler to button\nso that on click, it writes a hello message to the screen and hides the textInput\nand button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        We'll be building upon some simple
        starting code throughout this lesson.  Your first task: use moveTo and randomNumber
        to get the turtle to move to a random location with each button click.  We've
        given you starting code for our common setup: a button that moves the turtle
        when clicked.  You should modify this code.  
      U3L16 - text labels_instruction: |
        Introducing textLabels.  First try replacing
        your button with a textLabel.  Will the text respond to events just like the
        button?  Try connecting an event handler to it.  We've started you out with
        code similar to the result of the last level, you can copy your code from
        that level into here if you prefer. 
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto foo to see the string change. \r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe error and get the program to run.  Also note the error message since it\nmight come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis an example of the kind of app we want to make.  Study this for the elements\ncontained in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1. what happens when you click on the Code.org logo? \r\n2. What happens\nwhen you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements contained in this app appear to be simple, and they are in some ways.\nHowever, the computing principles involved - controlling and keeping track\nof things in memory while the program is running - get into some deeper issues\nof programming and computer science in general.  There are some devilish details\nand paths that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep this app in mind as you go through the different levels in this lesson.  It\nmight seem like you need to learn a lot in order to get this simple thing\nworking.  But it's worth taking the time to understand at a deeper level\nwhat is going on.  Because this one topic: controlling memory leads to many\npossible misunderstandings about coding, and how computers work.  We want\nto make sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough the issues.  Read the explanations.  You'll come out on the other\nside a better programmer with much deeper knowledge and understanding of how\nthings work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou the three lines of code shown in the previous page.  Add three lines of\ncode just below the ones shown here to make your own variable, assign it a\nvalue and write it to the screen.  NOTE: change the variable name from the\ndefault x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: |
        Here is the code from
        previous page that has a subtle problem with it.  FIRST: run the app and try
        it to see the problem. NOTE: NaN stands for "Not a Number".   DO THIS: figure
        out what's happening, where, and fix the problem.  We'll explain the issue
        on the next page. 
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Adjust the "if" block to make
        the bot respond "That's the color of the sky!" if the user inputs the color
        "blue".
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |
        Replace all instances of `str.indexOf("word")`
        with a function `contains(sentence, word)` that returns true if the word is
        in the sentence and returns false otherwise.
      U3L24 Nested Conditionals 2_instruction: |
        Use a nested conditional to respond
        to the category "pizza" and the details "Hawaiian," "vegan," and "meat."
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Inside the findingNemo function, write a conditional
        statement that detects if a command contains all the phrases "2000" "animated"
        and "G-rated." The function should return true if the above conditions are
        met and return false otherwise
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Inside the isBest function, write a conditional
        statement that detects if a command contains at least one of the phrases "all
        time" "all-time" "overall" or "millennium." The function should return
        true if the above conditions are met and return false otherwise
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
